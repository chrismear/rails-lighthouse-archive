<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-08-12T00:14:50+01:00</created-at>
  <creator-id type="integer">41535</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3037</number>
  <permalink>timecurrentutc_offset-and-timezoneutc_offset-are-different-during-dst</permalink>
  <priority type="integer">131191</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>Time.current.utc_offset and Time.zone.utc_offset are different during DST</title>
  <updated-at type="datetime">2010-10-11T10:54:31+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">9</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Vladimir Andrijevik</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3037</url>
  <priority-name nil="true"></priority-name>
  <original-body>Asking a TimeZone for its utc_offset, and a TimeWithZone object in the same TimeZone for its utc_offset return different results. For example:

@@@ ruby
  &gt;&gt; Time.zone = &quot;Eastern Time (US &amp; Canada)&quot;
  =&gt; &quot;Eastern Time (US &amp; Canada)&quot;
  &gt;&gt; Time.zone.utc_offset
  =&gt; -18000
  &gt;&gt; Time.current.utc_offset
  =&gt; -14400
@@@

The offending code is in `ActiveSupport::TimeZone#utc_offset`:

@@@ ruby
  def utc_offset
    @utc_offset ||= tzinfo.current_period.utc_offset
  end
@@@

In contrast, `ActiveSupport::TimeWithZone#utc_offset` calls `utc_total_offset` on the underlying period:

@@@ ruby
  def utc_offset
    period.utc_total_offset
  end
@@@

I believe the implementation in `ActiveSupport::TimeWithZone#utc_offset` is correct, and propose that `TimeZone`'s implementation also call `utc_total_offset`. This way, the two offsets match each other, and match the offset displayed when calling `Time.current`.</original-body>
  <latest-body>Asking a TimeZone for its utc_offset, and a TimeWithZone object in the same TimeZone for its utc_offset return different results. For example:

@@@ ruby
  &gt;&gt; Time.zone = &quot;Eastern Time (US &amp; Canada)&quot;
  =&gt; &quot;Eastern Time (US &amp; Canada)&quot;
  &gt;&gt; Time.zone.utc_offset
  =&gt; -18000
  &gt;&gt; Time.current.utc_offset
  =&gt; -14400
@@@

The offending code is in `ActiveSupport::TimeZone#utc_offset`:

@@@ ruby
  def utc_offset
    @utc_offset ||= tzinfo.current_period.utc_offset
  end
@@@

In contrast, `ActiveSupport::TimeWithZone#utc_offset` calls `utc_total_offset` on the underlying period:

@@@ ruby
  def utc_offset
    period.utc_total_offset
  end
@@@

I believe the implementation in `ActiveSupport::TimeWithZone#utc_offset` is correct, and propose that `TimeZone`'s implementation also call `utc_total_offset`. This way, the two offsets match each other, and match the offset displayed when calling `Time.current`.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Asking a TimeZone for its utc_offset, and a TimeWithZone object
in the same TimeZone for its utc_offset return different results.
For example:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  &amp;gt;&amp;gt; Time.zone = &amp;quot;Eastern Time (US &amp;amp; Canada)&amp;quot;
  =&amp;gt; &amp;quot;Eastern Time (US &amp;amp; Canada)&amp;quot;
  &amp;gt;&amp;gt; Time.zone.utc_offset
  =&amp;gt; -18000
  &amp;gt;&amp;gt; Time.current.utc_offset
  =&amp;gt; -14400
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The offending code is in
&lt;code&gt;ActiveSupport::TimeZone#utc_offset&lt;/code&gt;:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def utc_offset
    @utc_offset ||= tzinfo.current_period.utc_offset
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In contrast, &lt;code&gt;ActiveSupport::TimeWithZone#utc_offset&lt;/code&gt;
calls &lt;code&gt;utc_total_offset&lt;/code&gt; on the underlying period:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def utc_offset
    period.utc_total_offset
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I believe the implementation in
&lt;code&gt;ActiveSupport::TimeWithZone#utc_offset&lt;/code&gt; is correct, and
propose that &lt;code&gt;TimeZone&lt;/code&gt;'s implementation also call
&lt;code&gt;utc_total_offset&lt;/code&gt;. This way, the two offsets match each
other, and match the offset displayed when calling
&lt;code&gt;Time.current&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Asking a TimeZone for its utc_offset, and a TimeWithZone object in the same TimeZone for its utc_offset return different results. For example:

@@@ ruby
  &gt;&gt; Time.zone = &quot;Eastern Time (US &amp; Canada)&quot;
  =&gt; &quot;Eastern Time (US &amp; Canada)&quot;
  &gt;&gt; Time.zone.utc_offset
  =&gt; -18000
  &gt;&gt; Time.current.utc_offset
  =&gt; -14400
@@@

The offending code is in `ActiveSupport::TimeZone#utc_offset`:

@@@ ruby
  def utc_offset
    @utc_offset ||= tzinfo.current_period.utc_offset
  end
@@@

In contrast, `ActiveSupport::TimeWithZone#utc_offset` calls `utc_total_offset` on the underlying period:

@@@ ruby
  def utc_offset
    period.utc_total_offset
  end
@@@

I believe the implementation in `ActiveSupport::TimeWithZone#utc_offset` is correct, and propose that `TimeZone`'s implementation also call `utc_total_offset`. This way, the two offsets match each other, and match the offset displayed when calling `Time.current`.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Asking a TimeZone for its utc_offset, and a TimeWithZone object
in the same TimeZone for its utc_offset return different results.
For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  &amp;gt;&amp;gt; Time.zone = &quot;Eastern Time (US &amp;amp; Canada)&quot;
  =&amp;gt; &quot;Eastern Time (US &amp;amp; Canada)&quot;
  &amp;gt;&amp;gt; Time.zone.utc_offset
  =&amp;gt; -18000
  &amp;gt;&amp;gt; Time.current.utc_offset
  =&amp;gt; -14400&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The offending code is in
&lt;code&gt;ActiveSupport::TimeZone#utc_offset&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  def utc_offset
    @utc_offset ||= tzinfo.current_period.utc_offset
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In contrast, &lt;code&gt;ActiveSupport::TimeWithZone#utc_offset&lt;/code&gt;
calls &lt;code&gt;utc_total_offset&lt;/code&gt; on the underlying period:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  def utc_offset
    period.utc_total_offset
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I believe the implementation in
&lt;code&gt;ActiveSupport::TimeWithZone#utc_offset&lt;/code&gt; is correct, and
propose that &lt;code&gt;TimeZone&lt;/code&gt;'s implementation also call
&lt;code&gt;utc_total_offset&lt;/code&gt;. This way, the two offsets match each
other, and match the offset displayed when calling
&lt;code&gt;Time.current&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-12T00:14:50+01:00</created-at>
      <creator-id type="integer">41535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3037</number>
      <permalink>timecurrentutc_offset-and-timezoneutc_offset-are-different-during-dst</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Time.current.utc_offset and Time.zone.utc_offset are different during DST</title>
      <updated-at type="datetime">2009-08-12T00:15:50+01:00</updated-at>
      <user-id type="integer">41535</user-id>
      <version type="integer">1</version>
      <user-name>Vladimir Andrijevik</user-name>
      <creator-name>Vladimir Andrijevik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3037</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-25T12:54:27+01:00</created-at>
      <creator-id type="integer">41535</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3037</number>
      <permalink>timecurrentutc_offset-and-timezoneutc_offset-are-different-during-dst</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash</tag>
      <title>Time.current.utc_offset and Time.zone.utc_offset are different during DST</title>
      <updated-at type="datetime">2009-09-25T12:54:29+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">2</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Vladimir Andrijevik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3037</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Verified that it's only a problem in DST.

@@@
  john-mbp:rails john$ ruby script/console 
  Loading development environment (Rails 3.0.pre)
  /Users/john/projects/rails/rails/config/environment.rb:11: warning: already initialized constant Application
  &gt;&gt; Time.zone = &quot;Eastern Time (US &amp; Canada)&quot;
  =&gt; &quot;Eastern Time (US &amp; Canada)&quot;
  &gt;&gt; Time.now
  =&gt; Sat Sep 26 11:19:42 -0400 2009
  &gt;&gt; Time.zone.utc_offset
  =&gt; -18000
  &gt;&gt; Time.current.utc_offset
  =&gt; -14400
  &gt;&gt; require 'timecop'
  =&gt; []
  &gt;&gt; Timecop.travel(2009, 12, 12)
  =&gt; Sat Dec 12 00:00:00 -0500 2009
  &gt;&gt; Time.zone.utc_offset
  =&gt; -18000
  &gt;&gt; Time.current.utc_offset
  =&gt; -18000
@@@

Using Timecop to move ahead to Dec, these two methods do in fact return the same value.  It would appear that Vladimir's assertion that they should both return 14400 during DST is correct.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Verified that it's only a problem in DST.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  john-mbp:rails john$ ruby script/console 
  Loading development environment (Rails 3.0.pre)
  /Users/john/projects/rails/rails/config/environment.rb:11: warning: already initialized constant Application
  &amp;gt;&amp;gt; Time.zone = &quot;Eastern Time (US &amp;amp; Canada)&quot;
  =&amp;gt; &quot;Eastern Time (US &amp;amp; Canada)&quot;
  &amp;gt;&amp;gt; Time.now
  =&amp;gt; Sat Sep 26 11:19:42 -0400 2009
  &amp;gt;&amp;gt; Time.zone.utc_offset
  =&amp;gt; -18000
  &amp;gt;&amp;gt; Time.current.utc_offset
  =&amp;gt; -14400
  &amp;gt;&amp;gt; require 'timecop'
  =&amp;gt; []
  &amp;gt;&amp;gt; Timecop.travel(2009, 12, 12)
  =&amp;gt; Sat Dec 12 00:00:00 -0500 2009
  &amp;gt;&amp;gt; Time.zone.utc_offset
  =&amp;gt; -18000
  &amp;gt;&amp;gt; Time.current.utc_offset
  =&amp;gt; -18000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Using Timecop to move ahead to Dec, these two methods do in fact
return the same value. It would appear that Vladimir's assertion
that they should both return 14400 during DST is correct.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-26T16:23:33+01:00</created-at>
      <creator-id type="integer">41535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3037</number>
      <permalink>timecurrentutc_offset-and-timezoneutc_offset-are-different-during-dst</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash</tag>
      <title>Time.current.utc_offset and Time.zone.utc_offset are different during DST</title>
      <updated-at type="datetime">2009-09-26T16:23:34+01:00</updated-at>
      <user-id type="integer">24346</user-id>
      <version type="integer">3</version>
      <user-name>John Trupiano</user-name>
      <creator-name>Vladimir Andrijevik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3037</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Now that I think about this further, I'm not sure that a change is warranted.  A TimeZone object exists outside of the context of an actual Time instance.  It's somewhat arbitrary to return its utc_offset based on Time.now.  In essence, I don't think a TimeZone should consult &quot;now&quot; when asked for its offset.  A TimeWithZone object carries with it a specific Time instance, and so it makes sense for it to take DST into account.

-1 on changing this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Now that I think about this further, I'm not sure that a change
is warranted. A TimeZone object exists outside of the context of an
actual Time instance. It's somewhat arbitrary to return its
utc_offset based on Time.now. In essence, I don't think a TimeZone
should consult &quot;now&quot; when asked for its offset. A TimeWithZone
object carries with it a specific Time instance, and so it makes
sense for it to take DST into account.&lt;/p&gt;
&lt;p&gt;-1 on changing this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-26T16:30:58+01:00</created-at>
      <creator-id type="integer">41535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3037</number>
      <permalink>timecurrentutc_offset-and-timezoneutc_offset-are-different-during-dst</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash</tag>
      <title>Time.current.utc_offset and Time.zone.utc_offset are different during DST</title>
      <updated-at type="datetime">2009-09-26T16:31:02+01:00</updated-at>
      <user-id type="integer">24346</user-id>
      <version type="integer">4</version>
      <user-name>John Trupiano</user-name>
      <creator-name>Vladimir Andrijevik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3037</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 verified

Given I don't misunderstand I'll have to disagree with John. I took a look at the docs for Time.current() ...

@@@ plain
Returns Time.zone.now when config.time_zone is set, otherwise just returns Time.now.
@@@

and Time.zone() ...

@@@ plain
Returns the TimeZone for the current request, if this has been set (via Time.zone=).
@@@

... and concluded that since Time.current() depends on Time.zone() they should have the same utc_offset. Please do correct me if I'm wrong, though.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 verified&lt;/p&gt;
&lt;p&gt;Given I don't misunderstand I'll have to disagree with John. I
took a look at the docs for Time.current() ...&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;plain&quot;&gt;Returns Time.zone.now when config.time_zone is set, otherwise just returns Time.now.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and Time.zone() ...&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;plain&quot;&gt;Returns the TimeZone for the current request, if this has been set (via Time.zone=).&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;... and concluded that since Time.current() depends on
Time.zone() they should have the same utc_offset. Please do correct
me if I'm wrong, though.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-26T18:31:41+01:00</created-at>
      <creator-id type="integer">41535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3037</number>
      <permalink>timecurrentutc_offset-and-timezoneutc_offset-are-different-during-dst</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash</tag>
      <title>Time.current.utc_offset and Time.zone.utc_offset are different during DST</title>
      <updated-at type="datetime">2009-09-26T18:31:44+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">5</version>
      <user-name>David Trasbo</user-name>
      <creator-name>Vladimir Andrijevik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3037</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>My point is that a TimeZone object exists in the absence of a specific time.  It's a matter of responsibility.  A TimeZone should only take DST into account if it's asked for its utc_offset in the context of a specific Time.  Since this is not the case when calling Time.zone, it shouldn't just arbitrarily choose to consult Time.now to determine whether or not to include DST in its calculation.  

At no point does a call to Time.zone.utc_offset indicate the exact Time against which you want the utc_offset to be evaluated.  If we instead had a function like Time.zone.utc_offset_for_time(a_time), then I'd say yes, we should be including DST in the offset.

Anyone else feel strongly about this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;My point is that a TimeZone object exists in the absence of a
specific time. It's a matter of responsibility. A TimeZone should
only take DST into account if it's asked for its utc_offset in the
context of a specific Time. Since this is not the case when calling
Time.zone, it shouldn't just arbitrarily choose to consult Time.now
to determine whether or not to include DST in its
calculation.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;At no point does a call to Time.zone.utc_offset indicate the
exact Time against which you want the utc_offset to be evaluated.
If we instead had a function like
Time.zone.utc_offset_for_time(a_time), then I'd say yes, we should
be including DST in the offset.&lt;/p&gt;
&lt;p&gt;Anyone else feel strongly about this?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-26T18:40:47+01:00</created-at>
      <creator-id type="integer">41535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3037</number>
      <permalink>timecurrentutc_offset-and-timezoneutc_offset-are-different-during-dst</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash</tag>
      <title>Time.current.utc_offset and Time.zone.utc_offset are different during DST</title>
      <updated-at type="datetime">2009-09-26T18:40:48+01:00</updated-at>
      <user-id type="integer">24346</user-id>
      <version type="integer">6</version>
      <user-name>John Trupiano</user-name>
      <creator-name>Vladimir Andrijevik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3037</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>TimeZone#utc_offset (called when you call Time.zone.utc_offset) returns just the base UTC offset for the time zone; it doesn't take DST into consideration.

This offset for user friendly display in time_zone_select. For example, the display of &quot;Central Time (US &amp; Canada) is &quot;(GMT-06:00) Central Time (US &amp; Canada)&quot;. This offset should not change over the course of the year -- it should always be GMT-06:00.</body>
      <body-html>&lt;div&gt;&lt;p&gt;TimeZone#utc_offset (called when you call Time.zone.utc_offset)
returns just the base UTC offset for the time zone; it doesn't take
DST into consideration.&lt;/p&gt;
&lt;p&gt;This offset for user friendly display in time_zone_select. For
example, the display of &quot;Central Time (US &amp;amp; Canada) is
&quot;(GMT-06:00) Central Time (US &amp;amp; Canada)&quot;. This offset should
not change over the course of the year -- it should always be
GMT-06:00.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-10-27T02:27:28+00:00</created-at>
      <creator-id type="integer">41535</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3037</number>
      <permalink>timecurrentutc_offset-and-timezoneutc_offset-are-different-during-dst</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>bugmash</tag>
      <title>Time.current.utc_offset and Time.zone.utc_offset are different during DST</title>
      <updated-at type="datetime">2009-10-27T02:27:31+00:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">7</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>Vladimir Andrijevik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3037</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-11T10:54:27+01:00</created-at>
      <creator-id type="integer">41535</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: bugmash
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3037</number>
      <permalink>timecurrentutc_offset-and-timezoneutc_offset-are-different-during-dst</permalink>
      <priority type="integer">131191</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Time.current.utc_offset and Time.zone.utc_offset are different during DST</title>
      <updated-at type="datetime">2010-10-11T10:54:31+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">9</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Vladimir Andrijevik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3037</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
