<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-19T09:28:12+00:00</created-at>
  <creator-id type="integer">12360</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4056</number>
  <permalink>rails-232-dirty-tracking-has-error-when-observable-is-included</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>2.3.2 activerecord dirty nomethoderror observable</tag>
  <title>Rails 2.3.2 dirty tracking has error when Observable is included</title>
  <updated-at type="datetime">2011-02-19T09:28:12+00:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">3</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>apathy in action</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4056</url>
  <priority-name>Low</priority-name>
  <original-body>Ruby 1.8.6, 
Rails 2.3.2
Windows xp.

The Observable module and the ActiveRecord::Dirty module appear to be incompatible when the Observable module is included in an ActiveRecord subclass. This results in a NoMethodError being thrown in ActiveRecord::Base#attributes_with_quotes(..) which assumes an Enumerable in its third parameter.

Steps to recreate (using Oracle in this instance):
create table Foo 
(
  id number(9),
  created_at date,
  updated_at date
);

class Foo &lt; ActiveRecord::Base
end
f=Foo.new()
f.id=(1)
f.save()

f=Foo.first()
f.changed()
=&gt; []
f.changed?
=&gt; false
f.id=(2)
=&gt; 2
f.changed()
=&gt; [&quot;id&quot;]
f.changed?
=&gt; true

This is the expected behaviour with dirty tracking.

Foo.send( :include, Observable )
f=Foo.first()
=&gt; Foo(created_at: datetime, updated_at: datetime, id: integer)
b.changed()
=&gt; true
b.changed?
=&gt; true

The Observable module's implementations of #changed and #changed? replace those of ActiveRecord::Dirty module.
This can cause an error down in the ActiveRecord::Base#attributes_with_quotes method which expects an Enumerable as its #attribute_names parameter, resulting in a NoMethodError on TrueClass being sent #each.

This comes about due to the above inclusion of Observable which causes the ActiveRecord::Dirty module's  #changed implementation to be overridden and return a boolean which changes the following when #partial_updates are enabled (the default):

  def update_with_dirty
    if partial_updates?
      # Serialized attributes should always be written in case they've been
      # changed in place.
      update_without_dirty(changed | self.class.serialized_attributes.keys)
    else
      update_without_dirty
    end
  end


The workaround in our case was to set #partial_updates to false for any class which included Observable.
One fix is to alter the true block to :


 update_without_dirty( changed_attributes().keys() | self.class.serialized_attributes.keys )


This prevents the NoMethodError from occurring.
The behavior described here does not appear to be present in 2.3.4.

Hope this helps.
sinclair
(ps. tried to use formatting around the code but things went pear-shaped, sorry.)</original-body>
  <latest-body>Ruby 1.8.6, 
Rails 2.3.2
Windows xp.

The Observable module and the ActiveRecord::Dirty module appear to be incompatible when the Observable module is included in an ActiveRecord subclass. This results in a NoMethodError being thrown in ActiveRecord::Base#attributes_with_quotes(..) which assumes an Enumerable in its third parameter.

Steps to recreate (using Oracle in this instance):
create table Foo 
(
  id number(9),
  created_at date,
  updated_at date
);

class Foo &lt; ActiveRecord::Base
end
f=Foo.new()
f.id=(1)
f.save()

f=Foo.first()
f.changed()
=&gt; []
f.changed?
=&gt; false
f.id=(2)
=&gt; 2
f.changed()
=&gt; [&quot;id&quot;]
f.changed?
=&gt; true

This is the expected behaviour with dirty tracking.

Foo.send( :include, Observable )
f=Foo.first()
=&gt; Foo(created_at: datetime, updated_at: datetime, id: integer)
b.changed()
=&gt; true
b.changed?
=&gt; true

The Observable module's implementations of #changed and #changed? replace those of ActiveRecord::Dirty module.
This can cause an error down in the ActiveRecord::Base#attributes_with_quotes method which expects an Enumerable as its #attribute_names parameter, resulting in a NoMethodError on TrueClass being sent #each.

This comes about due to the above inclusion of Observable which causes the ActiveRecord::Dirty module's  #changed implementation to be overridden and return a boolean which changes the following when #partial_updates are enabled (the default):

  def update_with_dirty
    if partial_updates?
      # Serialized attributes should always be written in case they've been
      # changed in place.
      update_without_dirty(changed | self.class.serialized_attributes.keys)
    else
      update_without_dirty
    end
  end


The workaround in our case was to set #partial_updates to false for any class which included Observable.
One fix is to alter the true block to :


 update_without_dirty( changed_attributes().keys() | self.class.serialized_attributes.keys )


This prevents the NoMethodError from occurring.
The behavior described here does not appear to be present in 2.3.4.

Hope this helps.
sinclair
(ps. tried to use formatting around the code but things went pear-shaped, sorry.)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Ruby 1.8.6,&lt;br&gt;
Rails 2.3.2&lt;br&gt;
Windows xp.&lt;/p&gt;
&lt;p&gt;The Observable module and the ActiveRecord::Dirty module appear
to be incompatible when the Observable module is included in an
ActiveRecord subclass. This results in a NoMethodError being thrown
in ActiveRecord::Base#attributes_with_quotes(..) which assumes an
Enumerable in its third parameter.&lt;/p&gt;
&lt;p&gt;Steps to recreate (using Oracle in this instance):&lt;br&gt;
create table Foo&lt;br&gt;
( id number(9), created_at date, updated_at date );&lt;/p&gt;
&lt;p&gt;class Foo &amp;lt; ActiveRecord::Base&lt;br&gt;
end&lt;br&gt;
f=Foo.new()&lt;br&gt;
f.id=(1)&lt;br&gt;
f.save()&lt;/p&gt;
&lt;p&gt;f=Foo.first()&lt;br&gt;
f.changed()&lt;br&gt;
=&amp;gt; [] f.changed?&lt;br&gt;
=&amp;gt; false f.id=(2)&lt;br&gt;
=&amp;gt; 2 f.changed()&lt;br&gt;
=&amp;gt; [&quot;id&quot;] f.changed?&lt;br&gt;
=&amp;gt; true&lt;/p&gt;
&lt;p&gt;This is the expected behaviour with dirty tracking.&lt;/p&gt;
&lt;p&gt;Foo.send( :include, Observable )&lt;br&gt;
f=Foo.first()&lt;br&gt;
=&amp;gt; Foo(created_at: datetime, updated_at: datetime, id: integer)
b.changed()&lt;br&gt;
=&amp;gt; true b.changed?&lt;br&gt;
=&amp;gt; true&lt;/p&gt;
&lt;p&gt;The Observable module's implementations of #changed and
#changed? replace those of ActiveRecord::Dirty module.&lt;br&gt;
This can cause an error down in the
ActiveRecord::Base#attributes_with_quotes method which expects an
Enumerable as its #attribute_names parameter, resulting in a
NoMethodError on TrueClass being sent #each.&lt;/p&gt;
&lt;p&gt;This comes about due to the above inclusion of Observable which
causes the ActiveRecord::Dirty module's #changed implementation to
be overridden and return a boolean which changes the following when
#partial_updates are enabled (the default):&lt;/p&gt;
&lt;p&gt;def update_with_dirty&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if partial_updates?
  # Serialized attributes should always be written in case they've been
  # changed in place.
  update_without_dirty(changed | self.class.serialized_attributes.keys)
else
  update_without_dirty
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;The workaround in our case was to set #partial_updates to false
for any class which included Observable.&lt;br&gt;
One fix is to alter the true block to :&lt;/p&gt;
&lt;p&gt;update_without_dirty( changed_attributes().keys() |
self.class.serialized_attributes.keys )&lt;/p&gt;
&lt;p&gt;This prevents the NoMethodError from occurring.&lt;br&gt;
The behavior described here does not appear to be present in
2.3.4.&lt;/p&gt;
&lt;p&gt;Hope this helps.&lt;br&gt;
sinclair&lt;br&gt;
(ps. tried to use formatting around the code but things went
pear-shaped, sorry.)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ruby 1.8.6, 
Rails 2.3.2
Windows xp.

The Observable module and the ActiveRecord::Dirty module appear to be incompatible when the Observable module is included in an ActiveRecord subclass. This results in a NoMethodError being thrown in ActiveRecord::Base#attributes_with_quotes(..) which assumes an Enumerable in its third parameter.

Steps to recreate (using Oracle in this instance):
create table Foo 
(
  id number(9),
  created_at date,
  updated_at date
);

class Foo &lt; ActiveRecord::Base
end
f=Foo.new()
f.id=(1)
f.save()

f=Foo.first()
f.changed()
=&gt; []
f.changed?
=&gt; false
f.id=(2)
=&gt; 2
f.changed()
=&gt; [&quot;id&quot;]
f.changed?
=&gt; true

This is the expected behaviour with dirty tracking.

Foo.send( :include, Observable )
f=Foo.first()
=&gt; Foo(created_at: datetime, updated_at: datetime, id: integer)
b.changed()
=&gt; true
b.changed?
=&gt; true

The Observable module's implementations of #changed and #changed? replace those of ActiveRecord::Dirty module.
This can cause an error down in the ActiveRecord::Base#attributes_with_quotes method which expects an Enumerable as its #attribute_names parameter, resulting in a NoMethodError on TrueClass being sent #each.

This comes about due to the above inclusion of Observable which causes the ActiveRecord::Dirty module's  #changed implementation to be overridden and return a boolean which changes the following when #partial_updates are enabled (the default):

  def update_with_dirty
    if partial_updates?
      # Serialized attributes should always be written in case they've been
      # changed in place.
      update_without_dirty(changed | self.class.serialized_attributes.keys)
    else
      update_without_dirty
    end
  end


The workaround in our case was to set #partial_updates to false for any class which included Observable.
One fix is to alter the true block to :


 update_without_dirty( changed_attributes().keys() | self.class.serialized_attributes.keys )


This prevents the NoMethodError from occurring.
The behavior described here does not appear to be present in 2.3.4.

Hope this helps.
sinclair
(ps. tried to use formatting around the code but things went pear-shaped, sorry.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ruby 1.8.6,&lt;br&gt;
Rails 2.3.2&lt;br&gt;
Windows xp.&lt;/p&gt;
&lt;p&gt;The Observable module and the ActiveRecord::Dirty module appear
to be incompatible when the Observable module is included in an
ActiveRecord subclass. This results in a NoMethodError being thrown
in ActiveRecord::Base#attributes_with_quotes(..) which assumes an
Enumerable in its third parameter.&lt;/p&gt;
&lt;p&gt;Steps to recreate (using Oracle in this instance):&lt;br&gt;
create table Foo&lt;br&gt;
( id number(9), created_at date, updated_at date );&lt;/p&gt;
&lt;p&gt;class Foo &amp;lt; ActiveRecord::Base&lt;br&gt;
end&lt;br&gt;
f=Foo.new()&lt;br&gt;
f.id=(1)&lt;br&gt;
f.save()&lt;/p&gt;
&lt;p&gt;f=Foo.first()&lt;br&gt;
f.changed()&lt;br&gt;
=&amp;gt; [] f.changed?&lt;br&gt;
=&amp;gt; false f.id=(2)&lt;br&gt;
=&amp;gt; 2 f.changed()&lt;br&gt;
=&amp;gt; [&quot;id&quot;] f.changed?&lt;br&gt;
=&amp;gt; true&lt;/p&gt;
&lt;p&gt;This is the expected behaviour with dirty tracking.&lt;/p&gt;
&lt;p&gt;Foo.send( :include, Observable )&lt;br&gt;
f=Foo.first()&lt;br&gt;
=&amp;gt; Foo(created_at: datetime, updated_at: datetime, id: integer)
b.changed()&lt;br&gt;
=&amp;gt; true b.changed?&lt;br&gt;
=&amp;gt; true&lt;/p&gt;
&lt;p&gt;The Observable module's implementations of #changed and
#changed? replace those of ActiveRecord::Dirty module.&lt;br&gt;
This can cause an error down in the
ActiveRecord::Base#attributes_with_quotes method which expects an
Enumerable as its #attribute_names parameter, resulting in a
NoMethodError on TrueClass being sent #each.&lt;/p&gt;
&lt;p&gt;This comes about due to the above inclusion of Observable which
causes the ActiveRecord::Dirty module's #changed implementation to
be overridden and return a boolean which changes the following when
#partial_updates are enabled (the default):&lt;/p&gt;
&lt;p&gt;def update_with_dirty&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if partial_updates?
  # Serialized attributes should always be written in case they've been
  # changed in place.
  update_without_dirty(changed | self.class.serialized_attributes.keys)
else
  update_without_dirty
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;The workaround in our case was to set #partial_updates to false
for any class which included Observable.&lt;br&gt;
One fix is to alter the true block to :&lt;/p&gt;
&lt;p&gt;update_without_dirty( changed_attributes().keys() |
self.class.serialized_attributes.keys )&lt;/p&gt;
&lt;p&gt;This prevents the NoMethodError from occurring.&lt;br&gt;
The behavior described here does not appear to be present in
2.3.4.&lt;/p&gt;
&lt;p&gt;Hope this helps.&lt;br&gt;
sinclair&lt;br&gt;
(ps. tried to use formatting around the code but things went
pear-shaped, sorry.)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-25T18:13:44+00:00</created-at>
      <creator-id type="integer">12360</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4056</number>
      <permalink>rails-232-dirty-tracking-has-error-when-observable-is-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 2.3.2 activerecord dirty observable changed nomethoderror&quot;</tag>
      <title>Rails 2.3.2 dirty tracking has error when Observable is included</title>
      <updated-at type="datetime">2010-02-25T18:13:47+00:00</updated-at>
      <user-id type="integer">12360</user-id>
      <version type="integer">1</version>
      <user-name>apathy in action</user-name>
      <creator-name>apathy in action</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4056</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-16T23:50:45+01:00</created-at>
      <creator-id type="integer">12360</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;rails 2.3.2 activerecord dirty observable changed nomethoderror\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4056</number>
      <permalink>rails-232-dirty-tracking-has-error-when-observable-is-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord dirty nomethoderror observable</tag>
      <title>Rails 2.3.2 dirty tracking has error when Observable is included</title>
      <updated-at type="datetime">2010-10-16T23:50:47+01:00</updated-at>
      <user-id type="integer">81551</user-id>
      <version type="integer">2</version>
      <user-name>Andrea Campi</user-name>
      <creator-name>apathy in action</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4056</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Please comment on this ticket if this is still an issue with 2.3.10.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please comment on this ticket if this is still an issue with
2.3.10.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-17T07:43:54+01:00</created-at>
      <creator-id type="integer">12360</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4056</number>
      <permalink>rails-232-dirty-tracking-has-error-when-observable-is-included</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.3.2 activerecord dirty nomethoderror observable</tag>
      <title>Rails 2.3.2 dirty tracking has error when Observable is included</title>
      <updated-at type="datetime">2010-10-17T07:43:58+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">3</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>apathy in action</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4056</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T00:27:48+00:00</created-at>
      <creator-id type="integer">12360</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4056</number>
      <permalink>rails-232-dirty-tracking-has-error-when-observable-is-included</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.3.2 activerecord dirty nomethoderror observable</tag>
      <title>Rails 2.3.2 dirty tracking has error when Observable is included</title>
      <updated-at type="datetime">2011-02-19T09:28:12+00:00</updated-at>
      <user-id type="integer">137759</user-id>
      <version type="integer">4</version>
      <user-name>mklo</user-name>
      <creator-name>apathy in action</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4056</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
