<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-01-21T14:57:27+00:00</created-at>
  <creator-id type="integer">133532</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6321</number>
  <permalink>add-improved-version-of-enumerableinclude</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>&quot;enumerable object&quot;</tag>
  <title>add improved version of Enumerable#include?</title>
  <updated-at type="datetime">2011-04-27T09:56:40+01:00</updated-at>
  <user-id type="integer">25293</user-id>
  <version type="integer">13</version>
  <user-name>Prem Sichanugrist (sikachu)</user-name>
  <creator-name>rubyduo (at gmail)</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
  <priority-name>Low</priority-name>
  <original-body>Sometimes you want to ask a question like

&quot;Is x 1 or 2?&quot;

Normally, you write this as:

  [1,2].include?(x)

which seems backwards to me.

The attached patch to active allows you to instead write:

  x.in?(1,2)

I use this all over my code, and thought others might like it.

You can also use in? with an array like so:

  x.in?(*my_array)

Other possible names are: one_of?, within?.  Any ideas or feedback would be appreciated.

I've attached a patch.</original-body>
  <latest-body>Sometimes you want to ask a question like

&quot;Is x 1 or 2?&quot;

Normally, you write this as:

  [1,2].include?(x)

which seems backwards to me.

The attached patch to active allows you to instead write:

  x.in?(1,2)

I use this all over my code, and thought others might like it.

You can also use in? with an array like so:

  x.in?(*my_array)

Other possible names are: one_of?, within?.  Any ideas or feedback would be appreciated.

I've attached a patch.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Sometimes you want to ask a question like&lt;/p&gt;
&lt;p&gt;&quot;Is x 1 or 2?&quot;&lt;/p&gt;
&lt;p&gt;Normally, you write this as:&lt;/p&gt;
&lt;p&gt;[1,2].include?(x)&lt;/p&gt;
&lt;p&gt;which seems backwards to me.&lt;/p&gt;
&lt;p&gt;The attached patch to active allows you to instead write:&lt;/p&gt;
&lt;p&gt;x.in?(1,2)&lt;/p&gt;
&lt;p&gt;I use this all over my code, and thought others might like
it.&lt;/p&gt;
&lt;p&gt;You can also use in? with an array like so:&lt;/p&gt;
&lt;p&gt;x.in?(*my_array)&lt;/p&gt;
&lt;p&gt;Other possible names are: one_of?, within?. Any ideas or
feedback would be appreciated.&lt;/p&gt;
&lt;p&gt;I've attached a patch.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sometimes you want to ask a question like

&quot;Is x 1 or 2?&quot;

Normally, you write this as:

  [1,2].include?(x)

which seems backwards to me.

The attached patch to active allows you to instead write:

  x.in?(1,2)

I use this all over my code, and thought others might like it.

You can also use in? with an array like so:

  x.in?(*my_array)

Other possible names are: one_of?, within?.  Any ideas or feedback would be appreciated.

I've attached a patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sometimes you want to ask a question like&lt;/p&gt;
&lt;p&gt;&quot;Is x 1 or 2?&quot;&lt;/p&gt;
&lt;p&gt;Normally, you write this as:&lt;/p&gt;
&lt;p&gt;[1,2].include?(x)&lt;/p&gt;
&lt;p&gt;which seems backwards to me.&lt;/p&gt;
&lt;p&gt;The attached patch to active allows you to instead write:&lt;/p&gt;
&lt;p&gt;x.in?(1,2)&lt;/p&gt;
&lt;p&gt;I use this all over my code, and thought others might like
it.&lt;/p&gt;
&lt;p&gt;You can also use in? with an array like so:&lt;/p&gt;
&lt;p&gt;x.in?(*my_array)&lt;/p&gt;
&lt;p&gt;Other possible names are: one_of?, within?. Any ideas or
feedback would be appreciated.&lt;/p&gt;
&lt;p&gt;I've attached a patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-21T14:57:27+00:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-01-21T14:57:30+00:00</updated-at>
      <user-id type="integer">133532</user-id>
      <version type="integer">1</version>
      <user-name>rubyduo (at gmail)</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I like this extension a lot and am enthusiastically in favor of incorporating this behavior into ActiveSupport, but would suggest one small syntax change. 

I am the the author of the in_enumerable gem which does exactly this. The small difference is that in? takes a single parameter, not a list of *args parameters. Thanks to duck typing, this would allow it to work with any type that implements `include?`:

@@@ ruby
   # Array
   a = [1,2,3]
   3.in?(a)             # =&gt; true
   4.in?(a)             # =&gt; false

   # Hash
   h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }
   &quot;a&quot;.in?(h)           # =&gt; true
   &quot;z&quot;.in?(h)           # =&gt; false

   # String
   &quot;lo&quot;.in?(&quot;hello&quot;)    # =&gt; true
   &quot;ol&quot;.in?(&quot;hello&quot;)    # =&gt; false
   ?h.in?(&quot;hello&quot;)      # =&gt; true

   # Range
   25.in?(1..50)        # =&gt; true
   75.in?(1..50)        # =&gt; false

   # Set
   require 'set'
   s = Set.new([1,2])
   1.in?(s)             # =&gt; true
   3.in?(s)             # =&gt; false

   # Even Module
   module A
   end
   class B
     include A
   end
   class C &lt; B
   end
   A.in?(B)             # =&gt; true
   A.in?(C)             # =&gt; true
   A.in?(A)             # =&gt; false
@@@

I have attached an alternate patch that implements `in?` in this way. 

Although in_enumerable does not have `not_in?`, I think it's nice idea because it cleans up the 'not' syntax a bit so I've included it in my alternate patch.

I agree with your initial suggested name: `in?` seems to me the most obvious choice. In fact early versions of Ruby apparently had an `Object#in?` method. See the side note at the end of my blog post about in_enumerable: http://ilikestuffblog.com/2009/12/24/now-you-can-use-obj-inarray-instead-of-array-includeobj/

I would be happy to deprecate the in_enumerable gem if this gets put into ActiveSupport.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I like this extension a lot and am enthusiastically in favor of
incorporating this behavior into ActiveSupport, but would suggest
one small syntax change.&lt;/p&gt;
&lt;p&gt;I am the the author of the in_enumerable gem which does exactly
this. The small difference is that in? takes a single parameter,
not a list of *args parameters. Thanks to duck typing, this would
allow it to work with any type that implements
&lt;code&gt;include?&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;   # Array
   a = [1,2,3]
   3.in?(a)             # =&amp;gt; true
   4.in?(a)             # =&amp;gt; false

   # Hash
   h = { &quot;a&quot; =&amp;gt; 100, &quot;b&quot; =&amp;gt; 200 }
   &quot;a&quot;.in?(h)           # =&amp;gt; true
   &quot;z&quot;.in?(h)           # =&amp;gt; false

   # String
   &quot;lo&quot;.in?(&quot;hello&quot;)    # =&amp;gt; true
   &quot;ol&quot;.in?(&quot;hello&quot;)    # =&amp;gt; false
   ?h.in?(&quot;hello&quot;)      # =&amp;gt; true

   # Range
   25.in?(1..50)        # =&amp;gt; true
   75.in?(1..50)        # =&amp;gt; false

   # Set
   require 'set'
   s = Set.new([1,2])
   1.in?(s)             # =&amp;gt; true
   3.in?(s)             # =&amp;gt; false

   # Even Module
   module A
   end
   class B
     include A
   end
   class C &amp;lt; B
   end
   A.in?(B)             # =&amp;gt; true
   A.in?(C)             # =&amp;gt; true
   A.in?(A)             # =&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I have attached an alternate patch that implements
&lt;code&gt;in?&lt;/code&gt; in this way.&lt;/p&gt;
&lt;p&gt;Although in_enumerable does not have &lt;code&gt;not_in?&lt;/code&gt;, I
think it's nice idea because it cleans up the 'not' syntax a bit so
I've included it in my alternate patch.&lt;/p&gt;
&lt;p&gt;I agree with your initial suggested name: &lt;code&gt;in?&lt;/code&gt; seems
to me the most obvious choice. In fact early versions of Ruby
apparently had an &lt;code&gt;Object#in?&lt;/code&gt; method. See the side note
at the end of my blog post about in_enumerable: &lt;a href=
&quot;http://ilikestuffblog.com/2009/12/24/now-you-can-use-obj-inarray-instead-of-array-includeobj/&quot;&gt;
http://ilikestuffblog.com/2009/12/24/now-you-can-use-obj-inarray-in...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would be happy to deprecate the in_enumerable gem if this gets
put into ActiveSupport.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-21T18:07:31+00:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-01-21T18:07:36+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">2</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>P.S. In a completely bizarre coincidence of timing, just this morning I thought to myself &quot;I really ought to submit a patch to add in_enumerable's behavior to ActiveSupport.&quot; So I logged in to Lighthouse and saw rubyduo's suggestion for the exact same behavior, *right at the top of the list of tickets*.</body>
      <body-html>&lt;div&gt;&lt;p&gt;P.S. In a completely bizarre coincidence of timing, just this
morning I thought to myself &quot;I really ought to submit a patch to
add in_enumerable's behavior to ActiveSupport.&quot; So I logged in to
Lighthouse and saw rubyduo's suggestion for the exact same
behavior, &lt;em&gt;right at the top of the list of tickets&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-21T18:11:31+00:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-01-21T18:11:36+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">3</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I like your change, since now you can write x.in?(1..50)

On the other hand, it is nice to just type x.in?(1,2) instead of the wordy x.in?([1,2]).

We could get the best of both worlds, by handling single and multiple arguments slightly differently, like so:

@@@
def in?(*args)
  container = (args.size == 1 &amp;&amp; args.responds_to(:include?)) ? args[0] : args
  container.include?(self)
end
@@@

I'm on the fence on this one.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I like your change, since now you can write x.in?(1..50)&lt;/p&gt;
&lt;p&gt;On the other hand, it is nice to just type x.in?(1,2) instead of
the wordy x.in?([1,2]).&lt;/p&gt;
&lt;p&gt;We could get the best of both worlds, by handling single and
multiple arguments slightly differently, like so:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def in?(*args)
  container = (args.size == 1 &amp;amp;&amp;amp; args.responds_to(:include?)) ? args[0] : args
  container.include?(self)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm on the fence on this one.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-21T19:52:17+00:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-01-21T19:52:21+00:00</updated-at>
      <user-id type="integer">133532</user-id>
      <version type="integer">4</version>
      <user-name>rubyduo (at gmail)</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Thanks, rubyduo. I also thought about combining them to get the best of both worlds. The problem is it will lead to ambiguous cases:

@@@ ruby
names = [&quot;Brian&quot;]
&quot;B&quot;.in?(*names)   # =&gt; true

names = [&quot;Brian&quot;,&quot;rubyduo&quot;]
&quot;B&quot;.in?(*names)   # =&gt; false
@@@

So the function would be hard to use if it returns different values depending on the length of the array passed in.

For that reason I think in this case overloading the arguments would lead to hard-to-track-down bugs.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks, rubyduo. I also thought about combining them to get the
best of both worlds. The problem is it will lead to ambiguous
cases:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;names = [&quot;Brian&quot;]
&quot;B&quot;.in?(*names)   # =&amp;gt; true

names = [&quot;Brian&quot;,&quot;rubyduo&quot;]
&quot;B&quot;.in?(*names)   # =&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So the function would be hard to use if it returns different
values depending on the length of the array passed in.&lt;/p&gt;
&lt;p&gt;For that reason I think in this case overloading the arguments
would lead to hard-to-track-down bugs.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-21T21:29:42+00:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-01-21T21:29:48+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">5</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>You're right about the ambiguity.  I'm now on your side of the fence. It'd sure be nice to see your patch (object_in_with_duck_typing.diff) applied to ActiveSupport.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You're right about the ambiguity. I'm now on your side of the
fence. It'd sure be nice to see your patch
(object_in_with_duck_typing.diff) applied to ActiveSupport.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-21T22:42:21+00:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-01-21T22:42:25+00:00</updated-at>
      <user-id type="integer">133532</user-id>
      <version type="integer">6</version>
      <user-name>rubyduo (at gmail)</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sweet. Nice team effort!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sweet. Nice team effort!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-21T22:47:59+00:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-01-21T22:48:05+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">7</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Brian, could you post your patch suggestion to the core mailing list? http://groups.google.com/group/rubyonrails-core To try and gather some support for this patch. Otherwise it's most likely that it will remain buried in Lighthouse for a long time.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Brian, could you post your patch suggestion to the core mailing
list? &lt;a href=
&quot;http://groups.google.com/group/rubyonrails-core&quot;&gt;http://groups.google.com/group/rubyonrails-core&lt;/a&gt;
To try and gather some support for this patch. Otherwise it's most
likely that it will remain buried in Lighthouse for a long
time.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-26T10:08:32+00:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-01-26T10:08:45+00:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">8</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Rohit, thanks for the quick lesson in how to garner support for a Rails core patch. I've followed your suggestion. The post is here: 

http://groups.google.com/group/rubyonrails-core/browse_thread/thread/218a36184fe1176c</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rohit, thanks for the quick lesson in how to garner support for
a Rails core patch. I've followed your suggestion. The post is
here:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/218a36184fe1176c&quot;&gt;
http://groups.google.com/group/rubyonrails-core/browse_thread/threa...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-26T17:34:56+00:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-01-26T17:35:09+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">9</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-26T20:48:37+00:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-01-26T20:49:15+00:00</updated-at>
      <user-id type="integer">12774</user-id>
      <version type="integer">10</version>
      <user-name>peter_v</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-27T01:00:08+01:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-04-27T01:00:39+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">11</version>
      <user-name>rails</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-27T01:00:09+01:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-04-27T01:00:27+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">12</version>
      <user-name>rails</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Actually, this ticket should be marked as committed. I forgot &gt;_&lt;

This ticket related to this pull request: https://github.com/rails/rails/pull/258</body>
      <body-html>&lt;div&gt;&lt;p&gt;Actually, this ticket should be marked as committed. I forgot
&amp;gt;_&amp;lt;&lt;/p&gt;
&lt;p&gt;This ticket related to this pull request: &lt;a href=
&quot;https://github.com/rails/rails/pull/258&quot;&gt;https://github.com/rails/rails/pull/258&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-27T09:56:29+01:00</created-at>
      <creator-id type="integer">133532</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6321</number>
      <permalink>add-improved-version-of-enumerableinclude</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>&quot;enumerable object&quot;</tag>
      <title>add improved version of Enumerable#include?</title>
      <updated-at type="datetime">2011-04-27T09:56:40+01:00</updated-at>
      <user-id type="integer">25293</user-id>
      <version type="integer">13</version>
      <user-name>Prem Sichanugrist (sikachu)</user-name>
      <creator-name>rubyduo (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6321</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>cd438ef5108f5035ab21aa888457760d460aed48</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-01-21T14:57:27+00:00</created-at>
      <filename>object_in.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">872924</id>
      <size type="integer">2701</size>
      <uploader-id type="integer">133532</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/872924/object_in.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>49e8cd5d7b501708ca38437dd688a1c36acc4307</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-01-21T18:07:31+00:00</created-at>
      <filename>object_in_with_duck_typing.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">873390</id>
      <size type="integer">4745</size>
      <uploader-id type="integer">12061</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/873390/object_in_with_duck_typing.diff</url>
    </attachment>
  </attachments>
</ticket>
