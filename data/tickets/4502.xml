<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-04-29T22:38:42+01:00</created-at>
  <creator-id type="integer">97241</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4502</number>
  <permalink>using-a-where-clause-on-a-different-table-in-a-scope-with-a-lambda-overwrites-itself</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>active_record arel bugmash rails3 scope</tag>
  <title>Using a where clause on a different table in a scope with a lambda overwrites itself</title>
  <updated-at type="datetime">2010-06-15T13:49:03+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">6</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>darkhelmetlive</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4502</url>
  <priority-name>Low</priority-name>
  <original-body>If I make a scope like this:

@@@ ruby
scope(:id_or_name, lambda { |f, v|
  where(f =&gt; v.match(/^\d+$/) ? { :id =&gt; v } : { :name =&gt; v })
})
@@@

and then use it like this:

@@@ ruby
u = User.scoped
u = u.id_or_name(:companies, '1') # like u.where(:accounts =&gt; { :id =&gt; '1' })
u = u.id_or_name(:divisions, 'engineering') # like u.where(:divisions =&gt; { :name =&gt; 'engineering' })

# results in &quot;SELECT ... (`divisions`.`name` = 'engineering')&quot;
@@@

the first calling gets 'overwritten' and the second one takes effect, when I would expect it to have both conditions in the SQL with an AND. If I do the where clauses myself without the scope, it works.

If the where is for the same table, it works

@@@ ruby
scope(:id_or_name_same_model, lambda { |v|
  where(v.match(/^\d+$/) ? { :id =&gt; v } : { :name =&gt; v })
})

u = User.scoped
u = u.id_or_name_same_model('1') # like u.where(:id =&gt; '1')
u = u.id_or_name_same_model('bob') # like u.where(:name =&gt; 'bob')

# results in &quot;SELECT ..... (`users`.`id` = 1) AND (`users`.`name` = 'bob')&quot;

@@@

More repro steps and whatnot can be seen in [this gist](http://gist.github.com/384263). A full example project is [here](http://github.com/darkhelmet/scope_bug).

This occurred using the 3.0.0.beta3 gem and edge from github.</original-body>
  <latest-body>If I make a scope like this:

@@@ ruby
scope(:id_or_name, lambda { |f, v|
  where(f =&gt; v.match(/^\d+$/) ? { :id =&gt; v } : { :name =&gt; v })
})
@@@

and then use it like this:

@@@ ruby
u = User.scoped
u = u.id_or_name(:companies, '1') # like u.where(:accounts =&gt; { :id =&gt; '1' })
u = u.id_or_name(:divisions, 'engineering') # like u.where(:divisions =&gt; { :name =&gt; 'engineering' })

# results in &quot;SELECT ... (`divisions`.`name` = 'engineering')&quot;
@@@

the first calling gets 'overwritten' and the second one takes effect, when I would expect it to have both conditions in the SQL with an AND. If I do the where clauses myself without the scope, it works.

If the where is for the same table, it works

@@@ ruby
scope(:id_or_name_same_model, lambda { |v|
  where(v.match(/^\d+$/) ? { :id =&gt; v } : { :name =&gt; v })
})

u = User.scoped
u = u.id_or_name_same_model('1') # like u.where(:id =&gt; '1')
u = u.id_or_name_same_model('bob') # like u.where(:name =&gt; 'bob')

# results in &quot;SELECT ..... (`users`.`id` = 1) AND (`users`.`name` = 'bob')&quot;

@@@

More repro steps and whatnot can be seen in [this gist](http://gist.github.com/384263). A full example project is [here](http://github.com/darkhelmet/scope_bug).

This occurred using the 3.0.0.beta3 gem and edge from github.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If I make a scope like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;scope(:id_or_name, lambda { |f, v|
  where(f =&amp;gt; v.match(/^\d+$/) ? { :id =&amp;gt; v } : { :name =&amp;gt; v })
})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and then use it like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;u = User.scoped
u = u.id_or_name(:companies, '1') # like u.where(:accounts =&amp;gt; { :id =&amp;gt; '1' })
u = u.id_or_name(:divisions, 'engineering') # like u.where(:divisions =&amp;gt; { :name =&amp;gt; 'engineering' })

# results in &quot;SELECT ... (`divisions`.`name` = 'engineering')&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;the first calling gets 'overwritten' and the second one takes
effect, when I would expect it to have both conditions in the SQL
with an AND. If I do the where clauses myself without the scope, it
works.&lt;/p&gt;
&lt;p&gt;If the where is for the same table, it works&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;scope(:id_or_name_same_model, lambda { |v|
  where(v.match(/^\d+$/) ? { :id =&amp;gt; v } : { :name =&amp;gt; v })
})

u = User.scoped
u = u.id_or_name_same_model('1') # like u.where(:id =&amp;gt; '1')
u = u.id_or_name_same_model('bob') # like u.where(:name =&amp;gt; 'bob')

# results in &quot;SELECT ..... (`users`.`id` = 1) AND (`users`.`name` = 'bob')&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;More repro steps and whatnot can be seen in &lt;a href=
&quot;http://gist.github.com/384263&quot;&gt;this gist&lt;/a&gt;. A full example
project is &lt;a href=
&quot;http://github.com/darkhelmet/scope_bug&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This occurred using the 3.0.0.beta3 gem and edge from
github.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If I make a scope like this:

@@@ ruby
scope(:id_or_name, lambda { |f, v|
  where(f =&gt; v.match(/^\d+$/) ? { :id =&gt; v } : { :name =&gt; v })
})
@@@

and then use it like this:

@@@ ruby
u = User.scoped
u = u.id_or_name(:companies, '1') # like u.where(:accounts =&gt; { :id =&gt; '1' })
u = u.id_or_name(:divisions, 'engineering') # like u.where(:divisions =&gt; { :name =&gt; 'engineering' })

# results in &quot;SELECT ... (`divisions`.`name` = 'engineering')&quot;
@@@

the first calling gets 'overwritten' and the second one takes effect, when I would expect it to have both conditions in the SQL with an AND. If I do the where clauses myself without the scope, it works.

If the where is for the same table, it works

@@@ ruby
scope(:id_or_name_same_model, lambda { |v|
  where(v.match(/^\d+$/) ? { :id =&gt; v } : { :name =&gt; v })
})

u = User.scoped
u = u.id_or_name_same_model('1') # like u.where(:id =&gt; '1')
u = u.id_or_name_same_model('bob') # like u.where(:name =&gt; 'bob')

# results in &quot;SELECT ..... (`users`.`id` = 1) AND (`users`.`name` = 'bob')&quot;

@@@

More repro steps and whatnot can be seen in [this gist](http://gist.github.com/384263). A full example project is [here](http://github.com/darkhelmet/scope_bug).

This occurred using the 3.0.0.beta3 gem and edge from github.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If I make a scope like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;scope(:id_or_name, lambda { |f, v|
  where(f =&amp;gt; v.match(/^\d+$/) ? { :id =&amp;gt; v } : { :name =&amp;gt; v })
})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and then use it like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;u = User.scoped
u = u.id_or_name(:companies, '1') # like u.where(:accounts =&amp;gt; { :id =&amp;gt; '1' })
u = u.id_or_name(:divisions, 'engineering') # like u.where(:divisions =&amp;gt; { :name =&amp;gt; 'engineering' })

# results in &quot;SELECT ... (`divisions`.`name` = 'engineering')&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;the first calling gets 'overwritten' and the second one takes
effect, when I would expect it to have both conditions in the SQL
with an AND. If I do the where clauses myself without the scope, it
works.&lt;/p&gt;
&lt;p&gt;If the where is for the same table, it works&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;scope(:id_or_name_same_model, lambda { |v|
  where(v.match(/^\d+$/) ? { :id =&amp;gt; v } : { :name =&amp;gt; v })
})

u = User.scoped
u = u.id_or_name_same_model('1') # like u.where(:id =&amp;gt; '1')
u = u.id_or_name_same_model('bob') # like u.where(:name =&amp;gt; 'bob')

# results in &quot;SELECT ..... (`users`.`id` = 1) AND (`users`.`name` = 'bob')&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;More repro steps and whatnot can be seen in &lt;a href=
&quot;http://gist.github.com/384263&quot;&gt;this gist&lt;/a&gt;. A full example
project is &lt;a href=
&quot;http://github.com/darkhelmet/scope_bug&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This occurred using the 3.0.0.beta3 gem and edge from
github.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-29T22:38:42+01:00</created-at>
      <creator-id type="integer">97241</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4502</number>
      <permalink>using-a-where-clause-on-a-different-table-in-a-scope-with-a-lambda-overwrites-itself</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record arel rails3 scope</tag>
      <title>Using a where clause on a different table in a scope with a lambda overwrites itself</title>
      <updated-at type="datetime">2010-04-29T22:44:39+01:00</updated-at>
      <user-id type="integer">97241</user-id>
      <version type="integer">1</version>
      <user-name>darkhelmetlive</user-name>
      <creator-name>darkhelmetlive</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4502</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am not able to reproduce this error with rails edge.

@@@ ruby
class Car &lt; AR
 def self.lab
    c = Car.scoped
    c = c.id_or_name(:companies, '1') 
    c = c.id_or_name(:divisions, 'engineering') 
    puts c.to_sql
  end
end
@@@

Car.lab is producing following sql

&lt;pre&gt;
SELECT     &quot;cars&quot;.* FROM       &quot;cars&quot; WHERE     (&quot;companies&quot;.&quot;id&quot; = '1') AND (&quot;divisions&quot;.&quot;name&quot; = 'engineering')
&lt;/pre&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am not able to reproduce this error with rails edge.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Car &amp;lt; AR
 def self.lab
    c = Car.scoped
    c = c.id_or_name(:companies, '1') 
    c = c.id_or_name(:divisions, 'engineering') 
    puts c.to_sql
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Car.lab is producing following sql&lt;/p&gt;
&lt;pre&gt;
SELECT     &quot;cars&quot;.* FROM       &quot;cars&quot; WHERE     (&quot;companies&quot;.&quot;id&quot; = '1') AND (&quot;divisions&quot;.&quot;name&quot; = 'engineering')
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-12T05:02:00+01:00</created-at>
      <creator-id type="integer">97241</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4502</number>
      <permalink>using-a-where-clause-on-a-different-table-in-a-scope-with-a-lambda-overwrites-itself</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record arel rails3 scope</tag>
      <title>Using a where clause on a different table in a scope with a lambda overwrites itself</title>
      <updated-at type="datetime">2010-05-12T05:02:04+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>darkhelmetlive</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4502</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I just cloned my repo (http://github.com/darkhelmet/scope_bug) and tried it again with edge, and it fails.

If I run the console and do User.lab it prints the wrong SQL. Is there something I'm missing? Is there some subtle difference between what you are doing to repro and what I did?

@@@ ruby
class User
  def self.lab
    u = User.scoped
    u = u.id_or_name(:companies, '1')
    u = u.id_or_name(:divisions, '2')
    puts u.to_sql
  end
end
@@@

@@@ ruby
user@shell: ./script/rails console
Loading development environment (Rails 3.0.0.beta3)
irb(main):001:0&gt; User.lab
SELECT     &quot;users&quot;.* FROM       &quot;users&quot; WHERE     (&quot;divisions&quot;.&quot;id&quot; = '2')
=&gt; nil
irb(main):002:0&gt; 
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just cloned my repo (&lt;a href=
&quot;http://github.com/darkhelmet/scope_bug&quot;&gt;http://github.com/darkhelmet/scope_bug&lt;/a&gt;)
and tried it again with edge, and it fails.&lt;/p&gt;
&lt;p&gt;If I run the console and do User.lab it prints the wrong SQL. Is
there something I'm missing? Is there some subtle difference
between what you are doing to repro and what I did?&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User
  def self.lab
    u = User.scoped
    u = u.id_or_name(:companies, '1')
    u = u.id_or_name(:divisions, '2')
    puts u.to_sql
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;user@shell: ./script/rails console
Loading development environment (Rails 3.0.0.beta3)
irb(main):001:0&amp;gt; User.lab
SELECT     &quot;users&quot;.* FROM       &quot;users&quot; WHERE     (&quot;divisions&quot;.&quot;id&quot; = '2')
=&amp;gt; nil
irb(main):002:0&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-12T05:28:18+01:00</created-at>
      <creator-id type="integer">97241</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4502</number>
      <permalink>using-a-where-clause-on-a-different-table-in-a-scope-with-a-lambda-overwrites-itself</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record arel rails3 scope</tag>
      <title>Using a where clause on a different table in a scope with a lambda overwrites itself</title>
      <updated-at type="datetime">2010-05-12T05:28:22+01:00</updated-at>
      <user-id type="integer">97241</user-id>
      <version type="integer">3</version>
      <user-name>darkhelmetlive</user-name>
      <creator-name>darkhelmetlive</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4502</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Please provide a failing test case and patch for this issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please provide a failing test case and patch for this issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-13T23:52:06+01:00</created-at>
      <creator-id type="integer">97241</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: active_record arel rails3 scope
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4502</number>
      <permalink>using-a-where-clause-on-a-different-table-in-a-scope-with-a-lambda-overwrites-itself</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>active_record arel bugmash rails3 scope</tag>
      <title>Using a where clause on a different table in a scope with a lambda overwrites itself</title>
      <updated-at type="datetime">2010-05-13T23:52:08+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">4</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>darkhelmetlive</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4502</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I tried to write a test case to replicate it, but it worked as it's supposed to. I'm either doing something wrong, or it was broken in beta3 and I didn't properly setup my Gemfile to use full edge for everything.

This can be marked as invalid or whatever is appropriate.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I tried to write a test case to replicate it, but it worked as
it's supposed to. I'm either doing something wrong, or it was
broken in beta3 and I didn't properly setup my Gemfile to use full
edge for everything.&lt;/p&gt;
&lt;p&gt;This can be marked as invalid or whatever is appropriate.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-17T20:29:15+01:00</created-at>
      <creator-id type="integer">97241</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4502</number>
      <permalink>using-a-where-clause-on-a-different-table-in-a-scope-with-a-lambda-overwrites-itself</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>active_record arel bugmash rails3 scope</tag>
      <title>Using a where clause on a different table in a scope with a lambda overwrites itself</title>
      <updated-at type="datetime">2010-05-17T20:29:18+01:00</updated-at>
      <user-id type="integer">97241</user-id>
      <version type="integer">5</version>
      <user-name>darkhelmetlive</user-name>
      <creator-name>darkhelmetlive</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4502</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-15T13:48:57+01:00</created-at>
      <creator-id type="integer">97241</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4502</number>
      <permalink>using-a-where-clause-on-a-different-table-in-a-scope-with-a-lambda-overwrites-itself</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>active_record arel bugmash rails3 scope</tag>
      <title>Using a where clause on a different table in a scope with a lambda overwrites itself</title>
      <updated-at type="datetime">2010-06-15T13:49:03+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">6</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>darkhelmetlive</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4502</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
