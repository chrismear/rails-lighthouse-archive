From f8f1878872acd6adc9a80954f861b2c536d1ff96 Mon Sep 17 00:00:00 2001
From: Santiago Pastorino <santiago@wyeworks.com>
Date: Sun, 16 May 2010 15:58:56 -0300
Subject: [PATCH] Change on Array extension from rand => random_element backport

---
 .../associations/eager_load_nested_include_test.rb |   14 +++++++-------
 activerecord/test/cases/named_scope_test.rb        |    2 +-
 .../active_support/core_ext/array/random_access.rb |    8 +++++++-
 activesupport/test/core_ext/array_ext_test.rb      |   20 ++++++++++++++++----
 4 files changed, 31 insertions(+), 13 deletions(-)

diff --git a/activerecord/test/cases/associations/eager_load_nested_include_test.rb b/activerecord/test/cases/associations/eager_load_nested_include_test.rb
index 677226e..524e12e 100644
--- a/activerecord/test/cases/associations/eager_load_nested_include_test.rb
+++ b/activerecord/test/cases/associations/eager_load_nested_include_test.rb
@@ -17,7 +17,7 @@ module Remembered
 
   module ClassMethods
     def remembered; @@remembered ||= []; end
-    def rand; @@remembered.rand; end
+    def random_element; @@remembered.random_element; end
   end
 end
 
@@ -81,14 +81,14 @@ class EagerLoadPolyAssocsTest < ActiveRecord::TestCase
       [Circle, Square, Triangle, NonPolyOne, NonPolyTwo].map(&:create!)
     end
     1.upto(NUM_SIMPLE_OBJS) do
-      PaintColor.create!(:non_poly_one_id => NonPolyOne.rand.id)
-      PaintTexture.create!(:non_poly_two_id => NonPolyTwo.rand.id)
+      PaintColor.create!(:non_poly_one_id => NonPolyOne.random_element.id)
+      PaintTexture.create!(:non_poly_two_id => NonPolyTwo.random_element.id)
     end
     1.upto(NUM_SHAPE_EXPRESSIONS) do
-      shape_type = [Circle, Square, Triangle].rand
-      paint_type = [PaintColor, PaintTexture].rand
-      ShapeExpression.create!(:shape_type => shape_type.to_s, :shape_id => shape_type.rand.id,
-                              :paint_type => paint_type.to_s, :paint_id => paint_type.rand.id)
+      shape_type = [Circle, Square, Triangle].random_element
+      paint_type = [PaintColor, PaintTexture].random_element
+      ShapeExpression.create!(:shape_type => shape_type.to_s, :shape_id => shape_type.random_element.id,
+                              :paint_type => paint_type.to_s, :paint_id => paint_type.random_element.id)
     end
   end
 
diff --git a/activerecord/test/cases/named_scope_test.rb b/activerecord/test/cases/named_scope_test.rb
index 208a2ee..5138173 100644
--- a/activerecord/test/cases/named_scope_test.rb
+++ b/activerecord/test/cases/named_scope_test.rb
@@ -265,7 +265,7 @@ class NamedScopeTest < ActiveRecord::TestCase
   end
 
   def test_rand_should_select_a_random_object_from_proxy
-    assert Topic.approved.rand.is_a?(Topic)
+    assert Topic.approved.random_element.is_a?(Topic)
   end
 
   def test_should_use_where_in_query_for_named_scope
diff --git a/activesupport/lib/active_support/core_ext/array/random_access.rb b/activesupport/lib/active_support/core_ext/array/random_access.rb
index 54d17cb..b14c446 100644
--- a/activesupport/lib/active_support/core_ext/array/random_access.rb
+++ b/activesupport/lib/active_support/core_ext/array/random_access.rb
@@ -2,8 +2,14 @@ module ActiveSupport #:nodoc:
   module CoreExtensions #:nodoc:
     module Array #:nodoc:
       module RandomAccess
-        # Returns a random element from the array.
+        # :nodoc:
         def rand
+          ActiveSupport::Deprecation.warn "Array#rand is deprecated, use random_element instead", caller
+          random_element
+        end
+
+        # Returns a random element from the array.
+        def random_element
           self[Kernel.rand(length)]
         end
       end
diff --git a/activesupport/test/core_ext/array_ext_test.rb b/activesupport/test/core_ext/array_ext_test.rb
index f354ade..ed934df 100644
--- a/activesupport/test/core_ext/array_ext_test.rb
+++ b/activesupport/test/core_ext/array_ext_test.rb
@@ -323,15 +323,27 @@ class ArrayExtractOptionsTests < Test::Unit::TestCase
   end
 end
 
-class ArrayExtRandomTests < Test::Unit::TestCase
+class ArrayExtRandomTests < ActiveSupport::TestCase
   def test_random_element_from_array
-    assert_nil [].rand
+    assert_nil [].random_element
 
     Kernel.expects(:rand).with(1).returns(0)
-    assert_equal 'x', ['x'].rand
+    assert_equal 'x', ['x'].random_element
 
     Kernel.expects(:rand).with(3).returns(1)
-    assert_equal 2, [1, 2, 3].rand
+    assert_equal 2, [1, 2, 3].random_element
+  end
+
+  def test_deprecated_random_element_from_array
+    assert_deprecated do
+      assert_nil [].rand
+
+      Kernel.expects(:rand).with(1).returns(0)
+      assert_equal 'x', ['x'].rand
+
+      Kernel.expects(:rand).with(3).returns(1)
+      assert_equal 2, [1, 2, 3].rand
+    end
   end
 end
 
-- 
1.7.1

