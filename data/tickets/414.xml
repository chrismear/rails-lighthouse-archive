<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-13T21:51:26+01:00</created-at>
  <creator-id type="integer">14890</creator-id>
  <milestone-due-on type="datetime">2009-03-18T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">9901</milestone-id>
  <number type="integer">414</number>
  <permalink>named-scopes-misbehave-when-named-with-a-string</permalink>
  <priority type="integer">5</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord named_scope</tag>
  <title>Named scopes misbehave when named with a string</title>
  <updated-at type="datetime">2008-06-23T01:55:29+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">3</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Tarmo T&#228;nav</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/414</url>
  <milestone-title>2.1.1</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Named scopes are stored in a hash &quot;scopes&quot; but the key used for the hash is taken directly from the name parameter, it can be a string or a symbol. But if a string is used then the scope works when called directly on the model class, but if composed on another scope the other scope is ignored.

The reason most likely has something to do with method_missing always receiving the method name as a symbol and not knowing the scope was stored with a string as its key.

Since there is no good reason why scopes should need to be stored with both string and symbol keys the obvious fix is to just convert the scope name to a symbol when it is defined.</original-body>
  <latest-body>Named scopes are stored in a hash &quot;scopes&quot; but the key used for the hash is taken directly from the name parameter, it can be a string or a symbol. But if a string is used then the scope works when called directly on the model class, but if composed on another scope the other scope is ignored.

The reason most likely has something to do with method_missing always receiving the method name as a symbol and not knowing the scope was stored with a string as its key.

Since there is no good reason why scopes should need to be stored with both string and symbol keys the obvious fix is to just convert the scope name to a symbol when it is defined.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Named scopes are stored in a hash &quot;scopes&quot; but the key used for the hash is taken directly from the name parameter, it can be a string or a symbol. But if a string is used then the scope works when called directly on the model class, but if composed on another scope the other scope is ignored.
&lt;/p&gt;&lt;p&gt;
The reason most likely has something to do with method_missing always receiving the method name as a symbol and not knowing the scope was stored with a string as its key.
&lt;/p&gt;&lt;p&gt;
Since there is no good reason why scopes should need to be stored with both string and symbol keys the obvious fix is to just convert the scope name to a symbol when it is defined.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Named scopes are stored in a hash &quot;scopes&quot; but the key used for the hash is taken directly from the name parameter, it can be a string or a symbol. But if a string is used then the scope works when called directly on the model class, but if composed on another scope the other scope is ignored.

The reason most likely has something to do with method_missing always receiving the method name as a symbol and not knowing the scope was stored with a string as its key.

Since there is no good reason why scopes should need to be stored with both string and symbol keys the obvious fix is to just convert the scope name to a symbol when it is defined.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Named scopes are stored in a hash &quot;scopes&quot; but the key used for the hash is taken directly from the name parameter, it can be a string or a symbol. But if a string is used then the scope works when called directly on the model class, but if composed on another scope the other scope is ignored.
&lt;/p&gt;&lt;p&gt;
The reason most likely has something to do with method_missing always receiving the method name as a symbol and not knowing the scope was stored with a string as its key.
&lt;/p&gt;&lt;p&gt;
Since there is no good reason why scopes should need to be stored with both string and symbol keys the obvious fix is to just convert the scope name to a symbol when it is defined.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-13T21:51:26+01:00</created-at>
      <creator-id type="integer">14890</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">414</number>
      <permalink>named-scopes-misbehave-when-named-with-a-string</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Named scopes misbehave when named with a string</title>
      <updated-at type="datetime">2008-06-13T21:51:26+01:00</updated-at>
      <user-id type="integer">14890</user-id>
      <version type="integer">1</version>
      <user-name>Tarmo T&#228;nav</user-name>
      <creator-name>Tarmo T&#228;nav</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/414</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-16T12:27:18+01:00</created-at>
      <creator-id type="integer">14890</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">414</number>
      <permalink>named-scopes-misbehave-when-named-with-a-string</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Named scopes misbehave when named with a string</title>
      <updated-at type="datetime">2008-06-16T12:27:18+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Tarmo T&#228;nav</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/414</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>1afae84</body>
      <body-html>&lt;div&gt;&lt;p&gt;
1afae84
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-23T01:55:29+01:00</created-at>
      <creator-id type="integer">14890</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">414</number>
      <permalink>named-scopes-misbehave-when-named-with-a-string</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Named scopes misbehave when named with a string</title>
      <updated-at type="datetime">2008-06-23T01:55:29+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Tarmo T&#228;nav</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/414</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>5003951fb95d97467469f56f6d83f75d09d94242</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-06-13T21:51:26+01:00</created-at>
      <filename>0001-Fixed-that-scopes-defined-with-a-string-name-could-n.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">27410</id>
      <size type="integer">2584</size>
      <uploader-id type="integer">14890</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/27410/0001-Fixed-that-scopes-defined-with-a-string-name-could-n.patch</url>
    </attachment>
  </attachments>
</ticket>
