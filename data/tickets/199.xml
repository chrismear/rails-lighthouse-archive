<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15783</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-14T19:45:29+01:00</created-at>
  <creator-id type="integer">20274</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">199</number>
  <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
  <priority type="integer">14958</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activesupport enhancement helper patch timezone</tag>
  <title>Use lazy evalution and caching for us_zones in TimeZones</title>
  <updated-at type="datetime">2008-05-15T15:34:05+01:00</updated-at>
  <user-id type="integer">20274</user-id>
  <version type="integer">10</version>
  <user-name>Martin Eisenhardt</user-name>
  <creator-name>Martin Eisenhardt</creator-name>
  <assigned-user-name>Geoff Buesing</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
  <priority-name nil="true"></priority-name>
  <original-body>The us_zones convenience method in TimeZone generates the list of TimeZone objects in the U.S. every time it is called. This is inefficient, especially in applications that use time zones very heavily.

The patch attached to this ticket changes us_zones so that it uses lazy evaluation and result caching. It generates the collection once (upon the first invocation) and stores the collection in a class attribute. Subsequent invocations use the cached collection and are much faster.</original-body>
  <latest-body>The us_zones convenience method in TimeZone generates the list of TimeZone objects in the U.S. every time it is called. This is inefficient, especially in applications that use time zones very heavily.

The patch attached to this ticket changes us_zones so that it uses lazy evaluation and result caching. It generates the collection once (upon the first invocation) and stores the collection in a class attribute. Subsequent invocations use the cached collection and are much faster.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
The us_zones convenience method in TimeZone generates the list of TimeZone objects in the U.S. every time it is called. This is inefficient, especially in applications that use time zones very heavily.
&lt;/p&gt;&lt;p&gt;
The patch attached to this ticket changes us_zones so that it uses lazy evaluation and result caching. It generates the collection once (upon the first invocation) and stores the collection in a class attribute. Subsequent invocations use the cached collection and are much faster.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The us_zones convenience method in TimeZone generates the list of TimeZone objects in the U.S. every time it is called. This is inefficient, especially in applications that use time zones very heavily.

The patch attached to this ticket changes us_zones so that it uses lazy evaluation and result caching. It generates the collection once (upon the first invocation) and stores the collection in a class attribute. Subsequent invocations use the cached collection and are much faster.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The us_zones convenience method in TimeZone generates the list of TimeZone objects in the U.S. every time it is called. This is inefficient, especially in applications that use time zones very heavily.
&lt;/p&gt;&lt;p&gt;
The patch attached to this ticket changes us_zones so that it uses lazy evaluation and result caching. It generates the collection once (upon the first invocation) and stores the collection in a class attribute. Subsequent invocations use the cached collection and are much faster.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-14T19:45:29+01:00</created-at>
      <creator-id type="integer">20274</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">199</number>
      <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Use lazy evalution and caching for us_zones in TimeZones</title>
      <updated-at type="datetime">2008-05-14T19:45:29+01:00</updated-at>
      <user-id type="integer">20274</user-id>
      <version type="integer">1</version>
      <user-name>Martin Eisenhardt</user-name>
      <creator-name>Martin Eisenhardt</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>1. I don't like @ALL_CAPS var names.
2. What are the performance benefits of this ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
1. I don't like @ALL_CAPS var names.
&lt;/p&gt;&lt;p&gt;
2. What are the performance benefits of this ?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-15T11:38:11+01:00</created-at>
      <creator-id type="integer">20274</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">199</number>
      <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Use lazy evalution and caching for us_zones in TimeZones</title>
      <updated-at type="datetime">2008-05-15T11:38:11+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Martin Eisenhardt</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Pratik, thank you for your review and comment.

Ad 1.) OK, I can understand that this does not meet your personal coding standard, or the coding standard of the Rails community. I use REGION_ZONES in reference to the US_ZONES regex; the US_ZONES were already in the code, so I just went along.

I am more than willing to change that and resubmit a changed patch. Just say the word! :-D

Ad 2.) When you call the method us_zones before the patch, it calls all.find_all( |z| z.name =~ US_ZONES) which will go through all time zones and match them against the regex US_ZONES. In an web app which uses time zones a lot this will account for several hundreds (or even thousands) regex operations for a single page view.

After applying my patch, the regex is only evaluated once (upon the first invocation of the us_zones method) and the result stored away in a class attribute named @US_ZONES (which I will have to rename, see above point 1). Subsequent invocations of us_zones will not have to evaluate the regex but use the cached result immediately.

Thus, the computational costs for us_zones is decreased sharply.

Please tell me if I see this wrong - this is not unlikely, and I am always eager to learn.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hi Pratik, thank you for your review and comment.
&lt;/p&gt;&lt;p&gt;
Ad 1.) OK, I can understand that this does not meet your personal coding standard, or the coding standard of the Rails community. I use REGION_ZONES in reference to the US_ZONES regex; the US_ZONES were already in the code, so I just went along.
&lt;/p&gt;&lt;p&gt;
I am more than willing to change that and resubmit a changed patch. Just say the word! :-D
&lt;/p&gt;&lt;p&gt;
Ad 2.) When you call the method us_zones before the patch, it calls all.find_all( |z| z.name =~ US_ZONES) which will go through all time zones and match them against the regex US_ZONES. In an web app which uses time zones a lot this will account for several hundreds (or even thousands) regex operations for a single page view.
&lt;/p&gt;&lt;p&gt;
After applying my patch, the regex is only evaluated once (upon the first invocation of the us_zones method) and the result stored away in a class attribute named @US_ZONES (which I will have to rename, see above point 1). Subsequent invocations of us_zones will not have to evaluate the regex but use the cached result immediately.
&lt;/p&gt;&lt;p&gt;
Thus, the computational costs for us_zones is decreased sharply.
&lt;/p&gt;&lt;p&gt;
Please tell me if I see this wrong - this is not unlikely, and I am always eager to learn.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-15T12:02:31+01:00</created-at>
      <creator-id type="integer">20274</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">199</number>
      <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Use lazy evalution and caching for us_zones in TimeZones</title>
      <updated-at type="datetime">2008-05-15T12:02:31+01:00</updated-at>
      <user-id type="integer">20274</user-id>
      <version type="integer">3</version>
      <user-name>Martin Eisenhardt</user-name>
      <creator-name>Martin Eisenhardt</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>If we're going to preload us_zones, we need to make it thread-safe -- see TimeZone.all for an example of how to do this, if you're interested in updating this patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
If we're going to preload us_zones, we need to make it thread-safe -- see TimeZone.all for an example of how to do this, if you're interested in updating this patch.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-15T14:32:15+01:00</created-at>
      <creator-id type="integer">20274</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">199</number>
      <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Use lazy evalution and caching for us_zones in TimeZones</title>
      <updated-at type="datetime">2008-05-15T14:32:15+01:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">4</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>Martin Eisenhardt</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks for the pointer, Geoff, I will definitely have a look (and a go) at it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Thanks for the pointer, Geoff, I will definitely have a look (and a go) at it.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-15T15:05:22+01:00</created-at>
      <creator-id type="integer">20274</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">199</number>
      <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Use lazy evalution and caching for us_zones in TimeZones</title>
      <updated-at type="datetime">2008-05-15T15:05:22+01:00</updated-at>
      <user-id type="integer">20274</user-id>
      <version type="integer">5</version>
      <user-name>Martin Eisenhardt</user-name>
      <creator-name>Martin Eisenhardt</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It's probably also worth exploring, is the current method of matching against a regex really all that slow? Maybe a quick benchmark would help justify your effort here.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It's probably also worth exploring, is the current method of matching against a regex really all that slow? Maybe a quick benchmark would help justify your effort here.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-15T14:45:21+01:00</created-at>
      <creator-id type="integer">20274</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">199</number>
      <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Use lazy evalution and caching for us_zones in TimeZones</title>
      <updated-at type="datetime">2008-05-15T14:45:21+01:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">6</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>Martin Eisenhardt</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>While regular expressions are by far the fastest way to search for patterns, they nevertheless are slow compared to using pre-computed values.

I really *do* like the idea of having convenience methods for &quot;regional&quot; or &quot;continental&quot; time zones. I just want to make sure that it is done &quot;right&quot; (no offence meant) and no inefficient code makes it to a release.

Sure, for most applications, the benefits will be small. But consider a web application that makes heavy use of time zones and calls us_zones (or whatever) several times for a certain view - then the benefit of re-using pre-computed results becomes clear.

From the top of my head, I can think of several applications that will benefit: f.e. a calendar application for a globally diversified audience (every time you enter an event, you get to choose which time zone the event will be for).

I will provide an updated patch in a timely manner and will hope for the best :-D

BTW: Making the patch thread-safe in the way you mentioned means pre-computing at the time of class loading - did I get this right?

BTW2: Why did my last comment get marked as spam? Did I use any keywords, or was it just to short?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
While regular expressions are by far the fastest way to search for patterns, they nevertheless are slow compared to using pre-computed values.
&lt;/p&gt;&lt;p&gt;
I really &lt;strong&gt;do&lt;/strong&gt; like the idea of having convenience methods for &quot;regional&quot; or &quot;continental&quot; time zones. I just want to make sure that it is done &quot;right&quot; (no offence meant) and no inefficient code makes it to a release.
&lt;/p&gt;&lt;p&gt;
Sure, for most applications, the benefits will be small. But consider a web application that makes heavy use of time zones and calls us_zones (or whatever) several times for a certain view - then the benefit of re-using pre-computed results becomes clear.
&lt;/p&gt;&lt;p&gt;
From the top of my head, I can think of several applications that will benefit: f.e. a calendar application for a globally diversified audience (every time you enter an event, you get to choose which time zone the event will be for).
&lt;/p&gt;&lt;p&gt;
I will provide an updated patch in a timely manner and will hope for the best :-D
&lt;/p&gt;&lt;p&gt;
BTW: Making the patch thread-safe in the way you mentioned means pre-computing at the time of class loading - did I get this right?
&lt;/p&gt;&lt;p&gt;
BTW2: Why did my last comment get marked as spam? Did I use any keywords, or was it just to short?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-15T14:55:36+01:00</created-at>
      <creator-id type="integer">20274</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">199</number>
      <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Use lazy evalution and caching for us_zones in TimeZones</title>
      <updated-at type="datetime">2008-05-15T14:55:36+01:00</updated-at>
      <user-id type="integer">20274</user-id>
      <version type="integer">7</version>
      <user-name>Martin Eisenhardt</user-name>
      <creator-name>Martin Eisenhardt</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'd compute on load them right under &quot;ZONES&quot; and put them in a frozen constant &quot;US_ZONES&quot;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I'd compute on load them right under &quot;ZONES&quot; and put them in a frozen constant &quot;US_ZONES&quot;.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-15T15:15:29+01:00</created-at>
      <creator-id type="integer">20274</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">199</number>
      <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Use lazy evalution and caching for us_zones in TimeZones</title>
      <updated-at type="datetime">2008-05-15T15:15:29+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">8</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Martin Eisenhardt</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [fc02eabf296d6edb74a95174c7322293a54c9492]) Precompute TimeZone.us_zones [#199 state:resolved]
Signed-off-by: Joshua Peek &lt;josh@joshpeek.com&gt;
http://github.com/rails/rails/commit/fc02eabf296d6edb74a95174c7322293a54c9492</body>
      <body-html>&lt;div&gt;&lt;p&gt;
(from [fc02eabf296d6edb74a95174c7322293a54c9492]) Precompute TimeZone.us_zones [#199 state:resolved]
&lt;/p&gt;&lt;p&gt;
Signed-off-by: Joshua Peek 
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/fc02eabf296d6edb74a95174c7322293a54c9492&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-15T15:23:06+01:00</created-at>
      <creator-id type="integer">20274</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">199</number>
      <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Use lazy evalution and caching for us_zones in TimeZones</title>
      <updated-at type="datetime">2008-05-15T15:23:06+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">9</version>
      <user-name>Repository</user-name>
      <creator-name>Martin Eisenhardt</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Joshua, 

thank you for the advice. It is the same I had in mind. Together with this comment, I upload an updated patch the pre-computes a US_ZONES constant, sorts and freezes it.

Thanks to Geoff for pointing out the shortcomings of my first patch.

BTW: Forget about views calling us_zones several times - this should be clearly cached in the view or the corresponding controller action. But still, consider multiple views calling us_zones on a web app with time zone support.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hi Joshua,
&lt;/p&gt;&lt;p&gt;
thank you for the advice. It is the same I had in mind. Together with this comment, I upload an updated patch the pre-computes a US_ZONES constant, sorts and freezes it.
&lt;/p&gt;&lt;p&gt;
Thanks to Geoff for pointing out the shortcomings of my first patch.
&lt;/p&gt;&lt;p&gt;
BTW: Forget about views calling us_zones several times - this should be clearly cached in the view or the corresponding controller action. But still, consider multiple views calling us_zones on a web app with time zone support.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-15T15:34:05+01:00</created-at>
      <creator-id type="integer">20274</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">199</number>
      <permalink>use-lazy-evalution-and-caching-for-us_zones-in-timezones</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Use lazy evalution and caching for us_zones in TimeZones</title>
      <updated-at type="datetime">2008-05-15T15:34:05+01:00</updated-at>
      <user-id type="integer">20274</user-id>
      <version type="integer">10</version>
      <user-name>Martin Eisenhardt</user-name>
      <creator-name>Martin Eisenhardt</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/199</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>588190f84ce404c5b005e57d8dca975f74ae69ff</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-15T15:34:06+01:00</created-at>
      <filename>0001-Pre-compute-collection-for-us_zones-convenience-meth.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">23078</id>
      <size type="integer">1995</size>
      <uploader-id type="integer">20274</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/23078/0001-Pre-compute-collection-for-us_zones-convenience-meth.patch</url>
    </attachment>
  </attachments>
</ticket>
