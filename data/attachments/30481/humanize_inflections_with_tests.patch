diff --git a/activesupport/lib/active_support/inflector.rb b/activesupport/lib/active_support/inflector.rb
index 8d55ad2..432e467 100644
--- a/activesupport/lib/active_support/inflector.rb
+++ b/activesupport/lib/active_support/inflector.rb
@@ -30,10 +30,10 @@ module ActiveSupport
     class Inflections
       include Singleton
 
-      attr_reader :plurals, :singulars, :uncountables
+      attr_reader :plurals, :singulars, :uncountables, :humans
 
       def initialize
-        @plurals, @singulars, @uncountables = [], [], []
+        @plurals, @singulars, @uncountables, @humans = [], [], [], []
       end
 
       # Specifies a new pluralization rule and its replacement. The rule can either be a string or a regular expression.
@@ -75,10 +75,21 @@ module ActiveSupport
       def uncountable(*words)
         (@uncountables << words).flatten!
       end
+      
+      # Specifies a humanized form of a string by a regular expression rule or by a string mapping. 
+      # When using a regular expression based replacement, the normal humanize formatting is called after the replacement. 
+      # When a string is used, the human form should be specified as desired (example: 'The name', not 'the_name') 
+      # 
+      # Examples: 
+      #   human /_cnt$/i, '\1_count' 
+      #   human "legacy_col_person_name", "Name" 
+      def human(rule, replacement) 
+        @humans.insert(0, [rule, replacement]) 
+      end
 
       # Clears the loaded inflections within a given scope (default is <tt>:all</tt>).
       # Give the scope as a symbol of the inflection type, the options are: <tt>:plurals</tt>,
-      # <tt>:singulars</tt>, <tt>:uncountables</tt>.
+      # <tt>:singulars</tt>, <tt>:uncountables</tt>, <tt>:humans</tt>.
       #
       # Examples:
       #   clear :all
@@ -209,7 +220,10 @@ module ActiveSupport
     #   "employee_salary" # => "Employee salary"
     #   "author_id"       # => "Author"
     def humanize(lower_case_and_underscored_word)
-      lower_case_and_underscored_word.to_s.gsub(/_id$/, "").gsub(/_/, " ").capitalize
+      result = lower_case_and_underscored_word.to_s.dup
+      
+      inflections.humans.each { |(rule, replacement)| break if result.gsub!(rule, replacement) }
+      result.gsub(/_id$/, "").gsub(/_/, " ").capitalize
     end
 
     # Removes the module part from the expression in the string.
diff --git a/activesupport/test/inflector_test.rb b/activesupport/test/inflector_test.rb
index 4ce9cbb..4a5ee45 100644
--- a/activesupport/test/inflector_test.rb
+++ b/activesupport/test/inflector_test.rb
@@ -109,6 +109,23 @@ class InflectorTest < Test::Unit::TestCase
       assert_equal(human, ActiveSupport::Inflector.humanize(underscore))
     end
   end
+  
+  def test_humanize_by_rule 
+    ActiveSupport::Inflector.inflections do |inflect| 
+      inflect.human(/_cnt$/i, '\1_count') 
+      inflect.human(/^prefx_/i, '\1') 
+    end 
+    assert_equal("Jargon count", ActiveSupport::Inflector.humanize("jargon_cnt")) 
+    assert_equal("Request", ActiveSupport::Inflector.humanize("prefx_request")) 
+  end 
+  
+  def test_humanize_by_string 
+    ActiveSupport::Inflector.inflections do |inflect| 
+      inflect.human("col_rpted_bugs", "Reported bugs") 
+    end 
+    assert_equal("Reported bugs", ActiveSupport::Inflector.humanize("col_rpted_bugs")) 
+    assert_equal("Col rpted bugs", ActiveSupport::Inflector.humanize("COL_rpted_bugs")) 
+  end
 
   def test_constantize
     assert_nothing_raised { assert_equal Ace::Base::Case, ActiveSupport::Inflector.constantize("Ace::Base::Case") }
@@ -148,7 +165,7 @@ class InflectorTest < Test::Unit::TestCase
     end
   end
 
-  %w{plurals singulars uncountables}.each do |inflection_type|
+  %w{plurals singulars uncountables humans}.each do |inflection_type|
     class_eval "
       def test_clear_#{inflection_type}
         cached_values = ActiveSupport::Inflector.inflections.#{inflection_type}
@@ -160,25 +177,29 @@ class InflectorTest < Test::Unit::TestCase
   end
 
   def test_clear_all
-    cached_values = ActiveSupport::Inflector.inflections.plurals, ActiveSupport::Inflector.inflections.singulars, ActiveSupport::Inflector.inflections.uncountables
+    cached_values = ActiveSupport::Inflector.inflections.plurals, ActiveSupport::Inflector.inflections.singulars, ActiveSupport::Inflector.inflections.uncountables, ActiveSupport::Inflector.inflections.humans
     ActiveSupport::Inflector.inflections.clear :all
     assert ActiveSupport::Inflector.inflections.plurals.empty?
     assert ActiveSupport::Inflector.inflections.singulars.empty?
     assert ActiveSupport::Inflector.inflections.uncountables.empty?
+    assert ActiveSupport::Inflector.inflections.humans.empty?
     ActiveSupport::Inflector.inflections.instance_variable_set :@plurals, cached_values[0]
     ActiveSupport::Inflector.inflections.instance_variable_set :@singulars, cached_values[1]
     ActiveSupport::Inflector.inflections.instance_variable_set :@uncountables, cached_values[2]
+    ActiveSupport::Inflector.inflections.instance_variable_set :@humans, cached_values[3]
   end
 
   def test_clear_with_default
-    cached_values = ActiveSupport::Inflector.inflections.plurals, ActiveSupport::Inflector.inflections.singulars, ActiveSupport::Inflector.inflections.uncountables
+    cached_values = ActiveSupport::Inflector.inflections.plurals, ActiveSupport::Inflector.inflections.singulars, ActiveSupport::Inflector.inflections.uncountables, ActiveSupport::Inflector.inflections.humans
     ActiveSupport::Inflector.inflections.clear
     assert ActiveSupport::Inflector.inflections.plurals.empty?
     assert ActiveSupport::Inflector.inflections.singulars.empty?
     assert ActiveSupport::Inflector.inflections.uncountables.empty?
+    assert ActiveSupport::Inflector.inflections.humans.empty?
     ActiveSupport::Inflector.inflections.instance_variable_set :@plurals, cached_values[0]
     ActiveSupport::Inflector.inflections.instance_variable_set :@singulars, cached_values[1]
     ActiveSupport::Inflector.inflections.instance_variable_set :@uncountables, cached_values[2]
+    ActiveSupport::Inflector.inflections.instance_variable_set :@humans, cached_values[3]
   end
 
   Irregularities.each do |irregularity|
@@ -217,7 +238,7 @@ class InflectorTest < Test::Unit::TestCase
     end
   end
 
-  { :singulars => :singular, :plurals => :plural, :uncountables => :uncountable }.each do |scope, method|
+  { :singulars => :singular, :plurals => :plural, :uncountables => :uncountable, :humans => :human }.each do |scope, method|
     ActiveSupport::Inflector.inflections do |inflect|
       define_method("test_clear_inflections_with_#{scope}") do
         # save the inflections
