<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-03-20T15:38:22+00:00</created-at>
  <creator-id type="integer">142074</creator-id>
  <milestone-due-on type="datetime">2011-03-27T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">103410</milestone-id>
  <number type="integer">6599</number>
  <permalink>305-introduced-repeated-column-lookups-for-eager-loaded-has_one-with-conditions</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag nil="true"></tag>
  <title>3.0.5 introduced repeated column lookups for eager loaded has_one with conditions</title>
  <updated-at type="datetime">2011-03-30T23:43:18+01:00</updated-at>
  <user-id type="integer">15316</user-id>
  <version type="integer">4</version>
  <user-name>Aaron Patterson</user-name>
  <creator-name>Patrick Bacon</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6599</url>
  <milestone-title>3.0.6</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>This [commit](https://github.com/rails/rails/commit/756e70cb4492ded56b72b1601da7d198eaf7b840) appears to have (unintentionally?) removed some caching that was being done for table columns when a has_one (possibly other types as well) association has conditions and is eager loaded.

I am running into a situation where several hundred rows are being selected, with an eager loaded has_one that has conditions. The columns for the associated table are being queried (at least) once for each result row. This did not happen in v3.0.4. And it makes the query unacceptably slow.

It appears that when eager loading a `has_one` association an `AssociationProxy` instance is created for each result record, and its `@finder_sql` instance variable is populated in its constructor. If the association has conditions they need to be sanitized against the columns for the table being associated with. 

The commit linked above introduces a new, preferred way of specifying interpolated conditions on associations (using a proc). In doing so the `sanitized_conditions` method of the `MacroReflection` class is no longer being used, and that is where the caching used to take place. 

From the `AssociationProxy` class in v3.0.4:

@@@ ruby
def conditions
  @conditions ||= interpolate_sql(@reflection.sanitized_conditions) if @reflection.sanitized_conditions
end
@@@

And here it is in 3.0.5 (no longer using `sanitized_conditions`):

@@@ ruby
def conditions
  @conditions ||= @reflection.options[:conditions] &amp;&amp; interpolate_and_sanitize_sql(@reflection.options[:conditions])
end
@@@

The problem can be seen in a test by adding a has_one with conditions to the test model Post class (the following test stuff is also attached as a patch against the 3-0-stable branch):

@@@ ruby
has_one :first_post_comment, :class_name =&gt; 'Comment', :conditions =&gt; {:body =&gt; 'First Post!'}
@@@

In order to track the column lookups for a specific table I modified the `column_with_calls` code in `test/cases/helper.rb`:

@@@ ruby
ActiveRecord::Base.connection.class.class_eval {
  attr_accessor :column_calls, :column_calls_by_table

  def columns_with_calls(*args)
    @column_calls ||= 0
    @column_calls_by_table ||= Hash.new {|h,table| h[table] = 0}

    @column_calls += 1
    @column_calls_by_table[args.first.to_s] += 1
    columns_without_calls(*args)
  end

  alias_method_chain :columns, :calls
}
@@@

And finally a test added to `test/cases/associations/eager_test.rb`. This test passes in 3.0.4 and fails in 3.0.5:

@@@ ruby
def test_preload_has_one_with_conditions
  # pre-heat our cache
  Post.arel_table.columns
  Comment.columns

  Post.connection.column_calls_by_table['comments'] = 0
  Post.includes(:very_special_comment).all.to_a
  assert_equal 0, Post.connection.column_calls_by_table['comments']

  Post.connection.column_calls_by_table['comments'] = 0
  Post.includes(:first_post_comment).all.to_a
  assert_equal 1, Post.connection.column_calls_by_table['comments']
end
@@@

I have not worked out a fix for this yet.</original-body>
  <latest-body>This [commit](https://github.com/rails/rails/commit/756e70cb4492ded56b72b1601da7d198eaf7b840) appears to have (unintentionally?) removed some caching that was being done for table columns when a has_one (possibly other types as well) association has conditions and is eager loaded.

I am running into a situation where several hundred rows are being selected, with an eager loaded has_one that has conditions. The columns for the associated table are being queried (at least) once for each result row. This did not happen in v3.0.4. And it makes the query unacceptably slow.

It appears that when eager loading a `has_one` association an `AssociationProxy` instance is created for each result record, and its `@finder_sql` instance variable is populated in its constructor. If the association has conditions they need to be sanitized against the columns for the table being associated with. 

The commit linked above introduces a new, preferred way of specifying interpolated conditions on associations (using a proc). In doing so the `sanitized_conditions` method of the `MacroReflection` class is no longer being used, and that is where the caching used to take place. 

From the `AssociationProxy` class in v3.0.4:

@@@ ruby
def conditions
  @conditions ||= interpolate_sql(@reflection.sanitized_conditions) if @reflection.sanitized_conditions
end
@@@

And here it is in 3.0.5 (no longer using `sanitized_conditions`):

@@@ ruby
def conditions
  @conditions ||= @reflection.options[:conditions] &amp;&amp; interpolate_and_sanitize_sql(@reflection.options[:conditions])
end
@@@

The problem can be seen in a test by adding a has_one with conditions to the test model Post class (the following test stuff is also attached as a patch against the 3-0-stable branch):

@@@ ruby
has_one :first_post_comment, :class_name =&gt; 'Comment', :conditions =&gt; {:body =&gt; 'First Post!'}
@@@

In order to track the column lookups for a specific table I modified the `column_with_calls` code in `test/cases/helper.rb`:

@@@ ruby
ActiveRecord::Base.connection.class.class_eval {
  attr_accessor :column_calls, :column_calls_by_table

  def columns_with_calls(*args)
    @column_calls ||= 0
    @column_calls_by_table ||= Hash.new {|h,table| h[table] = 0}

    @column_calls += 1
    @column_calls_by_table[args.first.to_s] += 1
    columns_without_calls(*args)
  end

  alias_method_chain :columns, :calls
}
@@@

And finally a test added to `test/cases/associations/eager_test.rb`. This test passes in 3.0.4 and fails in 3.0.5:

@@@ ruby
def test_preload_has_one_with_conditions
  # pre-heat our cache
  Post.arel_table.columns
  Comment.columns

  Post.connection.column_calls_by_table['comments'] = 0
  Post.includes(:very_special_comment).all.to_a
  assert_equal 0, Post.connection.column_calls_by_table['comments']

  Post.connection.column_calls_by_table['comments'] = 0
  Post.includes(:first_post_comment).all.to_a
  assert_equal 1, Post.connection.column_calls_by_table['comments']
end
@@@

I have not worked out a fix for this yet.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This &lt;a href=
&quot;https://github.com/rails/rails/commit/756e70cb4492ded56b72b1601da7d198eaf7b840&quot;&gt;
commit&lt;/a&gt; appears to have (unintentionally?) removed some caching
that was being done for table columns when a has_one (possibly
other types as well) association has conditions and is eager
loaded.&lt;/p&gt;
&lt;p&gt;I am running into a situation where several hundred rows are
being selected, with an eager loaded has_one that has conditions.
The columns for the associated table are being queried (at least)
once for each result row. This did not happen in v3.0.4. And it
makes the query unacceptably slow.&lt;/p&gt;
&lt;p&gt;It appears that when eager loading a &lt;code&gt;has_one&lt;/code&gt;
association an &lt;code&gt;AssociationProxy&lt;/code&gt; instance is created
for each result record, and its &lt;code&gt;@finder_sql&lt;/code&gt; instance
variable is populated in its constructor. If the association has
conditions they need to be sanitized against the columns for the
table being associated with.&lt;/p&gt;
&lt;p&gt;The commit linked above introduces a new, preferred way of
specifying interpolated conditions on associations (using a proc).
In doing so the &lt;code&gt;sanitized_conditions&lt;/code&gt; method of the
&lt;code&gt;MacroReflection&lt;/code&gt; class is no longer being used, and
that is where the caching used to take place.&lt;/p&gt;
&lt;p&gt;From the &lt;code&gt;AssociationProxy&lt;/code&gt; class in v3.0.4:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def conditions
  @conditions ||= interpolate_sql(@reflection.sanitized_conditions) if @reflection.sanitized_conditions
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And here it is in 3.0.5 (no longer using
&lt;code&gt;sanitized_conditions&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def conditions
  @conditions ||= @reflection.options[:conditions] &amp;amp;&amp;amp; interpolate_and_sanitize_sql(@reflection.options[:conditions])
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem can be seen in a test by adding a has_one with
conditions to the test model Post class (the following test stuff
is also attached as a patch against the 3-0-stable branch):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;has_one :first_post_comment, :class_name =&amp;gt; 'Comment', :conditions =&amp;gt; {:body =&amp;gt; 'First Post!'}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In order to track the column lookups for a specific table I
modified the &lt;code&gt;column_with_calls&lt;/code&gt; code in
&lt;code&gt;test/cases/helper.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;ActiveRecord::Base.connection.class.class_eval {
  attr_accessor :column_calls, :column_calls_by_table

  def columns_with_calls(*args)
    @column_calls ||= 0
    @column_calls_by_table ||= Hash.new {|h,table| h[table] = 0}

    @column_calls += 1
    @column_calls_by_table[args.first.to_s] += 1
    columns_without_calls(*args)
  end

  alias_method_chain :columns, :calls
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And finally a test added to
&lt;code&gt;test/cases/associations/eager_test.rb&lt;/code&gt;. This test
passes in 3.0.4 and fails in 3.0.5:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def test_preload_has_one_with_conditions
  # pre-heat our cache
  Post.arel_table.columns
  Comment.columns

  Post.connection.column_calls_by_table['comments'] = 0
  Post.includes(:very_special_comment).all.to_a
  assert_equal 0, Post.connection.column_calls_by_table['comments']

  Post.connection.column_calls_by_table['comments'] = 0
  Post.includes(:first_post_comment).all.to_a
  assert_equal 1, Post.connection.column_calls_by_table['comments']
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I have not worked out a fix for this yet.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This [commit](https://github.com/rails/rails/commit/756e70cb4492ded56b72b1601da7d198eaf7b840) appears to have (unintentionally?) removed some caching that was being done for table columns when a has_one (possibly other types as well) association has conditions and is eager loaded.

I am running into a situation where several hundred rows are being selected, with an eager loaded has_one that has conditions. The columns for the associated table are being queried (at least) once for each result row. This did not happen in v3.0.4. And it makes the query unacceptably slow.

It appears that when eager loading a `has_one` association an `AssociationProxy` instance is created for each result record, and its `@finder_sql` instance variable is populated in its constructor. If the association has conditions they need to be sanitized against the columns for the table being associated with. 

The commit linked above introduces a new, preferred way of specifying interpolated conditions on associations (using a proc). In doing so the `sanitized_conditions` method of the `MacroReflection` class is no longer being used, and that is where the caching used to take place. 

From the `AssociationProxy` class in v3.0.4:

@@@ ruby
def conditions
  @conditions ||= interpolate_sql(@reflection.sanitized_conditions) if @reflection.sanitized_conditions
end
@@@

And here it is in 3.0.5 (no longer using `sanitized_conditions`):

@@@ ruby
def conditions
  @conditions ||= @reflection.options[:conditions] &amp;&amp; interpolate_and_sanitize_sql(@reflection.options[:conditions])
end
@@@

The problem can be seen in a test by adding a has_one with conditions to the test model Post class (the following test stuff is also attached as a patch against the 3-0-stable branch):

@@@ ruby
has_one :first_post_comment, :class_name =&gt; 'Comment', :conditions =&gt; {:body =&gt; 'First Post!'}
@@@

In order to track the column lookups for a specific table I modified the `column_with_calls` code in `test/cases/helper.rb`:

@@@ ruby
ActiveRecord::Base.connection.class.class_eval {
  attr_accessor :column_calls, :column_calls_by_table

  def columns_with_calls(*args)
    @column_calls ||= 0
    @column_calls_by_table ||= Hash.new {|h,table| h[table] = 0}

    @column_calls += 1
    @column_calls_by_table[args.first.to_s] += 1
    columns_without_calls(*args)
  end

  alias_method_chain :columns, :calls
}
@@@

And finally a test added to `test/cases/associations/eager_test.rb`. This test passes in 3.0.4 and fails in 3.0.5:

@@@ ruby
def test_preload_has_one_with_conditions
  # pre-heat our cache
  Post.arel_table.columns
  Comment.columns

  Post.connection.column_calls_by_table['comments'] = 0
  Post.includes(:very_special_comment).all.to_a
  assert_equal 0, Post.connection.column_calls_by_table['comments']

  Post.connection.column_calls_by_table['comments'] = 0
  Post.includes(:first_post_comment).all.to_a
  assert_equal 1, Post.connection.column_calls_by_table['comments']
end
@@@

I have not worked out a fix for this yet.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This &lt;a href=
&quot;https://github.com/rails/rails/commit/756e70cb4492ded56b72b1601da7d198eaf7b840&quot;&gt;
commit&lt;/a&gt; appears to have (unintentionally?) removed some caching
that was being done for table columns when a has_one (possibly
other types as well) association has conditions and is eager
loaded.&lt;/p&gt;
&lt;p&gt;I am running into a situation where several hundred rows are
being selected, with an eager loaded has_one that has conditions.
The columns for the associated table are being queried (at least)
once for each result row. This did not happen in v3.0.4. And it
makes the query unacceptably slow.&lt;/p&gt;
&lt;p&gt;It appears that when eager loading a &lt;code&gt;has_one&lt;/code&gt;
association an &lt;code&gt;AssociationProxy&lt;/code&gt; instance is created
for each result record, and its &lt;code&gt;@finder_sql&lt;/code&gt; instance
variable is populated in its constructor. If the association has
conditions they need to be sanitized against the columns for the
table being associated with.&lt;/p&gt;
&lt;p&gt;The commit linked above introduces a new, preferred way of
specifying interpolated conditions on associations (using a proc).
In doing so the &lt;code&gt;sanitized_conditions&lt;/code&gt; method of the
&lt;code&gt;MacroReflection&lt;/code&gt; class is no longer being used, and
that is where the caching used to take place.&lt;/p&gt;
&lt;p&gt;From the &lt;code&gt;AssociationProxy&lt;/code&gt; class in v3.0.4:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def conditions
  @conditions ||= interpolate_sql(@reflection.sanitized_conditions) if @reflection.sanitized_conditions
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And here it is in 3.0.5 (no longer using
&lt;code&gt;sanitized_conditions&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def conditions
  @conditions ||= @reflection.options[:conditions] &amp;amp;&amp;amp; interpolate_and_sanitize_sql(@reflection.options[:conditions])
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem can be seen in a test by adding a has_one with
conditions to the test model Post class (the following test stuff
is also attached as a patch against the 3-0-stable branch):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;has_one :first_post_comment, :class_name =&amp;gt; 'Comment', :conditions =&amp;gt; {:body =&amp;gt; 'First Post!'}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In order to track the column lookups for a specific table I
modified the &lt;code&gt;column_with_calls&lt;/code&gt; code in
&lt;code&gt;test/cases/helper.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;ActiveRecord::Base.connection.class.class_eval {
  attr_accessor :column_calls, :column_calls_by_table

  def columns_with_calls(*args)
    @column_calls ||= 0
    @column_calls_by_table ||= Hash.new {|h,table| h[table] = 0}

    @column_calls += 1
    @column_calls_by_table[args.first.to_s] += 1
    columns_without_calls(*args)
  end

  alias_method_chain :columns, :calls
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And finally a test added to
&lt;code&gt;test/cases/associations/eager_test.rb&lt;/code&gt;. This test
passes in 3.0.4 and fails in 3.0.5:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def test_preload_has_one_with_conditions
  # pre-heat our cache
  Post.arel_table.columns
  Comment.columns

  Post.connection.column_calls_by_table['comments'] = 0
  Post.includes(:very_special_comment).all.to_a
  assert_equal 0, Post.connection.column_calls_by_table['comments']

  Post.connection.column_calls_by_table['comments'] = 0
  Post.includes(:first_post_comment).all.to_a
  assert_equal 1, Post.connection.column_calls_by_table['comments']
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I have not worked out a fix for this yet.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-20T15:38:22+00:00</created-at>
      <creator-id type="integer">142074</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6599</number>
      <permalink>305-introduced-repeated-column-lookups-for-eager-loaded-has_one-with-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>3.0.5 introduced repeated column lookups for eager loaded has_one with conditions</title>
      <updated-at type="datetime">2011-03-20T15:38:26+00:00</updated-at>
      <user-id type="integer">142074</user-id>
      <version type="integer">1</version>
      <user-name>Patrick Bacon</user-name>
      <creator-name>Patrick Bacon</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6599</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton
watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-26T02:02:17+00:00</created-at>
      <creator-id type="integer">142074</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6599</number>
      <permalink>305-introduced-repeated-column-lookups-for-eager-loaded-has_one-with-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>3.0.5 introduced repeated column lookups for eager loaded has_one with conditions</title>
      <updated-at type="datetime">2011-03-26T02:15:11+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">2</version>
      <user-name>bingbing</user-name>
      <creator-name>Patrick Bacon</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6599</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I have submitted a pull request with an attempted fix: https://github.com/rails/rails/pull/246</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have submitted a pull request with an attempted fix: &lt;a href=
&quot;https://github.com/rails/rails/pull/246&quot;&gt;https://github.com/rails/rails/pull/246&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-30T03:19:26+01:00</created-at>
      <creator-id type="integer">142074</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6599</number>
      <permalink>305-introduced-repeated-column-lookups-for-eager-loaded-has_one-with-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>3.0.5 introduced repeated column lookups for eager loaded has_one with conditions</title>
      <updated-at type="datetime">2011-03-30T03:19:31+01:00</updated-at>
      <user-id type="integer">142074</user-id>
      <version type="integer">3</version>
      <user-name>Patrick Bacon</user-name>
      <creator-name>Patrick Bacon</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6599</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Merged, thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Merged, thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-30T23:43:05+01:00</created-at>
      <creator-id type="integer">142074</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">103410</milestone-id>
      <number type="integer">6599</number>
      <permalink>305-introduced-repeated-column-lookups-for-eager-loaded-has_one-with-conditions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag nil="true"></tag>
      <title>3.0.5 introduced repeated column lookups for eager loaded has_one with conditions</title>
      <updated-at type="datetime">2011-03-30T23:43:18+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">4</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Patrick Bacon</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6599</url>
      <milestone-title>3.0.6</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f871a3baf3bf91f217c72aa2f3e08aa5fb11d455</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-20T15:38:22+00:00</created-at>
      <filename>test_for_eager_load_has_one_wit.txt</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">968104</id>
      <size type="integer">2804</size>
      <uploader-id type="integer">142074</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/968104/test_for_eager_load_has_one_wit.txt</url>
    </attachment>
  </attachments>
</ticket>
