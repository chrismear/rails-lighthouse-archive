<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-01-26T13:42:00+00:00</created-at>
  <creator-id type="integer">134283</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6335</number>
  <permalink>failure-to-detect-optimistic-locking-collision-on-has_many-through-relationship</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>failure to detect optimistic locking collision on has_many :through relationship</title>
  <updated-at type="datetime">2011-04-27T01:00:45+01:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">3</version>
  <user-name>rails</user-name>
  <creator-name>Cathal O' Riordan</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6335</url>
  <priority-name nil="true"></priority-name>
  <original-body>Given the following models, 

@@@ ruby

class User &lt; ActiveRecord::Base

  has_many :courses

end

class Course &lt; ActiveRecord::Base
  
  belongs_to :user

end

@@@

where Course has a lock version column defined,

@@@ ruby

create_table :courses do |t|
      ...
      t.integer :lock_version, :default =&gt; 0
      ...
    end

@@@

the following unit test to force a locking collision will pass,

@@@ ruby

test &quot;optimistic_locking_behaviour&quot; do
    first_course_instance = Course.find_by_name('Rails 101')
    second_course_instance = Course.find_by_name('Rails 101')
    
    first_course_instance.user = users(:one)
    second_course_instance.user = users(:two)
    
    assert first_course_instance.save, &quot;First instance save succeeded&quot;
    
    assert_raises ActiveRecord::StaleObjectError do
      second_course_instance.save
    end
  end

@@@

a look at log/test.log shows,

@@@ sql

UPDATE `courses` SET `user_id` = 980190962, `updated_at` = '2011-01-26 13:02:53', `lock_version` = 1 WHERE (`courses`.`id` = 52995405 AND `courses`.`lock_version` = 0)

@@@

where the resulting query on the course object correctly checks the lock_version on update.


However, if the relationship between User and Course is changed to be many to many using has_many :through, there is no explicit checking of the lock_version on update,

@@@ ruby

class User &lt; ActiveRecord::Base

  has_many :attendances
  has_many :registered_courses, :through =&gt; :attendances, :source =&gt; :course 

end

class Course &lt; ActiveRecord::Base
  
  has_many :attendances
  has_many :attendees, :through =&gt; :attendances, :source =&gt; :user

end

class Attendance &lt; ActiveRecord::Base
  
  belongs_to :user
  belongs_to :course, :counter_cache =&gt; true, :touch =&gt; true

end

@@@

and with a unit test to force a lock collision as before,

@@@ ruby

test &quot;optimistic_locking_behaviour&quot; do
    first_course_instance = Course.find_by_name('Rails 101')
    second_course_instance = Course.find_by_name('Rails 101')
    
    first_course_instance.touch
    assert first_course_instance.attendees &lt;&lt; users(:one), &quot;First instance succeeded&quot;

    assert_raises ActiveRecord::StaleObjectError do
      second_course_instance.attendees &lt;&lt; users(:two)
    end
  end

@@@

results in the following set of sql output,

@@@ sql

SQL (0.0ms)  BEGIN
  SQL (0.4ms)  SHOW TABLES
  Course Load (0.3ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`name` = 'Rails 101') LIMIT 1
  Course Load (0.1ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`name` = 'Rails 101') LIMIT 1
  User Load (0.4ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 980190962) LIMIT 1
  SQL (0.1ms)  SAVEPOINT active_record_1
  SQL (2.8ms)  describe `attendances`
  AREL (0.2ms)  INSERT INTO `attendances` (`user_id`, `course_id`, `created_at`, `updated_at`) VALUES (980190962, 52995405, '2011-01-26 13:24:48', '2011-01-26 13:24:48')
  Course Load (0.3ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`id` = 52995405) LIMIT 1
  AREL (0.2ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)
  **AREL (0.1ms)  UPDATE `courses` SET `updated_at` = '2011-01-26 13:24:48' WHERE (`courses`.`id` = 52995405)**
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  User Load (0.1ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 298486374) LIMIT 1
  SQL (0.1ms)  SAVEPOINT active_record_1
  AREL (0.2ms)  INSERT INTO `attendances` (`user_id`, `course_id`, `created_at`, `updated_at`) VALUES (298486374, 52995405, '2011-01-26 13:24:48', '2011-01-26 13:24:48')
  Course Load (0.1ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`id` = 52995405) LIMIT 1
  AREL (0.1ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)
  AREL (0.1ms)  UPDATE `courses` SET `updated_at` = '2011-01-26 13:24:48' WHERE (`courses`.`id` = 52995405)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (1.3ms)  ROLLBACK

@@@

Notice that the implicit update to the Course object (highlighted in bold), facilitated through the 

@@@ ruby 

:touch =&gt; true 

@@@ 

option, doesn't take into account the lock_version of the row. Therefore, a locking collision will never be detected in the test. I think that either 

a) ActiveRecord.touch should be aware of the lock_version column and handle this accordingly

or 

b) the resulting update to the parent object (Course) should be check for a lock_version mismatch rather than simply increasing the lock version value by 1 i.e.

@@@ sql

AREL (0.2ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)

@@@</original-body>
  <latest-body>Given the following models, 

@@@ ruby

class User &lt; ActiveRecord::Base

  has_many :courses

end

class Course &lt; ActiveRecord::Base
  
  belongs_to :user

end

@@@

where Course has a lock version column defined,

@@@ ruby

create_table :courses do |t|
      ...
      t.integer :lock_version, :default =&gt; 0
      ...
    end

@@@

the following unit test to force a locking collision will pass,

@@@ ruby

test &quot;optimistic_locking_behaviour&quot; do
    first_course_instance = Course.find_by_name('Rails 101')
    second_course_instance = Course.find_by_name('Rails 101')
    
    first_course_instance.user = users(:one)
    second_course_instance.user = users(:two)
    
    assert first_course_instance.save, &quot;First instance save succeeded&quot;
    
    assert_raises ActiveRecord::StaleObjectError do
      second_course_instance.save
    end
  end

@@@

a look at log/test.log shows,

@@@ sql

UPDATE `courses` SET `user_id` = 980190962, `updated_at` = '2011-01-26 13:02:53', `lock_version` = 1 WHERE (`courses`.`id` = 52995405 AND `courses`.`lock_version` = 0)

@@@

where the resulting query on the course object correctly checks the lock_version on update.


However, if the relationship between User and Course is changed to be many to many using has_many :through, there is no explicit checking of the lock_version on update,

@@@ ruby

class User &lt; ActiveRecord::Base

  has_many :attendances
  has_many :registered_courses, :through =&gt; :attendances, :source =&gt; :course 

end

class Course &lt; ActiveRecord::Base
  
  has_many :attendances
  has_many :attendees, :through =&gt; :attendances, :source =&gt; :user

end

class Attendance &lt; ActiveRecord::Base
  
  belongs_to :user
  belongs_to :course, :counter_cache =&gt; true, :touch =&gt; true

end

@@@

and with a unit test to force a lock collision as before,

@@@ ruby

test &quot;optimistic_locking_behaviour&quot; do
    first_course_instance = Course.find_by_name('Rails 101')
    second_course_instance = Course.find_by_name('Rails 101')
    
    first_course_instance.touch
    assert first_course_instance.attendees &lt;&lt; users(:one), &quot;First instance succeeded&quot;

    assert_raises ActiveRecord::StaleObjectError do
      second_course_instance.attendees &lt;&lt; users(:two)
    end
  end

@@@

results in the following set of sql output,

@@@ sql

SQL (0.0ms)  BEGIN
  SQL (0.4ms)  SHOW TABLES
  Course Load (0.3ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`name` = 'Rails 101') LIMIT 1
  Course Load (0.1ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`name` = 'Rails 101') LIMIT 1
  User Load (0.4ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 980190962) LIMIT 1
  SQL (0.1ms)  SAVEPOINT active_record_1
  SQL (2.8ms)  describe `attendances`
  AREL (0.2ms)  INSERT INTO `attendances` (`user_id`, `course_id`, `created_at`, `updated_at`) VALUES (980190962, 52995405, '2011-01-26 13:24:48', '2011-01-26 13:24:48')
  Course Load (0.3ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`id` = 52995405) LIMIT 1
  AREL (0.2ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)
  **AREL (0.1ms)  UPDATE `courses` SET `updated_at` = '2011-01-26 13:24:48' WHERE (`courses`.`id` = 52995405)**
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  User Load (0.1ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 298486374) LIMIT 1
  SQL (0.1ms)  SAVEPOINT active_record_1
  AREL (0.2ms)  INSERT INTO `attendances` (`user_id`, `course_id`, `created_at`, `updated_at`) VALUES (298486374, 52995405, '2011-01-26 13:24:48', '2011-01-26 13:24:48')
  Course Load (0.1ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`id` = 52995405) LIMIT 1
  AREL (0.1ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)
  AREL (0.1ms)  UPDATE `courses` SET `updated_at` = '2011-01-26 13:24:48' WHERE (`courses`.`id` = 52995405)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (1.3ms)  ROLLBACK

@@@

Notice that the implicit update to the Course object (highlighted in bold), facilitated through the 

@@@ ruby 

:touch =&gt; true 

@@@ 

option, doesn't take into account the lock_version of the row. Therefore, a locking collision will never be detected in the test. I think that either 

a) ActiveRecord.touch should be aware of the lock_version column and handle this accordingly

or 

b) the resulting update to the parent object (Course) should be check for a lock_version mismatch rather than simply increasing the lock version value by 1 i.e.

@@@ sql

AREL (0.2ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)

@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Given the following models,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; ActiveRecord::Base

  has_many :courses

end

class Course &amp;lt; ActiveRecord::Base
  
  belongs_to :user

end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;where Course has a lock version column defined,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
create_table :courses do |t|
      ...
      t.integer :lock_version, :default =&amp;gt; 0
      ...
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;the following unit test to force a locking collision will
pass,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
test &quot;optimistic_locking_behaviour&quot; do
    first_course_instance = Course.find_by_name('Rails 101')
    second_course_instance = Course.find_by_name('Rails 101')
    
    first_course_instance.user = users(:one)
    second_course_instance.user = users(:two)
    
    assert first_course_instance.save, &quot;First instance save succeeded&quot;
    
    assert_raises ActiveRecord::StaleObjectError do
      second_course_instance.save
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;a look at log/test.log shows,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql&quot;&gt;
UPDATE `courses` SET `user_id` = 980190962, `updated_at` = '2011-01-26 13:02:53', `lock_version` = 1 WHERE (`courses`.`id` = 52995405 AND `courses`.`lock_version` = 0)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;where the resulting query on the course object correctly checks
the lock_version on update.&lt;/p&gt;
&lt;p&gt;However, if the relationship between User and Course is changed
to be many to many using has_many :through, there is no explicit
checking of the lock_version on update,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; ActiveRecord::Base

  has_many :attendances
  has_many :registered_courses, :through =&amp;gt; :attendances, :source =&amp;gt; :course 

end

class Course &amp;lt; ActiveRecord::Base
  
  has_many :attendances
  has_many :attendees, :through =&amp;gt; :attendances, :source =&amp;gt; :user

end

class Attendance &amp;lt; ActiveRecord::Base
  
  belongs_to :user
  belongs_to :course, :counter_cache =&amp;gt; true, :touch =&amp;gt; true

end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and with a unit test to force a lock collision as before,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
test &quot;optimistic_locking_behaviour&quot; do
    first_course_instance = Course.find_by_name('Rails 101')
    second_course_instance = Course.find_by_name('Rails 101')
    
    first_course_instance.touch
    assert first_course_instance.attendees &amp;lt;&amp;lt; users(:one), &quot;First instance succeeded&quot;

    assert_raises ActiveRecord::StaleObjectError do
      second_course_instance.attendees &amp;lt;&amp;lt; users(:two)
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;results in the following set of sql output,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql&quot;&gt;
SQL (0.0ms)  BEGIN
  SQL (0.4ms)  SHOW TABLES
  Course Load (0.3ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`name` = 'Rails 101') LIMIT 1
  Course Load (0.1ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`name` = 'Rails 101') LIMIT 1
  User Load (0.4ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 980190962) LIMIT 1
  SQL (0.1ms)  SAVEPOINT active_record_1
  SQL (2.8ms)  describe `attendances`
  AREL (0.2ms)  INSERT INTO `attendances` (`user_id`, `course_id`, `created_at`, `updated_at`) VALUES (980190962, 52995405, '2011-01-26 13:24:48', '2011-01-26 13:24:48')
  Course Load (0.3ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`id` = 52995405) LIMIT 1
  AREL (0.2ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)
  **AREL (0.1ms)  UPDATE `courses` SET `updated_at` = '2011-01-26 13:24:48' WHERE (`courses`.`id` = 52995405)**
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  User Load (0.1ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 298486374) LIMIT 1
  SQL (0.1ms)  SAVEPOINT active_record_1
  AREL (0.2ms)  INSERT INTO `attendances` (`user_id`, `course_id`, `created_at`, `updated_at`) VALUES (298486374, 52995405, '2011-01-26 13:24:48', '2011-01-26 13:24:48')
  Course Load (0.1ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`id` = 52995405) LIMIT 1
  AREL (0.1ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)
  AREL (0.1ms)  UPDATE `courses` SET `updated_at` = '2011-01-26 13:24:48' WHERE (`courses`.`id` = 52995405)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (1.3ms)  ROLLBACK&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice that the implicit update to the Course object
(highlighted in bold), facilitated through the&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
:touch =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;option, doesn't take into account the lock_version of the row.
Therefore, a locking collision will never be detected in the test.
I think that either&lt;/p&gt;
&lt;p&gt;a) ActiveRecord.touch should be aware of the lock_version column
and handle this accordingly&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;b) the resulting update to the parent object (Course) should be
check for a lock_version mismatch rather than simply increasing the
lock version value by 1 i.e.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql&quot;&gt;
AREL (0.2ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Given the following models, 

@@@ ruby

class User &lt; ActiveRecord::Base

  has_many :courses

end

class Course &lt; ActiveRecord::Base
  
  belongs_to :user

end

@@@

where Course has a lock version column defined,

@@@ ruby

create_table :courses do |t|
      ...
      t.integer :lock_version, :default =&gt; 0
      ...
    end

@@@

the following unit test to force a locking collision will pass,

@@@ ruby

test &quot;optimistic_locking_behaviour&quot; do
    first_course_instance = Course.find_by_name('Rails 101')
    second_course_instance = Course.find_by_name('Rails 101')
    
    first_course_instance.user = users(:one)
    second_course_instance.user = users(:two)
    
    assert first_course_instance.save, &quot;First instance save succeeded&quot;
    
    assert_raises ActiveRecord::StaleObjectError do
      second_course_instance.save
    end
  end

@@@

a look at log/test.log shows,

@@@ sql

UPDATE `courses` SET `user_id` = 980190962, `updated_at` = '2011-01-26 13:02:53', `lock_version` = 1 WHERE (`courses`.`id` = 52995405 AND `courses`.`lock_version` = 0)

@@@

where the resulting query on the course object correctly checks the lock_version on update.


However, if the relationship between User and Course is changed to be many to many using has_many :through, there is no explicit checking of the lock_version on update,

@@@ ruby

class User &lt; ActiveRecord::Base

  has_many :attendances
  has_many :registered_courses, :through =&gt; :attendances, :source =&gt; :course 

end

class Course &lt; ActiveRecord::Base
  
  has_many :attendances
  has_many :attendees, :through =&gt; :attendances, :source =&gt; :user

end

class Attendance &lt; ActiveRecord::Base
  
  belongs_to :user
  belongs_to :course, :counter_cache =&gt; true, :touch =&gt; true

end

@@@

and with a unit test to force a lock collision as before,

@@@ ruby

test &quot;optimistic_locking_behaviour&quot; do
    first_course_instance = Course.find_by_name('Rails 101')
    second_course_instance = Course.find_by_name('Rails 101')
    
    first_course_instance.touch
    assert first_course_instance.attendees &lt;&lt; users(:one), &quot;First instance succeeded&quot;

    assert_raises ActiveRecord::StaleObjectError do
      second_course_instance.attendees &lt;&lt; users(:two)
    end
  end

@@@

results in the following set of sql output,

@@@ sql

SQL (0.0ms)  BEGIN
  SQL (0.4ms)  SHOW TABLES
  Course Load (0.3ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`name` = 'Rails 101') LIMIT 1
  Course Load (0.1ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`name` = 'Rails 101') LIMIT 1
  User Load (0.4ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 980190962) LIMIT 1
  SQL (0.1ms)  SAVEPOINT active_record_1
  SQL (2.8ms)  describe `attendances`
  AREL (0.2ms)  INSERT INTO `attendances` (`user_id`, `course_id`, `created_at`, `updated_at`) VALUES (980190962, 52995405, '2011-01-26 13:24:48', '2011-01-26 13:24:48')
  Course Load (0.3ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`id` = 52995405) LIMIT 1
  AREL (0.2ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)
  **AREL (0.1ms)  UPDATE `courses` SET `updated_at` = '2011-01-26 13:24:48' WHERE (`courses`.`id` = 52995405)**
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  User Load (0.1ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 298486374) LIMIT 1
  SQL (0.1ms)  SAVEPOINT active_record_1
  AREL (0.2ms)  INSERT INTO `attendances` (`user_id`, `course_id`, `created_at`, `updated_at`) VALUES (298486374, 52995405, '2011-01-26 13:24:48', '2011-01-26 13:24:48')
  Course Load (0.1ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`id` = 52995405) LIMIT 1
  AREL (0.1ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)
  AREL (0.1ms)  UPDATE `courses` SET `updated_at` = '2011-01-26 13:24:48' WHERE (`courses`.`id` = 52995405)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (1.3ms)  ROLLBACK

@@@

Notice that the implicit update to the Course object (highlighted in bold), facilitated through the 

@@@ ruby 

:touch =&gt; true 

@@@ 

option, doesn't take into account the lock_version of the row. Therefore, a locking collision will never be detected in the test. I think that either 

a) ActiveRecord.touch should be aware of the lock_version column and handle this accordingly

or 

b) the resulting update to the parent object (Course) should be check for a lock_version mismatch rather than simply increasing the lock version value by 1 i.e.

@@@ sql

AREL (0.2ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Given the following models,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; ActiveRecord::Base

  has_many :courses

end

class Course &amp;lt; ActiveRecord::Base
  
  belongs_to :user

end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;where Course has a lock version column defined,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
create_table :courses do |t|
      ...
      t.integer :lock_version, :default =&amp;gt; 0
      ...
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;the following unit test to force a locking collision will
pass,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
test &quot;optimistic_locking_behaviour&quot; do
    first_course_instance = Course.find_by_name('Rails 101')
    second_course_instance = Course.find_by_name('Rails 101')
    
    first_course_instance.user = users(:one)
    second_course_instance.user = users(:two)
    
    assert first_course_instance.save, &quot;First instance save succeeded&quot;
    
    assert_raises ActiveRecord::StaleObjectError do
      second_course_instance.save
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;a look at log/test.log shows,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql&quot;&gt;
UPDATE `courses` SET `user_id` = 980190962, `updated_at` = '2011-01-26 13:02:53', `lock_version` = 1 WHERE (`courses`.`id` = 52995405 AND `courses`.`lock_version` = 0)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;where the resulting query on the course object correctly checks
the lock_version on update.&lt;/p&gt;
&lt;p&gt;However, if the relationship between User and Course is changed
to be many to many using has_many :through, there is no explicit
checking of the lock_version on update,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; ActiveRecord::Base

  has_many :attendances
  has_many :registered_courses, :through =&amp;gt; :attendances, :source =&amp;gt; :course 

end

class Course &amp;lt; ActiveRecord::Base
  
  has_many :attendances
  has_many :attendees, :through =&amp;gt; :attendances, :source =&amp;gt; :user

end

class Attendance &amp;lt; ActiveRecord::Base
  
  belongs_to :user
  belongs_to :course, :counter_cache =&amp;gt; true, :touch =&amp;gt; true

end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and with a unit test to force a lock collision as before,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
test &quot;optimistic_locking_behaviour&quot; do
    first_course_instance = Course.find_by_name('Rails 101')
    second_course_instance = Course.find_by_name('Rails 101')
    
    first_course_instance.touch
    assert first_course_instance.attendees &amp;lt;&amp;lt; users(:one), &quot;First instance succeeded&quot;

    assert_raises ActiveRecord::StaleObjectError do
      second_course_instance.attendees &amp;lt;&amp;lt; users(:two)
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;results in the following set of sql output,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql&quot;&gt;
SQL (0.0ms)  BEGIN
  SQL (0.4ms)  SHOW TABLES
  Course Load (0.3ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`name` = 'Rails 101') LIMIT 1
  Course Load (0.1ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`name` = 'Rails 101') LIMIT 1
  User Load (0.4ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 980190962) LIMIT 1
  SQL (0.1ms)  SAVEPOINT active_record_1
  SQL (2.8ms)  describe `attendances`
  AREL (0.2ms)  INSERT INTO `attendances` (`user_id`, `course_id`, `created_at`, `updated_at`) VALUES (980190962, 52995405, '2011-01-26 13:24:48', '2011-01-26 13:24:48')
  Course Load (0.3ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`id` = 52995405) LIMIT 1
  AREL (0.2ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)
  **AREL (0.1ms)  UPDATE `courses` SET `updated_at` = '2011-01-26 13:24:48' WHERE (`courses`.`id` = 52995405)**
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  User Load (0.1ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` = 298486374) LIMIT 1
  SQL (0.1ms)  SAVEPOINT active_record_1
  AREL (0.2ms)  INSERT INTO `attendances` (`user_id`, `course_id`, `created_at`, `updated_at`) VALUES (298486374, 52995405, '2011-01-26 13:24:48', '2011-01-26 13:24:48')
  Course Load (0.1ms)  SELECT `courses`.* FROM `courses` WHERE (`courses`.`id` = 52995405) LIMIT 1
  AREL (0.1ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)
  AREL (0.1ms)  UPDATE `courses` SET `updated_at` = '2011-01-26 13:24:48' WHERE (`courses`.`id` = 52995405)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (1.3ms)  ROLLBACK&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice that the implicit update to the Course object
(highlighted in bold), facilitated through the&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
:touch =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;option, doesn't take into account the lock_version of the row.
Therefore, a locking collision will never be detected in the test.
I think that either&lt;/p&gt;
&lt;p&gt;a) ActiveRecord.touch should be aware of the lock_version column
and handle this accordingly&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;b) the resulting update to the parent object (Course) should be
check for a lock_version mismatch rather than simply increasing the
lock version value by 1 i.e.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql&quot;&gt;
AREL (0.2ms)  UPDATE `courses` SET `attendances_count` = COALESCE(`attendances_count`, 0) + 1, `lock_version` = COALESCE(`lock_version`, 0) + 1 WHERE (`courses`.`id` = 52995405)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-26T13:42:00+00:00</created-at>
      <creator-id type="integer">134283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6335</number>
      <permalink>failure-to-detect-optimistic-locking-collision-on-has_many-through-relationship</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>failure to detect optimistic locking collision on has_many :through relationship</title>
      <updated-at type="datetime">2011-01-26T13:42:03+00:00</updated-at>
      <user-id type="integer">134283</user-id>
      <version type="integer">1</version>
      <user-name>Cathal O' Riordan</user-name>
      <creator-name>Cathal O' Riordan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6335</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-27T01:00:09+01:00</created-at>
      <creator-id type="integer">134283</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6335</number>
      <permalink>failure-to-detect-optimistic-locking-collision-on-has_many-through-relationship</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>failure to detect optimistic locking collision on has_many :through relationship</title>
      <updated-at type="datetime">2011-04-27T01:00:45+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">2</version>
      <user-name>rails</user-name>
      <creator-name>Cathal O' Riordan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6335</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-27T01:00:09+01:00</created-at>
      <creator-id type="integer">134283</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6335</number>
      <permalink>failure-to-detect-optimistic-locking-collision-on-has_many-through-relationship</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>failure to detect optimistic locking collision on has_many :through relationship</title>
      <updated-at type="datetime">2011-04-27T01:00:42+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Cathal O' Riordan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6335</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
