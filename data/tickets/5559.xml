<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">89656</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-09-05T17:27:43+01:00</created-at>
  <creator-id type="integer">33030</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5559</number>
  <permalink>reload-inconsistent-in-ar</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>reload inconsistent in AR</title>
  <updated-at type="datetime">2010-10-06T05:41:02+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">4</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Kane</creator-name>
  <assigned-user-name>Rohit Arondekar</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5559</url>
  <priority-name>Low</priority-name>
  <original-body>ActiveRecord::Base#reload returns the record or throws ActiveRecord::RecordNotFound.
But AssociationProxy#reload just catches this error and returns nil.

I think its a huge problem that a record fetched through an association behaves different as a plain record. See test for example.

This hit me hard while implementing a spec which checked if some records would be destroyed with this code:

@@@ ruby
 lambda { entity.reload }.should raise_error(ActiveRecord::RecordNotFound)
 # entity was fetched through an association so reload returned nil
@@@</original-body>
  <latest-body>ActiveRecord::Base#reload returns the record or throws ActiveRecord::RecordNotFound.
But AssociationProxy#reload just catches this error and returns nil.

I think its a huge problem that a record fetched through an association behaves different as a plain record. See test for example.

This hit me hard while implementing a spec which checked if some records would be destroyed with this code:

@@@ ruby
 lambda { entity.reload }.should raise_error(ActiveRecord::RecordNotFound)
 # entity was fetched through an association so reload returned nil
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActiveRecord::Base#reload returns the record or throws
ActiveRecord::RecordNotFound.&lt;br&gt;
But AssociationProxy#reload just catches this error and returns
nil.&lt;/p&gt;
&lt;p&gt;I think its a huge problem that a record fetched through an
association behaves different as a plain record. See test for
example.&lt;/p&gt;
&lt;p&gt;This hit me hard while implementing a spec which checked if some
records would be destroyed with this code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt; lambda { entity.reload }.should raise_error(ActiveRecord::RecordNotFound)
 # entity was fetched through an association so reload returned nil&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveRecord::Base#reload returns the record or throws ActiveRecord::RecordNotFound.
But AssociationProxy#reload just catches this error and returns nil.

I think its a huge problem that a record fetched through an association behaves different as a plain record. See test for example.

This hit me hard while implementing a spec which checked if some records would be destroyed with this code:

@@@ ruby
 lambda { entity.reload }.should raise_error(ActiveRecord::RecordNotFound)
 # entity was fetched through an association so reload returned nil
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveRecord::Base#reload returns the record or throws
ActiveRecord::RecordNotFound.&lt;br&gt;
But AssociationProxy#reload just catches this error and returns
nil.&lt;/p&gt;
&lt;p&gt;I think its a huge problem that a record fetched through an
association behaves different as a plain record. See test for
example.&lt;/p&gt;
&lt;p&gt;This hit me hard while implementing a spec which checked if some
records would be destroyed with this code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt; lambda { entity.reload }.should raise_error(ActiveRecord::RecordNotFound)
 # entity was fetched through an association so reload returned nil&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-05T17:27:43+01:00</created-at>
      <creator-id type="integer">33030</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5559</number>
      <permalink>reload-inconsistent-in-ar</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>reload inconsistent in AR</title>
      <updated-at type="datetime">2010-09-05T17:27:45+01:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">1</version>
      <user-name>Kane</user-name>
      <creator-name>Kane</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5559</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Whether or not that's inconsistent is rather subjective. Of course, if you try to reload a Active Record object that doesn't exist in the database anymore that should cause an error and it does.

But personally I'd be very surprised to see an error when reloading an empty association. I definitely think this is the intended behavior. Why don't you just check to see if `#reload` returns `nil`?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Whether or not that's inconsistent is rather subjective. Of
course, if you try to reload a Active Record object that doesn't
exist in the database anymore that should cause an error and it
does.&lt;/p&gt;
&lt;p&gt;But personally I'd be very surprised to see an error when
reloading an empty association. I definitely think this is the
intended behavior. Why don't you just check to see if
&lt;code&gt;#reload&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-05T18:43:16+01:00</created-at>
      <creator-id type="integer">33030</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5559</number>
      <permalink>reload-inconsistent-in-ar</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>reload inconsistent in AR</title>
      <updated-at type="datetime">2010-09-05T18:43:19+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">2</version>
      <user-name>David Trasbo</user-name>
      <creator-name>Kane</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5559</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">89656</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I think this can be marked `wontfix`.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think this can be marked &lt;code&gt;wontfix&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-09T08:12:04+01:00</created-at>
      <creator-id type="integer">33030</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5559</number>
      <permalink>reload-inconsistent-in-ar</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>reload inconsistent in AR</title>
      <updated-at type="datetime">2010-09-09T08:12:07+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">3</version>
      <user-name>David Trasbo</user-name>
      <creator-name>Kane</creator-name>
      <assigned-user-name>Rohit Arondekar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5559</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">89656</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T05:41:00+01:00</created-at>
      <creator-id type="integer">33030</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5559</number>
      <permalink>reload-inconsistent-in-ar</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>reload inconsistent in AR</title>
      <updated-at type="datetime">2010-10-06T05:41:02+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">4</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Kane</creator-name>
      <assigned-user-name>Rohit Arondekar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5559</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>5539519ff108709b6c195579a3048f823a450019</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-09-05T17:27:43+01:00</created-at>
      <filename>reload_test.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">659774</id>
      <size type="integer">1213</size>
      <uploader-id type="integer">33030</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/659774/reload_test.diff</url>
    </attachment>
  </attachments>
</ticket>
