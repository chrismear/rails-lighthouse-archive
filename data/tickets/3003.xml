<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">12714</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-08-07T08:34:18+01:00</created-at>
  <creator-id type="integer">20377</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3003</number>
  <permalink>multilocalization-of-actionmailer-and-tmail</permalink>
  <priority type="integer">40665</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Multilocalization of ActionMailer and TMail.</title>
  <updated-at type="datetime">2010-10-06T06:50:31+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">2</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Yugui (Yuki Sonoda)</creator-name>
  <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3003</url>
  <priority-name nil="true"></priority-name>
  <original-body>ActionMailer and TMail need multilocalization in Ruby 1.9 so that a Rails application send a mail with a correct encoding.

# Status #

## Japanese texts ##

ActionMailer always sends an email in UTF-8. According to RFC 1468, however, Japanese email should be encoded in ISO-2022-JP. The RFC is just a guide, not a standard. But most of MUA prefer ISO-2022-JP to UTF-8 for Japanese. Japanese mobile phones can send/receive internet emails but most of them accept only ISO-2022-JP.

So TMail can treat Japanese texts specially. 

* http://github.com/rails/rails/blob/master/actionmailer/lib/action_mailer/vendor/tmail-1.2.3/tmail/encode.rb

But ActionMailer does not use this capability. So Japanese developers use some monkey patches. 
This is an implementation in Ruby-GetText-Package.

* http://github.com/mutoh/gettext_rails/blob/master/lib/gettext_rails/action_mailer.rb

## Other locales ##

Now we can support other locales with Ruby 1.9.

TMail and Ruby-GetText-Package treats Japanese text specially. I think this is because

* Ancient versions of Ruby did not have Iconv,
* Iconv is too platform-depended,
* NKF and Kconv only supports Japanese,
* Both of the original developers of the libraries are Japanese.

According to RFC 1557, Korean emails should be encoded in ISO-2022-KR. 

I don't know enough about custom in other locales like Chinese/Vietnamese/Arabic. But Maybe this kind of problem can occur in these locales.

# TODO #

* ActionMailer should have capability to send an email in other encodings.
    * with String#encode in Ruby 1.9.
* Default mapping from language to preferred encoding so that a programmer assign a suitable encoding to an email by locale name.
    * Suitable encoding is not unique for a language. Japanese mobile phones which Softbank provides prefer UTF-8.
* TMail might need some fixes.
* Advices by Chinese/Vietnamese/Arabic/.... developers are necessary.</original-body>
  <latest-body>ActionMailer and TMail need multilocalization in Ruby 1.9 so that a Rails application send a mail with a correct encoding.

# Status #

## Japanese texts ##

ActionMailer always sends an email in UTF-8. According to RFC 1468, however, Japanese email should be encoded in ISO-2022-JP. The RFC is just a guide, not a standard. But most of MUA prefer ISO-2022-JP to UTF-8 for Japanese. Japanese mobile phones can send/receive internet emails but most of them accept only ISO-2022-JP.

So TMail can treat Japanese texts specially. 

* http://github.com/rails/rails/blob/master/actionmailer/lib/action_mailer/vendor/tmail-1.2.3/tmail/encode.rb

But ActionMailer does not use this capability. So Japanese developers use some monkey patches. 
This is an implementation in Ruby-GetText-Package.

* http://github.com/mutoh/gettext_rails/blob/master/lib/gettext_rails/action_mailer.rb

## Other locales ##

Now we can support other locales with Ruby 1.9.

TMail and Ruby-GetText-Package treats Japanese text specially. I think this is because

* Ancient versions of Ruby did not have Iconv,
* Iconv is too platform-depended,
* NKF and Kconv only supports Japanese,
* Both of the original developers of the libraries are Japanese.

According to RFC 1557, Korean emails should be encoded in ISO-2022-KR. 

I don't know enough about custom in other locales like Chinese/Vietnamese/Arabic. But Maybe this kind of problem can occur in these locales.

# TODO #

* ActionMailer should have capability to send an email in other encodings.
    * with String#encode in Ruby 1.9.
* Default mapping from language to preferred encoding so that a programmer assign a suitable encoding to an email by locale name.
    * Suitable encoding is not unique for a language. Japanese mobile phones which Softbank provides prefer UTF-8.
* TMail might need some fixes.
* Advices by Chinese/Vietnamese/Arabic/.... developers are necessary.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActionMailer and TMail need multilocalization in Ruby 1.9 so
that a Rails application send a mail with a correct encoding.&lt;/p&gt;
&lt;h1&gt;Status&lt;/h1&gt;
&lt;h2&gt;Japanese texts&lt;/h2&gt;
&lt;p&gt;ActionMailer always sends an email in UTF-8. According to RFC
1468, however, Japanese email should be encoded in ISO-2022-JP. The
RFC is just a guide, not a standard. But most of MUA prefer
ISO-2022-JP to UTF-8 for Japanese. Japanese mobile phones can
send/receive internet emails but most of them accept only
ISO-2022-JP.&lt;/p&gt;
&lt;p&gt;So TMail can treat Japanese texts specially.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/rails/rails/blob/master/actionmailer/lib/action_mailer/vendor/tmail-1.2.3/tmail/encode.rb&quot;&gt;
http://github.com/rails/rails/bl...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But ActionMailer does not use this capability. So Japanese
developers use some monkey patches. This is an implementation in
Ruby-GetText-Package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/mutoh/gettext_rails/blob/master/lib/gettext_rails/action_mailer.rb&quot;&gt;
http://github.com/mutoh/gettext_...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other locales&lt;/h2&gt;
&lt;p&gt;Now we can support other locales with Ruby 1.9.&lt;/p&gt;
&lt;p&gt;TMail and Ruby-GetText-Package treats Japanese text specially. I
think this is because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ancient versions of Ruby did not have Iconv,&lt;/li&gt;
&lt;li&gt;Iconv is too platform-depended,&lt;/li&gt;
&lt;li&gt;NKF and Kconv only supports Japanese,&lt;/li&gt;
&lt;li&gt;Both of the original developers of the libraries are
Japanese.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to RFC 1557, Korean emails should be encoded in
ISO-2022-KR.&lt;/p&gt;
&lt;p&gt;I don't know enough about custom in other locales like
Chinese/Vietnamese/Arabic. But Maybe this kind of problem can occur
in these locales.&lt;/p&gt;
&lt;h1&gt;TODO&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ActionMailer should have capability to send an email in other
encodings.
&lt;ul&gt;
&lt;li&gt;with String#encode in Ruby 1.9.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Default mapping from language to preferred encoding so that a
programmer assign a suitable encoding to an email by locale name.
&lt;ul&gt;
&lt;li&gt;Suitable encoding is not unique for a language. Japanese mobile
phones which Softbank provides prefer UTF-8.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TMail might need some fixes.&lt;/li&gt;
&lt;li&gt;Advices by Chinese/Vietnamese/Arabic/.... developers are
necessary.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActionMailer and TMail need multilocalization in Ruby 1.9 so that a Rails application send a mail with a correct encoding.

# Status #

## Japanese texts ##

ActionMailer always sends an email in UTF-8. According to RFC 1468, however, Japanese email should be encoded in ISO-2022-JP. The RFC is just a guide, not a standard. But most of MUA prefer ISO-2022-JP to UTF-8 for Japanese. Japanese mobile phones can send/receive internet emails but most of them accept only ISO-2022-JP.

So TMail can treat Japanese texts specially. 

* http://github.com/rails/rails/blob/master/actionmailer/lib/action_mailer/vendor/tmail-1.2.3/tmail/encode.rb

But ActionMailer does not use this capability. So Japanese developers use some monkey patches. 
This is an implementation in Ruby-GetText-Package.

* http://github.com/mutoh/gettext_rails/blob/master/lib/gettext_rails/action_mailer.rb

## Other locales ##

Now we can support other locales with Ruby 1.9.

TMail and Ruby-GetText-Package treats Japanese text specially. I think this is because

* Ancient versions of Ruby did not have Iconv,
* Iconv is too platform-depended,
* NKF and Kconv only supports Japanese,
* Both of the original developers of the libraries are Japanese.

According to RFC 1557, Korean emails should be encoded in ISO-2022-KR. 

I don't know enough about custom in other locales like Chinese/Vietnamese/Arabic. But Maybe this kind of problem can occur in these locales.

# TODO #

* ActionMailer should have capability to send an email in other encodings.
    * with String#encode in Ruby 1.9.
* Default mapping from language to preferred encoding so that a programmer assign a suitable encoding to an email by locale name.
    * Suitable encoding is not unique for a language. Japanese mobile phones which Softbank provides prefer UTF-8.
* TMail might need some fixes.
* Advices by Chinese/Vietnamese/Arabic/.... developers are necessary.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActionMailer and TMail need multilocalization in Ruby 1.9 so
that a Rails application send a mail with a correct encoding.&lt;/p&gt;
&lt;h1&gt;Status&lt;/h1&gt;
&lt;h2&gt;Japanese texts&lt;/h2&gt;
&lt;p&gt;ActionMailer always sends an email in UTF-8. According to RFC
1468, however, Japanese email should be encoded in ISO-2022-JP. The
RFC is just a guide, not a standard. But most of MUA prefer
ISO-2022-JP to UTF-8 for Japanese. Japanese mobile phones can
send/receive internet emails but most of them accept only
ISO-2022-JP.&lt;/p&gt;
&lt;p&gt;So TMail can treat Japanese texts specially.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=
&quot;http://github.com/rails/rails/blob/master/actionmailer/lib/action_mailer/vendor/tmail-1.2.3/tmail/encode.rb&quot;&gt;
http://github.com/rails/rails/blob/master/actionmailer/lib/action_m...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But ActionMailer does not use this capability. So Japanese
developers use some monkey patches.&lt;br&gt;
This is an implementation in Ruby-GetText-Package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=
&quot;http://github.com/mutoh/gettext_rails/blob/master/lib/gettext_rails/action_mailer.rb&quot;&gt;
http://github.com/mutoh/gettext_rails/blob/master/lib/gettext_rails...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other locales&lt;/h2&gt;
&lt;p&gt;Now we can support other locales with Ruby 1.9.&lt;/p&gt;
&lt;p&gt;TMail and Ruby-GetText-Package treats Japanese text specially. I
think this is because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ancient versions of Ruby did not have Iconv,&lt;/li&gt;
&lt;li&gt;Iconv is too platform-depended,&lt;/li&gt;
&lt;li&gt;NKF and Kconv only supports Japanese,&lt;/li&gt;
&lt;li&gt;Both of the original developers of the libraries are
Japanese.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to RFC 1557, Korean emails should be encoded in
ISO-2022-KR.&lt;/p&gt;
&lt;p&gt;I don't know enough about custom in other locales like
Chinese/Vietnamese/Arabic. But Maybe this kind of problem can occur
in these locales.&lt;/p&gt;
&lt;h1&gt;TODO&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ActionMailer should have capability to send an email in other
encodings.
&lt;ul&gt;
&lt;li&gt;with String#encode in Ruby 1.9.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Default mapping from language to preferred encoding so that a
programmer assign a suitable encoding to an email by locale name.
&lt;ul&gt;
&lt;li&gt;Suitable encoding is not unique for a language. Japanese mobile
phones which Softbank provides prefer UTF-8.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TMail might need some fixes.&lt;/li&gt;
&lt;li&gt;Advices by Chinese/Vietnamese/Arabic/.... developers are
necessary.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-07T08:34:18+01:00</created-at>
      <creator-id type="integer">20377</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3003</number>
      <permalink>multilocalization-of-actionmailer-and-tmail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Multilocalization of ActionMailer and TMail.</title>
      <updated-at type="datetime">2009-08-07T08:34:24+01:00</updated-at>
      <user-id type="integer">20377</user-id>
      <version type="integer">1</version>
      <user-name>Yugui (Yuki Sonoda)</user-name>
      <creator-name>Yugui (Yuki Sonoda)</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3003</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:50:29+01:00</created-at>
      <creator-id type="integer">20377</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3003</number>
      <permalink>multilocalization-of-actionmailer-and-tmail</permalink>
      <priority type="integer">40665</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Multilocalization of ActionMailer and TMail.</title>
      <updated-at type="datetime">2010-10-06T06:50:31+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Yugui (Yuki Sonoda)</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3003</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
