<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-04-17T20:13:33+01:00</created-at>
  <creator-id type="integer">178</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">18</number>
  <permalink>efficient-include-breaks-when-using-finder_sql</permalink>
  <priority type="integer">9336</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord patch</tag>
  <title>Efficient include breaks when using finder_sql</title>
  <updated-at type="datetime">2008-04-23T09:23:54+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">2</version>
  <user-name>Repository</user-name>
  <creator-name>Joshua Bates</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/18</url>
  <priority-name nil="true"></priority-name>
  <original-body>The efficient include? for association collections introduced in &quot;e223216e9ac496d4dad53c7ada1406e9e15fbb55&quot;:http://github.com/rails/rails/commit/e223216e9ac496d4dad53c7ada1406e9e15fbb55 breaks when the association uses finder_sql.

This test
@@@ ruby
def test_include_checks_if_record_exists_if_target_not_loaded_and_uses_finder_sql
  firm = companies(:first_firm)
  client = firm.clients_using_sql.first

  firm.reload
  assert ! firm.clients_using_sql.loaded?
  assert_queries(1) do
    assert firm.clients_using_sql.include?(client)
  end
  assert ! firm.clients_using_sql.loaded?
end

@@@

Produces this error
test_include_checks_if_record_exists_if_target_not_loaded_and_uses_finder_sql(HasManyAssociationsTest):
ActiveRecord::StatementInvalid: Mysql::Error: Operand should contain 1 column(s): SELECT `companies`.id FROM `companies`     WHERE (`companies`.`id` = 3) AND (SELECT * FROM companies WHERE client_of = 1) AND ( (`companies`.`type` = 'Client' OR `companies`.`type` = 'SpecialClient' OR `companies`.`type` = 'VerySpecialClient' ) )  LIMIT 1

Heres a patch that fixes it http://github.com/joshuabates/rails/commit/5ee43eb73a4e9010606ff62c26a37a64a80f8308</original-body>
  <latest-body>The efficient include? for association collections introduced in &quot;e223216e9ac496d4dad53c7ada1406e9e15fbb55&quot;:http://github.com/rails/rails/commit/e223216e9ac496d4dad53c7ada1406e9e15fbb55 breaks when the association uses finder_sql.

This test
@@@ ruby
def test_include_checks_if_record_exists_if_target_not_loaded_and_uses_finder_sql
  firm = companies(:first_firm)
  client = firm.clients_using_sql.first

  firm.reload
  assert ! firm.clients_using_sql.loaded?
  assert_queries(1) do
    assert firm.clients_using_sql.include?(client)
  end
  assert ! firm.clients_using_sql.loaded?
end

@@@

Produces this error
test_include_checks_if_record_exists_if_target_not_loaded_and_uses_finder_sql(HasManyAssociationsTest):
ActiveRecord::StatementInvalid: Mysql::Error: Operand should contain 1 column(s): SELECT `companies`.id FROM `companies`     WHERE (`companies`.`id` = 3) AND (SELECT * FROM companies WHERE client_of = 1) AND ( (`companies`.`type` = 'Client' OR `companies`.`type` = 'SpecialClient' OR `companies`.`type` = 'VerySpecialClient' ) )  LIMIT 1

Heres a patch that fixes it http://github.com/joshuabates/rails/commit/5ee43eb73a4e9010606ff62c26a37a64a80f8308</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
The efficient include? for association collections introduced in &lt;a href=&quot;http://github.com/rails/rails/commit/e223216e9ac496d4dad53c7ada1406e9e15fbb55&quot;&gt;e223216e9ac496d4dad53c7ada1406e9e15fbb55&lt;/a&gt; breaks when the association uses finder_sql.
&lt;/p&gt;&lt;p&gt;
This test
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def test_include_checks_if_record_exists_if_target_not_loaded_and_uses_finder_sql
  firm = companies(:first_firm)
  client = firm.clients_using_sql.first

  firm.reload
  assert ! firm.clients_using_sql.loaded?
  assert_queries(1) do
    assert firm.clients_using_sql.include?(client)
  end
  assert ! firm.clients_using_sql.loaded?
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Produces this error
&lt;/p&gt;&lt;p&gt;
test_include_checks_if_record_exists_if_target_not_loaded_and_uses_finder_sql(HasManyAssociationsTest):
&lt;/p&gt;&lt;p&gt;
ActiveRecord::StatementInvalid: Mysql::Error: Operand should contain 1 column(s): SELECT `companies`.id FROM `companies`     WHERE (`companies`.`id` = 3) AND (SELECT * FROM companies WHERE client_of = 1) AND ( (`companies`.`type` = 'Client' OR `companies`.`type` = 'SpecialClient' OR `companies`.`type` = 'VerySpecialClient' ) )  LIMIT 1
&lt;/p&gt;&lt;p&gt;
Heres a patch that fixes it &lt;a href=&quot;http://github.com/joshuabates/rails/commit/5ee43eb73a4e9010606ff62c26a37a64a80f8308&quot;&gt;http://github.com/joshuabates/ra...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The efficient include? for association collections introduced in &quot;e223216e9ac496d4dad53c7ada1406e9e15fbb55&quot;:http://github.com/rails/rails/commit/e223216e9ac496d4dad53c7ada1406e9e15fbb55 breaks when the association uses finder_sql.

This test
@@@ ruby
def test_include_checks_if_record_exists_if_target_not_loaded_and_uses_finder_sql
  firm = companies(:first_firm)
  client = firm.clients_using_sql.first

  firm.reload
  assert ! firm.clients_using_sql.loaded?
  assert_queries(1) do
    assert firm.clients_using_sql.include?(client)
  end
  assert ! firm.clients_using_sql.loaded?
end

@@@

Produces this error
test_include_checks_if_record_exists_if_target_not_loaded_and_uses_finder_sql(HasManyAssociationsTest):
ActiveRecord::StatementInvalid: Mysql::Error: Operand should contain 1 column(s): SELECT `companies`.id FROM `companies`     WHERE (`companies`.`id` = 3) AND (SELECT * FROM companies WHERE client_of = 1) AND ( (`companies`.`type` = 'Client' OR `companies`.`type` = 'SpecialClient' OR `companies`.`type` = 'VerySpecialClient' ) )  LIMIT 1

Heres a patch that fixes it http://github.com/joshuabates/rails/commit/5ee43eb73a4e9010606ff62c26a37a64a80f8308</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The efficient include? for association collections introduced in &lt;a href=&quot;http://github.com/rails/rails/commit/e223216e9ac496d4dad53c7ada1406e9e15fbb55&quot;&gt;e223216e9ac496d4dad53c7ada1406e9e15fbb55&lt;/a&gt; breaks when the association uses finder_sql.
&lt;/p&gt;&lt;p&gt;
This test
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def test_include_checks_if_record_exists_if_target_not_loaded_and_uses_finder_sql
  firm = companies(:first_firm)
  client = firm.clients_using_sql.first

  firm.reload
  assert ! firm.clients_using_sql.loaded?
  assert_queries(1) do
    assert firm.clients_using_sql.include?(client)
  end
  assert ! firm.clients_using_sql.loaded?
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Produces this error
&lt;/p&gt;&lt;p&gt;
test_include_checks_if_record_exists_if_target_not_loaded_and_uses_finder_sql(HasManyAssociationsTest):
&lt;/p&gt;&lt;p&gt;
ActiveRecord::StatementInvalid: Mysql::Error: Operand should contain 1 column(s): SELECT `companies`.id FROM `companies`     WHERE (`companies`.`id` = 3) AND (SELECT * FROM companies WHERE client_of = 1) AND ( (`companies`.`type` = 'Client' OR `companies`.`type` = 'SpecialClient' OR `companies`.`type` = 'VerySpecialClient' ) )  LIMIT 1
&lt;/p&gt;&lt;p&gt;
Heres a patch that fixes it &lt;a href=&quot;http://github.com/joshuabates/rails/commit/5ee43eb73a4e9010606ff62c26a37a64a80f8308&quot;&gt;http://github.com/joshuabates/ra...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-17T20:13:33+01:00</created-at>
      <creator-id type="integer">178</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">18</number>
      <permalink>efficient-include-breaks-when-using-finder_sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Efficient include breaks when using finder_sql</title>
      <updated-at type="datetime">2008-04-17T20:13:33+01:00</updated-at>
      <user-id type="integer">178</user-id>
      <version type="integer">1</version>
      <user-name>Joshua Bates</user-name>
      <creator-name>Joshua Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/18</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [b6aa0e13b4e590b82550a6464924f431e57229df]) Fix include? on has_many collections with finder_sql to fall back to Array include? rather than try to use SQL.
[#18 state:resolved]
http://github.com/rails/rails/commit/b6aa0e13b4e590b82550a6464924f431e57229df</body>
      <body-html>&lt;div&gt;&lt;p&gt;
(from [b6aa0e13b4e590b82550a6464924f431e57229df]) Fix include? on has_many collections with finder_sql to fall back to Array include? rather than try to use SQL.
&lt;/p&gt;&lt;p&gt;
[#18 state:resolved]
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/b6aa0e13b4e590b82550a6464924f431e57229df&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-04-23T09:23:54+01:00</created-at>
      <creator-id type="integer">178</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">18</number>
      <permalink>efficient-include-breaks-when-using-finder_sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Efficient include breaks when using finder_sql</title>
      <updated-at type="datetime">2008-04-23T09:23:54+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">2</version>
      <user-name>Repository</user-name>
      <creator-name>Joshua Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/18</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
