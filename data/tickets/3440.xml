<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-10-29T19:24:11+00:00</created-at>
  <creator-id type="integer">74856</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3440</number>
  <permalink>callbacks-not-being-called-with-validations-present</permalink>
  <priority type="integer">167934</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord active_record callbacks validation validations</tag>
  <title>Callbacks not being called with validations present</title>
  <updated-at type="datetime">2009-10-29T22:36:43+00:00</updated-at>
  <user-id type="integer">7211</user-id>
  <version type="integer">5</version>
  <user-name>CancelProfileIsBroken</user-name>
  <creator-name>Rory O</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3440</url>
  <priority-name nil="true"></priority-name>
  <original-body>To reproduce, consider a Person basic model with an attribute of name:string, with the requisite DB table.  Now add a failing callback to cause an error as such:

class Person &lt; ActiveRecord::Base
  before_create { raise }
end

And this fails as expected:

dhcp80ff9b7b:ptest rory$ script/console
Loading development environment (Rails 2.3.4)
&gt;&gt; z = Person.create
RuntimeError: 
(...)

Perfect, but then change the class to:

class Person &lt; ActiveRecord::Base
  before_create { raise }
  validates_presence_of :name
end
exit and reload the console:
dhcp80ff9b7b:ptest rory$ script/console
Loading development environment (Rails 2.3.4)
&gt;&gt; z = Person.create
=&gt; #&lt;Person id: nil, name: nil, created_at: nil, updated_at: nil&gt;

before_create is never being called, therefore raise is never hit to trigger the test failure.  All that is needed to reproduce is to use a basic class listed above.  Further of note, when using .create with these conflicting conditions, a record is NOT created in the database:

&gt;&gt; Person.all
=&gt; []

(note that in the console response, the id is nil)

The same behavior is also present when using before_create, after_create, before_save, after_save callbacks, including .create not creating a new record in the database.

I would track it down in the AR callbacks class, but I'm quite lost as to where to look there, apologies.</original-body>
  <latest-body>To reproduce, consider a Person basic model with an attribute of name:string, with the requisite DB table.  Now add a failing callback to cause an error as such:

class Person &lt; ActiveRecord::Base
  before_create { raise }
end

And this fails as expected:

dhcp80ff9b7b:ptest rory$ script/console
Loading development environment (Rails 2.3.4)
&gt;&gt; z = Person.create
RuntimeError: 
(...)

Perfect, but then change the class to:

class Person &lt; ActiveRecord::Base
  before_create { raise }
  validates_presence_of :name
end
exit and reload the console:
dhcp80ff9b7b:ptest rory$ script/console
Loading development environment (Rails 2.3.4)
&gt;&gt; z = Person.create
=&gt; #&lt;Person id: nil, name: nil, created_at: nil, updated_at: nil&gt;

before_create is never being called, therefore raise is never hit to trigger the test failure.  All that is needed to reproduce is to use a basic class listed above.  Further of note, when using .create with these conflicting conditions, a record is NOT created in the database:

&gt;&gt; Person.all
=&gt; []

(note that in the console response, the id is nil)

The same behavior is also present when using before_create, after_create, before_save, after_save callbacks, including .create not creating a new record in the database.

I would track it down in the AR callbacks class, but I'm quite lost as to where to look there, apologies.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;To reproduce, consider a Person basic model with an attribute of
name:string, with the requisite DB table. Now add a failing
callback to cause an error as such:&lt;/p&gt;
&lt;p&gt;class Person &amp;lt; ActiveRecord::Base&lt;br&gt;
before_create { raise } end&lt;/p&gt;
&lt;p&gt;And this fails as expected:&lt;/p&gt;
&lt;p&gt;dhcp80ff9b7b:ptest rory$ script/console&lt;br&gt;
Loading development environment (Rails 2.3.4)&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;z = Person.create RuntimeError:&lt;br&gt;
(...)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perfect, but then change the class to:&lt;/p&gt;
&lt;p&gt;class Person &amp;lt; ActiveRecord::Base&lt;br&gt;
before_create { raise } validates_presence_of :name end&lt;br&gt;
exit and reload the console:&lt;br&gt;
dhcp80ff9b7b:ptest rory$ script/console&lt;br&gt;
Loading development environment (Rails 2.3.4)&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;z = Person.create =&amp;gt; #&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;before_create is never being called, therefore raise is never
hit to trigger the test failure. All that is needed to reproduce is
to use a basic class listed above. Further of note, when using
.create with these conflicting conditions, a record is NOT created
in the database:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Person.all =&amp;gt; []&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;(note that in the console response, the id is nil)&lt;/p&gt;
&lt;p&gt;The same behavior is also present when using before_create,
after_create, before_save, after_save callbacks, including .create
not creating a new record in the database.&lt;/p&gt;
&lt;p&gt;I would track it down in the AR callbacks class, but I'm quite
lost as to where to look there, apologies.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>To reproduce, consider a Person basic model with an attribute of name:string, with the requisite DB table.  Now add a failing callback to cause an error as such:

class Person &lt; ActiveRecord::Base
  before_create { raise }
end

And this fails as expected:

dhcp80ff9b7b:ptest rory$ script/console
Loading development environment (Rails 2.3.4)
&gt;&gt; z = Person.create
RuntimeError: 
(...)

Perfect, but then change the class to:

class Person &lt; ActiveRecord::Base
  before_create { raise }
  validates_presence_of :name
end
exit and reload the console:
dhcp80ff9b7b:ptest rory$ script/console
Loading development environment (Rails 2.3.4)
&gt;&gt; z = Person.create
=&gt; #&lt;Person id: nil, name: nil, created_at: nil, updated_at: nil&gt;

before_create is never being called, therefore raise is never hit to trigger the test failure.  All that is needed to reproduce is to use a basic class listed above.  Further of note, when using .create with these conflicting conditions, a record is NOT created in the database:

&gt;&gt; Person.all
=&gt; []

(note that in the console response, the id is nil)

The same behavior is also present when using before_create, after_create, before_save, after_save callbacks, including .create not creating a new record in the database.

I would track it down in the AR callbacks class, but I'm quite lost as to where to look there, apologies.</body>
      <body-html>&lt;div&gt;&lt;p&gt;To reproduce, consider a Person basic model with an attribute of
name:string, with the requisite DB table. Now add a failing
callback to cause an error as such:&lt;/p&gt;
&lt;p&gt;class Person &amp;lt; ActiveRecord::Base&lt;br&gt;
before_create { raise } end&lt;/p&gt;
&lt;p&gt;And this fails as expected:&lt;/p&gt;
&lt;p&gt;dhcp80ff9b7b:ptest rory$ script/console&lt;br&gt;
Loading development environment (Rails 2.3.4)&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;z = Person.create RuntimeError:&lt;br&gt;
(...)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perfect, but then change the class to:&lt;/p&gt;
&lt;p&gt;class Person &amp;lt; ActiveRecord::Base&lt;br&gt;
before_create { raise } validates_presence_of :name end&lt;br&gt;
exit and reload the console:&lt;br&gt;
dhcp80ff9b7b:ptest rory$ script/console&lt;br&gt;
Loading development environment (Rails 2.3.4)&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;z = Person.create =&amp;gt; #&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;before_create is never being called, therefore raise is never
hit to trigger the test failure. All that is needed to reproduce is
to use a basic class listed above. Further of note, when using
.create with these conflicting conditions, a record is NOT created
in the database:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Person.all =&amp;gt; []&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;(note that in the console response, the id is nil)&lt;/p&gt;
&lt;p&gt;The same behavior is also present when using before_create,
after_create, before_save, after_save callbacks, including .create
not creating a new record in the database.&lt;/p&gt;
&lt;p&gt;I would track it down in the AR callbacks class, but I'm quite
lost as to where to look there, apologies.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-29T19:24:11+00:00</created-at>
      <creator-id type="integer">74856</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3440</number>
      <permalink>callbacks-not-being-called-with-validations-present</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord active_record callbacks validation validations</tag>
      <title>Callbacks not being called with validations present</title>
      <updated-at type="datetime">2009-10-29T19:24:16+00:00</updated-at>
      <user-id type="integer">74856</user-id>
      <version type="integer">1</version>
      <user-name>Rory O</user-name>
      <creator-name>Rory O</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3440</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry for the formatting, thought I had it

A normal Person class that fails on creation:

@@@
class Person &lt; ActiveRecord::Base
  before_create { raise }
end
@@@

A failing Person class that doesn't hit raise as expected:

@@@
class Person &lt; ActiveRecord::Base
  before_create { raise }
  validates_presence_of :name
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry for the formatting, thought I had it&lt;/p&gt;
&lt;p&gt;A normal Person class that fails on creation:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person &amp;lt; ActiveRecord::Base
  before_create { raise }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A failing Person class that doesn't hit raise as expected:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person &amp;lt; ActiveRecord::Base
  before_create { raise }
  validates_presence_of :name
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-29T19:27:03+00:00</created-at>
      <creator-id type="integer">74856</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3440</number>
      <permalink>callbacks-not-being-called-with-validations-present</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord active_record callbacks validation validations</tag>
      <title>Callbacks not being called with validations present</title>
      <updated-at type="datetime">2009-10-29T19:27:09+00:00</updated-at>
      <user-id type="integer">74856</user-id>
      <version type="integer">2</version>
      <user-name>Rory O</user-name>
      <creator-name>Rory O</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3440</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is expected. Check the callback ordering: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html

What you are looking for is 'before_validation_on_create'</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is expected. Check the callback ordering: &lt;a href=
&quot;http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html&quot;&gt;http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What you are looking for is 'before_validation_on_create'&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-29T19:52:52+00:00</created-at>
      <creator-id type="integer">74856</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3440</number>
      <permalink>callbacks-not-being-called-with-validations-present</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord active_record callbacks validation validations</tag>
      <title>Callbacks not being called with validations present</title>
      <updated-at type="datetime">2009-10-29T19:52:57+00:00</updated-at>
      <user-id type="integer">9898</user-id>
      <version type="integer">3</version>
      <user-name>Wesley Moxam</user-name>
      <creator-name>Rory O</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3440</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Consider this ticket me being a gigantic idiot.  If I could pick myself being responsible, I would.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Consider this ticket me being a gigantic idiot. If I could pick
myself being responsible, I would.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-29T19:59:31+00:00</created-at>
      <creator-id type="integer">74856</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3440</number>
      <permalink>callbacks-not-being-called-with-validations-present</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord active_record callbacks validation validations</tag>
      <title>Callbacks not being called with validations present</title>
      <updated-at type="datetime">2009-10-29T19:59:33+00:00</updated-at>
      <user-id type="integer">74856</user-id>
      <version type="integer">4</version>
      <user-name>Rory O</user-name>
      <creator-name>Rory O</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3440</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We'll just make it go away then, shall we?</body>
      <body-html>&lt;div&gt;&lt;p&gt;We'll just make it go away then, shall we?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-10-29T22:36:39+00:00</created-at>
      <creator-id type="integer">74856</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3440</number>
      <permalink>callbacks-not-being-called-with-validations-present</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord active_record callbacks validation validations</tag>
      <title>Callbacks not being called with validations present</title>
      <updated-at type="datetime">2009-10-29T22:36:43+00:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">5</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Rory O</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3440</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
