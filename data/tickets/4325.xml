<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-04-04T13:54:25+01:00</created-at>
  <creator-id type="integer">59381</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">4325</number>
  <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
  <priority type="integer">2</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord patch validates_uniqueness_of validation</tag>
  <title>Real scope support for ActiveRecord's uniqueness validation</title>
  <updated-at type="datetime">2010-10-15T23:01:50+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">13</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Ga&#235;l Deest</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Medium</priority-name>
  <original-body>Hello,

The 'scope' option of AR's uniqueness validation is quite confusing. Contrary to what one might expect, this option doesn't take a scope, but an (array of) attribute(s). The intended behaviour being that the current record should be unique, regarding the validated field and these 'scope' attributes.

I'm currently working on a project where this behavior doesn't cover my needs, but real scope support appears to be quite easy to implement.

The following patch (waiting for ticket number to send the patch) modifies AR's uniqueness validator to expect a scope name (or at least a class method name, that should return a relation). The old behavior is still accessible using the 'attributes' option. Both 'scope' and 'attributes' may be used simultaneously.

I realize the main issue with this patch is that it may break legacy code, but I would like to know what people think of it. If people like this idea, I will write/update both tests and documentation.</original-body>
  <latest-body>Hello,

The 'scope' option of AR's uniqueness validation is quite confusing. Contrary to what one might expect, this option doesn't take a scope, but an (array of) attribute(s). The intended behaviour being that the current record should be unique, regarding the validated field and these 'scope' attributes.

I'm currently working on a project where this behavior doesn't cover my needs, but real scope support appears to be quite easy to implement.

The following patch (waiting for ticket number to send the patch) modifies AR's uniqueness validator to expect a scope name (or at least a class method name, that should return a relation). The old behavior is still accessible using the 'attributes' option. Both 'scope' and 'attributes' may be used simultaneously.

I realize the main issue with this patch is that it may break legacy code, but I would like to know what people think of it. If people like this idea, I will write/update both tests and documentation.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;The 'scope' option of AR's uniqueness validation is quite
confusing. Contrary to what one might expect, this option doesn't
take a scope, but an (array of) attribute(s). The intended
behaviour being that the current record should be unique, regarding
the validated field and these 'scope' attributes.&lt;/p&gt;
&lt;p&gt;I'm currently working on a project where this behavior doesn't
cover my needs, but real scope support appears to be quite easy to
implement.&lt;/p&gt;
&lt;p&gt;The following patch (waiting for ticket number to send the
patch) modifies AR's uniqueness validator to expect a scope name
(or at least a class method name, that should return a relation).
The old behavior is still accessible using the 'attributes' option.
Both 'scope' and 'attributes' may be used simultaneously.&lt;/p&gt;
&lt;p&gt;I realize the main issue with this patch is that it may break
legacy code, but I would like to know what people think of it. If
people like this idea, I will write/update both tests and
documentation.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello,

The 'scope' option of AR's uniqueness validation is quite confusing. Contrary to what one might expect, this option doesn't take a scope, but an (array of) attribute(s). The intended behaviour being that the current record should be unique, regarding the validated field and these 'scope' attributes.

I'm currently working on a project where this behavior doesn't cover my needs, but real scope support appears to be quite easy to implement.

The following patch (waiting for ticket number to send the patch) modifies AR's uniqueness validator to expect a scope name (or at least a class method name, that should return a relation). The old behavior is still accessible using the 'attributes' option. Both 'scope' and 'attributes' may be used simultaneously.

I realize the main issue with this patch is that it may break legacy code, but I would like to know what people think of it. If people like this idea, I will write/update both tests and documentation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;The 'scope' option of AR's uniqueness validation is quite
confusing. Contrary to what one might expect, this option doesn't
take a scope, but an (array of) attribute(s). The intended
behaviour being that the current record should be unique, regarding
the validated field and these 'scope' attributes.&lt;/p&gt;
&lt;p&gt;I'm currently working on a project where this behavior doesn't
cover my needs, but real scope support appears to be quite easy to
implement.&lt;/p&gt;
&lt;p&gt;The following patch (waiting for ticket number to send the
patch) modifies AR's uniqueness validator to expect a scope name
(or at least a class method name, that should return a relation).
The old behavior is still accessible using the 'attributes' option.
Both 'scope' and 'attributes' may be used simultaneously.&lt;/p&gt;
&lt;p&gt;I realize the main issue with this patch is that it may break
legacy code, but I would like to know what people think of it. If
people like this idea, I will write/update both tests and
documentation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-04T13:54:25+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-04T13:54:28+01:00</updated-at>
      <user-id type="integer">59381</user-id>
      <version type="integer">1</version>
      <user-name>Ga&#235;l Deest</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-04T13:55:33+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-04T13:55:51+01:00</updated-at>
      <user-id type="integer">59381</user-id>
      <version type="integer">2</version>
      <user-name>Ga&#235;l Deest</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>So if I understand correctly, you want to be able to say something like

    class Foo &lt; ActiveRecord::Base
      named_scope :enabled, :conditions =&gt; {:enabled =&gt; true}
      validates_uniqueness_of :guid, :scope =&gt; :enabled
    end

and so in that case the validates_uniqueness_of would actually run something like

    foo = Foo.new(:guid =&gt; &quot;dk93dkd&quot;, :enabled =&gt; true)
    Foo.enabled.exists?(:guid =&gt; foo.guid)

instead of something like

    Foo.exists?(:guid =&gt; foo.guid, :enabled =&gt; true)

(I think I got what v_u_o does right, ha. Sorry for the 2.x syntax but you get the idea)

Yeah, you are going to break a lot of people's code if you change the meaning of :scope ;) It is unfortunate that :scope is named what it is but it may be set in stone now... I'm not sure.

I wonder if it would be a good idea to mix the two meanings -- so :scope would include any class methods that happen to match as well as any attributes that happen to match? Maybe that would be confusing though. 

Anyway, I can't say I've ever needed this ability; usually attributes work fine for me (thinks like :user_id or :enabled or whatever). Maybe you can provide us with an example?</body>
      <body-html>&lt;div&gt;&lt;p&gt;So if I understand correctly, you want to be able to say
something like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Foo &amp;lt; ActiveRecord::Base
  named_scope :enabled, :conditions =&amp;gt; {:enabled =&amp;gt; true}
  validates_uniqueness_of :guid, :scope =&amp;gt; :enabled
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and so in that case the validates_uniqueness_of would actually
run something like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;foo = Foo.new(:guid =&amp;gt; &quot;dk93dkd&quot;, :enabled =&amp;gt; true)
Foo.enabled.exists?(:guid =&amp;gt; foo.guid)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;instead of something like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Foo.exists?(:guid =&amp;gt; foo.guid, :enabled =&amp;gt; true)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(I think I got what v_u_o does right, ha. Sorry for the 2.x
syntax but you get the idea)&lt;/p&gt;
&lt;p&gt;Yeah, you are going to break a lot of people's code if you
change the meaning of :scope ;) It is unfortunate that :scope is
named what it is but it may be set in stone now... I'm not
sure.&lt;/p&gt;
&lt;p&gt;I wonder if it would be a good idea to mix the two meanings --
so :scope would include any class methods that happen to match as
well as any attributes that happen to match? Maybe that would be
confusing though.&lt;/p&gt;
&lt;p&gt;Anyway, I can't say I've ever needed this ability; usually
attributes work fine for me (thinks like :user_id or :enabled or
whatever). Maybe you can provide us with an example?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-06T15:22:16+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-06T15:22:19+01:00</updated-at>
      <user-id type="integer">34034</user-id>
      <version type="integer">3</version>
      <user-name>Elliot Winkler</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here is a (trimmed down, but real life) example. I'm working on a project where my customers will have their own subdomains. Subdomains are represented by a state machine, based on their activation state. They can go through four states: 'reserved', 'available', 'unavailable' and 'removed'. Active subdomains should be unique, but I'd also like to make &quot;removed&quot; subdomains available again to new customers. So basically I'd like to do something like this:

@@@ ruby
    class Subdomain &lt; ActiveRecord::Base
      scope :active, where(:state =&gt; ['reserved', 'available', 'unavailable'])
      validates :name, :unique =&gt; {:scope =&gt; :active}
      
      state_machine :initial =&gt; :reserved do
        state :reserved
        state :available
        state :unavailable
        state :removed
        ...
      end
    end
@@@

I may of course create a new boolean field called 'enabled' or something similar and that's probably what I'll end up doing. Yet I find it pretty redundant.

I thought about your mixed solution. I can see two problems with it:
- An attribute may have the same name as a class method. What should be do then ?
- :scope currently accepts several attributes, while it isn't possible to mix several scopes (unless I'm missing something). That may not be a big problem though.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is a (trimmed down, but real life) example. I'm working on
a project where my customers will have their own subdomains.
Subdomains are represented by a state machine, based on their
activation state. They can go through four states: 'reserved',
'available', 'unavailable' and 'removed'. Active subdomains should
be unique, but I'd also like to make &quot;removed&quot; subdomains available
again to new customers. So basically I'd like to do something like
this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    class Subdomain &amp;lt; ActiveRecord::Base
      scope :active, where(:state =&amp;gt; ['reserved', 'available', 'unavailable'])
      validates :name, :unique =&amp;gt; {:scope =&amp;gt; :active}
      
      state_machine :initial =&amp;gt; :reserved do
        state :reserved
        state :available
        state :unavailable
        state :removed
        ...
      end
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I may of course create a new boolean field called 'enabled' or
something similar and that's probably what I'll end up doing. Yet I
find it pretty redundant.&lt;/p&gt;
&lt;p&gt;I thought about your mixed solution. I can see two problems with
it:&lt;br&gt;
- An attribute may have the same name as a class method. What
should be do then ? - :scope currently accepts several attributes,
while it isn't possible to mix several scopes (unless I'm missing
something). That may not be a big problem though.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-06T15:58:49+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-06T15:58:50+01:00</updated-at>
      <user-id type="integer">59381</user-id>
      <version type="integer">4</version>
      <user-name>Ga&#235;l Deest</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The 'validates' line should have read:

@@@ ruby
    validates :name, :uniqueness =&gt; {:scope =&gt; :active}
@@@

Also, I'm actually using class methods and not true 'scopes', but that's another issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The 'validates' line should have read:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    validates :name, :uniqueness =&amp;gt; {:scope =&amp;gt; :active}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Also, I'm actually using class methods and not true 'scopes',
but that's another issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-06T16:06:07+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-06T16:06:09+01:00</updated-at>
      <user-id type="integer">59381</user-id>
      <version type="integer">5</version>
      <user-name>Ga&#235;l Deest</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I like the idea, but I don't like the fact it will be completely backward incompatible. Maybe we could allow the following to work:

    class Subdomain &lt; ActiveRecord::Base
      scope :active, where(:state =&gt; ['reserved', 'available', 'unavailable'])
      validates :name, :uniqueness =&gt; { :scope =&gt; Subdomain.active }
    end

So when the :scope is a Symbol, it should use the previous behavior, otherwise use the one you propose. What do you think?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I like the idea, but I don't like the fact it will be completely
backward incompatible. Maybe we could allow the following to
work:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Subdomain &amp;lt; ActiveRecord::Base
  scope :active, where(:state =&amp;gt; ['reserved', 'available', 'unavailable'])
  validates :name, :uniqueness =&amp;gt; { :scope =&amp;gt; Subdomain.active }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So when the :scope is a Symbol, it should use the previous
behavior, otherwise use the one you propose. What do you think?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-10T12:48:40+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-10T12:48:43+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">6</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Really nice AND flexible idea (thanks arel !). Coming back soon with an updated patch with tests and documentation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Really nice AND flexible idea (thanks arel !). Coming back soon
with an updated patch with tests and documentation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-10T14:23:08+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-10T14:23:10+01:00</updated-at>
      <user-id type="integer">59381</user-id>
      <version type="integer">7</version>
      <user-name>Ga&#235;l Deest</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It turns out to be much more difficult to implement than I first thought, and my first attempt was actually broken.

The problem is that when saving a new record, there is no way that I know of to determine whether it matches the specified relation, and therefore to decide whether the unicity scope applies. I must say I'm stuck here. Does anyone have any idea ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;It turns out to be much more difficult to implement than I first
thought, and my first attempt was actually broken.&lt;/p&gt;
&lt;p&gt;The problem is that when saving a new record, there is no way
that I know of to determine whether it matches the specified
relation, and therefore to decide whether the unicity scope
applies. I must say I'm stuck here. Does anyone have any idea ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-10T17:53:38+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-10T17:53:43+01:00</updated-at>
      <user-id type="integer">59381</user-id>
      <version type="integer">8</version>
      <user-name>Ga&#235;l Deest</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>If a :scope is provided and it's not a symbol or array, you should use it for the querying. So I guess you want to do this:

    if options[:scope].is_a?(ActiveRecord::Relation)
      scopes = []
      table  = options[:scope]
    else
      scopes = Array(options[:scope])
      table  = finder_class.unscoped
    end</body>
      <body-html>&lt;div&gt;&lt;p&gt;If a :scope is provided and it's not a symbol or array, you
should use it for the querying. So I guess you want to do this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if options[:scope].is_a?(ActiveRecord::Relation)
  scopes = []
  table  = options[:scope]
else
  scopes = Array(options[:scope])
  table  = finder_class.unscoped
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-12T10:04:43+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-12T10:04:45+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">9</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yes, I had done something like that and was writing some test cases when I realized it did not work.

Here is a model:

@@@ ruby
class Employee &lt; ActiveRecord::Base
  scope :active, where(:status =&gt; [&quot;trainee&quot;, &quot;veteran&quot;])
  validates_uniqueness_of :office_id, :scope =&gt; self.active
end
@@@

And here is a test case:

@@@ ruby
  def test_validate_uniqueness_with_scope_relation
    paul = Employee.create(:office_id =&gt; 1, :status =&gt; &quot;trainee&quot;)
    puts paul.id
    assert paul.valid?, &quot;Saving paul&quot;
    
    fred = Employee.create(:office_id =&gt; 1, :status =&gt; &quot;veteran&quot;)
    assert !fred.valid?, &quot;Saving fred. Duplicate office_id.&quot;
    
    fred.status = &quot;retired&quot;
    assert fred.save, &quot;Saving fred. Duplicate (but allowed) office_id.&quot;
  end
@@@

The first two assertions will pass, but the third wont, the reason being that office_id already exists within the specified scope. We should not care, because the model does not match: the employee being saved is neither a &quot;trainee&quot; nor a &quot;veteran&quot;. The problem is, there is no way to know whether a new record matches a given scope !

To make it work, one would have to write:

@@@ ruby
class Employee &lt; ActiveRecord::Base
  scope :active, where(:status =&gt; [&quot;trainee&quot;, &quot;veteran&quot;])
  validates_uniqueness_of :office_id, :scope =&gt; self.active, :if =&gt; {|e| [&quot;trainee&quot;, &quot;veteran&quot;].include?(e.status)}
end
@@@

I don't know about you, but I find it awkward. Yet it does work, and allows something impossible before, so if it seems acceptable to you I will submit my patch, but I had dreamed of something simpler :(</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, I had done something like that and was writing some test
cases when I realized it did not work.&lt;/p&gt;
&lt;p&gt;Here is a model:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Employee &amp;lt; ActiveRecord::Base
  scope :active, where(:status =&amp;gt; [&quot;trainee&quot;, &quot;veteran&quot;])
  validates_uniqueness_of :office_id, :scope =&amp;gt; self.active
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And here is a test case:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  def test_validate_uniqueness_with_scope_relation
    paul = Employee.create(:office_id =&amp;gt; 1, :status =&amp;gt; &quot;trainee&quot;)
    puts paul.id
    assert paul.valid?, &quot;Saving paul&quot;
    
    fred = Employee.create(:office_id =&amp;gt; 1, :status =&amp;gt; &quot;veteran&quot;)
    assert !fred.valid?, &quot;Saving fred. Duplicate office_id.&quot;
    
    fred.status = &quot;retired&quot;
    assert fred.save, &quot;Saving fred. Duplicate (but allowed) office_id.&quot;
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first two assertions will pass, but the third wont, the
reason being that office_id already exists within the specified
scope. We should not care, because the model does not match: the
employee being saved is neither a &quot;trainee&quot; nor a &quot;veteran&quot;. The
problem is, there is no way to know whether a new record matches a
given scope !&lt;/p&gt;
&lt;p&gt;To make it work, one would have to write:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Employee &amp;lt; ActiveRecord::Base
  scope :active, where(:status =&amp;gt; [&quot;trainee&quot;, &quot;veteran&quot;])
  validates_uniqueness_of :office_id, :scope =&amp;gt; self.active, :if =&amp;gt; {|e| [&quot;trainee&quot;, &quot;veteran&quot;].include?(e.status)}
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I don't know about you, but I find it awkward. Yet it does work,
and allows something impossible before, so if it seems acceptable
to you I will submit my patch, but I had dreamed of something
simpler :(&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-12T10:26:33+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-12T10:26:35+01:00</updated-at>
      <user-id type="integer">59381</user-id>
      <version type="integer">10</version>
      <user-name>Ga&#235;l Deest</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yes, I agree it's awkward and had this issue in mind because we had a similar discussion in another ticket. Someone thought that the behavior you just described as awkward, is completely normal.

So, in your opinion, is the patch still worth? Do see an use case for it?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, I agree it's awkward and had this issue in mind because we
had a similar discussion in another ticket. Someone thought that
the behavior you just described as awkward, is completely
normal.&lt;/p&gt;
&lt;p&gt;So, in your opinion, is the patch still worth? Do see an use
case for it?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-25T09:25:44+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-04-25T09:25:46+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">11</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm marking as won't fix. If you are still in mood to work on a patch, please let me know and I will reopen it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm marking as won't fix. If you are still in mood to work on a
patch, please let me know and I will reopen it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-07T09:36:46+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-06-07T09:36:54+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">12</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:50+01:00</created-at>
      <creator-id type="integer">59381</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4325</number>
      <permalink>real-scope-support-for-activerecords-uniqueness-validation</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch validates_uniqueness_of validation</tag>
      <title>Real scope support for ActiveRecord's uniqueness validation</title>
      <updated-at type="datetime">2010-10-15T23:01:50+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">13</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Ga&#235;l Deest</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4325</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>d243c9b0dc7841ea6bae0be1ab7951d37246f1b8</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-04T13:55:33+01:00</created-at>
      <filename>scope_support_for_activerecord_uniqueness_validator.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">470687</id>
      <size type="integer">1486</size>
      <uploader-id type="integer">59381</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/470687/scope_support_for_activerecord_uniqueness_validator.diff</url>
    </attachment>
  </attachments>
</ticket>
