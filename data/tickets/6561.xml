<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">11378</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-03-11T08:51:02+00:00</created-at>
  <creator-id type="integer">85849</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6561</number>
  <permalink>model_name-is-not-an-instance-method-but-a-class-method</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>model_name is not an instance method but a Class method</title>
  <updated-at type="datetime">2011-03-11T12:59:07+00:00</updated-at>
  <user-id type="integer">85849</user-id>
  <version type="integer">7</version>
  <user-name>Javix</user-name>
  <creator-name>Javix</creator-name>
  <assigned-user-name>Xavier Noria</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6561</url>
  <priority-name>Low</priority-name>
  <original-body>In Rails API documentation, the 'model_name' is indicated among 'Public Instance methods' what means that the method should be called on a class instance (object of a Class); But a simple test prove the opposite, - it is a class method:
@@@
irb(main):002:0&gt; u = User.create(:login=&gt;'admin',:firstname=&gt;'jean',:lastname=&gt;'dupont',:email=&gt;'dupont@gmail.com')
=&gt; #&lt;User id: 1, login: &quot;admin&quot;, firstname: &quot;jean&quot;, lastname: &quot;dupont&quot;, email: &quot;dupont@gmail.com&quot;, created_at: &quot;2011-03-11 08:37:5
8&quot;, updated_at: &quot;2011-03-11 08:37:58&quot;&gt;
irb(main):003:0&gt; u.model_name
NoMethodError: undefined method `model_name' for #&lt;User:0x34b0060&gt;
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/activemodel-3.0.5/lib/active_model/attribute_methods.rb:364:in `method_missing'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/activerecord-3.0.5/lib/active_record/attribute_methods.rb:46:in `method_missing'
        from (irb):3
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands/console.rb:44:in `start'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands/console.rb:8:in `start'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands.rb:23:in `&lt;top (required)&gt;'
        from script/rails:6:in `require'
        from script/rails:6:in `&lt;main&gt;'
irb(main):004:0&gt; User.model_name
=&gt; &quot;User&quot;
@@@
Should it be changed in the documentation ?</original-body>
  <latest-body>In Rails API documentation, the 'model_name' is indicated among 'Public Instance methods' what means that the method should be called on a class instance (object of a Class); But a simple test prove the opposite, - it is a class method:
@@@
irb(main):002:0&gt; u = User.create(:login=&gt;'admin',:firstname=&gt;'jean',:lastname=&gt;'dupont',:email=&gt;'dupont@gmail.com')
=&gt; #&lt;User id: 1, login: &quot;admin&quot;, firstname: &quot;jean&quot;, lastname: &quot;dupont&quot;, email: &quot;dupont@gmail.com&quot;, created_at: &quot;2011-03-11 08:37:5
8&quot;, updated_at: &quot;2011-03-11 08:37:58&quot;&gt;
irb(main):003:0&gt; u.model_name
NoMethodError: undefined method `model_name' for #&lt;User:0x34b0060&gt;
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/activemodel-3.0.5/lib/active_model/attribute_methods.rb:364:in `method_missing'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/activerecord-3.0.5/lib/active_record/attribute_methods.rb:46:in `method_missing'
        from (irb):3
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands/console.rb:44:in `start'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands/console.rb:8:in `start'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands.rb:23:in `&lt;top (required)&gt;'
        from script/rails:6:in `require'
        from script/rails:6:in `&lt;main&gt;'
irb(main):004:0&gt; User.model_name
=&gt; &quot;User&quot;
@@@
Should it be changed in the documentation ?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In Rails API documentation, the 'model_name' is indicated among
'Public Instance methods' what means that the method should be
called on a class instance (object of a Class); But a simple test
prove the opposite, - it is a class method:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;irb(main):002:0&amp;gt; u = User.create(:login=&amp;gt;'admin',:firstname=&amp;gt;'jean',:lastname=&amp;gt;'dupont',:email=&amp;gt;'dupont@gmail.com')
=&amp;gt; #&amp;lt;User id: 1, login: &quot;admin&quot;, firstname: &quot;jean&quot;, lastname: &quot;dupont&quot;, email: &quot;dupont@gmail.com&quot;, created_at: &quot;2011-03-11 08:37:5
8&quot;, updated_at: &quot;2011-03-11 08:37:58&quot;&amp;gt;
irb(main):003:0&amp;gt; u.model_name
NoMethodError: undefined method `model_name' for #&amp;lt;User:0x34b0060&amp;gt;
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/activemodel-3.0.5/lib/active_model/attribute_methods.rb:364:in `method_missing'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/activerecord-3.0.5/lib/active_record/attribute_methods.rb:46:in `method_missing'
        from (irb):3
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands/console.rb:44:in `start'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands/console.rb:8:in `start'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands.rb:23:in `&amp;lt;top (required)&amp;gt;'
        from script/rails:6:in `require'
        from script/rails:6:in `&amp;lt;main&amp;gt;'
irb(main):004:0&amp;gt; User.model_name
=&amp;gt; &quot;User&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Should it be changed in the documentation ?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In Rails API documentation, the 'model_name' is indicated among 'Public Instance methods' what means that the method should be called on a class instance (object of a Class); But a simple test prove the opposite, - it is a class method:
@@@
irb(main):002:0&gt; u = User.create(:login=&gt;'admin',:firstname=&gt;'jean',:lastname=&gt;'dupont',:email=&gt;'dupont@gmail.com')
=&gt; #&lt;User id: 1, login: &quot;admin&quot;, firstname: &quot;jean&quot;, lastname: &quot;dupont&quot;, email: &quot;dupont@gmail.com&quot;, created_at: &quot;2011-03-11 08:37:5
8&quot;, updated_at: &quot;2011-03-11 08:37:58&quot;&gt;
irb(main):003:0&gt; u.model_name
NoMethodError: undefined method `model_name' for #&lt;User:0x34b0060&gt;
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/activemodel-3.0.5/lib/active_model/attribute_methods.rb:364:in `method_missing'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/activerecord-3.0.5/lib/active_record/attribute_methods.rb:46:in `method_missing'
        from (irb):3
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands/console.rb:44:in `start'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands/console.rb:8:in `start'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands.rb:23:in `&lt;top (required)&gt;'
        from script/rails:6:in `require'
        from script/rails:6:in `&lt;main&gt;'
irb(main):004:0&gt; User.model_name
=&gt; &quot;User&quot;
@@@
Should it be changed in the documentation ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;In Rails API documentation, the 'model_name' is indicated among
'Public Instance methods' what means that the method should be
called on a class instance (object of a Class); But a simple test
prove the opposite, - it is a class method:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;irb(main):002:0&amp;gt; u = User.create(:login=&amp;gt;'admin',:firstname=&amp;gt;'jean',:lastname=&amp;gt;'dupont',:email=&amp;gt;'dupont@gmail.com')
=&amp;gt; #&amp;lt;User id: 1, login: &quot;admin&quot;, firstname: &quot;jean&quot;, lastname: &quot;dupont&quot;, email: &quot;dupont@gmail.com&quot;, created_at: &quot;2011-03-11 08:37:5
8&quot;, updated_at: &quot;2011-03-11 08:37:58&quot;&amp;gt;
irb(main):003:0&amp;gt; u.model_name
NoMethodError: undefined method `model_name' for #&amp;lt;User:0x34b0060&amp;gt;
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/activemodel-3.0.5/lib/active_model/attribute_methods.rb:364:in `method_missing'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/activerecord-3.0.5/lib/active_record/attribute_methods.rb:46:in `method_missing'
        from (irb):3
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands/console.rb:44:in `start'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands/console.rb:8:in `start'
        from C:/Ruby192/lib/ruby/gems/1.9.1/gems/railties-3.0.5/lib/rails/commands.rb:23:in `&amp;lt;top (required)&amp;gt;'
        from script/rails:6:in `require'
        from script/rails:6:in `&amp;lt;main&amp;gt;'
irb(main):004:0&amp;gt; User.model_name
=&amp;gt; &quot;User&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Should it be changed in the documentation ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T08:51:02+00:00</created-at>
      <creator-id type="integer">85849</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6561</number>
      <permalink>model_name-is-not-an-instance-method-but-a-class-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>model_name is not an instance method but a Class method</title>
      <updated-at type="datetime">2011-03-11T08:51:04+00:00</updated-at>
      <user-id type="integer">85849</user-id>
      <version type="integer">1</version>
      <user-name>Javix</user-name>
      <creator-name>Javix</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6561</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hmm.. It is a method defined in the ActiveModel::Naming module which is extended in ActiveRecord to make the method available as a class method for the ActiveRecord classes. I assume the documentation shows it as a 'public instance method' of the module, which is right.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hmm.. It is a method defined in the ActiveModel::Naming module
which is extended in ActiveRecord to make the method available as a
class method for the ActiveRecord classes. I assume the
documentation shows it as a 'public instance method' of the module,
which is right.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T10:10:14+00:00</created-at>
      <creator-id type="integer">85849</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6561</number>
      <permalink>model_name-is-not-an-instance-method-but-a-class-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>model_name is not an instance method but a Class method</title>
      <updated-at type="datetime">2011-03-11T10:10:20+00:00</updated-at>
      <user-id type="integer">82083</user-id>
      <version type="integer">2</version>
      <user-name>Vijay Dev</user-name>
      <creator-name>Javix</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6561</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>As far as I understand, in  any OO language, public instance method are called on an instance of a class, so in this case it is supposed to work like that:
@@@code
user = User.new
user.model_name
@@@
as no matter which instance method.
But in reality it looks more like a public class method which are defined and can be called as follows:
@@@

class User
def self.model_name
  #bla-bla
end

end

User.model_name
@@@
And this is exactly what is happening. Or it is me who don't understand the difference preperly between instance methods and class methods. If it's the case, so correct me. If not, I'd modified the documentation so that it would be more clear.
Regards</body>
      <body-html>&lt;div&gt;&lt;p&gt;As far as I understand, in any OO language, public instance
method are called on an instance of a class, so in this case it is
supposed to work like that:&lt;br&gt;
@@@code user = User.new&lt;br&gt;
user.model_name&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;as no matter which instance method.
But in reality it looks more like a public class method which are defined and can be called as follows:&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;class User&lt;br&gt;
def self.model_name&lt;br&gt;
#bla-bla end&lt;/p&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;User.model_name&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;And this is exactly what is happening. Or it is me who don't understand the difference preperly between instance methods and class methods. If it's the case, so correct me. If not, I'd modified the documentation so that it would be more clear.
Regards&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T11:09:46+00:00</created-at>
      <creator-id type="integer">85849</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6561</number>
      <permalink>model_name-is-not-an-instance-method-but-a-class-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>model_name is not an instance method but a Class method</title>
      <updated-at type="datetime">2011-03-11T11:09:52+00:00</updated-at>
      <user-id type="integer">85849</user-id>
      <version type="integer">3</version>
      <user-name>Javix</user-name>
      <creator-name>Javix</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6561</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You're right, it is an instance method of the module it belongs to, which is ActiveModel::Naming.

Now, as Vijay explains, that does not mean it is an instance method in classes that use the module. In particular, if the class uses extend, it becomes a class method *in that class*. It is still an instance method in the module.

To be even more exact, model_name is indeed an instance method, but an instance method of the singleton class of ActiveRecord::Base, which is the class where ActiveModel::Naming is being included (that's what extend does). But anyway we understand what we mean by class methods.

Unfortunately, documentation tools as of today are not smart enough to be able to list model_name as a class method of ActiveRecord::Base. I have a plan to try to get better docs in that sense, perhaps someday.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You're right, it is an instance method of the module it belongs
to, which is ActiveModel::Naming.&lt;/p&gt;
&lt;p&gt;Now, as Vijay explains, that does not mean it is an instance
method in classes that use the module. In particular, if the class
uses extend, it becomes a class method &lt;em&gt;in that class&lt;/em&gt;. It
is still an instance method in the module.&lt;/p&gt;
&lt;p&gt;To be even more exact, model_name is indeed an instance method,
but an instance method of the singleton class of
ActiveRecord::Base, which is the class where ActiveModel::Naming is
being included (that's what extend does). But anyway we understand
what we mean by class methods.&lt;/p&gt;
&lt;p&gt;Unfortunately, documentation tools as of today are not smart
enough to be able to list model_name as a class method of
ActiveRecord::Base. I have a plan to try to get better docs in that
sense, perhaps someday.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-11T11:22:42+00:00</created-at>
      <creator-id type="integer">85849</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6561</number>
      <permalink>model_name-is-not-an-instance-method-but-a-class-method</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>model_name is not an instance method but a Class method</title>
      <updated-at type="datetime">2011-03-11T11:22:51+00:00</updated-at>
      <user-id type="integer">11378</user-id>
      <version type="integer">4</version>
      <user-name>Xavier Noria</user-name>
      <creator-name>Javix</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6561</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In Ruby, modules and classes behave just the same (with a few differences of course). The method model_name is a public instance of the Naming module. You are right when you say that it looks more like a public class method. It is one for the User class in your eg. That's because the Naming module is extended by ActiveRecord::Base.

When a module is extended in a class, all the instance methods of the module become accessible as class methods in that class. By contrast, when a module is included in a class, all the instance methods of the module become accessible as instance methods in that class.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In Ruby, modules and classes behave just the same (with a few
differences of course). The method model_name is a public instance
of the Naming module. You are right when you say that it looks more
like a public class method. It is one for the User class in your
eg. That's because the Naming module is extended by
ActiveRecord::Base.&lt;/p&gt;
&lt;p&gt;When a module is extended in a class, all the instance methods
of the module become accessible as class methods in that class. By
contrast, when a module is included in a class, all the instance
methods of the module become accessible as instance methods in that
class.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-11T11:28:07+00:00</created-at>
      <creator-id type="integer">85849</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6561</number>
      <permalink>model_name-is-not-an-instance-method-but-a-class-method</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>model_name is not an instance method but a Class method</title>
      <updated-at type="datetime">2011-03-11T11:28:17+00:00</updated-at>
      <user-id type="integer">82083</user-id>
      <version type="integer">5</version>
      <user-name>Vijay Dev</user-name>
      <creator-name>Javix</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6561</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Xavier: Opened up the page and kept on typing, I missed your update :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Xavier: Opened up the page and kept on typing, I missed your
update :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-11T11:31:55+00:00</created-at>
      <creator-id type="integer">85849</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6561</number>
      <permalink>model_name-is-not-an-instance-method-but-a-class-method</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>model_name is not an instance method but a Class method</title>
      <updated-at type="datetime">2011-03-11T11:32:08+00:00</updated-at>
      <user-id type="integer">82083</user-id>
      <version type="integer">6</version>
      <user-name>Vijay Dev</user-name>
      <creator-name>Javix</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6561</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>OK, thak you guys, it's clear for me now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, thak you guys, it's clear for me now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-11T12:58:57+00:00</created-at>
      <creator-id type="integer">85849</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6561</number>
      <permalink>model_name-is-not-an-instance-method-but-a-class-method</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>model_name is not an instance method but a Class method</title>
      <updated-at type="datetime">2011-03-11T12:59:07+00:00</updated-at>
      <user-id type="integer">85849</user-id>
      <version type="integer">7</version>
      <user-name>Javix</user-name>
      <creator-name>Javix</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6561</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
