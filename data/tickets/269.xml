<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-28T17:52:17+01:00</created-at>
  <creator-id type="integer">21518</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">269</number>
  <permalink>has_many-class-will-nest-within-parent-class-no-override</permalink>
  <priority type="integer">14505</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>has_many :class  will nest within parent class... no override</title>
  <updated-at type="datetime">2008-07-17T02:06:09+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">8</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Brian Cardarella</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/269</url>
  <priority-name nil="true"></priority-name>
  <original-body>If I have two nested models:

User::Candidate
Resource::Resume

and I have within my candidate model:

has_many :resumes, :class =&gt; &quot;Resource::Resume&quot;

ActiveRecord will nest this class as:

User::Resource::Resume

At the very least there should be a class_prefix override available. Although I think if you are designating the class specifically there should be no prefix attached whatsoever.

I traced the issue to:
...../activerecord-2.0.2/lib/active_record/base.rb:1347:

def type_name_with_module(type_name)
   (/^::/ =~ type_name) ? type_name : &quot;#{parent.name}::#{type_name}&quot;
end

I'll try to work on a patch and upload later.</original-body>
  <latest-body>If I have two nested models:

User::Candidate
Resource::Resume

and I have within my candidate model:

has_many :resumes, :class =&gt; &quot;Resource::Resume&quot;

ActiveRecord will nest this class as:

User::Resource::Resume

At the very least there should be a class_prefix override available. Although I think if you are designating the class specifically there should be no prefix attached whatsoever.

I traced the issue to:
...../activerecord-2.0.2/lib/active_record/base.rb:1347:

def type_name_with_module(type_name)
   (/^::/ =~ type_name) ? type_name : &quot;#{parent.name}::#{type_name}&quot;
end

I'll try to work on a patch and upload later.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
If I have two nested models:
&lt;/p&gt;&lt;p&gt;
User::Candidate
&lt;/p&gt;&lt;p&gt;
Resource::Resume
&lt;/p&gt;&lt;p&gt;
and I have within my candidate model:
&lt;/p&gt;&lt;p&gt;
has_many :resumes, :class =&gt; &quot;Resource::Resume&quot;
&lt;/p&gt;&lt;p&gt;
ActiveRecord will nest this class as:
&lt;/p&gt;&lt;p&gt;
User::Resource::Resume
&lt;/p&gt;&lt;p&gt;
At the very least there should be a class_prefix override available. Although I think if you are designating the class specifically there should be no prefix attached whatsoever.
&lt;/p&gt;&lt;p&gt;
I traced the issue to:
&lt;/p&gt;&lt;p&gt;
...../activerecord-2.0.2/lib/active_record/base.rb:1347:
&lt;/p&gt;&lt;p&gt;
def type_name_with_module(type_name)
&lt;/p&gt;&lt;p&gt;
(/^::/ =~ type_name) ? type_name : &quot;#{parent.name}::#{type_name}&quot;
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
I'll try to work on a patch and upload later.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If I have two nested models:

User::Candidate
Resource::Resume

and I have within my candidate model:

has_many :resumes, :class =&gt; &quot;Resource::Resume&quot;

ActiveRecord will nest this class as:

User::Resource::Resume

At the very least there should be a class_prefix override available. Although I think if you are designating the class specifically there should be no prefix attached whatsoever.

I traced the issue to:
...../activerecord-2.0.2/lib/active_record/base.rb:1347:

def type_name_with_module(type_name)
   (/^::/ =~ type_name) ? type_name : &quot;#{parent.name}::#{type_name}&quot;
end

I'll try to work on a patch and upload later.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
If I have two nested models:
&lt;/p&gt;&lt;p&gt;
User::Candidate
&lt;/p&gt;&lt;p&gt;
Resource::Resume
&lt;/p&gt;&lt;p&gt;
and I have within my candidate model:
&lt;/p&gt;&lt;p&gt;
has_many :resumes, :class =&gt; &quot;Resource::Resume&quot;
&lt;/p&gt;&lt;p&gt;
ActiveRecord will nest this class as:
&lt;/p&gt;&lt;p&gt;
User::Resource::Resume
&lt;/p&gt;&lt;p&gt;
At the very least there should be a class_prefix override available. Although I think if you are designating the class specifically there should be no prefix attached whatsoever.
&lt;/p&gt;&lt;p&gt;
I traced the issue to:
&lt;/p&gt;&lt;p&gt;
...../activerecord-2.0.2/lib/active_record/base.rb:1347:
&lt;/p&gt;&lt;p&gt;
def type_name_with_module(type_name)
&lt;/p&gt;&lt;p&gt;
(/^::/ =~ type_name) ? type_name : &quot;#{parent.name}::#{type_name}&quot;
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
I'll try to work on a patch and upload later.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-28T17:52:17+01:00</created-at>
      <creator-id type="integer">21518</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">269</number>
      <permalink>has_many-class-will-nest-within-parent-class-no-override</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :class  will nest within parent class... no override</title>
      <updated-at type="datetime">2008-05-28T17:52:17+01:00</updated-at>
      <user-id type="integer">21518</user-id>
      <version type="integer">1</version>
      <user-name>Brian Cardarella</user-name>
      <creator-name>Brian Cardarella</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/269</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A simple workaround to fix this:

..../activerecord-2.0.2/lib/active_record/reflection.rb:124

def klass
   @klass ||= active_record.send(:compute_type, class_name)
end

change to:

def klass
   @klass ||= options[:class_name].constantize || active_record.send(:compute_type, class_name)
end

If you dig into the class_name method it does check the options[:class_name] again so maybe this should be removed. But this will use whatever class you specify in a has_many without nesting it into the parent class of the current model.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
A simple workaround to fix this:
&lt;/p&gt;&lt;p&gt;
..../activerecord-2.0.2/lib/active_record/reflection.rb:124
&lt;/p&gt;&lt;p&gt;
def klass
&lt;/p&gt;&lt;p&gt;
@klass ||= active_record.send(:compute_type, class_name)
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
change to:
&lt;/p&gt;&lt;p&gt;
def klass
&lt;/p&gt;&lt;p&gt;
@klass ||= options[:class_name].constantize || active_record.send(:compute_type, class_name)
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
If you dig into the class_name method it does check the options[:class_name] again so maybe this should be removed. But this will use whatever class you specify in a has_many without nesting it into the parent class of the current model.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-28T18:22:58+01:00</created-at>
      <creator-id type="integer">21518</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">269</number>
      <permalink>has_many-class-will-nest-within-parent-class-no-override</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :class  will nest within parent class... no override</title>
      <updated-at type="datetime">2008-05-28T18:22:58+01:00</updated-at>
      <user-id type="integer">21518</user-id>
      <version type="integer">2</version>
      <user-name>Brian Cardarella</user-name>
      <creator-name>Brian Cardarella</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/269</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Small correction:

def klass

@klass ||= (options[:class_name].constantize rescue nil) || active_record.send(:compute_type, class_name)

end 

Make this change to catch if options[:class_name] is nil or not a constant.

Again, this is not the most elegant way but it seems to work.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Small correction:
&lt;/p&gt;&lt;p&gt;
def klass
&lt;/p&gt;&lt;p&gt;
@klass ||= (options[:class_name].constantize rescue nil) || active_record.send(:compute_type, class_name)
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
Make this change to catch if options[:class_name] is nil or not a constant.
&lt;/p&gt;&lt;p&gt;
Again, this is not the most elegant way but it seems to work.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-28T21:34:39+01:00</created-at>
      <creator-id type="integer">21518</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">269</number>
      <permalink>has_many-class-will-nest-within-parent-class-no-override</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :class  will nest within parent class... no override</title>
      <updated-at type="datetime">2008-05-28T21:34:39+01:00</updated-at>
      <user-id type="integer">21518</user-id>
      <version type="integer">3</version>
      <user-name>Brian Cardarella</user-name>
      <creator-name>Brian Cardarella</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/269</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is so the association can reference a sibling class without needing an explicit :class_name

@@@ ruby
module UserStuff
  class User &lt; ActiveRecord::Base
    has_many :resumes
  end

  class Resume &lt; ActiveRecord::Base
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This is so the association can reference a sibling class without needing an explicit :class_name
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;module UserStuff
  class User &amp;lt; ActiveRecord::Base
    has_many :resumes
  end

  class Resume &amp;lt; ActiveRecord::Base
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-31T21:29:29+01:00</created-at>
      <creator-id type="integer">21518</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">269</number>
      <permalink>has_many-class-will-nest-within-parent-class-no-override</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :class  will nest within parent class... no override</title>
      <updated-at type="datetime">2008-05-31T21:29:29+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Brian Cardarella</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/269</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Jeremy,

   I understand this but when you explicitly define a class_name it will still treat the association as a sibling class instead of referencing the user defined class_name. ActiveRecord should not assume that a user defined class_name is a sibling class.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Jeremy,
&lt;/p&gt;&lt;p&gt;
I understand this but when you explicitly define a class_name it will still treat the association as a sibling class instead of referencing the user defined class_name. ActiveRecord should not assume that a user defined class_name is a sibling class.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-31T21:33:40+01:00</created-at>
      <creator-id type="integer">21518</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">269</number>
      <permalink>has_many-class-will-nest-within-parent-class-no-override</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :class  will nest within parent class... no override</title>
      <updated-at type="datetime">2008-05-31T21:33:40+01:00</updated-at>
      <user-id type="integer">21518</user-id>
      <version type="integer">5</version>
      <user-name>Brian Cardarella</user-name>
      <creator-name>Brian Cardarella</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/269</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Why not? The behavior is consistent either way.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Why not? The behavior is consistent either way.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-01T00:21:59+01:00</created-at>
      <creator-id type="integer">21518</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">269</number>
      <permalink>has_many-class-will-nest-within-parent-class-no-override</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :class  will nest within parent class... no override</title>
      <updated-at type="datetime">2008-06-01T00:21:59+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">6</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Brian Cardarella</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/269</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Because sometimes a child model may not be a sibling of a parent model. My original post:

@@@ ruby
 class Resource::Resume &lt; ActiveRecord::Base; end

 class User::Candidate &lt; ActiveRecord::Base
   has_many :resumes, :class_name =&gt; &quot;Resource::Resume&quot;
 end
@@@

This will raise warnings. Note that I am using nested models. The User::Candidate model will refer to the :resumes association with User::Resource::Resume even after I specify the exactly class name. The proper class name is Resource::Resume.

Again, if I am explicitly specifying the class name why does AR need to do any work guessing any additional parent classes? That should only be necessary when I do not explicitly specify a class name.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Because sometimes a child model may not be a sibling of a parent model. My original post:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt; class Resource::Resume &amp;lt; ActiveRecord::Base; end

 class User::Candidate &amp;lt; ActiveRecord::Base
   has_many :resumes, :class_name =&amp;gt; &amp;quot;Resource::Resume&amp;quot;
 end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This will raise warnings. Note that I am using nested models. The User::Candidate model will refer to the :resumes association with User::Resource::Resume even after I specify the exactly class name. The proper class name is Resource::Resume.
&lt;/p&gt;&lt;p&gt;
Again, if I am explicitly specifying the class name why does AR need to do any work guessing any additional parent classes? That should only be necessary when I do not explicitly specify a class name.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-01T01:14:13+01:00</created-at>
      <creator-id type="integer">21518</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">269</number>
      <permalink>has_many-class-will-nest-within-parent-class-no-override</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :class  will nest within parent class... no override</title>
      <updated-at type="datetime">2008-06-01T01:14:13+01:00</updated-at>
      <user-id type="integer">21518</user-id>
      <version type="integer">7</version>
      <user-name>Brian Cardarella</user-name>
      <creator-name>Brian Cardarella</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/269</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-17T02:06:09+01:00</created-at>
      <creator-id type="integer">21518</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">269</number>
      <permalink>has_many-class-will-nest-within-parent-class-no-override</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>has_many :class  will nest within parent class... no override</title>
      <updated-at type="datetime">2008-07-17T02:06:09+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">8</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Brian Cardarella</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/269</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
