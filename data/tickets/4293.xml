<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-03-29T06:13:19+01:00</created-at>
  <creator-id type="integer">15316</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4293</number>
  <permalink>validates-uniqueness-of-should-take-advantage-of-the-database</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>patch</tag>
  <title>validates uniqueness of should take advantage of the database</title>
  <updated-at type="datetime">2010-03-29T06:17:33+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">3</version>
  <user-name>Repository</user-name>
  <creator-name>Aaron Patterson</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4293</url>
  <priority-name>Low</priority-name>
  <original-body>Currently, case-insensitive validations use ruby to lower case a string on one side, and the database to lower case on the other.  That results in a question that looks like this:

@@@
&quot;SELECT     \&quot;topics\&quot;.\&quot;id\&quot; FROM       \&quot;topics\&quot; WHERE     (LOWER(\&quot;topics\&quot;.\&quot;title\&quot;) = E'&#1103; &#1090;&#1086;&#1078;&#1077; &#1059;&#1053;&#1048;&#1050;&#1040;&#1051;&#1068;&#1053;&#1067;&#1049;!') LIMIT 1&quot;
@@@

This is fine, except that sometimes Ruby does not know how to lower case the same way the database does.  In fact, with 1.9.2, the &quot;test_validate_case_insensitive_uniqueness&quot; test fails because ruby 1.9 does not downcase the string the same way ruby 1.8 does.

This patch switches the validation to use LOWER() on both sides of the comparison, and avoid what Ruby thinks.</original-body>
  <latest-body>Currently, case-insensitive validations use ruby to lower case a string on one side, and the database to lower case on the other.  That results in a question that looks like this:

@@@
&quot;SELECT     \&quot;topics\&quot;.\&quot;id\&quot; FROM       \&quot;topics\&quot; WHERE     (LOWER(\&quot;topics\&quot;.\&quot;title\&quot;) = E'&#1103; &#1090;&#1086;&#1078;&#1077; &#1059;&#1053;&#1048;&#1050;&#1040;&#1051;&#1068;&#1053;&#1067;&#1049;!') LIMIT 1&quot;
@@@

This is fine, except that sometimes Ruby does not know how to lower case the same way the database does.  In fact, with 1.9.2, the &quot;test_validate_case_insensitive_uniqueness&quot; test fails because ruby 1.9 does not downcase the string the same way ruby 1.8 does.

This patch switches the validation to use LOWER() on both sides of the comparison, and avoid what Ruby thinks.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Currently, case-insensitive validations use ruby to lower case a
string on one side, and the database to lower case on the other.
That results in a question that looks like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;SELECT     \&quot;topics\&quot;.\&quot;id\&quot; FROM       \&quot;topics\&quot; WHERE     (LOWER(\&quot;topics\&quot;.\&quot;title\&quot;) = E'&amp;#1103; &amp;#1090;&amp;#1086;&amp;#1078;&amp;#1077; &amp;#1059;&amp;#1053;&amp;#1048;&amp;#1050;&amp;#1040;&amp;#1051;&amp;#1068;&amp;#1053;&amp;#1067;&amp;#1049;!') LIMIT 1&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is fine, except that sometimes Ruby does not know how to
lower case the same way the database does. In fact, with 1.9.2, the
&quot;test_validate_case_insensitive_uniqueness&quot; test fails because ruby
1.9 does not downcase the string the same way ruby 1.8 does.&lt;/p&gt;
&lt;p&gt;This patch switches the validation to use LOWER() on both sides
of the comparison, and avoid what Ruby thinks.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Currently, case-insensitive validations use ruby to lower case a string on one side, and the database to lower case on the other.  That results in a question that looks like this:

@@@
&quot;SELECT     \&quot;topics\&quot;.\&quot;id\&quot; FROM       \&quot;topics\&quot; WHERE     (LOWER(\&quot;topics\&quot;.\&quot;title\&quot;) = E'&#1103; &#1090;&#1086;&#1078;&#1077; &#1059;&#1053;&#1048;&#1050;&#1040;&#1051;&#1068;&#1053;&#1067;&#1049;!') LIMIT 1&quot;
@@@

This is fine, except that sometimes Ruby does not know how to lower case the same way the database does.  In fact, with 1.9.2, the &quot;test_validate_case_insensitive_uniqueness&quot; test fails because ruby 1.9 does not downcase the string the same way ruby 1.8 does.

This patch switches the validation to use LOWER() on both sides of the comparison, and avoid what Ruby thinks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Currently, case-insensitive validations use ruby to lower case a
string on one side, and the database to lower case on the other.
That results in a question that looks like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;SELECT     \&quot;topics\&quot;.\&quot;id\&quot; FROM       \&quot;topics\&quot; WHERE     (LOWER(\&quot;topics\&quot;.\&quot;title\&quot;) = E'&amp;#1103; &amp;#1090;&amp;#1086;&amp;#1078;&amp;#1077; &amp;#1059;&amp;#1053;&amp;#1048;&amp;#1050;&amp;#1040;&amp;#1051;&amp;#1068;&amp;#1053;&amp;#1067;&amp;#1049;!') LIMIT 1&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is fine, except that sometimes Ruby does not know how to
lower case the same way the database does. In fact, with 1.9.2, the
&quot;test_validate_case_insensitive_uniqueness&quot; test fails because ruby
1.9 does not downcase the string the same way ruby 1.8 does.&lt;/p&gt;
&lt;p&gt;This patch switches the validation to use LOWER() on both sides
of the comparison, and avoid what Ruby thinks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-29T06:13:19+01:00</created-at>
      <creator-id type="integer">15316</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4293</number>
      <permalink>validates-uniqueness-of-should-take-advantage-of-the-database</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>validates uniqueness of should take advantage of the database</title>
      <updated-at type="datetime">2010-03-29T06:13:25+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">1</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Aaron Patterson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4293</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-29T06:15:26+01:00</created-at>
      <creator-id type="integer">15316</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4293</number>
      <permalink>validates-uniqueness-of-should-take-advantage-of-the-database</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>validates uniqueness of should take advantage of the database</title>
      <updated-at type="datetime">2010-03-29T06:15:35+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">2</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Aaron Patterson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4293</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [98d2d8ce2c2f332ee337b9ab2110300e1f2bf1f2]) use the database to lower case strings rather than ruby. [#4293 state:resolved]

Signed-off-by: wycats &lt;wycats@gmail.com&gt;
http://github.com/rails/rails/commit/98d2d8ce2c2f332ee337b9ab2110300e1f2bf1f2</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/98d2d8ce2c2f332ee337b9ab2110300e1f2bf1f2&quot;
title=
&quot;Changeset [98d2d8ce2c2f332ee337b9ab2110300e1f2bf1f2]&quot;&gt;[98d2d8ce2c2f332ee337b9ab2110300e1f2bf1f2]&lt;/a&gt;)
use the database to lower case strings rather than ruby. [&lt;a href=
&quot;/projects/8994/tickets/4293&quot; title=&quot;Ticket #4293&quot;&gt;#4293&lt;/a&gt;
state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: wycats &lt;a&gt;wycats@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/98d2d8ce2c2f332ee337b9ab2110300e1f2bf1f2&quot;&gt;
http://github.com/rails/rails/commit/98d2d8ce2c2f332ee337b9ab211030...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-29T06:17:32+01:00</created-at>
      <creator-id type="integer">15316</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4293</number>
      <permalink>validates-uniqueness-of-should-take-advantage-of-the-database</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>patch</tag>
      <title>validates uniqueness of should take advantage of the database</title>
      <updated-at type="datetime">2010-03-29T06:17:33+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">3</version>
      <user-name>Repository</user-name>
      <creator-name>Aaron Patterson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4293</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>5b46d9bff22b1418f02cd338b244182ba7977c38</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-03-29T06:15:26+01:00</created-at>
      <filename>your-patch-file.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">462843</id>
      <size type="integer">1115</size>
      <uploader-id type="integer">15316</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/462843/your-patch-file.diff</url>
    </attachment>
  </attachments>
</ticket>
