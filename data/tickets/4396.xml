<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-04-14T18:17:28+01:00</created-at>
  <creator-id type="integer">17150</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4396</number>
  <permalink>repeated-show-fields-from-queries-with-sti</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord sti</tag>
  <title>Repeated SHOW FIELDS FROM... queries with STI</title>
  <updated-at type="datetime">2011-02-02T17:50:20+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">8</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Luke Melia</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4396</url>
  <priority-name>Low</priority-name>
  <original-body>ActiveRecord looks up the columns for a table each time it loads a class using that table
With STI, this means repeated calls to 'SHOW FIELDS FROM table_name' for each subclass.

The reason for this is that AR uses @columns (a class-level instance variable) to cache the results of the 'SHOW FIELDS...' query. STI subclasses thus repeat this call as each one loads to populate their own cache.

My first pass at addressing this is to use a class_variable hash mapping table names to columns.

  http://gist.github.com/366053

I'm concerned about how this would impact development mode as migrations are run. With a little guidance in this area, I can put together a proper patch.</original-body>
  <latest-body>ActiveRecord looks up the columns for a table each time it loads a class using that table
With STI, this means repeated calls to 'SHOW FIELDS FROM table_name' for each subclass.

The reason for this is that AR uses @columns (a class-level instance variable) to cache the results of the 'SHOW FIELDS...' query. STI subclasses thus repeat this call as each one loads to populate their own cache.

My first pass at addressing this is to use a class_variable hash mapping table names to columns.

  http://gist.github.com/366053

I'm concerned about how this would impact development mode as migrations are run. With a little guidance in this area, I can put together a proper patch.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActiveRecord looks up the columns for a table each time it loads
a class using that table&lt;br&gt;
With STI, this means repeated calls to 'SHOW FIELDS FROM
table_name' for each subclass.&lt;/p&gt;
&lt;p&gt;The reason for this is that AR uses @columns (a class-level
instance variable) to cache the results of the 'SHOW FIELDS...'
query. STI subclasses thus repeat this call as each one loads to
populate their own cache.&lt;/p&gt;
&lt;p&gt;My first pass at addressing this is to use a class_variable hash
mapping table names to columns.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://gist.github.com/366053&quot;&gt;http://gist.github.com/366053&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm concerned about how this would impact development mode as
migrations are run. With a little guidance in this area, I can put
together a proper patch.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveRecord looks up the columns for a table each time it loads a class using that table
With STI, this means repeated calls to 'SHOW FIELDS FROM table_name' for each subclass.

The reason for this is that AR uses @columns (a class-level instance variable) to cache the results of the 'SHOW FIELDS...' query. STI subclasses thus repeat this call as each one loads to populate their own cache.

My first pass at addressing this is to use a class_variable hash mapping table names to columns.

  http://gist.github.com/366053

I'm concerned about how this would impact development mode as migrations are run. With a little guidance in this area, I can put together a proper patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveRecord looks up the columns for a table each time it loads
a class using that table&lt;br&gt;
With STI, this means repeated calls to 'SHOW FIELDS FROM
table_name' for each subclass.&lt;/p&gt;
&lt;p&gt;The reason for this is that AR uses @columns (a class-level
instance variable) to cache the results of the 'SHOW FIELDS...'
query. STI subclasses thus repeat this call as each one loads to
populate their own cache.&lt;/p&gt;
&lt;p&gt;My first pass at addressing this is to use a class_variable hash
mapping table names to columns.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://gist.github.com/366053&quot;&gt;http://gist.github.com/366053&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm concerned about how this would impact development mode as
migrations are run. With a little guidance in this area, I can put
together a proper patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-14T18:17:28+01:00</created-at>
      <creator-id type="integer">17150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4396</number>
      <permalink>repeated-show-fields-from-queries-with-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sti</tag>
      <title>Repeated SHOW FIELDS FROM... queries with STI</title>
      <updated-at type="datetime">2010-04-14T18:17:32+01:00</updated-at>
      <user-id type="integer">17150</user-id>
      <version type="integer">1</version>
      <user-name>Luke Melia</user-name>
      <creator-name>Luke Melia</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4396</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The problem with using `@@` variables is that they are shared across the entire ancestor chain, thus:

@@@ruby
class Base
  def self.columns
    @@columns ||= {}
  end
end
class A &lt; Base; end
class B &lt; Base; end

A.columns[:foo] = &quot;I'm a column!&quot;

B.columns #=&gt; {:foo=&gt;&quot;I'm a column!&quot;}
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;The problem with using &lt;code&gt;@@&lt;/code&gt; variables is that they
are shared across the entire ancestor chain, thus:&lt;/p&gt;
&lt;p&gt;@@@ruby class Base&lt;br&gt;
def self.columns&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@@columns ||= {}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;br&gt;
class A &amp;lt; Base; end&lt;br&gt;
class B &amp;lt; Base; end&lt;/p&gt;
&lt;p&gt;A.columns[:foo] = &quot;I'm a column!&quot;&lt;/p&gt;
&lt;p&gt;B.columns #=&amp;gt; {:foo=&amp;gt;&quot;I'm a column!&quot;}&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;

&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-14T18:33:36+01:00</created-at>
      <creator-id type="integer">17150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4396</number>
      <permalink>repeated-show-fields-from-queries-with-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sti</tag>
      <title>Repeated SHOW FIELDS FROM... queries with STI</title>
      <updated-at type="datetime">2010-04-14T18:33:37+01:00</updated-at>
      <user-id type="integer">84869</user-id>
      <version type="integer">2</version>
      <user-name>foca</user-name>
      <creator-name>Luke Melia</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4396</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@foca, yep, my proposed solution actually takes advantage of that &quot;feature&quot; of class variables. It uses a single hash for the entire inheritance hierarchy, with table names as keys and the column collections as values.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@foca, yep, my proposed solution actually takes advantage of
that &quot;feature&quot; of class variables. It uses a single hash for the
entire inheritance hierarchy, with table names as keys and the
column collections as values.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-14T19:14:31+01:00</created-at>
      <creator-id type="integer">17150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4396</number>
      <permalink>repeated-show-fields-from-queries-with-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sti</tag>
      <title>Repeated SHOW FIELDS FROM... queries with STI</title>
      <updated-at type="datetime">2010-04-14T19:14:34+01:00</updated-at>
      <user-id type="integer">17150</user-id>
      <version type="integer">3</version>
      <user-name>Luke Melia</user-name>
      <creator-name>Luke Melia</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4396</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Not sure if this is concern, these queries run only once in production and in development they do not represent a bottleneck.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not sure if this is concern, these queries run only once in
production and in development they do not represent a
bottleneck.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-14T22:12:42+01:00</created-at>
      <creator-id type="integer">17150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4396</number>
      <permalink>repeated-show-fields-from-queries-with-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sti</tag>
      <title>Repeated SHOW FIELDS FROM... queries with STI</title>
      <updated-at type="datetime">2010-04-14T22:12:44+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">4</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Luke Melia</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4396</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>yeah, I'm with Jose, how many subclasses do you really have?</body>
      <body-html>&lt;div&gt;&lt;p&gt;yeah, I'm with Jose, how many subclasses do you really have?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-14T22:19:21+01:00</created-at>
      <creator-id type="integer">17150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4396</number>
      <permalink>repeated-show-fields-from-queries-with-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sti</tag>
      <title>Repeated SHOW FIELDS FROM... queries with STI</title>
      <updated-at type="datetime">2010-04-14T22:19:24+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">5</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Luke Melia</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4396</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We have about 300 models in our app. About a third of them are subclasses. I started looking at this today because these queries popped up in some New Relic transaction traces.

According to http://blog.lukeludwig.com/index.php/2009/01/08/rails-patch-for-caching-show-fields-for-has_and_belongs_to_many-associations/ : 

&quot;Turns out that MySQL creates a temporary table on disk for 'SHOW FIELDS' queries, so if the disk is busy with something else these queries can take awhile to complete as seen here.&quot;

In addition, the overhead can be impactful in development or during repeated test runs, where you're reloading frequently.

What do you think? If this doesn't belong in core, I can maintain my patch locally.</body>
      <body-html>&lt;div&gt;&lt;p&gt;We have about 300 models in our app. About a third of them are
subclasses. I started looking at this today because these queries
popped up in some New Relic transaction traces.&lt;/p&gt;
&lt;p&gt;According to &lt;a href=
&quot;http://blog.lukeludwig.com/index.php/2009/01/08/rails-patch-for-caching-show-fields-for-has_and_belongs_to_many-associations/&quot;&gt;
http://blog.lukeludwig.com/index.php/2009/01/08/rails-patch-for-cac...&lt;/a&gt;
:&lt;/p&gt;
&lt;p&gt;&quot;Turns out that MySQL creates a temporary table on disk for
'SHOW FIELDS' queries, so if the disk is busy with something else
these queries can take awhile to complete as seen here.&quot;&lt;/p&gt;
&lt;p&gt;In addition, the overhead can be impactful in development or
during repeated test runs, where you're reloading frequently.&lt;/p&gt;
&lt;p&gt;What do you think? If this doesn't belong in core, I can
maintain my patch locally.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-14T23:17:08+01:00</created-at>
      <creator-id type="integer">17150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4396</number>
      <permalink>repeated-show-fields-from-queries-with-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sti</tag>
      <title>Repeated SHOW FIELDS FROM... queries with STI</title>
      <updated-at type="datetime">2010-04-14T23:17:10+01:00</updated-at>
      <user-id type="integer">17150</user-id>
      <version type="integer">6</version>
      <user-name>Luke Melia</user-name>
      <creator-name>Luke Melia</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4396</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:43:50+00:00</created-at>
      <creator-id type="integer">17150</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4396</number>
      <permalink>repeated-show-fields-from-queries-with-sti</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord sti</tag>
      <title>Repeated SHOW FIELDS FROM... queries with STI</title>
      <updated-at type="datetime">2011-02-02T17:50:20+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Luke Melia</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4396</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:43:51+00:00</created-at>
      <creator-id type="integer">17150</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4396</number>
      <permalink>repeated-show-fields-from-queries-with-sti</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord sti</tag>
      <title>Repeated SHOW FIELDS FROM... queries with STI</title>
      <updated-at type="datetime">2011-02-02T17:49:59+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">8</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Luke Melia</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4396</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
