<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-06-11T18:12:58+01:00</created-at>
  <creator-id type="integer">58946</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4831</number>
  <permalink>eager-loading-a-habtm-with-further-includes-does-not-properly-load-when-duplicates-are-in-the-habtm</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord</tag>
  <title>Eager Loading a HABTM with further includes does not properly load when duplicates are in the HABTM</title>
  <updated-at type="datetime">2011-02-02T17:21:23+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Jason Frey</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4831</url>
  <priority-name nil="true"></priority-name>
  <original-body>When eager loading a HABTM and also including anything beyond it, duplicate objects in the HABTM only load the first object's further includes, but the further includes are not loaded for subsequent objects.  It's hard to explain succinctly, so here's an example (with a test down further down):


Post has_and_belongs_to_many Categories and Categories has_many Categorizations.
Post 1 has categories 1 and 3.
Post 2 has category 1.
Calling Post.find(:all, :include =&gt; {:category =&gt; :categorizations}) will cause the categorizations to be loaded for the category objects tied to Post 1, however the category object for Post 2 will not have the categorizations loaded.   Subsequent calls to it will show database queries executing.


From what I can tell...In preload_associations, after the first level :category include is handled, it passes an array of categories [1, 3, 1] to the next level of preload_associations for the :categorizations.  preload_associations calls uniq right at the start on the records passed in.  The uniq ends up changing it to [1, 3], and that is how the duplicates are lost.  If I remove the uniq call, the test below passes, however then it breaks test_including_duplicate_objects_from_belongs_to.  Since that uniq call is in AR 2.2+, I am assuming this will happen on all versions including 3.


Add the following test to cases\associations\eager_test.rb, and also add a require for 'models\categorization' and the fixture for :categorizations (patch attached, but it's against 2.2.2).

@@@ ruby
  def test_deep_including_through_habtm
    posts = Post.find(:all, :include =&gt; {:categories =&gt; :categorizations}, :order =&gt; &quot;posts.id&quot;)
    assert_no_queries { assert_equal 2, posts[0].categories[0].categorizations.size }
    assert_no_queries { assert_equal 0, posts[0].categories[1].categorizations.size }
    assert_no_queries { assert_equal 2, posts[1].categories[0].categorizations.size }
  end
@@@

The third assert_no_queries will fail.  If you change the very first line of preload_associations to remove the uniq, the test will pass, however test_including_duplicate_objects_from_belongs_to will fail.  For now, that's the only way I could get the test to pass.</original-body>
  <latest-body>When eager loading a HABTM and also including anything beyond it, duplicate objects in the HABTM only load the first object's further includes, but the further includes are not loaded for subsequent objects.  It's hard to explain succinctly, so here's an example (with a test down further down):


Post has_and_belongs_to_many Categories and Categories has_many Categorizations.
Post 1 has categories 1 and 3.
Post 2 has category 1.
Calling Post.find(:all, :include =&gt; {:category =&gt; :categorizations}) will cause the categorizations to be loaded for the category objects tied to Post 1, however the category object for Post 2 will not have the categorizations loaded.   Subsequent calls to it will show database queries executing.


From what I can tell...In preload_associations, after the first level :category include is handled, it passes an array of categories [1, 3, 1] to the next level of preload_associations for the :categorizations.  preload_associations calls uniq right at the start on the records passed in.  The uniq ends up changing it to [1, 3], and that is how the duplicates are lost.  If I remove the uniq call, the test below passes, however then it breaks test_including_duplicate_objects_from_belongs_to.  Since that uniq call is in AR 2.2+, I am assuming this will happen on all versions including 3.


Add the following test to cases\associations\eager_test.rb, and also add a require for 'models\categorization' and the fixture for :categorizations (patch attached, but it's against 2.2.2).

@@@ ruby
  def test_deep_including_through_habtm
    posts = Post.find(:all, :include =&gt; {:categories =&gt; :categorizations}, :order =&gt; &quot;posts.id&quot;)
    assert_no_queries { assert_equal 2, posts[0].categories[0].categorizations.size }
    assert_no_queries { assert_equal 0, posts[0].categories[1].categorizations.size }
    assert_no_queries { assert_equal 2, posts[1].categories[0].categorizations.size }
  end
@@@

The third assert_no_queries will fail.  If you change the very first line of preload_associations to remove the uniq, the test will pass, however test_including_duplicate_objects_from_belongs_to will fail.  For now, that's the only way I could get the test to pass.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When eager loading a HABTM and also including anything beyond
it, duplicate objects in the HABTM only load the first object's
further includes, but the further includes are not loaded for
subsequent objects. It's hard to explain succinctly, so here's an
example (with a test down further down):&lt;/p&gt;
&lt;p&gt;Post has_and_belongs_to_many Categories and Categories has_many
Categorizations.&lt;br&gt;
Post 1 has categories 1 and 3.&lt;br&gt;
Post 2 has category 1.&lt;br&gt;
Calling Post.find(:all, :include =&amp;gt; {:category =&amp;gt;
:categorizations}) will cause the categorizations to be loaded for
the category objects tied to Post 1, however the category object
for Post 2 will not have the categorizations loaded. Subsequent
calls to it will show database queries executing.&lt;/p&gt;
&lt;p&gt;From what I can tell...In preload_associations, after the first
level :category include is handled, it passes an array of
categories [1, 3, 1] to the next level of preload_associations for
the :categorizations. preload_associations calls uniq right at the
start on the records passed in. The uniq ends up changing it to [1,
3], and that is how the duplicates are lost. If I remove the uniq
call, the test below passes, however then it breaks
test_including_duplicate_objects_from_belongs_to. Since that uniq
call is in AR 2.2+, I am assuming this will happen on all versions
including 3.&lt;/p&gt;
&lt;p&gt;Add the following test to cases\associations\eager_test.rb, and
also add a require for 'models\categorization' and the fixture for
:categorizations (patch attached, but it's against 2.2.2).&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  def test_deep_including_through_habtm
    posts = Post.find(:all, :include =&amp;gt; {:categories =&amp;gt; :categorizations}, :order =&amp;gt; &quot;posts.id&quot;)
    assert_no_queries { assert_equal 2, posts[0].categories[0].categorizations.size }
    assert_no_queries { assert_equal 0, posts[0].categories[1].categorizations.size }
    assert_no_queries { assert_equal 2, posts[1].categories[0].categorizations.size }
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The third assert_no_queries will fail. If you change the very
first line of preload_associations to remove the uniq, the test
will pass, however test_including_duplicate_objects_from_belongs_to
will fail. For now, that's the only way I could get the test to
pass.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When eager loading a HABTM and also including anything beyond it, duplicate objects in the HABTM only load the first object's further includes, but the further includes are not loaded for subsequent objects.  It's hard to explain succinctly, so here's an example (with a test down further down):


Post has_and_belongs_to_many Categories and Categories has_many Categorizations.
Post 1 has categories 1 and 3.
Post 2 has category 1.
Calling Post.find(:all, :include =&gt; {:category =&gt; :categorizations}) will cause the categorizations to be loaded for the category objects tied to Post 1, however the category object for Post 2 will not have the categorizations loaded.   Subsequent calls to it will show database queries executing.


From what I can tell...In preload_associations, after the first level :category include is handled, it passes an array of categories [1, 3, 1] to the next level of preload_associations for the :categorizations.  preload_associations calls uniq right at the start on the records passed in.  The uniq ends up changing it to [1, 3], and that is how the duplicates are lost.  If I remove the uniq call, the test below passes, however then it breaks test_including_duplicate_objects_from_belongs_to.  Since that uniq call is in AR 2.2+, I am assuming this will happen on all versions including 3.


Add the following test to cases\associations\eager_test.rb, and also add a require for 'models\categorization' and the fixture for :categorizations (patch attached, but it's against 2.2.2).

@@@ ruby
  def test_deep_including_through_habtm
    posts = Post.find(:all, :include =&gt; {:categories =&gt; :categorizations}, :order =&gt; &quot;posts.id&quot;)
    assert_no_queries { assert_equal 2, posts[0].categories[0].categorizations.size }
    assert_no_queries { assert_equal 0, posts[0].categories[1].categorizations.size }
    assert_no_queries { assert_equal 2, posts[1].categories[0].categorizations.size }
  end
@@@

The third assert_no_queries will fail.  If you change the very first line of preload_associations to remove the uniq, the test will pass, however test_including_duplicate_objects_from_belongs_to will fail.  For now, that's the only way I could get the test to pass.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When eager loading a HABTM and also including anything beyond
it, duplicate objects in the HABTM only load the first object's
further includes, but the further includes are not loaded for
subsequent objects. It's hard to explain succinctly, so here's an
example (with a test down further down):&lt;/p&gt;
&lt;p&gt;Post has_and_belongs_to_many Categories and Categories has_many
Categorizations.&lt;br&gt;
Post 1 has categories 1 and 3.&lt;br&gt;
Post 2 has category 1.&lt;br&gt;
Calling Post.find(:all, :include =&amp;gt; {:category =&amp;gt;
:categorizations}) will cause the categorizations to be loaded for
the category objects tied to Post 1, however the category object
for Post 2 will not have the categorizations loaded. Subsequent
calls to it will show database queries executing.&lt;/p&gt;
&lt;p&gt;From what I can tell...In preload_associations, after the first
level :category include is handled, it passes an array of
categories [1, 3, 1] to the next level of preload_associations for
the :categorizations. preload_associations calls uniq right at the
start on the records passed in. The uniq ends up changing it to [1,
3], and that is how the duplicates are lost. If I remove the uniq
call, the test below passes, however then it breaks
test_including_duplicate_objects_from_belongs_to. Since that uniq
call is in AR 2.2+, I am assuming this will happen on all versions
including 3.&lt;/p&gt;
&lt;p&gt;Add the following test to cases\associations\eager_test.rb, and
also add a require for 'models\categorization' and the fixture for
:categorizations (patch attached, but it's against 2.2.2).&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  def test_deep_including_through_habtm
    posts = Post.find(:all, :include =&amp;gt; {:categories =&amp;gt; :categorizations}, :order =&amp;gt; &quot;posts.id&quot;)
    assert_no_queries { assert_equal 2, posts[0].categories[0].categorizations.size }
    assert_no_queries { assert_equal 0, posts[0].categories[1].categorizations.size }
    assert_no_queries { assert_equal 2, posts[1].categories[0].categorizations.size }
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The third assert_no_queries will fail. If you change the very
first line of preload_associations to remove the uniq, the test
will pass, however test_including_duplicate_objects_from_belongs_to
will fail. For now, that's the only way I could get the test to
pass.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-11T18:12:58+01:00</created-at>
      <creator-id type="integer">58946</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4831</number>
      <permalink>eager-loading-a-habtm-with-further-includes-does-not-properly-load-when-duplicates-are-in-the-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Eager Loading a HABTM with further includes does not properly load when duplicates are in the HABTM</title>
      <updated-at type="datetime">2010-06-11T18:13:02+01:00</updated-at>
      <user-id type="integer">58946</user-id>
      <version type="integer">1</version>
      <user-name>Jason Frey</user-name>
      <creator-name>Jason Frey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4831</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:37:35+00:00</created-at>
      <creator-id type="integer">58946</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4831</number>
      <permalink>eager-loading-a-habtm-with-further-includes-does-not-properly-load-when-duplicates-are-in-the-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord</tag>
      <title>Eager Loading a HABTM with further includes does not properly load when duplicates are in the HABTM</title>
      <updated-at type="datetime">2011-02-02T17:20:46+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jason Frey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4831</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:37:37+00:00</created-at>
      <creator-id type="integer">58946</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4831</number>
      <permalink>eager-loading-a-habtm-with-further-includes-does-not-properly-load-when-duplicates-are-in-the-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord</tag>
      <title>Eager Loading a HABTM with further includes does not properly load when duplicates are in the HABTM</title>
      <updated-at type="datetime">2011-02-02T17:21:23+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jason Frey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4831</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>c475a675d08a45cceb502e56174238548c328fb5</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-06-11T18:12:58+01:00</created-at>
      <filename>eager_test.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">556343</id>
      <size type="integer">1882</size>
      <uploader-id type="integer">58946</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/556343/eager_test.patch</url>
    </attachment>
  </attachments>
</ticket>
