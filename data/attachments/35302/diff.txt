diff --git a/activerecord/lib/active_record/associations.rb b/activerecord/lib/active_record/associations.rb
index 4e33dfe..439e1bd 100755
--- a/activerecord/lib/active_record/associations.rb
+++ b/activerecord/lib/active_record/associations.rb
@@ -1809,7 +1809,7 @@ module ActiveRecord
                     descendant
                   end.flatten.compact
 
-                  remove_duplicate_results!(reflection.class_name.constantize, parent_records, associations[name]) unless parent_records.empty?
+                  remove_duplicate_results!(reflection.klass, parent_records, associations[name]) unless parent_records.empty?
                 end
             end
           end
diff --git a/activerecord/test/cases/modules_test.rb b/activerecord/test/cases/modules_test.rb
index 283333f..8360416 100644
--- a/activerecord/test/cases/modules_test.rb
+++ b/activerecord/test/cases/modules_test.rb
@@ -36,4 +36,17 @@ class ModulesTest < ActiveRecord::TestCase
     assert_equal 'companies', MyApplication::Business::Client.table_name, 'table_name for ActiveRecord model subclass'
     assert_equal 'company_contacts', MyApplication::Business::Client::Contact.table_name, 'table_name for ActiveRecord model enclosed by another ActiveRecord model'
   end
+
+  def test_eager_loading_in_modules
+    # need to add an eager loading condition to force the eager loading model into
+    # the old join model, to test that. See http://dev.rubyonrails.org/ticket/9640
+    client_join_loaded = MyApplication::Business::Client.find(3, :include => {:firm => :account}, :conditions => 'accounts.id IS NOT NULL')
+    client_sequential_loaded = MyApplication::Business::Client.find(3, :include => {:firm => :account})
+
+    [client_join_loaded, client_sequential_loaded].each do |client|
+      assert_no_queries do
+        assert_not_nil(client.firm.account)
+      end
+    end
+  end
 end
diff --git a/activerecord/test/models/company_in_module.rb b/activerecord/test/models/company_in_module.rb
index 7f02403..e071525 100644
--- a/activerecord/test/models/company_in_module.rb
+++ b/activerecord/test/models/company_in_module.rb
@@ -11,7 +11,7 @@ module MyApplication
       has_many :clients_like_ms, :conditions => "name = 'Microsoft'", :class_name => "Client", :order => "id"
       has_many :clients_using_sql, :class_name => "Client", :finder_sql => 'SELECT * FROM companies WHERE client_of = #{id}'
 
-      has_one :account, :dependent => :destroy
+      has_one :account, :class_name => 'MyApplication::Billing::Account', :dependent => :destroy
     end
 
     class Client < Company
