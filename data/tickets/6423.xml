<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">11330</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-12T19:24:43+00:00</created-at>
  <creator-id type="integer">24325</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6423</number>
  <permalink>patch-fix-table-name-collision-on-certain-tricky-association-joins</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>activerecord associations patch test</tag>
  <title>[PATCH] fix table name collision on certain tricky association joins</title>
  <updated-at type="datetime">2011-02-12T21:55:13+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">2</version>
  <user-name>Repository</user-name>
  <creator-name>Ernie Miller</creator-name>
  <assigned-user-name>Jon Leighton</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6423</url>
  <priority-name nil="true"></priority-name>
  <original-body>In master, there's a regression in the new association handling cod. Way back in a patch I submitted to 3.0 to fix similar problems with eager loading (https://github.com/rails/rails/commit/e33d304975f5b20b0ba819ab644a2a8f80ff3743), there was another edge case that got &quot;accidentally&quot; fixed as well.

The issue is this:

In JoinAssociation#aliased_table_name_for, the following code is run to generate an aliased table name:

    name = connection.table_alias_for &quot;#{pluralize(reflection.name)}_#{parent_table_name}#{suffix}&quot;
    table_index = aliases[name] + 1
    name = name[0, connection.table_alias_length-3] + &quot;_#{table_index}&quot; if table_index &gt; 1

After this, aliases[name] is incremented. But since the value of &quot;name&quot; is now the new, aliased table name, the effect is that we end up with an aliases hash that looks something like this (taken from a multiply self-referential parent-child join:

    {
      &quot;people&quot;=&gt;1, &quot;children_people&quot;=&gt;1,
      &quot;children_people_2&quot;=&gt;2, &quot;parents_people&quot;=&gt;1, 
      &quot;parents_people_2&quot;=&gt;2
    }

As you can see, instead of counting aliases against children_people, we began counting against the aliased table name itself. This leads the JoinDependency to create invalid JoinAssociations (2 against children_people_2 and parents_people_2 in this case, which means twice it incremented children_people and landed on the same table name), and creates table name collisions.

This patch fixes the regression and adds a test to cover it in the future.</original-body>
  <latest-body>In master, there's a regression in the new association handling cod. Way back in a patch I submitted to 3.0 to fix similar problems with eager loading (https://github.com/rails/rails/commit/e33d304975f5b20b0ba819ab644a2a8f80ff3743), there was another edge case that got &quot;accidentally&quot; fixed as well.

The issue is this:

In JoinAssociation#aliased_table_name_for, the following code is run to generate an aliased table name:

    name = connection.table_alias_for &quot;#{pluralize(reflection.name)}_#{parent_table_name}#{suffix}&quot;
    table_index = aliases[name] + 1
    name = name[0, connection.table_alias_length-3] + &quot;_#{table_index}&quot; if table_index &gt; 1

After this, aliases[name] is incremented. But since the value of &quot;name&quot; is now the new, aliased table name, the effect is that we end up with an aliases hash that looks something like this (taken from a multiply self-referential parent-child join:

    {
      &quot;people&quot;=&gt;1, &quot;children_people&quot;=&gt;1,
      &quot;children_people_2&quot;=&gt;2, &quot;parents_people&quot;=&gt;1, 
      &quot;parents_people_2&quot;=&gt;2
    }

As you can see, instead of counting aliases against children_people, we began counting against the aliased table name itself. This leads the JoinDependency to create invalid JoinAssociations (2 against children_people_2 and parents_people_2 in this case, which means twice it incremented children_people and landed on the same table name), and creates table name collisions.

This patch fixes the regression and adds a test to cover it in the future.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In master, there's a regression in the new association handling
cod. Way back in a patch I submitted to 3.0 to fix similar problems
with eager loading (&lt;a href=
&quot;https://github.com/rails/rails/commit/e33d304975f5b20b0ba819ab644a2a8f80ff3743)&quot;&gt;https://github.com/rails/rails/commit/e33d304975f5b20b0ba819ab644a2...&lt;/a&gt;,
there was another edge case that got &quot;accidentally&quot; fixed as
well.&lt;/p&gt;
&lt;p&gt;The issue is this:&lt;/p&gt;
&lt;p&gt;In JoinAssociation#aliased_table_name_for, the following code is
run to generate an aliased table name:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;name = connection.table_alias_for &quot;#{pluralize(reflection.name)}_#{parent_table_name}#{suffix}&quot;
table_index = aliases[name] + 1
name = name[0, connection.table_alias_length-3] + &quot;_#{table_index}&quot; if table_index &amp;gt; 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After this, aliases[name] is incremented. But since the value of
&quot;name&quot; is now the new, aliased table name, the effect is that we
end up with an aliases hash that looks something like this (taken
from a multiply self-referential parent-child join:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
  &quot;people&quot;=&amp;gt;1, &quot;children_people&quot;=&amp;gt;1,
  &quot;children_people_2&quot;=&amp;gt;2, &quot;parents_people&quot;=&amp;gt;1, 
  &quot;parents_people_2&quot;=&amp;gt;2
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, instead of counting aliases against
children_people, we began counting against the aliased table name
itself. This leads the JoinDependency to create invalid
JoinAssociations (2 against children_people_2 and parents_people_2
in this case, which means twice it incremented children_people and
landed on the same table name), and creates table name
collisions.&lt;/p&gt;
&lt;p&gt;This patch fixes the regression and adds a test to cover it in
the future.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In master, there's a regression in the new association handling cod. Way back in a patch I submitted to 3.0 to fix similar problems with eager loading (https://github.com/rails/rails/commit/e33d304975f5b20b0ba819ab644a2a8f80ff3743), there was another edge case that got &quot;accidentally&quot; fixed as well.

The issue is this:

In JoinAssociation#aliased_table_name_for, the following code is run to generate an aliased table name:

    name = connection.table_alias_for &quot;#{pluralize(reflection.name)}_#{parent_table_name}#{suffix}&quot;
    table_index = aliases[name] + 1
    name = name[0, connection.table_alias_length-3] + &quot;_#{table_index}&quot; if table_index &gt; 1

After this, aliases[name] is incremented. But since the value of &quot;name&quot; is now the new, aliased table name, the effect is that we end up with an aliases hash that looks something like this (taken from a multiply self-referential parent-child join:

    {
      &quot;people&quot;=&gt;1, &quot;children_people&quot;=&gt;1,
      &quot;children_people_2&quot;=&gt;2, &quot;parents_people&quot;=&gt;1, 
      &quot;parents_people_2&quot;=&gt;2
    }

As you can see, instead of counting aliases against children_people, we began counting against the aliased table name itself. This leads the JoinDependency to create invalid JoinAssociations (2 against children_people_2 and parents_people_2 in this case, which means twice it incremented children_people and landed on the same table name), and creates table name collisions.

This patch fixes the regression and adds a test to cover it in the future.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In master, there's a regression in the new association handling
cod. Way back in a patch I submitted to 3.0 to fix similar problems
with eager loading (&lt;a href=
&quot;https://github.com/rails/rails/commit/e33d304975f5b20b0ba819ab644a2a8f80ff3743)&quot;&gt;https://github.com/rails/rails/commit/e33d304975f5b20b0ba819ab644a2...&lt;/a&gt;,
there was another edge case that got &quot;accidentally&quot; fixed as
well.&lt;/p&gt;
&lt;p&gt;The issue is this:&lt;/p&gt;
&lt;p&gt;In JoinAssociation#aliased_table_name_for, the following code is
run to generate an aliased table name:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;name = connection.table_alias_for &quot;#{pluralize(reflection.name)}_#{parent_table_name}#{suffix}&quot;
table_index = aliases[name] + 1
name = name[0, connection.table_alias_length-3] + &quot;_#{table_index}&quot; if table_index &amp;gt; 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After this, aliases[name] is incremented. But since the value of
&quot;name&quot; is now the new, aliased table name, the effect is that we
end up with an aliases hash that looks something like this (taken
from a multiply self-referential parent-child join:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
  &quot;people&quot;=&amp;gt;1, &quot;children_people&quot;=&amp;gt;1,
  &quot;children_people_2&quot;=&amp;gt;2, &quot;parents_people&quot;=&amp;gt;1, 
  &quot;parents_people_2&quot;=&amp;gt;2
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, instead of counting aliases against
children_people, we began counting against the aliased table name
itself. This leads the JoinDependency to create invalid
JoinAssociations (2 against children_people_2 and parents_people_2
in this case, which means twice it incremented children_people and
landed on the same table name), and creates table name
collisions.&lt;/p&gt;
&lt;p&gt;This patch fixes the regression and adds a test to cover it in
the future.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-12T19:24:43+00:00</created-at>
      <creator-id type="integer">24325</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6423</number>
      <permalink>patch-fix-table-name-collision-on-certain-tricky-association-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch test</tag>
      <title>[PATCH] fix table name collision on certain tricky association joins</title>
      <updated-at type="datetime">2011-02-12T19:24:47+00:00</updated-at>
      <user-id type="integer">24325</user-id>
      <version type="integer">1</version>
      <user-name>Ernie Miller</user-name>
      <creator-name>Ernie Miller</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6423</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [d72add9c20778e253f90fbfe587eae0e205c40ad]) Fix table name collision due to incorrect alias count on certain joins.

[#6423 state:committed]

Signed-off-by: Santiago Pastorino &lt;santiago@wyeworks.com&gt;
https://github.com/rails/rails/commit/d72add9c20778e253f90fbfe587eae0e205c40ad</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/d72add9c20778e253f90fbfe587eae0e205c40ad&quot;
title=
&quot;Changeset [d72add9c20778e253f90fbfe587eae0e205c40ad]&quot;&gt;[d72add9c20778e253f90fbfe587eae0e205c40ad]&lt;/a&gt;)
Fix table name collision due to incorrect alias count on certain
joins.&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/6423&quot; title=
&quot;Ticket #6423&quot;&gt;#6423&lt;/a&gt; state:committed]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Santiago Pastorino
&lt;a&gt;santiago@wyeworks.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/commit/d72add9c20778e253f90fbfe587eae0e205c40ad&quot;&gt;
https://github.com/rails/rails/commit/d72add9c20778e253f90fbfe587ea...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-12T21:55:08+00:00</created-at>
      <creator-id type="integer">24325</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6423</number>
      <permalink>patch-fix-table-name-collision-on-certain-tricky-association-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord associations patch test</tag>
      <title>[PATCH] fix table name collision on certain tricky association joins</title>
      <updated-at type="datetime">2011-02-12T21:55:13+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">2</version>
      <user-name>Repository</user-name>
      <creator-name>Ernie Miller</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6423</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>51415a7321d10b54c9e348f6f253c6a97bda6c85</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-12T19:24:43+00:00</created-at>
      <filename>fix_table_collision_on_tricky_joins.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">909613</id>
      <size type="integer">2409</size>
      <uploader-id type="integer">24325</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/909613/fix_table_collision_on_tricky_joins.diff</url>
    </attachment>
  </attachments>
</ticket>
