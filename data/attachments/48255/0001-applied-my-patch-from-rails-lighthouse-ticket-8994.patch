From 119efba5df8cac5d15ce05d4312964ddbff988bc Mon Sep 17 00:00:00 2001
From: Will Bryant <will.bryant@gmail.com>
Date: Wed, 24 Sep 2008 22:00:06 +1200
Subject: [PATCH] applied my patch from rails lighthouse ticket #8994 for eager loading conditions bug

---
 .../lib/active_record/association_preload.rb       |   10 +++++-----
 .../activerecord/lib/active_record/reflection.rb   |    4 ++++
 .../test/cases/associations/eager_test.rb          |    7 +++++++
 3 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/vendor/rails/activerecord/lib/active_record/association_preload.rb b/vendor/rails/activerecord/lib/active_record/association_preload.rb
index 74b4a11..230de34 100644
--- a/vendor/rails/activerecord/lib/active_record/association_preload.rb
+++ b/vendor/rails/activerecord/lib/active_record/association_preload.rb
@@ -96,7 +96,7 @@ module ActiveRecord
         options = reflection.options
 
         conditions = "t0.#{reflection.primary_key_name}  IN (?)"
-        conditions << append_conditions(options, preload_options)
+        conditions << append_conditions(reflection, preload_options)
 
         associated_records = reflection.klass.find(:all, :conditions => [conditions, ids],
         :include => options[:include],
@@ -223,7 +223,7 @@ module ActiveRecord
           table_name = klass.quoted_table_name
           primary_key = klass.primary_key
           conditions = "#{table_name}.#{connection.quote_column_name(primary_key)} IN (?)"
-          conditions << append_conditions(options, preload_options)
+          conditions << append_conditions(reflection, preload_options)
           column_type = klass.columns.detect{|c| c.name == primary_key}.type
           ids = id_map.keys.uniq.map do |id|
             if column_type == :integer
@@ -254,7 +254,7 @@ module ActiveRecord
           conditions = "#{reflection.klass.quoted_table_name}.#{foreign_key} IN (?)"
         end
 
-        conditions << append_conditions(options, preload_options)
+        conditions << append_conditions(reflection, preload_options)
 
         reflection.klass.find(:all,
                               :select => (preload_options[:select] || options[:select] || "#{table_name}.*"),
@@ -270,9 +270,9 @@ module ActiveRecord
         instance_eval("%@#{sql.gsub('@', '\@')}@")
       end
 
-      def append_conditions(options, preload_options)
+      def append_conditions(reflection, preload_options)
         sql = ""
-        sql << " AND (#{interpolate_sql_for_preload(sanitize_sql(options[:conditions]))})" if options[:conditions]
+        sql << " AND (#{interpolate_sql_for_preload(reflection.sanitized_conditions)})" if reflection.sanitized_conditions
         sql << " AND (#{sanitize_sql preload_options[:conditions]})" if preload_options[:conditions]
         sql
       end
diff --git a/vendor/rails/activerecord/lib/active_record/reflection.rb b/vendor/rails/activerecord/lib/active_record/reflection.rb
index 8614ef8..3f74c03 100644
--- a/vendor/rails/activerecord/lib/active_record/reflection.rb
+++ b/vendor/rails/activerecord/lib/active_record/reflection.rb
@@ -112,6 +112,10 @@ module ActiveRecord
         name == other_aggregation.name && other_aggregation.options && active_record == other_aggregation.active_record
       end
 
+      def sanitized_conditions #:nodoc:
+        @sanitized_conditions ||= klass.send(:sanitize_sql, options[:conditions]) if options[:conditions]
+      end
+
       private
         def derive_class_name
           name.to_s.camelize
diff --git a/vendor/rails/activerecord/test/cases/associations/eager_test.rb b/vendor/rails/activerecord/test/cases/associations/eager_test.rb
index 956a289..3c8a3ec 100644
--- a/vendor/rails/activerecord/test/cases/associations/eager_test.rb
+++ b/vendor/rails/activerecord/test/cases/associations/eager_test.rb
@@ -115,6 +115,13 @@ class EagerAssociationTest < ActiveRecord::TestCase
     posts = authors(:david).posts.find(:all, :include => :comments, :order => "posts.id")
     assert_equal 2, posts.first.comments.size
   end
+  
+  def test_loading_from_an_association_that_has_a_hash_of_conditions
+    assert_nothing_raised do
+      Author.find(:all, :include => :hello_posts_with_hash_conditions)
+    end
+    assert !Author.find(authors(:david).id, :include => :hello_posts_with_hash_conditions).hello_posts.empty?
+  end
 
   def test_loading_with_no_associations
     assert_nil Post.find(posts(:authorless).id, :include => :author).author
-- 
1.5.5.1

