<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-26T01:11:44+01:00</created-at>
  <creator-id type="integer">19704</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1115</number>
  <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
  <priority type="integer">533</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>actionpack enhancement patch routing</tag>
  <title>Path to extend named routes support for an object's to_params() method</title>
  <updated-at type="datetime">2008-12-10T19:00:13+00:00</updated-at>
  <user-id type="integer">141</user-id>
  <version type="integer">13</version>
  <user-name>Michael Koziarski</user-name>
  <creator-name>Philip Hallstrom</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The title not make sense so here's a brief description.

I have a route as follows:

@@@ map.school '/schools/:state/:city/:id/:name'
@@@

This is done for SEO purposes.  Generating URLs is a pain however.  Currently I need to specify every argument either in hash form or positional form.

This patch extends named routing so that if my School class defined &quot;to_params()&quot; I can do this:

@@@ school_path(@school)
@@@

This assumes that I have the following method in my School model (and that I have some associations to State and City):

@@@ 
def to_params
  {:state =&gt; state.full_name, :city =&gt; city.name, 
   :id =&gt; id, :name =&gt; name.downcase}
end
@@@

If that method exists it will call it and continue processing the named route using the returned hash.  If it does not it will continue on as normal.

NOTE: This only works for named routes and only if there is a single argument to the named route.</original-body>
  <latest-body>The title not make sense so here's a brief description.

I have a route as follows:

@@@ map.school '/schools/:state/:city/:id/:name'
@@@

This is done for SEO purposes.  Generating URLs is a pain however.  Currently I need to specify every argument either in hash form or positional form.

This patch extends named routing so that if my School class defined &quot;to_params()&quot; I can do this:

@@@ school_path(@school)
@@@

This assumes that I have the following method in my School model (and that I have some associations to State and City):

@@@ 
def to_params
  {:state =&gt; state.full_name, :city =&gt; city.name, 
   :id =&gt; id, :name =&gt; name.downcase}
end
@@@

If that method exists it will call it and continue processing the named route using the returned hash.  If it does not it will continue on as normal.

NOTE: This only works for named routes and only if there is a single argument to the named route.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The title not make sense so here's a brief description.&lt;/p&gt;
&lt;p&gt;I have a route as follows:&lt;/p&gt;
&lt;p&gt;@@@ map.school '/schools/:state/:city/:id/:name'&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;

This is done for SEO purposes.  Generating URLs is a pain however.  Currently I need to specify every argument either in hash form or positional form.

This patch extends named routing so that if my School class defined &amp;quot;to_params()&amp;quot; I can do this:

@@@ school_path(@school)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This assumes that I have the following method in my School model
(and that I have some associations to State and City):&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
def to_params
  {:state =&amp;gt; state.full_name, :city =&amp;gt; city.name,
   :id =&amp;gt; id, :name =&amp;gt; name.downcase}
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If that method exists it will call it and continue processing
the named route using the returned hash. If it does not it will
continue on as normal.&lt;/p&gt;
&lt;p&gt;NOTE: This only works for named routes and only if there is a
single argument to the named route.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The title not make sense so here's a brief description.

I have a route as follows:

@@@ 
map.school '/schools/:state/:city/:id/:name'
@@@

This is done for SEO purposes.  Generating URLs is a pain however.  Currently I need to specify every argument either in hash form or positional form.

This patch extends named routing so that if my School class defined &quot;to_params()&quot; I can do this:

@@@ 
school_path(@school)
@@@

This assumes that I have the following method in my School model (and that I have some associations to State and City):

@@@ 
def to_params
  {:state =&gt; state.full_name, :city =&gt; city.name, 
   :id =&gt; id, :name =&gt; name.downcase}
end
@@@

If that method exists it will call it and continue processing the named route using the returned hash.  If it does not it will continue on as normal.

NOTE: This only works for named routes and only if there is a single argument to the named route.

One reason this comes in really handy is when using the subdomain-fu plugin I can now specify what subdomain a model should always be linked to within the model and forget about it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The title not make sense so here's a brief description.&lt;/p&gt;
&lt;p&gt;I have a route as follows:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
map.school '/schools/:state/:city/:id/:name'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is done for SEO purposes. Generating URLs is a pain
however. Currently I need to specify every argument either in hash
form or positional form.&lt;/p&gt;
&lt;p&gt;This patch extends named routing so that if my School class
defined &quot;to_params()&quot; I can do this:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
school_path(@school)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This assumes that I have the following method in my School model
(and that I have some associations to State and City):&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
def to_params
  {:state =&amp;gt; state.full_name, :city =&amp;gt; city.name,
   :id =&amp;gt; id, :name =&amp;gt; name.downcase}
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If that method exists it will call it and continue processing
the named route using the returned hash. If it does not it will
continue on as normal.&lt;/p&gt;
&lt;p&gt;NOTE: This only works for named routes and only if there is a
single argument to the named route.&lt;/p&gt;
&lt;p&gt;One reason this comes in really handy is when using the
subdomain-fu plugin I can now specify what subdomain a model should
always be linked to within the model and forget about it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-26T01:11:44+01:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-09-26T01:15:28+01:00</updated-at>
      <user-id type="integer">19704</user-id>
      <version type="integer">1</version>
      <user-name>Philip Hallstrom</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>As it currently exists this patch doesn't work for all cases.  I'm looking into it now.  Seems routes get generated a couple of different ways not always through the method I patched.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As it currently exists this patch doesn't work for all cases.
I'm looking into it now. Seems routes get generated a couple of
different ways not always through the method I patched.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-26T22:57:50+01:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-09-26T22:57:55+01:00</updated-at>
      <user-id type="integer">19704</user-id>
      <version type="integer">2</version>
      <user-name>Philip Hallstrom</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Figured out the problem.  There is a route optimization method that runs prior to the rest of the routing code.  The conditions were such that if there was a single argument which was not a hash it would optimize the route and not get a chance to call to_params on it.  I've updated the attached patch to add an additional check to not optimize routes where the single argument responds_to?(:to_params).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Figured out the problem. There is a route optimization method
that runs prior to the rest of the routing code. The conditions
were such that if there was a single argument which was not a hash
it would optimize the route and not get a chance to call to_params
on it. I've updated the attached patch to add an additional check
to not optimize routes where the single argument
responds_to?(:to_params).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-26T23:48:23+01:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-09-26T23:48:25+01:00</updated-at>
      <user-id type="integer">19704</user-id>
      <version type="integer">3</version>
      <user-name>Philip Hallstrom</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This, or something like it, could be a good fit for 2.3.  But for now with 2.2 so close I'm going to hold off on reviewing it.

Have you released it as a plugin so others can try it?</body>
      <body-html>&lt;div&gt;&lt;p&gt;This, or something like it, could be a good fit for 2.3. But for
now with 2.2 so close I'm going to hold off on reviewing it.&lt;/p&gt;
&lt;p&gt;Have you released it as a plugin so others can try it?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-29T16:42:52+01:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-09-29T16:42:53+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">4</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I haven't.  Thought about it, but it modifies two methods deep in Rails routing and it seemed any attempt at a plugin would be pretty fragile...

I'm actively using it now on a project and will update this ticket if I come across any issues...</body>
      <body-html>&lt;div&gt;&lt;p&gt;I haven't. Thought about it, but it modifies two methods deep in
Rails routing and it seemed any attempt at a plugin would be pretty
fragile...&lt;/p&gt;
&lt;p&gt;I'm actively using it now on a project and will update this
ticket if I come across any issues...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-29T17:28:25+01:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-09-29T17:28:27+01:00</updated-at>
      <user-id type="integer">19704</user-id>
      <version type="integer">5</version>
      <user-name>Philip Hallstrom</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>One thing to keep in mind that I've just come across is that a model that has to_params() defined will cause some havoc with mapped resources and form_for.  I'm not sure if there's a way to intercept that and not use to_params() even if defined if the route is a resource.</body>
      <body-html>&lt;div&gt;&lt;p&gt;One thing to keep in mind that I've just come across is that a
model that has to_params() defined will cause some havoc with
mapped resources and form_for. I'm not sure if there's a way to
intercept that and not use to_params() even if defined if the route
is a resource.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-08T20:17:07+01:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-10-08T20:17:10+01:00</updated-at>
      <user-id type="integer">19704</user-id>
      <version type="integer">6</version>
      <user-name>Philip Hallstrom</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Just an idea: since you've defined your route as `/schools/:state/:city/:id/:name`, wouldn't it make sense for `school_path(obj)` to simply inject the return values of calling `obj.state.to_param`, `obj.city.to_param`, ...?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just an idea: since you've defined your route as
&lt;code&gt;/schools/:state/:city/:id/:name&lt;/code&gt;, wouldn't it make
sense for &lt;code&gt;school_path(obj)&lt;/code&gt; to simply inject the return
values of calling &lt;code&gt;obj.state.to_param&lt;/code&gt;,
&lt;code&gt;obj.city.to_param&lt;/code&gt;, ...?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-19T20:08:17+01:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-10-19T20:08:21+01:00</updated-at>
      <user-id type="integer">17949</user-id>
      <version type="integer">7</version>
      <user-name>Daniel Schierbeck</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&quot;Just an idea: since you've defined your route as /schools/:state/:city/:id/:name, wouldn't it make sense for school_path(obj) to simply inject the return values of calling obj.state.to_param, obj.city.to_param, ...?&quot;

Not in every case.  In the real world usage of these, the segments can't be mapped as easily as you've outlined.

You also run into the problem where you may have obj has_one state and state's to_param would return &quot;123-washington&quot;.  And for obj's url I only want &quot;washington&quot;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&quot;Just an idea: since you've defined your route as
/schools/:state/:city/:id/:name, wouldn't it make sense for
school_path(obj) to simply inject the return values of calling
obj.state.to_param, obj.city.to_param, ...?&quot;&lt;/p&gt;
&lt;p&gt;Not in every case. In the real world usage of these, the
segments can't be mapped as easily as you've outlined.&lt;/p&gt;
&lt;p&gt;You also run into the problem where you may have obj has_one
state and state's to_param would return &quot;123-washington&quot;. And for
obj's url I only want &quot;washington&quot;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-20T05:21:36+01:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-10-20T05:21:39+01:00</updated-at>
      <user-id type="integer">19704</user-id>
      <version type="integer">8</version>
      <user-name>Philip Hallstrom</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Michael - Now that 2.2 is out, is it a good time to take another look at this patch?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Michael - Now that 2.2 is out, is it a good time to take another
look at this patch?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-22T04:54:09+00:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-11-22T04:54:13+00:00</updated-at>
      <user-id type="integer">19704</user-id>
      <version type="integer">9</version>
      <user-name>Philip Hallstrom</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm just not sold on the API to be honest.  It just feels a little too
coupled.  f.ex what's the to_params return for a Photo when you have

post/1/photos/2
photos/2
user/4/photos/2

?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm just not sold on the API to be honest. It just feels a
little too coupled. f.ex what's the to_params return for a Photo
when you have&lt;/p&gt;
&lt;p&gt;post/1/photos/2 photos/2 user/4/photos/2&lt;/p&gt;
&lt;p&gt;?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-01T19:26:15+00:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-12-01T19:26:16+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">10</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree about nested routes.  I mentioned earlier that maybe the best thing to do is not call to_params() for nested routes since that doesn't make much sense in any case since the whole point of to_params is to generate a extremely generous url for SEO reasons.

I haven't looked to see if it's possible to skip over to_params() if the route is restful/nested.   If someone knows if it's possible that seems like a reasonable thing to do.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree about nested routes. I mentioned earlier that maybe the
best thing to do is not call to_params() for nested routes since
that doesn't make much sense in any case since the whole point of
to_params is to generate a extremely generous url for SEO
reasons.&lt;/p&gt;
&lt;p&gt;I haven't looked to see if it's possible to skip over
to_params() if the route is restful/nested. If someone knows if
it's possible that seems like a reasonable thing to do.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-02T19:08:51+00:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-12-02T19:08:56+00:00</updated-at>
      <user-id type="integer">19704</user-id>
      <version type="integer">11</version>
      <user-name>Philip Hallstrom</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>That is a neat idea, but I don't know if it's completely necessary. You could create a helper method to handle this:

@@@ ruby
# helpers/paths_helper.rb
def school_path(school)
  school_in_city_path(school.state.full_name, school.city.name, school.id, school.name.downcase)
end
@@@

This way the route nesting isn't tied to the model, and you can handle route logic which spans multiple models.

However, there are a couple downsides to this. One is it's not available in controllers. To solve this, I usually make a PathsHelper module and include it in ApplicationController. The other problem is there's no _url variation. I'm not sure of the best way to handle that problem though.</body>
      <body-html>&lt;div&gt;&lt;p&gt;That is a neat idea, but I don't know if it's completely
necessary. You could create a helper method to handle this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# helpers/paths_helper.rb
def school_path(school)
  school_in_city_path(school.state.full_name, school.city.name, school.id, school.name.downcase)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way the route nesting isn't tied to the model, and you can
handle route logic which spans multiple models.&lt;/p&gt;
&lt;p&gt;However, there are a couple downsides to this. One is it's not
available in controllers. To solve this, I usually make a
PathsHelper module and include it in ApplicationController. The
other problem is there's no _url variation. I'm not sure of the
best way to handle that problem though.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-05T00:47:41+00:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-12-05T00:47:42+00:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">12</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree with ryan here, the right approach here is to use a custom helper rather than modify the routing code base.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree with ryan here, the right approach here is to use a
custom helper rather than modify the routing code base.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-10T19:00:07+00:00</created-at>
      <creator-id type="integer">19704</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1115</number>
      <permalink>path-to-extend-named-routes-support-for-an-objects-to_params-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>actionpack enhancement patch routing</tag>
      <title>Path to extend named routes support for an object's to_params() method</title>
      <updated-at type="datetime">2008-12-10T19:00:13+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">13</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Philip Hallstrom</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1115</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>111fa7a0fb66cf74b827a69ff0d4dc4110786a47</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-26T23:48:24+01:00</created-at>
      <filename>named_routes_to_params_v2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">49059</id>
      <size type="integer">4693</size>
      <uploader-id type="integer">19704</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/49059/named_routes_to_params_v2.diff</url>
    </attachment>
  </attachments>
</ticket>
