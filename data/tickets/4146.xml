<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-03-10T13:58:56+00:00</created-at>
  <creator-id type="integer">90112</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4146</number>
  <permalink>multiline-string-in-where-condition-produces-incorrect-sql</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>Multiline string in 'where' condition produces incorrect SQL</title>
  <updated-at type="datetime">2010-10-09T21:53:30+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">5</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Valentine Bichkovsky</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4146</url>
  <priority-name>Low</priority-name>
  <original-body>This piece of code:
@@@
class Asset
...
 scope :by_text, lambda {|text|
  unless text.blank?
   includes(:tags).where(
   &quot;(asset_translations.locale = :loc and 
   (asset_translations.name like :expr or 
   asset_translations.description like :expr)) or 
   (tags.name = :name and tags.locale = :loc)&quot;,
   {:expr =&gt; &quot;%#{text}%&quot;, :name =&gt; text, :loc =&gt; I18n.locale.to_s} )
  end
 }
...
end
@@@
produces incorrect SQL in Ruby 1.8.7:
@@@
Asset.by_text('foo').to_sql
=&gt; &quot;SELECT     `assets`.* FROM       `assets` 
WHERE     ((asset_translations.locale = 'en-US' and \n) 
AND (                              (asset_translations.name like '%foo%' or \n) 
AND (                               asset_translations.description like '%foo%')) or \n) 
AND (                             (tags.name = 'foo' and tags.locale = 'en-US'))&quot;
@@@

Works fine in Ruby 1.9.1, or (for Ruby 1.8.7) when line endings are escaped like that:
@@@
 scope :by_text, lambda {|text|
  unless text.blank?
   includes(:tags).where(
   &quot;(asset_translations.locale = :loc and \
   (asset_translations.name like :expr or \
   asset_translations.description like :expr)) or \
   (tags.name = :name and tags.locale = :loc)&quot;,
   {:expr =&gt; &quot;%#{text}%&quot;, :name =&gt; text, :loc =&gt; I18n.locale.to_s} )
  end
 }
@@@

BTW, how do I post arbitrarily indented code here?</original-body>
  <latest-body>This piece of code:
@@@
class Asset
...
 scope :by_text, lambda {|text|
  unless text.blank?
   includes(:tags).where(
   &quot;(asset_translations.locale = :loc and 
   (asset_translations.name like :expr or 
   asset_translations.description like :expr)) or 
   (tags.name = :name and tags.locale = :loc)&quot;,
   {:expr =&gt; &quot;%#{text}%&quot;, :name =&gt; text, :loc =&gt; I18n.locale.to_s} )
  end
 }
...
end
@@@
produces incorrect SQL in Ruby 1.8.7:
@@@
Asset.by_text('foo').to_sql
=&gt; &quot;SELECT     `assets`.* FROM       `assets` 
WHERE     ((asset_translations.locale = 'en-US' and \n) 
AND (                              (asset_translations.name like '%foo%' or \n) 
AND (                               asset_translations.description like '%foo%')) or \n) 
AND (                             (tags.name = 'foo' and tags.locale = 'en-US'))&quot;
@@@

Works fine in Ruby 1.9.1, or (for Ruby 1.8.7) when line endings are escaped like that:
@@@
 scope :by_text, lambda {|text|
  unless text.blank?
   includes(:tags).where(
   &quot;(asset_translations.locale = :loc and \
   (asset_translations.name like :expr or \
   asset_translations.description like :expr)) or \
   (tags.name = :name and tags.locale = :loc)&quot;,
   {:expr =&gt; &quot;%#{text}%&quot;, :name =&gt; text, :loc =&gt; I18n.locale.to_s} )
  end
 }
@@@

BTW, how do I post arbitrarily indented code here?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This piece of code:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Asset
...
 scope :by_text, lambda {|text|
  unless text.blank?
   includes(:tags).where(
   &quot;(asset_translations.locale = :loc and 
   (asset_translations.name like :expr or 
   asset_translations.description like :expr)) or 
   (tags.name = :name and tags.locale = :loc)&quot;,
   {:expr =&amp;gt; &quot;%#{text}%&quot;, :name =&amp;gt; text, :loc =&amp;gt; I18n.locale.to_s} )
  end
 }
...
end&lt;/code&gt;
&lt;/pre&gt;
produces incorrect SQL in Ruby 1.8.7:&lt;br&gt;
&lt;pre&gt;
&lt;code&gt;Asset.by_text('foo').to_sql
=&amp;gt; &quot;SELECT     &lt;/code&gt;assets.* FROM       &lt;code&gt;assets&lt;/code&gt; 
WHERE     ((asset_translations.locale = 'en-US' and \n) 
AND (                              (asset_translations.name like '%foo%' or \n) 
AND (                               asset_translations.description like '%foo%')) or \n) 
AND (                             (tags.name = 'foo' and tags.locale = 'en-US'))&quot;
&lt;/pre&gt;
&lt;p&gt;Works fine in Ruby 1.9.1, or (for Ruby 1.8.7) when line endings
are escaped like that:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; scope :by_text, lambda {|text|
  unless text.blank?
   includes(:tags).where(
   &quot;(asset_translations.locale = :loc and \
   (asset_translations.name like :expr or \
   asset_translations.description like :expr)) or \
   (tags.name = :name and tags.locale = :loc)&quot;,
   {:expr =&amp;gt; &quot;%#{text}%&quot;, :name =&amp;gt; text, :loc =&amp;gt; I18n.locale.to_s} )
  end
 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BTW, how do I post arbitrarily indented code here?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This piece of code:
@@@
class Asset
...
 scope :by_text, lambda {|text|
  unless text.blank?
   includes(:tags).where(
   &quot;(asset_translations.locale = :loc and 
   (asset_translations.name like :expr or 
   asset_translations.description like :expr)) or 
   (tags.name = :name and tags.locale = :loc)&quot;,
   {:expr =&gt; &quot;%#{text}%&quot;, :name =&gt; text, :loc =&gt; I18n.locale.to_s} )
  end
 }
...
end
@@@
produces incorrect SQL in Ruby 1.8.7:
@@@
Asset.by_text('foo').to_sql
=&gt; &quot;SELECT     `assets`.* FROM       `assets` 
WHERE     ((asset_translations.locale = 'en-US' and \n) 
AND (                              (asset_translations.name like '%foo%' or \n) 
AND (                               asset_translations.description like '%foo%')) or \n) 
AND (                             (tags.name = 'foo' and tags.locale = 'en-US'))&quot;
@@@

Works fine in Ruby 1.9.1, or (for Ruby 1.8.7) when line endings are escaped like that:
@@@
 scope :by_text, lambda {|text|
  unless text.blank?
   includes(:tags).where(
   &quot;(asset_translations.locale = :loc and \
   (asset_translations.name like :expr or \
   asset_translations.description like :expr)) or \
   (tags.name = :name and tags.locale = :loc)&quot;,
   {:expr =&gt; &quot;%#{text}%&quot;, :name =&gt; text, :loc =&gt; I18n.locale.to_s} )
  end
 }
@@@

BTW, how do I post arbitrarily indented code here?</body>
      <body-html>&lt;div&gt;&lt;p&gt;This piece of code:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Asset
...
 scope :by_text, lambda {|text|
  unless text.blank?
   includes(:tags).where(
   &quot;(asset_translations.locale = :loc and 
   (asset_translations.name like :expr or 
   asset_translations.description like :expr)) or 
   (tags.name = :name and tags.locale = :loc)&quot;,
   {:expr =&amp;gt; &quot;%#{text}%&quot;, :name =&amp;gt; text, :loc =&amp;gt; I18n.locale.to_s} )
  end
 }
...
end&lt;/code&gt;
&lt;/pre&gt;
produces incorrect SQL in Ruby 1.8.7:&lt;br&gt;
&lt;pre&gt;
&lt;code&gt;Asset.by_text('foo').to_sql
=&amp;gt; &quot;SELECT     &lt;/code&gt;assets.* FROM       &lt;code&gt;assets&lt;/code&gt; 
WHERE     ((asset_translations.locale = 'en-US' and \n) 
AND (                              (asset_translations.name like '%foo%' or \n) 
AND (                               asset_translations.description like '%foo%')) or \n) 
AND (                             (tags.name = 'foo' and tags.locale = 'en-US'))&quot;
&lt;/pre&gt;
&lt;p&gt;Works fine in Ruby 1.9.1, or (for Ruby 1.8.7) when line endings
are escaped like that:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; scope :by_text, lambda {|text|
  unless text.blank?
   includes(:tags).where(
   &quot;(asset_translations.locale = :loc and \
   (asset_translations.name like :expr or \
   asset_translations.description like :expr)) or \
   (tags.name = :name and tags.locale = :loc)&quot;,
   {:expr =&amp;gt; &quot;%#{text}%&quot;, :name =&amp;gt; text, :loc =&amp;gt; I18n.locale.to_s} )
  end
 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BTW, how do I post arbitrarily indented code here?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-10T13:58:56+00:00</created-at>
      <creator-id type="integer">90112</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4146</number>
      <permalink>multiline-string-in-where-condition-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>arel multiline &quot;rails 3&quot;</tag>
      <title>Multiline string in 'where' condition produces incorrect SQL</title>
      <updated-at type="datetime">2010-03-10T14:08:03+00:00</updated-at>
      <user-id type="integer">90112</user-id>
      <version type="integer">1</version>
      <user-name>Valentine Bichkovsky</user-name>
      <creator-name>Valentine Bichkovsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4146</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-10T13:59:33+00:00</created-at>
      <creator-id type="integer">90112</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4146</number>
      <permalink>multiline-string-in-where-condition-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>arel multiline &quot;rails 3&quot;</tag>
      <title>Multiline string in 'where' condition produces incorrect SQL</title>
      <updated-at type="datetime">2010-03-10T13:59:34+00:00</updated-at>
      <user-id type="integer">90112</user-id>
      <version type="integer">2</version>
      <user-name>Valentine Bichkovsky</user-name>
      <creator-name>Valentine Bichkovsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4146</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you escape line endings, \n won't be added to the string. At the time 1.9.1 might have escaped line endings automatically but now all 3 rubies (1.9.1, 1.9.2 and 1.8.7) behave in the same manner.

I'm closing this ticket, but if this is still an issue please make a comment to reopen and I'll oblige.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you escape line endings, \n won't be added to the string. At
the time 1.9.1 might have escaped line endings automatically but
now all 3 rubies (1.9.1, 1.9.2 and 1.8.7) behave in the same
manner.&lt;/p&gt;
&lt;p&gt;I'm closing this ticket, but if this is still an issue please
make a comment to reopen and I'll oblige.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-23T03:12:06+01:00</created-at>
      <creator-id type="integer">90112</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4146</number>
      <permalink>multiline-string-in-where-condition-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>arel multiline &quot;rails 3&quot;</tag>
      <title>Multiline string in 'where' condition produces incorrect SQL</title>
      <updated-at type="datetime">2010-06-23T03:12:13+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">3</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Valentine Bichkovsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4146</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-09T21:53:26+01:00</created-at>
      <creator-id type="integer">90112</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: arel multiline &quot;rails 3&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4146</number>
      <permalink>multiline-string-in-where-condition-produces-incorrect-sql</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Multiline string in 'where' condition produces incorrect SQL</title>
      <updated-at type="datetime">2010-10-09T21:53:31+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">5</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Valentine Bichkovsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4146</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
