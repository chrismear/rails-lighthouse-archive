<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-07T16:52:25+00:00</created-at>
  <creator-id type="integer">123825</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5929</number>
  <permalink>scope-with-same-attributes-on-different-models-misbehaves</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>scoped</tag>
  <title>scope with same attributes on different models misbehaves</title>
  <updated-at type="datetime">2011-02-09T00:42:47+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Bert</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5929</url>
  <priority-name nil="true"></priority-name>
  <original-body>I have two AR models

class Project &lt; ActiveRecord::Base
  has_many :teimerecords
end

and


class Timerecord &lt; ActiveRecord::Base
  belongs_to :project
  
  scope :billable, where(:billable =&gt; true, :projects =&gt; { :billable =&gt; true}). joins(:project)
end

when  use the billable scope, the sql is:

ruby-1.9.2-p0 &gt; Timerecord.billable.to_sql
 =&gt; &quot;SELECT     \&quot;timerecords\&quot;.* FROM       \&quot;timerecords\&quot;  INNER JOIN \&quot;projects\&quot; ON \&quot;projects\&quot;.\&quot;id\&quot; = \&quot;timerecords\&quot;.\&quot;project_id\&quot; WHERE     (\&quot;projects\&quot;.\&quot;billable\&quot; = 't')&quot; 

therefore not including the where clause on the timerecord

when I use it without the scope:

 Timerecord. where(:billable =&gt; true, :projects =&gt; { :billable =&gt; true}). joins(:project).to_sql
 =&gt; &quot;SELECT     \&quot;timerecords\&quot;.* FROM       \&quot;timerecords\&quot;  INNER JOIN \&quot;projects\&quot; ON \&quot;projects\&quot;.\&quot;id\&quot; = \&quot;timerecords\&quot;.\&quot;project_id\&quot; WHERE     (\&quot;timerecords\&quot;.\&quot;billable\&quot; = 't') AND (\&quot;projects\&quot;.\&quot;billable\&quot; = 't')&quot; 

The build SQL statement is correct.

for ease, find the attached rails project

Bert</original-body>
  <latest-body>I have two AR models

class Project &lt; ActiveRecord::Base
  has_many :teimerecords
end

and


class Timerecord &lt; ActiveRecord::Base
  belongs_to :project
  
  scope :billable, where(:billable =&gt; true, :projects =&gt; { :billable =&gt; true}). joins(:project)
end

when  use the billable scope, the sql is:

ruby-1.9.2-p0 &gt; Timerecord.billable.to_sql
 =&gt; &quot;SELECT     \&quot;timerecords\&quot;.* FROM       \&quot;timerecords\&quot;  INNER JOIN \&quot;projects\&quot; ON \&quot;projects\&quot;.\&quot;id\&quot; = \&quot;timerecords\&quot;.\&quot;project_id\&quot; WHERE     (\&quot;projects\&quot;.\&quot;billable\&quot; = 't')&quot; 

therefore not including the where clause on the timerecord

when I use it without the scope:

 Timerecord. where(:billable =&gt; true, :projects =&gt; { :billable =&gt; true}). joins(:project).to_sql
 =&gt; &quot;SELECT     \&quot;timerecords\&quot;.* FROM       \&quot;timerecords\&quot;  INNER JOIN \&quot;projects\&quot; ON \&quot;projects\&quot;.\&quot;id\&quot; = \&quot;timerecords\&quot;.\&quot;project_id\&quot; WHERE     (\&quot;timerecords\&quot;.\&quot;billable\&quot; = 't') AND (\&quot;projects\&quot;.\&quot;billable\&quot; = 't')&quot; 

The build SQL statement is correct.

for ease, find the attached rails project

Bert</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have two AR models&lt;/p&gt;
&lt;p&gt;class Project &amp;lt; ActiveRecord::Base&lt;br&gt;
has_many :teimerecords end&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;class Timerecord &amp;lt; ActiveRecord::Base&lt;br&gt;
belongs_to :project&lt;/p&gt;
&lt;p&gt;scope :billable, where(:billable =&amp;gt; true, :projects =&amp;gt; {
:billable =&amp;gt; true}). joins(:project) end&lt;/p&gt;
&lt;p&gt;when use the billable scope, the sql is:&lt;/p&gt;
&lt;p&gt;ruby-1.9.2-p0 &amp;gt; Timerecord.billable.to_sql&lt;br&gt;
=&amp;gt; &quot;SELECT &quot;timerecords&quot;.* FROM &quot;timerecords&quot; INNER JOIN
&quot;projects&quot; ON &quot;projects&quot;.&quot;id&quot; = &quot;timerecords&quot;.&quot;project_id&quot; WHERE
(&quot;projects&quot;.&quot;billable&quot; = 't')&quot;&lt;/p&gt;
&lt;p&gt;therefore not including the where clause on the timerecord&lt;/p&gt;
&lt;p&gt;when I use it without the scope:&lt;/p&gt;
&lt;p&gt;Timerecord. where(:billable =&amp;gt; true, :projects =&amp;gt; {
:billable =&amp;gt; true}). joins(:project).to_sql =&amp;gt; &quot;SELECT
&quot;timerecords&quot;.* FROM &quot;timerecords&quot; INNER JOIN &quot;projects&quot; ON
&quot;projects&quot;.&quot;id&quot; = &quot;timerecords&quot;.&quot;project_id&quot; WHERE
(&quot;timerecords&quot;.&quot;billable&quot; = 't') AND (&quot;projects&quot;.&quot;billable&quot; =
't')&quot;&lt;/p&gt;
&lt;p&gt;The build SQL statement is correct.&lt;/p&gt;
&lt;p&gt;for ease, find the attached rails project&lt;/p&gt;
&lt;p&gt;Bert&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have two AR models

class Project &lt; ActiveRecord::Base
  has_many :teimerecords
end

and


class Timerecord &lt; ActiveRecord::Base
  belongs_to :project
  
  scope :billable, where(:billable =&gt; true, :projects =&gt; { :billable =&gt; true}). joins(:project)
end

when  use the billable scope, the sql is:

ruby-1.9.2-p0 &gt; Timerecord.billable.to_sql
 =&gt; &quot;SELECT     \&quot;timerecords\&quot;.* FROM       \&quot;timerecords\&quot;  INNER JOIN \&quot;projects\&quot; ON \&quot;projects\&quot;.\&quot;id\&quot; = \&quot;timerecords\&quot;.\&quot;project_id\&quot; WHERE     (\&quot;projects\&quot;.\&quot;billable\&quot; = 't')&quot; 

therefore not including the where clause on the timerecord

when I use it without the scope:

 Timerecord. where(:billable =&gt; true, :projects =&gt; { :billable =&gt; true}). joins(:project).to_sql
 =&gt; &quot;SELECT     \&quot;timerecords\&quot;.* FROM       \&quot;timerecords\&quot;  INNER JOIN \&quot;projects\&quot; ON \&quot;projects\&quot;.\&quot;id\&quot; = \&quot;timerecords\&quot;.\&quot;project_id\&quot; WHERE     (\&quot;timerecords\&quot;.\&quot;billable\&quot; = 't') AND (\&quot;projects\&quot;.\&quot;billable\&quot; = 't')&quot; 

The build SQL statement is correct.

for ease, find the attached rails project

Bert</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have two AR models&lt;/p&gt;
&lt;p&gt;class Project &amp;lt; ActiveRecord::Base&lt;br&gt;
has_many :teimerecords end&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;class Timerecord &amp;lt; ActiveRecord::Base&lt;br&gt;
belongs_to :project&lt;/p&gt;
&lt;p&gt;scope :billable, where(:billable =&amp;gt; true, :projects =&amp;gt; {
:billable =&amp;gt; true}). joins(:project) end&lt;/p&gt;
&lt;p&gt;when use the billable scope, the sql is:&lt;/p&gt;
&lt;p&gt;ruby-1.9.2-p0 &amp;gt; Timerecord.billable.to_sql&lt;br&gt;
=&amp;gt; &quot;SELECT &quot;timerecords&quot;.* FROM &quot;timerecords&quot; INNER JOIN
&quot;projects&quot; ON &quot;projects&quot;.&quot;id&quot; = &quot;timerecords&quot;.&quot;project_id&quot; WHERE
(&quot;projects&quot;.&quot;billable&quot; = 't')&quot;&lt;/p&gt;
&lt;p&gt;therefore not including the where clause on the timerecord&lt;/p&gt;
&lt;p&gt;when I use it without the scope:&lt;/p&gt;
&lt;p&gt;Timerecord. where(:billable =&amp;gt; true, :projects =&amp;gt; {
:billable =&amp;gt; true}). joins(:project).to_sql =&amp;gt; &quot;SELECT
&quot;timerecords&quot;.* FROM &quot;timerecords&quot; INNER JOIN &quot;projects&quot; ON
&quot;projects&quot;.&quot;id&quot; = &quot;timerecords&quot;.&quot;project_id&quot; WHERE
(&quot;timerecords&quot;.&quot;billable&quot; = 't') AND (&quot;projects&quot;.&quot;billable&quot; =
't')&quot;&lt;/p&gt;
&lt;p&gt;The build SQL statement is correct.&lt;/p&gt;
&lt;p&gt;for ease, find the attached rails project&lt;/p&gt;
&lt;p&gt;Bert&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-07T16:52:25+00:00</created-at>
      <creator-id type="integer">123825</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5929</number>
      <permalink>scope-with-same-attributes-on-different-models-misbehaves</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>scoped</tag>
      <title>scope with same attributes on different models misbehaves</title>
      <updated-at type="datetime">2010-11-07T16:52:28+00:00</updated-at>
      <user-id type="integer">123825</user-id>
      <version type="integer">1</version>
      <user-name>Bert</user-name>
      <creator-name>Bert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5929</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-09T00:32:04+00:00</created-at>
      <creator-id type="integer">123825</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5929</number>
      <permalink>scope-with-same-attributes-on-different-models-misbehaves</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>scoped</tag>
      <title>scope with same attributes on different models misbehaves</title>
      <updated-at type="datetime">2011-02-09T00:42:32+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Bert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5929</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-09T00:32:04+00:00</created-at>
      <creator-id type="integer">123825</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5929</number>
      <permalink>scope-with-same-attributes-on-different-models-misbehaves</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>scoped</tag>
      <title>scope with same attributes on different models misbehaves</title>
      <updated-at type="datetime">2011-02-09T00:42:47+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Bert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5929</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>6d544d385d989ed1549eee89881f6600c3f3294a</code>
      <content-type>application/x-compress</content-type>
      <created-at type="datetime">2010-11-07T16:52:25+00:00</created-at>
      <filename>bugtar.Z</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">757535</id>
      <size type="integer">417280</size>
      <uploader-id type="integer">123825</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/757535/bugtar.Z</url>
    </attachment>
  </attachments>
</ticket>
