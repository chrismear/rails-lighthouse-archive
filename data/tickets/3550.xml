<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-08T12:33:43+00:00</created-at>
  <creator-id type="integer">57676</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3550</number>
  <permalink>rollback-of-database-transactions-should-support-multiple-databases</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord cucumber rollback transactions</tag>
  <title>Rollback of database transactions should support multiple databases.</title>
  <updated-at type="datetime">2011-02-02T18:37:56+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">5</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>johnf</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3550</url>
  <priority-name nil="true"></priority-name>
  <original-body>I have an application with two databases.

I setup models as so

@@@ ruby
class VqdataBase &lt; ActiveRecord::Base
  establish_connection &quot;otherdb_#{RAILS_ENV}&quot;
  self.abstract_class = true
end 

class Video &lt; VqdataBase
end
@@@

I do the following for migrations

@@@ ruby
class InitialSetup &lt; ActiveRecord::Migration
  def self.connection  
    VqdataBase.connection
  end 
end
@@@
This works fine except in testing. The second database doesn't have any changes made to it rolled back.

The following patch ensures that all DBs have a rolled back connection

@@@ diff
=== modified file 'vendor/rails/activerecord/lib/active_record/fixtures.rb'
--- vendor/rails/activerecord/lib/active_record/fixtures.rb     2009-12-07 23:56:25 +0000
+++ vendor/rails/activerecord/lib/active_record/fixtures.rb     2009-12-08 12:32:39 +0000
@@ -928,9 +928,11 @@
           load_fixtures
           @@already_loaded_fixtures[self.class] = @loaded_fixtures
         end
-        ActiveRecord::Base.connection.increment_open_transactions
-        ActiveRecord::Base.connection.transaction_joinable = false
-        ActiveRecord::Base.connection.begin_db_transaction
+        ActiveRecord::Base.connection_handler.connection_pools.values.map {|pool| pool.connection}.each do |c|
+          c.increment_open_transactions
+          c.transaction_joinable = false
+          c.begin_db_transaction
+        end
       # Load fixtures for every test.
       else
         Fixtures.reset_cache
@@ -950,9 +952,11 @@
       end
 
       # Rollback changes if a transaction is active.
-      if run_in_transaction? &amp;&amp; ActiveRecord::Base.connection.open_transactions != 0
-        ActiveRecord::Base.connection.rollback_db_transaction
-        ActiveRecord::Base.connection.decrement_open_transactions
+      ActiveRecord::Base.connection_handler.connection_pools.values.map {|pool| pool.connection}.each do |c|
+        if run_in_transaction? &amp;&amp; c.open_transactions != 0
+          c.rollback_db_transaction
+          c.decrement_open_transactions
+        end
       end
       ActiveRecord::Base.clear_active_connections!
     end
@@@</original-body>
  <latest-body>I have an application with two databases.

I setup models as so

@@@ ruby
class VqdataBase &lt; ActiveRecord::Base
  establish_connection &quot;otherdb_#{RAILS_ENV}&quot;
  self.abstract_class = true
end 

class Video &lt; VqdataBase
end
@@@

I do the following for migrations

@@@ ruby
class InitialSetup &lt; ActiveRecord::Migration
  def self.connection  
    VqdataBase.connection
  end 
end
@@@
This works fine except in testing. The second database doesn't have any changes made to it rolled back.

The following patch ensures that all DBs have a rolled back connection

@@@ diff
=== modified file 'vendor/rails/activerecord/lib/active_record/fixtures.rb'
--- vendor/rails/activerecord/lib/active_record/fixtures.rb     2009-12-07 23:56:25 +0000
+++ vendor/rails/activerecord/lib/active_record/fixtures.rb     2009-12-08 12:32:39 +0000
@@ -928,9 +928,11 @@
           load_fixtures
           @@already_loaded_fixtures[self.class] = @loaded_fixtures
         end
-        ActiveRecord::Base.connection.increment_open_transactions
-        ActiveRecord::Base.connection.transaction_joinable = false
-        ActiveRecord::Base.connection.begin_db_transaction
+        ActiveRecord::Base.connection_handler.connection_pools.values.map {|pool| pool.connection}.each do |c|
+          c.increment_open_transactions
+          c.transaction_joinable = false
+          c.begin_db_transaction
+        end
       # Load fixtures for every test.
       else
         Fixtures.reset_cache
@@ -950,9 +952,11 @@
       end
 
       # Rollback changes if a transaction is active.
-      if run_in_transaction? &amp;&amp; ActiveRecord::Base.connection.open_transactions != 0
-        ActiveRecord::Base.connection.rollback_db_transaction
-        ActiveRecord::Base.connection.decrement_open_transactions
+      ActiveRecord::Base.connection_handler.connection_pools.values.map {|pool| pool.connection}.each do |c|
+        if run_in_transaction? &amp;&amp; c.open_transactions != 0
+          c.rollback_db_transaction
+          c.decrement_open_transactions
+        end
       end
       ActiveRecord::Base.clear_active_connections!
     end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have an application with two databases.&lt;/p&gt;
&lt;p&gt;I setup models as so&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class VqdataBase &amp;lt; ActiveRecord::Base
  establish_connection &quot;otherdb_#{RAILS_ENV}&quot;
  self.abstract_class = true
end 

class Video &amp;lt; VqdataBase
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I do the following for migrations&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class InitialSetup &amp;lt; ActiveRecord::Migration
  def self.connection  
    VqdataBase.connection
  end 
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This works fine except in testing. The second database doesn't
have any changes made to it rolled back.&lt;/p&gt;
&lt;p&gt;The following patch ensures that all DBs have a rolled back
connection&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;diff&quot;&gt;=== modified file 'vendor/rails/activerecord/lib/active_record/fixtures.rb'
--- vendor/rails/activerecord/lib/active_record/fixtures.rb     2009-12-07 23:56:25 +0000
+++ vendor/rails/activerecord/lib/active_record/fixtures.rb     2009-12-08 12:32:39 +0000
@@ -928,9 +928,11 @@
           load_fixtures
           @@already_loaded_fixtures[self.class] = @loaded_fixtures
         end
-        ActiveRecord::Base.connection.increment_open_transactions
-        ActiveRecord::Base.connection.transaction_joinable = false
-        ActiveRecord::Base.connection.begin_db_transaction
+        ActiveRecord::Base.connection_handler.connection_pools.values.map {|pool| pool.connection}.each do |c|
+          c.increment_open_transactions
+          c.transaction_joinable = false
+          c.begin_db_transaction
+        end
       # Load fixtures for every test.
       else
         Fixtures.reset_cache
@@ -950,9 +952,11 @@
       end
 
       # Rollback changes if a transaction is active.
-      if run_in_transaction? &amp;amp;&amp;amp; ActiveRecord::Base.connection.open_transactions != 0
-        ActiveRecord::Base.connection.rollback_db_transaction
-        ActiveRecord::Base.connection.decrement_open_transactions
+      ActiveRecord::Base.connection_handler.connection_pools.values.map {|pool| pool.connection}.each do |c|
+        if run_in_transaction? &amp;amp;&amp;amp; c.open_transactions != 0
+          c.rollback_db_transaction
+          c.decrement_open_transactions
+        end
       end
       ActiveRecord::Base.clear_active_connections!
     end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have an application with two databases.

I setup models as so

@@@ ruby
class VqdataBase &lt; ActiveRecord::Base
  establish_connection &quot;otherdb_#{RAILS_ENV}&quot;
  self.abstract_class = true
end 

class Video &lt; VqdataBase
end
@@@

I do the following for migrations

@@@ ruby
class InitialSetup &lt; ActiveRecord::Migration
  def self.connection  
    VqdataBase.connection
  end 
end
@@@
This works fine except in testing. The second database doesn't have any changes made to it rolled back.

The following patch ensures that all DBs have a rolled back connection

@@@ diff
=== modified file 'vendor/rails/activerecord/lib/active_record/fixtures.rb'
--- vendor/rails/activerecord/lib/active_record/fixtures.rb     2009-12-07 23:56:25 +0000
+++ vendor/rails/activerecord/lib/active_record/fixtures.rb     2009-12-08 12:32:39 +0000
@@ -928,9 +928,11 @@
           load_fixtures
           @@already_loaded_fixtures[self.class] = @loaded_fixtures
         end
-        ActiveRecord::Base.connection.increment_open_transactions
-        ActiveRecord::Base.connection.transaction_joinable = false
-        ActiveRecord::Base.connection.begin_db_transaction
+        ActiveRecord::Base.connection_handler.connection_pools.values.map {|pool| pool.connection}.each do |c|
+          c.increment_open_transactions
+          c.transaction_joinable = false
+          c.begin_db_transaction
+        end
       # Load fixtures for every test.
       else
         Fixtures.reset_cache
@@ -950,9 +952,11 @@
       end
 
       # Rollback changes if a transaction is active.
-      if run_in_transaction? &amp;&amp; ActiveRecord::Base.connection.open_transactions != 0
-        ActiveRecord::Base.connection.rollback_db_transaction
-        ActiveRecord::Base.connection.decrement_open_transactions
+      ActiveRecord::Base.connection_handler.connection_pools.values.map {|pool| pool.connection}.each do |c|
+        if run_in_transaction? &amp;&amp; c.open_transactions != 0
+          c.rollback_db_transaction
+          c.decrement_open_transactions
+        end
       end
       ActiveRecord::Base.clear_active_connections!
     end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have an application with two databases.&lt;/p&gt;
&lt;p&gt;I setup models as so&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class VqdataBase &amp;lt; ActiveRecord::Base
  establish_connection &quot;otherdb_#{RAILS_ENV}&quot;
  self.abstract_class = true
end 

class Video &amp;lt; VqdataBase
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I do the following for migrations&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class InitialSetup &amp;lt; ActiveRecord::Migration
  def self.connection  
    VqdataBase.connection
  end 
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This works fine except in testing. The second database doesn't
have any changes made to it rolled back.&lt;/p&gt;
&lt;p&gt;The following patch ensures that all DBs have a rolled back
connection&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;diff&quot;&gt;=== modified file 'vendor/rails/activerecord/lib/active_record/fixtures.rb'
--- vendor/rails/activerecord/lib/active_record/fixtures.rb     2009-12-07 23:56:25 +0000
+++ vendor/rails/activerecord/lib/active_record/fixtures.rb     2009-12-08 12:32:39 +0000
@@ -928,9 +928,11 @@
           load_fixtures
           @@already_loaded_fixtures[self.class] = @loaded_fixtures
         end
-        ActiveRecord::Base.connection.increment_open_transactions
-        ActiveRecord::Base.connection.transaction_joinable = false
-        ActiveRecord::Base.connection.begin_db_transaction
+        ActiveRecord::Base.connection_handler.connection_pools.values.map {|pool| pool.connection}.each do |c|
+          c.increment_open_transactions
+          c.transaction_joinable = false
+          c.begin_db_transaction
+        end
       # Load fixtures for every test.
       else
         Fixtures.reset_cache
@@ -950,9 +952,11 @@
       end
 
       # Rollback changes if a transaction is active.
-      if run_in_transaction? &amp;amp;&amp;amp; ActiveRecord::Base.connection.open_transactions != 0
-        ActiveRecord::Base.connection.rollback_db_transaction
-        ActiveRecord::Base.connection.decrement_open_transactions
+      ActiveRecord::Base.connection_handler.connection_pools.values.map {|pool| pool.connection}.each do |c|
+        if run_in_transaction? &amp;amp;&amp;amp; c.open_transactions != 0
+          c.rollback_db_transaction
+          c.decrement_open_transactions
+        end
       end
       ActiveRecord::Base.clear_active_connections!
     end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-08T12:33:43+00:00</created-at>
      <creator-id type="integer">57676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3550</number>
      <permalink>rollback-of-database-transactions-should-support-multiple-databases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord cucumber rollback transactions</tag>
      <title>Rollback of database transactions should support multiple databases.</title>
      <updated-at type="datetime">2010-02-21T02:26:56+00:00</updated-at>
      <user-id type="integer">57676</user-id>
      <version type="integer">1</version>
      <user-name>johnf</user-name>
      <creator-name>johnf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3550</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've got this same need. I'll test out this patch, too. But I was thinking that it'd be really nice if the ActiveRecord::Base.configurations array held multiple databases. That would help with the rake tasks (db:test:*) since they seem to only look at the ActiveRecord::Base.configurations['test'] elements. So you could either nest the multiple databases in the database.yml &quot;test&quot; section, -OR- add anything with a &quot;_test&quot; appended it to it as a top level yaml section.

Thoughts?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've got this same need. I'll test out this patch, too. But I
was thinking that it'd be really nice if the
ActiveRecord::Base.configurations array held multiple databases.
That would help with the rake tasks (db:test:*) since they seem to
only look at the ActiveRecord::Base.configurations['test']
elements. So you could either nest the multiple databases in the
database.yml &quot;test&quot; section, -OR- add anything with a &quot;_test&quot;
appended it to it as a top level yaml section.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-24T23:41:40+00:00</created-at>
      <creator-id type="integer">57676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3550</number>
      <permalink>rollback-of-database-transactions-should-support-multiple-databases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord cucumber rollback transactions</tag>
      <title>Rollback of database transactions should support multiple databases.</title>
      <updated-at type="datetime">2010-02-24T23:41:41+00:00</updated-at>
      <user-id type="integer">8743</user-id>
      <version type="integer">2</version>
      <user-name>Matt Kern</user-name>
      <creator-name>johnf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3550</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm getting lock timeout issues with this patch on 2.3.5.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm getting lock timeout issues with this patch on 2.3.5.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-26T06:53:01+00:00</created-at>
      <creator-id type="integer">57676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3550</number>
      <permalink>rollback-of-database-transactions-should-support-multiple-databases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord cucumber rollback transactions</tag>
      <title>Rollback of database transactions should support multiple databases.</title>
      <updated-at type="datetime">2010-02-26T06:53:04+00:00</updated-at>
      <user-id type="integer">8743</user-id>
      <version type="integer">3</version>
      <user-name>Matt Kern</user-name>
      <creator-name>johnf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3550</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:54:41+00:00</created-at>
      <creator-id type="integer">57676</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3550</number>
      <permalink>rollback-of-database-transactions-should-support-multiple-databases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord cucumber rollback transactions</tag>
      <title>Rollback of database transactions should support multiple databases.</title>
      <updated-at type="datetime">2011-02-02T18:37:56+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>johnf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3550</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:54:43+00:00</created-at>
      <creator-id type="integer">57676</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3550</number>
      <permalink>rollback-of-database-transactions-should-support-multiple-databases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord cucumber rollback transactions</tag>
      <title>Rollback of database transactions should support multiple databases.</title>
      <updated-at type="datetime">2011-02-02T18:37:25+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>johnf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3550</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
