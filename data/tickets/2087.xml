<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-26T18:51:10+00:00</created-at>
  <creator-id type="integer">40903</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">2087</number>
  <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
  <priority type="integer">1170</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>2.3-rc1 active_record conditions joins tests</tag>
  <title>Conditions on deep joins uses wrong table name</title>
  <updated-at type="datetime">2009-08-09T11:19:19+01:00</updated-at>
  <user-id type="integer">7211</user-id>
  <version type="integer">11</version>
  <user-name>CancelProfileIsBroken</user-name>
  <creator-name>Tys von Gaza</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
  <priority-name nil="true"></priority-name>
  <original-body>Example schema:
AnswerSet
 has_many :answers

Answer
 belongs_to :answer_set
 has_many :answer_options

AnswerOptions
 belongs_to :answer

Simplified query needed:
Need to find all AnswerOptions that belong to an AnswerSet that has an AnswerOption with a certain value...

The following will join the tables correctly
AnswerOption.find(:all, :joins =&gt; { :answer =&gt; { :answer_set =&gt; { :answers =&gt; :answer_options }}})

The following will create the wrong condition names:
AnswerOption.find(:all, :joins =&gt; { :answer =&gt; { :answer_set =&gt; { :answers =&gt; :answer_options }}}, :conditions =&gt; { :answer =&gt; { :answer_set =&gt; { :answers =&gt; { :answer_options =&gt; { :value =&gt; 1 } } }}})

ie returns:
SELECT &quot;answer_options&quot;.* FROM &quot;answer_options&quot; INNER JOIN &quot;answers&quot; ON &quot;answers&quot;.id = &quot;answer_options&quot;.answer_id INNER JOIN &quot;answer_sets&quot; ON &quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot; answers_answer_sets ON answers_answer_sets.answer_set_id = answer_sets.id INNER JOIN &quot;answer_options&quot; answer_options_answers ON answer_options_answers.answer_id = answers_answer_sets.id WHERE (&quot;answer_options&quot;.&quot;value&quot; = 1) 


The desired query follow, notice the WHERE condition is (&quot;answer_options_answers&quot;.&quot;value&quot; = 1)  NOT (&quot;answer_options&quot;.&quot;value&quot; = 1):
SELECT &quot;answer_options&quot;.* FROM &quot;answer_options&quot; INNER JOIN &quot;answers&quot; ON &quot;answers&quot;.id = &quot;answer_options&quot;.answer_id INNER JOIN &quot;answer_sets&quot; ON &quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot; answers_answer_sets ON answers_answer_sets.answer_set_id = answer_sets.id INNER JOIN &quot;answer_options&quot; answer_options_answers ON answer_options_answers.answer_id = answers_answer_sets.id WHERE (&quot;answer_options_answers&quot;.&quot;value&quot; = 1) 


I'll see if I can create a test that fails after lunch.</original-body>
  <latest-body>Example schema:
AnswerSet
 has_many :answers

Answer
 belongs_to :answer_set
 has_many :answer_options

AnswerOptions
 belongs_to :answer

Simplified query needed:
Need to find all AnswerOptions that belong to an AnswerSet that has an AnswerOption with a certain value...

The following will join the tables correctly
AnswerOption.find(:all, :joins =&gt; { :answer =&gt; { :answer_set =&gt; { :answers =&gt; :answer_options }}})

The following will create the wrong condition names:
AnswerOption.find(:all, :joins =&gt; { :answer =&gt; { :answer_set =&gt; { :answers =&gt; :answer_options }}}, :conditions =&gt; { :answer =&gt; { :answer_set =&gt; { :answers =&gt; { :answer_options =&gt; { :value =&gt; 1 } } }}})

ie returns:
SELECT &quot;answer_options&quot;.* FROM &quot;answer_options&quot; INNER JOIN &quot;answers&quot; ON &quot;answers&quot;.id = &quot;answer_options&quot;.answer_id INNER JOIN &quot;answer_sets&quot; ON &quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot; answers_answer_sets ON answers_answer_sets.answer_set_id = answer_sets.id INNER JOIN &quot;answer_options&quot; answer_options_answers ON answer_options_answers.answer_id = answers_answer_sets.id WHERE (&quot;answer_options&quot;.&quot;value&quot; = 1) 


The desired query follow, notice the WHERE condition is (&quot;answer_options_answers&quot;.&quot;value&quot; = 1)  NOT (&quot;answer_options&quot;.&quot;value&quot; = 1):
SELECT &quot;answer_options&quot;.* FROM &quot;answer_options&quot; INNER JOIN &quot;answers&quot; ON &quot;answers&quot;.id = &quot;answer_options&quot;.answer_id INNER JOIN &quot;answer_sets&quot; ON &quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot; answers_answer_sets ON answers_answer_sets.answer_set_id = answer_sets.id INNER JOIN &quot;answer_options&quot; answer_options_answers ON answer_options_answers.answer_id = answers_answer_sets.id WHERE (&quot;answer_options_answers&quot;.&quot;value&quot; = 1) 


I'll see if I can create a test that fails after lunch.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Example schema: AnswerSet has_many :answers&lt;/p&gt;
&lt;p&gt;Answer belongs_to :answer_set has_many :answer_options&lt;/p&gt;
&lt;p&gt;AnswerOptions belongs_to :answer&lt;/p&gt;
&lt;p&gt;Simplified query needed: Need to find all AnswerOptions that
belong to an AnswerSet that has an AnswerOption with a certain
value...&lt;/p&gt;
&lt;p&gt;The following will join the tables correctly
AnswerOption.find(:all, :joins =&amp;gt; { :answer =&amp;gt; { :answer_set
=&amp;gt; { :answers =&amp;gt; :answer_options }}})&lt;/p&gt;
&lt;p&gt;The following will create the wrong condition names:
AnswerOption.find(:all, :joins =&amp;gt; { :answer =&amp;gt; { :answer_set
=&amp;gt; { :answers =&amp;gt; :answer_options }}}, :conditions =&amp;gt; {
:answer =&amp;gt; { :answer_set =&amp;gt; { :answers =&amp;gt; {
:answer_options =&amp;gt; { :value =&amp;gt; 1 } } }}})&lt;/p&gt;
&lt;p&gt;ie returns: SELECT &quot;answer_options&quot;.* FROM &quot;answer_options&quot;
INNER JOIN &quot;answers&quot; ON &quot;answers&quot;.id = &quot;answer_options&quot;.answer_id
INNER JOIN &quot;answer_sets&quot; ON &quot;answer_sets&quot;.id =
&quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot; answers_answer_sets ON
answers_answer_sets.answer_set_id = answer_sets.id INNER JOIN
&quot;answer_options&quot; answer_options_answers ON
answer_options_answers.answer_id = answers_answer_sets.id WHERE
(&quot;answer_options&quot;.&quot;value&quot; = 1)&lt;/p&gt;
&lt;p&gt;The desired query follow, notice the WHERE condition is
(&quot;answer_options_answers&quot;.&quot;value&quot; = 1) NOT
(&quot;answer_options&quot;.&quot;value&quot; = 1): SELECT &quot;answer_options&quot;.* FROM
&quot;answer_options&quot; INNER JOIN &quot;answers&quot; ON &quot;answers&quot;.id =
&quot;answer_options&quot;.answer_id INNER JOIN &quot;answer_sets&quot; ON
&quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot;
answers_answer_sets ON answers_answer_sets.answer_set_id =
answer_sets.id INNER JOIN &quot;answer_options&quot; answer_options_answers
ON answer_options_answers.answer_id = answers_answer_sets.id WHERE
(&quot;answer_options_answers&quot;.&quot;value&quot; = 1)&lt;/p&gt;
&lt;p&gt;I'll see if I can create a test that fails after lunch.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Example schema:
AnswerSet
 has_many :answers

Answer
 belongs_to :answer_set
 has_many :answer_options

AnswerOptions
 belongs_to :answer

Simplified query needed:
Need to find all AnswerOptions that belong to an AnswerSet that has an AnswerOption with a certain value...

The following will join the tables correctly
AnswerOption.find(:all, :joins =&gt; { :answer =&gt; { :answer_set =&gt; { :answers =&gt; :answer_options }}})

The following will create the wrong condition names:
AnswerOption.find(:all, :joins =&gt; { :answer =&gt; { :answer_set =&gt; { :answers =&gt; :answer_options }}}, :conditions =&gt; { :answer =&gt; { :answer_set =&gt; { :answers =&gt; { :answer_options =&gt; { :value =&gt; 1 } } }}})

ie returns:
SELECT &quot;answer_options&quot;.* FROM &quot;answer_options&quot; INNER JOIN &quot;answers&quot; ON &quot;answers&quot;.id = &quot;answer_options&quot;.answer_id INNER JOIN &quot;answer_sets&quot; ON &quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot; answers_answer_sets ON answers_answer_sets.answer_set_id = answer_sets.id INNER JOIN &quot;answer_options&quot; answer_options_answers ON answer_options_answers.answer_id = answers_answer_sets.id WHERE (&quot;answer_options&quot;.&quot;value&quot; = 1) 


The desired query follow, notice the WHERE condition is (&quot;answer_options_answers&quot;.&quot;value&quot; = 1)  NOT (&quot;answer_options&quot;.&quot;value&quot; = 1):
SELECT &quot;answer_options&quot;.* FROM &quot;answer_options&quot; INNER JOIN &quot;answers&quot; ON &quot;answers&quot;.id = &quot;answer_options&quot;.answer_id INNER JOIN &quot;answer_sets&quot; ON &quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot; answers_answer_sets ON answers_answer_sets.answer_set_id = answer_sets.id INNER JOIN &quot;answer_options&quot; answer_options_answers ON answer_options_answers.answer_id = answers_answer_sets.id WHERE (&quot;answer_options_answers&quot;.&quot;value&quot; = 1) 


I'll see if I can create a test that fails after lunch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Example schema: AnswerSet has_many :answers&lt;/p&gt;
&lt;p&gt;Answer belongs_to :answer_set has_many :answer_options&lt;/p&gt;
&lt;p&gt;AnswerOptions belongs_to :answer&lt;/p&gt;
&lt;p&gt;Simplified query needed: Need to find all AnswerOptions that
belong to an AnswerSet that has an AnswerOption with a certain
value...&lt;/p&gt;
&lt;p&gt;The following will join the tables correctly
AnswerOption.find(:all, :joins =&amp;gt; { :answer =&amp;gt; { :answer_set
=&amp;gt; { :answers =&amp;gt; :answer_options }}})&lt;/p&gt;
&lt;p&gt;The following will create the wrong condition names:
AnswerOption.find(:all, :joins =&amp;gt; { :answer =&amp;gt; { :answer_set
=&amp;gt; { :answers =&amp;gt; :answer_options }}}, :conditions =&amp;gt; {
:answer =&amp;gt; { :answer_set =&amp;gt; { :answers =&amp;gt; {
:answer_options =&amp;gt; { :value =&amp;gt; 1 } } }}})&lt;/p&gt;
&lt;p&gt;ie returns: SELECT &quot;answer_options&quot;.* FROM &quot;answer_options&quot;
INNER JOIN &quot;answers&quot; ON &quot;answers&quot;.id = &quot;answer_options&quot;.answer_id
INNER JOIN &quot;answer_sets&quot; ON &quot;answer_sets&quot;.id =
&quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot; answers_answer_sets ON
answers_answer_sets.answer_set_id = answer_sets.id INNER JOIN
&quot;answer_options&quot; answer_options_answers ON
answer_options_answers.answer_id = answers_answer_sets.id WHERE
(&quot;answer_options&quot;.&quot;value&quot; = 1)&lt;/p&gt;
&lt;p&gt;The desired query follow, notice the WHERE condition is
(&quot;answer_options_answers&quot;.&quot;value&quot; = 1) NOT
(&quot;answer_options&quot;.&quot;value&quot; = 1): SELECT &quot;answer_options&quot;.* FROM
&quot;answer_options&quot; INNER JOIN &quot;answers&quot; ON &quot;answers&quot;.id =
&quot;answer_options&quot;.answer_id INNER JOIN &quot;answer_sets&quot; ON
&quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot;
answers_answer_sets ON answers_answer_sets.answer_set_id =
answer_sets.id INNER JOIN &quot;answer_options&quot; answer_options_answers
ON answer_options_answers.answer_id = answers_answer_sets.id WHERE
(&quot;answer_options_answers&quot;.&quot;value&quot; = 1)&lt;/p&gt;
&lt;p&gt;I'll see if I can create a test that fails after lunch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-26T18:51:10+00:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 active_record conditions joins</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-02-26T18:51:12+00:00</updated-at>
      <user-id type="integer">40903</user-id>
      <version type="integer">1</version>
      <user-name>Tys von Gaza</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The example can be simplified to a single belongs_to, has_many relationship:

@@@ ruby
AnswerSet
  has_many :answers

Answer
  belongs_to :answer_set
@@@

Wrong query should look something like this:
Answer.find(:all, :joins =&gt; { :answer_set =&gt; :answers }, :conditions =&gt; { :answer_set =&gt; { :answers =&gt; { :question_id =&gt; 1 } } })

Generates:
SELECT &quot;answers&quot;.* FROM &quot;answers&quot; INNER JOIN &quot;answer_sets&quot; ON &quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot; answers_answer_sets ON answers_answer_sets.answer_set_id = answer_sets.id WHERE (&quot;answers&quot;.&quot;question_id&quot; = 1)

Should generate:
SELECT &quot;answers&quot;.* FROM &quot;answers&quot; INNER JOIN &quot;answer_sets&quot; ON &quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER JOIN &quot;answers&quot; answers_answer_sets ON answers_answer_sets.answer_set_id = answer_sets.id WHERE (&quot;answers_answer_sets&quot;.&quot;question_id&quot; = 1)</body>
      <body-html>&lt;div&gt;&lt;p&gt;The example can be simplified to a single belongs_to, has_many
relationship:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
AnswerSet
  has_many :answers

Answer
  belongs_to :answer_set
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wrong query should look something like this: Answer.find(:all,
:joins =&amp;gt; { :answer_set =&amp;gt; :answers }, :conditions =&amp;gt; {
:answer_set =&amp;gt; { :answers =&amp;gt; { :question_id =&amp;gt; 1 } }
})&lt;/p&gt;
&lt;p&gt;Generates: SELECT &quot;answers&quot;.* FROM &quot;answers&quot; INNER JOIN
&quot;answer_sets&quot; ON &quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER
JOIN &quot;answers&quot; answers_answer_sets ON
answers_answer_sets.answer_set_id = answer_sets.id WHERE
(&quot;answers&quot;.&quot;question_id&quot; = 1)&lt;/p&gt;
&lt;p&gt;Should generate: SELECT &quot;answers&quot;.* FROM &quot;answers&quot; INNER JOIN
&quot;answer_sets&quot; ON &quot;answer_sets&quot;.id = &quot;answers&quot;.answer_set_id INNER
JOIN &quot;answers&quot; answers_answer_sets ON
answers_answer_sets.answer_set_id = answer_sets.id WHERE
(&quot;answers_answer_sets&quot;.&quot;question_id&quot; = 1)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-26T19:12:56+00:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 active_record conditions joins</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-02-26T19:13:01+00:00</updated-at>
      <user-id type="integer">40903</user-id>
      <version type="integer">2</version>
      <user-name>Tys von Gaza</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>After thinking about this further, the root of the problem is how the conditions are built and doesn't have much to do with the joins.

The following should really error out with bad sql, but it doesn't:

Answer.find(:all, :conditions =&gt; { :answer_set =&gt; { :answers =&gt; { :question_id =&gt; 1 } } })</body>
      <body-html>&lt;div&gt;&lt;p&gt;After thinking about this further, the root of the problem is
how the conditions are built and doesn't have much to do with the
joins.&lt;/p&gt;
&lt;p&gt;The following should really error out with bad sql, but it
doesn't:&lt;/p&gt;
&lt;p&gt;Answer.find(:all, :conditions =&amp;gt; { :answer_set =&amp;gt; {
:answers =&amp;gt; { :question_id =&amp;gt; 1 } } })&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-26T19:56:52+00:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 active_record conditions joins</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-02-26T19:56:56+00:00</updated-at>
      <user-id type="integer">40903</user-id>
      <version type="integer">3</version>
      <user-name>Tys von Gaza</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is a patch that adds the tests, not really sure where to begin to fix the bug through.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is a patch that adds the tests, not really sure where to
begin to fix the bug through.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-26T21:08:24+00:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3-rc1 active_record conditions joins
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 active_record conditions joins tests</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-02-26T21:08:26+00:00</updated-at>
      <user-id type="integer">40903</user-id>
      <version type="integer">4</version>
      <user-name>Tys von Gaza</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-05T14:12:43+01:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3-rc1 active_record conditions joins tests
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 active_record bugmash conditions joins tests</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-08-05T14:12:47+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">5</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>verified that patch applies and tests fail on 2-3-stable</body>
      <body-html>&lt;div&gt;&lt;p&gt;verified that patch applies and tests fail on 2-3-stable&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-08T21:41:49+01:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 active_record bugmash conditions joins tests</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-08-08T21:41:56+01:00</updated-at>
      <user-id type="integer">8505</user-id>
      <version type="integer">6</version>
      <user-name>Gabe da Silveira</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>-1 on fixing this issue.  After looking closely at this I don't think a fix is worth the overhead.  In order to reliably fix this the conditions would need to know about joins and how the joined tables are named.  That is add_joins! would need to probably pass the JoinDependency back to add_conditions! in AR::Base (or else duplicate the naming scheme which seems to be asking for trouble).  Such a change would be a major refactoring that I think needs to be considered more holistically, and not considered before Rails 3 in any case.  In order to merit the additional complexity this would need to solve a whole class of problems, or else inspire a refactoring that made the :conditions/:joins code more expressive.

The workaround for this particular test case is simply to use:

@@@
:conditions =&gt; { :'posts_authors.title' =&gt; &quot;Welcome to the weblog&quot; }
@@@

instead of:

@@@
:conditions =&gt; { :author =&gt; { :posts =&gt; { :title =&gt; &quot;Welcome to the weblog&quot; } } }
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1 on fixing this issue. After looking closely at this I don't
think a fix is worth the overhead. In order to reliably fix this
the conditions would need to know about joins and how the joined
tables are named. That is add_joins! would need to probably pass
the JoinDependency back to add_conditions! in AR::Base (or else
duplicate the naming scheme which seems to be asking for trouble).
Such a change would be a major refactoring that I think needs to be
considered more holistically, and not considered before Rails 3 in
any case. In order to merit the additional complexity this would
need to solve a whole class of problems, or else inspire a
refactoring that made the :conditions/:joins code more
expressive.&lt;/p&gt;
&lt;p&gt;The workaround for this particular test case is simply to
use:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:conditions =&amp;gt; { :'posts_authors.title' =&amp;gt; &quot;Welcome to the weblog&quot; }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;instead of:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:conditions =&amp;gt; { :author =&amp;gt; { :posts =&amp;gt; { :title =&amp;gt; &quot;Welcome to the weblog&quot; } } }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T00:25:42+01:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 active_record bugmash conditions joins tests</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-08-09T00:25:47+01:00</updated-at>
      <user-id type="integer">8505</user-id>
      <version type="integer">7</version>
      <user-name>Gabe da Silveira</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>verified

-1 I agree with Gabe on this one, the re-factoring it would take for this could cause more issues then it solves. 

At the point the developer is adding :join and :conditions they are already making an informed choice based off of their knowledge of the database schema, i do not feel manually specifying table names is that much added work 
(ideally these types of things should be pulled into the model anyway where it's more proper for it to 'know' about its relationships / naming conventions)</body>
      <body-html>&lt;div&gt;&lt;p&gt;verified&lt;/p&gt;
&lt;p&gt;-1 I agree with Gabe on this one, the re-factoring it would take
for this could cause more issues then it solves.&lt;/p&gt;
&lt;p&gt;At the point the developer is adding :join and :conditions they
are already making an informed choice based off of their knowledge
of the database schema, i do not feel manually specifying table
names is that much added work&lt;br&gt;
(ideally these types of things should be pulled into the model
anyway where it's more proper for it to 'know' about its
relationships / naming conventions)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T00:33:59+01:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 active_record bugmash conditions joins tests</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-08-09T00:34:02+01:00</updated-at>
      <user-id type="integer">65576</user-id>
      <version type="integer">8</version>
      <user-name>Steve St. Martin</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>agree with the earlier commenters.

The Arel merge may make fixing this easier.</body>
      <body-html>&lt;div&gt;&lt;p&gt;agree with the earlier commenters.&lt;/p&gt;
&lt;p&gt;The Arel merge may make fixing this easier.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-09T01:25:44+01:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.3-rc1 active_record bugmash conditions joins tests</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-08-09T01:25:47+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">9</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-09T02:50:14+01:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3-rc1 active_record bugmash conditions joins tests
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;&quot; 2.3-rc1 active_record conditions joins tests</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-08-09T02:50:19+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">10</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-09T11:19:13+01:00</created-at>
      <creator-id type="integer">40903</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;\&quot; 2.3-rc1 active_record conditions joins tests&quot;
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2087</number>
      <permalink>conditions-on-deep-joins-uses-wrong-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.3-rc1 active_record conditions joins tests</tag>
      <title>Conditions on deep joins uses wrong table name</title>
      <updated-at type="datetime">2009-08-09T11:19:19+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">11</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Tys von Gaza</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2087</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>338810af2adf6553922acbef62633d575909b4c3</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-26T21:08:24+00:00</created-at>
      <filename>nested_conditions_bug.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">93602</id>
      <size type="integer">1616</size>
      <uploader-id type="integer">40903</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/93602/nested_conditions_bug.diff</url>
    </attachment>
  </attachments>
</ticket>
