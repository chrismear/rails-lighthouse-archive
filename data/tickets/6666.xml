<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-04T20:14:57+01:00</created-at>
  <creator-id type="integer">144024</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6666</number>
  <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>&quot;activerecord rails3&quot;</tag>
  <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
  <updated-at type="datetime">2011-04-20T18:20:58+01:00</updated-at>
  <user-id type="integer">146417</user-id>
  <version type="integer">14</version>
  <user-name>Wicked Tribe</user-name>
  <creator-name>Alexey Muranov</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
  <priority-name>Low</priority-name>
  <original-body>These two examples illustrate the unexpected (to me) behavior of `save` method in `ActiveRecord::Persistence` for a sample application created with

@@@ shell
$ rails new test_app
$ cd test_app
$ rails generate model Person name:string
$ rake db:migrate
@@@

**First example**. In console:
@@@ console
p = Person.create(:name=&gt;'Bill')
p.destroy
p.name  # =&gt; &quot;Bill&quot;
p.save  # =&gt; true
@@@
Despite the `true` returned by `save`, the database is empty in the end.

**Second example**. In console:
@@@ console
p = Person.create(:name=&gt;'Bill')
Person.find(p.id).destroy
p.persisted?     # =&gt; true
p.destroyed?     # =&gt; false
p.name = &quot;John&quot;  # =&gt; &quot;John&quot;
p.save           # =&gt; true
@@@
Again, despite the `true` returned by `save`, the database is empty in the end.

This problem was discussed by me and others here: http://www.ruby-forum.com/topic/1386349

I saw other tickets about unexpected behavior of `save`, but didn't find an exact match to this problem.</original-body>
  <latest-body>These two examples illustrate the unexpected (to me) behavior of `save` method in `ActiveRecord::Persistence` for a sample application created with

@@@ shell
$ rails new test_app
$ cd test_app
$ rails generate model Person name:string
$ rake db:migrate
@@@

**First example**. In console:
@@@ console
p = Person.create(:name=&gt;'Bill')
p.destroy
p.name  # =&gt; &quot;Bill&quot;
p.save  # =&gt; true
@@@
Despite the `true` returned by `save`, the database is empty in the end.

**Second example**. In console:
@@@ console
p = Person.create(:name=&gt;'Bill')
Person.find(p.id).destroy
p.persisted?     # =&gt; true
p.destroyed?     # =&gt; false
p.name = &quot;John&quot;  # =&gt; &quot;John&quot;
p.save           # =&gt; true
@@@
Again, despite the `true` returned by `save`, the database is empty in the end.

This problem was discussed by me and others here: http://www.ruby-forum.com/topic/1386349

I saw other tickets about unexpected behavior of `save`, but didn't find an exact match to this problem.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;These two examples illustrate the unexpected (to me) behavior of
&lt;code&gt;save&lt;/code&gt; method in &lt;code&gt;ActiveRecord::Persistence&lt;/code&gt;
for a sample application created with&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ rails new test_app
$ cd test_app
$ rails generate model Person name:string
$ rake db:migrate&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;First example&lt;/strong&gt;. In console:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;console&quot;&gt;p = Person.create(:name=&amp;gt;'Bill')
p.destroy
p.name  # =&amp;gt; &quot;Bill&quot;
p.save  # =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Despite the &lt;code&gt;true&lt;/code&gt; returned by &lt;code&gt;save&lt;/code&gt;, the
database is empty in the end.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second example&lt;/strong&gt;. In console:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;console&quot;&gt;p = Person.create(:name=&amp;gt;'Bill')
Person.find(p.id).destroy
p.persisted?     # =&amp;gt; true
p.destroyed?     # =&amp;gt; false
p.name = &quot;John&quot;  # =&amp;gt; &quot;John&quot;
p.save           # =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Again, despite the &lt;code&gt;true&lt;/code&gt; returned by
&lt;code&gt;save&lt;/code&gt;, the database is empty in the end.&lt;/p&gt;
&lt;p&gt;This problem was discussed by me and others here: &lt;a href=
&quot;http://www.ruby-forum.com/topic/1386349&quot;&gt;http://www.ruby-forum.com/topic/1386349&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I saw other tickets about unexpected behavior of
&lt;code&gt;save&lt;/code&gt;, but didn't find an exact match to this
problem.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>These two examples illustrate the unexpected (to me) behavior of `save` method in `ActiveRecord::Persistence` for a sample application created with

@@@ shell
$ rails new test_app
$ cd test_app
$ rails generate model Person name:string
$ rake db:migrate
@@@

**First example**. In console:
@@@ console
p = Person.create(:name=&gt;'Bill')
p.destroy
p.name  # =&gt; &quot;Bill&quot;
p.save  # =&gt; true
@@@
Despite the `true` returned by `save`, the database is empty in the end.

**Second example**. In console:
@@@ console
p = Person.create(:name=&gt;'Bill')
Person.find(p.id).destroy
p.persisted?     # =&gt; true
p.destroyed?     # =&gt; false
p.name = &quot;John&quot;  # =&gt; &quot;John&quot;
p.save           # =&gt; true
@@@
Again, despite the `true` returned by `save`, the database is empty in the end.

This problem was discussed by me and others here: http://www.ruby-forum.com/topic/1386349

I saw other tickets about unexpected behavior of `save`, but didn't find an exact match to this problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;These two examples illustrate the unexpected (to me) behavior of
&lt;code&gt;save&lt;/code&gt; method in &lt;code&gt;ActiveRecord::Persistence&lt;/code&gt;
for a sample application created with&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ rails new test_app
$ cd test_app
$ rails generate model Person name:string
$ rake db:migrate&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;First example&lt;/strong&gt;. In console:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;console&quot;&gt;p = Person.create(:name=&amp;gt;'Bill')
p.destroy
p.name  # =&amp;gt; &quot;Bill&quot;
p.save  # =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Despite the &lt;code&gt;true&lt;/code&gt; returned by &lt;code&gt;save&lt;/code&gt;, the
database is empty in the end.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second example&lt;/strong&gt;. In console:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;console&quot;&gt;p = Person.create(:name=&amp;gt;'Bill')
Person.find(p.id).destroy
p.persisted?     # =&amp;gt; true
p.destroyed?     # =&amp;gt; false
p.name = &quot;John&quot;  # =&amp;gt; &quot;John&quot;
p.save           # =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Again, despite the &lt;code&gt;true&lt;/code&gt; returned by
&lt;code&gt;save&lt;/code&gt;, the database is empty in the end.&lt;/p&gt;
&lt;p&gt;This problem was discussed by me and others here: &lt;a href=
&quot;http://www.ruby-forum.com/topic/1386349&quot;&gt;http://www.ruby-forum.com/topic/1386349&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I saw other tickets about unexpected behavior of
&lt;code&gt;save&lt;/code&gt;, but didn't find an exact match to this
problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-03T12:35:40+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-03T12:35:45+01:00</updated-at>
      <user-id type="integer">144024</user-id>
      <version type="integer">1</version>
      <user-name>Alexey Muranov</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am new to Rails, i am only starting my first Rails application, so please feel free to express your opinions about this problem, or how it should be dealt with. I know that i am supposed to work on it myself if i want it to be fixed, but i am not ready for that, i am just interested in knowing if others consider this a bug too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am new to Rails, i am only starting my first Rails
application, so please feel free to express your opinions about
this problem, or how it should be dealt with. I know that i am
supposed to work on it myself if i want it to be fixed, but i am
not ready for that, i am just interested in knowing if others
consider this a bug too.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-03T12:43:35+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-03T12:43:37+01:00</updated-at>
      <user-id type="integer">144024</user-id>
      <version type="integer">2</version>
      <user-name>Alexey Muranov</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I want however to state what behavior would look to me natural and &quot;least surprising&quot;, or how i would have changed this part of `ActiveRecord::Persistence` if there were no need to keep compatibility with already existing applications:

1. implement `insert` and `update` methods to simply execute SQL and return `true` or `false` accordingly,
2. switch `@persisted` to `false` when the record is destroyed or deleted or when `id=()` method is called,
3. remove `destroyed?` method and @destroyed instance variable,
4. implement `save` so that it would *only* return `true` if the model/record has been **saved**.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I want however to state what behavior would look to me natural
and &quot;least surprising&quot;, or how i would have changed this part of
&lt;code&gt;ActiveRecord::Persistence&lt;/code&gt; if there were no need to
keep compatibility with already existing applications:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;implement &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; methods
to simply execute SQL and return &lt;code&gt;true&lt;/code&gt; or
&lt;code&gt;false&lt;/code&gt; accordingly,&lt;br&gt;&lt;/li&gt;
&lt;li&gt;switch &lt;code&gt;@persisted&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; when the
record is destroyed or deleted or when &lt;code&gt;id=()&lt;/code&gt; method is
called,&lt;br&gt;&lt;/li&gt;
&lt;li&gt;remove &lt;code&gt;destroyed?&lt;/code&gt; method and @destroyed instance
variable,&lt;br&gt;&lt;/li&gt;
&lt;li&gt;implement &lt;code&gt;save&lt;/code&gt; so that it would &lt;em&gt;only&lt;/em&gt;
return &lt;code&gt;true&lt;/code&gt; if the model/record has been
&lt;strong&gt;saved&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-03T12:56:29+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-03T12:56:33+01:00</updated-at>
      <user-id type="integer">144024</user-id>
      <version type="integer">3</version>
      <user-name>Alexey Muranov</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In fact, i think that if in item (3) above `destroyed?` is not removed but only deprecated, than the suggested changes should not break most of applications...</body>
      <body-html>&lt;div&gt;&lt;p&gt;In fact, i think that if in item (3) above
&lt;code&gt;destroyed?&lt;/code&gt; is not removed but only deprecated, than
the suggested changes should not break most of applications...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-03T15:17:04+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-03T15:17:05+01:00</updated-at>
      <user-id type="integer">144024</user-id>
      <version type="integer">4</version>
      <user-name>Alexey Muranov</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Following code is causing problem

@@@ ruby
p = Person.create(:name=&gt;'Bill')
Person.find(p.id).destroy
p.persisted?     # =&gt; true
p.destroyed?     # =&gt; false
p.name = &quot;John&quot;  # =&gt; &quot;John&quot;
p.save           # =&gt; true
@@@


However if you try following code then you will get &quot;TypeError: can't modify frozen hash&quot;.

@@@ ruby
p = Person.create(:name=&gt;'Bill')
p2 = Person.find(p.id)
p2.destroy
p2.persisted?     
p2.destroyed?     
p2.name = &quot;John&quot;  
p2.save           
@@@


In the first example author is manipulating record 'P' which is still not frozen.

I guess a good fix for this problem would be to make sure that p2 is same as p. I turned on the identity mapping and still p2.object_id != p.object_id .

I did not follow very closely how identity mapping is implemented. I guess it is time to see how it is done. I'm sure there is a reason why

@@@ ruby
p1 = User.create
p2 = User.find(p1.id)
p3 = User.last

puts p1.object_id == p2.object_id #=&gt; false
puts p1.object_id == p3.object_id #=&gt; false
puts p2.object_id == p3.object_id #=&gt; false
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Following code is causing problem&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;p = Person.create(:name=&amp;gt;'Bill')
Person.find(p.id).destroy
p.persisted?     # =&amp;gt; true
p.destroyed?     # =&amp;gt; false
p.name = &quot;John&quot;  # =&amp;gt; &quot;John&quot;
p.save           # =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However if you try following code then you will get &quot;TypeError:
can't modify frozen hash&quot;.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;p = Person.create(:name=&amp;gt;'Bill')
p2 = Person.find(p.id)
p2.destroy
p2.persisted?     
p2.destroyed?     
p2.name = &quot;John&quot;  
p2.save&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the first example author is manipulating record 'P' which is
still not frozen.&lt;/p&gt;
&lt;p&gt;I guess a good fix for this problem would be to make sure that
p2 is same as p. I turned on the identity mapping and still
p2.object_id != p.object_id .&lt;/p&gt;
&lt;p&gt;I did not follow very closely how identity mapping is
implemented. I guess it is time to see how it is done. I'm sure
there is a reason why&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;p1 = User.create
p2 = User.find(p1.id)
p3 = User.last

puts p1.object_id == p2.object_id #=&amp;gt; false
puts p1.object_id == p3.object_id #=&amp;gt; false
puts p2.object_id == p3.object_id #=&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-04T04:33:41+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-04T04:33:50+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">5</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It seems miloops has a fix for Identity mapping. https://github.com/rails/rails/pull/251/files</body>
      <body-html>&lt;div&gt;&lt;p&gt;It seems miloops has a fix for Identity mapping. &lt;a href=
&quot;https://github.com/rails/rails/pull/251/files&quot;&gt;https://github.com/rails/rails/pull/251/files&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-04T05:04:36+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-04T05:04:46+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The main issue here that i consider a bug is that `save` returns `true` despite not saving.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The main issue here that i consider a bug is that
&lt;code&gt;save&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; despite not saving.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-04T08:37:20+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-04T08:37:27+01:00</updated-at>
      <user-id type="integer">144024</user-id>
      <version type="integer">7</version>
      <user-name>Alexey Muranov</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Fixed in https://github.com/rails/rails/commit/b35617235d43bdb32016a623044e7f4005879969 .

Make sure that in console first you do 

@@@ ruby
ActiveRecord::IdentityMap.enabled = true
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Fixed in &lt;a href=
&quot;https://github.com/rails/rails/commit/b35617235d43bdb32016a623044e7f4005879969&quot;&gt;
https://github.com/rails/rails/commit/b35617235d43bdb32016a623044e7...&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Make sure that in console first you do&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;ActiveRecord::IdentityMap.enabled = true&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-04T13:28:43+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-04T13:28:53+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">8</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This does not resolve the issue that `save` returns `true` without saving in the above examples, or if the record has been deleted in the background by another application.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This does not resolve the issue that &lt;code&gt;save&lt;/code&gt; returns
&lt;code&gt;true&lt;/code&gt; without saving in the above examples, or if the
record has been deleted in the background by another
application.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-04T13:36:14+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-04T13:36:22+01:00</updated-at>
      <user-id type="integer">144024</user-id>
      <version type="integer">9</version>
      <user-name>Alexey Muranov</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Before hitting save you are doing 

@@@ ruby
p.name = &quot;John&quot;
@@@

Now that line is throwing exception since the object is frozen. So you don't even get to save method.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Before hitting save you are doing&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;p.name = &quot;John&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now that line is throwing exception since the object is frozen.
So you don't even get to save method.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-04T18:06:17+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-04T18:06:25+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">10</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, i see your point. However, if the record is deleted in the background by another process, `save` is going to return `true` without saving anything. Is this a desired behavior?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, i see your point. However, if the record is deleted in the
background by another process, &lt;code&gt;save&lt;/code&gt; is going to return
&lt;code&gt;true&lt;/code&gt; without saving anything. Is this a desired
behavior?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-04T18:27:50+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-04T18:28:00+01:00</updated-at>
      <user-id type="integer">144024</user-id>
      <version type="integer">11</version>
      <user-name>Alexey Muranov</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Alexey. Now I see your point. 

@@@ ruby
class User &lt; ActiveRecord::Base
  def self.lab
    u1 = User.create
    User.delete_all
    u1.name = 'foo'
    puts u1.save #=&gt; true

    u2 = User.create
    User.delete_all
    u2.name='foo1'
    puts u2.save! #=&gt; true
  end
end
@@@

I am marking this ticket as open so that more people can look at it. I will look into this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Alexey. Now I see your point.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  def self.lab
    u1 = User.create
    User.delete_all
    u1.name = 'foo'
    puts u1.save #=&amp;gt; true

    u2 = User.create
    User.delete_all
    u2.name='foo1'
    puts u2.save! #=&amp;gt; true
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I am marking this ticket as open so that more people can look at
it. I will look into this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-04T20:14:57+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- 
:state: resolved
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-04T20:16:11+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">12</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-19T09:22:55+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord rails3&quot;</tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-19T09:23:00+01:00</updated-at>
      <user-id type="integer">144024</user-id>
      <version type="integer">13</version>
      <user-name>Alexey Muranov</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There really seems to be two issues here. The first would be how active record instance behaves on a save when it knows the record has been deleted. That I believe would be the easiest to solve. The second is how or should an active record instance attempt to determine if its record has been deleted without its knowledge.

The complexity on the second issue revolves around when and if the database should be checked to determine if a record still exists. If a response from the database during an update can be used to determine that a record is no longer there, the instance can then execute the code that would solve the first issue. If not, then things get ugly.

Additionally there is the issue of what should happen when no attributes have been changed, a second matching instance has deleted the record, and then the first has been saved. Rails will desire to skip an actual call to the database as this would normally be an performance improvement by not having the db update the record with identical values. Having rails make an extra call in this situation just to see if the record still exists would work against that optimization.

For now I would suggest looking to solve the first problem as the issues with the second are non trivial.</body>
      <body-html>&lt;div&gt;&lt;p&gt;There really seems to be two issues here. The first would be how
active record instance behaves on a save when it knows the record
has been deleted. That I believe would be the easiest to solve. The
second is how or should an active record instance attempt to
determine if its record has been deleted without its knowledge.&lt;/p&gt;
&lt;p&gt;The complexity on the second issue revolves around when and if
the database should be checked to determine if a record still
exists. If a response from the database during an update can be
used to determine that a record is no longer there, the instance
can then execute the code that would solve the first issue. If not,
then things get ugly.&lt;/p&gt;
&lt;p&gt;Additionally there is the issue of what should happen when no
attributes have been changed, a second matching instance has
deleted the record, and then the first has been saved. Rails will
desire to skip an actual call to the database as this would
normally be an performance improvement by not having the db update
the record with identical values. Having rails make an extra call
in this situation just to see if the record still exists would work
against that optimization.&lt;/p&gt;
&lt;p&gt;For now I would suggest looking to solve the first problem as
the issues with the second are non trivial.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-20T18:20:51+01:00</created-at>
      <creator-id type="integer">144024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6666</number>
      <permalink>save-activerecordpersistence-can-return-true-even-when-the-model-is-not-saved-and-seems-to-break-the-principle-of-least-surprise</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord rails3&quot;</tag>
      <title>save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of &quot;least surprise&quot;</title>
      <updated-at type="datetime">2011-04-20T18:20:58+01:00</updated-at>
      <user-id type="integer">146417</user-id>
      <version type="integer">14</version>
      <user-name>Wicked Tribe</user-name>
      <creator-name>Alexey Muranov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6666</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
