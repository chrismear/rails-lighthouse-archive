<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-02-16T23:15:47+00:00</created-at>
  <creator-id type="integer">66507</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3975</number>
  <permalink>activerecord-attribute-accessor-string-and-element-reference</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>accessor activerecord &quot;element reference&quot; string</tag>
  <title>ActiveRecord attribute accessor String, and Element Reference []</title>
  <updated-at type="datetime">2011-02-02T18:38:45+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Daniel</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3975</url>
  <priority-name nil="true"></priority-name>
  <original-body>Greetings,

There appears to be an easy misunderstanding with the accessor method and the String.

class User &lt;&lt; ActiveRecord::Base
end

Having table columns email:string, flags:string

if I set 

user = Users(:myuser) # fixture
user.email=&quot;ponies@rubyonrails.com&quot;
user.flags[7]=&quot;1&quot;

This behaves quite differently.

Changing user.email causes a change in user.@changed_attributes, and user.@attributes.
But the user.flags[7] causes in user.@attributes, but not @changed_attributes.

I suspect this is caused by an easy mis-understanding that user.flags is an accessor.

So, the code could be inferred to look like this
(user.flags)[7]=&quot;1&quot; Which directly changes the @attributes, but does not invoke the subroutine to record it in @changed_attributes.

I suspect the best way to fix this to create a RoRString class with [] overloaded as follows

class RoR_String &lt; String
  def []=(var, replace)
    super(var, replace)
    # call back to record new value in @change_attributes
  end
end

This seams considerably larger than a patch, since this would affect all RoR ActiveRecord strings.  

Regards,

Daniel Lo</original-body>
  <latest-body>Greetings,

There appears to be an easy misunderstanding with the accessor method and the String.

class User &lt;&lt; ActiveRecord::Base
end

Having table columns email:string, flags:string

if I set 

user = Users(:myuser) # fixture
user.email=&quot;ponies@rubyonrails.com&quot;
user.flags[7]=&quot;1&quot;

This behaves quite differently.

Changing user.email causes a change in user.@changed_attributes, and user.@attributes.
But the user.flags[7] causes in user.@attributes, but not @changed_attributes.

I suspect this is caused by an easy mis-understanding that user.flags is an accessor.

So, the code could be inferred to look like this
(user.flags)[7]=&quot;1&quot; Which directly changes the @attributes, but does not invoke the subroutine to record it in @changed_attributes.

I suspect the best way to fix this to create a RoRString class with [] overloaded as follows

class RoR_String &lt; String
  def []=(var, replace)
    super(var, replace)
    # call back to record new value in @change_attributes
  end
end

This seams considerably larger than a patch, since this would affect all RoR ActiveRecord strings.  

Regards,

Daniel Lo</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Greetings,&lt;/p&gt;
&lt;p&gt;There appears to be an easy misunderstanding with the accessor
method and the String.&lt;/p&gt;
&lt;p&gt;class User &amp;lt;&amp;lt; ActiveRecord::Base&lt;br&gt;
end&lt;/p&gt;
&lt;p&gt;Having table columns email:string, flags:string&lt;/p&gt;
&lt;p&gt;if I set&lt;/p&gt;
&lt;p&gt;user = Users(:myuser) # fixture&lt;br&gt;
user.email=&quot;&lt;a href=
&quot;mailto:ponies@rubyonrails.com&quot;&gt;ponies@rubyonrails.com&lt;/a&gt;&quot;&lt;br&gt;
user.flags[7]=&quot;1&quot;&lt;/p&gt;
&lt;p&gt;This behaves quite differently.&lt;/p&gt;
&lt;p&gt;Changing user.email causes a change in user.@changed_attributes,
and user.@attributes.&lt;br&gt;
But the user.flags[7] causes in user.@attributes, but not
@changed_attributes.&lt;/p&gt;
&lt;p&gt;I suspect this is caused by an easy mis-understanding that
user.flags is an accessor.&lt;/p&gt;
&lt;p&gt;So, the code could be inferred to look like this&lt;br&gt;
(user.flags)[7]=&quot;1&quot; Which directly changes the @attributes, but
does not invoke the subroutine to record it in
@changed_attributes.&lt;/p&gt;
&lt;p&gt;I suspect the best way to fix this to create a RoRString class
with [] overloaded as follows&lt;/p&gt;
&lt;p&gt;class RoR_String &amp;lt; String&lt;br&gt;
def []=(var, replace)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;super(var, replace)
# call back to record new value in @change_attributes&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;This seams considerably larger than a patch, since this would
affect all RoR ActiveRecord strings.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Regards,&lt;/p&gt;
&lt;p&gt;Daniel Lo&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Greetings,

There appears to be an easy misunderstanding with the accessor method and the String.

class User &lt;&lt; ActiveRecord::Base
end

Having table columns email:string, flags:string

if I set 

user = Users(:myuser) # fixture
user.email=&quot;ponies@rubyonrails.com&quot;
user.flags[7]=&quot;1&quot;

This behaves quite differently.

Changing user.email causes a change in user.@changed_attributes, and user.@attributes.
But the user.flags[7] causes in user.@attributes, but not @changed_attributes.

I suspect this is caused by an easy mis-understanding that user.flags is an accessor.

So, the code could be inferred to look like this
(user.flags)[7]=&quot;1&quot; Which directly changes the @attributes, but does not invoke the subroutine to record it in @changed_attributes.

I suspect the best way to fix this to create a RoRString class with [] overloaded as follows

class RoR_String &lt; String
  def []=(var, replace)
    super(var, replace)
    # call back to record new value in @change_attributes
  end
end

This seams considerably larger than a patch, since this would affect all RoR ActiveRecord strings.  

Regards,

Daniel Lo</body>
      <body-html>&lt;div&gt;&lt;p&gt;Greetings,&lt;/p&gt;
&lt;p&gt;There appears to be an easy misunderstanding with the accessor
method and the String.&lt;/p&gt;
&lt;p&gt;class User &amp;lt;&amp;lt; ActiveRecord::Base&lt;br&gt;
end&lt;/p&gt;
&lt;p&gt;Having table columns email:string, flags:string&lt;/p&gt;
&lt;p&gt;if I set&lt;/p&gt;
&lt;p&gt;user = Users(:myuser) # fixture&lt;br&gt;
user.email=&quot;&lt;a href=
&quot;mailto:ponies@rubyonrails.com&quot;&gt;ponies@rubyonrails.com&lt;/a&gt;&quot;&lt;br&gt;
user.flags[7]=&quot;1&quot;&lt;/p&gt;
&lt;p&gt;This behaves quite differently.&lt;/p&gt;
&lt;p&gt;Changing user.email causes a change in user.@changed_attributes,
and user.@attributes.&lt;br&gt;
But the user.flags[7] causes in user.@attributes, but not
@changed_attributes.&lt;/p&gt;
&lt;p&gt;I suspect this is caused by an easy mis-understanding that
user.flags is an accessor.&lt;/p&gt;
&lt;p&gt;So, the code could be inferred to look like this&lt;br&gt;
(user.flags)[7]=&quot;1&quot; Which directly changes the @attributes, but
does not invoke the subroutine to record it in
@changed_attributes.&lt;/p&gt;
&lt;p&gt;I suspect the best way to fix this to create a RoRString class
with [] overloaded as follows&lt;/p&gt;
&lt;p&gt;class RoR_String &amp;lt; String&lt;br&gt;
def []=(var, replace)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;super(var, replace)
# call back to record new value in @change_attributes&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;This seams considerably larger than a patch, since this would
affect all RoR ActiveRecord strings.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Regards,&lt;/p&gt;
&lt;p&gt;Daniel Lo&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-16T23:15:47+00:00</created-at>
      <creator-id type="integer">66507</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3975</number>
      <permalink>activerecord-attribute-accessor-string-and-element-reference</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>accessor activerecord &quot;element reference&quot; string</tag>
      <title>ActiveRecord attribute accessor String, and Element Reference []</title>
      <updated-at type="datetime">2010-02-16T23:15:49+00:00</updated-at>
      <user-id type="integer">66507</user-id>
      <version type="integer">1</version>
      <user-name>Daniel</user-name>
      <creator-name>Daniel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:54:59+00:00</created-at>
      <creator-id type="integer">66507</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3975</number>
      <permalink>activerecord-attribute-accessor-string-and-element-reference</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>accessor activerecord &quot;element reference&quot; string</tag>
      <title>ActiveRecord attribute accessor String, and Element Reference []</title>
      <updated-at type="datetime">2011-02-02T18:38:40+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Daniel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:55:00+00:00</created-at>
      <creator-id type="integer">66507</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3975</number>
      <permalink>activerecord-attribute-accessor-string-and-element-reference</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>accessor activerecord &quot;element reference&quot; string</tag>
      <title>ActiveRecord attribute accessor String, and Element Reference []</title>
      <updated-at type="datetime">2011-02-02T18:38:45+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Daniel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3975</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
