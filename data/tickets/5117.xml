<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-15T10:27:34+01:00</created-at>
  <creator-id type="integer">52024</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5117</number>
  <permalink>validates_uniqueness_of-fails-when-primary-key-value-changed</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>&quot;rails3 validates_uniqueness_of natural keys&quot; &quot;rails3 validations&quot;</tag>
  <title>validates_uniqueness_of fails when primary key value changed</title>
  <updated-at type="datetime">2011-02-02T17:12:50+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">4</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Robert Pankowecki</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5117</url>
  <priority-name nil="true"></priority-name>
  <original-body>@@@
class Role
  set_primary_key :short_name
  validates_uniqueness_of :name
end

test &quot;validates_uniqueness_of&quot; do
  r = Role.new(:name =&gt; &quot;name&quot; )
  r.short_name = &quot;first&quot;
  r.save!

  r.short_name = &quot;second&quot;
  assert r.valid?
  assert_equal 0, r.errors[:name].size
end
@@@

The validation fails when it should not.
The query that is generated by uniqueness validation is:
SELECT &quot;roles&quot;.&quot;short_name&quot; FROM &quot;roles&quot; WHERE (&quot;roles&quot;.&quot;name&quot; = 'name') AND (&quot;roles&quot;.short_name &lt;&gt; 'second') LIMIT 1
The query uses the changed, unsaved short_name (primary_key) value which is &quot;second&quot; instead of the previous one (&quot;first&quot;) when checking on db for other records that could have the same :name.

This is not nice when someone wants to use natural keys as primary keys.</original-body>
  <latest-body>@@@
class Role
  set_primary_key :short_name
  validates_uniqueness_of :name
end

test &quot;validates_uniqueness_of&quot; do
  r = Role.new(:name =&gt; &quot;name&quot; )
  r.short_name = &quot;first&quot;
  r.save!

  r.short_name = &quot;second&quot;
  assert r.valid?
  assert_equal 0, r.errors[:name].size
end
@@@

The validation fails when it should not.
The query that is generated by uniqueness validation is:
SELECT &quot;roles&quot;.&quot;short_name&quot; FROM &quot;roles&quot; WHERE (&quot;roles&quot;.&quot;name&quot; = 'name') AND (&quot;roles&quot;.short_name &lt;&gt; 'second') LIMIT 1
The query uses the changed, unsaved short_name (primary_key) value which is &quot;second&quot; instead of the previous one (&quot;first&quot;) when checking on db for other records that could have the same :name.

This is not nice when someone wants to use natural keys as primary keys.</latest-body>
  <original-body-html>&lt;div&gt;&lt;pre&gt;
&lt;code&gt;class Role
  set_primary_key :short_name
  validates_uniqueness_of :name
end

test &quot;validates_uniqueness_of&quot; do
  r = Role.new(:name =&amp;gt; &quot;name&quot; )
  r.short_name = &quot;first&quot;
  r.save!

  r.short_name = &quot;second&quot;
  assert r.valid?
  assert_equal 0, r.errors[:name].size
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The validation fails when it should not.&lt;br&gt;
The query that is generated by uniqueness validation is:&lt;br&gt;
SELECT &quot;roles&quot;.&quot;short_name&quot; FROM &quot;roles&quot; WHERE (&quot;roles&quot;.&quot;name&quot; =
'name') AND (&quot;roles&quot;.short_name &amp;lt;&amp;gt; 'second') LIMIT 1&lt;br&gt;
The query uses the changed, unsaved short_name (primary_key) value
which is &quot;second&quot; instead of the previous one (&quot;first&quot;) when
checking on db for other records that could have the same
:name.&lt;/p&gt;
&lt;p&gt;This is not nice when someone wants to use natural keys as
primary keys.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@@@
class Role
  set_primary_key :short_name
  validates_uniqueness_of :name
end

test &quot;validates_uniqueness_of&quot; do
  r = Role.new(:name =&gt; &quot;name&quot; )
  r.short_name = &quot;first&quot;
  r.save!

  r.short_name = &quot;second&quot;
  assert r.valid?
  assert_equal 0, r.errors[:name].size
end
@@@

The validation fails when it should not.
The query that is generated by uniqueness validation is:
SELECT &quot;roles&quot;.&quot;short_name&quot; FROM &quot;roles&quot; WHERE (&quot;roles&quot;.&quot;name&quot; = 'name') AND (&quot;roles&quot;.short_name &lt;&gt; 'second') LIMIT 1
The query uses the changed, unsaved short_name (primary_key) value which is &quot;second&quot; instead of the previous one (&quot;first&quot;) when checking on db for other records that could have the same :name.

This is not nice when someone wants to use natural keys as primary keys.</body>
      <body-html>&lt;div&gt;&lt;pre&gt;
&lt;code&gt;class Role
  set_primary_key :short_name
  validates_uniqueness_of :name
end

test &quot;validates_uniqueness_of&quot; do
  r = Role.new(:name =&amp;gt; &quot;name&quot; )
  r.short_name = &quot;first&quot;
  r.save!

  r.short_name = &quot;second&quot;
  assert r.valid?
  assert_equal 0, r.errors[:name].size
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The validation fails when it should not.&lt;br&gt;
The query that is generated by uniqueness validation is:&lt;br&gt;
SELECT &quot;roles&quot;.&quot;short_name&quot; FROM &quot;roles&quot; WHERE (&quot;roles&quot;.&quot;name&quot; =
'name') AND (&quot;roles&quot;.short_name &amp;lt;&amp;gt; 'second') LIMIT 1&lt;br&gt;
The query uses the changed, unsaved short_name (primary_key) value
which is &quot;second&quot; instead of the previous one (&quot;first&quot;) when
checking on db for other records that could have the same
:name.&lt;/p&gt;
&lt;p&gt;This is not nice when someone wants to use natural keys as
primary keys.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-15T10:27:34+01:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5117</number>
      <permalink>validates_uniqueness_of-fails-when-primary-key-value-changed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails3 validates_uniqueness_of natural keys&quot; &quot;rails3 validations&quot;</tag>
      <title>validates_uniqueness_of fails when primary key value changed</title>
      <updated-at type="datetime">2010-07-15T10:27:39+01:00</updated-at>
      <user-id type="integer">52024</user-id>
      <version type="integer">1</version>
      <user-name>Robert Pankowecki</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5117</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>even when primary key is natural if you set change the id rails is not resetting
see below example.

@@@ ruby
class Car &lt; ActiveRecord::Base
  validates_uniqueness_of :name
end


ruby-1.8.7-p174 &gt; c = Car.create(:name =&gt; &quot;Nissan&quot;)
  Car Load (0.4ms)  SELECT &quot;cars&quot;.&quot;id&quot; FROM &quot;cars&quot; WHERE (&quot;cars&quot;.&quot;name&quot; = 'Nissan') LIMIT 1
  SQL (0.3ms)  INSERT INTO &quot;cars&quot; (&quot;name&quot;) VALUES ('Nissan')
 =&gt; #&lt;Car id: 2, name: &quot;Nissan&quot;&gt; 
ruby-1.8.7-p174 &gt; c.id = 3
 =&gt; 3 
ruby-1.8.7-p174 &gt; c.valid?
  Car Load (0.5ms)  SELECT &quot;cars&quot;.&quot;id&quot; FROM &quot;cars&quot; WHERE (&quot;cars&quot;.&quot;name&quot; = 'Nissan') AND (&quot;cars&quot;.id &lt;&gt; 3) LIMIT 1
 =&gt; false 


@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;even when primary key is natural if you set change the id rails
is not resetting&lt;br&gt;
see below example.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Car &amp;lt; ActiveRecord::Base
  validates_uniqueness_of :name
end


ruby-1.8.7-p174 &amp;gt; c = Car.create(:name =&amp;gt; &quot;Nissan&quot;)
  Car Load (0.4ms)  SELECT &quot;cars&quot;.&quot;id&quot; FROM &quot;cars&quot; WHERE (&quot;cars&quot;.&quot;name&quot; = 'Nissan') LIMIT 1
  SQL (0.3ms)  INSERT INTO &quot;cars&quot; (&quot;name&quot;) VALUES ('Nissan')
 =&amp;gt; #&amp;lt;Car id: 2, name: &quot;Nissan&quot;&amp;gt; 
ruby-1.8.7-p174 &amp;gt; c.id = 3
 =&amp;gt; 3 
ruby-1.8.7-p174 &amp;gt; c.valid?
  Car Load (0.5ms)  SELECT &quot;cars&quot;.&quot;id&quot; FROM &quot;cars&quot; WHERE (&quot;cars&quot;.&quot;name&quot; = 'Nissan') AND (&quot;cars&quot;.id &amp;lt;&amp;gt; 3) LIMIT 1
 =&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-16T21:49:43+01:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5117</number>
      <permalink>validates_uniqueness_of-fails-when-primary-key-value-changed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails3 validates_uniqueness_of natural keys&quot; &quot;rails3 validations&quot;</tag>
      <title>validates_uniqueness_of fails when primary key value changed</title>
      <updated-at type="datetime">2010-07-16T21:49:44+01:00</updated-at>
      <user-id type="integer">54456</user-id>
      <version type="integer">2</version>
      <user-name>Subba</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5117</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:35:56+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5117</number>
      <permalink>validates_uniqueness_of-fails-when-primary-key-value-changed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;rails3 validates_uniqueness_of natural keys&quot; &quot;rails3 validations&quot;</tag>
      <title>validates_uniqueness_of fails when primary key value changed</title>
      <updated-at type="datetime">2011-02-02T17:12:15+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5117</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:35:57+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5117</number>
      <permalink>validates_uniqueness_of-fails-when-primary-key-value-changed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;rails3 validates_uniqueness_of natural keys&quot; &quot;rails3 validations&quot;</tag>
      <title>validates_uniqueness_of fails when primary key value changed</title>
      <updated-at type="datetime">2011-02-02T17:12:50+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5117</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
