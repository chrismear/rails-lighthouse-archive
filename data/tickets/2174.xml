<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-08T23:34:50+00:00</created-at>
  <creator-id type="integer">24689</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2174</number>
  <permalink>no-way-to-flush-session-data-to-session-store-immidiately-enables-race-conditions-to-occur</permalink>
  <priority type="integer">1379</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>condition flush locking race session</tag>
  <title>No way to flush session data to session store immidiately enables race conditions to occur</title>
  <updated-at type="datetime">2011-02-02T17:04:32+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Pawel</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2174</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Following code demonstrates race condition in session handling:

def action_that_should_be_called_only_once_per_session
  my_custom_lock_for_current_session do
    # Critical section
    @account.total_cash += session[:income]
    session.delete :income
  end
  # Race condition window from now to the moment when the session is stored.
  # User can refresh the page and increase @account.total_cash.
end

There should be a way to forcefully save session data to session store (with the obvious exception of cookie store). This way, calling (let's say) store_session() from within critical section will prevent above vulnerability.

In PHP there is session_write_close() (http://pl.php.net/manual/en/function.session-write-close.php) which does similiar thing as described.</original-body>
  <latest-body>Following code demonstrates race condition in session handling:

def action_that_should_be_called_only_once_per_session
  my_custom_lock_for_current_session do
    # Critical section
    @account.total_cash += session[:income]
    session.delete :income
  end
  # Race condition window from now to the moment when the session is stored.
  # User can refresh the page and increase @account.total_cash.
end

There should be a way to forcefully save session data to session store (with the obvious exception of cookie store). This way, calling (let's say) store_session() from within critical section will prevent above vulnerability.

In PHP there is session_write_close() (http://pl.php.net/manual/en/function.session-write-close.php) which does similiar thing as described.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Following code demonstrates race condition in session
handling:&lt;/p&gt;
&lt;p&gt;def action_that_should_be_called_only_once_per_session
my_custom_lock_for_current_session do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Critical section
@account.total_cash += session[:income]
session.delete :income
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end # Race condition window from now to the moment when the
session is stored. # User can refresh the page and increase
@account.total_cash. end&lt;/p&gt;
&lt;p&gt;There should be a way to forcefully save session data to session
store (with the obvious exception of cookie store). This way,
calling (let's say) store_session() from within critical section
will prevent above vulnerability.&lt;/p&gt;
&lt;p&gt;In PHP there is session_write_close() (&lt;a href=&quot;http://pl.php.net/manual/en/function.session-write-close.php)&quot;&gt;http://pl.php.net/manual/en/func...&lt;/a&gt;
which does similiar thing as described.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Following code demonstrates race condition in session handling:

@@@ ruby
def action_that_should_be_called_only_once_per_session
  my_custom_lock_for_current_session do
    # Critical section
    @account.total_cash += session[:income]
    session.delete :income
  end
  # Race condition window from now to the moment when the session is stored.
  # User can refresh the page and increase @account.total_cash.
end
@@@

There should be a way to forcefully save session data to session store (with the obvious exception of cookie store). This way, calling (let's say) store_session() from within critical section will prevent above vulnerability.

In PHP there is &quot;session_write_close()&quot;:http://php.net/manual/en/function.session-write-close.php which does similiar thing as described.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Following code demonstrates race condition in session
handling:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
def action_that_should_be_called_only_once_per_session
  my_custom_lock_for_current_session do
    # Critical section
    @account.total_cash += session[:income]
    session.delete :income
  end
  # Race condition window from now to the moment when the session is stored.
  # User can refresh the page and increase @account.total_cash.
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There should be a way to forcefully save session data to session
store (with the obvious exception of cookie store). This way,
calling (let's say) store_session() from within critical section
will prevent above vulnerability.&lt;/p&gt;
&lt;p&gt;In PHP there is &lt;a href=&quot;http://php.net/manual/en/function.session-write-close.php&quot;&gt;session_write_close()&lt;/a&gt;
which does similiar thing as described.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-08T23:34:50+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2174</number>
      <permalink>no-way-to-flush-session-data-to-session-store-immidiately-enables-race-conditions-to-occur</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>condition flush locking race session</tag>
      <title>No way to flush session data to session store immidiately enables race conditions to occur</title>
      <updated-at type="datetime">2009-03-18T16:22:34+00:00</updated-at>
      <user-id type="integer">24689</user-id>
      <version type="integer">1</version>
      <user-name>Pawel</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2174</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&quot;I wonder why this ticket is not marked with security tag. This is an
old problem with Rails and it should be fixed, but as now Rails handles
sessions thru Rack I don't know _where_ it belongs - to Rails or to
Rack?&quot;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&quot;I wonder why this ticket is not marked with security tag. This
is an old problem with Rails and it should be fixed, but as now
Rails handles sessions thru Rack I don't know &lt;em&gt;where&lt;/em&gt; it
belongs - to Rails or to Rack?&quot;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-15T20:11:43+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2174</number>
      <permalink>no-way-to-flush-session-data-to-session-store-immidiately-enables-race-conditions-to-occur</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>condition flush locking race session</tag>
      <title>No way to flush session data to session store immidiately enables race conditions to occur</title>
      <updated-at type="datetime">2009-03-15T20:11:44+00:00</updated-at>
      <user-id type="integer">50752</user-id>
      <version type="integer">2</version>
      <user-name>foospam (at o2)</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2174</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:41+01:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2174</number>
      <permalink>no-way-to-flush-session-data-to-session-store-immidiately-enables-race-conditions-to-occur</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>condition flush locking race session</tag>
      <title>No way to flush session data to session store immidiately enables race conditions to occur</title>
      <updated-at type="datetime">2010-05-04T18:48:41+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2174</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The Memcache and cookie stores exists in Rack, `ActiveRecord::SessionStore` still lives inside Rails. Rails still implements an `AbstractStore` class, though, that it uses for the Active Record store. I don't know if Rails magically makes the two session stores that lives in Rack inherit from that class, or something. Maybe it has to fixed both in Rails and Rack.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The Memcache and cookie stores exists in Rack,
&lt;code&gt;ActiveRecord::SessionStore&lt;/code&gt; still lives inside Rails.
Rails still implements an &lt;code&gt;AbstractStore&lt;/code&gt; class, though,
that it uses for the Active Record store. I don't know if Rails
magically makes the two session stores that lives in Rack inherit
from that class, or something. Maybe it has to fixed both in Rails
and Rack.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-01T18:39:44+01:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2174</number>
      <permalink>no-way-to-flush-session-data-to-session-store-immidiately-enables-race-conditions-to-occur</permalink>
      <priority type="integer">1379</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>condition flush locking race session</tag>
      <title>No way to flush session data to session store immidiately enables race conditions to occur</title>
      <updated-at type="datetime">2010-08-01T18:39:47+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">4</version>
      <user-name>David Trasbo</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2174</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:34:09+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2174</number>
      <permalink>no-way-to-flush-session-data-to-session-store-immidiately-enables-race-conditions-to-occur</permalink>
      <priority type="integer">1379</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>condition flush locking race session</tag>
      <title>No way to flush session data to session store immidiately enables race conditions to occur</title>
      <updated-at type="datetime">2011-02-02T17:04:25+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2174</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:34:10+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2174</number>
      <permalink>no-way-to-flush-session-data-to-session-store-immidiately-enables-race-conditions-to-occur</permalink>
      <priority type="integer">1379</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>condition flush locking race session</tag>
      <title>No way to flush session data to session store immidiately enables race conditions to occur</title>
      <updated-at type="datetime">2011-02-02T17:04:32+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2174</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
