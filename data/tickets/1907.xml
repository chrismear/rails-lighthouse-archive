<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-07T18:42:52+00:00</created-at>
  <creator-id type="integer">19153</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1907</number>
  <permalink>class-methods-which-call-named_scopes-lose-previous-scope-both-associations-and-other-scopes</permalink>
  <priority type="integer">1172</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord bug named_scope patch tested</tag>
  <title>Class methods which call named_scopes lose previous scope (both associations and other scopes)</title>
  <updated-at type="datetime">2009-03-09T13:37:36+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">7</version>
  <user-name>Pratik</user-name>
  <creator-name>porras</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1907</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>ActiveRecord models' class methods get added to collections (keeping scope):

@@@ruby
    class Post &lt; AR::B
  
      belongs_to :user
    
      def self.wadus
        find(:all, :conditions =&gt; { :wadus =&gt; &quot;wadus&quot; })
      end
    
    end
  
    user.posts.wadus
    # SELECT * FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;wadus&quot; = 'wadus') AND (&quot;posts&quot;.user_id = 1)
@@@

This works also for named_scopes:

@@@ruby
    class Post
      named_scope :starting_with_a, {:conditions =&gt; &quot;name LIKE 'a%'&quot;}
    end
  
    Post.starting_with_a.wadus
    # SELECT * FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;wadus&quot; = 'wadus') AND (name LIKE 'a%')
@@@

But this behaviour breaks if your class method calls one or more named scope:

@@@ruby
    class Post &lt; ActiveRecord::Base
  
      belongs_to :user
  
      named_scope :starting_with_a, {:conditions =&gt; &quot;name LIKE 'a%'&quot;}  
      named_scope :ending_with_a, {:conditions =&gt; &quot;name LIKE '%a'&quot;}
  
      def self.calls_named_scope
        ending_with_a
      end
  
    end
  
    Post.starting_with_a.calls_named_scope
    # SELECT * FROM &quot;posts&quot; WHERE (name LIKE '%a') # loses &quot;name LIKE 'a%'&quot; (from starting_with_a)
    user.posts.calls_named_scope
    # SELECT * FROM &quot;posts&quot; WHERE (name LIKE '%a') # loses &quot;user_id = 1&quot; (from association)
@@@

Attached patch includes tests showing this behaviour.</original-body>
  <latest-body>ActiveRecord models' class methods get added to collections (keeping scope):

@@@ruby
    class Post &lt; AR::B
  
      belongs_to :user
    
      def self.wadus
        find(:all, :conditions =&gt; { :wadus =&gt; &quot;wadus&quot; })
      end
    
    end
  
    user.posts.wadus
    # SELECT * FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;wadus&quot; = 'wadus') AND (&quot;posts&quot;.user_id = 1)
@@@

This works also for named_scopes:

@@@ruby
    class Post
      named_scope :starting_with_a, {:conditions =&gt; &quot;name LIKE 'a%'&quot;}
    end
  
    Post.starting_with_a.wadus
    # SELECT * FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;wadus&quot; = 'wadus') AND (name LIKE 'a%')
@@@

But this behaviour breaks if your class method calls one or more named scope:

@@@ruby
    class Post &lt; ActiveRecord::Base
  
      belongs_to :user
  
      named_scope :starting_with_a, {:conditions =&gt; &quot;name LIKE 'a%'&quot;}  
      named_scope :ending_with_a, {:conditions =&gt; &quot;name LIKE '%a'&quot;}
  
      def self.calls_named_scope
        ending_with_a
      end
  
    end
  
    Post.starting_with_a.calls_named_scope
    # SELECT * FROM &quot;posts&quot; WHERE (name LIKE '%a') # loses &quot;name LIKE 'a%'&quot; (from starting_with_a)
    user.posts.calls_named_scope
    # SELECT * FROM &quot;posts&quot; WHERE (name LIKE '%a') # loses &quot;user_id = 1&quot; (from association)
@@@

Attached patch includes tests showing this behaviour.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActiveRecord models' class methods get added to collections
(keeping scope):&lt;/p&gt;
&lt;p&gt;@@@ruby&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Post &amp;lt; AR::B

  belongs_to :user

  def self.wadus
    find(:all, :conditions =&amp;gt; { :wadus =&amp;gt; &quot;wadus&quot; })
  end

end

user.posts.wadus
# SELECT * FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;wadus&quot; = 'wadus') AND (&quot;posts&quot;.user_id = 1)
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;

This works also for named_scopes:

@@@ruby
    class Post
      named_scope :starting_with_a, {:conditions =&amp;gt; &amp;quot;name LIKE 'a%'&amp;quot;}
    end
  
    Post.starting_with_a.wadus
    # SELECT * FROM &amp;quot;posts&amp;quot; WHERE (&amp;quot;posts&amp;quot;.&amp;quot;wadus&amp;quot; = 'wadus') AND (name LIKE 'a%')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this behaviour breaks if your class method calls one or more
named scope:&lt;/p&gt;
&lt;p&gt;@@@ruby&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Post &amp;lt; ActiveRecord::Base

  belongs_to :user

  named_scope :starting_with_a, {:conditions =&amp;gt; &quot;name LIKE 'a%'&quot;}  
  named_scope :ending_with_a, {:conditions =&amp;gt; &quot;name LIKE '%a'&quot;}

  def self.calls_named_scope
    ending_with_a
  end

end

Post.starting_with_a.calls_named_scope
# SELECT * FROM &quot;posts&quot; WHERE (name LIKE '%a') # loses &quot;name LIKE 'a%'&quot; (from starting_with_a)
user.posts.calls_named_scope
# SELECT * FROM &quot;posts&quot; WHERE (name LIKE '%a') # loses &quot;user_id = 1&quot; (from association)
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;

Attached patch includes tests showing this behaviour.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveRecord models' class methods get added to collections (keeping scope):
@@@ ruby
    class Post &lt; AR::B
  
      belongs_to :user
    
      def self.wadus
        find(:all, :conditions =&gt; { :wadus =&gt; &quot;wadus&quot; })
      end
    
    end
  
    user.posts.wadus
    # SELECT * FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;wadus&quot; = 'wadus') AND (&quot;posts&quot;.user_id = 1)
@@@

This works also for named_scopes:
@@@ ruby
    class Post
      named_scope :starting_with_a, {:conditions =&gt; &quot;name LIKE 'a%'&quot;}
    end
  
    Post.starting_with_a.wadus
    # SELECT * FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;wadus&quot; = 'wadus') AND (name LIKE 'a%')
@@@

But this behaviour breaks if your class method calls one or more named scope:
@@@ ruby
    class Post &lt; ActiveRecord::Base
  
      belongs_to :user
  
      named_scope :starting_with_a, {:conditions =&gt; &quot;name LIKE 'a%'&quot;}  
      named_scope :ending_with_a, {:conditions =&gt; &quot;name LIKE '%a'&quot;}
  
      def self.calls_named_scope
        ending_with_a
      end
  
    end
  
    Post.starting_with_a.calls_named_scope
    # SELECT * FROM &quot;posts&quot; WHERE (name LIKE '%a') # loses &quot;name LIKE 'a%'&quot; (from starting_with_a)
    user.posts.calls_named_scope
    # SELECT * FROM &quot;posts&quot; WHERE (name LIKE '%a') # loses &quot;user_id = 1&quot; (from association)
@@@

Attached patch includes tests showing this behaviour.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveRecord models' class methods get added to collections
(keeping scope):&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
    class Post &amp;lt; AR::B
  
      belongs_to :user
    
      def self.wadus
        find(:all, :conditions =&amp;gt; { :wadus =&amp;gt; &amp;quot;wadus&amp;quot; })
      end
    
    end
  
    user.posts.wadus
    # SELECT * FROM &amp;quot;posts&amp;quot; WHERE (&amp;quot;posts&amp;quot;.&amp;quot;wadus&amp;quot; = 'wadus') AND (&amp;quot;posts&amp;quot;.user_id = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works also for named_scopes:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
    class Post
      named_scope :starting_with_a, {:conditions =&amp;gt; &amp;quot;name LIKE 'a%'&amp;quot;}
    end
  
    Post.starting_with_a.wadus
    # SELECT * FROM &amp;quot;posts&amp;quot; WHERE (&amp;quot;posts&amp;quot;.&amp;quot;wadus&amp;quot; = 'wadus') AND (name LIKE 'a%')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this behaviour breaks if your class method calls one or more
named scope:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
    class Post &amp;lt; ActiveRecord::Base
  
      belongs_to :user
  
      named_scope :starting_with_a, {:conditions =&amp;gt; &amp;quot;name LIKE 'a%'&amp;quot;}  
      named_scope :ending_with_a, {:conditions =&amp;gt; &amp;quot;name LIKE '%a'&amp;quot;}
  
      def self.calls_named_scope
        ending_with_a
      end
  
    end
  
    Post.starting_with_a.calls_named_scope
    # SELECT * FROM &amp;quot;posts&amp;quot; WHERE (name LIKE '%a') # loses &amp;quot;name LIKE 'a%'&amp;quot; (from starting_with_a)
    user.posts.calls_named_scope
    # SELECT * FROM &amp;quot;posts&amp;quot; WHERE (name LIKE '%a') # loses &amp;quot;user_id = 1&amp;quot; (from association)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Attached patch includes tests showing this behaviour.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-07T18:42:53+00:00</created-at>
      <creator-id type="integer">19153</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1907</number>
      <permalink>class-methods-which-call-named_scopes-lose-previous-scope-both-associations-and-other-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug named_scope</tag>
      <title>Class methods which call named_scopes lose previous scope (both associations and other scopes)</title>
      <updated-at type="datetime">2009-02-07T18:44:35+00:00</updated-at>
      <user-id type="integer">19153</user-id>
      <version type="integer">1</version>
      <user-name>porras</user-name>
      <creator-name>porras</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1907</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Trying to upload a patch</body>
      <body-html>&lt;div&gt;&lt;p&gt;Trying to upload a patch&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-07T20:01:48+00:00</created-at>
      <creator-id type="integer">19153</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1907</number>
      <permalink>class-methods-which-call-named_scopes-lose-previous-scope-both-associations-and-other-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug named_scope</tag>
      <title>Class methods which call named_scopes lose previous scope (both associations and other scopes)</title>
      <updated-at type="datetime">2009-02-07T20:01:52+00:00</updated-at>
      <user-id type="integer">2054</user-id>
      <version type="integer">2</version>
      <user-name>Luismi Cavall&#233;</user-name>
      <creator-name>porras</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1907</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Patch contributed by Luismi Cavall&#233;, Sergio Gil and Fernando Guill&#233;n from Madrid Hackathon.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Patch contributed by Luismi Cavall&amp;eacute;, Sergio Gil and
Fernando Guill&amp;eacute;n from Madrid Hackathon.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-07T20:03:39+00:00</created-at>
      <creator-id type="integer">19153</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord bug named_scope
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1907</number>
      <permalink>class-methods-which-call-named_scopes-lose-previous-scope-both-associations-and-other-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug named_scope patch tested</tag>
      <title>Class methods which call named_scopes lose previous scope (both associations and other scopes)</title>
      <updated-at type="datetime">2009-02-07T20:03:44+00:00</updated-at>
      <user-id type="integer">2054</user-id>
      <version type="integer">3</version>
      <user-name>Luismi Cavall&#233;</user-name>
      <creator-name>porras</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1907</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-07T22:39:41+00:00</created-at>
      <creator-id type="integer">19153</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1907</number>
      <permalink>class-methods-which-call-named_scopes-lose-previous-scope-both-associations-and-other-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug named_scope patch tested</tag>
      <title>Class methods which call named_scopes lose previous scope (both associations and other scopes)</title>
      <updated-at type="datetime">2009-02-07T22:39:45+00:00</updated-at>
      <user-id type="integer">20574</user-id>
      <version type="integer">4</version>
      <user-name>Guillermo &#193;lvarez</user-name>
      <creator-name>porras</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1907</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-09T15:13:49+00:00</created-at>
      <creator-id type="integer">19153</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1907</number>
      <permalink>class-methods-which-call-named_scopes-lose-previous-scope-both-associations-and-other-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug named_scope patch tested</tag>
      <title>Class methods which call named_scopes lose previous scope (both associations and other scopes)</title>
      <updated-at type="datetime">2009-02-09T15:13:51+00:00</updated-at>
      <user-id type="integer">14189</user-id>
      <version type="integer">5</version>
      <user-name>jjggss</user-name>
      <creator-name>porras</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1907</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>http://github.com/rails/rails/commit/0dd2f96f5c90f8abacb0fe0757ef7e5db4a4d501

Is it the same?</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://github.com/rails/rails/commit/0dd2f96f5c90f8abacb0fe0757ef7e5db4a4d501&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is it the same?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-25T18:23:30+00:00</created-at>
      <creator-id type="integer">19153</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1907</number>
      <permalink>class-methods-which-call-named_scopes-lose-previous-scope-both-associations-and-other-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug named_scope patch tested</tag>
      <title>Class methods which call named_scopes lose previous scope (both associations and other scopes)</title>
      <updated-at type="datetime">2009-02-25T18:23:35+00:00</updated-at>
      <user-id type="integer">20574</user-id>
      <version type="integer">6</version>
      <user-name>Guillermo &#193;lvarez</user-name>
      <creator-name>porras</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1907</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Looks like this has been resolved. Please post here if it's still a problem and I'll reopen.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks like this has been resolved. Please post here if it's
still a problem and I'll reopen.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-09T13:37:31+00:00</created-at>
      <creator-id type="integer">19153</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1907</number>
      <permalink>class-methods-which-call-named_scopes-lose-previous-scope-both-associations-and-other-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord bug named_scope patch tested</tag>
      <title>Class methods which call named_scopes lose previous scope (both associations and other scopes)</title>
      <updated-at type="datetime">2009-03-09T13:37:36+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">7</version>
      <user-name>Pratik</user-name>
      <creator-name>porras</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1907</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>72270a7b82f6781b15355ac2d1d298bb16238f4d</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-07T18:42:53+00:00</created-at>
      <filename>class_methods_with_named_scopes_lose_scope.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">86341</id>
      <size type="integer">5036</size>
      <uploader-id type="integer">19153</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/86341/class_methods_with_named_scopes_lose_scope.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>3c27fb38753c4393999d177f2de1a24f4d023774</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-07T20:03:39+00:00</created-at>
      <filename>class_methods_with_named_scope_lose_scope_patched.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">86353</id>
      <size type="integer">5921</size>
      <uploader-id type="integer">2054</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/86353/class_methods_with_named_scope_lose_scope_patched.diff</url>
    </attachment>
  </attachments>
</ticket>
