From 4d1a36fb952bb63858657f7269bad6d14f85791b Mon Sep 17 00:00:00 2001
From: Jason Frey <fryguy9@gmail.com>
Date: Tue, 31 Aug 2010 18:01:03 -0400
Subject: [PATCH] Improved performance of flush_cache and prime_cache by storing the memoized methods.

---
 activesupport/lib/active_support/memoizable.rb |   37 ++++++++++++-----------
 activesupport/test/memoizable_test.rb          |    5 +++
 2 files changed, 24 insertions(+), 18 deletions(-)

diff --git a/activesupport/lib/active_support/memoizable.rb b/activesupport/lib/active_support/memoizable.rb
index 9fb506f..f675218 100644
--- a/activesupport/lib/active_support/memoizable.rb
+++ b/activesupport/lib/active_support/memoizable.rb
@@ -22,42 +22,43 @@ module ActiveSupport
       end
 
       def memoize_all
-        prime_cache ".*"
+        prime_cache
       end
 
       def unmemoize_all
-        flush_cache ".*"
+        flush_cache
       end
 
       def prime_cache(*syms)
+        syms = self.class.memoized_methods if syms.empty?
         syms.each do |sym|
-          methods.each do |m|
-            if m.to_s =~ /^_unmemoized_(#{sym})/
-              if method(m).arity == 0
-                __send__($1)
-              else
-                ivar = ActiveSupport::Memoizable.memoized_ivar_for($1)
-                instance_variable_set(ivar, {})
-              end
-            end
+          m = :"_unmemoized_#{sym}"
+          if method(m).arity == 0
+            __send__(sym)
+          else
+            ivar = ActiveSupport::Memoizable.memoized_ivar_for(sym)
+            instance_variable_set(ivar, {})
           end
         end
       end
 
-      def flush_cache(*syms)
+      def flush_cache(*syms, &block)
+        syms = self.class.memoized_methods if syms.empty?
         syms.each do |sym|
-          (methods + private_methods + protected_methods).each do |m|
-            if m.to_s =~ /^_unmemoized_(#{sym.to_s.gsub(/\?\Z/, '\?')})/
-              ivar = ActiveSupport::Memoizable.memoized_ivar_for($1)
-              instance_variable_get(ivar).clear if instance_variable_defined?(ivar)
-            end
-          end
+          ivar = ActiveSupport::Memoizable.memoized_ivar_for(sym)
+          instance_variable_get(ivar).clear if instance_variable_defined?(ivar)
         end
       end
     end
 
+    def memoized_methods
+      @_memoized_methods ||= []
+    end
+
     def memoize(*symbols)
       symbols.each do |symbol|
+        memoized_methods.push(symbol.to_s).uniq!
+
         original_method = :"_unmemoized_#{symbol}"
         memoized_ivar = ActiveSupport::Memoizable.memoized_ivar_for(symbol)
 
diff --git a/activesupport/test/memoizable_test.rb b/activesupport/test/memoizable_test.rb
index b11fa8d..465ce7e 100644
--- a/activesupport/test/memoizable_test.rb
+++ b/activesupport/test/memoizable_test.rb
@@ -109,6 +109,10 @@ class MemoizableTest < ActiveSupport::TestCase
     assert_equal 1, @person.name_calls
   end
 
+  def test_memoized_methods
+    assert_equal %w{age is_developer? name name? update}, Person.memoized_methods.sort
+  end
+
   def test_memoization_with_punctuation
     assert_equal true, @person.name?
 
@@ -197,6 +201,7 @@ class MemoizableTest < ActiveSupport::TestCase
       company.extend ActiveSupport::Memoizable
       company.memoize :name
 
+      assert_equal %w{name}, company.memoized_methods
       assert_equal "37signals", company.name
       assert_equal 1, company.name_calls
       assert_equal "37signals", company.name
-- 
1.7.0.2.msysgit.0

