<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-03T15:06:43+00:00</created-at>
  <creator-id type="integer">22106</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6512</number>
  <permalink>ar-scopes-behave-differently-than-class-methods</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>active_record arel scope</tag>
  <title>AR scopes behave differently than class methods</title>
  <updated-at type="datetime">2011-03-03T17:31:26+00:00</updated-at>
  <user-id type="integer">7697</user-id>
  <version type="integer">4</version>
  <user-name>Andrew White</user-name>
  <creator-name>Szymon Nowak</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6512</url>
  <priority-name>Low</priority-name>
  <original-body>Rails 3.0.5:

@@@ ruby
class User &lt; ActiveRecord::Base
  scope :a, where(:email =&gt; &quot;a&quot;)
  scope :b, where(:email =&gt; &quot;b&quot;)
  
  def self.c; where(:email =&gt; &quot;c&quot;); end
  def self.d; where(:email =&gt; &quot;d&quot;); end
end

# scope + scope
User.a.b.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'b' - only the last scope is present

# method + scope
User.c.b.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'b' - only the last scope is present

# scope + method
User.a.c.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'a' AND &quot;users&quot;.&quot;email&quot; = 'c'

# method + method
User.c.d.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'c' AND &quot;users&quot;.&quot;email&quot; = 'd'
@@@

Whenever there's a scope at the end of the chain, similar scopes before it are overwritten. When using class methods everything works fine.</original-body>
  <latest-body>Rails 3.0.5:

@@@ ruby
class User &lt; ActiveRecord::Base
  scope :a, where(:email =&gt; &quot;a&quot;)
  scope :b, where(:email =&gt; &quot;b&quot;)
  
  def self.c; where(:email =&gt; &quot;c&quot;); end
  def self.d; where(:email =&gt; &quot;d&quot;); end
end

# scope + scope
User.a.b.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'b' - only the last scope is present

# method + scope
User.c.b.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'b' - only the last scope is present

# scope + method
User.a.c.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'a' AND &quot;users&quot;.&quot;email&quot; = 'c'

# method + method
User.c.d.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'c' AND &quot;users&quot;.&quot;email&quot; = 'd'
@@@

Whenever there's a scope at the end of the chain, similar scopes before it are overwritten. When using class methods everything works fine.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Rails 3.0.5:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  scope :a, where(:email =&amp;gt; &quot;a&quot;)
  scope :b, where(:email =&amp;gt; &quot;b&quot;)
  
  def self.c; where(:email =&amp;gt; &quot;c&quot;); end
  def self.d; where(:email =&amp;gt; &quot;d&quot;); end
end

# scope + scope
User.a.b.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'b' - only the last scope is present

# method + scope
User.c.b.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'b' - only the last scope is present

# scope + method
User.a.c.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'a' AND &quot;users&quot;.&quot;email&quot; = 'c'

# method + method
User.c.d.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'c' AND &quot;users&quot;.&quot;email&quot; = 'd'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Whenever there's a scope at the end of the chain, similar scopes
before it are overwritten. When using class methods everything
works fine.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails 3.0.5:

@@@ ruby
class User &lt; ActiveRecord::Base
  scope :a, where(:email =&gt; &quot;a&quot;)
  scope :b, where(:email =&gt; &quot;b&quot;)
  
  def self.c; where(:email =&gt; &quot;c&quot;); end
  def self.d; where(:email =&gt; &quot;d&quot;); end
end

# scope + scope
User.a.b.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'b' - only the last scope is present

# method + scope
User.c.b.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'b' - only the last scope is present

# scope + method
User.a.c.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'a' AND &quot;users&quot;.&quot;email&quot; = 'c'

# method + method
User.c.d.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'c' AND &quot;users&quot;.&quot;email&quot; = 'd'
@@@

Whenever there's a scope at the end of the chain, similar scopes before it are overwritten. When using class methods everything works fine.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails 3.0.5:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  scope :a, where(:email =&amp;gt; &quot;a&quot;)
  scope :b, where(:email =&amp;gt; &quot;b&quot;)
  
  def self.c; where(:email =&amp;gt; &quot;c&quot;); end
  def self.d; where(:email =&amp;gt; &quot;d&quot;); end
end

# scope + scope
User.a.b.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'b' - only the last scope is present

# method + scope
User.c.b.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'b' - only the last scope is present

# scope + method
User.a.c.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'a' AND &quot;users&quot;.&quot;email&quot; = 'c'

# method + method
User.c.d.to_sql
# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;email&quot; = 'c' AND &quot;users&quot;.&quot;email&quot; = 'd'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Whenever there's a scope at the end of the chain, similar scopes
before it are overwritten. When using class methods everything
works fine.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-03T15:06:43+00:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6512</number>
      <permalink>ar-scopes-behave-differently-than-class-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record arel scope</tag>
      <title>AR scopes behave differently than class methods</title>
      <updated-at type="datetime">2011-03-03T15:08:36+00:00</updated-at>
      <user-id type="integer">22106</user-id>
      <version type="integer">1</version>
      <user-name>Szymon Nowak</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6512</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is the intended behavior as looking for an email address equal to two different values will always give an empty result - [this][1] section of code is responsible for removing the duplicates. The reason the class methods give the results that they do is they're merging the where values of AR:Relation which are already strings whereas the scope merges hashes.

[1]: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/spawn_methods.rb#L34</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is the intended behavior as looking for an email address
equal to two different values will always give an empty result -
&lt;a href=
&quot;https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/spawn_methods.rb#L34&quot;&gt;
this&lt;/a&gt; section of code is responsible for removing the
duplicates. The reason the class methods give the results that they
do is they're merging the where values of AR:Relation which are
already strings whereas the scope merges hashes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-03T16:34:01+00:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6512</number>
      <permalink>ar-scopes-behave-differently-than-class-methods</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>active_record arel scope</tag>
      <title>AR scopes behave differently than class methods</title>
      <updated-at type="datetime">2011-03-03T16:34:09+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6512</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, the example with email was maybe not very fortunate, but in case of WHERE IN clause it really is not consisten:

@@@ ruby
class User &lt; ActiveRecord::Base
  scope :a, where(:state =&gt; [&quot;active&quot;, &quot;confirmed&quot;])
  scope :b, where(:state =&gt; [&quot;deleted&quot;, &quot;confirmed&quot;])
end
@@@

If you try to use both scopes, it will return only the second one, but when you write it using where method explicitly, or using class methods, you'll get intersection of these 2 sets: WHERE IN (&quot;active&quot;, &quot;confirmed&quot;) AND WHERE IN (&quot;deleted&quot;, &quot;confirmed&quot;).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, the example with email was maybe not very fortunate, but in
case of WHERE IN clause it really is not consisten:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  scope :a, where(:state =&amp;gt; [&quot;active&quot;, &quot;confirmed&quot;])
  scope :b, where(:state =&amp;gt; [&quot;deleted&quot;, &quot;confirmed&quot;])
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you try to use both scopes, it will return only the second
one, but when you write it using where method explicitly, or using
class methods, you'll get intersection of these 2 sets: WHERE IN
(&quot;active&quot;, &quot;confirmed&quot;) AND WHERE IN (&quot;deleted&quot;, &quot;confirmed&quot;).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-03T16:42:07+00:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6512</number>
      <permalink>ar-scopes-behave-differently-than-class-methods</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>active_record arel scope</tag>
      <title>AR scopes behave differently than class methods</title>
      <updated-at type="datetime">2011-03-03T16:42:16+00:00</updated-at>
      <user-id type="integer">22106</user-id>
      <version type="integer">3</version>
      <user-name>Szymon Nowak</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6512</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hmm, looking at this again it looks like another instance of this [bug][1]. What do you think Aaron? Removing the code breaks a couple of tests which are specifically testing that the later key overrides the earlier key and it would make it consistent with relation merging.

[1]: https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/4598</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hmm, looking at this again it looks like another instance of
this &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/4598&quot;&gt;
bug&lt;/a&gt;. What do you think Aaron? Removing the code breaks a couple
of tests which are specifically testing that the later key
overrides the earlier key and it would make it consistent with
relation merging.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-03T17:31:17+00:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- 
:state: wontfix
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6512</number>
      <permalink>ar-scopes-behave-differently-than-class-methods</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>active_record arel scope</tag>
      <title>AR scopes behave differently than class methods</title>
      <updated-at type="datetime">2011-03-03T17:31:26+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">4</version>
      <user-name>Andrew White</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6512</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
