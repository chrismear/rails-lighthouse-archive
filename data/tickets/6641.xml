<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-28T20:50:32+01:00</created-at>
  <creator-id type="integer">143217</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6641</number>
  <permalink>vendorgemsourceindexrefresh-fails-when-vendorgems-includes-cvs-directory</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>VendorGemSourceIndex::refresh! fails when vendor\gems includes CVS directory</title>
  <updated-at type="datetime">2011-03-28T22:40:57+01:00</updated-at>
  <user-id type="integer">143217</user-id>
  <version type="integer">2</version>
  <user-name>paulbonner</user-name>
  <creator-name>paulbonner</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6641</url>
  <priority-name nil="true"></priority-name>
  <original-body>This affects likely only us poor corporate slobs using CVS repositories. CVS creates a directory called CVS in every directory you check into its repository. This was not a problem in earlier versions of the Rails 2.x tree, but in 2.3.10 and 2.3.11, the presence of a CVS directory under vendor/gems results in an error during Rails initialization.

The source of the error appears to be a change introduced post-2.3.8 in  Rails::VendorGemSourceIndex.version_for_dir.

Through 2.3.8, version_for_dir returned nil when passed a directory name like &quot;CVS&quot; that doesn't contain version information:

  def version_for_dir(d)
      matches = /-([^-]+)$/.match(d)
      Gem::Version.new(matches[1]) if matches
  end

in 2.3.10 and 2.3.11, version_for_dir returns a Gem::Version object with an empty version string given the samenon-versioned directory name:

def version_for_dir(d)
      version = d.split('-').find { |s| s.match(/^\d(\.\d|\.\w+)*$/) }
      Gem::Version.new(version)
end

As a result, the &quot;if dir_version&quot; check on line 70 of vendor_gem_source_index.rb fails to detect the non-versioned directory, resulting in an undefined method error on line 76:

             
C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:78:in `refresh!': undefined method `[]' for nil:NilClass (NoMethodError)
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `each'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `refresh!'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:29:in `initialize'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `new'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `add_frozen_gem_path'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:298:in `add_gem_load_paths'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:132:in `process'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:113:in `run'
         ... 7 levels...
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/commands/server.rb:36:in `require'
        from C:/jruby-1.4.0/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:36:in `require'
        from script\server:3</original-body>
  <latest-body>This affects likely only us poor corporate slobs using CVS repositories. CVS creates a directory called CVS in every directory you check into its repository. This was not a problem in earlier versions of the Rails 2.x tree, but in 2.3.10 and 2.3.11, the presence of a CVS directory under vendor/gems results in an error during Rails initialization.

The source of the error appears to be a change introduced post-2.3.8 in  Rails::VendorGemSourceIndex.version_for_dir.

Through 2.3.8, version_for_dir returned nil when passed a directory name like &quot;CVS&quot; that doesn't contain version information:

  def version_for_dir(d)
      matches = /-([^-]+)$/.match(d)
      Gem::Version.new(matches[1]) if matches
  end

in 2.3.10 and 2.3.11, version_for_dir returns a Gem::Version object with an empty version string given the samenon-versioned directory name:

def version_for_dir(d)
      version = d.split('-').find { |s| s.match(/^\d(\.\d|\.\w+)*$/) }
      Gem::Version.new(version)
end

As a result, the &quot;if dir_version&quot; check on line 70 of vendor_gem_source_index.rb fails to detect the non-versioned directory, resulting in an undefined method error on line 76:

             
C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:78:in `refresh!': undefined method `[]' for nil:NilClass (NoMethodError)
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `each'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `refresh!'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:29:in `initialize'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `new'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `add_frozen_gem_path'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:298:in `add_gem_load_paths'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:132:in `process'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:113:in `run'
         ... 7 levels...
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/commands/server.rb:36:in `require'
        from C:/jruby-1.4.0/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:36:in `require'
        from script\server:3</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This affects likely only us poor corporate slobs using CVS
repositories. CVS creates a directory called CVS in every directory
you check into its repository. This was not a problem in earlier
versions of the Rails 2.x tree, but in 2.3.10 and 2.3.11, the
presence of a CVS directory under vendor/gems results in an error
during Rails initialization.&lt;/p&gt;
&lt;p&gt;The source of the error appears to be a change introduced
post-2.3.8 in Rails::VendorGemSourceIndex.version_for_dir.&lt;/p&gt;
&lt;p&gt;Through 2.3.8, version_for_dir returned nil when passed a
directory name like &quot;CVS&quot; that doesn't contain version
information:&lt;/p&gt;
&lt;p&gt;def version_for_dir(d)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  matches = /-([^-]+)$/.match(d)
  Gem::Version.new(matches[1]) if matches&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;in 2.3.10 and 2.3.11, version_for_dir returns a Gem::Version
object with an empty version string given the samenon-versioned
directory name:&lt;/p&gt;
&lt;p&gt;def version_for_dir(d)&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  version = d.split('-').find { |s| s.match(/^\d(\.\d|\.\w+)*$/) }
  Gem::Version.new(version)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;As a result, the &quot;if dir_version&quot; check on line 70 of
vendor_gem_source_index.rb fails to detect the non-versioned
directory, resulting in an undefined method error on line 76:&lt;/p&gt;
&lt;p&gt;
C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:78:in
&lt;code&gt;refresh!': undefined method&lt;/code&gt;[]' for nil:NilClass
(NoMethodError)&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `each'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `refresh!'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:29:in `initialize'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `new'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `add_frozen_gem_path'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:298:in `add_gem_load_paths'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:132:in `process'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:113:in `run'
     ... 7 levels...
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/commands/server.rb:36:in `require'
    from C:/jruby-1.4.0/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:36:in `require'
    from script\server:3&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This affects likely only us poor corporate slobs using CVS repositories. CVS creates a directory called CVS in every directory you check into its repository. This was not a problem in earlier versions of the Rails 2.x tree, but in 2.3.10 and 2.3.11, the presence of a CVS directory under vendor/gems results in an error during Rails initialization.

The source of the error appears to be a change introduced post-2.3.8 in  Rails::VendorGemSourceIndex.version_for_dir.

Through 2.3.8, version_for_dir returned nil when passed a directory name like &quot;CVS&quot; that doesn't contain version information:

  def version_for_dir(d)
      matches = /-([^-]+)$/.match(d)
      Gem::Version.new(matches[1]) if matches
  end

in 2.3.10 and 2.3.11, version_for_dir returns a Gem::Version object with an empty version string given the samenon-versioned directory name:

def version_for_dir(d)
      version = d.split('-').find { |s| s.match(/^\d(\.\d|\.\w+)*$/) }
      Gem::Version.new(version)
end

As a result, the &quot;if dir_version&quot; check on line 70 of vendor_gem_source_index.rb fails to detect the non-versioned directory, resulting in an undefined method error on line 76:

             
C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:78:in `refresh!': undefined method `[]' for nil:NilClass (NoMethodError)
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `each'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `refresh!'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:29:in `initialize'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `new'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `add_frozen_gem_path'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:298:in `add_gem_load_paths'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:132:in `process'
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:113:in `run'
         ... 7 levels...
        from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/commands/server.rb:36:in `require'
        from C:/jruby-1.4.0/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:36:in `require'
        from script\server:3</body>
      <body-html>&lt;div&gt;&lt;p&gt;This affects likely only us poor corporate slobs using CVS
repositories. CVS creates a directory called CVS in every directory
you check into its repository. This was not a problem in earlier
versions of the Rails 2.x tree, but in 2.3.10 and 2.3.11, the
presence of a CVS directory under vendor/gems results in an error
during Rails initialization.&lt;/p&gt;
&lt;p&gt;The source of the error appears to be a change introduced
post-2.3.8 in Rails::VendorGemSourceIndex.version_for_dir.&lt;/p&gt;
&lt;p&gt;Through 2.3.8, version_for_dir returned nil when passed a
directory name like &quot;CVS&quot; that doesn't contain version
information:&lt;/p&gt;
&lt;p&gt;def version_for_dir(d)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  matches = /-([^-]+)$/.match(d)
  Gem::Version.new(matches[1]) if matches&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;in 2.3.10 and 2.3.11, version_for_dir returns a Gem::Version
object with an empty version string given the samenon-versioned
directory name:&lt;/p&gt;
&lt;p&gt;def version_for_dir(d)&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  version = d.split('-').find { |s| s.match(/^\d(\.\d|\.\w+)*$/) }
  Gem::Version.new(version)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;As a result, the &quot;if dir_version&quot; check on line 70 of
vendor_gem_source_index.rb fails to detect the non-versioned
directory, resulting in an undefined method error on line 76:&lt;/p&gt;
&lt;p&gt;
C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:78:in
&lt;code&gt;refresh!': undefined method&lt;/code&gt;[]' for nil:NilClass
(NoMethodError)&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `each'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:45:in `refresh!'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/vendor_gem_source_index.rb:29:in `initialize'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `new'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/rails/gem_dependency.rb:21:in `add_frozen_gem_path'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:298:in `add_gem_load_paths'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:132:in `process'
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/initializer.rb:113:in `run'
     ... 7 levels...
    from C:/jruby-1.4.0/lib/ruby/gems/1.8/gems/rails-2.3.11/lib/commands/server.rb:36:in `require'
    from C:/jruby-1.4.0/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:36:in `require'
    from script\server:3&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-28T20:50:32+01:00</created-at>
      <creator-id type="integer">143217</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6641</number>
      <permalink>vendorgemsourceindexrefresh-fails-when-vendorgems-includes-cvs-directory</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>VendorGemSourceIndex::refresh! fails when vendor\gems includes CVS directory</title>
      <updated-at type="datetime">2011-03-28T20:50:33+01:00</updated-at>
      <user-id type="integer">143217</user-id>
      <version type="integer">1</version>
      <user-name>paulbonner</user-name>
      <creator-name>paulbonner</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6641</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There are two workarounds for this. The first is just to install all one's required gems and elminate the need for the vendor/gems directory. Alternately, it's possible to monkey-patch VendorGemSourceIndex in config/preinitializer.rb like this: 

require 'rubygems'
gem 'rails'
require 'initializer'

module Rails
  class VendorGemSourceIndex
    def version_for_dir(d)
      version = d.split('-').find { |s| s.match(/^\d(\.\d|\.\w+)*$/) }
      Gem::Version.new(version) if version
    end
  end
end</body>
      <body-html>&lt;div&gt;&lt;p&gt;There are two workarounds for this. The first is just to install
all one's required gems and elminate the need for the vendor/gems
directory. Alternately, it's possible to monkey-patch
VendorGemSourceIndex in config/preinitializer.rb like this:&lt;/p&gt;
&lt;p&gt;require 'rubygems'&lt;br&gt;
gem 'rails'&lt;br&gt;
require 'initializer'&lt;/p&gt;
&lt;p&gt;module Rails&lt;br&gt;
class VendorGemSourceIndex&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def version_for_dir(d)
  version = d.split('-').find { |s| s.match(/^\d(\.\d|\.\w+)*$/) }
  Gem::Version.new(version) if version
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-28T22:40:53+01:00</created-at>
      <creator-id type="integer">143217</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6641</number>
      <permalink>vendorgemsourceindexrefresh-fails-when-vendorgems-includes-cvs-directory</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>VendorGemSourceIndex::refresh! fails when vendor\gems includes CVS directory</title>
      <updated-at type="datetime">2011-03-28T22:40:57+01:00</updated-at>
      <user-id type="integer">143217</user-id>
      <version type="integer">2</version>
      <user-name>paulbonner</user-name>
      <creator-name>paulbonner</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6641</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
