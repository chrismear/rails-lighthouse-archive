<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2009-09-08T15:23:02+01:00</created-at>
  <creator-id type="integer">69054</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3165</number>
  <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
  <priority type="integer">139711</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>2-3-stable activerecord exception patch</tag>
  <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
  <updated-at type="datetime">2011-04-18T22:55:41+01:00</updated-at>
  <user-id type="integer">12465</user-id>
  <version type="integer">37</version>
  <user-name>Rob Olson</user-name>
  <creator-name>&#321;ukasz Bandzarewicz</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
  <priority-name nil="true"></priority-name>
  <original-body>After update Rails to 2.3.4 version I get following exception:

@@@
  1) Error:
test_tagging(BacklogItemTest):
ActiveRecord::MissingAttributeError: missing attribute: domain_id
    app/models/mixins/domain_checks.rb:54:in `ensure_same_domain'
    app/models/mixins/domain_checks.rb:35:in `after_find'
    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `send'
    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `callback'
    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `send'
    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `instantiate'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `collect!'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'
    vendor/rails/activerecord/lib/active_record/base.rb:1505:in `find_initial'
    vendor/rails/activerecord/lib/active_record/base.rb:692:in `exists?'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing'
    vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'
    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'
    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:336:in `include?'
    test/unit/backlog_item_test.rb:159:in `test_tagging'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run
@@@

Error occurs when in test I'm doing something like that:
@@@
item.tags.include? tags(:banana)
@@@

..it generates following sql query:
@@@
Tag Load (0.2ms)   SELECT `tags`.id FROM `tags` INNER JOIN `backlog_item_tags` ON `tags`.id = `backlog_item_tags`.tag_id WHERE (`tags`.`id` = 59467727) AND ((`backlog_item_tags`.backlog_item_id = 1737950289)) ORDER BY name ASC LIMIT 1
@@@</original-body>
  <latest-body>After update Rails to 2.3.4 version I get following exception:

@@@
  1) Error:
test_tagging(BacklogItemTest):
ActiveRecord::MissingAttributeError: missing attribute: domain_id
    app/models/mixins/domain_checks.rb:54:in `ensure_same_domain'
    app/models/mixins/domain_checks.rb:35:in `after_find'
    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `send'
    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `callback'
    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `send'
    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `instantiate'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `collect!'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'
    vendor/rails/activerecord/lib/active_record/base.rb:1505:in `find_initial'
    vendor/rails/activerecord/lib/active_record/base.rb:692:in `exists?'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing'
    vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'
    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'
    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:336:in `include?'
    test/unit/backlog_item_test.rb:159:in `test_tagging'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run
@@@

Error occurs when in test I'm doing something like that:
@@@
item.tags.include? tags(:banana)
@@@

..it generates following sql query:
@@@
Tag Load (0.2ms)   SELECT `tags`.id FROM `tags` INNER JOIN `backlog_item_tags` ON `tags`.id = `backlog_item_tags`.tag_id WHERE (`tags`.`id` = 59467727) AND ((`backlog_item_tags`.backlog_item_id = 1737950289)) ORDER BY name ASC LIMIT 1
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;After update Rails to 2.3.4 version I get following
exception:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  1) Error:
test_tagging(BacklogItemTest):
ActiveRecord::MissingAttributeError: missing attribute: domain_id
    app/models/mixins/domain_checks.rb:54:in `ensure_same_domain'
    app/models/mixins/domain_checks.rb:35:in `after_find'
    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `send'
    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `callback'
    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `send'
    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `instantiate'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `collect!'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'
    vendor/rails/activerecord/lib/active_record/base.rb:1505:in `find_initial'
    vendor/rails/activerecord/lib/active_record/base.rb:692:in `exists?'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing'
    vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'
    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'
    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:336:in `include?'
    test/unit/backlog_item_test.rb:159:in `test_tagging'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Error occurs when in test I'm doing something like that:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;item.tags.include? tags(:banana)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;..it generates following sql query:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Tag Load (0.2ms)   SELECT &lt;/code&gt;tags.id FROM &lt;code&gt;tags&lt;/code&gt; INNER JOIN &lt;code&gt;backlog_item_tags&lt;/code&gt; ON &lt;code&gt;tags&lt;/code&gt;.id = &lt;code&gt;backlog_item_tags&lt;/code&gt;.tag_id WHERE (&lt;code&gt;tags&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 59467727) AND ((&lt;code&gt;backlog_item_tags&lt;/code&gt;.backlog_item_id = 1737950289)) ORDER BY name ASC LIMIT 1
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>After update Rails to 2.3.4 version I get following exception:

@@@
  1) Error:
test_tagging(BacklogItemTest):
ActiveRecord::MissingAttributeError: missing attribute: domain_id
    app/models/mixins/domain_checks.rb:54:in `ensure_same_domain'
    app/models/mixins/domain_checks.rb:35:in `after_find'
    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `send'
    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `callback'
    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `send'
    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `instantiate'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `collect!'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'
    vendor/rails/activerecord/lib/active_record/base.rb:1505:in `find_initial'
    vendor/rails/activerecord/lib/active_record/base.rb:692:in `exists?'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing'
    vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'
    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'
    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:336:in `include?'
    test/unit/backlog_item_test.rb:159:in `test_tagging'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run
@@@

Error occurs when in test I'm doing something like that:
@@@
item.tags.include? tags(:banana)
@@@

..it generates following sql query:
@@@
Tag Load (0.2ms)   SELECT `tags`.id FROM `tags` INNER JOIN `backlog_item_tags` ON `tags`.id = `backlog_item_tags`.tag_id WHERE (`tags`.`id` = 59467727) AND ((`backlog_item_tags`.backlog_item_id = 1737950289)) ORDER BY name ASC LIMIT 1
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;After update Rails to 2.3.4 version I get following
exception:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  1) Error:
test_tagging(BacklogItemTest):
ActiveRecord::MissingAttributeError: missing attribute: domain_id
    app/models/mixins/domain_checks.rb:54:in `ensure_same_domain'
    app/models/mixins/domain_checks.rb:35:in `after_find'
    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `send'
    vendor/rails/activerecord/lib/active_record/callbacks.rb:347:in `callback'
    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `send'
    vendor/rails/activerecord/lib/active_record/base.rb:1653:in `instantiate'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `collect!'
    vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'
    vendor/rails/activerecord/lib/active_record/base.rb:1505:in `find_initial'
    vendor/rails/activerecord/lib/active_record/base.rb:692:in `exists?'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing'
    vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'
    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'
    vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:336:in `include?'
    test/unit/backlog_item_test.rb:159:in `test_tagging'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Error occurs when in test I'm doing something like that:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;item.tags.include? tags(:banana)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;..it generates following sql query:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Tag Load (0.2ms)   SELECT &lt;/code&gt;tags.id FROM &lt;code&gt;tags&lt;/code&gt; INNER JOIN &lt;code&gt;backlog_item_tags&lt;/code&gt; ON &lt;code&gt;tags&lt;/code&gt;.id = &lt;code&gt;backlog_item_tags&lt;/code&gt;.tag_id WHERE (&lt;code&gt;tags&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 59467727) AND ((&lt;code&gt;backlog_item_tags&lt;/code&gt;.backlog_item_id = 1737950289)) ORDER BY name ASC LIMIT 1
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-08T15:23:02+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-09-08T15:23:08+01:00</updated-at>
      <user-id type="integer">69054</user-id>
      <version type="integer">1</version>
      <user-name>&#321;ukasz Bandzarewicz</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The SQL query is fine, id is enough to do include?. The problem is that models are instantiated having only id, without other properties and after_find assumes fully instantiated models.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The SQL query is fine, id is enough to do include?. The problem
is that models are instantiated having only id, without other
properties and after_find assumes fully instantiated models.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-09T09:37:08+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-09-09T09:37:09+01:00</updated-at>
      <user-id type="integer">28150</user-id>
      <version type="integer">2</version>
      <user-name>Adam Byrtek</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Trivial patch attached, do &quot;SELECT *&quot; instead of &quot;SELECT id&quot;. This is done only on a single row (LIMIT 1) so there is no need for micro-optimization.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Trivial patch attached, do &quot;SELECT *&quot; instead of &quot;SELECT id&quot;.
This is done only on a single row (LIMIT 1) so there is no need for
micro-optimization.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-09T10:06:52+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.4 activerecord exception
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-09-09T10:06:59+01:00</updated-at>
      <user-id type="integer">28150</user-id>
      <version type="integer">3</version>
      <user-name>Adam Byrtek</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I was having the same error, applied the patch and now it works</body>
      <body-html>&lt;div&gt;&lt;p&gt;I was having the same error, applied the patch and now it
works&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-10T12:15:49+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-09-10T12:15:51+01:00</updated-at>
      <user-id type="integer">43903</user-id>
      <version type="integer">4</version>
      <user-name>Jorge Dias</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I spend some time debugging this issue and the problem is with the ActiveRecord::Base.exists? method. In Rails 2.3.2 it looked like this:

@@@
     def exists?(id_or_conditions = {})
        connection.select_all(
          construct_finder_sql(
            :select     =&gt; &quot;#{quoted_table_name}.#{primary_key}&quot;,
            :conditions =&gt; expand_id_conditions(id_or_conditions),
            :limit      =&gt; 1
          ),
          &quot;#{name} Exists&quot;
        ).size &gt; 0
      end
@@@

Method above doesn't instantiate the record nor does it call the after_find filter chain.

In Rails 2.3.4 exists? method calls find_initial with :select =&gt; &quot;#{table}.#{primary_key}&quot;. This causes record to be instantiated and after_find filter called. However the only attribute loaded is 'id', so calling any other method inside the filter will cause the ArgumentError. 

IMO after_find filter should be called but with all the columns loaded</body>
      <body-html>&lt;div&gt;&lt;p&gt;I spend some time debugging this issue and the problem is with
the ActiveRecord::Base.exists? method. In Rails 2.3.2 it looked
like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     def exists?(id_or_conditions = {})
        connection.select_all(
          construct_finder_sql(
            :select     =&amp;gt; &quot;#{quoted_table_name}.#{primary_key}&quot;,
            :conditions =&amp;gt; expand_id_conditions(id_or_conditions),
            :limit      =&amp;gt; 1
          ),
          &quot;#{name} Exists&quot;
        ).size &amp;gt; 0
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Method above doesn't instantiate the record nor does it call the
after_find filter chain.&lt;/p&gt;
&lt;p&gt;In Rails 2.3.4 exists? method calls find_initial with :select
=&amp;gt; &quot;#{table}.#{primary_key}&quot;. This causes record to be
instantiated and after_find filter called. However the only
attribute loaded is 'id', so calling any other method inside the
filter will cause the ArgumentError.&lt;/p&gt;
&lt;p&gt;IMO after_find filter should be called but with all the columns
loaded&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-17T16:34:15+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-09-17T16:34:17+01:00</updated-at>
      <user-id type="integer">70118</user-id>
      <version type="integer">5</version>
      <user-name>Marek Kowalski</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This also pops up if you try to access any attributes in an after_initialize, which almost makes it seem like a regression from about 2007, or so.  Not sure that the patch will fix that part of the bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This also pops up if you try to access any attributes in an
after_initialize, which almost makes it seem like a regression from
about 2007, or so. Not sure that the patch will fix that part of
the bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-26T20:16:19+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-09-26T21:22:43+01:00</updated-at>
      <user-id type="integer">13680</user-id>
      <version type="integer">6</version>
      <user-name>Tim Connor</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This patch should fix after_initialize

But I still like the previous way of testing exists.

It did not pull back fields, it did not instantiate an object. It just pulled back the id.


I'd go back to the previous code. And better yet, Id tweak the select clause to optimize even more (do :select =&gt; 1)
That way it could possibly only use the index and not even touch the data page depending upon the exists clause.

suggestion:

@@@ ruby
      def exists?(id_or_conditions = {})
        connection.select_all(
          construct_finder_sql(
            :select     =&gt; 1,
            :conditions =&gt; expand_id_conditions(id_or_conditions),
            :limit      =&gt; 1
          ),
          &quot;#{name} Exists&quot;
        ).size &gt; 0
      end
@@@

Thanks for writing this up</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch should fix after_initialize&lt;/p&gt;
&lt;p&gt;But I still like the previous way of testing exists.&lt;/p&gt;
&lt;p&gt;It did not pull back fields, it did not instantiate an object.
It just pulled back the id.&lt;/p&gt;
&lt;p&gt;I'd go back to the previous code. And better yet, Id tweak the
select clause to optimize even more (do :select =&amp;gt; 1)&lt;br&gt;
That way it could possibly only use the index and not even touch
the data page depending upon the exists clause.&lt;/p&gt;
&lt;p&gt;suggestion:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;      def exists?(id_or_conditions = {})
        connection.select_all(
          construct_finder_sql(
            :select     =&amp;gt; 1,
            :conditions =&amp;gt; expand_id_conditions(id_or_conditions),
            :limit      =&amp;gt; 1
          ),
          &quot;#{name} Exists&quot;
        ).size &amp;gt; 0
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Thanks for writing this up&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-02T09:08:18+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-02T09:08:22+01:00</updated-at>
      <user-id type="integer">71763</user-id>
      <version type="integer">7</version>
      <user-name>kbrock</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>One way or another it would be nice to have this resolved by a Rails commiter.</body>
      <body-html>&lt;div&gt;&lt;p&gt;One way or another it would be nice to have this resolved by a
Rails commiter.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-02T19:32:23+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-02T19:32:28+01:00</updated-at>
      <user-id type="integer">28150</user-id>
      <version type="integer">8</version>
      <user-name>Adam Byrtek</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 This problem has caused some issues in our application. The fixes above don't help though.

@@@   1) Error:
test: The topic related image slideshow when several images are related to a topic, the slideshow should be populated in the session on selected image visit. (TopicsControllerTest):
ActiveRecord::MissingAttributeError: missing attribute: basket_id
    vendor/rails/activerecord/lib/active_record/association_preload.rb:309:in `send'
    vendor/rails/activerecord/lib/active_record/association_preload.rb:309:in `preload_belongs_to_association'
    vendor/rails/activerecord/lib/active_record/association_preload.rb:308:in `each'
    vendor/rails/activerecord/lib/active_record/association_preload.rb:308:in `preload_belongs_to_association'
    vendor/rails/activerecord/lib/active_record/association_preload.rb:120:in `send'
    vendor/rails/activerecord/lib/active_record/association_preload.rb:120:in `preload_one_association'
    vendor/rails/activesupport/lib/active_support/ordered_hash.rb:97:in `each'
    vendor/rails/activesupport/lib/active_support/ordered_hash.rb:97:in `each'
    vendor/rails/activerecord/lib/active_record/association_preload.rb:114:in `preload_one_association'
    vendor/rails/activerecord/lib/active_record/association_preload.rb:91:in `preload_associations'
    vendor/rails/activerecord/lib/active_record/association_preload.rb:90:in `preload_associations'
    vendor/rails/activerecord/lib/active_record/association_preload.rb:90:in `each'
    vendor/rails/activerecord/lib/active_record/association_preload.rb:90:in `preload_associations'
    vendor/rails/activerecord/lib/active_record/base.rb:1549:in `find_every'
    vendor/rails/activerecord/lib/active_record/base.rb:615:in `find'
    vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:60:in `find'
    lib/image_slideshow.rb:194:in `find_related_images'
    lib/image_slideshow.rb:139:in `populate_slideshow'
    lib/image_slideshow.rb:119:in `prepare_slideshow'
    vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `send'
    vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `evaluate_method'
    vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in `call'
    vendor/rails/actionpack/lib/action_controller/filters.rb:225:in `call'
    vendor/rails/actionpack/lib/action_controller/filters.rb:629:in `run_before_filters'
    vendor/rails/actionpack/lib/action_controller/filters.rb:615:in `call_filters'
    vendor/rails/actionpack/lib/action_controller/filters.rb:610:in `perform_action_without_benchmark'
    vendor/rails/actionpack/lib/action_controller/benchmarking.rb:68:in `perform_action_without_rescue'
    vendor/rails/activesupport/lib/active_support/core_ext/benchmark.rb:17:in `ms'
    /opt/ruby-enterprise-1.8.7-20090928/lib/ruby/1.8/benchmark.rb:308:in `realtime'
    vendor/rails/activesupport/lib/active_support/core_ext/benchmark.rb:17:in `ms'
    vendor/rails/actionpack/lib/action_controller/benchmarking.rb:68:in `perform_action_without_rescue'
    vendor/rails/actionpack/lib/action_controller/rescue.rb:160:in `perform_action_without_flash'
    vendor/rails/actionpack/lib/action_controller/flash.rb:146:in `perform_action'
    vendor/rails/actionpack/lib/action_controller/base.rb:532:in `send'
    vendor/rails/actionpack/lib/action_controller/base.rb:532:in `process_without_filters'
    vendor/rails/actionpack/lib/action_controller/filters.rb:606:in `process'
    vendor/rails/actionpack/lib/action_controller/test_process.rb:567:in `process_with_test'
    vendor/rails/actionpack/lib/action_controller/test_process.rb:447:in `process'
    vendor/rails/actionpack/lib/action_controller/test_process.rb:398:in `get'
    lib/image_slideshow_test_helper.rb:22:in `__bind_1254962019_963356'
    /opt/ruby-enterprise-1.8.7-20090928/lib/ruby/gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `call'
    /opt/ruby-enterprise-1.8.7-20090928/lib/ruby/gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `test: The topic related image slideshow when several images are related to a topic, the slideshow should be populated in the session on selected image visit. '
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
    vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run'
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 This problem has caused some issues in our application. The
fixes above don't help though.&lt;/p&gt;
&lt;p&gt;@@@ 1) Error: test: The topic related image slideshow when
several images are related to a topic, the slideshow should be
populated in the session on selected image visit.
(TopicsControllerTest):&lt;br&gt;
ActiveRecord::MissingAttributeError: missing attribute:
basket_id&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vendor/rails/activerecord/lib/active_record/association_preload.rb:309:in `send'
vendor/rails/activerecord/lib/active_record/association_preload.rb:309:in `preload_belongs_to_association'
vendor/rails/activerecord/lib/active_record/association_preload.rb:308:in `each'
vendor/rails/activerecord/lib/active_record/association_preload.rb:308:in `preload_belongs_to_association'
vendor/rails/activerecord/lib/active_record/association_preload.rb:120:in `send'
vendor/rails/activerecord/lib/active_record/association_preload.rb:120:in `preload_one_association'
vendor/rails/activesupport/lib/active_support/ordered_hash.rb:97:in `each'
vendor/rails/activesupport/lib/active_support/ordered_hash.rb:97:in `each'
vendor/rails/activerecord/lib/active_record/association_preload.rb:114:in `preload_one_association'
vendor/rails/activerecord/lib/active_record/association_preload.rb:91:in `preload_associations'
vendor/rails/activerecord/lib/active_record/association_preload.rb:90:in `preload_associations'
vendor/rails/activerecord/lib/active_record/association_preload.rb:90:in `each'
vendor/rails/activerecord/lib/active_record/association_preload.rb:90:in `preload_associations'
vendor/rails/activerecord/lib/active_record/base.rb:1549:in `find_every'
vendor/rails/activerecord/lib/active_record/base.rb:615:in `find'
vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:60:in `find'
lib/image_slideshow.rb:194:in `find_related_images'
lib/image_slideshow.rb:139:in `populate_slideshow'
lib/image_slideshow.rb:119:in `prepare_slideshow'
vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `send'
vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `evaluate_method'
vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in `call'
vendor/rails/actionpack/lib/action_controller/filters.rb:225:in `call'
vendor/rails/actionpack/lib/action_controller/filters.rb:629:in `run_before_filters'
vendor/rails/actionpack/lib/action_controller/filters.rb:615:in `call_filters'
vendor/rails/actionpack/lib/action_controller/filters.rb:610:in `perform_action_without_benchmark'
vendor/rails/actionpack/lib/action_controller/benchmarking.rb:68:in `perform_action_without_rescue'
vendor/rails/activesupport/lib/active_support/core_ext/benchmark.rb:17:in `ms'
/opt/ruby-enterprise-1.8.7-20090928/lib/ruby/1.8/benchmark.rb:308:in `realtime'
vendor/rails/activesupport/lib/active_support/core_ext/benchmark.rb:17:in `ms'
vendor/rails/actionpack/lib/action_controller/benchmarking.rb:68:in `perform_action_without_rescue'
vendor/rails/actionpack/lib/action_controller/rescue.rb:160:in `perform_action_without_flash'
vendor/rails/actionpack/lib/action_controller/flash.rb:146:in `perform_action'
vendor/rails/actionpack/lib/action_controller/base.rb:532:in `send'
vendor/rails/actionpack/lib/action_controller/base.rb:532:in `process_without_filters'
vendor/rails/actionpack/lib/action_controller/filters.rb:606:in `process'
vendor/rails/actionpack/lib/action_controller/test_process.rb:567:in `process_with_test'
vendor/rails/actionpack/lib/action_controller/test_process.rb:447:in `process'
vendor/rails/actionpack/lib/action_controller/test_process.rb:398:in `get'
lib/image_slideshow_test_helper.rb:22:in `__bind_1254962019_963356'
/opt/ruby-enterprise-1.8.7-20090928/lib/ruby/gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `call'
/opt/ruby-enterprise-1.8.7-20090928/lib/ruby/gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `test: The topic related image slideshow when several images are related to a topic, the slideshow should be populated in the session on selected image visit. '
vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run'&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;

&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-08T01:38:02+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-08T01:38:03+01:00</updated-at>
      <user-id type="integer">26790</user-id>
      <version type="integer">9</version>
      <user-name>Kieran P</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I wonder what we have to do to get this in the queue for 2.3.5?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I wonder what we have to do to get this in the queue for
2.3.5?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-19T21:34:05+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-19T21:34:06+01:00</updated-at>
      <user-id type="integer">13680</user-id>
      <version type="integer">10</version>
      <user-name>Tim Connor</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 -- bitten by this same problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 -- bitten by this same problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-21T13:58:18+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-21T13:58:23+01:00</updated-at>
      <user-id type="integer">73908</user-id>
      <version type="integer">11</version>
      <user-name>Randy Souza</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This is being caused by the fix introduced in #2543, which switched to using find_initial to properly account for scoping applied to the association. Assigning to Koz, as he handled the original ticket.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is being caused by the fix introduced in &lt;a href=
&quot;/projects/8994/tickets/2543&quot; title=&quot;Ticket #2543&quot;&gt;#2543&lt;/a&gt;, which
switched to using find_initial to properly account for scoping
applied to the association. Assigning to Koz, as he handled the
original ticket.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-21T22:37:46+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-21T22:37:51+01:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">12</version>
      <user-name>Matt Jones</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&gt; This also pops up if you try to access any attributes in an after_initialize

+1 - I'm running into this trying to set default values in after_initialise.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;This also pops up if you try to access any attributes in an
after_initialize&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;+1 - I'm running into this trying to set default values in
after_initialise.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-22T15:08:00+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-22T15:08:03+01:00</updated-at>
      <user-id type="integer">25351</user-id>
      <version type="integer">13</version>
      <user-name>Caius</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The issue is that find_by_sql is

This bug bit me as well. Instead of changing the select query from 'id' to '*', I believe the correct fix is to not instantiate the ActiveRecord object for calls to `#exists?`. In the ticket that created this bug, [#2543](https://rails.lighthouseapp.com/projects/8994/tickets/2543), Peter Marklund proposed adding a `:instantiate = false` option to find_every that would tell find_by_sql to not instantiate the records.

I have attached a patch with a test which demonstrates this bug by attempting to access a database attribute in an after_initialize. As a solution, I've implemented Peter Marklund's idea for a skip instantiation option. In addition to resolving this issue, this patch is beneficial because it improves the performance of calls to `#exists?`. As Koz stated in the previous ticket, this saves AR from firing the relevant callbacks for the model.

Any feedback is welcome.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The issue is that find_by_sql is&lt;/p&gt;
&lt;p&gt;This bug bit me as well. Instead of changing the select query
from 'id' to '*', I believe the correct fix is to not instantiate
the ActiveRecord object for calls to &lt;code&gt;#exists?&lt;/code&gt;. In the
ticket that created this bug, &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/2543&quot;&gt;#2543&lt;/a&gt;,
Peter Marklund proposed adding a &lt;code&gt;:instantiate = false&lt;/code&gt;
option to find_every that would tell find_by_sql to not instantiate
the records.&lt;/p&gt;
&lt;p&gt;I have attached a patch with a test which demonstrates this bug
by attempting to access a database attribute in an
after_initialize. As a solution, I've implemented Peter Marklund's
idea for a skip instantiation option. In addition to resolving this
issue, this patch is beneficial because it improves the performance
of calls to &lt;code&gt;#exists?&lt;/code&gt;. As Koz stated in the previous
ticket, this saves AR from firing the relevant callbacks for the
model.&lt;/p&gt;
&lt;p&gt;Any feedback is welcome.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-24T09:16:21+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-24T09:16:27+01:00</updated-at>
      <user-id type="integer">12465</user-id>
      <version type="integer">14</version>
      <user-name>Rob Olson</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>-1. In my opinion #exists? should instantiate the object. At least I would expect the after_find filter to be fired.</body>
      <body-html>&lt;div&gt;&lt;ol&gt;
&lt;li&gt;In my opinion #exists? should instantiate the object. At least
I would expect the after_find filter to be fired.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-24T12:40:32+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-24T12:40:33+01:00</updated-at>
      <user-id type="integer">70118</user-id>
      <version type="integer">15</version>
      <user-name>Marek Kowalski</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Marek,

Why would you expect the after_find filter to be fired for exists? As you mentioned earlier, that was not the behavior in Rails 2.3.2.

I think of #exists? as the equivalent of executing a SQL count (even though it is not for performance reasons) and intuitively would not expect it to call after_find.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marek,&lt;/p&gt;
&lt;p&gt;Why would you expect the after_find filter to be fired for
exists? As you mentioned earlier, that was not the behavior in
Rails 2.3.2.&lt;/p&gt;
&lt;p&gt;I think of #exists? as the equivalent of executing a SQL count
(even though it is not for performance reasons) and intuitively
would not expect it to call after_find.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-25T04:18:49+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-25T04:18:52+00:00</updated-at>
      <user-id type="integer">12465</user-id>
      <version type="integer">16</version>
      <user-name>Rob Olson</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Rob,

In fact in Rails 2.3.2 the after_find filter was not fired but I found out about it just when I was debugging the issue with missing attributes. Why I think it should be fired? Well, we should consider for what purpose  people use the after_find filter. In the application I work on we use it as the last security fence - it makes sure that the newly instantiated object belongs to the scope of interest of the current user. So not firing this filter when using #exists? theoretically opens the way for the true-negative effect: checking exists? returns true, because the record with given ID is present, however attempt to load the object will fail. Of course we have other security algorithms to double check it, but maybe some other people don't. Or maybe I'm just talking non sense... So for what purpose do you use the after_find filter ?

Best,
Marek</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rob,&lt;/p&gt;
&lt;p&gt;In fact in Rails 2.3.2 the after_find filter was not fired but I
found out about it just when I was debugging the issue with missing
attributes. Why I think it should be fired? Well, we should
consider for what purpose people use the after_find filter. In the
application I work on we use it as the last security fence - it
makes sure that the newly instantiated object belongs to the scope
of interest of the current user. So not firing this filter when
using #exists? theoretically opens the way for the true-negative
effect: checking exists? returns true, because the record with
given ID is present, however attempt to load the object will fail.
Of course we have other security algorithms to double check it, but
maybe some other people don't. Or maybe I'm just talking non
sense... So for what purpose do you use the after_find filter ?&lt;/p&gt;
&lt;p&gt;Best,&lt;br&gt;
Marek&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-25T09:54:04+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-25T09:54:09+00:00</updated-at>
      <user-id type="integer">70118</user-id>
      <version type="integer">17</version>
      <user-name>Marek Kowalski</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Rob,

In fact in Rails 2.3.2 the after_find filter was not fired but I found out about it just when I was debugging the issue with missing attributes. Why I think it should be fired? Well, we should consider for what purpose  people use the after_find filter. In the application I work on we use it as the last security fence - it makes sure that the newly instantiated object belongs to the scope of interest of the current user. So not firing this filter when using #exists? theoretically opens the way for the true-negative effect: checking exists? returns true, because the record with given ID is present, however attempt to load the object will fail. Of course we have other security algorithms to double check it, but maybe some other people don't. Or maybe I'm just talking non sense... So for what purpose do you use the after_find filter ?

Best,
Marek</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rob,&lt;/p&gt;
&lt;p&gt;In fact in Rails 2.3.2 the after_find filter was not fired but I
found out about it just when I was debugging the issue with missing
attributes. Why I think it should be fired? Well, we should
consider for what purpose people use the after_find filter. In the
application I work on we use it as the last security fence - it
makes sure that the newly instantiated object belongs to the scope
of interest of the current user. So not firing this filter when
using #exists? theoretically opens the way for the true-negative
effect: checking exists? returns true, because the record with
given ID is present, however attempt to load the object will fail.
Of course we have other security algorithms to double check it, but
maybe some other people don't. Or maybe I'm just talking non
sense... So for what purpose do you use the after_find filter ?&lt;/p&gt;
&lt;p&gt;Best,&lt;br&gt;
Marek&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-25T10:02:53+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-25T10:02:56+00:00</updated-at>
      <user-id type="integer">70118</user-id>
      <version type="integer">18</version>
      <user-name>Marek Kowalski</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Marek, thank you for sharing how you have employed after_find in your application. I do not know all of the details of your application but I typically handle that situation differently.

One common way I ensure that the object I am finding belongs to the scope of interest of the current user is to do the find on an association proxy. Koz covered this in a [blog post on therailsway.com](http://www.therailsway.com/2007/3/26/association-proxies-are-your-friend).

In that case the find will return `nil` which then tells me that the record does not exist. With this technique I can accomplish the same thing in 1 sql query that you are doing with 2.

To be honest I have not found a good use for the after_find filter yet. However, since I did not know that it was available until recently, I would not have thought to use it before.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marek, thank you for sharing how you have employed after_find in
your application. I do not know all of the details of your
application but I typically handle that situation differently.&lt;/p&gt;
&lt;p&gt;One common way I ensure that the object I am finding belongs to
the scope of interest of the current user is to do the find on an
association proxy. Koz covered this in a &lt;a href=
&quot;http://www.therailsway.com/2007/3/26/association-proxies-are-your-friend&quot;&gt;
blog post on therailsway.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In that case the find will return &lt;code&gt;nil&lt;/code&gt; which then
tells me that the record does not exist. With this technique I can
accomplish the same thing in 1 sql query that you are doing with
2.&lt;/p&gt;
&lt;p&gt;To be honest I have not found a good use for the after_find
filter yet. However, since I did not know that it was available
until recently, I would not have thought to use it before.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-26T03:26:57+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-26T03:26:59+00:00</updated-at>
      <user-id type="integer">12465</user-id>
      <version type="integer">19</version>
      <user-name>Rob Olson</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Rob, of course you are right, this is sensible  approach. But you also have to take into consideration that some lame developer could forget about accessing the object through the association, just like: Model.find(params[:id]). This would be a major security breach, but after_find filter comes to the rescue. Rails code is not very idiot-resistant, so if you are working in the team where people come and go you should better optimize the security rather than the number of SQL queries.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rob, of course you are right, this is sensible approach. But you
also have to take into consideration that some lame developer could
forget about accessing the object through the association, just
like: Model.find(params[:id]). This would be a major security
breach, but after_find filter comes to the rescue. Rails code is
not very idiot-resistant, so if you are working in the team where
people come and go you should better optimize the security rather
than the number of SQL queries.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-26T10:09:49+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-26T10:09:51+00:00</updated-at>
      <user-id type="integer">70118</user-id>
      <version type="integer">20</version>
      <user-name>Marek Kowalski</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Rob Olson: Just a note, your failing test does not fail. after_initialize is not quite like other callbacks, it's slipped unless defined as an actual method (for performance reasons).</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Rob Olson: Just a note, your failing test does not fail.
after_initialize is not quite like other callbacks, it's slipped
unless defined as an actual method (for performance reasons).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-26T15:20:36+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-26T15:20:40+00:00</updated-at>
      <user-id type="integer">28420</user-id>
      <version type="integer">21</version>
      <user-name>Tom Lea</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Tom Lea: I have been unable to recreate after_initialize not running. On my machines it runs (and results in an error) the way I have specified it. Any ideas?

Also, I realize that the test results in an error instead of a failure. To receive a failure instead the test could be written like this:

@@@ ruby
def test_exists_on_model_with_after_initialize_method_should_not_blow_up
  assert_nothing_raised { assert Entrant.exists? }
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Tom Lea: I have been unable to recreate after_initialize not
running. On my machines it runs (and results in an error) the way I
have specified it. Any ideas?&lt;/p&gt;
&lt;p&gt;Also, I realize that the test results in an error instead of a
failure. To receive a failure instead the test could be written
like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;def test_exists_on_model_with_after_initialize_method_should_not_blow_up
  assert_nothing_raised { assert Entrant.exists? }
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-28T06:52:58+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-10-28T06:53:03+00:00</updated-at>
      <user-id type="integer">12465</user-id>
      <version type="integer">22</version>
      <user-name>Rob Olson</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>As Tom Lea pointed out, in the 2-3-stable branch after_initialize must be declared as an actual method. It was working fine for me before but after updating Rails passing a block to after_initialize stopped working.

I've adjusted the patch for 2-3-stable. The old patch file (above) still works for Rails 3.0 and is preferred for the master branch since &quot;def after_initialize&quot; gives a deprecation warning in Rails 3.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As Tom Lea pointed out, in the 2-3-stable branch
after_initialize must be declared as an actual method. It was
working fine for me before but after updating Rails passing a block
to after_initialize stopped working.&lt;/p&gt;
&lt;p&gt;I've adjusted the patch for 2-3-stable. The old patch file
(above) still works for Rails 3.0 and is preferred for the master
branch since &quot;def after_initialize&quot; gives a deprecation warning in
Rails 3.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-10T03:37:38+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-11-10T03:37:43+00:00</updated-at>
      <user-id type="integer">12465</user-id>
      <version type="integer">23</version>
      <user-name>Rob Olson</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I ran into this same bug, and side-stepped it by changing the way I was setting my attribute in **#after_initialize**:

@@@ ruby
def after_initialize
  self.token ||= &quot;foobar&quot;
end
@@@

becomes:

@@@ ruby
def after_initialize
  write_attribute(:token, &quot;foobar&quot;) unless read_attribute(:token)
end
@@@

and that made the **ActiveRecord::MissingAttributeError** error go away. Might be of use to somebody?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I ran into this same bug, and side-stepped it by changing the
way I was setting my attribute in
&lt;strong&gt;#after_initialize&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def after_initialize
  self.token ||= &quot;foobar&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def after_initialize
  write_attribute(:token, &quot;foobar&quot;) unless read_attribute(:token)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and that made the
&lt;strong&gt;ActiveRecord::MissingAttributeError&lt;/strong&gt; error go away.
Might be of use to somebody?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-06T01:16:05+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-12-06T01:16:08+00:00</updated-at>
      <user-id type="integer">2301</user-id>
      <version type="integer">24</version>
      <user-name>Mark Dodwell</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-24T18:38:24+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.4 activerecord exception patch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.5 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2009-12-24T18:38:26+00:00</updated-at>
      <user-id type="integer">80704</user-id>
      <version type="integer">25</version>
      <user-name>Frederic Jean</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Rob's patch works well on 2.3.5 for our production server. It would be nice if this could be committed for 2.3.6</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rob's patch works well on 2.3.5 for our production server. It
would be nice if this could be committed for 2.3.6&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-19T06:52:54+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.5 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2010-02-19T06:53:00+00:00</updated-at>
      <user-id type="integer">78412</user-id>
      <version type="integer">26</version>
      <user-name>CDD Developers</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Did this NOT make it into 2.3.6?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Did this NOT make it into 2.3.6?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-23T22:37:36+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.5 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2010-05-23T22:37:54+01:00</updated-at>
      <user-id type="integer">13680</user-id>
      <version type="integer">27</version>
      <user-name>Tim Connor</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>And nor in 2.3.8... Could a committer please spend some integrating Rob's patch?

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;And nor in 2.3.8... Could a committer please spend some
integrating Rob's patch?&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-08T20:34:02+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.5 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2010-06-08T20:34:25+01:00</updated-at>
      <user-id type="integer">12826</user-id>
      <version type="integer">28</version>
      <user-name>Nikos Dimitrakopoulos</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Still broken in 2.3.8. Annoying.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Still broken in 2.3.8. Annoying.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-09T16:11:47+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">139711</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.5 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2010-07-09T16:11:50+01:00</updated-at>
      <user-id type="integer">14483</user-id>
      <version type="integer">29</version>
      <user-name>Yuri</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Still seems unresolved in 3.0.0rc

the solution from Mark Dodwell works though

def after_initialize
  write_attribute(:token, &quot;foobar&quot;) unless read_attribute(:token)
end

maybe worth to include in the final?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Still seems unresolved in 3.0.0rc&lt;/p&gt;
&lt;p&gt;the solution from Mark Dodwell works though&lt;/p&gt;
&lt;p&gt;def after_initialize&lt;br&gt;
write_attribute(:token, &quot;foobar&quot;) unless read_attribute(:token)
end&lt;/p&gt;
&lt;p&gt;maybe worth to include in the final?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-28T11:13:20+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">139711</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.5 activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2010-07-28T11:13:24+01:00</updated-at>
      <user-id type="integer">109163</user-id>
      <version type="integer">30</version>
      <user-name>Geoffroy</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Yup, just ran into this in 3.0.0rc as well. Only happens when doing a query that includes associations with corresponding conditions, triggering the old join code.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yup, just ran into this in 3.0.0rc as well. Only happens when
doing a query that includes associations with corresponding
conditions, triggering the old join code.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-28T21:28:15+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.4 2.3.5 activerecord exception patch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">139711</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.5 3.0.0.rc activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2010-07-28T21:28:20+01:00</updated-at>
      <user-id type="integer">24325</user-id>
      <version type="integer">31</version>
      <user-name>Ernie Miller</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I just spent half a day on this, before I finally found this ticket.  While I'm sad that it's been almost exactly a year since this was reported, and it hasn't been fixed yet, here's my simple work around for my scenario:

@@@
validates_uniqueness_of :email, :scope =&gt; :library_id

def after_initialize
  self.status ||= &quot;Invited&quot;
end
@@@

As explained above, this will cause a 'MissingAttributeError' to be thrown, if there are records returned by the validates_uniqueness_of query.  My simple solution is this:

@@@
def after_initialize
  self.status ||= &quot;Invited&quot; if new_record?
end
@@@

While other people are having more complex issues, this should solve the simple case, until an actual solution is commited into rails.

(Also added 2.3.8 to the list of tags, as that is what I'm working against, in preparation for upgrading to rails 3)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just spent half a day on this, before I finally found this
ticket. While I'm sad that it's been almost exactly a year since
this was reported, and it hasn't been fixed yet, here's my simple
work around for my scenario:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;validates_uniqueness_of :email, :scope =&amp;gt; :library_id

def after_initialize
  self.status ||= &quot;Invited&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As explained above, this will cause a 'MissingAttributeError' to
be thrown, if there are records returned by the
validates_uniqueness_of query. My simple solution is this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def after_initialize
  self.status ||= &quot;Invited&quot; if new_record?
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While other people are having more complex issues, this should
solve the simple case, until an actual solution is commited into
rails.&lt;/p&gt;
&lt;p&gt;(Also added 2.3.8 to the list of tags, as that is what I'm
working against, in preparation for upgrading to rails 3)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-02T19:07:33+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">139711</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.5 3.0.0.rc activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2010-09-02T19:07:38+01:00</updated-at>
      <user-id type="integer">21286</user-id>
      <version type="integer">32</version>
      <user-name>Brian Artiaco</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Brian, no need for that new_record check, if you just use read_attribute and write_attribute.  I don't think there is any more complex case that can't solve as a work-around.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Brian, no need for that new_record check, if you just use
read_attribute and write_attribute. I don't think there is any more
complex case that can't solve as a work-around.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-02T19:37:55+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">139711</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.5 3.0.0.rc activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2010-09-02T19:37:57+01:00</updated-at>
      <user-id type="integer">13680</user-id>
      <version type="integer">33</version>
      <user-name>Tim Connor</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:49:04+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:tag: 2.3.4 2.3.5 3.0.0.rc activerecord exception patch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">139711</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>234 235 300rc activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2011-02-02T18:08:22+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">34</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:49:05+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">139711</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>234 235 300rc activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2011-02-02T18:11:13+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">35</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>The bug is still present in Rails 3.0.4. This blog post (not mine) shows a workaround: http://blog.edseek.com/archives/2009/04/16/missingattributeerror-from-within-after_initialize/

The error is confusing, and will waste a few hours of time for anyone doing after_initialize / after_find hooks.

[state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;The bug is still present in Rails 3.0.4. This blog post (not
mine) shows a workaround: &lt;a href=
&quot;http://blog.edseek.com/archives/2009/04/16/missingattributeerror-from-within-after_initialize/&quot;&gt;
http://blog.edseek.com/archives/2009/04/16/missingattributeerror-fr...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The error is confusing, and will waste a few hours of time for
anyone doing after_initialize / after_find hooks.&lt;/p&gt;
&lt;p&gt;[state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-17T06:36:42+00:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">139711</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>234 235 300rc activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2011-02-17T06:37:26+00:00</updated-at>
      <user-id type="integer">33110</user-id>
      <version type="integer">36</version>
      <user-name>Victor Costan</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>This has finally been resolved in Rails 3.0.7 by [#6127](https://rails.lighthouseapp.com/projects/8994/tickets/6127-after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation).

It's still present in 2-3-stable though.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This has finally been resolved in Rails 3.0.7 by &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/6127-after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation&quot;&gt;
#6127&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's still present in 2-3-stable though.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-18T22:55:00+01:00</created-at>
      <creator-id type="integer">69054</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 234 235 300rc activerecord exception patch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3165</number>
      <permalink>activerecordmissingattributeerror-after-update-to-rails-v-234</permalink>
      <priority type="integer">139711</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2-3-stable activerecord exception patch</tag>
      <title>ActiveRecord::MissingAttributeError after update to rails v 2.3.4</title>
      <updated-at type="datetime">2011-04-18T22:55:41+01:00</updated-at>
      <user-id type="integer">12465</user-id>
      <version type="integer">37</version>
      <user-name>Rob Olson</user-name>
      <creator-name>&#321;ukasz Bandzarewicz</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3165</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>8fc6cf3273bb5e722c598160c271170be17fb3bd</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-09T10:06:52+01:00</created-at>
      <filename>exists.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">264452</id>
      <size type="integer">454</size>
      <uploader-id type="integer">28150</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/264452/exists.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>f8b3c81f90fc70a5e6a4e0af5f6eb1ba490fb40a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-10-24T09:16:22+01:00</created-at>
      <filename>skip_initialization_on_exists.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">304613</id>
      <size type="integer">4207</size>
      <uploader-id type="integer">12465</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/304613/skip_initialization_on_exists.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>0456230f71041eff9a941a4a44938308d154911f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-11-10T03:37:38+00:00</created-at>
      <filename>exists-2-3-stable.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">316971</id>
      <size type="integer">5493</size>
      <uploader-id type="integer">12465</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/316971/exists-2-3-stable.patch</url>
    </attachment>
  </attachments>
</ticket>
