<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-05-05T09:50:12+01:00</created-at>
  <creator-id type="integer">56074</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2608</number>
  <permalink>activeresource-support-for-singleton-resources</permalink>
  <priority type="integer">1717</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>23 activeres activeresource active_resource client singleton</tag>
  <title>ActiveResource support for singleton resources?</title>
  <updated-at type="datetime">2011-02-02T19:05:11+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Duncan Mac-Vicar</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2608</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>ActiveResource find(:one) method returns nil when no :from option is passed.

This contradicts the documentation which presents :one and :from as two separate and complementary things.

We have some singleton resources, and we configure the client dynamically using resource introspection, therefore some resources have no fixed url.

If we configure ActiveResource correctly with 'site' and 'collection_name' we have no problem accessing any resource. However if the resource is a singleton, the following surprise elements appear:

One expects Foo.find(:one) to get /foo.xml without the need to hardcode a :from.

One also expects Foo.save and destroy to act on /foo and not on /foos.

I would like to contribute a patch. However the fix for find(:one) can be done by just extending the case statement in find_one, however a complete support would require making ActiveResource aware that the resource is a singleton. This could be done using a singleton flag, but I am not sure if it is the right solution.

However, the current implementation is confusing, as rails supports excellent support on the controller side for singleton resources, but the integration with the client side is not straightforward.</original-body>
  <latest-body>ActiveResource find(:one) method returns nil when no :from option is passed.

This contradicts the documentation which presents :one and :from as two separate and complementary things.

We have some singleton resources, and we configure the client dynamically using resource introspection, therefore some resources have no fixed url.

If we configure ActiveResource correctly with 'site' and 'collection_name' we have no problem accessing any resource. However if the resource is a singleton, the following surprise elements appear:

One expects Foo.find(:one) to get /foo.xml without the need to hardcode a :from.

One also expects Foo.save and destroy to act on /foo and not on /foos.

I would like to contribute a patch. However the fix for find(:one) can be done by just extending the case statement in find_one, however a complete support would require making ActiveResource aware that the resource is a singleton. This could be done using a singleton flag, but I am not sure if it is the right solution.

However, the current implementation is confusing, as rails supports excellent support on the controller side for singleton resources, but the integration with the client side is not straightforward.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActiveResource find(:one) method returns nil when no :from
option is passed.&lt;/p&gt;
&lt;p&gt;This contradicts the documentation which presents :one and :from
as two separate and complementary things.&lt;/p&gt;
&lt;p&gt;We have some singleton resources, and we configure the client
dynamically using resource introspection, therefore some resources
have no fixed url.&lt;/p&gt;
&lt;p&gt;If we configure ActiveResource correctly with 'site' and
'collection_name' we have no problem accessing any resource.
However if the resource is a singleton, the following surprise
elements appear:&lt;/p&gt;
&lt;p&gt;One expects Foo.find(:one) to get /foo.xml without the need to
hardcode a :from.&lt;/p&gt;
&lt;p&gt;One also expects Foo.save and destroy to act on /foo and not on
/foos.&lt;/p&gt;
&lt;p&gt;I would like to contribute a patch. However the fix for
find(:one) can be done by just extending the case statement in
find_one, however a complete support would require making
ActiveResource aware that the resource is a singleton. This could
be done using a singleton flag, but I am not sure if it is the
right solution.&lt;/p&gt;
&lt;p&gt;However, the current implementation is confusing, as rails
supports excellent support on the controller side for singleton
resources, but the integration with the client side is not
straightforward.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveResource find(:one) method returns nil when no :from option is passed.

This contradicts the documentation which presents :one and :from as two separate and complementary things.

We have some singleton resources, and we configure the client dynamically using resource introspection, therefore some resources have no fixed url.

If we configure ActiveResource correctly with 'site' and 'collection_name' we have no problem accessing any resource. However if the resource is a singleton, the following surprise elements appear:

One expects Foo.find(:one) to get /foo.xml without the need to hardcode a :from.

One also expects Foo.save and destroy to act on /foo and not on /foos.

I would like to contribute a patch. However the fix for find(:one) can be done by just extending the case statement in find_one, however a complete support would require making ActiveResource aware that the resource is a singleton. This could be done using a singleton flag, but I am not sure if it is the right solution.

However, the current implementation is confusing, as rails supports excellent support on the controller side for singleton resources, but the integration with the client side is not straightforward.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveResource find(:one) method returns nil when no :from
option is passed.&lt;/p&gt;
&lt;p&gt;This contradicts the documentation which presents :one and :from
as two separate and complementary things.&lt;/p&gt;
&lt;p&gt;We have some singleton resources, and we configure the client
dynamically using resource introspection, therefore some resources
have no fixed url.&lt;/p&gt;
&lt;p&gt;If we configure ActiveResource correctly with 'site' and
'collection_name' we have no problem accessing any resource.
However if the resource is a singleton, the following surprise
elements appear:&lt;/p&gt;
&lt;p&gt;One expects Foo.find(:one) to get /foo.xml without the need to
hardcode a :from.&lt;/p&gt;
&lt;p&gt;One also expects Foo.save and destroy to act on /foo and not on
/foos.&lt;/p&gt;
&lt;p&gt;I would like to contribute a patch. However the fix for
find(:one) can be done by just extending the case statement in
find_one, however a complete support would require making
ActiveResource aware that the resource is a singleton. This could
be done using a singleton flag, but I am not sure if it is the
right solution.&lt;/p&gt;
&lt;p&gt;However, the current implementation is confusing, as rails
supports excellent support on the controller side for singleton
resources, but the integration with the client side is not
straightforward.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-05T09:50:12+01:00</created-at>
      <creator-id type="integer">56074</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2608</number>
      <permalink>activeresource-support-for-singleton-resources</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3 activeres activeresource active_resource client singleton</tag>
      <title>ActiveResource support for singleton resources?</title>
      <updated-at type="datetime">2009-05-05T09:50:17+01:00</updated-at>
      <user-id type="integer">56074</user-id>
      <version type="integer">1</version>
      <user-name>Duncan Mac-Vicar</user-name>
      <creator-name>Duncan Mac-Vicar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2608</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>One workaround that worked for me was to redefine element_path and collection_path to not include the id. THis solution was proposed as a workaround in some mailing list by people having the same problem.
 
def self.element_path(id, prefix_options = {}, query_options = nil)
    prefix_options, query_options = split_options(prefix_options) if query_options.nil?
    # original: &quot;#{prefix(prefix_options)}#{collection_name}/#{id}.#{format.extension}#{query_string(query_options)}&quot;
    &quot;#{prefix(prefix_options)}#{collection_name}.#{format.extension}#{query_string(query_options)}&quot;
end

collection_name singular
def self.collection_path(prefix_options = {}, query_options = nil)
   prefix_options, query_options = split_options(prefix_options) if query_options.nil?
   # original: &quot;#{prefix(prefix_options)}#{collection_name}.#{format.extension}#{query_string(query_options)}&quot;
   &quot;#{prefix(prefix_options)}#{collection_name}.#{format.extension}#{query_string(query_options)}&quot;
end

And then fix singularize collection_name.

Thanks to the behavior of ActiveResource, where for a singular resource Foo.find would go to /foos/.xml (because no :id) the workaround above makes find with no arguments to use /foo.xml and the result works fine with save and destroy.
find(:all) does not work but this is expected.

May be a good improvement for ActiveResource would be to have a flag for singular resources and automatically use those element_path and collection_path in those cases.

I could contribute a patch for that, but I would like to know if the solution is ok.</body>
      <body-html>&lt;div&gt;&lt;p&gt;One workaround that worked for me was to redefine element_path
and collection_path to not include the id. THis solution was
proposed as a workaround in some mailing list by people having the
same problem.&lt;/p&gt;
&lt;p&gt;def self.element_path(id, prefix_options = {}, query_options =
nil)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;prefix_options, query_options = split_options(prefix_options) if query_options.nil?
# original: &quot;#{prefix(prefix_options)}#{collection_name}/#{id}.#{format.extension}#{query_string(query_options)}&quot;
&quot;#{prefix(prefix_options)}#{collection_name}.#{format.extension}#{query_string(query_options)}&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;collection_name singular def self.collection_path(prefix_options
= {}, query_options = nil) prefix_options, query_options =
split_options(prefix_options) if query_options.nil? # original:
&quot;#{prefix(prefix_options)}#{collection_name}.#{format.extension}#{query_string(query_options)}&quot;
&quot;#{prefix(prefix_options)}#{collection_name}.#{format.extension}#{query_string(query_options)}&quot;
end&lt;/p&gt;
&lt;p&gt;And then fix singularize collection_name.&lt;/p&gt;
&lt;p&gt;Thanks to the behavior of ActiveResource, where for a singular
resource Foo.find would go to /foos/.xml (because no :id) the
workaround above makes find with no arguments to use /foo.xml and
the result works fine with save and destroy. find(:all) does not
work but this is expected.&lt;/p&gt;
&lt;p&gt;May be a good improvement for ActiveResource would be to have a
flag for singular resources and automatically use those
element_path and collection_path in those cases.&lt;/p&gt;
&lt;p&gt;I could contribute a patch for that, but I would like to know if
the solution is ok.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-07T23:07:22+01:00</created-at>
      <creator-id type="integer">56074</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2608</number>
      <permalink>activeresource-support-for-singleton-resources</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3 activeres activeresource active_resource client singleton</tag>
      <title>ActiveResource support for singleton resources?</title>
      <updated-at type="datetime">2009-05-07T23:07:25+01:00</updated-at>
      <user-id type="integer">56074</user-id>
      <version type="integer">2</version>
      <user-name>Duncan Mac-Vicar</user-name>
      <creator-name>Duncan Mac-Vicar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2608</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-17T16:50:14+01:00</created-at>
      <creator-id type="integer">56074</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 424
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2608</number>
      <permalink>activeresource-support-for-singleton-resources</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3 activeres activeresource active_resource client singleton</tag>
      <title>ActiveResource support for singleton resources?</title>
      <updated-at type="datetime">2009-05-17T16:50:16+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">3</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Duncan Mac-Vicar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2608</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:48+01:00</created-at>
      <creator-id type="integer">56074</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2608</number>
      <permalink>activeresource-support-for-singleton-resources</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3 activeres activeresource active_resource client singleton</tag>
      <title>ActiveResource support for singleton resources?</title>
      <updated-at type="datetime">2010-05-04T18:48:48+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Duncan Mac-Vicar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2608</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T17:02:51+00:00</created-at>
      <creator-id type="integer">56074</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3 activeres activeresource active_resource client singleton
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2608</number>
      <permalink>activeresource-support-for-singleton-resources</permalink>
      <priority type="integer">1717</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>23 activeres activeresource active_resource client singleton</tag>
      <title>ActiveResource support for singleton resources?</title>
      <updated-at type="datetime">2011-02-02T19:05:12+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Duncan Mac-Vicar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2608</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T17:02:53+00:00</created-at>
      <creator-id type="integer">56074</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2608</number>
      <permalink>activeresource-support-for-singleton-resources</permalink>
      <priority type="integer">1717</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>23 activeres activeresource active_resource client singleton</tag>
      <title>ActiveResource support for singleton resources?</title>
      <updated-at type="datetime">2011-02-02T19:04:48+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Duncan Mac-Vicar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2608</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
  </versions>
</ticket>
