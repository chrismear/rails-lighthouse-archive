From 9098231d3cc114a323ef8bc9ab0cea8ae6bc432f Mon Sep 17 00:00:00 2001
From: Matteo Vaccari <matteo@polpetta.local>
Date: Sat, 31 Oct 2009 16:34:49 +0100
Subject: [PATCH] fixed random text in literal strings being interpreted as table names

---
 activerecord/lib/active_record/associations.rb     |    6 +++++-
 activerecord/test/cases/associations/eager_test.rb |   18 ++++++++++++++++++
 2 files changed, 23 insertions(+), 1 deletions(-)

diff --git a/activerecord/lib/active_record/associations.rb b/activerecord/lib/active_record/associations.rb
index 0888c41..d52551e 100755
--- a/activerecord/lib/active_record/associations.rb
+++ b/activerecord/lib/active_record/associations.rb
@@ -1760,8 +1760,12 @@ module ActiveRecord
 
         def tables_in_string(string)
           return [] if string.blank?
-          string.scan(/([a-zA-Z_][\.\w]+).?\./).flatten
+          remove_literal_strings(string).scan(/([a-zA-Z_][\.\w]+).?\./).flatten
         end
+        
+        def remove_literal_strings(string)
+          string.gsub(/'(\\'|[^'])*'|"(\\"|[^"])*"/, '')
+        end        
 
         def tables_in_hash(hash)
           return [] if hash.blank?
diff --git a/activerecord/test/cases/associations/eager_test.rb b/activerecord/test/cases/associations/eager_test.rb
index d5a4d90..e9bd360 100644
--- a/activerecord/test/cases/associations/eager_test.rb
+++ b/activerecord/test/cases/associations/eager_test.rb
@@ -661,6 +661,24 @@ class EagerAssociationTest < ActiveRecord::TestCase
     end
   end
 
+  def test_eager_with_dots_in_query_string
+    developer = Developer.create! :name => 'foo.bar'
+    developer.audit_logs.create! :message => "Include me plz!"
+    assert_queries(2) do
+      # Before changes, the dot in the query string will cause random text to be interpreted as table names
+      Developer.find :all, :conditions => "name = 'foo.bar'", :include => :audit_logs
+    end
+  end
+
+  def test_tables_in_string
+    assert_equal ["foo"], Developer.send(:tables_in_string, "foo.")
+    assert_equal [], Developer.send(:tables_in_string, "foo")
+    assert_equal [], Developer.send(:tables_in_string, "x in 'foo.bar'")
+    assert_equal [], Developer.send(:tables_in_string, 'x in "foo.bar"')
+    assert_equal ["foo"], Developer.send(:tables_in_string, "'\\'' foo. '\\''")
+    assert_equal ["foo"], Developer.send(:tables_in_string, '"\"" foo. "\""')
+  end
+
   def test_preconfigured_includes_with_belongs_to
     author = posts(:welcome).author_with_posts
     assert_no_queries {assert_equal 5, author.posts.size}
-- 
1.6.0.2

