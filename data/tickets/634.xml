<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-16T18:30:05+01:00</created-at>
  <creator-id type="integer">3705</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">634</number>
  <permalink>habtm-and-hmt-associations-create-with-invalid-attr-hash-throws-recordinvalid-error</permalink>
  <priority type="integer">116</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>2.1 activerecord bug edge has_many tested</tag>
  <title>#create behaves like #create! on association proxies</title>
  <updated-at type="datetime">2008-10-28T16:34:20+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Brian Dainton</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/634</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>First, here's &quot;the branch of my Rails fork&quot;:http://github.com/bdainton/rails/tree/broken_has_many_creates with &quot;the fix and tests&quot;:http://github.com/bdainton/rails/commit/e648eff1a8eb478d47d9915af2c53437110b10dd exercising the (assumed correct) behavior for this issue.

In short, if you try to call #create on a HasAndBelongsToManyAssociation or HasManyThroughAssociation and pass in model attribute values that do not validate, the method no longer silently handles validation errors by producing an invalid AR instance and populating the object's 'errors'.  Instead, it throws an ActiveRecord::RecordInvalid error (I expect this behavior from #create!, not #create).

Tracking this down, it looks as if the #insert_record method on both of these associations is defaulting its 'force' param to true, when it should be false by default.</original-body>
  <latest-body>First, here's &quot;the branch of my Rails fork&quot;:http://github.com/bdainton/rails/tree/broken_has_many_creates with &quot;the fix and tests&quot;:http://github.com/bdainton/rails/commit/e648eff1a8eb478d47d9915af2c53437110b10dd exercising the (assumed correct) behavior for this issue.

In short, if you try to call #create on a HasAndBelongsToManyAssociation or HasManyThroughAssociation and pass in model attribute values that do not validate, the method no longer silently handles validation errors by producing an invalid AR instance and populating the object's 'errors'.  Instead, it throws an ActiveRecord::RecordInvalid error (I expect this behavior from #create!, not #create).

Tracking this down, it looks as if the #insert_record method on both of these associations is defaulting its 'force' param to true, when it should be false by default.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
First, here's &lt;a href=&quot;http://github.com/bdainton/rails/tree/broken_has_many_creates&quot;&gt;the branch of my Rails fork&lt;/a&gt; with &lt;a href=&quot;http://github.com/bdainton/rails/commit/e648eff1a8eb478d47d9915af2c53437110b10dd&quot;&gt;the fix and tests&lt;/a&gt; exercising the (assumed correct) behavior for this issue.
&lt;/p&gt;&lt;p&gt;
In short, if you try to call #create on a HasAndBelongsToManyAssociation or HasManyThroughAssociation and pass in model attribute values that do not validate, the method no longer silently handles validation errors by producing an invalid AR instance and populating the object's 'errors'.  Instead, it throws an ActiveRecord::RecordInvalid error (I expect this behavior from #create!, not #create).
&lt;/p&gt;&lt;p&gt;
Tracking this down, it looks as if the #insert_record method on both of these associations is defaulting its 'force' param to true, when it should be false by default.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>First, here's &quot;the branch of my Rails fork&quot;:http://github.com/bdainton/rails/tree/broken_has_many_creates with &quot;the fix and tests&quot;:http://github.com/bdainton/rails/commit/e648eff1a8eb478d47d9915af2c53437110b10dd exercising the (assumed correct) behavior for this issue.

In short, if you try to call #create on a HasAndBelongsToManyAssociation or HasManyThroughAssociation and pass in model attribute values that do not validate, the method no longer silently handles validation errors by producing an invalid AR instance and populating the object's 'errors'.  Instead, it throws an ActiveRecord::RecordInvalid error (I expect this behavior from #create!, not #create).

Here are the updated tests which show the problem in action.

A validation added to the Person model:
@@@ ruby
class Person &lt; ActiveRecord::Base
  has_many :posts, :through =&gt; :readers

  def validate 
    errors.add('first_name', 'is invalid') if read_attribute(:first_name) == 'InvalidName'
  end
end
@@@

Here are the updated tests for the HMT associations.  The first test (a call to #create!) with an invalid :first_name properly raises the RecordInvalid error.

The second test (a call to #create) errors because it ALSO raises the RecordInvalid error.
@@@ ruby
class HasManyThroughAssociationsTest &lt; ActiveRecord::TestCase
  fixtures :posts, :readers, :people

  def test_attempted_associate_with_invalid_create_exclamation_raises_error
    assert_raises(ActiveRecord::RecordInvalid) do
      posts(:thinking).people.create!(:first_name=&gt;&quot;InvalidName&quot;)
    end
  end
  
  def test_attempted_associate_with_invalid_create_does_not_raise_error
    person = posts(:thinking).people.create(:first_name=&gt;&quot;InvalidName&quot;)
    assert !person.valid?
    assert 1, person.errors.size
  end
end
@@@

Here are the updated tests for the HABTM associations.  Likewise, the first test (a call to #create!) with an invalid :name properly raises the RecordInvalid error.

The second test (a call to #create) errors because it ALSO raises the RecordInvalid error.
@@@ ruby
class ProjectWithShortNamedDevelopers &lt; ActiveRecord::Base
  set_table_name 'projects'
  has_and_belongs_to_many :developers,
    :class_name =&gt; &quot;DeveloperWithShortName&quot;,
    :join_table =&gt; &quot;developers_projects&quot;,
    :foreign_key =&gt; &quot;project_id&quot;,
    :association_foreign_key =&gt; &quot;developer_id&quot;
end

class DeveloperWithShortName &lt; ActiveRecord::Base
  set_table_name 'developers'
  has_and_belongs_to_many :projects,
    :class_name =&gt; &quot;ProjectWithShortNamedDevelopers&quot;,
    :join_table =&gt; :developers_projects,
    :association_foreign_key =&gt; :project_id,
    :foreign_key =&gt; &quot;developer_id&quot;
    
  validates_length_of :name, :in =&gt; 3..10
end

class HasAndBelongsToManyAssociationsTest &lt; ActiveRecord::TestCase
  def test_attempted_associate_with_invalid_create_exclamation_raises_error
    project = ProjectWithShortNamedDevelopers.find_by_name('Active Record')
    assert_raises(ActiveRecord::RecordInvalid) do
      project.developers.create!(:name =&gt; 'AnAbnormallyLongFirstName')
    end
  end
  
  def test_attempted_associate_with_invalid_create_does_not_raise_error
    project = ProjectWithShortNamedDevelopers.find_by_name('Active Record')
    developer = project.developers.create(:name =&gt; 'AnAbnormallyLongFirstName')
    assert !developer.valid?
    assert 1, developer.errors.size
  end
end
@@@


Tracking this down, it looks as if the #insert_record method on both of these associations is defaulting its 'force' param to true, when it should be false by default.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
First, here's &lt;a href=&quot;http://github.com/bdainton/rails/tree/broken_has_many_creates&quot;&gt;the branch of my Rails fork&lt;/a&gt; with &lt;a href=&quot;http://github.com/bdainton/rails/commit/e648eff1a8eb478d47d9915af2c53437110b10dd&quot;&gt;the fix and tests&lt;/a&gt; exercising the (assumed correct) behavior for this issue.
&lt;/p&gt;&lt;p&gt;
In short, if you try to call #create on a HasAndBelongsToManyAssociation or HasManyThroughAssociation and pass in model attribute values that do not validate, the method no longer silently handles validation errors by producing an invalid AR instance and populating the object's 'errors'.  Instead, it throws an ActiveRecord::RecordInvalid error (I expect this behavior from #create!, not #create).
&lt;/p&gt;&lt;p&gt;
Here are the updated tests which show the problem in action.
&lt;/p&gt;&lt;p&gt;
A validation added to the Person model:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Person &amp;lt; ActiveRecord::Base
  has_many :posts, :through =&amp;gt; :readers

  def validate 
    errors.add('first_name', 'is invalid') if read_attribute(:first_name) == 'InvalidName'
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Here are the updated tests for the HMT associations.  The first test (a call to #create!) with an invalid :first_name properly raises the RecordInvalid error.
&lt;/p&gt;&lt;p&gt;
The second test (a call to #create) errors because it ALSO raises the RecordInvalid error.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class HasManyThroughAssociationsTest &amp;lt; ActiveRecord::TestCase
  fixtures :posts, :readers, :people

  def test_attempted_associate_with_invalid_create_exclamation_raises_error
    assert_raises(ActiveRecord::RecordInvalid) do
      posts(:thinking).people.create!(:first_name=&amp;gt;&amp;quot;InvalidName&amp;quot;)
    end
  end
  
  def test_attempted_associate_with_invalid_create_does_not_raise_error
    person = posts(:thinking).people.create(:first_name=&amp;gt;&amp;quot;InvalidName&amp;quot;)
    assert !person.valid?
    assert 1, person.errors.size
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Here are the updated tests for the HABTM associations.  Likewise, the first test (a call to #create!) with an invalid :name properly raises the RecordInvalid error.
&lt;/p&gt;&lt;p&gt;
The second test (a call to #create) errors because it ALSO raises the RecordInvalid error.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class ProjectWithShortNamedDevelopers &amp;lt; ActiveRecord::Base
  set_table_name 'projects'
  has_and_belongs_to_many :developers,
    :class_name =&amp;gt; &amp;quot;DeveloperWithShortName&amp;quot;,
    :join_table =&amp;gt; &amp;quot;developers_projects&amp;quot;,
    :foreign_key =&amp;gt; &amp;quot;project_id&amp;quot;,
    :association_foreign_key =&amp;gt; &amp;quot;developer_id&amp;quot;
end

class DeveloperWithShortName &amp;lt; ActiveRecord::Base
  set_table_name 'developers'
  has_and_belongs_to_many :projects,
    :class_name =&amp;gt; &amp;quot;ProjectWithShortNamedDevelopers&amp;quot;,
    :join_table =&amp;gt; :developers_projects,
    :association_foreign_key =&amp;gt; :project_id,
    :foreign_key =&amp;gt; &amp;quot;developer_id&amp;quot;
    
  validates_length_of :name, :in =&amp;gt; 3..10
end

class HasAndBelongsToManyAssociationsTest &amp;lt; ActiveRecord::TestCase
  def test_attempted_associate_with_invalid_create_exclamation_raises_error
    project = ProjectWithShortNamedDevelopers.find_by_name('Active Record')
    assert_raises(ActiveRecord::RecordInvalid) do
      project.developers.create!(:name =&amp;gt; 'AnAbnormallyLongFirstName')
    end
  end
  
  def test_attempted_associate_with_invalid_create_does_not_raise_error
    project = ProjectWithShortNamedDevelopers.find_by_name('Active Record')
    developer = project.developers.create(:name =&amp;gt; 'AnAbnormallyLongFirstName')
    assert !developer.valid?
    assert 1, developer.errors.size
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Tracking this down, it looks as if the #insert_record method on both of these associations is defaulting its 'force' param to true, when it should be false by default.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-26T21:09:23+01:00</created-at>
      <creator-id type="integer">3705</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">634</number>
      <permalink>habtm-and-hmt-associations-create-with-invalid-attr-hash-throws-recordinvalid-error</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge has_many tested</tag>
      <title>#create behaves like #create! on association proxies</title>
      <updated-at type="datetime">2008-07-26T21:09:23+01:00</updated-at>
      <user-id type="integer">3705</user-id>
      <version type="integer">1</version>
      <user-name>Brian Dainton</user-name>
      <creator-name>Brian Dainton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/634</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Staling out, please reopen if this is still a problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Staling out, please reopen if this is still a problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-28T16:34:19+00:00</created-at>
      <creator-id type="integer">3705</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">634</number>
      <permalink>habtm-and-hmt-associations-create-with-invalid-attr-hash-throws-recordinvalid-error</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.1 activerecord bug edge has_many tested</tag>
      <title>#create behaves like #create! on association proxies</title>
      <updated-at type="datetime">2008-10-28T16:34:20+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Brian Dainton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/634</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
