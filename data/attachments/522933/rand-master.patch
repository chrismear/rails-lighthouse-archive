From 231a134091e9ddff8ee76f87456a195444219b65 Mon Sep 17 00:00:00 2001
From: Santiago Pastorino <santiago@wyeworks.com>
Date: Sun, 16 May 2010 15:20:52 -0300
Subject: [PATCH] Change on Array extension from rand => random_element [#4555 state:committed]

---
 .../associations/eager_load_nested_include_test.rb |   14 +++++++-------
 activerecord/test/cases/named_scope_test.rb        |    2 +-
 .../active_support/core_ext/array/random_access.rb |    8 +++++++-
 activesupport/test/core_ext/array_ext_test.rb      |   12 ++++++++----
 4 files changed, 23 insertions(+), 13 deletions(-)

diff --git a/activerecord/test/cases/associations/eager_load_nested_include_test.rb b/activerecord/test/cases/associations/eager_load_nested_include_test.rb
index e8db6d5..2beb3f8 100644
--- a/activerecord/test/cases/associations/eager_load_nested_include_test.rb
+++ b/activerecord/test/cases/associations/eager_load_nested_include_test.rb
@@ -17,7 +17,7 @@ module Remembered
 
   module ClassMethods
     def remembered; @@remembered ||= []; end
-    def rand; @@remembered.rand; end
+    def random_element; @@remembered.random_element; end
   end
 end
 
@@ -79,14 +79,14 @@ class EagerLoadPolyAssocsTest < ActiveRecord::TestCase
       [Circle, Square, Triangle, NonPolyOne, NonPolyTwo].map(&:create!)
     end
     1.upto(NUM_SIMPLE_OBJS) do
-      PaintColor.create!(:non_poly_one_id => NonPolyOne.rand.id)
-      PaintTexture.create!(:non_poly_two_id => NonPolyTwo.rand.id)
+      PaintColor.create!(:non_poly_one_id => NonPolyOne.random_element.id)
+      PaintTexture.create!(:non_poly_two_id => NonPolyTwo.random_element.id)
     end
     1.upto(NUM_SHAPE_EXPRESSIONS) do
-      shape_type = [Circle, Square, Triangle].rand
-      paint_type = [PaintColor, PaintTexture].rand
-      ShapeExpression.create!(:shape_type => shape_type.to_s, :shape_id => shape_type.rand.id,
-                              :paint_type => paint_type.to_s, :paint_id => paint_type.rand.id)
+      shape_type = [Circle, Square, Triangle].random_element
+      paint_type = [PaintColor, PaintTexture].random_element
+      ShapeExpression.create!(:shape_type => shape_type.to_s, :shape_id => shape_type.random_element.id,
+                              :paint_type => paint_type.to_s, :paint_id => paint_type.random_element.id)
     end
   end
 
diff --git a/activerecord/test/cases/named_scope_test.rb b/activerecord/test/cases/named_scope_test.rb
index 9db0e7c..2007f54 100644
--- a/activerecord/test/cases/named_scope_test.rb
+++ b/activerecord/test/cases/named_scope_test.rb
@@ -301,7 +301,7 @@ class NamedScopeTest < ActiveRecord::TestCase
   end
 
   def test_rand_should_select_a_random_object_from_proxy
-    assert_kind_of Topic, Topic.approved.rand
+    assert_kind_of Topic, Topic.approved.random_element
   end
 
   def test_should_use_where_in_query_for_named_scope
diff --git a/activesupport/lib/active_support/core_ext/array/random_access.rb b/activesupport/lib/active_support/core_ext/array/random_access.rb
index 343003f..dcd37ea 100644
--- a/activesupport/lib/active_support/core_ext/array/random_access.rb
+++ b/activesupport/lib/active_support/core_ext/array/random_access.rb
@@ -1,6 +1,12 @@
 class Array
-  # Returns a random element from the array.
+  # :nodoc:
   def rand
+    ActiveSupport::Deprecation.warn "Array#rand is deprecated, use random_element instead", caller
+    random_element
+  end
+
+  # Returns a random element from the array.
+  def random_element
     self[Kernel.rand(length)]
   end
 end
diff --git a/activesupport/test/core_ext/array_ext_test.rb b/activesupport/test/core_ext/array_ext_test.rb
index e761746..ebd6806 100644
--- a/activesupport/test/core_ext/array_ext_test.rb
+++ b/activesupport/test/core_ext/array_ext_test.rb
@@ -358,15 +358,19 @@ class ArrayUniqByTests < Test::Unit::TestCase
   end
 end
 
-class ArrayExtRandomTests < Test::Unit::TestCase
+class ArrayExtRandomTests < ActiveSupport::TestCase
   def test_random_element_from_array
-    assert_nil [].rand
+    assert_nil [].random_element
 
     Kernel.expects(:rand).with(1).returns(0)
-    assert_equal 'x', ['x'].rand
+    assert_equal 'x', ['x'].random_element
 
     Kernel.expects(:rand).with(3).returns(1)
-    assert_equal 2, [1, 2, 3].rand
+    assert_equal 2, [1, 2, 3].random_element
+  end
+
+  def test_deprecated_rand_on_array
+    assert_deprecated { [].rand }
   end
 end
 
-- 
1.7.1

