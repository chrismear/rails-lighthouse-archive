<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-01T07:59:23+01:00</created-at>
  <creator-id type="integer">135078</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6661</number>
  <permalink>multiple-having-calls-on-an-activerecordrelation-causes-wrong-number-of-arguments-2-for-1-error</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Multiple having calls on an ActiveRecord::Relation causes &quot;wrong number of arguments (2 for 1)&quot; error</title>
  <updated-at type="datetime">2011-04-02T00:59:16+01:00</updated-at>
  <user-id type="integer">143965</user-id>
  <version type="integer">2</version>
  <user-name>Lewis Marshall</user-name>
  <creator-name>Artem Ignatyev</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6661</url>
  <priority-name nil="true"></priority-name>
  <original-body>Let's use any model (i.e. Model) and execute in console:

**Model.select('id').group('id').having('2 &gt; 1')**

and we'll get the sql query similar to:

**SELECT id FROM &quot;models&quot; GROUP BY id HAVING 2 &gt; 1**

That is okay.

Then execute in console:

**Model.select('id').group('id').having('2 &gt; 1').having('3 &gt; 1')**

and we'll get the following error:

ArgumentError: wrong number of arguments (2 for 1)
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `having'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `build_arel'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:150:in `arel'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:64:in `to_a'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:356:in `inspect'


Why does it happen?

Calling having on ActiveRecord::Relation collects having clauses into an array
**relation.having_values += build_where(*args) unless args.blank?**

The the following code in active_record/relation/query_methods.rb:181:in `build_arel' passes as many arguments to arel.having as the quantity of collection having clauses in relation. But in seems the having method of arel accepts only 1 argument expr.

**arel = arel.having(*@having_values.uniq.reject{|h| h.blank?}) unless @having_values.empty?**</original-body>
  <latest-body>Let's use any model (i.e. Model) and execute in console:

**Model.select('id').group('id').having('2 &gt; 1')**

and we'll get the sql query similar to:

**SELECT id FROM &quot;models&quot; GROUP BY id HAVING 2 &gt; 1**

That is okay.

Then execute in console:

**Model.select('id').group('id').having('2 &gt; 1').having('3 &gt; 1')**

and we'll get the following error:

ArgumentError: wrong number of arguments (2 for 1)
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `having'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `build_arel'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:150:in `arel'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:64:in `to_a'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:356:in `inspect'


Why does it happen?

Calling having on ActiveRecord::Relation collects having clauses into an array
**relation.having_values += build_where(*args) unless args.blank?**

The the following code in active_record/relation/query_methods.rb:181:in `build_arel' passes as many arguments to arel.having as the quantity of collection having clauses in relation. But in seems the having method of arel accepts only 1 argument expr.

**arel = arel.having(*@having_values.uniq.reject{|h| h.blank?}) unless @having_values.empty?**</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Let's use any model (i.e. Model) and execute in console:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model.select('id').group('id').having('2 &amp;gt;
1')&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;and we'll get the sql query similar to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SELECT id FROM &quot;models&quot; GROUP BY id HAVING 2 &amp;gt;
1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That is okay.&lt;/p&gt;
&lt;p&gt;Then execute in console:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model.select('id').group('id').having('2 &amp;gt;
1').having('3 &amp;gt; 1')&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;and we'll get the following error:&lt;/p&gt;
&lt;p&gt;ArgumentError: wrong number of arguments (2 for 1)&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `having'
from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `build_arel'
from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:150:in `arel'
from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:64:in `to_a'
from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:356:in `inspect'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Why does it happen?&lt;/p&gt;
&lt;p&gt;Calling having on ActiveRecord::Relation collects having clauses
into an array&lt;br&gt;
&lt;strong&gt;relation.having_values += build_where(*args) unless
args.blank?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The the following code in
active_record/relation/query_methods.rb:181:in `build_arel' passes
as many arguments to arel.having as the quantity of collection
having clauses in relation. But in seems the having method of arel
accepts only 1 argument expr.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;arel = arel.having(*@having_values.uniq.reject{|h|
h.blank?}) unless @having_values.empty?&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Let's use any model (i.e. Model) and execute in console:

**Model.select('id').group('id').having('2 &gt; 1')**

and we'll get the sql query similar to:

**SELECT id FROM &quot;models&quot; GROUP BY id HAVING 2 &gt; 1**

That is okay.

Then execute in console:

**Model.select('id').group('id').having('2 &gt; 1').having('3 &gt; 1')**

and we'll get the following error:

ArgumentError: wrong number of arguments (2 for 1)
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `having'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `build_arel'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:150:in `arel'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:64:in `to_a'
	from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:356:in `inspect'


Why does it happen?

Calling having on ActiveRecord::Relation collects having clauses into an array
**relation.having_values += build_where(*args) unless args.blank?**

The the following code in active_record/relation/query_methods.rb:181:in `build_arel' passes as many arguments to arel.having as the quantity of collection having clauses in relation. But in seems the having method of arel accepts only 1 argument expr.

**arel = arel.having(*@having_values.uniq.reject{|h| h.blank?}) unless @having_values.empty?**</body>
      <body-html>&lt;div&gt;&lt;p&gt;Let's use any model (i.e. Model) and execute in console:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model.select('id').group('id').having('2 &amp;gt;
1')&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;and we'll get the sql query similar to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SELECT id FROM &quot;models&quot; GROUP BY id HAVING 2 &amp;gt;
1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That is okay.&lt;/p&gt;
&lt;p&gt;Then execute in console:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model.select('id').group('id').having('2 &amp;gt;
1').having('3 &amp;gt; 1')&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;and we'll get the following error:&lt;/p&gt;
&lt;p&gt;ArgumentError: wrong number of arguments (2 for 1)&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `having'
from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `build_arel'
from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:150:in `arel'
from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:64:in `to_a'
from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:356:in `inspect'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Why does it happen?&lt;/p&gt;
&lt;p&gt;Calling having on ActiveRecord::Relation collects having clauses
into an array&lt;br&gt;
&lt;strong&gt;relation.having_values += build_where(*args) unless
args.blank?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The the following code in
active_record/relation/query_methods.rb:181:in `build_arel' passes
as many arguments to arel.having as the quantity of collection
having clauses in relation. But in seems the having method of arel
accepts only 1 argument expr.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;arel = arel.having(*@having_values.uniq.reject{|h|
h.blank?}) unless @having_values.empty?&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-01T07:59:23+01:00</created-at>
      <creator-id type="integer">135078</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6661</number>
      <permalink>multiple-having-calls-on-an-activerecordrelation-causes-wrong-number-of-arguments-2-for-1-error</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Multiple having calls on an ActiveRecord::Relation causes &quot;wrong number of arguments (2 for 1)&quot; error</title>
      <updated-at type="datetime">2011-04-01T08:01:22+01:00</updated-at>
      <user-id type="integer">135078</user-id>
      <version type="integer">1</version>
      <user-name>Artem Ignatyev</user-name>
      <creator-name>Artem Ignatyev</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6661</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've spotted the problem with this.

Looking at the latest rails/arel source, Arel::SelectManager#having takes multiple arguments but Arel::Table#having only takes a single argument. Splatting the Arel::Table#having argument seems to solve the problem you have mentioned.

I'm new to bugfixing so not sure how to sufficiently verify this doesnt break anything else!</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've spotted the problem with this.&lt;/p&gt;
&lt;p&gt;Looking at the latest rails/arel source,
Arel::SelectManager#having takes multiple arguments but
Arel::Table#having only takes a single argument. Splatting the
Arel::Table#having argument seems to solve the problem you have
mentioned.&lt;/p&gt;
&lt;p&gt;I'm new to bugfixing so not sure how to sufficiently verify this
doesnt break anything else!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-02T00:59:12+01:00</created-at>
      <creator-id type="integer">135078</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6661</number>
      <permalink>multiple-having-calls-on-an-activerecordrelation-causes-wrong-number-of-arguments-2-for-1-error</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Multiple having calls on an ActiveRecord::Relation causes &quot;wrong number of arguments (2 for 1)&quot; error</title>
      <updated-at type="datetime">2011-04-02T00:59:16+01:00</updated-at>
      <user-id type="integer">143965</user-id>
      <version type="integer">2</version>
      <user-name>Lewis Marshall</user-name>
      <creator-name>Artem Ignatyev</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6661</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
