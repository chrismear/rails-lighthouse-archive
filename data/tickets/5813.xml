<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-15T08:31:21+01:00</created-at>
  <creator-id type="integer">76713</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5813</number>
  <permalink>rails-ujs-driver-events</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>events javascript ujs</tag>
  <title>Rails UJS driver events</title>
  <updated-at type="datetime">2010-10-15T10:26:11+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">2</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Philippe Lang</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5813</url>
  <priority-name>Low</priority-name>
  <original-body>Hi,

Rails UJS driver generates 5 differents javascript events during an ajax call:

* ajax:before
* ajax:complete
* ajax:success
* ajax:failure
* ajax:after

In order to react to these events, for example if you want to enable a visual feedback during a long ajax call, javascript code like this is necessary:

@@@
&lt;%= javascript_tag do %&gt;
		
		Event.observe('myform', 'ajax:before', function(event) {
		});
		
		Event.observe('myform', 'ajax:after', function(event) {
		});
		
		Event.observe('myform', 'ajax:success', function(event) {  
		});
		
		Event.observe('myform', 'ajax:failure', function(event) {
		});
			
		Event.observe('myform', 'ajax:complete', function(event) {
		});
	
	&lt;% end %&gt;
@@@

Although it works fine, it does not allow the programmer to use rails prototype and scriptaculous helpers in the events.

I came up with this small helper:

@@@
def javascript_event_tag(name, event, &amp;block)
    content = &quot;Event.observe('#{name}', '#{event}', function() {&quot;
    content = content + update_page(&amp;block)
    content = content + &quot;});&quot;
     
    content_tag(:script, javascript_cdata_section(content))
  end
@@@

This makes it possible to write code like:

@@@
&lt;div id=&quot;wait&quot; style=&quot;display:none&quot;&gt;
    &lt;img src=&quot;/images/ajax-loader.gif&quot;&gt; Please wait...
&lt;/div&gt;

&lt;%= link_to 'ajax call', 'code_on_controller', :id =&gt; &quot;mylink&quot;, :remote =&gt; true %&gt;

&lt;%= 
   javascript_event_tag('mylink', 'ajax:before') do |page|
     page.show 'wait'
   end
 %&gt;
 &lt;%= 
   javascript_event_tag('mylink', 'ajax:complete') do |page|
     page.hide 'wait'
   end
 %&gt;
@@@

I'm not sure if that would be a good idea to include this in rails, since much of the rails 2 ajax helpers have been dropped in rails 3. But in case it can help anyone, I post it here.</original-body>
  <latest-body>Hi,

Rails UJS driver generates 5 differents javascript events during an ajax call:

* ajax:before
* ajax:complete
* ajax:success
* ajax:failure
* ajax:after

In order to react to these events, for example if you want to enable a visual feedback during a long ajax call, javascript code like this is necessary:

@@@
&lt;%= javascript_tag do %&gt;
		
		Event.observe('myform', 'ajax:before', function(event) {
		});
		
		Event.observe('myform', 'ajax:after', function(event) {
		});
		
		Event.observe('myform', 'ajax:success', function(event) {  
		});
		
		Event.observe('myform', 'ajax:failure', function(event) {
		});
			
		Event.observe('myform', 'ajax:complete', function(event) {
		});
	
	&lt;% end %&gt;
@@@

Although it works fine, it does not allow the programmer to use rails prototype and scriptaculous helpers in the events.

I came up with this small helper:

@@@
def javascript_event_tag(name, event, &amp;block)
    content = &quot;Event.observe('#{name}', '#{event}', function() {&quot;
    content = content + update_page(&amp;block)
    content = content + &quot;});&quot;
     
    content_tag(:script, javascript_cdata_section(content))
  end
@@@

This makes it possible to write code like:

@@@
&lt;div id=&quot;wait&quot; style=&quot;display:none&quot;&gt;
    &lt;img src=&quot;/images/ajax-loader.gif&quot;&gt; Please wait...
&lt;/div&gt;

&lt;%= link_to 'ajax call', 'code_on_controller', :id =&gt; &quot;mylink&quot;, :remote =&gt; true %&gt;

&lt;%= 
   javascript_event_tag('mylink', 'ajax:before') do |page|
     page.show 'wait'
   end
 %&gt;
 &lt;%= 
   javascript_event_tag('mylink', 'ajax:complete') do |page|
     page.hide 'wait'
   end
 %&gt;
@@@

I'm not sure if that would be a good idea to include this in rails, since much of the rails 2 ajax helpers have been dropped in rails 3. But in case it can help anyone, I post it here.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Rails UJS driver generates 5 differents javascript events during
an ajax call:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ajax:before&lt;/li&gt;
&lt;li&gt;ajax:complete&lt;/li&gt;
&lt;li&gt;ajax:success&lt;/li&gt;
&lt;li&gt;ajax:failure&lt;/li&gt;
&lt;li&gt;ajax:after&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to react to these events, for example if you want to
enable a visual feedback during a long ajax call, javascript code
like this is necessary:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;%= javascript_tag do %&amp;gt;
        
        Event.observe('myform', 'ajax:before', function(event) {
        });
        
        Event.observe('myform', 'ajax:after', function(event) {
        });
        
        Event.observe('myform', 'ajax:success', function(event) {  
        });
        
        Event.observe('myform', 'ajax:failure', function(event) {
        });
            
        Event.observe('myform', 'ajax:complete', function(event) {
        });
    
    &amp;lt;% end %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Although it works fine, it does not allow the programmer to use
rails prototype and scriptaculous helpers in the events.&lt;/p&gt;
&lt;p&gt;I came up with this small helper:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def javascript_event_tag(name, event, &amp;amp;block)
    content = &quot;Event.observe('#{name}', '#{event}', function() {&quot;
    content = content + update_page(&amp;amp;block)
    content = content + &quot;});&quot;
     
    content_tag(:script, javascript_cdata_section(content))
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This makes it possible to write code like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;div id=&quot;wait&quot; style=&quot;display:none&quot;&amp;gt;
    &amp;lt;img src=&quot;/images/ajax-loader.gif&quot;&amp;gt; Please wait...
&amp;lt;/div&amp;gt;

&amp;lt;%= link_to 'ajax call', 'code_on_controller', :id =&amp;gt; &quot;mylink&quot;, :remote =&amp;gt; true %&amp;gt;

&amp;lt;%= 
   javascript_event_tag('mylink', 'ajax:before') do |page|
     page.show 'wait'
   end
 %&amp;gt;
 &amp;lt;%= 
   javascript_event_tag('mylink', 'ajax:complete') do |page|
     page.hide 'wait'
   end
 %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm not sure if that would be a good idea to include this in
rails, since much of the rails 2 ajax helpers have been dropped in
rails 3. But in case it can help anyone, I post it here.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

Rails UJS driver generates 5 differents javascript events during an ajax call:

* ajax:before
* ajax:complete
* ajax:success
* ajax:failure
* ajax:after

In order to react to these events, for example if you want to enable a visual feedback during a long ajax call, javascript code like this is necessary:

@@@
&lt;%= javascript_tag do %&gt;
		
		Event.observe('myform', 'ajax:before', function(event) {
		});
		
		Event.observe('myform', 'ajax:after', function(event) {
		});
		
		Event.observe('myform', 'ajax:success', function(event) {  
		});
		
		Event.observe('myform', 'ajax:failure', function(event) {
		});
			
		Event.observe('myform', 'ajax:complete', function(event) {
		});
	
	&lt;% end %&gt;
@@@

Although it works fine, it does not allow the programmer to use rails prototype and scriptaculous helpers in the events.

I came up with this small helper:

@@@
def javascript_event_tag(name, event, &amp;block)
    content = &quot;Event.observe('#{name}', '#{event}', function() {&quot;
    content = content + update_page(&amp;block)
    content = content + &quot;});&quot;
     
    content_tag(:script, javascript_cdata_section(content))
  end
@@@

This makes it possible to write code like:

@@@
&lt;div id=&quot;wait&quot; style=&quot;display:none&quot;&gt;
    &lt;img src=&quot;/images/ajax-loader.gif&quot;&gt; Please wait...
&lt;/div&gt;

&lt;%= link_to 'ajax call', 'code_on_controller', :id =&gt; &quot;mylink&quot;, :remote =&gt; true %&gt;

&lt;%= 
   javascript_event_tag('mylink', 'ajax:before') do |page|
     page.show 'wait'
   end
 %&gt;
 &lt;%= 
   javascript_event_tag('mylink', 'ajax:complete') do |page|
     page.hide 'wait'
   end
 %&gt;
@@@

I'm not sure if that would be a good idea to include this in rails, since much of the rails 2 ajax helpers have been dropped in rails 3. But in case it can help anyone, I post it here.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Rails UJS driver generates 5 differents javascript events during
an ajax call:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ajax:before&lt;/li&gt;
&lt;li&gt;ajax:complete&lt;/li&gt;
&lt;li&gt;ajax:success&lt;/li&gt;
&lt;li&gt;ajax:failure&lt;/li&gt;
&lt;li&gt;ajax:after&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to react to these events, for example if you want to
enable a visual feedback during a long ajax call, javascript code
like this is necessary:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;%= javascript_tag do %&amp;gt;
        
        Event.observe('myform', 'ajax:before', function(event) {
        });
        
        Event.observe('myform', 'ajax:after', function(event) {
        });
        
        Event.observe('myform', 'ajax:success', function(event) {  
        });
        
        Event.observe('myform', 'ajax:failure', function(event) {
        });
            
        Event.observe('myform', 'ajax:complete', function(event) {
        });
    
    &amp;lt;% end %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Although it works fine, it does not allow the programmer to use
rails prototype and scriptaculous helpers in the events.&lt;/p&gt;
&lt;p&gt;I came up with this small helper:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def javascript_event_tag(name, event, &amp;amp;block)
    content = &quot;Event.observe('#{name}', '#{event}', function() {&quot;
    content = content + update_page(&amp;amp;block)
    content = content + &quot;});&quot;
     
    content_tag(:script, javascript_cdata_section(content))
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This makes it possible to write code like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;div id=&quot;wait&quot; style=&quot;display:none&quot;&amp;gt;
    &amp;lt;img src=&quot;/images/ajax-loader.gif&quot;&amp;gt; Please wait...
&amp;lt;/div&amp;gt;

&amp;lt;%= link_to 'ajax call', 'code_on_controller', :id =&amp;gt; &quot;mylink&quot;, :remote =&amp;gt; true %&amp;gt;

&amp;lt;%= 
   javascript_event_tag('mylink', 'ajax:before') do |page|
     page.show 'wait'
   end
 %&amp;gt;
 &amp;lt;%= 
   javascript_event_tag('mylink', 'ajax:complete') do |page|
     page.hide 'wait'
   end
 %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm not sure if that would be a good idea to include this in
rails, since much of the rails 2 ajax helpers have been dropped in
rails 3. But in case it can help anyone, I post it here.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-15T08:31:21+01:00</created-at>
      <creator-id type="integer">76713</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5813</number>
      <permalink>rails-ujs-driver-events</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>events javascript ujs</tag>
      <title>Rails UJS driver events</title>
      <updated-at type="datetime">2010-10-15T08:31:25+01:00</updated-at>
      <user-id type="integer">76713</user-id>
      <version type="integer">1</version>
      <user-name>Philippe Lang</user-name>
      <creator-name>Philippe Lang</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5813</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt; I'm not sure if that would be a good idea to include this in rails, since much of the rails 2 ajax helpers have been dropped in rails 3. But in case it can help anyone, I post it here.

I'm sorry but this is the core issue tracker of Rails. This is not a place for posting workarounds for issues. If you believe this is a real issue and/or are willing to write a patch with tests please leave a comment and I'll reopen the ticket.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;I'm not sure if that would be a good idea to include this in
rails, since much of the rails 2 ajax helpers have been dropped in
rails 3. But in case it can help anyone, I post it here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm sorry but this is the core issue tracker of Rails. This is
not a place for posting workarounds for issues. If you believe this
is a real issue and/or are willing to write a patch with tests
please leave a comment and I'll reopen the ticket.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T10:26:08+01:00</created-at>
      <creator-id type="integer">76713</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5813</number>
      <permalink>rails-ujs-driver-events</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>events javascript ujs</tag>
      <title>Rails UJS driver events</title>
      <updated-at type="datetime">2010-10-15T10:26:11+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Philippe Lang</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5813</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
