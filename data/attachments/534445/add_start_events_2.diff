From 65f8a6adcc14d576446a4edfe1e98496b8b898bd Mon Sep 17 00:00:00 2001
From: Justin George <justin.george@gmail.com>
Date: Thu, 13 May 2010 14:07:40 -0700
Subject: [PATCH] all instrumentation events that include a block now fire a start event before the block is yielded [#4594 state:resolved]

In many situations, we want to instrument when something starts, as well as when it has finished.

A canonical example is AR transactions, which are helpful when they log which model started/ended them.
---
 .../active_support/notifications/instrumenter.rb   |   13 ++++--
 activesupport/test/notifications_test.rb           |   48 +++++++++++++++----
 .../application/initializers/notifications_test.rb |    1 +
 3 files changed, 48 insertions(+), 14 deletions(-)

diff --git a/activesupport/lib/active_support/notifications/instrumenter.rb b/activesupport/lib/active_support/notifications/instrumenter.rb
index 7e89402..4aaadb3 100644
--- a/activesupport/lib/active_support/notifications/instrumenter.rb
+++ b/activesupport/lib/active_support/notifications/instrumenter.rb
@@ -11,13 +11,18 @@ module ActiveSupport
         @notifier = notifier
       end
 
-      # Instrument the given block by measuring the time taken to execute it
-      # and publish it. Notice that events get sent even if an error occurs
-      # in the passed-in block
+      # Instrument the given block by measuring the time taken to
+      # execute it and publish it. Notice that events get sent even if
+      # an error occurs in the passed-in block, and that events that
+      # include a block also automatically include a start event
       def instrument(name, payload={})
         time = Time.now
+        
         begin
-          yield(payload) if block_given?
+          if block_given?
+            @notifier.publish("#{name}.start", time, time, @id, payload.dup)
+            yield(payload)
+          end
         rescue Exception => e
           payload[:exception] = [e.class.name, e.message]
           raise e
diff --git a/activesupport/test/notifications_test.rb b/activesupport/test/notifications_test.rb
index e11de5f..a501196 100644
--- a/activesupport/test/notifications_test.rb
+++ b/activesupport/test/notifications_test.rb
@@ -135,13 +135,13 @@ module Notifications
       drain
     end
 
-    def test_instrument_yields_the_paylod_for_further_modification
+    def test_instrument_yields_payload_for_further_modification
       assert_equal 2, instrument(:awesome) { |p| p[:result] = 1 + 1 }
       drain
 
-      assert_equal 1, @events.size
-      assert_equal :awesome, @events.first.name
-      assert_equal Hash[:result => 2], @events.first.payload
+      assert_equal 2, @events.size
+      assert_equal :awesome, @events.last.name
+      assert_equal Hash[:result => 2], @events.last.payload
     end
 
     def test_instrumenter_exposes_its_id
@@ -149,21 +149,32 @@ module Notifications
     end
 
     def test_nested_events_can_be_instrumented
+      # fires 'awesome.start'
       instrument(:awesome, :payload => "notifications") do
+        drain
+        assert_equal 1, @events.size
+        assert_equal 'awesome.start', @events.last.name
+        
+        # fires 'wot.start'
         instrument(:wot, :payload => "child") do
-          1 + 1
+          # innermost instrumented block
+          drain
+          assert_equal 2, @events.size
+          assert_equal 'wot.start', @events.last.name
+          #fires :wot
         end
 
         drain
 
-        assert_equal 1, @events.size
-        assert_equal :wot, @events.first.name
-        assert_equal Hash[:payload => "child"], @events.first.payload
+        assert_equal 3, @events.size
+        assert_equal :wot, @events.last.name
+        assert_equal Hash[:payload => "child"], @events.last.payload
+        # fires :awesome
       end
 
       drain
 
-      assert_equal 2, @events.size
+      assert_equal 4, @events.size
       assert_equal :awesome, @events.last.name
       assert_equal Hash[:payload => "notifications"], @events.last.payload
     end
@@ -178,7 +189,7 @@ module Notifications
       end
 
       drain
-      assert_equal 1, @events.size
+      assert_equal 2, @events.size
       assert_equal Hash[:payload => "notifications",
         :exception => ["RuntimeError", "FAIL"]], @events.last.payload
     end
@@ -191,6 +202,23 @@ module Notifications
       assert_equal :awesome, @events.last.name
       assert_equal Hash[:payload => "notifications"], @events.last.payload
     end
+
+    def test_start_event_fires_with_block
+      instrument(:awesome, :payload => 'notifications') do
+        #noop
+      end
+      drain
+
+      assert_equal 2, @events.size
+      assert_equal 'awesome.start', @events.first.name
+    end
+
+    def test_start_event_not_fired_without_block
+      instrument(:awesome, :payload => 'notifications')
+      drain
+      assert_equal 1, @events.size
+      assert_equal :awesome, @events.first.name
+    end
   end
 
   class EventTest < TestCase
diff --git a/railties/test/application/initializers/notifications_test.rb b/railties/test/application/initializers/notifications_test.rb
index 276950c..9e719dd 100644
--- a/railties/test/application/initializers/notifications_test.rb
+++ b/railties/test/application/initializers/notifications_test.rb
@@ -38,6 +38,7 @@ module ApplicationTests
       ActiveRecord::Base.logger = logger = MockLogger.new
 
       # Mimic ActiveRecord notifications
+      instrument "sql.active_record.start", :name => "SQL", :sql => "SHOW tables"
       instrument "sql.active_record", :name => "SQL", :sql => "SHOW tables"
       wait
 
-- 
1.7.0.3

