<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-09-19T00:36:12+01:00</created-at>
  <creator-id type="integer">70301</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3233</number>
  <permalink>query-built-wrong-for-preloading-associations-nested-under-polymorphic-belongs_to</permalink>
  <priority type="integer">147351</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.3.x patch polymorphic preload sql test</tag>
  <title>Query built wrong for preloading associations nested under polymorphic belongs_to</title>
  <updated-at type="datetime">2010-06-23T22:02:06+01:00</updated-at>
  <user-id type="integer">40263</user-id>
  <version type="integer">7</version>
  <user-name>Neeraj Singh</user-name>
  <creator-name>Matt D</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3233</url>
  <priority-name nil="true"></priority-name>
  <original-body>Relevant model code:

@@@ ruby
class Subscription &lt; ActiveRecord::Base
  belongs_to :subscribable, :polymorphic =&gt; true
end

class Article &lt; ActiveRecord::Base
  has_many :notifications, :as =&gt; :notifiable, :dependent =&gt; :destroy
  has_many :subscriptions, :as =&gt; :subscribable, :dependent =&gt; :destroy
end

class Planner &lt; ActiveRecord::Base
  has_many :notifications, :as =&gt; :notifiable, :dependent =&gt; :destroy
  has_many :subscriptions, :as =&gt; :subscribable, :dependent =&gt; :destroy
end

class Notification &lt; ActiveRecord::Base
  belongs_to :notifiable, :polymorphic =&gt; true
end
@@@

As such, the following sample code acts as expected to get all notifications, but is query-heavy:

@@@ ruby
all_notifications = Subscription.all.inject([]) { |n, s| n + s.notifications }
@@@

However, the following seems ideal for reducing query count, but the queries are incorrect:

@@@ ruby
some_notifications = Subscription.all(:include =&gt; {:subscribable =&gt; :notifications}).inject([]) { |n, s| n + s.notifications }
@@@

That call returns some notifications, but not all the ones the previous call did. Turns out, with test data of 2 articles and 6 planners, the following queries are run:

@@@
Notification Load (0.2ms)   SELECT `notifications`.* FROM `notifications` WHERE (`notifications`.`notifiable_id` IN (1,2) and `notifications`.`notifiable_type` = 'Article') 
Notification Load (0.2ms)   SELECT `notifications`.* FROM `notifications` WHERE (`notifications`.`notifiable_id` IN (1,2,3,4,5,6) and `notifications`.`notifiable_type` = 'Article')
@@@

As you can see, the notifiable (polymorphic association) class does not change. I'd be tempted to think I'm doing something wrong, except I can't imagine anything I could do that would cause something like that to happen at the very core of ActiveRecord...

On Rails version 2.3.4, Ruby 1.8.</original-body>
  <latest-body>Relevant model code:

@@@ ruby
class Subscription &lt; ActiveRecord::Base
  belongs_to :subscribable, :polymorphic =&gt; true
end

class Article &lt; ActiveRecord::Base
  has_many :notifications, :as =&gt; :notifiable, :dependent =&gt; :destroy
  has_many :subscriptions, :as =&gt; :subscribable, :dependent =&gt; :destroy
end

class Planner &lt; ActiveRecord::Base
  has_many :notifications, :as =&gt; :notifiable, :dependent =&gt; :destroy
  has_many :subscriptions, :as =&gt; :subscribable, :dependent =&gt; :destroy
end

class Notification &lt; ActiveRecord::Base
  belongs_to :notifiable, :polymorphic =&gt; true
end
@@@

As such, the following sample code acts as expected to get all notifications, but is query-heavy:

@@@ ruby
all_notifications = Subscription.all.inject([]) { |n, s| n + s.notifications }
@@@

However, the following seems ideal for reducing query count, but the queries are incorrect:

@@@ ruby
some_notifications = Subscription.all(:include =&gt; {:subscribable =&gt; :notifications}).inject([]) { |n, s| n + s.notifications }
@@@

That call returns some notifications, but not all the ones the previous call did. Turns out, with test data of 2 articles and 6 planners, the following queries are run:

@@@
Notification Load (0.2ms)   SELECT `notifications`.* FROM `notifications` WHERE (`notifications`.`notifiable_id` IN (1,2) and `notifications`.`notifiable_type` = 'Article') 
Notification Load (0.2ms)   SELECT `notifications`.* FROM `notifications` WHERE (`notifications`.`notifiable_id` IN (1,2,3,4,5,6) and `notifications`.`notifiable_type` = 'Article')
@@@

As you can see, the notifiable (polymorphic association) class does not change. I'd be tempted to think I'm doing something wrong, except I can't imagine anything I could do that would cause something like that to happen at the very core of ActiveRecord...

On Rails version 2.3.4, Ruby 1.8.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Relevant model code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Subscription &amp;lt; ActiveRecord::Base
  belongs_to :subscribable, :polymorphic =&amp;gt; true
end

class Article &amp;lt; ActiveRecord::Base
  has_many :notifications, :as =&amp;gt; :notifiable, :dependent =&amp;gt; :destroy
  has_many :subscriptions, :as =&amp;gt; :subscribable, :dependent =&amp;gt; :destroy
end

class Planner &amp;lt; ActiveRecord::Base
  has_many :notifications, :as =&amp;gt; :notifiable, :dependent =&amp;gt; :destroy
  has_many :subscriptions, :as =&amp;gt; :subscribable, :dependent =&amp;gt; :destroy
end

class Notification &amp;lt; ActiveRecord::Base
  belongs_to :notifiable, :polymorphic =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As such, the following sample code acts as expected to get all
notifications, but is query-heavy:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;all_notifications = Subscription.all.inject([]) { |n, s| n + s.notifications }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, the following seems ideal for reducing query count, but
the queries are incorrect:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;some_notifications = Subscription.all(:include =&amp;gt; {:subscribable =&amp;gt; :notifications}).inject([]) { |n, s| n + s.notifications }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That call returns some notifications, but not all the ones the
previous call did. Turns out, with test data of 2 articles and 6
planners, the following queries are run:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Notification Load (0.2ms)   SELECT `notifications`.* FROM `notifications` WHERE (`notifications`.`notifiable_id` IN (1,2) and `notifications`.`notifiable_type` = 'Article') 
Notification Load (0.2ms)   SELECT `notifications`.* FROM `notifications` WHERE (`notifications`.`notifiable_id` IN (1,2,3,4,5,6) and `notifications`.`notifiable_type` = 'Article')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, the notifiable (polymorphic association) class
does not change. I'd be tempted to think I'm doing something wrong,
except I can't imagine anything I could do that would cause
something like that to happen at the very core of
ActiveRecord...&lt;/p&gt;
&lt;p&gt;On Rails version 2.3.4, Ruby 1.8.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Relevant model code:

@@@ ruby
class Subscription &lt; ActiveRecord::Base
  belongs_to :subscribable, :polymorphic =&gt; true
end

class Article &lt; ActiveRecord::Base
  has_many :notifications, :as =&gt; :notifiable, :dependent =&gt; :destroy
  has_many :subscriptions, :as =&gt; :subscribable, :dependent =&gt; :destroy
end

class Planner &lt; ActiveRecord::Base
  has_many :notifications, :as =&gt; :notifiable, :dependent =&gt; :destroy
  has_many :subscriptions, :as =&gt; :subscribable, :dependent =&gt; :destroy
end

class Notification &lt; ActiveRecord::Base
  belongs_to :notifiable, :polymorphic =&gt; true
end
@@@

As such, the following sample code acts as expected to get all notifications, but is query-heavy:

@@@ ruby
all_notifications = Subscription.all.inject([]) { |n, s| n + s.notifications }
@@@

However, the following seems ideal for reducing query count, but the queries are incorrect:

@@@ ruby
some_notifications = Subscription.all(:include =&gt; {:subscribable =&gt; :notifications}).inject([]) { |n, s| n + s.notifications }
@@@

That call returns some notifications, but not all the ones the previous call did. Turns out, with test data of 2 articles and 6 planners, the following queries are run:

@@@
Notification Load (0.2ms)   SELECT `notifications`.* FROM `notifications` WHERE (`notifications`.`notifiable_id` IN (1,2) and `notifications`.`notifiable_type` = 'Article') 
Notification Load (0.2ms)   SELECT `notifications`.* FROM `notifications` WHERE (`notifications`.`notifiable_id` IN (1,2,3,4,5,6) and `notifications`.`notifiable_type` = 'Article')
@@@

As you can see, the notifiable (polymorphic association) class does not change. I'd be tempted to think I'm doing something wrong, except I can't imagine anything I could do that would cause something like that to happen at the very core of ActiveRecord...

The two things about this setup that look like they might cause an issue are the fact that I'm preloading what's nested under a polymorphic association, and that the &quot;middle-man&quot; classes are polymorphic in both directions (they have a polymorphic relationship with both subscriptions, and notifications).

On Rails version 2.3.4, Ruby 1.8.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Relevant model code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Subscription &amp;lt; ActiveRecord::Base
  belongs_to :subscribable, :polymorphic =&amp;gt; true
end

class Article &amp;lt; ActiveRecord::Base
  has_many :notifications, :as =&amp;gt; :notifiable, :dependent =&amp;gt; :destroy
  has_many :subscriptions, :as =&amp;gt; :subscribable, :dependent =&amp;gt; :destroy
end

class Planner &amp;lt; ActiveRecord::Base
  has_many :notifications, :as =&amp;gt; :notifiable, :dependent =&amp;gt; :destroy
  has_many :subscriptions, :as =&amp;gt; :subscribable, :dependent =&amp;gt; :destroy
end

class Notification &amp;lt; ActiveRecord::Base
  belongs_to :notifiable, :polymorphic =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As such, the following sample code acts as expected to get all
notifications, but is query-heavy:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;all_notifications = Subscription.all.inject([]) { |n, s| n + s.notifications }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, the following seems ideal for reducing query count, but
the queries are incorrect:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;some_notifications = Subscription.all(:include =&amp;gt; {:subscribable =&amp;gt; :notifications}).inject([]) { |n, s| n + s.notifications }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That call returns some notifications, but not all the ones the
previous call did. Turns out, with test data of 2 articles and 6
planners, the following queries are run:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Notification Load (0.2ms)   SELECT `notifications`.* FROM `notifications` WHERE (`notifications`.`notifiable_id` IN (1,2) and `notifications`.`notifiable_type` = 'Article') 
Notification Load (0.2ms)   SELECT `notifications`.* FROM `notifications` WHERE (`notifications`.`notifiable_id` IN (1,2,3,4,5,6) and `notifications`.`notifiable_type` = 'Article')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, the notifiable (polymorphic association) class
does not change. I'd be tempted to think I'm doing something wrong,
except I can't imagine anything I could do that would cause
something like that to happen at the very core of
ActiveRecord...&lt;/p&gt;
&lt;p&gt;The two things about this setup that look like they might cause
an issue are the fact that I'm preloading what's nested under a
polymorphic association, and that the &quot;middle-man&quot; classes are
polymorphic in both directions (they have a polymorphic
relationship with both subscriptions, and notifications).&lt;/p&gt;
&lt;p&gt;On Rails version 2.3.4, Ruby 1.8.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-19T00:36:12+01:00</created-at>
      <creator-id type="integer">70301</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3233</number>
      <permalink>query-built-wrong-for-preloading-associations-nested-under-polymorphic-belongs_to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 polymorphic preload sql</tag>
      <title>Query built wrong for preloading associations nested under polymorphic belongs_to</title>
      <updated-at type="datetime">2009-09-19T00:39:09+01:00</updated-at>
      <user-id type="integer">70301</user-id>
      <version type="integer">1</version>
      <user-name>Matt D</user-name>
      <creator-name>Matt D</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3233</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Still happens on 2.3.5 with ruby 1.8</body>
      <body-html>&lt;div&gt;&lt;p&gt;Still happens on 2.3.5 with ruby 1.8&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-31T06:08:47+01:00</created-at>
      <creator-id type="integer">70301</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3233</number>
      <permalink>query-built-wrong-for-preloading-associations-nested-under-polymorphic-belongs_to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 polymorphic preload sql</tag>
      <title>Query built wrong for preloading associations nested under polymorphic belongs_to</title>
      <updated-at type="datetime">2010-05-31T06:08:50+01:00</updated-at>
      <user-id type="integer">17709</user-id>
      <version type="integer">2</version>
      <user-name>Maxim Chernyak</user-name>
      <creator-name>Matt D</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3233</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here's a patch with a test for this, for rails 2-3-stable. This is probably irrelevant to Rails3.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here's a patch with a test for this, for rails 2-3-stable. This
is probably irrelevant to Rails3.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-01T02:27:00+01:00</created-at>
      <creator-id type="integer">70301</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.4 polymorphic preload sql
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3233</number>
      <permalink>query-built-wrong-for-preloading-associations-nested-under-polymorphic-belongs_to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.x patch polymorphic preload sql test</tag>
      <title>Query built wrong for preloading associations nested under polymorphic belongs_to</title>
      <updated-at type="datetime">2010-06-01T02:27:08+01:00</updated-at>
      <user-id type="integer">17709</user-id>
      <version type="integer">3</version>
      <user-name>Maxim Chernyak</user-name>
      <creator-name>Matt D</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3233</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I should probably clarify that this is a patch with both a test and a fix. Not just test.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I should probably clarify that this is a patch with both a test
and a fix. Not just test.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-12T22:54:14+01:00</created-at>
      <creator-id type="integer">70301</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3233</number>
      <permalink>query-built-wrong-for-preloading-associations-nested-under-polymorphic-belongs_to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.x patch polymorphic preload sql test</tag>
      <title>Query built wrong for preloading associations nested under polymorphic belongs_to</title>
      <updated-at type="datetime">2010-06-12T22:54:19+01:00</updated-at>
      <user-id type="integer">17709</user-id>
      <version type="integer">4</version>
      <user-name>Maxim Chernyak</user-name>
      <creator-name>Matt D</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3233</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Applied patch for 2-3-stable. Can someone please investigate if this is an issue in Rails 3 or not?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Applied patch for 2-3-stable. Can someone please investigate if
this is an issue in Rails 3 or not?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-23T08:09:35+01:00</created-at>
      <creator-id type="integer">70301</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3233</number>
      <permalink>query-built-wrong-for-preloading-associations-nested-under-polymorphic-belongs_to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.x patch polymorphic preload sql test</tag>
      <title>Query built wrong for preloading associations nested under polymorphic belongs_to</title>
      <updated-at type="datetime">2010-06-23T08:09:41+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">5</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Matt D</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3233</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [844da12ba6acfb71a691ba32901d7acf4cbe37b4]) Fix eager loading of polymorphic has_one associations nested-included under polymorphic belongs_to associations. [#3233 state:resolved]

Signed-off-by: Jos&#233; Valim &lt;jose.valim@gmail.com&gt;
http://github.com/rails/rails/commit/844da12ba6acfb71a691ba32901d7acf4cbe37b4</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/844da12ba6acfb71a691ba32901d7acf4cbe37b4&quot;
title=
&quot;Changeset [844da12ba6acfb71a691ba32901d7acf4cbe37b4]&quot;&gt;[844da12ba6acfb71a691ba32901d7acf4cbe37b4]&lt;/a&gt;)
Fix eager loading of polymorphic has_one associations
nested-included under polymorphic belongs_to associations.
[&lt;a href=&quot;/projects/8994/tickets/3233&quot; title=
&quot;Ticket #3233&quot;&gt;#3233&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jos&amp;eacute; Valim &lt;a href=
&quot;mailto:jose.valim@gmail.com&quot;&gt;jose.valim@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/844da12ba6acfb71a691ba32901d7acf4cbe37b4&quot;&gt;
http://github.com/rails/rails/commit/844da12ba6acfb71a691ba32901d7a...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-23T08:17:38+01:00</created-at>
      <creator-id type="integer">70301</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3233</number>
      <permalink>query-built-wrong-for-preloading-associations-nested-under-polymorphic-belongs_to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.x patch polymorphic preload sql test</tag>
      <title>Query built wrong for preloading associations nested under polymorphic belongs_to</title>
      <updated-at type="datetime">2010-06-23T08:17:43+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">6</version>
      <user-name>Repository</user-name>
      <creator-name>Matt D</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3233</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@Maxim looks like rails3 is not behaving as expected. Can you verify that?

@@@ ruby
  def self.lab1
    puts  Subscription.all.inject([]) { |n, s| n + s.subscribable.notifications }
  end
  def self.lab2
    puts Subscription.all(:include =&gt; {:subscribable =&gt; :notifications}).inject([]) { |n, s| n + s.subscribable.notifications }
  end
@@@

I am getting three records with lab1 and two records with lab2.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Maxim looks like rails3 is not behaving as expected. Can you
verify that?&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  def self.lab1
    puts  Subscription.all.inject([]) { |n, s| n + s.subscribable.notifications }
  end
  def self.lab2
    puts Subscription.all(:include =&amp;gt; {:subscribable =&amp;gt; :notifications}).inject([]) { |n, s| n + s.subscribable.notifications }
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I am getting three records with lab1 and two records with
lab2.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-23T22:01:54+01:00</created-at>
      <creator-id type="integer">70301</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3233</number>
      <permalink>query-built-wrong-for-preloading-associations-nested-under-polymorphic-belongs_to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.x patch polymorphic preload sql test</tag>
      <title>Query built wrong for preloading associations nested under polymorphic belongs_to</title>
      <updated-at type="datetime">2010-06-23T22:02:06+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">7</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt D</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3233</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ee9cc3bb893c1dec95c4ab21a66d2d72b128aca0</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-06-01T02:27:00+01:00</created-at>
      <filename>rails23-ticket3233-patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">541153</id>
      <size type="integer">8445</size>
      <uploader-id type="integer">17709</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/541153/rails23-ticket3233-patch.diff</url>
    </attachment>
  </attachments>
</ticket>
