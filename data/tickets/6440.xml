<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-16T02:52:57+00:00</created-at>
  <creator-id type="integer">137084</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">6440</number>
  <permalink>session-reset-undefined-method-destroy-for-hash</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Session Reset undefined method `destroy' for {}:Hash</title>
  <updated-at type="datetime">2011-04-01T18:41:51+01:00</updated-at>
  <user-id type="integer">60860</user-id>
  <version type="integer">4</version>
  <user-name>tiegz</user-name>
  <creator-name>Bruno Pinto</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6440</url>
  <milestone-title>2.x</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>After upgrading Rails to version 2.3.11 I started receiving this error after calling reset_session:
@@@
 Backtrace:

  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/request.rb:449:in 'reset_session'
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/base.rb:1244:in 'reset_session_without_flash'
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/flash.rb:159:in 'reset_session'
@@@

My first reaction was to google for a solution when I couldn't I came here and looked for related tickets and I manage to find this one:

https://rails.lighthouseapp.com/projects/8994/tickets/4938-patch-session-fixes-sessions-should-not-be-created-until-written-to-and-session-data-should-be-destroyed-on-session-reset


I was digging (read: trying to) for the answer and perharps for an acceptable patch but I couldn't. This was the best I could do (correct me if I'm wrong):

At first, sessions were created on each request but it was harming performance so they decided to lazy it and then ActionController::Session::AbstractStore::SessionHash was created. It extends the normal Hash class but it's extended with some methods including 'destroy' which is responsible for the error I am receiving.

For a reason I don't know, when a request is created or reseted, it's content is an empty normal Hash. It's only changed to a SessionHash farther when the method call is called from an AbstractStore instance.
I don't know why the creation still sets a normal hash to the session variable and not a SessionHash however I made a 'patch' without breaking tests and without changing this behavior.

@@@
./actionpack/lib/action_controller/session/abstract_store.rb (original):

  def session
    @env['rack.session'] ||= {}
  end

  def reset_session
    session.destroy if session
    self.session = {}
  end
@@@

@@@
./actionpack/lib/action_controller/session/abstract_store.rb (patch?):

  def session
    @env['rack.session'] ||= {}
  end

  def reset_session
    session.destroy if session &amp;&amp; session.is_a?(ActionController::Session::AbstractStore::SessionHash)
    self.session = {}
  end
@@@

Hope it helps, and please correct me when I'm wrong.</original-body>
  <latest-body>After upgrading Rails to version 2.3.11 I started receiving this error after calling reset_session:
@@@
 Backtrace:

  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/request.rb:449:in 'reset_session'
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/base.rb:1244:in 'reset_session_without_flash'
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/flash.rb:159:in 'reset_session'
@@@

My first reaction was to google for a solution when I couldn't I came here and looked for related tickets and I manage to find this one:

https://rails.lighthouseapp.com/projects/8994/tickets/4938-patch-session-fixes-sessions-should-not-be-created-until-written-to-and-session-data-should-be-destroyed-on-session-reset


I was digging (read: trying to) for the answer and perharps for an acceptable patch but I couldn't. This was the best I could do (correct me if I'm wrong):

At first, sessions were created on each request but it was harming performance so they decided to lazy it and then ActionController::Session::AbstractStore::SessionHash was created. It extends the normal Hash class but it's extended with some methods including 'destroy' which is responsible for the error I am receiving.

For a reason I don't know, when a request is created or reseted, it's content is an empty normal Hash. It's only changed to a SessionHash farther when the method call is called from an AbstractStore instance.
I don't know why the creation still sets a normal hash to the session variable and not a SessionHash however I made a 'patch' without breaking tests and without changing this behavior.

@@@
./actionpack/lib/action_controller/session/abstract_store.rb (original):

  def session
    @env['rack.session'] ||= {}
  end

  def reset_session
    session.destroy if session
    self.session = {}
  end
@@@

@@@
./actionpack/lib/action_controller/session/abstract_store.rb (patch?):

  def session
    @env['rack.session'] ||= {}
  end

  def reset_session
    session.destroy if session &amp;&amp; session.is_a?(ActionController::Session::AbstractStore::SessionHash)
    self.session = {}
  end
@@@

Hope it helps, and please correct me when I'm wrong.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;After upgrading Rails to version 2.3.11 I started receiving this
error after calling reset_session:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; Backtrace:&lt;br&gt;
&lt;br&gt;


&lt;br&gt;
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/request.rb:449:in 'reset_session'
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/base.rb:1244:in 'reset_session_without_flash'
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/flash.rb:159:in 'reset_session'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My first reaction was to google for a solution when I couldn't I
came here and looked for related tickets and I manage to find this
one:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/4938-patch-session-fixes-sessions-should-not-be-created-until-written-to-and-session-data-should-be-destroyed-on-session-reset&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/4938-patch-se...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was digging (read: trying to) for the answer and perharps for
an acceptable patch but I couldn't. This was the best I could do
(correct me if I'm wrong):&lt;/p&gt;
&lt;p&gt;At first, sessions were created on each request but it was
harming performance so they decided to lazy it and then
ActionController::Session::AbstractStore::SessionHash was created.
It extends the normal Hash class but it's extended with some
methods including 'destroy' which is responsible for the error I am
receiving.&lt;/p&gt;
&lt;p&gt;For a reason I don't know, when a request is created or reseted,
it's content is an empty normal Hash. It's only changed to a
SessionHash farther when the method call is called from an
AbstractStore instance.&lt;br&gt;
I don't know why the creation still sets a normal hash to the
session variable and not a SessionHash however I made a 'patch'
without breaking tests and without changing this behavior.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;./actionpack/lib/action_controller/session/abstract_store.rb (original):

  def session
    @env['rack.session'] ||= {}
  end

  def reset_session
    session.destroy if session
    self.session = {}
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;./actionpack/lib/action_controller/session/abstract_store.rb (patch?):

  def session
    @env['rack.session'] ||= {}
  end

  def reset_session
    session.destroy if session &amp;amp;&amp;amp; session.is_a?(ActionController::Session::AbstractStore::SessionHash)
    self.session = {}
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Hope it helps, and please correct me when I'm wrong.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>After upgrading Rails to version 2.3.11 I started receiving this error after calling reset_session:
@@@
 Backtrace:

  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/request.rb:449:in 'reset_session'
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/base.rb:1244:in 'reset_session_without_flash'
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/flash.rb:159:in 'reset_session'
@@@

My first reaction was to google for a solution when I couldn't I came here and looked for related tickets and I manage to find this one:

https://rails.lighthouseapp.com/projects/8994/tickets/4938-patch-session-fixes-sessions-should-not-be-created-until-written-to-and-session-data-should-be-destroyed-on-session-reset


I was digging (read: trying to) for the answer and perharps for an acceptable patch but I couldn't. This was the best I could do (correct me if I'm wrong):

At first, sessions were created on each request but it was harming performance so they decided to lazy it and then ActionController::Session::AbstractStore::SessionHash was created. It extends the normal Hash class but it's extended with some methods including 'destroy' which is responsible for the error I am receiving.

For a reason I don't know, when a request is created or reseted, it's content is an empty normal Hash. It's only changed to a SessionHash farther when the method call is called from an AbstractStore instance.
I don't know why the creation still sets a normal hash to the session variable and not a SessionHash however I made a 'patch' without breaking tests and without changing this behavior.

@@@
./actionpack/lib/action_controller/session/abstract_store.rb (original):

  def session
    @env['rack.session'] ||= {}
  end

  def reset_session
    session.destroy if session
    self.session = {}
  end
@@@

@@@
./actionpack/lib/action_controller/session/abstract_store.rb (patch?):

  def session
    @env['rack.session'] ||= {}
  end

  def reset_session
    session.destroy if session &amp;&amp; session.is_a?(ActionController::Session::AbstractStore::SessionHash)
    self.session = {}
  end
@@@

Hope it helps, and please correct me when I'm wrong.</body>
      <body-html>&lt;div&gt;&lt;p&gt;After upgrading Rails to version 2.3.11 I started receiving this
error after calling reset_session:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; Backtrace:&lt;br&gt;
&lt;br&gt;


&lt;br&gt;
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/request.rb:449:in 'reset_session'
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/base.rb:1244:in 'reset_session_without_flash'
  /home/deploy/apps/gems_bundler/ruby/1.8/gems/actionpack-2.3.11/lib/action_controller/flash.rb:159:in 'reset_session'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My first reaction was to google for a solution when I couldn't I
came here and looked for related tickets and I manage to find this
one:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/4938-patch-session-fixes-sessions-should-not-be-created-until-written-to-and-session-data-should-be-destroyed-on-session-reset&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/4938-patch-se...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was digging (read: trying to) for the answer and perharps for
an acceptable patch but I couldn't. This was the best I could do
(correct me if I'm wrong):&lt;/p&gt;
&lt;p&gt;At first, sessions were created on each request but it was
harming performance so they decided to lazy it and then
ActionController::Session::AbstractStore::SessionHash was created.
It extends the normal Hash class but it's extended with some
methods including 'destroy' which is responsible for the error I am
receiving.&lt;/p&gt;
&lt;p&gt;For a reason I don't know, when a request is created or reseted,
it's content is an empty normal Hash. It's only changed to a
SessionHash farther when the method call is called from an
AbstractStore instance.&lt;br&gt;
I don't know why the creation still sets a normal hash to the
session variable and not a SessionHash however I made a 'patch'
without breaking tests and without changing this behavior.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;./actionpack/lib/action_controller/session/abstract_store.rb (original):

  def session
    @env['rack.session'] ||= {}
  end

  def reset_session
    session.destroy if session
    self.session = {}
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;./actionpack/lib/action_controller/session/abstract_store.rb (patch?):

  def session
    @env['rack.session'] ||= {}
  end

  def reset_session
    session.destroy if session &amp;amp;&amp;amp; session.is_a?(ActionController::Session::AbstractStore::SessionHash)
    self.session = {}
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Hope it helps, and please correct me when I'm wrong.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-16T02:52:57+00:00</created-at>
      <creator-id type="integer">137084</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6440</number>
      <permalink>session-reset-undefined-method-destroy-for-hash</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Session Reset undefined method `destroy' for {}:Hash</title>
      <updated-at type="datetime">2011-02-16T02:52:59+00:00</updated-at>
      <user-id type="integer">137084</user-id>
      <version type="integer">1</version>
      <user-name>Bruno Pinto</user-name>
      <creator-name>Bruno Pinto</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6440</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-16T13:32:08+00:00</created-at>
      <creator-id type="integer">137084</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">6440</number>
      <permalink>session-reset-undefined-method-destroy-for-hash</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Session Reset undefined method `destroy' for {}:Hash</title>
      <updated-at type="datetime">2011-02-16T13:32:19+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Bruno Pinto</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6440</url>
      <milestone-title>2.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I submitted a pull request that includes a unit test that illustrates the problem and a patch to fix the destroy method at https://github.com/rails/rails/pull/198

While this is waiting to be fixed in the main tree, I have monkey patched the reset_session method like so

@@@
# file config/initializers/rails_6440_patch.rb
ActionController::Request.class_eval do
    def reset_session
      # session may be a hash, if so, we do not want to call destroy
      # fixes issue 6440
      session.destroy if session and session.respond_to?(:destroy)
      self.session = {}
    end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I submitted a pull request that includes a unit test that
illustrates the problem and a patch to fix the destroy method at
&lt;a href=
&quot;https://github.com/rails/rails/pull/198&quot;&gt;https://github.com/rails/rails/pull/198&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While this is waiting to be fixed in the main tree, I have
monkey patched the reset_session method like so&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# file config/initializers/rails_6440_patch.rb
ActionController::Request.class_eval do
    def reset_session
      # session may be a hash, if so, we do not want to call destroy
      # fixes issue 6440
      session.destroy if session and session.respond_to?(:destroy)
      self.session = {}
    end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-01T04:04:47+00:00</created-at>
      <creator-id type="integer">137084</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">6440</number>
      <permalink>session-reset-undefined-method-destroy-for-hash</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Session Reset undefined method `destroy' for {}:Hash</title>
      <updated-at type="datetime">2011-03-01T04:05:02+00:00</updated-at>
      <user-id type="integer">85874</user-id>
      <version type="integer">3</version>
      <user-name>Rob Di Marco</user-name>
      <creator-name>Bruno Pinto</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6440</url>
      <milestone-title>2.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Having the same issue, +1! 

Related, it looks like you might have seen this similar issue in master and augmented your solution to match?

https://rails.lighthouseapp.com/projects/8994/tickets/5634-reset_session-in-action_dispatchhttprequestrb-failing-in-test-mode</body>
      <body-html>&lt;div&gt;&lt;p&gt;Having the same issue, +1!&lt;/p&gt;
&lt;p&gt;Related, it looks like you might have seen this similar issue in
master and augmented your solution to match?&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/5634-reset_session-in-action_dispatchhttprequestrb-failing-in-test-mode&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/5634-reset_se...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-01T18:41:27+01:00</created-at>
      <creator-id type="integer">137084</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">6440</number>
      <permalink>session-reset-undefined-method-destroy-for-hash</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Session Reset undefined method `destroy' for {}:Hash</title>
      <updated-at type="datetime">2011-04-01T18:41:51+01:00</updated-at>
      <user-id type="integer">60860</user-id>
      <version type="integer">4</version>
      <user-name>tiegz</user-name>
      <creator-name>Bruno Pinto</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6440</url>
      <milestone-title>2.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
