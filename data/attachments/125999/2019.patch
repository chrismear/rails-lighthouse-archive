diff --git a/activesupport/lib/active_support/core_ext/string/conversions.rb b/activesupport/lib/active_support/core_ext/string/conversions.rb
index 2b9f8c7..a209469 100644
--- a/activesupport/lib/active_support/core_ext/string/conversions.rb
+++ b/activesupport/lib/active_support/core_ext/string/conversions.rb
@@ -9,14 +9,14 @@ class String
 
   # Form can be either :utc (default) or :local.
   def to_time(form = :utc)
-    ::Time.send("#{form}_time", *::Date._parse(self, false).values_at(:year, :mon, :mday, :hour, :min, :sec).map { |arg| arg || 0 })
+    ::Time.send("#{form}_time", *::Date._parse(self, true).values_at(:year, :mon, :mday, :hour, :min, :sec).map { |arg| arg || 0 })
   end
 
   def to_date
-    ::Date.new(*::Date._parse(self, false).values_at(:year, :mon, :mday))
+    ::Date.new(*::Date._parse(self, true).values_at(:year, :mon, :mday))
   end
 
   def to_datetime
-    ::DateTime.civil(*::Date._parse(self, false).values_at(:year, :mon, :mday, :hour, :min, :sec).map { |arg| arg || 0 })
+    ::DateTime.civil(*::Date._parse(self, true).values_at(:year, :mon, :mday, :hour, :min, :sec).map { |arg| arg || 0 })
   end
 end
diff --git a/activesupport/test/core_ext/string_ext_test.rb b/activesupport/test/core_ext/string_ext_test.rb
index 237a843..89ace49 100644
--- a/activesupport/test/core_ext/string_ext_test.rb
+++ b/activesupport/test/core_ext/string_ext_test.rb
@@ -112,18 +112,22 @@ class StringInflectionsTest < Test::Unit::TestCase
   def test_string_to_time
     assert_equal Time.utc(2005, 2, 27, 23, 50), "2005-02-27 23:50".to_time
     assert_equal Time.local(2005, 2, 27, 23, 50), "2005-02-27 23:50".to_time(:local)
+    assert_equal Time.utc(2005, 2, 27, 23, 50), "05-02-27 23:50".to_time
+    assert_equal Time.local(2005, 2, 27, 23, 50), "05-02-27 23:50".to_time(:local)
     assert_equal DateTime.civil(2039, 2, 27, 23, 50), "2039-02-27 23:50".to_time
     assert_equal Time.local_time(2039, 2, 27, 23, 50), "2039-02-27 23:50".to_time(:local)
   end
   
   def test_string_to_datetime
     assert_equal DateTime.civil(2039, 2, 27, 23, 50), "2039-02-27 23:50".to_datetime
+    assert_equal DateTime.civil(2039, 2, 27, 23, 50), "39-02-27 23:50".to_datetime
     assert_equal 0, "2039-02-27 23:50".to_datetime.offset # use UTC offset
     assert_equal ::Date::ITALY, "2039-02-27 23:50".to_datetime.start # use Ruby's default start value
   end
   
   def test_string_to_date
     assert_equal Date.new(2005, 2, 27), "2005-02-27".to_date
+    assert_equal Date.new(2005, 2, 27), "05-02-27".to_date
   end
 
   def test_access
