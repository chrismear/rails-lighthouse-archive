<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-19T14:32:00+01:00</created-at>
  <creator-id type="integer">60523</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2818</number>
  <permalink>activerecord-problem-with-sanitizing-array</permalink>
  <priority type="integer">1914</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>ActiveRecord problem with sanitizing array</title>
  <updated-at type="datetime">2010-11-08T08:51:33+00:00</updated-at>
  <user-id type="integer">94458</user-id>
  <version type="integer">7</version>
  <user-name>Jeff Kreeftmeijer</user-name>
  <creator-name>bterkuile</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2818</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I try to create an ActiveRecord extension to be able to do smarter date selections. These selections can have the form:
@@@ruby
MyModel.all(:conditions=&gt;{:date_month =&gt; [2,6,8]})
MyModel.all(:conditions=&gt;{:date_month =&gt; 3..7})
@@@
where date is a DateTime field. This causes problems. The array will be translated in the form:
@@@ruby
[&quot;... IN (?)&quot;, [2,6,8]]
@@@
And for the range type it idealy should become:
@@@ruby
[&quot;... BETWEEN ? AND ?&quot;, 3, 7]
@@@
This way is incompatible with the ar-extensions since in this case a Result Struct is generated that can only contain one value. This value should be passed with a * for the Range and just as one variable, to delever the sql arrays as described above. I did not see a clean way to improve that in that module without dirty tricks that may be specific for this one case.

A solution is to create a completed SQL statement without question marks, this would look like:
@@@ruby
[&quot;... BETWEEN 3 AND 7&quot;]
@@@
In the method _sanitize_sql_array_ in the file: _activerecor-2.3.2/lib/active_record/base.rb_ (in this case starting from line 2337) this will result in:
@@@ruby
statement, *values = ary #=&gt; statement = &quot;... BETWEEN 3 AND 7&quot;, values = []
@@@

This should not be a problem, but now the special case. Since sqlite does not have a month function I use the _strftime_ function, which would look like:
@@@sql
CAST(STRFTIME(&quot;%m&quot;, &quot;table&quot;.&quot;date&quot;) AS INTEGER) BETWEEN 3 AND 7
@@@

This will fail in the else statement because of the % function. A solution would be:
@@@ruby
        # Accepts an array of conditions.  The array has each value
        # sanitized and interpolated into the SQL statement.
        #   [&quot;name='%s' and group_id='%s'&quot;, &quot;foo'bar&quot;, 4]  returns  &quot;name='foo''bar' and group_id='4'&quot;
        def sanitize_sql_array(ary)
          statement, *values = ary
          if values.first.is_a?(Hash) and statement =~ /:\w+/
            replace_named_bind_variables(statement, values.first)
          elsif statement.include?('?')
            replace_bind_variables(statement, values)
          elsif values.any?
            statement % values.collect { |value| connection.quote_string(value.to_s) }
          else
            statement
          end
        end
@@@</original-body>
  <latest-body>I try to create an ActiveRecord extension to be able to do smarter date selections. These selections can have the form:
@@@ruby
MyModel.all(:conditions=&gt;{:date_month =&gt; [2,6,8]})
MyModel.all(:conditions=&gt;{:date_month =&gt; 3..7})
@@@
where date is a DateTime field. This causes problems. The array will be translated in the form:
@@@ruby
[&quot;... IN (?)&quot;, [2,6,8]]
@@@
And for the range type it idealy should become:
@@@ruby
[&quot;... BETWEEN ? AND ?&quot;, 3, 7]
@@@
This way is incompatible with the ar-extensions since in this case a Result Struct is generated that can only contain one value. This value should be passed with a * for the Range and just as one variable, to delever the sql arrays as described above. I did not see a clean way to improve that in that module without dirty tricks that may be specific for this one case.

A solution is to create a completed SQL statement without question marks, this would look like:
@@@ruby
[&quot;... BETWEEN 3 AND 7&quot;]
@@@
In the method _sanitize_sql_array_ in the file: _activerecor-2.3.2/lib/active_record/base.rb_ (in this case starting from line 2337) this will result in:
@@@ruby
statement, *values = ary #=&gt; statement = &quot;... BETWEEN 3 AND 7&quot;, values = []
@@@

This should not be a problem, but now the special case. Since sqlite does not have a month function I use the _strftime_ function, which would look like:
@@@sql
CAST(STRFTIME(&quot;%m&quot;, &quot;table&quot;.&quot;date&quot;) AS INTEGER) BETWEEN 3 AND 7
@@@

This will fail in the else statement because of the % function. A solution would be:
@@@ruby
        # Accepts an array of conditions.  The array has each value
        # sanitized and interpolated into the SQL statement.
        #   [&quot;name='%s' and group_id='%s'&quot;, &quot;foo'bar&quot;, 4]  returns  &quot;name='foo''bar' and group_id='4'&quot;
        def sanitize_sql_array(ary)
          statement, *values = ary
          if values.first.is_a?(Hash) and statement =~ /:\w+/
            replace_named_bind_variables(statement, values.first)
          elsif statement.include?('?')
            replace_bind_variables(statement, values)
          elsif values.any?
            statement % values.collect { |value| connection.quote_string(value.to_s) }
          else
            statement
          end
        end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I try to create an ActiveRecord extension to be able to do
smarter date selections. These selections can have the form:
@@@ruby MyModel.all(:conditions=&amp;gt;{:date_month =&amp;gt; [2,6,8]})
MyModel.all(:conditions=&amp;gt;{:date_month =&amp;gt; 3..7})&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
where date is a DateTime field. This causes problems. The array will be translated in the form:
@@@ruby
[&amp;quot;... IN (?)&amp;quot;, [2,6,8]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And for the range type it idealy should become: @@@ruby [&quot;...
BETWEEN ? AND ?&quot;, 3, 7]&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
This way is incompatible with the ar-extensions since in this case a Result Struct is generated that can only contain one value. This value should be passed with a * for the Range and just as one variable, to delever the sql arrays as described above. I did not see a clean way to improve that in that module without dirty tricks that may be specific for this one case.

A solution is to create a completed SQL statement without question marks, this would look like:
@@@ruby
[&amp;quot;... BETWEEN 3 AND 7&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the method &lt;em&gt;sanitize_sql_array&lt;/em&gt; in the file:
&lt;em&gt;activerecor-2.3.2/lib/active_record/base.rb&lt;/em&gt; (in this case
starting from line 2337) this will result in: @@@ruby statement,
*values = ary #=&amp;gt; statement = &quot;... BETWEEN 3 AND 7&quot;, values =
[]&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;

This should not be a problem, but now the special case. Since sqlite does not have a month function I use the _strftime_ function, which would look like:
@@@sql
CAST(STRFTIME(&amp;quot;%m&amp;quot;, &amp;quot;table&amp;quot;.&amp;quot;date&amp;quot;) AS INTEGER) BETWEEN 3 AND 7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will fail in the else statement because of the % function.
A solution would be: @@@ruby&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    # Accepts an array of conditions.  The array has each value
    # sanitized and interpolated into the SQL statement.
    #   [&quot;name='%s' and group_id='%s'&quot;, &quot;foo'bar&quot;, 4]  returns  &quot;name='foo''bar' and group_id='4'&quot;
    def sanitize_sql_array(ary)
      statement, *values = ary
      if values.first.is_a?(Hash) and statement =~ /:\w+/
        replace_named_bind_variables(statement, values.first)
      elsif statement.include?('?')
        replace_bind_variables(statement, values)
      elsif values.any?
        statement % values.collect { |value| connection.quote_string(value.to_s) }
      else
        statement
      end
    end
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I try to create an ActiveRecord extension to be able to do smarter date selections. These selections can have the form:
@@@ruby
MyModel.all(:conditions=&gt;{:date_month =&gt; [2,6,8]})
MyModel.all(:conditions=&gt;{:date_month =&gt; 3..7})
@@@
where date is a DateTime field. This causes problems. The array will be translated in the form:
@@@ruby
[&quot;... IN (?)&quot;, [2,6,8]]
@@@
And for the range type it idealy should become:
@@@ruby
[&quot;... BETWEEN ? AND ?&quot;, 3, 7]
@@@
This way is incompatible with the ar-extensions since in this case a Result Struct is generated that can only contain one value. This value should be passed with a * for the Range and just as one variable, to delever the sql arrays as described above. I did not see a clean way to improve that in that module without dirty tricks that may be specific for this one case.

A solution is to create a completed SQL statement without question marks, this would look like:
@@@ruby
[&quot;... BETWEEN 3 AND 7&quot;]
@@@
In the method _sanitize_sql_array_ in the file: _activerecor-2.3.2/lib/active_record/base.rb_ (in this case starting from line 2337) this will result in:
@@@ruby
statement, *values = ary #=&gt; statement = &quot;... BETWEEN 3 AND 7&quot;, values = []
@@@

This should not be a problem, but now the special case. Since sqlite does not have a month function I use the _strftime_ function, which would look like:
@@@sql
CAST(STRFTIME(&quot;%m&quot;, &quot;table&quot;.&quot;date&quot;) AS INTEGER) BETWEEN 3 AND 7
@@@

This will fail in the else statement because of the % function. A solution would be:
@@@ruby
        # Accepts an array of conditions.  The array has each value
        # sanitized and interpolated into the SQL statement.
        #   [&quot;name='%s' and group_id='%s'&quot;, &quot;foo'bar&quot;, 4]  returns  &quot;name='foo''bar' and group_id='4'&quot;
        def sanitize_sql_array(ary)
          statement, *values = ary
          if values.first.is_a?(Hash) and statement =~ /:\w+/
            replace_named_bind_variables(statement, values.first)
          elsif statement.include?('?')
            replace_bind_variables(statement, values)
          elsif values.any?
            statement % values.collect { |value| connection.quote_string(value.to_s) }
          else
            statement
          end
        end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I try to create an ActiveRecord extension to be able to do
smarter date selections. These selections can have the form:&lt;br&gt;
@@@ruby MyModel.all(:conditions=&amp;gt;{:date_month =&amp;gt;
[2,6,8]})&lt;br&gt;
MyModel.all(:conditions=&amp;gt;{:date_month =&amp;gt; 3..7})&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;where date is a DateTime field. This causes problems. The array will be translated in the form:
@@@ruby
[&quot;... IN (?)&quot;, [2,6,8]]&lt;/code&gt;
&lt;/pre&gt;
And for the range type it idealy should become:&lt;br&gt;
@@@ruby [&quot;... BETWEEN ? AND ?&quot;, 3, 7]
&lt;pre&gt;
&lt;code&gt;This way is incompatible with the ar-extensions since in this case a Result Struct is generated that can only contain one value. This value should be passed with a * for the Range and just as one variable, to delever the sql arrays as described above. I did not see a clean way to improve that in that module without dirty tricks that may be specific for this one case.&lt;br&gt;
&lt;br&gt;


&lt;br&gt;
A solution is to create a completed SQL statement without question marks, this would look like:
@@@ruby
[&quot;... BETWEEN 3 AND 7&quot;]&lt;/code&gt;
&lt;/pre&gt;
In the method &lt;em&gt;sanitize_sql_array&lt;/em&gt; in the file:
&lt;em&gt;activerecor-2.3.2/lib/active_record/base.rb&lt;/em&gt; (in this case
starting from line 2337) this will result in:&lt;br&gt;
@@@ruby statement, *values = ary #=&amp;gt; statement = &quot;... BETWEEN 3
AND 7&quot;, values = []&lt;br&gt;
&lt;pre&gt;
&lt;code&gt;
This should not be a problem, but now the special case. Since sqlite does not have a month function I use the &lt;em&gt;strftime&lt;/em&gt; function, which would look like:
@@@sql
CAST(STRFTIME(&quot;%m&quot;, &quot;table&quot;.&quot;date&quot;) AS INTEGER) BETWEEN 3 AND 7&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will fail in the else statement because of the % function.
A solution would be:&lt;br&gt;
@@@ruby&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    # Accepts an array of conditions.  The array has each value
    # sanitized and interpolated into the SQL statement.
    #   [&quot;name='%s' and group_id='%s'&quot;, &quot;foo'bar&quot;, 4]  returns  &quot;name='foo''bar' and group_id='4'&quot;
    def sanitize_sql_array(ary)
      statement, *values = ary
      if values.first.is_a?(Hash) and statement =~ /:\w+/
        replace_named_bind_variables(statement, values.first)
      elsif statement.include?('?')
        replace_bind_variables(statement, values)
      elsif values.any?
        statement % values.collect { |value| connection.quote_string(value.to_s) }
      else
        statement
      end
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;

&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-19T14:32:00+01:00</created-at>
      <creator-id type="integer">60523</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2818</number>
      <permalink>activerecord-problem-with-sanitizing-array</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>ActiveRecord problem with sanitizing array</title>
      <updated-at type="datetime">2009-06-19T14:32:07+01:00</updated-at>
      <user-id type="integer">60523</user-id>
      <version type="integer">1</version>
      <user-name>bterkuile</user-name>
      <creator-name>bterkuile</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2818</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:52+01:00</created-at>
      <creator-id type="integer">60523</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2818</number>
      <permalink>activerecord-problem-with-sanitizing-array</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>ActiveRecord problem with sanitizing array</title>
      <updated-at type="datetime">2010-05-04T18:48:52+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>bterkuile</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2818</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-09T04:03:22+01:00</created-at>
      <creator-id type="integer">60523</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2818</number>
      <permalink>activerecord-problem-with-sanitizing-array</permalink>
      <priority type="integer">1914</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord</tag>
      <title>ActiveRecord problem with sanitizing array</title>
      <updated-at type="datetime">2010-10-09T04:03:25+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">3</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>bterkuile</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2818</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-11T10:53:46+01:00</created-at>
      <creator-id type="integer">60523</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2818</number>
      <permalink>activerecord-problem-with-sanitizing-array</permalink>
      <priority type="integer">1914</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>ActiveRecord problem with sanitizing array</title>
      <updated-at type="datetime">2010-10-11T10:53:48+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">5</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>bterkuile</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2818</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-08T08:51:27+00:00</created-at>
      <creator-id type="integer">60523</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2818</number>
      <permalink>activerecord-problem-with-sanitizing-array</permalink>
      <priority type="integer">1914</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>ActiveRecord problem with sanitizing array</title>
      <updated-at type="datetime">2010-11-08T08:51:33+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">7</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>bterkuile</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2818</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
