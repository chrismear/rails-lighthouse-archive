<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-27T20:40:31+01:00</created-at>
  <creator-id type="integer">142691</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6633</number>
  <permalink>activerelation-skips-where-in-some-scopes</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Activerelation skips where() in some scopes</title>
  <updated-at type="datetime">2011-03-27T20:40:33+01:00</updated-at>
  <user-id type="integer">142691</user-id>
  <version type="integer">1</version>
  <user-name>bmconseil</user-name>
  <creator-name>bmconseil</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6633</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hi,

When trying to chain scopes with joins() and where() relations, it appears that some where conditions are ignored if I use the model's relation's name. Here is a concrete example of the problem.

My models are
class Album &lt; ActiveRecord::Base
 has_many :photos, :dependent =&gt; :destroy
end
class Photo &lt; ActiveRecord::Base
 belongs_to :album
end

===== Case 1
With scopes written like below, I get a correct SQL but it's incomplete, missing my where() filters. The where method is called with &quot;:albumS&quot; 

class Photo &lt; ActiveRecord::Base
  scope :photo, lambda { |name| where(:name =&gt; name.downcase)    }
  scope :album, lambda { |name| joins(:album).where(:albums =&gt; {:name =&gt; name.downcase})    }
end

irb(main):134:0&gt; Photo.photo('ppp').album('aaaaa').to_sql
=&gt; &quot;SELECT     `photos`.* FROM       `photos`  INNER JOIN `albums` ON `albums`.`id` = `photos`.`album_id` WHERE     (`albums`.`name` = 'aaaaa')&quot;

Here, the filter on album.name is ok, but we're missing the filter on photo.name from the :photo scope, table names are OK


===== Case 2
With scopes written like below, I get an incorrect SQL query but missing my where() filters. The where method is called with &quot;:albumS&quot; 

class Photo &lt; ActiveRecord::Base
  scope :photo, lambda { |name| where(:name =&gt; name.downcase)    }
  scope :album, lambda { |name| joins(:album).where(:album =&gt; {:name =&gt; name.downcase})    }
end

irb(main):136:0&gt; Photo.photo('ppp').album('aaaaa').to_sql
=&gt; &quot;SELECT     `photos`.* FROM       `photos`  INNER JOIN `albums` ON `albums`.`id` = `photos`.`album_id` WHERE     (`photos`.`name` = 'ppp') AND (`album`.`name` = 'aaaaa')&quot;

Now, we find both filters on album.name AND on photo.name, but the table names are not correct!


=====
Am I doing something wrong in those situations?


Thanks</original-body>
  <latest-body>Hi,

When trying to chain scopes with joins() and where() relations, it appears that some where conditions are ignored if I use the model's relation's name. Here is a concrete example of the problem.

My models are
class Album &lt; ActiveRecord::Base
 has_many :photos, :dependent =&gt; :destroy
end
class Photo &lt; ActiveRecord::Base
 belongs_to :album
end

===== Case 1
With scopes written like below, I get a correct SQL but it's incomplete, missing my where() filters. The where method is called with &quot;:albumS&quot; 

class Photo &lt; ActiveRecord::Base
  scope :photo, lambda { |name| where(:name =&gt; name.downcase)    }
  scope :album, lambda { |name| joins(:album).where(:albums =&gt; {:name =&gt; name.downcase})    }
end

irb(main):134:0&gt; Photo.photo('ppp').album('aaaaa').to_sql
=&gt; &quot;SELECT     `photos`.* FROM       `photos`  INNER JOIN `albums` ON `albums`.`id` = `photos`.`album_id` WHERE     (`albums`.`name` = 'aaaaa')&quot;

Here, the filter on album.name is ok, but we're missing the filter on photo.name from the :photo scope, table names are OK


===== Case 2
With scopes written like below, I get an incorrect SQL query but missing my where() filters. The where method is called with &quot;:albumS&quot; 

class Photo &lt; ActiveRecord::Base
  scope :photo, lambda { |name| where(:name =&gt; name.downcase)    }
  scope :album, lambda { |name| joins(:album).where(:album =&gt; {:name =&gt; name.downcase})    }
end

irb(main):136:0&gt; Photo.photo('ppp').album('aaaaa').to_sql
=&gt; &quot;SELECT     `photos`.* FROM       `photos`  INNER JOIN `albums` ON `albums`.`id` = `photos`.`album_id` WHERE     (`photos`.`name` = 'ppp') AND (`album`.`name` = 'aaaaa')&quot;

Now, we find both filters on album.name AND on photo.name, but the table names are not correct!


=====
Am I doing something wrong in those situations?


Thanks</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;When trying to chain scopes with joins() and where() relations,
it appears that some where conditions are ignored if I use the
model's relation's name. Here is a concrete example of the
problem.&lt;/p&gt;
&lt;p&gt;My models are&lt;br&gt;
class Album &amp;lt; ActiveRecord::Base&lt;br&gt;
has_many :photos, :dependent =&amp;gt; :destroy end&lt;br&gt;
class Photo &amp;lt; ActiveRecord::Base&lt;br&gt;
belongs_to :album end&lt;/p&gt;
&lt;p&gt;===== Case 1 With scopes written like below, I get a correct SQL
but it's incomplete, missing my where() filters. The where method
is called with &quot;:albumS&quot;&lt;/p&gt;
&lt;p&gt;class Photo &amp;lt; ActiveRecord::Base&lt;br&gt;
scope :photo, lambda { |name| where(:name =&amp;gt; name.downcase) }
scope :album, lambda { |name| joins(:album).where(:albums =&amp;gt;
{:name =&amp;gt; name.downcase}) } end&lt;/p&gt;
&lt;p&gt;irb(main):134:0&amp;gt; Photo.photo('ppp').album('aaaaa').to_sql&lt;br&gt;
=&amp;gt; &quot;SELECT &lt;code&gt;photos&lt;/code&gt;.* FROM &lt;code&gt;photos&lt;/code&gt; INNER
JOIN &lt;code&gt;albums&lt;/code&gt; ON &lt;code&gt;albums&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;photos&lt;/code&gt;.&lt;code&gt;album_id&lt;/code&gt; WHERE
(&lt;code&gt;albums&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; = 'aaaaa')&quot;&lt;/p&gt;
&lt;p&gt;Here, the filter on album.name is ok, but we're missing the
filter on photo.name from the :photo scope, table names are OK&lt;/p&gt;
&lt;p&gt;===== Case 2 With scopes written like below, I get an incorrect
SQL query but missing my where() filters. The where method is
called with &quot;:albumS&quot;&lt;/p&gt;
&lt;p&gt;class Photo &amp;lt; ActiveRecord::Base&lt;br&gt;
scope :photo, lambda { |name| where(:name =&amp;gt; name.downcase) }
scope :album, lambda { |name| joins(:album).where(:album =&amp;gt;
{:name =&amp;gt; name.downcase}) } end&lt;/p&gt;
&lt;p&gt;irb(main):136:0&amp;gt; Photo.photo('ppp').album('aaaaa').to_sql&lt;br&gt;
=&amp;gt; &quot;SELECT &lt;code&gt;photos&lt;/code&gt;.* FROM &lt;code&gt;photos&lt;/code&gt; INNER
JOIN &lt;code&gt;albums&lt;/code&gt; ON &lt;code&gt;albums&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;photos&lt;/code&gt;.&lt;code&gt;album_id&lt;/code&gt; WHERE
(&lt;code&gt;photos&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; = 'ppp') AND
(&lt;code&gt;album&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; = 'aaaaa')&quot;&lt;/p&gt;
&lt;p&gt;Now, we find both filters on album.name AND on photo.name, but
the table names are not correct!&lt;/p&gt;
&lt;p&gt;===== Am I doing something wrong in those situations?&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

When trying to chain scopes with joins() and where() relations, it appears that some where conditions are ignored if I use the model's relation's name. Here is a concrete example of the problem.

My models are
class Album &lt; ActiveRecord::Base
 has_many :photos, :dependent =&gt; :destroy
end
class Photo &lt; ActiveRecord::Base
 belongs_to :album
end

===== Case 1
With scopes written like below, I get a correct SQL but it's incomplete, missing my where() filters. The where method is called with &quot;:albumS&quot; 

class Photo &lt; ActiveRecord::Base
  scope :photo, lambda { |name| where(:name =&gt; name.downcase)    }
  scope :album, lambda { |name| joins(:album).where(:albums =&gt; {:name =&gt; name.downcase})    }
end

irb(main):134:0&gt; Photo.photo('ppp').album('aaaaa').to_sql
=&gt; &quot;SELECT     `photos`.* FROM       `photos`  INNER JOIN `albums` ON `albums`.`id` = `photos`.`album_id` WHERE     (`albums`.`name` = 'aaaaa')&quot;

Here, the filter on album.name is ok, but we're missing the filter on photo.name from the :photo scope, table names are OK


===== Case 2
With scopes written like below, I get an incorrect SQL query but missing my where() filters. The where method is called with &quot;:albumS&quot; 

class Photo &lt; ActiveRecord::Base
  scope :photo, lambda { |name| where(:name =&gt; name.downcase)    }
  scope :album, lambda { |name| joins(:album).where(:album =&gt; {:name =&gt; name.downcase})    }
end

irb(main):136:0&gt; Photo.photo('ppp').album('aaaaa').to_sql
=&gt; &quot;SELECT     `photos`.* FROM       `photos`  INNER JOIN `albums` ON `albums`.`id` = `photos`.`album_id` WHERE     (`photos`.`name` = 'ppp') AND (`album`.`name` = 'aaaaa')&quot;

Now, we find both filters on album.name AND on photo.name, but the table names are not correct!


=====
Am I doing something wrong in those situations?


Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;When trying to chain scopes with joins() and where() relations,
it appears that some where conditions are ignored if I use the
model's relation's name. Here is a concrete example of the
problem.&lt;/p&gt;
&lt;p&gt;My models are&lt;br&gt;
class Album &amp;lt; ActiveRecord::Base&lt;br&gt;
has_many :photos, :dependent =&amp;gt; :destroy end&lt;br&gt;
class Photo &amp;lt; ActiveRecord::Base&lt;br&gt;
belongs_to :album end&lt;/p&gt;
&lt;p&gt;===== Case 1 With scopes written like below, I get a correct SQL
but it's incomplete, missing my where() filters. The where method
is called with &quot;:albumS&quot;&lt;/p&gt;
&lt;p&gt;class Photo &amp;lt; ActiveRecord::Base&lt;br&gt;
scope :photo, lambda { |name| where(:name =&amp;gt; name.downcase) }
scope :album, lambda { |name| joins(:album).where(:albums =&amp;gt;
{:name =&amp;gt; name.downcase}) } end&lt;/p&gt;
&lt;p&gt;irb(main):134:0&amp;gt; Photo.photo('ppp').album('aaaaa').to_sql&lt;br&gt;
=&amp;gt; &quot;SELECT &lt;code&gt;photos&lt;/code&gt;.* FROM &lt;code&gt;photos&lt;/code&gt; INNER
JOIN &lt;code&gt;albums&lt;/code&gt; ON &lt;code&gt;albums&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;photos&lt;/code&gt;.&lt;code&gt;album_id&lt;/code&gt; WHERE
(&lt;code&gt;albums&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; = 'aaaaa')&quot;&lt;/p&gt;
&lt;p&gt;Here, the filter on album.name is ok, but we're missing the
filter on photo.name from the :photo scope, table names are OK&lt;/p&gt;
&lt;p&gt;===== Case 2 With scopes written like below, I get an incorrect
SQL query but missing my where() filters. The where method is
called with &quot;:albumS&quot;&lt;/p&gt;
&lt;p&gt;class Photo &amp;lt; ActiveRecord::Base&lt;br&gt;
scope :photo, lambda { |name| where(:name =&amp;gt; name.downcase) }
scope :album, lambda { |name| joins(:album).where(:album =&amp;gt;
{:name =&amp;gt; name.downcase}) } end&lt;/p&gt;
&lt;p&gt;irb(main):136:0&amp;gt; Photo.photo('ppp').album('aaaaa').to_sql&lt;br&gt;
=&amp;gt; &quot;SELECT &lt;code&gt;photos&lt;/code&gt;.* FROM &lt;code&gt;photos&lt;/code&gt; INNER
JOIN &lt;code&gt;albums&lt;/code&gt; ON &lt;code&gt;albums&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;photos&lt;/code&gt;.&lt;code&gt;album_id&lt;/code&gt; WHERE
(&lt;code&gt;photos&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; = 'ppp') AND
(&lt;code&gt;album&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; = 'aaaaa')&quot;&lt;/p&gt;
&lt;p&gt;Now, we find both filters on album.name AND on photo.name, but
the table names are not correct!&lt;/p&gt;
&lt;p&gt;===== Am I doing something wrong in those situations?&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-27T20:40:31+01:00</created-at>
      <creator-id type="integer">142691</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6633</number>
      <permalink>activerelation-skips-where-in-some-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Activerelation skips where() in some scopes</title>
      <updated-at type="datetime">2011-03-27T20:40:33+01:00</updated-at>
      <user-id type="integer">142691</user-id>
      <version type="integer">1</version>
      <user-name>bmconseil</user-name>
      <creator-name>bmconseil</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6633</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
