<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-07T23:08:26+01:00</created-at>
  <creator-id type="integer">5701</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">368</number>
  <permalink>named_scope-with-bang</permalink>
  <priority type="integer">15850</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord named_scope patch tested</tag>
  <title>named_scope with bang</title>
  <updated-at type="datetime">2008-10-23T16:22:12+01:00</updated-at>
  <user-id type="integer">2171</user-id>
  <version type="integer">3</version>
  <user-name>Alex MacCaw</user-name>
  <creator-name>Ryan Bates</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
  <priority-name nil="true"></priority-name>
  <original-body>This patch allows you to call a named_scope with a bang (!) which will change the current scope instead of returning a new scope. This is useful for changing scopes conditionally.

@@@ ruby
topics = Topic.approved
topics.replied! if only_show_replied?
topics.scoped! :limit =&gt; limit if limit
@@@

Note: this patch is featured in &quot;Railscasts Episode 113&quot;:http://railscasts.com/episodes/113 (releasing this Monday).</original-body>
  <latest-body>This patch allows you to call a named_scope with a bang (!) which will change the current scope instead of returning a new scope. This is useful for changing scopes conditionally.

@@@ ruby
topics = Topic.approved
topics.replied! if only_show_replied?
topics.scoped! :limit =&gt; limit if limit
@@@

Note: this patch is featured in &quot;Railscasts Episode 113&quot;:http://railscasts.com/episodes/113 (releasing this Monday).</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
This patch allows you to call a named_scope with a bang (!) which will change the current scope instead of returning a new scope. This is useful for changing scopes conditionally.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;topics = Topic.approved
topics.replied! if only_show_replied?
topics.scoped! :limit =&amp;gt; limit if limit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Note: this patch is featured in &lt;a href=&quot;http://railscasts.com/episodes/113&quot;&gt;Railscasts Episode 113&lt;/a&gt; (releasing this Monday).
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch allows you to call a named_scope with a bang (!) which will change the current scope instead of returning a new scope. This is useful for adding scopes conditionally.

@@@ ruby
topics = Topic.approved
topics.replied! if only_show_replied?
topics.scoped! :limit =&gt; limit if limit
@@@

Note: this patch is featured in &quot;Railscasts Episode 113&quot;:http://railscasts.com/ (releasing this Monday).</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This patch allows you to call a named_scope with a bang (!) which will change the current scope instead of returning a new scope. This is useful for adding scopes conditionally.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;topics = Topic.approved
topics.replied! if only_show_replied?
topics.scoped! :limit =&amp;gt; limit if limit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Note: this patch is featured in &lt;a href=&quot;http://railscasts.com/&quot;&gt;Railscasts Episode 113&lt;/a&gt; (releasing this Monday).
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-08T00:04:53+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-08T00:04:53+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">1</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This would make search forms a lot simpler.

I like the idea.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This would make search forms a lot simpler.
&lt;/p&gt;&lt;p&gt;
I like the idea.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-10T16:19:33+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-10T16:19:33+01:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">2</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-10T17:07:29+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-10-23T16:22:08+01:00</updated-at>
      <user-id type="integer">2171</user-id>
      <version type="integer">3</version>
      <user-name>Alex MacCaw</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1
Really liked the idea</body>
      <body-html>&lt;div&gt;&lt;p&gt;
+1
&lt;/p&gt;&lt;p&gt;
Really liked the idea
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-10T17:56:23+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-10T17:56:23+01:00</updated-at>
      <user-id type="integer">22870</user-id>
      <version type="integer">4</version>
      <user-name>Rodrigo Urubatan</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree that this looks nice, but I think scopes should be treated as immutable. The semantics are clearer, it's easier to reason about them, and it allows nice things like caching a sql statement for a scope without worrying about it being changed out from under you.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I agree that this looks nice, but I think scopes should be treated as immutable. The semantics are clearer, it's easier to reason about them, and it allows nice things like caching a sql statement for a scope without worrying about it being changed out from under you.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-10T21:36:37+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-10T21:36:37+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>If you would like to keep scopes immutable, is there a better alternative to building them up conditionally? I really don't like having to reset a local variable each time like this:

@@@ ruby
topics = Topic.approved
topics = topics.replied if only_show_replied?
topics = topics.scoped :limit =&gt; limit if limit
@@@

This is a pattern I run into frequently and would love to see it addressed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
If you would like to keep scopes immutable, is there a better alternative to building them up conditionally? I really don't like having to reset a local variable each time like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;topics = Topic.approved
topics = topics.replied if only_show_replied?
topics = topics.scoped :limit =&amp;gt; limit if limit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This is a pattern I run into frequently and would love to see it addressed.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-10T21:44:28+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-10T21:44:28+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">6</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Something that seems to have been lost in the translation from the Railscast to this ticket is the usage that inspired this patch.

In the Railscast Ryan used this technique to build a dynamic/anonymous scope based on the request parameters.  Given that by using the technique he did Ryan was expecting the query to change from request to request it seems perfectly reasonable to allow such usage of named_scope (although it seems less of a named_scope now).

Additionally, isn't a bang method normally expected to change the object it's being called on?  So wouldn't the developer choosing to call the bang version be expecting the query to mutate?

Sure there are ramifications to using this technique but, to me at least, it should be the developer choosing to use the technique or not as opposed to the framework simply not allowing it.  (Yes I know Rails is opinionated, but so are the developers using it!)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Something that seems to have been lost in the translation from the Railscast to this ticket is the usage that inspired this patch.
&lt;/p&gt;&lt;p&gt;
In the Railscast Ryan used this technique to build a dynamic/anonymous scope based on the request parameters.  Given that by using the technique he did Ryan was expecting the query to change from request to request it seems perfectly reasonable to allow such usage of named_scope (although it seems less of a named_scope now).
&lt;/p&gt;&lt;p&gt;
Additionally, isn't a bang method normally expected to change the object it's being called on?  So wouldn't the developer choosing to call the bang version be expecting the query to mutate?
&lt;/p&gt;&lt;p&gt;
Sure there are ramifications to using this technique but, to me at least, it should be the developer choosing to use the technique or not as opposed to the framework simply not allowing it.  (Yes I know Rails is opinionated, but so are the developers using it!)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-11T01:02:37+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-11T01:02:37+01:00</updated-at>
      <user-id type="integer">22997</user-id>
      <version type="integer">7</version>
      <user-name>Chris Wade</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;
+1
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-18T07:20:13+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-18T07:20:13+01:00</updated-at>
      <user-id type="integer">21356</user-id>
      <version type="integer">8</version>
      <user-name>Zyclops</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1. Using Rails 2.1 for only 2 weeks, I've already encountered a situation where this bang syntax would have been more intuitive and tidier.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
+1. Using Rails 2.1 for only 2 weeks, I've already encountered a situation where this bang syntax would have been more intuitive and tidier.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-18T11:31:01+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-18T11:31:01+01:00</updated-at>
      <user-id type="integer">23769</user-id>
      <version type="integer">9</version>
      <user-name>JJ</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>There seems to be a lot of interest in this patch, any chance of it being accepted?

Regarding keeping scopes immutable, I fail to see what big advantages this brings. It's easy enough to clear any caches in the &quot;replace&quot; method, and if the developer needs it to be immutable he can call &quot;freeze&quot; on it. Is there a case where this would not be sufficient?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
There seems to be a lot of interest in this patch, any chance of it being accepted?
&lt;/p&gt;&lt;p&gt;
Regarding keeping scopes immutable, I fail to see what big advantages this brings. It's easy enough to clear any caches in the &quot;replace&quot; method, and if the developer needs it to be immutable he can call &quot;freeze&quot; on it. Is there a case where this would not be sufficient?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-22T06:07:32+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-22T06:07:32+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">10</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This patch is flawed. Given the examples and the tests in the patch:

  topics = Topic.approved
  topics.replied!
  topics.scoped!

I don't see why anyone would want this, as this would execute 3 queries. I think the whole idea is to mix the scopes you want, and then execute 1 query.

When you do this:

  scope = Product.scoped({})

you effectively executed a query to fetch all the products. Every time you assign a new scope a query is executed. So building up your conditions this way is highly inefficient.

Given railscast 112 (which end result does 6 queries), instead of assigning a new scope each time, what you'd need to do is build up your conditions as a hash, and then simply call Product.all(conditions) once.

The example given in Railscast 113 doesn't work at all, even with this patch is applied. It simply returns all products. The block argument |scope| is useless as yield doesn't pass any value to it. A block given to named_scope only allows to extend it (the block is passed into Module.new, that's all).

I do see what Ryan was trying to do, and I think the idea is very nice. But it needs a different implementation.

As a suggestion, possibly allow this:

  def find_topics 
    scope = Topic.approved_scope
    scope.replied_scope!
    scope.assigned_scope!(current_user) if current_user 
    scope.price_scope!(price) if price
    scope.all
  end

May not be nicest, but I think this is what Ryan was on about. You want to work with the scopes without each executing the find method while your manipulating them. To  make Jeremy happy, when you request a *_scope you could return a copy of the scope, not the original scope definition.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This patch is flawed. Given the examples and the tests in the patch:
&lt;/p&gt;&lt;p&gt;
topics = Topic.approved
&lt;/p&gt;&lt;p&gt;
topics.replied!
&lt;/p&gt;&lt;p&gt;
topics.scoped!
&lt;/p&gt;&lt;p&gt;
I don't see why anyone would want this, as this would execute 3 queries. I think the whole idea is to mix the scopes you want, and then execute 1 query.
&lt;/p&gt;&lt;p&gt;
When you do this:
&lt;/p&gt;&lt;p&gt;
scope = Product.scoped({})
&lt;/p&gt;&lt;p&gt;
you effectively executed a query to fetch all the products. Every time you assign a new scope a query is executed. So building up your conditions this way is highly inefficient.
&lt;/p&gt;&lt;p&gt;
Given railscast 112 (which end result does 6 queries), instead of assigning a new scope each time, what you'd need to do is build up your conditions as a hash, and then simply call Product.all(conditions) once.
&lt;/p&gt;&lt;p&gt;
The example given in Railscast 113 doesn't work at all, even with this patch is applied. It simply returns all products. The block argument |scope| is useless as yield doesn't pass any value to it. A block given to named_scope only allows to extend it (the block is passed into Module.new, that's all).
&lt;/p&gt;&lt;p&gt;
I do see what Ryan was trying to do, and I think the idea is very nice. But it needs a different implementation.
&lt;/p&gt;&lt;p&gt;
As a suggestion, possibly allow this:
&lt;/p&gt;&lt;p&gt;
def find_topics
&lt;/p&gt;&lt;p&gt;
scope = Topic.approved_scope
&lt;/p&gt;&lt;p&gt;
scope.replied_scope!
&lt;/p&gt;&lt;p&gt;
scope.assigned_scope!(current_user) if current_user
&lt;/p&gt;&lt;p&gt;
scope.price_scope!(price) if price
&lt;/p&gt;&lt;p&gt;
scope.all
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
May not be nicest, but I think this is what Ryan was on about. You want to work with the scopes without each executing the find method while your manipulating them. To  make Jeremy happy, when you request a *_scope you could return a copy of the scope, not the original scope definition.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-26T03:54:36+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord named_scope patch tested</tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-26T03:54:36+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">11</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Sorry for the above, it does work, though not entirely as I expected. I was testing in script/console, and then it doesn't work, because the output of scope would trigger the find method. When you chain scopes within a method, and then call the method you're fine though.

wrt railscasts 113, the code should look like:

@@@ruby
def find_products
  returning (Product.scoped({})) do |scope|
    #etc.
  end
end
@@@

Now the block is yielded by the returning method instead of the scoped method.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Sorry for the above, it does work, though not entirely as I expected. I was testing in script/console, and then it doesn't work, because the output of scope would trigger the find method. When you chain scopes within a method, and then call the method you're fine though.
&lt;/p&gt;&lt;p&gt;
wrt railscasts 113, the code should look like:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;def find_products
  returning (Product.scoped({})) do |scope|
    #etc.
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now the block is yielded by the returning method instead of the scoped method.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-26T05:33:01+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord named_scope patch tested</tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-26T05:33:01+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">12</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I decided to implement this functionality as a gem. It's slightly different, so instead of altering Scope, it uses a separate scope builder class.

http://github.com/ryanb/scope-builder/tree/master

Would this implementation more likely be accepted into Rails core? If so I can write up a patch. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I decided to implement this functionality as a gem. It's slightly different, so instead of altering Scope, it uses a separate scope builder class.
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/ryanb/scope-builder/tree/master&quot;&gt;http://github.com/ryanb/scope-bu...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
Would this implementation more likely be accepted into Rails core? If so I can write up a patch. :)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-26T18:49:36+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord named_scope patch tested</tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-06-26T18:49:36+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">13</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>What's the status of this? I think this could be a valuable addition to core.</body>
      <body-html>&lt;div&gt;&lt;p&gt;What's the status of this? I think this could be a valuable addition to core.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-11T09:41:17+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord named_scope patch tested</tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-08-11T09:41:17+01:00</updated-at>
      <user-id type="integer">21241</user-id>
      <version type="integer">14</version>
      <user-name>Magnus Bergmark</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree with what Jeremy said. Apart from that, I'm not really a fan of building scopes conditionally on the fly. It feels like we're missing a Condition Builder and named scopes are what comes the closest. Closing this ticket for now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree with what Jeremy said. Apart from that, I'm not really a fan of building scopes conditionally on the fly. It feels like we're missing a Condition Builder and named scopes are what comes the closest. Closing this ticket for now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-22T02:09:47+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord named_scope patch tested</tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-08-22T02:09:47+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">15</version>
      <user-name>Pratik</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>A condition builder would be a really nice feature, something where you can easily access the various parts that make up a query and at any point and add, edit or manipulate.

At the moment named_scope is the easiest way of generating various conditions from large forms. There is no way of course to inspect and manipulate the attached sql once you've already scoped it (unless your using .send(:construct_finder_sql, {}) and than manipulate the sql string.

Any thoughts on how a condition builder would work?  I've not seen any good examples in the other languages i've used. So far named_scope is still the winner.</body>
      <body-html>&lt;div&gt;&lt;p&gt;A condition builder would be a really nice feature, something where you can easily access the various parts that make up a query and at any point and add, edit or manipulate.&lt;/p&gt;

&lt;p&gt;At the moment named_scope is the easiest way of generating various conditions from large forms. There is no way of course to inspect and manipulate the attached sql once you've already scoped it (unless your using .send(:construct_finder_sql, {}) and than manipulate the sql string.&lt;/p&gt;

&lt;p&gt;Any thoughts on how a condition builder would work?  I've not seen any good examples in the other languages i've used. So far named_scope is still the winner.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-22T02:34:36+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">368</number>
      <permalink>named_scope-with-bang</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord named_scope patch tested</tag>
      <title>named_scope with bang</title>
      <updated-at type="datetime">2008-08-22T02:34:36+01:00</updated-at>
      <user-id type="integer">21356</user-id>
      <version type="integer">16</version>
      <user-name>Zyclops</user-name>
      <creator-name>Ryan Bates</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/368</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>5d5e60882f490d9ceba99368398b6e02abc6c2a0</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-06-07T23:08:27+01:00</created-at>
      <filename>named_scope_with_bang.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">26347</id>
      <size type="integer">3200</size>
      <uploader-id type="integer">5701</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/26347/named_scope_with_bang.diff</url>
    </attachment>
  </attachments>
</ticket>
