From 935dfe36c5c99ca1507838cc6c76d0a1ceb0f00a Mon Sep 17 00:00:00 2001
From: George Ogata <george.ogata@gmail.com>
Date: Sat, 13 Feb 2010 21:36:00 -0500
Subject: [PATCH] Add rake task to print unused routes (routes:unused).

---
 railties/lib/rails/tasks/routes.rake |   49 +++++++++++++++++++++++++--------
 1 files changed, 37 insertions(+), 12 deletions(-)

diff --git a/railties/lib/rails/tasks/routes.rake b/railties/lib/rails/tasks/routes.rake
index ac0f440..85eae24 100644
--- a/railties/lib/rails/tasks/routes.rake
+++ b/railties/lib/rails/tasks/routes.rake
@@ -1,17 +1,42 @@
 desc 'Print out all defined routes in match order, with names. Target specific controller with CONTROLLER=x.'
 task :routes => :environment do
-  Rails::Application.reload_routes!
-  all_routes = ENV['CONTROLLER'] ? ActionController::Routing::Routes.routes.select { |route| route.defaults[:controller] == ENV['CONTROLLER'] } : ActionController::Routing::Routes.routes
-  routes = all_routes.collect do |route|
-    name = ActionController::Routing::Routes.named_routes.routes.index(route).to_s
-    reqs = route.requirements.empty? ? "" : route.requirements.inspect
-    {:name => name, :verb => route.verb.to_s, :path => route.path, :reqs => reqs}
+  RoutesTasks.print_routes
+end
+
+namespace :routes do
+  desc 'Print out all unused routes in match order, with names. Target specific controller with CONTROLLER=x.'
+  task :unused => :environment do
+    RoutesTasks.print_routes do |routes|
+      routes.reject! do |r|
+        controller_class_name = "#{r[:controller]}_controller".camelize
+        controller_class =
+          begin
+            controller_class_name.constantize
+          rescue NameError
+            next false
+          end
+        controller_class.action_methods.include?(r[:action])
+      end
+    end
   end
-  routes.reject!{ |r| r[:path] == "/rails/info/properties" } # skip the route if it's internal info route
-  name_width = routes.collect {|r| r[:name]}.collect {|n| n.length}.max
-  verb_width = routes.collect {|r| r[:verb]}.collect {|v| v.length}.max
-  path_width = routes.collect {|r| r[:path]}.collect {|s| s.length}.max
-  routes.each do |r|
-    puts "#{r[:name].rjust(name_width)} #{r[:verb].ljust(verb_width)} #{r[:path].ljust(path_width)} #{r[:reqs]}"
+end
+
+module RoutesTasks
+  def self.print_routes
+    Rails::Application.reload_routes!
+    all_routes = ENV['CONTROLLER'] ? ActionController::Routing::Routes.routes.select { |route| route.defaults[:controller] == ENV['CONTROLLER'] } : ActionController::Routing::Routes.routes
+    routes = all_routes.collect do |route|
+      name = ActionController::Routing::Routes.named_routes.routes.index(route).to_s
+      reqs = route.requirements.empty? ? "" : route.requirements.inspect
+      {:name => name, :verb => route.verb.to_s, :path => route.path, :reqs => reqs, :controller => route.requirements[:controller], :action => route.requirements[:action]}
+    end
+    routes.reject!{ |r| r[:path] == "/rails/info/properties" } # skip the route if it's internal info route
+    yield routes if block_given?
+    name_width = routes.collect {|r| r[:name]}.collect {|n| n.length}.max
+    verb_width = routes.collect {|r| r[:verb]}.collect {|v| v.length}.max
+    path_width = routes.collect {|r| r[:path]}.collect {|s| s.length}.max
+    routes.each do |r|
+      puts "#{r[:name].rjust(name_width)} #{r[:verb].ljust(verb_width)} #{r[:path].ljust(path_width)} #{r[:reqs]}"
+    end
   end
 end
-- 
1.6.6.1

