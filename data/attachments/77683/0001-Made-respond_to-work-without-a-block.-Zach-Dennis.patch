From 21cadc42ed2ecabded117cbfe09b96850699cf0c Mon Sep 17 00:00:00 2001
From: Zach Dennis <zach.dennis@gmail.com>
Date: Mon, 12 Jan 2009 21:11:22 -0500
Subject: [PATCH] Made respond_to work without a block. (Zach Dennis / Brandon Keepers)

---
 actionpack/lib/action_controller/base.rb          |    1 +
 actionpack/lib/action_controller/mime_responds.rb |   15 ++++++---
 actionpack/test/controller/mime_responds_test.rb  |   33 +++++++++++++++++---
 3 files changed, 39 insertions(+), 10 deletions(-)

diff --git a/actionpack/lib/action_controller/base.rb b/actionpack/lib/action_controller/base.rb
index e221141..fb84177 100644
--- a/actionpack/lib/action_controller/base.rb
+++ b/actionpack/lib/action_controller/base.rb
@@ -1262,6 +1262,7 @@ module ActionController #:nodoc:
       def perform_action
         if action_methods.include?(action_name)
           send(action_name)
+          @responder.respond if @responder
           default_render unless performed?
         elsif respond_to? :method_missing
           method_missing action_name
diff --git a/actionpack/lib/action_controller/mime_responds.rb b/actionpack/lib/action_controller/mime_responds.rb
index b755363..e0bea18 100644
--- a/actionpack/lib/action_controller/mime_responds.rb
+++ b/actionpack/lib/action_controller/mime_responds.rb
@@ -100,11 +100,16 @@ module ActionController #:nodoc:
       #
       #   Mime::Type.register "image/jpg", :jpg
       def respond_to(*types, &block)
-        raise ArgumentError, "respond_to takes either types or a block, never both" unless types.any? ^ block
-        block ||= lambda { |responder| types.each { |type| responder.send(type) } }
-        responder = Responder.new(self)
-        block.call(responder)
-        responder.respond
+        if block_given? || types.any?
+          raise ArgumentError, "respond_to takes either types or a block, never both" unless types.any? ^ block
+          block ||= lambda { |responder| types.each { |type| responder.send(type) } }
+          responder ||= Responder.new(self)
+          block.call(responder)
+          responder.respond
+        else
+          @responder ||= Responder.new(self)
+          @responder
+        end
       end
     end
 
diff --git a/actionpack/test/controller/mime_responds_test.rb b/actionpack/test/controller/mime_responds_test.rb
index dc59180..5dbe7bf 100644
--- a/actionpack/test/controller/mime_responds_test.rb
+++ b/actionpack/test/controller/mime_responds_test.rb
@@ -2,6 +2,11 @@ require 'abstract_unit'
 
 class RespondToController < ActionController::Base
   layout :set_layout
+  
+  def format_without_respond_to
+    respond_to.html { render :text => "HTML"    }
+    respond_to.xml  { render :text => "XML"     }
+  end
 
   def html_xml_or_rss
     respond_to do |type|
@@ -178,25 +183,43 @@ class MimeControllerTest < ActionController::TestCase
     @request.accept = "text/html"
     get :js_or_html
     assert_equal 'HTML', @response.body
-
+  
     get :html_or_xml
     assert_equal 'HTML', @response.body
-
+  
     get :just_xml
     assert_response 406
   end
-
+  
   def test_all
     @request.accept = "*/*"
     get :js_or_html
     assert_equal 'HTML', @response.body # js is not part of all
-
+  
     get :html_or_xml
     assert_equal 'HTML', @response.body
-
+  
     get :just_xml
     assert_equal 'XML', @response.body
   end
+  
+  def test_all_with_implicit_respond_to
+    @request.accept = "*/*"
+    get :format_without_respond_to
+    assert_equal 'HTML', @response.body # js is not part of all
+  end
+  
+  def test_without_implicit_respond_to_for_first_format
+    @request.accept = "text/html"
+    get :format_without_respond_to
+    assert_equal 'HTML', @response.body
+  end
+  
+  def test_without_implicit_respond_to_for_second_format
+    @request.accept = "application/xml"
+    get :format_without_respond_to
+    assert_equal 'XML', @response.body    
+  end
 
   def test_xml
     @request.accept = "application/xml"
-- 
1.6.1

