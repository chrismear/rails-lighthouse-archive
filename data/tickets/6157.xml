<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-01-18T08:52:34+00:00</created-at>
  <creator-id type="integer">18336</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6157</number>
  <permalink>activerecord-scope-class-method-requires-a-database-connection</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>&quot;activerecord scopes&quot; establish_connection &quot;rails 3.0.3&quot;</tag>
  <title>ActiveRecord scope class method requires a database connection</title>
  <updated-at type="datetime">2011-03-26T01:37:30+00:00</updated-at>
  <user-id type="integer">142823</user-id>
  <version type="integer">8</version>
  <user-name>bingbing</user-name>
  <creator-name>Peer Allan</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6157</url>
  <priority-name>Low</priority-name>
  <original-body>ActiveRecord 3 based Rubygem
At our company we had to integrate with a legacy database system. To manage it we created a nice little gem to handle it. Basically the gem was just a collection of ActiveRecord models, nicely namespaced, so that we could include it in any application that made have needed access to that db.  In code outside of Rails, where we commonly used the gem we would just do this,

@@@ ruby
  require 'legacy_database'
  LegacyDatabase::Base.establish_connection(...)
@@@

Using ActiveRecord 3 this no longer works when used outside of Rails. 

@@@ ruby
  require 'legacy_database' # &lt;= raises ActiveRecord::ConnectionNotEstablished
  LegacyDatabase::Base.establish_connection(...)
@@@

The backtrace showed us that when the gem was being loaded when it hits the first scope call Arel attempts to connect to the database. Its a classic chicken/egg situation. You can't initialize the connection until you load the gem and you can't load the gem without initializing the connection.

In our situation we aren't using the gem in concert with any other ActiveRecord connections so we are able to use ActiveRecord::Base to establish the connection.

@@@ ruby
  require 'activerecord'
  ActiveRecord::Base.establish_connection(...)
  require 'legacy_database'
  LegacyDatabase::Foo.find(1)  # It work's
@@@

This naturally is not an ideal situation.</original-body>
  <latest-body>ActiveRecord 3 based Rubygem
At our company we had to integrate with a legacy database system. To manage it we created a nice little gem to handle it. Basically the gem was just a collection of ActiveRecord models, nicely namespaced, so that we could include it in any application that made have needed access to that db.  In code outside of Rails, where we commonly used the gem we would just do this,

@@@ ruby
  require 'legacy_database'
  LegacyDatabase::Base.establish_connection(...)
@@@

Using ActiveRecord 3 this no longer works when used outside of Rails. 

@@@ ruby
  require 'legacy_database' # &lt;= raises ActiveRecord::ConnectionNotEstablished
  LegacyDatabase::Base.establish_connection(...)
@@@

The backtrace showed us that when the gem was being loaded when it hits the first scope call Arel attempts to connect to the database. Its a classic chicken/egg situation. You can't initialize the connection until you load the gem and you can't load the gem without initializing the connection.

In our situation we aren't using the gem in concert with any other ActiveRecord connections so we are able to use ActiveRecord::Base to establish the connection.

@@@ ruby
  require 'activerecord'
  ActiveRecord::Base.establish_connection(...)
  require 'legacy_database'
  LegacyDatabase::Foo.find(1)  # It work's
@@@

This naturally is not an ideal situation.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActiveRecord 3 based Rubygem&lt;br&gt;
At our company we had to integrate with a legacy database system.
To manage it we created a nice little gem to handle it. Basically
the gem was just a collection of ActiveRecord models, nicely
namespaced, so that we could include it in any application that
made have needed access to that db. In code outside of Rails, where
we commonly used the gem we would just do this,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  require 'legacy_database'
  LegacyDatabase::Base.establish_connection(...)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Using ActiveRecord 3 this no longer works when used outside of
Rails.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  require 'legacy_database' # &amp;lt;= raises ActiveRecord::ConnectionNotEstablished
  LegacyDatabase::Base.establish_connection(...)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The backtrace showed us that when the gem was being loaded when
it hits the first scope call Arel attempts to connect to the
database. Its a classic chicken/egg situation. You can't initialize
the connection until you load the gem and you can't load the gem
without initializing the connection.&lt;/p&gt;
&lt;p&gt;In our situation we aren't using the gem in concert with any
other ActiveRecord connections so we are able to use
ActiveRecord::Base to establish the connection.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  require 'activerecord'
  ActiveRecord::Base.establish_connection(...)
  require 'legacy_database'
  LegacyDatabase::Foo.find(1)  # It work's&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This naturally is not an ideal situation.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveRecord 3 based Rubygem
At our company we had to integrate with a legacy database system. To manage it we created a nice little gem to handle it. Basically the gem was just a collection of ActiveRecord models, nicely namespaced, so that we could include it in any application that made have needed access to that db.  In code outside of Rails, where we commonly used the gem we would just do this,

@@@ ruby
  require 'legacy_database'
  LegacyDatabase::Base.establish_connection(...)
@@@

Using ActiveRecord 3 this no longer works when used outside of Rails. 

@@@ ruby
  require 'legacy_database' # &lt;= raises ActiveRecord::ConnectionNotEstablished
  LegacyDatabase::Base.establish_connection(...)
@@@

The backtrace showed us that when the gem was being loaded when it hits the first scope call Arel attempts to connect to the database. Its a classic chicken/egg situation. You can't initialize the connection until you load the gem and you can't load the gem without initializing the connection.

In our situation we aren't using the gem in concert with any other ActiveRecord connections so we are able to use ActiveRecord::Base to establish the connection.

@@@ ruby
  require 'activerecord'
  ActiveRecord::Base.establish_connection(...)
  require 'legacy_database'
  LegacyDatabase::Foo.find(1)  # It work's
@@@

This naturally is not an ideal situation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveRecord 3 based Rubygem&lt;br&gt;
At our company we had to integrate with a legacy database system.
To manage it we created a nice little gem to handle it. Basically
the gem was just a collection of ActiveRecord models, nicely
namespaced, so that we could include it in any application that
made have needed access to that db. In code outside of Rails, where
we commonly used the gem we would just do this,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  require 'legacy_database'
  LegacyDatabase::Base.establish_connection(...)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Using ActiveRecord 3 this no longer works when used outside of
Rails.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  require 'legacy_database' # &amp;lt;= raises ActiveRecord::ConnectionNotEstablished
  LegacyDatabase::Base.establish_connection(...)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The backtrace showed us that when the gem was being loaded when
it hits the first scope call Arel attempts to connect to the
database. Its a classic chicken/egg situation. You can't initialize
the connection until you load the gem and you can't load the gem
without initializing the connection.&lt;/p&gt;
&lt;p&gt;In our situation we aren't using the gem in concert with any
other ActiveRecord connections so we are able to use
ActiveRecord::Base to establish the connection.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  require 'activerecord'
  ActiveRecord::Base.establish_connection(...)
  require 'legacy_database'
  LegacyDatabase::Foo.find(1)  # It work's&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This naturally is not an ideal situation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-13T13:46:01+00:00</created-at>
      <creator-id type="integer">18336</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6157</number>
      <permalink>activerecord-scope-class-method-requires-a-database-connection</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord scopes&quot; establish_connection &quot;rails 3.0.3&quot;</tag>
      <title>ActiveRecord scope class method requires a database connection</title>
      <updated-at type="datetime">2010-12-13T13:46:05+00:00</updated-at>
      <user-id type="integer">18336</user-id>
      <version type="integer">1</version>
      <user-name>Peer Allan</user-name>
      <creator-name>Peer Allan</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6157</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've just come across this issue in another project where we manually require AR + all the models, then establish the connection some time afterwards.

My workaround is a class method encapsulating an anonymous scope, e.g.

class Foo
  def self.online
    self.scoped.joins(:bar).where(:bars =&gt; {:disconnected_at =&gt; nil})
  end
end

Since AR/Arel can't validate such anonymous scopes at require-time, it gets around the problem. It does raise the question of exactly how useful that validation is, though. Obviously, they could just defer it until require_connection is called if there's no connection at require time - but maybe it's not useful and should just be quietly dropped in favour of an error at runtime when you try to use a named scope referencing an invisible table?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've just come across this issue in another project where we
manually require AR + all the models, then establish the connection
some time afterwards.&lt;/p&gt;
&lt;p&gt;My workaround is a class method encapsulating an anonymous
scope, e.g.&lt;/p&gt;
&lt;p&gt;class Foo&lt;br&gt;
def self.online&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;self.scoped.joins(:bar).where(:bars =&amp;gt; {:disconnected_at =&amp;gt; nil})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;Since AR/Arel can't validate such anonymous scopes at
require-time, it gets around the problem. It does raise the
question of exactly how useful that validation is, though.
Obviously, they could just defer it until require_connection is
called if there's no connection at require time - but maybe it's
not useful and should just be quietly dropped in favour of an error
at runtime when you try to use a named scope referencing an
invisible table?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-14T10:56:56+00:00</created-at>
      <creator-id type="integer">18336</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6157</number>
      <permalink>activerecord-scope-class-method-requires-a-database-connection</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord scopes&quot; establish_connection &quot;rails 3.0.3&quot;</tag>
      <title>ActiveRecord scope class method requires a database connection</title>
      <updated-at type="datetime">2011-01-14T10:57:07+00:00</updated-at>
      <user-id type="integer">66277</user-id>
      <version type="integer">2</version>
      <user-name>Nick</user-name>
      <creator-name>Peer Allan</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6157</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.bridalgownsinlove.com/cheap-halter-wedding-dresses-9&quot;&gt;Halter Wedding Dresses&lt;/a&gt;&lt;/b&gt; symbolizes virginity and purity of bulk. It is a symbol of cleanliness and desirable, it is very difficult to understand why married glow in shades of white. Although the passage of time, have &lt;b&gt;&lt;a href=&quot;http://www.bridalgownsinlove.com/cheap-lace-wedding-dresses-49&quot;&gt;Wholesale Lace wedding dresses&lt;/a&gt;&lt;/b&gt;  wholesale made themselves known. Some even use different colors of cream and pink. In any event, most people choose to be illuminated in white wedding dresses ivory.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=
&quot;http://www.bridalgownsinlove.com/cheap-halter-wedding-dresses-9&quot;&gt;Halter
Wedding Dresses&lt;/a&gt;&lt;/b&gt; symbolizes virginity and purity of bulk. It
is a symbol of cleanliness and desirable, it is very difficult to
understand why married glow in shades of white. Although the
passage of time, have &lt;b&gt;&lt;a href=
&quot;http://www.bridalgownsinlove.com/cheap-lace-wedding-dresses-49&quot;&gt;Wholesale
Lace wedding dresses&lt;/a&gt;&lt;/b&gt; wholesale made themselves known. Some
even use different colors of cream and pink. In any event, most
people choose to be illuminated in white wedding dresses ivory.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-18T08:42:49+00:00</created-at>
      <creator-id type="integer">18336</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6157</number>
      <permalink>activerecord-scope-class-method-requires-a-database-connection</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord scopes&quot; establish_connection &quot;rails 3.0.3&quot;</tag>
      <title>ActiveRecord scope class method requires a database connection</title>
      <updated-at type="datetime">2011-01-18T08:52:34+00:00</updated-at>
      <user-id type="integer">133048</user-id>
      <version type="integer">3</version>
      <user-name>mary01</user-name>
      <creator-name>Peer Allan</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6157</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>My original post described a workaround for when you are encountering this problem outside a Rails app.  Since then I have tried to work around this in a couple more ways in a Rails 3 application and am not having much luck.  Our legacy gem is formatted very much like ActiveRecord

@@@ ruby
module LegacyDatabase
  class Base &lt; ActiveRecord::Base
    establish_connection :legacy_database # &lt;= important line
  end
end
@@@

If we leave the establish_connection in the gem then we get a configuration not found error. (legacy_database database is not configured (ActiveRecord::AdapterNotSpecified))

If we remove that line then the app starts to load the models that are contained in the gem.  However, once it hits an association, for example:

@@@ ruby
module LegacyDatabase
  class Foo &lt; Base
    has_and_belongs_to_many :bars
  end
end
@@@

We get a ActiveRecord::ConnectionNotEstablished error.  Here is the important part of the backtrace:

@@@
from /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/connection_adapters/abstract/connection_specification.rb:97:in `retrieve_connection'
from /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/connection_adapters/abstract/connection_specification.rb:89:in `connection'
from /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/associations.rb:1804:in `create_has_and_belongs_to_many_reflection'
from /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/associations.rb:1411:in `has_and_belongs_to_many'
from /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/autosave_association.rb:137:in `has_and_belongs_to_many'
@@@

At this point, we have exhausted all avenues that we can think of, to get around this. It is very unfortunate as this completely blocks our Rails 3 upgrade. Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;My original post described a workaround for when you are
encountering this problem outside a Rails app. Since then I have
tried to work around this in a couple more ways in a Rails 3
application and am not having much luck. Our legacy gem is
formatted very much like ActiveRecord&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module LegacyDatabase
  class Base &amp;lt; ActiveRecord::Base
    establish_connection :legacy_database # &amp;lt;= important line
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If we leave the establish_connection in the gem then we get a
configuration not found error. (legacy_database database is not
configured (ActiveRecord::AdapterNotSpecified))&lt;/p&gt;
&lt;p&gt;If we remove that line then the app starts to load the models
that are contained in the gem. However, once it hits an
association, for example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module LegacyDatabase
  class Foo &amp;lt; Base
    has_and_belongs_to_many :bars
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We get a ActiveRecord::ConnectionNotEstablished error. Here is
the important part of the backtrace:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/connection_adapters/abstract/connection_specification.rb:97:in `retrieve_connection'
from /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/connection_adapters/abstract/connection_specification.rb:89:in `connection'
from /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/associations.rb:1804:in `create_has_and_belongs_to_many_reflection'
from /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/associations.rb:1411:in `has_and_belongs_to_many'
from /user/me/.rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.0.5/lib/active_record/autosave_association.rb:137:in `has_and_belongs_to_many'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;At this point, we have exhausted all avenues that we can think
of, to get around this. It is very unfortunate as this completely
blocks our Rails 3 upgrade. Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-08T14:30:02+00:00</created-at>
      <creator-id type="integer">18336</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6157</number>
      <permalink>activerecord-scope-class-method-requires-a-database-connection</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord scopes&quot; establish_connection &quot;rails 3.0.3&quot;</tag>
      <title>ActiveRecord scope class method requires a database connection</title>
      <updated-at type="datetime">2011-03-08T14:30:05+00:00</updated-at>
      <user-id type="integer">18336</user-id>
      <version type="integer">4</version>
      <user-name>Peer Allan</user-name>
      <creator-name>Peer Allan</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6157</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Peer, can you provide the source for &quot;legacy_database&quot;.  I cannot debug the problem without knowing why requiring that file will produce an `ActiveRecord::ConnectionNotEstablished` exception.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Peer, can you provide the source for &quot;legacy_database&quot;. I
cannot debug the problem without knowing why requiring that file
will produce an &lt;code&gt;ActiveRecord::ConnectionNotEstablished&lt;/code&gt;
exception.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-08T16:21:55+00:00</created-at>
      <creator-id type="integer">18336</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6157</number>
      <permalink>activerecord-scope-class-method-requires-a-database-connection</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; establish_connection &quot;rails 3.0.3&quot;</tag>
      <title>ActiveRecord scope class method requires a database connection</title>
      <updated-at type="datetime">2011-03-08T16:22:07+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">5</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Peer Allan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6157</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Attached is a simple gem that demonstrates the problem.  Attempt to load it into a Rails 3 application and you will see the errors.  Detailed instructions are shown below and included in the legacy_database.rb file.  There are 3 scenarios listed in terms of importance.

Three things can be tested by including this gem in your app

1. scope calls will attempt to connect to the database before a 
   connection has been established

2. has_and_belong_to_many associations in the models will attempt to
   connect to the database before a connection has been established

3. an establish_connection in the Base class as shown below will
   not work regardless of database.yml settings. Although, setting
   a gem up this way is probably not useful anyway ;)

Instructions:

1. Include this gem in your rails 3 app's Gemfile
gem 'legacy_database', :path =&gt; '/path/to/legacy_database'
2. bundle install the gem


Scenario 1
1) comment out the habtm lines in foo.rb and bar.rb
2) ensure the scope line in baz.rb is not commented out
3) attempt to load the console

Scenario 2
1) comment out scope in baz.rb
2) Ensure the habtm lines in bar.rb and foo.rb are not commented out
3) attempt to load the console

Scenario 3
1) uncomment the 'establish_connection' line in this file and attempt
to load a console
2) add a legacdy_database config to your database.yml and load the console

I also tested it with a &quot;has_many&quot; and a &quot;has_many :through&quot; relationships which did not cause the same problem. Therefore the workaround if a habtm is required is that you have to use a &quot;has_many :through&quot;.  That said, the association issues and establish_connection are only related side effects. Its the problem that primarily affects us (so now we have a workaround, yay!). The scope issues is the big fish in this ticket.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attached is a simple gem that demonstrates the problem. Attempt
to load it into a Rails 3 application and you will see the errors.
Detailed instructions are shown below and included in the
legacy_database.rb file. There are 3 scenarios listed in terms of
importance.&lt;/p&gt;
&lt;p&gt;Three things can be tested by including this gem in your app&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;scope calls will attempt to connect to the database before a&lt;br&gt;
connection has been established&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;has_and_belong_to_many associations in the models will attempt
to&lt;br&gt;
connect to the database before a connection has been
established&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an establish_connection in the Base class as shown below
will&lt;br&gt;
not work regardless of database.yml settings. Although, setting a
gem up this way is probably not useful anyway ;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instructions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Include this gem in your rails 3 app's Gemfile&lt;br&gt;
gem 'legacy_database', :path =&amp;gt;
'/path/to/legacy_database'&lt;br&gt;&lt;/li&gt;
&lt;li&gt;bundle install the gem&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Scenario 1&lt;br&gt;
1) comment out the habtm lines in foo.rb and bar.rb&lt;br&gt;
2) ensure the scope line in baz.rb is not commented out&lt;br&gt;
3) attempt to load the console&lt;/p&gt;
&lt;p&gt;Scenario 2&lt;br&gt;
1) comment out scope in baz.rb&lt;br&gt;
2) Ensure the habtm lines in bar.rb and foo.rb are not commented
out&lt;br&gt;
3) attempt to load the console&lt;/p&gt;
&lt;p&gt;Scenario 3&lt;br&gt;
1) uncomment the 'establish_connection' line in this file and
attempt&lt;br&gt;
to load a console&lt;br&gt;
2) add a legacdy_database config to your database.yml and load the
console&lt;/p&gt;
&lt;p&gt;I also tested it with a &quot;has_many&quot; and a &quot;has_many :through&quot;
relationships which did not cause the same problem. Therefore the
workaround if a habtm is required is that you have to use a
&quot;has_many :through&quot;. That said, the association issues and
establish_connection are only related side effects. Its the problem
that primarily affects us (so now we have a workaround, yay!). The
scope issues is the big fish in this ticket.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-08T17:40:28+00:00</created-at>
      <creator-id type="integer">18336</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6157</number>
      <permalink>activerecord-scope-class-method-requires-a-database-connection</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; establish_connection &quot;rails 3.0.3&quot;</tag>
      <title>ActiveRecord scope class method requires a database connection</title>
      <updated-at type="datetime">2011-03-08T17:40:40+00:00</updated-at>
      <user-id type="integer">18336</user-id>
      <version type="integer">6</version>
      <user-name>Peer Allan</user-name>
      <creator-name>Peer Allan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6157</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It's caused by this line:

https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L1804

That test and the preceding one ought to be in AssociationReflection#check_validity! I think. I added a TODO comment for this in master, but I haven't got round TODOing it yet ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;It's caused by this line:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L1804&quot;&gt;
https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/act...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That test and the preceding one ought to be in
AssociationReflection#check_validity! I think. I added a TODO
comment for this in master, but I haven't got round TODOing it yet
;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-08T18:22:58+00:00</created-at>
      <creator-id type="integer">18336</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6157</number>
      <permalink>activerecord-scope-class-method-requires-a-database-connection</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; establish_connection &quot;rails 3.0.3&quot;</tag>
      <title>ActiveRecord scope class method requires a database connection</title>
      <updated-at type="datetime">2011-03-08T18:23:12+00:00</updated-at>
      <user-id type="integer">11330</user-id>
      <version type="integer">7</version>
      <user-name>Jon Leighton</user-name>
      <creator-name>Peer Allan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6157</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;gucci watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;gucci
watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-26T01:28:14+00:00</created-at>
      <creator-id type="integer">18336</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6157</number>
      <permalink>activerecord-scope-class-method-requires-a-database-connection</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; establish_connection &quot;rails 3.0.3&quot;</tag>
      <title>ActiveRecord scope class method requires a database connection</title>
      <updated-at type="datetime">2011-03-26T01:37:30+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">8</version>
      <user-name>bingbing</user-name>
      <creator-name>Peer Allan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6157</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>156f700d341fbfc4b63bca6a2f1cdc22bb767bf4</code>
      <content-type>application/zip</content-type>
      <created-at type="datetime">2011-03-08T17:40:28+00:00</created-at>
      <filename>legacy_database.zip</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">948151</id>
      <size type="integer">37786</size>
      <uploader-id type="integer">18336</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/948151/legacy_database.zip</url>
    </attachment>
  </attachments>
</ticket>
