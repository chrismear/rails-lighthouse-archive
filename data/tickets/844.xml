<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-16T01:40:29+01:00</created-at>
  <creator-id type="integer">4910</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">844</number>
  <permalink>threadsafe-in-activesupport-cache-store-extends-all-instances-of-the-class-and-breaking-all-but-the-one-it-was-called-on</permalink>
  <priority type="integer">301</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>2.1 activesupport</tag>
  <title>threadsafe! in ActiveSupport::Cache::Store extends all instances of the class, and breaking all but the one it was called on</title>
  <updated-at type="datetime">2008-11-17T05:43:14+00:00</updated-at>
  <user-id type="integer">4910</user-id>
  <version type="integer">3</version>
  <user-name>Kris Rasmussen</user-name>
  <creator-name>Kris Rasmussen</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/844</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When you call threadsafe! on an instance of ActiveSupport::Cache::Store it extends the class with the ThreadSafe module, thus effecting all future instances, not just the current instance.

I don't think this is the desired behavior, but either way it ends up breaking all future instances because the @mutex instance variable will be null for them.

Instead, I think the author meant to &quot;extend&quot; the instance of the class with the ThreadSafe module.

Here is a monkey patch that does this:

module ActiveSupport
  module Cache
    class Store
      def threadsafe!
        @mutex = Mutex.new
        self.extend ThreadSafety
        self
      end
    end
  end
end

It appears that edge rails assumes all caches (except memory cache) are thread safe by default and so this is no longer an issue.</original-body>
  <latest-body>When you call threadsafe! on an instance of ActiveSupport::Cache::Store it extends the class with the ThreadSafe module, thus effecting all future instances, not just the current instance.

I don't think this is the desired behavior, but either way it ends up breaking all future instances because the @mutex instance variable will be null for them.

Instead, I think the author meant to &quot;extend&quot; the instance of the class with the ThreadSafe module.

Here is a monkey patch that does this:

module ActiveSupport
  module Cache
    class Store
      def threadsafe!
        @mutex = Mutex.new
        self.extend ThreadSafety
        self
      end
    end
  end
end

It appears that edge rails assumes all caches (except memory cache) are thread safe by default and so this is no longer an issue.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When you call threadsafe! on an instance of ActiveSupport::Cache::Store it extends the class with the ThreadSafe module, thus effecting all future instances, not just the current instance.&lt;/p&gt;

&lt;p&gt;I don't think this is the desired behavior, but either way it ends up breaking all future instances because the @mutex instance variable will be null for them.&lt;/p&gt;

&lt;p&gt;Instead, I think the author meant to &quot;extend&quot; the instance of the class with the ThreadSafe module.&lt;/p&gt;

&lt;p&gt;Here is a monkey patch that does this:&lt;/p&gt;

&lt;p&gt;module ActiveSupport
  module Cache&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Store
  def threadsafe!
    @mutex = Mutex.new
    self.extend ThreadSafety
    self
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end&lt;/p&gt;

&lt;p&gt;It appears that edge rails assumes all caches (except memory cache) are thread safe by default and so this is no longer an issue.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When you call threadsafe! on an instance of ActiveSupport::Cache::Store it extends the class with the ThreadSafe module, thus effecting all future instances, not just the current instance.

I don't think this is the desired behavior, but either way it ends up breaking all future instances because the @mutex instance variable will be null for them.

Instead, I think the author meant to &quot;extend&quot; the instance of the class with the ThreadSafe module.

Here is a monkey patch that does this:

module ActiveSupport
  module Cache
    class Store
      def threadsafe!
        @mutex = Mutex.new
        self.extend ThreadSafety
        self
      end
    end
  end
end

It appears that edge rails assumes all caches (except memory cache) are thread safe by default and so this is no longer an issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When you call threadsafe! on an instance of ActiveSupport::Cache::Store it extends the class with the ThreadSafe module, thus effecting all future instances, not just the current instance.&lt;/p&gt;

&lt;p&gt;I don't think this is the desired behavior, but either way it ends up breaking all future instances because the @mutex instance variable will be null for them.&lt;/p&gt;

&lt;p&gt;Instead, I think the author meant to &quot;extend&quot; the instance of the class with the ThreadSafe module.&lt;/p&gt;

&lt;p&gt;Here is a monkey patch that does this:&lt;/p&gt;

&lt;p&gt;module ActiveSupport
  module Cache&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Store
  def threadsafe!
    @mutex = Mutex.new
    self.extend ThreadSafety
    self
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end&lt;/p&gt;

&lt;p&gt;It appears that edge rails assumes all caches (except memory cache) are thread safe by default and so this is no longer an issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-16T01:40:29+01:00</created-at>
      <creator-id type="integer">4910</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">844</number>
      <permalink>threadsafe-in-activesupport-cache-store-extends-all-instances-of-the-class-and-breaking-all-but-the-one-it-was-called-on</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activesupport</tag>
      <title>threadsafe! in ActiveSupport::Cache::Store extends all instances of the class, and breaking all but the one it was called on</title>
      <updated-at type="datetime">2008-08-16T01:40:29+01:00</updated-at>
      <user-id type="integer">4910</user-id>
      <version type="integer">1</version>
      <user-name>Kris Rasmussen</user-name>
      <creator-name>Kris Rasmussen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yeah, the memory store is the only issue so we have SynchronizedMemoryStore now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah, the memory store is the only issue so we have
SynchronizedMemoryStore now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-16T18:59:42+00:00</created-at>
      <creator-id type="integer">4910</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">844</number>
      <permalink>threadsafe-in-activesupport-cache-store-extends-all-instances-of-the-class-and-breaking-all-but-the-one-it-was-called-on</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.1 activesupport</tag>
      <title>threadsafe! in ActiveSupport::Cache::Store extends all instances of the class, and breaking all but the one it was called on</title>
      <updated-at type="datetime">2008-11-16T18:59:46+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Kris Rasmussen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Josh,

Thanks for getting back to me on this. You may have fixed this in one of the later commits, but the default memcached library did not appear to be thread-safe to me. I had to extend it with the ThreadSafety module to get things to work reliably.

Thanks,
Kris</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Josh,&lt;/p&gt;
&lt;p&gt;Thanks for getting back to me on this. You may have fixed this
in one of the later commits, but the default memcached library did
not appear to be thread-safe to me. I had to extend it with the
ThreadSafety module to get things to work reliably.&lt;/p&gt;
&lt;p&gt;Thanks, Kris&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-17T05:43:09+00:00</created-at>
      <creator-id type="integer">4910</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">844</number>
      <permalink>threadsafe-in-activesupport-cache-store-extends-all-instances-of-the-class-and-breaking-all-but-the-one-it-was-called-on</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.1 activesupport</tag>
      <title>threadsafe! in ActiveSupport::Cache::Store extends all instances of the class, and breaking all but the one it was called on</title>
      <updated-at type="datetime">2008-11-17T05:43:14+00:00</updated-at>
      <user-id type="integer">4910</user-id>
      <version type="integer">3</version>
      <user-name>Kris Rasmussen</user-name>
      <creator-name>Kris Rasmussen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
