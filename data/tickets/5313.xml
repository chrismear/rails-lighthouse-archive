<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15159</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2010-10-02T10:56:38+01:00</created-at>
  <creator-id type="integer">24468</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5313</number>
  <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>activerecord patch &quot;rake tasks&quot;</tag>
  <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
  <updated-at type="datetime">2011-03-24T17:44:22+00:00</updated-at>
  <user-id type="integer">142707</user-id>
  <version type="integer">11</version>
  <user-name>ronen barzel</user-name>
  <creator-name>Russell Quinn</creator-name>
  <assigned-user-name>Mikel Lindsaar</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
  <priority-name>Low</priority-name>
  <original-body>db:drop drops the database for the current RAILS_ENV or *development* if not defined.

db:create creates the database for the current RAILS_ENV, but if this is set to *development* then it also creates the *test* database if this is configured.

This behaviour is hidden (the Rake task description doesn't mention it) and it makes doing a rake db:drop followed by a rake db:create complain about the *test* database already existing.

For example, the following happens if RAILS_ENV=development or there is no RAILS_ENV defined (hence defaulting to *development*):

@@@
$ rake db:drop
$ rake db:create
database_test already exists
@@@

Maybe rake db:drop should also drop the test database? But this also leads to sneaky functionality. My vote is that the two tasks simply do exactly what they state. rake db:create:all and rake db:drop:all can typically be used to create and drop *development* and *test* databases as the commands only operate on local databases and *production* is usually remote.

Patch attached to update the rake task and only mention of this behaviour (in a guide.)

Russell.</original-body>
  <latest-body>db:drop drops the database for the current RAILS_ENV or *development* if not defined.

db:create creates the database for the current RAILS_ENV, but if this is set to *development* then it also creates the *test* database if this is configured.

This behaviour is hidden (the Rake task description doesn't mention it) and it makes doing a rake db:drop followed by a rake db:create complain about the *test* database already existing.

For example, the following happens if RAILS_ENV=development or there is no RAILS_ENV defined (hence defaulting to *development*):

@@@
$ rake db:drop
$ rake db:create
database_test already exists
@@@

Maybe rake db:drop should also drop the test database? But this also leads to sneaky functionality. My vote is that the two tasks simply do exactly what they state. rake db:create:all and rake db:drop:all can typically be used to create and drop *development* and *test* databases as the commands only operate on local databases and *production* is usually remote.

Patch attached to update the rake task and only mention of this behaviour (in a guide.)

Russell.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;db:drop drops the database for the current RAILS_ENV or
&lt;em&gt;development&lt;/em&gt; if not defined.&lt;/p&gt;
&lt;p&gt;db:create creates the database for the current RAILS_ENV, but if
this is set to &lt;em&gt;development&lt;/em&gt; then it also creates the
&lt;em&gt;test&lt;/em&gt; database if this is configured.&lt;/p&gt;
&lt;p&gt;This behaviour is hidden (the Rake task description doesn't
mention it) and it makes doing a rake db:drop followed by a rake
db:create complain about the &lt;em&gt;test&lt;/em&gt; database already
existing.&lt;/p&gt;
&lt;p&gt;For example, the following happens if RAILS_ENV=development or
there is no RAILS_ENV defined (hence defaulting to
&lt;em&gt;development&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ rake db:drop
$ rake db:create
database_test already exists&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Maybe rake db:drop should also drop the test database? But this
also leads to sneaky functionality. My vote is that the two tasks
simply do exactly what they state. rake db:create:all and rake
db:drop:all can typically be used to create and drop
&lt;em&gt;development&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; databases as the commands
only operate on local databases and &lt;em&gt;production&lt;/em&gt; is usually
remote.&lt;/p&gt;
&lt;p&gt;Patch attached to update the rake task and only mention of this
behaviour (in a guide.)&lt;/p&gt;
&lt;p&gt;Russell.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>db:drop drops the database for the current RAILS_ENV or *development* if not defined.

db:create creates the database for the current RAILS_ENV, but if this is set to *development* then it also creates the *test* database if this is configured.

This behaviour is hidden (the Rake task description doesn't mention it) and it makes doing a rake db:drop followed by a rake db:create complain about the *test* database already existing.

For example, the following happens if RAILS_ENV=development or there is no RAILS_ENV defined (hence defaulting to *development*):

@@@
$ rake db:drop
$ rake db:create
database_test already exists
@@@

Maybe rake db:drop should also drop the test database? But this also leads to sneaky functionality. My vote is that the two tasks simply do exactly what they state. rake db:create:all and rake db:drop:all can typically be used to create and drop *development* and *test* databases as the commands only operate on local databases and *production* is usually remote.

Patch attached to update the rake task and only mention of this behaviour (in a guide.)

Russell.</body>
      <body-html>&lt;div&gt;&lt;p&gt;db:drop drops the database for the current RAILS_ENV or
&lt;em&gt;development&lt;/em&gt; if not defined.&lt;/p&gt;
&lt;p&gt;db:create creates the database for the current RAILS_ENV, but if
this is set to &lt;em&gt;development&lt;/em&gt; then it also creates the
&lt;em&gt;test&lt;/em&gt; database if this is configured.&lt;/p&gt;
&lt;p&gt;This behaviour is hidden (the Rake task description doesn't
mention it) and it makes doing a rake db:drop followed by a rake
db:create complain about the &lt;em&gt;test&lt;/em&gt; database already
existing.&lt;/p&gt;
&lt;p&gt;For example, the following happens if RAILS_ENV=development or
there is no RAILS_ENV defined (hence defaulting to
&lt;em&gt;development&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ rake db:drop
$ rake db:create
database_test already exists&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Maybe rake db:drop should also drop the test database? But this
also leads to sneaky functionality. My vote is that the two tasks
simply do exactly what they state. rake db:create:all and rake
db:drop:all can typically be used to create and drop
&lt;em&gt;development&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; databases as the commands
only operate on local databases and &lt;em&gt;production&lt;/em&gt; is usually
remote.&lt;/p&gt;
&lt;p&gt;Patch attached to update the rake task and only mention of this
behaviour (in a guide.)&lt;/p&gt;
&lt;p&gt;Russell.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-06T08:56:51+01:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2010-08-08T10:19:43+01:00</updated-at>
      <user-id type="integer">24468</user-id>
      <version type="integer">1</version>
      <user-name>Russell Quinn</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Patch attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Patch attached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-06T08:59:35+01:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2010-08-06T08:59:36+01:00</updated-at>
      <user-id type="integer">24468</user-id>
      <version type="integer">2</version>
      <user-name>Russell Quinn</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>i encountered this too, see #5382</body>
      <body-html>&lt;div&gt;&lt;p&gt;i encountered this too, see &lt;a href=
&quot;/projects/8994/tickets/5382&quot; title=&quot;Ticket #5382&quot;&gt;#5382&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-04T16:40:39+01:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2010-09-04T16:40:43+01:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">3</version>
      <user-name>Kane</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I think it's nice to have test db created along with development. So I attached another patch which drops also test db while dropping development.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think it's nice to have test db created along with
development. So I attached another patch which drops also test db
while dropping development.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-20T13:48:33+01:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2010-09-20T13:48:37+01:00</updated-at>
      <user-id type="integer">86902</user-id>
      <version type="integer">4</version>
      <user-name>Marjan Krekoten'</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>i cant see the point why it should create test db.</body>
      <body-html>&lt;div&gt;&lt;p&gt;i cant see the point why it should create test db.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-20T19:35:49+01:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2010-09-20T19:35:53+01:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">5</version>
      <user-name>Kane</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Why not just stick to the currently defined RAILS_ENV like everything else? I really don't think it makes sense to create test just because it's kind of convenient.

But, anyway, whichever way, create and drop need to do the same thing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Why not just stick to the currently defined RAILS_ENV like
everything else? I really don't think it makes sense to create test
just because it's kind of convenient.&lt;/p&gt;
&lt;p&gt;But, anyway, whichever way, create and drop need to do the same
thing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-27T09:55:30+01:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2010-09-27T09:55:32+01:00</updated-at>
      <user-id type="integer">24468</user-id>
      <version type="integer">6</version>
      <user-name>Russell Quinn</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I agree @db:create@ and @db:drop@ should do the same thing and I like Russell's patch better. As you said, also dropping the test database seems sneaky.

It could use some tests, though. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree &lt;code&gt;db:create&lt;/code&gt; and &lt;code&gt;db:drop&lt;/code&gt; should
do the same thing and I like Russell's patch better. As you said,
also dropping the test database seems sneaky.&lt;/p&gt;
&lt;p&gt;It could use some tests, though. :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-06T17:10:41+01:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2010-10-06T17:10:43+01:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">7</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-09T08:28:01+01:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord rails3\&quot; patch \&quot;rake tasks\&quot;&quot;
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2010-10-09T08:28:04+01:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">8</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15159</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-09T17:00:39+01:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 40272
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2010-10-09T17:00:41+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">9</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name>Mikel Lindsaar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15159</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>is there any update on if and when this change is pushed?

btw this ticket supercedes 
https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/4128</body>
      <body-html>&lt;div&gt;&lt;p&gt;is there any update on if and when this change is pushed?&lt;/p&gt;
&lt;p&gt;btw this ticket supercedes&lt;br&gt;
&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/4128&quot;&gt;
https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-12T14:55:38+00:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2011-01-12T14:55:52+00:00</updated-at>
      <user-id type="integer">74047</user-id>
      <version type="integer">10</version>
      <user-name>viktor tron (strawberry)</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name>Mikel Lindsaar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15159</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>one additional motivation for consistent `db:drop` and `db:create` behavior:  the task `db:migrate:reset` calls both so currently yields a warning with every use after the first time.  (i was looking for/going to create a ticket on `db:migrate:reset` but found this one.)

@@@
$ rake db:migrate:reset &gt; /dev/null
$ rake db:migrate:reset &gt; /dev/null
db/test.sqlite3 already exists
$ rake db:migrate:reset &gt; /dev/null
db/test.sqlite3 already exists
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;one additional motivation for consistent &lt;code&gt;db:drop&lt;/code&gt;
and &lt;code&gt;db:create&lt;/code&gt; behavior: the task
&lt;code&gt;db:migrate:reset&lt;/code&gt; calls both so currently yields a
warning with every use after the first time. (i was looking
for/going to create a ticket on &lt;code&gt;db:migrate:reset&lt;/code&gt; but
found this one.)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ rake db:migrate:reset &amp;gt; /dev/null
$ rake db:migrate:reset &amp;gt; /dev/null
db/test.sqlite3 already exists
$ rake db:migrate:reset &amp;gt; /dev/null
db/test.sqlite3 already exists&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-24T17:44:00+00:00</created-at>
      <creator-id type="integer">24468</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5313</number>
      <permalink>rake-tasks-dbcreate-and-dbdrop-are-not-consistent-in-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord patch &quot;rake tasks&quot;</tag>
      <title>Rake tasks db:create and db:drop are not consistent in behaviour</title>
      <updated-at type="datetime">2011-03-24T17:44:22+00:00</updated-at>
      <user-id type="integer">142707</user-id>
      <version type="integer">11</version>
      <user-name>ronen barzel</user-name>
      <creator-name>Russell Quinn</creator-name>
      <assigned-user-name>Mikel Lindsaar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5313</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>880d7b6e267ce51b843dec6ad674efc8b3a970ae</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-08-06T08:59:35+01:00</created-at>
      <filename>make_databases_rake_consistent.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">617791</id>
      <size type="integer">2134</size>
      <uploader-id type="integer">24468</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/617791/make_databases_rake_consistent.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>07ced3ab4f0ded1085ebdb8f75a66b66a5630dc1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-09-20T13:48:33+01:00</created-at>
      <filename>db_drop.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">681145</id>
      <size type="integer">1056</size>
      <uploader-id type="integer">86902</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/681145/db_drop.patch</url>
    </attachment>
  </attachments>
</ticket>
