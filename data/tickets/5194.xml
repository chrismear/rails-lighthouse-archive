<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">12714</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-19T14:02:23+00:00</created-at>
  <creator-id type="integer">5060</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5194</number>
  <permalink>activerecord-beta-4-does-not-understand-most-postgres-data-types</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord arel postgresql</tag>
  <title>ActiveRecord Beta 4 does not understand most postgres data types</title>
  <updated-at type="datetime">2011-03-26T02:20:33+00:00</updated-at>
  <user-id type="integer">142823</user-id>
  <version type="integer">9</version>
  <user-name>bingbing</user-name>
  <creator-name>Jeff Dean</creator-name>
  <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5194</url>
  <priority-name nil="true"></priority-name>
  <original-body>I have a postgres database with a table that has a column of type `search_vector` (and other postgres-specific data geometry data types).  Up to Rails 2.3.8 everything was fine, but when I tried upgrading to Rails beta 4 with Arel 0.4.0 I can no longer perform basic queries.  The error I get is:

@@@
Column type `` is not currently handled
@@@

The offending code is in `lib/arel/engines/sql/attributes.rb`:

@@@ ruby
module Arel
  module Sql
    module Attributes
      def self.for(column)
        case column.type
        when :string    then String
        when :text      then String
        when :integer   then Integer
        when :float     then Float
        when :decimal   then Decimal
        when :date      then Time
        when :datetime  then Time
        when :timestamp then Time
        when :time      then Time
        when :binary    then String
        when :boolean   then Boolean
        else
          raise NotImplementedError, &quot;Column type `#{column.type}` is not currently handled&quot;
        end
      end
      # ...
    end
  end
end
@@@

The column in question looked like this:

@@@ ruby
#&lt;ActiveRecord::ConnectionAdapters::PostgreSQLColumn:0x34d4a24 @precision=nil, @null=true, @primary=nil, @sql_type=&quot;tsvector&quot;, @limit=nil, @default=nil, @type=nil, @name=&quot;search_vector&quot;, @scale=nil&gt;
@@@

So there are a few parts to fixing this bug: 

* fixing the useless error message when it can't understand a column type
* making AR use the postgres adapter's column types that were used in previous versions of rails

I'd like to fix this, but before I dig in I'd like some feedback on how.  A few things that come to mind are:

* Find all places where `arel_attributes_values` is used and instead call the adapter-specific methods
* Create a new Arel Engine for postgres that inherits from the SQL engine, and overrides methods as necessary (then set the correct engine for each connection)
* Move all the adapter-specific code to Arel
* Making it possible for developers to register their own datatype mapppings without mucking with private apis

If you have an idea what the long-term vision is for making AR work across adapters please let me know.  Otherwise, I'll fix this the quickest way I can find and submit a patch.  Until then, anybody taking advantage of postgres's other data types is hosed.</original-body>
  <latest-body>I have a postgres database with a table that has a column of type `search_vector` (and other postgres-specific data geometry data types).  Up to Rails 2.3.8 everything was fine, but when I tried upgrading to Rails beta 4 with Arel 0.4.0 I can no longer perform basic queries.  The error I get is:

@@@
Column type `` is not currently handled
@@@

The offending code is in `lib/arel/engines/sql/attributes.rb`:

@@@ ruby
module Arel
  module Sql
    module Attributes
      def self.for(column)
        case column.type
        when :string    then String
        when :text      then String
        when :integer   then Integer
        when :float     then Float
        when :decimal   then Decimal
        when :date      then Time
        when :datetime  then Time
        when :timestamp then Time
        when :time      then Time
        when :binary    then String
        when :boolean   then Boolean
        else
          raise NotImplementedError, &quot;Column type `#{column.type}` is not currently handled&quot;
        end
      end
      # ...
    end
  end
end
@@@

The column in question looked like this:

@@@ ruby
#&lt;ActiveRecord::ConnectionAdapters::PostgreSQLColumn:0x34d4a24 @precision=nil, @null=true, @primary=nil, @sql_type=&quot;tsvector&quot;, @limit=nil, @default=nil, @type=nil, @name=&quot;search_vector&quot;, @scale=nil&gt;
@@@

So there are a few parts to fixing this bug: 

* fixing the useless error message when it can't understand a column type
* making AR use the postgres adapter's column types that were used in previous versions of rails

I'd like to fix this, but before I dig in I'd like some feedback on how.  A few things that come to mind are:

* Find all places where `arel_attributes_values` is used and instead call the adapter-specific methods
* Create a new Arel Engine for postgres that inherits from the SQL engine, and overrides methods as necessary (then set the correct engine for each connection)
* Move all the adapter-specific code to Arel
* Making it possible for developers to register their own datatype mapppings without mucking with private apis

If you have an idea what the long-term vision is for making AR work across adapters please let me know.  Otherwise, I'll fix this the quickest way I can find and submit a patch.  Until then, anybody taking advantage of postgres's other data types is hosed.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have a postgres database with a table that has a column of
type &lt;code&gt;search_vector&lt;/code&gt; (and other postgres-specific data
geometry data types). Up to Rails 2.3.8 everything was fine, but
when I tried upgrading to Rails beta 4 with Arel 0.4.0 I can no
longer perform basic queries. The error I get is:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Column type `` is not currently handled&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The offending code is in
&lt;code&gt;lib/arel/engines/sql/attributes.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module Arel
  module Sql
    module Attributes
      def self.for(column)
        case column.type
        when :string    then String
        when :text      then String
        when :integer   then Integer
        when :float     then Float
        when :decimal   then Decimal
        when :date      then Time
        when :datetime  then Time
        when :timestamp then Time
        when :time      then Time
        when :binary    then String
        when :boolean   then Boolean
        else
          raise NotImplementedError, &quot;Column type `#{column.type}` is not currently handled&quot;
        end
      end
      # ...
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The column in question looked like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;#&amp;lt;ActiveRecord::ConnectionAdapters::PostgreSQLColumn:0x34d4a24 @precision=nil, @null=true, @primary=nil, @sql_type=&quot;tsvector&quot;, @limit=nil, @default=nil, @type=nil, @name=&quot;search_vector&quot;, @scale=nil&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So there are a few parts to fixing this bug:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fixing the useless error message when it can't understand a
column type&lt;/li&gt;
&lt;li&gt;making AR use the postgres adapter's column types that were
used in previous versions of rails&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'd like to fix this, but before I dig in I'd like some feedback
on how. A few things that come to mind are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find all places where &lt;code&gt;arel_attributes_values&lt;/code&gt; is
used and instead call the adapter-specific methods&lt;/li&gt;
&lt;li&gt;Create a new Arel Engine for postgres that inherits from the
SQL engine, and overrides methods as necessary (then set the
correct engine for each connection)&lt;/li&gt;
&lt;li&gt;Move all the adapter-specific code to Arel&lt;/li&gt;
&lt;li&gt;Making it possible for developers to register their own
datatype mapppings without mucking with private apis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have an idea what the long-term vision is for making AR
work across adapters please let me know. Otherwise, I'll fix this
the quickest way I can find and submit a patch. Until then, anybody
taking advantage of postgres's other data types is hosed.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have a postgres database with a table that has a column of type `search_vector` (and other postgres-specific data geometry data types).  Up to Rails 2.3.8 everything was fine, but when I tried upgrading to Rails beta 4 with Arel 0.4.0 I can no longer perform basic queries.  The error I get is:

@@@
Column type `` is not currently handled
@@@

The offending code is in `lib/arel/engines/sql/attributes.rb`:

@@@ ruby
module Arel
  module Sql
    module Attributes
      def self.for(column)
        case column.type
        when :string    then String
        when :text      then String
        when :integer   then Integer
        when :float     then Float
        when :decimal   then Decimal
        when :date      then Time
        when :datetime  then Time
        when :timestamp then Time
        when :time      then Time
        when :binary    then String
        when :boolean   then Boolean
        else
          raise NotImplementedError, &quot;Column type `#{column.type}` is not currently handled&quot;
        end
      end
      # ...
    end
  end
end
@@@

The column in question looked like this:

@@@ ruby
#&lt;ActiveRecord::ConnectionAdapters::PostgreSQLColumn:0x34d4a24 @precision=nil, @null=true, @primary=nil, @sql_type=&quot;tsvector&quot;, @limit=nil, @default=nil, @type=nil, @name=&quot;search_vector&quot;, @scale=nil&gt;
@@@

So there are a few parts to fixing this bug: 

* fixing the useless error message when it can't understand a column type
* making AR use the postgres adapter's column types that were used in previous versions of rails

I'd like to fix this, but before I dig in I'd like some feedback on how.  A few things that come to mind are:

* Find all places where `arel_attributes_values` is used and instead call the adapter-specific methods
* Create a new Arel Engine for postgres that inherits from the SQL engine, and overrides methods as necessary (then set the correct engine for each connection)
* Move all the adapter-specific code to Arel
* Making it possible for developers to register their own datatype mapppings without mucking with private apis

If you have an idea what the long-term vision is for making AR work across adapters please let me know.  Otherwise, I'll fix this the quickest way I can find and submit a patch.  Until then, anybody taking advantage of postgres's other data types is hosed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have a postgres database with a table that has a column of
type &lt;code&gt;search_vector&lt;/code&gt; (and other postgres-specific data
geometry data types). Up to Rails 2.3.8 everything was fine, but
when I tried upgrading to Rails beta 4 with Arel 0.4.0 I can no
longer perform basic queries. The error I get is:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Column type `` is not currently handled&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The offending code is in
&lt;code&gt;lib/arel/engines/sql/attributes.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module Arel
  module Sql
    module Attributes
      def self.for(column)
        case column.type
        when :string    then String
        when :text      then String
        when :integer   then Integer
        when :float     then Float
        when :decimal   then Decimal
        when :date      then Time
        when :datetime  then Time
        when :timestamp then Time
        when :time      then Time
        when :binary    then String
        when :boolean   then Boolean
        else
          raise NotImplementedError, &quot;Column type `#{column.type}` is not currently handled&quot;
        end
      end
      # ...
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The column in question looked like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;#&amp;lt;ActiveRecord::ConnectionAdapters::PostgreSQLColumn:0x34d4a24 @precision=nil, @null=true, @primary=nil, @sql_type=&quot;tsvector&quot;, @limit=nil, @default=nil, @type=nil, @name=&quot;search_vector&quot;, @scale=nil&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So there are a few parts to fixing this bug:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fixing the useless error message when it can't understand a
column type&lt;/li&gt;
&lt;li&gt;making AR use the postgres adapter's column types that were
used in previous versions of rails&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'd like to fix this, but before I dig in I'd like some feedback
on how. A few things that come to mind are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find all places where &lt;code&gt;arel_attributes_values&lt;/code&gt; is
used and instead call the adapter-specific methods&lt;/li&gt;
&lt;li&gt;Create a new Arel Engine for postgres that inherits from the
SQL engine, and overrides methods as necessary (then set the
correct engine for each connection)&lt;/li&gt;
&lt;li&gt;Move all the adapter-specific code to Arel&lt;/li&gt;
&lt;li&gt;Making it possible for developers to register their own
datatype mapppings without mucking with private apis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have an idea what the long-term vision is for making AR
work across adapters please let me know. Otherwise, I'll fix this
the quickest way I can find and submit a patch. Until then, anybody
taking advantage of postgres's other data types is hosed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T06:24:08+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5194</number>
      <permalink>activerecord-beta-4-does-not-understand-most-postgres-data-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord arel postgresql</tag>
      <title>ActiveRecord Beta 4 does not understand most postgres data types</title>
      <updated-at type="datetime">2010-07-26T06:25:33+01:00</updated-at>
      <user-id type="integer">5060</user-id>
      <version type="integer">1</version>
      <user-name>Jeff Dean</user-name>
      <creator-name>Jeff Dean</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5194</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This ticket sounds very similar to #4270.

Rails 3.0 RC is unable to save models that make use of Postgres custom data types. Reading is fine; columns with a custom type are treated as String, but writing, even when the custom type column is unchanged, raises the exception reported here.

I made a small change to `activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb`, around line 119, essentially never delegating type simplification to the superclass. If a specific mapping can't be determined, I always use `:string`. This fixes my immediate problem, where I don't care about working with the custom type column. (In my case, the custom type is optimized for PostgreSQL indexing and is maintained by a trigger.)

Fixing the ARel issue with the error message looks simple. Instead of complaining about `column.type`, it should report the `column.sql_type`.

I'm happy to work up patches for both of these one-liners, but given the stagnation on #4270, I'd like some direction before taking the time to do so.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This ticket sounds very similar to &lt;a href=
&quot;/projects/8994/tickets/4270&quot; title=&quot;Ticket #4270&quot;&gt;#4270&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rails 3.0 RC is unable to save models that make use of Postgres
custom data types. Reading is fine; columns with a custom type are
treated as String, but writing, even when the custom type column is
unchanged, raises the exception reported here.&lt;/p&gt;
&lt;p&gt;I made a small change to
&lt;code&gt;activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb&lt;/code&gt;,
around line 119, essentially never delegating type simplification
to the superclass. If a specific mapping can't be determined, I
always use &lt;code&gt;:string&lt;/code&gt;. This fixes my immediate problem,
where I don't care about working with the custom type column. (In
my case, the custom type is optimized for PostgreSQL indexing and
is maintained by a trigger.)&lt;/p&gt;
&lt;p&gt;Fixing the ARel issue with the error message looks simple.
Instead of complaining about &lt;code&gt;column.type&lt;/code&gt;, it should
report the &lt;code&gt;column.sql_type&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I'm happy to work up patches for both of these one-liners, but
given the stagnation on &lt;a href=&quot;/projects/8994/tickets/4270&quot;
title=&quot;Ticket #4270&quot;&gt;#4270&lt;/a&gt;, I'd like some direction before
taking the time to do so.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-16T03:22:54+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5194</number>
      <permalink>activerecord-beta-4-does-not-understand-most-postgres-data-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord arel postgresql</tag>
      <title>ActiveRecord Beta 4 does not understand most postgres data types</title>
      <updated-at type="datetime">2010-08-16T03:22:57+01:00</updated-at>
      <user-id type="integer">48902</user-id>
      <version type="integer">2</version>
      <user-name>Steve Madsen</user-name>
      <creator-name>Jeff Dean</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5194</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can you verify whether this is still an issue after the fix for #5477 has been committed?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can you verify whether this is still an issue after the fix for
&lt;a href=&quot;/projects/8994/tickets/5477&quot; title=
&quot;Ticket #5477&quot;&gt;#5477&lt;/a&gt; has been committed?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-17T13:24:01+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5194</number>
      <permalink>activerecord-beta-4-does-not-understand-most-postgres-data-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord arel postgresql</tag>
      <title>ActiveRecord Beta 4 does not understand most postgres data types</title>
      <updated-at type="datetime">2010-10-17T13:24:07+01:00</updated-at>
      <user-id type="integer">81551</user-id>
      <version type="integer">3</version>
      <user-name>Andrea Campi</user-name>
      <creator-name>Jeff Dean</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5194</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you have an idea what the long-term vision is for making AR work across adapters please let me know. Otherwise, I'll fix this the quickest way I can find and submit a patch. Until then, anybody taking advantage of postgres's &lt;a href=&quot;http://www.weddinginthebox.com/blog/places-to-buy-wedding-dresses.html&quot;&gt;places to buy wedding dresses&lt;/a&gt; other data types is hosed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you have an idea what the long-term vision is for making AR
work across adapters please let me know. Otherwise, I'll fix this
the quickest way I can find and submit a patch. Until then, anybody
taking advantage of postgres's &lt;a href=
&quot;http://www.weddinginthebox.com/blog/places-to-buy-wedding-dresses.html&quot;&gt;
places to buy wedding dresses&lt;/a&gt; other data types is hosed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-19T06:24:43+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5194</number>
      <permalink>activerecord-beta-4-does-not-understand-most-postgres-data-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord arel postgresql</tag>
      <title>ActiveRecord Beta 4 does not understand most postgres data types</title>
      <updated-at type="datetime">2010-10-19T17:52:54+01:00</updated-at>
      <user-id type="integer">120610</user-id>
      <version type="integer">4</version>
      <user-name>koukou</user-name>
      <creator-name>Jeff Dean</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5194</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:29:01+00:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5194</number>
      <permalink>activerecord-beta-4-does-not-understand-most-postgres-data-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord arel postgresql</tag>
      <title>ActiveRecord Beta 4 does not understand most postgres data types</title>
      <updated-at type="datetime">2011-02-02T16:35:40+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jeff Dean</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5194</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:29:02+00:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5194</number>
      <permalink>activerecord-beta-4-does-not-understand-most-postgres-data-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord arel postgresql</tag>
      <title>ActiveRecord Beta 4 does not understand most postgres data types</title>
      <updated-at type="datetime">2011-02-02T16:36:13+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jeff Dean</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5194</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-14T02:49:35+00:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5194</number>
      <permalink>activerecord-beta-4-does-not-understand-most-postgres-data-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord arel postgresql</tag>
      <title>ActiveRecord Beta 4 does not understand most postgres data types</title>
      <updated-at type="datetime">2011-02-14T05:41:56+00:00</updated-at>
      <user-id type="integer">136860</user-id>
      <version type="integer">7</version>
      <user-name>xixi</user-name>
      <creator-name>Jeff Dean</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5194</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you are after a pair of great looking and style UGG boots to wear during the winter months, then you can not go far wrong with getting yourself a pair of the &lt;a href=http://www.moncler-ugg.com&gt;ugg classic crochet&lt;/a&gt; Tall&#8217;s. Even though these boots have been around for a few years now they are likely to grow in popularity now. This is because they were recently featured in Oprah Winfrey&#8217;s Favorite Things show.
The UGG Classic Crochet is a new addition to the popular Classic collection with its slouchy styling and colorful knit uppers (polyester and wool blend). A sheepskin footbed provides the extra comfort that UGG boot and &lt;a href=http://www.moncler-ugg.com&gt;ugg classic crochet&lt;/a&gt; is well-known for. A light and flexible outsole paired with a new decorative label makes this boot perfect for spring. The Classic Crochet boot can be cuffed or styled any creative way to personalize your look. As with the UGG Classic Cardy boot, the Crochet can either be worn with jeans. Or you can wear them pushed down so that they have slouched feel and look to them. But it does not matter what they are worn with or they way in which they are worn they will still help you to make quite a statement about yourself. Today&#8217;s women have become fashion conscious. They are going to almost any extent to look good and attractive. It has become important to look good. In fact, it is one of the most important factors that will decide success in various areas of life. It can boost up your confidence level.
As mentioned earlier the &lt;a href=http://www.moncler-ugg.com&gt;uggs for cheap&lt;/a&gt;Crochet Tall boots are going to grow in popularity this season, just because Oprah Winfrey included them in her Favorite Things show. Not only does she like the boots styling and colors (black, sand, rum raisin). The reason they are one of her favorite things is because she says it feels like she is walking on a cloud when she wears them.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you are after a pair of great looking and style UGG boots to
wear during the winter months, then you can not go far wrong with
getting yourself a pair of the &lt;a href=&quot;http:&quot;&gt;ugg classic crochet
Tall&amp;#8217;s. Even though these boots have been around for a few
years now they are likely to grow in popularity now. This is
because they were recently featured in Oprah Winfrey&amp;#8217;s
Favorite Things show.&lt;br&gt;
The UGG Classic Crochet is a new addition to the popular Classic
collection with its slouchy styling and colorful knit uppers
(polyester and wool blend). A sheepskin footbed provides the extra
comfort that UGG boot and &lt;a href=&quot;http:&quot;&gt;ugg classic crochet is
well-known for. A light and flexible outsole paired with a new
decorative label makes this boot perfect for spring. The Classic
Crochet boot can be cuffed or styled any creative way to
personalize your look. As with the UGG Classic Cardy boot, the
Crochet can either be worn with jeans. Or you can wear them pushed
down so that they have slouched feel and look to them. But it does
not matter what they are worn with or they way in which they are
worn they will still help you to make quite a statement about
yourself. Today&amp;#8217;s women have become fashion conscious. They
are going to almost any extent to look good and attractive. It has
become important to look good. In fact, it is one of the most
important factors that will decide success in various areas of
life. It can boost up your confidence level.&lt;br&gt;
As mentioned earlier the &lt;a href=&quot;http:&quot;&gt;uggs for cheapCrochet Tall
boots are going to grow in popularity this season, just because
Oprah Winfrey included them in her Favorite Things show. Not only
does she like the boots styling and colors (black, sand, rum
raisin). The reason they are one of her favorite things is because
she says it feels like she is walking on a cloud when she wears
them.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T03:37:28+00:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5194</number>
      <permalink>activerecord-beta-4-does-not-understand-most-postgres-data-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord arel postgresql</tag>
      <title>ActiveRecord Beta 4 does not understand most postgres data types</title>
      <updated-at type="datetime">2011-02-19T14:02:23+00:00</updated-at>
      <user-id type="integer">137772</user-id>
      <version type="integer">8</version>
      <user-name>fgfyh</user-name>
      <creator-name>Jeff Dean</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5194</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton
watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-26T02:04:31+00:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5194</number>
      <permalink>activerecord-beta-4-does-not-understand-most-postgres-data-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord arel postgresql</tag>
      <title>ActiveRecord Beta 4 does not understand most postgres data types</title>
      <updated-at type="datetime">2011-03-26T02:20:33+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">9</version>
      <user-name>bingbing</user-name>
      <creator-name>Jeff Dean</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5194</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
