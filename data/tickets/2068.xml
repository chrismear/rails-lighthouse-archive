<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-25T06:49:34+00:00</created-at>
  <creator-id type="integer">47440</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2068</number>
  <permalink>patch-habtm-relationships-fail-when-join-table-has-primary-key</permalink>
  <priority type="integer">1298</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord duplicate has_and_belongs_to_many join_table patch primary_key</tag>
  <title>HABTM Relationships Fail When Join Table has Primary Key</title>
  <updated-at type="datetime">2009-07-16T10:25:22+01:00</updated-at>
  <user-id type="integer">62959</user-id>
  <version type="integer">5</version>
  <user-name>Reto</user-name>
  <creator-name>Jaime Bellmyer</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2068</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>has_and_belongs_to_many relationships fail in an unexpected way when the join table has a primary key with the same name as a column in the associated table.  The most common example is when the join table is created by migration without including the :id =&gt; false option, like so:

@@@ ruby
  create_table :developers_projects do |t|
    t.integer :developer_id
    t.integer :project_id
  end
@@@

The results are problematic.  ActiveRecord takes any non-foreign-key columns in the join table, and fills them with values from the associated table.  Therefore, ActiveRecord tries to forcibly assign the id of the join record to be the same as the id of the associated table.  That's why, in the example above, you can only add a project to one developer.

My included patch excludes the join table primary key from being overridden, if it exists.  It also includes the relevant test in has_and_belongs_to_many_associations_test.rb, called test_adding_a_collection_when_join_table_has_primary_key.

The result is that habtm join tables work as expected.  Some may make the argument that join tables shouldn't have primary keys.  While it's true join tables almost never *need* them, they shouldn't become a liability that appears only after you've added several records.</original-body>
  <latest-body>has_and_belongs_to_many relationships fail in an unexpected way when the join table has a primary key with the same name as a column in the associated table.  The most common example is when the join table is created by migration without including the :id =&gt; false option, like so:

@@@ ruby
  create_table :developers_projects do |t|
    t.integer :developer_id
    t.integer :project_id
  end
@@@

The results are problematic.  ActiveRecord takes any non-foreign-key columns in the join table, and fills them with values from the associated table.  Therefore, ActiveRecord tries to forcibly assign the id of the join record to be the same as the id of the associated table.  That's why, in the example above, you can only add a project to one developer.

My included patch excludes the join table primary key from being overridden, if it exists.  It also includes the relevant test in has_and_belongs_to_many_associations_test.rb, called test_adding_a_collection_when_join_table_has_primary_key.

The result is that habtm join tables work as expected.  Some may make the argument that join tables shouldn't have primary keys.  While it's true join tables almost never *need* them, they shouldn't become a liability that appears only after you've added several records.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;has_and_belongs_to_many relationships fail in an unexpected way
when the join table has a primary key with the same name as a
column in the associated table. The most common example is when the
join table is created by migration without including the :id =&amp;gt;
false option, like so:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  create_table :developers_projects do |t|
    t.integer :developer_id
    t.integer :project_id
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results are problematic. ActiveRecord takes any
non-foreign-key columns in the join table, and fills them with
values from the associated table. Therefore, ActiveRecord tries to
forcibly assign the id of the join record to be the same as the id
of the associated table. That's why, in the example above, you can
only add a project to one developer.&lt;/p&gt;
&lt;p&gt;My included patch excludes the join table primary key from being
overridden, if it exists. It also includes the relevant test in
has_and_belongs_to_many_associations_test.rb, called
test_adding_a_collection_when_join_table_has_primary_key.&lt;/p&gt;
&lt;p&gt;The result is that habtm join tables work as expected. Some may
make the argument that join tables shouldn't have primary keys.
While it's true join tables almost never &lt;em&gt;need&lt;/em&gt; them, they
shouldn't become a liability that appears only after you've added
several records.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>has_and_belongs_to_many relationships fail in an unexpected way when the join table has a primary key with the same name as a column in the associated table.  The most common example is when the join table is created by migration without including the :id =&gt; false option, like so:

@@@ ruby
  create_table :developers_projects do |t|
    t.integer :developer_id
    t.integer :project_id
  end
@@@

The results are problematic.  ActiveRecord takes any non-foreign-key columns in the join table, and fills them with values from the associated table.  Therefore, ActiveRecord tries to forcibly assign the id of the join record to be the same as the id of the associated table.  That's why, in the example above, you can only add a project to one developer.

My included patch excludes the join table primary key from being overridden, if it exists.  It also includes the relevant test in has_and_belongs_to_many_associations_test.rb, called test_adding_a_collection_when_join_table_has_primary_key.

The result is that habtm join tables work as expected.  Some may make the argument that join tables shouldn't have primary keys.  While it's true join tables almost never *need* them, they shouldn't become a liability that appears only after you've added several records.</body>
      <body-html>&lt;div&gt;&lt;p&gt;has_and_belongs_to_many relationships fail in an unexpected way
when the join table has a primary key with the same name as a
column in the associated table. The most common example is when the
join table is created by migration without including the :id =&amp;gt;
false option, like so:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  create_table :developers_projects do |t|
    t.integer :developer_id
    t.integer :project_id
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results are problematic. ActiveRecord takes any
non-foreign-key columns in the join table, and fills them with
values from the associated table. Therefore, ActiveRecord tries to
forcibly assign the id of the join record to be the same as the id
of the associated table. That's why, in the example above, you can
only add a project to one developer.&lt;/p&gt;
&lt;p&gt;My included patch excludes the join table primary key from being
overridden, if it exists. It also includes the relevant test in
has_and_belongs_to_many_associations_test.rb, called
test_adding_a_collection_when_join_table_has_primary_key.&lt;/p&gt;
&lt;p&gt;The result is that habtm join tables work as expected. Some may
make the argument that join tables shouldn't have primary keys.
While it's true join tables almost never &lt;em&gt;need&lt;/em&gt; them, they
shouldn't become a liability that appears only after you've added
several records.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-25T06:49:34+00:00</created-at>
      <creator-id type="integer">47440</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2068</number>
      <permalink>patch-habtm-relationships-fail-when-join-table-has-primary-key</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord duplicate has_and_belongs_to_many join_table primary_key</tag>
      <title>[PATCH] HABTM Relationships Fail When Join Table has Primary Key</title>
      <updated-at type="datetime">2009-02-25T06:49:38+00:00</updated-at>
      <user-id type="integer">47440</user-id>
      <version type="integer">1</version>
      <user-name>Jaime Bellmyer</user-name>
      <creator-name>Jaime Bellmyer</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2068</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>After re-reading the ActiveRecord::Associations::ClassMethods docs, a new solution comes to mind.  We're telling people in the docs not to have a primary key on the join table.  Maybe instead of allowing primary keys to work error-free, we should raise an exception when the association is first made.  This way having a primary key in your join table will fail right away, fail loudly, and with an error message that can be easily understood/researched.

If this is the better way to go, I can certainly implement it.  Feedback is greatly appreciated.</body>
      <body-html>&lt;div&gt;&lt;p&gt;After re-reading the ActiveRecord::Associations::ClassMethods
docs, a new solution comes to mind. We're telling people in the
docs not to have a primary key on the join table. Maybe instead of
allowing primary keys to work error-free, we should raise an
exception when the association is first made. This way having a
primary key in your join table will fail right away, fail loudly,
and with an error message that can be easily
understood/researched.&lt;/p&gt;
&lt;p&gt;If this is the better way to go, I can certainly implement it.
Feedback is greatly appreciated.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-25T17:15:47+00:00</created-at>
      <creator-id type="integer">47440</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord duplicate has_and_belongs_to_many join_table primary_key
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2068</number>
      <permalink>patch-habtm-relationships-fail-when-join-table-has-primary-key</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord duplicate has_and_belongs_to_many join_table patch primary_key</tag>
      <title>[PATCH] HABTM Relationships Fail When Join Table has Primary Key</title>
      <updated-at type="datetime">2009-02-25T17:15:50+00:00</updated-at>
      <user-id type="integer">47440</user-id>
      <version type="integer">2</version>
      <user-name>Jaime Bellmyer</user-name>
      <creator-name>Jaime Bellmyer</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2068</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Can somebody with permissions please kill this ticket?  I recently learned that this solution is not what the rails community wants.  It's based on the legacy use of habtm before has_many :through came around.  Now the use of habtm join tables is deprecated for anything fancy.

Still, we still have the problem of cryptic failure when the habtm join table contains a primary key.  So I've created a different solution in ticket #2086 that raises an exception with a clear explanation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can somebody with permissions please kill this ticket? I
recently learned that this solution is not what the rails community
wants. It's based on the legacy use of habtm before has_many
:through came around. Now the use of habtm join tables is
deprecated for anything fancy.&lt;/p&gt;
&lt;p&gt;Still, we still have the problem of cryptic failure when the
habtm join table contains a primary key. So I've created a
different solution in ticket &lt;a href=&quot;/projects/8994/tickets/2086&quot; title=&quot;Ticket #2086&quot;&gt;#2086&lt;/a&gt; that raises an exception with a
clear explanation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-26T16:54:04+00:00</created-at>
      <creator-id type="integer">47440</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2068</number>
      <permalink>patch-habtm-relationships-fail-when-join-table-has-primary-key</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord duplicate has_and_belongs_to_many join_table patch primary_key</tag>
      <title>[PATCH] HABTM Relationships Fail When Join Table has Primary Key</title>
      <updated-at type="datetime">2009-02-26T16:54:07+00:00</updated-at>
      <user-id type="integer">47440</user-id>
      <version type="integer">3</version>
      <user-name>Jaime Bellmyer</user-name>
      <creator-name>Jaime Bellmyer</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2068</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-09T13:34:38+00:00</created-at>
      <creator-id type="integer">47440</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:title: &quot;[PATCH] HABTM Relationships Fail When Join Table has Primary Key&quot;
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2068</number>
      <permalink>patch-habtm-relationships-fail-when-join-table-has-primary-key</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord duplicate has_and_belongs_to_many join_table patch primary_key</tag>
      <title>HABTM Relationships Fail When Join Table has Primary Key</title>
      <updated-at type="datetime">2009-03-09T13:34:40+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Jaime Bellmyer</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2068</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Sorry for waking up this old ticket, but I almost shoot my foot due to this problem today.

In my opinion the documentation doesn't stress this problem enough, it says:
 'The join table should not have a primary key or a model associated with it. You must manually generate the join table with a migration such as this:'[0]

this even suggests that it is possible (technically), but one 'should not' use a primary key. But it is not possible and it reveals this ugly bug.

Would it possible to add a clear note about that problem in the documentation? 


[0] http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M002126</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry for waking up this old ticket, but I almost shoot my foot
due to this problem today.&lt;/p&gt;
&lt;p&gt;In my opinion the documentation doesn't stress this problem
enough, it says:&lt;br&gt;
'The join table should not have a primary key or a model associated
with it. You must manually generate the join table with a migration
such as this:'[0]&lt;/p&gt;
&lt;p&gt;this even suggests that it is possible (technically), but one
'should not' use a primary key. But it is not possible and it
reveals this ugly bug.&lt;/p&gt;
&lt;p&gt;Would it possible to add a clear note about that problem in the
documentation?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/projects/8994/changesets/0&quot; title=
&quot;Changeset [0]&quot;&gt;[0]&lt;/a&gt; &lt;a href=
&quot;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M002126&quot;&gt;
http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassM...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-16T10:25:16+01:00</created-at>
      <creator-id type="integer">47440</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2068</number>
      <permalink>patch-habtm-relationships-fail-when-join-table-has-primary-key</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord duplicate has_and_belongs_to_many join_table patch primary_key</tag>
      <title>HABTM Relationships Fail When Join Table has Primary Key</title>
      <updated-at type="datetime">2009-07-16T10:25:22+01:00</updated-at>
      <user-id type="integer">62959</user-id>
      <version type="integer">5</version>
      <user-name>Reto</user-name>
      <creator-name>Jaime Bellmyer</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2068</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>88e1838be19ee17441c07308ed5e9973ff59b686</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-25T06:49:34+00:00</created-at>
      <filename>primary_keys_on_habtm_join_tables.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">92680</id>
      <size type="integer">3861</size>
      <uploader-id type="integer">47440</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/92680/primary_keys_on_habtm_join_tables.diff</url>
    </attachment>
  </attachments>
</ticket>
