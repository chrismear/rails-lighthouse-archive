<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-01T19:08:58+01:00</created-at>
  <creator-id type="integer">19875</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">528</number>
  <permalink>check-joins-when-determining-preloading-of-includes</permalink>
  <priority type="integer">24</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord eager_loading enhancement joins patch</tag>
  <title>Check joins when determining preloading of includes</title>
  <updated-at type="datetime">2008-12-18T19:22:13+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">6</version>
  <user-name>Repository</user-name>
  <creator-name>Peter Wagenet</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/528</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Currently when calling ActiveRecord::Base#find with both an include clause and an order clause which references the include, ActiveRecord::Associations::ClassMethods#find_with_associations is used. This discards the select clause. In some cases, this is not the intended behavior. Take the following contrived example:

@@@ ruby
Person.find(:all, :select =&gt; &quot;people.*, email.address IS NOT NULL AS has_email&quot;, :order =&gt; &quot;email.address&quot;, :include =&gt; :email, :phone, :address)
@@@

The generated query will end up looking something like:

SELECT `people`.`id` AS t0_r0, `people`.`first_name` AS t0_r1 ... FROM `people` LEFT OUTER JOIN `emails` ON `people`.id = `emails`.person_id LEFT OUTER JOIN `phones` ON `people`.id = `phones`.person_id LEFT OUTER JOIN `addresses` ON `people`.id = `addresses`.person_id ORDER BY email.address;

As you can see, the provided select clause has been discarded in place of the complex one needed to load the includes.

I suggest that the user should be able to also specify a join clause which, if it includes the right tables, will allow ActiveRecord::AssociationPreload::ClassMethods#preload_associations to be used instead.

This has a two fold benefit of allowing a select clause to be used. And of still splitting the eager loading into multiple queries.

A revised query would look something like:

@@@ ruby
Person.find(:all, :select =&gt; &quot;people.*, email.address IS NOT NULL AS has_email&quot;, :order =&gt; &quot;email.address&quot;, :joins =&gt; :email, :include =&gt; :email, :phone, :address)
@@@

With the first query (there will now be multiple for eager loading), looking like:

SELECT people.*, email.address IS NOT NULL AS has_email FROM `people` INNER JOIN `emails` ON `people`.id = `emails`.person_id ORDER BY email.address;

A patch for this functionality is attached.</original-body>
  <latest-body>Currently when calling ActiveRecord::Base#find with both an include clause and an order clause which references the include, ActiveRecord::Associations::ClassMethods#find_with_associations is used. This discards the select clause. In some cases, this is not the intended behavior. Take the following contrived example:

@@@ ruby
Person.find(:all, :select =&gt; &quot;people.*, email.address IS NOT NULL AS has_email&quot;, :order =&gt; &quot;email.address&quot;, :include =&gt; :email, :phone, :address)
@@@

The generated query will end up looking something like:

SELECT `people`.`id` AS t0_r0, `people`.`first_name` AS t0_r1 ... FROM `people` LEFT OUTER JOIN `emails` ON `people`.id = `emails`.person_id LEFT OUTER JOIN `phones` ON `people`.id = `phones`.person_id LEFT OUTER JOIN `addresses` ON `people`.id = `addresses`.person_id ORDER BY email.address;

As you can see, the provided select clause has been discarded in place of the complex one needed to load the includes.

I suggest that the user should be able to also specify a join clause which, if it includes the right tables, will allow ActiveRecord::AssociationPreload::ClassMethods#preload_associations to be used instead.

This has a two fold benefit of allowing a select clause to be used. And of still splitting the eager loading into multiple queries.

A revised query would look something like:

@@@ ruby
Person.find(:all, :select =&gt; &quot;people.*, email.address IS NOT NULL AS has_email&quot;, :order =&gt; &quot;email.address&quot;, :joins =&gt; :email, :include =&gt; :email, :phone, :address)
@@@

With the first query (there will now be multiple for eager loading), looking like:

SELECT people.*, email.address IS NOT NULL AS has_email FROM `people` INNER JOIN `emails` ON `people`.id = `emails`.person_id ORDER BY email.address;

A patch for this functionality is attached.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Currently when calling ActiveRecord::Base#find with both an include clause and an order clause which references the include, ActiveRecord::Associations::ClassMethods#find_with_associations is used. This discards the select clause. In some cases, this is not the intended behavior. Take the following contrived example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Person.find(:all, :select =&amp;gt; &amp;quot;people.*, email.address IS NOT NULL AS has_email&amp;quot;, :order =&amp;gt; &amp;quot;email.address&amp;quot;, :include =&amp;gt; :email, :phone, :address)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The generated query will end up looking something like:
&lt;/p&gt;&lt;p&gt;
SELECT `people`.`id` AS t0_r0, `people`.`first_name` AS t0_r1 ... FROM `people` LEFT OUTER JOIN `emails` ON `people`.id = `emails`.person_id LEFT OUTER JOIN `phones` ON `people`.id = `phones`.person_id LEFT OUTER JOIN `addresses` ON `people`.id = `addresses`.person_id ORDER BY email.address;
&lt;/p&gt;&lt;p&gt;
As you can see, the provided select clause has been discarded in place of the complex one needed to load the includes.
&lt;/p&gt;&lt;p&gt;
I suggest that the user should be able to also specify a join clause which, if it includes the right tables, will allow ActiveRecord::AssociationPreload::ClassMethods#preload_associations to be used instead.
&lt;/p&gt;&lt;p&gt;
This has a two fold benefit of allowing a select clause to be used. And of still splitting the eager loading into multiple queries.
&lt;/p&gt;&lt;p&gt;
A revised query would look something like:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Person.find(:all, :select =&amp;gt; &amp;quot;people.*, email.address IS NOT NULL AS has_email&amp;quot;, :order =&amp;gt; &amp;quot;email.address&amp;quot;, :joins =&amp;gt; :email, :include =&amp;gt; :email, :phone, :address)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
With the first query (there will now be multiple for eager loading), looking like:
&lt;/p&gt;&lt;p&gt;
SELECT people.*, email.address IS NOT NULL AS has_email FROM `people` INNER JOIN `emails` ON `people`.id = `emails`.person_id ORDER BY email.address;
&lt;/p&gt;&lt;p&gt;
A patch for this functionality is attached.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Currently when calling ActiveRecord::Base#find with both an include clause and an order clause which references the include, ActiveRecord::Associations::ClassMethods#find_with_associations is used. This discards the select clause. In some cases, this is not the intended behavior. Take the following contrived example:

@@@ ruby
Person.find(:all, :select =&gt; &quot;people.*, email.address IS NOT NULL AS has_email&quot;, :order =&gt; &quot;email.address&quot;, :include =&gt; :email, :phone, :address)
@@@

The generated query will end up looking something like:

SELECT `people`.`id` AS t0_r0, `people`.`first_name` AS t0_r1 ... FROM `people` LEFT OUTER JOIN `emails` ON `people`.id = `emails`.person_id LEFT OUTER JOIN `phones` ON `people`.id = `phones`.person_id LEFT OUTER JOIN `addresses` ON `people`.id = `addresses`.person_id ORDER BY email.address;

As you can see, the provided select clause has been discarded in place of the complex one needed to load the includes.

I suggest that the user should be able to also specify a join clause which, if it includes the right tables, will allow ActiveRecord::AssociationPreload::ClassMethods#preload_associations to be used instead.

This has a two fold benefit of allowing a select clause to be used. And of still splitting the eager loading into multiple queries.

A revised query would look something like:

@@@ ruby
Person.find(:all, :select =&gt; &quot;people.*, email.address IS NOT NULL AS has_email&quot;, :order =&gt; &quot;email.address&quot;, :joins =&gt; :email, :include =&gt; :email, :phone, :address)
@@@

With the first query (there will now be multiple for eager loading), looking like:

SELECT people.*, email.address IS NOT NULL AS has_email FROM `people` INNER JOIN `emails` ON `people`.id = `emails`.person_id ORDER BY email.address;

A patch for this functionality is attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Currently when calling ActiveRecord::Base#find with both an include clause and an order clause which references the include, ActiveRecord::Associations::ClassMethods#find_with_associations is used. This discards the select clause. In some cases, this is not the intended behavior. Take the following contrived example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Person.find(:all, :select =&amp;gt; &amp;quot;people.*, email.address IS NOT NULL AS has_email&amp;quot;, :order =&amp;gt; &amp;quot;email.address&amp;quot;, :include =&amp;gt; :email, :phone, :address)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The generated query will end up looking something like:
&lt;/p&gt;&lt;p&gt;
SELECT `people`.`id` AS t0_r0, `people`.`first_name` AS t0_r1 ... FROM `people` LEFT OUTER JOIN `emails` ON `people`.id = `emails`.person_id LEFT OUTER JOIN `phones` ON `people`.id = `phones`.person_id LEFT OUTER JOIN `addresses` ON `people`.id = `addresses`.person_id ORDER BY email.address;
&lt;/p&gt;&lt;p&gt;
As you can see, the provided select clause has been discarded in place of the complex one needed to load the includes.
&lt;/p&gt;&lt;p&gt;
I suggest that the user should be able to also specify a join clause which, if it includes the right tables, will allow ActiveRecord::AssociationPreload::ClassMethods#preload_associations to be used instead.
&lt;/p&gt;&lt;p&gt;
This has a two fold benefit of allowing a select clause to be used. And of still splitting the eager loading into multiple queries.
&lt;/p&gt;&lt;p&gt;
A revised query would look something like:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Person.find(:all, :select =&amp;gt; &amp;quot;people.*, email.address IS NOT NULL AS has_email&amp;quot;, :order =&amp;gt; &amp;quot;email.address&amp;quot;, :joins =&amp;gt; :email, :include =&amp;gt; :email, :phone, :address)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
With the first query (there will now be multiple for eager loading), looking like:
&lt;/p&gt;&lt;p&gt;
SELECT people.*, email.address IS NOT NULL AS has_email FROM `people` INNER JOIN `emails` ON `people`.id = `emails`.person_id ORDER BY email.address;
&lt;/p&gt;&lt;p&gt;
A patch for this functionality is attached.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-01T19:08:58+01:00</created-at>
      <creator-id type="integer">19875</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">528</number>
      <permalink>check-joins-when-determining-preloading-of-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading enhancement joins patch</tag>
      <title>Check joins when determining preloading of includes</title>
      <updated-at type="datetime">2008-07-01T19:08:58+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">1</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>Peter Wagenet</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/528</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I've now added a test for this change.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I've now added a test for this change.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-01T20:37:02+01:00</created-at>
      <creator-id type="integer">19875</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">528</number>
      <permalink>check-joins-when-determining-preloading-of-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading enhancement joins patch</tag>
      <title>Check joins when determining preloading of includes</title>
      <updated-at type="datetime">2008-07-01T20:37:02+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">2</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>Peter Wagenet</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/528</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I found a bug in your code (it isn't specific to YOUR code, but it wasn't there before):

If you add this to your test:

    posts = Post.find(:all, :select =&gt; &quot;posts.*, authors.name AS test_name&quot;,
                              :include =&gt; [ :comments, :author, :categories ], :limit =&gt; 1)
    assert_equal &quot;David&quot;, posts.first.test_name


You'll see that it fails. This will only happen using the old behaviour and a limit clause. This wasn't an issue before because the select clause was being discarded.

I *think* you'll have to check which tables are referenced in the select clause and force their eager load (in the same way that's being done for the conditions and order options)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I found a bug in your code (it isn't specific to YOUR code, but
it wasn't there before):&lt;/p&gt;
&lt;p&gt;If you add this to your test:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;posts = Post.find(:all, :select =&amp;gt; &quot;posts.*, authors.name AS test_name&quot;,
                          :include =&amp;gt; [ :comments, :author, :categories ], :limit =&amp;gt; 1)
assert_equal &quot;David&quot;, posts.first.test_name
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You'll see that it fails. This will only happen using the old
behaviour and a limit clause. This wasn't an issue before because
the select clause was being discarded.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; you'll have to check which tables are
referenced in the select clause and force their eager load (in the
same way that's being done for the conditions and order
options)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-01T21:54:51+01:00</created-at>
      <creator-id type="integer">19875</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">528</number>
      <permalink>check-joins-when-determining-preloading-of-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading enhancement joins patch</tag>
      <title>Check joins when determining preloading of includes</title>
      <updated-at type="datetime">2008-10-23T16:27:05+01:00</updated-at>
      <user-id type="integer">21105</user-id>
      <version type="integer">3</version>
      <user-name>Tiago Macedo</user-name>
      <creator-name>Peter Wagenet</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/528</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Turns out the real issue isn't the order or limit clause. It's the select clause. If the any of the select, conditions or order reference the include tables then the select clause ends up getting discarded. With my fix, the solution in any of these events is to use an additional joins parameter as shown above. I've changed my tests to be more generic.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Turns out the real issue isn't the order or limit clause. It's the select clause. If the any of the select, conditions or order reference the include tables then the select clause ends up getting discarded. With my fix, the solution in any of these events is to use an additional joins parameter as shown above. I've changed my tests to be more generic.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-01T23:44:44+01:00</created-at>
      <creator-id type="integer">19875</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">528</number>
      <permalink>check-joins-when-determining-preloading-of-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading enhancement joins patch</tag>
      <title>Check joins when determining preloading of includes</title>
      <updated-at type="datetime">2008-07-01T23:44:44+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">4</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>Peter Wagenet</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/528</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've been working on this too. In that my patch is largely similar to yours, except that in the case when joins is a list/hash of association names I'm pulling the tables names straight out of the join dependency rather than turning the join dependency into a string and parsing that</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've been working on this too. In that my patch is largely
similar to yours, except that in the case when joins is a list/hash
of association names I'm pulling the tables names straight out of
the join dependency rather than turning the join dependency into a
string and parsing that&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-17T14:38:56+00:00</created-at>
      <creator-id type="integer">19875</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">528</number>
      <permalink>check-joins-when-determining-preloading-of-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading enhancement joins patch</tag>
      <title>Check joins when determining preloading of includes</title>
      <updated-at type="datetime">2008-12-17T14:39:00+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">5</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Peter Wagenet</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/528</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [c9ab7098be7bdd748c0f4a49c8ef015b4aad3108]) Ensure :include checks joins when determining if it can preload [#528 state:resolved]
http://github.com/rails/rails/commit/c9ab7098be7bdd748c0f4a49c8ef015b4aad3108</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [c9ab7098be7bdd748c0f4a49c8ef015b4aad3108]) Ensure
:include checks joins when determining if it can preload [&lt;a href=&quot;/projects/8994/tickets/528&quot; title=&quot;Ticket #528&quot;&gt;#528&lt;/a&gt;
state:resolved] &lt;a href=&quot;http://github.com/rails/rails/commit/c9ab7098be7bdd748c0f4a49c8ef015b4aad3108&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-18T19:22:10+00:00</created-at>
      <creator-id type="integer">19875</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">528</number>
      <permalink>check-joins-when-determining-preloading-of-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord eager_loading enhancement joins patch</tag>
      <title>Check joins when determining preloading of includes</title>
      <updated-at type="datetime">2008-12-18T19:22:13+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">6</version>
      <user-name>Repository</user-name>
      <creator-name>Peter Wagenet</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/528</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>9851b9b99a0cdc166254f08a061aeace02a67dda</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-07-01T23:44:44+01:00</created-at>
      <filename>find_include_joins.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">30434</id>
      <size type="integer">6197</size>
      <uploader-id type="integer">19875</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/30434/find_include_joins.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>16e6d1373ab6ceaaaab90063025f94838829bd46</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-12-17T14:38:56+00:00</created-at>
      <filename>include_checks_joins.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">72119</id>
      <size type="integer">8151</size>
      <uploader-id type="integer">17477</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/72119/include_checks_joins.diff</url>
    </attachment>
  </attachments>
</ticket>
