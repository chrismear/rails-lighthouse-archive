<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">8406</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-26T04:42:19+01:00</created-at>
  <creator-id type="integer">20273</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">2852</number>
  <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>2-3-stable accepts_nested_attributes_for has_one</tag>
  <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
  <updated-at type="datetime">2010-10-16T23:56:35+01:00</updated-at>
  <user-id type="integer">81551</user-id>
  <version type="integer">16</version>
  <user-name>Andrea Campi</user-name>
  <creator-name>Josh Sharpe</creator-name>
  <assigned-user-name>Eloy Duran</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>class Profile &lt; ActiveRecord::Base
  has_one :address
  accepts_nested_attributes_for :address
end

class Address &lt; ActiveRecord::Base
  belongs_to :profile
end

&gt;&gt; p = Profile.new
=&gt; #&lt;Profile id: nil, name: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; p.update_attributes(:name =&gt; &quot;foo&quot;, :address_attributes =&gt; {:line1 =&gt; &quot;my street&quot;})
=&gt; true

mysql&gt; select * from profiles;
+----+------+---------------------+---------------------+
| id | name | created_at          | updated_at          |
+----+------+---------------------+---------------------+
|  2 | foo  | 2009-06-29 12:53:58 | 2009-06-29 12:53:58 | 
+----+------+---------------------+---------------------+
1 row in set (0.00 sec)

mysql&gt; select * from addresses;
+----+------------+-----------+---------------------+---------------------+
| id | profile_id | line1     | created_at          | updated_at          |
+----+------------+-----------+---------------------+---------------------+
|  3 |          2 | my street | 2009-06-29 12:53:58 | 2009-06-29 12:53:58 | 
+----+------------+-----------+---------------------+---------------------+
1 row in set (0.00 sec)

&gt;&gt; p = Profile.first
=&gt; #&lt;Profile id: 2, name: &quot;foo&quot;, created_at: &quot;2009-06-29 12:53:58&quot;, updated_at: &quot;2009-06-29 12:53:58&quot;&gt;
&gt;&gt; p.update_attributes(:name =&gt; &quot;josh&quot;, :address_attributes =&gt; {:line1 =&gt; &quot;Other street&quot;})
=&gt; true

mysql&gt; select * from profiles;
+----+------+---------------------+---------------------+
| id | name | created_at          | updated_at          |
+----+------+---------------------+---------------------+
|  2 | josh | 2009-06-29 12:53:58 | 2009-06-29 12:54:41 | 
+----+------+---------------------+---------------------+
1 row in set (0.00 sec)

mysql&gt; select * from addresses;
+----+------------+--------------+---------------------+---------------------+
| id | profile_id | line1        | created_at          | updated_at          |
+----+------------+--------------+---------------------+---------------------+
|  3 |       NULL | my street    | 2009-06-29 12:53:58 | 2009-06-29 12:54:41 | 
|  4 |          2 | Other street | 2009-06-29 12:54:42 | 2009-06-29 12:54:42 | 
+----+------------+--------------+---------------------+---------------------+
2 rows in set (0.00 sec)</original-body>
  <latest-body>class Profile &lt; ActiveRecord::Base
  has_one :address
  accepts_nested_attributes_for :address
end

class Address &lt; ActiveRecord::Base
  belongs_to :profile
end

&gt;&gt; p = Profile.new
=&gt; #&lt;Profile id: nil, name: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; p.update_attributes(:name =&gt; &quot;foo&quot;, :address_attributes =&gt; {:line1 =&gt; &quot;my street&quot;})
=&gt; true

mysql&gt; select * from profiles;
+----+------+---------------------+---------------------+
| id | name | created_at          | updated_at          |
+----+------+---------------------+---------------------+
|  2 | foo  | 2009-06-29 12:53:58 | 2009-06-29 12:53:58 | 
+----+------+---------------------+---------------------+
1 row in set (0.00 sec)

mysql&gt; select * from addresses;
+----+------------+-----------+---------------------+---------------------+
| id | profile_id | line1     | created_at          | updated_at          |
+----+------------+-----------+---------------------+---------------------+
|  3 |          2 | my street | 2009-06-29 12:53:58 | 2009-06-29 12:53:58 | 
+----+------------+-----------+---------------------+---------------------+
1 row in set (0.00 sec)

&gt;&gt; p = Profile.first
=&gt; #&lt;Profile id: 2, name: &quot;foo&quot;, created_at: &quot;2009-06-29 12:53:58&quot;, updated_at: &quot;2009-06-29 12:53:58&quot;&gt;
&gt;&gt; p.update_attributes(:name =&gt; &quot;josh&quot;, :address_attributes =&gt; {:line1 =&gt; &quot;Other street&quot;})
=&gt; true

mysql&gt; select * from profiles;
+----+------+---------------------+---------------------+
| id | name | created_at          | updated_at          |
+----+------+---------------------+---------------------+
|  2 | josh | 2009-06-29 12:53:58 | 2009-06-29 12:54:41 | 
+----+------+---------------------+---------------------+
1 row in set (0.00 sec)

mysql&gt; select * from addresses;
+----+------------+--------------+---------------------+---------------------+
| id | profile_id | line1        | created_at          | updated_at          |
+----+------------+--------------+---------------------+---------------------+
|  3 |       NULL | my street    | 2009-06-29 12:53:58 | 2009-06-29 12:54:41 | 
|  4 |          2 | Other street | 2009-06-29 12:54:42 | 2009-06-29 12:54:42 | 
+----+------------+--------------+---------------------+---------------------+
2 rows in set (0.00 sec)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;class Profile &amp;lt; ActiveRecord::Base has_one :address
accepts_nested_attributes_for :address end&lt;/p&gt;
&lt;p&gt;class Address &amp;lt; ActiveRecord::Base belongs_to :profile
end&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;p = Profile.new =&amp;gt; # p.update_attributes(:name =&amp;gt; &quot;foo&quot;,
:address_attributes =&amp;gt; {:line1 =&amp;gt; &quot;my street&quot;}) =&amp;gt;
true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;mysql&amp;gt; select * from profiles;
+----+------+---------------------+---------------------+ | id |
name | created_at | updated_at |
+----+------+---------------------+---------------------+ | 2 | foo
| 2009-06-29 12:53:58 | 2009-06-29 12:53:58 |
+----+------+---------------------+---------------------+ 1 row in
set (0.00 sec)&lt;/p&gt;
&lt;p&gt;mysql&amp;gt; select * from addresses;
+----+------------+-----------+---------------------+---------------------+
| id | profile_id | line1 | created_at | updated_at |
+----+------------+-----------+---------------------+---------------------+
| 3 | 2 | my street | 2009-06-29 12:53:58 | 2009-06-29 12:53:58 |
+----+------------+-----------+---------------------+---------------------+
1 row in set (0.00 sec)&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;p = Profile.first =&amp;gt; # p.update_attributes(:name =&amp;gt;
&quot;josh&quot;, :address_attributes =&amp;gt; {:line1 =&amp;gt; &quot;Other street&quot;})
=&amp;gt; true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;mysql&amp;gt; select * from profiles;
+----+------+---------------------+---------------------+ | id |
name | created_at | updated_at |
+----+------+---------------------+---------------------+ | 2 |
josh | 2009-06-29 12:53:58 | 2009-06-29 12:54:41 |
+----+------+---------------------+---------------------+ 1 row in
set (0.00 sec)&lt;/p&gt;
&lt;p&gt;mysql&amp;gt; select * from addresses;
+----+------------+--------------+---------------------+---------------------+
| id | profile_id | line1 | created_at | updated_at |
+----+------------+--------------+---------------------+---------------------+
| 3 | NULL | my street | 2009-06-29 12:53:58 | 2009-06-29 12:54:41
| | 4 | 2 | Other street | 2009-06-29 12:54:42 | 2009-06-29
12:54:42 |
+----+------------+--------------+---------------------+---------------------+
2 rows in set (0.00 sec)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm seeing that updating nested attributes is creating additional rows for the nested object:
@@@
class Profile &lt; ActiveRecord::Base
  has_one :address
  accepts_nested_attributes_for :address
end

class Address &lt; ActiveRecord::Base
  belongs_to :profile
end
@@@

instantiate a profile and save it w/ associated address attributes:
@@@
&gt;&gt; p = Profile.new
=&gt; #&lt;Profile id: nil, name: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; p.update_attributes(:name =&gt; &quot;josh&quot;, :address_attributes =&gt; {:line1 =&gt; &quot;my street&quot;})
=&gt; true
&gt;&gt; Profile.count
=&gt; 1
&gt;&gt; Address.count
=&gt; 1
@@@

So far this is fine.  Now reload the profile and update its attributes again:
@@@
&gt;&gt; p = Profile.first
=&gt; #&lt;Profile id: 3, name: &quot;josh&quot;, created_at: &quot;2009-06-29 13:23:18&quot;, updated_at: &quot;2009-06-29 13:23:18&quot;&gt;
&gt;&gt; p.update_attributes(:name =&gt; &quot;josh&quot;, :address_attributes =&gt; {:line1 =&gt; &quot;my other street&quot;})
=&gt; true
&gt;&gt; Profile.count
=&gt; 1
&gt;&gt; Address.count
=&gt; 2
@@@

Why are there two addresses at this point?
@@@
&gt;&gt; Address.first
=&gt; #&lt;Address id: 6, profile_id: nil, line1: &quot;my street&quot;, created_at: &quot;2009-06-29 13:23:18&quot;, updated_at: &quot;2009-06-29 13:23:50&quot;&gt;
&gt;&gt; Address.find(7)
=&gt; #&lt;Address id: 7, profile_id: 3, line1: &quot;my other street&quot;, created_at: &quot;2009-06-29 13:23:50&quot;, updated_at: &quot;2009-06-29 13:23:50&quot;&gt;
&gt;&gt; Address.find(6).profile_id
=&gt; nil
@@@

The old address record's foreign key now points to nothing.  This would be invalid if Address validated its association.

I'm willing to dig into this if someone can confirm that it is a bug.

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm seeing that updating nested attributes is creating
additional rows for the nested object:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Profile &amp;lt; ActiveRecord::Base
  has_one :address
  accepts_nested_attributes_for :address
end&lt;br&gt;
&lt;br&gt;


&lt;br&gt;
class Address &amp;lt; ActiveRecord::Base
  belongs_to :profile
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;instantiate a profile and save it w/ associated address
attributes:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; p = Profile.new
=&amp;gt; #&amp;lt;Profile id: nil, name: nil, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; p.update_attributes(:name =&amp;gt; &quot;josh&quot;, :address_attributes =&amp;gt; {:line1 =&amp;gt; &quot;my street&quot;})
=&amp;gt; true
&amp;gt;&amp;gt; Profile.count
=&amp;gt; 1
&amp;gt;&amp;gt; Address.count
=&amp;gt; 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So far this is fine. Now reload the profile and update its
attributes again:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; p = Profile.first
=&amp;gt; #&amp;lt;Profile id: 3, name: &quot;josh&quot;, created_at: &quot;2009-06-29 13:23:18&quot;, updated_at: &quot;2009-06-29 13:23:18&quot;&amp;gt;
&amp;gt;&amp;gt; p.update_attributes(:name =&amp;gt; &quot;josh&quot;, :address_attributes =&amp;gt; {:line1 =&amp;gt; &quot;my other street&quot;})
=&amp;gt; true
&amp;gt;&amp;gt; Profile.count
=&amp;gt; 1
&amp;gt;&amp;gt; Address.count
=&amp;gt; 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Why are there two addresses at this point?&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Address.first
=&amp;gt; #&amp;lt;Address id: 6, profile_id: nil, line1: &quot;my street&quot;, created_at: &quot;2009-06-29 13:23:18&quot;, updated_at: &quot;2009-06-29 13:23:50&quot;&amp;gt;
&amp;gt;&amp;gt; Address.find(7)
=&amp;gt; #&amp;lt;Address id: 7, profile_id: 3, line1: &quot;my other street&quot;, created_at: &quot;2009-06-29 13:23:50&quot;, updated_at: &quot;2009-06-29 13:23:50&quot;&amp;gt;
&amp;gt;&amp;gt; Address.find(6).profile_id
=&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The old address record's foreign key now points to nothing. This
would be invalid if Address validated its association.&lt;/p&gt;
&lt;p&gt;I'm willing to dig into this if someone can confirm that it is a
bug.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-29T14:20:05+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3 accepts_nested_attributes_for has_one stable</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-06-29T14:34:21+01:00</updated-at>
      <user-id type="integer">20273</user-id>
      <version type="integer">1</version>
      <user-name>Josh Sharpe</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-29T14:40:20+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2-3 accepts_nested_attributes_for has_one stable
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-06-29T14:40:24+01:00</updated-at>
      <user-id type="integer">20273</user-id>
      <version type="integer">2</version>
      <user-name>Josh Sharpe</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This does seem to be a bug. Dig away!</body>
      <body-html>&lt;div&gt;&lt;p&gt;This does seem to be a bug. Dig away!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-02T01:10:06+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>verified</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-02T01:10:11+01:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">3</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-02T01:30:30+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- 
:state: verified
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-02T01:30:33+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There are tests that explicitly test for this behavior making me think this is not a bug.

See nested_attributes_test.rb:

@@@
def test_should_not_replace_an_existing_record_if_there_is_no_id_and_delete_is_truthy
  @pirate.reload.ship_attributes = { :name =&gt; 'Davy Jones Gold Dagger', :_delete =&gt; '1' }

  assert_equal @ship, @pirate.ship
  assert_equal 'Nights Dirty Lightning', @pirate.ship.name
end

def test_should_modify_an_existing_record_if_there_is_a_matching_id
  @pirate.reload.ship_attributes = { :id =&gt; @ship.id, :name =&gt; 'Davy Jones Gold Dagger' }

  assert_equal @ship, @pirate.ship
  assert_equal 'Davy Jones Gold Dagger', @pirate.ship.name
end
@@@

This still seems a bit counterintuitive to me.  I would think that the existing record would be used if it exists regardless if an ID is passed.  However, maybe there's a really good reason for this behavior that I'm missing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;There are tests that explicitly test for this behavior making me
think this is not a bug.&lt;/p&gt;
&lt;p&gt;See nested_attributes_test.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def test_should_not_replace_an_existing_record_if_there_is_no_id_and_delete_is_truthy
  @pirate.reload.ship_attributes = { :name =&amp;gt; 'Davy Jones Gold Dagger', :_delete =&amp;gt; '1' }

  assert_equal @ship, @pirate.ship
  assert_equal 'Nights Dirty Lightning', @pirate.ship.name
end

def test_should_modify_an_existing_record_if_there_is_a_matching_id
  @pirate.reload.ship_attributes = { :id =&amp;gt; @ship.id, :name =&amp;gt; 'Davy Jones Gold Dagger' }

  assert_equal @ship, @pirate.ship
  assert_equal 'Davy Jones Gold Dagger', @pirate.ship.name
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This still seems a bit counterintuitive to me. I would think
that the existing record would be used if it exists regardless if
an ID is passed. However, maybe there's a really good reason for
this behavior that I'm missing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-02T16:31:15+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-02T16:31:37+01:00</updated-at>
      <user-id type="integer">20273</user-id>
      <version type="integer">5</version>
      <user-name>Josh Sharpe</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am not intimately familiar with the behavior of nested attribute updating, but I can take a shot at this.

The question specifically would be: When are nested attributes updates vs. created. In the original update_attributes call, in :address_attributes, you do not specify the ID of the record to update, so my guess is that AR decides that it should create a new record.

@@@ ruby
p.update_attributes(:name =&gt; &quot;josh&quot;, :address_attributes =&gt; {:line1 =&gt; &quot;my street&quot;})
@@@

You also do not specify a :dependent option on your has_one association, so the default is to nullify the foreign key. So, I guess that if you want to update the record, you should specify the ID in the nested Hash. The tests that specify updating nested records all contain the ID of the records to update.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am not intimately familiar with the behavior of nested
attribute updating, but I can take a shot at this.&lt;/p&gt;
&lt;p&gt;The question specifically would be: When are nested attributes
updates vs. created. In the original update_attributes call, in
:address_attributes, you do not specify the ID of the record to
update, so my guess is that AR decides that it should create a new
record.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;p.update_attributes(:name =&amp;gt; &quot;josh&quot;, :address_attributes =&amp;gt; {:line1 =&amp;gt; &quot;my street&quot;})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You also do not specify a :dependent option on your has_one
association, so the default is to nullify the foreign key. So, I
guess that if you want to update the record, you should specify the
ID in the nested Hash. The tests that specify updating nested
records all contain the ID of the records to update.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-02T18:24:46+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-02T18:25:33+01:00</updated-at>
      <user-id type="integer">6601</user-id>
      <version type="integer">6</version>
      <user-name>Carl Lerche</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I just want to quickly reiterate, to be really clear -- this issue only applies to has_one relations.

That said, passing :id as the option to decide whether or not to update or create a new record doesn't make much sense.  IMO wouldn't it make more sense that the nested attribute ALWAYS reference the existing one.  This wouldn't break the ability to pass _delete =&gt; true, but it would prevent dangling records being created inadvertently and transparently.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just want to quickly reiterate, to be really clear -- this
issue only applies to has_one relations.&lt;/p&gt;
&lt;p&gt;That said, passing :id as the option to decide whether or not to
update or create a new record doesn't make much sense. IMO wouldn't
it make more sense that the nested attribute ALWAYS reference the
existing one. This wouldn't break the ability to pass _delete =&amp;gt;
true, but it would prevent dangling records being created
inadvertently and transparently.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-02T20:35:32+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-02T20:35:38+01:00</updated-at>
      <user-id type="integer">20273</user-id>
      <version type="integer">7</version>
      <user-name>Josh Sharpe</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Alright, I checked up on this some more and it seems that you are correct with regards to has_one should work without an ID. I'll mark this back as open.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Alright, I checked up on this some more and it seems that you
are correct with regards to has_one should work without an ID. I'll
mark this back as open.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-02T21:40:10+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- 
:state: invalid
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-02T21:40:17+01:00</updated-at>
      <user-id type="integer">6601</user-id>
      <version type="integer">8</version>
      <user-name>Carl Lerche</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Josh, @Carl, For me it makes sense creating a new record when an ID is not specified, even for has_one. It's common that I want to replace the associated object by another one.

I think the problem here is the dangling record. In such cases, when a record is being replaced, it should check for the :dependent behavior given to the association and invoke it properly.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Josh, @Carl, For me it makes sense creating a new record when
an ID is not specified, even for has_one. It's common that I want
to replace the associated object by another one.&lt;/p&gt;
&lt;p&gt;I think the problem here is the dangling record. In such cases,
when a record is being replaced, it should check for the :dependent
behavior given to the association and invoke it properly.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-09T08:57:38+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-09T08:57:41+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">9</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Jose, Would you be strongly opposed if has_one returned the current association and you had to pass _delete =&gt; true in order to delete this record?

I still feel that (per the original example)

p.update_attributes(:address_attributes =&gt; {:id =&gt; p.address.id, :line1 =&gt; &quot;my other street&quot;})

is redundant.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Jose, Would you be strongly opposed if has_one returned the
current association and you had to pass _delete =&amp;gt; true in order
to delete this record?&lt;/p&gt;
&lt;p&gt;I still feel that (per the original example)&lt;/p&gt;
&lt;p&gt;p.update_attributes(:address_attributes =&amp;gt; {:id =&amp;gt;
p.address.id, :line1 =&amp;gt; &quot;my other street&quot;})&lt;/p&gt;
&lt;p&gt;is redundant.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-09T19:42:06+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-09T19:42:11+01:00</updated-at>
      <user-id type="integer">20273</user-id>
      <version type="integer">10</version>
      <user-name>Josh Sharpe</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Josh, that would be a way to go, but I'm not sure if it works right now. Besides, there would be no way to nullify the record anymore.

Although the question of when nullify, destroy or delete is another problem yet to be handled by nested attributes. I would prefer if *_delete* just trigger whatever is configured on the association, instead of destroying it.

Currently we also have the same behavior to has_one and has_many, giving different behaviors can lead to further confusion. :/

Have you posted on the mailing list? Maybe we can bring more people to the discussion. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Josh, that would be a way to go, but I'm not sure if it works
right now. Besides, there would be no way to nullify the record
anymore.&lt;/p&gt;
&lt;p&gt;Although the question of when nullify, destroy or delete is
another problem yet to be handled by nested attributes. I would
prefer if &lt;em&gt;_delete&lt;/em&gt; just trigger whatever is configured on
the association, instead of destroying it.&lt;/p&gt;
&lt;p&gt;Currently we also have the same behavior to has_one and
has_many, giving different behaviors can lead to further confusion.
:/&lt;/p&gt;
&lt;p&gt;Have you posted on the mailing list? Maybe we can bring more
people to the discussion. :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-09T19:59:42+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-09T19:59:44+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">11</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-09T23:59:03+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-10T00:10:39+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">12</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is not a bug, as Jos&#233; already noted. If you want to update, specify the ID, otherwise a new one is created.

I also agree that _delete should do what's configured on the association and we might apply the same behaviour on one-to-one associations in the case where a record would be orphaned.

I just haven't had the need for it yet and thus haven't implemented it yet. If you need it on your app and are willing to write a patch, please do so and re-open the ticket.

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is not a bug, as Jos&amp;eacute; already noted. If you want to
update, specify the ID, otherwise a new one is created.&lt;/p&gt;
&lt;p&gt;I also agree that _delete should do what's configured on the
association and we might apply the same behaviour on one-to-one
associations in the case where a record would be orphaned.&lt;/p&gt;
&lt;p&gt;I just haven't had the need for it yet and thus haven't
implemented it yet. If you need it on your app and are willing to
write a patch, please do so and re-open the ticket.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-10T08:10:49+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2009-07-10T08:10:51+01:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">13</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Size, Every &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com&quot;&gt;gucci wallet&lt;/a&gt;&lt;/b&gt; Team. College, Pro and &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com/bag/gucci-cosmetic-case-with-zip-541-491.html&quot;&gt;Gucci cosmetic case with zip-541 wholesale&lt;/a&gt;&lt;/b&gt; More! Check Us Out &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com&quot;&gt;gucci handbags outlet&lt;/a&gt;&lt;/b&gt; Making the handbag Choice &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com&quot;&gt;fake gucci handbags&lt;/a&gt;&lt;/b&gt; easy. Save on design &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com/bag/chanel-lambskin-combon-small-bag-apricot-black-a25171-9618-1323.html&quot;&gt;Chanel Lambskin Combon Small bag apricot/black A25171-9618&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com/collection/chanel-classic-handbags.html&quot;&gt;Chanel Bags Chanel Classic Handbags&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com/bag/gucci-medium-messenger-bag-620-575.html&quot;&gt;discount Gucci medium messenger bag-620&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com&quot;&gt;fake gucci bag&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com/bag/chanel-embroidered-leather-discs-cc-logo-flap-handbag-pink-a46181-9245-1087.html&quot;&gt;fake Chanel Embroidered Leather Discs CC Logo Flap Handbag Pink A46181-9245&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com/bag/gucci-mini-flap-french-wallet-with-855-833.html&quot;&gt;Gucci mini flap french wallet with-855 discount&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Size, Every &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com&quot;&gt;gucci
wallet&lt;/a&gt;&lt;/b&gt; Team. College, Pro and &lt;b&gt;&lt;a href=
&quot;http://www.myguccioutlet.com/bag/gucci-cosmetic-case-with-zip-541-491.html&quot;&gt;
Gucci cosmetic case with zip-541 wholesale&lt;/a&gt;&lt;/b&gt; More! Check Us
Out &lt;b&gt;&lt;a href=&quot;http://www.myguccioutlet.com&quot;&gt;gucci handbags
outlet&lt;/a&gt;&lt;/b&gt; Making the handbag Choice &lt;b&gt;&lt;a href=
&quot;http://www.myguccioutlet.com&quot;&gt;fake gucci handbags&lt;/a&gt;&lt;/b&gt; easy.
Save on design &lt;b&gt;&lt;a href=
&quot;http://www.myguccioutlet.com/bag/chanel-lambskin-combon-small-bag-apricot-black-a25171-9618-1323.html&quot;&gt;
Chanel Lambskin Combon Small bag apricot/black A25171-9618&lt;/a&gt;&lt;/b&gt;
&lt;b&gt;&lt;a href=
&quot;http://www.myguccioutlet.com/collection/chanel-classic-handbags.html&quot;&gt;
Chanel Bags Chanel Classic Handbags&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.myguccioutlet.com/bag/gucci-medium-messenger-bag-620-575.html&quot;&gt;
discount Gucci medium messenger bag-620&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.myguccioutlet.com&quot;&gt;fake gucci bag&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.myguccioutlet.com/bag/chanel-embroidered-leather-discs-cc-logo-flap-handbag-pink-a46181-9245-1087.html&quot;&gt;
fake Chanel Embroidered Leather Discs CC Logo Flap Handbag Pink
A46181-9245&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.myguccioutlet.com/bag/gucci-mini-flap-french-wallet-with-855-833.html&quot;&gt;
Gucci mini flap french wallet with-855 discount&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-26T04:39:14+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2010-07-26T04:42:19+01:00</updated-at>
      <user-id type="integer">108790</user-id>
      <version type="integer">14</version>
      <user-name>zhuzhu</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:33+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2-3 accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2010-10-15T23:01:33+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">15</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-16T23:56:32+01:00</created-at>
      <creator-id type="integer">20273</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2-3 accepts_nested_attributes_for has_one
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">2852</number>
      <permalink>accepts_nested_attributes_for-creating-new-associated-record-when-one-already-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2-3-stable accepts_nested_attributes_for has_one</tag>
      <title>accepts_nested_attributes_for creating new associated record when one already exists</title>
      <updated-at type="datetime">2010-10-16T23:56:35+01:00</updated-at>
      <user-id type="integer">81551</user-id>
      <version type="integer">16</version>
      <user-name>Andrea Campi</user-name>
      <creator-name>Josh Sharpe</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2852</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
