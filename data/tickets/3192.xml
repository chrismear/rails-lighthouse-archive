<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-09-12T00:06:43+01:00</created-at>
  <creator-id type="integer">60464</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3192</number>
  <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
  <priority type="integer">141368</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>bugmash multibyte</tag>
  <title>should be able to truncate a multibyte string to a max # of bytes</title>
  <updated-at type="datetime">2009-11-04T15:19:17+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">11</version>
  <user-name>Repository</user-name>
  <creator-name>sarah (at ultrasaurus)</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
  <priority-name nil="true"></priority-name>
  <original-body>Common issue when you have a database column limited to a specific number of bytes, but you might have a multi-byte string.  We think there should be a method to help with this.  Here's our proposal (spec followed by implementation):

require File.dirname(__FILE__) + '/../spec_helper'

describe &quot;Chars#limit_bytes&quot; do
  it 'should return &quot;&quot; on &quot;&quot;' do
    &quot;&quot;.mb_chars.limit_bytes(0).should == &quot;&quot;
    &quot;&quot;.mb_chars.limit_bytes(1).should == &quot;&quot;
  end

  it 'should truncate single byte character strings as expected' do
    a = &quot;abcd&quot;
    a.mb_chars.limit_bytes(0).should == ''
    a.mb_chars.limit_bytes(1).should == 'a'
    a.mb_chars.limit_bytes(50).should == 'abcd'
  end

  it 'should truncate multi-byte character strings at character boundaries' do
    k = &quot;&#12371;&#12435;&#12356;&#12385;&#12431;&quot;
    k.mb_chars.limit_bytes(0).should == ''
    k.mb_chars.limit_bytes(1).should == ''
    k.mb_chars.limit_bytes(3).should == '&#12371;'
    k.mb_chars.limit_bytes(4).should == '&#12371;'
    k.mb_chars.limit_bytes(5).should == '&#12371;'
    k.mb_chars.limit_bytes(6).should == '&#12371;&#12435;'
    k.mb_chars.limit_bytes(7).should == '&#12371;&#12435;'
    k.mb_chars.limit_bytes(50).should == '&#12371;&#12435;&#12356;&#12385;&#12431;'
  end
end

module ActiveSupport #:nodoc:
  module Multibyte #:nodoc:
    class Chars
      def limit_bytes(limit)
        limit -= 1 while !valid_boundary?(limit)
        s = @wrapped_string.slice(0,limit)
        s.mb_chars
      end

      def valid_boundary?(length)
        chunk = @wrapped_string.slice(0,length)
        begin
          chunk.unpack('U*')
          true
        rescue
          false
        end
      end
    end
  end
end</original-body>
  <latest-body>Common issue when you have a database column limited to a specific number of bytes, but you might have a multi-byte string.  We think there should be a method to help with this.  Here's our proposal (spec followed by implementation):

require File.dirname(__FILE__) + '/../spec_helper'

describe &quot;Chars#limit_bytes&quot; do
  it 'should return &quot;&quot; on &quot;&quot;' do
    &quot;&quot;.mb_chars.limit_bytes(0).should == &quot;&quot;
    &quot;&quot;.mb_chars.limit_bytes(1).should == &quot;&quot;
  end

  it 'should truncate single byte character strings as expected' do
    a = &quot;abcd&quot;
    a.mb_chars.limit_bytes(0).should == ''
    a.mb_chars.limit_bytes(1).should == 'a'
    a.mb_chars.limit_bytes(50).should == 'abcd'
  end

  it 'should truncate multi-byte character strings at character boundaries' do
    k = &quot;&#12371;&#12435;&#12356;&#12385;&#12431;&quot;
    k.mb_chars.limit_bytes(0).should == ''
    k.mb_chars.limit_bytes(1).should == ''
    k.mb_chars.limit_bytes(3).should == '&#12371;'
    k.mb_chars.limit_bytes(4).should == '&#12371;'
    k.mb_chars.limit_bytes(5).should == '&#12371;'
    k.mb_chars.limit_bytes(6).should == '&#12371;&#12435;'
    k.mb_chars.limit_bytes(7).should == '&#12371;&#12435;'
    k.mb_chars.limit_bytes(50).should == '&#12371;&#12435;&#12356;&#12385;&#12431;'
  end
end

module ActiveSupport #:nodoc:
  module Multibyte #:nodoc:
    class Chars
      def limit_bytes(limit)
        limit -= 1 while !valid_boundary?(limit)
        s = @wrapped_string.slice(0,limit)
        s.mb_chars
      end

      def valid_boundary?(length)
        chunk = @wrapped_string.slice(0,length)
        begin
          chunk.unpack('U*')
          true
        rescue
          false
        end
      end
    end
  end
end</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Common issue when you have a database column limited to a
specific number of bytes, but you might have a multi-byte string.
We think there should be a method to help with this. Here's our
proposal (spec followed by implementation):&lt;/p&gt;
&lt;p&gt;require File.dirname(&lt;strong&gt;FILE&lt;/strong&gt;) +
'/../spec_helper'&lt;/p&gt;
&lt;p&gt;describe &quot;Chars#limit_bytes&quot; do&lt;br&gt;
it 'should return &quot;&quot; on &quot;&quot;' do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;&quot;.mb_chars.limit_bytes(0).should == &quot;&quot;
&quot;&quot;.mb_chars.limit_bytes(1).should == &quot;&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;it 'should truncate single byte character strings as expected'
do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a = &quot;abcd&quot;
a.mb_chars.limit_bytes(0).should == ''
a.mb_chars.limit_bytes(1).should == 'a'
a.mb_chars.limit_bytes(50).should == 'abcd'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;it 'should truncate multi-byte character strings at character
boundaries' do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;k = &quot;&amp;#12371;&amp;#12435;&amp;#12356;&amp;#12385;&amp;#12431;&quot;
k.mb_chars.limit_bytes(0).should == ''
k.mb_chars.limit_bytes(1).should == ''
k.mb_chars.limit_bytes(3).should == '&amp;#12371;'
k.mb_chars.limit_bytes(4).should == '&amp;#12371;'
k.mb_chars.limit_bytes(5).should == '&amp;#12371;'
k.mb_chars.limit_bytes(6).should == '&amp;#12371;&amp;#12435;'
k.mb_chars.limit_bytes(7).should == '&amp;#12371;&amp;#12435;'
k.mb_chars.limit_bytes(50).should == '&amp;#12371;&amp;#12435;&amp;#12356;&amp;#12385;&amp;#12431;'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;module ActiveSupport #:nodoc:&lt;br&gt;
module Multibyte #:nodoc:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Chars
  def limit_bytes(limit)
    limit -= 1 while !valid_boundary?(limit)
    s = @wrapped_string.slice(0,limit)
    s.mb_chars
  end

  def valid_boundary?(length)
    chunk = @wrapped_string.slice(0,length)
    begin
      chunk.unpack('U*')
      true
    rescue
      false
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Common issue when you have a database column limited to a specific number of bytes, but you might have a multi-byte string.  We think there should be a method to help with this.  Here's our proposal (spec followed by implementation):

require File.dirname(__FILE__) + '/../spec_helper'

describe &quot;Chars#limit_bytes&quot; do
  it 'should return &quot;&quot; on &quot;&quot;' do
    &quot;&quot;.mb_chars.limit_bytes(0).should == &quot;&quot;
    &quot;&quot;.mb_chars.limit_bytes(1).should == &quot;&quot;
  end

  it 'should truncate single byte character strings as expected' do
    a = &quot;abcd&quot;
    a.mb_chars.limit_bytes(0).should == ''
    a.mb_chars.limit_bytes(1).should == 'a'
    a.mb_chars.limit_bytes(50).should == 'abcd'
  end

  it 'should truncate multi-byte character strings at character boundaries' do
    k = &quot;&#12371;&#12435;&#12356;&#12385;&#12431;&quot;
    k.mb_chars.limit_bytes(0).should == ''
    k.mb_chars.limit_bytes(1).should == ''
    k.mb_chars.limit_bytes(3).should == '&#12371;'
    k.mb_chars.limit_bytes(4).should == '&#12371;'
    k.mb_chars.limit_bytes(5).should == '&#12371;'
    k.mb_chars.limit_bytes(6).should == '&#12371;&#12435;'
    k.mb_chars.limit_bytes(7).should == '&#12371;&#12435;'
    k.mb_chars.limit_bytes(50).should == '&#12371;&#12435;&#12356;&#12385;&#12431;'
  end
end

module ActiveSupport #:nodoc:
  module Multibyte #:nodoc:
    class Chars
      def limit_bytes(limit)
        limit -= 1 while !valid_boundary?(limit)
        s = @wrapped_string.slice(0,limit)
        s.mb_chars
      end

      def valid_boundary?(length)
        chunk = @wrapped_string.slice(0,length)
        begin
          chunk.unpack('U*')
          true
        rescue
          false
        end
      end
    end
  end
end</body>
      <body-html>&lt;div&gt;&lt;p&gt;Common issue when you have a database column limited to a
specific number of bytes, but you might have a multi-byte string.
We think there should be a method to help with this. Here's our
proposal (spec followed by implementation):&lt;/p&gt;
&lt;p&gt;require File.dirname(&lt;strong&gt;FILE&lt;/strong&gt;) +
'/../spec_helper'&lt;/p&gt;
&lt;p&gt;describe &quot;Chars#limit_bytes&quot; do&lt;br&gt;
it 'should return &quot;&quot; on &quot;&quot;' do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;&quot;.mb_chars.limit_bytes(0).should == &quot;&quot;
&quot;&quot;.mb_chars.limit_bytes(1).should == &quot;&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;it 'should truncate single byte character strings as expected'
do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a = &quot;abcd&quot;
a.mb_chars.limit_bytes(0).should == ''
a.mb_chars.limit_bytes(1).should == 'a'
a.mb_chars.limit_bytes(50).should == 'abcd'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;it 'should truncate multi-byte character strings at character
boundaries' do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;k = &quot;&amp;#12371;&amp;#12435;&amp;#12356;&amp;#12385;&amp;#12431;&quot;
k.mb_chars.limit_bytes(0).should == ''
k.mb_chars.limit_bytes(1).should == ''
k.mb_chars.limit_bytes(3).should == '&amp;#12371;'
k.mb_chars.limit_bytes(4).should == '&amp;#12371;'
k.mb_chars.limit_bytes(5).should == '&amp;#12371;'
k.mb_chars.limit_bytes(6).should == '&amp;#12371;&amp;#12435;'
k.mb_chars.limit_bytes(7).should == '&amp;#12371;&amp;#12435;'
k.mb_chars.limit_bytes(50).should == '&amp;#12371;&amp;#12435;&amp;#12356;&amp;#12385;&amp;#12431;'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;module ActiveSupport #:nodoc:&lt;br&gt;
module Multibyte #:nodoc:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Chars
  def limit_bytes(limit)
    limit -= 1 while !valid_boundary?(limit)
    s = @wrapped_string.slice(0,limit)
    s.mb_chars
  end

  def valid_boundary?(length)
    chunk = @wrapped_string.slice(0,length)
    begin
      chunk.unpack('U*')
      true
    rescue
      false
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-12T00:06:43+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-09-12T00:06:46+01:00</updated-at>
      <user-id type="integer">60464</user-id>
      <version type="integer">1</version>
      <user-name>sarah (at ultrasaurus)</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>FYI: happy to create a patch if y'all want this change  (paired with Wolfram Arnold on this)</body>
      <body-html>&lt;div&gt;&lt;p&gt;FYI: happy to create a patch if y'all want this change (paired
with Wolfram Arnold on this)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-12T00:07:48+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-09-12T00:07:51+01:00</updated-at>
      <user-id type="integer">60464</user-id>
      <version type="integer">2</version>
      <user-name>sarah (at ultrasaurus)</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yesterday I saw described truncation bug with multi-byte string on Basecamp.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yesterday I saw described truncation bug with multi-byte string
on Basecamp.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-15T05:39:07+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-09-15T05:45:55+01:00</updated-at>
      <user-id type="integer">8853</user-id>
      <version type="integer">3</version>
      <user-name>Alovak</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Oh, that's a good corroboration. We'll do a patch then.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oh, that's a good corroboration. We'll do a patch then.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-15T05:55:12+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-09-15T05:55:15+01:00</updated-at>
      <user-id type="integer">25923</user-id>
      <version type="integer">4</version>
      <user-name>Wolfram Arnold</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-25T12:20:00+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash</tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-09-25T12:49:00+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">5</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>since it's a bit staling i've attached a patch that applies on both master and 2-3-stable</body>
      <body-html>&lt;div&gt;&lt;p&gt;since it's a bit staling i've attached a patch that applies on
both master and 2-3-stable&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-27T19:52:39+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: bugmash
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash multibyte</tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-09-27T19:52:41+01:00</updated-at>
      <user-id type="integer">36381</user-id>
      <version type="integer">6</version>
      <user-name>Elad Meidar</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>-1 I don't think this fits into the responsibility for Chars.  Since we don't have a &quot;String&quot;.limit_characters we don't need a &quot;String&quot;.mb_chars.limit_bytes.

I haven't had the need to limit_bytes (or characters) based on a database restriction because a validation error is typically used to restrict the size.  Truncating the data and saving seems like an application specific thing and can be done by slicing and removing the left over bytes.  Note that &quot;&#12371;&#12435;&#12356;&#12385;&#12431;&quot;.length # =&gt; 15, which is the number of bytes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1 I don't think this fits into the responsibility for Chars.
Since we don't have a &quot;String&quot;.limit_characters we don't need a
&quot;String&quot;.mb_chars.limit_bytes.&lt;/p&gt;
&lt;p&gt;I haven't had the need to limit_bytes (or characters) based on a
database restriction because a validation error is typically used
to restrict the size. Truncating the data and saving seems like an
application specific thing and can be done by slicing and removing
the left over bytes. Note that
&quot;&amp;#12371;&amp;#12435;&amp;#12356;&amp;#12385;&amp;#12431;&quot;.length # =&amp;gt; 15, which
is the number of bytes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-27T22:02:58+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash multibyte</tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-09-27T22:03:01+01:00</updated-at>
      <user-id type="integer">46426</user-id>
      <version type="integer">7</version>
      <user-name>Mike Enriquez</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 verified Elad's patch applies cleanly on both master and 2-3-stable and all tests pass.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 verified Elad's patch applies cleanly on both master and
2-3-stable and all tests pass.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T04:50:26+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash multibyte</tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-09-28T04:50:31+01:00</updated-at>
      <user-id type="integer">56830</user-id>
      <version type="integer">8</version>
      <user-name>Mat&#237;as Flores</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Mike,

Sure you can find out the length in bytes for a multi-byte string, but to actually truncate it at a character boundary requires some effort (as you can see in the implementation above).

Validation errors are appropriate when there is user input and as a fail-safe.  In the case where we ran into this, we had a field in the database which is filled in as an annotation (for administrators and for debugging) based on a different longer field.  For auto-generated strings that need to be truncated, a validation isn't helpful.

Sarah</body>
      <body-html>&lt;div&gt;&lt;p&gt;Mike,&lt;/p&gt;
&lt;p&gt;Sure you can find out the length in bytes for a multi-byte
string, but to actually truncate it at a character boundary
requires some effort (as you can see in the implementation
above).&lt;/p&gt;
&lt;p&gt;Validation errors are appropriate when there is user input and
as a fail-safe. In the case where we ran into this, we had a field
in the database which is filled in as an annotation (for
administrators and for debugging) based on a different longer
field. For auto-generated strings that need to be truncated, a
validation isn't helpful.&lt;/p&gt;
&lt;p&gt;Sarah&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T12:17:55+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash multibyte</tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-09-28T12:17:58+01:00</updated-at>
      <user-id type="integer">60464</user-id>
      <version type="integer">9</version>
      <user-name>sarah (at ultrasaurus)</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't really feel the use-case, but I guess it's a valid reason. Not sure if this is something to include in core. Attached is a cleaned up version of the proposed patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't really feel the use-case, but I guess it's a valid
reason. Not sure if this is something to include in core. Attached
is a cleaned up version of the proposed patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-01T16:25:33+00:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash multibyte</tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-11-01T16:25:34+00:00</updated-at>
      <user-id type="integer">8407</user-id>
      <version type="integer">10</version>
      <user-name>Manfred Stienstra</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [935bd0fef8e26f4ec65fe411a1d29942493f8d46]) Add ActiveSupport::Multibyte::Chars#limit.

The limit method limits the number of bytes in a string. Useful when the
storage space of the string is limited, for instance in a database column
definition.

Sharpen up the implementation of translate offset.

[#3192 state:committed]
http://github.com/rails/rails/commit/935bd0fef8e26f4ec65fe411a1d29942493f8d46</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/935bd0fef8e26f4ec65fe411a1d29942493f8d46&quot;
title=
&quot;Changeset [935bd0fef8e26f4ec65fe411a1d29942493f8d46]&quot;&gt;[935bd0fef8e26f4ec65fe411a1d29942493f8d46]&lt;/a&gt;)
Add ActiveSupport::Multibyte::Chars#limit.&lt;/p&gt;
&lt;p&gt;The limit method limits the number of bytes in a string. Useful
when the&lt;br&gt;
storage space of the string is limited, for instance in a database
column&lt;br&gt;
definition.&lt;/p&gt;
&lt;p&gt;Sharpen up the implementation of translate offset.&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/3192&quot; title=
&quot;Ticket #3192&quot;&gt;#3192&lt;/a&gt; state:committed] &lt;a href=
&quot;http://github.com/rails/rails/commit/935bd0fef8e26f4ec65fe411a1d29942493f8d46&quot;&gt;
http://github.com/rails/rails/commit/935bd0fef8e26f4ec65fe411a1d299...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-04T15:19:15+00:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3192</number>
      <permalink>should-be-able-to-truncate-a-multibyte-string-to-a-max-of-bytes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>bugmash multibyte</tag>
      <title>should be able to truncate a multibyte string to a max # of bytes</title>
      <updated-at type="datetime">2009-11-04T15:19:17+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">11</version>
      <user-name>Repository</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3192</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>1064f1cbb23ac823bf7a8f4dc724227b956049b7</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-27T19:52:39+01:00</created-at>
      <filename>LH3192-add_limit_bytes_to_multibyte_strings-2-3-stable.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">279679</id>
      <size type="integer">2628</size>
      <uploader-id type="integer">36381</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/279679/LH3192-add_limit_bytes_to_multibyte_strings-2-3-stable.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>b3a4e1ffa1d4567ee1c69bb01f7b393043c7bd03</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-11-01T16:25:33+00:00</created-at>
      <filename>add_chars_limit.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">310562</id>
      <size type="integer">3366</size>
      <uploader-id type="integer">8407</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/310562/add_chars_limit.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>d26285d3db2a421b15805570cd487dc481d8e3e9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-11-01T17:12:00+00:00</created-at>
      <filename>add_chars_limit.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">310564</id>
      <size type="integer">5133</size>
      <uploader-id type="integer">8407</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/310564/add_chars_limit.patch</url>
    </attachment>
  </attachments>
</ticket>
