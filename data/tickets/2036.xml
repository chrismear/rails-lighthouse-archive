<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">8406</assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-21T07:22:09+00:00</created-at>
  <creator-id type="integer">20836</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2036</number>
  <permalink>autosave-unclear-for-habtm</permalink>
  <priority type="integer">1265</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>hold</state>
  <tag nil="true"></tag>
  <title>Linking and unlinking via accepts_nested_attributes_for</title>
  <updated-at type="datetime">2010-05-02T10:23:10+01:00</updated-at>
  <user-id type="integer">20836</user-id>
  <version type="integer">21</version>
  <user-name>Lawrence Pit</user-name>
  <creator-name>Lawrence Pit</creator-name>
  <assigned-user-name>Eloy Duran</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Using the nested_attributes example from github, and going into script/console mode, how can you modify the name of the project AND add an /existing/ tag to the project and save that atomically ?

Related question: suppose all that is defined is the following:

@@@ ruby
class Project &lt; ActiveRecord::Base
  has_and_belongs_to_many :tags, :autosave =&gt; true
end
class Tag &lt; ActiveRecord::Base
  has_and_belongs_to_many :projects, :autosave =&gt; true
end
@@@

And then I do:

@@@ ruby
Post.create(:name =&gt; &quot;foo&quot;)
Tag.create(:name =&gt; &quot;tag1&quot;)
Tag.create(:name =&gt; &quot;tag2&quot;)
Tag.create(:name =&gt; &quot;tag3&quot;)
@@@

Then if I did:

@@@ ruby
p = Post.first
p.name = &quot;updated foo&quot;
p.tags &lt;&lt; Tag.first
p.save
@@@

would you expect that these changes get saved atomically?

I kind of expected that. Is there any way to do this atomically?</original-body>
  <latest-body>Using the nested_attributes example from github, and going into script/console mode, how can you modify the name of the project AND add an /existing/ tag to the project and save that atomically ?

Related question: suppose all that is defined is the following:

@@@ ruby
class Project &lt; ActiveRecord::Base
  has_and_belongs_to_many :tags, :autosave =&gt; true
end
class Tag &lt; ActiveRecord::Base
  has_and_belongs_to_many :projects, :autosave =&gt; true
end
@@@

And then I do:

@@@ ruby
Post.create(:name =&gt; &quot;foo&quot;)
Tag.create(:name =&gt; &quot;tag1&quot;)
Tag.create(:name =&gt; &quot;tag2&quot;)
Tag.create(:name =&gt; &quot;tag3&quot;)
@@@

Then if I did:

@@@ ruby
p = Post.first
p.name = &quot;updated foo&quot;
p.tags &lt;&lt; Tag.first
p.save
@@@

would you expect that these changes get saved atomically?

I kind of expected that. Is there any way to do this atomically?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Using the nested_attributes example from github, and going into
script/console mode, how can you modify the name of the project AND
add an /existing/ tag to the project and save that atomically ?&lt;/p&gt;
&lt;p&gt;Related question: suppose all that is defined is the
following:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Project &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :tags, :autosave =&amp;gt; true
end
class Tag &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :projects, :autosave =&amp;gt; true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then I do:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Post.create(:name =&amp;gt; &amp;quot;foo&amp;quot;)
Tag.create(:name =&amp;gt; &amp;quot;tag1&amp;quot;)
Tag.create(:name =&amp;gt; &amp;quot;tag2&amp;quot;)
Tag.create(:name =&amp;gt; &amp;quot;tag3&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then if I did:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
p = Post.first
p.name = &amp;quot;updated foo&amp;quot;
p.tags &amp;lt;&amp;lt; Tag.first
p.save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would you expect that these changes get saved atomically?&lt;/p&gt;
&lt;p&gt;I kind of expected that. Is there any way to do this
atomically?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Using the nested_attributes example from github, and going into script/console mode, how can you modify the name of the project AND add an /existing/ tag to the project and save that atomically ?

Related question: suppose all that is defined is the following:

@@@ ruby
class Project &lt; ActiveRecord::Base
  has_and_belongs_to_many :tags, :autosave =&gt; true
end
class Tag &lt; ActiveRecord::Base
  has_and_belongs_to_many :projects, :autosave =&gt; true
end
@@@

And then I do:

@@@ ruby
Post.create(:name =&gt; &quot;foo&quot;)
Tag.create(:name =&gt; &quot;tag1&quot;)
Tag.create(:name =&gt; &quot;tag2&quot;)
Tag.create(:name =&gt; &quot;tag3&quot;)
@@@

Then if I did:

@@@ ruby
p = Post.first
p.name = &quot;updated foo&quot;
p.tags &lt;&lt; Tag.first
p.save
@@@

would you expect that these changes get saved atomically?

I kind of expected that. Is there any way to do this atomically?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Using the nested_attributes example from github, and going into
script/console mode, how can you modify the name of the project AND
add an /existing/ tag to the project and save that atomically ?&lt;/p&gt;
&lt;p&gt;Related question: suppose all that is defined is the
following:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Project &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :tags, :autosave =&amp;gt; true
end
class Tag &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :projects, :autosave =&amp;gt; true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then I do:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Post.create(:name =&amp;gt; &amp;quot;foo&amp;quot;)
Tag.create(:name =&amp;gt; &amp;quot;tag1&amp;quot;)
Tag.create(:name =&amp;gt; &amp;quot;tag2&amp;quot;)
Tag.create(:name =&amp;gt; &amp;quot;tag3&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then if I did:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
p = Post.first
p.name = &amp;quot;updated foo&amp;quot;
p.tags &amp;lt;&amp;lt; Tag.first
p.save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would you expect that these changes get saved atomically?&lt;/p&gt;
&lt;p&gt;I kind of expected that. Is there any way to do this
atomically?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-21T07:22:09+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>autosave unclear for habtm</title>
      <updated-at type="datetime">2009-02-21T07:22:13+00:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">1</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt; Using the nested_attributes example from github, and going into script/console mode, how can you modify the name of the project AND add an /existing/ tag to the project and save that atomically ?

There's no specific support for habtm with regards to adding children to other parents. What you could do is assign the ids of the children:

@@@ ruby
project.tag_ids = [1]
project.name = 'new name'
project.save

project.reload.name # =&gt; &quot;new name&quot;
project.tags # =&gt; [#&lt;Tag id:1&gt;]
@@@

About your second question; No I don't expect that to happen atomically as it already automatically saves everything by using #&lt;&lt;. I think this is only an &#8216;issue&#8217; in test cases and script/console as you mentioned, so it's not a real problem. If you want this to happen atomically you'll just have to wrap it in a transaction yourself.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;Using the nested_attributes example from github, and going into
script/console mode, how can you modify the name of the project AND
add an /existing/ tag to the project and save that atomically ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There's no specific support for habtm with regards to adding
children to other parents. What you could do is assign the ids of
the children:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
project.tag_ids = [1]
project.name = 'new name'
project.save

project.reload.name # =&amp;gt; &amp;quot;new name&amp;quot;
project.tags # =&amp;gt; [#&amp;lt;Tag id:1&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;About your second question; No I don't expect that to happen
atomically as it already automatically saves everything by using
#&amp;lt;&amp;lt;. I think this is only an &amp;#8216;issue&amp;#8217; in test
cases and script/console as you mentioned, so it's not a real
problem. If you want this to happen atomically you'll just have to
wrap it in a transaction yourself.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-22T16:34:24+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>autosave unclear for habtm</title>
      <updated-at type="datetime">2009-02-22T16:34:27+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">2</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think the example has_and_belongs_to_many :tags used to show off the accepts_nested_attributes_for feature is misguided then. 

It isn't really an example of what makes a habtm a habtm. To me habtm is all about linking existing records, not about actually CRUD'ing records on the other end.

I think a requirement for accepts_nested_attributes_for should be that it supports adding existing records to has_many and habtm.

In your example, when you do project.tag_ids = [1] it will immediately save those ids to the database. It's not an atomic transaction.

It's not only an issue in test cases and script/console. Consider this, as an example, in one of my forms I save a Group which has and belongs to many People. When an existing group is edited, currently the controller receives this:

@@@ ruby
Processing GroupsController#update (for 127.0.0.1 at 2009-02-23 07:52:04) [PUT]
  Parameters: {&quot;action&quot;=&gt;&quot;update&quot;, &quot;_method&quot;=&gt;&quot;put&quot;, &quot;id&quot;=&gt;&quot;2&quot;, &quot;controller&quot;=&gt;&quot;groups&quot;, &quot;group&quot;=&gt;{&quot;name&quot;=&gt;&quot;foo&quot;, &quot;person_ids&quot;=&gt;[&quot;1&quot;, &quot;3&quot;, &quot;2&quot;, &quot;&quot;]}}
@@@

In the controller I do:

@@@ ruby
def update
  if @group.update_attributes(params[:group])
    flash[:notice] = 'Group was successfully updated.'
    redirect_to(groups_path)
  else
    render :action =&gt; &quot;edit&quot;
  end
end
@@@

Currently this is doing 2 transactions though. 

Wrapping it in a transaction yourself? I'm surprised you're saying that. I could have said that before you committed all that stuff regarding autosave and accepts_nested_attributes_for. Wasn't the whole point here that you want all your changes POSTed to first validate as one, and then commit automatically / atomically as one?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think the example has_and_belongs_to_many :tags used to show
off the accepts_nested_attributes_for feature is misguided
then.&lt;/p&gt;
&lt;p&gt;It isn't really an example of what makes a habtm a habtm. To me
habtm is all about linking existing records, not about actually
CRUD'ing records on the other end.&lt;/p&gt;
&lt;p&gt;I think a requirement for accepts_nested_attributes_for should
be that it supports adding existing records to has_many and
habtm.&lt;/p&gt;
&lt;p&gt;In your example, when you do project.tag_ids = &lt;a href=&quot;/projects/8994/changesets/1&quot; title=&quot;Changeset #1&quot;&gt;[1]&lt;/a&gt; it will
immediately save those ids to the database. It's not an atomic
transaction.&lt;/p&gt;
&lt;p&gt;It's not only an issue in test cases and script/console.
Consider this, as an example, in one of my forms I save a Group
which has and belongs to many People. When an existing group is
edited, currently the controller receives this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Processing GroupsController#update (for 127.0.0.1 at 2009-02-23 07:52:04) [PUT]
  Parameters: {&amp;quot;action&amp;quot;=&amp;gt;&amp;quot;update&amp;quot;, &amp;quot;_method&amp;quot;=&amp;gt;&amp;quot;put&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;2&amp;quot;, &amp;quot;controller&amp;quot;=&amp;gt;&amp;quot;groups&amp;quot;, &amp;quot;group&amp;quot;=&amp;gt;{&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;foo&amp;quot;, &amp;quot;person_ids&amp;quot;=&amp;gt;[&amp;quot;1&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;&amp;quot;]}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the controller I do:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
def update
  if @group.update_attributes(params[:group])
    flash[:notice] = 'Group was successfully updated.'
    redirect_to(groups_path)
  else
    render :action =&amp;gt; &amp;quot;edit&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Currently this is doing 2 transactions though.&lt;/p&gt;
&lt;p&gt;Wrapping it in a transaction yourself? I'm surprised you're
saying that. I could have said that before you committed all that
stuff regarding autosave and accepts_nested_attributes_for. Wasn't
the whole point here that you want all your changes POSTed to first
validate as one, and then commit automatically / atomically as
one?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-22T21:26:07+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>autosave unclear for habtm</title>
      <updated-at type="datetime">2009-02-22T21:26:12+00:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">3</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt;I think the example has_and_belongs_to_many :tags used to show off the accepts_nested_attributes_for feature is misguided then.
&gt; It isn't really an example of what makes a habtm a habtm. To me habtm is all about linking existing records, not about actually CRUD'ing records on the other end.

I understand. The example was simply meant to test the CRUD part. Sorry if this misguided you. I agree with your point though that it would be nice to have, but it should be an abstraction of an actual app/use case imo so we shouldn't make it up here by committee :)
Do you have an idea or rough code on how to solve this?

Oh and there has already been some discussion already about such functionality on #1892.

&gt;In your example, when you do project.tag_ids = [1] it will immediately save those ids to the database. It's not an atomic transaction.

You're right, my bad I tested this the wrong way.

&gt;Wrapping it in a transaction yourself? I'm surprised you're saying that. I could have said that before you committed all that stuff regarding autosave and accepts_nested_attributes_for. Wasn't the whole point here that you want all your changes POSTed to first validate as one, and then commit automatically / atomically as one?

My remark about adding a transaction yourself was directed at your second question about using #&lt;&lt; to add a record but only adding it in the #save call to the parent. Nested attributes and autosave are meant for actions which you want to do in 1 action. Using methods like #&lt;&lt; in this way was not its target.

But if you have a case which proves otherwise I'm happy to be proven wrong.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;I think the example has_and_belongs_to_many :tags used to show
off the accepts_nested_attributes_for feature is misguided then. It
isn't really an example of what makes a habtm a habtm. To me habtm
is all about linking existing records, not about actually CRUD'ing
records on the other end.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I understand. The example was simply meant to test the CRUD
part. Sorry if this misguided you. I agree with your point though
that it would be nice to have, but it should be an abstraction of
an actual app/use case imo so we shouldn't make it up here by
committee :) Do you have an idea or rough code on how to solve
this?&lt;/p&gt;
&lt;p&gt;Oh and there has already been some discussion already about such
functionality on &lt;a href=&quot;/projects/8994/tickets/1892&quot; title=&quot;Ticket #1892&quot;&gt;#1892&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In your example, when you do project.tag_ids = &lt;a href=&quot;/projects/8994/changesets/1&quot; title=&quot;Changeset #1&quot;&gt;[1]&lt;/a&gt; it will
immediately save those ids to the database. It's not an atomic
transaction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You're right, my bad I tested this the wrong way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wrapping it in a transaction yourself? I'm surprised you're
saying that. I could have said that before you committed all that
stuff regarding autosave and accepts_nested_attributes_for. Wasn't
the whole point here that you want all your changes POSTed to first
validate as one, and then commit automatically / atomically as
one?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My remark about adding a transaction yourself was directed at
your second question about using #&amp;lt;&amp;lt; to add a record but only
adding it in the #save call to the parent. Nested attributes and
autosave are meant for actions which you want to do in 1 action.
Using methods like #&amp;lt;&amp;lt; in this way was not its target.&lt;/p&gt;
&lt;p&gt;But if you have a case which proves otherwise I'm happy to be
proven wrong.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-22T21:52:01+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>autosave unclear for habtm</title>
      <updated-at type="datetime">2009-02-22T21:52:02+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">4</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I forked your complex-form-examples sample app, and created a new branch 'linking', and added some code with a suggestion how to manage habtm relationships:

http://github.com/lawrencepit/complex-form-examples/commit/c217b4fb412b91f2e8ca35e54ad3becb481207e6

You get something like:

http://img.skitch.com/20090223-b3apdwy3nb97usnq8989um9rjj.png

Attached is a diff that needs to be applied to the rails edge to get it to actually work.

Kind of though. The issue of course is that though it does seem to work, two transactions are used. I.e., when the validation of a project fails, the people that were added to and/or removed from the project in the form have already been committed to the database.

If project.people_ids = [1,2,3] would work without automatically committing then the view code can be even simpler of course, but doing it this way (assigning a hash to project.people_attributes) you can also partially add and/or remove records from a collection.

I thought I first throw this at you, see what you think of this direction, and possibly you have some suggestions on how to go forward with this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I forked your complex-form-examples sample app, and created a
new branch 'linking', and added some code with a suggestion how to
manage habtm relationships:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/lawrencepit/complex-form-examples/commit/c217b4fb412b91f2e8ca35e54ad3becb481207e6&quot;&gt;
http://github.com/lawrencepit/co...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You get something like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://img.skitch.com/20090223-b3apdwy3nb97usnq8989um9rjj.png&quot;&gt;http://img.skitch.com/20090223-b...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Attached is a diff that needs to be applied to the rails edge to
get it to actually work.&lt;/p&gt;
&lt;p&gt;Kind of though. The issue of course is that though it does seem
to work, two transactions are used. I.e., when the validation of a
project fails, the people that were added to and/or removed from
the project in the form have already been committed to the
database.&lt;/p&gt;
&lt;p&gt;If project.people_ids = [1,2,3] would work without automatically
committing then the view code can be even simpler of course, but
doing it this way (assigning a hash to project.people_attributes)
you can also partially add and/or remove records from a
collection.&lt;/p&gt;
&lt;p&gt;I thought I first throw this at you, see what you think of this
direction, and possibly you have some suggestions on how to go
forward with this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-23T01:43:18+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>autosave unclear for habtm</title>
      <updated-at type="datetime">2009-02-23T01:43:20+00:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">5</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-23T01:49:46+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- 
:title: autosave unclear for habtm
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-02-23T01:49:47+00:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">6</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&gt; Kind of though. The issue of course is that though it does seem to work, two transactions are used. I.e., when the validation of a project fails, the people that were added to and/or removed from the project in the form have already been committed to the database.

I see. The reason is that you are using #delete on the association collection: &#8220;send(association_name).delete(existing_record)&#8221;. I'm not sure if you expected that using #delete would only remove it from the collection as it does on Array, but on AssociationCollection it actuallt deletes the record from the db. All the methods that mutate the collection seem to do this, but not 100% sure.

So what you should do is move the actual removing of the record from the collection into autosave_association instead of nested_attributes. Take a look at mark_for_destruction as an example. Records that should be destroyed are marked for destruction in nested_attributes, but they are not removed until the parent is saved and autosave association goes through all records that should be destroyed.

If you feel that using the foo_ids= method is the best way from experience then you could add a method like mark_for_destruction but assigns the ids.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;Kind of though. The issue of course is that though it does seem
to work, two transactions are used. I.e., when the validation of a
project fails, the people that were added to and/or removed from
the project in the form have already been committed to the
database.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I see. The reason is that you are using #delete on the
association collection:
&amp;#8220;send(association_name).delete(existing_record)&amp;#8221;. I'm
not sure if you expected that using #delete would only remove it
from the collection as it does on Array, but on
AssociationCollection it actuallt deletes the record from the db.
All the methods that mutate the collection seem to do this, but not
100% sure.&lt;/p&gt;
&lt;p&gt;So what you should do is move the actual removing of the record
from the collection into autosave_association instead of
nested_attributes. Take a look at mark_for_destruction as an
example. Records that should be destroyed are marked for
destruction in nested_attributes, but they are not removed until
the parent is saved and autosave association goes through all
records that should be destroyed.&lt;/p&gt;
&lt;p&gt;If you feel that using the foo_ids= method is the best way from
experience then you could add a method like mark_for_destruction
but assigns the ids.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-23T08:34:47+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- 
:state: wontfix
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-02-23T08:34:49+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">7</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I know that normally delete and push on an association collection execute directly on the db. I had expected though that the autosave feature was already implemented in such a way that it wouldn't, i.e. hold off until save was called on the parent object.

I've just implementing this behavior. Attached a patch for AR that works. Linking and unlinking of association records now is committed atomically when the parent object is saved. If validation of the parent fails, nothing has been done in the database.

Next step is to modify fields_for_with_nested_attributes in actionpack a bit such that it calls block for unlinked records as well (which can exist if validation failed). Should have that tomorrow.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I know that normally delete and push on an association
collection execute directly on the db. I had expected though that
the autosave feature was already implemented in such a way that it
wouldn't, i.e. hold off until save was called on the parent
object.&lt;/p&gt;
&lt;p&gt;I've just implementing this behavior. Attached a patch for AR
that works. Linking and unlinking of association records now is
committed atomically when the parent object is saved. If validation
of the parent fails, nothing has been done in the database.&lt;/p&gt;
&lt;p&gt;Next step is to modify fields_for_with_nested_attributes in
actionpack a bit such that it calls block for unlinked records as
well (which can exist if validation failed). Should have that
tomorrow.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-24T00:33:38+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-02-24T00:33:44+00:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">8</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Some thoughts:

* Please write your patch with the last patch from #1930 applied.
* Keep any code related to autosaving in the AutosaveModule. (So override methods and use super, or alias_method_chain in cases where super won't work.)
* Not sure if you were gonna keep it that way, but please refactor/break apart your test case, because it's very hard to follow its intentions.
* I'd rather not see any changes to fields_for regarding implementation details of the autosaving code, ie it should just work.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Some thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Please write your patch with the last patch from &lt;a href=&quot;/projects/8994/tickets/1930&quot; title=&quot;Ticket #1930&quot;&gt;#1930&lt;/a&gt;
applied.&lt;/li&gt;
&lt;li&gt;Keep any code related to autosaving in the AutosaveModule. (So
override methods and use super, or alias_method_chain in cases
where super won't work.)&lt;/li&gt;
&lt;li&gt;Not sure if you were gonna keep it that way, but please
refactor/break apart your test case, because it's very hard to
follow its intentions.&lt;/li&gt;
&lt;li&gt;I'd rather not see any changes to fields_for regarding
implementation details of the autosaving code, ie it should just
work.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-24T08:48:45+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-02-24T08:49:59+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">9</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Attached a patch that first requires patch from #1930.

Hopefully the extra autosave tests are more clear now.

Can you explain how I could get the code (that I currently added to AssociationCollection) into the AutosaveAssociation module? The AssociationCollection is at a different level, so at least it requires another module if you wanted to keep it really separate I think. But then, I don't quite see how to refactor this nicely. For example, how would you extract the autosave bits from the +delete+ method of AssociationCollection as I patched it?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attached a patch that first requires patch from &lt;a href=&quot;/projects/8994/tickets/1930&quot; title=&quot;Ticket #1930&quot;&gt;#1930&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully the extra autosave tests are more clear now.&lt;/p&gt;
&lt;p&gt;Can you explain how I could get the code (that I currently added
to AssociationCollection) into the AutosaveAssociation module? The
AssociationCollection is at a different level, so at least it
requires another module if you wanted to keep it really separate I
think. But then, I don't quite see how to refactor this nicely. For
example, how would you extract the autosave bits from the +delete+
method of AssociationCollection as I patched it?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-24T13:25:07+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-02-24T13:25:11+00:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">10</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I wrote my own commit, since i don't know how to use .diff files.

But i think this is the solution:
http://github.com/DiMarcello/rails/commit/0f150f7cbe1f2517a6c64e0d1f8d4be572f23b1d</body>
      <body-html>&lt;div&gt;&lt;p&gt;I wrote my own commit, since i don't know how to use .diff
files.&lt;/p&gt;
&lt;p&gt;But i think this is the solution: &lt;a href=&quot;http://github.com/DiMarcello/rails/commit/0f150f7cbe1f2517a6c64e0d1f8d4be572f23b1d&quot;&gt;
http://github.com/DiMarcello/rai...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-09T06:17:01+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-03-09T06:17:06+00:00</updated-at>
      <user-id type="integer">49931</user-id>
      <version type="integer">11</version>
      <user-name>Di Marcello</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>@Lawrence: If you really need to change the behaviour of other methods you can override them in a Module and then call super. This is done whit the has_many, has_one etc macros ijn AutosaveAssociation.

However, this is only needed if you want to change the normal #destroy/#push etc to work with AutosaveAssociation. The title of your ticket however suggests you wanted to be able to do this through nested attributes, in which case it isn't necessary to override these methods. You can keep it all in one place, like Di Marcello did.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Lawrence: If you really need to change the behaviour of other
methods you can override them in a Module and then call super. This
is done whit the has_many, has_one etc macros ijn
AutosaveAssociation.&lt;/p&gt;
&lt;p&gt;However, this is only needed if you want to change the normal
#destroy/#push etc to work with AutosaveAssociation. The title of
your ticket however suggests you wanted to be able to do this
through nested attributes, in which case it isn't necessary to
override these methods. You can keep it all in one place, like Di
Marcello did.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-09T08:49:19+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-03-09T08:49:25+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">12</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>@ Di Marcello: I quickly skimmed it and I understand the intent. But there are no tests and I want extensive test coverage.

Maybe, now that I understand how you guys would like to see this implemented, I can write one. But I'm not promising anything.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@ Di Marcello: I quickly skimmed it and I understand the intent.
But there are no tests and I want extensive test coverage.&lt;/p&gt;
&lt;p&gt;Maybe, now that I understand how you guys would like to see this
implemented, I can write one. But I'm not promising anything.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-09T08:49:38+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-03-09T08:49:41+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">13</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>@DiMarcello Thanks mate, that was exactly the implementation I had in mind. 

@Eloy I think it is necessary to the change the normal #destroy/#push methods to work with AutosaveAssociation otherwise the code from DiMarcello doesn't execute as an atomical transaction.

I'm just back from a holiday, need to catch up on a lot of other stuff, when I have, I'll add some tests for what DiMarcello added.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@DiMarcello Thanks mate, that was exactly the implementation I
had in mind.&lt;/p&gt;
&lt;p&gt;@Eloy I think it is necessary to the change the normal
#destroy/#push methods to work with AutosaveAssociation otherwise
the code from DiMarcello doesn't execute as an atomical
transaction.&lt;/p&gt;
&lt;p&gt;I'm just back from a holiday, need to catch up on a lot of other
stuff, when I have, I'll add some tests for what DiMarcello
added.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-10T22:26:23+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-03-10T23:03:03+00:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">14</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>yeah sorry about the tests m8's...

i don't really test..
later i tested it on my own app (without a real test)
found some typo's and sort.

committed those to.
but i really need to start writing tests, also for my apps. havent really gotten in to those

I also thought the original _delete mark should be _destroy. so _unlink(pretty weird) can get _delete as they are called in AR</body>
      <body-html>&lt;div&gt;&lt;p&gt;yeah sorry about the tests m8's...&lt;/p&gt;
&lt;p&gt;i don't really test.. later i tested it on my own app (without a
real test) found some typo's and sort.&lt;/p&gt;
&lt;p&gt;committed those to. but i really need to start writing tests,
also for my apps. havent really gotten in to those&lt;/p&gt;
&lt;p&gt;I also thought the original &lt;em&gt;delete mark should be&lt;/em&gt;
destroy. so &lt;em&gt;unlink(pretty weird) can get&lt;/em&gt; delete as they
are called in AR&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-11T21:26:36+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-03-11T22:00:50+00:00</updated-at>
      <user-id type="integer">49931</user-id>
      <version type="integer">15</version>
      <user-name>Di Marcello</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>&gt; delete mark should be destroy, so unlink can be delete

I agree with that.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;delete mark should be destroy, so unlink can be delete&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I agree with that.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-12T00:58:11+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-03-12T00:58:13+00:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">16</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I have been stuck with the same problem discussed here (and also in #1892): how to get habtm relationships to work well with accepts_nested_attributes_for. These discussions are a couple months old: do you know whether there has been any changes since then? 

Notably, in the two cases below:

1) Deleting the association instead of destroying a record.

In the alloy-complex-form-example, we have: 
class Project &lt; ActiveRecord::Base 
 has_and_belongs_to_many :tags 
end 
If you edit a &quot;Project&quot; and &quot;remove&quot; a specific &quot;Tag&quot;, it destroys the 
Tag record itself instead of only the link in the join table.

2) Creating an association instead of a record. 

With the same example, there doesn't seem to be a way to associate an 
existing Tag to a Project. If you pass a Tag ID (from the view), it does get saved (unless I am doing something wrong?).</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have been stuck with the same problem discussed here (and also
in &lt;a href=&quot;/projects/8994/tickets/1892&quot; title=
&quot;Ticket #1892&quot;&gt;#1892&lt;/a&gt;): how to get habtm relationships to work
well with accepts_nested_attributes_for. These discussions are a
couple months old: do you know whether there has been any changes
since then?&lt;/p&gt;
&lt;p&gt;Notably, in the two cases below:&lt;/p&gt;
&lt;p&gt;1) Deleting the association instead of destroying a record.&lt;/p&gt;
&lt;p&gt;In the alloy-complex-form-example, we have:&lt;br&gt;
class Project &amp;lt; ActiveRecord::Base&lt;br&gt;
has_and_belongs_to_many :tags end&lt;br&gt;
If you edit a &quot;Project&quot; and &quot;remove&quot; a specific &quot;Tag&quot;, it destroys
the&lt;br&gt;
Tag record itself instead of only the link in the join table.&lt;/p&gt;
&lt;p&gt;2) Creating an association instead of a record.&lt;/p&gt;
&lt;p&gt;With the same example, there doesn't seem to be a way to
associate an&lt;br&gt;
existing Tag to a Project. If you pass a Tag ID (from the view), it
does get saved (unless I am doing something wrong?).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-24T20:15:10+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-11-24T20:15:14+00:00</updated-at>
      <user-id type="integer">77683</user-id>
      <version type="integer">17</version>
      <user-name>PeterW</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I too would like to know if there has been any progress?

Just to be clear, I would love the features to be expanded, but this should be written by somebody that _actually_ needs it. Which, at this moment,  certainly isn't me&#8230;

Otherwise I'll close this ticket somewhere next week, at least for the time being.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I too would like to know if there has been any progress?&lt;/p&gt;
&lt;p&gt;Just to be clear, I would love the features to be expanded, but
this should be written by somebody that &lt;em&gt;actually&lt;/em&gt; needs it.
Which, at this moment, certainly isn't me&amp;#8230;&lt;/p&gt;
&lt;p&gt;Otherwise I'll close this ticket somewhere next week, at least
for the time being.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-27T13:22:41+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2009-11-27T13:22:44+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">18</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I do need this functionality, and I had already started monkey-patching it as a proof of concept.
I will look at cleaning up the original patch (Di Marcello's patch seems to be gone, I'm pinging him too), with tests.
Can you hold on cloing this for a bit?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I do need this functionality, and I had already started
monkey-patching it as a proof of concept.&lt;br&gt;
I will look at cleaning up the original patch (Di Marcello's patch
seems to be gone, I'm pinging him too), with tests.&lt;br&gt;
Can you hold on cloing this for a bit?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-05T22:50:19+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2010-01-05T22:50:25+00:00</updated-at>
      <user-id type="integer">81551</user-id>
      <version type="integer">19</version>
      <user-name>Andrea Campi</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Hi, a few months ago I made a plugin for this, I've been using it since then to satisfaction in a real live app.

I've just uploaded this plugin, see:

http://github.com/lawrencepit/autosave_habtm

There a few rspecs in the spec/lib directory. Always intended to integrate this in rails, just never seem to get around it ;[</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi, a few months ago I made a plugin for this, I've been using
it since then to satisfaction in a real live app.&lt;/p&gt;
&lt;p&gt;I've just uploaded this plugin, see:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/lawrencepit/autosave_habtm&quot;&gt;http://github.com/lawrencepit/autosave_habtm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There a few rspecs in the spec/lib directory. Always intended to
integrate this in rails, just never seem to get around it ;[&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-05T23:19:04+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2010-01-05T23:19:08+00:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">20</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>fyi: I'm going to pursue this via various new tickets. First step is done, which allows linking/unlinking of records from a habtm assocation using :autosave =&gt; true. See:

https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/4521-habtm-ability-to-link-and-unlink-records-with-autosave-true</body>
      <body-html>&lt;div&gt;&lt;p&gt;fyi: I'm going to pursue this via various new tickets. First
step is done, which allows linking/unlinking of records from a
habtm assocation using :autosave =&amp;gt; true. See:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/4521-habtm-ability-to-link-and-unlink-records-with-autosave-true&quot;&gt;
https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-05-02T10:22:21+01:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2036</number>
      <permalink>autosave-unclear-for-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag nil="true"></tag>
      <title>Linking and unlinking via accepts_nested_attributes_for</title>
      <updated-at type="datetime">2010-05-02T10:23:10+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">21</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2036</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>827cad541fb8c11a192b5f1e8c48c785337ba8bc</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-23T01:43:18+00:00</created-at>
      <filename>unlink.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">91676</id>
      <size type="integer">2930</size>
      <uploader-id type="integer">20836</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/91676/unlink.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>4f253afb01e5b56b084fbf205e71db74bd5fccd9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-24T00:33:38+00:00</created-at>
      <filename>unlink.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">92141</id>
      <size type="integer">12784</size>
      <uploader-id type="integer">20836</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/92141/unlink.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>3447a540084f08fc8d5920023a61d24898c69bfc</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-24T13:25:07+00:00</created-at>
      <filename>unlink.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">92291</id>
      <size type="integer">10566</size>
      <uploader-id type="integer">20836</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/92291/unlink.diff</url>
    </attachment>
  </attachments>
</ticket>
