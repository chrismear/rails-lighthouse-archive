<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">12714</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-02T06:40:53+00:00</created-at>
  <creator-id type="integer">72576</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">4140</number>
  <permalink>action-caching-with-caches_action-and-layout-false</permalink>
  <priority type="integer">2</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>caches_action rails3</tag>
  <title>Action Caching with caches_action and :layout =&gt; false</title>
  <updated-at type="datetime">2010-12-02T06:40:53+00:00</updated-at>
  <user-id type="integer">43632</user-id>
  <version type="integer">10</version>
  <user-name>Nico</user-name>
  <creator-name>Pete Taylor</creator-name>
  <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Medium</priority-name>
  <original-body>I've had trouble with action caching, and I've debugged it down to a line in actionpack/lib/action_controller/caching/actions.rb  

on line  127 starts a method as follows:

@@@ ruby
    def cache_layout\?
      @options[:layout] == false
    end
@@@

My class caches_action method looks like this:

@@@ ruby
    caches_action :index, :expires_in =&gt; 6.hours, :cache_path =&gt; Proc.new {|controller| controller.send(:generate_cache_path) }, :layout =&gt; false

@@@

This, to me, would indicate that we don't want to cache the layout, only the action.  But by checking @options[:layout] == false in the cache_layout? method, then when layout is set to false, the method itself will return true, saying that you *should* cache the layout.

That seems like a bug to me.  For now, I've just changed my layout line to :layout =&gt; true, and it seems to work, but that's obviously counter-intuitive, and causes :layout =&gt; true to be passed to the render action for the controller method call.

For reference, the cache_layout? method gets called here:

@@@ ruby
    def after(controller)
      return if controller.rendered_action_cache || !caching_allowed(controller)
      action_content = cache_layout? ? content_for_layout(controller) : controller.response.body
      controller.write_fragment(controller.action_cache_path.path, action_content, @options[:store_options])
    end
@@@

I know I should include a test, but honestly I'm not sure if it's a bug, or if I'm simply misunderstanding how it should work.

Thanks!</original-body>
  <latest-body>I've had trouble with action caching, and I've debugged it down to a line in actionpack/lib/action_controller/caching/actions.rb  

on line  127 starts a method as follows:

@@@ ruby
    def cache_layout\?
      @options[:layout] == false
    end
@@@

My class caches_action method looks like this:

@@@ ruby
    caches_action :index, :expires_in =&gt; 6.hours, :cache_path =&gt; Proc.new {|controller| controller.send(:generate_cache_path) }, :layout =&gt; false

@@@

This, to me, would indicate that we don't want to cache the layout, only the action.  But by checking @options[:layout] == false in the cache_layout? method, then when layout is set to false, the method itself will return true, saying that you *should* cache the layout.

That seems like a bug to me.  For now, I've just changed my layout line to :layout =&gt; true, and it seems to work, but that's obviously counter-intuitive, and causes :layout =&gt; true to be passed to the render action for the controller method call.

For reference, the cache_layout? method gets called here:

@@@ ruby
    def after(controller)
      return if controller.rendered_action_cache || !caching_allowed(controller)
      action_content = cache_layout? ? content_for_layout(controller) : controller.response.body
      controller.write_fragment(controller.action_cache_path.path, action_content, @options[:store_options])
    end
@@@

I know I should include a test, but honestly I'm not sure if it's a bug, or if I'm simply misunderstanding how it should work.

Thanks!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I've had trouble with action caching, and I've debugged it down
to a line in
actionpack/lib/action_controller/caching/actions.rb&lt;br&gt;&lt;/p&gt;
&lt;p&gt;on line 127 starts a method as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    def cache_layout\?
      @options[:layout] == false
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My class caches_action method looks like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    caches_action :index, :expires_in =&amp;gt; 6.hours, :cache_path =&amp;gt; Proc.new {|controller| controller.send(:generate_cache_path) }, :layout =&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This, to me, would indicate that we don't want to cache the
layout, only the action. But by checking @options[:layout] == false
in the cache_layout? method, then when layout is set to false, the
method itself will return true, saying that you &lt;em&gt;should&lt;/em&gt;
cache the layout.&lt;/p&gt;
&lt;p&gt;That seems like a bug to me. For now, I've just changed my
layout line to :layout =&amp;gt; true, and it seems to work, but that's
obviously counter-intuitive, and causes :layout =&amp;gt; true to be
passed to the render action for the controller method call.&lt;/p&gt;
&lt;p&gt;For reference, the cache_layout? method gets called here:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    def after(controller)
      return if controller.rendered_action_cache || !caching_allowed(controller)
      action_content = cache_layout? ? content_for_layout(controller) : controller.response.body
      controller.write_fragment(controller.action_cache_path.path, action_content, @options[:store_options])
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I know I should include a test, but honestly I'm not sure if
it's a bug, or if I'm simply misunderstanding how it should
work.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've had trouble with action caching, and I've debugged it down to a line in actionpack/lib/action_controller/caching/actions.rb  

on line  127 starts a method as follows:

@@@ ruby
    def cache_layout\?
      @options[:layout] == false
    end
@@@

My class caches_action method looks like this:

@@@ ruby
    caches_action :index, :expires_in =&gt; 6.hours, :cache_path =&gt; Proc.new {|controller| controller.send(:generate_cache_path) }, :layout =&gt; false

@@@

This, to me, would indicate that we don't want to cache the layout, only the action.  But by checking @options[:layout] == false in the cache_layout? method, then when layout is set to false, the method itself will return true, saying that you *should* cache the layout.

That seems like a bug to me.  For now, I've just changed my layout line to :layout =&gt; true, and it seems to work, but that's obviously counter-intuitive, and causes :layout =&gt; true to be passed to the render action for the controller method call.

For reference, the cache_layout? method gets called here:

@@@ ruby
    def after(controller)
      return if controller.rendered_action_cache || !caching_allowed(controller)
      action_content = cache_layout? ? content_for_layout(controller) : controller.response.body
      controller.write_fragment(controller.action_cache_path.path, action_content, @options[:store_options])
    end
@@@

I know I should include a test, but honestly I'm not sure if it's a bug, or if I'm simply misunderstanding how it should work.

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've had trouble with action caching, and I've debugged it down
to a line in
actionpack/lib/action_controller/caching/actions.rb&lt;br&gt;&lt;/p&gt;
&lt;p&gt;on line 127 starts a method as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    def cache_layout\?
      @options[:layout] == false
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My class caches_action method looks like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    caches_action :index, :expires_in =&amp;gt; 6.hours, :cache_path =&amp;gt; Proc.new {|controller| controller.send(:generate_cache_path) }, :layout =&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This, to me, would indicate that we don't want to cache the
layout, only the action. But by checking @options[:layout] == false
in the cache_layout? method, then when layout is set to false, the
method itself will return true, saying that you &lt;em&gt;should&lt;/em&gt;
cache the layout.&lt;/p&gt;
&lt;p&gt;That seems like a bug to me. For now, I've just changed my
layout line to :layout =&amp;gt; true, and it seems to work, but that's
obviously counter-intuitive, and causes :layout =&amp;gt; true to be
passed to the render action for the controller method call.&lt;/p&gt;
&lt;p&gt;For reference, the cache_layout? method gets called here:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    def after(controller)
      return if controller.rendered_action_cache || !caching_allowed(controller)
      action_content = cache_layout? ? content_for_layout(controller) : controller.response.body
      controller.write_fragment(controller.action_cache_path.path, action_content, @options[:store_options])
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I know I should include a test, but honestly I'm not sure if
it's a bug, or if I'm simply misunderstanding how it should
work.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-10T07:44:26+00:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>caches_action</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-03-10T07:44:28+00:00</updated-at>
      <user-id type="integer">72576</user-id>
      <version type="integer">1</version>
      <user-name>Pete Taylor</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Pete.

The short story is that it's not a bug, it's just named counter-intuitively.  Read on if you would like the &quot;long story&quot;.  :)

I've been looking at this file for the past week or so, working on adding support for caching content_for stuff when you do caches_action.

I've been working in the 3.0b1 branch of rails, so I think it's a teensy bit different than what you're looking at, but I was tripped up by the exact same handling of the layout boolean (though there is no longer a &quot;`cache_layout?`&quot; method).  I think the method may have been taken out because it was misleadingly named, and the implementation was so short it didn't really deserve its own method.  I'm guessing the thinking that led to &quot;`options[:layout] == false`&quot; being used is that that value is used when it renders from cache (`render :text =&gt; cached, :layout =&gt; options[:layout]==false`).

Anyway what I've found is that this works properly, it's simply named strangely.  Keep in mind that if you want to cache your action but not your entire layout, then you can't use content_for anywhere in that action or template (yet! ;).

Keep in mind that content_for_layout(controller) returns just that rendered template, but controller.response.body returns the entire rendered layout (everything from `&lt;html&gt;` to `&lt;/html&gt;`).

Hopefully this helps.  I know it's confusing.  Just believe me when I say it works, but it's named counter-intuitively.

-Steve</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Pete.&lt;/p&gt;
&lt;p&gt;The short story is that it's not a bug, it's just named
counter-intuitively. Read on if you would like the &quot;long story&quot;.
:)&lt;/p&gt;
&lt;p&gt;I've been looking at this file for the past week or so, working
on adding support for caching content_for stuff when you do
caches_action.&lt;/p&gt;
&lt;p&gt;I've been working in the 3.0b1 branch of rails, so I think it's
a teensy bit different than what you're looking at, but I was
tripped up by the exact same handling of the layout boolean (though
there is no longer a &quot;&lt;code&gt;cache_layout?&lt;/code&gt;&quot; method). I think
the method may have been taken out because it was misleadingly
named, and the implementation was so short it didn't really deserve
its own method. I'm guessing the thinking that led to
&quot;&lt;code&gt;options[:layout] == false&lt;/code&gt;&quot; being used is that that
value is used when it renders from cache (&lt;code&gt;render :text =&amp;gt;
cached, :layout =&amp;gt; options[:layout]==false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Anyway what I've found is that this works properly, it's simply
named strangely. Keep in mind that if you want to cache your action
but not your entire layout, then you can't use content_for anywhere
in that action or template (yet! ;).&lt;/p&gt;
&lt;p&gt;Keep in mind that content_for_layout(controller) returns just
that rendered template, but controller.response.body returns the
entire rendered layout (everything from &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;
to &lt;code&gt;&amp;lt;/html&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Hopefully this helps. I know it's confusing. Just believe me
when I say it works, but it's named counter-intuitively.&lt;/p&gt;
&lt;p&gt;-Steve&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-17T07:39:08+00:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>caches_action</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-03-17T07:39:11+00:00</updated-at>
      <user-id type="integer">50328</user-id>
      <version type="integer">2</version>
      <user-name>Steve</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Steve, thanks for the response!  Sorry for filing a bogus ticket, the behavior I was seeing must be related to something dumb I'm doing.  Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Steve, thanks for the response! Sorry for filing a bogus ticket,
the behavior I was seeing must be related to something dumb I'm
doing. Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-17T16:40:03+00:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>caches_action</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-03-17T16:40:04+00:00</updated-at>
      <user-id type="integer">72576</user-id>
      <version type="integer">3</version>
      <user-name>Pete Taylor</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-27T08:44:32+00:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: caches_action
:state: new
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>caches_action rails3</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-03-27T08:44:37+00:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">4</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This naming actually tripped ME up a bunch of times recently. We tried to rename some of the variables to make it clearer. We also changed how it works internally so that the layout is always applied in the same context, regardless of whether it's the first call to the method or a cached call.

@@@ ruby
body = controller.render_to_string(:text =&gt; cache, :layout =&gt; true) unless @cache_layout
@@@

Here, we're taking the text out of the cache, and then rendering the text in the context of the layout *only if @cache_layout is false*. That's because if the layout *was* cached, we wouldn't need to apply the layout (it would already be in the cached content).</body>
      <body-html>&lt;div&gt;&lt;p&gt;This naming actually tripped ME up a bunch of times recently. We
tried to rename some of the variables to make it clearer. We also
changed how it works internally so that the layout is always
applied in the same context, regardless of whether it's the first
call to the method or a cached call.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;body = controller.render_to_string(:text =&amp;gt; cache, :layout =&amp;gt; true) unless @cache_layout&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here, we're taking the text out of the cache, and then rendering
the text in the context of the layout &lt;em&gt;only if @cache_layout is
false&lt;/em&gt;. That's because if the layout &lt;em&gt;was&lt;/em&gt; cached, we
wouldn't need to apply the layout (it would already be in the
cached content).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-29T02:11:48+01:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>caches_action rails3</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-03-29T02:11:49+01:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">5</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks for taking a look!  (wycats read my ticket, OMG ;) ).

Seriously, thanks, I think the behavior I was experiencing in my app was due to something dumb I was doing, and I incorrectly tracked it to this.  Thanks for the input!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for taking a look! (wycats read my ticket, OMG ;) ).&lt;/p&gt;
&lt;p&gt;Seriously, thanks, I think the behavior I was experiencing in my
app was due to something dumb I was doing, and I incorrectly
tracked it to this. Thanks for the input!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-29T02:49:14+01:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>caches_action rails3</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-03-29T02:49:15+01:00</updated-at>
      <user-id type="integer">72576</user-id>
      <version type="integer">6</version>
      <user-name>Pete Taylor</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:47+01:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>caches_action rails3</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-10-15T23:01:47+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">7</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I also have some trouble with this. Action caching without the layout parameter works fine.
But as soon as I add layout =&gt; false I get problems:
Normal get requests are cached fine, without the layout, as expected. But Ajax requests
are not properly cached: I get cache misses all the time. Then, when I log in to my app 
neither normal, nor ajax requests are cached at all.

I also tried to set :layout =&gt; Proc.new { |c| c.request.xhr? } 

When I do that ajax and normal requests are properly cached (no matter if logged out or logged in)
but normal requests also cache the layout. Seems odd to me as normal requests should have :layout =&gt; false.

I'm trying to debug this for hours now, but I haven't got a clue what's going on so far. What especially trips me up
is that the logged in state of my app has an influence on the caching behaviour.

Here is my full caching call (for the case of layout =&gt; false):

caches_action :index, :cache_path =&gt; Proc.new { |c| c.params.clone.delete_if { |k,v| ['authenticity_token'].include?(k) }.merge(:xhr =&gt; c.request.xhr? ? 't' : 'f') }, :layout =&gt; false

I'd greatly appreciate any help on this! I'm using Rails 2.3.8 on Heroku with Memcached (via Dalli Gem).</body>
      <body-html>&lt;div&gt;&lt;p&gt;I also have some trouble with this. Action caching without the
layout parameter works fine.&lt;br&gt;
But as soon as I add layout =&amp;gt; false I get problems:&lt;br&gt;
Normal get requests are cached fine, without the layout, as
expected. But Ajax requests&lt;br&gt;
are not properly cached: I get cache misses all the time. Then,
when I log in to my app&lt;br&gt;
neither normal, nor ajax requests are cached at all.&lt;/p&gt;
&lt;p&gt;I also tried to set :layout =&amp;gt; Proc.new { |c| c.request.xhr?
}&lt;/p&gt;
&lt;p&gt;When I do that ajax and normal requests are properly cached (no
matter if logged out or logged in)&lt;br&gt;
but normal requests also cache the layout. Seems odd to me as
normal requests should have :layout =&amp;gt; false.&lt;/p&gt;
&lt;p&gt;I'm trying to debug this for hours now, but I haven't got a clue
what's going on so far. What especially trips me up&lt;br&gt;
is that the logged in state of my app has an influence on the
caching behaviour.&lt;/p&gt;
&lt;p&gt;Here is my full caching call (for the case of layout =&amp;gt;
false):&lt;/p&gt;
&lt;p&gt;caches_action :index, :cache_path =&amp;gt; Proc.new { |c|
c.params.clone.delete_if { |k,v| ['authenticity_token'].include?(k)
}.merge(:xhr =&amp;gt; c.request.xhr? ? 't' : 'f') }, :layout =&amp;gt;
false&lt;/p&gt;
&lt;p&gt;I'd greatly appreciate any help on this! I'm using Rails 2.3.8
on Heroku with Memcached (via Dalli Gem).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-26T21:23:27+00:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>caches_action rails3</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-11-26T21:23:28+00:00</updated-at>
      <user-id type="integer">43632</user-id>
      <version type="integer">8</version>
      <user-name>Nico</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Okay, I debugged a bit more and found out what the problem is
(at least when locally in development environment). Inside the action cache content_for_layout
is called to get the content to be cached if layout is set to false. This causes
my ajax requests to be not cached because content_for_layout returns nil as
I don't render the layout with ajax calls, only a partial. So I do need to set
layout to true for ajax calls. However I can't do that the way I tried to, as
the layout param doesn't accept a Proc. So I overwrote part of the ActionCacheFilter class
to test the layout for a call method and call it if present. That works great locally!
However, in production on Heroku with Memcached it still won't work properly.
Ajax calls are not cached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Okay, I debugged a bit more and found out what the problem
is&lt;br&gt;
(at least when locally in development environment). Inside the
action cache content_for_layout is called to get the content to be
cached if layout is set to false. This causes&lt;br&gt;
my ajax requests to be not cached because content_for_layout
returns nil as&lt;br&gt;
I don't render the layout with ajax calls, only a partial. So I do
need to set&lt;br&gt;
layout to true for ajax calls. However I can't do that the way I
tried to, as&lt;br&gt;
the layout param doesn't accept a Proc. So I overwrote part of the
ActionCacheFilter class&lt;br&gt;
to test the layout for a call method and call it if present. That
works great locally!&lt;br&gt;
However, in production on Heroku with Memcached it still won't work
properly.&lt;br&gt;
Ajax calls are not cached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-30T20:58:53+00:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>caches_action rails3</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-11-30T20:58:58+00:00</updated-at>
      <user-id type="integer">43632</user-id>
      <version type="integer">9</version>
      <user-name>Nico</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Okay, works fine now! I slightly changed the way I overwrote the ActionCacheFilter.

Possibly you can take these findings into account in future versions of action cache.
I think my use case is rather common (Having an action that needs to be cached without layout and 
ajax calls to that action that need to be cached as well).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Okay, works fine now! I slightly changed the way I overwrote the
ActionCacheFilter.&lt;/p&gt;
&lt;p&gt;Possibly you can take these findings into account in future
versions of action cache.&lt;br&gt;
I think my use case is rather common (Having an action that needs
to be cached without layout and&lt;br&gt;
ajax calls to that action that need to be cached as well).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-01T08:26:44+00:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>caches_action rails3</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-12-01T08:26:51+00:00</updated-at>
      <user-id type="integer">43632</user-id>
      <version type="integer">10</version>
      <user-name>Nico</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A thousand-li journey is started by taking the first step.Strength alone knows conflict, weakness is below even defeat, and is born vanquished. It's an &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Cardy-Boots-5819/Womens-UGG-Classic-Cardy-Boots-Black.html&quot;&gt;ugg classic cardy tall&lt;/A&gt; article by Tom Reese in yesterday's Pacific Northwest Magazine about the Lake Washington wetlands near Seattle's Arboretum. I actually found myself &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Cardy-Boots-5819/Womens-UGG-Classic-Cardy-Boots-Charcoal.html&quot;&gt;ugg boots classic cardy gray&lt;/A&gt; strangely upset by the article. Not only because he's describing a place I've loved for &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Bailey-Button-Boots-5803.html&quot;&gt;ugg boots&lt;/A&gt; years, but because he so carefully describes the &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Bailey-Button-Boots-5803.html&quot;&gt;official ugg boots&lt;/A&gt; contingency of the natural environment there.Reese takes the &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Bailey-Button-Boots-5803.html&quot;&gt;bailey ugg boots uk&lt;/A&gt; pied-billed grebe as his touchstone, which is a good choice. If you know where to look, you can find the grebe's nest &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Argyle-Knit-Boots-5879/UGG-Classic-Argyle-Knit-Boots-Charcoal.html&quot;&gt;classic argyle uggs&lt;/A&gt; resting on the lily pads. It's exposed. It trusts to camoflauge to avoid disturbance. And the &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Argyle-Knit-Boots-5879/UGG-Classic-Argyle-Knit-Boots-Black.html&quot;&gt;argyle ugg boots uk&lt;/A&gt; grebes there always make me worry because they're so small and tentative, with &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Mini-Boots-5854/Womens-UGG-Classic-Mini-Boots-Black.html&quot;&gt;ugg boots shop&lt;/A&gt; so little to defend themselves. They're the perfect metaphor for our &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Mini-Boots-5854/Womens-UGG-Classic-Mini-Boots-Cobalt.html&quot;&gt;mini ugg boots&lt;/A&gt; stewardship of the natural refuges in our cities.Plus, the seventeen photos that &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Mini-Boots-5854/Womens-UGG-Classic-Mini-Boots-Cobalt.html&quot;&gt;mini ugg boots on sale&lt;/A&gt; accompany the article online are also astonishingly good. Much better than ordinary &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Ultra-Tall-Boots-5245/Womens-UGG-Ultra-Tall-Boots-Chestnut.html&quot;&gt;uggs ultra boots on sale&lt;/A&gt; newspaper shots. But you should go see for yourself.In this article, the good Vietnamese monk tells the story of counseling  a young Buddhist woman who had fallen in love with a Catholic man, and  was distraught because his family was insisting that she become a  Catholic in &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Ultra-Tall-Boots-5245/Womens-UGG-Ultra-Tall-Boots-Chocolate.html&quot;&gt;ultra tall uggs&lt;/A&gt; order to marry him. After speaking with her, Thich Nhat  Hanh basically gave his &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Tall-Boots/UGG-Womens-Classic-Tall-5163-Purple.html&quot;&gt;ugg classic tall purple&lt;/A&gt; blessing for her to enter the church,  suggesting that if she continued &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Tall-Boots/UGG-Womens-Classic-Tall-5815-Jester-Red.html&quot;&gt;ugg tall red&lt;/A&gt; to do mindfulness work, she could be a  Buddhist on the &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Short-Boots.html&quot;&gt;ugg boots cheap&lt;/A&gt; inside, even while practicing Catholicism. She thought  it over, and her reply is worth considering, as she &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Short-Boots/UGG-Womens-Classic-Short-Black-Boots.html&quot;&gt;short black uggs&lt;/A&gt; weighs the merits  of the two faiths: &#8220;[Buddhism is] a tradition that is so embracing, so  &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Short-Boots/UGG-Womens-Classic-Short-Chocolate-Boots.html&quot;&gt;discount ugg boots classic short&lt;/A&gt; tolerant, so open, if I abandon it and turn my back to it, I am not a  person of value. [By contrast, Catholicism is] a tradition &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Sundance-II-Boots-5325/UGG-Sundance-II-Boots-Sand.html&quot;&gt;sundance uggs on sale&lt;/A&gt; that is so  strict, that has no tolerance, that is not able to understand, how  could I formally identify myself&lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Sundance-II-Boots-5325/UGG-Sundance-II-Boots-Sand.html&quot;&gt; sundance uggs sand&lt;/A&gt; with it?&#8221;  ZHC</body>
      <body-html>&lt;div&gt;&lt;p&gt;A thousand-li journey is started by taking the first
step.Strength alone knows conflict, weakness is below even defeat,
and is born vanquished. It's an &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Cardy-Boots-5819/Womens-UGG-Classic-Cardy-Boots-Black.html&quot;&gt;
ugg classic cardy tall&lt;/a&gt; article by Tom Reese in yesterday's
Pacific Northwest Magazine about the Lake Washington wetlands near
Seattle's Arboretum. I actually found myself &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Cardy-Boots-5819/Womens-UGG-Classic-Cardy-Boots-Charcoal.html&quot;&gt;
ugg boots classic cardy gray&lt;/a&gt; strangely upset by the article.
Not only because he's describing a place I've loved for &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Bailey-Button-Boots-5803.html&quot;&gt;ugg
boots&lt;/a&gt; years, but because he so carefully describes the &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Bailey-Button-Boots-5803.html&quot;&gt;official
ugg boots&lt;/a&gt; contingency of the natural environment there.Reese
takes the &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Bailey-Button-Boots-5803.html&quot;&gt;bailey
ugg boots uk&lt;/a&gt; pied-billed grebe as his touchstone, which is a
good choice. If you know where to look, you can find the grebe's
nest &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Argyle-Knit-Boots-5879/UGG-Classic-Argyle-Knit-Boots-Charcoal.html&quot;&gt;
classic argyle uggs&lt;/a&gt; resting on the lily pads. It's exposed. It
trusts to camoflauge to avoid disturbance. And the &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Argyle-Knit-Boots-5879/UGG-Classic-Argyle-Knit-Boots-Black.html&quot;&gt;
argyle ugg boots uk&lt;/a&gt; grebes there always make me worry because
they're so small and tentative, with &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Mini-Boots-5854/Womens-UGG-Classic-Mini-Boots-Black.html&quot;&gt;
ugg boots shop&lt;/a&gt; so little to defend themselves. They're the
perfect metaphor for our &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Mini-Boots-5854/Womens-UGG-Classic-Mini-Boots-Cobalt.html&quot;&gt;
mini ugg boots&lt;/a&gt; stewardship of the natural refuges in our
cities.Plus, the seventeen photos that &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Mini-Boots-5854/Womens-UGG-Classic-Mini-Boots-Cobalt.html&quot;&gt;
mini ugg boots on sale&lt;/a&gt; accompany the article online are also
astonishingly good. Much better than ordinary &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Ultra-Tall-Boots-5245/Womens-UGG-Ultra-Tall-Boots-Chestnut.html&quot;&gt;
uggs ultra boots on sale&lt;/a&gt; newspaper shots. But you should go see
for yourself.In this article, the good Vietnamese monk tells the
story of counseling a young Buddhist woman who had fallen in love
with a Catholic man, and was distraught because his family was
insisting that she become a Catholic in &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Ultra-Tall-Boots-5245/Womens-UGG-Ultra-Tall-Boots-Chocolate.html&quot;&gt;
ultra tall uggs&lt;/a&gt; order to marry him. After speaking with her,
Thich Nhat Hanh basically gave his &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Tall-Boots/UGG-Womens-Classic-Tall-5163-Purple.html&quot;&gt;
ugg classic tall purple&lt;/a&gt; blessing for her to enter the church,
suggesting that if she continued &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Tall-Boots/UGG-Womens-Classic-Tall-5815-Jester-Red.html&quot;&gt;
ugg tall red&lt;/a&gt; to do mindfulness work, she could be a Buddhist on
the &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Short-Boots.html&quot;&gt;ugg
boots cheap&lt;/a&gt; inside, even while practicing Catholicism. She
thought it over, and her reply is worth considering, as she
&lt;a href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Short-Boots/UGG-Womens-Classic-Short-Black-Boots.html&quot;&gt;
short black uggs&lt;/a&gt; weighs the merits of the two faiths:
&amp;#8220;[Buddhism is] a tradition that is so embracing, so &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Short-Boots/UGG-Womens-Classic-Short-Chocolate-Boots.html&quot;&gt;
discount ugg boots classic short&lt;/a&gt; tolerant, so open, if I
abandon it and turn my back to it, I am not a person of value. [By
contrast, Catholicism is] a tradition &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Sundance-II-Boots-5325/UGG-Sundance-II-Boots-Sand.html&quot;&gt;
sundance uggs on sale&lt;/a&gt; that is so strict, that has no tolerance,
that is not able to understand, how could I formally identify
myself &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Sundance-II-Boots-5325/UGG-Sundance-II-Boots-Sand.html&quot;&gt;
sundance uggs sand&lt;/a&gt; with it?&amp;#8221; ZHC&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-02T03:14:02+00:00</created-at>
      <creator-id type="integer">72576</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4140</number>
      <permalink>action-caching-with-caches_action-and-layout-false</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>caches_action rails3</tag>
      <title>Action Caching with caches_action and :layout =&gt; false</title>
      <updated-at type="datetime">2010-12-02T06:40:53+00:00</updated-at>
      <user-id type="integer">127490</user-id>
      <version type="integer">11</version>
      <user-name>ugg classic cardy tall</user-name>
      <creator-name>Pete Taylor</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4140</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
  </versions>
</ticket>
