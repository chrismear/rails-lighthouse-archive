From e4db6054d860dc449f72a117e43143e4c1f50278 Mon Sep 17 00:00:00 2001
From: Stefan Kaes <stkaes@googlemail.com>
Date: Tue, 15 Jul 2008 20:55:14 +0200
Subject: [PATCH] changed observers to not add after_find method on the observed class; fixes [#625 state:resolved]

---
 activerecord/lib/active_record/observer.rb |    9 ++++-----
 activerecord/test/cases/lifecycle_test.rb  |   12 ++++++++++--
 2 files changed, 14 insertions(+), 7 deletions(-)

diff --git a/activerecord/lib/active_record/observer.rb b/activerecord/lib/active_record/observer.rb
index 25e0e61..c96e5f9 100644
--- a/activerecord/lib/active_record/observer.rb
+++ b/activerecord/lib/active_record/observer.rb
@@ -20,7 +20,7 @@ module ActiveRecord
       #   ActiveRecord::Base.observers = Cacher, GarbageCollector
       #
       # Note: Setting this does not instantiate the observers yet. +instantiate_observers+ is
-      # called during startup, and before each development request.  
+      # called during startup, and before each development request.
       def observers=(*observers)
         @observers = observers.flatten
       end
@@ -130,11 +130,11 @@ module ActiveRecord
   # Observers register themselves in the model class they observe, since it is the class that
   # notifies them of events when they occur. As a side-effect, when an observer is loaded its
   # corresponding model class is loaded.
-  # 
+  #
   # Up to (and including) Rails 2.0.2 observers were instantiated between plugins and
-  # application initializers. Now observers are loaded after application initializers, 
+  # application initializers. Now observers are loaded after application initializers,
   # so observed models can make use of extensions.
-  # 
+  #
   # If by any chance you are using observed models in the initialization you can still
   # load their observers by calling <tt>ModelObserver.instance</tt> before. Observers are
   # singletons and that call instantiates and registers them.
@@ -189,7 +189,6 @@ module ActiveRecord
 
       def add_observer!(klass)
         klass.add_observer(self)
-        klass.class_eval 'def after_find() end' unless klass.method_defined?(:after_find)
       end
   end
 end
diff --git a/activerecord/test/cases/lifecycle_test.rb b/activerecord/test/cases/lifecycle_test.rb
index 258f7c7..3432abe 100755
--- a/activerecord/test/cases/lifecycle_test.rb
+++ b/activerecord/test/cases/lifecycle_test.rb
@@ -143,12 +143,20 @@ class LifecycleTest < ActiveRecord::TestCase
     assert_equal developer.name, multi_observer.record.name
   end
 
-  def test_observing_after_find_when_not_defined_on_the_model
+  def test_after_find_cannot_be_observed_when_its_not_defined_on_the_model
     observer = MinimalisticObserver.instance
     assert_equal Minimalistic, MinimalisticObserver.observed_class
 
     minimalistic = Minimalistic.find(1)
-    assert_equal minimalistic, observer.minimalistic
+    assert_nil observer.minimalistic
+  end
+
+  def test_after_find_can_be_observed_when_its_defined_on_the_model
+    observer = TopicObserver.instance
+    assert_equal Topic, TopicObserver.observed_class
+
+    topic = Topic.find(1)
+    assert_equal topic, observer.topic
   end
 
   def test_invalid_observer
-- 
1.5.4.3

