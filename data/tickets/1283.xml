<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-28T08:38:21+00:00</created-at>
  <creator-id type="integer">22013</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">1283</number>
  <permalink>storing-query-cache-in-threadcurrent-breaks-when-multiple-dbs-are-used</permalink>
  <priority type="integer">18</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord cache patch query</tag>
  <title>Storing query cache in Thread.current breaks when multiple DBs are used</title>
  <updated-at type="datetime">2008-10-30T20:48:36+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">4</version>
  <user-name>Repository</user-name>
  <creator-name>sds</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1283</url>
  <priority-name nil="true"></priority-name>
  <original-body>We use rails with multiple databases.  Some models come from one database, and some from another.  We use establish_connection to make sure the models are connected correctly.  (Using the use_db plugin.)

Consider the following code from my unit tests:

@@@
def test_database
  User.cache do
    assert_equal &quot;database1_test&quot;, User.connection.current_database, &quot;db must be correct&quot;
    assert_equal &quot;database2_test&quot;, Product.connection.current_database, &quot;db must be correct&quot;
  end
end
@@@

This fails in 2.2 because the query cache is not stored on a per connection basis.

User.cache sets Thread.current['query_cache_enabled'] to true for the block.

Then because the query cache is stored in Thread.current['query_cache'] and because the two queries are the same (SELECT DATABASE() as db) the second call to connection.current_database returns the wrong result.

Perhaps this could be fixed by adding the database name to the key used, like this in active_record/connection_adapters/abstract/query_cache.rb:

@@@
      def query_cache
        Thread.current[&quot;query_cache_#{@config[:database]}&quot;] ||= {}
      end

      def query_cache=(cache)
        Thread.current[&quot;query_cache_#{@config[:database]}&quot;] = cache
      end
@@@

With this patch tests pass (and my real code now works).

This isn't quite perfect though - we have to add the ||= assignment to query_cache because calling User.cache only initialises the hash for the db associated with the User model.

Anyone have a better idea?</original-body>
  <latest-body>We use rails with multiple databases.  Some models come from one database, and some from another.  We use establish_connection to make sure the models are connected correctly.  (Using the use_db plugin.)

Consider the following code from my unit tests:

@@@
def test_database
  User.cache do
    assert_equal &quot;database1_test&quot;, User.connection.current_database, &quot;db must be correct&quot;
    assert_equal &quot;database2_test&quot;, Product.connection.current_database, &quot;db must be correct&quot;
  end
end
@@@

This fails in 2.2 because the query cache is not stored on a per connection basis.

User.cache sets Thread.current['query_cache_enabled'] to true for the block.

Then because the query cache is stored in Thread.current['query_cache'] and because the two queries are the same (SELECT DATABASE() as db) the second call to connection.current_database returns the wrong result.

Perhaps this could be fixed by adding the database name to the key used, like this in active_record/connection_adapters/abstract/query_cache.rb:

@@@
      def query_cache
        Thread.current[&quot;query_cache_#{@config[:database]}&quot;] ||= {}
      end

      def query_cache=(cache)
        Thread.current[&quot;query_cache_#{@config[:database]}&quot;] = cache
      end
@@@

With this patch tests pass (and my real code now works).

This isn't quite perfect though - we have to add the ||= assignment to query_cache because calling User.cache only initialises the hash for the db associated with the User model.

Anyone have a better idea?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;We use rails with multiple databases. Some models come from one
database, and some from another. We use establish_connection to
make sure the models are connected correctly. (Using the use_db
plugin.)&lt;/p&gt;
&lt;p&gt;Consider the following code from my unit tests:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
def test_database
  User.cache do
    assert_equal &amp;quot;database1_test&amp;quot;, User.connection.current_database, &amp;quot;db must be correct&amp;quot;
    assert_equal &amp;quot;database2_test&amp;quot;, Product.connection.current_database, &amp;quot;db must be correct&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This fails in 2.2 because the query cache is not stored on a per
connection basis.&lt;/p&gt;
&lt;p&gt;User.cache sets Thread.current['query_cache_enabled'] to true
for the block.&lt;/p&gt;
&lt;p&gt;Then because the query cache is stored in
Thread.current['query_cache'] and because the two queries are the
same (SELECT DATABASE() as db) the second call to
connection.current_database returns the wrong result.&lt;/p&gt;
&lt;p&gt;Perhaps this could be fixed by adding the database name to the
key used, like this in
active_record/connection_adapters/abstract/query_cache.rb:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
      def query_cache
        Thread.current[&amp;quot;query_cache_#{@config[:database]}&amp;quot;] ||= {}
      end

      def query_cache=(cache)
        Thread.current[&amp;quot;query_cache_#{@config[:database]}&amp;quot;] = cache
      end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this patch tests pass (and my real code now works).&lt;/p&gt;
&lt;p&gt;This isn't quite perfect though - we have to add the ||=
assignment to query_cache because calling User.cache only
initialises the hash for the db associated with the User model.&lt;/p&gt;
&lt;p&gt;Anyone have a better idea?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We use rails with multiple databases.  Some models come from one database, and some from another.  We use establish_connection to make sure the models are connected correctly.  (Using the use_db plugin.)

Consider the following code from my unit tests:

@@@
def test_database
  User.cache do
    assert_equal &quot;database1_test&quot;, User.connection.current_database, &quot;db must be correct&quot;
    assert_equal &quot;database2_test&quot;, Product.connection.current_database, &quot;db must be correct&quot;
  end
end
@@@

This fails in 2.2 because the query cache is not stored on a per connection basis.

User.cache sets Thread.current['query_cache_enabled'] to true for the block.

Then because the query cache is stored in Thread.current['query_cache'] and because the two queries are the same (SELECT DATABASE() as db) the second call to connection.current_database returns the wrong result.

Perhaps this could be fixed by adding the database name to the key used, like this in active_record/connection_adapters/abstract/query_cache.rb:

@@@
      def query_cache
        Thread.current[&quot;query_cache_#{@config[:database]}&quot;] ||= {}
      end

      def query_cache=(cache)
        Thread.current[&quot;query_cache_#{@config[:database]}&quot;] = cache
      end
@@@

With this patch tests pass (and my real code now works).

This isn't quite perfect though - we have to add the ||= assignment to query_cache because calling User.cache only initialises the hash for the db associated with the User model.

Anyone have a better idea?</body>
      <body-html>&lt;div&gt;&lt;p&gt;We use rails with multiple databases. Some models come from one
database, and some from another. We use establish_connection to
make sure the models are connected correctly. (Using the use_db
plugin.)&lt;/p&gt;
&lt;p&gt;Consider the following code from my unit tests:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
def test_database
  User.cache do
    assert_equal &amp;quot;database1_test&amp;quot;, User.connection.current_database, &amp;quot;db must be correct&amp;quot;
    assert_equal &amp;quot;database2_test&amp;quot;, Product.connection.current_database, &amp;quot;db must be correct&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This fails in 2.2 because the query cache is not stored on a per
connection basis.&lt;/p&gt;
&lt;p&gt;User.cache sets Thread.current['query_cache_enabled'] to true
for the block.&lt;/p&gt;
&lt;p&gt;Then because the query cache is stored in
Thread.current['query_cache'] and because the two queries are the
same (SELECT DATABASE() as db) the second call to
connection.current_database returns the wrong result.&lt;/p&gt;
&lt;p&gt;Perhaps this could be fixed by adding the database name to the
key used, like this in
active_record/connection_adapters/abstract/query_cache.rb:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
      def query_cache
        Thread.current[&amp;quot;query_cache_#{@config[:database]}&amp;quot;] ||= {}
      end

      def query_cache=(cache)
        Thread.current[&amp;quot;query_cache_#{@config[:database]}&amp;quot;] = cache
      end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this patch tests pass (and my real code now works).&lt;/p&gt;
&lt;p&gt;This isn't quite perfect though - we have to add the ||=
assignment to query_cache because calling User.cache only
initialises the hash for the db associated with the User model.&lt;/p&gt;
&lt;p&gt;Anyone have a better idea?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-28T08:38:21+00:00</created-at>
      <creator-id type="integer">22013</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1283</number>
      <permalink>storing-query-cache-in-threadcurrent-breaks-when-multiple-dbs-are-used</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.rc1 activerecord cache query</tag>
      <title>Storing query cache in Thread.current breaks when multiple DBs are used</title>
      <updated-at type="datetime">2008-10-28T08:38:26+00:00</updated-at>
      <user-id type="integer">22013</user-id>
      <version type="integer">1</version>
      <user-name>sds</user-name>
      <creator-name>sds</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1283</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I attach a patch that fixes this along the lines of the above, but slightly improved.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I attach a patch that fixes this along the lines of the above,
but slightly improved.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-28T09:14:01+00:00</created-at>
      <creator-id type="integer">22013</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.2.rc1 activerecord cache query
:title: Storing query cache in Thread.current breaks when multiple DBs are used
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1283</number>
      <permalink>storing-query-cache-in-threadcurrent-breaks-when-multiple-dbs-are-used</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.rc1 activerecord cache patch query</tag>
      <title>[patch] Storing query cache in Thread.current breaks when multiple DBs are used</title>
      <updated-at type="datetime">2008-10-28T09:14:04+00:00</updated-at>
      <user-id type="integer">22013</user-id>
      <version type="integer">2</version>
      <user-name>sds</user-name>
      <creator-name>sds</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1283</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I think the correct fix is to move query cache to connection object.

@Josh : Wanna take a stab at this ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think the correct fix is to move query cache to connection
object.&lt;/p&gt;
&lt;p&gt;@Josh : Wanna take a stab at this ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-29T21:46:25+00:00</created-at>
      <creator-id type="integer">22013</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
:tag: 2.2.rc1 activerecord cache patch query
:assigned_user: 
:title: &quot;[patch] Storing query cache in Thread.current breaks when multiple DBs are used&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1283</number>
      <permalink>storing-query-cache-in-threadcurrent-breaks-when-multiple-dbs-are-used</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord cache patch query</tag>
      <title>Storing query cache in Thread.current breaks when multiple DBs are used</title>
      <updated-at type="datetime">2008-10-29T21:46:26+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>sds</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1283</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [0c84b6f9eda20c30b66d8fb99fba637edc1bc37a]) Use database name in query cache thread local key [#1283 state:resolved]
http://github.com/rails/rails/commit/0c84b6f9eda20c30b66d8fb99fba637edc1bc37a</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [0c84b6f9eda20c30b66d8fb99fba637edc1bc37a]) Use database
name in query cache thread local key [&lt;a href=&quot;/projects/8994/tickets/1283&quot; title=&quot;Ticket #1283&quot;&gt;#1283&lt;/a&gt;
state:resolved] &lt;a href=&quot;http://github.com/rails/rails/commit/0c84b6f9eda20c30b66d8fb99fba637edc1bc37a&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-30T20:48:31+00:00</created-at>
      <creator-id type="integer">22013</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1283</number>
      <permalink>storing-query-cache-in-threadcurrent-breaks-when-multiple-dbs-are-used</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord cache patch query</tag>
      <title>Storing query cache in Thread.current breaks when multiple DBs are used</title>
      <updated-at type="datetime">2008-10-30T20:48:36+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">4</version>
      <user-name>Repository</user-name>
      <creator-name>sds</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1283</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>41508c0ac90e1ccbd22e5437b3daf7137468a238</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-28T09:14:01+00:00</created-at>
      <filename>query_cache.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">57502</id>
      <size type="integer">944</size>
      <uploader-id type="integer">22013</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/57502/query_cache.patch</url>
    </attachment>
  </attachments>
</ticket>
