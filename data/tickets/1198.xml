<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-10T18:32:27+01:00</created-at>
  <creator-id type="integer">7315</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1198</number>
  <permalink>eliminate-need-for-has_many-through-redundancy</permalink>
  <priority type="integer">606</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord has_many_through</tag>
  <title>eliminate need for has_many :through redundancy</title>
  <updated-at type="datetime">2009-01-11T18:20:27+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">3</version>
  <user-name>Pratik</user-name>
  <creator-name>David Chelimsky</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1198</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I'm surprised this is not yet reported/requested, though perhaps it is and I just couldn't find it.

I think that has_many :through should create the :through association if it's not already declared.

Example:

@@@
class User &lt; ActiveRecord::Base
  has_many :memberships
  has_many :groups, :through =&gt; :memberships
end
@@@

Why do I need to declare :memberships twice? Shouldn't this suffice?

@@@
class User &lt; ActiveRecord::Base
  has_many :groups, :through =&gt; :memberships
end
@@@

Even if the memberships association is more complex, this could be wrapped in a hash

@@@
class User &lt; ActiveRecord::Base
  has_many :groups, :through =&gt; {
    :memberships, :dependent =&gt; :destroy
  }
end
@@@

In terms of expressiveness, I can see the value in declaring the join model explicitly *if* that join model has significance, but sometimes join models are only really useful on one side of the join, while on the other side it's just noise.

Thoughts?</original-body>
  <latest-body>I'm surprised this is not yet reported/requested, though perhaps it is and I just couldn't find it.

I think that has_many :through should create the :through association if it's not already declared.

Example:

@@@
class User &lt; ActiveRecord::Base
  has_many :memberships
  has_many :groups, :through =&gt; :memberships
end
@@@

Why do I need to declare :memberships twice? Shouldn't this suffice?

@@@
class User &lt; ActiveRecord::Base
  has_many :groups, :through =&gt; :memberships
end
@@@

Even if the memberships association is more complex, this could be wrapped in a hash

@@@
class User &lt; ActiveRecord::Base
  has_many :groups, :through =&gt; {
    :memberships, :dependent =&gt; :destroy
  }
end
@@@

In terms of expressiveness, I can see the value in declaring the join model explicitly *if* that join model has significance, but sometimes join models are only really useful on one side of the join, while on the other side it's just noise.

Thoughts?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm surprised this is not yet reported/requested, though perhaps
it is and I just couldn't find it.&lt;/p&gt;
&lt;p&gt;I think that has_many :through should create the :through
association if it's not already declared.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class User &amp;lt; ActiveRecord::Base
  has_many :memberships
  has_many :groups, :through =&amp;gt; :memberships
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why do I need to declare :memberships twice? Shouldn't this
suffice?&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class User &amp;lt; ActiveRecord::Base
  has_many :groups, :through =&amp;gt; :memberships
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even if the memberships association is more complex, this could
be wrapped in a hash&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class User &amp;lt; ActiveRecord::Base
  has_many :groups, :through =&amp;gt; {
    :memberships, :dependent =&amp;gt; :destroy
  }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In terms of expressiveness, I can see the value in declaring the
join model explicitly &lt;em&gt;if&lt;/em&gt; that join model has significance,
but sometimes join models are only really useful on one side of the
join, while on the other side it's just noise.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm surprised this is not yet reported/requested, though perhaps it is and I just couldn't find it.

I think that has_many :through should create the :through association if it's not already declared.

Example:

@@@
class User &lt; ActiveRecord::Base
  has_many :memberships
  has_many :groups, :through =&gt; :memberships
end
@@@

Why do I need to declare :memberships twice? Shouldn't this suffice?

@@@
class User &lt; ActiveRecord::Base
  has_many :groups, :through =&gt; :memberships
end
@@@

Even if the memberships association is more complex, this could be wrapped in a hash

@@@
class User &lt; ActiveRecord::Base
  has_many :groups, :through =&gt; {
    :memberships, :dependent =&gt; :destroy
  }
end
@@@

In terms of expressiveness, I can see the value in declaring the join model explicitly *if* that join model has significance, but sometimes join models are only really useful on one side of the join, while on the other side it's just noise.

Thoughts?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm surprised this is not yet reported/requested, though perhaps
it is and I just couldn't find it.&lt;/p&gt;
&lt;p&gt;I think that has_many :through should create the :through
association if it's not already declared.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class User &amp;lt; ActiveRecord::Base
  has_many :memberships
  has_many :groups, :through =&amp;gt; :memberships
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why do I need to declare :memberships twice? Shouldn't this
suffice?&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class User &amp;lt; ActiveRecord::Base
  has_many :groups, :through =&amp;gt; :memberships
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even if the memberships association is more complex, this could
be wrapped in a hash&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class User &amp;lt; ActiveRecord::Base
  has_many :groups, :through =&amp;gt; {
    :memberships, :dependent =&amp;gt; :destroy
  }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In terms of expressiveness, I can see the value in declaring the
join model explicitly &lt;em&gt;if&lt;/em&gt; that join model has significance,
but sometimes join models are only really useful on one side of the
join, while on the other side it's just noise.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-10T18:32:28+01:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1198</number>
      <permalink>eliminate-need-for-has_many-through-redundancy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord has_many_through</tag>
      <title>eliminate need for has_many :through redundancy</title>
      <updated-at type="datetime">2008-10-10T18:32:31+01:00</updated-at>
      <user-id type="integer">7315</user-id>
      <version type="integer">1</version>
      <user-name>David Chelimsky</user-name>
      <creator-name>David Chelimsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1198</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey David

I think you'll have a better resonse to this if you start a thread on the core mailing list - http://groups.google.com/group/rubyonrails-core

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey David&lt;/p&gt;
&lt;p&gt;I think you'll have a better resonse to this if you start a
thread on the core mailing list - &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-11T14:54:59+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1198</number>
      <permalink>eliminate-need-for-has_many-through-redundancy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord has_many_through</tag>
      <title>eliminate need for has_many :through redundancy</title>
      <updated-at type="datetime">2009-01-11T18:20:26+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>David Chelimsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1198</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-11T14:55:08+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1198</number>
      <permalink>eliminate-need-for-has_many-through-redundancy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord has_many_through</tag>
      <title>eliminate need for has_many :through redundancy</title>
      <updated-at type="datetime">2009-01-11T18:20:27+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>David Chelimsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1198</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
