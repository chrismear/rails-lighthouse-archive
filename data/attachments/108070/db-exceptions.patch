From baa821e4f7300a7e31d9793b3fd64b3207e9571f Mon Sep 17 00:00:00 2001
From: Michael Schuerig <michael@schuerig.de>
Date: Sun, 5 Apr 2009 01:19:29 +0200
Subject: [PATCH 1/3] Translate adapter errors that indicate a violated uniqueness constraint
 to ActiveRecord::RecordNotUnique exception derived from
 ActiveReecord::StatementInvalid.

---
 activerecord/lib/active_record/base.rb             |    4 ++++
 .../connection_adapters/abstract_adapter.rb        |    7 ++++++-
 .../connection_adapters/mysql_adapter.rb           |   11 +++++++++++
 .../connection_adapters/postgresql_adapter.rb      |    9 +++++++++
 .../connection_adapters/sqlite_adapter.rb          |   10 ++++++++++
 activerecord/test/cases/adapter_test.rb            |    7 +++++++
 6 files changed, 47 insertions(+), 1 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index 9943a70..118dae0 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -55,6 +55,10 @@ module ActiveRecord #:nodoc:
   class StatementInvalid < ActiveRecordError
   end
 
+  # Raised when a record cannot be inserted because it would violate a uniqueness constraint.
+  class RecordNotUnique < StatementInvalid
+  end
+
   # Raised when number of bind variables in statement given to <tt>:condition</tt> key (for example, when using +find+ method)
   # does not match number of expected variables.
   #
diff --git a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
index a8cd9f0..dd1d4ab 100755
--- a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
@@ -209,9 +209,14 @@ module ActiveRecord
           @last_verification = 0
           message = "#{e.class.name}: #{e.message}: #{sql}"
           log_info(message, name, 0)
-          raise ActiveRecord::StatementInvalid, message
+          raise translate_exception(e, message)
         end
 
+      def translate_exception(e, message)
+        # override in derived class
+        ActiveRecord::StatementInvalid.new(message)
+      end
+
         def format_log_entry(message, dump = nil)
           if ActiveRecord::Base.colorize_logging
             if @@row_even
diff --git a/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb b/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
index 9300df2..245dfde 100644
--- a/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
@@ -562,6 +562,17 @@ module ActiveRecord
         where_sql
       end
 
+      protected
+
+        def translate_exception(exception, message)
+          case exception.errno
+          when 1062
+            RecordNotUnique.new(message)
+          else
+            super
+          end
+        end
+
       private
         def connect
           encoding = @config[:encoding]
diff --git a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
index 3a48be4..edd766a 100644
--- a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
@@ -903,6 +903,15 @@ module ActiveRecord
             end
         end
 
+        def translate_exception(exception, message)
+          case exception.message
+          when /duplicate key value violates unique constraint/
+            RecordNotUnique.new(message)
+          else
+            super
+          end
+        end
+
       private
         # The internal PostgreSQL identifier of the money data type.
         MONEY_COLUMN_TYPE_OID = 790 #:nodoc:
diff --git a/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb b/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
index afd6472..d709450 100644
--- a/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
@@ -420,6 +420,16 @@ module ActiveRecord
             'INTEGER PRIMARY KEY NOT NULL'.freeze
           end
         end
+
+        def translate_exception(exception, message)
+          case exception.message
+          when /column(s)? .* (is|are) not unique/
+            RecordNotUnique.new(message)
+          else
+            super
+          end
+        end
+
     end
 
     class SQLite2Adapter < SQLiteAdapter # :nodoc:
diff --git a/activerecord/test/cases/adapter_test.rb b/activerecord/test/cases/adapter_test.rb
index 0477064..e197eaf 100644
--- a/activerecord/test/cases/adapter_test.rb
+++ b/activerecord/test/cases/adapter_test.rb
@@ -130,4 +130,11 @@ class AdapterTest < ActiveRecord::TestCase
       assert_equal " LIMIT 1,7 OFFSET 7", @connection.add_limit_offset!("", :limit=>sql_inject, :offset=>7)
     end
   end
+  
+  def test_uniqueness_violations_are_translated_to_specific_exception
+    @connection.execute "INSERT INTO subscribers(nick) VALUES('me')"
+    assert_raises(ActiveRecord::RecordNotUnique) do
+      @connection.execute "INSERT INTO subscribers(nick) VALUES('me')"
+    end
+  end
 end
-- 
1.6.2.1


From 8207939ed35484ae8dd66bb5e09b72f7ae7bca07 Mon Sep 17 00:00:00 2001
From: Michael Schuerig <michael@schuerig.de>
Date: Sun, 5 Apr 2009 01:42:21 +0200
Subject: [PATCH 2/3] Translate foreign key violations to ActiveRecord::InvalidForeignKey exceptions.

---
 activerecord/lib/active_record/base.rb             |    4 ++++
 .../connection_adapters/mysql_adapter.rb           |    2 ++
 .../connection_adapters/postgresql_adapter.rb      |    2 ++
 activerecord/test/cases/adapter_test.rb            |    8 ++++++++
 4 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index 118dae0..8e912d8 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -59,6 +59,10 @@ module ActiveRecord #:nodoc:
   class RecordNotUnique < StatementInvalid
   end
 
+  # Raised when a record cannot be inserted or updated because it references a non-existent record.
+  class InvalidForeignKey < StatementInvalid
+  end
+
   # Raised when number of bind variables in statement given to <tt>:condition</tt> key (for example, when using +find+ method)
   # does not match number of expected variables.
   #
diff --git a/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb b/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
index 245dfde..8f21bb9 100644
--- a/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
@@ -568,6 +568,8 @@ module ActiveRecord
           case exception.errno
           when 1062
             RecordNotUnique.new(message)
+          when 1452
+            InvalidForeignKey.new(message)
           else
             super
           end
diff --git a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
index edd766a..e482769 100644
--- a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
@@ -907,6 +907,8 @@ module ActiveRecord
           case exception.message
           when /duplicate key value violates unique constraint/
             RecordNotUnique.new(message)
+          when /violates foreign key constraint/
+            InvalidForeignKey.new(message)
           else
             super
           end
diff --git a/activerecord/test/cases/adapter_test.rb b/activerecord/test/cases/adapter_test.rb
index e197eaf..b226ff9 100644
--- a/activerecord/test/cases/adapter_test.rb
+++ b/activerecord/test/cases/adapter_test.rb
@@ -137,4 +137,12 @@ class AdapterTest < ActiveRecord::TestCase
       @connection.execute "INSERT INTO subscribers(nick) VALUES('me')"
     end
   end
+
+  def test_foreign_key_violations_are_translated_to_specific_exception
+    unless @connection.adapter_name == 'SQLite'
+      assert_raises(ActiveRecord::InvalidForeignKey) do
+        @connection.execute "INSERT INTO fk_test_has_fk (fk_id) VALUES (0)"
+      end
+    end
+  end
 end
-- 
1.6.2.1


From 421471ba3a0143a5a416a36dd8f66347a5f7a04c Mon Sep 17 00:00:00 2001
From: Michael Schuerig <michael@schuerig.de>
Date: Sun, 5 Apr 2009 09:50:55 +0200
Subject: [PATCH 3/3] Added the original adapter exception ActiveRecord::StatementInvalid.

---
 activerecord/lib/active_record/base.rb             |    5 +++++
 .../connection_adapters/abstract_adapter.rb        |    2 +-
 .../connection_adapters/mysql_adapter.rb           |    4 ++--
 .../connection_adapters/postgresql_adapter.rb      |    4 ++--
 .../connection_adapters/sqlite_adapter.rb          |    2 +-
 5 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index 8e912d8..a6f4704 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -53,6 +53,11 @@ module ActiveRecord #:nodoc:
 
   # Raised when SQL statement cannot be executed by the database (for example, it's often the case for MySQL when Ruby driver used is too old).
   class StatementInvalid < ActiveRecordError
+    attr_reader :original_exception
+    def initialize(message, original_exception)
+      super(message)
+      @original_exception = original_exception
+    end
   end
 
   # Raised when a record cannot be inserted because it would violate a uniqueness constraint.
diff --git a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
index dd1d4ab..95fa6b8 100755
--- a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
@@ -214,7 +214,7 @@ module ActiveRecord
 
       def translate_exception(e, message)
         # override in derived class
-        ActiveRecord::StatementInvalid.new(message)
+        ActiveRecord::StatementInvalid.new(message, e)
       end
 
         def format_log_entry(message, dump = nil)
diff --git a/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb b/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
index 8f21bb9..96a606a 100644
--- a/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
@@ -567,9 +567,9 @@ module ActiveRecord
         def translate_exception(exception, message)
           case exception.errno
           when 1062
-            RecordNotUnique.new(message)
+            RecordNotUnique.new(message, exception)
           when 1452
-            InvalidForeignKey.new(message)
+            InvalidForeignKey.new(message, exception)
           else
             super
           end
diff --git a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
index e482769..385eaaa 100644
--- a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
@@ -906,9 +906,9 @@ module ActiveRecord
         def translate_exception(exception, message)
           case exception.message
           when /duplicate key value violates unique constraint/
-            RecordNotUnique.new(message)
+            RecordNotUnique.new(message, exception)
           when /violates foreign key constraint/
-            InvalidForeignKey.new(message)
+            InvalidForeignKey.new(message, exception)
           else
             super
           end
diff --git a/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb b/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
index d709450..1005525 100644
--- a/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
@@ -424,7 +424,7 @@ module ActiveRecord
         def translate_exception(exception, message)
           case exception.message
           when /column(s)? .* (is|are) not unique/
-            RecordNotUnique.new(message)
+            RecordNotUnique.new(message, exception)
           else
             super
           end
-- 
1.6.2.1

