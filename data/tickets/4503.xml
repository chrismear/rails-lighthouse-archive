<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-04-29T22:44:51+01:00</created-at>
  <creator-id type="integer">71408</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4503</number>
  <permalink>polymorphic-belongs_to-with-blank-values-causes-unwanted-behavior</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>associations belongs_to_polymorphic_association</tag>
  <title>Polymorphic belongs_to with blank values causes unwanted behavior</title>
  <updated-at type="datetime">2011-02-02T17:47:47+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Tanel Suurhans</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4503</url>
  <priority-name nil="true"></priority-name>
  <original-body>Found two cases where assigning a blank value (an empty string) to a polymorphic belongs_to causes unexpected behavior in rails 2.3.5.

@@@
class User &lt; ActiveRecord::Base
  belongs_to :pony, :polymorphic =&gt; true
end

user = User.new
user.pony = &quot;&quot; # =&gt; exception thrown
@@@

This assignment throws an exception because the empty string does not get caught into this check in belongs_to_polymorphic_association.rb
@@@
def replace(record)
  if record.nil?
  end
end
@@@

With ruby 1.8.7 it passes through the record_id(record) method, returning the object_id and then blowing up with &quot;undefined method `base_class' for String:Class&quot;. With ruby 1.9.1 it doesn't even get that far, ending in &quot;undefined method 'id' for &quot;&quot;:String&quot;.

The other case when things go wrong happens like this:
@@@
user = User.new
user.pony_id = &quot;&quot;
user.pony_type = &quot;&quot;
user.save
user.pony # =&gt; exception thrown
@@@

This throws NoMethodError: undefined method 'find' for Object:Class, happening due to the empty string not getting caught in this condition in belongs_to_polymorphic_association.rb
@@@
def association_class
  @owner[@reflection.options[:foreign_type]] ? @owner[@reflection.options[:foreign_type]].constantize : nil
end
@@@

This method tries to do &quot;&quot;.constantize which results in Object and afterwards Object,find is called, which is invalid.

I have attached failing tests and a patch fixing this behavior for rails 2.3.5</original-body>
  <latest-body>Found two cases where assigning a blank value (an empty string) to a polymorphic belongs_to causes unexpected behavior in rails 2.3.5.

@@@
class User &lt; ActiveRecord::Base
  belongs_to :pony, :polymorphic =&gt; true
end

user = User.new
user.pony = &quot;&quot; # =&gt; exception thrown
@@@

This assignment throws an exception because the empty string does not get caught into this check in belongs_to_polymorphic_association.rb
@@@
def replace(record)
  if record.nil?
  end
end
@@@

With ruby 1.8.7 it passes through the record_id(record) method, returning the object_id and then blowing up with &quot;undefined method `base_class' for String:Class&quot;. With ruby 1.9.1 it doesn't even get that far, ending in &quot;undefined method 'id' for &quot;&quot;:String&quot;.

The other case when things go wrong happens like this:
@@@
user = User.new
user.pony_id = &quot;&quot;
user.pony_type = &quot;&quot;
user.save
user.pony # =&gt; exception thrown
@@@

This throws NoMethodError: undefined method 'find' for Object:Class, happening due to the empty string not getting caught in this condition in belongs_to_polymorphic_association.rb
@@@
def association_class
  @owner[@reflection.options[:foreign_type]] ? @owner[@reflection.options[:foreign_type]].constantize : nil
end
@@@

This method tries to do &quot;&quot;.constantize which results in Object and afterwards Object,find is called, which is invalid.

I have attached failing tests and a patch fixing this behavior for rails 2.3.5</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Found two cases where assigning a blank value (an empty string)
to a polymorphic belongs_to causes unexpected behavior in rails
2.3.5.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class User &amp;lt; ActiveRecord::Base
  belongs_to :pony, :polymorphic =&amp;gt; true
end

user = User.new
user.pony = &quot;&quot; # =&amp;gt; exception thrown&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This assignment throws an exception because the empty string
does not get caught into this check in
belongs_to_polymorphic_association.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def replace(record)
  if record.nil?
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With ruby 1.8.7 it passes through the record_id(record) method,
returning the object_id and then blowing up with &quot;undefined method
&lt;code&gt;base_class' for String:Class&quot;. With ruby 1.9.1 it doesn't
even get that far, ending in &quot;undefined method 'id' for
&quot;&quot;:String&quot;.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The other case when things go wrong happens like this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;user = User.new
user.pony_id = &quot;&quot;
user.pony_type = &quot;&quot;
user.save
user.pony # =&amp;gt; exception thrown&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This throws NoMethodError: undefined method 'find' for
Object:Class, happening due to the empty string not getting caught
in this condition in belongs_to_polymorphic_association.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def association_class
  @owner[@reflection.options[:foreign_type]] ? @owner[@reflection.options[:foreign_type]].constantize : nil
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This method tries to do &quot;&quot;.constantize which results in Object
and afterwards Object,find is called, which is invalid.&lt;/p&gt;
&lt;p&gt;I have attached failing tests and a patch fixing this behavior
for rails 2.3.5&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Found two cases where assigning a blank value (an empty string) to a polymorphic belongs_to causes unexpected behavior in rails 2.3.5.

@@@
class User &lt; ActiveRecord::Base
  belongs_to :pony, :polymorphic =&gt; true
end

user = User.new
user.pony = &quot;&quot; # =&gt; exception thrown
@@@

This assignment throws an exception because the empty string does not get caught into this check in belongs_to_polymorphic_association.rb
@@@
def replace(record)
  if record.nil?
  end
end
@@@

With ruby 1.8.7 it passes through the record_id(record) method, returning the object_id and then blowing up with &quot;undefined method `base_class' for String:Class&quot;. With ruby 1.9.1 it doesn't even get that far, ending in &quot;undefined method 'id' for &quot;&quot;:String&quot;.

The other case when things go wrong happens like this:
@@@
user = User.new
user.pony_id = &quot;&quot;
user.pony_type = &quot;&quot;
user.save
user.pony # =&gt; exception thrown
@@@

This throws NoMethodError: undefined method 'find' for Object:Class, happening due to the empty string not getting caught in this condition in belongs_to_polymorphic_association.rb
@@@
def association_class
  @owner[@reflection.options[:foreign_type]] ? @owner[@reflection.options[:foreign_type]].constantize : nil
end
@@@

This method tries to do &quot;&quot;.constantize which results in Object and afterwards Object,find is called, which is invalid.

I have attached failing tests and a patch fixing this behavior for rails 2.3.5</body>
      <body-html>&lt;div&gt;&lt;p&gt;Found two cases where assigning a blank value (an empty string)
to a polymorphic belongs_to causes unexpected behavior in rails
2.3.5.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class User &amp;lt; ActiveRecord::Base
  belongs_to :pony, :polymorphic =&amp;gt; true
end

user = User.new
user.pony = &quot;&quot; # =&amp;gt; exception thrown&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This assignment throws an exception because the empty string
does not get caught into this check in
belongs_to_polymorphic_association.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def replace(record)
  if record.nil?
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With ruby 1.8.7 it passes through the record_id(record) method,
returning the object_id and then blowing up with &quot;undefined method
&lt;code&gt;base_class' for String:Class&quot;. With ruby 1.9.1 it doesn't
even get that far, ending in &quot;undefined method 'id' for
&quot;&quot;:String&quot;.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The other case when things go wrong happens like this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;user = User.new
user.pony_id = &quot;&quot;
user.pony_type = &quot;&quot;
user.save
user.pony # =&amp;gt; exception thrown&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This throws NoMethodError: undefined method 'find' for
Object:Class, happening due to the empty string not getting caught
in this condition in belongs_to_polymorphic_association.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def association_class
  @owner[@reflection.options[:foreign_type]] ? @owner[@reflection.options[:foreign_type]].constantize : nil
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This method tries to do &quot;&quot;.constantize which results in Object
and afterwards Object,find is called, which is invalid.&lt;/p&gt;
&lt;p&gt;I have attached failing tests and a patch fixing this behavior
for rails 2.3.5&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-29T22:44:51+01:00</created-at>
      <creator-id type="integer">71408</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4503</number>
      <permalink>polymorphic-belongs_to-with-blank-values-causes-unwanted-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Polymorphic belongs_to with blank values causes unwanted behavior</title>
      <updated-at type="datetime">2010-04-29T22:45:46+01:00</updated-at>
      <user-id type="integer">71408</user-id>
      <version type="integer">1</version>
      <user-name>Tanel Suurhans</user-name>
      <creator-name>Tanel Suurhans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4503</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Added a new, proper patch</body>
      <body-html>&lt;div&gt;&lt;p&gt;Added a new, proper patch&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-30T10:15:57+01:00</created-at>
      <creator-id type="integer">71408</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4503</number>
      <permalink>polymorphic-belongs_to-with-blank-values-causes-unwanted-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Polymorphic belongs_to with blank values causes unwanted behavior</title>
      <updated-at type="datetime">2010-04-30T10:15:58+01:00</updated-at>
      <user-id type="integer">71408</user-id>
      <version type="integer">2</version>
      <user-name>Tanel Suurhans</user-name>
      <creator-name>Tanel Suurhans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4503</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-30T10:17:35+01:00</created-at>
      <creator-id type="integer">71408</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4503</number>
      <permalink>polymorphic-belongs_to-with-blank-values-causes-unwanted-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations belongs_to_polymorphic_association</tag>
      <title>Polymorphic belongs_to with blank values causes unwanted behavior</title>
      <updated-at type="datetime">2010-04-30T10:17:40+01:00</updated-at>
      <user-id type="integer">71408</user-id>
      <version type="integer">3</version>
      <user-name>Tanel Suurhans</user-name>
      <creator-name>Tanel Suurhans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4503</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Added a patch for current master (this issue seems to exist in rails 3 also).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Added a patch for current master (this issue seems to exist in
rails 3 also).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-30T11:34:46+01:00</created-at>
      <creator-id type="integer">71408</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4503</number>
      <permalink>polymorphic-belongs_to-with-blank-values-causes-unwanted-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations belongs_to_polymorphic_association</tag>
      <title>Polymorphic belongs_to with blank values causes unwanted behavior</title>
      <updated-at type="datetime">2010-04-30T11:35:36+01:00</updated-at>
      <user-id type="integer">71408</user-id>
      <version type="integer">4</version>
      <user-name>Tanel Suurhans</user-name>
      <creator-name>Tanel Suurhans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4503</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:43:14+00:00</created-at>
      <creator-id type="integer">71408</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4503</number>
      <permalink>polymorphic-belongs_to-with-blank-values-causes-unwanted-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>associations belongs_to_polymorphic_association</tag>
      <title>Polymorphic belongs_to with blank values causes unwanted behavior</title>
      <updated-at type="datetime">2011-02-02T17:47:30+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Tanel Suurhans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4503</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:43:15+00:00</created-at>
      <creator-id type="integer">71408</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4503</number>
      <permalink>polymorphic-belongs_to-with-blank-values-causes-unwanted-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>associations belongs_to_polymorphic_association</tag>
      <title>Polymorphic belongs_to with blank values causes unwanted behavior</title>
      <updated-at type="datetime">2011-02-02T17:47:47+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Tanel Suurhans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4503</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ecba31a931bf6f3bc342ece78d0534521513409a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-30T10:15:57+01:00</created-at>
      <filename>poly_belongs_to_fix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">504924</id>
      <size type="integer">3081</size>
      <uploader-id type="integer">71408</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/504924/poly_belongs_to_fix.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>a8326dd04a3232e757965122972a2dd50d6a716d</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-30T11:34:46+01:00</created-at>
      <filename>poly_belongs_to_diff_fix_rails3.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">504985</id>
      <size type="integer">2547</size>
      <uploader-id type="integer">71408</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/504985/poly_belongs_to_diff_fix_rails3.diff</url>
    </attachment>
  </attachments>
</ticket>
