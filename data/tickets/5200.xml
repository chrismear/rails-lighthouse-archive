<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-27T17:39:53+01:00</created-at>
  <creator-id type="integer">17257</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5200</number>
  <permalink>inconsistencies-when-eager-loading-with-fully-qualified-table-names-using-oracle</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>oracle</tag>
  <title>Inconsistencies when eager loading with fully-qualified table names using Oracle</title>
  <updated-at type="datetime">2011-02-02T17:09:00+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>bahuvrihi</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5200</url>
  <priority-name>Low</priority-name>
  <original-body>Eager loading will revert to the left-outer-join strategy when using fully-qualified table names on Oracle. For example:

@@@ ruby
  class Dept &lt; ActiveRecord::Base
    set_table_name &quot;dept&quot;
  end
      
  class Emp &lt; ActiveRecord::Base
    set_table_name &quot;emp&quot;
    belongs_to :dept, :select =&gt; &quot;id, name nombre&quot;
  end
  
  Emp.find(1, :include =&gt; :dept).dept.nombre       # ok
  Emp.find(:first, :include =&gt; :dept).dept.nombre  # ok
@@@

This code works as written because the default one-query-per-association strategy is used; as a result the select is used and nombre gets set on the dept record.  However if you qualifty the table name then the select is not used in some cases; find using an id breaks but find :first still works.

@@@ ruby
  class Dept &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.dept&quot;
  end
      
  class Emp &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.emp&quot;
    belongs_to :dept, :select =&gt; &quot;id, name nombre&quot;
  end
  
  Emp.find(1, :include =&gt; :dept).dept.nombre       # NoMethodError
  Emp.find(:first, :include =&gt; :dept).dept.nombre  # ok
@@@

In the id case eager loading reverts to the left-outer-join strategy and the select is ignored.  The difference can be traced to the tables_in_string method which is responsible for extracting tables from the select string.  This is how it's written in 2.3.5:

@@@ ruby
  # [active_record/association.rb]
  def tables_in_string(string)
    return [] if string.blank?
    string.scan(/([\.a-zA-Z_]+).?\./).flatten
  end
@@@

Turns out the regexp doesn't handle the fully-qualified names properly.  There were some [patches](https://rails.lighthouseapp.com/projects/8994/tickets/4770-patch-patches-for-activerecord-oracle-enhanced-adapter-compatibility) that partially fix this in 3.0.0 but the fix isn't complete.  This is how the same method is currently:

@@@ ruby
  # [active_record/relation.rb]
  def tables_in_string(string)
    return [] if string.blank?
    # always convert table names to downcase as in Oracle quoted table names are in uppercase
    # ignore raw_sql_ that is used by Oracle adapter as alias for limit/offset subqueries
    string.scan(/([a-zA-Z_][\.\w]+).?\./).flatten.map(&amp;:downcase).uniq - ['raw_sql_']
  end
@@@

This handles word-based schemas, but it will not handle other valid oracle schemas like 'schema$name' nor will it handle tables with a db link.  The method can be fixed with a fancier regexp:

@@@ ruby
  class ActiveRecord::Base
    NONQUOTED_OBJECT_NAME   = /[A-Za-z][A-z0-9$#]{0,29}/
    NONQUOTED_DATABASE_LINK = /[A-Za-z][A-z0-9$#\.@]{0,127}/
    TABLES_IN_STRING = /((?:#{NONQUOTED_OBJECT_NAME}\.)?#{NONQUOTED_OBJECT_NAME}(?:@#{NONQUOTED_DATABASE_LINK})?)\..?/
  
    def self.tables_in_string(string)
      return [] if string.blank?
      string.scan(TABLES_IN_STRING).flatten.map {|str| str.downcase }.uniq - ['raw_sql_']
    end
  end

  class Dept &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.dept&quot;
  end
      
  class Emp &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.emp&quot;
    belongs_to :dept, :select =&gt; &quot;id, name nombre&quot;
  end

  Emp.find(1, :include =&gt; :dept).dept.nombre       # ok
  Emp.find(:first, :include =&gt; :dept).dept.nombre  # ok
@@@

But this is getting kinda wild.  Moreover I'd bet it's not correct for other databases.  I propose moving the tables_in_string method to the adapter so that each database can use it's own logic at this point.

A couple links:

* [a test of the regexp above](http://gist.github.com/490817)
* [a more thorough study of the select issue](http://gist.github.com/486750)</original-body>
  <latest-body>Eager loading will revert to the left-outer-join strategy when using fully-qualified table names on Oracle. For example:

@@@ ruby
  class Dept &lt; ActiveRecord::Base
    set_table_name &quot;dept&quot;
  end
      
  class Emp &lt; ActiveRecord::Base
    set_table_name &quot;emp&quot;
    belongs_to :dept, :select =&gt; &quot;id, name nombre&quot;
  end
  
  Emp.find(1, :include =&gt; :dept).dept.nombre       # ok
  Emp.find(:first, :include =&gt; :dept).dept.nombre  # ok
@@@

This code works as written because the default one-query-per-association strategy is used; as a result the select is used and nombre gets set on the dept record.  However if you qualifty the table name then the select is not used in some cases; find using an id breaks but find :first still works.

@@@ ruby
  class Dept &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.dept&quot;
  end
      
  class Emp &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.emp&quot;
    belongs_to :dept, :select =&gt; &quot;id, name nombre&quot;
  end
  
  Emp.find(1, :include =&gt; :dept).dept.nombre       # NoMethodError
  Emp.find(:first, :include =&gt; :dept).dept.nombre  # ok
@@@

In the id case eager loading reverts to the left-outer-join strategy and the select is ignored.  The difference can be traced to the tables_in_string method which is responsible for extracting tables from the select string.  This is how it's written in 2.3.5:

@@@ ruby
  # [active_record/association.rb]
  def tables_in_string(string)
    return [] if string.blank?
    string.scan(/([\.a-zA-Z_]+).?\./).flatten
  end
@@@

Turns out the regexp doesn't handle the fully-qualified names properly.  There were some [patches](https://rails.lighthouseapp.com/projects/8994/tickets/4770-patch-patches-for-activerecord-oracle-enhanced-adapter-compatibility) that partially fix this in 3.0.0 but the fix isn't complete.  This is how the same method is currently:

@@@ ruby
  # [active_record/relation.rb]
  def tables_in_string(string)
    return [] if string.blank?
    # always convert table names to downcase as in Oracle quoted table names are in uppercase
    # ignore raw_sql_ that is used by Oracle adapter as alias for limit/offset subqueries
    string.scan(/([a-zA-Z_][\.\w]+).?\./).flatten.map(&amp;:downcase).uniq - ['raw_sql_']
  end
@@@

This handles word-based schemas, but it will not handle other valid oracle schemas like 'schema$name' nor will it handle tables with a db link.  The method can be fixed with a fancier regexp:

@@@ ruby
  class ActiveRecord::Base
    NONQUOTED_OBJECT_NAME   = /[A-Za-z][A-z0-9$#]{0,29}/
    NONQUOTED_DATABASE_LINK = /[A-Za-z][A-z0-9$#\.@]{0,127}/
    TABLES_IN_STRING = /((?:#{NONQUOTED_OBJECT_NAME}\.)?#{NONQUOTED_OBJECT_NAME}(?:@#{NONQUOTED_DATABASE_LINK})?)\..?/
  
    def self.tables_in_string(string)
      return [] if string.blank?
      string.scan(TABLES_IN_STRING).flatten.map {|str| str.downcase }.uniq - ['raw_sql_']
    end
  end

  class Dept &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.dept&quot;
  end
      
  class Emp &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.emp&quot;
    belongs_to :dept, :select =&gt; &quot;id, name nombre&quot;
  end

  Emp.find(1, :include =&gt; :dept).dept.nombre       # ok
  Emp.find(:first, :include =&gt; :dept).dept.nombre  # ok
@@@

But this is getting kinda wild.  Moreover I'd bet it's not correct for other databases.  I propose moving the tables_in_string method to the adapter so that each database can use it's own logic at this point.

A couple links:

* [a test of the regexp above](http://gist.github.com/490817)
* [a more thorough study of the select issue](http://gist.github.com/486750)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Eager loading will revert to the left-outer-join strategy when
using fully-qualified table names on Oracle. For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  class Dept &amp;lt; ActiveRecord::Base
    set_table_name &quot;dept&quot;
  end
      
  class Emp &amp;lt; ActiveRecord::Base
    set_table_name &quot;emp&quot;
    belongs_to :dept, :select =&amp;gt; &quot;id, name nombre&quot;
  end
  
  Emp.find(1, :include =&amp;gt; :dept).dept.nombre       # ok
  Emp.find(:first, :include =&amp;gt; :dept).dept.nombre  # ok&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This code works as written because the default
one-query-per-association strategy is used; as a result the select
is used and nombre gets set on the dept record. However if you
qualifty the table name then the select is not used in some cases;
find using an id breaks but find :first still works.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  class Dept &amp;lt; ActiveRecord::Base
    set_table_name &quot;schema_name.dept&quot;
  end
      
  class Emp &amp;lt; ActiveRecord::Base
    set_table_name &quot;schema_name.emp&quot;
    belongs_to :dept, :select =&amp;gt; &quot;id, name nombre&quot;
  end
  
  Emp.find(1, :include =&amp;gt; :dept).dept.nombre       # NoMethodError
  Emp.find(:first, :include =&amp;gt; :dept).dept.nombre  # ok&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the id case eager loading reverts to the left-outer-join
strategy and the select is ignored. The difference can be traced to
the tables_in_string method which is responsible for extracting
tables from the select string. This is how it's written in
2.3.5:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  # [active_record/association.rb]
  def tables_in_string(string)
    return [] if string.blank?
    string.scan(/([\.a-zA-Z_]+).?\./).flatten
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Turns out the regexp doesn't handle the fully-qualified names
properly. There were some &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/4770-patch-patches-for-activerecord-oracle-enhanced-adapter-compatibility&quot;&gt;
patches&lt;/a&gt; that partially fix this in 3.0.0 but the fix isn't
complete. This is how the same method is currently:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  # [active_record/relation.rb]
  def tables_in_string(string)
    return [] if string.blank?
    # always convert table names to downcase as in Oracle quoted table names are in uppercase
    # ignore raw_sql_ that is used by Oracle adapter as alias for limit/offset subqueries
    string.scan(/([a-zA-Z_][\.\w]+).?\./).flatten.map(&amp;amp;:downcase).uniq - ['raw_sql_']
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This handles word-based schemas, but it will not handle other
valid oracle schemas like 'schema$name' nor will it handle tables
with a db link. The method can be fixed with a fancier regexp:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  class ActiveRecord::Base
    NONQUOTED_OBJECT_NAME   = /[A-Za-z][A-z0-9$#]{0,29}/
    NONQUOTED_DATABASE_LINK = /[A-Za-z][A-z0-9$#\.@]{0,127}/
    TABLES_IN_STRING = /((?:#{NONQUOTED_OBJECT_NAME}\.)?#{NONQUOTED_OBJECT_NAME}(?:@#{NONQUOTED_DATABASE_LINK})?)\..?/
  
    def self.tables_in_string(string)
      return [] if string.blank?
      string.scan(TABLES_IN_STRING).flatten.map {|str| str.downcase }.uniq - ['raw_sql_']
    end
  end

  class Dept &amp;lt; ActiveRecord::Base
    set_table_name &quot;schema_name.dept&quot;
  end
      
  class Emp &amp;lt; ActiveRecord::Base
    set_table_name &quot;schema_name.emp&quot;
    belongs_to :dept, :select =&amp;gt; &quot;id, name nombre&quot;
  end

  Emp.find(1, :include =&amp;gt; :dept).dept.nombre       # ok
  Emp.find(:first, :include =&amp;gt; :dept).dept.nombre  # ok&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But this is getting kinda wild. Moreover I'd bet it's not
correct for other databases. I propose moving the tables_in_string
method to the adapter so that each database can use it's own logic
at this point.&lt;/p&gt;
&lt;p&gt;A couple links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gist.github.com/490817&quot;&gt;a test of the regexp
above&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gist.github.com/486750&quot;&gt;a more thorough study
of the select issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Eager loading will revert to the left-outer-join strategy when using fully-qualified table names on Oracle. For example:

@@@ ruby
  class Dept &lt; ActiveRecord::Base
    set_table_name &quot;dept&quot;
  end
      
  class Emp &lt; ActiveRecord::Base
    set_table_name &quot;emp&quot;
    belongs_to :dept, :select =&gt; &quot;id, name nombre&quot;
  end
  
  Emp.find(1, :include =&gt; :dept).dept.nombre       # ok
  Emp.find(:first, :include =&gt; :dept).dept.nombre  # ok
@@@

This code works as written because the default one-query-per-association strategy is used; as a result the select is used and nombre gets set on the dept record.  However if you qualifty the table name then the select is not used in some cases; find using an id breaks but find :first still works.

@@@ ruby
  class Dept &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.dept&quot;
  end
      
  class Emp &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.emp&quot;
    belongs_to :dept, :select =&gt; &quot;id, name nombre&quot;
  end
  
  Emp.find(1, :include =&gt; :dept).dept.nombre       # NoMethodError
  Emp.find(:first, :include =&gt; :dept).dept.nombre  # ok
@@@

In the id case eager loading reverts to the left-outer-join strategy and the select is ignored.  The difference can be traced to the tables_in_string method which is responsible for extracting tables from the select string.  This is how it's written in 2.3.5:

@@@ ruby
  # [active_record/association.rb]
  def tables_in_string(string)
    return [] if string.blank?
    string.scan(/([\.a-zA-Z_]+).?\./).flatten
  end
@@@

Turns out the regexp doesn't handle the fully-qualified names properly.  There were some [patches](https://rails.lighthouseapp.com/projects/8994/tickets/4770-patch-patches-for-activerecord-oracle-enhanced-adapter-compatibility) that partially fix this in 3.0.0 but the fix isn't complete.  This is how the same method is currently:

@@@ ruby
  # [active_record/relation.rb]
  def tables_in_string(string)
    return [] if string.blank?
    # always convert table names to downcase as in Oracle quoted table names are in uppercase
    # ignore raw_sql_ that is used by Oracle adapter as alias for limit/offset subqueries
    string.scan(/([a-zA-Z_][\.\w]+).?\./).flatten.map(&amp;:downcase).uniq - ['raw_sql_']
  end
@@@

This handles word-based schemas, but it will not handle other valid oracle schemas like 'schema$name' nor will it handle tables with a db link.  The method can be fixed with a fancier regexp:

@@@ ruby
  class ActiveRecord::Base
    NONQUOTED_OBJECT_NAME   = /[A-Za-z][A-z0-9$#]{0,29}/
    NONQUOTED_DATABASE_LINK = /[A-Za-z][A-z0-9$#\.@]{0,127}/
    TABLES_IN_STRING = /((?:#{NONQUOTED_OBJECT_NAME}\.)?#{NONQUOTED_OBJECT_NAME}(?:@#{NONQUOTED_DATABASE_LINK})?)\..?/
  
    def self.tables_in_string(string)
      return [] if string.blank?
      string.scan(TABLES_IN_STRING).flatten.map {|str| str.downcase }.uniq - ['raw_sql_']
    end
  end

  class Dept &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.dept&quot;
  end
      
  class Emp &lt; ActiveRecord::Base
    set_table_name &quot;schema_name.emp&quot;
    belongs_to :dept, :select =&gt; &quot;id, name nombre&quot;
  end

  Emp.find(1, :include =&gt; :dept).dept.nombre       # ok
  Emp.find(:first, :include =&gt; :dept).dept.nombre  # ok
@@@

But this is getting kinda wild.  Moreover I'd bet it's not correct for other databases.  I propose moving the tables_in_string method to the adapter so that each database can use it's own logic at this point.

A couple links:

* [a test of the regexp above](http://gist.github.com/490817)
* [a more thorough study of the select issue](http://gist.github.com/486750)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Eager loading will revert to the left-outer-join strategy when
using fully-qualified table names on Oracle. For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  class Dept &amp;lt; ActiveRecord::Base
    set_table_name &quot;dept&quot;
  end
      
  class Emp &amp;lt; ActiveRecord::Base
    set_table_name &quot;emp&quot;
    belongs_to :dept, :select =&amp;gt; &quot;id, name nombre&quot;
  end
  
  Emp.find(1, :include =&amp;gt; :dept).dept.nombre       # ok
  Emp.find(:first, :include =&amp;gt; :dept).dept.nombre  # ok&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This code works as written because the default
one-query-per-association strategy is used; as a result the select
is used and nombre gets set on the dept record. However if you
qualifty the table name then the select is not used in some cases;
find using an id breaks but find :first still works.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  class Dept &amp;lt; ActiveRecord::Base
    set_table_name &quot;schema_name.dept&quot;
  end
      
  class Emp &amp;lt; ActiveRecord::Base
    set_table_name &quot;schema_name.emp&quot;
    belongs_to :dept, :select =&amp;gt; &quot;id, name nombre&quot;
  end
  
  Emp.find(1, :include =&amp;gt; :dept).dept.nombre       # NoMethodError
  Emp.find(:first, :include =&amp;gt; :dept).dept.nombre  # ok&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the id case eager loading reverts to the left-outer-join
strategy and the select is ignored. The difference can be traced to
the tables_in_string method which is responsible for extracting
tables from the select string. This is how it's written in
2.3.5:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  # [active_record/association.rb]
  def tables_in_string(string)
    return [] if string.blank?
    string.scan(/([\.a-zA-Z_]+).?\./).flatten
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Turns out the regexp doesn't handle the fully-qualified names
properly. There were some &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/4770-patch-patches-for-activerecord-oracle-enhanced-adapter-compatibility&quot;&gt;
patches&lt;/a&gt; that partially fix this in 3.0.0 but the fix isn't
complete. This is how the same method is currently:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  # [active_record/relation.rb]
  def tables_in_string(string)
    return [] if string.blank?
    # always convert table names to downcase as in Oracle quoted table names are in uppercase
    # ignore raw_sql_ that is used by Oracle adapter as alias for limit/offset subqueries
    string.scan(/([a-zA-Z_][\.\w]+).?\./).flatten.map(&amp;amp;:downcase).uniq - ['raw_sql_']
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This handles word-based schemas, but it will not handle other
valid oracle schemas like 'schema$name' nor will it handle tables
with a db link. The method can be fixed with a fancier regexp:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  class ActiveRecord::Base
    NONQUOTED_OBJECT_NAME   = /[A-Za-z][A-z0-9$#]{0,29}/
    NONQUOTED_DATABASE_LINK = /[A-Za-z][A-z0-9$#\.@]{0,127}/
    TABLES_IN_STRING = /((?:#{NONQUOTED_OBJECT_NAME}\.)?#{NONQUOTED_OBJECT_NAME}(?:@#{NONQUOTED_DATABASE_LINK})?)\..?/
  
    def self.tables_in_string(string)
      return [] if string.blank?
      string.scan(TABLES_IN_STRING).flatten.map {|str| str.downcase }.uniq - ['raw_sql_']
    end
  end

  class Dept &amp;lt; ActiveRecord::Base
    set_table_name &quot;schema_name.dept&quot;
  end
      
  class Emp &amp;lt; ActiveRecord::Base
    set_table_name &quot;schema_name.emp&quot;
    belongs_to :dept, :select =&amp;gt; &quot;id, name nombre&quot;
  end

  Emp.find(1, :include =&amp;gt; :dept).dept.nombre       # ok
  Emp.find(:first, :include =&amp;gt; :dept).dept.nombre  # ok&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But this is getting kinda wild. Moreover I'd bet it's not
correct for other databases. I propose moving the tables_in_string
method to the adapter so that each database can use it's own logic
at this point.&lt;/p&gt;
&lt;p&gt;A couple links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gist.github.com/490817&quot;&gt;a test of the regexp
above&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gist.github.com/486750&quot;&gt;a more thorough study
of the select issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T17:59:51+01:00</created-at>
      <creator-id type="integer">17257</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5200</number>
      <permalink>inconsistencies-when-eager-loading-with-fully-qualified-table-names-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>oracle</tag>
      <title>Inconsistencies when eager loading with fully-qualified table names using Oracle</title>
      <updated-at type="datetime">2010-07-26T18:15:17+01:00</updated-at>
      <user-id type="integer">17257</user-id>
      <version type="integer">1</version>
      <user-name>bahuvrihi</user-name>
      <creator-name>bahuvrihi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5200</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>What version of rails you used?</body>
      <body-html>&lt;div&gt;&lt;p&gt;What version of rails you used?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T20:21:16+01:00</created-at>
      <creator-id type="integer">17257</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5200</number>
      <permalink>inconsistencies-when-eager-loading-with-fully-qualified-table-names-using-oracle</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>oracle</tag>
      <title>Inconsistencies when eager loading with fully-qualified table names using Oracle</title>
      <updated-at type="datetime">2010-07-26T20:21:21+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>bahuvrihi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5200</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am using activerecord-2.3.5 but as discussed there is reason to believe it is also active in 3.0(beta?).</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am using activerecord-2.3.5 but as discussed there is reason
to believe it is also active in 3.0(beta?).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T20:28:24+01:00</created-at>
      <creator-id type="integer">17257</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5200</number>
      <permalink>inconsistencies-when-eager-loading-with-fully-qualified-table-names-using-oracle</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>oracle</tag>
      <title>Inconsistencies when eager loading with fully-qualified table names using Oracle</title>
      <updated-at type="datetime">2010-07-26T20:28:26+01:00</updated-at>
      <user-id type="integer">17257</user-id>
      <version type="integer">3</version>
      <user-name>bahuvrihi</user-name>
      <creator-name>bahuvrihi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5200</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The most cool online shoes shop where you can find the most fashion designers shoes, include
&lt;a href='http://www.fashionshoesmart.com'&gt;Manolo Blahnik Shoes&lt;/a&gt;, &lt;a href='http://www.fashionshoesmart.com'&gt;Jimmy Choo Shoes&lt;/a&gt;, Christian Louboutin shoes and more. 
we offer high quality highheels at low price.

Simple ways to love your wardrobe.
An online shop specializing in &lt;a href='http://www.hervelegerbrand.com'&gt;Herve Leger&lt;/a&gt;, Herve Leger Dress, Herve Leger Skirt, 
Herve Leger Sale, Herve Leger Dresses.All new style in our store.

Shop the latest styles &lt;a href='http://www.juicyshoponline.com'&gt;Juicy Couture&lt;/a&gt; handbags, juicy couture tracksuit.
Juicy couture sale, juicy couture outlet,100% quality guarantee.

FashionStyleOnsale offer high quality Moncler Jackets at low price. 
Moncler Jackets on sale, shop more discount Moncler Vest, Moncler Coats at FashionStyleOnsale
&lt;a href='http://www.fashionstyleonsale.com'&gt;moncler&lt;/a&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;The most cool online shoes shop where you can find the most
fashion designers shoes, include&lt;br&gt;
&lt;a href=&quot;http://www.fashionshoesmart.com&quot;&gt;Manolo Blahnik Shoes&lt;/a&gt;,
&lt;a href=&quot;http://www.fashionshoesmart.com&quot;&gt;Jimmy Choo Shoes&lt;/a&gt;,
Christian Louboutin shoes and more.&lt;br&gt;
we offer high quality highheels at low price.&lt;/p&gt;
&lt;p&gt;Simple ways to love your wardrobe.&lt;br&gt;
An online shop specializing in &lt;a href=
&quot;http://www.hervelegerbrand.com&quot;&gt;Herve Leger&lt;/a&gt;, Herve Leger
Dress, Herve Leger Skirt,&lt;br&gt;
Herve Leger Sale, Herve Leger Dresses.All new style in our
store.&lt;/p&gt;
&lt;p&gt;Shop the latest styles &lt;a href=
&quot;http://www.juicyshoponline.com&quot;&gt;Juicy Couture&lt;/a&gt; handbags, juicy
couture tracksuit.&lt;br&gt;
Juicy couture sale, juicy couture outlet,100% quality
guarantee.&lt;/p&gt;
&lt;p&gt;FashionStyleOnsale offer high quality Moncler Jackets at low
price.&lt;br&gt;
Moncler Jackets on sale, shop more discount Moncler Vest, Moncler
Coats at FashionStyleOnsale&lt;br&gt;
&lt;a href=&quot;http://www.fashionstyleonsale.com&quot;&gt;moncler&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-27T15:13:14+01:00</created-at>
      <creator-id type="integer">17257</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5200</number>
      <permalink>inconsistencies-when-eager-loading-with-fully-qualified-table-names-using-oracle</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>oracle</tag>
      <title>Inconsistencies when eager loading with fully-qualified table names using Oracle</title>
      <updated-at type="datetime">2010-07-27T17:39:53+01:00</updated-at>
      <user-id type="integer">109040</user-id>
      <version type="integer">4</version>
      <user-name>matin</user-name>
      <creator-name>bahuvrihi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5200</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:35:05+00:00</created-at>
      <creator-id type="integer">17257</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5200</number>
      <permalink>inconsistencies-when-eager-loading-with-fully-qualified-table-names-using-oracle</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>oracle</tag>
      <title>Inconsistencies when eager loading with fully-qualified table names using Oracle</title>
      <updated-at type="datetime">2011-02-02T17:08:55+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>bahuvrihi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5200</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:35:07+00:00</created-at>
      <creator-id type="integer">17257</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5200</number>
      <permalink>inconsistencies-when-eager-loading-with-fully-qualified-table-names-using-oracle</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>oracle</tag>
      <title>Inconsistencies when eager loading with fully-qualified table names using Oracle</title>
      <updated-at type="datetime">2011-02-02T17:09:00+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>bahuvrihi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5200</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
