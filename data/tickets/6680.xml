<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-07T02:55:45+01:00</created-at>
  <creator-id type="integer">6902</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6680</number>
  <permalink>has_many-through-_ids-not-passing-conditions-to-sql</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>has_many_through has_many_through_association ids</tag>
  <title>Has_many :through _ids not passing conditions to SQL</title>
  <updated-at type="datetime">2011-04-08T18:22:51+01:00</updated-at>
  <user-id type="integer">6902</user-id>
  <version type="integer">5</version>
  <user-name>Chris Your</user-name>
  <creator-name>Chris Your</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6680</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hi everyone,

First off, I love Rails. It's a fantastic framework.

So on to this possible bug...

Say I have a Book model with many authors through an AuthorAssignment model. The AuthorAssignment model also has an additional boolean column named `featured`.  

    class Book &lt; ActiveRecord::Base
        has_many :author_assignments, :dependent =&gt; :destroy
        has_many :featured_authors, :through =&gt; :author_assignments, :conditions =&gt; &quot;`author_assignments`.featured = 1&quot;
    end

Here is my problem:

When I call:

    @book.featured_author_ids

The expected array of ids is incorrect. I get an array of all the author ids, not just the featured authors. The SQL query doesn't include the condition that `'author_assignments'.featured` must be true.

    SELECT `author_assignments`.author_id FROM `author_assignments` WHERE (`author_assignments`.book_id = 4)

On the other hand, when I fetch the `@book.featured_authors` records:

    @book.featured_authors

The `'author_assignments'.featured` condition is included in the SQL finder and the expected result for records is correct.

Thanks,
Chris</original-body>
  <latest-body>Hi everyone,

First off, I love Rails. It's a fantastic framework.

So on to this possible bug...

Say I have a Book model with many authors through an AuthorAssignment model. The AuthorAssignment model also has an additional boolean column named `featured`.  

    class Book &lt; ActiveRecord::Base
        has_many :author_assignments, :dependent =&gt; :destroy
        has_many :featured_authors, :through =&gt; :author_assignments, :conditions =&gt; &quot;`author_assignments`.featured = 1&quot;
    end

Here is my problem:

When I call:

    @book.featured_author_ids

The expected array of ids is incorrect. I get an array of all the author ids, not just the featured authors. The SQL query doesn't include the condition that `'author_assignments'.featured` must be true.

    SELECT `author_assignments`.author_id FROM `author_assignments` WHERE (`author_assignments`.book_id = 4)

On the other hand, when I fetch the `@book.featured_authors` records:

    @book.featured_authors

The `'author_assignments'.featured` condition is included in the SQL finder and the expected result for records is correct.

Thanks,
Chris</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi everyone,&lt;/p&gt;
&lt;p&gt;First off, I love Rails. It's a fantastic framework.&lt;/p&gt;
&lt;p&gt;So on to this possible bug...&lt;/p&gt;
&lt;p&gt;Say I have a Book model with many authors through an
AuthorAssignment model. The AuthorAssignment model also has an
additional boolean column named &lt;code&gt;featured&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Book &amp;lt; ActiveRecord::Base
    has_many :author_assignments, :dependent =&amp;gt; :destroy
    has_many :featured_authors, :through =&amp;gt; :author_assignments, :conditions =&amp;gt; &quot;`author_assignments`.featured = 1&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here is my problem:&lt;/p&gt;
&lt;p&gt;When I call:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@book.featured_author_ids&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The expected array of ids is incorrect. I get an array of all
the author ids, not just the featured authors. The SQL query
doesn't include the condition that
&lt;code&gt;'author_assignments'.featured&lt;/code&gt; must be true.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT `author_assignments`.author_id FROM `author_assignments` WHERE (`author_assignments`.book_id = 4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;On the other hand, when I fetch the
&lt;code&gt;@book.featured_authors&lt;/code&gt; records:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@book.featured_authors&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;'author_assignments'.featured&lt;/code&gt; condition is
included in the SQL finder and the expected result for records is
correct.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
Chris&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi everyone,

First off, I love Rails. It's a fantastic framework.

So on to this possible bug...

Say I have a Book model with many authors through an AuthorAssignment model. The AuthorAssignment model also has an additional boolean column named `featured`.  

    class Book &lt; ActiveRecord::Base
        has_many :author_assignments, :dependent =&gt; :destroy
        has_many :featured_authors, :through =&gt; :author_assignments, :conditions =&gt; &quot;`author_assignments`.featured = 1&quot;
    end

Here is my problem:

When I call:

    @book.featured_author_ids

The expected array of ids is incorrect. I get an array of all the author ids, not just the featured authors. The SQL query doesn't include the condition that `'author_assignments'.featured` must be true.

    SELECT `author_assignments`.author_id FROM `author_assignments` WHERE (`author_assignments`.book_id = 4)

On the other hand, when I fetch the `@book.featured_authors` records:

    @book.featured_authors

The `'author_assignments'.featured` condition is included in the SQL finder and the expected result for records is correct.

Thanks,
Chris</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi everyone,&lt;/p&gt;
&lt;p&gt;First off, I love Rails. It's a fantastic framework.&lt;/p&gt;
&lt;p&gt;So on to this possible bug...&lt;/p&gt;
&lt;p&gt;Say I have a Book model with many authors through an
AuthorAssignment model. The AuthorAssignment model also has an
additional boolean column named &lt;code&gt;featured&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Book &amp;lt; ActiveRecord::Base
    has_many :author_assignments, :dependent =&amp;gt; :destroy
    has_many :featured_authors, :through =&amp;gt; :author_assignments, :conditions =&amp;gt; &quot;`author_assignments`.featured = 1&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here is my problem:&lt;/p&gt;
&lt;p&gt;When I call:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@book.featured_author_ids&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The expected array of ids is incorrect. I get an array of all
the author ids, not just the featured authors. The SQL query
doesn't include the condition that
&lt;code&gt;'author_assignments'.featured&lt;/code&gt; must be true.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT `author_assignments`.author_id FROM `author_assignments` WHERE (`author_assignments`.book_id = 4)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;On the other hand, when I fetch the
&lt;code&gt;@book.featured_authors&lt;/code&gt; records:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@book.featured_authors&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;'author_assignments'.featured&lt;/code&gt; condition is
included in the SQL finder and the expected result for records is
correct.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
Chris&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-07T02:55:45+01:00</created-at>
      <creator-id type="integer">6902</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6680</number>
      <permalink>has_many-through-_ids-not-passing-conditions-to-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>has_many_through has_many_through_association ids</tag>
      <title>Has_many :through _ids not passing conditions to SQL</title>
      <updated-at type="datetime">2011-04-07T02:55:47+01:00</updated-at>
      <user-id type="integer">6902</user-id>
      <version type="integer">1</version>
      <user-name>Chris Your</user-name>
      <creator-name>Chris Your</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6680</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I took a look at ActiveRecord-3.0.6 in associations.rb `redefine_method(&quot;#{reflection.name.to_s.singularize}_ids&quot;)` on line 1492. As far as I can see, the _ids method on the `has_many :through` association creates the finder on the through model like this (around line 1500:

    send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).map! { |r| r.send(primary_key) }

I can easily add an if condition that looks for the `:conditions` option on the reflection and add the `where` conditions like this:

    if reflection.options[:conditions]
        send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).where(reflection.options[:conditions]).map! { |r| r.send(primary_key) }
    else
        send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).map! { |r| r.send(primary_key) }
    end

But I'm sure there's a Rails way of doing this kind of thing.

Any help to get this patched would be appreciated.

Thanks,
Chris</body>
      <body-html>&lt;div&gt;&lt;p&gt;I took a look at ActiveRecord-3.0.6 in associations.rb
&lt;code&gt;redefine_method(&quot;#{reflection.name.to_s.singularize}_ids&quot;)&lt;/code&gt;
on line 1492. As far as I can see, the _ids method on the
&lt;code&gt;has_many :through&lt;/code&gt; association creates the finder on
the through model like this (around line 1500:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).map! { |r| r.send(primary_key) }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I can easily add an if condition that looks for the
&lt;code&gt;:conditions&lt;/code&gt; option on the reflection and add the
&lt;code&gt;where&lt;/code&gt; conditions like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if reflection.options[:conditions]
    send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).where(reflection.options[:conditions]).map! { |r| r.send(primary_key) }
else
    send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).map! { |r| r.send(primary_key) }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But I'm sure there's a Rails way of doing this kind of
thing.&lt;/p&gt;
&lt;p&gt;Any help to get this patched would be appreciated.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
Chris&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-08T16:21:13+01:00</created-at>
      <creator-id type="integer">6902</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6680</number>
      <permalink>has_many-through-_ids-not-passing-conditions-to-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>has_many_through has_many_through_association ids</tag>
      <title>Has_many :through _ids not passing conditions to SQL</title>
      <updated-at type="datetime">2011-04-08T16:21:18+01:00</updated-at>
      <user-id type="integer">6902</user-id>
      <version type="integer">2</version>
      <user-name>Chris Your</user-name>
      <creator-name>Chris Your</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6680</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think you should look at master not v3.0.6 if you want to create a pathc.
CollectionAssociation#reader_ids:
@@@ ruby
  column  = &quot;#{reflection.quoted_table_name}.#{reflection.association_primary_key}&quot;
  scoped.select(column).except(:includes).map! do |record|
    record.send(reflection.association_primary_key)
  end
@@@
Maybe scoped already has conditions?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think you should look at master not v3.0.6 if you want to
create a pathc.&lt;br&gt;
CollectionAssociation#reader_ids:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  column  = &quot;#{reflection.quoted_table_name}.#{reflection.association_primary_key}&quot;
  scoped.select(column).except(:includes).map! do |record|
    record.send(reflection.association_primary_key)
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Maybe scoped already has conditions?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-08T16:55:48+01:00</created-at>
      <creator-id type="integer">6902</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6680</number>
      <permalink>has_many-through-_ids-not-passing-conditions-to-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>has_many_through has_many_through_association ids</tag>
      <title>Has_many :through _ids not passing conditions to SQL</title>
      <updated-at type="datetime">2011-04-08T16:55:51+01:00</updated-at>
      <user-id type="integer">87216</user-id>
      <version type="integer">3</version>
      <user-name>Anatoliy Lysenko</user-name>
      <creator-name>Chris Your</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6680</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Anatoliy,

Thanks for the advice. I haven't contributed to Rails' source before...

Scoped on the `through` object's reflection doesn't have the `where` conditions - the conditions are on the `reflection` object's reflection. If that makes sense.

I wish I knew more about reflections and Arel. I'm learning as I dig through this source though. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Anatoliy,&lt;/p&gt;
&lt;p&gt;Thanks for the advice. I haven't contributed to Rails' source
before...&lt;/p&gt;
&lt;p&gt;Scoped on the &lt;code&gt;through&lt;/code&gt; object's reflection doesn't
have the &lt;code&gt;where&lt;/code&gt; conditions - the conditions are on the
&lt;code&gt;reflection&lt;/code&gt; object's reflection. If that makes
sense.&lt;/p&gt;
&lt;p&gt;I wish I knew more about reflections and Arel. I'm learning as I
dig through this source though. :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-08T17:12:31+01:00</created-at>
      <creator-id type="integer">6902</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6680</number>
      <permalink>has_many-through-_ids-not-passing-conditions-to-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>has_many_through has_many_through_association ids</tag>
      <title>Has_many :through _ids not passing conditions to SQL</title>
      <updated-at type="datetime">2011-04-08T17:12:36+01:00</updated-at>
      <user-id type="integer">6902</user-id>
      <version type="integer">4</version>
      <user-name>Chris Your</user-name>
      <creator-name>Chris Your</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6680</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I took a look at Rails Master. Looks awesome. Lots of changes.

I'll have to checkout master to see if the CollectionAssociation#reader_ids fixes this little bit of missing functionality in 3.0.6.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I took a look at Rails Master. Looks awesome. Lots of
changes.&lt;/p&gt;
&lt;p&gt;I'll have to checkout master to see if the
CollectionAssociation#reader_ids fixes this little bit of missing
functionality in 3.0.6.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-08T18:22:44+01:00</created-at>
      <creator-id type="integer">6902</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6680</number>
      <permalink>has_many-through-_ids-not-passing-conditions-to-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>has_many_through has_many_through_association ids</tag>
      <title>Has_many :through _ids not passing conditions to SQL</title>
      <updated-at type="datetime">2011-04-08T18:22:51+01:00</updated-at>
      <user-id type="integer">6902</user-id>
      <version type="integer">5</version>
      <user-name>Chris Your</user-name>
      <creator-name>Chris Your</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6680</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
