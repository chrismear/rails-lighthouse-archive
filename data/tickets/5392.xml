<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-03-03T09:20:19+00:00</created-at>
  <creator-id type="integer">53804</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">5392</number>
  <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
  <priority type="integer">1</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
  <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
  <updated-at type="datetime">2011-05-05T03:02:39+01:00</updated-at>
  <user-id type="integer">148049</user-id>
  <version type="integer">23</version>
  <user-name>af001</user-name>
  <creator-name>Richard Adams</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>High</priority-name>
  <original-body>On both Rails 3.0.0.rc and edge, every single request made by an active record object to a PostgreSQL database im getting this very time consuming sql statement

@@@
SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;table_name&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum
@@@

which i believe is something to do with the column_definitions method in the Postgresql Adapter, also i think its has something to do with #4991

below is part of the development logs 

@@@

SQL (1.3ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

User Load (0.5ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (&quot;users&quot;.&quot;id&quot; = 1) LIMIT 1

SQL (1.0ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

SQL (1.1ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;sections&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

Section Load (0.5ms)  SELECT &quot;sections&quot;.&quot;id&quot;, &quot;sections&quot;.&quot;name&quot;, &quot;sections&quot;.&quot;title&quot;, &quot;sections&quot;.&quot;description&quot; FROM &quot;sections&quot; WHERE (&quot;sections&quot;.&quot;id&quot; = 1) LIMIT 1
  
SQL (1.1ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;sections&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum
@@@

Sorry i cant be anymore help to you guys</original-body>
  <latest-body>On both Rails 3.0.0.rc and edge, every single request made by an active record object to a PostgreSQL database im getting this very time consuming sql statement

@@@
SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;table_name&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum
@@@

which i believe is something to do with the column_definitions method in the Postgresql Adapter, also i think its has something to do with #4991

below is part of the development logs 

@@@

SQL (1.3ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

User Load (0.5ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (&quot;users&quot;.&quot;id&quot; = 1) LIMIT 1

SQL (1.0ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

SQL (1.1ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;sections&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

Section Load (0.5ms)  SELECT &quot;sections&quot;.&quot;id&quot;, &quot;sections&quot;.&quot;name&quot;, &quot;sections&quot;.&quot;title&quot;, &quot;sections&quot;.&quot;description&quot; FROM &quot;sections&quot; WHERE (&quot;sections&quot;.&quot;id&quot; = 1) LIMIT 1
  
SQL (1.1ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;sections&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum
@@@

Sorry i cant be anymore help to you guys</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;On both Rails 3.0.0.rc and edge, every single request made by an
active record object to a PostgreSQL database im getting this very
time consuming sql statement&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;table_name&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;which i believe is something to do with the column_definitions
method in the Postgresql Adapter, also i think its has something to
do with &lt;a href=&quot;/projects/8994/tickets/4991&quot; title=
&quot;Ticket #4991&quot;&gt;#4991&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;below is part of the development logs&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
SQL (1.3ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

User Load (0.5ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (&quot;users&quot;.&quot;id&quot; = 1) LIMIT 1

SQL (1.0ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

SQL (1.1ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;sections&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

Section Load (0.5ms)  SELECT &quot;sections&quot;.&quot;id&quot;, &quot;sections&quot;.&quot;name&quot;, &quot;sections&quot;.&quot;title&quot;, &quot;sections&quot;.&quot;description&quot; FROM &quot;sections&quot; WHERE (&quot;sections&quot;.&quot;id&quot; = 1) LIMIT 1
  
SQL (1.1ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;sections&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Sorry i cant be anymore help to you guys&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>On both Rails 3.0.0.rc and edge, every single request made by an active record object to a PostgreSQL database im getting this very time consuming sql statement

@@@
SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;table_name&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum
@@@

which i believe is something to do with the column_definitions method in the Postgresql Adapter, also i think its has something to do with #4991

below is part of the development logs 

@@@

SQL (1.3ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

User Load (0.5ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (&quot;users&quot;.&quot;id&quot; = 1) LIMIT 1

SQL (1.0ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

SQL (1.1ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;sections&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

Section Load (0.5ms)  SELECT &quot;sections&quot;.&quot;id&quot;, &quot;sections&quot;.&quot;name&quot;, &quot;sections&quot;.&quot;title&quot;, &quot;sections&quot;.&quot;description&quot; FROM &quot;sections&quot; WHERE (&quot;sections&quot;.&quot;id&quot; = 1) LIMIT 1
  
SQL (1.1ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;sections&quot;'::regclass
AND a.attnum &gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum
@@@

Sorry i cant be anymore help to you guys</body>
      <body-html>&lt;div&gt;&lt;p&gt;On both Rails 3.0.0.rc and edge, every single request made by an
active record object to a PostgreSQL database im getting this very
time consuming sql statement&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;table_name&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;which i believe is something to do with the column_definitions
method in the Postgresql Adapter, also i think its has something to
do with &lt;a href=&quot;/projects/8994/tickets/4991&quot; title=
&quot;Ticket #4991&quot;&gt;#4991&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;below is part of the development logs&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
SQL (1.3ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

User Load (0.5ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (&quot;users&quot;.&quot;id&quot; = 1) LIMIT 1

SQL (1.0ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

SQL (1.1ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;sections&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

Section Load (0.5ms)  SELECT &quot;sections&quot;.&quot;id&quot;, &quot;sections&quot;.&quot;name&quot;, &quot;sections&quot;.&quot;title&quot;, &quot;sections&quot;.&quot;description&quot; FROM &quot;sections&quot; WHERE (&quot;sections&quot;.&quot;id&quot; = 1) LIMIT 1
  
SQL (1.1ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;sections&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Sorry i cant be anymore help to you guys&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-17T12:28:06+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-08-17T16:35:48+01:00</updated-at>
      <user-id type="integer">53804</user-id>
      <version type="integer">1</version>
      <user-name>Richard Adams</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am seeing this too on RC. It's a real performance problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am seeing this too on RC. It's a real performance problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-26T15:27:06+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-08-26T15:27:10+01:00</updated-at>
      <user-id type="integer">3357</user-id>
      <version type="integer">2</version>
      <user-name>Brandon Keene</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I got the same problem after switching to Rails 3.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I got the same problem after switching to Rails 3.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T08:30:15+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-08-27T08:30:16+01:00</updated-at>
      <user-id type="integer">22106</user-id>
      <version type="integer">3</version>
      <user-name>Szymon Nowak</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I can cofirm that I see the same problem with rc2 in production mode using Ruby 1.9.2.p0 and pg 0.9.0.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can cofirm that I see the same problem with rc2 in production
mode using Ruby 1.9.2.p0 and pg 0.9.0.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T09:38:44+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-08-27T09:38:45+01:00</updated-at>
      <user-id type="integer">20686</user-id>
      <version type="integer">4</version>
      <user-name>Tor Erik</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry, that was supposed to be in development mode. When cache_classes = true, they only appear once.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry, that was supposed to be in development mode. When
cache_classes = true, they only appear once.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T10:16:37+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-08-27T10:16:39+01:00</updated-at>
      <user-id type="integer">20686</user-id>
      <version type="integer">5</version>
      <user-name>Tor Erik</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This works as expected

    User.first
   
    User Load (0.5ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN &quot;countries&quot; 
    ON &quot;countries&quot;.&quot;id&quot; =  &quot;users&quot;.&quot;country_id&quot; LIMIT 1

This however, does not: 
   
    User.joins(:country).first
    
    SQL (0.6ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), 
      d.adsrc, a.attnotnull
    FROM pg_attribute a LEFT JOIN pg_attrdef d
    ON a.attrelid = d.adrelid AND a.attnum = d.adnum
    WHERE a.attrelid = '&quot;countries&quot;'::regclass
    AND a.attnum &gt; 0 AND NOT a.attisdropped
    ORDER BY a.attnum

    SQL (0.7ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), 
      d.adsrc, a.attnotnull
    FROM pg_attribute a LEFT JOIN pg_attrdef d
    ON a.attrelid = d.adrelid AND a.attnum = d.adnum
    WHERE a.attrelid = '&quot;users&quot;'::regclass
    AND a.attnum &gt; 0 AND NOT a.attisdropped
    ORDER BY a.attnum

    SQL (0.7ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), 
      d.adsrc, a.attnotnull
    FROM pg_attribute a LEFT JOIN pg_attrdef d
    ON a.attrelid = d.adrelid AND a.attnum = d.adnum
    WHERE a.attrelid = '&quot;countries&quot;'::regclass
    AND a.attnum &gt; 0 AND NOT a.attisdropped
    ORDER BY a.attnum

    User Load (0.5ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN &quot;countries&quot; ON 
    &quot;countries&quot;.&quot;id&quot; = &quot;users&quot;.&quot;country_id&quot; LIMIT 1

The above repeats every time I run the command on the console, not just the first time.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This works as expected&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;User.first

User Load (0.5ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN &quot;countries&quot; 
ON &quot;countries&quot;.&quot;id&quot; =  &quot;users&quot;.&quot;country_id&quot; LIMIT 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This however, does not:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;User.joins(:country).first

SQL (0.6ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), 
  d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;countries&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

SQL (0.7ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), 
  d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;users&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

SQL (0.7ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), 
  d.adsrc, a.attnotnull
FROM pg_attribute a LEFT JOIN pg_attrdef d
ON a.attrelid = d.adrelid AND a.attnum = d.adnum
WHERE a.attrelid = '&quot;countries&quot;'::regclass
AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
ORDER BY a.attnum

User Load (0.5ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN &quot;countries&quot; ON 
&quot;countries&quot;.&quot;id&quot; = &quot;users&quot;.&quot;country_id&quot; LIMIT 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above repeats every time I run the command on the console,
not just the first time.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T10:51:37+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-08-27T10:51:39+01:00</updated-at>
      <user-id type="integer">20686</user-id>
      <version type="integer">6</version>
      <user-name>Tor Erik</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Guys, have you tried running the same queries in production environment? It seems that Rails is properly caching column info there and these queries don't show up anymore every time.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Guys, have you tried running the same queries in production
environment? It seems that Rails is properly caching column info
there and these queries don't show up anymore every time.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T13:28:51+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-08-27T13:28:52+01:00</updated-at>
      <user-id type="integer">22106</user-id>
      <version type="integer">7</version>
      <user-name>Szymon Nowak</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sure we tried.

@@@
SQL (0.9ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;orders&quot;'::regclass
 AND a.attnum &gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum

  SQL (2.5ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;orders&quot;'::regclass
 AND a.attnum &gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum
  Order Load (1.1ms)  SELECT &quot;orders&quot;.* FROM &quot;orders&quot; WHERE (&quot;orders&quot;.&quot;closed&quot; = 'f') AND (&quot;orders&quot;.&quot;cancelled&quot; = 'f')
Rendered reservations/_order.html.erb (28.3ms)
  Court Load (0.7ms)  SELECT &quot;courts&quot;.* FROM &quot;courts&quot; WHERE (&quot;courts&quot;.sport_id = 1) ORDER BY courts.number ASC
  SQL (0.8ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;items&quot;'::regclass
 AND a.attnum &gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum

  Item Load (0.5ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot; WHERE (&quot;items&quot;.&quot;favourite&quot; = 't')
  SQL (1.4ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;items&quot;'::regclass
 AND a.attnum &gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum

  Item Load (1.2ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot; WHERE (&quot;items&quot;.&quot;favourite&quot; = 'f') ORDER BY id ASC
@@@
and so on....
This is really performance issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sure we tried.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQL (0.9ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;orders&quot;'::regclass
 AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum

  SQL (2.5ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;orders&quot;'::regclass
 AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum
  Order Load (1.1ms)  SELECT &quot;orders&quot;.* FROM &quot;orders&quot; WHERE (&quot;orders&quot;.&quot;closed&quot; = 'f') AND (&quot;orders&quot;.&quot;cancelled&quot; = 'f')
Rendered reservations/_order.html.erb (28.3ms)
  Court Load (0.7ms)  SELECT &quot;courts&quot;.* FROM &quot;courts&quot; WHERE (&quot;courts&quot;.sport_id = 1) ORDER BY courts.number ASC
  SQL (0.8ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;items&quot;'::regclass
 AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum

  Item Load (0.5ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot; WHERE (&quot;items&quot;.&quot;favourite&quot; = 't')
  SQL (1.4ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;items&quot;'::regclass
 AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum

  Item Load (1.2ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot; WHERE (&quot;items&quot;.&quot;favourite&quot; = 'f') ORDER BY id ASC&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and so on....&lt;br&gt;
This is really performance issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-02T02:58:25+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-09-02T02:58:28+01:00</updated-at>
      <user-id type="integer">99505</user-id>
      <version type="integer">8</version>
      <user-name>MikZ</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I can also confirm this problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can also confirm this problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-09T18:18:53+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-09-09T18:18:54+01:00</updated-at>
      <user-id type="integer">1543</user-id>
      <version type="integer">9</version>
      <user-name>Rodrigo Kochenburger</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, it seems to happen only in development but still very annoying. Some pages involving a greater number of queries takes almost 5 seconds to render!!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, it seems to happen only in development but still very
annoying. Some pages involving a greater number of queries takes
almost 5 seconds to render!!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-09T18:25:28+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-09-09T18:25:32+01:00</updated-at>
      <user-id type="integer">1543</user-id>
      <version type="integer">10</version>
      <user-name>Rodrigo Kochenburger</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We diagnosed it only happens when Arel fetches columns independently of ActiveRecord. In AR table columns are memoised in @@@ActiveRecord::Base#columns@@@, so only the first invocation will trigger a database query. Arel also supports memoisation in its @@@Arel::Table#columns@@@ method, but it doesn't seem to work in some cases.

Consider this example:

@@@
&gt; User.first
&gt; User.last
@@@
The first query will fetch U@@@ser#columns@@@ and subsequent calls will not run it again, as expected. Let's try a different model:

@@@
&gt; Score.first
&gt; Score.last
@@@

Same story, Score#columns is memoised and no further calls to the database are made to fetch attributes.

The problem arises when Arel tries to reference other columns internally. Consider this query:

@@@
&gt; User.joins(:scores)
@@@

The join is handled by Arel, not by ActiveRecord (@@@Score#columns@@@ is never called). Arel creates a new Table object to check the attributes of the scores table (by calling @@@table = Arel::Table.new(:scores)@@@) and in that call, all calls to table.columns are memoised. You'd expect that when you run @@@User.joins(:scores)@@@ again everything is returned from memory without any unnecessary database calls. This isn't the case though. Arel initialises the table again by calling @@@Arel::Table#new@@@ and previously cached columns are lost.</body>
      <body-html>&lt;div&gt;&lt;p&gt;We diagnosed it only happens when Arel fetches columns
independently of ActiveRecord. In AR table columns are memoised in
@@@ActiveRecord::Base#columns@@@, so only the first invocation will
trigger a database query. Arel also supports memoisation in its
@@@Arel::Table#columns@@@ method, but it doesn't seem to work in
some cases.&lt;/p&gt;
&lt;p&gt;Consider this example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; User.first
&amp;gt; User.last&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first query will fetch U@@@ser#columns@@@ and subsequent
calls will not run it again, as expected. Let's try a different
model:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; Score.first
&amp;gt; Score.last&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Same story, Score#columns is memoised and no further calls to
the database are made to fetch attributes.&lt;/p&gt;
&lt;p&gt;The problem arises when Arel tries to reference other columns
internally. Consider this query:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; User.joins(:scores)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The join is handled by Arel, not by ActiveRecord
(@@@Score#columns@@@ is never called). Arel creates a new Table
object to check the attributes of the scores table (by calling
@@@table = Arel::Table.new(:scores)@@@) and in that call, all calls
to table.columns are memoised. You'd expect that when you run
@@@User.joins(:scores)@@@ again everything is returned from memory
without any unnecessary database calls. This isn't the case though.
Arel initialises the table again by calling @@@Arel::Table#new@@@
and previously cached columns are lost.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-21T10:37:51+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-09-21T10:37:54+01:00</updated-at>
      <user-id type="integer">68885</user-id>
      <version type="integer">11</version>
      <user-name>Mateusz Dro&#380;d&#380;y&#324;ski</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We diagnosed it only happens when Arel fetches columns independently of ActiveRecord. In AR table columns are memoised in &lt;code&gt;ActiveRecord::Base#columns&lt;/code&gt;, so only the first invocation will trigger a database query. Arel also supports memoisation in its &lt;code&gt;Arel::Table#columns&lt;/code&gt; method, but it doesn't seem to work in some cases.

Consider this example:

@@@
&gt; User.first
&gt; User.last
@@@
The first query will fetch &lt;code&gt;User#columns&lt;/code&gt; and subsequent calls will not run it again, as expected. Let's try a different model:

@@@
&gt; Score.first
&gt; Score.last
@@@

Same story, &lt;code&gt;Score#columns&lt;/code&gt; is memoised and no further calls to the database are made to fetch attributes.

The problem arises when Arel tries to reference other columns internally. Consider this query:

@@@
&gt; User.joins(:scores)
@@@

The join is handled by Arel, not by ActiveRecord (&lt;code&gt;Score#columns&lt;/code&gt; is never called). Arel creates a new Table object to check the attributes of the scores table (by calling &lt;code&gt;table = Arel::Table.new(:scores)&lt;/code&gt;) and in that call, all calls to table.columns are memoised. You'd expect that when you run &lt;code&gt;User.joins(:scores)&lt;/code&gt; again everything is returned from memory without any unnecessary database calls. This isn't the case though. Arel initialises the table again by calling &lt;code&gt;Arel::Table#new&lt;/code&gt; and previously cached columns are lost.

PS. Sorry for the previous post, formatting went out of control ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;We diagnosed it only happens when Arel fetches columns
independently of ActiveRecord. In AR table columns are memoised in
&lt;code&gt;ActiveRecord::Base#columns&lt;/code&gt;, so only the first
invocation will trigger a database query. Arel also supports
memoisation in its &lt;code&gt;Arel::Table#columns&lt;/code&gt; method, but it
doesn't seem to work in some cases.&lt;/p&gt;
&lt;p&gt;Consider this example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; User.first
&amp;gt; User.last&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first query will fetch &lt;code&gt;User#columns&lt;/code&gt; and
subsequent calls will not run it again, as expected. Let's try a
different model:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; Score.first
&amp;gt; Score.last&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Same story, &lt;code&gt;Score#columns&lt;/code&gt; is memoised and no
further calls to the database are made to fetch attributes.&lt;/p&gt;
&lt;p&gt;The problem arises when Arel tries to reference other columns
internally. Consider this query:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; User.joins(:scores)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The join is handled by Arel, not by ActiveRecord
(&lt;code&gt;Score#columns&lt;/code&gt; is never called). Arel creates a new
Table object to check the attributes of the scores table (by
calling &lt;code&gt;table = Arel::Table.new(:scores)&lt;/code&gt;) and in that
call, all calls to table.columns are memoised. You'd expect that
when you run &lt;code&gt;User.joins(:scores)&lt;/code&gt; again everything is
returned from memory without any unnecessary database calls. This
isn't the case though. Arel initialises the table again by calling
&lt;code&gt;Arel::Table#new&lt;/code&gt; and previously cached columns are
lost.&lt;/p&gt;
&lt;p&gt;PS. Sorry for the previous post, formatting went out of control
;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-21T10:40:40+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-09-21T10:40:43+01:00</updated-at>
      <user-id type="integer">68885</user-id>
      <version type="integer">12</version>
      <user-name>Mateusz Dro&#380;d&#380;y&#324;ski</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Aaron, could you please take a look? Internet hugs!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Aaron, could you please take a look? Internet hugs!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-21T11:04:26+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-09-21T11:04:29+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">13</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [96bd936b64ae06d4c38e8de862521e22d7c809b9]) providing arel with column information when possible [#5392 state:resolved]
http://github.com/rails/rails/commit/96bd936b64ae06d4c38e8de862521e22d7c809b9</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/96bd936b64ae06d4c38e8de862521e22d7c809b9&quot;
title=
&quot;Changeset [96bd936b64ae06d4c38e8de862521e22d7c809b9]&quot;&gt;[96bd936b64ae06d4c38e8de862521e22d7c809b9]&lt;/a&gt;)
providing arel with column information when possible [&lt;a href=
&quot;/projects/8994/tickets/5392&quot; title=&quot;Ticket #5392&quot;&gt;#5392&lt;/a&gt;
state:resolved] &lt;a href=
&quot;http://github.com/rails/rails/commit/96bd936b64ae06d4c38e8de862521e22d7c809b9&quot;&gt;
http://github.com/rails/rails/commit/96bd936b64ae06d4c38e8de862521e...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-21T21:54:03+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-09-21T21:54:05+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">14</version>
      <user-name>Repository</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [a0fc2f7b74e5637b37c66571afe7ca67069d0dda]) providing arel with column information when possible [#5392 state:resolved]
http://github.com/rails/rails/commit/a0fc2f7b74e5637b37c66571afe7ca67069d0dda</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/a0fc2f7b74e5637b37c66571afe7ca67069d0dda&quot;
title=
&quot;Changeset [a0fc2f7b74e5637b37c66571afe7ca67069d0dda]&quot;&gt;[a0fc2f7b74e5637b37c66571afe7ca67069d0dda]&lt;/a&gt;)
providing arel with column information when possible [&lt;a href=
&quot;/projects/8994/tickets/5392&quot; title=&quot;Ticket #5392&quot;&gt;#5392&lt;/a&gt;
state:resolved] &lt;a href=
&quot;http://github.com/rails/rails/commit/a0fc2f7b74e5637b37c66571afe7ca67069d0dda&quot;&gt;
http://github.com/rails/rails/commit/a0fc2f7b74e5637b37c66571afe7ca...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-21T21:54:04+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-09-21T21:54:06+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">15</version>
      <user-name>Repository</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:02:00+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 82861
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2010-10-15T23:02:00+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">16</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello,

I'm seeing this again on Rails 3.0.4. It seems for each SQL request, a column definition request is added. (in devel mode, with cache_classes = false)

@@@
  User Load (0.4ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = 1 LIMIT 1
session2observer at /Users/Jens/Sites/dor-bort/app/controllers/application_controller.rb:138)
  Continent Load (0.3ms)  SELECT &quot;continents&quot;.* FROM &quot;continents&quot;
  SQL (0.6ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;continents&quot;'::regclass
 AND a.attnum &gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum
  Thing Load (0.6ms)  SELECT &quot;things&quot;.* FROM &quot;things&quot; WHERE (&quot;things&quot;.&quot;locateable_id&quot; IN (1,2,3,4,5) and &quot;things&quot;.&quot;locateable_type&quot; = 'Continent')
  SQL (0.7ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;things&quot;'::regclass
 AND a.attnum &gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum
  Country Load (1.2ms)  SELECT &quot;countries&quot;.* FROM &quot;countries&quot; WHERE (&quot;countries&quot;.continent_id IN (1,2,3,4,5))
  SQL (1.0ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;countries&quot;'::regclass
 AND a.attnum &gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I'm seeing this again on Rails 3.0.4. It seems for each SQL
request, a column definition request is added. (in devel mode, with
cache_classes = false)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  User Load (0.4ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = 1 LIMIT 1
session2observer at /Users/Jens/Sites/dor-bort/app/controllers/application_controller.rb:138)
  Continent Load (0.3ms)  SELECT &quot;continents&quot;.* FROM &quot;continents&quot;
  SQL (0.6ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;continents&quot;'::regclass
 AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum
  Thing Load (0.6ms)  SELECT &quot;things&quot;.* FROM &quot;things&quot; WHERE (&quot;things&quot;.&quot;locateable_id&quot; IN (1,2,3,4,5) and &quot;things&quot;.&quot;locateable_type&quot; = 'Continent')
  SQL (0.7ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;things&quot;'::regclass
 AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum
  Country Load (1.2ms)  SELECT &quot;countries&quot;.* FROM &quot;countries&quot; WHERE (&quot;countries&quot;.continent_id IN (1,2,3,4,5))
  SQL (1.0ms)   SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull
 FROM pg_attribute a LEFT JOIN pg_attrdef d
 ON a.attrelid = d.adrelid AND a.attnum = d.adnum
 WHERE a.attrelid = '&quot;countries&quot;'::regclass
 AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
 ORDER BY a.attnum&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-27T14:34:05+00:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2011-02-27T14:34:25+00:00</updated-at>
      <user-id type="integer">81520</user-id>
      <version type="integer">17</version>
      <user-name>Jens</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I just discovered the silent-postgres gem, that deals with this problem by silencing those boilerplate lines:
https://github.com/dolzenko/silent-postgres</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just discovered the silent-postgres gem, that deals with this
problem by silencing those boilerplate lines:&lt;br&gt;
&lt;a href=
&quot;https://github.com/dolzenko/silent-postgres&quot;&gt;https://github.com/dolzenko/silent-postgres&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-01T11:58:19+00:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2011-03-01T11:58:37+00:00</updated-at>
      <user-id type="integer">20869</user-id>
      <version type="integer">18</version>
      <user-name>Paul Gideon Dann</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Well, is it really a good idea to silence these lines, or would the correct way be to _prevent_ those requests from being made?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well, is it really a good idea to silence these lines, or would
the correct way be to &lt;em&gt;prevent&lt;/em&gt; those requests from being
made?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-02T06:09:22+00:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2011-03-02T06:09:42+00:00</updated-at>
      <user-id type="integer">81520</user-id>
      <version type="integer">19</version>
      <user-name>Jens</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm pretty sure those requests are deliberate in development and testing environments.  I think it's something to do with the fact that caching is disabled in those environments, so the postgres driver can't assume that the schema won't change.  I may have assumed wrong, though.  It could be worth playing around with the caching settings, to see if the queries go away.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm pretty sure those requests are deliberate in development and
testing environments. I think it's something to do with the fact
that caching is disabled in those environments, so the postgres
driver can't assume that the schema won't change. I may have
assumed wrong, though. It could be worth playing around with the
caching settings, to see if the queries go away.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-02T09:27:27+00:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2011-03-02T09:27:45+00:00</updated-at>
      <user-id type="integer">20869</user-id>
      <version type="integer">20</version>
      <user-name>Paul Gideon Dann</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, they go away when I set config.cache_classes to true. Also, requests are much faster. So it does seem to be a caching issue.

But IMHO it's also a performance issue, even for development. My example request:

with caching enabled: Completed 200 OK in 436ms (Views: 332.1ms | ActiveRecord: 69.6ms)

without caching: Completed 200 OK in 2257ms (Views: 1146.8ms | ActiveRecord: 875.1ms)

So Rails spends more than ten times as much time with class caching enabled compared to disabled doing database queries?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, they go away when I set config.cache_classes to true. Also,
requests are much faster. So it does seem to be a caching
issue.&lt;/p&gt;
&lt;p&gt;But IMHO it's also a performance issue, even for development. My
example request:&lt;/p&gt;
&lt;p&gt;with caching enabled: Completed 200 OK in 436ms (Views: 332.1ms
| ActiveRecord: 69.6ms)&lt;/p&gt;
&lt;p&gt;without caching: Completed 200 OK in 2257ms (Views: 1146.8ms |
ActiveRecord: 875.1ms)&lt;/p&gt;
&lt;p&gt;So Rails spends more than ten times as much time with class
caching enabled compared to disabled doing database queries?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-02T20:06:08+00:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2011-03-02T20:06:26+00:00</updated-at>
      <user-id type="integer">81520</user-id>
      <version type="integer">21</version>
      <user-name>Jens</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach outlet&lt;/a&gt; are not only a place to hold your necessities, but are also a potential investment in image and functionality. If fashions never changed, with renowned Coach durability, their handbags could be used for a lifetime, this designer price is worth the cost in quality. 
The hard transport,&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach outlet&lt;/a&gt;  providing a mightily pleasing look at. Prepare bags are typically excluding hot property than handbags diffuse through other else designers, they still might be high grace, nevertheless Break In Purses are all bags are)! Although the bags start totes on Exercise Bags, you&#8217;re express out-and-out might assessment drill animation sale more than a,&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach outlet online&lt;/a&gt; some customers are express to gravy. Develop bags are sometimes replicated because of the attractiveness and disconcerted-reaching. When you see the Form Kristin OP Prowess Objection affect Hobo Handbags Eponym trademark marking on auction are labeled into 3 painless categories: diminutive, medium, and many types of The proposal normally begins companionless the method of designs.&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach clearance&lt;/a&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach outlet&lt;/a&gt; are not
only a place to hold your necessities, but are also a potential
investment in image and functionality. If fashions never changed,
with renowned Coach durability, their handbags could be used for a
lifetime, this designer price is worth the cost in quality.&lt;br&gt;
The hard transport,&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach
outlet&lt;/a&gt; providing a mightily pleasing look at. Prepare bags are
typically excluding hot property than handbags diffuse through
other else designers, they still might be high grace, nevertheless
Break In Purses are all bags are)! Although the bags start totes on
Exercise Bags, you&amp;#8217;re express out-and-out might assessment
drill animation sale more than a,&lt;a href=
&quot;http://www.incoachoutlet.com/&quot;&gt;coach outlet online&lt;/a&gt; some
customers are express to gravy. Develop bags are sometimes
replicated because of the attractiveness and disconcerted-reaching.
When you see the Form Kristin OP Prowess Objection affect Hobo
Handbags Eponym trademark marking on auction are labeled into 3
painless categories: diminutive, medium, and many types of The
proposal normally begins companionless the method of
designs.&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach
clearance&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-03T07:59:00+00:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2011-03-03T09:20:19+00:00</updated-at>
      <user-id type="integer">139624</user-id>
      <version type="integer">22</version>
      <user-name>cheap coach bags</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&#31169;&#12398;&#20013;&#12391;&#12289;&#32207;&#21512;&#35413;&#20385;&#12398;&#12392;&#12387;&#12390;&#12418;&#20302;&#12356;&#12450;&#12496;&lt;a href=&quot;http://www.abakuro.co.jp/&quot; rel=&quot;dofollow&quot;&gt;&lt;b&gt;&#12450;&#12496;&#12463;&#12525;&#12507;&#12522;&#12473;&#12479;&#12540;&lt;/b&gt;&lt;/a&gt;&#12463;&#12525;&#37504;&#24231;&#24215;&#12290;&#12450;&#12496;&#12463;&#12525;&#12399;&#22823;&#22909;&#12365;&#12394;&#12435;&#12391;&#12377;&#12369;&#12393;&#12397;&#12290;&#19968;&#26152;&#26085;&#12398;&#26481;&#20140;&#39365;&#20184;&#36817;&#12391;&#12398;&#25171;&#12385;&#21512;&#12431;&#12379;&#12398;&#24460;&#12289;&#25955;&#27497;&#12364;&#12390;&#12425;&#20037;&#12293;&#12395;&#34892;&#12387;&#12390;&#12365;&#12414;&#12375;&#12383;&#12290;&#12381;&#12375;&#12383;&#12425;&#12499;&#12483;&#12463;&#12522;&#65281;&#30456;&#22793;&#12431;&#12425;&lt;a href=&quot;http://www.abakuro.co.jp/&quot; rel=&quot;dofollow&quot;&gt;&lt;b&gt;&#12450;&#12496;&#12463;&#12525;&lt;/b&gt;&lt;/a&gt;&#12378;&#12289;&#36362;&#12387;&#12390;&#12356;&#12427;&#12384;&#12369;&#12398;&#24215;&#21729;&#12373;&#12435;&#12392;&#12363;&#12418;&#12356;&#12414;&#12375;&#12383;&#12364;&#12289;</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&amp;#31169;&amp;#12398;&amp;#20013;&amp;#12391;&amp;#12289;&amp;#32207;&amp;#21512;&amp;#35413;&amp;#20385;&amp;#12398;&amp;#12392;&amp;#12387;&amp;#12390;&amp;#12418;&amp;#20302;&amp;#12356;&amp;#12450;&amp;#12496;&lt;a href=&quot;http://www.abakuro.co.jp/&quot;&gt;&lt;b&gt;&amp;#12450;&amp;#12496;&amp;#12463;&amp;#12525;&amp;#12507;&amp;#12522;&amp;#12473;&amp;#12479;&amp;#12540;&lt;/b&gt;&lt;/a&gt;&amp;#12463;&amp;#12525;&amp;#37504;&amp;#24231;&amp;#24215;&amp;#12290;&amp;#12450;&amp;#12496;&amp;#12463;&amp;#12525;&amp;#12399;&amp;#22823;&amp;#22909;&amp;#12365;&amp;#12394;&amp;#12435;&amp;#12391;&amp;#12377;&amp;#12369;&amp;#12393;&amp;#12397;&amp;#12290;&amp;#19968;&amp;#26152;&amp;#26085;&amp;#12398;&amp;#26481;&amp;#20140;&amp;#39365;&amp;#20184;&amp;#36817;&amp;#12391;&amp;#12398;&amp;#25171;&amp;#12385;&amp;#21512;&amp;#12431;&amp;#12379;&amp;#12398;&amp;#24460;&amp;#12289;&amp;#25955;&amp;#27497;&amp;#12364;&amp;#12390;&amp;#12425;&amp;#20037;&amp;#12293;&amp;#12395;&amp;#34892;&amp;#12387;&amp;#12390;&amp;#12365;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12381;&amp;#12375;&amp;#12383;&amp;#12425;&amp;#12499;&amp;#12483;&amp;#12463;&amp;#12522;&amp;#65281;&amp;#30456;&amp;#22793;&amp;#12431;&amp;#12425;&lt;a href=&quot;http://www.abakuro.co.jp/&quot;&gt;&lt;b&gt;&amp;#12450;&amp;#12496;&amp;#12463;&amp;#12525;&lt;/b&gt;&lt;/a&gt;&amp;#12378;&amp;#12289;&amp;#36362;&amp;#12387;&amp;#12390;&amp;#12356;&amp;#12427;&amp;#12384;&amp;#12369;&amp;#12398;&amp;#24215;&amp;#21729;&amp;#12373;&amp;#12435;&amp;#12392;&amp;#12363;&amp;#12418;&amp;#12356;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12364;&amp;#12289;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-05-05T03:01:27+01:00</created-at>
      <creator-id type="integer">53804</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5392</number>
      <permalink>column_definitions-method-being-called-before-and-after-every-single-sql-statement-on-postgresql</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord rails3&quot; &quot;arel rails3&quot; postgres postgresql rails3.0rc rails3rc</tag>
      <title>column_definitions method being called before and after every single SQL statement on PostgreSQL</title>
      <updated-at type="datetime">2011-05-05T03:02:39+01:00</updated-at>
      <user-id type="integer">148049</user-id>
      <version type="integer">23</version>
      <user-name>af001</user-name>
      <creator-name>Richard Adams</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5392</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>High</priority-name>
    </version>
  </versions>
</ticket>
