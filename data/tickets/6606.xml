<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-22T20:50:16+00:00</created-at>
  <creator-id type="integer">142388</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6606</number>
  <permalink>activerecord-does-not-escape-nul-bytes-for-sqlite3</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>ActiveRecord does not escape NUL bytes for SQLite3</title>
  <updated-at type="datetime">2011-03-22T20:52:00+00:00</updated-at>
  <user-id type="integer">142388</user-id>
  <version type="integer">1</version>
  <user-name>kempgen</user-name>
  <creator-name>kempgen</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6606</url>
  <priority-name nil="true"></priority-name>
  <original-body># Summary #
ActiveRecord does not escape NUL (\x00) bytes in :string fields for the SQLite3 adapter.
(Rails 3.0.5)

# How to reproduce #
@@@ sh
rails new foo
cd foo
rails g model Book title:string
rake db:migrate
rails c
@@@
@@@ ruby
b = Book.new( :title =&gt; &quot;-A-\x00-B-&quot; )
b.save
@@@
Output:
	ActiveRecord::StatementInvalid: SQLite3::SQLException: unrecognized token: &quot;'-A-&quot;: INSERT INTO &quot;books&quot; (&quot;title&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES ('-A--B-', ..., ...)
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:207:in `rescue in log'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:199:in `log'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:282:in `insert_sql'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:149:in `insert_sql'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:44:in `insert'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:16:in `insert'
		from .../arel-2.0.9/lib/arel/select_manager.rb:217:in `insert'
		from .../activerecord-3.0.5/lib/active_record/relation.rb:14:in `insert'
		from .../activerecord-3.0.5/lib/active_record/persistence.rb:270:in `create'
		from .../activerecord-3.0.5/lib/active_record/timestamp.rb:47:in `create'
		from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in `block in create'
		from .../activesupport-3.0.5/lib/active_support/callbacks.rb:413:in `_run_create_callbacks'
		from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in `create'
		from .../activerecord-3.0.5/lib/active_record/persistence.rb:246:in `create_or_update'
		from .../activerecord-3.0.5/lib/active_record/callbacks.rb:277:in `block in create_or_update'
	... 3 levels...
		from .../activerecord-3.0.5/lib/active_record/validations.rb:43:in `save'
		from .../activerecord-3.0.5/lib/active_record/attribute_methods/dirty.rb:21:in `save'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block (2 levels) in save'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:292:in `block in with_transaction_returning_status'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:139:in `transaction'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:207:in `transaction'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:290:in `with_transaction_returning_status'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block in save'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:251:in `rollback_active_record_state!'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:239:in `save'

# How to fix #

SQLite does not support NUL bytes in string fields.

However, ActiveRecord should never send unescaped values to the database.

\\0 bytes could be escaped as \\\\0 (and \\ as \\\\) when writing and have to be unescaped when reading from the adapter.

Alternatively (Python App Engine SDK does this): &quot;Nulls in a string (\\0) are replaced with the escape sequence \\1\\1, while \\1 bytes are replaced with \\1\\2. ... This encoding is reversible, but ensures the strings still sort in the same order as they did previously.&quot;

The escaping/encoding can easily be done in ActiveRecord::ConnectionAdapters::SQLite3Adapter.quote() but the string will have to be unescaped/decoded somewhere.</original-body>
  <latest-body># Summary #
ActiveRecord does not escape NUL (\x00) bytes in :string fields for the SQLite3 adapter.
(Rails 3.0.5)

# How to reproduce #
@@@ sh
rails new foo
cd foo
rails g model Book title:string
rake db:migrate
rails c
@@@
@@@ ruby
b = Book.new( :title =&gt; &quot;-A-\x00-B-&quot; )
b.save
@@@
Output:
	ActiveRecord::StatementInvalid: SQLite3::SQLException: unrecognized token: &quot;'-A-&quot;: INSERT INTO &quot;books&quot; (&quot;title&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES ('-A--B-', ..., ...)
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:207:in `rescue in log'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:199:in `log'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:282:in `insert_sql'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:149:in `insert_sql'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:44:in `insert'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:16:in `insert'
		from .../arel-2.0.9/lib/arel/select_manager.rb:217:in `insert'
		from .../activerecord-3.0.5/lib/active_record/relation.rb:14:in `insert'
		from .../activerecord-3.0.5/lib/active_record/persistence.rb:270:in `create'
		from .../activerecord-3.0.5/lib/active_record/timestamp.rb:47:in `create'
		from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in `block in create'
		from .../activesupport-3.0.5/lib/active_support/callbacks.rb:413:in `_run_create_callbacks'
		from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in `create'
		from .../activerecord-3.0.5/lib/active_record/persistence.rb:246:in `create_or_update'
		from .../activerecord-3.0.5/lib/active_record/callbacks.rb:277:in `block in create_or_update'
	... 3 levels...
		from .../activerecord-3.0.5/lib/active_record/validations.rb:43:in `save'
		from .../activerecord-3.0.5/lib/active_record/attribute_methods/dirty.rb:21:in `save'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block (2 levels) in save'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:292:in `block in with_transaction_returning_status'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:139:in `transaction'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:207:in `transaction'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:290:in `with_transaction_returning_status'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block in save'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:251:in `rollback_active_record_state!'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:239:in `save'

# How to fix #

SQLite does not support NUL bytes in string fields.

However, ActiveRecord should never send unescaped values to the database.

\\0 bytes could be escaped as \\\\0 (and \\ as \\\\) when writing and have to be unescaped when reading from the adapter.

Alternatively (Python App Engine SDK does this): &quot;Nulls in a string (\\0) are replaced with the escape sequence \\1\\1, while \\1 bytes are replaced with \\1\\2. ... This encoding is reversible, but ensures the strings still sort in the same order as they did previously.&quot;

The escaping/encoding can easily be done in ActiveRecord::ConnectionAdapters::SQLite3Adapter.quote() but the string will have to be unescaped/decoded somewhere.</latest-body>
  <original-body-html>&lt;div&gt;&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;ActiveRecord does not escape NUL (\x00) bytes in :string fields
for the SQLite3 adapter.&lt;br&gt;
(Rails 3.0.5)&lt;/p&gt;
&lt;h1&gt;How to reproduce&lt;/h1&gt;
&lt;pre&gt;
&lt;code class=&quot;sh&quot;&gt;rails new foo
cd foo
rails g model Book title:string
rake db:migrate
rails c&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;b = Book.new( :title =&amp;gt; &quot;-A-\x00-B-&quot; )
b.save&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Output:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActiveRecord::StatementInvalid: SQLite3::SQLException: unrecognized token: &quot;'-A-&quot;: INSERT INTO &quot;books&quot; (&quot;title&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES ('-A--B-', ..., ...)
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:207:in `rescue in log'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:199:in `log'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:282:in `insert_sql'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:149:in `insert_sql'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:44:in `insert'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:16:in `insert'
    from .../arel-2.0.9/lib/arel/select_manager.rb:217:in `insert'
    from .../activerecord-3.0.5/lib/active_record/relation.rb:14:in `insert'
    from .../activerecord-3.0.5/lib/active_record/persistence.rb:270:in `create'
    from .../activerecord-3.0.5/lib/active_record/timestamp.rb:47:in `create'
    from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in `block in create'
    from .../activesupport-3.0.5/lib/active_support/callbacks.rb:413:in `_run_create_callbacks'
    from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in `create'
    from .../activerecord-3.0.5/lib/active_record/persistence.rb:246:in `create_or_update'
    from .../activerecord-3.0.5/lib/active_record/callbacks.rb:277:in `block in create_or_update'
... 3 levels...
    from .../activerecord-3.0.5/lib/active_record/validations.rb:43:in `save'
    from .../activerecord-3.0.5/lib/active_record/attribute_methods/dirty.rb:21:in `save'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block (2 levels) in save'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:292:in `block in with_transaction_returning_status'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:139:in `transaction'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:207:in `transaction'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:290:in `with_transaction_returning_status'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block in save'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:251:in `rollback_active_record_state!'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:239:in `save'&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;How to fix&lt;/h1&gt;
&lt;p&gt;SQLite does not support NUL bytes in string fields.&lt;/p&gt;
&lt;p&gt;However, ActiveRecord should never send unescaped values to the
database.&lt;/p&gt;
&lt;p&gt;\0 bytes could be escaped as \\0 (and \ as \\) when writing and
have to be unescaped when reading from the adapter.&lt;/p&gt;
&lt;p&gt;Alternatively (Python App Engine SDK does this): &quot;Nulls in a
string (\0) are replaced with the escape sequence \1\1, while \1
bytes are replaced with \1\2. ... This encoding is reversible, but
ensures the strings still sort in the same order as they did
previously.&quot;&lt;/p&gt;
&lt;p&gt;The escaping/encoding can easily be done in
ActiveRecord::ConnectionAdapters::SQLite3Adapter.quote() but the
string will have to be unescaped/decoded somewhere.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body># Summary #
ActiveRecord does not escape NUL (\x00) bytes in :string fields for the SQLite3 adapter.
(Rails 3.0.5)

# How to reproduce #
@@@ sh
rails new foo
cd foo
rails g model Book title:string
rake db:migrate
rails c
@@@
@@@ ruby
b = Book.new( :title =&gt; &quot;-A-\x00-B-&quot; )
b.save
@@@
Output:
	ActiveRecord::StatementInvalid: SQLite3::SQLException: unrecognized token: &quot;'-A-&quot;: INSERT INTO &quot;books&quot; (&quot;title&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES ('-A--B-', ..., ...)
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:207:in `rescue in log'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:199:in `log'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:282:in `insert_sql'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:149:in `insert_sql'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:44:in `insert'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:16:in `insert'
		from .../arel-2.0.9/lib/arel/select_manager.rb:217:in `insert'
		from .../activerecord-3.0.5/lib/active_record/relation.rb:14:in `insert'
		from .../activerecord-3.0.5/lib/active_record/persistence.rb:270:in `create'
		from .../activerecord-3.0.5/lib/active_record/timestamp.rb:47:in `create'
		from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in `block in create'
		from .../activesupport-3.0.5/lib/active_support/callbacks.rb:413:in `_run_create_callbacks'
		from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in `create'
		from .../activerecord-3.0.5/lib/active_record/persistence.rb:246:in `create_or_update'
		from .../activerecord-3.0.5/lib/active_record/callbacks.rb:277:in `block in create_or_update'
	... 3 levels...
		from .../activerecord-3.0.5/lib/active_record/validations.rb:43:in `save'
		from .../activerecord-3.0.5/lib/active_record/attribute_methods/dirty.rb:21:in `save'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block (2 levels) in save'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:292:in `block in with_transaction_returning_status'
		from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:139:in `transaction'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:207:in `transaction'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:290:in `with_transaction_returning_status'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block in save'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:251:in `rollback_active_record_state!'
		from .../activerecord-3.0.5/lib/active_record/transactions.rb:239:in `save'

# How to fix #

SQLite does not support NUL bytes in string fields.

However, ActiveRecord should never send unescaped values to the database.

\\0 bytes could be escaped as \\\\0 (and \\ as \\\\) when writing and have to be unescaped when reading from the adapter.

Alternatively (Python App Engine SDK does this): &quot;Nulls in a string (\\0) are replaced with the escape sequence \\1\\1, while \\1 bytes are replaced with \\1\\2. ... This encoding is reversible, but ensures the strings still sort in the same order as they did previously.&quot;

The escaping/encoding can easily be done in ActiveRecord::ConnectionAdapters::SQLite3Adapter.quote() but the string will have to be unescaped/decoded somewhere.</body>
      <body-html>&lt;div&gt;&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;ActiveRecord does not escape NUL (\x00) bytes in :string fields
for the SQLite3 adapter.&lt;br&gt;
(Rails 3.0.5)&lt;/p&gt;
&lt;h1&gt;How to reproduce&lt;/h1&gt;
&lt;pre&gt;
&lt;code class=&quot;sh&quot;&gt;rails new foo
cd foo
rails g model Book title:string
rake db:migrate
rails c&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;b = Book.new( :title =&amp;gt; &quot;-A-\x00-B-&quot; )
b.save&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Output:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActiveRecord::StatementInvalid: SQLite3::SQLException: unrecognized token: &quot;'-A-&quot;: INSERT INTO &quot;books&quot; (&quot;title&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES ('-A--B-', ..., ...)
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:207:in `rescue in log'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract_adapter.rb:199:in `log'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:282:in `insert_sql'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/sqlite_adapter.rb:149:in `insert_sql'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:44:in `insert'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:16:in `insert'
    from .../arel-2.0.9/lib/arel/select_manager.rb:217:in `insert'
    from .../activerecord-3.0.5/lib/active_record/relation.rb:14:in `insert'
    from .../activerecord-3.0.5/lib/active_record/persistence.rb:270:in `create'
    from .../activerecord-3.0.5/lib/active_record/timestamp.rb:47:in `create'
    from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in `block in create'
    from .../activesupport-3.0.5/lib/active_support/callbacks.rb:413:in `_run_create_callbacks'
    from .../activerecord-3.0.5/lib/active_record/callbacks.rb:281:in `create'
    from .../activerecord-3.0.5/lib/active_record/persistence.rb:246:in `create_or_update'
    from .../activerecord-3.0.5/lib/active_record/callbacks.rb:277:in `block in create_or_update'
... 3 levels...
    from .../activerecord-3.0.5/lib/active_record/validations.rb:43:in `save'
    from .../activerecord-3.0.5/lib/active_record/attribute_methods/dirty.rb:21:in `save'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block (2 levels) in save'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:292:in `block in with_transaction_returning_status'
    from .../activerecord-3.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:139:in `transaction'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:207:in `transaction'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:290:in `with_transaction_returning_status'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:240:in `block in save'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:251:in `rollback_active_record_state!'
    from .../activerecord-3.0.5/lib/active_record/transactions.rb:239:in `save'&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;How to fix&lt;/h1&gt;
&lt;p&gt;SQLite does not support NUL bytes in string fields.&lt;/p&gt;
&lt;p&gt;However, ActiveRecord should never send unescaped values to the
database.&lt;/p&gt;
&lt;p&gt;\0 bytes could be escaped as \\0 (and \ as \\) when writing and
have to be unescaped when reading from the adapter.&lt;/p&gt;
&lt;p&gt;Alternatively (Python App Engine SDK does this): &quot;Nulls in a
string (\0) are replaced with the escape sequence \1\1, while \1
bytes are replaced with \1\2. ... This encoding is reversible, but
ensures the strings still sort in the same order as they did
previously.&quot;&lt;/p&gt;
&lt;p&gt;The escaping/encoding can easily be done in
ActiveRecord::ConnectionAdapters::SQLite3Adapter.quote() but the
string will have to be unescaped/decoded somewhere.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-22T20:50:16+00:00</created-at>
      <creator-id type="integer">142388</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6606</number>
      <permalink>activerecord-does-not-escape-nul-bytes-for-sqlite3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord does not escape NUL bytes for SQLite3</title>
      <updated-at type="datetime">2011-03-22T20:51:59+00:00</updated-at>
      <user-id type="integer">142388</user-id>
      <version type="integer">1</version>
      <user-name>kempgen</user-name>
      <creator-name>kempgen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6606</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
