<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-01-15T00:49:53+00:00</created-at>
  <creator-id type="integer">65953</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71470</milestone-id>
  <number type="integer">6290</number>
  <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
  <title>[PATCH] except doesn't work in different scopes</title>
  <updated-at type="datetime">2011-03-21T13:45:07+00:00</updated-at>
  <user-id type="integer">65953</user-id>
  <version type="integer">12</version>
  <user-name>2kan</user-name>
  <creator-name>2kan</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
  <milestone-title>3.1</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>Here is an example:

@@@
class A &lt; ActiveRecord::Base
  scope :order_by_salary, order(&quot;salary DESC&quot;)
  scope :reorder_by_name, except(:order).order(&quot;name DESC&quot;)
end
@@@

So this code won't work:

@@@
A.order_by_salary.reorder_by_name
@@@</original-body>
  <latest-body>Here is an example:

@@@
class A &lt; ActiveRecord::Base
  scope :order_by_salary, order(&quot;salary DESC&quot;)
  scope :reorder_by_name, except(:order).order(&quot;name DESC&quot;)
end
@@@

So this code won't work:

@@@
A.order_by_salary.reorder_by_name
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class A &amp;lt; ActiveRecord::Base
  scope :order_by_salary, order(&quot;salary DESC&quot;)
  scope :reorder_by_name, except(:order).order(&quot;name DESC&quot;)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So this code won't work:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;A.order_by_salary.reorder_by_name&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is an example:

@@@
class A &lt; ActiveRecord::Base
  scope :order_by_salary, order(&quot;salary DESC&quot;)
  scope :reorder_by_name, except(:order).order(&quot;name DESC&quot;)
end
@@@

So this code won't work:

@@@
A.order_by_salary.reorder_by_name
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class A &amp;lt; ActiveRecord::Base
  scope :order_by_salary, order(&quot;salary DESC&quot;)
  scope :reorder_by_name, except(:order).order(&quot;name DESC&quot;)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So this code won't work:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;A.order_by_salary.reorder_by_name&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-15T00:49:53+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord scopes&quot; &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-01-15T00:49:59+00:00</updated-at>
      <user-id type="integer">65953</user-id>
      <version type="integer">1</version>
      <user-name>2kan</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is my patch (with tests) for it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is my patch (with tests) for it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-15T00:52:39+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord scopes&quot; &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-01-15T00:52:45+00:00</updated-at>
      <user-id type="integer">65953</user-id>
      <version type="integer">2</version>
      <user-name>2kan</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-15T00:55:45+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord scopes\&quot; \&quot;rails edge\&quot; scope&quot;
:assigned_user: 40272
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-01-15T00:55:56+00:00</updated-at>
      <user-id type="integer">65953</user-id>
      <version type="integer">3</version>
      <user-name>2kan</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The expression scope :reorder_by_name, except(:order).order(&quot;name DESC&quot;) is computed at evaluation time.

You need to do this ...

@@@
class A &lt; ActiveRecord::Base
  scope :order_by_salary, order(&quot;salary DESC&quot;)
  scope :reorder_by_name, lambda { except(:order).order(&quot;name DESC&quot;) }
end
@@@

Anyways seems the code I showed you is not currently working on master with named scopes even though it works if I do ...

@@@
&gt;&gt; Post.order(:title).to_sql
=&gt; &quot;SELECT \&quot;posts\&quot;.* FROM \&quot;posts\&quot;  ORDER BY title&quot;
&gt;&gt; Post.order(:title).except(:order).to_sql
=&gt; &quot;SELECT \&quot;posts\&quot;.* FROM \&quot;posts\&quot; &quot;
&gt;&gt; Post.order(:title).except(:order).order(:body).to_sql
=&gt; &quot;SELECT \&quot;posts\&quot;.* FROM \&quot;posts\&quot;  ORDER BY body&quot;
@@@

So we need to fix the issue for named scopes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The expression scope :reorder_by_name,
except(:order).order(&quot;name DESC&quot;) is computed at evaluation
time.&lt;/p&gt;
&lt;p&gt;You need to do this ...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class A &amp;lt; ActiveRecord::Base
  scope :order_by_salary, order(&quot;salary DESC&quot;)
  scope :reorder_by_name, lambda { except(:order).order(&quot;name DESC&quot;) }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Anyways seems the code I showed you is not currently working on
master with named scopes even though it works if I do ...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Post.order(:title).to_sql
=&amp;gt; &quot;SELECT \&quot;posts\&quot;.* FROM \&quot;posts\&quot;  ORDER BY title&quot;
&amp;gt;&amp;gt; Post.order(:title).except(:order).to_sql
=&amp;gt; &quot;SELECT \&quot;posts\&quot;.* FROM \&quot;posts\&quot; &quot;
&amp;gt;&amp;gt; Post.order(:title).except(:order).order(:body).to_sql
=&amp;gt; &quot;SELECT \&quot;posts\&quot;.* FROM \&quot;posts\&quot;  ORDER BY body&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So we need to fix the issue for named scopes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T18:30:13+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-02-02T20:00:34+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I suggest moving order from MULTI_VALUE_METHODS to SINGLE_VALUE_METHODS and overwriting the order array with each merged scope or new call to order(). There's no benefit in using:
    Employee.order(:division_name).order(:name)
over
    Employee.order(:division_name,:name)

And the fact that both of the below calls return Posts by [:created_at,:title] order is just plain misleading:
    class Post &lt; ActiveRecord::Base
      default_scope order(:created_at)
      scope :by_title, order(:title)
    end
    Post.order(:title)
    Post.by_title</body>
      <body-html>&lt;div&gt;&lt;p&gt;I suggest moving order from MULTI_VALUE_METHODS to
SINGLE_VALUE_METHODS and overwriting the order array with each
merged scope or new call to order(). There's no benefit in
using:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Employee.order(:division_name).order(:name)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;over&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Employee.order(:division_name,:name)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And the fact that both of the below calls return Posts by
[:created_at,:title] order is just plain misleading:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Post &amp;lt; ActiveRecord::Base
  default_scope order(:created_at)
  scope :by_title, order(:title)
end
Post.order(:title)
Post.by_title&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T23:27:12+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-02-02T23:27:28+00:00</updated-at>
      <user-id type="integer">122134</user-id>
      <version type="integer">5</version>
      <user-name>Adam Wr&#243;bel</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Adam Wr&#243;bel, order is a multi value and I can give you a lot of examples from my real apps where you need to use queries like: 

@@@
SELECT * from employers WHERE ORDER BY salary ASC, name ASC
@@@

Here you sort employers by salary and if salary is equal you sort then by name. It is a common task. And so if we're allow user to write order('salary ASC, name ASC') I think we should allow to write order(:salary).order(:name).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Adam Wr&amp;oacute;bel, order is a multi value and I can give you a
lot of examples from my real apps where you need to use queries
like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT * from employers WHERE ORDER BY salary ASC, name ASC&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here you sort employers by salary and if salary is equal you
sort then by name. It is a common task. And so if we're allow user
to write order('salary ASC, name ASC') I think we should allow to
write order(:salary).order(:name).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T23:50:49+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-02-02T23:51:01+00:00</updated-at>
      <user-id type="integer">65953</user-id>
      <version type="integer">6</version>
      <user-name>2kan</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Adam Wr&#243;bel, i mean that it is not intuitive why we can do:

@@@
order(:division_name).order(:name)
@@@

and can't:

@@@
Employee.order(:division_name,:name)
@@@

or do something like:

@@@
class Post &lt; ActiveRecord::Base
 scope popular, where('rating &gt; 1').order('rating DESC')
 scope recent, order('created_at DESC')
end

Post.popular.recent
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Adam Wr&amp;oacute;bel, i mean that it is not intuitive why we can
do:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;order(:division_name).order(:name)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and can't:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Employee.order(:division_name,:name)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;or do something like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Post &amp;lt; ActiveRecord::Base
 scope popular, where('rating &amp;gt; 1').order('rating DESC')
 scope recent, order('created_at DESC')
end

Post.popular.recent&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T23:56:42+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-02-02T23:56:54+00:00</updated-at>
      <user-id type="integer">65953</user-id>
      <version type="integer">7</version>
      <user-name>2kan</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Oh, sorry, it is 2:57 AM here. In my previous comment we can't do first and can second and so can't do the last example with a Post class.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oh, sorry, it is 2:57 AM here. In my previous comment we can't
do first and can second and so can't do the last example with a
Post class.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T23:58:39+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-02-02T23:58:50+00:00</updated-at>
      <user-id type="integer">65953</user-id>
      <version type="integer">8</version>
      <user-name>2kan</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>An alternative would be to overwrite on merge, but append on order(). That would be similar to where(:column =&gt; value). Multiple where() calls create OR but during a merge only the last one is left.</body>
      <body-html>&lt;div&gt;&lt;p&gt;An alternative would be to overwrite on merge, but append on
order(). That would be similar to where(:column =&amp;gt; value).
Multiple where() calls create OR but during a merge only the last
one is left.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-03T00:05:58+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-02-03T00:06:11+00:00</updated-at>
      <user-id type="integer">122134</user-id>
      <version type="integer">9</version>
      <user-name>Adam Wr&#243;bel</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I know you specify multiple columns for order, but when I referred to multi and single values I meant values that get merged and values that get overwritten. My suggestion was to overwrite array of order columns from the current scope with array of order columns from the relation being merged in.

The Post.popular.recent example makes sense and might be a reason for why none of my suggestions should be used, but then again order is such a simple operation that it's easy to list all the columns you need in one place. Usually I'd just be confused that my last call to order wasn't the one used rather than happy that I was was able to merge two named order scopes. Take this test from rails tests (tests/cases/relations_test.rb):


    def test_order_using_scoping
      car1 = CoolCar.order('id DESC').scoping do
        CoolCar.find(:first, :order =&gt; 'id asc')
      end
      assert_equal 'zyke', car1.name
  
      car2 = FastCar.order('id DESC').scoping do
        FastCar.find(:first, :order =&gt; 'id asc')
      end
      assert_equal 'zyke', car2.name
    end

To me it reads &quot;def test_we_have_a_bug&quot;. I mean - I've specified the order I want right there - in the call to find() - why do you do it reverse, rails?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I know you specify multiple columns for order, but when I
referred to multi and single values I meant values that get merged
and values that get overwritten. My suggestion was to overwrite
array of order columns from the current scope with array of order
columns from the relation being merged in.&lt;/p&gt;
&lt;p&gt;The Post.popular.recent example makes sense and might be a
reason for why none of my suggestions should be used, but then
again order is such a simple operation that it's easy to list all
the columns you need in one place. Usually I'd just be confused
that my last call to order wasn't the one used rather than happy
that I was was able to merge two named order scopes. Take this test
from rails tests (tests/cases/relations_test.rb):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def test_order_using_scoping
  car1 = CoolCar.order('id DESC').scoping do
    CoolCar.find(:first, :order =&amp;gt; 'id asc')
  end
  assert_equal 'zyke', car1.name

  car2 = FastCar.order('id DESC').scoping do
    FastCar.find(:first, :order =&amp;gt; 'id asc')
  end
  assert_equal 'zyke', car2.name
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To me it reads &quot;def test_we_have_a_bug&quot;. I mean - I've specified
the order I want right there - in the call to find() - why do you
do it reverse, rails?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-03T00:22:43+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-02-03T00:22:56+00:00</updated-at>
      <user-id type="integer">122134</user-id>
      <version type="integer">10</version>
      <user-name>Adam Wr&#243;bel</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Santiago Pastorino, Yes this code computes at evaluation time, but it doesn't matter. I think that there is no reason (point me if i'm wrong) to allow user to use except only inside lambdas. I understand that I need to use lambda when I use Time.now or something but here I need some additional knowledge about how except, order, where and etc works inside rails. I don't think that it is good. I've added to my patch test with scope with lambda like:

@@@
lambda { except(:order).order(&quot;name DESC&quot;) }
@@@

and test passes. 

How it works and why I think we can calculate except at evaluation time. A've added a flag into the Relation that it is except and store what we want to except, so when we merge relations when calling the scopes we can figure out that we need to except some values.

Please, point me if I made a mistake somewhere.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Santiago Pastorino, Yes this code computes at evaluation time,
but it doesn't matter. I think that there is no reason (point me if
i'm wrong) to allow user to use except only inside lambdas. I
understand that I need to use lambda when I use Time.now or
something but here I need some additional knowledge about how
except, order, where and etc works inside rails. I don't think that
it is good. I've added to my patch test with scope with lambda
like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;lambda { except(:order).order(&quot;name DESC&quot;) }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and test passes.&lt;/p&gt;
&lt;p&gt;How it works and why I think we can calculate except at
evaluation time. A've added a flag into the Relation that it is
except and store what we want to except, so when we merge relations
when calling the scopes we can figure out that we need to except
some values.&lt;/p&gt;
&lt;p&gt;Please, point me if I made a mistake somewhere.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-03T16:34:44+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-02-03T16:34:57+00:00</updated-at>
      <user-id type="integer">65953</user-id>
      <version type="integer">11</version>
      <user-name>2kan</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Oops, I've found that my last uploaded patch wasn't good enough (I've uploaded the wrong diff, sorry). Here is the correct one.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oops, I've found that my last uploaded patch wasn't good enough
(I've uploaded the wrong diff, sorry). Here is the correct one.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-21T13:44:52+00:00</created-at>
      <creator-id type="integer">65953</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6290</number>
      <permalink>patch-except-doesnt-work-in-different-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord scopes&quot; bug patch &quot;rails edge&quot; scope</tag>
      <title>[PATCH] except doesn't work in different scopes</title>
      <updated-at type="datetime">2011-03-21T13:45:07+00:00</updated-at>
      <user-id type="integer">65953</user-id>
      <version type="integer">12</version>
      <user-name>2kan</user-name>
      <creator-name>2kan</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6290</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>137f8904cc1b486e7ea704957626a9a77a76f5b0</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-01-15T00:52:39+00:00</created-at>
      <filename>6290-fix-against-rails-edge.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">862740</id>
      <size type="integer">4458</size>
      <uploader-id type="integer">65953</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/862740/6290-fix-against-rails-edge.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>e0d52e0acbfce6b424537adbb6280f25dbf50a3d</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-03T16:34:44+00:00</created-at>
      <filename>6290-fix-against-rails-edge.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">893790</id>
      <size type="integer">4527</size>
      <uploader-id type="integer">65953</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/893790/6290-fix-against-rails-edge.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>036619b4b4b1e4231e5672a9202f013c7c4dfcfd</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-21T13:44:53+00:00</created-at>
      <filename>6290-fix-against-rails-edge.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">968910</id>
      <size type="integer">4418</size>
      <uploader-id type="integer">65953</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/968910/6290-fix-against-rails-edge.diff</url>
    </attachment>
  </attachments>
</ticket>
