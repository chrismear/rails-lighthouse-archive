From b2c8983f53a4c801028fced5939dc9abe36308d1 Mon Sep 17 00:00:00 2001
From: Ken Collins <ken@metaskills.net>
Date: Sat, 14 Jun 2008 14:06:27 -0400
Subject: [PATCH] Added TextHelper#current_cycle to return the current cycle for better design options.

---
 actionpack/lib/action_view/helpers/text_helper.rb |   45 +++++++++++++++++++--
 actionpack/test/template/text_helper_test.rb      |   34 ++++++++++++++++
 2 files changed, 75 insertions(+), 4 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/text_helper.rb b/actionpack/lib/action_view/helpers/text_helper.rb
index a1a91f6..667a361 100644
--- a/actionpack/lib/action_view/helpers/text_helper.rb
+++ b/actionpack/lib/action_view/helpers/text_helper.rb
@@ -353,8 +353,10 @@ module ActionView
       # array every time it is called. This can be used for example, to alternate
       # classes for table rows.  You can use named cycles to allow nesting in loops.
       # Passing a Hash as the last parameter with a <tt>:name</tt> key will create a
-      # named cycle.  You can manually reset a cycle by calling reset_cycle and passing the
-      # name of the cycle.
+      # named cycle. The default name for a cycle without a +:name+ key is 
+      # <tt>"default"</tt>. You can manually reset a cycle by calling reset_cycle 
+      # and passing the name of the cycle. The current cycle string can be obtained 
+      # anytime using the current_cycle method.
       #
       # ==== Examples
       #   # Alternate CSS classes for even and odd numbers...
@@ -400,6 +402,23 @@ module ActionView
         end
         return cycle.to_s
       end
+      
+      # Returns the current cycle string after a cycle has been started. Useful 
+      # for complex table highlighing or any other design need which requires
+      # the current cycle string in more than one place.
+      #
+      # ==== Example
+      #   # Alternate background colors 
+      #   @items = [1,2,3,4]
+      #   <% @items.each do |item| %>
+      #     <div style="background-color:<%= cycle("red","white","blue") %>">
+      #       <span style="background-color:<%= current_cycle %><%= item %></span>
+      #     </div>
+      #   <% end %>
+      def current_cycle(name = "default")
+        cycle = get_cycle(name)
+        cycle.current_value unless cycle.nil?
+      end
 
       # Resets a cycle so that it starts from the first element the next time
       # it is called. Pass in +name+ to reset a named cycle.
@@ -436,12 +455,30 @@ module ActionView
         def reset
           @index = 0
         end
-
+        
+        def current_value
+          @values[previous_index].to_s
+        end
+        
         def to_s
           value = @values[@index].to_s
-          @index = (@index + 1) % @values.size
+          @index = next_index
           return value
         end
+        
+        private
+        
+        def next_index
+          step_index(1)
+        end
+        
+        def previous_index
+          step_index(-1)
+        end
+        
+        def step_index(n)
+          (@index + n) % @values.size
+        end
       end
 
       private
diff --git a/actionpack/test/template/text_helper_test.rb b/actionpack/test/template/text_helper_test.rb
index cbb5c7e..41a12d7 100644
--- a/actionpack/test/template/text_helper_test.rb
+++ b/actionpack/test/template/text_helper_test.rb
@@ -336,6 +336,40 @@ class TextHelperTest < ActionView::TestCase
     assert_equal("3", cycle(1, 2, 3, :name => "numbers"))
     assert_equal("red", cycle("red", "blue", :name => "colors"))
   end
+  
+  def test_current_cycle_with_default_name
+    cycle("even","odd")
+    assert_equal "even", current_cycle
+    cycle("even","odd")
+    assert_equal "odd", current_cycle
+    cycle("even","odd")
+    assert_equal "even", current_cycle
+  end
+
+  def test_current_cycle_with_named_cycles
+    cycle("red", "blue", :name => "colors")
+    assert_equal "red", current_cycle("colors")
+    cycle("red", "blue", :name => "colors")
+    assert_equal "blue", current_cycle("colors")
+    cycle("red", "blue", :name => "colors")
+    assert_equal "red", current_cycle("colors")
+  end
+  
+  def test_current_cycle_safe_call
+    assert_nothing_raised { current_cycle }
+    assert_nothing_raised { current_cycle("colors") }
+  end
+  
+  def test_current_cycle_with_more_than_two_names
+    cycle(1,2,3)
+    assert_equal "1", current_cycle
+    cycle(1,2,3)
+    assert_equal "2", current_cycle
+    cycle(1,2,3)
+    assert_equal "3", current_cycle
+    cycle(1,2,3)
+    assert_equal "1", current_cycle
+  end
 
   def test_default_named_cycle
     assert_equal("1", cycle(1, 2, 3))
-- 
1.5.5.1

