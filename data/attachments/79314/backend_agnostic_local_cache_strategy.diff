From 1727afda54dc513316c7d847982ff170b2e510e7 Mon Sep 17 00:00:00 2001
From: Lourens Naude <lourens@methodmissing.com>
Date: Sat, 17 Jan 2009 03:00:29 +0000
Subject: [PATCH] Decouple the local cache strategy from MemCacheStore for reuse with other remote stores.

---
 activesupport/lib/active_support/cache.rb          |    8 +
 .../lib/active_support/cache/mem_cache_store.rb    |   69 ++--------
 .../active_support/cache/strategy/local_cache.rb   |  151 ++++++++++++++++++++
 activesupport/test/caching_test.rb                 |    4 +-
 railties/lib/initializer.rb                        |    4 +-
 5 files changed, 172 insertions(+), 64 deletions(-)
 create mode 100644 activesupport/lib/active_support/cache/strategy/local_cache.rb

diff --git a/activesupport/lib/active_support/cache.rb b/activesupport/lib/active_support/cache.rb
index 6a6c861..d595e19 100644
--- a/activesupport/lib/active_support/cache.rb
+++ b/activesupport/lib/active_support/cache.rb
@@ -10,6 +10,10 @@ module ActiveSupport
     autoload :MemCacheStore, 'active_support/cache/mem_cache_store'
     autoload :CompressedMemCacheStore, 'active_support/cache/compressed_mem_cache_store'
 
+    module Strategy
+      autoload :LocalCache, 'active_support/cache/strategy/local_cache'
+    end
+
     # Creates a new CacheStore object according to the given options.
     #
     # If no arguments are passed to this method, then a new
@@ -87,6 +91,10 @@ module ActiveSupport
     class Store
       cattr_accessor :logger
 
+      def self.uses_local_cache!
+        include ActiveSupport::Cache::Strategy::LocalCache
+      end
+
       def silence!
         @silence = true
         self
diff --git a/activesupport/lib/active_support/cache/mem_cache_store.rb b/activesupport/lib/active_support/cache/mem_cache_store.rb
index eed9faa..5922a8e 100644
--- a/activesupport/lib/active_support/cache/mem_cache_store.rb
+++ b/activesupport/lib/active_support/cache/mem_cache_store.rb
@@ -15,6 +15,7 @@ module ActiveSupport
     # - Time-based expiry support. See #write and the +:expires_in+ option.
     # - Per-request in memory cache for all communication with the MemCache server(s).
     class MemCacheStore < Store
+      
       module Response # :nodoc:
         STORED      = "STORED\r\n"
         NOT_STORED  = "NOT_STORED\r\n"
@@ -23,24 +24,6 @@ module ActiveSupport
         DELETED     = "DELETED\r\n"
       end
 
-      # this allows caching of the fact that there is nothing in the remote cache
-      NULL = 'mem_cache_store:null'
-
-      THREAD_LOCAL_KEY = :mem_cache_store_cache
-
-      class LocalCache
-        def initialize(app)
-          @app = app
-        end
-
-        def call(env)
-          Thread.current[THREAD_LOCAL_KEY] = MemoryStore.new
-          @app.call(env)
-        ensure
-          Thread.current[THREAD_LOCAL_KEY] = nil
-        end
-      end
-
       attr_reader :addresses
 
       # Creates a new MemCacheStore object, with the given memcached server
@@ -61,18 +44,7 @@ module ActiveSupport
 
       def read(key, options = nil) # :nodoc:
         super
-
-        value = local_cache && local_cache.read(key)
-        if value == NULL
-          nil
-        elsif value.nil?
-          value = @data.get(key, raw?(options))
-          local_cache.write(key, value || NULL) if local_cache
-          value
-        else
-          # forcing the value to be immutable
-          value.dup
-        end
+        @data.get(key, raw?(options))
       rescue MemCache::MemCacheError => e
         logger.error("MemCacheError (#{e}): #{e.message}")
         nil
@@ -91,7 +63,6 @@ module ActiveSupport
         # memcache-client will break the connection if you send it an integer
         # in raw mode, so we convert it to a string to be sure it continues working.
         value = value.to_s if raw?(options)
-        local_cache.write(key, value || NULL) if local_cache
         response = @data.send(method, key, value, expires_in(options), raw?(options))
         response == Response::STORED
       rescue MemCache::MemCacheError => e
@@ -101,7 +72,6 @@ module ActiveSupport
 
       def delete(key, options = nil) # :nodoc:
         super
-        local_cache.write(key, NULL) if local_cache
         response = @data.delete(key, expires_in(options))
         response == Response::DELETED
       rescue MemCache::MemCacheError => e
@@ -113,40 +83,22 @@ module ActiveSupport
         # Doesn't call super, cause exist? in memcache is in fact a read
         # But who cares? Reading is very fast anyway
         # Local cache is checked first, if it doesn't know then memcache itself is read from
-        value = local_cache.read(key) if local_cache
-        if value == NULL
-          false
-        elsif value
-          true
-        else
-          !read(key, options).nil?
-        end
+        !read(key, options).nil?
       end
 
       def increment(key, amount = 1) # :nodoc:
         log("incrementing", key, amount)
 
         response = @data.incr(key, amount)
-        unless response == Response::NOT_FOUND
-          local_cache.write(key, response.to_s) if local_cache
-          response
-        else
-          nil
-        end
+        response == Response::NOT_FOUND ? nil : response
       rescue MemCache::MemCacheError
         nil
       end
 
       def decrement(key, amount = 1) # :nodoc:
-        log("decrement", key, amount)
-
+        log("decrement", key, amount) 
         response = @data.decr(key, amount)
-        unless response == Response::NOT_FOUND
-          local_cache.write(key, response.to_s) if local_cache
-          response
-        else
-          nil
-        end
+        response == Response::NOT_FOUND ? nil : response
       rescue MemCache::MemCacheError
         nil
       end
@@ -159,19 +111,14 @@ module ActiveSupport
       end
 
       def clear
-        local_cache.clear if local_cache
         @data.flush_all
       end
 
       def stats
         @data.stats
       end
-
+      
       private
-        def local_cache
-          Thread.current[THREAD_LOCAL_KEY]
-        end
-
         def expires_in(options)
           (options && options[:expires_in]) || 0
         end
@@ -182,3 +129,5 @@ module ActiveSupport
     end
   end
 end
+
+ActiveSupport::Cache::MemCacheStore.uses_local_cache!
\ No newline at end of file
diff --git a/activesupport/lib/active_support/cache/strategy/local_cache.rb b/activesupport/lib/active_support/cache/strategy/local_cache.rb
new file mode 100644
index 0000000..24e6be3
--- /dev/null
+++ b/activesupport/lib/active_support/cache/strategy/local_cache.rb
@@ -0,0 +1,151 @@
+module ActiveSupport
+  module Cache
+    module Strategy
+      module LocalCache
+      
+        # this allows caching of the fact that there is nothing in the remote cache
+        NULL = 'remote_cache_store:null'
+
+        THREAD_LOCAL_KEY = :remote_store_local_cache
+
+        class Store
+          def initialize(app)
+            @app = app
+          end
+
+          def call(env)
+            Thread.current[THREAD_LOCAL_KEY] = MemoryStore.new
+            @app.call(env)
+          ensure
+            Thread.current[THREAD_LOCAL_KEY] = nil
+          end
+          
+        end  
+        
+        def self.included( base )
+          base.send :include, InstanceMethods
+          base.class_eval do 
+            alias :exist :exist?
+          end  
+          [:read, :write, :delete, :exist, :increment, :decrement, :clear].each do |method|
+            begin
+              base.alias_method_chain method, :local_cache 
+            rescue => e
+              puts e.to_s  
+            end  
+          end
+        end
+        
+        module InstanceMethods         
+        
+          def local_cache_strategy?
+            true
+          end
+        
+          def read_with_local_cache(key, options = nil)
+            read_local(key) do
+              read_without_local_cache(key, options)
+            end
+          end       
+          
+          def write_with_local_cache(key, value, options = nil)
+            write_local(key, value, options) do
+              write_without_local_cache(key, value, options)
+            end
+          end
+        
+          def delete_with_local_cache(key, options = nil)
+            delete_local(key) do
+              delete_without_local_cache(key, options)
+            end
+          end
+        
+          def exist_with_local_cache(key, options = nil)        
+            exist_local(key) do
+              exist_without_local_cache(key, options)
+            end
+          end
+        
+          def increment_with_local_cache(key, amount = 1)
+            increment_or_decrement_local( key ) do
+              increment_without_local_cache( key, amount )
+            end
+          end
+        
+          def decrement_with_local_cache(key, amount = 1)
+            increment_or_decrement_local( key ) do
+              decrement_without_local_cache( key, amount )
+            end
+          end        
+        
+          def clear_with_local_cache
+            clear_local do
+              clear_without_local_cache
+            end
+          end
+        
+          private
+            def local_cache
+              Thread.current[THREAD_LOCAL_KEY]
+            end        
+            
+            def write_to_local_cache(key, value)
+              local_cache.write(key, value || NULL) if local_cache
+            end
+        
+            def read_local(key)
+              value = local_cache && local_cache.read(key)
+              if value == NULL
+                nil
+              elsif value.nil?
+                value = yield
+                write_to_local_cache(key, value)
+                value
+              else
+                # forcing the value to be immutable
+                value.dup
+              end  
+            end   
+            
+            def write_local(key, value, options)
+              value = value.to_s if respond_to?(:raw?) && raw?(options)
+              write_to_local_cache(key, value)
+              yield
+            end     
+        
+            def delete_local(key)
+              local_cache.write(key, NULL) if local_cache
+              yield
+            end
+          
+            def clear_local
+              local_cache.clear if local_cache
+              yield
+            end
+          
+            def exist_local(key)
+              value = local_cache.read(key) if local_cache
+              if value == NULL
+                false
+              elsif value
+                true
+              else
+                yield
+              end
+            end
+        
+            def increment_or_decrement_local(key)
+              value = yield
+              if value
+                local_cache.write(key, value.to_s) if local_cache
+                value
+              else
+                nil
+              end  
+            end
+        
+         end
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/activesupport/test/caching_test.rb b/activesupport/test/caching_test.rb
index 5d220f4..c7fad9e 100644
--- a/activesupport/test/caching_test.rb
+++ b/activesupport/test/caching_test.rb
@@ -246,10 +246,10 @@ uses_memcached 'memcached backed store' do
 
     private
       def with_local_cache
-        Thread.current[ActiveSupport::Cache::MemCacheStore::THREAD_LOCAL_KEY] = ActiveSupport::Cache::MemoryStore.new
+        Thread.current[ActiveSupport::Cache::Strategy::LocalCache::THREAD_LOCAL_KEY] = ActiveSupport::Cache::MemoryStore.new
         yield
       ensure
-        Thread.current[ActiveSupport::Cache::MemCacheStore::THREAD_LOCAL_KEY] = nil
+        Thread.current[ActiveSupport::Cache::Strategy::LocalCache::THREAD_LOCAL_KEY] = nil
       end
   end
 
diff --git a/railties/lib/initializer.rb b/railties/lib/initializer.rb
index b57c46e..a4a167e 100644
--- a/railties/lib/initializer.rb
+++ b/railties/lib/initializer.rb
@@ -414,8 +414,8 @@ Run `rake gems:install` to install the missing gems.
     def initialize_cache
       unless defined?(RAILS_CACHE)
         silence_warnings { Object.const_set "RAILS_CACHE", ActiveSupport::Cache.lookup_store(configuration.cache_store) }
-        if RAILS_CACHE.class.name == "ActiveSupport::Cache::MemCacheStore"
-          configuration.middleware.insert_after(:"ActionController::Failsafe", ActiveSupport::Cache::MemCacheStore::LocalCache)
+        if RAILS_CACHE.respond_to?(:local_cache_strategy?)
+          configuration.middleware.insert_after(:"ActionController::Failsafe", ActiveSupport::Cache::Strategy::LocalCache::Store)
         end
       end
     end
-- 
1.5.4.5

