<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-24T07:00:00+01:00</created-at>
  <creator-id type="integer">22013</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1261</number>
  <permalink>route-recognition-incorrectly-reports-notimplemented-when-using-extended-recognition-conditions</permalink>
  <priority type="integer">666</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>patch routing</tag>
  <title>Route recognition incorrectly reports NotImplemented when using extended recognition conditions</title>
  <updated-at type="datetime">2009-03-06T16:59:25+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>sds</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1261</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>In the rails code comments it suggests that Route#recognition_conditions may be redefined by a plugin to allow for routing to depend on different and new conditions.
You also modify the creation of the environment data (a hash) that feeds this in RouteSet#extract_request_environment.

I have a plugin that does this so that I can base routing decisions on the query string passed in the request (yeh, it may not necessarily be rfc compliant to do that, but I do need it).

Rails incorrectly raises NotImplemented errors when the route (with the extra conditions) does not match rather than RoutingError because the extra environment is not passed on to route recognition when testing for other HTTP verbs that might work (so those recognition tests might pass when they shouldn't).

This requires a one line fix in recognition_optimisation.rb

Change this:
@@@
        allows = HTTP_METHODS.select {|verb| routes.find {|r| r.recognize(path, :method =&gt; verb)}}
@@@
To this:
@@@
        allows = HTTP_METHODS.select {|verb| routes.find {|r| r.recognize(path, environment.merge(:method =&gt; verb))}}
@@@

I attach a patch for this.</original-body>
  <latest-body>In the rails code comments it suggests that Route#recognition_conditions may be redefined by a plugin to allow for routing to depend on different and new conditions.
You also modify the creation of the environment data (a hash) that feeds this in RouteSet#extract_request_environment.

I have a plugin that does this so that I can base routing decisions on the query string passed in the request (yeh, it may not necessarily be rfc compliant to do that, but I do need it).

Rails incorrectly raises NotImplemented errors when the route (with the extra conditions) does not match rather than RoutingError because the extra environment is not passed on to route recognition when testing for other HTTP verbs that might work (so those recognition tests might pass when they shouldn't).

This requires a one line fix in recognition_optimisation.rb

Change this:
@@@
        allows = HTTP_METHODS.select {|verb| routes.find {|r| r.recognize(path, :method =&gt; verb)}}
@@@
To this:
@@@
        allows = HTTP_METHODS.select {|verb| routes.find {|r| r.recognize(path, environment.merge(:method =&gt; verb))}}
@@@

I attach a patch for this.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In the rails code comments it suggests that
Route#recognition_conditions may be redefined by a plugin to allow
for routing to depend on different and new conditions. You also
modify the creation of the environment data (a hash) that feeds
this in RouteSet#extract_request_environment.&lt;/p&gt;
&lt;p&gt;I have a plugin that does this so that I can base routing
decisions on the query string passed in the request (yeh, it may
not necessarily be rfc compliant to do that, but I do need it).&lt;/p&gt;
&lt;p&gt;Rails incorrectly raises NotImplemented errors when the route
(with the extra conditions) does not match rather than RoutingError
because the extra environment is not passed on to route recognition
when testing for other HTTP verbs that might work (so those
recognition tests might pass when they shouldn't).&lt;/p&gt;
&lt;p&gt;This requires a one line fix in recognition_optimisation.rb&lt;/p&gt;
&lt;p&gt;Change this:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
        allows = HTTP_METHODS.select {|verb| routes.find {|r| r.recognize(path, :method =&amp;gt; verb)}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To this:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
        allows = HTTP_METHODS.select {|verb| routes.find {|r| r.recognize(path, environment.merge(:method =&amp;gt; verb))}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I attach a patch for this.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In the rails code comments it suggests that Route#recognition_conditions may be redefined by a plugin to allow for routing to depend on different and new conditions.
You also modify the creation of the environment data (a hash) that feeds this in RouteSet#extract_request_environment.

I have a plugin that does this so that I can base routing decisions on the query string passed in the request (yeh, it may not necessarily be rfc compliant to do that, but I do need it).

Rails incorrectly raises NotImplemented errors when the route (with the extra conditions) does not match rather than RoutingError because the extra environment is not passed on to route recognition when testing for other HTTP verbs that might work (so those recognition tests might pass when they shouldn't).

This requires a one line fix in recognition_optimisation.rb

Change this:
@@@
        allows = HTTP_METHODS.select {|verb| routes.find {|r| r.recognize(path, :method =&gt; verb)}}
@@@
To this:
@@@
        allows = HTTP_METHODS.select {|verb| routes.find {|r| r.recognize(path, environment.merge(:method =&gt; verb))}}
@@@

I attach a patch for this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In the rails code comments it suggests that
Route#recognition_conditions may be redefined by a plugin to allow
for routing to depend on different and new conditions. You also
modify the creation of the environment data (a hash) that feeds
this in RouteSet#extract_request_environment.&lt;/p&gt;
&lt;p&gt;I have a plugin that does this so that I can base routing
decisions on the query string passed in the request (yeh, it may
not necessarily be rfc compliant to do that, but I do need it).&lt;/p&gt;
&lt;p&gt;Rails incorrectly raises NotImplemented errors when the route
(with the extra conditions) does not match rather than RoutingError
because the extra environment is not passed on to route recognition
when testing for other HTTP verbs that might work (so those
recognition tests might pass when they shouldn't).&lt;/p&gt;
&lt;p&gt;This requires a one line fix in recognition_optimisation.rb&lt;/p&gt;
&lt;p&gt;Change this:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
        allows = HTTP_METHODS.select {|verb| routes.find {|r| r.recognize(path, :method =&amp;gt; verb)}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To this:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
        allows = HTTP_METHODS.select {|verb| routes.find {|r| r.recognize(path, environment.merge(:method =&amp;gt; verb))}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I attach a patch for this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-24T07:00:00+01:00</created-at>
      <creator-id type="integer">22013</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1261</number>
      <permalink>route-recognition-incorrectly-reports-notimplemented-when-using-extended-recognition-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Route recognition incorrectly reports NotImplemented when using extended recognition conditions</title>
      <updated-at type="datetime">2008-10-24T07:00:05+01:00</updated-at>
      <user-id type="integer">22013</user-id>
      <version type="integer">1</version>
      <user-name>sds</user-name>
      <creator-name>sds</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1261</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Looks like this has already been already fixed - http://github.com/rails/rails/commit/f23c2796ee4a217d48bcefbc0056aaab6b1b64fa</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks like this has already been already fixed - &lt;a href=&quot;http://github.com/rails/rails/commit/f23c2796ee4a217d48bcefbc0056aaab6b1b64fa&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-06T16:59:20+00:00</created-at>
      <creator-id type="integer">22013</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:tag: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1261</number>
      <permalink>route-recognition-incorrectly-reports-notimplemented-when-using-extended-recognition-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>patch routing</tag>
      <title>Route recognition incorrectly reports NotImplemented when using extended recognition conditions</title>
      <updated-at type="datetime">2009-03-06T16:59:25+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>sds</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1261</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>99f4b88524f35b0cd34d0a483082e48e0b2291f2</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-24T07:00:00+01:00</created-at>
      <filename>routing_recognise_not_implemented_fix.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">56763</id>
      <size type="integer">884</size>
      <uploader-id type="integer">22013</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/56763/routing_recognise_not_implemented_fix.patch</url>
    </attachment>
  </attachments>
</ticket>
