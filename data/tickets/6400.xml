<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-09T16:17:32+00:00</created-at>
  <creator-id type="integer">15346</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6400</number>
  <permalink>allow-arel-sql-literal-nodes-for-limit</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>&quot;activerecord arel 3-0-stable&quot;</tag>
  <title>Allow ARel SQL Literal Nodes For Limit</title>
  <updated-at type="datetime">2011-02-09T16:33:27+00:00</updated-at>
  <user-id type="integer">15316</user-id>
  <version type="integer">2</version>
  <user-name>Aaron Patterson</user-name>
  <creator-name>Ken Collins</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6400</url>
  <priority-name>Low</priority-name>
  <original-body>The v3.0.4 limit regression and security fix here [1] should allow for ARel's SQL literal values to pass thru sanitization intact. This patch just adds a few lines to allow that while changing the documentation a bit. This patch also adds the SQLServerAdapter to the list of adapters that should ignore comma seperated values for limit strings.

I guess it could be argued that anyone really wanting to put comma separated values as a limit can no just pass Arel.sql strings which would simplify this method. But I did not want to presume an implementation change to force people to do that. If deemed appropriate, I can resubmit another patch that officially removes support from that method for said parsing and this whole thing can be a lot simplier.

[1] https://github.com/rails/rails/commit/354da43ab0a10b3b7b3f9cb0619aa562c3be8474</original-body>
  <latest-body>The v3.0.4 limit regression and security fix here [1] should allow for ARel's SQL literal values to pass thru sanitization intact. This patch just adds a few lines to allow that while changing the documentation a bit. This patch also adds the SQLServerAdapter to the list of adapters that should ignore comma seperated values for limit strings.

I guess it could be argued that anyone really wanting to put comma separated values as a limit can no just pass Arel.sql strings which would simplify this method. But I did not want to presume an implementation change to force people to do that. If deemed appropriate, I can resubmit another patch that officially removes support from that method for said parsing and this whole thing can be a lot simplier.

[1] https://github.com/rails/rails/commit/354da43ab0a10b3b7b3f9cb0619aa562c3be8474</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The v3.0.4 limit regression and security fix here &lt;a href=
&quot;/projects/8994/changesets/1&quot; title=&quot;Changeset [1]&quot;&gt;[1]&lt;/a&gt; should
allow for ARel's SQL literal values to pass thru sanitization
intact. This patch just adds a few lines to allow that while
changing the documentation a bit. This patch also adds the
SQLServerAdapter to the list of adapters that should ignore comma
seperated values for limit strings.&lt;/p&gt;
&lt;p&gt;I guess it could be argued that anyone really wanting to put
comma separated values as a limit can no just pass Arel.sql strings
which would simplify this method. But I did not want to presume an
implementation change to force people to do that. If deemed
appropriate, I can resubmit another patch that officially removes
support from that method for said parsing and this whole thing can
be a lot simplier.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/projects/8994/changesets/1&quot; title=
&quot;Changeset [1]&quot;&gt;[1]&lt;/a&gt; &lt;a href=
&quot;https://github.com/rails/rails/commit/354da43ab0a10b3b7b3f9cb0619aa562c3be8474&quot;&gt;
https://github.com/rails/rails/commit/354da43ab0a10b3b7b3f9cb0619aa...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The v3.0.4 limit regression and security fix here [1] should allow for ARel's SQL literal values to pass thru sanitization intact. This patch just adds a few lines to allow that while changing the documentation a bit. This patch also adds the SQLServerAdapter to the list of adapters that should ignore comma seperated values for limit strings.

I guess it could be argued that anyone really wanting to put comma separated values as a limit can no just pass Arel.sql strings which would simplify this method. But I did not want to presume an implementation change to force people to do that. If deemed appropriate, I can resubmit another patch that officially removes support from that method for said parsing and this whole thing can be a lot simplier.

[1] https://github.com/rails/rails/commit/354da43ab0a10b3b7b3f9cb0619aa562c3be8474</body>
      <body-html>&lt;div&gt;&lt;p&gt;The v3.0.4 limit regression and security fix here &lt;a href=
&quot;/projects/8994/changesets/1&quot; title=&quot;Changeset [1]&quot;&gt;[1]&lt;/a&gt; should
allow for ARel's SQL literal values to pass thru sanitization
intact. This patch just adds a few lines to allow that while
changing the documentation a bit. This patch also adds the
SQLServerAdapter to the list of adapters that should ignore comma
seperated values for limit strings.&lt;/p&gt;
&lt;p&gt;I guess it could be argued that anyone really wanting to put
comma separated values as a limit can no just pass Arel.sql strings
which would simplify this method. But I did not want to presume an
implementation change to force people to do that. If deemed
appropriate, I can resubmit another patch that officially removes
support from that method for said parsing and this whole thing can
be a lot simplier.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/projects/8994/changesets/1&quot; title=
&quot;Changeset [1]&quot;&gt;[1]&lt;/a&gt; &lt;a href=
&quot;https://github.com/rails/rails/commit/354da43ab0a10b3b7b3f9cb0619aa562c3be8474&quot;&gt;
https://github.com/rails/rails/commit/354da43ab0a10b3b7b3f9cb0619aa...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-09T16:17:32+00:00</created-at>
      <creator-id type="integer">15346</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6400</number>
      <permalink>allow-arel-sql-literal-nodes-for-limit</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord arel 3-0-stable&quot;</tag>
      <title>Allow ARel SQL Literal Nodes For Limit</title>
      <updated-at type="datetime">2011-02-09T16:17:38+00:00</updated-at>
      <user-id type="integer">15346</user-id>
      <version type="integer">1</version>
      <user-name>Ken Collins</user-name>
      <creator-name>Ken Collins</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6400</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Applied and pushed.  Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Applied and pushed. Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-09T16:33:17+00:00</created-at>
      <creator-id type="integer">15346</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6400</number>
      <permalink>allow-arel-sql-literal-nodes-for-limit</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>&quot;activerecord arel 3-0-stable&quot;</tag>
      <title>Allow ARel SQL Literal Nodes For Limit</title>
      <updated-at type="datetime">2011-02-09T16:33:27+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">2</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Ken Collins</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6400</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>595639073f20e0e4ee726b977757d3310e1494da</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-09T16:17:32+00:00</created-at>
      <filename>sql_literal_limit.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">904120</id>
      <size type="integer">2982</size>
      <uploader-id type="integer">15346</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/904120/sql_literal_limit.diff</url>
    </attachment>
  </attachments>
</ticket>
