<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-14T02:33:08+01:00</created-at>
  <creator-id type="integer">16428</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">191</number>
  <permalink>belongs-to-polymorphic-association-assignment-with-new_records-doesn-t-update</permalink>
  <priority type="integer">11115</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord bug joins patch</tag>
  <title>Belongs to polymorphic association assignment with new records doesn't update foreign id or type</title>
  <updated-at type="datetime">2008-05-31T23:03:46+01:00</updated-at>
  <user-id type="integer">1</user-id>
  <version type="integer">7</version>
  <user-name>Rick</user-name>
  <creator-name>Tim Harper</creator-name>
  <assigned-user-name>Rick</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/191</url>
  <priority-name nil="true"></priority-name>
  <original-body>http://github.com/timcharper/rails/commit/bb03495ba5bbc3ba2779cd4acbca5c2d9d7332b9

h2. Commit fixes the following scenarios:

* I have validates_inclusion_of on the type field for a polymorphic 
belongs_to association.  I assign a new record to the model's polymorphic 
relationship of the proper type.  validation fails because the type field 
has not been updated.

* I replace the value for a ppolymorphic association to a new record of 
another class.  The type field still says its the previous class, and the 
id field points to the previous record as well.

-----

@@@
technoweenie: timcharper: it probably shouldnt set the record.id if record is new
[7:22pm] bitsweat left the chat room.
[7:22pm] technoweenie: i'm not sure what record.id will be, nil I guess?  maybe it doesnt matter
[7:22pm] timcharper: yeah - that's what I'm thinking
[7:22pm] timcharper: it should at least clear it
[7:22pm] technoweenie: i guess in rare cases someone might pre-set the id  and would want it set
[7:22pm] timcharper: i was debating between that or a turnary
[7:22pm] timcharper: ternary
[7:22pm] technoweenie: divoxx: yes please i may not get to it tonight
[7:23pm] technoweenie: record.new_record? ? nil : record.id ?
[7:23pm] timcharper: yeah
[7:23pm] technoweenie: sub /\?$/, ''
[7:23pm] timcharper: but was thinking the case would be in the minority that they set the id before saving the record
[7:23pm] timcharper: and if so, they probably did so intentionally, and would likely want the foreign key to receive that value as well
[7:24pm] technoweenie: yup
[7:24pm] technoweenie: as long as it doesnt blow up for the rest of us
[7:24pm] technoweenie: blow up, or set bad values
[7:25pm] timcharper: can you think of how it would ?  I can't think of anything
[7:25pm] technoweenie: nope
[7:25pm] technoweenie: i guess if you're a moron and try to set it wrong, you deserve what you get
[7:26pm] timcharper: yeah, that sounds about right
[7:26pm] timcharper: submitting the ticket
[7:26pm] technoweenie: and if its committed, and there is some wacky case where it blows up, it just means we were missing a regression test anyway
@@@</original-body>
  <latest-body>http://github.com/timcharper/rails/commit/bb03495ba5bbc3ba2779cd4acbca5c2d9d7332b9

h2. Commit fixes the following scenarios:

* I have validates_inclusion_of on the type field for a polymorphic 
belongs_to association.  I assign a new record to the model's polymorphic 
relationship of the proper type.  validation fails because the type field 
has not been updated.

* I replace the value for a ppolymorphic association to a new record of 
another class.  The type field still says its the previous class, and the 
id field points to the previous record as well.

-----

@@@
technoweenie: timcharper: it probably shouldnt set the record.id if record is new
[7:22pm] bitsweat left the chat room.
[7:22pm] technoweenie: i'm not sure what record.id will be, nil I guess?  maybe it doesnt matter
[7:22pm] timcharper: yeah - that's what I'm thinking
[7:22pm] timcharper: it should at least clear it
[7:22pm] technoweenie: i guess in rare cases someone might pre-set the id  and would want it set
[7:22pm] timcharper: i was debating between that or a turnary
[7:22pm] timcharper: ternary
[7:22pm] technoweenie: divoxx: yes please i may not get to it tonight
[7:23pm] technoweenie: record.new_record? ? nil : record.id ?
[7:23pm] timcharper: yeah
[7:23pm] technoweenie: sub /\?$/, ''
[7:23pm] timcharper: but was thinking the case would be in the minority that they set the id before saving the record
[7:23pm] timcharper: and if so, they probably did so intentionally, and would likely want the foreign key to receive that value as well
[7:24pm] technoweenie: yup
[7:24pm] technoweenie: as long as it doesnt blow up for the rest of us
[7:24pm] technoweenie: blow up, or set bad values
[7:25pm] timcharper: can you think of how it would ?  I can't think of anything
[7:25pm] technoweenie: nope
[7:25pm] technoweenie: i guess if you're a moron and try to set it wrong, you deserve what you get
[7:26pm] timcharper: yeah, that sounds about right
[7:26pm] timcharper: submitting the ticket
[7:26pm] technoweenie: and if its committed, and there is some wacky case where it blows up, it just means we were missing a regression test anyway
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/timcharper/rails/commit/bb03495ba5bbc3ba2779cd4acbca5c2d9d7332b9&quot;&gt;http://github.com/timcharper/rai...&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Commit fixes the following scenarios:
&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
I have validates_inclusion_of on the type field for a polymorphic
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
belongs_to association.  I assign a new record to the model's polymorphic
&lt;/p&gt;&lt;p&gt;
relationship of the proper type.  validation fails because the type field
&lt;/p&gt;&lt;p&gt;
has not been updated.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
I replace the value for a ppolymorphic association to a new record of
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
another class.  The type field still says its the previous class, and the
&lt;/p&gt;&lt;p&gt;
id field points to the previous record as well.
&lt;/p&gt;&lt;p&gt;
-----
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;technoweenie: timcharper: it probably shouldnt set the record.id if record is new
[7:22pm] bitsweat left the chat room.
[7:22pm] technoweenie: i'm not sure what record.id will be, nil I guess?  maybe it doesnt matter
[7:22pm] timcharper: yeah - that's what I'm thinking
[7:22pm] timcharper: it should at least clear it
[7:22pm] technoweenie: i guess in rare cases someone might pre-set the id  and would want it set
[7:22pm] timcharper: i was debating between that or a turnary
[7:22pm] timcharper: ternary
[7:22pm] technoweenie: divoxx: yes please i may not get to it tonight
[7:23pm] technoweenie: record.new_record? ? nil : record.id ?
[7:23pm] timcharper: yeah
[7:23pm] technoweenie: sub /\?$/, ''
[7:23pm] timcharper: but was thinking the case would be in the minority that they set the id before saving the record
[7:23pm] timcharper: and if so, they probably did so intentionally, and would likely want the foreign key to receive that value as well
[7:24pm] technoweenie: yup
[7:24pm] technoweenie: as long as it doesnt blow up for the rest of us
[7:24pm] technoweenie: blow up, or set bad values
[7:25pm] timcharper: can you think of how it would ?  I can't think of anything
[7:25pm] technoweenie: nope
[7:25pm] technoweenie: i guess if you're a moron and try to set it wrong, you deserve what you get
[7:26pm] timcharper: yeah, that sounds about right
[7:26pm] timcharper: submitting the ticket
[7:26pm] technoweenie: and if its committed, and there is some wacky case where it blows up, it just means we were missing a regression test anyway&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>h2. Patch on github:

http://github.com/timcharper/rails/commit/bb03495ba5bbc3ba2779cd4acbca5c2d9d7332b9

h2. Fixes the following scenarios:

* I have validates_inclusion_of on the type field for a polymorphic 
belongs_to association.  I assign a new record to the model's polymorphic 
relationship of the proper type.  validation fails because the type field 
has not been updated.

* I replace the value for a polymorphic association to a new record of 
another class.  The type field still says its the previous class, and the 
id field points to the previous record as well.

-----

@@@
[7:22pm] technoweenie: timcharper: it probably shouldnt set the record.id if record is new
[7:22pm] technoweenie: i'm not sure what record.id will be, nil I guess?  maybe it doesnt matter
[7:22pm] timcharper: yeah - that's what I'm thinking
[7:22pm] timcharper: it should at least clear it
[7:22pm] technoweenie: i guess in rare cases someone might pre-set the id  and would want it set
[7:22pm] timcharper: i was debating between that or a ternary
[7:23pm] technoweenie: record.new_record? ? nil : record.id
[7:23pm] timcharper: yeah
[7:23pm] timcharper: but was thinking the case would be in the minority that they set the id before saving the record
[7:23pm] timcharper: and if so, they probably did so intentionally, and would likely want the foreign key to receive that value as well
[7:24pm] technoweenie: yup
[7:24pm] technoweenie: as long as it doesnt blow up for the rest of us
[7:24pm] technoweenie: blow up, or set bad values
[7:25pm] timcharper: can you think of how it would ?  I can't think of anything
[7:25pm] technoweenie: nope
[7:25pm] technoweenie: i guess if you're a moron and try to set it wrong, you deserve what you get
[7:26pm] timcharper: yeah, that sounds about right
[7:26pm] timcharper: submitting the ticket
[7:26pm] technoweenie: and if its committed, and there is some wacky case where it blows up, it just means we were missing a regression test anyway
@@@</body>
      <body-html>&lt;div&gt;&lt;h2&gt;
Patch on github:
&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&quot;http://github.com/timcharper/rails/commit/bb03495ba5bbc3ba2779cd4acbca5c2d9d7332b9&quot;&gt;http://github.com/timcharper/rai...&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Fixes the following scenarios:
&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
I have validates_inclusion_of on the type field for a polymorphic
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
belongs_to association.  I assign a new record to the model's polymorphic
&lt;/p&gt;&lt;p&gt;
relationship of the proper type.  validation fails because the type field
&lt;/p&gt;&lt;p&gt;
has not been updated.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
I replace the value for a polymorphic association to a new record of
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
another class.  The type field still says its the previous class, and the
&lt;/p&gt;&lt;p&gt;
id field points to the previous record as well.
&lt;/p&gt;&lt;p&gt;
-----
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;[7:22pm] technoweenie: timcharper: it probably shouldnt set the record.id if record is new
[7:22pm] technoweenie: i'm not sure what record.id will be, nil I guess?  maybe it doesnt matter
[7:22pm] timcharper: yeah - that's what I'm thinking
[7:22pm] timcharper: it should at least clear it
[7:22pm] technoweenie: i guess in rare cases someone might pre-set the id  and would want it set
[7:22pm] timcharper: i was debating between that or a ternary
[7:23pm] technoweenie: record.new_record? ? nil : record.id
[7:23pm] timcharper: yeah
[7:23pm] timcharper: but was thinking the case would be in the minority that they set the id before saving the record
[7:23pm] timcharper: and if so, they probably did so intentionally, and would likely want the foreign key to receive that value as well
[7:24pm] technoweenie: yup
[7:24pm] technoweenie: as long as it doesnt blow up for the rest of us
[7:24pm] technoweenie: blow up, or set bad values
[7:25pm] timcharper: can you think of how it would ?  I can't think of anything
[7:25pm] technoweenie: nope
[7:25pm] technoweenie: i guess if you're a moron and try to set it wrong, you deserve what you get
[7:26pm] timcharper: yeah, that sounds about right
[7:26pm] timcharper: submitting the ticket
[7:26pm] technoweenie: and if its committed, and there is some wacky case where it blows up, it just means we were missing a regression test anyway&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-14T07:24:34+01:00</created-at>
      <creator-id type="integer">16428</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">191</number>
      <permalink>belongs-to-polymorphic-association-assignment-with-new_records-doesn-t-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Belongs to polymorphic association assignment with new records doesn't update foreign id or type</title>
      <updated-at type="datetime">2008-05-14T07:24:34+01:00</updated-at>
      <user-id type="integer">16428</user-id>
      <version type="integer">1</version>
      <user-name>Tim Harper</user-name>
      <creator-name>Tim Harper</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/191</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-14T02:34:01+01:00</created-at>
      <creator-id type="integer">16428</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">191</number>
      <permalink>belongs-to-polymorphic-association-assignment-with-new_records-doesn-t-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Belongs to polymorphic association assignment with new_records doesn't update </title>
      <updated-at type="datetime">2008-05-14T02:34:01+01:00</updated-at>
      <user-id type="integer">1</user-id>
      <version type="integer">2</version>
      <user-name>Rick</user-name>
      <creator-name>Tim Harper</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/191</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.1.1</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-20T18:39:38+01:00</created-at>
      <creator-id type="integer">16428</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
:milestone: 9901
:title: &quot;Belongs to polymorphic association assignment with new_records doesn't update &quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">191</number>
      <permalink>belongs-to-polymorphic-association-assignment-with-new_records-doesn-t-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Belongs to polymorphic association assignment with new records doesn't update foreign id or type</title>
      <updated-at type="datetime">2008-05-20T18:39:38+01:00</updated-at>
      <user-id type="integer">1</user-id>
      <version type="integer">3</version>
      <user-name>Rick</user-name>
      <creator-name>Tim Harper</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/191</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-20T18:40:08+01:00</created-at>
      <creator-id type="integer">16428</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">191</number>
      <permalink>belongs-to-polymorphic-association-assignment-with-new_records-doesn-t-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Belongs to polymorphic association assignment with new records doesn't update foreign id or type</title>
      <updated-at type="datetime">2008-05-20T18:40:08+01:00</updated-at>
      <user-id type="integer">1</user-id>
      <version type="integer">4</version>
      <user-name>Rick</user-name>
      <creator-name>Tim Harper</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/191</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Is this patch not going to make it into 2.1 ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Is this patch not going to make it into 2.1 ?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-30T01:06:34+01:00</created-at>
      <creator-id type="integer">16428</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">191</number>
      <permalink>belongs-to-polymorphic-association-assignment-with-new_records-doesn-t-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Belongs to polymorphic association assignment with new records doesn't update foreign id or type</title>
      <updated-at type="datetime">2008-05-30T01:06:34+01:00</updated-at>
      <user-id type="integer">16428</user-id>
      <version type="integer">5</version>
      <user-name>Tim Harper</user-name>
      <creator-name>Tim Harper</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/191</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [0580b31b36c0f7dd1a0f8bdd1b1806e3bd65b22d]) belongs_to polymorphic association assignments update the foreign_id and foreign_type fields regardless of whether the record being assigned is new or not.

fixes the following scenarios:
* I have validates_inclusion_of on the type field for a polymorphic belongs_to association.  I assign a new record to the model's polymorphic relationship of the proper type.  validation fails because the type field has not been updated.

* I replace the value for a ppolymorphic association to a new record of another class.  The type field still says its the previous class, and the id field points to the previous record as well.

[#191 state:closed]
http://github.com/rails/rails/commit/0580b31b36c0f7dd1a0f8bdd1b1806e3bd65b22d</body>
      <body-html>&lt;div&gt;&lt;p&gt;
(from [0580b31b36c0f7dd1a0f8bdd1b1806e3bd65b22d]) belongs_to polymorphic association assignments update the foreign_id and foreign_type fields regardless of whether the record being assigned is new or not.
&lt;/p&gt;&lt;p&gt;
fixes the following scenarios:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
I have validates_inclusion_of on the type field for a polymorphic belongs_to association.  I assign a new record to the model's polymorphic relationship of the proper type.  validation fails because the type field has not been updated.
&lt;/li&gt;&lt;li&gt;
I replace the value for a ppolymorphic association to a new record of another class.  The type field still says its the previous class, and the id field points to the previous record as well.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
[#191 state:closed]
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/0580b31b36c0f7dd1a0f8bdd1b1806e3bd65b22d&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-31T21:40:24+01:00</created-at>
      <creator-id type="integer">16428</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">191</number>
      <permalink>belongs-to-polymorphic-association-assignment-with-new_records-doesn-t-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Belongs to polymorphic association assignment with new records doesn't update foreign id or type</title>
      <updated-at type="datetime">2008-05-31T21:40:24+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">6</version>
      <user-name>Repository</user-name>
      <creator-name>Tim Harper</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/191</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Uh weird, why wasn't this closed</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Uh weird, why wasn't this closed
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-31T23:03:46+01:00</created-at>
      <creator-id type="integer">16428</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">191</number>
      <permalink>belongs-to-polymorphic-association-assignment-with-new_records-doesn-t-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Belongs to polymorphic association assignment with new records doesn't update foreign id or type</title>
      <updated-at type="datetime">2008-05-31T23:03:46+01:00</updated-at>
      <user-id type="integer">1</user-id>
      <version type="integer">7</version>
      <user-name>Rick</user-name>
      <creator-name>Tim Harper</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/191</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
</ticket>
