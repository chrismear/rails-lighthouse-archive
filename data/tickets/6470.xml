<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-25T15:37:10+00:00</created-at>
  <creator-id type="integer">52919</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6470</number>
  <permalink>actiondispatchhttpparameters-force-encoding-of-all-params-but-filename-of-an-uploaded-file</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>action_dispatch &quot;rails 3&quot;</tag>
  <title>ActionDispatch::Http:Parameters force encoding of all params but filename of an uploaded file</title>
  <updated-at type="datetime">2011-04-27T10:09:08+01:00</updated-at>
  <user-id type="integer">29788</user-id>
  <version type="integer">2</version>
  <user-name>Jim Sagevid</user-name>
  <creator-name>Franck</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6470</url>
  <priority-name nil="true"></priority-name>
  <original-body>I run into a problem when I submit a form with a text field and a filename of an uploaded file both containing special chars.

Tracking down the issue it seems that while ActionDispatch force the encoding of all string paramaters to UTF-8 (see ActionDispatch::Http:Parameters encode_params private method), it does not do at to the filename of the uploaded file.

params is then filled with two different encoding (UTF-8 and ASCII-8BIT) causing an Encoding::CompatibilityError later on Arel-2.0.8 (to_sql.rb visit_Arel_Nodes_Values method).

I monkey patched ActionDispatch::Http:UploadedFile like so and it works :

@@@ ruby
  def initialize(hash)
    @original_filename = hash[:filename].force_encoding(&quot;UTF-8&quot;)        
    @content_type      = hash[:type]
    @headers           = hash[:head]
    @tempfile          = hash[:tempfile]
    raise(ArgumentError, ':tempfile is required') unless @tempfile
  end
@@@

My computing skill stop here. I let you guys decide if this is a bug or if I'm doing something wrong.</original-body>
  <latest-body>I run into a problem when I submit a form with a text field and a filename of an uploaded file both containing special chars.

Tracking down the issue it seems that while ActionDispatch force the encoding of all string paramaters to UTF-8 (see ActionDispatch::Http:Parameters encode_params private method), it does not do at to the filename of the uploaded file.

params is then filled with two different encoding (UTF-8 and ASCII-8BIT) causing an Encoding::CompatibilityError later on Arel-2.0.8 (to_sql.rb visit_Arel_Nodes_Values method).

I monkey patched ActionDispatch::Http:UploadedFile like so and it works :

@@@ ruby
  def initialize(hash)
    @original_filename = hash[:filename].force_encoding(&quot;UTF-8&quot;)        
    @content_type      = hash[:type]
    @headers           = hash[:head]
    @tempfile          = hash[:tempfile]
    raise(ArgumentError, ':tempfile is required') unless @tempfile
  end
@@@

My computing skill stop here. I let you guys decide if this is a bug or if I'm doing something wrong.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I run into a problem when I submit a form with a text field and
a filename of an uploaded file both containing special chars.&lt;/p&gt;
&lt;p&gt;Tracking down the issue it seems that while ActionDispatch force
the encoding of all string paramaters to UTF-8 (see
ActionDispatch::Http:Parameters encode_params private method), it
does not do at to the filename of the uploaded file.&lt;/p&gt;
&lt;p&gt;params is then filled with two different encoding (UTF-8 and
ASCII-8BIT) causing an Encoding::CompatibilityError later on
Arel-2.0.8 (to_sql.rb visit_Arel_Nodes_Values method).&lt;/p&gt;
&lt;p&gt;I monkey patched ActionDispatch::Http:UploadedFile like so and
it works :&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  def initialize(hash)
    @original_filename = hash[:filename].force_encoding(&quot;UTF-8&quot;)        
    @content_type      = hash[:type]
    @headers           = hash[:head]
    @tempfile          = hash[:tempfile]
    raise(ArgumentError, ':tempfile is required') unless @tempfile
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My computing skill stop here. I let you guys decide if this is a
bug or if I'm doing something wrong.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I run into a problem when I submit a form with a text field and a filename of an uploaded file both containing special chars.

Tracking down the issue it seems that while ActionDispatch force the encoding of all string paramaters to UTF-8 (see ActionDispatch::Http:Parameters encode_params private method), it does not do at to the filename of the uploaded file.

params is then filled with two different encoding (UTF-8 and ASCII-8BIT) causing an Encoding::CompatibilityError later on Arel-2.0.8 (to_sql.rb visit_Arel_Nodes_Values method).

I monkey patched ActionDispatch::Http:UploadedFile like so and it works :

@@@ ruby
  def initialize(hash)
    @original_filename = hash[:filename].force_encoding(&quot;UTF-8&quot;)        
    @content_type      = hash[:type]
    @headers           = hash[:head]
    @tempfile          = hash[:tempfile]
    raise(ArgumentError, ':tempfile is required') unless @tempfile
  end
@@@

My computing skill stop here. I let you guys decide if this is a bug or if I'm doing something wrong.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I run into a problem when I submit a form with a text field and
a filename of an uploaded file both containing special chars.&lt;/p&gt;
&lt;p&gt;Tracking down the issue it seems that while ActionDispatch force
the encoding of all string paramaters to UTF-8 (see
ActionDispatch::Http:Parameters encode_params private method), it
does not do at to the filename of the uploaded file.&lt;/p&gt;
&lt;p&gt;params is then filled with two different encoding (UTF-8 and
ASCII-8BIT) causing an Encoding::CompatibilityError later on
Arel-2.0.8 (to_sql.rb visit_Arel_Nodes_Values method).&lt;/p&gt;
&lt;p&gt;I monkey patched ActionDispatch::Http:UploadedFile like so and
it works :&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  def initialize(hash)
    @original_filename = hash[:filename].force_encoding(&quot;UTF-8&quot;)        
    @content_type      = hash[:type]
    @headers           = hash[:head]
    @tempfile          = hash[:tempfile]
    raise(ArgumentError, ':tempfile is required') unless @tempfile
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My computing skill stop here. I let you guys decide if this is a
bug or if I'm doing something wrong.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-25T15:37:10+00:00</created-at>
      <creator-id type="integer">52919</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6470</number>
      <permalink>actiondispatchhttpparameters-force-encoding-of-all-params-but-filename-of-an-uploaded-file</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_dispatch &quot;rails 3&quot;</tag>
      <title>ActionDispatch::Http:Parameters force encoding of all params but filename of an uploaded file</title>
      <updated-at type="datetime">2011-02-25T15:37:13+00:00</updated-at>
      <user-id type="integer">52919</user-id>
      <version type="integer">1</version>
      <user-name>Franck</user-name>
      <creator-name>Franck</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6470</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-27T10:09:04+01:00</created-at>
      <creator-id type="integer">52919</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6470</number>
      <permalink>actiondispatchhttpparameters-force-encoding-of-all-params-but-filename-of-an-uploaded-file</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_dispatch &quot;rails 3&quot;</tag>
      <title>ActionDispatch::Http:Parameters force encoding of all params but filename of an uploaded file</title>
      <updated-at type="datetime">2011-04-27T10:09:08+01:00</updated-at>
      <user-id type="integer">29788</user-id>
      <version type="integer">2</version>
      <user-name>Jim Sagevid</user-name>
      <creator-name>Franck</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6470</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
