<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-05-12T04:04:02+01:00</created-at>
  <creator-id type="integer">20836</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4579</number>
  <permalink>respond_with-should-exhibit-common-behaviour-for-api-requests-even-when-a-template-exists</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>respond_with should exhibit common behaviour for &quot;API&quot; requests, even when a template exists.</title>
  <updated-at type="datetime">2011-02-02T18:52:13+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Lawrence Pit</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4579</url>
  <priority-name>Low</priority-name>
  <original-body>Using rails 3 master. My +create+ controller method ends with respond_with(@user), in which case it will result in a http status code of 201 (:created) and will have :location set. However, when I define a view using xml builder, then the http status code will be 200 and no :location is set. 

Ending with respond_with(@user, :status =&gt; :created) does not set the status to :created either.

Furthermore, if the user in example below couldn't be created, then the template is rendered for the @user object (which contains errors), and the http status code is 200. Here too, I would expect the common API behavior where it basically does: display resource.errors, :status =&gt; :unprocessable_entity

@@@ ruby
  respond_to :xml, :json

  # POST /user.&lt;format&gt;
  def create
    @user = User.create(params[:user])
    respond_with(@user)
  end
@@@</original-body>
  <latest-body>Using rails 3 master. My +create+ controller method ends with respond_with(@user), in which case it will result in a http status code of 201 (:created) and will have :location set. However, when I define a view using xml builder, then the http status code will be 200 and no :location is set. 

Ending with respond_with(@user, :status =&gt; :created) does not set the status to :created either.

Furthermore, if the user in example below couldn't be created, then the template is rendered for the @user object (which contains errors), and the http status code is 200. Here too, I would expect the common API behavior where it basically does: display resource.errors, :status =&gt; :unprocessable_entity

@@@ ruby
  respond_to :xml, :json

  # POST /user.&lt;format&gt;
  def create
    @user = User.create(params[:user])
    respond_with(@user)
  end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Using rails 3 master. My +create+ controller method ends with
respond_with(@user), in which case it will result in a http status
code of 201 (:created) and will have :location set. However, when I
define a view using xml builder, then the http status code will be
200 and no :location is set.&lt;/p&gt;
&lt;p&gt;Ending with respond_with(@user, :status =&amp;gt; :created) does not
set the status to :created either.&lt;/p&gt;
&lt;p&gt;Furthermore, if the user in example below couldn't be created,
then the template is rendered for the @user object (which contains
errors), and the http status code is 200. Here too, I would expect
the common API behavior where it basically does: display
resource.errors, :status =&amp;gt; :unprocessable_entity&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  respond_to :xml, :json

  # POST /user.&amp;lt;format&amp;gt;
  def create
    @user = User.create(params[:user])
    respond_with(@user)
  end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Using rails 3 master. My +create+ controller method ends with respond_with(@user), in which case it will result in a http status code of 201 (:created) and will have :location set. However, when I define a view using xml builder, then the http status code will be 200 and no :location is set. 

Ending with respond_with(@user, :status =&gt; :created) does not set the status to :created either.

Furthermore, if the user in example below couldn't be created, then the template is rendered for the @user object (which contains errors), and the http status code is 200. Here too, I would expect the common API behavior where it basically does: display resource.errors, :status =&gt; :unprocessable_entity

@@@ ruby
  respond_to :xml, :json

  # POST /user.&lt;format&gt;
  def create
    @user = User.create(params[:user])
    respond_with(@user)
  end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Using rails 3 master. My +create+ controller method ends with
respond_with(@user), in which case it will result in a http status
code of 201 (:created) and will have :location set. However, when I
define a view using xml builder, then the http status code will be
200 and no :location is set.&lt;/p&gt;
&lt;p&gt;Ending with respond_with(@user, :status =&amp;gt; :created) does not
set the status to :created either.&lt;/p&gt;
&lt;p&gt;Furthermore, if the user in example below couldn't be created,
then the template is rendered for the @user object (which contains
errors), and the http status code is 200. Here too, I would expect
the common API behavior where it basically does: display
resource.errors, :status =&amp;gt; :unprocessable_entity&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  respond_to :xml, :json

  # POST /user.&amp;lt;format&amp;gt;
  def create
    @user = User.create(params[:user])
    respond_with(@user)
  end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-12T04:04:02+01:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4579</number>
      <permalink>respond_with-should-exhibit-common-behaviour-for-api-requests-even-when-a-template-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>respond_with should exhibit common behaviour for &quot;API&quot; requests, even when a template exists.</title>
      <updated-at type="datetime">2010-05-12T04:04:03+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">1</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4579</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Actually, why does the +create+ method respond with the resource, while +update+ (and +delete+) don't? If +create+ were to respond with an empty body and status :created and :location set, that would solve my problem. Any objections to modifying this in rails 3 ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Actually, why does the +create+ method respond with the
resource, while +update+ (and +delete+) don't? If +create+ were to
respond with an empty body and status :created and :location set,
that would solve my problem. Any objections to modifying this in
rails 3 ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-13T02:38:38+01:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4579</number>
      <permalink>respond_with-should-exhibit-common-behaviour-for-api-requests-even-when-a-template-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>respond_with should exhibit common behaviour for &quot;API&quot; requests, even when a template exists.</title>
      <updated-at type="datetime">2010-05-13T02:38:42+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">2</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4579</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Destroy wouldn't because that resource no longer exists. Please show how to reproduce this bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Destroy wouldn't because that resource no longer exists. Please
show how to reproduce this bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-13T23:42:21+01:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4579</number>
      <permalink>respond_with-should-exhibit-common-behaviour-for-api-requests-even-when-a-template-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>needs-more-info</state>
      <tag nil="true"></tag>
      <title>respond_with should exhibit common behaviour for &quot;API&quot; requests, even when a template exists.</title>
      <updated-at type="datetime">2010-05-13T23:42:22+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">3</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4579</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>mime_respond_test.rb has this test:

@@@ ruby
  def test_using_resource_for_post_with_xml_yields_created_on_success
    with_test_route_set do
      @request.accept = &quot;application/xml&quot;
      post :using_resource
      assert_equal &quot;application/xml&quot;, @response.content_type
      assert_equal 201, @response.status
      assert_equal &quot;&lt;name&gt;david&lt;/name&gt;&quot;, @response.body
      assert_equal &quot;http://www.example.com/customers/13&quot;, @response.location
    end
  end
@@@

Which shows that when you create something it will respond with the resource in xml format in it's response body.

But in almost all my cases this default response shows a lot of stuff I don't want to expose.

So for me the solution would be to NOT respond with the resource, just like +update+ which doesn't do that either.

Alternatively if that's not the behaviour we want, then if I define a create.xml.builder file to control what gets exposed, then it should use that to build the xml on a successful create, and respond with status code 201. However, it responds with status code 200. The attached test shows this.

Furthermore, when the creation is not successful it should respond with the default API behavior as defined in the method +api_behavior+ in +responder.rb+. The attached test shows this issue too.

Which solution should we go for? As said, my preference would be that on a +post+ it will return with an empty response body always, just like with a +put+. However, this probably breaks backwards compatibility. Can we do that for rails 3.x, as that breaks a lot compared to 2.x anyways?

Last thought: is the reason to respond with the resource after a create that consuming clients might parse it to find e.g. the ID?</body>
      <body-html>&lt;div&gt;&lt;p&gt;mime_respond_test.rb has this test:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  def test_using_resource_for_post_with_xml_yields_created_on_success
    with_test_route_set do
      @request.accept = &quot;application/xml&quot;
      post :using_resource
      assert_equal &quot;application/xml&quot;, @response.content_type
      assert_equal 201, @response.status
      assert_equal &quot;&amp;lt;name&amp;gt;david&amp;lt;/name&amp;gt;&quot;, @response.body
      assert_equal &quot;http://www.example.com/customers/13&quot;, @response.location
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which shows that when you create something it will respond with
the resource in xml format in it's response body.&lt;/p&gt;
&lt;p&gt;But in almost all my cases this default response shows a lot of
stuff I don't want to expose.&lt;/p&gt;
&lt;p&gt;So for me the solution would be to NOT respond with the
resource, just like +update+ which doesn't do that either.&lt;/p&gt;
&lt;p&gt;Alternatively if that's not the behaviour we want, then if I
define a create.xml.builder file to control what gets exposed, then
it should use that to build the xml on a successful create, and
respond with status code 201. However, it responds with status code
200. The attached test shows this.&lt;/p&gt;
&lt;p&gt;Furthermore, when the creation is not successful it should
respond with the default API behavior as defined in the method
+api_behavior+ in +responder.rb+. The attached test shows this
issue too.&lt;/p&gt;
&lt;p&gt;Which solution should we go for? As said, my preference would be
that on a +post+ it will return with an empty response body always,
just like with a +put+. However, this probably breaks backwards
compatibility. Can we do that for rails 3.x, as that breaks a lot
compared to 2.x anyways?&lt;/p&gt;
&lt;p&gt;Last thought: is the reason to respond with the resource after a
create that consuming clients might parse it to find e.g. the
ID?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-19T07:05:58+01:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4579</number>
      <permalink>respond_with-should-exhibit-common-behaviour-for-api-requests-even-when-a-template-exists</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>needs-more-info</state>
      <tag nil="true"></tag>
      <title>respond_with should exhibit common behaviour for &quot;API&quot; requests, even when a template exists.</title>
      <updated-at type="datetime">2010-05-19T07:06:05+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">4</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4579</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 for &quot;Ending with respond_with(@user, :status =&gt; :created) does not set the status to :created either.&quot; (I'm on RC)

While docs state that it should be possible http://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/responder.rb#L207</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for &quot;Ending with respond_with(@user, :status =&amp;gt; :created)
does not set the status to :created either.&quot; (I'm on RC)&lt;/p&gt;
&lt;p&gt;While docs state that it should be possible &lt;a href=
&quot;http://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/responder.rb#L207&quot;&gt;
http://github.com/rails/rails/blob/master/actionpack/lib/action_con...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-17T18:08:25+01:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4579</number>
      <permalink>respond_with-should-exhibit-common-behaviour-for-api-requests-even-when-a-template-exists</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>needs-more-info</state>
      <tag nil="true"></tag>
      <title>respond_with should exhibit common behaviour for &quot;API&quot; requests, even when a template exists.</title>
      <updated-at type="datetime">2010-08-17T18:08:26+01:00</updated-at>
      <user-id type="integer">43210</user-id>
      <version type="integer">5</version>
      <user-name>Evgeniy Dolzhenko</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4579</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T17:00:02+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- 
:state: needs-more-info
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4579</number>
      <permalink>respond_with-should-exhibit-common-behaviour-for-api-requests-even-when-a-template-exists</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>respond_with should exhibit common behaviour for &quot;API&quot; requests, even when a template exists.</title>
      <updated-at type="datetime">2011-02-02T18:51:56+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4579</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T17:00:04+00:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4579</number>
      <permalink>respond_with-should-exhibit-common-behaviour-for-api-requests-even-when-a-template-exists</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>respond_with should exhibit common behaviour for &quot;API&quot; requests, even when a template exists.</title>
      <updated-at type="datetime">2011-02-02T18:52:13+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4579</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>19c38299ff7719bf3a3301b2d70e7bde12020924</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-05-19T07:05:58+01:00</created-at>
      <filename>xmlapi.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">526193</id>
      <size type="integer">2659</size>
      <uploader-id type="integer">20836</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/526193/xmlapi.diff</url>
    </attachment>
  </attachments>
</ticket>
