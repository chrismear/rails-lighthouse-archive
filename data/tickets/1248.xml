<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-22T14:01:37+01:00</created-at>
  <creator-id type="integer">15080</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1248</number>
  <permalink>rails-cache-with-splitting-into-chunks</permalink>
  <priority type="integer">653</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activesupport cache patch tested</tag>
  <title>Rails cache with splitting into chunks</title>
  <updated-at type="datetime">2009-03-06T17:00:44+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Timur Vafin</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1248</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This patch allows to store in the memcache very long arrays. 
We can store in the memcache only objects less then 1Mb, I've implement Rails.cache.fetch_splitted method witch splits array in to chunks and store all data separately.

@@@ruby
Rails.cache.fetch_splitted('Users.all', :split =&gt; 1000) do
  users = Users.all
end
@@@ruby

I've just add write_splitted, read_splitted and fetch_splitted to the Rails::Cache::Store, so you can use splitted methods for all kind of storages.</original-body>
  <latest-body>This patch allows to store in the memcache very long arrays. 
We can store in the memcache only objects less then 1Mb, I've implement Rails.cache.fetch_splitted method witch splits array in to chunks and store all data separately.

@@@ruby
Rails.cache.fetch_splitted('Users.all', :split =&gt; 1000) do
  users = Users.all
end
@@@ruby

I've just add write_splitted, read_splitted and fetch_splitted to the Rails::Cache::Store, so you can use splitted methods for all kind of storages.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch allows to store in the memcache very long arrays. We
can store in the memcache only objects less then 1Mb, I've
implement Rails.cache.fetch_splitted method witch splits array in
to chunks and store all data separately.&lt;/p&gt;
&lt;p&gt;@@@ruby Rails.cache.fetch_splitted('Users.all', :split =&amp;gt;
1000) do users = Users.all end @@@ruby&lt;/p&gt;
&lt;p&gt;I've just add write_splitted, read_splitted and fetch_splitted
to the Rails::Cache::Store, so you can use splitted methods for all
kind of storages.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch allows to store in the memcache very big arrays. 
We can store in the memcache only objects less then 1Mb, I've implement &lt;code&gt;Rails.cache.fetch_splitted&lt;/code&gt; method which splits array in to chunks and store all data separately.

@@@ ruby
Rails.cache.fetch_splitted('Users.all', :split =&gt; 1000) do
  users = Users.all
end
@@@

I've just added write_splitted, read_splitted and fetch_splitted to the Rails::Cache::Store, so you can use splitted methods for all kind of storages.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch allows to store in the memcache very big arrays. We
can store in the memcache only objects less then 1Mb, I've
implement &lt;code&gt;Rails.cache.fetch_splitted&lt;/code&gt; method which
splits array in to chunks and store all data separately.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Rails.cache.fetch_splitted('Users.all', :split =&amp;gt; 1000) do
  users = Users.all
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I've just added write_splitted, read_splitted and fetch_splitted
to the Rails::Cache::Store, so you can use splitted methods for all
kind of storages.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-22T14:01:37+01:00</created-at>
      <creator-id type="integer">15080</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1248</number>
      <permalink>rails-cache-with-splitting-into-chunks</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport cache patch tested</tag>
      <title>Rails cache with splitting into chunks</title>
      <updated-at type="datetime">2008-10-22T16:55:19+01:00</updated-at>
      <user-id type="integer">15080</user-id>
      <version type="integer">1</version>
      <user-name>Timur Vafin</user-name>
      <creator-name>Timur Vafin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1248</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I am not sure this belongs in Core. But you might want to drop an email to the core mailing list. If other people find this useful, we can roll this in.

Thanks !</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am not sure this belongs in Core. But you might want to drop
an email to the core mailing list. If other people find this
useful, we can roll this in.&lt;/p&gt;
&lt;p&gt;Thanks !&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-06T17:00:41+00:00</created-at>
      <creator-id type="integer">15080</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1248</number>
      <permalink>rails-cache-with-splitting-into-chunks</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activesupport cache patch tested</tag>
      <title>Rails cache with splitting into chunks</title>
      <updated-at type="datetime">2009-03-06T17:00:44+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Timur Vafin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1248</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>9316bc96e580393d08d70820a1b3f3ba9ee05e0a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-22T14:01:37+01:00</created-at>
      <filename>splitted_cache.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">56087</id>
      <size type="integer">6302</size>
      <uploader-id type="integer">15080</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/56087/splitted_cache.diff</url>
    </attachment>
  </attachments>
</ticket>
