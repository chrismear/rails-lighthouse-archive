<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-03T14:22:18+01:00</created-at>
  <creator-id type="integer">19126</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">100</number>
  <permalink>problem-combining-single-table-inheritance-and-a-has_many-relation</permalink>
  <priority type="integer">10798</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord bug has_many inheritance</tag>
  <title>Problem combining single table inheritance and a has_many relation</title>
  <updated-at type="datetime">2008-06-13T06:57:40+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">5</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Stefan Kroes</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/100</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hi all!

I think I've found a bug that occurs when combining single table inheritance with a has_many relation.

My models look something like this:

@@@ ruby
class Content &lt; ActiveRecord::Base
  inheritance_column = 'inheritance_type'
  
  has_many :children, :class_name =&gt; 'Content', :foreign_key =&gt; 'parent_id'
end

class Page &lt; Content
end

class Section &lt; Content
end
@@@

When I have the following data in my database, for example:

{ id =&gt; 1, parent_id =&gt; nil, inheritance_type =&gt; 'Page' }
{ id =&gt; 2, parent_id =&gt; 1, inheritance_type =&gt; 'Section' }
{ id =&gt; 3, parent_id =&gt; 1, inheritance_type =&gt; 'Section' }


@@@ ruby
Page.find(:all)
@@@

Will return one page object and two section objects

@@@ ruby
Page.find(1).children
@@@

Will return two content objects while I'd expect it to return two section objects</original-body>
  <latest-body>Hi all!

I think I've found a bug that occurs when combining single table inheritance with a has_many relation.

My models look something like this:

@@@ ruby
class Content &lt; ActiveRecord::Base
  inheritance_column = 'inheritance_type'
  
  has_many :children, :class_name =&gt; 'Content', :foreign_key =&gt; 'parent_id'
end

class Page &lt; Content
end

class Section &lt; Content
end
@@@

When I have the following data in my database, for example:

{ id =&gt; 1, parent_id =&gt; nil, inheritance_type =&gt; 'Page' }
{ id =&gt; 2, parent_id =&gt; 1, inheritance_type =&gt; 'Section' }
{ id =&gt; 3, parent_id =&gt; 1, inheritance_type =&gt; 'Section' }


@@@ ruby
Page.find(:all)
@@@

Will return one page object and two section objects

@@@ ruby
Page.find(1).children
@@@

Will return two content objects while I'd expect it to return two section objects</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Hi all!
&lt;/p&gt;&lt;p&gt;
I think I've found a bug that occurs when combining single table inheritance with a has_many relation.
&lt;/p&gt;&lt;p&gt;
My models look something like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Content &amp;lt; ActiveRecord::Base
  inheritance_column = 'inheritance_type'
  
  has_many :children, :class_name =&amp;gt; 'Content', :foreign_key =&amp;gt; 'parent_id'
end

class Page &amp;lt; Content
end

class Section &amp;lt; Content
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
When I have the following data in my database, for example:
&lt;/p&gt;&lt;p&gt;
{ id =&gt; 1, parent_id =&gt; nil, inheritance_type =&gt; 'Page' }
&lt;/p&gt;&lt;p&gt;
{ id =&gt; 2, parent_id =&gt; 1, inheritance_type =&gt; 'Section' }
&lt;/p&gt;&lt;p&gt;
{ id =&gt; 3, parent_id =&gt; 1, inheritance_type =&gt; 'Section' }
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Page.find(:all)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Will return one page object and two section objects
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Page.find(1).children&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Will return two content objects while I'd expect it to return two section objects
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi all!

I think I've found a bug that occurs when combining single table inheritance with a has_many relation.

My models look something like this:

@@@ ruby
class Content &lt; ActiveRecord::Base
  inheritance_column = 'inheritance_type'
  
  has_many :children, :class_name =&gt; 'Content', :foreign_key =&gt; 'parent_id'
end

class Page &lt; Content
end

class Section &lt; Content
end
@@@

When I have the following data in my database, for example:

{ id =&gt; 1, parent_id =&gt; nil, inheritance_type =&gt; 'Page' }
{ id =&gt; 2, parent_id =&gt; 1, inheritance_type =&gt; 'Section' }
{ id =&gt; 3, parent_id =&gt; 1, inheritance_type =&gt; 'Section' }


@@@ ruby
Page.find(:all)
@@@

Will return one page object and two section objects

@@@ ruby
Page.find(1).children
@@@

Will return two content objects while I'd expect it to return two section objects</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hi all!
&lt;/p&gt;&lt;p&gt;
I think I've found a bug that occurs when combining single table inheritance with a has_many relation.
&lt;/p&gt;&lt;p&gt;
My models look something like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Content &amp;lt; ActiveRecord::Base
  inheritance_column = 'inheritance_type'
  
  has_many :children, :class_name =&amp;gt; 'Content', :foreign_key =&amp;gt; 'parent_id'
end

class Page &amp;lt; Content
end

class Section &amp;lt; Content
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
When I have the following data in my database, for example:
&lt;/p&gt;&lt;p&gt;
{ id =&gt; 1, parent_id =&gt; nil, inheritance_type =&gt; 'Page' }
&lt;/p&gt;&lt;p&gt;
{ id =&gt; 2, parent_id =&gt; 1, inheritance_type =&gt; 'Section' }
&lt;/p&gt;&lt;p&gt;
{ id =&gt; 3, parent_id =&gt; 1, inheritance_type =&gt; 'Section' }
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Page.find(:all)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Will return one page object and two section objects
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Page.find(1).children&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Will return two content objects while I'd expect it to return two section objects
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-03T14:22:18+01:00</created-at>
      <creator-id type="integer">19126</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">100</number>
      <permalink>problem-combining-single-table-inheritance-and-a-has_many-relation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Problem combining single table inheritance and a has_many relation</title>
      <updated-at type="datetime">2008-05-03T14:22:18+01:00</updated-at>
      <user-id type="integer">19126</user-id>
      <version type="integer">1</version>
      <user-name>Stefan Kroes</user-name>
      <creator-name>Stefan Kroes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/100</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@@@ ruby
Page.find(:all)
@@@

should be

@@@ ruby
Content.find(:all)
@@@

Apologies.</body>
      <body-html>&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Page.find(:all)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
should be
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Content.find(:all)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Apologies.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-03T14:24:37+01:00</created-at>
      <creator-id type="integer">19126</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">100</number>
      <permalink>problem-combining-single-table-inheritance-and-a-has_many-relation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Problem combining single table inheritance and a has_many relation</title>
      <updated-at type="datetime">2008-05-03T14:24:37+01:00</updated-at>
      <user-id type="integer">19126</user-id>
      <version type="integer">2</version>
      <user-name>Stefan Kroes</user-name>
      <creator-name>Stefan Kroes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/100</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't think this is a bug.

To use the assignment method, you need to explicitly call &quot;self&quot;:

@@@ ruby
self.inheritance_column = 'inheritance_type'
@@@

Or, use this friendly method:

@@@ ruby
set_inheritance_column = 'inheritance_type'
@@@

Of course, once the inheritance_column is set, your has_many is going to break: I'm pretty sure it's only going to pick up objects with the class name &quot;Content&quot; (not &quot;Section&quot;), because the relationship isn't really polymorphic.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I don't think this is a bug.
&lt;/p&gt;&lt;p&gt;
To use the assignment method, you need to explicitly call &quot;self&quot;:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;self.inheritance_column = 'inheritance_type'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Or, use this friendly method:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;set_inheritance_column = 'inheritance_type'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Of course, once the inheritance_column is set, your has_many is going to break: I'm pretty sure it's only going to pick up objects with the class name &quot;Content&quot; (not &quot;Section&quot;), because the relationship isn't really polymorphic.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-10T14:45:23+01:00</created-at>
      <creator-id type="integer">19126</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">100</number>
      <permalink>problem-combining-single-table-inheritance-and-a-has_many-relation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Problem combining single table inheritance and a has_many relation</title>
      <updated-at type="datetime">2008-05-10T14:45:23+01:00</updated-at>
      <user-id type="integer">17268</user-id>
      <version type="integer">3</version>
      <user-name>Stephen Celis</user-name>
      <creator-name>Stefan Kroes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/100</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Oops, that second one isn't assignment:

@@@ ruby
set_inheritance_column 'inheritance_type'
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Oops, that second one isn't assignment:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;set_inheritance_column 'inheritance_type'&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-10T17:19:56+01:00</created-at>
      <creator-id type="integer">19126</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">100</number>
      <permalink>problem-combining-single-table-inheritance-and-a-has_many-relation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Problem combining single table inheritance and a has_many relation</title>
      <updated-at type="datetime">2008-05-10T17:19:56+01:00</updated-at>
      <user-id type="integer">17268</user-id>
      <version type="integer">4</version>
      <user-name>Stephen Celis</user-name>
      <creator-name>Stefan Kroes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/100</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-13T06:57:40+01:00</created-at>
      <creator-id type="integer">19126</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">100</number>
      <permalink>problem-combining-single-table-inheritance-and-a-has_many-relation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Problem combining single table inheritance and a has_many relation</title>
      <updated-at type="datetime">2008-06-13T06:57:40+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">5</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Stefan Kroes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/100</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
