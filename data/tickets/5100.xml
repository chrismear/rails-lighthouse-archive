<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-12T22:18:52+01:00</created-at>
  <creator-id type="integer">25402</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5100</number>
  <permalink>test-env-ignores-ar-set_table_name</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>&quot;rails 300beta4&quot; testing</tag>
  <title>Test env ignores AR set_table_name</title>
  <updated-at type="datetime">2011-03-09T23:34:53+00:00</updated-at>
  <user-id type="integer">140690</user-id>
  <version type="integer">5</version>
  <user-name>Andrew Burns</user-name>
  <creator-name>mguymon</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5100</url>
  <priority-name>Low</priority-name>
  <original-body>I have legacy tables that uses studdly caps for table and column names, so the models must explicit set the table and primary key:

@@@ ruby
  class InventoryBlueprintType &lt; ActiveRecord::Base
    set_table_name &quot;invBlueprintTypes&quot;
    set_primary_key &quot;blueprintTypeID&quot;
  end
@@@

While the app works, all of the model tests would fail with *NoMethodError: undefined method eq for nil:NilClass*. Perplex I rummaged around until I luckily tried loading models in the test console vs the development console.


@@@ 
imperator:theapp zinger$ rails console test
Loading test environment (Rails 3.0.0.beta4)
&gt;&gt; InventoryBlueprintType
=&gt; InventoryBlueprintType(Table doesn't exist)
&gt;&gt; exit
imperator:theapp zinger$ rails console
Loading development environment (Rails 3.0.0.beta4)
&gt;&gt; InventoryBlueprintType
=&gt; InventoryBlueprintType(blueprintTypeID: integer, parentBlueprintTypeID: integer, productTypeID: integer, productionTime: integer, techLevel: integer, researchProductivityTime: integer, researchMaterialTime: integer, researchCopyTime: integer, researchTechTime: integer, productivityModifier: integer, materialModifier: integer, wasteFactor: integer, maxProductionLimit: integer)
&gt;&gt; exit
@@@

The above shows the RAILS_ENV for test is not using the model's set_table_name, while the RAILS_ENV for development is. It looks like the *NoMethodError: undefined method eq for nil:NilClass* error is happening from AR joins to the tables with set_table_name.</original-body>
  <latest-body>I have legacy tables that uses studdly caps for table and column names, so the models must explicit set the table and primary key:

@@@ ruby
  class InventoryBlueprintType &lt; ActiveRecord::Base
    set_table_name &quot;invBlueprintTypes&quot;
    set_primary_key &quot;blueprintTypeID&quot;
  end
@@@

While the app works, all of the model tests would fail with *NoMethodError: undefined method eq for nil:NilClass*. Perplex I rummaged around until I luckily tried loading models in the test console vs the development console.


@@@ 
imperator:theapp zinger$ rails console test
Loading test environment (Rails 3.0.0.beta4)
&gt;&gt; InventoryBlueprintType
=&gt; InventoryBlueprintType(Table doesn't exist)
&gt;&gt; exit
imperator:theapp zinger$ rails console
Loading development environment (Rails 3.0.0.beta4)
&gt;&gt; InventoryBlueprintType
=&gt; InventoryBlueprintType(blueprintTypeID: integer, parentBlueprintTypeID: integer, productTypeID: integer, productionTime: integer, techLevel: integer, researchProductivityTime: integer, researchMaterialTime: integer, researchCopyTime: integer, researchTechTime: integer, productivityModifier: integer, materialModifier: integer, wasteFactor: integer, maxProductionLimit: integer)
&gt;&gt; exit
@@@

The above shows the RAILS_ENV for test is not using the model's set_table_name, while the RAILS_ENV for development is. It looks like the *NoMethodError: undefined method eq for nil:NilClass* error is happening from AR joins to the tables with set_table_name.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have legacy tables that uses studdly caps for table and column
names, so the models must explicit set the table and primary
key:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  class InventoryBlueprintType &amp;lt; ActiveRecord::Base
    set_table_name &quot;invBlueprintTypes&quot;
    set_primary_key &quot;blueprintTypeID&quot;
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While the app works, all of the model tests would fail with
&lt;em&gt;NoMethodError: undefined method eq for nil:NilClass&lt;/em&gt;.
Perplex I rummaged around until I luckily tried loading models in
the test console vs the development console.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;imperator:theapp zinger$ rails console test
Loading test environment (Rails 3.0.0.beta4)
&amp;gt;&amp;gt; InventoryBlueprintType
=&amp;gt; InventoryBlueprintType(Table doesn't exist)
&amp;gt;&amp;gt; exit
imperator:theapp zinger$ rails console
Loading development environment (Rails 3.0.0.beta4)
&amp;gt;&amp;gt; InventoryBlueprintType
=&amp;gt; InventoryBlueprintType(blueprintTypeID: integer, parentBlueprintTypeID: integer, productTypeID: integer, productionTime: integer, techLevel: integer, researchProductivityTime: integer, researchMaterialTime: integer, researchCopyTime: integer, researchTechTime: integer, productivityModifier: integer, materialModifier: integer, wasteFactor: integer, maxProductionLimit: integer)
&amp;gt;&amp;gt; exit&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above shows the RAILS_ENV for test is not using the model's
set_table_name, while the RAILS_ENV for development is. It looks
like the &lt;em&gt;NoMethodError: undefined method eq for
nil:NilClass&lt;/em&gt; error is happening from AR joins to the tables
with set_table_name.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have legacy tables that uses studdly caps for table and column names, so the models must explicit set the table and primary key:

@@@ ruby
  class InventoryBlueprintType &lt; ActiveRecord::Base
    set_table_name &quot;invBlueprintTypes&quot;
    set_primary_key &quot;blueprintTypeID&quot;
  end
@@@

While the app works, all of the model tests would fail with *NoMethodError: undefined method eq for nil:NilClass*. Perplex I rummaged around until I luckily tried loading models in the test console vs the development console.


@@@ 
imperator:theapp zinger$ rails console test
Loading test environment (Rails 3.0.0.beta4)
&gt;&gt; InventoryBlueprintType
=&gt; InventoryBlueprintType(Table doesn't exist)
&gt;&gt; exit
imperator:theapp zinger$ rails console
Loading development environment (Rails 3.0.0.beta4)
&gt;&gt; InventoryBlueprintType
=&gt; InventoryBlueprintType(blueprintTypeID: integer, parentBlueprintTypeID: integer, productTypeID: integer, productionTime: integer, techLevel: integer, researchProductivityTime: integer, researchMaterialTime: integer, researchCopyTime: integer, researchTechTime: integer, productivityModifier: integer, materialModifier: integer, wasteFactor: integer, maxProductionLimit: integer)
&gt;&gt; exit
@@@

The above shows the RAILS_ENV for test is not using the model's set_table_name, while the RAILS_ENV for development is. It looks like the *NoMethodError: undefined method eq for nil:NilClass* error is happening from AR joins to the tables with set_table_name.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have legacy tables that uses studdly caps for table and column
names, so the models must explicit set the table and primary
key:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  class InventoryBlueprintType &amp;lt; ActiveRecord::Base
    set_table_name &quot;invBlueprintTypes&quot;
    set_primary_key &quot;blueprintTypeID&quot;
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While the app works, all of the model tests would fail with
&lt;em&gt;NoMethodError: undefined method eq for nil:NilClass&lt;/em&gt;.
Perplex I rummaged around until I luckily tried loading models in
the test console vs the development console.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;imperator:theapp zinger$ rails console test
Loading test environment (Rails 3.0.0.beta4)
&amp;gt;&amp;gt; InventoryBlueprintType
=&amp;gt; InventoryBlueprintType(Table doesn't exist)
&amp;gt;&amp;gt; exit
imperator:theapp zinger$ rails console
Loading development environment (Rails 3.0.0.beta4)
&amp;gt;&amp;gt; InventoryBlueprintType
=&amp;gt; InventoryBlueprintType(blueprintTypeID: integer, parentBlueprintTypeID: integer, productTypeID: integer, productionTime: integer, techLevel: integer, researchProductivityTime: integer, researchMaterialTime: integer, researchCopyTime: integer, researchTechTime: integer, productivityModifier: integer, materialModifier: integer, wasteFactor: integer, maxProductionLimit: integer)
&amp;gt;&amp;gt; exit&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above shows the RAILS_ENV for test is not using the model's
set_table_name, while the RAILS_ENV for development is. It looks
like the &lt;em&gt;NoMethodError: undefined method eq for
nil:NilClass&lt;/em&gt; error is happening from AR joins to the tables
with set_table_name.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-12T22:18:52+01:00</created-at>
      <creator-id type="integer">25402</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5100</number>
      <permalink>test-env-ignores-ar-set_table_name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 3.0.0.beta4&quot; testing</tag>
      <title>Test env ignores AR set_table_name</title>
      <updated-at type="datetime">2010-07-12T22:24:19+01:00</updated-at>
      <user-id type="integer">25402</user-id>
      <version type="integer">1</version>
      <user-name>mguymon</user-name>
      <creator-name>mguymon</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5100</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>mguymon, is this still an issue with Rails 3.0?</body>
      <body-html>&lt;div&gt;&lt;p&gt;mguymon, is this still an issue with Rails 3.0?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-13T02:20:02+01:00</created-at>
      <creator-id type="integer">25402</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5100</number>
      <permalink>test-env-ignores-ar-set_table_name</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 3.0.0.beta4&quot; testing</tag>
      <title>Test env ignores AR set_table_name</title>
      <updated-at type="datetime">2010-09-13T02:20:04+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>mguymon</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5100</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:31:51+00:00</created-at>
      <creator-id type="integer">25402</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;rails 3.0.0.beta4\&quot; testing&quot;
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5100</number>
      <permalink>test-env-ignores-ar-set_table_name</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;rails 300beta4&quot; testing</tag>
      <title>Test env ignores AR set_table_name</title>
      <updated-at type="datetime">2011-02-02T16:51:37+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>mguymon</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5100</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:31:53+00:00</created-at>
      <creator-id type="integer">25402</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5100</number>
      <permalink>test-env-ignores-ar-set_table_name</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;rails 300beta4&quot; testing</tag>
      <title>Test env ignores AR set_table_name</title>
      <updated-at type="datetime">2011-02-02T16:51:11+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>mguymon</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5100</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I just ran into this with AR 3.0.5 and think I found the culprit, an edge case (obviously).  The `set_table_name` does not match the table name in the connection.tables array.  For me this was caused by passing a string into `set_table_name` (because it was easier to copy and paste from the legacy system), changing this to a symbol resolved my issue.

Here are the relevant portions of my `rails c test` session:

    Loading test environment (Rails 3.0.5)
    irb(main):001:0&gt; a = ChadApplication.find(1)
    NoMethodError: undefined method `eq' for nil:NilClass
            ...snip stack trace...
    
    irb(main):002:0&gt; ActiveRecord::Base.connection.tables
    =&gt; [&quot;appconfigodbc&quot;, &quot;appconfigodbcprop&quot;, &quot;appconfigoraclenet&quot;, &quot;appconfigregistry&quot;, 
    &quot;application&quot;, &quot;applicationcomponent&quot;, &quot;applicationconfig&quot;, &quot;applicationtype&quot;, 
    &quot;registrykey&quot;, &quot;sequencereference&quot;, &quot;userapplicationconfig&quot;, &quot;userconfig&quot;, 
    &quot;schema_migrations&quot;]
    
    irb(main):003:0&gt; ChadApplication.table_name
    =&gt; &quot;APPLICATION&quot;
    
    irb(main):004:0&gt; ChadApplication.table_name = 'application'
    =&gt; &quot;application&quot;
    
    irb(main):005:0&gt; a = ChadApplication.find(1)
    ActiveRecord::RecordNotFound: Couldn't find ChadApplication with ID=1
            ...snip stack trace...</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just ran into this with AR 3.0.5 and think I found the
culprit, an edge case (obviously). The &lt;code&gt;set_table_name&lt;/code&gt;
does not match the table name in the connection.tables array. For
me this was caused by passing a string into
&lt;code&gt;set_table_name&lt;/code&gt; (because it was easier to copy and
paste from the legacy system), changing this to a symbol resolved
my issue.&lt;/p&gt;
&lt;p&gt;Here are the relevant portions of my &lt;code&gt;rails c test&lt;/code&gt;
session:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Loading test environment (Rails 3.0.5)
irb(main):001:0&amp;gt; a = ChadApplication.find(1)
NoMethodError: undefined method `eq' for nil:NilClass
        ...snip stack trace...

irb(main):002:0&amp;gt; ActiveRecord::Base.connection.tables
=&amp;gt; [&quot;appconfigodbc&quot;, &quot;appconfigodbcprop&quot;, &quot;appconfigoraclenet&quot;, &quot;appconfigregistry&quot;, 
&quot;application&quot;, &quot;applicationcomponent&quot;, &quot;applicationconfig&quot;, &quot;applicationtype&quot;, 
&quot;registrykey&quot;, &quot;sequencereference&quot;, &quot;userapplicationconfig&quot;, &quot;userconfig&quot;, 
&quot;schema_migrations&quot;]

irb(main):003:0&amp;gt; ChadApplication.table_name
=&amp;gt; &quot;APPLICATION&quot;

irb(main):004:0&amp;gt; ChadApplication.table_name = 'application'
=&amp;gt; &quot;application&quot;

irb(main):005:0&amp;gt; a = ChadApplication.find(1)
ActiveRecord::RecordNotFound: Couldn't find ChadApplication with ID=1
        ...snip stack trace...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-09T23:34:45+00:00</created-at>
      <creator-id type="integer">25402</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5100</number>
      <permalink>test-env-ignores-ar-set_table_name</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;rails 300beta4&quot; testing</tag>
      <title>Test env ignores AR set_table_name</title>
      <updated-at type="datetime">2011-03-09T23:34:53+00:00</updated-at>
      <user-id type="integer">140690</user-id>
      <version type="integer">5</version>
      <user-name>Andrew Burns</user-name>
      <creator-name>mguymon</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5100</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
