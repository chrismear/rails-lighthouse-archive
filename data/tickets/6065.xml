<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-25T17:01:51+00:00</created-at>
  <creator-id type="integer">52024</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6065</number>
  <permalink>activerecordobserver-is-not-aware-of-method-added-by-including-modules</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord module observed_methods observers patch rails3 rails3.0.3</tag>
  <title>ActiveRecord::Observer is not aware of method added by including modules</title>
  <updated-at type="datetime">2010-12-09T18:57:45+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">9</version>
  <user-name>Repository</user-name>
  <creator-name>Robert Pankowecki</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6065</url>
  <priority-name>Low</priority-name>
  <original-body>This implementation works&quot;

@@@
class RequestObserver &lt; ActiveRecord::Observer
 def after_commit(o)
  # do something
 end
end
@@@

however this one not:

@@@
class RequestObserver &lt; ActiveRecord::Observer

  module A
    def after_commit(o)
      # do sth
    end
  end

  include A
end
@@@

You need to do it this way:

@@@
class RequestObserver &lt; ActiveRecord::Observer
  module A
    def after_commit(o)
      # do sth
    end
  end

  include A
  self.observed_methods += [:after_commit]
  self.observed_methods.freeze
end
@@@


This is because of current implementation of the observer class:

@@@
def self.method_added(method)
  method = method.to_sym

  if ActiveRecord::Callbacks::CALLBACKS.include?(method)
    self.observed_methods += [method]
    self.observed_methods.freeze
  end
end
@@@

It is not mentioned in the documentation, nor intuitive.

Couldn't we just check `respond_to?` result to know what the observer is capable of instead of keeping the list in observed_methods field?

I can understand that adding new methods to the observer later dynamically is not supported because of performance reason but not supporting primary Ruby construction is a shame.

BTW: Here is my concept: let ActiveRecord::Observer have included an module with all callbacks methods defined as empty methods
We wouldn't have to worry about the methods existence and could just call them. Writing a method in the observer or including another module would overwrite them.</original-body>
  <latest-body>This implementation works&quot;

@@@
class RequestObserver &lt; ActiveRecord::Observer
 def after_commit(o)
  # do something
 end
end
@@@

however this one not:

@@@
class RequestObserver &lt; ActiveRecord::Observer

  module A
    def after_commit(o)
      # do sth
    end
  end

  include A
end
@@@

You need to do it this way:

@@@
class RequestObserver &lt; ActiveRecord::Observer
  module A
    def after_commit(o)
      # do sth
    end
  end

  include A
  self.observed_methods += [:after_commit]
  self.observed_methods.freeze
end
@@@


This is because of current implementation of the observer class:

@@@
def self.method_added(method)
  method = method.to_sym

  if ActiveRecord::Callbacks::CALLBACKS.include?(method)
    self.observed_methods += [method]
    self.observed_methods.freeze
  end
end
@@@

It is not mentioned in the documentation, nor intuitive.

Couldn't we just check `respond_to?` result to know what the observer is capable of instead of keeping the list in observed_methods field?

I can understand that adding new methods to the observer later dynamically is not supported because of performance reason but not supporting primary Ruby construction is a shame.

BTW: Here is my concept: let ActiveRecord::Observer have included an module with all callbacks methods defined as empty methods
We wouldn't have to worry about the methods existence and could just call them. Writing a method in the observer or including another module would overwrite them.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This implementation works&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class RequestObserver &amp;lt; ActiveRecord::Observer
 def after_commit(o)
  # do something
 end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;however this one not:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class RequestObserver &amp;lt; ActiveRecord::Observer

  module A
    def after_commit(o)
      # do sth
    end
  end

  include A
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You need to do it this way:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class RequestObserver &amp;lt; ActiveRecord::Observer
  module A
    def after_commit(o)
      # do sth
    end
  end

  include A
  self.observed_methods += [:after_commit]
  self.observed_methods.freeze
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is because of current implementation of the observer
class:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def self.method_added(method)
  method = method.to_sym

  if ActiveRecord::Callbacks::CALLBACKS.include?(method)
    self.observed_methods += [method]
    self.observed_methods.freeze
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It is not mentioned in the documentation, nor intuitive.&lt;/p&gt;
&lt;p&gt;Couldn't we just check &lt;code&gt;respond_to?&lt;/code&gt; result to know
what the observer is capable of instead of keeping the list in
observed_methods field?&lt;/p&gt;
&lt;p&gt;I can understand that adding new methods to the observer later
dynamically is not supported because of performance reason but not
supporting primary Ruby construction is a shame.&lt;/p&gt;
&lt;p&gt;BTW: Here is my concept: let ActiveRecord::Observer have
included an module with all callbacks methods defined as empty
methods&lt;br&gt;
We wouldn't have to worry about the methods existence and could
just call them. Writing a method in the observer or including
another module would overwrite them.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This implementation works&quot;

@@@
class RequestObserver &lt; ActiveRecord::Observer
 def after_commit(o)
  # do something
 end
end
@@@

however this one not:

@@@
class RequestObserver &lt; ActiveRecord::Observer

  module A
    def after_commit(o)
      # do sth
    end
  end

  include A
end
@@@

You need to do it this way:

@@@
class RequestObserver &lt; ActiveRecord::Observer
  module A
    def after_commit(o)
      # do sth
    end
  end

  include A
  self.observed_methods += [:after_commit]
  self.observed_methods.freeze
end
@@@


This is because of current implementation of the observer class:

@@@
def self.method_added(method)
  method = method.to_sym

  if ActiveRecord::Callbacks::CALLBACKS.include?(method)
    self.observed_methods += [method]
    self.observed_methods.freeze
  end
end
@@@

It is not mentioned in the documentation, nor intuitive.

Couldn't we just check `respond_to?` result to know what the observer is capable of instead of keeping the list in observed_methods field?

I can understand that adding new methods to the observer later dynamically is not supported because of performance reason but not supporting primary Ruby construction is a shame.

BTW: Here is my concept: let ActiveRecord::Observer have included an module with all callbacks methods defined as empty methods
We wouldn't have to worry about the methods existence and could just call them. Writing a method in the observer or including another module would overwrite them.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This implementation works&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class RequestObserver &amp;lt; ActiveRecord::Observer
 def after_commit(o)
  # do something
 end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;however this one not:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class RequestObserver &amp;lt; ActiveRecord::Observer

  module A
    def after_commit(o)
      # do sth
    end
  end

  include A
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You need to do it this way:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class RequestObserver &amp;lt; ActiveRecord::Observer
  module A
    def after_commit(o)
      # do sth
    end
  end

  include A
  self.observed_methods += [:after_commit]
  self.observed_methods.freeze
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is because of current implementation of the observer
class:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def self.method_added(method)
  method = method.to_sym

  if ActiveRecord::Callbacks::CALLBACKS.include?(method)
    self.observed_methods += [method]
    self.observed_methods.freeze
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It is not mentioned in the documentation, nor intuitive.&lt;/p&gt;
&lt;p&gt;Couldn't we just check &lt;code&gt;respond_to?&lt;/code&gt; result to know
what the observer is capable of instead of keeping the list in
observed_methods field?&lt;/p&gt;
&lt;p&gt;I can understand that adding new methods to the observer later
dynamically is not supported because of performance reason but not
supporting primary Ruby construction is a shame.&lt;/p&gt;
&lt;p&gt;BTW: Here is my concept: let ActiveRecord::Observer have
included an module with all callbacks methods defined as empty
methods&lt;br&gt;
We wouldn't have to worry about the methods existence and could
just call them. Writing a method in the observer or including
another module would overwrite them.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-25T17:01:51+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6065</number>
      <permalink>activerecordobserver-is-not-aware-of-method-added-by-including-modules</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord module observed_methods observers rails3 rails3.0.3</tag>
      <title>ActiveRecord::Observer is not aware of method added by including modules</title>
      <updated-at type="datetime">2010-11-25T17:01:53+00:00</updated-at>
      <user-id type="integer">52024</user-id>
      <version type="integer">1</version>
      <user-name>Robert Pankowecki</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6065</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can you submit a patch with what you think should be the behavior. Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can you submit a patch with what you think should be the
behavior. Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-25T22:25:20+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6065</number>
      <permalink>activerecordobserver-is-not-aware-of-method-added-by-including-modules</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord module observed_methods observers rails3 rails3.0.3</tag>
      <title>ActiveRecord::Observer is not aware of method added by including modules</title>
      <updated-at type="datetime">2010-11-25T22:25:21+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6065</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I made the implementation much simpler.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I made the implementation much simpler.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-26T18:22:34+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord module observed_methods observers rails3 rails3.0.3
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6065</number>
      <permalink>activerecordobserver-is-not-aware-of-method-added-by-including-modules</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord module observed_methods observers patch rails3 rails3.0.3</tag>
      <title>ActiveRecord::Observer is not aware of method added by including modules</title>
      <updated-at type="datetime">2010-11-26T18:22:36+00:00</updated-at>
      <user-id type="integer">52024</user-id>
      <version type="integer">3</version>
      <user-name>Robert Pankowecki</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6065</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>https://gist.github.com/717052 # Overview of the changes</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;https://gist.github.com/717052&quot;&gt;https://gist.github.com/717052&lt;/a&gt;
# Overview of the changes&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-26T18:27:31+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6065</number>
      <permalink>activerecordobserver-is-not-aware-of-method-added-by-including-modules</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord module observed_methods observers patch rails3 rails3.0.3</tag>
      <title>ActiveRecord::Observer is not aware of method added by including modules</title>
      <updated-at type="datetime">2010-11-26T18:27:39+00:00</updated-at>
      <user-id type="integer">52024</user-id>
      <version type="integer">4</version>
      <user-name>Robert Pankowecki</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6065</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Do you think the patch is fine ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Do you think the patch is fine ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-28T21:43:06+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6065</number>
      <permalink>activerecordobserver-is-not-aware-of-method-added-by-including-modules</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord module observed_methods observers patch rails3 rails3.0.3</tag>
      <title>ActiveRecord::Observer is not aware of method added by including modules</title>
      <updated-at type="datetime">2010-11-28T21:43:10+00:00</updated-at>
      <user-id type="integer">52024</user-id>
      <version type="integer">5</version>
      <user-name>Robert Pankowecki</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6065</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I checked this patch today and it worked for me</body>
      <body-html>&lt;div&gt;&lt;p&gt;I checked this patch today and it worked for me&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-09T09:22:06+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6065</number>
      <permalink>activerecordobserver-is-not-aware-of-method-added-by-including-modules</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord module observed_methods observers patch rails3 rails3.0.3</tag>
      <title>ActiveRecord::Observer is not aware of method added by including modules</title>
      <updated-at type="datetime">2010-12-09T09:22:16+00:00</updated-at>
      <user-id type="integer">122992</user-id>
      <version type="integer">6</version>
      <user-name>lewy313</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6065</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>*sigh*.  Why didn't observers work like this in the first place?

This patch is fine and I'll apply.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;em&gt;sigh&lt;/em&gt;. Why didn't observers work like this in the first
place?&lt;/p&gt;
&lt;p&gt;This patch is fine and I'll apply.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-09T18:39:33+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6065</number>
      <permalink>activerecordobserver-is-not-aware-of-method-added-by-including-modules</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord module observed_methods observers patch rails3 rails3.0.3</tag>
      <title>ActiveRecord::Observer is not aware of method added by including modules</title>
      <updated-at type="datetime">2010-12-09T18:39:45+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">7</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6065</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [61f2d52d8a95ca89ebcb107848890c07b014750c]) Simplifies observer implementation [#6065 state:resolved]
https://github.com/rails/rails/commit/61f2d52d8a95ca89ebcb107848890c07b014750c</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/61f2d52d8a95ca89ebcb107848890c07b014750c&quot;
title=
&quot;Changeset [61f2d52d8a95ca89ebcb107848890c07b014750c]&quot;&gt;[61f2d52d8a95ca89ebcb107848890c07b014750c]&lt;/a&gt;)
Simplifies observer implementation [&lt;a href=
&quot;/projects/8994/tickets/6065&quot; title=&quot;Ticket #6065&quot;&gt;#6065&lt;/a&gt;
state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/61f2d52d8a95ca89ebcb107848890c07b014750c&quot;&gt;
https://github.com/rails/rails/commit/61f2d52d8a95ca89ebcb107848890...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-09T18:57:15+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6065</number>
      <permalink>activerecordobserver-is-not-aware-of-method-added-by-including-modules</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord module observed_methods observers patch rails3 rails3.0.3</tag>
      <title>ActiveRecord::Observer is not aware of method added by including modules</title>
      <updated-at type="datetime">2010-12-09T18:57:27+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6065</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [bba3dacc3dc6ac379209f2eda0da5d2dd93d6b04]) Simplifies observer implementation [#6065 state:resolved]
https://github.com/rails/rails/commit/bba3dacc3dc6ac379209f2eda0da5d2dd93d6b04</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/bba3dacc3dc6ac379209f2eda0da5d2dd93d6b04&quot;
title=
&quot;Changeset [bba3dacc3dc6ac379209f2eda0da5d2dd93d6b04]&quot;&gt;[bba3dacc3dc6ac379209f2eda0da5d2dd93d6b04]&lt;/a&gt;)
Simplifies observer implementation [&lt;a href=
&quot;/projects/8994/tickets/6065&quot; title=&quot;Ticket #6065&quot;&gt;#6065&lt;/a&gt;
state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/bba3dacc3dc6ac379209f2eda0da5d2dd93d6b04&quot;&gt;
https://github.com/rails/rails/commit/bba3dacc3dc6ac379209f2eda0da5...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-09T18:57:33+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6065</number>
      <permalink>activerecordobserver-is-not-aware-of-method-added-by-including-modules</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord module observed_methods observers patch rails3 rails3.0.3</tag>
      <title>ActiveRecord::Observer is not aware of method added by including modules</title>
      <updated-at type="datetime">2010-12-09T18:57:45+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">9</version>
      <user-name>Repository</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6065</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>7bbc7c156f5b3eee17bde6cadac8c7caeb6dcb4f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-11-26T18:22:34+00:00</created-at>
      <filename>fix_6065_simpler_observer_implementation.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">791136</id>
      <size type="integer">3843</size>
      <uploader-id type="integer">52024</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/791136/fix_6065_simpler_observer_implementation.diff</url>
    </attachment>
  </attachments>
</ticket>
