<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">12714</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-27T10:26:21+01:00</created-at>
  <creator-id type="integer">7341</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">2845</number>
  <permalink>json-hijacking-some-way-to-protect-json</permalink>
  <priority type="integer">6</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>hold</state>
  <tag>hijacking json render security</tag>
  <title>JSON hijacking - some way to protect JSON</title>
  <updated-at type="datetime">2010-10-15T23:01:33+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">7</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Piotr Sarnacki</creator-name>
  <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2845</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>As article on haacked says http://haacked.com/archive/2009/06/25/json-hijacking.aspx providing JSON files with Arrays accessed by GET requests can be hijacked when logged user enters bad guy's prepared page. There are 2 workarounds:
* change every GET to POST for json requests
* do not provide array and send something like {items: []}

First solution is not good for rails because of REST.

Second solution is fairly easy to implement but not with render:

@@@
render :json =&gt; @items
# rendering as an array
@@@

It would be nice to provide some easy way to return JSON array as JSON object instead of array.</original-body>
  <latest-body>As article on haacked says http://haacked.com/archive/2009/06/25/json-hijacking.aspx providing JSON files with Arrays accessed by GET requests can be hijacked when logged user enters bad guy's prepared page. There are 2 workarounds:
* change every GET to POST for json requests
* do not provide array and send something like {items: []}

First solution is not good for rails because of REST.

Second solution is fairly easy to implement but not with render:

@@@
render :json =&gt; @items
# rendering as an array
@@@

It would be nice to provide some easy way to return JSON array as JSON object instead of array.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;As article on haacked says &lt;a href=&quot;http://haacked.com/archive/2009/06/25/json-hijacking.aspx&quot;&gt;http://haacked.com/archive/2009/...&lt;/a&gt;
providing JSON files with Arrays accessed by GET requests can be
hijacked when logged user enters bad guy's prepared page. There are
2 workarounds: * change every GET to POST for json requests * do
not provide array and send something like {items: []}&lt;/p&gt;
&lt;p&gt;First solution is not good for rails because of REST.&lt;/p&gt;
&lt;p&gt;Second solution is fairly easy to implement but not with
render:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
render :json =&amp;gt; @items
# rendering as an array
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be nice to provide some easy way to return JSON array
as JSON object instead of array.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>As article on haacked says http://haacked.com/archive/2009/06/25/json-hijacking.aspx providing JSON files with Arrays accessed by GET requests can be hijacked when logged user enters bad guy's prepared page. There are 2 workarounds:
* change every GET to POST for json requests
* do not provide array and send something like {items: []}

First solution is not good for rails because of REST.

Second solution is fairly easy to implement but not with render:

@@@
render :json =&gt; @items
# rendering as an array
@@@

It would be nice to provide some easy way to return JSON array as JSON object instead of array.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As article on haacked says &lt;a href=
&quot;http://haacked.com/archive/2009/06/25/json-hijacking.aspx&quot;&gt;http://haacked.com/archive/2009/06/25/json-hijacking.aspx&lt;/a&gt;
providing JSON files with Arrays accessed by GET requests can be
hijacked when logged user enters bad guy's prepared page. There are
2 workarounds:&lt;br&gt;
* change every GET to POST for json requests * do not provide array
and send something like {items: []}&lt;/p&gt;
&lt;p&gt;First solution is not good for rails because of REST.&lt;/p&gt;
&lt;p&gt;Second solution is fairly easy to implement but not with
render:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;render :json =&amp;gt; @items
# rendering as an array&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It would be nice to provide some easy way to return JSON array
as JSON object instead of array.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-27T10:26:21+01:00</created-at>
      <creator-id type="integer">7341</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2845</number>
      <permalink>json-hijacking-some-way-to-protect-json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>hijacking json render security</tag>
      <title>JSON hijacking - some way to protect JSON</title>
      <updated-at type="datetime">2009-06-27T10:26:27+01:00</updated-at>
      <user-id type="integer">7341</user-id>
      <version type="integer">1</version>
      <user-name>Piotr Sarnacki</user-name>
      <creator-name>Piotr Sarnacki</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2845</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It's even worse with RJS templates responding to a GET action. You don't even need to tamper with the Array prototype, just get ready to intercept calls to `$` and `$$` js functions. Maybe a response from an RJS should look like `{JavaScript: &quot;$(..)&quot;}`?</body>
      <body-html>&lt;div&gt;&lt;p&gt;It's even worse with RJS templates responding to a GET action.
You don't even need to tamper with the Array prototype, just get
ready to intercept calls to &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;$$&lt;/code&gt; js
functions. Maybe a response from an RJS should look like
&lt;code&gt;{JavaScript: &quot;$(..)&quot;}&lt;/code&gt;?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-27T11:30:03+01:00</created-at>
      <creator-id type="integer">7341</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2845</number>
      <permalink>json-hijacking-some-way-to-protect-json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>hijacking json render security</tag>
      <title>JSON hijacking - some way to protect JSON</title>
      <updated-at type="datetime">2009-06-27T11:30:08+01:00</updated-at>
      <user-id type="integer">46643</user-id>
      <version type="integer">2</version>
      <user-name>thedarkone</user-name>
      <creator-name>Piotr Sarnacki</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2845</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>thedarkone:
Yes, you're right, but with javascript it's obvious that you can execute with this way. JSON is supposed to be not executable.

Javascript hijacking is another issue and as you suggested it would be good to wrap javascript and eval it on client side.</body>
      <body-html>&lt;div&gt;&lt;p&gt;thedarkone:&lt;br&gt;
Yes, you're right, but with javascript it's obvious that you can
execute with this way. JSON is supposed to be not executable.&lt;/p&gt;
&lt;p&gt;Javascript hijacking is another issue and as you suggested it
would be good to wrap javascript and eval it on client side.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-27T21:42:59+01:00</created-at>
      <creator-id type="integer">7341</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2845</number>
      <permalink>json-hijacking-some-way-to-protect-json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>hijacking json render security</tag>
      <title>JSON hijacking - some way to protect JSON</title>
      <updated-at type="datetime">2009-06-27T21:43:00+01:00</updated-at>
      <user-id type="integer">7341</user-id>
      <version type="integer">3</version>
      <user-name>Piotr Sarnacki</user-name>
      <creator-name>Piotr Sarnacki</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2845</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The right solution to this problem is to return the following:

@@@ javascript
while(true) {}
{json: &quot;here&quot;}
@@@

This requires the cooperation of clients, however, and it means that arbitrary web service clients would have to know about and enlist in the fix. Bumping to 3.0 for further analysis.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The right solution to this problem is to return the
following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;javascript&quot;&gt;while(true) {}
{json: &quot;here&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This requires the cooperation of clients, however, and it means
that arbitrary web service clients would have to know about and
enlist in the fix. Bumping to 3.0 for further analysis.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-02T01:21:11+01:00</created-at>
      <creator-id type="integer">7341</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 9903
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2845</number>
      <permalink>json-hijacking-some-way-to-protect-json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>verified</state>
      <tag>hijacking json render security</tag>
      <title>JSON hijacking - some way to protect JSON</title>
      <updated-at type="datetime">2009-07-02T01:21:15+01:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">4</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Piotr Sarnacki</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2845</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-02T19:41:43+01:00</created-at>
      <creator-id type="integer">7341</creator-id>
      <diffable-attributes type="yaml">--- 
:state: verified
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2845</number>
      <permalink>json-hijacking-some-way-to-protect-json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>hijacking json render security</tag>
      <title>JSON hijacking - some way to protect JSON</title>
      <updated-at type="datetime">2009-07-02T19:41:46+01:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">5</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Piotr Sarnacki</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2845</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A proper solution would be for a plugin to provide a Renderer like :secure_json (so render :secure_json =&gt; ...). If we get cooperation with client-side libraries (like jQuery and Prototype), we could perhaps bring it into core eventually. Also keep in mind that this problem can only occur with guessable URLs, so providing secret JSON only at unguessable URLs would be another way to protect against this problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;A proper solution would be for a plugin to provide a Renderer
like :secure_json (so render :secure_json =&amp;gt; ...). If we get
cooperation with client-side libraries (like jQuery and Prototype),
we could perhaps bring it into core eventually. Also keep in mind
that this problem can only occur with guessable URLs, so providing
secret JSON only at unguessable URLs would be another way to
protect against this problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-24T06:58:15+00:00</created-at>
      <creator-id type="integer">7341</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2845</number>
      <permalink>json-hijacking-some-way-to-protect-json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag>hijacking json render security</tag>
      <title>JSON hijacking - some way to protect JSON</title>
      <updated-at type="datetime">2010-02-24T06:58:18+00:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">6</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Piotr Sarnacki</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2845</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:33+01:00</created-at>
      <creator-id type="integer">7341</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">2845</number>
      <permalink>json-hijacking-some-way-to-protect-json</permalink>
      <priority type="integer">6</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag>hijacking json render security</tag>
      <title>JSON hijacking - some way to protect JSON</title>
      <updated-at type="datetime">2010-10-15T23:01:33+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">7</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Piotr Sarnacki</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2845</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
