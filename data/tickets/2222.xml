<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">3890</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-12T17:39:44+00:00</created-at>
  <creator-id type="integer">15459</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2222</number>
  <permalink>activerecord-not-using-bind-vars-for-association-loading</permalink>
  <priority type="integer">1413</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>hold</state>
  <tag>2.3.x activecord active_record association</tag>
  <title>ActiveRecord not using bind vars for association loading?</title>
  <updated-at type="datetime">2009-04-15T18:52:15+01:00</updated-at>
  <user-id type="integer">3890</user-id>
  <version type="integer">7</version>
  <user-name>Matt Aimonetti (mattetti)</user-name>
  <creator-name>Nate Wiger</creator-name>
  <assigned-user-name>Matt Aimonetti (mattetti)</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2222</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>For the lazy loading of associations, AR generates SQL something like this:

    select * from posts where posts.user_id in (1,4,8,12,13,16)

However, according to the DBA's here (we use Oracle), this actually passes the numbers in the SQL string, rather than using bind vars.

I've been tracing thru vendor/rails/activerecord/lib and have found this snippet:

        # associations.rb
        def add_limited_ids_condition!(sql, options, join_dependency)
          unless (id_list = select_limited_ids_list(options, join_dependency)).empty?
            sql &lt;&lt; &quot;#{condition_word(sql)} #{connection.quote_table_name table_name}.#{primary_key} IN (#{id_list}) &quot;
          else
            throw :invalid_query
          end
        end

Unless I'm reading this wrong, it appears to put the ID's directly in the SQL.

By comparison, `association_preload.rb` has logic to construct bind vars:

      def in_or_equals_for_ids(ids)
        ids.size &gt; 1 ? &quot;IN (?)&quot; : &quot;= ?&quot;
      end

Anyone familiar with AR have ideas on a patch?  I will dive in, but need some hints.  At the very least, a confirmation that what I'm seeing is accurate, and is not using bind vars in this situation.

Thanks,
Nate</original-body>
  <latest-body>For the lazy loading of associations, AR generates SQL something like this:

    select * from posts where posts.user_id in (1,4,8,12,13,16)

However, according to the DBA's here (we use Oracle), this actually passes the numbers in the SQL string, rather than using bind vars.

I've been tracing thru vendor/rails/activerecord/lib and have found this snippet:

        # associations.rb
        def add_limited_ids_condition!(sql, options, join_dependency)
          unless (id_list = select_limited_ids_list(options, join_dependency)).empty?
            sql &lt;&lt; &quot;#{condition_word(sql)} #{connection.quote_table_name table_name}.#{primary_key} IN (#{id_list}) &quot;
          else
            throw :invalid_query
          end
        end

Unless I'm reading this wrong, it appears to put the ID's directly in the SQL.

By comparison, `association_preload.rb` has logic to construct bind vars:

      def in_or_equals_for_ids(ids)
        ids.size &gt; 1 ? &quot;IN (?)&quot; : &quot;= ?&quot;
      end

Anyone familiar with AR have ideas on a patch?  I will dive in, but need some hints.  At the very least, a confirmation that what I'm seeing is accurate, and is not using bind vars in this situation.

Thanks,
Nate</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;For the lazy loading of associations, AR generates SQL something
like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from posts where posts.user_id in (1,4,8,12,13,16)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, according to the DBA's here (we use Oracle), this
actually passes the numbers in the SQL string, rather than using
bind vars.&lt;/p&gt;
&lt;p&gt;I've been tracing thru vendor/rails/activerecord/lib and have
found this snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    # associations.rb
    def add_limited_ids_condition!(sql, options, join_dependency)
      unless (id_list = select_limited_ids_list(options, join_dependency)).empty?
        sql &amp;lt;&amp;lt; &quot;#{condition_word(sql)} #{connection.quote_table_name table_name}.#{primary_key} IN (#{id_list}) &quot;
      else
        throw :invalid_query
      end
    end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unless I'm reading this wrong, it appears to put the ID's
directly in the SQL.&lt;/p&gt;
&lt;p&gt;By comparison, &lt;code&gt;association_preload.rb&lt;/code&gt; has logic to
construct bind vars:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def in_or_equals_for_ids(ids)
    ids.size &amp;gt; 1 ? &quot;IN (?)&quot; : &quot;= ?&quot;
  end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Anyone familiar with AR have ideas on a patch? I will dive in,
but need some hints. At the very least, a confirmation that what
I'm seeing is accurate, and is not using bind vars in this
situation.&lt;/p&gt;
&lt;p&gt;Thanks, Nate&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>For the lazy loading of associations, AR generates SQL something like this:

    select * from posts where posts.user_id in (1,4,8,12,13,16)

However, according to the DBA's here (we use Oracle), this actually passes the numbers in the SQL string, rather than using bind vars.

I've been tracing thru vendor/rails/activerecord/lib and have found this snippet:

        # associations.rb
        def add_limited_ids_condition!(sql, options, join_dependency)
          unless (id_list = select_limited_ids_list(options, join_dependency)).empty?
            sql &lt;&lt; &quot;#{condition_word(sql)} #{connection.quote_table_name table_name}.#{primary_key} IN (#{id_list}) &quot;
          else
            throw :invalid_query
          end
        end

Unless I'm reading this wrong, it appears to put the ID's directly in the SQL.

By comparison, `association_preload.rb` has logic to construct bind vars:

      def in_or_equals_for_ids(ids)
        ids.size &gt; 1 ? &quot;IN (?)&quot; : &quot;= ?&quot;
      end

Anyone familiar with AR have ideas on a patch?  I will dive in, but need some hints.  At the very least, a confirmation that what I'm seeing is accurate, and is not using bind vars in this situation.

Thanks,
Nate</body>
      <body-html>&lt;div&gt;&lt;p&gt;For the lazy loading of associations, AR generates SQL something
like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from posts where posts.user_id in (1,4,8,12,13,16)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, according to the DBA's here (we use Oracle), this
actually passes the numbers in the SQL string, rather than using
bind vars.&lt;/p&gt;
&lt;p&gt;I've been tracing thru vendor/rails/activerecord/lib and have
found this snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    # associations.rb
    def add_limited_ids_condition!(sql, options, join_dependency)
      unless (id_list = select_limited_ids_list(options, join_dependency)).empty?
        sql &amp;lt;&amp;lt; &quot;#{condition_word(sql)} #{connection.quote_table_name table_name}.#{primary_key} IN (#{id_list}) &quot;
      else
        throw :invalid_query
      end
    end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unless I'm reading this wrong, it appears to put the ID's
directly in the SQL.&lt;/p&gt;
&lt;p&gt;By comparison, &lt;code&gt;association_preload.rb&lt;/code&gt; has logic to
construct bind vars:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def in_or_equals_for_ids(ids)
    ids.size &amp;gt; 1 ? &quot;IN (?)&quot; : &quot;= ?&quot;
  end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Anyone familiar with AR have ideas on a patch? I will dive in,
but need some hints. At the very least, a confirmation that what
I'm seeing is accurate, and is not using bind vars in this
situation.&lt;/p&gt;
&lt;p&gt;Thanks, Nate&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-12T17:39:44+00:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2222</number>
      <permalink>activerecord-not-using-bind-vars-for-association-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord not using bind vars for association loading?</title>
      <updated-at type="datetime">2009-03-12T17:39:50+00:00</updated-at>
      <user-id type="integer">15459</user-id>
      <version type="integer">1</version>
      <user-name>Nate Wiger</user-name>
      <creator-name>Nate Wiger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2222</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveRecord doesn't use bind vars at all; passing the numbers in the SQL string is by design. 

We could look at a patch to overall support bind vars in AR, but that would be a fairly major undertaking.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveRecord doesn't use bind vars at all; passing the numbers
in the SQL string is by design.&lt;/p&gt;
&lt;p&gt;We could look at a patch to overall support bind vars in AR, but
that would be a fairly major undertaking.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-15T18:18:42+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2222</number>
      <permalink>activerecord-not-using-bind-vars-for-association-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.x activecord active_record association associations associations_preload association_preload preload preload_associaitons preload_associations</tag>
      <title>ActiveRecord not using bind vars for association loading?</title>
      <updated-at type="datetime">2009-04-15T18:18:46+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">2</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Nate Wiger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2222</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hmmm...Lighthouse got a little overexcited on the tags there.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hmmm...Lighthouse got a little overexcited on the tags
there.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-15T18:19:30+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.x activecord active_record association associations associations_preload association_preload preload preload_associaitons preload_associations
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2222</number>
      <permalink>activerecord-not-using-bind-vars-for-association-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.x activecord active_record association</tag>
      <title>ActiveRecord not using bind vars for association loading?</title>
      <updated-at type="datetime">2009-04-15T18:19:33+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Nate Wiger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2222</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">3890</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Furthermore, for people wondering why they do see some bind vars being used, here is the reply from the Oracle enhanced driver author: http://groups.google.com/group/oracle-enhanced/browse_thread/thread/ad787520830ad52b</body>
      <body-html>&lt;div&gt;&lt;p&gt;Furthermore, for people wondering why they do see some bind vars
being used, here is the reply from the Oracle enhanced driver
author: &lt;a href=&quot;http://groups.google.com/group/oracle-enhanced/browse_thread/thread/ad787520830ad52b&quot;&gt;
http://groups.google.com/group/o...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-15T18:41:30+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.x activecord active_record association
:state: invalid
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2222</number>
      <permalink>activerecord-not-using-bind-vars-for-association-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.x activecord active_record association associations associations_preload association_preload preload preload_associaitons preload_associations</tag>
      <title>ActiveRecord not using bind vars for association loading?</title>
      <updated-at type="datetime">2009-04-15T18:41:33+01:00</updated-at>
      <user-id type="integer">3890</user-id>
      <version type="integer">4</version>
      <user-name>Matt Aimonetti (mattetti)</user-name>
      <creator-name>Nate Wiger</creator-name>
      <assigned-user-name>Matt Aimonetti (mattetti)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2222</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">3890</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-15T18:41:55+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2222</number>
      <permalink>activerecord-not-using-bind-vars-for-association-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.x activecord active_record association associations associations_preload association_preload preload preload_associaitons preload_associations</tag>
      <title>ActiveRecord not using bind vars for association loading?</title>
      <updated-at type="datetime">2009-04-15T18:41:57+01:00</updated-at>
      <user-id type="integer">3890</user-id>
      <version type="integer">5</version>
      <user-name>Matt Aimonetti (mattetti)</user-name>
      <creator-name>Nate Wiger</creator-name>
      <assigned-user-name>Matt Aimonetti (mattetti)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2222</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That doesn't sound exactly right.

There are many methods within the AR code that separate out the SQL strings from the &quot;bind&quot; values, explicitly so that SQL injection attacks are avoided.  That's what makes this do something useful (and safe):

   @kids = Person.find(:all, :conditions =&gt; [&quot;age &lt; ?&quot;, 5])

As evidence, consider the method I posted originally:

   def in_or_equals_for_ids(ids)
     ids.size &gt; 1 ? &quot;IN (?)&quot; : &quot;= ?&quot;
   end

That's also where `sanitize_sql` and friends come into play, at least from my reading of the code.

While &quot;databases&quot; such as mysql might not support true bind variables, this separation nonetheless enables adapters like the Oracle one to do interesting things by using these separate data structures to create real bind variables.

All I'm looking for is that the few methods that *don't* follow this pattern be updated to follow this pattern.

Also note I volunteered to write the patch.  I already spoke with Matt Aimonetti about this, and he and I are going to look at it in a week or so.

Can you please reopen this ticket?</body>
      <body-html>&lt;div&gt;&lt;p&gt;That doesn't sound exactly right.&lt;/p&gt;
&lt;p&gt;There are many methods within the AR code that separate out the
SQL strings from the &quot;bind&quot; values, explicitly so that SQL
injection attacks are avoided. That's what makes this do something
useful (and safe):&lt;/p&gt;
&lt;p&gt;@kids = Person.find(:all, :conditions =&amp;gt; [&quot;age &amp;lt; ?&quot;,
5])&lt;/p&gt;
&lt;p&gt;As evidence, consider the method I posted originally:&lt;/p&gt;
&lt;p&gt;def in_or_equals_for_ids(ids)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; ids.size &amp;gt; 1 ? &quot;IN (?)&quot; : &quot;= ?&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;That's also where &lt;code&gt;sanitize_sql&lt;/code&gt; and friends come
into play, at least from my reading of the code.&lt;/p&gt;
&lt;p&gt;While &quot;databases&quot; such as mysql might not support true bind
variables, this separation nonetheless enables adapters like the
Oracle one to do interesting things by using these separate data
structures to create real bind variables.&lt;/p&gt;
&lt;p&gt;All I'm looking for is that the few methods that &lt;em&gt;don't&lt;/em&gt;
follow this pattern be updated to follow this pattern.&lt;/p&gt;
&lt;p&gt;Also note I volunteered to write the patch. I already spoke with
Matt Aimonetti about this, and he and I are going to look at it in
a week or so.&lt;/p&gt;
&lt;p&gt;Can you please reopen this ticket?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-15T18:48:08+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.x activecord active_record association associations associations_preload association_preload preload preload_associaitons preload_associations
:assigned_user: 3890
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2222</number>
      <permalink>activerecord-not-using-bind-vars-for-association-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.x activecord active_record association</tag>
      <title>ActiveRecord not using bind vars for association loading?</title>
      <updated-at type="datetime">2009-04-15T18:48:10+01:00</updated-at>
      <user-id type="integer">15459</user-id>
      <version type="integer">6</version>
      <user-name>Nate Wiger</user-name>
      <creator-name>Nate Wiger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2222</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">3890</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Alright, I'm putting this ticket on hold while we look at it. If sanitizing the sql query allows for the Oracle adapter to do some magic using cursor_sharing = similar, I don't see why we shouldn't do it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Alright, I'm putting this ticket on hold while we look at it. If
sanitizing the sql query allows for the Oracle adapter to do some
magic using cursor_sharing = similar, I don't see why we shouldn't
do it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-15T18:52:11+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- 
:state: invalid
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2222</number>
      <permalink>activerecord-not-using-bind-vars-for-association-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag>2.3.x activecord active_record association</tag>
      <title>ActiveRecord not using bind vars for association loading?</title>
      <updated-at type="datetime">2009-04-15T18:52:15+01:00</updated-at>
      <user-id type="integer">3890</user-id>
      <version type="integer">7</version>
      <user-name>Matt Aimonetti (mattetti)</user-name>
      <creator-name>Nate Wiger</creator-name>
      <assigned-user-name>Matt Aimonetti (mattetti)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2222</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
