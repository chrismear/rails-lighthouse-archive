<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">40272</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-03-04T00:02:47+00:00</created-at>
  <creator-id type="integer">26127</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71470</milestone-id>
  <number type="integer">6515</number>
  <permalink>refactors-on-date-and-datetime</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>activesupport tests &quot;time datetime comparable&quot;</tag>
  <title>Refactors on Date#&lt;=&gt; and DateTime#&lt;=&gt;</title>
  <updated-at type="datetime">2011-03-04T18:52:53+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">5</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Diego Carrion</creator-name>
  <assigned-user-name>Santiago Pastorino</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6515</url>
  <milestone-title>3.1</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>Hi, I was analyzing an application trace and I came to Time#&lt;=&gt; and DateTime#&lt;=&gt;. I was doing some tests and ended up refactoring the two methods. I don't know if there were much performance gain but now the code if much more legible. What do you think?</original-body>
  <latest-body>Hi, I was analyzing an application trace and I came to Time#&lt;=&gt; and DateTime#&lt;=&gt;. I was doing some tests and ended up refactoring the two methods. I don't know if there were much performance gain but now the code if much more legible. What do you think?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi, I was analyzing an application trace and I came to
Time#&amp;lt;=&amp;gt; and DateTime#&amp;lt;=&amp;gt;. I was doing some tests and
ended up refactoring the two methods. I don't know if there were
much performance gain but now the code if much more legible. What
do you think?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi, I was analyzing an application trace and I came to Time#&lt;=&gt; and DateTime#&lt;=&gt;. I was doing some tests and ended up refactoring the two methods. I don't know if there were much performance gain but now the code if much more legible. What do you think?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi, I was analyzing an application trace and I came to
Time#&amp;lt;=&amp;gt; and DateTime#&amp;lt;=&amp;gt;. I was doing some tests and
ended up refactoring the two methods. I don't know if there were
much performance gain but now the code if much more legible. What
do you think?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-04T00:02:47+00:00</created-at>
      <creator-id type="integer">26127</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6515</number>
      <permalink>refactors-on-date-and-datetime</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport tests &quot;time datetime comparable&quot;</tag>
      <title>Refactors on Date#&lt;=&gt; and DateTime#&lt;=&gt;</title>
      <updated-at type="datetime">2011-03-04T00:02:50+00:00</updated-at>
      <user-id type="integer">26127</user-id>
      <version type="integer">1</version>
      <user-name>Diego Carrion</user-name>
      <creator-name>Diego Carrion</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6515</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hey Diego, can you benchmark that?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Diego, can you benchmark that?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-04T02:26:42+00:00</created-at>
      <creator-id type="integer">26127</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6515</number>
      <permalink>refactors-on-date-and-datetime</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport tests &quot;time datetime comparable&quot;</tag>
      <title>Refactors on Date#&lt;=&gt; and DateTime#&lt;=&gt;</title>
      <updated-at type="datetime">2011-03-04T02:26:50+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Diego Carrion</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6515</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yes, no problem, will come with the results :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, no problem, will come with the results :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-04T03:43:53+00:00</created-at>
      <creator-id type="integer">26127</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6515</number>
      <permalink>refactors-on-date-and-datetime</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport tests &quot;time datetime comparable&quot;</tag>
      <title>Refactors on Date#&lt;=&gt; and DateTime#&lt;=&gt;</title>
      <updated-at type="datetime">2011-03-04T03:44:00+00:00</updated-at>
      <user-id type="integer">26127</user-id>
      <version type="integer">3</version>
      <user-name>Diego Carrion</user-name>
      <creator-name>Diego Carrion</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6515</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Ok, I executed 10000 times with Ruby 1.8.7 the tests, each with 3 asserts, that compares: 

Time with Time
Time with DateTime
Time with TimeWithZone
DateTime with Time
DateTime with DateTime
DateTime with TimeWithZone

and found that the call that is really expensive is Time#to_datetime .

As the first patch called #to_datetime in both self and the argument in Time#&lt;=&gt;, the performance of comparing a Time with another Time got really bad, as two expensive unnecessary operations were being called. In the second attached patch I changed Time#&lt;=&gt; to only execute self#to_datetime if the argument is a datetime. With this change, the performance was improved in all cases but just a little bit, in a normal request it may be insignificant.

Time#&lt;=&gt; DateTime

before:

47.57%	 0.68%	 28.62	 0.41	 0.00	 28.21	 30000	Time#&lt;=&gt;	285
 	 	 26.58	 0.92	 0.00	 25.66	 30000/30000	Time#to_datetime	290
 	 	 1.27	 0.35	 0.00	 0.92	 30000/30000	Date#compare_without_coercion	290
 	 	 0.31	 0.21	 0.00	 0.10	 30000/30000	Object#acts_like?	288
 	 	 0.05	 0.05	 0.00	 0.00	 30000/60000	Kernel#respond_to?	287

after:


47.22%	 0.27%	 28.49	 0.17	 0.00	 28.33	 30000	Time#&lt;=&gt;	280
 	 	 26.81	 0.92	 0.00	 25.89	 30000/30000	Time#to_datetime	281
 	 	 1.52	 0.17	 0.00	 1.36	 30000/30000	DateTime#&lt;=&gt;	281

Time#&lt;=&gt; Time

before:

13.67%	 6.31%	 0.72	 0.33	 0.00	 0.39	 30000	Time#&lt;=&gt;	285
 	 	 0.30	 0.21	 0.00	 0.10	 30000/30000	Object#acts_like?	288
 	 	 0.04	 0.04	 0.00	 0.00	 30000/60000	Kernel#respond_to?	287
 	 	 0.04	 0.04	 0.00	 0.00	 30000/30000	Time#compare_without_coercion	292

after:

7.66%	 4.70%	 0.39	 0.24	 0.00	 0.15	 30000	Time#&lt;=&gt;	282
 	 	 0.07	 0.07	 0.00	 0.00	 30000/30000	Time#to_time	283
 	 	 0.04	 0.04	 0.00	 0.00	 30000/30000	Kernel#is_a?	283
 	 	 0.04	 0.04	 0.00	 0.00	 30000/30000	Time#compare_without_coercion	283

Time#&lt;=&gt; TimeWithZone

before:

17.05%	 5.52%	 1.17	 0.38	 0.00	 0.79	 30000	Time#&lt;=&gt;	285
 	 	 0.39	 0.26	 0.00	 0.13	 30000/30000	ActiveSupport::TimeWithZone#respond_to?	287
 	 	 0.29	 0.20	 0.00	 0.09	 30000/30000	Object#acts_like?	288
 	 	 0.08	 0.08	 0.00	 0.00	 30000/30000	ActiveSupport::TimeWithZone#comparable_time	287
 	 	 0.04	 0.04	 0.00	 0.00	 30000/30000	Time#compare_without_coercion	292

after:

9.72%	 3.77%	 0.63	 0.24	 0.00	 0.38	 30000	Time#&lt;=&gt;	282
 	 	 0.19	 0.11	 0.00	 0.08	 30000/30000	ActiveSupport::TimeWithZone#to_time	283
 	 	 0.16	 0.12	 0.00	 0.04	 30000/30000	ActiveSupport::TimeWithZone#is_a?	283
 	 	 0.04	 0.04	 0.00	 0.00	 30000/30000	Time#compare_without_coercion	283</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, I executed 10000 times with Ruby 1.8.7 the tests, each with
3 asserts, that compares:&lt;/p&gt;
&lt;p&gt;Time with Time&lt;br&gt;
Time with DateTime&lt;br&gt;
Time with TimeWithZone&lt;br&gt;
DateTime with Time&lt;br&gt;
DateTime with DateTime&lt;br&gt;
DateTime with TimeWithZone&lt;/p&gt;
&lt;p&gt;and found that the call that is really expensive is
Time#to_datetime .&lt;/p&gt;
&lt;p&gt;As the first patch called #to_datetime in both self and the
argument in Time#&amp;lt;=&amp;gt;, the performance of comparing a Time
with another Time got really bad, as two expensive unnecessary
operations were being called. In the second attached patch I
changed Time#&amp;lt;=&amp;gt; to only execute self#to_datetime if the
argument is a datetime. With this change, the performance was
improved in all cases but just a little bit, in a normal request it
may be insignificant.&lt;/p&gt;
&lt;p&gt;Time#&amp;lt;=&amp;gt; DateTime&lt;/p&gt;
&lt;p&gt;before:&lt;/p&gt;
&lt;p&gt;47.57% 0.68% 28.62 0.41 0.00 28.21 30000 Time#&amp;lt;=&amp;gt;
285&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     26.58   0.92    0.00    25.66   30000/30000    Time#to_datetime    290
     1.27    0.35    0.00    0.92    30000/30000    Date#compare_without_coercion   290
     0.31    0.21    0.00    0.10    30000/30000    Object#acts_like?   288
     0.05    0.05    0.00    0.00    30000/60000    Kernel#respond_to?  287&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;after:&lt;/p&gt;
&lt;p&gt;47.22% 0.27% 28.49 0.17 0.00 28.33 30000 Time#&amp;lt;=&amp;gt;
280&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     26.81   0.92    0.00    25.89   30000/30000    Time#to_datetime    281
     1.52    0.17    0.00    1.36    30000/30000    DateTime#&amp;lt;=&amp;gt;    281&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Time#&amp;lt;=&amp;gt; Time&lt;/p&gt;
&lt;p&gt;before:&lt;/p&gt;
&lt;p&gt;13.67% 6.31% 0.72 0.33 0.00 0.39 30000 Time#&amp;lt;=&amp;gt;
285&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     0.30    0.21    0.00    0.10    30000/30000    Object#acts_like?   288
     0.04    0.04    0.00    0.00    30000/60000    Kernel#respond_to?  287
     0.04    0.04    0.00    0.00    30000/30000    Time#compare_without_coercion   292&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;after:&lt;/p&gt;
&lt;p&gt;7.66% 4.70% 0.39 0.24 0.00 0.15 30000 Time#&amp;lt;=&amp;gt; 282&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     0.07    0.07    0.00    0.00    30000/30000    Time#to_time    283
     0.04    0.04    0.00    0.00    30000/30000    Kernel#is_a?    283
     0.04    0.04    0.00    0.00    30000/30000    Time#compare_without_coercion   283&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Time#&amp;lt;=&amp;gt; TimeWithZone&lt;/p&gt;
&lt;p&gt;before:&lt;/p&gt;
&lt;p&gt;17.05% 5.52% 1.17 0.38 0.00 0.79 30000 Time#&amp;lt;=&amp;gt;
285&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     0.39    0.26    0.00    0.13    30000/30000    ActiveSupport::TimeWithZone#respond_to? 287
     0.29    0.20    0.00    0.09    30000/30000    Object#acts_like?   288
     0.08    0.08    0.00    0.00    30000/30000    ActiveSupport::TimeWithZone#comparable_time 287
     0.04    0.04    0.00    0.00    30000/30000    Time#compare_without_coercion   292&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;after:&lt;/p&gt;
&lt;p&gt;9.72% 3.77% 0.63 0.24 0.00 0.38 30000 Time#&amp;lt;=&amp;gt; 282&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     0.19    0.11    0.00    0.08    30000/30000    ActiveSupport::TimeWithZone#to_time 283
     0.16    0.12    0.00    0.04    30000/30000    ActiveSupport::TimeWithZone#is_a?   283
     0.04    0.04    0.00    0.00    30000/30000    Time#compare_without_coercion   283&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-04T15:26:25+00:00</created-at>
      <creator-id type="integer">26127</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6515</number>
      <permalink>refactors-on-date-and-datetime</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport tests &quot;time datetime comparable&quot;</tag>
      <title>Refactors on Date#&lt;=&gt; and DateTime#&lt;=&gt;</title>
      <updated-at type="datetime">2011-03-04T15:26:35+00:00</updated-at>
      <user-id type="integer">26127</user-id>
      <version type="integer">4</version>
      <user-name>Diego Carrion</user-name>
      <creator-name>Diego Carrion</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6515</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Pushed 7872cc992bac76e976334d0c20649d69aad5652e</body>
      <body-html>&lt;div&gt;&lt;p&gt;Pushed 7872cc992bac76e976334d0c20649d69aad5652e&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-04T18:52:45+00:00</created-at>
      <creator-id type="integer">26127</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6515</number>
      <permalink>refactors-on-date-and-datetime</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activesupport tests &quot;time datetime comparable&quot;</tag>
      <title>Refactors on Date#&lt;=&gt; and DateTime#&lt;=&gt;</title>
      <updated-at type="datetime">2011-03-04T18:52:53+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Diego Carrion</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6515</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>dffb450dfa6a527a83fd9e89597a59b48c36eaf9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-04T00:02:47+00:00</created-at>
      <filename>0001-refactored-time-and-datetime-by-removing-some-calls.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">941660</id>
      <size type="integer">3069</size>
      <uploader-id type="integer">26127</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/941660/0001-refactored-time-and-datetime-by-removing-some-calls.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>a11a8716d9862e30f0c5bb0f33714266460f996e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-04T15:26:25+00:00</created-at>
      <filename>0001-refactored-time-and-dateti.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">942631</id>
      <size type="integer">3548</size>
      <uploader-id type="integer">26127</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/942631/0001-refactored-time-and-dateti.patch</url>
    </attachment>
  </attachments>
</ticket>
