<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-03T12:35:42+01:00</created-at>
  <creator-id type="integer">15021</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2407</number>
  <permalink>inflector-singularising-loves-to-lofe-but-pluralizing-love-to-loves</permalink>
  <priority type="integer">1564</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>inflector tested</tag>
  <title>Inflector singularising &quot;loves&quot; to &quot;lofe&quot;, but pluralizing &quot;love&quot; to &quot;loves&quot;</title>
  <updated-at type="datetime">2009-05-17T14:13:38+01:00</updated-at>
  <user-id type="integer">7211</user-id>
  <version type="integer">2</version>
  <user-name>CancelProfileIsBroken</user-name>
  <creator-name>Paul Campbell</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2407</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I've found an inconsistency in the Inflection library with a few words
ending in 'ove'

@@@
&quot;love&quot;.pluralize =&gt; &quot;loves&quot;
&quot;loves&quot;.singularize =&gt; &quot;lofe&quot;

&quot;glove&quot;.pluralize =&gt; &quot;gloves&quot;
&quot;gloves&quot;.singularize =&gt; &quot;glofe&quot;
@@@

The inflector as it stands is there to support words like &quot;half&quot;,
&quot;safe&quot;, &quot;wife&quot; ... however, all three of these are consistent between
singularize and pluralize.

I got turned away from submitting a patch based on a message in
active_support/inflector.rb:

 # The Rails core team has stated patches for the inflections library
will not be accepted
 # in order to avoid breaking legacy applications which may be
relying on errant inflections.
 # If you discover an incorrect inflection and require it for your
application, you'll need
 # to correct it yourself (explained below).

However, this seems to me to be more than a case of an errant  /
incorrect inflection ... and I can't imagine too many apps relying on
an inconsistency between singularize and pluralize.

I've created a pre-emptive patch that fixes the issue</original-body>
  <latest-body>I've found an inconsistency in the Inflection library with a few words
ending in 'ove'

@@@
&quot;love&quot;.pluralize =&gt; &quot;loves&quot;
&quot;loves&quot;.singularize =&gt; &quot;lofe&quot;

&quot;glove&quot;.pluralize =&gt; &quot;gloves&quot;
&quot;gloves&quot;.singularize =&gt; &quot;glofe&quot;
@@@

The inflector as it stands is there to support words like &quot;half&quot;,
&quot;safe&quot;, &quot;wife&quot; ... however, all three of these are consistent between
singularize and pluralize.

I got turned away from submitting a patch based on a message in
active_support/inflector.rb:

 # The Rails core team has stated patches for the inflections library
will not be accepted
 # in order to avoid breaking legacy applications which may be
relying on errant inflections.
 # If you discover an incorrect inflection and require it for your
application, you'll need
 # to correct it yourself (explained below).

However, this seems to me to be more than a case of an errant  /
incorrect inflection ... and I can't imagine too many apps relying on
an inconsistency between singularize and pluralize.

I've created a pre-emptive patch that fixes the issue</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I've found an inconsistency in the Inflection library with a few
words ending in 'ove'&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;quot;love&amp;quot;.pluralize =&amp;gt; &amp;quot;loves&amp;quot;
&amp;quot;loves&amp;quot;.singularize =&amp;gt; &amp;quot;lofe&amp;quot;

&amp;quot;glove&amp;quot;.pluralize =&amp;gt; &amp;quot;gloves&amp;quot;
&amp;quot;gloves&amp;quot;.singularize =&amp;gt; &amp;quot;glofe&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The inflector as it stands is there to support words like
&quot;half&quot;, &quot;safe&quot;, &quot;wife&quot; ... however, all three of these are
consistent between singularize and pluralize.&lt;/p&gt;
&lt;p&gt;I got turned away from submitting a patch based on a message in
active_support/inflector.rb:&lt;/p&gt;
&lt;p&gt;# The Rails core team has stated patches for the inflections
library will not be accepted # in order to avoid breaking legacy
applications which may be relying on errant inflections. # If you
discover an incorrect inflection and require it for your
application, you'll need # to correct it yourself (explained
below).&lt;/p&gt;
&lt;p&gt;However, this seems to me to be more than a case of an errant /
incorrect inflection ... and I can't imagine too many apps relying
on an inconsistency between singularize and pluralize.&lt;/p&gt;
&lt;p&gt;I've created a pre-emptive patch that fixes the issue&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've found an inconsistency in the Inflection library with a few words
ending in 'ove'

@@@
&quot;love&quot;.pluralize =&gt; &quot;loves&quot;
&quot;loves&quot;.singularize =&gt; &quot;lofe&quot;

&quot;glove&quot;.pluralize =&gt; &quot;gloves&quot;
&quot;gloves&quot;.singularize =&gt; &quot;glofe&quot;
@@@

The inflector as it stands is there to support words like &quot;half&quot;,
&quot;safe&quot;, &quot;wife&quot; ... however, all three of these are consistent between
singularize and pluralize.

I got turned away from submitting a patch based on a message in
active_support/inflector.rb:

 # The Rails core team has stated patches for the inflections library
will not be accepted
 # in order to avoid breaking legacy applications which may be
relying on errant inflections.
 # If you discover an incorrect inflection and require it for your
application, you'll need
 # to correct it yourself (explained below).

However, this seems to me to be more than a case of an errant  /
incorrect inflection ... and I can't imagine too many apps relying on
an inconsistency between singularize and pluralize.

I've created a pre-emptive patch that fixes the issue</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've found an inconsistency in the Inflection library with a few
words ending in 'ove'&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;quot;love&amp;quot;.pluralize =&amp;gt; &amp;quot;loves&amp;quot;
&amp;quot;loves&amp;quot;.singularize =&amp;gt; &amp;quot;lofe&amp;quot;

&amp;quot;glove&amp;quot;.pluralize =&amp;gt; &amp;quot;gloves&amp;quot;
&amp;quot;gloves&amp;quot;.singularize =&amp;gt; &amp;quot;glofe&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The inflector as it stands is there to support words like
&quot;half&quot;, &quot;safe&quot;, &quot;wife&quot; ... however, all three of these are
consistent between singularize and pluralize.&lt;/p&gt;
&lt;p&gt;I got turned away from submitting a patch based on a message in
active_support/inflector.rb:&lt;/p&gt;
&lt;p&gt;# The Rails core team has stated patches for the inflections
library will not be accepted # in order to avoid breaking legacy
applications which may be relying on errant inflections. # If you
discover an incorrect inflection and require it for your
application, you'll need # to correct it yourself (explained
below).&lt;/p&gt;
&lt;p&gt;However, this seems to me to be more than a case of an errant /
incorrect inflection ... and I can't imagine too many apps relying
on an inconsistency between singularize and pluralize.&lt;/p&gt;
&lt;p&gt;I've created a pre-emptive patch that fixes the issue&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-03T12:35:42+01:00</created-at>
      <creator-id type="integer">15021</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2407</number>
      <permalink>inflector-singularising-loves-to-lofe-but-pluralizing-love-to-loves</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>inflector tested</tag>
      <title>Inflector singularising &quot;loves&quot; to &quot;lofe&quot;, but pluralizing &quot;love&quot; to &quot;loves&quot;</title>
      <updated-at type="datetime">2009-04-03T12:35:44+01:00</updated-at>
      <user-id type="integer">15021</user-id>
      <version type="integer">1</version>
      <user-name>Paul Campbell</user-name>
      <creator-name>Paul Campbell</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2407</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>And, alas, the comment is correct. Despite the nagging inconsistencies in the inflector, what we have is what we have until such time as there's a complete rewrite.</body>
      <body-html>&lt;div&gt;&lt;p&gt;And, alas, the comment is correct. Despite the nagging
inconsistencies in the inflector, what we have is what we have
until such time as there's a complete rewrite.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-17T14:13:36+01:00</created-at>
      <creator-id type="integer">15021</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2407</number>
      <permalink>inflector-singularising-loves-to-lofe-but-pluralizing-love-to-loves</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>inflector tested</tag>
      <title>Inflector singularising &quot;loves&quot; to &quot;lofe&quot;, but pluralizing &quot;love&quot; to &quot;loves&quot;</title>
      <updated-at type="datetime">2009-05-17T14:13:38+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">2</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Paul Campbell</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2407</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>60e0b22ca69d06064d3760e4545362f994423285</code>
      <content-type>application/octet-stream</content-type>
      <created-at type="datetime">2009-04-03T12:35:42+01:00</created-at>
      <filename>inflector_with_loves_and_gloves</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">107643</id>
      <size type="integer">1627</size>
      <uploader-id type="integer">15021</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/107643/inflector_with_loves_and_gloves</url>
    </attachment>
  </attachments>
</ticket>
