<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-01T14:03:23+01:00</created-at>
  <creator-id type="integer">27331</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1149</number>
  <permalink>invalid-has_one-through-source_reflection-macros</permalink>
  <priority type="integer">560</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord has_one through</tag>
  <title>Invalid has_one :through source_reflection macros</title>
  <updated-at type="datetime">2009-06-04T00:54:43+01:00</updated-at>
  <user-id type="integer">48350</user-id>
  <version type="integer">7</version>
  <user-name>Joshua White</user-name>
  <creator-name>Antonio Tapiador</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1149</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>In (http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M000979 &quot;has_one doc&quot;), it says:


*:through: Specifies a Join Model through which to perform the query. Options for :class_name and :foreign_key are ignored, as the association uses the source reflection. You can only use a :through query through a has_one or belongs_to association on the join model.*

But using a has_one association on the join model throws a ActiveRecord::HasManyThroughSourceAssociationMacroError, /usr/lib/ruby/gems/1.8/gems/activerecord-2.1.1/lib/active_record/reflection.rb:211

What's wrong? Documentation or code?</original-body>
  <latest-body>In (http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M000979 &quot;has_one doc&quot;), it says:


*:through: Specifies a Join Model through which to perform the query. Options for :class_name and :foreign_key are ignored, as the association uses the source reflection. You can only use a :through query through a has_one or belongs_to association on the join model.*

But using a has_one association on the join model throws a ActiveRecord::HasManyThroughSourceAssociationMacroError, /usr/lib/ruby/gems/1.8/gems/activerecord-2.1.1/lib/active_record/reflection.rb:211

What's wrong? Documentation or code?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In (&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M000979&quot;&gt;http://api.rubyonrails.org/class...&lt;/a&gt;
&quot;has_one doc&quot;), it says:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;:through: Specifies a Join Model through which to perform
the query. Options for :class_name and :foreign_key are ignored, as
the association uses the source reflection. You can only use a
:through query through a has_one or belongs_to association on the
join model.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But using a has_one association on the join model throws a
ActiveRecord::HasManyThroughSourceAssociationMacroError,
/usr/lib/ruby/gems/1.8/gems/activerecord-2.1.1/lib/active_record/reflection.rb:211&lt;/p&gt;
&lt;p&gt;What's wrong? Documentation or code?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In (http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M000979 &quot;has_one doc&quot;), it says:


*:through: Specifies a Join Model through which to perform the query. Options for :class_name and :foreign_key are ignored, as the association uses the source reflection. You can only use a :through query through a has_one or belongs_to association on the join model.*

But using a has_one association on the join model throws a ActiveRecord::HasManyThroughSourceAssociationMacroError, /usr/lib/ruby/gems/1.8/gems/activerecord-2.1.1/lib/active_record/reflection.rb:211

What's wrong? Documentation or code?</body>
      <body-html>&lt;div&gt;&lt;p&gt;In (&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M000979&quot;&gt;http://api.rubyonrails.org/class...&lt;/a&gt;
&quot;has_one doc&quot;), it says:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;:through: Specifies a Join Model through which to perform
the query. Options for :class_name and :foreign_key are ignored, as
the association uses the source reflection. You can only use a
:through query through a has_one or belongs_to association on the
join model.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But using a has_one association on the join model throws a
ActiveRecord::HasManyThroughSourceAssociationMacroError,
/usr/lib/ruby/gems/1.8/gems/activerecord-2.1.1/lib/active_record/reflection.rb:211&lt;/p&gt;
&lt;p&gt;What's wrong? Documentation or code?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-01T14:03:24+01:00</created-at>
      <creator-id type="integer">27331</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1149</number>
      <permalink>invalid-has_one-through-source_reflection-macros</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord has_one through</tag>
      <title>Invalid has_one :through source_reflection macros</title>
      <updated-at type="datetime">2008-10-01T14:03:25+01:00</updated-at>
      <user-id type="integer">27331</user-id>
      <version type="integer">1</version>
      <user-name>Antonio Tapiador</user-name>
      <creator-name>Antonio Tapiador</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1149</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This was recently fixed iirc. Could you please try on edge and provide a failing test case in AR test suite if it doesn't work ?

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This was recently fixed iirc. Could you please try on edge and
provide a failing test case in AR test suite if it doesn't work
?&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-05T17:09:47+00:00</created-at>
      <creator-id type="integer">27331</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1149</number>
      <permalink>invalid-has_one-through-source_reflection-macros</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord has_one through</tag>
      <title>Invalid has_one :through source_reflection macros</title>
      <updated-at type="datetime">2009-01-05T17:09:49+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Antonio Tapiador</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1149</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The documentation now says:

http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html

You can only use a :through query through a belongs_to or has_many association on the join model. 

So, apparently the docs were wrong.

Also note, old bug: http://dev.rubyonrails.org/ticket/4996</body>
      <body-html>&lt;div&gt;&lt;p&gt;The documentation now says:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html&quot;&gt;
http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassM...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can only use a :through query through a belongs_to or
has_many association on the join model.&lt;/p&gt;
&lt;p&gt;So, apparently the docs were wrong.&lt;/p&gt;
&lt;p&gt;Also note, old bug: &lt;a href=
&quot;http://dev.rubyonrails.org/ticket/4996&quot;&gt;http://dev.rubyonrails.org/ticket/4996&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-26T04:47:07+01:00</created-at>
      <creator-id type="integer">27331</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1149</number>
      <permalink>invalid-has_one-through-source_reflection-macros</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord has_one through</tag>
      <title>Invalid has_one :through source_reflection macros</title>
      <updated-at type="datetime">2009-05-26T04:47:14+01:00</updated-at>
      <user-id type="integer">28640</user-id>
      <version type="integer">3</version>
      <user-name>sbwoodside</user-name>
      <creator-name>Antonio Tapiador</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1149</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Pratik</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Whoops, sorry didn't mean to change responsible. Anyway, since the documentation is correct now, I guess this bug should be closed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Whoops, sorry didn't mean to change responsible. Anyway, since
the documentation is correct now, I guess this bug should be
closed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-26T04:48:56+01:00</created-at>
      <creator-id type="integer">27331</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 1366
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1149</number>
      <permalink>invalid-has_one-through-source_reflection-macros</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord has_one through</tag>
      <title>Invalid has_one :through source_reflection macros</title>
      <updated-at type="datetime">2009-05-26T04:48:59+01:00</updated-at>
      <user-id type="integer">28640</user-id>
      <version type="integer">4</version>
      <user-name>sbwoodside</user-name>
      <creator-name>Antonio Tapiador</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1149</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Is there a good way to do this in the case that the join model is a has_one relationship? Or is writing SQL the best way to do it?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Is there a good way to do this in the case that the join model
is a has_one relationship? Or is writing SQL the best way to do
it?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-04T00:03:48+01:00</created-at>
      <creator-id type="integer">27331</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1149</number>
      <permalink>invalid-has_one-through-source_reflection-macros</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord has_one through</tag>
      <title>Invalid has_one :through source_reflection macros</title>
      <updated-at type="datetime">2009-06-04T00:03:50+01:00</updated-at>
      <user-id type="integer">48350</user-id>
      <version type="integer">5</version>
      <user-name>Joshua White</user-name>
      <creator-name>Antonio Tapiador</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1149</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I tried a number of things and eventually realized I could just specify the foreign_key
so in my
History.rb
belongs_to :patient

Patient.rb
has_many :exam_records
has_one :history

ExamRecord.rb
belongs_to :patient
has_one :history, :foreign_key =&gt; 'patient_id'

On the shell I'm finally able to say
ExamRecord.first.history</body>
      <body-html>&lt;div&gt;&lt;p&gt;I tried a number of things and eventually realized I could just
specify the foreign_key&lt;br&gt;
so in my&lt;br&gt;
History.rb&lt;br&gt;
belongs_to :patient&lt;/p&gt;
&lt;p&gt;Patient.rb&lt;br&gt;
has_many :exam_records&lt;br&gt;
has_one :history&lt;/p&gt;
&lt;p&gt;ExamRecord.rb&lt;br&gt;
belongs_to :patient&lt;br&gt;
has_one :history, :foreign_key =&amp;gt; 'patient_id'&lt;/p&gt;
&lt;p&gt;On the shell I'm finally able to say&lt;br&gt;
ExamRecord.first.history&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-04T00:22:16+01:00</created-at>
      <creator-id type="integer">27331</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1149</number>
      <permalink>invalid-has_one-through-source_reflection-macros</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord has_one through</tag>
      <title>Invalid has_one :through source_reflection macros</title>
      <updated-at type="datetime">2009-06-04T00:22:20+01:00</updated-at>
      <user-id type="integer">48350</user-id>
      <version type="integer">6</version>
      <user-name>Joshua White</user-name>
      <creator-name>Antonio Tapiador</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1149</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry, I realized my last post was incorrect, it was comparing exam_record.id to history.patient_id, and that this bug is closed, I just had to specify the primary key and all was well!

ExamRecord.rb belongs_to :patient has_one :history, :foreign_key =&gt; 'patient_id', :primary_key =&gt; 'patient_id'</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry, I realized my last post was incorrect, it was comparing
exam_record.id to history.patient_id, and that this bug is closed,
I just had to specify the primary key and all was well!&lt;/p&gt;
&lt;p&gt;ExamRecord.rb belongs_to :patient has_one :history, :foreign_key
=&amp;gt; 'patient_id', :primary_key =&amp;gt; 'patient_id'&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-04T00:54:40+01:00</created-at>
      <creator-id type="integer">27331</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1149</number>
      <permalink>invalid-has_one-through-source_reflection-macros</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord has_one through</tag>
      <title>Invalid has_one :through source_reflection macros</title>
      <updated-at type="datetime">2009-06-04T00:54:43+01:00</updated-at>
      <user-id type="integer">48350</user-id>
      <version type="integer">7</version>
      <user-name>Joshua White</user-name>
      <creator-name>Antonio Tapiador</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1149</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
  </versions>
</ticket>
