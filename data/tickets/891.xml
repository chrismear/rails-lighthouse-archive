<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-24T02:26:47+01:00</created-at>
  <creator-id type="integer">11378</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">891</number>
  <permalink>let-cancels-from-before-filters-issue-a-rollback</permalink>
  <priority type="integer">344</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>activerecord callbacks patch transactions</tag>
  <title>let cancels from before filters issue a ROLLBACK</title>
  <updated-at type="datetime">2008-08-24T13:35:36+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">2</version>
  <user-name>Repository</user-name>
  <creator-name>Xavier Noria</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/891</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The AR methods `save`, `save!`, and `destroy` run within a transaction that wraps their entire callback chain.

Before filters may cancel the action returning `false`. Currently that triggers a ROLLBACK only in the case of `save!`. With this patch a ROLLBACK is issued as well for `save` and `destroy`, preserving their regular usage idioms.

The patch is backwards compatible in the sense that if someone raised exceptions to trigger ROLLBACKs that still works.

It breaks applications that expect COMMITs when canceling `save` or `destroy` calls. But I think those are going to be rare, and I believe this change is worth that price anyway.

Some documentation has been written as well. That goes into callbacks.rb because feels like the natural spot from the point of view of the user. It doesn't matter the implementation is split in different files.</original-body>
  <latest-body>The AR methods `save`, `save!`, and `destroy` run within a transaction that wraps their entire callback chain.

Before filters may cancel the action returning `false`. Currently that triggers a ROLLBACK only in the case of `save!`. With this patch a ROLLBACK is issued as well for `save` and `destroy`, preserving their regular usage idioms.

The patch is backwards compatible in the sense that if someone raised exceptions to trigger ROLLBACKs that still works.

It breaks applications that expect COMMITs when canceling `save` or `destroy` calls. But I think those are going to be rare, and I believe this change is worth that price anyway.

Some documentation has been written as well. That goes into callbacks.rb because feels like the natural spot from the point of view of the user. It doesn't matter the implementation is split in different files.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The AR methods &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;save!&lt;/code&gt;, and &lt;code&gt;destroy&lt;/code&gt; run within a transaction that wraps their entire callback chain.&lt;/p&gt;

&lt;p&gt;Before filters may cancel the action returning &lt;code&gt;false&lt;/code&gt;. Currently that triggers a ROLLBACK only in the case of &lt;code&gt;save!&lt;/code&gt;. With this patch a ROLLBACK is issued as well for &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;destroy&lt;/code&gt;, preserving their regular usage idioms.&lt;/p&gt;

&lt;p&gt;The patch is backwards compatible in the sense that if someone raised exceptions to trigger ROLLBACKs that still works.&lt;/p&gt;

&lt;p&gt;It breaks applications that expect COMMITs when canceling &lt;code&gt;save&lt;/code&gt; or &lt;code&gt;destroy&lt;/code&gt; calls. But I think those are going to be rare, and I believe this change is worth that price anyway.&lt;/p&gt;

&lt;p&gt;Some documentation has been written as well. That goes into callbacks.rb because feels like the natural spot from the point of view of the user. It doesn't matter the implementation is split in different files.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The AR methods `save`, `save!`, and `destroy` run within a transaction that wraps their entire callback chain.

Before filters may cancel the action returning `false`. Currently that triggers a ROLLBACK only in the case of `save!`. With this patch a ROLLBACK is issued as well for `save` and `destroy`, preserving their regular usage idioms.

The patch is backwards compatible in the sense that if someone raised exceptions to trigger ROLLBACKs that still works.

It breaks applications that expect COMMITs when canceling `save` or `destroy` calls. But I think those are going to be rare, and I believe this change is worth that price anyway.

Some documentation has been written as well. That goes into callbacks.rb because feels like the natural spot from the point of view of the user. It doesn't matter the implementation is split in different files.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The AR methods &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;save!&lt;/code&gt;, and &lt;code&gt;destroy&lt;/code&gt; run within a transaction that wraps their entire callback chain.&lt;/p&gt;

&lt;p&gt;Before filters may cancel the action returning &lt;code&gt;false&lt;/code&gt;. Currently that triggers a ROLLBACK only in the case of &lt;code&gt;save!&lt;/code&gt;. With this patch a ROLLBACK is issued as well for &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;destroy&lt;/code&gt;, preserving their regular usage idioms.&lt;/p&gt;

&lt;p&gt;The patch is backwards compatible in the sense that if someone raised exceptions to trigger ROLLBACKs that still works.&lt;/p&gt;

&lt;p&gt;It breaks applications that expect COMMITs when canceling &lt;code&gt;save&lt;/code&gt; or &lt;code&gt;destroy&lt;/code&gt; calls. But I think those are going to be rare, and I believe this change is worth that price anyway.&lt;/p&gt;

&lt;p&gt;Some documentation has been written as well. That goes into callbacks.rb because feels like the natural spot from the point of view of the user. It doesn't matter the implementation is split in different files.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-24T02:26:47+01:00</created-at>
      <creator-id type="integer">11378</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">891</number>
      <permalink>let-cancels-from-before-filters-issue-a-rollback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord callbacks patch transactions</tag>
      <title>let cancels from before filters issue a ROLLBACK</title>
      <updated-at type="datetime">2008-08-24T02:26:47+01:00</updated-at>
      <user-id type="integer">11378</user-id>
      <version type="integer">1</version>
      <user-name>Xavier Noria</user-name>
      <creator-name>Xavier Noria</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/891</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [e02f0dcc24f871d8429229db4219ee1e93636496]) Rollback the transaction when a before_* callback returns false.

Previously this would have committed the transaction but not carried out save or destroy operation.

[#891 state:committed]
Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
http://github.com/rails/rails/commit/e02f0dcc24f871d8429229db4219ee1e93636496</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [e02f0dcc24f871d8429229db4219ee1e93636496]) Rollback the transaction when a before_* callback returns false.&lt;/p&gt;

&lt;p&gt;Previously this would have committed the transaction but not carried out save or destroy operation.&lt;/p&gt;

&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/891&quot; title=&quot;Ticket #891&quot;&gt;#891&lt;/a&gt; state:committed]
Signed-off-by: Michael Koziarski &lt;a href=&quot;&amp;amp;#109;&amp;amp;#97;&amp;amp;#105;&amp;amp;#108;&amp;amp;#116;&amp;amp;#x6f;&amp;amp;#x3a;&amp;amp;#x6d;&amp;amp;#x69;&amp;amp;#99;&amp;amp;#x68;&amp;amp;#x61;&amp;amp;#x65;&amp;amp;#108;&amp;amp;#x40;&amp;amp;#x6b;&amp;amp;#x6f;&amp;amp;#x7a;&amp;amp;#105;&amp;amp;#97;&amp;amp;#114;&amp;amp;#x73;&amp;amp;#107;&amp;amp;#105;&amp;amp;#x2e;&amp;amp;#99;&amp;amp;#x6f;&amp;amp;#109;&quot;&gt;&amp;#x6d;&amp;#105;&amp;#99;&amp;#x68;&amp;#x61;&amp;#101;&amp;#x6c;&amp;#x40;&amp;#107;&amp;#111;&amp;#122;&amp;#x69;&amp;#97;&amp;#x72;&amp;#x73;&amp;#x6b;&amp;#x69;&amp;#46;&amp;#99;&amp;#111;&amp;#x6d;&lt;/a&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/e02f0dcc24f871d8429229db4219ee1e93636496&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-24T13:35:36+01:00</created-at>
      <creator-id type="integer">11378</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">891</number>
      <permalink>let-cancels-from-before-filters-issue-a-rollback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord callbacks patch transactions</tag>
      <title>let cancels from before filters issue a ROLLBACK</title>
      <updated-at type="datetime">2008-08-24T13:35:36+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">2</version>
      <user-name>Repository</user-name>
      <creator-name>Xavier Noria</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/891</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f66bec15e7b038b4efd7cd02c0626ca7f5419434</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-24T02:26:47+01:00</created-at>
      <filename>cancelling_issues_rollback.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">41102</id>
      <size type="integer">6694</size>
      <uploader-id type="integer">11378</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/41102/cancelling_issues_rollback.diff</url>
    </attachment>
  </attachments>
</ticket>
