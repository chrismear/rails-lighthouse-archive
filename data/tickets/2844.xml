<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-27T04:00:19+01:00</created-at>
  <creator-id type="integer">19095</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2844</number>
  <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
  <priority type="integer">1938</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
  <updated-at type="datetime">2010-10-09T03:59:41+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">14</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Brad Sumersford</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This issue is similar to Tickets #2788 and #1875 with the same backtrace.  I have been able to reproduce this reliably by sending an initial multipart request to mongrel upon a mongrel_rails (or cluster) startup. 

Ruby =&gt; 1.8.6
OS =&gt; OS X Leopard (also a Linux Distro)
Rails =&gt; 2.3.2
Mongrel =&gt; 1.1.5

This issue has its origins in this change in Rails 2.3 in action_controller.rb from:

@@@ ruby
require 'action_controller/cgi_process'
@@@

to

@@@ ruby
# DEPRECATE: Remove CGI support
autoload :CgiRequest, 'action_controller/cgi_process'
autoload :CGIHandler, 'action_controller/cgi_process'
@@@

This causes this patch in /action_controller/cgi_ext/query_extension.rb to be lazy loaded:

@@@ ruby
# Neuter CGI parameter parsing.
def initialize_query
  # Fix some strange request environments.
  env_table['REQUEST_METHOD'] ||= 'GET'

  # POST assumes missing Content-Type is application/x-www-form-urlencoded.
  if env_table['CONTENT_TYPE'].blank? &amp;&amp; env_table['REQUEST_METHOD'] == 'POST'
    env_table['CONTENT_TYPE'] = 'application/x-www-form-urlencoded'
  end

  @cookies = CGI::Cookie::parse(env_table['HTTP_COOKIE'] || env_table['COOKIE'])
  @params = {}
end
@@@

This has the implication of the original initialize_query running for the first request if it's a multipart request.  The original ruby cgi method calls read on stdinput moving the offset to the end which causes the method parse_multipart to fail as it doesn't rewind the data before trying to parse it.  After the first request, the Rails cgi extension has a chance to load making all subsequent multipart request work correctly.  This also explains why passenger seems to be immune to this issue, as is starting the app via script/server as it does not process the request via cgi (mongrel_rails, though it does use mongrel).

This bug, although an isolated case, can be annoying for a production app of several mongrel instances that just listen for multipart submissions when the first one for each instance fails (Especially when you are watching the logs like a hawk :) ).  I reviewed the commit 25fde77 which updates the rack version but does not address this issue.

The resolution to this may very well be that cgi support is deprecated so move on, but as this issue cost me many hours in rdebug I wanted it recorded for reference, and I would bet there are still a few mongrel_clusters still out there in the wild.</original-body>
  <latest-body>This issue is similar to Tickets #2788 and #1875 with the same backtrace.  I have been able to reproduce this reliably by sending an initial multipart request to mongrel upon a mongrel_rails (or cluster) startup. 

Ruby =&gt; 1.8.6
OS =&gt; OS X Leopard (also a Linux Distro)
Rails =&gt; 2.3.2
Mongrel =&gt; 1.1.5

This issue has its origins in this change in Rails 2.3 in action_controller.rb from:

@@@ ruby
require 'action_controller/cgi_process'
@@@

to

@@@ ruby
# DEPRECATE: Remove CGI support
autoload :CgiRequest, 'action_controller/cgi_process'
autoload :CGIHandler, 'action_controller/cgi_process'
@@@

This causes this patch in /action_controller/cgi_ext/query_extension.rb to be lazy loaded:

@@@ ruby
# Neuter CGI parameter parsing.
def initialize_query
  # Fix some strange request environments.
  env_table['REQUEST_METHOD'] ||= 'GET'

  # POST assumes missing Content-Type is application/x-www-form-urlencoded.
  if env_table['CONTENT_TYPE'].blank? &amp;&amp; env_table['REQUEST_METHOD'] == 'POST'
    env_table['CONTENT_TYPE'] = 'application/x-www-form-urlencoded'
  end

  @cookies = CGI::Cookie::parse(env_table['HTTP_COOKIE'] || env_table['COOKIE'])
  @params = {}
end
@@@

This has the implication of the original initialize_query running for the first request if it's a multipart request.  The original ruby cgi method calls read on stdinput moving the offset to the end which causes the method parse_multipart to fail as it doesn't rewind the data before trying to parse it.  After the first request, the Rails cgi extension has a chance to load making all subsequent multipart request work correctly.  This also explains why passenger seems to be immune to this issue, as is starting the app via script/server as it does not process the request via cgi (mongrel_rails, though it does use mongrel).

This bug, although an isolated case, can be annoying for a production app of several mongrel instances that just listen for multipart submissions when the first one for each instance fails (Especially when you are watching the logs like a hawk :) ).  I reviewed the commit 25fde77 which updates the rack version but does not address this issue.

The resolution to this may very well be that cgi support is deprecated so move on, but as this issue cost me many hours in rdebug I wanted it recorded for reference, and I would bet there are still a few mongrel_clusters still out there in the wild.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This issue is similar to Tickets &lt;a href=&quot;/projects/8994/tickets/2788&quot; title=&quot;Ticket #2788&quot;&gt;#2788&lt;/a&gt; and
&lt;a href=&quot;/projects/8994/tickets/1875&quot; title=&quot;Ticket #1875&quot;&gt;#1875&lt;/a&gt; with the same backtrace. I have been able
to reproduce this reliably by sending an initial multipart request
to mongrel upon a mongrel_rails (or cluster) startup.&lt;/p&gt;
&lt;p&gt;Ruby =&amp;gt; 1.8.6 OS =&amp;gt; OS X Leopard (also a Linux Distro)
Rails =&amp;gt; 2.3.2 Mongrel =&amp;gt; 1.1.5&lt;/p&gt;
&lt;p&gt;This issue has its origins in this change in Rails 2.3 in
action_controller.rb from:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
require 'action_controller/cgi_process'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# DEPRECATE: Remove CGI support
autoload :CgiRequest, 'action_controller/cgi_process'
autoload :CGIHandler, 'action_controller/cgi_process'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This causes this patch in
/action_controller/cgi_ext/query_extension.rb to be lazy
loaded:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# Neuter CGI parameter parsing.
def initialize_query
  # Fix some strange request environments.
  env_table['REQUEST_METHOD'] ||= 'GET'

  # POST assumes missing Content-Type is application/x-www-form-urlencoded.
  if env_table['CONTENT_TYPE'].blank? &amp;amp;&amp;amp; env_table['REQUEST_METHOD'] == 'POST'
    env_table['CONTENT_TYPE'] = 'application/x-www-form-urlencoded'
  end

  @cookies = CGI::Cookie::parse(env_table['HTTP_COOKIE'] || env_table['COOKIE'])
  @params = {}
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has the implication of the original initialize_query
running for the first request if it's a multipart request. The
original ruby cgi method calls read on stdinput moving the offset
to the end which causes the method parse_multipart to fail as it
doesn't rewind the data before trying to parse it. After the first
request, the Rails cgi extension has a chance to load making all
subsequent multipart request work correctly. This also explains why
passenger seems to be immune to this issue, as is starting the app
via script/server as it does not process the request via cgi
(mongrel_rails, though it does use mongrel).&lt;/p&gt;
&lt;p&gt;This bug, although an isolated case, can be annoying for a
production app of several mongrel instances that just listen for
multipart submissions when the first one for each instance fails
(Especially when you are watching the logs like a hawk :) ). I
reviewed the commit 25fde77 which updates the rack version but does
not address this issue.&lt;/p&gt;
&lt;p&gt;The resolution to this may very well be that cgi support is
deprecated so move on, but as this issue cost me many hours in
rdebug I wanted it recorded for reference, and I would bet there
are still a few mongrel_clusters still out there in the wild.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue is similar to Tickets #2788 and #1875 with the same backtrace.  I have been able to reproduce this reliably by sending an initial multipart request to mongrel upon a mongrel_rails (or cluster) startup. 

Ruby =&gt; 1.8.6
OS =&gt; OS X Leopard (also a Linux Distro)
Rails =&gt; 2.3.2
Mongrel =&gt; 1.1.5

This issue has its origins in this change in Rails 2.3 in action_controller.rb from:

@@@ ruby
require 'action_controller/cgi_process'
@@@

to

@@@ ruby
# DEPRECATE: Remove CGI support
autoload :CgiRequest, 'action_controller/cgi_process'
autoload :CGIHandler, 'action_controller/cgi_process'
@@@

This causes this patch in /action_controller/cgi_ext/query_extension.rb to be lazy loaded:

@@@ ruby
# Neuter CGI parameter parsing.
def initialize_query
  # Fix some strange request environments.
  env_table['REQUEST_METHOD'] ||= 'GET'

  # POST assumes missing Content-Type is application/x-www-form-urlencoded.
  if env_table['CONTENT_TYPE'].blank? &amp;&amp; env_table['REQUEST_METHOD'] == 'POST'
    env_table['CONTENT_TYPE'] = 'application/x-www-form-urlencoded'
  end

  @cookies = CGI::Cookie::parse(env_table['HTTP_COOKIE'] || env_table['COOKIE'])
  @params = {}
end
@@@

This has the implication of the original initialize_query running for the first request if it's a multipart request.  The original ruby cgi method calls read on stdinput moving the offset to the end which causes the method parse_multipart to fail as it doesn't rewind the data before trying to parse it.  After the first request, the Rails cgi extension has a chance to load making all subsequent multipart request work correctly.  This also explains why passenger seems to be immune to this issue, as is starting the app via script/server as it does not process the request via cgi (mongrel_rails, though it does use mongrel).

This bug, although an isolated case, can be annoying for a production app of several mongrel instances that just listen for multipart submissions when the first one for each instance fails (Especially when you are watching the logs like a hawk :) ).  I reviewed the commit 25fde77 which updates the rack version but does not address this issue.

The resolution to this may very well be that cgi support is deprecated so move on, but as this issue cost me many hours in rdebug I wanted it recorded for reference, and I would bet there are still a few mongrel_clusters still out there in the wild.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue is similar to Tickets &lt;a href=
&quot;/projects/8994/tickets/2788&quot; title=&quot;Ticket #2788&quot;&gt;#2788&lt;/a&gt; and
&lt;a href=&quot;/projects/8994/tickets/1875&quot; title=
&quot;Ticket #1875&quot;&gt;#1875&lt;/a&gt; with the same backtrace. I have been able
to reproduce this reliably by sending an initial multipart request
to mongrel upon a mongrel_rails (or cluster) startup.&lt;/p&gt;
&lt;p&gt;Ruby =&amp;gt; 1.8.6&lt;br&gt;
OS =&amp;gt; OS X Leopard (also a Linux Distro)&lt;br&gt;
Rails =&amp;gt; 2.3.2&lt;br&gt;
Mongrel =&amp;gt; 1.1.5&lt;/p&gt;
&lt;p&gt;This issue has its origins in this change in Rails 2.3 in
action_controller.rb from:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;require 'action_controller/cgi_process'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# DEPRECATE: Remove CGI support
autoload :CgiRequest, 'action_controller/cgi_process'
autoload :CGIHandler, 'action_controller/cgi_process'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This causes this patch in
/action_controller/cgi_ext/query_extension.rb to be lazy
loaded:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# Neuter CGI parameter parsing.
def initialize_query
  # Fix some strange request environments.
  env_table['REQUEST_METHOD'] ||= 'GET'

  # POST assumes missing Content-Type is application/x-www-form-urlencoded.
  if env_table['CONTENT_TYPE'].blank? &amp;amp;&amp;amp; env_table['REQUEST_METHOD'] == 'POST'
    env_table['CONTENT_TYPE'] = 'application/x-www-form-urlencoded'
  end

  @cookies = CGI::Cookie::parse(env_table['HTTP_COOKIE'] || env_table['COOKIE'])
  @params = {}
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This has the implication of the original initialize_query
running for the first request if it's a multipart request. The
original ruby cgi method calls read on stdinput moving the offset
to the end which causes the method parse_multipart to fail as it
doesn't rewind the data before trying to parse it. After the first
request, the Rails cgi extension has a chance to load making all
subsequent multipart request work correctly. This also explains why
passenger seems to be immune to this issue, as is starting the app
via script/server as it does not process the request via cgi
(mongrel_rails, though it does use mongrel).&lt;/p&gt;
&lt;p&gt;This bug, although an isolated case, can be annoying for a
production app of several mongrel instances that just listen for
multipart submissions when the first one for each instance fails
(Especially when you are watching the logs like a hawk :) ). I
reviewed the commit 25fde77 which updates the rack version but does
not address this issue.&lt;/p&gt;
&lt;p&gt;The resolution to this may very well be that cgi support is
deprecated so move on, but as this issue cost me many hours in
rdebug I wanted it recorded for reference, and I would bet there
are still a few mongrel_clusters still out there in the wild.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-27T04:00:19+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-06-27T04:00:23+01:00</updated-at>
      <user-id type="integer">19095</user-id>
      <version type="integer">1</version>
      <user-name>Brad Sumersford</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It appears as http://github.com/rack/rack/commit/95f068e84b90fdfd6440314b0f86862ae2cff39a takes care of the issue by calling .rewind on the input before trying to parse it.  Packaged gem for  ActionPack 2.3.2 (w/ Rack 1.0.0) as of June 26th 2009 didn't appear to have this fix, today it does.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It appears as &lt;a href=
&quot;http://github.com/rack/rack/commit/95f068e84b90fdfd6440314b0f86862ae2cff39a&quot;&gt;
http://github.com/rack/rack/commit/95f068e84b90fdfd6440314b0f86862a...&lt;/a&gt;
takes care of the issue by calling .rewind on the input before
trying to parse it. Packaged gem for ActionPack 2.3.2 (w/ Rack
1.0.0) as of June 26th 2009 didn't appear to have this fix, today
it does.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-29T15:08:33+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-06-29T15:08:35+01:00</updated-at>
      <user-id type="integer">19095</user-id>
      <version type="integer">2</version>
      <user-name>Brad Sumersford</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It appears as though I was incorrect, the current version on rubyforge does not include the rewind fix.  I had to perform wizardry beyond specifying remote and clearing my cache to prevent gems from installing the version I built from source (which does work).</body>
      <body-html>&lt;div&gt;&lt;p&gt;It appears as though I was incorrect, the current version on
rubyforge does not include the rewind fix. I had to perform
wizardry beyond specifying remote and clearing my cache to prevent
gems from installing the version I built from source (which does
work).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-29T16:46:45+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-06-29T16:46:50+01:00</updated-at>
      <user-id type="integer">19095</user-id>
      <version type="integer">3</version>
      <user-name>Brad Sumersford</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Does this still happen on 2-3-stable? It appears that Josh vendered the latest rack with the following commit: http://github.com/rails/rails/commit/25fde77674cd6f9906b7a8e7eef046f06698c02a</body>
      <body-html>&lt;div&gt;&lt;p&gt;Does this still happen on 2-3-stable? It appears that Josh
vendered the latest rack with the following commit: &lt;a href=
&quot;http://github.com/rails/rails/commit/25fde77674cd6f9906b7a8e7eef046f06698c02a&quot;&gt;
http://github.com/rails/rails/commit/25fde77674cd6f9906b7a8e7eef046...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-02T18:34:01+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-07-02T18:34:05+01:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">4</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-02T18:34:36+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-07-02T18:34:49+01:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">5</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>After checking out 2-3-stable is does look like the vendor/ directory includes the rack-1.0.x version which does include the rewind addition that addresses the above issue.  The packaged gem still does not include this however (last time I checked), in the mean time I was able to successfully solve the issue by installing the rack gem (1.0.0) which also includes the fix.

Though this issue has been fixed (in 2-3-stable) the behaviour of the first request routing through the original CGI code and all subsequent requests routing through the Rails CGI code could still result in all sorts of weird and wonderful behaviours.</body>
      <body-html>&lt;div&gt;&lt;p&gt;After checking out 2-3-stable is does look like the vendor/
directory includes the rack-1.0.x version which does include the
rewind addition that addresses the above issue. The packaged gem
still does not include this however (last time I checked), in the
mean time I was able to successfully solve the issue by installing
the rack gem (1.0.0) which also includes the fix.&lt;/p&gt;
&lt;p&gt;Though this issue has been fixed (in 2-3-stable) the behaviour
of the first request routing through the original CGI code and all
subsequent requests routing through the Rails CGI code could still
result in all sorts of weird and wonderful behaviours.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-03T01:30:25+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-07-03T01:30:27+01:00</updated-at>
      <user-id type="integer">19095</user-id>
      <version type="integer">6</version>
      <user-name>Brad Sumersford</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm seeing a painful variation on this with Rails right through 2.3.3. When mongrel is started via mongrel_cluster, and the first request to a newly started mongrel is a &quot;POST&quot;, no request parameters or session is set inside the controller.

Once the restarted mongrel had handled its first request, all is well. 

I've repeated this with a freshly created Rails app, adding a single controller and form. In my case this is just a regular Form (application/x-www-form-urlencoded ) and not a multi-part.

To repeat:
Start up mongrel_cluster of at least 1 mongrel. 
Serve up a page with a form.
Restart mongrel_cluster.
Post form.

Notice no session data or form parameters in controller.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm seeing a painful variation on this with Rails right through
2.3.3. When mongrel is started via mongrel_cluster, and the first
request to a newly started mongrel is a &quot;POST&quot;, no request
parameters or session is set inside the controller.&lt;/p&gt;
&lt;p&gt;Once the restarted mongrel had handled its first request, all is
well.&lt;/p&gt;
&lt;p&gt;I've repeated this with a freshly created Rails app, adding a
single controller and form. In my case this is just a regular Form
(application/x-www-form-urlencoded ) and not a multi-part.&lt;/p&gt;
&lt;p&gt;To repeat:&lt;br&gt;
Start up mongrel_cluster of at least 1 mongrel.&lt;br&gt;
Serve up a page with a form.&lt;br&gt;
Restart mongrel_cluster.&lt;br&gt;
Post form.&lt;/p&gt;
&lt;p&gt;Notice no session data or form parameters in controller.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-27T18:12:47+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-07-27T18:12:52+01:00</updated-at>
      <user-id type="integer">12829</user-id>
      <version type="integer">7</version>
      <user-name>scott stewart</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-03T06:01:26+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>bugmash</tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-08-03T06:01:32+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">8</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The scenario outlined by Scott Stewart happened to my coworkers and I today on the first deployment of our app after an upgrade from vendored 2.0.2 to vendored 2.3.4. FYI. Will see if I can come up with some kind of patch...</body>
      <body-html>&lt;div&gt;&lt;p&gt;The scenario outlined by Scott Stewart happened to my coworkers
and I today on the first deployment of our app after an upgrade
from vendored 2.0.2 to vendored 2.3.4. FYI. Will see if I can come
up with some kind of patch...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-16T22:26:58+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>bugmash</tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-09-16T22:27:03+01:00</updated-at>
      <user-id type="integer">10249</user-id>
      <version type="integer">9</version>
      <user-name>Ryan Carmelo Briones</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>http://gist.github.com/195369 is the interim fix that I've come up with to handle my issue as it relates to this ticket. It basically adds back the code that caused this scenario to break. The other possible fix that has worked for me was to add &quot;cgi.stdinput.rewind&quot; after L25 here (http://github.com/rails/rails/blob/2-3-stable/actionpack/lib/action_controller/cgi_process.rb#L25) but I don't fully understand the implications, and I'm not sure where to start adding a test that is related to the dispatcher but confirms that params were parsed in the proper way. Of course, I assume this will all be moot since .dispatch and .dispatch_cgi will probably go away in Rails 3.0.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;http://gist.github.com/195369&quot;&gt;http://gist.github.com/195369&lt;/a&gt;
is the interim fix that I've come up with to handle my issue as it
relates to this ticket. It basically adds back the code that caused
this scenario to break. The other possible fix that has worked for
me was to add &quot;cgi.stdinput.rewind&quot; after L25 here (&lt;a href=
&quot;http://github.com/rails/rails/blob/2-3-stable/actionpack/lib/action_controller/cgi_process.rb#L25&quot;&gt;http://github.com/rails/rails/blob/2-3-stable/actionpack/lib/action...&lt;/a&gt;)
but I don't fully understand the implications, and I'm not sure
where to start adding a test that is related to the dispatcher but
confirms that params were parsed in the proper way. Of course, I
assume this will all be moot since .dispatch and .dispatch_cgi will
probably go away in Rails 3.0.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T14:54:18+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>bugmash</tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-09-28T15:53:06+01:00</updated-at>
      <user-id type="integer">10249</user-id>
      <version type="integer">10</version>
      <user-name>Ryan Carmelo Briones</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This commit appears to have fixed it for me: http://github.com/rails/rails/commit/6f2c4991efbbc5f567a6df36ca78de4f3ca24ee2</body>
      <body-html>&lt;div&gt;&lt;p&gt;This commit appears to have fixed it for me: &lt;a href=
&quot;http://github.com/rails/rails/commit/6f2c4991efbbc5f567a6df36ca78de4f3ca24ee2&quot;&gt;
http://github.com/rails/rails/commit/6f2c4991efbbc5f567a6df36ca78de...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-30T14:12:58+00:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>bugmash</tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2009-11-30T14:13:01+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">11</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/13645)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/13645&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-12T12:46:15+00:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: bugmash
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2010-02-12T12:46:15+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">12</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:53+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2010-05-04T18:48:53+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">13</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-09T03:59:39+01:00</created-at>
      <creator-id type="integer">19095</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2844</number>
      <permalink>bad-content-type-error-in-rack-10-with-first-cgi-mongrel-request</permalink>
      <priority type="integer">1938</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Bad Content Type Error in Rack 1.0 with first  CGI Mongrel Request</title>
      <updated-at type="datetime">2010-10-09T03:59:41+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">14</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Brad Sumersford</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2844</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
