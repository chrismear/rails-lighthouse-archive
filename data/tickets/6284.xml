<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-01-12T18:56:20+00:00</created-at>
  <creator-id type="integer">20319</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6284</number>
  <permalink>referencing-scope-of-parent-class-using-set_table_name-generates-incorrect-sql-with-parent-table-name</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Referencing scope of parent class using set_table_name generates incorrect SQL with parent table name</title>
  <updated-at type="datetime">2011-04-13T01:01:05+01:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">3</version>
  <user-name>rails</user-name>
  <creator-name>Fluxx</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6284</url>
  <priority-name nil="true"></priority-name>
  <original-body>It seems that when call a scope on a subclass using `set_table_name`, where the scope is defined in the parent class, results in using the table name of the parent.

Here is a basic script to repro the issue.  This is on ActiveRecord 3.0.3:

@@@ ruby
require &quot;rubygems&quot;
require &quot;active_record&quot;

ActiveRecord::Base.establish_connection(
    :adapter =&gt; &quot;sqlite3&quot;,
    :dbfile  =&gt; &quot;:memory:&quot;,
    :database =&gt; &quot;test&quot;
)

ActiveRecord::Schema.define do

  create_table &quot;people&quot;, :force =&gt; true do |t|
    t.string   &quot;name&quot;, :null =&gt; false
  end
  
  create_table &quot;children&quot;, :force =&gt; true do |t|
    t.string   &quot;name&quot;, :null =&gt; false
    t.string   &quot;favorite_toy&quot;, :null =&gt; false
  end
  
end

class People &lt; ActiveRecord::Base
  
  scope :named, lambda { |name| where(:name =&gt; name) }
  
end

class Child &lt; People
  set_table_name &quot;children&quot;
end

People.create(:name =&gt; &quot;Fred&quot;)
p People.named(&quot;Fred&quot;)

Child.create(:name =&gt; &quot;Jonny&quot;, :favorite_toy =&gt; &quot;Elmo&quot;)
p Child.named(&quot;Jonny&quot;)
@@@

Running it results in:

@@@

jeff ~ $ ruby ar_inheritance_test.rb 
-- create_table(&quot;people&quot;, {:force=&gt;true})
   -&gt; 0.2486s
-- create_table(&quot;children&quot;, {:force=&gt;true})
   -&gt; 0.0079s
[#&lt;People id: 1, name: &quot;Fred&quot;&gt;]
/opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract_adapter.rb:202:in `log': SQLite3::SQLException: no such column: people.name: SELECT &quot;children&quot;.* FROM &quot;children&quot; WHERE (&quot;people&quot;.&quot;name&quot; = 'Jonny') (ActiveRecord::StatementInvalid)
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/sqlite_adapter.rb:284:in `select'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:356:in `inspect'
	from ar_inheritance_test.rb:37:in `p'
	from ar_inheritance_test.rb:37
@@@

I believe the SQL generated should be:

@@@ sql
SELECT &quot;children&quot;.* FROM &quot;children&quot; WHERE (&quot;children&quot;.&quot;name&quot; = 'Jonny')
@@@</original-body>
  <latest-body>It seems that when call a scope on a subclass using `set_table_name`, where the scope is defined in the parent class, results in using the table name of the parent.

Here is a basic script to repro the issue.  This is on ActiveRecord 3.0.3:

@@@ ruby
require &quot;rubygems&quot;
require &quot;active_record&quot;

ActiveRecord::Base.establish_connection(
    :adapter =&gt; &quot;sqlite3&quot;,
    :dbfile  =&gt; &quot;:memory:&quot;,
    :database =&gt; &quot;test&quot;
)

ActiveRecord::Schema.define do

  create_table &quot;people&quot;, :force =&gt; true do |t|
    t.string   &quot;name&quot;, :null =&gt; false
  end
  
  create_table &quot;children&quot;, :force =&gt; true do |t|
    t.string   &quot;name&quot;, :null =&gt; false
    t.string   &quot;favorite_toy&quot;, :null =&gt; false
  end
  
end

class People &lt; ActiveRecord::Base
  
  scope :named, lambda { |name| where(:name =&gt; name) }
  
end

class Child &lt; People
  set_table_name &quot;children&quot;
end

People.create(:name =&gt; &quot;Fred&quot;)
p People.named(&quot;Fred&quot;)

Child.create(:name =&gt; &quot;Jonny&quot;, :favorite_toy =&gt; &quot;Elmo&quot;)
p Child.named(&quot;Jonny&quot;)
@@@

Running it results in:

@@@

jeff ~ $ ruby ar_inheritance_test.rb 
-- create_table(&quot;people&quot;, {:force=&gt;true})
   -&gt; 0.2486s
-- create_table(&quot;children&quot;, {:force=&gt;true})
   -&gt; 0.0079s
[#&lt;People id: 1, name: &quot;Fred&quot;&gt;]
/opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract_adapter.rb:202:in `log': SQLite3::SQLException: no such column: people.name: SELECT &quot;children&quot;.* FROM &quot;children&quot; WHERE (&quot;people&quot;.&quot;name&quot; = 'Jonny') (ActiveRecord::StatementInvalid)
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/sqlite_adapter.rb:284:in `select'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:356:in `inspect'
	from ar_inheritance_test.rb:37:in `p'
	from ar_inheritance_test.rb:37
@@@

I believe the SQL generated should be:

@@@ sql
SELECT &quot;children&quot;.* FROM &quot;children&quot; WHERE (&quot;children&quot;.&quot;name&quot; = 'Jonny')
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;It seems that when call a scope on a subclass using
&lt;code&gt;set_table_name&lt;/code&gt;, where the scope is defined in the
parent class, results in using the table name of the parent.&lt;/p&gt;
&lt;p&gt;Here is a basic script to repro the issue. This is on
ActiveRecord 3.0.3:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;require &quot;rubygems&quot;
require &quot;active_record&quot;

ActiveRecord::Base.establish_connection(
    :adapter =&amp;gt; &quot;sqlite3&quot;,
    :dbfile  =&amp;gt; &quot;:memory:&quot;,
    :database =&amp;gt; &quot;test&quot;
)

ActiveRecord::Schema.define do

  create_table &quot;people&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;name&quot;, :null =&amp;gt; false
  end
  
  create_table &quot;children&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;name&quot;, :null =&amp;gt; false
    t.string   &quot;favorite_toy&quot;, :null =&amp;gt; false
  end
  
end

class People &amp;lt; ActiveRecord::Base
  
  scope :named, lambda { |name| where(:name =&amp;gt; name) }
  
end

class Child &amp;lt; People
  set_table_name &quot;children&quot;
end

People.create(:name =&amp;gt; &quot;Fred&quot;)
p People.named(&quot;Fred&quot;)

Child.create(:name =&amp;gt; &quot;Jonny&quot;, :favorite_toy =&amp;gt; &quot;Elmo&quot;)
p Child.named(&quot;Jonny&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Running it results in:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
jeff ~ $ ruby ar_inheritance_test.rb 
-- create_table(&quot;people&quot;, {:force=&amp;gt;true})
   -&amp;gt; 0.2486s
-- create_table(&quot;children&quot;, {:force=&amp;gt;true})
   -&amp;gt; 0.0079s
[#&amp;lt;People id: 1, name: &quot;Fred&quot;&amp;gt;]
/opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract_adapter.rb:202:in `log': SQLite3::SQLException: no such column: people.name: SELECT &quot;children&quot;.* FROM &quot;children&quot; WHERE (&quot;people&quot;.&quot;name&quot; = 'Jonny') (ActiveRecord::StatementInvalid)
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/sqlite_adapter.rb:284:in `select'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:356:in `inspect'
    from ar_inheritance_test.rb:37:in `p'
    from ar_inheritance_test.rb:37&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I believe the SQL generated should be:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT &quot;children&quot;.* FROM &quot;children&quot; WHERE (&quot;children&quot;.&quot;name&quot; = 'Jonny')&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It seems that when call a scope on a subclass using `set_table_name`, where the scope is defined in the parent class, results in using the table name of the parent.

Here is a basic script to repro the issue.  This is on ActiveRecord 3.0.3:

@@@ ruby
require &quot;rubygems&quot;
require &quot;active_record&quot;

ActiveRecord::Base.establish_connection(
    :adapter =&gt; &quot;sqlite3&quot;,
    :dbfile  =&gt; &quot;:memory:&quot;,
    :database =&gt; &quot;test&quot;
)

ActiveRecord::Schema.define do

  create_table &quot;people&quot;, :force =&gt; true do |t|
    t.string   &quot;name&quot;, :null =&gt; false
  end
  
  create_table &quot;children&quot;, :force =&gt; true do |t|
    t.string   &quot;name&quot;, :null =&gt; false
    t.string   &quot;favorite_toy&quot;, :null =&gt; false
  end
  
end

class People &lt; ActiveRecord::Base
  
  scope :named, lambda { |name| where(:name =&gt; name) }
  
end

class Child &lt; People
  set_table_name &quot;children&quot;
end

People.create(:name =&gt; &quot;Fred&quot;)
p People.named(&quot;Fred&quot;)

Child.create(:name =&gt; &quot;Jonny&quot;, :favorite_toy =&gt; &quot;Elmo&quot;)
p Child.named(&quot;Jonny&quot;)
@@@

Running it results in:

@@@

jeff ~ $ ruby ar_inheritance_test.rb 
-- create_table(&quot;people&quot;, {:force=&gt;true})
   -&gt; 0.2486s
-- create_table(&quot;children&quot;, {:force=&gt;true})
   -&gt; 0.0079s
[#&lt;People id: 1, name: &quot;Fred&quot;&gt;]
/opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract_adapter.rb:202:in `log': SQLite3::SQLException: no such column: people.name: SELECT &quot;children&quot;.* FROM &quot;children&quot; WHERE (&quot;people&quot;.&quot;name&quot; = 'Jonny') (ActiveRecord::StatementInvalid)
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/sqlite_adapter.rb:284:in `select'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:356:in `inspect'
	from ar_inheritance_test.rb:37:in `p'
	from ar_inheritance_test.rb:37
@@@

I believe the SQL generated should be:

@@@ sql
SELECT &quot;children&quot;.* FROM &quot;children&quot; WHERE (&quot;children&quot;.&quot;name&quot; = 'Jonny')
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;It seems that when call a scope on a subclass using
&lt;code&gt;set_table_name&lt;/code&gt;, where the scope is defined in the
parent class, results in using the table name of the parent.&lt;/p&gt;
&lt;p&gt;Here is a basic script to repro the issue. This is on
ActiveRecord 3.0.3:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;require &quot;rubygems&quot;
require &quot;active_record&quot;

ActiveRecord::Base.establish_connection(
    :adapter =&amp;gt; &quot;sqlite3&quot;,
    :dbfile  =&amp;gt; &quot;:memory:&quot;,
    :database =&amp;gt; &quot;test&quot;
)

ActiveRecord::Schema.define do

  create_table &quot;people&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;name&quot;, :null =&amp;gt; false
  end
  
  create_table &quot;children&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;name&quot;, :null =&amp;gt; false
    t.string   &quot;favorite_toy&quot;, :null =&amp;gt; false
  end
  
end

class People &amp;lt; ActiveRecord::Base
  
  scope :named, lambda { |name| where(:name =&amp;gt; name) }
  
end

class Child &amp;lt; People
  set_table_name &quot;children&quot;
end

People.create(:name =&amp;gt; &quot;Fred&quot;)
p People.named(&quot;Fred&quot;)

Child.create(:name =&amp;gt; &quot;Jonny&quot;, :favorite_toy =&amp;gt; &quot;Elmo&quot;)
p Child.named(&quot;Jonny&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Running it results in:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
jeff ~ $ ruby ar_inheritance_test.rb 
-- create_table(&quot;people&quot;, {:force=&amp;gt;true})
   -&amp;gt; 0.2486s
-- create_table(&quot;children&quot;, {:force=&amp;gt;true})
   -&amp;gt; 0.0079s
[#&amp;lt;People id: 1, name: &quot;Fred&quot;&amp;gt;]
/opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract_adapter.rb:202:in `log': SQLite3::SQLException: no such column: people.name: SELECT &quot;children&quot;.* FROM &quot;children&quot; WHERE (&quot;people&quot;.&quot;name&quot; = 'Jonny') (ActiveRecord::StatementInvalid)
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/sqlite_adapter.rb:135:in `execute'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/sqlite_adapter.rb:284:in `select'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:356:in `inspect'
    from ar_inheritance_test.rb:37:in `p'
    from ar_inheritance_test.rb:37&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I believe the SQL generated should be:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT &quot;children&quot;.* FROM &quot;children&quot; WHERE (&quot;children&quot;.&quot;name&quot; = 'Jonny')&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-12T18:56:20+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6284</number>
      <permalink>referencing-scope-of-parent-class-using-set_table_name-generates-incorrect-sql-with-parent-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Referencing scope of parent class using set_table_name generates incorrect SQL with parent table name</title>
      <updated-at type="datetime">2011-01-12T18:56:24+00:00</updated-at>
      <user-id type="integer">20319</user-id>
      <version type="integer">1</version>
      <user-name>Fluxx</user-name>
      <creator-name>Fluxx</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6284</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-13T01:00:07+01:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6284</number>
      <permalink>referencing-scope-of-parent-class-using-set_table_name-generates-incorrect-sql-with-parent-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Referencing scope of parent class using set_table_name generates incorrect SQL with parent table name</title>
      <updated-at type="datetime">2011-04-13T01:01:05+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">2</version>
      <user-name>rails</user-name>
      <creator-name>Fluxx</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6284</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-13T01:00:07+01:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6284</number>
      <permalink>referencing-scope-of-parent-class-using-set_table_name-generates-incorrect-sql-with-parent-table-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Referencing scope of parent class using set_table_name generates incorrect SQL with parent table name</title>
      <updated-at type="datetime">2011-04-13T01:00:25+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Fluxx</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6284</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
