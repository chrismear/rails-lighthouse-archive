<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-25T16:29:01+00:00</created-at>
  <creator-id type="integer">34631</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1469</number>
  <permalink>changing-foreign-key-doesnt-set-relationship-as-dirty</permalink>
  <priority type="integer">838</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>2.2.2 association belongs_to caching</tag>
  <title>Changing foreign key doesn't set relationship as dirty</title>
  <updated-at type="datetime">2008-12-21T11:11:33+00:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">3</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>Paul Mason</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1469</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When changing a foreign key on a belongs_to relationship, the relationship is not set to dirty.

If I have a model with a relationship to a country, and I change the country_id using attributes=({:country_id =&gt; X}) or model.country_id=X, and then access the model.country relationship, it uses the cached country object, instead of looking up the new country_id.</original-body>
  <latest-body>When changing a foreign key on a belongs_to relationship, the relationship is not set to dirty.

If I have a model with a relationship to a country, and I change the country_id using attributes=({:country_id =&gt; X}) or model.country_id=X, and then access the model.country relationship, it uses the cached country object, instead of looking up the new country_id.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When changing a foreign key on a belongs_to relationship, the
relationship is not set to dirty.&lt;/p&gt;
&lt;p&gt;If I have a model with a relationship to a country, and I change
the country_id using attributes=({:country_id =&amp;gt; X}) or
model.country_id=X, and then access the model.country relationship,
it uses the cached country object, instead of looking up the new
country_id.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When changing a foreign key on a belongs_to relationship, the relationship is not set to dirty.

If I have a model with a relationship to a country, and I change the country_id using attributes=({:country_id =&gt; X}) or model.country_id=X, and then access the model.country relationship, it uses the cached country object, instead of looking up the new country_id.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When changing a foreign key on a belongs_to relationship, the
relationship is not set to dirty.&lt;/p&gt;
&lt;p&gt;If I have a model with a relationship to a country, and I change
the country_id using attributes=({:country_id =&amp;gt; X}) or
model.country_id=X, and then access the model.country relationship,
it uses the cached country object, instead of looking up the new
country_id.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-25T16:29:01+00:00</created-at>
      <creator-id type="integer">34631</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1469</number>
      <permalink>changing-foreign-key-doesnt-set-relationship-as-dirty</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 association belongs_to caching</tag>
      <title>Changing foreign key doesn't set relationship as dirty</title>
      <updated-at type="datetime">2008-11-25T16:29:05+00:00</updated-at>
      <user-id type="integer">34631</user-id>
      <version type="integer">1</version>
      <user-name>Paul Mason</user-name>
      <creator-name>Paul Mason</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1469</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have come across a problem which I believe is closely related to this.

If I have a model that belongs_to another, and requires the presence of the relationship (i.e., a valid non-null foreign key), I can get AR to save invalid records in the database.

For example, with this...

@@@ ruby
Class Parent &lt; AR::B
end

class Child &lt; AR::B
  belongs_to :parent # using parent_id
  validates_presence_of :parent
end
@@@

@@@ shell
./script/console...
# child = Child.new
# child.valid? # false
# child.parent_id = Parent.first.id # a valid parent
# child.valid? # true
# child.parent_id = 9999 # doesn't exist
# child.valid? # true
# child.save   # true
# child.reload
# child.parent_id # 9999
# child.parent    # nil
# child.valid? # false
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have come across a problem which I believe is closely related
to this.&lt;/p&gt;
&lt;p&gt;If I have a model that belongs_to another, and requires the
presence of the relationship (i.e., a valid non-null foreign key),
I can get AR to save invalid records in the database.&lt;/p&gt;
&lt;p&gt;For example, with this...&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Class Parent &amp;lt; AR::B
end

class Child &amp;lt; AR::B
  belongs_to :parent # using parent_id
  validates_presence_of :parent
end
&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;
./script/console...
# child = Child.new
# child.valid? # false
# child.parent_id = Parent.first.id # a valid parent
# child.valid? # true
# child.parent_id = 9999 # doesn't exist
# child.valid? # true
# child.save   # true
# child.reload
# child.parent_id # 9999
# child.parent    # nil
# child.valid? # false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-08T19:27:13+00:00</created-at>
      <creator-id type="integer">34631</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1469</number>
      <permalink>changing-foreign-key-doesnt-set-relationship-as-dirty</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 association belongs_to caching</tag>
      <title>Changing foreign key doesn't set relationship as dirty</title>
      <updated-at type="datetime">2008-12-08T19:27:17+00:00</updated-at>
      <user-id type="integer">35419</user-id>
      <version type="integer">2</version>
      <user-name>Darren</user-name>
      <creator-name>Paul Mason</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1469</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Duplicate of #142</body>
      <body-html>&lt;div&gt;&lt;p&gt;Duplicate of &lt;a href=&quot;/projects/8994/tickets/142&quot; title=&quot;Ticket #142&quot;&gt;#142&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-21T11:11:29+00:00</created-at>
      <creator-id type="integer">34631</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1469</number>
      <permalink>changing-foreign-key-doesnt-set-relationship-as-dirty</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>2.2.2 association belongs_to caching</tag>
      <title>Changing foreign key doesn't set relationship as dirty</title>
      <updated-at type="datetime">2008-12-21T11:11:33+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Paul Mason</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1469</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
