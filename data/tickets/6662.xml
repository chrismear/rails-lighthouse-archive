<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-04-01T10:12:05+01:00</created-at>
  <creator-id type="integer">8819</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6662</number>
  <permalink>fileflock-cant-lock-read-only-file-for-exclusive-access</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>jruby</tag>
  <title>File#flock can't lock read-only File for exclusive access</title>
  <updated-at type="datetime">2011-04-18T17:09:54+01:00</updated-at>
  <user-id type="integer">15316</user-id>
  <version type="integer">4</version>
  <user-name>Aaron Patterson</user-name>
  <creator-name>Charles Oliver Nutter</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6662</url>
  <priority-name>Low</priority-name>
  <original-body>On Solaris and (recently) on JRuby, File#flock will raise EBADF when attempting to acquire an exclusive lock on a File that has only been opened for read.

The case I have found is here: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/cache/file_store.rb#L121

The filename specified is opened for read only, and then an exclusive lock is attempted.

MRI (all versions) on Solaris will raise EBADF for this case. There may be other platforms that behave the same.

On Java, all platforms will raise an error when attempting to acquire an exclusive lock on a file opened only for read. Up until recently, JRuby was downgrading exclusive locks to shared locks under these circumstances. This was pointed out as a very bad thing to do (giving a shared lock when an exclusive lock was requested), and so we now behave like MRI on Solaris regardless of what platform we run on.

The related JRuby bug is here: http://jira.codehaus.org/browse/JRUBY-5627

JRuby's &quot;stable Rails&quot; CI started failing after this bug was fixed: http://ci.jruby.org/job/rails-3-0-stable/component=activesupport,label=master/279/console

One possible fix would be to attempt to open the file read/write before acquiring the lock. All cases in our &quot;stable&quot; version of Rails appear to be from active_support/cache/strategy/local_cache.rb, but that appears to no longer call file_lock directly. I have not done any further investigation on Rails master.</original-body>
  <latest-body>On Solaris and (recently) on JRuby, File#flock will raise EBADF when attempting to acquire an exclusive lock on a File that has only been opened for read.

The case I have found is here: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/cache/file_store.rb#L121

The filename specified is opened for read only, and then an exclusive lock is attempted.

MRI (all versions) on Solaris will raise EBADF for this case. There may be other platforms that behave the same.

On Java, all platforms will raise an error when attempting to acquire an exclusive lock on a file opened only for read. Up until recently, JRuby was downgrading exclusive locks to shared locks under these circumstances. This was pointed out as a very bad thing to do (giving a shared lock when an exclusive lock was requested), and so we now behave like MRI on Solaris regardless of what platform we run on.

The related JRuby bug is here: http://jira.codehaus.org/browse/JRUBY-5627

JRuby's &quot;stable Rails&quot; CI started failing after this bug was fixed: http://ci.jruby.org/job/rails-3-0-stable/component=activesupport,label=master/279/console

One possible fix would be to attempt to open the file read/write before acquiring the lock. All cases in our &quot;stable&quot; version of Rails appear to be from active_support/cache/strategy/local_cache.rb, but that appears to no longer call file_lock directly. I have not done any further investigation on Rails master.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;On Solaris and (recently) on JRuby, File#flock will raise EBADF
when attempting to acquire an exclusive lock on a File that has
only been opened for read.&lt;/p&gt;
&lt;p&gt;The case I have found is here: &lt;a href=
&quot;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/cache/file_store.rb#L121&quot;&gt;
https://github.com/rails/rails/blob/master/activesupport/lib/active...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The filename specified is opened for read only, and then an
exclusive lock is attempted.&lt;/p&gt;
&lt;p&gt;MRI (all versions) on Solaris will raise EBADF for this case.
There may be other platforms that behave the same.&lt;/p&gt;
&lt;p&gt;On Java, all platforms will raise an error when attempting to
acquire an exclusive lock on a file opened only for read. Up until
recently, JRuby was downgrading exclusive locks to shared locks
under these circumstances. This was pointed out as a very bad thing
to do (giving a shared lock when an exclusive lock was requested),
and so we now behave like MRI on Solaris regardless of what
platform we run on.&lt;/p&gt;
&lt;p&gt;The related JRuby bug is here: &lt;a href=
&quot;http://jira.codehaus.org/browse/JRUBY-5627&quot;&gt;http://jira.codehaus.org/browse/JRUBY-5627&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JRuby's &quot;stable Rails&quot; CI started failing after this bug was
fixed: &lt;a href=
&quot;http://ci.jruby.org/job/rails-3-0-stable/component=activesupport,label=master/279/console&quot;&gt;
http://ci.jruby.org/job/rails-3-0-stable/component=activesupport,la...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One possible fix would be to attempt to open the file read/write
before acquiring the lock. All cases in our &quot;stable&quot; version of
Rails appear to be from
active_support/cache/strategy/local_cache.rb, but that appears to
no longer call file_lock directly. I have not done any further
investigation on Rails master.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>On Solaris and (recently) on JRuby, File#flock will raise EBADF when attempting to acquire an exclusive lock on a File that has only been opened for read.

The case I have found is here: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/cache/file_store.rb#L121

The filename specified is opened for read only, and then an exclusive lock is attempted.

MRI (all versions) on Solaris will raise EBADF for this case. There may be other platforms that behave the same.

On Java, all platforms will raise an error when attempting to acquire an exclusive lock on a file opened only for read. Up until recently, JRuby was downgrading exclusive locks to shared locks under these circumstances. This was pointed out as a very bad thing to do (giving a shared lock when an exclusive lock was requested), and so we now behave like MRI on Solaris regardless of what platform we run on.

The related JRuby bug is here: http://jira.codehaus.org/browse/JRUBY-5627

JRuby's &quot;stable Rails&quot; CI started failing after this bug was fixed: http://ci.jruby.org/job/rails-3-0-stable/component=activesupport,label=master/279/console

One possible fix would be to attempt to open the file read/write before acquiring the lock. All cases in our &quot;stable&quot; version of Rails appear to be from active_support/cache/strategy/local_cache.rb, but that appears to no longer call file_lock directly. I have not done any further investigation on Rails master.</body>
      <body-html>&lt;div&gt;&lt;p&gt;On Solaris and (recently) on JRuby, File#flock will raise EBADF
when attempting to acquire an exclusive lock on a File that has
only been opened for read.&lt;/p&gt;
&lt;p&gt;The case I have found is here: &lt;a href=
&quot;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/cache/file_store.rb#L121&quot;&gt;
https://github.com/rails/rails/blob/master/activesupport/lib/active...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The filename specified is opened for read only, and then an
exclusive lock is attempted.&lt;/p&gt;
&lt;p&gt;MRI (all versions) on Solaris will raise EBADF for this case.
There may be other platforms that behave the same.&lt;/p&gt;
&lt;p&gt;On Java, all platforms will raise an error when attempting to
acquire an exclusive lock on a file opened only for read. Up until
recently, JRuby was downgrading exclusive locks to shared locks
under these circumstances. This was pointed out as a very bad thing
to do (giving a shared lock when an exclusive lock was requested),
and so we now behave like MRI on Solaris regardless of what
platform we run on.&lt;/p&gt;
&lt;p&gt;The related JRuby bug is here: &lt;a href=
&quot;http://jira.codehaus.org/browse/JRUBY-5627&quot;&gt;http://jira.codehaus.org/browse/JRUBY-5627&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JRuby's &quot;stable Rails&quot; CI started failing after this bug was
fixed: &lt;a href=
&quot;http://ci.jruby.org/job/rails-3-0-stable/component=activesupport,label=master/279/console&quot;&gt;
http://ci.jruby.org/job/rails-3-0-stable/component=activesupport,la...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One possible fix would be to attempt to open the file read/write
before acquiring the lock. All cases in our &quot;stable&quot; version of
Rails appear to be from
active_support/cache/strategy/local_cache.rb, but that appears to
no longer call file_lock directly. I have not done any further
investigation on Rails master.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-01T10:12:05+01:00</created-at>
      <creator-id type="integer">8819</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6662</number>
      <permalink>fileflock-cant-lock-read-only-file-for-exclusive-access</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>File#flock can't lock read-only File for exclusive access</title>
      <updated-at type="datetime">2011-04-01T10:12:11+01:00</updated-at>
      <user-id type="integer">8819</user-id>
      <version type="integer">1</version>
      <user-name>Charles Oliver Nutter</user-name>
      <creator-name>Charles Oliver Nutter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6662</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">136779</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Pull request for this solution is here 

https://github.com/rails/rails/pull/288</body>
      <body-html>&lt;div&gt;&lt;p&gt;Pull request for this solution is here&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/pull/288&quot;&gt;https://github.com/rails/rails/pull/288&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-18T12:41:32+01:00</created-at>
      <creator-id type="integer">8819</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6662</number>
      <permalink>fileflock-cant-lock-read-only-file-for-exclusive-access</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>jruby</tag>
      <title>File#flock can't lock read-only File for exclusive access</title>
      <updated-at type="datetime">2011-04-18T12:41:42+01:00</updated-at>
      <user-id type="integer">108365</user-id>
      <version type="integer">2</version>
      <user-name>Arun Agrawal</user-name>
      <creator-name>Charles Oliver Nutter</creator-name>
      <assigned-user-name>rails</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6662</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">136779</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>https://github.com/rails/rails/pull/288 

Passes test with

Jruby-1.6.0
Jruby-1.6.1
ruby-1.9.2
ruby-1.8.7
ree</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/pull/288&quot;&gt;https://github.com/rails/rails/pull/288&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Passes test with&lt;/p&gt;
&lt;p&gt;Jruby-1.6.0&lt;br&gt;
Jruby-1.6.1&lt;br&gt;
ruby-1.9.2&lt;br&gt;
ruby-1.8.7&lt;br&gt;
ree&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-18T12:43:59+01:00</created-at>
      <creator-id type="integer">8819</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6662</number>
      <permalink>fileflock-cant-lock-read-only-file-for-exclusive-access</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>jruby</tag>
      <title>File#flock can't lock read-only File for exclusive access</title>
      <updated-at type="datetime">2011-04-18T12:44:11+01:00</updated-at>
      <user-id type="integer">130567</user-id>
      <version type="integer">3</version>
      <user-name>Arun Agrawal</user-name>
      <creator-name>Charles Oliver Nutter</creator-name>
      <assigned-user-name>rails</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6662</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Fixed in master and 3-0-stable.  This patch will be released with 3.0.8.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Fixed in master and 3-0-stable. This patch will be released with
3.0.8.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-18T17:09:41+01:00</created-at>
      <creator-id type="integer">8819</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:assigned_user: 136779
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6662</number>
      <permalink>fileflock-cant-lock-read-only-file-for-exclusive-access</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>jruby</tag>
      <title>File#flock can't lock read-only File for exclusive access</title>
      <updated-at type="datetime">2011-04-18T17:09:54+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">4</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Charles Oliver Nutter</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6662</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
