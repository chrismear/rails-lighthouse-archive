<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-11T15:46:36+01:00</created-at>
  <creator-id type="integer">17461</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5783</number>
  <permalink>action-caching-ignore-response-content-type-and-request-header</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>&quot;actionpack responder&quot; action_controller caches_action patch responder</tag>
  <title>Action Caching ignore response content type and request header</title>
  <updated-at type="datetime">2011-03-07T00:00:49+00:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">8</version>
  <user-name>rails</user-name>
  <creator-name>Chris Hapgood</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5783</url>
  <priority-name>Low</priority-name>
  <original-body>I propose a reset of how cached content is matched up to requests.  The biggest problem with the current implementation, in my hastily formed opinion, is that the cached content may or may not be tagged with a content type.  This leads to futile attempts to match

 * The requested content type -which is intentionally vague ('image/\*', ACCEPT header with 'q' values, IE's infamous '\*/\*', etc.).
 * The available content type(s) -which can be UNKNOWN in the common case of a cache key without an extension

There are lots of compromises that involve trying to make educated guesses (request.cache_format, AC::Base.page_cache_extension, params[:format], request.path).  Here are some observations that jump out when looking at the &quot;surprising&quot; behavior of the current implementation:

 1. Rails has a convention for tagging cached content with a Mime::Type-compatible extension.
 2. At the moment the cache is created, Rails *knows* the content type of the cache -but ignores it.
 3. Rails has a strong and well documented mechanism for matching requests with available content type -but doesn't use it in cache responses.

Observations 1 &amp; 2 lead me to the conclusion that the content type (and thus extension) of the cached content should be determined *after* the action has processed and explicitly tagged the content (usually via #respond_to or #render).  It was a pretty simple change that resulted in a noticeable simplification of the actions.rb file, particularly the ActionCachePath class.  The whole &quot;infer_extension&quot; mess is gone, replaced by specific information from the user-generated response.  This leads to the immediate benefit that a request to an extension-less path still gets a content type applied to the cache key.

Observation 3 lead me to graft the existing Mime::Responder#respond_to onto the action cache filter code.  It was surprisingly easy.  Now responses from cache work follow the principle of least surprise: just like regular responses, the content type is determined by respond_to, which considers the available content types (specified as a parameter to the caches_action method) and the normal cast of characters (:format parameter, path extension, HTTP_ACCEPT header, xhr logic, etc.).

Here is an example that should illustrate the impact of the changes.

Request to: /widgets/23, which uses #render :xml in the action

BEFORE
&gt; content_type of first response: application/xml

&gt; cache key: /widgets/23

&gt; content_type of subsequent response served from cache: variable depending on request and static configuration values.  Possibly a surprising HTML.

&gt; Result: surprise!

AFTER
&gt; content_type of first response: application/xml

&gt; cache key: /widgets/23.xml

&gt; content_type of subsequent response served from cache: xml

&gt; Result: yawn</original-body>
  <latest-body>I propose a reset of how cached content is matched up to requests.  The biggest problem with the current implementation, in my hastily formed opinion, is that the cached content may or may not be tagged with a content type.  This leads to futile attempts to match

 * The requested content type -which is intentionally vague ('image/\*', ACCEPT header with 'q' values, IE's infamous '\*/\*', etc.).
 * The available content type(s) -which can be UNKNOWN in the common case of a cache key without an extension

There are lots of compromises that involve trying to make educated guesses (request.cache_format, AC::Base.page_cache_extension, params[:format], request.path).  Here are some observations that jump out when looking at the &quot;surprising&quot; behavior of the current implementation:

 1. Rails has a convention for tagging cached content with a Mime::Type-compatible extension.
 2. At the moment the cache is created, Rails *knows* the content type of the cache -but ignores it.
 3. Rails has a strong and well documented mechanism for matching requests with available content type -but doesn't use it in cache responses.

Observations 1 &amp; 2 lead me to the conclusion that the content type (and thus extension) of the cached content should be determined *after* the action has processed and explicitly tagged the content (usually via #respond_to or #render).  It was a pretty simple change that resulted in a noticeable simplification of the actions.rb file, particularly the ActionCachePath class.  The whole &quot;infer_extension&quot; mess is gone, replaced by specific information from the user-generated response.  This leads to the immediate benefit that a request to an extension-less path still gets a content type applied to the cache key.

Observation 3 lead me to graft the existing Mime::Responder#respond_to onto the action cache filter code.  It was surprisingly easy.  Now responses from cache work follow the principle of least surprise: just like regular responses, the content type is determined by respond_to, which considers the available content types (specified as a parameter to the caches_action method) and the normal cast of characters (:format parameter, path extension, HTTP_ACCEPT header, xhr logic, etc.).

Here is an example that should illustrate the impact of the changes.

Request to: /widgets/23, which uses #render :xml in the action

BEFORE
&gt; content_type of first response: application/xml

&gt; cache key: /widgets/23

&gt; content_type of subsequent response served from cache: variable depending on request and static configuration values.  Possibly a surprising HTML.

&gt; Result: surprise!

AFTER
&gt; content_type of first response: application/xml

&gt; cache key: /widgets/23.xml

&gt; content_type of subsequent response served from cache: xml

&gt; Result: yawn</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I propose a reset of how cached content is matched up to
requests. The biggest problem with the current implementation, in
my hastily formed opinion, is that the cached content may or may
not be tagged with a content type. This leads to futile attempts to
match&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The requested content type -which is intentionally vague
('image/*', ACCEPT header with 'q' values, IE's infamous '*/*',
etc.).&lt;/li&gt;
&lt;li&gt;The available content type(s) -which can be UNKNOWN in the
common case of a cache key without an extension&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are lots of compromises that involve trying to make
educated guesses (request.cache_format,
AC::Base.page_cache_extension, params[:format], request.path). Here
are some observations that jump out when looking at the
&quot;surprising&quot; behavior of the current implementation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rails has a convention for tagging cached content with a
Mime::Type-compatible extension.&lt;/li&gt;
&lt;li&gt;At the moment the cache is created, Rails &lt;em&gt;knows&lt;/em&gt; the
content type of the cache -but ignores it.&lt;/li&gt;
&lt;li&gt;Rails has a strong and well documented mechanism for matching
requests with available content type -but doesn't use it in cache
responses.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Observations 1 &amp;amp; 2 lead me to the conclusion that the
content type (and thus extension) of the cached content should be
determined &lt;em&gt;after&lt;/em&gt; the action has processed and explicitly
tagged the content (usually via #respond_to or #render). It was a
pretty simple change that resulted in a noticeable simplification
of the actions.rb file, particularly the ActionCachePath class. The
whole &quot;infer_extension&quot; mess is gone, replaced by specific
information from the user-generated response. This leads to the
immediate benefit that a request to an extension-less path still
gets a content type applied to the cache key.&lt;/p&gt;
&lt;p&gt;Observation 3 lead me to graft the existing
Mime::Responder#respond_to onto the action cache filter code. It
was surprisingly easy. Now responses from cache work follow the
principle of least surprise: just like regular responses, the
content type is determined by respond_to, which considers the
available content types (specified as a parameter to the
caches_action method) and the normal cast of characters (:format
parameter, path extension, HTTP_ACCEPT header, xhr logic,
etc.).&lt;/p&gt;
&lt;p&gt;Here is an example that should illustrate the impact of the
changes.&lt;/p&gt;
&lt;p&gt;Request to: /widgets/23, which uses #render :xml in the
action&lt;/p&gt;
&lt;p&gt;BEFORE&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;content_type of first response: application/xml&lt;/p&gt;
&lt;p&gt;cache key: /widgets/23&lt;/p&gt;
&lt;p&gt;content_type of subsequent response served from cache: variable
depending on request and static configuration values. Possibly a
surprising HTML.&lt;/p&gt;
&lt;p&gt;Result: surprise!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AFTER&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;content_type of first response: application/xml&lt;/p&gt;
&lt;p&gt;cache key: /widgets/23.xml&lt;/p&gt;
&lt;p&gt;content_type of subsequent response served from cache: xml&lt;/p&gt;
&lt;p&gt;Result: yawn&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I propose a reset of how cached content is matched up to requests.  The biggest problem with the current implementation, in my hastily formed opinion, is that the cached content may or may not be tagged with a content type.  This leads to futile attempts to match

 * The requested content type -which is intentionally vague ('image/\*', ACCEPT header with 'q' values, IE's infamous '\*/\*', etc.).
 * The available content type(s) -which can be UNKNOWN in the common case of a cache key without an extension

There are lots of compromises that involve trying to make educated guesses (request.cache_format, AC::Base.page_cache_extension, params[:format], request.path).  Here are some observations that jump out when looking at the &quot;surprising&quot; behavior of the current implementation:

 1. Rails has a convention for tagging cached content with a Mime::Type-compatible extension.
 2. At the moment the cache is created, Rails *knows* the content type of the cache -but ignores it.
 3. Rails has a strong and well documented mechanism for matching requests with available content type -but doesn't use it in cache responses.

Observations 1 &amp; 2 lead me to the conclusion that the content type (and thus extension) of the cached content should be determined *after* the action has processed and explicitly tagged the content (usually via #respond_to or #render).  It was a pretty simple change that resulted in a noticeable simplification of the actions.rb file, particularly the ActionCachePath class.  The whole &quot;infer_extension&quot; mess is gone, replaced by specific information from the user-generated response.  This leads to the immediate benefit that a request to an extension-less path still gets a content type applied to the cache key.

Observation 3 lead me to graft the existing Mime::Responder#respond_to onto the action cache filter code.  It was surprisingly easy.  Now responses from cache work follow the principle of least surprise: just like regular responses, the content type is determined by respond_to, which considers the available content types (specified as a parameter to the caches_action method) and the normal cast of characters (:format parameter, path extension, HTTP_ACCEPT header, xhr logic, etc.).

Here is an example that should illustrate the impact of the changes.

Request to: /widgets/23, which uses #render :xml in the action

BEFORE
&gt; content_type of first response: application/xml

&gt; cache key: /widgets/23

&gt; content_type of subsequent response served from cache: variable depending on request and static configuration values.  Possibly a surprising HTML.

&gt; Result: surprise!

AFTER
&gt; content_type of first response: application/xml

&gt; cache key: /widgets/23.xml

&gt; content_type of subsequent response served from cache: xml

&gt; Result: yawn</body>
      <body-html>&lt;div&gt;&lt;p&gt;I propose a reset of how cached content is matched up to
requests. The biggest problem with the current implementation, in
my hastily formed opinion, is that the cached content may or may
not be tagged with a content type. This leads to futile attempts to
match&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The requested content type -which is intentionally vague
('image/*', ACCEPT header with 'q' values, IE's infamous '*/*',
etc.).&lt;/li&gt;
&lt;li&gt;The available content type(s) -which can be UNKNOWN in the
common case of a cache key without an extension&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are lots of compromises that involve trying to make
educated guesses (request.cache_format,
AC::Base.page_cache_extension, params[:format], request.path). Here
are some observations that jump out when looking at the
&quot;surprising&quot; behavior of the current implementation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rails has a convention for tagging cached content with a
Mime::Type-compatible extension.&lt;/li&gt;
&lt;li&gt;At the moment the cache is created, Rails &lt;em&gt;knows&lt;/em&gt; the
content type of the cache -but ignores it.&lt;/li&gt;
&lt;li&gt;Rails has a strong and well documented mechanism for matching
requests with available content type -but doesn't use it in cache
responses.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Observations 1 &amp;amp; 2 lead me to the conclusion that the
content type (and thus extension) of the cached content should be
determined &lt;em&gt;after&lt;/em&gt; the action has processed and explicitly
tagged the content (usually via #respond_to or #render). It was a
pretty simple change that resulted in a noticeable simplification
of the actions.rb file, particularly the ActionCachePath class. The
whole &quot;infer_extension&quot; mess is gone, replaced by specific
information from the user-generated response. This leads to the
immediate benefit that a request to an extension-less path still
gets a content type applied to the cache key.&lt;/p&gt;
&lt;p&gt;Observation 3 lead me to graft the existing
Mime::Responder#respond_to onto the action cache filter code. It
was surprisingly easy. Now responses from cache work follow the
principle of least surprise: just like regular responses, the
content type is determined by respond_to, which considers the
available content types (specified as a parameter to the
caches_action method) and the normal cast of characters (:format
parameter, path extension, HTTP_ACCEPT header, xhr logic,
etc.).&lt;/p&gt;
&lt;p&gt;Here is an example that should illustrate the impact of the
changes.&lt;/p&gt;
&lt;p&gt;Request to: /widgets/23, which uses #render :xml in the
action&lt;/p&gt;
&lt;p&gt;BEFORE&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;content_type of first response: application/xml&lt;/p&gt;
&lt;p&gt;cache key: /widgets/23&lt;/p&gt;
&lt;p&gt;content_type of subsequent response served from cache: variable
depending on request and static configuration values. Possibly a
surprising HTML.&lt;/p&gt;
&lt;p&gt;Result: surprise!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AFTER&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;content_type of first response: application/xml&lt;/p&gt;
&lt;p&gt;cache key: /widgets/23.xml&lt;/p&gt;
&lt;p&gt;content_type of subsequent response served from cache: xml&lt;/p&gt;
&lt;p&gt;Result: yawn&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-11T15:46:36+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5783</number>
      <permalink>action-caching-ignore-response-content-type-and-request-header</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;actionpack responder&quot; action_controller caches_action responder</tag>
      <title>Action Caching ignore response content type and request header</title>
      <updated-at type="datetime">2010-10-11T15:46:38+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">1</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5783</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>There are some warts.  Some that come to mind: determination of available content_types, cache expiration and backwards compatibility.

### content_type availability ###
To determine the content types available for a cache response, I see two possible solutions:

 1. query the cache story for the keys at a given prefix (the base key, without a content_type suffix) and extract all the existing suffixes.
 2. have the user specify the available content types in the macro (caches_action :show, :content_types =&gt; [:xml, :pdf]

Option 1 is DRY, but required a separate cache query -and I wasn't sure all cache stores could support a wildcard key lookup.  Option 2 was pragmatic and I selected it.

### cache expiration ###
Cache expiration appears to have always been a bit clunky when dealing with multiple content types.  It appears that a wildcard approach is almost required here.  I chose, for pragmatic reasons, to stick with specific expiration by content type.  It's not pretty, but I don't think it was before either.

### backwards compatibility ###
Backwards compatibility is important because I decided to let the user specify the content types (potentially) available from cache.  Existing code won't have such a specification.  In that case, I assume that the :all generic content type applies for matching.  This makes the respond_to code work as expected, but *may* lead to unhelpful cache key extensions.  I could use some help here...

### Rails 3 ###
Oh yeah.  I did not test my patch against master.  Not even sure if it is still appropriate.</body>
      <body-html>&lt;div&gt;&lt;p&gt;There are some warts. Some that come to mind: determination of
available content_types, cache expiration and backwards
compatibility.&lt;/p&gt;
&lt;h3&gt;content_type availability&lt;/h3&gt;
&lt;p&gt;To determine the content types available for a cache response, I
see two possible solutions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;query the cache story for the keys at a given prefix (the base
key, without a content_type suffix) and extract all the existing
suffixes.&lt;/li&gt;
&lt;li&gt;have the user specify the available content types in the macro
(caches_action :show, :content_types =&amp;gt; [:xml, :pdf]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Option 1 is DRY, but required a separate cache query -and I
wasn't sure all cache stores could support a wildcard key lookup.
Option 2 was pragmatic and I selected it.&lt;/p&gt;
&lt;h3&gt;cache expiration&lt;/h3&gt;
&lt;p&gt;Cache expiration appears to have always been a bit clunky when
dealing with multiple content types. It appears that a wildcard
approach is almost required here. I chose, for pragmatic reasons,
to stick with specific expiration by content type. It's not pretty,
but I don't think it was before either.&lt;/p&gt;
&lt;h3&gt;backwards compatibility&lt;/h3&gt;
&lt;p&gt;Backwards compatibility is important because I decided to let
the user specify the content types (potentially) available from
cache. Existing code won't have such a specification. In that case,
I assume that the :all generic content type applies for matching.
This makes the respond_to code work as expected, but &lt;em&gt;may&lt;/em&gt;
lead to unhelpful cache key extensions. I could use some help
here...&lt;/p&gt;
&lt;h3&gt;Rails 3&lt;/h3&gt;
&lt;p&gt;Oh yeah. I did not test my patch against master. Not even sure
if it is still appropriate.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-11T15:56:39+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5783</number>
      <permalink>action-caching-ignore-response-content-type-and-request-header</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;actionpack responder&quot; action_controller caches_action responder</tag>
      <title>Action Caching ignore response content type and request header</title>
      <updated-at type="datetime">2010-10-11T15:56:42+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">2</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5783</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The same issue does apply to edge; unfortunately your patch would require quite a few changes, code in master changed quite a bit.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The same issue does apply to edge; unfortunately your patch
would require quite a few changes, code in master changed quite a
bit.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-16T22:59:39+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;actionpack responder\&quot; action_controller caches_action responder&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5783</number>
      <permalink>action-caching-ignore-response-content-type-and-request-header</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;actionpack responder&quot; action_controller caches_action patch responder</tag>
      <title>Action Caching ignore response content type and request header</title>
      <updated-at type="datetime">2010-10-16T22:59:41+01:00</updated-at>
      <user-id type="integer">81551</user-id>
      <version type="integer">3</version>
      <user-name>Andrea Campi</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5783</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Andrea, 
Thanks for the update.  I will work on getting this code to work with master.  It is working wonderfully in 2-3-stable.

-Chris</body>
      <body-html>&lt;div&gt;&lt;p&gt;Andrea,&lt;br&gt;
Thanks for the update. I will work on getting this code to work
with master. It is working wonderfully in 2-3-stable.&lt;/p&gt;
&lt;p&gt;-Chris&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-18T20:58:28+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5783</number>
      <permalink>action-caching-ignore-response-content-type-and-request-header</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;actionpack responder&quot; action_controller caches_action patch responder</tag>
      <title>Action Caching ignore response content type and request header</title>
      <updated-at type="datetime">2010-10-18T20:58:32+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">4</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5783</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This is a tough one. I spent some time looking at the issue and here are my findings.

If you sent a request for .xml or .js extension at the end then everything works fine.

However if say HTTP_ACCEPT attribute is &quot;text/xml&quot; then there are a number of issues. Remember action caching puts a before_filter which reads from the cache to find out if a cache already exists or not. However in this case in order to find out if a cache exists for mime type html or for xml rails needs to parse HTTP_ACCEPT. Parsing actually happens only inside the process body and not in a filter.

In the before_filter controller has access to params[:format] and that is why a request with .xml or .js works.

I will discuss this issue with JV and will update here.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is a tough one. I spent some time looking at the issue and
here are my findings.&lt;/p&gt;
&lt;p&gt;If you sent a request for .xml or .js extension at the end then
everything works fine.&lt;/p&gt;
&lt;p&gt;However if say HTTP_ACCEPT attribute is &quot;text/xml&quot; then there
are a number of issues. Remember action caching puts a
before_filter which reads from the cache to find out if a cache
already exists or not. However in this case in order to find out if
a cache exists for mime type html or for xml rails needs to parse
HTTP_ACCEPT. Parsing actually happens only inside the process body
and not in a filter.&lt;/p&gt;
&lt;p&gt;In the before_filter controller has access to params[:format]
and that is why a request with .xml or .js works.&lt;/p&gt;
&lt;p&gt;I will discuss this issue with JV and will update here.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-05T01:03:58+00:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5783</number>
      <permalink>action-caching-ignore-response-content-type-and-request-header</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;actionpack responder&quot; action_controller caches_action patch responder</tag>
      <title>Action Caching ignore response content type and request header</title>
      <updated-at type="datetime">2010-12-05T01:04:09+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">5</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5783</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Added to documentation that action caching does not play well with HTTP_ACCEPT  attribute.

https://github.com/lifo/docrails/commit/3ac844deec6070f35634acca0ae9007280b13e5d</body>
      <body-html>&lt;div&gt;&lt;p&gt;Added to documentation that action caching does not play well
with HTTP_ACCEPT attribute.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/lifo/docrails/commit/3ac844deec6070f35634acca0ae9007280b13e5d&quot;&gt;
https://github.com/lifo/docrails/commit/3ac844deec6070f35634acca0ae...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-06T21:41:10+00:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5783</number>
      <permalink>action-caching-ignore-response-content-type-and-request-header</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;actionpack responder&quot; action_controller caches_action patch responder</tag>
      <title>Action Caching ignore response content type and request header</title>
      <updated-at type="datetime">2010-12-06T21:41:25+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5783</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-07T00:00:05+00:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5783</number>
      <permalink>action-caching-ignore-response-content-type-and-request-header</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;actionpack responder&quot; action_controller caches_action patch responder</tag>
      <title>Action Caching ignore response content type and request header</title>
      <updated-at type="datetime">2011-03-07T00:00:49+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">7</version>
      <user-name>rails</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5783</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-07T00:00:05+00:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5783</number>
      <permalink>action-caching-ignore-response-content-type-and-request-header</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;actionpack responder&quot; action_controller caches_action patch responder</tag>
      <title>Action Caching ignore response content type and request header</title>
      <updated-at type="datetime">2011-03-07T00:00:28+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">8</version>
      <user-name>rails</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5783</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>eb6afaee281d5c34959f41c782905d60ddcd95ad</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-10-11T15:46:37+01:00</created-at>
      <filename>ch_action_cache.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">713307</id>
      <size type="integer">9901</size>
      <uploader-id type="integer">17461</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/713307/ch_action_cache.diff</url>
    </attachment>
  </attachments>
</ticket>
