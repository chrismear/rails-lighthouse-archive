<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-12-05T00:53:16+00:00</created-at>
  <creator-id type="integer">11364</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1516</number>
  <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
  <priority type="integer">878</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord patch tested</tag>
  <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
  <updated-at type="datetime">2009-02-10T02:25:20+00:00</updated-at>
  <user-id type="integer">10460</user-id>
  <version type="integer">10</version>
  <user-name>Will Bryant</user-name>
  <creator-name>Shane Mingins</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Basically I wish to extend the behaviour that has been changed for sum to also work with average, maximum, and minimum. 

http://rails.lighthouseapp.com/projects/8994/tickets/295-sum-on-associations-should-return-0-when-no-rows-are-returned

To me it makes sense that if I have no records that also the average, maximum, and minimum of a field should also be zero.

Patch and tests attached.</original-body>
  <latest-body>Basically I wish to extend the behaviour that has been changed for sum to also work with average, maximum, and minimum. 

http://rails.lighthouseapp.com/projects/8994/tickets/295-sum-on-associations-should-return-0-when-no-rows-are-returned

To me it makes sense that if I have no records that also the average, maximum, and minimum of a field should also be zero.

Patch and tests attached.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Basically I wish to extend the behaviour that has been changed
for sum to also work with average, maximum, and minimum.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/295-sum-on-associations-should-return-0-when-no-rows-are-returned&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To me it makes sense that if I have no records that also the
average, maximum, and minimum of a field should also be zero.&lt;/p&gt;
&lt;p&gt;Patch and tests attached.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Basically I wish to extend the behaviour that has been changed for sum to also work with average, maximum, and minimum. 

http://rails.lighthouseapp.com/projects/8994/tickets/295-sum-on-associations-should-return-0-when-no-rows-are-returned

To me it makes sense that if I have no records that also the average, maximum, and minimum of a field should also be zero.

Patch and tests attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Basically I wish to extend the behaviour that has been changed
for sum to also work with average, maximum, and minimum.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/295-sum-on-associations-should-return-0-when-no-rows-are-returned&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To me it makes sense that if I have no records that also the
average, maximum, and minimum of a field should also be zero.&lt;/p&gt;
&lt;p&gt;Patch and tests attached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-05T00:53:16+00:00</created-at>
      <creator-id type="integer">11364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1516</number>
      <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
      <updated-at type="datetime">2008-12-05T00:53:19+00:00</updated-at>
      <user-id type="integer">11364</user-id>
      <version type="integer">1</version>
      <user-name>Shane Mingins</user-name>
      <creator-name>Shane Mingins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>-1

The current return value for these calculations on empty sets is nil, which can be very useful:

@@@ ruby
@product.reviews.average(:rating) || &quot;not yet reviewed&quot;
@@@

With this patch applied, to get the same behaviour you'd have to do something like:

@@@ ruby
@product.reviews.empty? ? &quot;not yet reviewed&quot; : @product.reviews.average(:rating)
@@@

Less readable, less elegant, and an extra database query.</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1&lt;/p&gt;
&lt;p&gt;The current return value for these calculations on empty sets is
nil, which can be very useful:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
@product.reviews.average(:rating) || &amp;quot;not yet reviewed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this patch applied, to get the same behaviour you'd have to
do something like:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
@product.reviews.empty? ? &amp;quot;not yet reviewed&amp;quot; : @product.reviews.average(:rating)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Less readable, less elegant, and an extra database query.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-05T07:25:20+00:00</created-at>
      <creator-id type="integer">11364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1516</number>
      <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
      <updated-at type="datetime">2008-12-05T07:25:25+00:00</updated-at>
      <user-id type="integer">23609</user-id>
      <version type="integer">2</version>
      <user-name>Chris Barnett</user-name>
      <creator-name>Shane Mingins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 to consitency 
Sum does (and should) return 0 for an empty assoc, so average, max and min should as well.

@chris barnett: yours look like a special case and I also don't agree the second snippet is less readable. The first is more terse but behave on a non-intuitive 'hack'. IMHO.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 to consitency Sum does (and should) return 0 for an empty
assoc, so average, max and min should as well.&lt;/p&gt;
&lt;p&gt;@chris barnett: yours look like a special case and I also don't
agree the second snippet is less readable. The first is more terse
but behave on a non-intuitive 'hack'. IMHO.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-05T09:56:20+00:00</created-at>
      <creator-id type="integer">11364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1516</number>
      <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
      <updated-at type="datetime">2008-12-05T09:56:24+00:00</updated-at>
      <user-id type="integer">35649</user-id>
      <version type="integer">3</version>
      <user-name>dvdplm</user-name>
      <creator-name>Shane Mingins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I should also point out there is a bit of history on this. ActiveRecord actually used to return 0.0 for these calculations: http://dev.rubyonrails.org/ticket/8298

@dvdplm: There is a specific test case for average returning nil over an empty set, so I don't feel I'm relying on a 'hack': http://github.com/rails/rails/tree/master/activerecord/test/cases/calculations_test.rb#L25</body>
      <body-html>&lt;div&gt;&lt;p&gt;I should also point out there is a bit of history on this.
ActiveRecord actually used to return 0.0 for these calculations:
&lt;a href=&quot;http://dev.rubyonrails.org/ticket/8298&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;@dvdplm: There is a specific test case for average returning nil
over an empty set, so I don't feel I'm relying on a 'hack':
&lt;a href=&quot;http://github.com/rails/rails/tree/master/activerecord/test/cases/calculations_test.rb#L25&quot;&gt;
http://github.com/rails/rails/tr...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-05T13:33:11+00:00</created-at>
      <creator-id type="integer">11364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1516</number>
      <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
      <updated-at type="datetime">2008-12-05T13:33:12+00:00</updated-at>
      <user-id type="integer">23609</user-id>
      <version type="integer">4</version>
      <user-name>Chris Barnett</user-name>
      <creator-name>Shane Mingins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>-1, I think it should behave like the existing enumerable methods. Calling [].min or [].max returns nil in Ruby. Calling [].sum returns zero in ActiveSupport. To me this makes the most sense.</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1, I think it should behave like the existing enumerable
methods. Calling [].min or [].max returns nil in Ruby. Calling
[].sum returns zero in ActiveSupport. To me this makes the most
sense.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-05T17:18:31+00:00</created-at>
      <creator-id type="integer">11364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1516</number>
      <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
      <updated-at type="datetime">2008-12-05T17:18:32+00:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">5</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>Shane Mingins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@chris and @ryan ... why does sum returning zero for an empty association and average nil seem normal and make sense?  

This existing Rails behaviour does seem inconsistent to me and I am trying to understand why it would be this way.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@chris and @ryan ... why does sum returning zero for an empty
association and average nil seem normal and make sense?&lt;/p&gt;
&lt;p&gt;This existing Rails behaviour does seem inconsistent to me and I
am trying to understand why it would be this way.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-05T17:56:37+00:00</created-at>
      <creator-id type="integer">11364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1516</number>
      <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
      <updated-at type="datetime">2008-12-05T17:56:41+00:00</updated-at>
      <user-id type="integer">11364</user-id>
      <version type="integer">6</version>
      <user-name>Shane Mingins</user-name>
      <creator-name>Shane Mingins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>-1. I don't think the behavior of maximum or minimum should be altered.

Concretely, the maximum is the member with the highest value. If there are no members, there is no such value. So [].max = nil rather than zero is correct. If you add all the members in the empty list together, on the other hand, you do indeed get zero, so [].sum = 0 is correct.

Abstractly, it's more important for an operation to be consistent with itself than with other operations. So this kind of foldy set operation should be distributive if possible: for two sets S and T, (S + T).op should if possible be (S.op, T.op).op. If you put [].max = 0, this will fail for e.g. S = [] and T = [ -1 ]. 

A symmetric argument to that for max applies for min.

I wouldn't mind a change to make the average of an empty set to return zero, since that does fulfil the identity above. But given the natural implementation of S.avg is S.sum / S.size, and this is undefined for [].sum / [].size = 0 / 0, I can see why the existing behavior exists.

(Ruby and ActiveSupport don't define Array#avg or similar. Maybe the lack of a clear winner for this edge case is why?)</body>
      <body-html>&lt;div&gt;&lt;ol&gt;
&lt;li&gt;I don't think the behavior of maximum or minimum should be
altered.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Concretely, the maximum is the member with the highest value. If
there are no members, there is no such value. So [].max = nil
rather than zero is correct. If you add all the members in the
empty list together, on the other hand, you do indeed get zero, so
[].sum = 0 is correct.&lt;/p&gt;
&lt;p&gt;Abstractly, it's more important for an operation to be
consistent with itself than with other operations. So this kind of
foldy set operation should be distributive if possible: for two
sets S and T, (S + T).op should if possible be (S.op, T.op).op. If
you put [].max = 0, this will fail for e.g. S = [] and T = [ -1
].&lt;/p&gt;
&lt;p&gt;A symmetric argument to that for max applies for min.&lt;/p&gt;
&lt;p&gt;I wouldn't mind a change to make the average of an empty set to
return zero, since that does fulfil the identity above. But given
the natural implementation of S.avg is S.sum / S.size, and this is
undefined for [].sum / [].size = 0 / 0, I can see why the existing
behavior exists.&lt;/p&gt;
&lt;p&gt;(Ruby and ActiveSupport don't define Array#avg or similar. Maybe
the lack of a clear winner for this edge case is why?)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-05T19:56:52+00:00</created-at>
      <creator-id type="integer">11364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1516</number>
      <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
      <updated-at type="datetime">2008-12-05T19:56:53+00:00</updated-at>
      <user-id type="integer">39930</user-id>
      <version type="integer">7</version>
      <user-name>Anthony Bailey</user-name>
      <creator-name>Shane Mingins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@Shane, I'm okay with average returning zero. It's mainly min/max that I have a problem with. I think Anthony explained it well. Zero plays no part in the min/max calculation. But you could argue it plays a part in &quot;sum&quot; because it could be the initial value.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Shane, I'm okay with average returning zero. It's mainly
min/max that I have a problem with. I think Anthony explained it
well. Zero plays no part in the min/max calculation. But you could
argue it plays a part in &quot;sum&quot; because it could be the initial
value.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-05T22:17:00+00:00</created-at>
      <creator-id type="integer">11364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1516</number>
      <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
      <updated-at type="datetime">2008-12-05T22:17:01+00:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">8</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>Shane Mingins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Agree with all the negative concerns here.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Agree with all the negative concerns here.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-06T00:12:07+00:00</created-at>
      <creator-id type="integer">11364</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1516</number>
      <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch tested</tag>
      <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
      <updated-at type="datetime">2008-12-06T00:12:10+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">9</version>
      <user-name>Pratik</user-name>
      <creator-name>Shane Mingins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree, from a maths/accounting perspective, min, max, and avg on no rows should return nil.  Sum is defined on the empty set because there is an additive identity (0).  There is no constant identity for min, max, and avg operations.

-1, sorry :|.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree, from a maths/accounting perspective, min, max, and avg
on no rows should return nil. Sum is defined on the empty set
because there is an additive identity (0). There is no constant
identity for min, max, and avg operations.&lt;/p&gt;
&lt;p&gt;-1, sorry :|.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-10T02:25:17+00:00</created-at>
      <creator-id type="integer">11364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1516</number>
      <permalink>average-maximum-minimum-on-associations-should-return-0-when-no-rows-are-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch tested</tag>
      <title>Average, Maximum, Minimum on associations should return 0 when no rows are returned</title>
      <updated-at type="datetime">2009-02-10T02:25:20+00:00</updated-at>
      <user-id type="integer">10460</user-id>
      <version type="integer">10</version>
      <user-name>Will Bryant</user-name>
      <creator-name>Shane Mingins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1516</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>807554b05c44b874c9f879ed7cd099f99db49b55</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-12-05T00:53:16+00:00</created-at>
      <filename>fix_avg_max_min_on_associations.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">68316</id>
      <size type="integer">2326</size>
      <uploader-id type="integer">11364</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/68316/fix_avg_max_min_on_associations.diff</url>
    </attachment>
  </attachments>
</ticket>
