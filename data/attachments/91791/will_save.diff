diff --git a/activerecord/lib/active_record/associations/association_proxy.rb b/activerecord/lib/active_record/associations/association_proxy.rb
index 8793ad8..747a833 100644
--- a/activerecord/lib/active_record/associations/association_proxy.rb
+++ b/activerecord/lib/active_record/associations/association_proxy.rb
@@ -127,6 +127,15 @@ module ActiveRecord
       def target
         @target
       end
+      
+      def target_to_save
+        @target_to_save || @target
+      end
+      
+      def will_save(record)
+        @target_to_save ||= @target || []
+        @target_to_save << record
+      end
 
       # Sets the target of this proxy to <tt>\target</tt>, and the \loaded flag to +true+.
       def target=(target)
diff --git a/activerecord/lib/active_record/autosave_association.rb b/activerecord/lib/active_record/autosave_association.rb
index 6e09b13..799cef7 100644
--- a/activerecord/lib/active_record/autosave_association.rb
+++ b/activerecord/lib/active_record/autosave_association.rb
@@ -217,7 +217,7 @@ module ActiveRecord
       elsif association.loaded?
         autosave ? association : association.select { |record| record.new_record? }
       else
-        autosave ? association.target : association.target.select { |record| record.new_record? }
+        autosave ? association.target_to_save : association.target_to_save.select { |record| record.new_record? }
       end
     end
 
diff --git a/activerecord/test/cases/autosave_association_test.rb b/activerecord/test/cases/autosave_association_test.rb
index 6ced84e..5882b7c 100644
--- a/activerecord/test/cases/autosave_association_test.rb
+++ b/activerecord/test/cases/autosave_association_test.rb
@@ -712,6 +712,14 @@ module AutosaveAssociationOnACollectionAssociationTests
     @pirate.save
     assert_equal new_names, @pirate.reload.send(@association_name).map(&:name)
   end
+  
+  def test_should_automatically_save_the_associated_model_loaded_with_find
+    child = @pirate.send(@association_name).find(:first)
+    assert_no_queries { @pirate.send(@association_name).will_save(child) }
+    child.name = 'Changed'
+    @pirate.save
+    assert_equal 'Changed', @pirate.reload.send(@association_name).first.name
+  end
 
   def test_should_automatically_save_bang_the_associated_models
     new_names = ['Grace OMalley', 'Privateers Greed']
