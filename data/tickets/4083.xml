<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-03-02T03:38:18+00:00</created-at>
  <creator-id type="integer">18469</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4083</number>
  <permalink>patch-named-scopes-should-be-allowed-to-overwrite-an-existing-method</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord named_scope scope</tag>
  <title>[Patch] Named Scopes should be allowed to overwrite an existing method</title>
  <updated-at type="datetime">2010-03-28T21:53:44+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">2</version>
  <user-name>Repository</user-name>
  <creator-name>MatthewRudy</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4083</url>
  <priority-name nil="true"></priority-name>
  <original-body>http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b1b1e7d95a31cdea681918

I wrote a little blog post on this http://bit.ly/9LgFh0
but it's motivated by the following case

@@@ ruby
class MyClass &lt; ActiveRecord::Base
  scope :open, :conditions =&gt; &quot;start_date &lt;= CURRENT_DATE&quot;
end
@@@

I think this is a common pattern.
the word &quot;open&quot; makes sense in some cases,
more so than &quot;active&quot;.

But in Rails 3 this doesn't work

@@@
/Users/matthew/.bundle/ruby/1.8/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/named_scope.rb:104:in `scope&#8217;: Cannot define scope :open because AbcDef.open method already exists. (ArgumentError)
@@@

This is because

@@@ ruby
&gt;&gt; MyClass.private_methods.include?(&quot;open&quot;)
=&gt; true
&gt;&gt; &quot;some string&quot;.private_methods.include?(&quot;open&quot;)
=&gt; true
@@@

Everything has a private method called &quot;open&quot;.

So what's the right solution.
I claim that I should be allowed to define a method of any particular name,
if I break something by overwriting an existing method,
then that's a mistake of mine
and I hope my testing will pick it up.

I claim a logger.warn is the correct functionality.

My branch to fix this: http://github.com/matthewrudy/rude-rails/tree/make_named_scopes_warn_rather_than_raise
My commit to fix this: http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b1b1e7d95a31cdea681918

Also attached as a patch</original-body>
  <latest-body>http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b1b1e7d95a31cdea681918

I wrote a little blog post on this http://bit.ly/9LgFh0
but it's motivated by the following case

@@@ ruby
class MyClass &lt; ActiveRecord::Base
  scope :open, :conditions =&gt; &quot;start_date &lt;= CURRENT_DATE&quot;
end
@@@

I think this is a common pattern.
the word &quot;open&quot; makes sense in some cases,
more so than &quot;active&quot;.

But in Rails 3 this doesn't work

@@@
/Users/matthew/.bundle/ruby/1.8/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/named_scope.rb:104:in `scope&#8217;: Cannot define scope :open because AbcDef.open method already exists. (ArgumentError)
@@@

This is because

@@@ ruby
&gt;&gt; MyClass.private_methods.include?(&quot;open&quot;)
=&gt; true
&gt;&gt; &quot;some string&quot;.private_methods.include?(&quot;open&quot;)
=&gt; true
@@@

Everything has a private method called &quot;open&quot;.

So what's the right solution.
I claim that I should be allowed to define a method of any particular name,
if I break something by overwriting an existing method,
then that's a mistake of mine
and I hope my testing will pick it up.

I claim a logger.warn is the correct functionality.

My branch to fix this: http://github.com/matthewrudy/rude-rails/tree/make_named_scopes_warn_rather_than_raise
My commit to fix this: http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b1b1e7d95a31cdea681918

Also attached as a patch</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b1b1e7d95a31cdea681918&quot;&gt;
http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote a little blog post on this &lt;a href=
&quot;http://bit.ly/9LgFh0&quot;&gt;http://bit.ly/9LgFh0&lt;/a&gt;&lt;br&gt;
but it's motivated by the following case&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class MyClass &amp;lt; ActiveRecord::Base
  scope :open, :conditions =&amp;gt; &quot;start_date &amp;lt;= CURRENT_DATE&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think this is a common pattern.&lt;br&gt;
the word &quot;open&quot; makes sense in some cases,&lt;br&gt;
more so than &quot;active&quot;.&lt;/p&gt;
&lt;p&gt;But in Rails 3 this doesn't work&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/Users/matthew/.bundle/ruby/1.8/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/named_scope.rb:104:in `scope&amp;rsquo;: Cannot define scope :open because AbcDef.open method already exists. (ArgumentError)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is because&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; MyClass.private_methods.include?(&quot;open&quot;)
=&amp;gt; true
&amp;gt;&amp;gt; &quot;some string&quot;.private_methods.include?(&quot;open&quot;)
=&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Everything has a private method called &quot;open&quot;.&lt;/p&gt;
&lt;p&gt;So what's the right solution.&lt;br&gt;
I claim that I should be allowed to define a method of any
particular name,&lt;br&gt;
if I break something by overwriting an existing method,&lt;br&gt;
then that's a mistake of mine&lt;br&gt;
and I hope my testing will pick it up.&lt;/p&gt;
&lt;p&gt;I claim a logger.warn is the correct functionality.&lt;/p&gt;
&lt;p&gt;My branch to fix this: &lt;a href=
&quot;http://github.com/matthewrudy/rude-rails/tree/make_named_scopes_warn_rather_than_raise&quot;&gt;
http://github.com/matthewrudy/rude-rails/tree/make_named_scopes_war...&lt;/a&gt;&lt;br&gt;
My commit to fix this: &lt;a href=
&quot;http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b1b1e7d95a31cdea681918&quot;&gt;
http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also attached as a patch&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b1b1e7d95a31cdea681918

I wrote a little blog post on this http://bit.ly/9LgFh0
but it's motivated by the following case

@@@ ruby
class MyClass &lt; ActiveRecord::Base
  scope :open, :conditions =&gt; &quot;start_date &lt;= CURRENT_DATE&quot;
end
@@@

I think this is a common pattern.
the word &quot;open&quot; makes sense in some cases,
more so than &quot;active&quot;.

But in Rails 3 this doesn't work

@@@
/Users/matthew/.bundle/ruby/1.8/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/named_scope.rb:104:in `scope&#8217;: Cannot define scope :open because AbcDef.open method already exists. (ArgumentError)
@@@

This is because

@@@ ruby
&gt;&gt; MyClass.private_methods.include?(&quot;open&quot;)
=&gt; true
&gt;&gt; &quot;some string&quot;.private_methods.include?(&quot;open&quot;)
=&gt; true
@@@

Everything has a private method called &quot;open&quot;.

So what's the right solution.
I claim that I should be allowed to define a method of any particular name,
if I break something by overwriting an existing method,
then that's a mistake of mine
and I hope my testing will pick it up.

I claim a logger.warn is the correct functionality.

My branch to fix this: http://github.com/matthewrudy/rude-rails/tree/make_named_scopes_warn_rather_than_raise
My commit to fix this: http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b1b1e7d95a31cdea681918

Also attached as a patch</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b1b1e7d95a31cdea681918&quot;&gt;
http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wrote a little blog post on this &lt;a href=
&quot;http://bit.ly/9LgFh0&quot;&gt;http://bit.ly/9LgFh0&lt;/a&gt;&lt;br&gt;
but it's motivated by the following case&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class MyClass &amp;lt; ActiveRecord::Base
  scope :open, :conditions =&amp;gt; &quot;start_date &amp;lt;= CURRENT_DATE&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think this is a common pattern.&lt;br&gt;
the word &quot;open&quot; makes sense in some cases,&lt;br&gt;
more so than &quot;active&quot;.&lt;/p&gt;
&lt;p&gt;But in Rails 3 this doesn't work&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/Users/matthew/.bundle/ruby/1.8/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activerecord/lib/active_record/named_scope.rb:104:in `scope&amp;rsquo;: Cannot define scope :open because AbcDef.open method already exists. (ArgumentError)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is because&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; MyClass.private_methods.include?(&quot;open&quot;)
=&amp;gt; true
&amp;gt;&amp;gt; &quot;some string&quot;.private_methods.include?(&quot;open&quot;)
=&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Everything has a private method called &quot;open&quot;.&lt;/p&gt;
&lt;p&gt;So what's the right solution.&lt;br&gt;
I claim that I should be allowed to define a method of any
particular name,&lt;br&gt;
if I break something by overwriting an existing method,&lt;br&gt;
then that's a mistake of mine&lt;br&gt;
and I hope my testing will pick it up.&lt;/p&gt;
&lt;p&gt;I claim a logger.warn is the correct functionality.&lt;/p&gt;
&lt;p&gt;My branch to fix this: &lt;a href=
&quot;http://github.com/matthewrudy/rude-rails/tree/make_named_scopes_warn_rather_than_raise&quot;&gt;
http://github.com/matthewrudy/rude-rails/tree/make_named_scopes_war...&lt;/a&gt;&lt;br&gt;
My commit to fix this: &lt;a href=
&quot;http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b1b1e7d95a31cdea681918&quot;&gt;
http://github.com/matthewrudy/rude-rails/commit/3a29b8fc473a15c321b...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also attached as a patch&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-02T03:38:18+00:00</created-at>
      <creator-id type="integer">18469</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4083</number>
      <permalink>patch-named-scopes-should-be-allowed-to-overwrite-an-existing-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord named_scope scope</tag>
      <title>[Patch] Named Scopes should be allowed to overwrite an existing method</title>
      <updated-at type="datetime">2010-03-02T03:38:33+00:00</updated-at>
      <user-id type="integer">18469</user-id>
      <version type="integer">1</version>
      <user-name>MatthewRudy</user-name>
      <creator-name>MatthewRudy</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4083</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [b0967cc5cf5ce08e7fb0574692e3bb785e79973a]) defining a named_scope which overwrites an existing method is now allowed we just log a warning.

This was motivated by the fact that :open is defined on all classes
as such the named_scope &quot;open&quot; can never be used, without hacking
ActiveRecord with an &quot;undef_method&quot; [#4083 state:resolved]

Signed-off-by: wycats &lt;wycats@gmail.com&gt;
http://github.com/rails/rails/commit/b0967cc5cf5ce08e7fb0574692e3bb785e79973a</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/b0967cc5cf5ce08e7fb0574692e3bb785e79973a&quot;
title=
&quot;Changeset [b0967cc5cf5ce08e7fb0574692e3bb785e79973a]&quot;&gt;[b0967cc5cf5ce08e7fb0574692e3bb785e79973a]&lt;/a&gt;)
defining a named_scope which overwrites an existing method is now
allowed we just log a warning.&lt;/p&gt;
&lt;p&gt;This was motivated by the fact that :open is defined on all
classes&lt;br&gt;
as such the named_scope &quot;open&quot; can never be used, without
hacking&lt;br&gt;
ActiveRecord with an &quot;undef_method&quot; [&lt;a href=
&quot;/projects/8994/tickets/4083&quot; title=&quot;Ticket #4083&quot;&gt;#4083&lt;/a&gt;
state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: wycats &lt;a href=
&quot;mailto:wycats@gmail.com&quot;&gt;wycats@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/b0967cc5cf5ce08e7fb0574692e3bb785e79973a&quot;&gt;
http://github.com/rails/rails/commit/b0967cc5cf5ce08e7fb0574692e3bb...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-28T21:53:42+01:00</created-at>
      <creator-id type="integer">18469</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4083</number>
      <permalink>patch-named-scopes-should-be-allowed-to-overwrite-an-existing-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope scope</tag>
      <title>[Patch] Named Scopes should be allowed to overwrite an existing method</title>
      <updated-at type="datetime">2010-03-28T21:53:44+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">2</version>
      <user-name>Repository</user-name>
      <creator-name>MatthewRudy</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4083</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>7437ccb9488f8562d2f6747a60fa6816786ee0b8</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-03-02T03:38:18+00:00</created-at>
      <filename>make_named_scopes_warn_rather_than_raise.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">428303</id>
      <size type="integer">2254</size>
      <uploader-id type="integer">18469</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/428303/make_named_scopes_warn_rather_than_raise.patch</url>
    </attachment>
  </attachments>
</ticket>
