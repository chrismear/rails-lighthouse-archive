<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-16T21:47:43+00:00</created-at>
  <creator-id type="integer">25962</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">1994</number>
  <permalink>associationsfind-should-use-scopedconstruct_scopefind-except-with-custom-finder_sql</permalink>
  <priority type="integer">1241</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord associations find finder finder_sql scope</tag>
  <title>associations#find should use scoped(construct_scope).find except with custom finder_sql</title>
  <updated-at type="datetime">2011-02-02T17:41:05+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">8</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>David Stevenson</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1994</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>There's a lot of logic duplication in associations.

When a `find(options)` is triggered on an association, the following things currently happen explicitly in the find method:

* If it's got `:finder_sql`, a separate branch of code is taken.
* If not (99% of the time):
  * The generated association finder_sql is merged with `options[:conditions]`
  * The reflection's `:order` is merged with `options[:order]
  * Other `options` are reverse_merged on top of the reflection's options
  * `@reflection.klass.find(*args)` is finally called

Association already have the `construct_scope` method, which can construct a complete finder scope representing that association.  Using `@reflection.klass.scoped(construct_scope[:find])`, all of that redundant merge logic can be finally deleted out of the `#find` method.</original-body>
  <latest-body>There's a lot of logic duplication in associations.

When a `find(options)` is triggered on an association, the following things currently happen explicitly in the find method:

* If it's got `:finder_sql`, a separate branch of code is taken.
* If not (99% of the time):
  * The generated association finder_sql is merged with `options[:conditions]`
  * The reflection's `:order` is merged with `options[:order]
  * Other `options` are reverse_merged on top of the reflection's options
  * `@reflection.klass.find(*args)` is finally called

Association already have the `construct_scope` method, which can construct a complete finder scope representing that association.  Using `@reflection.klass.scoped(construct_scope[:find])`, all of that redundant merge logic can be finally deleted out of the `#find` method.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;There's a lot of logic duplication in associations.&lt;/p&gt;
&lt;p&gt;When a &lt;code&gt;find(options)&lt;/code&gt; is triggered on an
association, the following things currently happen explicitly in
the find method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it's got &lt;code&gt;:finder_sql&lt;/code&gt;, a separate branch of code
is taken.&lt;/li&gt;
&lt;li&gt;If not (99% of the time):
&lt;ul&gt;
&lt;li&gt;The generated association finder_sql is merged with
&lt;code&gt;options[:conditions]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The reflection's &lt;code&gt;:order&lt;/code&gt; is merged with
&lt;code&gt;options[:order]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Other &lt;code&gt;options&lt;/code&gt; are reverse_merged on top of the
reflection's options&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@reflection.klass.find(*args)&lt;/code&gt; is finally
called&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Association already have the &lt;code&gt;construct_scope&lt;/code&gt;
method, which can construct a complete finder scope representing
that association. Using
&lt;code&gt;@reflection.klass.scoped(construct_scope[:find])&lt;/code&gt;, all
of that redundant merge logic can be finally deleted out of the
&lt;code&gt;#find&lt;/code&gt; method.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There's a lot of logic duplication in associations.

When a `find(options)` is triggered on an association, the following things currently happen explicitly in the find method:

* If it's got `:finder_sql`, a separate branch of code is taken.
* If not (99% of the time):
  * The generated association finder_sql is merged with `options[:conditions]`
  * The reflection's `:order` is merged with `options[:order]
  * Other `options` are reverse_merged on top of the reflection's options
  * `@reflection.klass.find(*args)` is finally called

This sort of merging of conditions, order, and more is already accomplished by ActiveRecord scope merging.  Associations are really just named_scopes that change the main table anyway.

Association already have the `construct_scope` method, which can construct a complete finder scope representing that association.  Using `@reflection.klass.scoped(construct_scope[:find])`, all of that redundant merge logic can be finally deleted out of the `#find` method.</body>
      <body-html>&lt;div&gt;&lt;p&gt;There's a lot of logic duplication in associations.&lt;/p&gt;
&lt;p&gt;When a &lt;code&gt;find(options)&lt;/code&gt; is triggered on an
association, the following things currently happen explicitly in
the find method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it's got &lt;code&gt;:finder_sql&lt;/code&gt;, a separate branch of code
is taken.&lt;/li&gt;
&lt;li&gt;If not (99% of the time):
&lt;ul&gt;
&lt;li&gt;The generated association finder_sql is merged with
&lt;code&gt;options[:conditions]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The reflection's &lt;code&gt;:order&lt;/code&gt; is merged with
&lt;code&gt;options[:order]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Other &lt;code&gt;options&lt;/code&gt; are reverse_merged on top of the
reflection's options&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@reflection.klass.find(*args)&lt;/code&gt; is finally
called&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This sort of merging of conditions, order, and more is already
accomplished by ActiveRecord scope merging. Associations are really
just named_scopes that change the main table anyway.&lt;/p&gt;
&lt;p&gt;Association already have the &lt;code&gt;construct_scope&lt;/code&gt;
method, which can construct a complete finder scope representing
that association. Using
&lt;code&gt;@reflection.klass.scoped(construct_scope[:find])&lt;/code&gt;, all
of that redundant merge logic can be finally deleted out of the
&lt;code&gt;#find&lt;/code&gt; method.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-16T21:47:43+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1994</number>
      <permalink>associationsfind-should-use-scopedconstruct_scopefind-except-with-custom-finder_sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations find finder finder_sql scope</tag>
      <title>associations#find should use scoped(construct_scope).find except with custom finder_sql</title>
      <updated-at type="datetime">2009-02-16T21:49:27+00:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">1</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1994</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-17T09:55:37+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1994</number>
      <permalink>associationsfind-should-use-scopedconstruct_scopefind-except-with-custom-finder_sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations find finder finder_sql scope</tag>
      <title>associations#find should use scoped(construct_scope).find except with custom finder_sql</title>
      <updated-at type="datetime">2009-02-17T09:55:39+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1994</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Pratik - Do you still want me to contribute a patch if possible?  I had this partly done, but not all tests are passing yet.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Pratik - Do you still want me to contribute a patch if possible?
I had this partly done, but not all tests are passing yet.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-17T16:05:51+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1994</number>
      <permalink>associationsfind-should-use-scopedconstruct_scopefind-except-with-custom-finder_sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations find finder finder_sql scope</tag>
      <title>associations#find should use scoped(construct_scope).find except with custom finder_sql</title>
      <updated-at type="datetime">2009-02-17T16:06:46+00:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">3</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1994</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey David,

If you have a patch lying around, please do upload. I need to take a closer look at this though.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey David,&lt;/p&gt;
&lt;p&gt;If you have a patch lying around, please do upload. I need to
take a closer look at this though.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-17T16:42:59+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1994</number>
      <permalink>associationsfind-should-use-scopedconstruct_scopefind-except-with-custom-finder_sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations find finder finder_sql scope</tag>
      <title>associations#find should use scoped(construct_scope).find except with custom finder_sql</title>
      <updated-at type="datetime">2009-02-17T16:54:09+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1994</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey David,

Switching out the implementation of associations to be driven off named_scopes is DEFINITELY something we want to look at in the 3.0 timeframe.

At a high level it seems like it should be possible, and be a really nice simplification.  But only time will tell :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey David,&lt;/p&gt;
&lt;p&gt;Switching out the implementation of associations to be driven
off named_scopes is DEFINITELY something we want to look at in the
3.0 timeframe.&lt;/p&gt;
&lt;p&gt;At a high level it seems like it should be possible, and be a
really nice simplification. But only time will tell :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-02T05:14:19+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1994</number>
      <permalink>associationsfind-should-use-scopedconstruct_scopefind-except-with-custom-finder_sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations find finder finder_sql scope</tag>
      <title>associations#find should use scoped(construct_scope).find except with custom finder_sql</title>
      <updated-at type="datetime">2009-03-02T05:14:24+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">5</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1994</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:39+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1994</number>
      <permalink>associationsfind-should-use-scopedconstruct_scopefind-except-with-custom-finder_sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations find finder finder_sql scope</tag>
      <title>associations#find should use scoped(construct_scope).find except with custom finder_sql</title>
      <updated-at type="datetime">2010-05-04T18:48:39+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">6</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1994</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:41:43+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1994</number>
      <permalink>associationsfind-should-use-scopedconstruct_scopefind-except-with-custom-finder_sql</permalink>
      <priority type="integer">1241</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations find finder finder_sql scope</tag>
      <title>associations#find should use scoped(construct_scope).find except with custom finder_sql</title>
      <updated-at type="datetime">2011-02-02T17:40:56+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1994</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:41:44+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1994</number>
      <permalink>associationsfind-should-use-scopedconstruct_scopefind-except-with-custom-finder_sql</permalink>
      <priority type="integer">1241</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord associations find finder finder_sql scope</tag>
      <title>associations#find should use scoped(construct_scope).find except with custom finder_sql</title>
      <updated-at type="datetime">2011-02-02T17:41:05+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">8</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1994</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
