commit 3e79b5f92602051b47f9d20cedf51dd96ff93b82
Author: Giorgio Gonnella <ggonnell@yahoo.it>
Date:   Mon Mar 2 17:44:41 2009 +0100

    Solves preloading more than 1000 associated records in Oracle
    
    Rails often uses "in" sql clauses when preloading associations. Oracle has 
    a 1000 term restriction on such clauses, so that you cannot say something 
    like "WHERE parent_id IN (1,2,3,4 ... 1001)".
    
    [#1533 state:resolved] 

diff --git a/vendor/rails/activerecord/lib/active_record/association_preload.rb b/vendor/rails/activerecord/lib/active_record/association_preload.rb
index 69300e5..4ecad6f 100644
--- a/vendor/rails/activerecord/lib/active_record/association_preload.rb
+++ b/vendor/rails/activerecord/lib/active_record/association_preload.rb
@@ -322,8 +322,9 @@ module ActiveRecord
             end
           end
           conditions = "#{table_name}.#{connection.quote_column_name(primary_key)} #{in_or_equals_for_ids(ids)}"
+          conditions = ([conditions] * (ids.size.to_f/1000).ceil).join(" OR ")
           conditions << append_conditions(reflection, preload_options)
-          associated_records = klass.find(:all, :conditions => [conditions, ids],
+          associated_records = klass.find(:all, :conditions => [conditions, *ids.in_groups_of(1000, false)],
                                           :include => options[:include],
                                           :select => options[:select],
                                           :joins => options[:joins],
@@ -335,20 +336,21 @@ module ActiveRecord
       def find_associated_records(ids, reflection, preload_options)
         options = reflection.options
         table_name = reflection.klass.quoted_table_name
-
+        
         if interface = reflection.options[:as]
           conditions = "#{reflection.klass.quoted_table_name}.#{connection.quote_column_name "#{interface}_id"} #{in_or_equals_for_ids(ids)} and #{reflection.klass.quoted_table_name}.#{connection.quote_column_name "#{interface}_type"} = '#{self.base_class.sti_name}'"
         else
           foreign_key = reflection.primary_key_name
           conditions = "#{reflection.klass.quoted_table_name}.#{foreign_key} #{in_or_equals_for_ids(ids)}"
         end
-
+        
+        conditions = ([conditions] * (ids.size.to_f/1000).ceil).join(" OR ")
         conditions << append_conditions(reflection, preload_options)
-
+        
         reflection.klass.find(:all,
                               :select => (preload_options[:select] || options[:select] || "#{table_name}.*"),
                               :include => preload_options[:include] || options[:include],
-                              :conditions => [conditions, ids],
+                              :conditions => [conditions, *ids.in_groups_of(1000, false)],
                               :joins => options[:joins],
                               :group => preload_options[:group] || options[:group],
                               :order => preload_options[:order] || options[:order])
