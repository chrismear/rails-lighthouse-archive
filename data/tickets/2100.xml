<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-28T15:18:40+00:00</created-at>
  <creator-id type="integer">21335</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2100</number>
  <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
  <priority type="integer">1266</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>associations callbacks patch</tag>
  <title>Change behaviour of association's after_add callback</title>
  <updated-at type="datetime">2011-02-02T20:06:50+00:00</updated-at>
  <user-id type="integer">34867</user-id>
  <version type="integer">19</version>
  <user-name>Michael Kintzer</user-name>
  <creator-name>Kenneth Kalmer</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The current behavior of ActiveRecord's association callback &quot;after_add&quot; is to be called irrespective of the association getting persisted or not.

As discussed with Eloy on the core list (http://groups.google.com/group/rubyonrails-core/browse_thread/thread/6867d0333fb8d07b) I set out to change the behavior so that after_add only gets called when the association is persisted to the database.

The associated path solves the issue, with a lot of extra (possibly redundant) tests to make sure the hole stays plugged.</original-body>
  <latest-body>The current behavior of ActiveRecord's association callback &quot;after_add&quot; is to be called irrespective of the association getting persisted or not.

As discussed with Eloy on the core list (http://groups.google.com/group/rubyonrails-core/browse_thread/thread/6867d0333fb8d07b) I set out to change the behavior so that after_add only gets called when the association is persisted to the database.

The associated path solves the issue, with a lot of extra (possibly redundant) tests to make sure the hole stays plugged.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The current behavior of ActiveRecord's association callback
&quot;after_add&quot; is to be called irrespective of the association getting
persisted or not.&lt;/p&gt;
&lt;p&gt;As discussed with Eloy on the core list (&lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/6867d0333fb8d07b)&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;
I set out to change the behavior so that after_add only gets called
when the association is persisted to the database.&lt;/p&gt;
&lt;p&gt;The associated path solves the issue, with a lot of extra
(possibly redundant) tests to make sure the hole stays plugged.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The current behavior of ActiveRecord's association callback &quot;after_add&quot; is to be called irrespective of the association getting persisted or not.

As discussed with Eloy on the core list (http://groups.google.com/group/rubyonrails-core/browse_thread/thread/6867d0333fb8d07b) I set out to change the behavior so that after_add only gets called when the association is persisted to the database.

The associated path solves the issue, with a lot of extra (possibly redundant) tests to make sure the hole stays plugged.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The current behavior of ActiveRecord's association callback
&quot;after_add&quot; is to be called irrespective of the association getting
persisted or not.&lt;/p&gt;
&lt;p&gt;As discussed with Eloy on the core list (&lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/6867d0333fb8d07b)&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;
I set out to change the behavior so that after_add only gets called
when the association is persisted to the database.&lt;/p&gt;
&lt;p&gt;The associated path solves the issue, with a lot of extra
(possibly redundant) tests to make sure the hole stays plugged.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-28T15:18:40+00:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>[PATCH] Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-02-28T15:18:44+00:00</updated-at>
      <user-id type="integer">21335</user-id>
      <version type="integer">1</version>
      <user-name>Kenneth Kalmer</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Argh, one failing test remains. Will add new patch in a bit.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Argh, one failing test remains. Will add new patch in a bit.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-28T15:21:38+00:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>[PATCH] Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-02-28T15:21:43+00:00</updated-at>
      <user-id type="integer">21335</user-id>
      <version type="integer">2</version>
      <user-name>Kenneth Kalmer</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Fixes the broken has_many :through test cases with association callbacks.

This did however bring up another issue: (ActiveRecord tests)

@@@ ruby
ted = post.people_with_callbacks.build(:first_name =&gt; &quot;Ted&quot;)
assert_equal [
  [:added, :after, &quot;Lary&quot;],
  [:added, :before, &quot;Ted&quot;]
], log.last(2)
    
ted.save
assert_equal [
  [:added, :before, &quot;Ted&quot;],
  [:added, :after, &quot;Ted&quot;]
], log.last(2)
# WARNING: This is flawed!?
assert post.people_with_callbacks.include?( ted )
@@@

All but the last assertion pass, which is confusing. From the the second assertion we would assume a join model instance was saved because the callback was called, but looking closer it is in fact not the case.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Fixes the broken has_many :through test cases with association
callbacks.&lt;/p&gt;
&lt;p&gt;This did however bring up another issue: (ActiveRecord
tests)&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
ted = post.people_with_callbacks.build(:first_name =&amp;gt; &amp;quot;Ted&amp;quot;)
assert_equal [
  [:added, :after, &amp;quot;Lary&amp;quot;],
  [:added, :before, &amp;quot;Ted&amp;quot;]
], log.last(2)
    
ted.save
assert_equal [
  [:added, :before, &amp;quot;Ted&amp;quot;],
  [:added, :after, &amp;quot;Ted&amp;quot;]
], log.last(2)
# WARNING: This is flawed!?
assert post.people_with_callbacks.include?( ted )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All but the last assertion pass, which is confusing. From the
the second assertion we would assume a join model instance was
saved because the callback was called, but looking closer it is in
fact not the case.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-28T17:01:01+00:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>[PATCH] Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-02-28T17:01:03+00:00</updated-at>
      <user-id type="integer">21335</user-id>
      <version type="integer">3</version>
      <user-name>Kenneth Kalmer</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-01T12:47:25+00:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 8406
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>[PATCH] Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-03-01T12:47:31+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">4</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-09T13:03:07+00:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- 
:title: &quot;[PATCH] Change behaviour of association's after_add callback&quot;
:assigned_user: 141
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-03-09T13:03:10+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">5</version>
      <user-name>Pratik</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I'm not sure whether or not his patch addresses this concern, but I'd rather bring it up here rather than start a new ticket:

It is highly unexpected that the following triggers an association callback:

@@@ ruby
class Blog
  has_many :posts, :after_add  =&gt; :do_something

  def do_something(post)
    post.profit!
  end
end
@@@

@@@ ruby
blog.posts.create(:title =&gt; &quot;I'm an in-valid? post&quot;)
@@@

This example is a bit contrived, but when creating an invalid child object through an association which carries an add callback, the callback is fired regardless of whether or not the child is valid (and therefor persisted).

The current implementation of these call backs requires some variation of the following to work as expected:

@@@ ruby
class Blog
  def do_something(post)
    post.profit! unless post.new_record?
  end
end
@@@

Was this intended?  And if so, what's the point of being notified when an invalid object was attempted to be included in an associated collection?  Obviously it's not being persisted (which is to the point of this ticket), so ... ???</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not sure whether or not his patch addresses this concern,
but I'd rather bring it up here rather than start a new ticket:&lt;/p&gt;
&lt;p&gt;It is highly unexpected that the following triggers an
association callback:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Blog
  has_many :posts, :after_add  =&amp;gt; :do_something

  def do_something(post)
    post.profit!
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;blog.posts.create(:title =&amp;gt; &quot;I'm an in-valid? post&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This example is a bit contrived, but when creating an invalid
child object through an association which carries an add callback,
the callback is fired regardless of whether or not the child is
valid (and therefor persisted).&lt;/p&gt;
&lt;p&gt;The current implementation of these call backs requires some
variation of the following to work as expected:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Blog
  def do_something(post)
    post.profit! unless post.new_record?
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Was this intended? And if so, what's the point of being notified
when an invalid object was attempted to be included in an
associated collection? Obviously it's not being persisted (which is
to the point of this ticket), so ... ???&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-14T19:32:19+01:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-05-14T19:32:20+01:00</updated-at>
      <user-id type="integer">18798</user-id>
      <version type="integer">6</version>
      <user-name>Nathaniel Bibler</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Invalid associated objects are still added to the association in memory.  So I suppose a case can be made the after_add should still be fired.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Invalid associated objects are still added to the association in
memory. So I suppose a case can be made the after_add should still
be fired.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-15T04:25:39+01:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-05-15T04:25:45+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">7</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I would agree that there _could_ be cases for wanting to execute a callback after **any** element is added to the association, regardless of whether or not it is actually valid or persisted.  Although, honestly, the only fair use I can think of for that functionality is basically logging bad attempts.

It would be terrible form to try to catch an object after it was submitted to the association, check for validity, then if invalid .. modify the object and try again.  I guess you could potentially do something crazy like .. if the object isn't really supposed to be in the original association, you could - by means of this callback - attempt to throw it into a different association.  But again, these are things you should never do in practice. ;)

I don't want to start an argument about it - because really, it's fairly insignificant - so I'll probably end the &quot;ranting&quot; with this post just saying:  My feeling is that if it's called `after_add` or `after_remove` it should be after the element is _actually added_.  If the object is invalid .. it certainly isn't _actually_ added to the association.  So, maybe it's just a disconnect in the current naming of the callback.  The current `after_add` functionality speaks more to what I would expect from a `before_add` callback, meaning I get the ability to manipulate the object, regardless of state; granted the current functionality doesn't then attempt to insert it afterward.

So, maybe the shortest distance is to just fill out the [current documentation](http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html) on the subject (see &quot;Association callbacks&quot;) in a more meaningful way.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I would agree that there &lt;em&gt;could&lt;/em&gt; be cases for wanting to
execute a callback after &lt;strong&gt;any&lt;/strong&gt; element is added to
the association, regardless of whether or not it is actually valid
or persisted. Although, honestly, the only fair use I can think of
for that functionality is basically logging bad attempts.&lt;/p&gt;
&lt;p&gt;It would be terrible form to try to catch an object after it was
submitted to the association, check for validity, then if invalid
.. modify the object and try again. I guess you could potentially
do something crazy like .. if the object isn't really supposed to
be in the original association, you could - by means of this
callback - attempt to throw it into a different association. But
again, these are things you should never do in practice. ;)&lt;/p&gt;
&lt;p&gt;I don't want to start an argument about it - because really,
it's fairly insignificant - so I'll probably end the &quot;ranting&quot; with
this post just saying: My feeling is that if it's called
&lt;code&gt;after_add&lt;/code&gt; or &lt;code&gt;after_remove&lt;/code&gt; it should be
after the element is &lt;em&gt;actually added&lt;/em&gt;. If the object is
invalid .. it certainly isn't &lt;em&gt;actually&lt;/em&gt; added to the
association. So, maybe it's just a disconnect in the current naming
of the callback. The current &lt;code&gt;after_add&lt;/code&gt; functionality
speaks more to what I would expect from a &lt;code&gt;before_add&lt;/code&gt;
callback, meaning I get the ability to manipulate the object,
regardless of state; granted the current functionality doesn't then
attempt to insert it afterward.&lt;/p&gt;
&lt;p&gt;So, maybe the shortest distance is to just fill out the &lt;a href=
&quot;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html&quot;&gt;
current documentation&lt;/a&gt; on the subject (see &quot;Association
callbacks&quot;) in a more meaningful way.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-15T16:07:57+01:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-05-15T16:07:59+01:00</updated-at>
      <user-id type="integer">18798</user-id>
      <version type="integer">8</version>
      <user-name>Nathaniel Bibler</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Take a shot at filling out the documentation a bit and we'll see what
the final result looks like.  If the documentation reads too much like
a justification for a bad decision, we can look at reversing that
decision :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Take a shot at filling out the documentation a bit and we'll see
what&lt;br&gt;
the final result looks like. If the documentation reads too much
like&lt;br&gt;
a justification for a bad decision, we can look at reversing
that&lt;br&gt;
decision :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-16T00:37:20+01:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-05-16T00:37:21+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">9</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-17T17:42:25+01:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 1366
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-05-17T17:42:29+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">10</version>
      <user-name>Pratik</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>As soon as I'm done with what I'm working on, I'll patch the documentation and post it here.

BTW: I apologize to Kenneth for hijacking this ticket. :-\  Certainly not my intention.  I'm discontinuing posting to this thread and have created ticket #2664.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As soon as I'm done with what I'm working on, I'll patch the
documentation and post it here.&lt;/p&gt;
&lt;p&gt;BTW: I apologize to Kenneth for hijacking this ticket. :-\
Certainly not my intention. I'm discontinuing posting to this
thread and have created ticket &lt;a href=
&quot;/projects/8994/tickets/2664&quot; title=&quot;Ticket #2664&quot;&gt;#2664&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-17T17:55:44+01:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-05-17T17:55:48+01:00</updated-at>
      <user-id type="integer">18798</user-id>
      <version type="integer">11</version>
      <user-name>Nathaniel Bibler</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-06T14:42:11+01:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: associations callbacks patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations bugmash callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-08-06T14:42:18+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">12</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I've unintentionally spawned another thread on the core list dealing with this issue: http://groups.google.com/group/rubyonrails-core/browse_thread/thread/2ab438f638074a83

+1 to either modifying the documentation to be more explicit, or changing the way association callbacks are performed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've unintentionally spawned another thread on the core list
dealing with this issue: &lt;a href=
&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/2ab438f638074a83&quot;&gt;
http://groups.google.com/group/rubyonrails-core/browse_thread/threa...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;+1 to either modifying the documentation to be more explicit, or
changing the way association callbacks are performed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-18T01:50:08+01:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations bugmash callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-08-18T01:50:12+01:00</updated-at>
      <user-id type="integer">16155</user-id>
      <version type="integer">13</version>
      <user-name>Brennan Dunn</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I don't think the behaviour of before_add/after_add/before_remove/after_remove should be changed, even though many times I was tempted to do the same.

Instead I propose 4 extra callbacks that do what this ticket requests: before_create/after_create/before_destroy/after_destroy. 

The *add/*remove callbacks are related to additions/removals from the collection in memory, the *create/*destroy callbacks are related to additions/removals from the collection in the datastore.

I filed a ticket earlier for this: see #3277</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think the behaviour of
before_add/after_add/before_remove/after_remove should be changed,
even though many times I was tempted to do the same.&lt;/p&gt;
&lt;p&gt;Instead I propose 4 extra callbacks that do what this ticket
requests:
before_create/after_create/before_destroy/after_destroy.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;add/&lt;/em&gt;remove callbacks are related to
additions/removals from the collection in memory, the
&lt;em&gt;create/&lt;/em&gt;destroy callbacks are related to additions/removals
from the collection in the datastore.&lt;/p&gt;
&lt;p&gt;I filed a ticket earlier for this: see &lt;a href=
&quot;/projects/8994/tickets/3277&quot; title=&quot;Ticket #3277&quot;&gt;#3277&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T01:43:43+01:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations bugmash callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2009-09-28T01:43:48+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">14</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/13645)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/13645&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-12T12:46:14+00:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: associations bugmash callbacks patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2010-02-12T12:46:14+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">15</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:40+01:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2010-05-04T18:48:40+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">16</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:54:13+00:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">1266</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2011-02-02T18:34:31+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">17</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:54:14+00:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">1266</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2011-02-02T18:34:47+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">18</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Reproduces with Rails 3.0.3.

+1 for modifying after_add to not get called if the added_record is not persisted, or for adding an alternative callbacks for 'after_persisted' or 'after_create' which would guarantee a valid, persisted record.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Reproduces with Rails 3.0.3.&lt;/p&gt;
&lt;p&gt;+1 for modifying after_add to not get called if the added_record
is not persisted, or for adding an alternative callbacks for
'after_persisted' or 'after_create' which would guarantee a valid,
persisted record.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T18:52:42+00:00</created-at>
      <creator-id type="integer">21335</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2100</number>
      <permalink>patch-change-behaviour-of-associations-after_add-callback</permalink>
      <priority type="integer">1266</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>associations callbacks patch</tag>
      <title>Change behaviour of association's after_add callback</title>
      <updated-at type="datetime">2011-02-02T20:06:50+00:00</updated-at>
      <user-id type="integer">34867</user-id>
      <version type="integer">19</version>
      <user-name>Michael Kintzer</user-name>
      <creator-name>Kenneth Kalmer</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2100</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>a79c2c5fb0809dc33f11bb154cb02d90ac99c29f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-28T15:18:40+00:00</created-at>
      <filename>updated_after_add_behavior.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">94287</id>
      <size type="integer">8293</size>
      <uploader-id type="integer">21335</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/94287/updated_after_add_behavior.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>8985fd2b822fd670f794e95378b5209ea55db16f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-28T17:01:01+00:00</created-at>
      <filename>updated_after_add_behavior-20090228185246.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">94296</id>
      <size type="integer">10479</size>
      <uploader-id type="integer">21335</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/94296/updated_after_add_behavior-20090228185246.patch</url>
    </attachment>
  </attachments>
</ticket>
