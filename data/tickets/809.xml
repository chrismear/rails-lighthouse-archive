<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-12T21:27:26+01:00</created-at>
  <creator-id type="integer">19734</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">809</number>
  <permalink>reloading-a-record-does-not-update-value-of-new_record</permalink>
  <priority type="integer">269</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord bug</tag>
  <title>reloading a record does not update value of new_record?</title>
  <updated-at type="datetime">2008-11-22T19:35:35+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Andrew Selder</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/809</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The history behind the bug here is a little strange.

I have a project that access a DB where all writes have to use stored procedures (don't blame me, I didn't make this decision).

The insert stored procedure takes the parameters and returns the primary key given to the new record. I then set the object's primary key manually and call reload.

This works fine (all the fields look as they should), but calling new_record? on the object still returns true.

Example

c = Company.new
c.name = 'foo'
c.write_new_record
c.new_record? =&gt; true

where 

def write_new_record
 return false unless valid?
 result = connection.select_all self.insert_query
 self.id = result[0]['idx']
 reload 
end

insert_query is the method which inserts the parameter values into the sql query.

Like I said, everything works fine except the new_record? flag.

I know this is a bizarre edge case, but I thought I'd file it anyway.</original-body>
  <latest-body>The history behind the bug here is a little strange.

I have a project that access a DB where all writes have to use stored procedures (don't blame me, I didn't make this decision).

The insert stored procedure takes the parameters and returns the primary key given to the new record. I then set the object's primary key manually and call reload.

This works fine (all the fields look as they should), but calling new_record? on the object still returns true.

Example

c = Company.new
c.name = 'foo'
c.write_new_record
c.new_record? =&gt; true

where 

def write_new_record
 return false unless valid?
 result = connection.select_all self.insert_query
 self.id = result[0]['idx']
 reload 
end

insert_query is the method which inserts the parameter values into the sql query.

Like I said, everything works fine except the new_record? flag.

I know this is a bizarre edge case, but I thought I'd file it anyway.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The history behind the bug here is a little strange.&lt;/p&gt;

&lt;p&gt;I have a project that access a DB where all writes have to use stored procedures (don't blame me, I didn't make this decision).&lt;/p&gt;

&lt;p&gt;The insert stored procedure takes the parameters and returns the primary key given to the new record. I then set the object's primary key manually and call reload.&lt;/p&gt;

&lt;p&gt;This works fine (all the fields look as they should), but calling new_record? on the object still returns true.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;c = Company.new
c.name = 'foo'
c.write_new_record
c.new_record? =&gt; true&lt;/p&gt;

&lt;p&gt;where&lt;/p&gt;

&lt;p&gt;def write_new_record
 return false unless valid?
 result = connection.select_all self.insert_query
 self.id = result[0]['idx']
 reload
end&lt;/p&gt;

&lt;p&gt;insert_query is the method which inserts the parameter values into the sql query.&lt;/p&gt;

&lt;p&gt;Like I said, everything works fine except the new_record? flag.&lt;/p&gt;

&lt;p&gt;I know this is a bizarre edge case, but I thought I'd file it anyway.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The history behind the bug here is a little strange.

I have a project that access a DB where all writes have to use stored procedures (don't blame me, I didn't make this decision).

The insert stored procedure takes the parameters and returns the primary key given to the new record. I then set the object's primary key manually and call reload.

This works fine (all the fields look as they should), but calling new_record? on the object still returns true.

Example

c = Company.new
c.name = 'foo'
c.write_new_record
c.new_record? =&gt; true

where 

def write_new_record
 return false unless valid?
 result = connection.select_all self.insert_query
 self.id = result[0]['idx']
 reload 
end

insert_query is the method which inserts the parameter values into the sql query.

Like I said, everything works fine except the new_record? flag.

I know this is a bizarre edge case, but I thought I'd file it anyway.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The history behind the bug here is a little strange.&lt;/p&gt;

&lt;p&gt;I have a project that access a DB where all writes have to use stored procedures (don't blame me, I didn't make this decision).&lt;/p&gt;

&lt;p&gt;The insert stored procedure takes the parameters and returns the primary key given to the new record. I then set the object's primary key manually and call reload.&lt;/p&gt;

&lt;p&gt;This works fine (all the fields look as they should), but calling new_record? on the object still returns true.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;c = Company.new
c.name = 'foo'
c.write_new_record
c.new_record? =&gt; true&lt;/p&gt;

&lt;p&gt;where&lt;/p&gt;

&lt;p&gt;def write_new_record
 return false unless valid?
 result = connection.select_all self.insert_query
 self.id = result[0]['idx']
 reload
end&lt;/p&gt;

&lt;p&gt;insert_query is the method which inserts the parameter values into the sql query.&lt;/p&gt;

&lt;p&gt;Like I said, everything works fine except the new_record? flag.&lt;/p&gt;

&lt;p&gt;I know this is a bizarre edge case, but I thought I'd file it anyway.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-12T21:27:26+01:00</created-at>
      <creator-id type="integer">19734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">809</number>
      <permalink>reloading-a-record-does-not-update-value-of-new_record</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug</tag>
      <title>reloading a record does not update value of new_record?</title>
      <updated-at type="datetime">2008-08-12T21:27:26+01:00</updated-at>
      <user-id type="integer">19734</user-id>
      <version type="integer">1</version>
      <user-name>Andrew Selder</user-name>
      <creator-name>Andrew Selder</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/809</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-22T19:35:33+00:00</created-at>
      <creator-id type="integer">19734</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">809</number>
      <permalink>reloading-a-record-does-not-update-value-of-new_record</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord bug</tag>
      <title>reloading a record does not update value of new_record?</title>
      <updated-at type="datetime">2008-11-22T19:35:35+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Andrew Selder</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/809</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
