<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-02T02:07:22+01:00</created-at>
  <creator-id type="integer">18993</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">92</number>
  <permalink>feature-more-efficient-session-handling</permalink>
  <priority type="integer">10607</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>actionpack session</tag>
  <title>[FEATURE] More efficient session handling</title>
  <updated-at type="datetime">2008-07-17T01:04:59+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">4</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Andreas</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/92</url>
  <priority-name nil="true"></priority-name>
  <original-body>Problem:
* Some applications end up with huge amounts of empty sessions.
* Activating sessions can hurt performance even for requests that do not depend on session information.

Reasons:
* The session is looked up in the store, even if the request did not contain a session cookie.
* The session is retrieved from the store, even if the data is not needed for handling the request.
* After the request the session is created, even if it is empty.
* After the request the session is saved, even if the data was not changed.

Proposed solution:
* Look up the session from the store only when the &quot;session&quot; function is called and the client actually submitted a session cookie.
* Instead of saving an empty session, delete it from the store (or don't create it if it does not yet exist).
* Save a non-empty session only if it was changed during the request handling.</original-body>
  <latest-body>Problem:
* Some applications end up with huge amounts of empty sessions.
* Activating sessions can hurt performance even for requests that do not depend on session information.

Reasons:
* The session is looked up in the store, even if the request did not contain a session cookie.
* The session is retrieved from the store, even if the data is not needed for handling the request.
* After the request the session is created, even if it is empty.
* After the request the session is saved, even if the data was not changed.

Proposed solution:
* Look up the session from the store only when the &quot;session&quot; function is called and the client actually submitted a session cookie.
* Instead of saving an empty session, delete it from the store (or don't create it if it does not yet exist).
* Save a non-empty session only if it was changed during the request handling.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Problem:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
Some applications end up with huge amounts of empty sessions.
&lt;/li&gt;&lt;li&gt;
Activating sessions can hurt performance even for requests that do not depend on session information.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
Reasons:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
The session is looked up in the store, even if the request did not contain a session cookie.
&lt;/li&gt;&lt;li&gt;
The session is retrieved from the store, even if the data is not needed for handling the request.
&lt;/li&gt;&lt;li&gt;
After the request the session is created, even if it is empty.
&lt;/li&gt;&lt;li&gt;
After the request the session is saved, even if the data was not changed.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
Proposed solution:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
Look up the session from the store only when the &quot;session&quot; function is called and the client actually submitted a session cookie.
&lt;/li&gt;&lt;li&gt;
Instead of saving an empty session, delete it from the store (or don't create it if it does not yet exist).
&lt;/li&gt;&lt;li&gt;
Save a non-empty session only if it was changed during the request handling.
&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Problem:
* Some applications end up with huge amounts of empty sessions.
* Activating sessions can hurt performance even for requests that do not depend on session information.

Reasons:
* The session is looked up in the store, even if the request did not contain a session cookie.
* The session is retrieved from the store, even if the data is not needed for handling the request.
* After the request the session is created, even if it is empty.
* After the request the session is saved, even if the data was not changed.

Proposed solution:
* Look up the session from the store only when the &quot;session&quot; function is called and the client actually submitted a session cookie.
* Instead of saving an empty session, delete it from the store (or don't create it if it does not yet exist).
* Save a non-empty session only if it was changed during the request handling.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Problem:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
Some applications end up with huge amounts of empty sessions.
&lt;/li&gt;&lt;li&gt;
Activating sessions can hurt performance even for requests that do not depend on session information.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
Reasons:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
The session is looked up in the store, even if the request did not contain a session cookie.
&lt;/li&gt;&lt;li&gt;
The session is retrieved from the store, even if the data is not needed for handling the request.
&lt;/li&gt;&lt;li&gt;
After the request the session is created, even if it is empty.
&lt;/li&gt;&lt;li&gt;
After the request the session is saved, even if the data was not changed.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
Proposed solution:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
Look up the session from the store only when the &quot;session&quot; function is called and the client actually submitted a session cookie.
&lt;/li&gt;&lt;li&gt;
Instead of saving an empty session, delete it from the store (or don't create it if it does not yet exist).
&lt;/li&gt;&lt;li&gt;
Save a non-empty session only if it was changed during the request handling.
&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-02T02:07:22+01:00</created-at>
      <creator-id type="integer">18993</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">92</number>
      <permalink>feature-more-efficient-session-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[FEATURE] More efficient session handling</title>
      <updated-at type="datetime">2008-05-02T02:07:22+01:00</updated-at>
      <user-id type="integer">18993</user-id>
      <version type="integer">1</version>
      <user-name>Andreas</user-name>
      <creator-name>Andreas</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/92</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sounds intriguing. Most of this isn't really relevant if you're using the cookie store, but for everyone else this could be a win.

Not loading the session until it's first touched is a no brainer. I'd be wary about not saving the session/deleting empty sessions though, as I reckon there's scope for getting your self into trouble if you're handling simultaneous requests from the same user (although to be fair the session stores that ship with rails are all vulnerable to that)/</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Sounds intriguing. Most of this isn't really relevant if you're using the cookie store, but for everyone else this could be a win.
&lt;/p&gt;&lt;p&gt;
Not loading the session until it's first touched is a no brainer. I'd be wary about not saving the session/deleting empty sessions though, as I reckon there's scope for getting your self into trouble if you're handling simultaneous requests from the same user (although to be fair the session stores that ship with rails are all vulnerable to that)/
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-02T02:35:14+01:00</created-at>
      <creator-id type="integer">18993</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">92</number>
      <permalink>feature-more-efficient-session-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[FEATURE] More efficient session handling</title>
      <updated-at type="datetime">2008-05-02T02:35:14+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">2</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Andreas</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/92</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I know, there might be some problems depending on how you want the sessions to behave transaction-wise, but Rails sessions don't seem to have a defined behaviour for concurrent requests anyway.

Another problem with not saving unchanged session is that the timestamp does not get updated.

I just found this project which implements some of the changes I suggested: http://code.google.com/p/rails-fast-sessions/</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I know, there might be some problems depending on how you want the sessions to behave transaction-wise, but Rails sessions don't seem to have a defined behaviour for concurrent requests anyway.
&lt;/p&gt;&lt;p&gt;
Another problem with not saving unchanged session is that the timestamp does not get updated.
&lt;/p&gt;&lt;p&gt;
I just found this project which implements some of the changes I suggested: &lt;a href=&quot;http://code.google.com/p/rails-fast-sessions/&quot;&gt;http://code.google.com/p/rails-f...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-02T13:12:49+01:00</created-at>
      <creator-id type="integer">18993</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">92</number>
      <permalink>feature-more-efficient-session-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[FEATURE] More efficient session handling</title>
      <updated-at type="datetime">2008-05-02T13:12:49+01:00</updated-at>
      <user-id type="integer">18993</user-id>
      <version type="integer">3</version>
      <user-name>Andreas</user-name>
      <creator-name>Andreas</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/92</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Got patch?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Got patch?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-17T01:04:59+01:00</created-at>
      <creator-id type="integer">18993</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">92</number>
      <permalink>feature-more-efficient-session-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>actionpack session</tag>
      <title>[FEATURE] More efficient session handling</title>
      <updated-at type="datetime">2008-07-17T01:04:59+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">4</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Andreas</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/92</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
