<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-31T00:13:19+01:00</created-at>
  <creator-id type="integer">43942</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2380</number>
  <permalink>add-custom-attributes-when-serializing</permalink>
  <priority type="integer">1540</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>json serialization</tag>
  <title>Add custom attributes when serializing</title>
  <updated-at type="datetime">2010-04-16T00:12:06+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">3</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Dmitry Ratnikov</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2380</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This patch allows to add additional attributes when serializing via to_json or to_xml.

Specific use-case I have for it is when servicing ajax creation requests. As response, I want to return the created object information, but I would like to also provide information on how to render it (basically html snippet) so that js client can use it to update dom in a consistent manner. So I render the show template for it and mix into the rest of json data for the model:

@@@ ruby
  class FoosController &lt; ApplicationController
    def create
      @foo = Foo.new params[:foo]
      if @foo.save
        respond_to do |f|
          f.html { redirect_to @foo }
          f.js { render :json =&gt; @foo.to_json(:merge =&gt; { :html =&gt; render_string(:action =&gt; 'show') }) }
        end
      else
        respond_to do |f|
          f.html { render :action =&gt; 'new' }
          f.js { render :json =&gt; @foo.to_json(:methods =&gt; :errors) }
        end
      end
    end
  end
@@@

The patch touches following files:
 * &lt;code&gt;active_record/serialization.rb&lt;/code&gt; to implement support of the :merge option
 * &lt;code&gt;test/cases/json_serialization_test.rb&lt;/code&gt; and &lt;code&gt;test/cases/serialization_test.rb&lt;/code&gt; to reflect the new behavior
 * &lt;code&gt;active_record/serializers/json_serialization.rb&lt;/code&gt; to document the new feature.


Hope that sounds useful.

-- Dmitry

PS Current implementation allows the merged attributes to override the defaults. Also, it ignores excepted attributes (specified via :except option). The only reason they behave like that is because it made most sense to me.</original-body>
  <latest-body>This patch allows to add additional attributes when serializing via to_json or to_xml.

Specific use-case I have for it is when servicing ajax creation requests. As response, I want to return the created object information, but I would like to also provide information on how to render it (basically html snippet) so that js client can use it to update dom in a consistent manner. So I render the show template for it and mix into the rest of json data for the model:

@@@ ruby
  class FoosController &lt; ApplicationController
    def create
      @foo = Foo.new params[:foo]
      if @foo.save
        respond_to do |f|
          f.html { redirect_to @foo }
          f.js { render :json =&gt; @foo.to_json(:merge =&gt; { :html =&gt; render_string(:action =&gt; 'show') }) }
        end
      else
        respond_to do |f|
          f.html { render :action =&gt; 'new' }
          f.js { render :json =&gt; @foo.to_json(:methods =&gt; :errors) }
        end
      end
    end
  end
@@@

The patch touches following files:
 * &lt;code&gt;active_record/serialization.rb&lt;/code&gt; to implement support of the :merge option
 * &lt;code&gt;test/cases/json_serialization_test.rb&lt;/code&gt; and &lt;code&gt;test/cases/serialization_test.rb&lt;/code&gt; to reflect the new behavior
 * &lt;code&gt;active_record/serializers/json_serialization.rb&lt;/code&gt; to document the new feature.


Hope that sounds useful.

-- Dmitry

PS Current implementation allows the merged attributes to override the defaults. Also, it ignores excepted attributes (specified via :except option). The only reason they behave like that is because it made most sense to me.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch allows to add additional attributes when serializing
via to_json or to_xml.&lt;/p&gt;
&lt;p&gt;Specific use-case I have for it is when servicing ajax creation
requests. As response, I want to return the created object
information, but I would like to also provide information on how to
render it (basically html snippet) so that js client can use it to
update dom in a consistent manner. So I render the show template
for it and mix into the rest of json data for the model:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  class FoosController &amp;lt; ApplicationController
    def create
      @foo = Foo.new params[:foo]
      if @foo.save
        respond_to do |f|
          f.html { redirect_to @foo }
          f.js { render :json =&amp;gt; @foo.to_json(:merge =&amp;gt; { :html =&amp;gt; render_string(:action =&amp;gt; 'show') }) }
        end
      else
        respond_to do |f|
          f.html { render :action =&amp;gt; 'new' }
          f.js { render :json =&amp;gt; @foo.to_json(:methods =&amp;gt; :errors) }
        end
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The patch touches following files: *
active_record/serialization.rb to implement support of the :merge
option * test/cases/json_serialization_test.rb and
test/cases/serialization_test.rb to reflect the new behavior *
active_record/serializers/json_serialization.rb to document the new
feature.&lt;/p&gt;
&lt;p&gt;Hope that sounds useful.&lt;/p&gt;
&lt;p&gt;-- Dmitry&lt;/p&gt;
&lt;p&gt;PS Current implementation allows the merged attributes to
override the defaults. Also, it ignores excepted attributes
(specified via :except option). The only reason they behave like
that is because it made most sense to me.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch allows to add additional attributes when serializing via to_json or to_xml.

Specific use-case I have for it is when servicing ajax creation requests. As response, I want to return the created object information, but I would like to also provide information on how to render it (basically html snippet) so that js client can use it to update dom in a consistent manner. So I render the show template for it and mix into the rest of json data for the model:

@@@ ruby
  class FoosController &lt; ApplicationController
    def create
      @foo = Foo.new params[:foo]
      if @foo.save
        respond_to do |f|
          f.html { redirect_to @foo }
          f.js { render :json =&gt; @foo.to_json(:merge =&gt; { :html =&gt; render_to_string(:action =&gt; 'show') }) }
        end
      else
        respond_to do |f|
          f.html { render :action =&gt; 'new' }
          f.js { render :json =&gt; @foo.to_json(:methods =&gt; :errors) }
        end
      end
    end
  end
@@@

The patch touches following files:

 * &lt;code&gt;active_record/serialization.rb&lt;/code&gt; to implement support of the :merge option
 * &lt;code&gt;test/cases/json_serialization_test.rb&lt;/code&gt; and &lt;code&gt;test/cases/serialization_test.rb&lt;/code&gt; to
 reflect the new behavior
 * &lt;code&gt;active_record/serializers/json_serialization.rb&lt;/code&gt; to document the new feature.


Hope that sounds useful.

-- Dmitry

PS Current implementation allows the merged attributes to override the defaults. Also, it ignores excepted attributes (specified via :except option). The only reason they behave like that is because it made most sense to me.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch allows to add additional attributes when serializing
via to_json or to_xml.&lt;/p&gt;
&lt;p&gt;Specific use-case I have for it is when servicing ajax creation
requests. As response, I want to return the created object
information, but I would like to also provide information on how to
render it (basically html snippet) so that js client can use it to
update dom in a consistent manner. So I render the show template
for it and mix into the rest of json data for the model:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  class FoosController &amp;lt; ApplicationController
    def create
      @foo = Foo.new params[:foo]
      if @foo.save
        respond_to do |f|
          f.html { redirect_to @foo }
          f.js { render :json =&amp;gt; @foo.to_json(:merge =&amp;gt; { :html =&amp;gt; render_to_string(:action =&amp;gt; 'show') }) }
        end
      else
        respond_to do |f|
          f.html { render :action =&amp;gt; 'new' }
          f.js { render :json =&amp;gt; @foo.to_json(:methods =&amp;gt; :errors) }
        end
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The patch touches following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;active_record/serialization.rb&lt;/code&gt; to implement
support of the :merge option&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test/cases/json_serialization_test.rb&lt;/code&gt; and
&lt;code&gt;test/cases/serialization_test.rb&lt;/code&gt; to reflect the new
behavior&lt;/li&gt;
&lt;li&gt;&lt;code&gt;active_record/serializers/json_serialization.rb&lt;/code&gt; to
document the new feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope that sounds useful.&lt;/p&gt;
&lt;p&gt;-- Dmitry&lt;/p&gt;
&lt;p&gt;PS Current implementation allows the merged attributes to
override the defaults. Also, it ignores excepted attributes
(specified via :except option). The only reason they behave like
that is because it made most sense to me.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-31T00:13:19+01:00</created-at>
      <creator-id type="integer">43942</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2380</number>
      <permalink>add-custom-attributes-when-serializing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>json serialization</tag>
      <title>Add custom attributes when serializing</title>
      <updated-at type="datetime">2009-03-31T00:17:54+01:00</updated-at>
      <user-id type="integer">43942</user-id>
      <version type="integer">1</version>
      <user-name>Dmitry Ratnikov</user-name>
      <creator-name>Dmitry Ratnikov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2380</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>suggesting mark as wontfix, serializing should serialize the object/model, any custom attributes should be on the model if they are needed to be serialized. the use case above could likely be solved with something like 

@@@ ruby
 render :json =&gt; { :foo =&gt; @foo.to_json, :html =&gt; render_to_string(:action =&gt; 'show') }
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;suggesting mark as wontfix, serializing should serialize the
object/model, any custom attributes should be on the model if they
are needed to be serialized. the use case above could likely be
solved with something like&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt; render :json =&amp;gt; { :foo =&amp;gt; @foo.to_json, :html =&amp;gt; render_to_string(:action =&amp;gt; 'show') }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-16T00:01:11+01:00</created-at>
      <creator-id type="integer">43942</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2380</number>
      <permalink>add-custom-attributes-when-serializing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>json serialization</tag>
      <title>Add custom attributes when serializing</title>
      <updated-at type="datetime">2010-04-16T00:01:14+01:00</updated-at>
      <user-id type="integer">65576</user-id>
      <version type="integer">2</version>
      <user-name>Steve St. Martin</user-name>
      <creator-name>Dmitry Ratnikov</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2380</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Agreed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Agreed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-16T00:12:04+01:00</created-at>
      <creator-id type="integer">43942</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2380</number>
      <permalink>add-custom-attributes-when-serializing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>json serialization</tag>
      <title>Add custom attributes when serializing</title>
      <updated-at type="datetime">2010-04-16T00:12:06+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">3</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Dmitry Ratnikov</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2380</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>c11c3ebc99592ecf272c767092094a694c39cb22</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-31T00:13:19+01:00</created-at>
      <filename>serialization_merge_patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">105785</id>
      <size type="integer">6264</size>
      <uploader-id type="integer">43942</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/105785/serialization_merge_patch.diff</url>
    </attachment>
  </attachments>
</ticket>
