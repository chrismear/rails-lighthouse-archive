<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-14T14:32:37+01:00</created-at>
  <creator-id type="integer">119913</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5807</number>
  <permalink>incorrect-nested-model-save-error</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>incorrect nested model save error</title>
  <updated-at type="datetime">2011-02-11T19:19:28+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">8</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>SooDesuNe</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5807</url>
  <priority-name>Low</priority-name>
  <original-body>I'm not exactly sure what the cause of the problem is, so this may require some more clarification, but here's what seems to be most relevant:

I have a `has_many :through` and the join model has some fields that aren't foreign keys.  When I build the models up and try to save I get a validation error on the non-foreign key fields from the join model.

My files look like:

    Person.rb

      has_many :wedding_assignments, :dependent =&gt; :destroy
      has_many :weddings, :through=&gt;:wedding_assignments
      accepts_nested_attributes_for :weddings
      accepts_nested_attributes_for :wedding_assignments

    Wedding.rb

      has_many :wedding_assignments, :dependent =&gt; :destroy
      has_many :people, :through=&gt;:wedding_assignments
      accepts_nested_attributes_for :people
      accepts_nested_attributes_for :wedding_assignments

    WeddingAssignment.rb

      belongs_to :person
      belongs_to :wedding
      validates_presence_of :role, :person, :wedding

  (role is  a string)

    people_controller.rb

      def new
        @person = Person.new
    
        1.times do
          wedding = @person.weddings.build
          1.times do
            assignment = wedding.wedding_assignments.build
            assignment.person = @person
            assignment.wedding = wedding
          end
        end
      end
    
      def create
        @person = Person.new(params[:person])
        @person.weddings.each do |wedding|
          wedding.wedding_assignments.each do |assignment|
            assignment.person = @person  #i don't think I should need to set person and wedding manually, but I get a validation error if I don't
            assignment.wedding = wedding
          end
        end
     end

the params that come back look like:

    {&quot;first_name&quot;=&gt;&quot;&quot;, &quot;last_name&quot;=&gt;&quot;&quot;, &quot;weddings_attributes&quot;=&gt;{&quot;0&quot;=&gt;{&quot;wedding_assignments_attributes&quot;=&gt;{&quot;0&quot;=&gt;{&quot;role&quot;=&gt;&quot;Bride's Maid&quot;, &quot;budget&quot;=&gt;&quot;&quot;}}, &quot;date&quot;=&gt;&quot;&quot;, &quot;ceremony_notes&quot;=&gt;&quot;&quot;}}}

And the exact error is:

    ActiveRecord::RecordInvalid in PeopleController#create
    Validation failed: Role can't be blank

Which is clearly not correct, since you can see it in `params[]`

The expected behavior of course is for the save to succeed.  This can be duplicated in the console.  Inspecting the value of `person.weddings.first.wedding_assignments.first.role` gives &quot;Bride's Maid&quot;, so I know it's there.

This is rails 3.0.0 on a mac

I'm not sure what else I can check to debug this.  I would really appreciate some advice.

Thank you so much for the beautiful thing that is rails 3!</original-body>
  <latest-body>I'm not exactly sure what the cause of the problem is, so this may require some more clarification, but here's what seems to be most relevant:

I have a `has_many :through` and the join model has some fields that aren't foreign keys.  When I build the models up and try to save I get a validation error on the non-foreign key fields from the join model.

My files look like:

    Person.rb

      has_many :wedding_assignments, :dependent =&gt; :destroy
      has_many :weddings, :through=&gt;:wedding_assignments
      accepts_nested_attributes_for :weddings
      accepts_nested_attributes_for :wedding_assignments

    Wedding.rb

      has_many :wedding_assignments, :dependent =&gt; :destroy
      has_many :people, :through=&gt;:wedding_assignments
      accepts_nested_attributes_for :people
      accepts_nested_attributes_for :wedding_assignments

    WeddingAssignment.rb

      belongs_to :person
      belongs_to :wedding
      validates_presence_of :role, :person, :wedding

  (role is  a string)

    people_controller.rb

      def new
        @person = Person.new
    
        1.times do
          wedding = @person.weddings.build
          1.times do
            assignment = wedding.wedding_assignments.build
            assignment.person = @person
            assignment.wedding = wedding
          end
        end
      end
    
      def create
        @person = Person.new(params[:person])
        @person.weddings.each do |wedding|
          wedding.wedding_assignments.each do |assignment|
            assignment.person = @person  #i don't think I should need to set person and wedding manually, but I get a validation error if I don't
            assignment.wedding = wedding
          end
        end
     end

the params that come back look like:

    {&quot;first_name&quot;=&gt;&quot;&quot;, &quot;last_name&quot;=&gt;&quot;&quot;, &quot;weddings_attributes&quot;=&gt;{&quot;0&quot;=&gt;{&quot;wedding_assignments_attributes&quot;=&gt;{&quot;0&quot;=&gt;{&quot;role&quot;=&gt;&quot;Bride's Maid&quot;, &quot;budget&quot;=&gt;&quot;&quot;}}, &quot;date&quot;=&gt;&quot;&quot;, &quot;ceremony_notes&quot;=&gt;&quot;&quot;}}}

And the exact error is:

    ActiveRecord::RecordInvalid in PeopleController#create
    Validation failed: Role can't be blank

Which is clearly not correct, since you can see it in `params[]`

The expected behavior of course is for the save to succeed.  This can be duplicated in the console.  Inspecting the value of `person.weddings.first.wedding_assignments.first.role` gives &quot;Bride's Maid&quot;, so I know it's there.

This is rails 3.0.0 on a mac

I'm not sure what else I can check to debug this.  I would really appreciate some advice.

Thank you so much for the beautiful thing that is rails 3!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm not exactly sure what the cause of the problem is, so this
may require some more clarification, but here's what seems to be
most relevant:&lt;/p&gt;
&lt;p&gt;I have a &lt;code&gt;has_many :through&lt;/code&gt; and the join model has
some fields that aren't foreign keys. When I build the models up
and try to save I get a validation error on the non-foreign key
fields from the join model.&lt;/p&gt;
&lt;p&gt;My files look like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Person.rb

  has_many :wedding_assignments, :dependent =&amp;gt; :destroy
  has_many :weddings, :through=&amp;gt;:wedding_assignments
  accepts_nested_attributes_for :weddings
  accepts_nested_attributes_for :wedding_assignments

Wedding.rb

  has_many :wedding_assignments, :dependent =&amp;gt; :destroy
  has_many :people, :through=&amp;gt;:wedding_assignments
  accepts_nested_attributes_for :people
  accepts_nested_attributes_for :wedding_assignments

WeddingAssignment.rb

  belongs_to :person
  belongs_to :wedding
  validates_presence_of :role, :person, :wedding&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(role is a string)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;people_controller.rb

  def new
    @person = Person.new

    1.times do
      wedding = @person.weddings.build
      1.times do
        assignment = wedding.wedding_assignments.build
        assignment.person = @person
        assignment.wedding = wedding
      end
    end
  end

  def create
    @person = Person.new(params[:person])
    @person.weddings.each do |wedding|
      wedding.wedding_assignments.each do |assignment|
        assignment.person = @person  #i don't think I should need to set person and wedding manually, but I get a validation error if I don't
        assignment.wedding = wedding
      end
    end
 end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;the params that come back look like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{&quot;first_name&quot;=&amp;gt;&quot;&quot;, &quot;last_name&quot;=&amp;gt;&quot;&quot;, &quot;weddings_attributes&quot;=&amp;gt;{&quot;0&quot;=&amp;gt;{&quot;wedding_assignments_attributes&quot;=&amp;gt;{&quot;0&quot;=&amp;gt;{&quot;role&quot;=&amp;gt;&quot;Bride's Maid&quot;, &quot;budget&quot;=&amp;gt;&quot;&quot;}}, &quot;date&quot;=&amp;gt;&quot;&quot;, &quot;ceremony_notes&quot;=&amp;gt;&quot;&quot;}}}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And the exact error is:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActiveRecord::RecordInvalid in PeopleController#create
Validation failed: Role can't be blank&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which is clearly not correct, since you can see it in
&lt;code&gt;params[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The expected behavior of course is for the save to succeed. This
can be duplicated in the console. Inspecting the value of
&lt;code&gt;person.weddings.first.wedding_assignments.first.role&lt;/code&gt;
gives &quot;Bride's Maid&quot;, so I know it's there.&lt;/p&gt;
&lt;p&gt;This is rails 3.0.0 on a mac&lt;/p&gt;
&lt;p&gt;I'm not sure what else I can check to debug this. I would really
appreciate some advice.&lt;/p&gt;
&lt;p&gt;Thank you so much for the beautiful thing that is rails 3!&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm not exactly sure what the cause of the problem is, so this may require some more clarification, but here's what seems to be most relevant:

I have a `has_many :through` and the join model has some fields that aren't foreign keys.  When I build the models up and try to save I get a validation error on the non-foreign key fields from the join model.

My files look like:

    Person.rb

      has_many :wedding_assignments, :dependent =&gt; :destroy
      has_many :weddings, :through=&gt;:wedding_assignments
      accepts_nested_attributes_for :weddings
      accepts_nested_attributes_for :wedding_assignments

    Wedding.rb

      has_many :wedding_assignments, :dependent =&gt; :destroy
      has_many :people, :through=&gt;:wedding_assignments
      accepts_nested_attributes_for :people
      accepts_nested_attributes_for :wedding_assignments

    WeddingAssignment.rb

      belongs_to :person
      belongs_to :wedding
      validates_presence_of :role, :person, :wedding

  (role is  a string)

    people_controller.rb

      def new
        @person = Person.new
    
        1.times do
          wedding = @person.weddings.build
          1.times do
            assignment = wedding.wedding_assignments.build
            assignment.person = @person
            assignment.wedding = wedding
          end
        end
      end
    
      def create
        @person = Person.new(params[:person])
        @person.weddings.each do |wedding|
          wedding.wedding_assignments.each do |assignment|
            assignment.person = @person  #i don't think I should need to set person and wedding manually, but I get a validation error if I don't
            assignment.wedding = wedding
          end
        end
     end

the params that come back look like:

    {&quot;first_name&quot;=&gt;&quot;&quot;, &quot;last_name&quot;=&gt;&quot;&quot;, &quot;weddings_attributes&quot;=&gt;{&quot;0&quot;=&gt;{&quot;wedding_assignments_attributes&quot;=&gt;{&quot;0&quot;=&gt;{&quot;role&quot;=&gt;&quot;Bride's Maid&quot;, &quot;budget&quot;=&gt;&quot;&quot;}}, &quot;date&quot;=&gt;&quot;&quot;, &quot;ceremony_notes&quot;=&gt;&quot;&quot;}}}

And the exact error is:

    ActiveRecord::RecordInvalid in PeopleController#create
    Validation failed: Role can't be blank

Which is clearly not correct, since you can see it in `params[]`

The expected behavior of course is for the save to succeed.  This can be duplicated in the console.  Inspecting the value of `person.weddings.first.wedding_assignments.first.role` gives &quot;Bride's Maid&quot;, so I know it's there.

This is rails 3.0.0 on a mac

I'm not sure what else I can check to debug this.  I would really appreciate some advice.

Thank you so much for the beautiful thing that is rails 3!</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not exactly sure what the cause of the problem is, so this
may require some more clarification, but here's what seems to be
most relevant:&lt;/p&gt;
&lt;p&gt;I have a &lt;code&gt;has_many :through&lt;/code&gt; and the join model has
some fields that aren't foreign keys. When I build the models up
and try to save I get a validation error on the non-foreign key
fields from the join model.&lt;/p&gt;
&lt;p&gt;My files look like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Person.rb

  has_many :wedding_assignments, :dependent =&amp;gt; :destroy
  has_many :weddings, :through=&amp;gt;:wedding_assignments
  accepts_nested_attributes_for :weddings
  accepts_nested_attributes_for :wedding_assignments

Wedding.rb

  has_many :wedding_assignments, :dependent =&amp;gt; :destroy
  has_many :people, :through=&amp;gt;:wedding_assignments
  accepts_nested_attributes_for :people
  accepts_nested_attributes_for :wedding_assignments

WeddingAssignment.rb

  belongs_to :person
  belongs_to :wedding
  validates_presence_of :role, :person, :wedding&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(role is a string)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;people_controller.rb

  def new
    @person = Person.new

    1.times do
      wedding = @person.weddings.build
      1.times do
        assignment = wedding.wedding_assignments.build
        assignment.person = @person
        assignment.wedding = wedding
      end
    end
  end

  def create
    @person = Person.new(params[:person])
    @person.weddings.each do |wedding|
      wedding.wedding_assignments.each do |assignment|
        assignment.person = @person  #i don't think I should need to set person and wedding manually, but I get a validation error if I don't
        assignment.wedding = wedding
      end
    end
 end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;the params that come back look like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{&quot;first_name&quot;=&amp;gt;&quot;&quot;, &quot;last_name&quot;=&amp;gt;&quot;&quot;, &quot;weddings_attributes&quot;=&amp;gt;{&quot;0&quot;=&amp;gt;{&quot;wedding_assignments_attributes&quot;=&amp;gt;{&quot;0&quot;=&amp;gt;{&quot;role&quot;=&amp;gt;&quot;Bride's Maid&quot;, &quot;budget&quot;=&amp;gt;&quot;&quot;}}, &quot;date&quot;=&amp;gt;&quot;&quot;, &quot;ceremony_notes&quot;=&amp;gt;&quot;&quot;}}}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And the exact error is:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActiveRecord::RecordInvalid in PeopleController#create
Validation failed: Role can't be blank&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which is clearly not correct, since you can see it in
&lt;code&gt;params[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The expected behavior of course is for the save to succeed. This
can be duplicated in the console. Inspecting the value of
&lt;code&gt;person.weddings.first.wedding_assignments.first.role&lt;/code&gt;
gives &quot;Bride's Maid&quot;, so I know it's there.&lt;/p&gt;
&lt;p&gt;This is rails 3.0.0 on a mac&lt;/p&gt;
&lt;p&gt;I'm not sure what else I can check to debug this. I would really
appreciate some advice.&lt;/p&gt;
&lt;p&gt;Thank you so much for the beautiful thing that is rails 3!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-14T14:32:37+01:00</created-at>
      <creator-id type="integer">119913</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5807</number>
      <permalink>incorrect-nested-model-save-error</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>incorrect nested model save error</title>
      <updated-at type="datetime">2010-10-14T17:52:35+01:00</updated-at>
      <user-id type="integer">119913</user-id>
      <version type="integer">1</version>
      <user-name>SooDesuNe</user-name>
      <creator-name>SooDesuNe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5807</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-15T07:15:18+01:00</created-at>
      <creator-id type="integer">119913</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5807</number>
      <permalink>incorrect-nested-model-save-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>incorrect nested model save error</title>
      <updated-at type="datetime">2010-10-15T07:15:20+01:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">3</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>SooDesuNe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5807</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-19T08:32:26+01:00</created-at>
      <creator-id type="integer">119913</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5807</number>
      <permalink>incorrect-nested-model-save-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>incorrect nested model save error</title>
      <updated-at type="datetime">2010-10-19T08:32:29+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">5</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>SooDesuNe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5807</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@SooDesuNe Can you verify if it is still an issue in rails edge. If yes then I will look into it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@SooDesuNe Can you verify if it is still an issue in rails edge.
If yes then I will look into it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-10T22:19:26+00:00</created-at>
      <creator-id type="integer">119913</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5807</number>
      <permalink>incorrect-nested-model-save-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>incorrect nested model save error</title>
      <updated-at type="datetime">2010-11-10T22:19:31+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>SooDesuNe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5807</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-11T19:18:07+00:00</created-at>
      <creator-id type="integer">119913</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5807</number>
      <permalink>incorrect-nested-model-save-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>incorrect nested model save error</title>
      <updated-at type="datetime">2011-02-11T19:19:15+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>SooDesuNe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5807</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-11T19:18:07+00:00</created-at>
      <creator-id type="integer">119913</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5807</number>
      <permalink>incorrect-nested-model-save-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>incorrect nested model save error</title>
      <updated-at type="datetime">2011-02-11T19:19:28+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">8</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>SooDesuNe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5807</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
