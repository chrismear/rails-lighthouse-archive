<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-25T20:38:24+01:00</created-at>
  <creator-id type="integer">29951</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">902</number>
  <permalink>field_changed-does-not-always-typecast-before-comparison</permalink>
  <priority type="integer">355</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>activerecord dirty field_changed</tag>
  <title>field_changed? does not always typecast before comparison</title>
  <updated-at type="datetime">2011-03-26T02:15:08+00:00</updated-at>
  <user-id type="integer">142823</user-id>
  <version type="integer">4</version>
  <user-name>bingbing</user-name>
  <creator-name>Jon B.</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/902</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I've recently been working on a project and came across an issue with the way field_changed? was handling incoming values.  Specifically, if assigning a string value of &quot;0&quot; (eg, from an HTTP POST via update_attributes) to an integer column that is nullable, and with a previous value of 0, the field is marked as changed.

@@@
=&gt; #&lt;ActiveRecord::ConnectionAdapters::MysqlColumn:0x4edfd10 @sql_type=&quot;int(11)&quot;
, @default=nil, @precision=nil, @primary=false, @limit=4, @name=&quot;severity&quot;, @nul
l=true, @type=:integer, @scale=nil&gt;
&gt;&gt; bug = Bug.find(2)
=&gt; #&lt;Bug id: 2, summary: &quot;Ticket with few changes&quot;, status: &quot;Confirmed&quot;, severit
y: 0, ticket_type: &quot;Defect&quot;, resolution: &quot;Open&quot;, description: &quot;With a descriptio
n&quot;, steps_to_reproduce: &quot;&quot;, additional_information: &quot;&quot;, project_id: 1, project_b
ug_id: 2, user_id: 1, owner_id: 2, created_at: &quot;2008-08-04 14:09:56&quot;, updated_at
: &quot;2008-08-04 14:11:17&quot;, priority: 2, comment: &quot;ffffff&quot;&gt;
&gt;&gt; bug.severity = &quot;0&quot;
=&gt; &quot;0&quot;
&gt;&gt; bug.changes
=&gt; {&quot;severity&quot;=&gt;[0, 0]}
@@@

After some digging, it seems to be because in this very specific case, the incoming value is not typecast before comparison; it enters the conditional but then does nothing since the new value is not blank.

It seems that a solution is to simply move &quot;value = column.type_cast(value)&quot; outside of the conditional.  IE,

@@@
          if column.type == :integer &amp;&amp; column.null &amp;&amp; (old.nil? || old == 0)
            # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.
            # Hence we don't record it as a change if the value changes from nil to ''.
            # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll
            # be typecast back to 0 (''.to_i =&gt; 0)
            value = nil if value.blank?
          end
          value = column.type_cast(value)
@@@

I haven't done a lot of testing to ensure that this does not create other problems, but in the few tests I ran it seemed to be alright.  I've included the change I made in a (hopefully correct) patch file.</original-body>
  <latest-body>I've recently been working on a project and came across an issue with the way field_changed? was handling incoming values.  Specifically, if assigning a string value of &quot;0&quot; (eg, from an HTTP POST via update_attributes) to an integer column that is nullable, and with a previous value of 0, the field is marked as changed.

@@@
=&gt; #&lt;ActiveRecord::ConnectionAdapters::MysqlColumn:0x4edfd10 @sql_type=&quot;int(11)&quot;
, @default=nil, @precision=nil, @primary=false, @limit=4, @name=&quot;severity&quot;, @nul
l=true, @type=:integer, @scale=nil&gt;
&gt;&gt; bug = Bug.find(2)
=&gt; #&lt;Bug id: 2, summary: &quot;Ticket with few changes&quot;, status: &quot;Confirmed&quot;, severit
y: 0, ticket_type: &quot;Defect&quot;, resolution: &quot;Open&quot;, description: &quot;With a descriptio
n&quot;, steps_to_reproduce: &quot;&quot;, additional_information: &quot;&quot;, project_id: 1, project_b
ug_id: 2, user_id: 1, owner_id: 2, created_at: &quot;2008-08-04 14:09:56&quot;, updated_at
: &quot;2008-08-04 14:11:17&quot;, priority: 2, comment: &quot;ffffff&quot;&gt;
&gt;&gt; bug.severity = &quot;0&quot;
=&gt; &quot;0&quot;
&gt;&gt; bug.changes
=&gt; {&quot;severity&quot;=&gt;[0, 0]}
@@@

After some digging, it seems to be because in this very specific case, the incoming value is not typecast before comparison; it enters the conditional but then does nothing since the new value is not blank.

It seems that a solution is to simply move &quot;value = column.type_cast(value)&quot; outside of the conditional.  IE,

@@@
          if column.type == :integer &amp;&amp; column.null &amp;&amp; (old.nil? || old == 0)
            # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.
            # Hence we don't record it as a change if the value changes from nil to ''.
            # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll
            # be typecast back to 0 (''.to_i =&gt; 0)
            value = nil if value.blank?
          end
          value = column.type_cast(value)
@@@

I haven't done a lot of testing to ensure that this does not create other problems, but in the few tests I ran it seemed to be alright.  I've included the change I made in a (hopefully correct) patch file.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I've recently been working on a project and came across an issue with the way field_changed? was handling incoming values.  Specifically, if assigning a string value of &quot;0&quot; (eg, from an HTTP POST via update_attributes) to an integer column that is nullable, and with a previous value of 0, the field is marked as changed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
=&amp;gt; #&amp;lt;ActiveRecord::ConnectionAdapters::MysqlColumn:0x4edfd10 @sql_type=&amp;quot;int(11)&amp;quot;
, @default=nil, @precision=nil, @primary=false, @limit=4, @name=&amp;quot;severity&amp;quot;, @nul
l=true, @type=:integer, @scale=nil&amp;gt;
&amp;gt;&amp;gt; bug = Bug.find(2)
=&amp;gt; #&amp;lt;Bug id: 2, summary: &amp;quot;Ticket with few changes&amp;quot;, status: &amp;quot;Confirmed&amp;quot;, severit
y: 0, ticket_type: &amp;quot;Defect&amp;quot;, resolution: &amp;quot;Open&amp;quot;, description: &amp;quot;With a descriptio
n&amp;quot;, steps_to_reproduce: &amp;quot;&amp;quot;, additional_information: &amp;quot;&amp;quot;, project_id: 1, project_b
ug_id: 2, user_id: 1, owner_id: 2, created_at: &amp;quot;2008-08-04 14:09:56&amp;quot;, updated_at
: &amp;quot;2008-08-04 14:11:17&amp;quot;, priority: 2, comment: &amp;quot;ffffff&amp;quot;&amp;gt;
&amp;gt;&amp;gt; bug.severity = &amp;quot;0&amp;quot;
=&amp;gt; &amp;quot;0&amp;quot;
&amp;gt;&amp;gt; bug.changes
=&amp;gt; {&amp;quot;severity&amp;quot;=&amp;gt;[0, 0]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After some digging, it seems to be because in this very specific case, the incoming value is not typecast before comparison; it enters the conditional but then does nothing since the new value is not blank.&lt;/p&gt;

&lt;p&gt;It seems that a solution is to simply move &quot;value = column.type_cast(value)&quot; outside of the conditional.  IE,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
          if column.type == :integer &amp;amp;&amp;amp; column.null &amp;amp;&amp;amp; (old.nil? || old == 0)
            # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.
            # Hence we don't record it as a change if the value changes from nil to ''.
            # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll
            # be typecast back to 0 (''.to_i =&amp;gt; 0)
            value = nil if value.blank?
          end
          value = column.type_cast(value)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I haven't done a lot of testing to ensure that this does not create other problems, but in the few tests I ran it seemed to be alright.  I've included the change I made in a (hopefully correct) patch file.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've recently been working on a project and came across an issue with the way field_changed? was handling incoming values.  Specifically, if assigning a string value of &quot;0&quot; (eg, from an HTTP POST via update_attributes) to an integer column that is nullable, and with a previous value of 0, the field is marked as changed.

@@@
=&gt; #&lt;ActiveRecord::ConnectionAdapters::MysqlColumn:0x4edfd10 @sql_type=&quot;int(11)&quot;
, @default=nil, @precision=nil, @primary=false, @limit=4, @name=&quot;severity&quot;, @nul
l=true, @type=:integer, @scale=nil&gt;
&gt;&gt; bug = Bug.find(2)
=&gt; #&lt;Bug id: 2, summary: &quot;Ticket with few changes&quot;, status: &quot;Confirmed&quot;, severit
y: 0, ticket_type: &quot;Defect&quot;, resolution: &quot;Open&quot;, description: &quot;With a descriptio
n&quot;, steps_to_reproduce: &quot;&quot;, additional_information: &quot;&quot;, project_id: 1, project_b
ug_id: 2, user_id: 1, owner_id: 2, created_at: &quot;2008-08-04 14:09:56&quot;, updated_at
: &quot;2008-08-04 14:11:17&quot;, priority: 2, comment: &quot;ffffff&quot;&gt;
&gt;&gt; bug.severity = &quot;0&quot;
=&gt; &quot;0&quot;
&gt;&gt; bug.changes
=&gt; {&quot;severity&quot;=&gt;[0, 0]}
@@@

After some digging, it seems to be because in this very specific case, the incoming value is not typecast before comparison; it enters the conditional but then does nothing since the new value is not blank.

It seems that a solution is to simply move &quot;value = column.type_cast(value)&quot; outside of the conditional.  IE,

@@@
          if column.type == :integer &amp;&amp; column.null &amp;&amp; (old.nil? || old == 0)
            # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.
            # Hence we don't record it as a change if the value changes from nil to ''.
            # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll
            # be typecast back to 0 (''.to_i =&gt; 0)
            value = nil if value.blank?
          end
          value = column.type_cast(value)
@@@

I haven't done a lot of testing to ensure that this does not create other problems, but in the few tests I ran it seemed to be alright.  I've included the change I made in a (hopefully correct) patch file.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've recently been working on a project and came across an issue with the way field_changed? was handling incoming values.  Specifically, if assigning a string value of &quot;0&quot; (eg, from an HTTP POST via update_attributes) to an integer column that is nullable, and with a previous value of 0, the field is marked as changed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
=&amp;gt; #&amp;lt;ActiveRecord::ConnectionAdapters::MysqlColumn:0x4edfd10 @sql_type=&amp;quot;int(11)&amp;quot;
, @default=nil, @precision=nil, @primary=false, @limit=4, @name=&amp;quot;severity&amp;quot;, @nul
l=true, @type=:integer, @scale=nil&amp;gt;
&amp;gt;&amp;gt; bug = Bug.find(2)
=&amp;gt; #&amp;lt;Bug id: 2, summary: &amp;quot;Ticket with few changes&amp;quot;, status: &amp;quot;Confirmed&amp;quot;, severit
y: 0, ticket_type: &amp;quot;Defect&amp;quot;, resolution: &amp;quot;Open&amp;quot;, description: &amp;quot;With a descriptio
n&amp;quot;, steps_to_reproduce: &amp;quot;&amp;quot;, additional_information: &amp;quot;&amp;quot;, project_id: 1, project_b
ug_id: 2, user_id: 1, owner_id: 2, created_at: &amp;quot;2008-08-04 14:09:56&amp;quot;, updated_at
: &amp;quot;2008-08-04 14:11:17&amp;quot;, priority: 2, comment: &amp;quot;ffffff&amp;quot;&amp;gt;
&amp;gt;&amp;gt; bug.severity = &amp;quot;0&amp;quot;
=&amp;gt; &amp;quot;0&amp;quot;
&amp;gt;&amp;gt; bug.changes
=&amp;gt; {&amp;quot;severity&amp;quot;=&amp;gt;[0, 0]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After some digging, it seems to be because in this very specific case, the incoming value is not typecast before comparison; it enters the conditional but then does nothing since the new value is not blank.&lt;/p&gt;

&lt;p&gt;It seems that a solution is to simply move &quot;value = column.type_cast(value)&quot; outside of the conditional.  IE,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
          if column.type == :integer &amp;amp;&amp;amp; column.null &amp;amp;&amp;amp; (old.nil? || old == 0)
            # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.
            # Hence we don't record it as a change if the value changes from nil to ''.
            # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll
            # be typecast back to 0 (''.to_i =&amp;gt; 0)
            value = nil if value.blank?
          end
          value = column.type_cast(value)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I haven't done a lot of testing to ensure that this does not create other problems, but in the few tests I ran it seemed to be alright.  I've included the change I made in a (hopefully correct) patch file.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-25T20:38:25+01:00</created-at>
      <creator-id type="integer">29951</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">902</number>
      <permalink>field_changed-does-not-always-typecast-before-comparison</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord dirty field_changed</tag>
      <title>field_changed? does not always typecast before comparison</title>
      <updated-at type="datetime">2008-08-25T20:38:25+01:00</updated-at>
      <user-id type="integer">29951</user-id>
      <version type="integer">1</version>
      <user-name>Jon B.</user-name>
      <creator-name>Jon B.</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/902</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-27T03:19:03+00:00</created-at>
      <creator-id type="integer">29951</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">902</number>
      <permalink>field_changed-does-not-always-typecast-before-comparison</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord dirty field_changed</tag>
      <title>field_changed? does not always typecast before comparison</title>
      <updated-at type="datetime">2008-11-27T03:19:05+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Jon B.</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/902</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Duplicate of #1530</body>
      <body-html>&lt;div&gt;&lt;p&gt;Duplicate of &lt;a href=&quot;/projects/8994/tickets/1530&quot; title=&quot;Ticket #1530&quot;&gt;#1530&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-18T22:48:45+00:00</created-at>
      <creator-id type="integer">29951</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">902</number>
      <permalink>field_changed-does-not-always-typecast-before-comparison</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>activerecord dirty field_changed</tag>
      <title>field_changed? does not always typecast before comparison</title>
      <updated-at type="datetime">2008-12-18T22:48:51+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Jon B.</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/902</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton
watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-26T02:02:09+00:00</created-at>
      <creator-id type="integer">29951</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">902</number>
      <permalink>field_changed-does-not-always-typecast-before-comparison</permalink>
      <priority type="integer">355</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>activerecord dirty field_changed</tag>
      <title>field_changed? does not always typecast before comparison</title>
      <updated-at type="datetime">2011-03-26T02:15:08+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">4</version>
      <user-name>bingbing</user-name>
      <creator-name>Jon B.</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/902</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>dd64c1c1cc37424b7ea325563ac87719819a8985</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-25T20:38:25+01:00</created-at>
      <filename>changes.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">41347</id>
      <size type="integer">465</size>
      <uploader-id type="integer">29951</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/41347/changes.patch</url>
    </attachment>
  </attachments>
</ticket>
