<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-07T22:18:18+00:00</created-at>
  <creator-id type="integer">128215</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6127</number>
  <permalink>after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>after_initialize may lead to missing attribute when used with uniqueness validation</title>
  <updated-at type="datetime">2011-04-04T22:29:26+01:00</updated-at>
  <user-id type="integer">79689</user-id>
  <version type="integer">9</version>
  <user-name>John Berry</user-name>
  <creator-name>Kai Schlamp</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6127</url>
  <priority-name nil="true"></priority-name>
  <original-body>Under some special circumstances an after_initialize callback may lead to a missing attribute exception when combined with a uniqueness validation.

A not so uncommon scenario:

&lt;pre&gt;
class MyModel &lt; ActiveRecord::Base

  after_initialize :init_token

  validates :token, :uniqueness =&gt; true

  def init_token
    if self.token.blank?
      self.token = rand(999999) # just for demo
    end
  end
end
&lt;/pre&gt;

MyModel has only a token column (String) in the database.

Now when doing the following:
&lt;pre&gt;
m1 = MyModel.create
m2 = MyModel.new
m2.token = m1.token
m2.valid? # calls init_token again and throws the below exception.
&lt;/pre&gt;

`missing attribute: token` is because of the last `find_by_sql` that does a 
&lt;pre&gt;SELECT `grids`.`id` FROM `grids` WHERE (`grids`.`token` = BINARY 'mkp8ae2qbq') LIMIT 1&lt;/pre&gt;
where token is not selected.

I am not sure if it is that good at all that a `valid?` call ends up in a instantiation of a new record and calling the initialize callbacks.
Could it not just check the row without a new instantiation?

&lt;pre&gt;
ActiveModel::MissingAttributeError: missing attribute: token
	from /home/zeus/projects/myproject/app/models/my_model.rb:9:in `init_token'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:415:in `_run_initialize_callbacks'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:1453:in `init_with'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:909:in `instantiate'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `collect!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:180:in `exists?'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/validations/uniqueness.rb:39:in `validate_each'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:154:in `validate'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:151:in `each'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:151:in `validate'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:314:in `send'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:314:in `_callback_before_1265'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414:in `_run_validate_callbacks'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations.rb:212:in `run_validations!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations/callbacks.rb:67:in `run_validations!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:413:in `_run_validation_callbacks'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations/callbacks.rb:67:in `run_validations!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations.rb:179:in `valid?'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/validations.rb:55:in `valid?'
	from (irb):103
&lt;/pre&gt;</original-body>
  <latest-body>Under some special circumstances an after_initialize callback may lead to a missing attribute exception when combined with a uniqueness validation.

A not so uncommon scenario:

&lt;pre&gt;
class MyModel &lt; ActiveRecord::Base

  after_initialize :init_token

  validates :token, :uniqueness =&gt; true

  def init_token
    if self.token.blank?
      self.token = rand(999999) # just for demo
    end
  end
end
&lt;/pre&gt;

MyModel has only a token column (String) in the database.

Now when doing the following:
&lt;pre&gt;
m1 = MyModel.create
m2 = MyModel.new
m2.token = m1.token
m2.valid? # calls init_token again and throws the below exception.
&lt;/pre&gt;

`missing attribute: token` is because of the last `find_by_sql` that does a 
&lt;pre&gt;SELECT `grids`.`id` FROM `grids` WHERE (`grids`.`token` = BINARY 'mkp8ae2qbq') LIMIT 1&lt;/pre&gt;
where token is not selected.

I am not sure if it is that good at all that a `valid?` call ends up in a instantiation of a new record and calling the initialize callbacks.
Could it not just check the row without a new instantiation?

&lt;pre&gt;
ActiveModel::MissingAttributeError: missing attribute: token
	from /home/zeus/projects/myproject/app/models/my_model.rb:9:in `init_token'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:415:in `_run_initialize_callbacks'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:1453:in `init_with'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:909:in `instantiate'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `collect!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:180:in `exists?'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/validations/uniqueness.rb:39:in `validate_each'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:154:in `validate'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:151:in `each'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:151:in `validate'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:314:in `send'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:314:in `_callback_before_1265'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414:in `_run_validate_callbacks'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations.rb:212:in `run_validations!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations/callbacks.rb:67:in `run_validations!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:413:in `_run_validation_callbacks'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations/callbacks.rb:67:in `run_validations!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations.rb:179:in `valid?'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/validations.rb:55:in `valid?'
	from (irb):103
&lt;/pre&gt;</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Under some special circumstances an after_initialize callback
may lead to a missing attribute exception when combined with a
uniqueness validation.&lt;/p&gt;
&lt;p&gt;A not so uncommon scenario:&lt;/p&gt;
&lt;pre&gt;
class MyModel &amp;lt; ActiveRecord::Base

  after_initialize :init_token

  validates :token, :uniqueness =&amp;gt; true

  def init_token
    if self.token.blank?
      self.token = rand(999999) # just for demo
    end
  end
end
&lt;/pre&gt;
&lt;p&gt;MyModel has only a token column (String) in the database.&lt;/p&gt;
&lt;p&gt;Now when doing the following:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
m1 = MyModel.create
m2 = MyModel.new
m2.token = m1.token
m2.valid? # calls init_token again and throws the below exception.
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;missing attribute: token&lt;/code&gt; is because of the last
&lt;code&gt;find_by_sql&lt;/code&gt; that does a&lt;/p&gt;
&lt;pre&gt;
SELECT &lt;code&gt;grids&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; FROM &lt;code&gt;grids&lt;/code&gt; WHERE (&lt;code&gt;grids&lt;/code&gt;.&lt;code&gt;token&lt;/code&gt; = BINARY 'mkp8ae2qbq') LIMIT 1
&lt;/pre&gt;
where token is not selected.
&lt;p&gt;I am not sure if it is that good at all that a
&lt;code&gt;valid?&lt;/code&gt; call ends up in a instantiation of a new record
and calling the initialize callbacks.&lt;br&gt;
Could it not just check the row without a new instantiation?&lt;/p&gt;
&lt;pre&gt;
ActiveModel::MissingAttributeError: missing attribute: token
    from /home/zeus/projects/myproject/app/models/my_model.rb:9:in `init_token'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:415:in `_run_initialize_callbacks'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:1453:in `init_with'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:909:in `instantiate'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `collect!'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:180:in `exists?'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/validations/uniqueness.rb:39:in `validate_each'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:154:in `validate'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:151:in `each'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:151:in `validate'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:314:in `send'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:314:in `_callback_before_1265'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414:in `_run_validate_callbacks'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations.rb:212:in `run_validations!'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations/callbacks.rb:67:in `run_validations!'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:413:in `_run_validation_callbacks'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations/callbacks.rb:67:in `run_validations!'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations.rb:179:in `valid?'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/validations.rb:55:in `valid?'
    from (irb):103
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Under some special circumstances an after_initialize callback may lead to a missing attribute exception when combined with a uniqueness validation.

A not so uncommon scenario:

&lt;pre&gt;
class MyModel &lt; ActiveRecord::Base

  after_initialize :init_token

  validates :token, :uniqueness =&gt; true

  def init_token
    if self.token.blank?
      self.token = rand(999999) # just for demo
    end
  end
end
&lt;/pre&gt;

MyModel has only a token column (String) in the database.

Now when doing the following:
&lt;pre&gt;
m1 = MyModel.create
m2 = MyModel.new
m2.token = m1.token
m2.valid? # calls init_token again and throws the below exception.
&lt;/pre&gt;

`missing attribute: token` is because of the last `find_by_sql` that does a 
&lt;pre&gt;SELECT `grids`.`id` FROM `grids` WHERE (`grids`.`token` = BINARY 'mkp8ae2qbq') LIMIT 1&lt;/pre&gt;
where token is not selected.

I am not sure if it is that good at all that a `valid?` call ends up in a instantiation of a new record and calling the initialize callbacks.
Could it not just check the row without a new instantiation?

&lt;pre&gt;
ActiveModel::MissingAttributeError: missing attribute: token
	from /home/zeus/projects/myproject/app/models/my_model.rb:9:in `init_token'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:415:in `_run_initialize_callbacks'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:1453:in `init_with'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:909:in `instantiate'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `collect!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:180:in `exists?'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/validations/uniqueness.rb:39:in `validate_each'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:154:in `validate'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:151:in `each'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:151:in `validate'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:314:in `send'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:314:in `_callback_before_1265'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414:in `_run_validate_callbacks'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations.rb:212:in `run_validations!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations/callbacks.rb:67:in `run_validations!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:413:in `_run_validation_callbacks'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations/callbacks.rb:67:in `run_validations!'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations.rb:179:in `valid?'
	from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/validations.rb:55:in `valid?'
	from (irb):103
&lt;/pre&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Under some special circumstances an after_initialize callback
may lead to a missing attribute exception when combined with a
uniqueness validation.&lt;/p&gt;
&lt;p&gt;A not so uncommon scenario:&lt;/p&gt;
&lt;pre&gt;
class MyModel &amp;lt; ActiveRecord::Base

  after_initialize :init_token

  validates :token, :uniqueness =&amp;gt; true

  def init_token
    if self.token.blank?
      self.token = rand(999999) # just for demo
    end
  end
end
&lt;/pre&gt;
&lt;p&gt;MyModel has only a token column (String) in the database.&lt;/p&gt;
&lt;p&gt;Now when doing the following:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
m1 = MyModel.create
m2 = MyModel.new
m2.token = m1.token
m2.valid? # calls init_token again and throws the below exception.
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;missing attribute: token&lt;/code&gt; is because of the last
&lt;code&gt;find_by_sql&lt;/code&gt; that does a&lt;/p&gt;
&lt;pre&gt;
SELECT &lt;code&gt;grids&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; FROM &lt;code&gt;grids&lt;/code&gt; WHERE (&lt;code&gt;grids&lt;/code&gt;.&lt;code&gt;token&lt;/code&gt; = BINARY 'mkp8ae2qbq') LIMIT 1
&lt;/pre&gt;
where token is not selected.
&lt;p&gt;I am not sure if it is that good at all that a
&lt;code&gt;valid?&lt;/code&gt; call ends up in a instantiation of a new record
and calling the initialize callbacks.&lt;br&gt;
Could it not just check the row without a new instantiation?&lt;/p&gt;
&lt;pre&gt;
ActiveModel::MissingAttributeError: missing attribute: token
    from /home/zeus/projects/myproject/app/models/my_model.rb:9:in `init_token'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:415:in `_run_initialize_callbacks'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:1453:in `init_with'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:909:in `instantiate'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `collect!'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/base.rb:467:in `find_by_sql'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:180:in `exists?'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/validations/uniqueness.rb:39:in `validate_each'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:154:in `validate'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:151:in `each'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validator.rb:151:in `validate'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:314:in `send'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:314:in `_callback_before_1265'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414:in `_run_validate_callbacks'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations.rb:212:in `run_validations!'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations/callbacks.rb:67:in `run_validations!'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:413:in `_run_validation_callbacks'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations/callbacks.rb:67:in `run_validations!'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activemodel-3.0.3/lib/active_model/validations.rb:179:in `valid?'
    from /home/zeus/.rvm/gems/ruby-1.8.7-p302@rails/gems/activerecord-3.0.3/lib/active_record/validations.rb:55:in `valid?'
    from (irb):103
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-07T22:18:18+00:00</created-at>
      <creator-id type="integer">128215</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6127</number>
      <permalink>after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>after_initialize may lead to missing attribute when used with uniqueness validation</title>
      <updated-at type="datetime">2010-12-07T22:18:21+00:00</updated-at>
      <user-id type="integer">128215</user-id>
      <version type="integer">1</version>
      <user-name>Kai Schlamp</user-name>
      <creator-name>Kai Schlamp</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm also experiencing this bug in rails 2.3.11.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm also experiencing this bug in rails 2.3.11.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-02T00:50:24+00:00</created-at>
      <creator-id type="integer">128215</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6127</number>
      <permalink>after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>after_initialize may lead to missing attribute when used with uniqueness validation</title>
      <updated-at type="datetime">2011-03-02T00:50:28+00:00</updated-at>
      <user-id type="integer">17273</user-id>
      <version type="integer">2</version>
      <user-name>Carl Youngblood</user-name>
      <creator-name>Kai Schlamp</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Oops, I meant 2.3.8. In my case, activerecord/lib/active_record/base.rb is attempting to call after_initialize on line 1687 for a record that only has an id. The after_initialize method it is calling attempts to set some attributes that aren't present in the record and throws a missing attribute error.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oops, I meant 2.3.8. In my case,
activerecord/lib/active_record/base.rb is attempting to call
after_initialize on line 1687 for a record that only has an id. The
after_initialize method it is calling attempts to set some
attributes that aren't present in the record and throws a missing
attribute error.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-02T01:39:03+00:00</created-at>
      <creator-id type="integer">128215</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6127</number>
      <permalink>after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>after_initialize may lead to missing attribute when used with uniqueness validation</title>
      <updated-at type="datetime">2011-03-02T01:39:08+00:00</updated-at>
      <user-id type="integer">17273</user-id>
      <version type="integer">3</version>
      <user-name>Carl Youngblood</user-name>
      <creator-name>Kai Schlamp</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 on this one.  Also seeing it in Rails 3.0.5 with a situation very similar to the original poster (validating a column in an after_initialize callback.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 on this one. Also seeing it in Rails 3.0.5 with a situation
very similar to the original poster (validating a column in an
after_initialize callback.)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-25T16:07:07+00:00</created-at>
      <creator-id type="integer">128215</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6127</number>
      <permalink>after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>after_initialize may lead to missing attribute when used with uniqueness validation</title>
      <updated-at type="datetime">2011-03-25T16:07:14+00:00</updated-at>
      <user-id type="integer">79689</user-id>
      <version type="integer">4</version>
      <user-name>John Berry</user-name>
      <creator-name>Kai Schlamp</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ditto on what John Berry said. Rails 3.0.5.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ditto on what John Berry said. Rails 3.0.5.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-26T03:52:01+00:00</created-at>
      <creator-id type="integer">128215</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6127</number>
      <permalink>after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>after_initialize may lead to missing attribute when used with uniqueness validation</title>
      <updated-at type="datetime">2011-03-26T03:52:10+00:00</updated-at>
      <user-id type="integer">142611</user-id>
      <version type="integer">5</version>
      <user-name>Corey Ward</user-name>
      <creator-name>Kai Schlamp</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Until this is fixed properly, I'm using the following pattern to work around the issue:

    after_initialize :set_defaults

    def set_defaults
      self.foo ||= 'bar' unless attributes[&quot;foo&quot;].nil?
    end

Unfortunately this isn't the only case where this error arises when setting defaults. If you use this, try to keep note that you did so that an obscure bug you encounter in a month doesn't waste hours of your time. ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Until this is fixed properly, I'm using the following pattern to
work around the issue:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;after_initialize :set_defaults

def set_defaults
  self.foo ||= 'bar' unless attributes[&quot;foo&quot;].nil?
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unfortunately this isn't the only case where this error arises
when setting defaults. If you use this, try to keep note that you
did so that an obscure bug you encounter in a month doesn't waste
hours of your time. ;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-26T04:05:08+00:00</created-at>
      <creator-id type="integer">128215</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6127</number>
      <permalink>after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>after_initialize may lead to missing attribute when used with uniqueness validation</title>
      <updated-at type="datetime">2011-03-26T04:05:16+00:00</updated-at>
      <user-id type="integer">142611</user-id>
      <version type="integer">6</version>
      <user-name>Corey Ward</user-name>
      <creator-name>Kai Schlamp</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [827e5de60f27c6b559640eda7b79857050a72d9e]) Change exists? so that it doesn't instantiate records [#6127 state:resolved]
https://github.com/rails/rails/commit/827e5de60f27c6b559640eda7b79857050a72d9e</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/827e5de60f27c6b559640eda7b79857050a72d9e&quot;
title=
&quot;Changeset [827e5de60f27c6b559640eda7b79857050a72d9e]&quot;&gt;[827e5de60f27c6b559640eda7b79857050a72d9e]&lt;/a&gt;)
Change exists? so that it doesn't instantiate records [&lt;a href=
&quot;/projects/8994/tickets/6127&quot; title=&quot;Ticket #6127&quot;&gt;#6127&lt;/a&gt;
state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/827e5de60f27c6b559640eda7b79857050a72d9e&quot;&gt;
https://github.com/rails/rails/commit/827e5de60f27c6b559640eda7b798...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-29T13:12:20+01:00</created-at>
      <creator-id type="integer">128215</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6127</number>
      <permalink>after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>after_initialize may lead to missing attribute when used with uniqueness validation</title>
      <updated-at type="datetime">2011-03-29T13:12:31+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">7</version>
      <user-name>Repository</user-name>
      <creator-name>Kai Schlamp</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [b155fdadf334cff32a7e648c86c3c97f2f51257f]) Change exists? so that it doesn't instantiate records [#6127 state:resolved]
https://github.com/rails/rails/commit/b155fdadf334cff32a7e648c86c3c97f2f51257f</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/b155fdadf334cff32a7e648c86c3c97f2f51257f&quot;
title=
&quot;Changeset [b155fdadf334cff32a7e648c86c3c97f2f51257f]&quot;&gt;[b155fdadf334cff32a7e648c86c3c97f2f51257f]&lt;/a&gt;)
Change exists? so that it doesn't instantiate records [&lt;a href=
&quot;/projects/8994/tickets/6127&quot; title=&quot;Ticket #6127&quot;&gt;#6127&lt;/a&gt;
state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/b155fdadf334cff32a7e648c86c3c97f2f51257f&quot;&gt;
https://github.com/rails/rails/commit/b155fdadf334cff32a7e648c86c3c...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-29T13:12:22+01:00</created-at>
      <creator-id type="integer">128215</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6127</number>
      <permalink>after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>after_initialize may lead to missing attribute when used with uniqueness validation</title>
      <updated-at type="datetime">2011-03-29T13:12:41+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>Kai Schlamp</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I can confirm that that patch fixes our problem with validates_uniqueness_of.  Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can confirm that that patch fixes our problem with
validates_uniqueness_of. Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-04T22:29:16+01:00</created-at>
      <creator-id type="integer">128215</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6127</number>
      <permalink>after_initialize-may-lead-to-missing-attribute-when-used-with-uniqueness-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>after_initialize may lead to missing attribute when used with uniqueness validation</title>
      <updated-at type="datetime">2011-04-04T22:29:26+01:00</updated-at>
      <user-id type="integer">79689</user-id>
      <version type="integer">9</version>
      <user-name>John Berry</user-name>
      <creator-name>Kai Schlamp</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6127</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
