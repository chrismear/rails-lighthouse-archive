From 8e0051fdd6172b26ba6a3ab2e761d0144813cab6 Mon Sep 17 00:00:00 2001
From: Xavier Noria <fxn@hashref.com>
Date: Wed, 20 Jan 2010 10:26:47 +0100
Subject: [PATCH] renames descendents to descendants, and moves them and subclasses to their own file

---
 actionpack/test/abstract/layouts_test.rb           |    1 -
 activesupport/lib/active_support/core_ext/class.rb |    1 +
 .../lib/active_support/core_ext/class/removal.rb   |    7 ----
 .../active_support/core_ext/object/extending.rb    |   38 +------------------
 activesupport/test/core_ext/class_test.rb          |   25 +++++++++++++
 5 files changed, 28 insertions(+), 44 deletions(-)

diff --git a/actionpack/test/abstract/layouts_test.rb b/actionpack/test/abstract/layouts_test.rb
index df73d94..5c96d1c 100644
--- a/actionpack/test/abstract/layouts_test.rb
+++ b/actionpack/test/abstract/layouts_test.rb
@@ -1,5 +1,4 @@
 require 'abstract_unit'
-require 'active_support/core_ext/class/removal'
 
 module AbstractControllerTests
   module Layouts
diff --git a/activesupport/lib/active_support/core_ext/class.rb b/activesupport/lib/active_support/core_ext/class.rb
index 44ad6c8..19f8e40 100644
--- a/activesupport/lib/active_support/core_ext/class.rb
+++ b/activesupport/lib/active_support/core_ext/class.rb
@@ -2,3 +2,4 @@ require 'active_support/core_ext/class/attribute_accessors'
 require 'active_support/core_ext/class/inheritable_attributes'
 require 'active_support/core_ext/class/removal'
 require 'active_support/core_ext/class/delegating_attributes'
+require 'active_support/core_ext/class/hierarchy'
diff --git a/activesupport/lib/active_support/core_ext/class/removal.rb b/activesupport/lib/active_support/core_ext/class/removal.rb
index 652be4e..82163ee 100644
--- a/activesupport/lib/active_support/core_ext/class/removal.rb
+++ b/activesupport/lib/active_support/core_ext/class/removal.rb
@@ -16,13 +16,6 @@ class Class #:nodoc:
     Object.remove_subclasses_of(self)
   end
 
-  # Returns an array with the names of the subclasses of +self+ as strings.
-  #
-  #   Integer.subclasses # => ["Bignum", "Fixnum"]
-  def subclasses
-    Object.subclasses_of(self).map { |o| o.to_s }
-  end
-
   # Removes the classes in +klasses+ from their parent module.
   #
   # Ordinary classes belong to some module via a constant. This method computes
diff --git a/activesupport/lib/active_support/core_ext/object/extending.rb b/activesupport/lib/active_support/core_ext/object/extending.rb
index b8b6970..a41abfb 100644
--- a/activesupport/lib/active_support/core_ext/object/extending.rb
+++ b/activesupport/lib/active_support/core_ext/object/extending.rb
@@ -1,39 +1,5 @@
-require 'active_support/core_ext/class/removal'
 require 'active_support/core_ext/object/blank'
-
-class Class
-  # Rubinius
-  if defined?(Class.__subclasses__)
-    def descendents
-      subclasses = []
-      __subclasses__.each {|k| subclasses << k; subclasses.concat k.descendents }
-      subclasses
-    end
-  else
-    # MRI
-    begin
-      ObjectSpace.each_object(Class.new) {}
-
-      def descendents
-        subclasses = []
-        ObjectSpace.each_object(class << self; self; end) do |k|
-          subclasses << k unless k == self
-        end
-        subclasses
-      end
-    # JRuby
-    rescue StandardError
-      def descendents
-        subclasses = []
-        ObjectSpace.each_object(Class) do |k|
-          subclasses << k if k < self
-        end
-        subclasses.uniq!
-        subclasses
-      end
-    end
-  end
-end
+require 'active_support/core_ext/class/hierarchy'
 
 class Object
   def remove_subclasses_of(*superclasses) #:nodoc:
@@ -47,7 +13,7 @@ class Object
   def subclasses_of(*superclasses) #:nodoc:
     subclasses = []
     superclasses.each do |klass|
-      subclasses.concat klass.descendents.select {|k| k.name.blank? || k.reachable?}
+      subclasses.concat klass.descendants.select {|k| k.name.blank? || k.reachable?}
     end
     subclasses
   end
diff --git a/activesupport/test/core_ext/class_test.rb b/activesupport/test/core_ext/class_test.rb
index bb4eb3c..7677d43 100644
--- a/activesupport/test/core_ext/class_test.rb
+++ b/activesupport/test/core_ext/class_test.rb
@@ -1,5 +1,6 @@
 require 'abstract_unit'
 require 'active_support/core_ext/class'
+require 'set'
 
 class A
 end
@@ -44,4 +45,28 @@ class ClassTest < Test::Unit::TestCase
     assert_equal [], @subofsub.subclasses
     assert_equal [@sub.to_s, @subofsub.to_s].sort, @parent.subclasses.sort
   end
+  
+  def test_descendants
+    root = Class.new
+    c1   = Class.new(root)
+    c2   = Class.new(root)
+    c11  = Class.new(c1)
+    c12  = Class.new(c1)
+    c13  = Class.new(c1)
+    c21  = Class.new(c2)
+    c22  = Class.new(c2)
+    c111 = Class.new(c11)
+
+    assert_descendants root, [c1, c2, c11, c12, c13, c21, c22, c111]
+    assert_descendants c1, [c11, c12, c13, c111]
+    assert_descendants c2, [c21, c22]
+    assert_descendants c11, [c111]
+    [c12, c13, c21, c22, c111].each do |klass|
+      assert_descendants klass, []
+    end
+  end 
+  
+  def assert_descendants(klass, actual)
+    assert_equal klass.descendants.to_set, actual.to_set
+  end
 end
-- 
1.6.6

