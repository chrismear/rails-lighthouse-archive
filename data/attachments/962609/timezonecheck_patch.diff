From 2c72c06ef3d28cd2724c4d9a0bb5010875befaf9 Mon Sep 17 00:00:00 2001
From: Marc-Andre Lafortune <github@marc-andre.ca>
Date: Wed, 16 Mar 2011 09:43:14 -0400
Subject: [PATCH] Raise on invalid timezone

---
 .../lib/active_support/core_ext/time/zones.rb      |   20 +++++++-----
 activesupport/lib/active_support/railtie.rb        |    2 +-
 activesupport/test/core_ext/time_with_zone_test.rb |   31 ++++++++++++++++---
 3 files changed, 39 insertions(+), 14 deletions(-)

diff --git a/activesupport/lib/active_support/core_ext/time/zones.rb b/activesupport/lib/active_support/core_ext/time/zones.rb
index ff90d7c..3ee6053 100644
--- a/activesupport/lib/active_support/core_ext/time/zones.rb
+++ b/activesupport/lib/active_support/core_ext/time/zones.rb
@@ -39,23 +39,27 @@ class Time
 
     # Allows override of <tt>Time.zone</tt> locally inside supplied block; resets <tt>Time.zone</tt> to existing value when done.
     def use_zone(time_zone)
-      old_zone, ::Time.zone = ::Time.zone, get_zone(time_zone)
-      yield
-    ensure
-      ::Time.zone = old_zone
+      new_zone = get_zone(time_zone)
+      begin
+        old_zone, ::Time.zone = ::Time.zone, new_zone
+        yield
+      ensure
+        ::Time.zone = old_zone
+      end
     end
 
     private
+      # Returns a TimeZone instance or nil, or raises an ArgumentError for invalid timezones.
       def get_zone(time_zone)
         return time_zone if time_zone.nil? || time_zone.is_a?(ActiveSupport::TimeZone)
         # lookup timezone based on identifier (unless we've been passed a TZInfo::Timezone)
         unless time_zone.respond_to?(:period_for_local)
-          time_zone = ActiveSupport::TimeZone[time_zone] || TZInfo::Timezone.get(time_zone) rescue nil
+          time_zone = ActiveSupport::TimeZone[time_zone] || TZInfo::Timezone.get(time_zone)
         end
         # Return if a TimeZone instance, or wrap in a TimeZone instance if a TZInfo::Timezone
-        if time_zone
-          time_zone.is_a?(ActiveSupport::TimeZone) ? time_zone : ActiveSupport::TimeZone.create(time_zone.name, nil, time_zone)
-        end
+        time_zone.is_a?(ActiveSupport::TimeZone) ? time_zone : ActiveSupport::TimeZone.create(time_zone.name, nil, time_zone)
+      rescue TZInfo::InvalidTimezoneIdentifier
+        raise ArgumentError, "Invalid Timezone: #{time_zone}"
       end
   end
 
diff --git a/activesupport/lib/active_support/railtie.rb b/activesupport/lib/active_support/railtie.rb
index c2deba3..910e964 100644
--- a/activesupport/lib/active_support/railtie.rb
+++ b/activesupport/lib/active_support/railtie.rb
@@ -46,7 +46,7 @@ module ActiveSupport
     # If assigned value cannot be matched to a TimeZone, an exception will be raised.
     initializer "active_support.initialize_time_zone" do |app|
       require 'active_support/core_ext/time/zones'
-      zone_default = Time.__send__(:get_zone, app.config.time_zone)
+      zone_default = Time.__send__(:get_zone, app.config.time_zone) rescue nil
 
       unless zone_default
         raise \
diff --git a/activesupport/test/core_ext/time_with_zone_test.rb b/activesupport/test/core_ext/time_with_zone_test.rb
index bafa335..cebced5 100644
--- a/activesupport/test/core_ext/time_with_zone_test.rb
+++ b/activesupport/test/core_ext/time_with_zone_test.rb
@@ -36,6 +36,12 @@ class TimeWithZoneTest < Test::Unit::TestCase
     assert_equal @twz.object_id, @twz.in_time_zone(ActiveSupport::TimeZone['Eastern Time (US & Canada)']).object_id
   end
 
+  def test_in_time_zone_with_bad_argument
+    assert_raise(ArgumentError) { @twz.in_time_zone('No such timezone exists') }
+    assert_raise(ArgumentError) { @twz.in_time_zone(-15.hours) }
+    assert_raise(ArgumentError) { @twz.in_time_zone(Object.new) }
+  end
+
   def test_localtime
     assert_equal @twz.localtime, @twz.utc.getlocal
   end
@@ -760,6 +766,15 @@ class TimeWithZoneMethodsForTimeAndDateTimeTest < Test::Unit::TestCase
     end
   end
 
+  def test_in_time_zone_with_invalid_argument
+    assert_raise(ArgumentError) {  @t.in_time_zone("No such timezone exists") }
+    assert_raise(ArgumentError) { @dt.in_time_zone("No such timezone exists") }
+    assert_raise(ArgumentError) {  @t.in_time_zone(-15.hours) }
+    assert_raise(ArgumentError) { @dt.in_time_zone(-15.hours) }
+    assert_raise(ArgumentError) {  @t.in_time_zone(Object.new) }
+    assert_raise(ArgumentError) { @dt.in_time_zone(Object.new) }
+  end
+
   def test_in_time_zone_with_time_local_instance
     with_env_tz 'US/Eastern' do
       time = Time.local(1999, 12, 31, 19) # == Time.utc(2000)
@@ -790,6 +805,14 @@ class TimeWithZoneMethodsForTimeAndDateTimeTest < Test::Unit::TestCase
     assert_equal ActiveSupport::TimeZone['Alaska'], Time.zone
   end
 
+  def test_use_zone_raises_on_invalid_timezone
+    Time.zone = 'Alaska'
+    assert_raise ArgumentError do
+      Time.use_zone("No such timezone exists") { }
+    end
+    assert_equal ActiveSupport::TimeZone['Alaska'], Time.zone
+  end
+
   def test_time_zone_getter_and_setter
     Time.zone = ActiveSupport::TimeZone['Alaska']
     assert_equal ActiveSupport::TimeZone['Alaska'], Time.zone
@@ -843,11 +866,9 @@ class TimeWithZoneMethodsForTimeAndDateTimeTest < Test::Unit::TestCase
   end
 
   def test_time_zone_setter_with_invalid_zone
-    Time.zone = 'foo'
-    assert_nil Time.zone
-
-    Time.zone = -15.hours
-    assert_nil Time.zone
+    assert_raise(ArgumentError){ Time.zone = "No such timezone exists" }
+    assert_raise(ArgumentError){ Time.zone = -15.hours }
+    assert_raise(ArgumentError){ Time.zone = Object.new }
   end
 
   def test_current_returns_time_now_when_zone_not_set
-- 
1.7.4.1

