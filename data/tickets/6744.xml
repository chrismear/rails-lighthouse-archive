<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-26T02:22:27+01:00</created-at>
  <creator-id type="integer">146928</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6744</number>
  <permalink>activemodel-xml-serialization-patch</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>ActiveModel Xml Serialization patch</title>
  <updated-at type="datetime">2011-04-26T02:22:28+01:00</updated-at>
  <user-id type="integer">146928</user-id>
  <version type="integer">1</version>
  <user-name>jimmiesh</user-name>
  <creator-name>jimmiesh</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6744</url>
  <priority-name nil="true"></priority-name>
  <original-body>When passing a :type option to to_xml, the passed type is propagated to all string attributes in the ActiveModel.  For instance:

@@@ ruby

class Person
  include ActiveModel::Serializers::Xml
  extend ActiveModel::Naming

  attr_accessor :attributes
  def initialize(attributes)
    @attributes = attributes
  end
end    

mp = Person.new('foo' =&gt; 'string', 'bar' =&gt; 1)
puts mp.to_xml(:type =&gt; 'Person')

@@@

produces:

@@@ xml

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;person type=&quot;Person&quot;&gt;
  &lt;foo type=&quot;Person&quot;&gt;string&lt;/foo&gt;
  &lt;bar type=&quot;integer&quot;&gt;1&lt;/bar&gt;
&lt;/person&gt;

@@@ xml

We ran into this because ActiveRecord adds a type option when serializing has_many associations where the association class does not match the association name.  For instance:

@@@ ruby
has_many :cars, :class_name =&gt; 'Automobile'
@@@

In this case, we wanted the type attribute on each car in the xml, but we don't want it on the car's string attributes :).

Please consider the attached patch for inclusion in the next release of Rails.  Thanks.</original-body>
  <latest-body>When passing a :type option to to_xml, the passed type is propagated to all string attributes in the ActiveModel.  For instance:

@@@ ruby

class Person
  include ActiveModel::Serializers::Xml
  extend ActiveModel::Naming

  attr_accessor :attributes
  def initialize(attributes)
    @attributes = attributes
  end
end    

mp = Person.new('foo' =&gt; 'string', 'bar' =&gt; 1)
puts mp.to_xml(:type =&gt; 'Person')

@@@

produces:

@@@ xml

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;person type=&quot;Person&quot;&gt;
  &lt;foo type=&quot;Person&quot;&gt;string&lt;/foo&gt;
  &lt;bar type=&quot;integer&quot;&gt;1&lt;/bar&gt;
&lt;/person&gt;

@@@ xml

We ran into this because ActiveRecord adds a type option when serializing has_many associations where the association class does not match the association name.  For instance:

@@@ ruby
has_many :cars, :class_name =&gt; 'Automobile'
@@@

In this case, we wanted the type attribute on each car in the xml, but we don't want it on the car's string attributes :).

Please consider the attached patch for inclusion in the next release of Rails.  Thanks.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When passing a :type option to to_xml, the passed type is
propagated to all string attributes in the ActiveModel. For
instance:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class Person
  include ActiveModel::Serializers::Xml
  extend ActiveModel::Naming

  attr_accessor :attributes
  def initialize(attributes)
    @attributes = attributes
  end
end    

mp = Person.new('foo' =&amp;gt; 'string', 'bar' =&amp;gt; 1)
puts mp.to_xml(:type =&amp;gt; 'Person')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;produces:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;person type=&quot;Person&quot;&amp;gt;
  &amp;lt;foo type=&quot;Person&quot;&amp;gt;string&amp;lt;/foo&amp;gt;
  &amp;lt;bar type=&quot;integer&quot;&amp;gt;1&amp;lt;/bar&amp;gt;
&amp;lt;/person&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We ran into this because ActiveRecord adds a type option when
serializing has_many associations where the association class does
not match the association name. For instance:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;has_many :cars, :class_name =&amp;gt; 'Automobile'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this case, we wanted the type attribute on each car in the
xml, but we don't want it on the car's string attributes :).&lt;/p&gt;
&lt;p&gt;Please consider the attached patch for inclusion in the next
release of Rails. Thanks.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When passing a :type option to to_xml, the passed type is propagated to all string attributes in the ActiveModel.  For instance:

@@@ ruby

class Person
  include ActiveModel::Serializers::Xml
  extend ActiveModel::Naming

  attr_accessor :attributes
  def initialize(attributes)
    @attributes = attributes
  end
end    

mp = Person.new('foo' =&gt; 'string', 'bar' =&gt; 1)
puts mp.to_xml(:type =&gt; 'Person')

@@@

produces:

@@@ xml

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;person type=&quot;Person&quot;&gt;
  &lt;foo type=&quot;Person&quot;&gt;string&lt;/foo&gt;
  &lt;bar type=&quot;integer&quot;&gt;1&lt;/bar&gt;
&lt;/person&gt;

@@@ xml

We ran into this because ActiveRecord adds a type option when serializing has_many associations where the association class does not match the association name.  For instance:

@@@ ruby
has_many :cars, :class_name =&gt; 'Automobile'
@@@

In this case, we wanted the type attribute on each car in the xml, but we don't want it on the car's string attributes :).

Please consider the attached patch for inclusion in the next release of Rails.  Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When passing a :type option to to_xml, the passed type is
propagated to all string attributes in the ActiveModel. For
instance:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class Person
  include ActiveModel::Serializers::Xml
  extend ActiveModel::Naming

  attr_accessor :attributes
  def initialize(attributes)
    @attributes = attributes
  end
end    

mp = Person.new('foo' =&amp;gt; 'string', 'bar' =&amp;gt; 1)
puts mp.to_xml(:type =&amp;gt; 'Person')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;produces:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;person type=&quot;Person&quot;&amp;gt;
  &amp;lt;foo type=&quot;Person&quot;&amp;gt;string&amp;lt;/foo&amp;gt;
  &amp;lt;bar type=&quot;integer&quot;&amp;gt;1&amp;lt;/bar&amp;gt;
&amp;lt;/person&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We ran into this because ActiveRecord adds a type option when
serializing has_many associations where the association class does
not match the association name. For instance:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;has_many :cars, :class_name =&amp;gt; 'Automobile'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this case, we wanted the type attribute on each car in the
xml, but we don't want it on the car's string attributes :).&lt;/p&gt;
&lt;p&gt;Please consider the attached patch for inclusion in the next
release of Rails. Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-26T02:22:27+01:00</created-at>
      <creator-id type="integer">146928</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6744</number>
      <permalink>activemodel-xml-serialization-patch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel Xml Serialization patch</title>
      <updated-at type="datetime">2011-04-26T02:22:28+01:00</updated-at>
      <user-id type="integer">146928</user-id>
      <version type="integer">1</version>
      <user-name>jimmiesh</user-name>
      <creator-name>jimmiesh</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6744</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>18e081b7be0c72bf18cda217837f3f170fcaea4d</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-04-26T02:22:27+01:00</created-at>
      <filename>active_model_xml_fix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">1031703</id>
      <size type="integer">1815</size>
      <uploader-id type="integer">146928</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/1031703/active_model_xml_fix.diff</url>
    </attachment>
  </attachments>
</ticket>
