<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-11T15:10:41+01:00</created-at>
  <creator-id type="integer">82231</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5358</number>
  <permalink>comparison-of-time-attributes-does-not-work-as-expected</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>active_record</tag>
  <title>Comparison of Time attributes does not work as expected</title>
  <updated-at type="datetime">2011-02-02T17:01:24+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Lailson Bandeira</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5358</url>
  <priority-name nil="true"></priority-name>
  <original-body>In SQL there is the type `time`, that stores a given time of day without being attached to any date. Since Ruby doesn't have a class for handling only times, Active Record maps a `time` column to a dummy `Time` object, with the date always set to `2000-01-01`. This is useful when we are comparing two `time` attributes: since the date is the same, the comparison considers only the time, making the abstraction perfect.
However, the [abstraction leaks](http://www.joelonsoftware.com/articles/LeakyAbstractions.html) when we compare a `time` attribute with a `Time` instance from elsewhere. To make it work, the user has to manually convert it to the epoch date or compare using only `seconds_since_midnight` to consider only the time of day. And it's painful in both ways.
To solve this, I see three alternatives:

1. Make the user conscious of the epoch date and provide a method `to_dummy_time`, that transports a `Time` instance to `2000-01-01`.
2. Mark the `Time` instances that refers to time-only and compare them ignoring the date.
3. Create a `TimeOfDay` type in Ruby to handle times properly.

Among these, I think the second makes the best compromise between transparency and code (the third implementation requires a lot of code to make it work with `Date`, `DateTime` and `Time` safely). In fact, I implemented it as a plugin some time ago: http://github.com/lailsonbm/time_of_day. We're using it on a Rails 3 project with success since then. The README shows the problem and describes how we handle it.
So, what do you think guys? It shouldn't be difficult to make a patch to Rails, I surely can do this.</original-body>
  <latest-body>In SQL there is the type `time`, that stores a given time of day without being attached to any date. Since Ruby doesn't have a class for handling only times, Active Record maps a `time` column to a dummy `Time` object, with the date always set to `2000-01-01`. This is useful when we are comparing two `time` attributes: since the date is the same, the comparison considers only the time, making the abstraction perfect.
However, the [abstraction leaks](http://www.joelonsoftware.com/articles/LeakyAbstractions.html) when we compare a `time` attribute with a `Time` instance from elsewhere. To make it work, the user has to manually convert it to the epoch date or compare using only `seconds_since_midnight` to consider only the time of day. And it's painful in both ways.
To solve this, I see three alternatives:

1. Make the user conscious of the epoch date and provide a method `to_dummy_time`, that transports a `Time` instance to `2000-01-01`.
2. Mark the `Time` instances that refers to time-only and compare them ignoring the date.
3. Create a `TimeOfDay` type in Ruby to handle times properly.

Among these, I think the second makes the best compromise between transparency and code (the third implementation requires a lot of code to make it work with `Date`, `DateTime` and `Time` safely). In fact, I implemented it as a plugin some time ago: http://github.com/lailsonbm/time_of_day. We're using it on a Rails 3 project with success since then. The README shows the problem and describes how we handle it.
So, what do you think guys? It shouldn't be difficult to make a patch to Rails, I surely can do this.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In SQL there is the type &lt;code&gt;time&lt;/code&gt;, that stores a given
time of day without being attached to any date. Since Ruby doesn't
have a class for handling only times, Active Record maps a
&lt;code&gt;time&lt;/code&gt; column to a dummy &lt;code&gt;Time&lt;/code&gt; object, with
the date always set to &lt;code&gt;2000-01-01&lt;/code&gt;. This is useful when
we are comparing two &lt;code&gt;time&lt;/code&gt; attributes: since the date
is the same, the comparison considers only the time, making the
abstraction perfect.&lt;br&gt;
However, the &lt;a href=
&quot;http://www.joelonsoftware.com/articles/LeakyAbstractions.html&quot;&gt;abstraction
leaks&lt;/a&gt; when we compare a &lt;code&gt;time&lt;/code&gt; attribute with a
&lt;code&gt;Time&lt;/code&gt; instance from elsewhere. To make it work, the
user has to manually convert it to the epoch date or compare using
only &lt;code&gt;seconds_since_midnight&lt;/code&gt; to consider only the time
of day. And it's painful in both ways.&lt;br&gt;
To solve this, I see three alternatives:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the user conscious of the epoch date and provide a method
&lt;code&gt;to_dummy_time&lt;/code&gt;, that transports a &lt;code&gt;Time&lt;/code&gt;
instance to &lt;code&gt;2000-01-01&lt;/code&gt;.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Mark the &lt;code&gt;Time&lt;/code&gt; instances that refers to time-only
and compare them ignoring the date.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;TimeOfDay&lt;/code&gt; type in Ruby to handle times
properly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Among these, I think the second makes the best compromise
between transparency and code (the third implementation requires a
lot of code to make it work with &lt;code&gt;Date&lt;/code&gt;,
&lt;code&gt;DateTime&lt;/code&gt; and &lt;code&gt;Time&lt;/code&gt; safely). In fact, I
implemented it as a plugin some time ago: &lt;a href=
&quot;http://github.com/lailsonbm/time_of_day&quot;&gt;http://github.com/lailsonbm/time_of_day&lt;/a&gt;.
We're using it on a Rails 3 project with success since then. The
README shows the problem and describes how we handle it.&lt;br&gt;
So, what do you think guys? It shouldn't be difficult to make a
patch to Rails, I surely can do this.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In SQL there is the type `time`, that stores a given time of day without being attached to any date. Since Ruby doesn't have a class for handling only times, Active Record maps a `time` column to a dummy `Time` object, with the date always set to `2000-01-01`. This is useful when we are comparing two `time` attributes: since the date is the same, the comparison considers only the time, making the abstraction perfect.
However, the [abstraction leaks](http://www.joelonsoftware.com/articles/LeakyAbstractions.html) when we compare a `time` attribute with a `Time` instance from elsewhere. To make it work, the user has to manually convert it to the epoch date or compare using only `seconds_since_midnight` to consider only the time of day. And it's painful in both ways.
To solve this, I see three alternatives:

1. Make the user conscious of the epoch date and provide a method `to_dummy_time`, that transports a `Time` instance to `2000-01-01`.
2. Mark the `Time` instances that refers to time-only and compare them ignoring the date.
3. Create a `TimeOfDay` type in Ruby to handle times properly.

Among these, I think the second makes the best compromise between transparency and code (the third implementation requires a lot of code to make it work with `Date`, `DateTime` and `Time` safely). In fact, I implemented it as a plugin some time ago: http://github.com/lailsonbm/time_of_day. We're using it on a Rails 3 project with success since then. The README shows the problem and describes how we handle it.
So, what do you think guys? It shouldn't be difficult to make a patch to Rails, I surely can do this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In SQL there is the type &lt;code&gt;time&lt;/code&gt;, that stores a given
time of day without being attached to any date. Since Ruby doesn't
have a class for handling only times, Active Record maps a
&lt;code&gt;time&lt;/code&gt; column to a dummy &lt;code&gt;Time&lt;/code&gt; object, with
the date always set to &lt;code&gt;2000-01-01&lt;/code&gt;. This is useful when
we are comparing two &lt;code&gt;time&lt;/code&gt; attributes: since the date
is the same, the comparison considers only the time, making the
abstraction perfect.&lt;br&gt;
However, the &lt;a href=
&quot;http://www.joelonsoftware.com/articles/LeakyAbstractions.html&quot;&gt;abstraction
leaks&lt;/a&gt; when we compare a &lt;code&gt;time&lt;/code&gt; attribute with a
&lt;code&gt;Time&lt;/code&gt; instance from elsewhere. To make it work, the
user has to manually convert it to the epoch date or compare using
only &lt;code&gt;seconds_since_midnight&lt;/code&gt; to consider only the time
of day. And it's painful in both ways.&lt;br&gt;
To solve this, I see three alternatives:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the user conscious of the epoch date and provide a method
&lt;code&gt;to_dummy_time&lt;/code&gt;, that transports a &lt;code&gt;Time&lt;/code&gt;
instance to &lt;code&gt;2000-01-01&lt;/code&gt;.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Mark the &lt;code&gt;Time&lt;/code&gt; instances that refers to time-only
and compare them ignoring the date.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;TimeOfDay&lt;/code&gt; type in Ruby to handle times
properly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Among these, I think the second makes the best compromise
between transparency and code (the third implementation requires a
lot of code to make it work with &lt;code&gt;Date&lt;/code&gt;,
&lt;code&gt;DateTime&lt;/code&gt; and &lt;code&gt;Time&lt;/code&gt; safely). In fact, I
implemented it as a plugin some time ago: &lt;a href=
&quot;http://github.com/lailsonbm/time_of_day&quot;&gt;http://github.com/lailsonbm/time_of_day&lt;/a&gt;.
We're using it on a Rails 3 project with success since then. The
README shows the problem and describes how we handle it.&lt;br&gt;
So, what do you think guys? It shouldn't be difficult to make a
patch to Rails, I surely can do this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-11T15:10:41+01:00</created-at>
      <creator-id type="integer">82231</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5358</number>
      <permalink>comparison-of-time-attributes-does-not-work-as-expected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record</tag>
      <title>Comparison of Time attributes does not work as expected</title>
      <updated-at type="datetime">2010-08-28T17:23:21+01:00</updated-at>
      <user-id type="integer">82231</user-id>
      <version type="integer">1</version>
      <user-name>Lailson Bandeira</user-name>
      <creator-name>Lailson Bandeira</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5358</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:33:13+00:00</created-at>
      <creator-id type="integer">82231</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5358</number>
      <permalink>comparison-of-time-attributes-does-not-work-as-expected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>active_record</tag>
      <title>Comparison of Time attributes does not work as expected</title>
      <updated-at type="datetime">2011-02-02T17:01:11+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Lailson Bandeira</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5358</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:33:14+00:00</created-at>
      <creator-id type="integer">82231</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5358</number>
      <permalink>comparison-of-time-attributes-does-not-work-as-expected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>active_record</tag>
      <title>Comparison of Time attributes does not work as expected</title>
      <updated-at type="datetime">2011-02-02T17:01:24+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Lailson Bandeira</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5358</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
