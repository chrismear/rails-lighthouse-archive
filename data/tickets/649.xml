<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-21T01:47:08+01:00</created-at>
  <creator-id type="integer">23224</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">649</number>
  <permalink>validation-issue-with-habtm</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>bug habtm has_and_belongs_to_many validation</tag>
  <title>Validation issue with HABTM</title>
  <updated-at type="datetime">2010-07-21T01:47:08+01:00</updated-at>
  <user-id type="integer">57204</user-id>
  <version type="integer">6</version>
  <user-name>xinuc</user-name>
  <creator-name>flip</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/649</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Validation of attributes by the model layer is not always possible with a HABTM relationships.

Here is a simple situation so you can understand where i'm going :

Condition Model

@@@ ruby
class Condition &lt; ActiveRecord::Base
	has_and_belongs_to_many :departments, :order =&gt; 'numero ASC'
	
	validates_presence_of :departments	
end
@@@

Departments Model

@@@ ruby
class Department &lt; ActiveRecord::Base
	has_and_belongs_to_many :conditions
end
@@@

Condition Controller

@@@ ruby
class ConditionController &lt; ApplicationController
	
	def edit
		params[:condition] ||= {}
		params[:condition][:department_ids] ||= []
		
		@condition = Condition.find_by_id(params[:id])
		
		if request.post? and @condition.update_attributes(params[:condition])
			flash[:notice] = &quot;Updated successfully&quot;
			redirect_to :action =&gt; :list
		end
	end
end
@@@

Let's assume the tables and the join table (conditions_departments)are created.

Well the thing is : we want to ensure there is a least one department associated with a condition. On creation, there is no problem, if departments is empty the condtion object is not created

@@@ ruby
department = Department.new.save

condition = Condition.new(:department_ids =&gt; [])
condition.save
=&gt; false
condition.departments&lt;&lt;department
condition.save
=&gt;true
@@@

However on update, (with update_attributes), if the validation fails on departments the condition object is not updated, but the join table conditions_departments is updated with the invalid data.

@@@ ruby
condition.department_ids = []
condition.valid?
=&gt;false
condition.departments.empty?
=&gt;true
@@@

The thing is that whenever you do something like :

@@@ ruby
condition.department_ids = something
condition.departments = something
@@@ 

It gets saved instantly on the database, and update_attributes uses this kind of assignation method. So even if there is an error on the association it gets saved.

To ensure we don't save invalid data on the database we've got to make some validation on the contoller layer : testing directly the data or calling a validation method which ensure the data in the params hash is correct.

Ok but if we follow the MVC architecture the validation has to stay to the model layer.

If the collection of an HABTM association doesn't gets instantly saved on modifications it'd be great, and so convenient. I still don't understand why this choice of instant save has been made</original-body>
  <latest-body>Validation of attributes by the model layer is not always possible with a HABTM relationships.

Here is a simple situation so you can understand where i'm going :

Condition Model

@@@ ruby
class Condition &lt; ActiveRecord::Base
	has_and_belongs_to_many :departments, :order =&gt; 'numero ASC'
	
	validates_presence_of :departments	
end
@@@

Departments Model

@@@ ruby
class Department &lt; ActiveRecord::Base
	has_and_belongs_to_many :conditions
end
@@@

Condition Controller

@@@ ruby
class ConditionController &lt; ApplicationController
	
	def edit
		params[:condition] ||= {}
		params[:condition][:department_ids] ||= []
		
		@condition = Condition.find_by_id(params[:id])
		
		if request.post? and @condition.update_attributes(params[:condition])
			flash[:notice] = &quot;Updated successfully&quot;
			redirect_to :action =&gt; :list
		end
	end
end
@@@

Let's assume the tables and the join table (conditions_departments)are created.

Well the thing is : we want to ensure there is a least one department associated with a condition. On creation, there is no problem, if departments is empty the condtion object is not created

@@@ ruby
department = Department.new.save

condition = Condition.new(:department_ids =&gt; [])
condition.save
=&gt; false
condition.departments&lt;&lt;department
condition.save
=&gt;true
@@@

However on update, (with update_attributes), if the validation fails on departments the condition object is not updated, but the join table conditions_departments is updated with the invalid data.

@@@ ruby
condition.department_ids = []
condition.valid?
=&gt;false
condition.departments.empty?
=&gt;true
@@@

The thing is that whenever you do something like :

@@@ ruby
condition.department_ids = something
condition.departments = something
@@@ 

It gets saved instantly on the database, and update_attributes uses this kind of assignation method. So even if there is an error on the association it gets saved.

To ensure we don't save invalid data on the database we've got to make some validation on the contoller layer : testing directly the data or calling a validation method which ensure the data in the params hash is correct.

Ok but if we follow the MVC architecture the validation has to stay to the model layer.

If the collection of an HABTM association doesn't gets instantly saved on modifications it'd be great, and so convenient. I still don't understand why this choice of instant save has been made</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Validation of attributes by the model layer is not always possible with a HABTM relationships.
&lt;/p&gt;&lt;p&gt;
Here is a simple situation so you can understand where i'm going :
&lt;/p&gt;&lt;p&gt;
Condition Model
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Condition &amp;lt; ActiveRecord::Base
	has_and_belongs_to_many :departments, :order =&amp;gt; 'numero ASC'
	
	validates_presence_of :departments	
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Departments Model
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Department &amp;lt; ActiveRecord::Base
	has_and_belongs_to_many :conditions
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Condition Controller
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class ConditionController &amp;lt; ApplicationController
	
	def edit
		params[:condition] ||= {}
		params[:condition][:department_ids] ||= []
		
		@condition = Condition.find_by_id(params[:id])
		
		if request.post? and @condition.update_attributes(params[:condition])
			flash[:notice] = &amp;quot;Updated successfully&amp;quot;
			redirect_to :action =&amp;gt; :list
		end
	end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Let's assume the tables and the join table (conditions_departments)are created.
&lt;/p&gt;&lt;p&gt;
Well the thing is : we want to ensure there is a least one department associated with a condition. On creation, there is no problem, if departments is empty the condtion object is not created
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;department = Department.new.save

condition = Condition.new(:department_ids =&amp;gt; [])
condition.save
=&amp;gt; false
condition.departments&amp;lt;&amp;lt;department
condition.save
=&amp;gt;true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
However on update, (with update_attributes), if the validation fails on departments the condition object is not updated, but the join table conditions_departments is updated with the invalid data.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;condition.department_ids = []
condition.valid?
=&amp;gt;false
condition.departments.empty?
=&amp;gt;true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The thing is that whenever you do something like :
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;condition.department_ids = something
condition.departments = something&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
It gets saved instantly on the database, and update_attributes uses this kind of assignation method. So even if there is an error on the association it gets saved.
&lt;/p&gt;&lt;p&gt;
To ensure we don't save invalid data on the database we've got to make some validation on the contoller layer : testing directly the data or calling a validation method which ensure the data in the params hash is correct.
&lt;/p&gt;&lt;p&gt;
Ok but if we follow the MVC architecture the validation has to stay to the model layer.
&lt;/p&gt;&lt;p&gt;
If the collection of an HABTM association doesn't gets instantly saved on modifications it'd be great, and so convenient. I still don't understand why this choice of instant save has been made
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Validation of attributes by the model layer is not always possible with a HABTM relationships.

Here is a simple situation so you can understand where i'm going :

Condition Model

@@@ ruby
class Condition &lt; ActiveRecord::Base
	has_and_belongs_to_many :departments, :order =&gt; 'numero ASC'
	
	validates_presence_of :departments	
end
@@@

Departments Model

@@@ ruby
class Department &lt; ActiveRecord::Base
	has_and_belongs_to_many :conditions
end
@@@

Condition Controller

@@@ ruby
class ConditionController &lt; ApplicationController
	
	def edit
		params[:condition] ||= {}
		params[:condition][:department_ids] ||= []
		
		@condition = Condition.find_by_id(params[:id])
		
		if request.post? and @condition.update_attributes(params[:condition])
			flash[:notice] = &quot;Updated successfully&quot;
			redirect_to :action =&gt; :list
		end
	end
end
@@@

Let's assume the tables and the join table (conditions_departments)are created.

Well the thing is : we want to ensure there is a least one department associated with a condition. On creation, there is no problem, if departments is empty the condtion object is not created

@@@ ruby
department = Department.new.save

condition = Condition.new(:department_ids =&gt; [])
condition.save
=&gt; false
condition.departments&lt;&lt;department
condition.save
=&gt;true
@@@

However on update, (with update_attributes), if the validation fails on departments the condition object is not updated, but the join table conditions_departments is updated with the invalid data.

@@@ ruby
condition.department_ids = []
condition.valid?
=&gt;false
condition.departments.empty?
=&gt;true
@@@

The thing is that whenever you do something like :

@@@ ruby
condition.department_ids = something
condition.departments = something
@@@ 

It gets saved instantly on the database, and update_attributes uses this kind of assignation method. So even if there is an error on the association it gets saved.

To ensure we don't save invalid data on the database we've got to make some validation on the contoller layer : testing directly the data or calling a validation method which ensure the data in the params hash is correct.

Ok but if we follow the MVC architecture the validation has to stay to the model layer.

If the collection of an HABTM association doesn't gets instantly saved on modifications it'd be great, and so convenient. I still don't understand why this choice of instant save has been made</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Validation of attributes by the model layer is not always possible with a HABTM relationships.
&lt;/p&gt;&lt;p&gt;
Here is a simple situation so you can understand where i'm going :
&lt;/p&gt;&lt;p&gt;
Condition Model
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Condition &amp;lt; ActiveRecord::Base
	has_and_belongs_to_many :departments, :order =&amp;gt; 'numero ASC'
	
	validates_presence_of :departments	
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Departments Model
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Department &amp;lt; ActiveRecord::Base
	has_and_belongs_to_many :conditions
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Condition Controller
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class ConditionController &amp;lt; ApplicationController
	
	def edit
		params[:condition] ||= {}
		params[:condition][:department_ids] ||= []
		
		@condition = Condition.find_by_id(params[:id])
		
		if request.post? and @condition.update_attributes(params[:condition])
			flash[:notice] = &amp;quot;Updated successfully&amp;quot;
			redirect_to :action =&amp;gt; :list
		end
	end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Let's assume the tables and the join table (conditions_departments)are created.
&lt;/p&gt;&lt;p&gt;
Well the thing is : we want to ensure there is a least one department associated with a condition. On creation, there is no problem, if departments is empty the condtion object is not created
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;department = Department.new.save

condition = Condition.new(:department_ids =&amp;gt; [])
condition.save
=&amp;gt; false
condition.departments&amp;lt;&amp;lt;department
condition.save
=&amp;gt;true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
However on update, (with update_attributes), if the validation fails on departments the condition object is not updated, but the join table conditions_departments is updated with the invalid data.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;condition.department_ids = []
condition.valid?
=&amp;gt;false
condition.departments.empty?
=&amp;gt;true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The thing is that whenever you do something like :
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;condition.department_ids = something
condition.departments = something&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
It gets saved instantly on the database, and update_attributes uses this kind of assignation method. So even if there is an error on the association it gets saved.
&lt;/p&gt;&lt;p&gt;
To ensure we don't save invalid data on the database we've got to make some validation on the contoller layer : testing directly the data or calling a validation method which ensure the data in the params hash is correct.
&lt;/p&gt;&lt;p&gt;
Ok but if we follow the MVC architecture the validation has to stay to the model layer.
&lt;/p&gt;&lt;p&gt;
If the collection of an HABTM association doesn't gets instantly saved on modifications it'd be great, and so convenient. I still don't understand why this choice of instant save has been made
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-18T00:38:39+01:00</created-at>
      <creator-id type="integer">23224</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">649</number>
      <permalink>validation-issue-with-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug habtm has_and_belongs_to_many validation</tag>
      <title>Validation issue with HABTM</title>
      <updated-at type="datetime">2008-07-18T00:38:39+01:00</updated-at>
      <user-id type="integer">23224</user-id>
      <version type="integer">1</version>
      <user-name>flip</user-name>
      <creator-name>flip</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/649</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>workaround: http://code.google.com/p/habtm-with-deferred-save/</body>
      <body-html>&lt;div&gt;&lt;p&gt;
workaround: &lt;a href=&quot;http://code.google.com/p/habtm-with-deferred-save/&quot;&gt;http://code.google.com/p/habtm-w...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-18T00:49:29+01:00</created-at>
      <creator-id type="integer">23224</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">649</number>
      <permalink>validation-issue-with-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug habtm has_and_belongs_to_many validation</tag>
      <title>Validation issue with HABTM</title>
      <updated-at type="datetime">2008-07-18T00:49:29+01:00</updated-at>
      <user-id type="integer">23224</user-id>
      <version type="integer">2</version>
      <user-name>flip</user-name>
      <creator-name>flip</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/649</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Staling out, please reopen if this is still a problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Staling out, please reopen if this is still a problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-28T16:27:14+00:00</created-at>
      <creator-id type="integer">23224</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">649</number>
      <permalink>validation-issue-with-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>bug habtm has_and_belongs_to_many validation</tag>
      <title>Validation issue with HABTM</title>
      <updated-at type="datetime">2008-10-28T16:27:16+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">3</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>flip</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/649</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is still an issue...</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is still an issue...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-05T07:47:23+01:00</created-at>
      <creator-id type="integer">23224</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">649</number>
      <permalink>validation-issue-with-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>bug habtm has_and_belongs_to_many validation</tag>
      <title>Validation issue with HABTM</title>
      <updated-at type="datetime">2009-06-05T07:47:27+01:00</updated-at>
      <user-id type="integer">58993</user-id>
      <version type="integer">4</version>
      <user-name>Paul McMahon</user-name>
      <creator-name>flip</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/649</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It's also a problem for has_many :through</body>
      <body-html>&lt;div&gt;&lt;p&gt;It's also a problem for has_many :through&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-09T05:48:12+00:00</created-at>
      <creator-id type="integer">23224</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">649</number>
      <permalink>validation-issue-with-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>bug habtm has_and_belongs_to_many validation</tag>
      <title>Validation issue with HABTM</title>
      <updated-at type="datetime">2009-11-09T05:48:16+00:00</updated-at>
      <user-id type="integer">57204</user-id>
      <version type="integer">5</version>
      <user-name>xinuc</user-name>
      <creator-name>flip</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/649</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-09T06:07:05+00:00</created-at>
      <creator-id type="integer">23224</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">649</number>
      <permalink>validation-issue-with-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>bug habtm has_and_belongs_to_many validation</tag>
      <title>Validation issue with HABTM</title>
      <updated-at type="datetime">2009-11-09T06:07:08+00:00</updated-at>
      <user-id type="integer">57204</user-id>
      <version type="integer">6</version>
      <user-name>xinuc</user-name>
      <creator-name>flip</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/649</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>e culpability &lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com/designer-jewelry/bvlgari-jewelry.html&quot;&gt;discount Bvlgari on sale&lt;/a&gt;&lt;/b&gt; give blessing manifold portrait &lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com/designer-jewelry/cartier-jewelry.html&quot;&gt;replica Cartier wholeslae&lt;/a&gt;&lt;/b&gt; designer watches through charge &lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com&quot;&gt;jewelry designer&lt;/a&gt;&lt;/b&gt; of appropriate unique idiosyncratic &lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com/designer-jewelry/chanel-jewelry.html&quot;&gt;replica Chanel wholeslae&lt;/a&gt;&lt;/b&gt; designer guide. They burden &lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com/designer-jewelry/chanel-jewelry.html&quot;&gt;cheap Chanel&lt;/a&gt;&lt;/b&gt; conclude matching designs bury &lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com&quot;&gt;jewelry designer&lt;/a&gt;&lt;/b&gt; conspicuously of their favorite &lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com&quot;&gt;fake designer jewelry&lt;/a&gt;&lt;/b&gt; build costumes. appearance watches &lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com&quot;&gt;designer jewelry on sale&lt;/a&gt;&lt;/b&gt; scrutinize corresponding beget trends &lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com/designer-jewelry/bvlgari-jewelry.html&quot;&gt;cheap Bvlgari&lt;/a&gt;&lt;/b&gt; savor their personal c &lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com/designer-jewelry/links-of-london-jewelry.html&quot;&gt;cheap Links of London on sale&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;e culpability &lt;b&gt;&lt;a href=
&quot;http://www.silverdesignerjewelry.com/designer-jewelry/bvlgari-jewelry.html&quot;&gt;
discount Bvlgari on sale&lt;/a&gt;&lt;/b&gt; give blessing manifold portrait
&lt;b&gt;&lt;a href=
&quot;http://www.silverdesignerjewelry.com/designer-jewelry/cartier-jewelry.html&quot;&gt;
replica Cartier wholeslae&lt;/a&gt;&lt;/b&gt; designer watches through charge
&lt;b&gt;&lt;a href=&quot;http://www.silverdesignerjewelry.com&quot;&gt;jewelry
designer&lt;/a&gt;&lt;/b&gt; of appropriate unique idiosyncratic &lt;b&gt;&lt;a href=
&quot;http://www.silverdesignerjewelry.com/designer-jewelry/chanel-jewelry.html&quot;&gt;
replica Chanel wholeslae&lt;/a&gt;&lt;/b&gt; designer guide. They burden
&lt;b&gt;&lt;a href=
&quot;http://www.silverdesignerjewelry.com/designer-jewelry/chanel-jewelry.html&quot;&gt;
cheap Chanel&lt;/a&gt;&lt;/b&gt; conclude matching designs bury &lt;b&gt;&lt;a href=
&quot;http://www.silverdesignerjewelry.com&quot;&gt;jewelry designer&lt;/a&gt;&lt;/b&gt;
conspicuously of their favorite &lt;b&gt;&lt;a href=
&quot;http://www.silverdesignerjewelry.com&quot;&gt;fake designer
jewelry&lt;/a&gt;&lt;/b&gt; build costumes. appearance watches &lt;b&gt;&lt;a href=
&quot;http://www.silverdesignerjewelry.com&quot;&gt;designer jewelry on
sale&lt;/a&gt;&lt;/b&gt; scrutinize corresponding beget trends &lt;b&gt;&lt;a href=
&quot;http://www.silverdesignerjewelry.com/designer-jewelry/bvlgari-jewelry.html&quot;&gt;
cheap Bvlgari&lt;/a&gt;&lt;/b&gt; savor their personal c &lt;b&gt;&lt;a href=
&quot;http://www.silverdesignerjewelry.com/designer-jewelry/links-of-london-jewelry.html&quot;&gt;
cheap Links of London on sale&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-19T09:22:09+01:00</created-at>
      <creator-id type="integer">23224</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">649</number>
      <permalink>validation-issue-with-habtm</permalink>
      <priority type="integer">131</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>bug habtm has_and_belongs_to_many validation</tag>
      <title>Validation issue with HABTM</title>
      <updated-at type="datetime">2010-07-21T01:47:08+01:00</updated-at>
      <user-id type="integer">107778</user-id>
      <version type="integer">7</version>
      <user-name>xiaobao</user-name>
      <creator-name>flip</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/649</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
