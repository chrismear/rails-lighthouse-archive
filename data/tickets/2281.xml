<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-17T23:21:25+00:00</created-at>
  <creator-id type="integer">50893</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2281</number>
  <permalink>value_changed-helper-method</permalink>
  <priority type="integer">1457</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>patch tested texthelper text_helper</tag>
  <title>value_changed? helper method</title>
  <updated-at type="datetime">2009-03-22T05:55:36+00:00</updated-at>
  <user-id type="integer">50893</user-id>
  <version type="integer">6</version>
  <user-name>Jason Arora</user-name>
  <creator-name>Jason Arora</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2281</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Added a new helper method to TextHelper called value_changed?, also includes test cases and documentation.

value_changed? tracks the value passed in and returns true whenever the value changes from its previous setting. It can be useful when iterating through a set of data that is organized in subsets to display a new title for each subset.

@@@ html
# Assuming people has been sorted by occupation...
&lt;% @people.each do |person| %&gt;
  &lt;%= &quot;&lt;h2&gt;#{person.occupation.pluralize}&lt;/h2&gt;&quot; if value_changed?(person.occupation) %&gt;
  &lt;%= person.name %&gt;&lt;br/&gt;
&lt;% end %&gt;
@@@

This produces:
@@@ html
&lt;h2&gt;Doctors&lt;/h2&gt;
Jane Doe
John Smith
&lt;h2&gt;Programmers&lt;/h2&gt;
Rails Rules
@@@

This little bit of code replaces the common pattern of:
@@@ html
&lt;% previous_value = nil %&gt;
&lt;% @people.each do |person| %&gt;
  &lt;% if previous_value != person.occupation %&gt;
    &lt;% previous_value = person.occupation %&gt;
    &lt;h2&gt;&lt;%= person.occupation.pluralize %&gt;&lt;/h2&gt;
  &lt;% end %&gt;
  &lt;%= person.name %&gt;&lt;br/&gt;
&lt;% end %&gt;
@@@

Also, value_changed? also accepts a name parameter to support nesting in loops (by default, the value is named &quot;default&quot;).

I hope this is useful for others. It sure has been handy in my projects. Thanks!</original-body>
  <latest-body>Added a new helper method to TextHelper called value_changed?, also includes test cases and documentation.

value_changed? tracks the value passed in and returns true whenever the value changes from its previous setting. It can be useful when iterating through a set of data that is organized in subsets to display a new title for each subset.

@@@ html
# Assuming people has been sorted by occupation...
&lt;% @people.each do |person| %&gt;
  &lt;%= &quot;&lt;h2&gt;#{person.occupation.pluralize}&lt;/h2&gt;&quot; if value_changed?(person.occupation) %&gt;
  &lt;%= person.name %&gt;&lt;br/&gt;
&lt;% end %&gt;
@@@

This produces:
@@@ html
&lt;h2&gt;Doctors&lt;/h2&gt;
Jane Doe
John Smith
&lt;h2&gt;Programmers&lt;/h2&gt;
Rails Rules
@@@

This little bit of code replaces the common pattern of:
@@@ html
&lt;% previous_value = nil %&gt;
&lt;% @people.each do |person| %&gt;
  &lt;% if previous_value != person.occupation %&gt;
    &lt;% previous_value = person.occupation %&gt;
    &lt;h2&gt;&lt;%= person.occupation.pluralize %&gt;&lt;/h2&gt;
  &lt;% end %&gt;
  &lt;%= person.name %&gt;&lt;br/&gt;
&lt;% end %&gt;
@@@

Also, value_changed? also accepts a name parameter to support nesting in loops (by default, the value is named &quot;default&quot;).

I hope this is useful for others. It sure has been handy in my projects. Thanks!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Added a new helper method to TextHelper called value_changed?,
also includes test cases and documentation.&lt;/p&gt;
&lt;p&gt;value_changed? tracks the value passed in and returns true
whenever the value changes from its previous setting. It can be
useful when iterating through a set of data that is organized in
subsets to display a new title for each subset.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
# Assuming people has been sorted by occupation...
&amp;lt;% @people.each do |person| %&amp;gt;
  &amp;lt;%= &amp;quot;&amp;lt;h2&amp;gt;#{person.occupation.pluralize}&amp;lt;/h2&amp;gt;&amp;quot; if value_changed?(person.occupation) %&amp;gt;
  &amp;lt;%= person.name %&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This produces:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;h2&amp;gt;Doctors&amp;lt;/h2&amp;gt;
Jane Doe
John Smith
&amp;lt;h2&amp;gt;Programmers&amp;lt;/h2&amp;gt;
Rails Rules
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This little bit of code replaces the common pattern of:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;% previous_value = nil %&amp;gt;
&amp;lt;% @people.each do |person| %&amp;gt;
  &amp;lt;% if previous_value != person.occupation %&amp;gt;
    &amp;lt;% previous_value = person.occupation %&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;%= person.occupation.pluralize %&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;% end %&amp;gt;
  &amp;lt;%= person.name %&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, value_changed? also accepts a name parameter to support
nesting in loops (by default, the value is named &quot;default&quot;).&lt;/p&gt;
&lt;p&gt;I hope this is useful for others. It sure has been handy in my
projects. Thanks!&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Added a new helper method to TextHelper called value_changed?, also includes test cases and documentation.

value_changed? tracks the value passed in and returns true whenever the value changes from its previous setting. It can be useful when iterating through a set of data that is organized in subsets to display a new title for each subset.

@@@ html
# Assuming people has been sorted by occupation...
&lt;% @people.each do |person| %&gt;
  &lt;%= &quot;&lt;h2&gt;#{person.occupation.pluralize}&lt;/h2&gt;&quot; if value_changed?(person.occupation) %&gt;
  &lt;%= person.name %&gt;&lt;br/&gt;
&lt;% end %&gt;
@@@

This produces:
@@@ html
&lt;h2&gt;Doctors&lt;/h2&gt;
Jane Doe
John Smith
&lt;h2&gt;Programmers&lt;/h2&gt;
Rails Rules
@@@

This little bit of code replaces the common pattern of:
@@@ html
&lt;% previous_value = nil %&gt;
&lt;% @people.each do |person| %&gt;
  &lt;% if previous_value != person.occupation %&gt;
    &lt;% previous_value = person.occupation %&gt;
    &lt;h2&gt;&lt;%= person.occupation.pluralize %&gt;&lt;/h2&gt;
  &lt;% end %&gt;
  &lt;%= person.name %&gt;&lt;br/&gt;
&lt;% end %&gt;
@@@

Also, value_changed? accepts a name parameter to support nesting in loops (by default, the value is named &quot;default&quot;).

I hope this is useful for others. It sure has been handy in my projects. Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Added a new helper method to TextHelper called value_changed?,
also includes test cases and documentation.&lt;/p&gt;
&lt;p&gt;value_changed? tracks the value passed in and returns true
whenever the value changes from its previous setting. It can be
useful when iterating through a set of data that is organized in
subsets to display a new title for each subset.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
# Assuming people has been sorted by occupation...
&amp;lt;% @people.each do |person| %&amp;gt;
  &amp;lt;%= &amp;quot;&amp;lt;h2&amp;gt;#{person.occupation.pluralize}&amp;lt;/h2&amp;gt;&amp;quot; if value_changed?(person.occupation) %&amp;gt;
  &amp;lt;%= person.name %&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This produces:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;h2&amp;gt;Doctors&amp;lt;/h2&amp;gt;
Jane Doe
John Smith
&amp;lt;h2&amp;gt;Programmers&amp;lt;/h2&amp;gt;
Rails Rules
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This little bit of code replaces the common pattern of:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;% previous_value = nil %&amp;gt;
&amp;lt;% @people.each do |person| %&amp;gt;
  &amp;lt;% if previous_value != person.occupation %&amp;gt;
    &amp;lt;% previous_value = person.occupation %&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;%= person.occupation.pluralize %&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;% end %&amp;gt;
  &amp;lt;%= person.name %&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, value_changed? accepts a name parameter to support nesting
in loops (by default, the value is named &quot;default&quot;).&lt;/p&gt;
&lt;p&gt;I hope this is useful for others. It sure has been handy in my
projects. Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T23:21:25+00:00</created-at>
      <creator-id type="integer">50893</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2281</number>
      <permalink>value_changed-helper-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch tested texthelper text_helper</tag>
      <title>value_changed? helper method</title>
      <updated-at type="datetime">2009-03-17T23:23:02+00:00</updated-at>
      <user-id type="integer">50893</user-id>
      <version type="integer">1</version>
      <user-name>Jason Arora</user-name>
      <creator-name>Jason Arora</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2281</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Are there other use cases?

Do you see this as much better than using Enumerable#group_by?  (http://api.rubyonrails.org/classes/Enumerable.html#M002506)

@@@ ruby
&lt;% @people.group_by(&amp;:occupation).each do |occupation, peeps| %&gt;
  &lt;h2&gt;&lt;%= occupation %&gt;&lt;/h2&gt;
  &lt;% peeps.each do |person| %&gt;
    &lt;%= person.name %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Are there other use cases?&lt;/p&gt;
&lt;p&gt;Do you see this as much better than using Enumerable#group_by?
(&lt;a href=&quot;http://api.rubyonrails.org/classes/Enumerable.html#M002506&quot;&gt;http://api.rubyonrails.org/class...&lt;/a&gt;)&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;% @people.group_by(&amp;amp;:occupation).each do |occupation, peeps| %&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;%= occupation %&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;% peeps.each do |person| %&amp;gt;
    &amp;lt;%= person.name %&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-18T16:35:39+00:00</created-at>
      <creator-id type="integer">50893</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2281</number>
      <permalink>value_changed-helper-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch tested texthelper text_helper</tag>
      <title>value_changed? helper method</title>
      <updated-at type="datetime">2009-03-18T16:35:44+00:00</updated-at>
      <user-id type="integer">50986</user-id>
      <version type="integer">2</version>
      <user-name>Ian Terrell</user-name>
      <creator-name>Jason Arora</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2281</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks for posting, Ian. You are correct, Enumerable#group_by is the best way to handle this pattern when ordering by a model attribute.

However, the value_changed? method works really well for dynamic cases, such as:

@@@ html
&lt;% @people.each do |person| %&gt;
  &lt;%= &quot;&lt;h2&gt;#{person.name.first}&lt;/h2&gt;&quot; if value_changed?(person.name.first) %&gt;
  &lt;%= person.name %&gt;&lt;br/&gt;
&lt;% end %&gt;

# =&gt; &lt;h2&gt;A&lt;/h2&gt;
# =&gt; Alan
# =&gt; Amy
# =&gt; &lt;h2&gt;B&lt;/h2&gt;
# =&gt; Barry
# =&gt; ...
@@@

Is this more acceptable? Thanks again for the feedback.

Regards,
Jason</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for posting, Ian. You are correct, Enumerable#group_by is
the best way to handle this pattern when ordering by a model
attribute.&lt;/p&gt;
&lt;p&gt;However, the value_changed? method works really well for dynamic
cases, such as:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;% @people.each do |person| %&amp;gt;
  &amp;lt;%= &amp;quot;&amp;lt;h2&amp;gt;#{person.name.first}&amp;lt;/h2&amp;gt;&amp;quot; if value_changed?(person.name.first) %&amp;gt;
  &amp;lt;%= person.name %&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;% end %&amp;gt;

# =&amp;gt; &amp;lt;h2&amp;gt;A&amp;lt;/h2&amp;gt;
# =&amp;gt; Alan
# =&amp;gt; Amy
# =&amp;gt; &amp;lt;h2&amp;gt;B&amp;lt;/h2&amp;gt;
# =&amp;gt; Barry
# =&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is this more acceptable? Thanks again for the feedback.&lt;/p&gt;
&lt;p&gt;Regards, Jason&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-21T02:01:24+00:00</created-at>
      <creator-id type="integer">50893</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2281</number>
      <permalink>value_changed-helper-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch tested texthelper text_helper</tag>
      <title>value_changed? helper method</title>
      <updated-at type="datetime">2009-03-21T02:01:28+00:00</updated-at>
      <user-id type="integer">50893</user-id>
      <version type="integer">3</version>
      <user-name>Jason Arora</user-name>
      <creator-name>Jason Arora</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2281</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>For this use case, Enumerable#group_by still seems best.  The &amp;:symbol syntax is shorthand for a block; you can spell it out for cases where you wish to group by something that isn't a method:

@@@ ruby
&lt;% @people.group_by{|person|person.name.first}.each do |initial, peeps| %&gt;
  &lt;h2&gt;&lt;%= initial %&gt;&lt;/h2&gt;
  &lt;% peeps.each do |person| %&gt;
    &lt;%= person.name %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;For this use case, Enumerable#group_by still seems best. The
&amp;amp;:symbol syntax is shorthand for a block; you can spell it out
for cases where you wish to group by something that isn't a
method:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;% @people.group_by{|person|person.name.first}.each do |initial, peeps| %&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;%= initial %&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;% peeps.each do |person| %&amp;gt;
    &amp;lt;%= person.name %&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-21T20:12:23+00:00</created-at>
      <creator-id type="integer">50893</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2281</number>
      <permalink>value_changed-helper-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch tested texthelper text_helper</tag>
      <title>value_changed? helper method</title>
      <updated-at type="datetime">2009-03-21T20:12:26+00:00</updated-at>
      <user-id type="integer">50986</user-id>
      <version type="integer">4</version>
      <user-name>Ian Terrell</user-name>
      <creator-name>Jason Arora</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2281</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Nice patch, but agreed that group_by is a better choice for the problem it's solving</body>
      <body-html>&lt;div&gt;&lt;p&gt;Nice patch, but agreed that group_by is a better choice for the
problem it's solving&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-22T01:42:18+00:00</created-at>
      <creator-id type="integer">50893</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2281</number>
      <permalink>value_changed-helper-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>patch tested texthelper text_helper</tag>
      <title>value_changed? helper method</title>
      <updated-at type="datetime">2009-03-22T01:42:20+00:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Jason Arora</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2281</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Duh. :-P

You're totally right, Ian. Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Duh. :-P&lt;/p&gt;
&lt;p&gt;You're totally right, Ian. Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-22T05:55:30+00:00</created-at>
      <creator-id type="integer">50893</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2281</number>
      <permalink>value_changed-helper-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>patch tested texthelper text_helper</tag>
      <title>value_changed? helper method</title>
      <updated-at type="datetime">2009-03-22T05:55:36+00:00</updated-at>
      <user-id type="integer">50893</user-id>
      <version type="integer">6</version>
      <user-name>Jason Arora</user-name>
      <creator-name>Jason Arora</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2281</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>e898d389fc419d53d08739d1b1c1c121bba3c37a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-17T23:21:25+00:00</created-at>
      <filename>value_changed_helper_method.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">100973</id>
      <size type="integer">3089</size>
      <uploader-id type="integer">50893</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/100973/value_changed_helper_method.diff</url>
    </attachment>
  </attachments>
</ticket>
