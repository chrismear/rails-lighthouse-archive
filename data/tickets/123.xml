<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-06T13:57:27+01:00</created-at>
  <creator-id type="integer">19437</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">123</number>
  <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
  <priority type="integer">13065</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Fix to_xml serialization in some rare cases.</title>
  <updated-at type="datetime">2010-11-07T16:53:25+00:00</updated-at>
  <user-id type="integer">94458</user-id>
  <version type="integer">12</version>
  <user-name>Jeff Kreeftmeijer</user-name>
  <creator-name>Adam Sindelar</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hi,

this is my first patch, so... here's hoping that I'm posting this in the right place.

It is possible for a model to overwrite its to_xml method in a way that'll make sure some specific association is always included with that model. This can be done like this:

@@@ ruby
def to_xml(options = {})
  options[:include] = [:my_assoc]
  super(options)
end
@@@

However, this breaks down when (for some reason) you create an array with records of more than one kind. For example:

@@@ ruby
records = Page.find(:all) + Article.find(:all)
records.to_xml # errors out if Page or Article changes options in their to_xml method
@@@

The reason for this behavior is the fashion in which the options hash is distributed among the objects in the array. I've modified the to_xml method on Array (ActiveSupport/CoreExtensions/Array) to check whether there are objects of more than one class in the array and, if so, to create a copy of the options hash for each individual class of objects.

Here's my patch:

@@@ ruby

def to_xml(options = {})
  raise &quot;Not all elements respond to to_xml&quot; unless all? { |e| e.respond_to? :to_xml }

  options[:root]     ||= all? { |e| e.is_a?(first.class) &amp;&amp; first.class.to_s != &quot;Hash&quot; } ? first.class.to_s.underscore.pluralize : &quot;records&quot;
  options[:children] ||= options[:root].singularize
  options[:indent]   ||= 2
  options[:builder]  ||= Builder::XmlMarkup.new(:indent =&gt; options[:indent])

  root     = options.delete(:root).to_s
  children = options.delete(:children)

  if !options.has_key?(:dasherize) || options[:dasherize]
    root = root.dasherize
  end

  options[:builder].instruct! unless options.delete(:skip_instruct)

  opts = options.merge({ :root =&gt; children })

  classes = collect {|e| e.class}.uniq
  if(classes.length != 1)
    cloned_options = {}
    classes.each do |class_name|
      cloned_options[class_name] = opts.clone
    end
  end

  xml = options[:builder]
  if empty?
    xml.tag!(root, options[:skip_types] ? {} : {:type =&gt; &quot;array&quot;})
  else
    xml.tag!(root, options[:skip_types] ? {} : {:type =&gt; &quot;array&quot;}) {
      yield xml if block_given?
      each do |e|
        if(classes.length == 1)
          e.to_xml(opts.merge!({ :skip_instruct =&gt; true }))
        else
          e.to_xml(cloned_options[e.class].merge!({ :skip_instruct =&gt; true}))
        end
      end
    }
  end
end
@@@</original-body>
  <latest-body>Hi,

this is my first patch, so... here's hoping that I'm posting this in the right place.

It is possible for a model to overwrite its to_xml method in a way that'll make sure some specific association is always included with that model. This can be done like this:

@@@ ruby
def to_xml(options = {})
  options[:include] = [:my_assoc]
  super(options)
end
@@@

However, this breaks down when (for some reason) you create an array with records of more than one kind. For example:

@@@ ruby
records = Page.find(:all) + Article.find(:all)
records.to_xml # errors out if Page or Article changes options in their to_xml method
@@@

The reason for this behavior is the fashion in which the options hash is distributed among the objects in the array. I've modified the to_xml method on Array (ActiveSupport/CoreExtensions/Array) to check whether there are objects of more than one class in the array and, if so, to create a copy of the options hash for each individual class of objects.

Here's my patch:

@@@ ruby

def to_xml(options = {})
  raise &quot;Not all elements respond to to_xml&quot; unless all? { |e| e.respond_to? :to_xml }

  options[:root]     ||= all? { |e| e.is_a?(first.class) &amp;&amp; first.class.to_s != &quot;Hash&quot; } ? first.class.to_s.underscore.pluralize : &quot;records&quot;
  options[:children] ||= options[:root].singularize
  options[:indent]   ||= 2
  options[:builder]  ||= Builder::XmlMarkup.new(:indent =&gt; options[:indent])

  root     = options.delete(:root).to_s
  children = options.delete(:children)

  if !options.has_key?(:dasherize) || options[:dasherize]
    root = root.dasherize
  end

  options[:builder].instruct! unless options.delete(:skip_instruct)

  opts = options.merge({ :root =&gt; children })

  classes = collect {|e| e.class}.uniq
  if(classes.length != 1)
    cloned_options = {}
    classes.each do |class_name|
      cloned_options[class_name] = opts.clone
    end
  end

  xml = options[:builder]
  if empty?
    xml.tag!(root, options[:skip_types] ? {} : {:type =&gt; &quot;array&quot;})
  else
    xml.tag!(root, options[:skip_types] ? {} : {:type =&gt; &quot;array&quot;}) {
      yield xml if block_given?
      each do |e|
        if(classes.length == 1)
          e.to_xml(opts.merge!({ :skip_instruct =&gt; true }))
        else
          e.to_xml(cloned_options[e.class].merge!({ :skip_instruct =&gt; true}))
        end
      end
    }
  end
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Hi,
&lt;/p&gt;&lt;p&gt;
this is my first patch, so... here's hoping that I'm posting this in the right place.
&lt;/p&gt;&lt;p&gt;
It is possible for a model to overwrite its to_xml method in a way that'll make sure some specific association is always included with that model. This can be done like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def to_xml(options = {})
  options[:include] = [:my_assoc]
  super(options)
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
However, this breaks down when (for some reason) you create an array with records of more than one kind. For example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;records = Page.find(:all) + Article.find(:all)
records.to_xml # errors out if Page or Article changes options in their to_xml method&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The reason for this behavior is the fashion in which the options hash is distributed among the objects in the array. I've modified the to_xml method on Array (ActiveSupport/CoreExtensions/Array) to check whether there are objects of more than one class in the array and, if so, to create a copy of the options hash for each individual class of objects.
&lt;/p&gt;&lt;p&gt;
Here's my patch:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
def to_xml(options = {})
  raise &amp;quot;Not all elements respond to to_xml&amp;quot; unless all? { |e| e.respond_to? :to_xml }

  options[:root]     ||= all? { |e| e.is_a?(first.class) &amp;amp;&amp;amp; first.class.to_s != &amp;quot;Hash&amp;quot; } ? first.class.to_s.underscore.pluralize : &amp;quot;records&amp;quot;
  options[:children] ||= options[:root].singularize
  options[:indent]   ||= 2
  options[:builder]  ||= Builder::XmlMarkup.new(:indent =&amp;gt; options[:indent])

  root     = options.delete(:root).to_s
  children = options.delete(:children)

  if !options.has_key?(:dasherize) || options[:dasherize]
    root = root.dasherize
  end

  options[:builder].instruct! unless options.delete(:skip_instruct)

  opts = options.merge({ :root =&amp;gt; children })

  classes = collect {|e| e.class}.uniq
  if(classes.length != 1)
    cloned_options = {}
    classes.each do |class_name|
      cloned_options[class_name] = opts.clone
    end
  end

  xml = options[:builder]
  if empty?
    xml.tag!(root, options[:skip_types] ? {} : {:type =&amp;gt; &amp;quot;array&amp;quot;})
  else
    xml.tag!(root, options[:skip_types] ? {} : {:type =&amp;gt; &amp;quot;array&amp;quot;}) {
      yield xml if block_given?
      each do |e|
        if(classes.length == 1)
          e.to_xml(opts.merge!({ :skip_instruct =&amp;gt; true }))
        else
          e.to_xml(cloned_options[e.class].merge!({ :skip_instruct =&amp;gt; true}))
        end
      end
    }
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

this is my first patch, so... here's hoping that I'm posting this in the right place.

It is possible for a model to overwrite its to_xml method in a way that'll make sure some specific association is always included with that model. This can be done like this:

@@@ ruby
def to_xml(options = {})
  options[:include] = [:my_assoc]
  super(options)
end
@@@

However, this breaks down when (for some reason) you create an array with records of more than one kind. For example:

@@@ ruby
records = Page.find(:all) + Article.find(:all)
records.to_xml # errors out if Page or Article changes options in their to_xml method
@@@

The reason for this behavior is the fashion in which the options hash is distributed among the objects in the array. I've modified the to_xml method on Array (ActiveSupport/CoreExtensions/Array) to check whether there are objects of more than one class in the array and, if so, to create a copy of the options hash for each individual class of objects.

Here's my patch:

@@@ ruby

def to_xml(options = {})
  raise &quot;Not all elements respond to to_xml&quot; unless all? { |e| e.respond_to? :to_xml }

  options[:root]     ||= all? { |e| e.is_a?(first.class) &amp;&amp; first.class.to_s != &quot;Hash&quot; } ? first.class.to_s.underscore.pluralize : &quot;records&quot;
  options[:children] ||= options[:root].singularize
  options[:indent]   ||= 2
  options[:builder]  ||= Builder::XmlMarkup.new(:indent =&gt; options[:indent])

  root     = options.delete(:root).to_s
  children = options.delete(:children)

  if !options.has_key?(:dasherize) || options[:dasherize]
    root = root.dasherize
  end

  options[:builder].instruct! unless options.delete(:skip_instruct)

  opts = options.merge({ :root =&gt; children })

  classes = collect {|e| e.class}.uniq
  if(classes.length != 1)
    cloned_options = {}
    classes.each do |class_name|
      cloned_options[class_name] = opts.clone
    end
  end

  xml = options[:builder]
  if empty?
    xml.tag!(root, options[:skip_types] ? {} : {:type =&gt; &quot;array&quot;})
  else
    xml.tag!(root, options[:skip_types] ? {} : {:type =&gt; &quot;array&quot;}) {
      yield xml if block_given?
      each do |e|
        if(classes.length == 1)
          e.to_xml(opts.merge!({ :skip_instruct =&gt; true }))
        else
          e.to_xml(cloned_options[e.class].merge!({ :skip_instruct =&gt; true}))
        end
      end
    }
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hi,
&lt;/p&gt;&lt;p&gt;
this is my first patch, so... here's hoping that I'm posting this in the right place.
&lt;/p&gt;&lt;p&gt;
It is possible for a model to overwrite its to_xml method in a way that'll make sure some specific association is always included with that model. This can be done like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def to_xml(options = {})
  options[:include] = [:my_assoc]
  super(options)
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
However, this breaks down when (for some reason) you create an array with records of more than one kind. For example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;records = Page.find(:all) + Article.find(:all)
records.to_xml # errors out if Page or Article changes options in their to_xml method&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The reason for this behavior is the fashion in which the options hash is distributed among the objects in the array. I've modified the to_xml method on Array (ActiveSupport/CoreExtensions/Array) to check whether there are objects of more than one class in the array and, if so, to create a copy of the options hash for each individual class of objects.
&lt;/p&gt;&lt;p&gt;
Here's my patch:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
def to_xml(options = {})
  raise &amp;quot;Not all elements respond to to_xml&amp;quot; unless all? { |e| e.respond_to? :to_xml }

  options[:root]     ||= all? { |e| e.is_a?(first.class) &amp;amp;&amp;amp; first.class.to_s != &amp;quot;Hash&amp;quot; } ? first.class.to_s.underscore.pluralize : &amp;quot;records&amp;quot;
  options[:children] ||= options[:root].singularize
  options[:indent]   ||= 2
  options[:builder]  ||= Builder::XmlMarkup.new(:indent =&amp;gt; options[:indent])

  root     = options.delete(:root).to_s
  children = options.delete(:children)

  if !options.has_key?(:dasherize) || options[:dasherize]
    root = root.dasherize
  end

  options[:builder].instruct! unless options.delete(:skip_instruct)

  opts = options.merge({ :root =&amp;gt; children })

  classes = collect {|e| e.class}.uniq
  if(classes.length != 1)
    cloned_options = {}
    classes.each do |class_name|
      cloned_options[class_name] = opts.clone
    end
  end

  xml = options[:builder]
  if empty?
    xml.tag!(root, options[:skip_types] ? {} : {:type =&amp;gt; &amp;quot;array&amp;quot;})
  else
    xml.tag!(root, options[:skip_types] ? {} : {:type =&amp;gt; &amp;quot;array&amp;quot;}) {
      yield xml if block_given?
      each do |e|
        if(classes.length == 1)
          e.to_xml(opts.merge!({ :skip_instruct =&amp;gt; true }))
        else
          e.to_xml(cloned_options[e.class].merge!({ :skip_instruct =&amp;gt; true}))
        end
      end
    }
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-06T13:57:27+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[patch] Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2008-05-06T13:57:27+01:00</updated-at>
      <user-id type="integer">19437</user-id>
      <version type="integer">1</version>
      <user-name>Adam Sindelar</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good idea, but - 
a) Why not just always clone the options?
b) It would be much more likely that this gets accepted if you supply in patch form (http://www.tpope.net/rails-git-best-practices) rather than something that has to be manually cut &amp; pasted, with no way of easily comparing the differences
c) Tests would be nice</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Good idea, but -
&lt;/p&gt;&lt;p&gt;
a) Why not just always clone the options?
&lt;/p&gt;&lt;p&gt;
b) It would be much more likely that this gets accepted if you supply in patch form (&lt;a href=&quot;http://www.tpope.net/rails-git-best-practices&quot;&gt;http://www.tpope.net/rails-git-b...&lt;/a&gt;) rather than something that has to be manually cut &amp; pasted, with no way of easily comparing the differences
&lt;/p&gt;&lt;p&gt;
c) Tests would be nice
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-06T14:26:23+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[patch] Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2008-05-06T14:26:23+01:00</updated-at>
      <user-id type="integer">19441</user-id>
      <version type="integer">2</version>
      <user-name>Jonathan del Strother</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, so here's a git patch, hope it makes sense. I also ran the full rails test suite and there were no regressions on my machine (rails 2.0.2 with ruby 1.8.6). There is one assertion failure in mysql test, but that happens regardless of whether or not the patch is applied.

As for the reason to not always clone the options hash - the hash contains the XML builder instance and some other data, and all in all, it seemed to me that cloning it under most circumstances would be an unnecessary slowdown. The code can be easily modified to simply always clone the hash, but that'll mean a performance deterioration even in those cases where cloning is not needed. That's just my guess though.

Hope this is better.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Ok, so here's a git patch, hope it makes sense. I also ran the full rails test suite and there were no regressions on my machine (rails 2.0.2 with ruby 1.8.6). There is one assertion failure in mysql test, but that happens regardless of whether or not the patch is applied.
&lt;/p&gt;&lt;p&gt;
As for the reason to not always clone the options hash - the hash contains the XML builder instance and some other data, and all in all, it seemed to me that cloning it under most circumstances would be an unnecessary slowdown. The code can be easily modified to simply always clone the hash, but that'll mean a performance deterioration even in those cases where cloning is not needed. That's just my guess though.
&lt;/p&gt;&lt;p&gt;
Hope this is better.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-06T16:57:55+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[patch] Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2008-05-06T16:57:55+01:00</updated-at>
      <user-id type="integer">19437</user-id>
      <version type="integer">3</version>
      <user-name>Adam Sindelar</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hey,

please don't take this the wrong way, I'm not trying to bug anyone... But what are the things I should do in order to have this patch accepted into the rails codebase (or to have it reviewed by someone)? I recognize that there's a lot of other tickets waiting for resolution, but I would hate for this to be forgotten - so what should I do next?

If the delay is normal, fair enough; I'm just trying to make sure there's not something I'm missing.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hey,
&lt;/p&gt;&lt;p&gt;
please don't take this the wrong way, I'm not trying to bug anyone... But what are the things I should do in order to have this patch accepted into the rails codebase (or to have it reviewed by someone)? I recognize that there's a lot of other tickets waiting for resolution, but I would hate for this to be forgotten - so what should I do next?
&lt;/p&gt;&lt;p&gt;
If the delay is normal, fair enough; I'm just trying to make sure there's not something I'm missing.
&lt;/p&gt;&lt;p&gt;
Thanks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-08T11:58:48+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[patch] Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2008-05-08T11:58:48+01:00</updated-at>
      <user-id type="integer">19437</user-id>
      <version type="integer">4</version>
      <user-name>Adam Sindelar</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The delay is pretty normal.  You generally need 3 people to vote +1 on your patch before it gets accepted.  Best way of doing that is by hopping on the #rails-contrib irc channel and coercing people into taking a look.

Personally, I don't think the overhead of 'clone' is worth the extra code to avoid it.  Bear in mind that when you clone a hash, you're cloning the references to the objects in it, rather than the objects themselves.  That is, {:xml =&gt; Builder::XmlBase.new}.clone will produce two hashes, but both point to the same instance of the xml builder.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The delay is pretty normal.  You generally need 3 people to vote +1 on your patch before it gets accepted.  Best way of doing that is by hopping on the #rails-contrib irc channel and coercing people into taking a look.
&lt;/p&gt;&lt;p&gt;
Personally, I don't think the overhead of 'clone' is worth the extra code to avoid it.  Bear in mind that when you clone a hash, you're cloning the references to the objects in it, rather than the objects themselves.  That is, {:xml =&gt; Builder::XmlBase.new}.clone will produce two hashes, but both point to the same instance of the xml builder.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-08T12:10:39+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[patch] Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2008-05-08T12:10:39+01:00</updated-at>
      <user-id type="integer">19441</user-id>
      <version type="integer">5</version>
      <user-name>Jonathan del Strother</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Adam,

I agree with all suggestions ( only a. and c. are relevant now ) made by Jon.  

You need to add tests to rails' existing test suite, which would fail without your patch. That's the general drill for getting the patch accepted.

Marking the ticket as &quot;incomplete&quot; till tests are added.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hi Adam,
&lt;/p&gt;&lt;p&gt;
I agree with all suggestions ( only a. and c. are relevant now ) made by Jon.
&lt;/p&gt;&lt;p&gt;
You need to add tests to rails' existing test suite, which would fail without your patch. That's the general drill for getting the patch accepted.
&lt;/p&gt;&lt;p&gt;
Marking the ticket as &quot;incomplete&quot; till tests are added.
&lt;/p&gt;&lt;p&gt;
Thanks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-13T16:34:11+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:title: &quot;[patch] Fix to_xml serialization in some rare cases.&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2008-05-13T16:34:11+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">6</version>
      <user-name>Pratik</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi again,

Firstly, sorry that I took this long to get back to this ticket, I needed to work on a different project for the past week or so.

Secondly, I've made the change to always clone the options hash, instead of checking if it's required.

The thing I'm uncertain about are the tests, though, so if I might have a few inquisitive questions (I looked for this information on rails website, but I couldn't find any guidelines):

Am I allowed (encouraged even?) to create a new model class to go with my test, or should I utilize one that already exists?

I'm going to try and fit this test inside the serialization_test.rb, but it's probably going to require changes to that file that go beyond merely adding another assertion (would definitely need another object with data).

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hi again,
&lt;/p&gt;&lt;p&gt;
Firstly, sorry that I took this long to get back to this ticket, I needed to work on a different project for the past week or so.
&lt;/p&gt;&lt;p&gt;
Secondly, I've made the change to always clone the options hash, instead of checking if it's required.
&lt;/p&gt;&lt;p&gt;
The thing I'm uncertain about are the tests, though, so if I might have a few inquisitive questions (I looked for this information on rails website, but I couldn't find any guidelines):
&lt;/p&gt;&lt;p&gt;
Am I allowed (encouraged even?) to create a new model class to go with my test, or should I utilize one that already exists?
&lt;/p&gt;&lt;p&gt;
I'm going to try and fit this test inside the serialization_test.rb, but it's probably going to require changes to that file that go beyond merely adding another assertion (would definitely need another object with data).
&lt;/p&gt;&lt;p&gt;
Thanks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-20T10:11:24+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2008-05-20T10:11:24+01:00</updated-at>
      <user-id type="integer">19437</user-id>
      <version type="integer">7</version>
      <user-name>Adam Sindelar</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Adam, we don't have a strict set of rules for tests. If you think it's worth creating a new file for tests, go for it. If you think they're a better fit for some of the existing test file, squeeze it in that.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Adam, we don't have a strict set of rules for tests. If you think it's worth creating a new file for tests, go for it. If you think they're a better fit for some of the existing test file, squeeze it in that.
&lt;/p&gt;&lt;p&gt;
Thanks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-20T10:33:01+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2008-05-20T10:33:01+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">8</version>
      <user-name>Pratik</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-20T10:33:06+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2008-05-20T10:33:06+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">9</version>
      <user-name>Pratik</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:47:29+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:priority: 0
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">13065</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>bug core_ext patch</tag>
      <title>Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2010-10-06T06:47:34+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">10</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-07T16:53:22+00:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: bug core_ext patch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">123</number>
      <permalink>patch-fix-to_xml-serialization-in-some-rare-cases</permalink>
      <priority type="integer">13065</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Fix to_xml serialization in some rare cases.</title>
      <updated-at type="datetime">2010-11-07T16:53:24+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">12</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/123</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>9b123589c39f312794d6202101082ed40e897eaa</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-06T16:57:55+01:00</created-at>
      <filename>patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">21740</id>
      <size type="integer">2119</size>
      <uploader-id type="integer">19437</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/21740/patch.diff</url>
    </attachment>
  </attachments>
</ticket>
