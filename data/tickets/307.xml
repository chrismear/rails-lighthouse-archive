<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-02T23:28:26+01:00</created-at>
  <creator-id type="integer">22016</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">307</number>
  <permalink>fixtureclassnotfound-when-using-namespaces-in-unit-test</permalink>
  <priority type="integer">15039</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>testcase</tag>
  <title>FixtureClassNotFound when using Namespaces in Unit Test</title>
  <updated-at type="datetime">2008-08-23T13:56:29+01:00</updated-at>
  <user-id type="integer">14890</user-id>
  <version type="integer">3</version>
  <user-name>Tarmo T&#228;nav</user-name>
  <creator-name>James M. McLachlan</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/307</url>
  <priority-name nil="true"></priority-name>
  <original-body>If have name spaced model classes, Party::Base and Party::Address, with their corresponding Unit test in the test/party directory the unit for the first starts failing once the second is added with a &quot;FixtureClassNotFound: No class attached to find&quot; error  even if set_fixture_class is explicitly denoted.

When I remove the second unit test from the directory,  everything runs fine once again.

My model classes are as follows:

class Party::Base &lt; ActiveRecord::Base
  set_table_name :parties
  has_many  :addresses,
            :foreign_key =&gt; 'party_id'
end

class Party::Address &lt; ActiveRecord::Base
  belongs_to  :party,
              :class_name =&gt; &quot;Party::Base&quot;,
              :foreign_key =&gt; 'party_id'
  
end

A simple unit test for Party::Base works fine if no other test is present.

require 'test_helper'

class Party::BaseTest &lt; ActiveSupport::TestCase
  fixtures  :parties
  set_fixture_class :parties =&gt; Party::Base
  # Replace this with your real tests.
  def test_james_in_fixture
    assert(parties(:one).name == &quot;James McLachlan&quot;)
  end
end

once I add Party::AddressTest if gives me the error:

test_james_in_fixture(Party::PartyTest): 
FixtureClassNotFound: No class attached to find.</original-body>
  <latest-body>If have name spaced model classes, Party::Base and Party::Address, with their corresponding Unit test in the test/party directory the unit for the first starts failing once the second is added with a &quot;FixtureClassNotFound: No class attached to find&quot; error  even if set_fixture_class is explicitly denoted.

When I remove the second unit test from the directory,  everything runs fine once again.

My model classes are as follows:

class Party::Base &lt; ActiveRecord::Base
  set_table_name :parties
  has_many  :addresses,
            :foreign_key =&gt; 'party_id'
end

class Party::Address &lt; ActiveRecord::Base
  belongs_to  :party,
              :class_name =&gt; &quot;Party::Base&quot;,
              :foreign_key =&gt; 'party_id'
  
end

A simple unit test for Party::Base works fine if no other test is present.

require 'test_helper'

class Party::BaseTest &lt; ActiveSupport::TestCase
  fixtures  :parties
  set_fixture_class :parties =&gt; Party::Base
  # Replace this with your real tests.
  def test_james_in_fixture
    assert(parties(:one).name == &quot;James McLachlan&quot;)
  end
end

once I add Party::AddressTest if gives me the error:

test_james_in_fixture(Party::PartyTest): 
FixtureClassNotFound: No class attached to find.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
If have name spaced model classes, Party::Base and Party::Address, with their corresponding Unit test in the test/party directory the unit for the first starts failing once the second is added with a &quot;FixtureClassNotFound: No class attached to find&quot; error  even if set_fixture_class is explicitly denoted.
&lt;/p&gt;&lt;p&gt;
When I remove the second unit test from the directory,  everything runs fine once again.
&lt;/p&gt;&lt;p&gt;
My model classes are as follows:
&lt;/p&gt;&lt;p&gt;
class Party::Base &amp;lt; ActiveRecord::Base
&lt;/p&gt;&lt;p&gt;
set_table_name :parties
&lt;/p&gt;&lt;p&gt;
has_many  :addresses,
&lt;/p&gt;&lt;p&gt;
:foreign_key =&gt; 'party_id'
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
class Party::Address &amp;lt; ActiveRecord::Base
&lt;/p&gt;&lt;p&gt;
belongs_to  :party,
&lt;/p&gt;&lt;p&gt;
:class_name =&gt; &quot;Party::Base&quot;,
&lt;/p&gt;&lt;p&gt;
:foreign_key =&gt; 'party_id'
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
A simple unit test for Party::Base works fine if no other test is present.
&lt;/p&gt;&lt;p&gt;
require 'test_helper'
&lt;/p&gt;&lt;p&gt;
class Party::BaseTest &amp;lt; ActiveSupport::TestCase
&lt;/p&gt;&lt;p&gt;
fixtures  :parties
&lt;/p&gt;&lt;p&gt;
set_fixture_class :parties =&gt; Party::Base
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
Replace this with your real tests.
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;
def test_james_in_fixture
&lt;/p&gt;&lt;p&gt;
assert(parties(:one).name == &quot;James McLachlan&quot;)
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
once I add Party::AddressTest if gives me the error:
&lt;/p&gt;&lt;p&gt;
test_james_in_fixture(Party::PartyTest):
&lt;/p&gt;&lt;p&gt;
FixtureClassNotFound: No class attached to find.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If have namespaced model classes, Party::Base and Party::Address, with their corresponding Unit test in the test/party directory the unit for the first starts failing once the second is added with a &quot;FixtureClassNotFound: No class attached to find&quot; error  even if set_fixture_class is explicitly denoted.

When I remove the second unit test from the directory,  everything runs fine once again.

My model classes are as follows:

class Party::Base &lt; ActiveRecord::Base
  set_table_name :parties
  has_many  :addresses,
            :foreign_key =&gt; 'party_id'
end

class Party::Address &lt; ActiveRecord::Base
  belongs_to  :party,
              :class_name =&gt; &quot;Party::Base&quot;,
              :foreign_key =&gt; 'party_id'
  
end

A simple unit test for Party::Base works fine if no other test is present.

require 'test_helper'

class Party::BaseTest &lt; ActiveSupport::TestCase
  fixtures  :parties
  set_fixture_class :parties =&gt; Party::Base
  # Replace this with your real tests.
  def test_james_in_fixture
    assert(parties(:one).name == &quot;James McLachlan&quot;)
  end
end

once I add Party::AddressTest if gives me the error:

test_james_in_fixture(Party::PartyTest): 
FixtureClassNotFound: No class attached to find.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
If have namespaced model classes, Party::Base and Party::Address, with their corresponding Unit test in the test/party directory the unit for the first starts failing once the second is added with a &quot;FixtureClassNotFound: No class attached to find&quot; error  even if set_fixture_class is explicitly denoted.
&lt;/p&gt;&lt;p&gt;
When I remove the second unit test from the directory,  everything runs fine once again.
&lt;/p&gt;&lt;p&gt;
My model classes are as follows:
&lt;/p&gt;&lt;p&gt;
class Party::Base &amp;lt; ActiveRecord::Base
&lt;/p&gt;&lt;p&gt;
set_table_name :parties
&lt;/p&gt;&lt;p&gt;
has_many  :addresses,
&lt;/p&gt;&lt;p&gt;
:foreign_key =&gt; 'party_id'
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
class Party::Address &amp;lt; ActiveRecord::Base
&lt;/p&gt;&lt;p&gt;
belongs_to  :party,
&lt;/p&gt;&lt;p&gt;
:class_name =&gt; &quot;Party::Base&quot;,
&lt;/p&gt;&lt;p&gt;
:foreign_key =&gt; 'party_id'
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
A simple unit test for Party::Base works fine if no other test is present.
&lt;/p&gt;&lt;p&gt;
require 'test_helper'
&lt;/p&gt;&lt;p&gt;
class Party::BaseTest &amp;lt; ActiveSupport::TestCase
&lt;/p&gt;&lt;p&gt;
fixtures  :parties
&lt;/p&gt;&lt;p&gt;
set_fixture_class :parties =&gt; Party::Base
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
Replace this with your real tests.
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;
def test_james_in_fixture
&lt;/p&gt;&lt;p&gt;
assert(parties(:one).name == &quot;James McLachlan&quot;)
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
once I add Party::AddressTest if gives me the error:
&lt;/p&gt;&lt;p&gt;
test_james_in_fixture(Party::PartyTest):
&lt;/p&gt;&lt;p&gt;
FixtureClassNotFound: No class attached to find.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-02T23:29:07+01:00</created-at>
      <creator-id type="integer">22016</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">307</number>
      <permalink>fixtureclassnotfound-when-using-namespaces-in-unit-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>FixtureClassNotFound when using Namespaces in Unit Test</title>
      <updated-at type="datetime">2008-06-02T23:29:07+01:00</updated-at>
      <user-id type="integer">22016</user-id>
      <version type="integer">1</version>
      <user-name>James M. McLachlan</user-name>
      <creator-name>James M. McLachlan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/307</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Please ignore this... it is not a but but a user error ;-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Please ignore this... it is not a but but a user error ;-)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-03T05:43:40+01:00</created-at>
      <creator-id type="integer">22016</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">307</number>
      <permalink>fixtureclassnotfound-when-using-namespaces-in-unit-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>FixtureClassNotFound when using Namespaces in Unit Test</title>
      <updated-at type="datetime">2008-06-03T05:43:40+01:00</updated-at>
      <user-id type="integer">22016</user-id>
      <version type="integer">2</version>
      <user-name>James M. McLachlan</user-name>
      <creator-name>James M. McLachlan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/307</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-23T13:56:29+01:00</created-at>
      <creator-id type="integer">22016</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">307</number>
      <permalink>fixtureclassnotfound-when-using-namespaces-in-unit-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>testcase</tag>
      <title>FixtureClassNotFound when using Namespaces in Unit Test</title>
      <updated-at type="datetime">2008-08-23T13:56:29+01:00</updated-at>
      <user-id type="integer">14890</user-id>
      <version type="integer">3</version>
      <user-name>Tarmo T&#228;nav</user-name>
      <creator-name>James M. McLachlan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/307</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
