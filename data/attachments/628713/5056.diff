From 5f2f5a61a9d3897b9ec8a2cd06053f238b96f20b Mon Sep 17 00:00:00 2001
From: Subba Rao Pasupuleti <subbarao.pasupuleti@gmail.com>
Date: Sat, 14 Aug 2010 10:55:51 -0400
Subject: [PATCH] select tags coerce the :selected option, options
  to strings before comparison
  [#5056 state:resolved]

---
 .../lib/action_view/helpers/form_options_helper.rb |   21 ++++---
 .../test/template/form_options_helper_test.rb      |   62 ++++++++++++++++++++
 2 files changed, 74 insertions(+), 9 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/form_options_helper.rb b/actionpack/lib/action_view/helpers/form_options_helper.rb
index 698cd3e..8728dd7 100644
--- a/actionpack/lib/action_view/helpers/form_options_helper.rb
+++ b/actionpack/lib/action_view/helpers/form_options_helper.rb
@@ -298,17 +298,18 @@ module ActionView
         return container if String === container
 
         container = container.to_a if Hash === container
-        selected, disabled = extract_selected_and_disabled(selected)
+        selected, disabled = extract_selected_and_disabled(selected).map do | r |
+           Array.wrap(r).map(&:to_s)
+        end
 
-        options_for_select = container.map do |element|
+        container.map do |element|
           html_attributes = option_html_attributes(element)
-          text, value = option_text_and_value(element)
+          text, value = option_text_and_value(element).map(&:to_s)
           selected_attribute = ' selected="selected"' if option_value_selected?(value, selected)
           disabled_attribute = ' disabled="disabled"' if disabled && option_value_selected?(value, disabled)
-          %(<option value="#{html_escape(value.to_s)}"#{selected_attribute}#{disabled_attribute}#{html_attributes}>#{html_escape(text.to_s)}</option>)
-        end
+          %(<option value="#{html_escape(value)}"#{selected_attribute}#{disabled_attribute}#{html_attributes}>#{html_escape(text)}</option>)
+        end.join("\n").html_safe
 
-        options_for_select.join("\n").html_safe
       end
 
       # Returns a string of option tags that have been compiled by iterating over the +collection+ and assigning the
@@ -528,10 +529,12 @@ module ActionView
         end
 
         def extract_selected_and_disabled(selected)
-          if selected.is_a?(Hash)
-            [selected[:selected], selected[:disabled]]
+          if selected.is_a?(Proc)
+            [ selected, nil ]
           else
-            [selected, nil]
+            selected = Array.wrap(selected)
+            options = selected.extract_options!.symbolize_keys
+            [ options[:selected] || selected , options[:disabled] ]
           end
         end
 
diff --git a/actionpack/test/template/form_options_helper_test.rb b/actionpack/test/template/form_options_helper_test.rb
index 3dfaffb..e9ffbe7 100644
--- a/actionpack/test/template/form_options_helper_test.rb
+++ b/actionpack/test/template/form_options_helper_test.rb
@@ -176,6 +176,68 @@ class FormOptionsHelperTest < ActionView::TestCase
     )
   end
 
+  def test_collection_options_with_preselected_value_as_string_and_option_value_is_integer
+    albums = [ Album.new(1, "first","rap"), Album.new(2, "second","pop")] 
+    assert_dom_equal(
+    %(<option selected="selected" value="1">rap</option>\n<option value="2">pop</option>),
+    options_from_collection_for_select(albums, "id", "genre", :selected => "1")
+    )
+  end
+
+  def test_collection_options_with_preselected_value_as_integer_and_option_value_is_string
+    albums = [ Album.new("1", "first","rap"), Album.new("2", "second","pop")] 
+
+    assert_dom_equal(
+    %(<option selected="selected" value="1">rap</option>\n<option value="2">pop</option>),
+    options_from_collection_for_select(albums, "id", "genre", :selected => 1)
+    )
+  end
+
+  def test_collection_options_with_preselected_value_as_string_and_option_value_is_float
+    albums = [ Album.new(1.0, "first","rap"), Album.new(2.0, "second","pop")] 
+
+    assert_dom_equal(
+    %(<option value="1.0">rap</option>\n<option value="2.0" selected="selected">pop</option>),
+    options_from_collection_for_select(albums, "id", "genre", :selected => "2.0")
+    )
+  end
+
+  def test_collection_options_with_preselected_value_as_nil
+    albums = [ Album.new(1.0, "first","rap"), Album.new(2.0, "second","pop")] 
+
+    assert_dom_equal(
+    %(<option value="1.0">rap</option>\n<option value="2.0">pop</option>),
+    options_from_collection_for_select(albums, "id", "genre", :selected => nil)
+    )
+  end
+
+  def test_collection_options_with_disabled_value_as_nil
+    albums = [ Album.new(1.0, "first","rap"), Album.new(2.0, "second","pop")] 
+
+    assert_dom_equal(
+    %(<option value="1.0">rap</option>\n<option value="2.0">pop</option>),
+    options_from_collection_for_select(albums, "id", "genre", :disabled => nil)
+    )
+  end
+
+  def test_collection_options_with_disabled_value_as_array
+    albums = [ Album.new(1.0, "first","rap"), Album.new(2.0, "second","pop")] 
+
+    assert_dom_equal(
+    %(<option disabled="disabled" value="1.0">rap</option>\n<option disabled="disabled" value="2.0">pop</option>),
+    options_from_collection_for_select(albums, "id", "genre", :disabled => ["1.0", 2.0])
+    )
+  end
+
+  def test_collection_options_with_preselected_values_as_string_array_and_option_value_is_float
+    albums = [ Album.new(1.0, "first","rap"), Album.new(2.0, "second","pop"), Album.new(3.0, "third","country") ] 
+
+    assert_dom_equal(
+    %(<option value="1.0" selected="selected">rap</option>\n<option value="2.0">pop</option>\n<option value="3.0" selected="selected">country</option>),
+    options_from_collection_for_select(albums, "id", "genre", ["1.0","3.0"])
+    )
+  end
+
   def test_option_groups_from_collection_for_select
     assert_dom_equal(
       "<optgroup label=\"&lt;Africa&gt;\"><option value=\"&lt;sa&gt;\">&lt;South Africa&gt;</option>\n<option value=\"so\">Somalia</option></optgroup><optgroup label=\"Europe\"><option value=\"dk\" selected=\"selected\">Denmark</option>\n<option value=\"ie\">Ireland</option></optgroup>",
-- 
1.7.0.4

