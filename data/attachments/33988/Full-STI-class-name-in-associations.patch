From 261a133202a87ab577717edec8e2c9ee04a61cf9 Mon Sep 17 00:00:00 2001
From: Daniel Guettler <daniel.guettler@gmail.com>
Date: Mon, 21 Jul 2008 15:21:13 -0400
Subject: [PATCH] Full STI class name in associations
 - replace klass.name.demodulize with klass.sti_name in associations so it respects the store_full_sti_class option

---
 activerecord/lib/active_record/associations.rb     |    4 ++--
 .../associations/has_many_associations_test.rb     |   18 ++++++++++++++++++
 activerecord/test/models/company.rb                |    7 +++++++
 3 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/activerecord/lib/active_record/associations.rb b/activerecord/lib/active_record/associations.rb
index 4b71540..eecbe72 100755
--- a/activerecord/lib/active_record/associations.rb
+++ b/activerecord/lib/active_record/associations.rb
@@ -1870,7 +1870,7 @@ module ActiveRecord
                           jt_sti_extra = " AND %s.%s = %s" % [
                             connection.quote_table_name(aliased_join_table_name),
                             connection.quote_column_name(through_reflection.active_record.inheritance_column),
-                            through_reflection.klass.quote_value(through_reflection.klass.name.demodulize)]
+                            through_reflection.klass.quote_value(through_reflection.klass.sti_name)]
                         end
                       when :belongs_to
                         first_key = primary_key
@@ -1938,7 +1938,7 @@ module ActiveRecord
               join << %(AND %s.%s = %s ) % [
                 connection.quote_table_name(aliased_table_name),
                 connection.quote_column_name(klass.inheritance_column),
-                klass.quote_value(klass.name.demodulize)] unless klass.descends_from_active_record?
+                klass.quote_value(klass.sti_name)] unless klass.descends_from_active_record?
 
               [through_reflection, reflection].each do |ref|
                 join << "AND #{interpolate_sql(sanitize_sql(ref.options[:conditions]))} " if ref && ref.options[:conditions]
diff --git a/activerecord/test/cases/associations/has_many_associations_test.rb b/activerecord/test/cases/associations/has_many_associations_test.rb
index b329193..368e590 100644
--- a/activerecord/test/cases/associations/has_many_associations_test.rb
+++ b/activerecord/test/cases/associations/has_many_associations_test.rb
@@ -964,4 +964,22 @@ class HasManyAssociationsTest < ActiveRecord::TestCase
     assert firm.clients.loaded?
   end
 
+  def test_joins_with_namespaced_model_should_use_correct_type
+    old = ActiveRecord::Base.store_full_sti_class
+    ActiveRecord::Base.store_full_sti_class = true
+    
+    firm = Namespaced::Firm.create({ :name => 'Some Company' })
+    firm.clients.create({ :name => 'Some Client' })
+
+    stats = Namespaced::Firm.find(firm.id, {
+      :select => "#{Namespaced::Firm.table_name}.*, COUNT(#{Namespaced::Client.table_name}.id) AS num_clients",
+      :joins  => :clients,
+      :group  => "#{Namespaced::Firm.table_name}.id"
+    })
+    assert_equal 1, stats.num_clients.to_i
+    
+  ensure
+    ActiveRecord::Base.store_full_sti_class = old
+  end
+
 end
diff --git a/activerecord/test/models/company.rb b/activerecord/test/models/company.rb
index 9fa810a..408b5e3 100755
--- a/activerecord/test/models/company.rb
+++ b/activerecord/test/models/company.rb
@@ -18,6 +18,13 @@ end
 module Namespaced
   class Company < ::Company
   end
+
+  class Firm < ::Company
+    has_many :clients, :class_name => 'Namespaced::Client'
+  end
+
+  class Client < ::Company
+  end
 end
 
 class Firm < Company
-- 
1.5.6

