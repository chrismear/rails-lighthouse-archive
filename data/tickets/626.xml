<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-15T19:28:44+01:00</created-at>
  <creator-id type="integer">1431</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">626</number>
  <permalink>scaffolded-functional-tests-should-test-for-failed-create-update</permalink>
  <priority type="integer">111</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>2.1 enhancement generators patch</tag>
  <title>Scaffolded functional tests should test for failed create/update</title>
  <updated-at type="datetime">2008-10-28T16:25:31+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Mark Cornick</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/626</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Currently, the functional tests generated by the scaffold generator do not test the parts of the create and update actions which handle failed creates/updates. The tests should be updated to cover the entire create and update actions.

This is difficult to accomplish in a way that is both automatic and elegant. We could create new tests passing invalid parameters to the create/update actions, but we do not define any validations at the time that the generator is run, and so we have no way of knowing what constitutes invalid parameters. We could mock the .save and .update_attributes methods to fail, but we cannot depend on the developer having an appropriate mocking library installed. We could dike out the save/update methods with sneaky uses of the private define_method call, but that approach is ugly.

The attached patch simply defines two new tests, one for create and one for update, with the same parameters as the original tests, but expecting the operation to fail instead of to succeed. It also includes FIXME notes stating that these tests will fail until validations are added to the model and the tests are updated with parameters that fail those validations.

I expect this change to be controversial, in that scaffold-generated tests will now fail out of the box. My rationale is that if we consider scaffolding to be an educational tool (see http://groups.google.com/group/rubyonrails-core/msg/a66a47af90acf28b), doing it this way will help the developer learn to write tests; besides, the sort of people who are inclined to not run tests won't notice the failure anyway (and those who are so inclined will either fix the tests to pass, or remove them entirely.)</original-body>
  <latest-body>Currently, the functional tests generated by the scaffold generator do not test the parts of the create and update actions which handle failed creates/updates. The tests should be updated to cover the entire create and update actions.

This is difficult to accomplish in a way that is both automatic and elegant. We could create new tests passing invalid parameters to the create/update actions, but we do not define any validations at the time that the generator is run, and so we have no way of knowing what constitutes invalid parameters. We could mock the .save and .update_attributes methods to fail, but we cannot depend on the developer having an appropriate mocking library installed. We could dike out the save/update methods with sneaky uses of the private define_method call, but that approach is ugly.

The attached patch simply defines two new tests, one for create and one for update, with the same parameters as the original tests, but expecting the operation to fail instead of to succeed. It also includes FIXME notes stating that these tests will fail until validations are added to the model and the tests are updated with parameters that fail those validations.

I expect this change to be controversial, in that scaffold-generated tests will now fail out of the box. My rationale is that if we consider scaffolding to be an educational tool (see http://groups.google.com/group/rubyonrails-core/msg/a66a47af90acf28b), doing it this way will help the developer learn to write tests; besides, the sort of people who are inclined to not run tests won't notice the failure anyway (and those who are so inclined will either fix the tests to pass, or remove them entirely.)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Currently, the functional tests generated by the scaffold generator do not test the parts of the create and update actions which handle failed creates/updates. The tests should be updated to cover the entire create and update actions.
&lt;/p&gt;&lt;p&gt;
This is difficult to accomplish in a way that is both automatic and elegant. We could create new tests passing invalid parameters to the create/update actions, but we do not define any validations at the time that the generator is run, and so we have no way of knowing what constitutes invalid parameters. We could mock the .save and .update_attributes methods to fail, but we cannot depend on the developer having an appropriate mocking library installed. We could dike out the save/update methods with sneaky uses of the private define_method call, but that approach is ugly.
&lt;/p&gt;&lt;p&gt;
The attached patch simply defines two new tests, one for create and one for update, with the same parameters as the original tests, but expecting the operation to fail instead of to succeed. It also includes FIXME notes stating that these tests will fail until validations are added to the model and the tests are updated with parameters that fail those validations.
&lt;/p&gt;&lt;p&gt;
I expect this change to be controversial, in that scaffold-generated tests will now fail out of the box. My rationale is that if we consider scaffolding to be an educational tool (see &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/msg/a66a47af90acf28b)&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;, doing it this way will help the developer learn to write tests; besides, the sort of people who are inclined to not run tests won't notice the failure anyway (and those who are so inclined will either fix the tests to pass, or remove them entirely.)
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Currently, the functional tests generated by the scaffold generator do not test the parts of the create and update actions which handle failed creates/updates. The tests should be updated to cover the entire create and update actions.

This is difficult to accomplish in a way that is both automatic and elegant. We could create new tests passing invalid parameters to the create/update actions, but we do not define any validations at the time that the generator is run, and so we have no way of knowing what constitutes invalid parameters. We could mock the .save and .update_attributes methods to fail, but we cannot depend on the developer having an appropriate mocking library installed. We could dike out the save/update methods with sneaky uses of the private define_method call, but that approach is ugly.

The attached patch simply defines two new tests, one for create and one for update, with the same parameters as the original tests, but expecting the operation to fail instead of to succeed. It also includes FIXME notes stating that these tests will fail until validations are added to the model and the tests are updated with parameters that fail those validations.

I expect this change to be controversial, in that scaffold-generated tests will now fail out of the box. My rationale is that if we consider scaffolding to be an educational tool (see http://groups.google.com/group/rubyonrails-core/msg/a66a47af90acf28b), doing it this way will help the developer learn to write tests; besides, the sort of people who are inclined to not run tests won't notice the failure anyway (and those who are so inclined will either fix the tests to pass, or remove them entirely.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Currently, the functional tests generated by the scaffold generator do not test the parts of the create and update actions which handle failed creates/updates. The tests should be updated to cover the entire create and update actions.
&lt;/p&gt;&lt;p&gt;
This is difficult to accomplish in a way that is both automatic and elegant. We could create new tests passing invalid parameters to the create/update actions, but we do not define any validations at the time that the generator is run, and so we have no way of knowing what constitutes invalid parameters. We could mock the .save and .update_attributes methods to fail, but we cannot depend on the developer having an appropriate mocking library installed. We could dike out the save/update methods with sneaky uses of the private define_method call, but that approach is ugly.
&lt;/p&gt;&lt;p&gt;
The attached patch simply defines two new tests, one for create and one for update, with the same parameters as the original tests, but expecting the operation to fail instead of to succeed. It also includes FIXME notes stating that these tests will fail until validations are added to the model and the tests are updated with parameters that fail those validations.
&lt;/p&gt;&lt;p&gt;
I expect this change to be controversial, in that scaffold-generated tests will now fail out of the box. My rationale is that if we consider scaffolding to be an educational tool (see &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/msg/a66a47af90acf28b)&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;, doing it this way will help the developer learn to write tests; besides, the sort of people who are inclined to not run tests won't notice the failure anyway (and those who are so inclined will either fix the tests to pass, or remove them entirely.)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-15T19:28:44+01:00</created-at>
      <creator-id type="integer">1431</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">626</number>
      <permalink>scaffolded-functional-tests-should-test-for-failed-create-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 enhancement generators patch</tag>
      <title>Scaffolded functional tests should test for failed create/update</title>
      <updated-at type="datetime">2008-07-15T19:28:44+01:00</updated-at>
      <user-id type="integer">1431</user-id>
      <version type="integer">1</version>
      <user-name>Mark Cornick</user-name>
      <creator-name>Mark Cornick</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/626</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Staling out, please reopen if this is still a problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Staling out, please reopen if this is still a problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-28T16:25:26+00:00</created-at>
      <creator-id type="integer">1431</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">626</number>
      <permalink>scaffolded-functional-tests-should-test-for-failed-create-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.1 enhancement generators patch</tag>
      <title>Scaffolded functional tests should test for failed create/update</title>
      <updated-at type="datetime">2008-10-28T16:25:31+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Mark Cornick</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/626</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>c8f0b078caf94a13d2d7969a2a1a9627069d774a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-07-15T19:28:44+01:00</created-at>
      <filename>improve_scaffold_functional_tests.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">32774</id>
      <size type="integer">1901</size>
      <uploader-id type="integer">1431</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/32774/improve_scaffold_functional_tests.diff</url>
    </attachment>
  </attachments>
</ticket>
