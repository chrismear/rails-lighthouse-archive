<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-25T03:23:39+01:00</created-at>
  <creator-id type="integer">23550</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3238</number>
  <permalink>mem_cache_store_test-has-flawed-test</permalink>
  <priority type="integer">148016</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>action_controller bug memcachestore patch session-fixation sessions</tag>
  <title>mem_cache_store_test has flawed test</title>
  <updated-at type="datetime">2011-02-14T14:51:04+00:00</updated-at>
  <user-id type="integer">23550</user-id>
  <version type="integer">15</version>
  <user-name>Aaron Gibralter</user-name>
  <creator-name>Aaron Gibralter</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
  <priority-name nil="true"></priority-name>
  <original-body>So I was poking around mem_cache_store_test and noticed that test_prevents_session_fixation passes in both these cases:
@@@
def test_prevents_session_fixation
  with_test_route_set do
    get '/get_session_value'
    assert_response :success
    assert_equal 'foo: nil', response.body
    session_id = cookies['_session_id']

    reset!

    get '/set_session_value', :_session_id =&gt; session_id
    assert_response :success
    assert_equal nil, cookies['_session_id']
  end
end
@@@
AND
@@@
def test_prevents_session_fixation
  with_test_route_set do
    get '/get_session_value'
    assert_response :success
    assert_equal 'foo: nil', response.body
    session_id = cookies['_session_id']

    reset!

    get '/set_session_value'
    assert_response :success
    assert_equal nil, cookies['_session_id']
  end
end
@@@
(notice the missing :_session_id =&gt; session_id in the second)... This just seems to suggest that reset! is doing something to prevent session fixation. From my experience, MemCacheStore allows session fixation (i.e. the client can set their own session_id if they want to).

If I'm mistaken, can anyone explain how this test is actually showing that MemCacheStore's implementation prevents session-fixation?

Thanks!</original-body>
  <latest-body>So I was poking around mem_cache_store_test and noticed that test_prevents_session_fixation passes in both these cases:
@@@
def test_prevents_session_fixation
  with_test_route_set do
    get '/get_session_value'
    assert_response :success
    assert_equal 'foo: nil', response.body
    session_id = cookies['_session_id']

    reset!

    get '/set_session_value', :_session_id =&gt; session_id
    assert_response :success
    assert_equal nil, cookies['_session_id']
  end
end
@@@
AND
@@@
def test_prevents_session_fixation
  with_test_route_set do
    get '/get_session_value'
    assert_response :success
    assert_equal 'foo: nil', response.body
    session_id = cookies['_session_id']

    reset!

    get '/set_session_value'
    assert_response :success
    assert_equal nil, cookies['_session_id']
  end
end
@@@
(notice the missing :_session_id =&gt; session_id in the second)... This just seems to suggest that reset! is doing something to prevent session fixation. From my experience, MemCacheStore allows session fixation (i.e. the client can set their own session_id if they want to).

If I'm mistaken, can anyone explain how this test is actually showing that MemCacheStore's implementation prevents session-fixation?

Thanks!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;So I was poking around mem_cache_store_test and noticed that
test_prevents_session_fixation passes in both these cases:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def test_prevents_session_fixation
  with_test_route_set do&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&lt;code&gt;get '/get_session_value'
assert_response :success
assert_equal 'foo: nil', response.body
session_id = cookies['_session_id']

reset!

get '/set_session_value', :_session_id =&amp;amp;gt; session_id
assert_response :success
assert_equal nil, cookies['_session_id']&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
  end
end
&lt;/pre&gt;
AND&lt;br&gt;
&lt;pre&gt;
&lt;code&gt;def test_prevents_session_fixation
  with_test_route_set do&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&lt;code&gt;get '/get_session_value'
assert_response :success
assert_equal 'foo: nil', response.body
session_id = cookies['_session_id']

reset!

get '/set_session_value'
assert_response :success
assert_equal nil, cookies['_session_id']&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
  end
end
&lt;/pre&gt;
(notice the missing :_session_id =&amp;gt; session_id in the second)...
This just seems to suggest that reset! is doing something to
prevent session fixation. From my experience, MemCacheStore allows
session fixation (i.e. the client can set their own session_id if
they want to).
&lt;p&gt;If I'm mistaken, can anyone explain how this test is actually
showing that MemCacheStore's implementation prevents
session-fixation?&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>So I was poking around mem_cache_store_test and noticed that test_prevents_session_fixation passes in both these cases:

@@@
  def test_prevents_session_fixation
    with_test_route_set do
      get '/get_session_value'
      assert_response :success
      assert_equal 'foo: nil', response.body
      session_id = cookies['_session_id']
      
      reset!
      
      get '/set_session_value', :_session_id =&gt; session_id
      assert_response :success
      assert_equal nil, cookies['_session_id']
    end
  end
@@@

AND

@@@
  def test_prevents_session_fixation
    with_test_route_set do
      get '/get_session_value'
      assert_response :success
      assert_equal 'foo: nil', response.body
      session_id = cookies['_session_id']
      
      reset!
      
      get '/set_session_value'
      assert_response :success
      assert_equal nil, cookies['_session_id']
    end
  end

@@@

(notice the missing :_session_id =&gt; session_id in the second)... This just seems to suggest that reset! is doing something to prevent session fixation. From my experience, MemCacheStore allows session fixation (i.e. the client can set their own session_id if they want to).

If I'm mistaken, can anyone explain how this test is actually showing that MemCacheStore's implementation prevents session-fixation?

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;So I was poking around mem_cache_store_test and noticed that
test_prevents_session_fixation passes in both these cases:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def test_prevents_session_fixation
    with_test_route_set do
      get '/get_session_value'
      assert_response :success
      assert_equal 'foo: nil', response.body
      session_id = cookies['_session_id']
      
      reset!
      
      get '/set_session_value', :_session_id =&amp;gt; session_id
      assert_response :success
      assert_equal nil, cookies['_session_id']
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;AND&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def test_prevents_session_fixation
    with_test_route_set do
      get '/get_session_value'
      assert_response :success
      assert_equal 'foo: nil', response.body
      session_id = cookies['_session_id']
      
      reset!
      
      get '/set_session_value'
      assert_response :success
      assert_equal nil, cookies['_session_id']
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(notice the missing :_session_id =&amp;gt; session_id in the
second)... This just seems to suggest that reset! is doing
something to prevent session fixation. From my experience,
MemCacheStore allows session fixation (i.e. the client can set
their own session_id if they want to).&lt;/p&gt;
&lt;p&gt;If I'm mistaken, can anyone explain how this test is actually
showing that MemCacheStore's implementation prevents
session-fixation?&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-20T20:07:07+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug memcachestore session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2009-09-20T20:08:37+01:00</updated-at>
      <user-id type="integer">23550</user-id>
      <version type="integer">1</version>
      <user-name>Aaron Gibralter</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Alright, I've created a patch for this and ticket #3134.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Alright, I've created a patch for this and ticket &lt;a href=
&quot;/projects/8994/tickets/3134&quot; title=&quot;Ticket #3134&quot;&gt;#3134&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-20T20:51:47+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: action_controller bug memcachestore session-fixation sessions
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2009-09-20T20:51:55+01:00</updated-at>
      <user-id type="integer">23550</user-id>
      <version type="integer">2</version>
      <user-name>Aaron Gibralter</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-25T11:57:30+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: action_controller bug memcachestore patch session-fixation sessions
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug bugmash memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2009-09-25T12:47:45+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Unable to run this on a fresh check out.

error: actionpack/lib/action_controller/session/mem_cache_store.rb: does not exist in index
error: actionpack/test/controller/session/mem_cache_store_test.rb: does not exist in index
Patch failed at 0001.
When you have resolved this problem run &quot;git-am --resolved&quot;.
If you would prefer to skip this patch, instead run</body>
      <body-html>&lt;div&gt;&lt;p&gt;Unable to run this on a fresh check out.&lt;/p&gt;
&lt;p&gt;error:
actionpack/lib/action_controller/session/mem_cache_store.rb: does
not exist in index&lt;br&gt;
error: actionpack/test/controller/session/mem_cache_store_test.rb:
does not exist in index&lt;br&gt;
Patch failed at 0001.&lt;br&gt;
When you have resolved this problem run &quot;git-am --resolved&quot;.&lt;br&gt;
If you would prefer to skip this patch, instead run&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-27T00:13:49+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug bugmash memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2009-09-27T00:13:53+01:00</updated-at>
      <user-id type="integer">71143</user-id>
      <version type="integer">4</version>
      <user-name>Blue Box Chris</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@Aaron: Correct me if i'm wrong, but if `assert_equal nil, cookies['_session_id']` is passing on both cases, it means that the `session_id` is not affected by sending a param named `_session_id` and remains as nil... not sure i see the problem or exactly what is so disturbing around here, care to elaborate some more?

-1 on the patch though, applies on 2-3-stable only and not on master, iv'e added a patch for master too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Aaron: Correct me if i'm wrong, but if &lt;code&gt;assert_equal nil,
cookies['_session_id']&lt;/code&gt; is passing on both cases, it means
that the &lt;code&gt;session_id&lt;/code&gt; is not affected by sending a param
named &lt;code&gt;_session_id&lt;/code&gt; and remains as nil... not sure i see
the problem or exactly what is so disturbing around here, care to
elaborate some more?&lt;/p&gt;
&lt;p&gt;-1 on the patch though, applies on 2-3-stable only and not on
master, iv'e added a patch for master too.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-27T00:54:53+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug bugmash memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2009-09-27T00:54:54+01:00</updated-at>
      <user-id type="integer">36381</user-id>
      <version type="integer">5</version>
      <user-name>Elad Meidar</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1 on Elad's patch.  applies and passes here.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 on Elad's patch. applies and passes here.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-27T02:50:09+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug bugmash memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2009-09-27T02:50:10+01:00</updated-at>
      <user-id type="integer">71145</user-id>
      <version type="integer">6</version>
      <user-name>Blue Box Stephen</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1 verified patch applies and tests pass</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 verified patch applies and tests pass&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-27T03:19:57+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug bugmash memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2009-09-27T03:20:01+01:00</updated-at>
      <user-id type="integer">64236</user-id>
      <version type="integer">7</version>
      <user-name>John Pignata</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Yeah sorry, forgot to say that the patch was for 2-3-stable. The master branch has a new actionpack directory structure... Is there a way to submit a patch for multiple branches? Or should patches always be for master?

@Elad: Ah, so it's just showing that cookie_only is being enforced... kk I get it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah sorry, forgot to say that the patch was for 2-3-stable. The
master branch has a new actionpack directory structure... Is there
a way to submit a patch for multiple branches? Or should patches
always be for master?&lt;/p&gt;
&lt;p&gt;@Elad: Ah, so it's just showing that cookie_only is being
enforced... kk I get it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T04:42:20+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug bugmash memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2009-09-28T04:42:23+01:00</updated-at>
      <user-id type="integer">24615</user-id>
      <version type="integer">8</version>
      <user-name>Aaron Gibralter</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Elad: Actually, why does assert_equal nil, cookies['_session_id'] pass? The test seems like it's trying to show that the session store ignores the URL param :_session_id =&gt; session_id; however, shouldn't get '/set_session_value' set a cookie regardless of the params you pass in??

I *do* think the test is broken because it seems that reset! is causing the get '/set_session_value' to not set a cookie... See these examples:

@@@
# THIS PASSES:
def test_prevents_session_fixation
  with_test_route_set do
    reset!
    get '/set_session_value'
    assert_response :success
    assert_equal nil, cookies['_session_id']
  end
end
# THIS DOESN'T PASS:
def test_prevents_session_fixation
  with_test_route_set do
    get '/set_session_value'
    assert_response :success
    assert_equal nil, cookies['_session_id']
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Elad: Actually, why does assert_equal nil,
cookies['&lt;em&gt;session_id'] pass? The test seems like it's trying to
show that the session store ignores the URL param :&lt;/em&gt;session_id
=&amp;gt; session_id; however, shouldn't get '/set_session_value' set a
cookie regardless of the params you pass in??&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;do&lt;/em&gt; think the test is broken because it seems that
reset! is causing the get '/set_session_value' to not set a
cookie... See these examples:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# THIS PASSES:
def test_prevents_session_fixation
  with_test_route_set do
    reset!
    get '/set_session_value'
    assert_response :success
    assert_equal nil, cookies['_session_id']
  end
end
# THIS DOESN'T PASS:
def test_prevents_session_fixation
  with_test_route_set do
    get '/set_session_value'
    assert_response :success
    assert_equal nil, cookies['_session_id']
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-01T19:23:31+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug bugmash memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2009-10-01T19:35:15+01:00</updated-at>
      <user-id type="integer">23550</user-id>
      <version type="integer">9</version>
      <user-name>Aaron Gibralter</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/13645)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/13645&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-12T12:46:18+00:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: action_controller bug bugmash memcachestore patch session-fixation sessions
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2010-02-12T12:46:18+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">10</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>The patch from @elad no longer applies cleanly to 2-3-stable or master. Given that this issue has existed for some 13 months now, is this issue still relevant?</body>
      <body-html>&lt;div&gt;&lt;p&gt;The patch from @elad no longer applies cleanly to 2-3-stable or
master. Given that this issue has existed for some 13 months now,
is this issue still relevant?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-15T03:17:37+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">148016</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2010-10-15T03:17:39+01:00</updated-at>
      <user-id type="integer">120121</user-id>
      <version type="integer">11</version>
      <user-name>Lucas Willett</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>&lt;a href=&quot;http://www.gamevive.com/WoW/WoW-CD-Key/WoW-CD-Key.html&quot;&gt;wow cataclysm cd key&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/cataclysm-power-leveling-eu.php&quot;&gt;cataclysm power level&lt;/a&gt; 
&lt;a href=&quot;http://www.leveling4wow.com/cataclysm-power-leveling-eu.php&quot;&gt;wow cataclysm leveling&lt;/a&gt; 
&lt;a href=&quot;http://www.gamevive.com/WoW/WoW-CD-Key/WoW-CD-Key.html&quot;&gt;cataclysm cd key&lt;/a&gt; 
&lt;a href=&quot;http://www.gamevive.com/WoW/WoW-CD-Key/WoW-CD-Key.html&quot;&gt;buy cataclysm cd key&lt;/a&gt; 
&lt;a href=&quot;http://www.gamevive.com/WoW-EU/Cheap-WoW-CD-Key/Cheap-WoW-CD-Key.html&quot;&gt;buy world of warcraft cataclysm&lt;/a&gt; 
&lt;a href=&quot;http://www.gamevive.com/cataclysm-power-leveling-eu.php&quot;&gt;wow cataclysm power level&lt;/a&gt;
&lt;a href=&quot;http://www.leveling4wow.com/cataclysm-power-leveling-us.php&quot;&gt;cataclysm leveling&lt;/a&gt;

&lt;a href=&quot;http://www.leveling4wow.com/cataclysm-power-leveling-us.php&quot;&gt;cataclysm power level&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/cataclysm-power-leveling-us.php&quot;&gt;cataclysm leveling&lt;/a&gt;
&lt;a href=&quot;http://www.leveling4wow.com/cataclysm-power-leveling-eu.php&quot;&gt;wow cataclysm power level&lt;/a&gt; 
&lt;a href=&quot;http://www.gamevive.com/cataclysm-power-leveling-us.php&quot;&gt;wow cataclysm power leveling&lt;/a&gt;
&lt;a href=&quot;http://www.leveling4wow.com/cataclysm-power-leveling-us.php&quot;&gt;cataclysm power leveling&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/WoW-EU/Cheap-WoW-CD-Key/Cheap-WoW-CD-Key.html&quot;&gt;buy wow cataclysm&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/WoW/WoW-CD-Key/WoW-CD-Key.html&quot;&gt;buy cataclysm&lt;/a&gt; 
&lt;a href=&quot;http://www.gamevive.com/cataclysm-power-leveling-us.php&quot;&gt;cataclysm power leveling&lt;/a&gt;
&lt;a href=&quot;http://www.leveling4wow.com/cataclysm-power-leveling-eu.php&quot;&gt;wow cataclysm power leveling&lt;/a&gt; 
&lt;a href=&quot;http://www.gamevive.com/WoW-EU/Cheap-WoW-CD-Key/Cheap-WoW-CD-Key.html&quot;&gt;buy wow cataclysm cd key&lt;/a&gt; 

&lt;a href=&quot;http://www.gamevive.com/Aion/Aion-gold/Aion-gold.html&quot;&gt;&lt;strong&gt;aion gold&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/Aion/Aion-power-leveling/Cheap-Aion-power-leveling.html&quot;&gt;&lt;strong&gt;aion power leveling&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/Aion/Aion-CD-key/Aion-CD-key.html&quot;&gt;&lt;strong&gt;aion cd key&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/Aion-eu/Aion-power-leveling-eu/Cheap-Aion-power-leveling-eu.html&quot;&gt;&lt;strong&gt;aion leveling&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/Aion-eu/Aion-gold-eu/Aion-gold-eu.html&quot;&gt;&lt;strong&gt;aion kina&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.aionrealm.com/cheap-aion-gold.html&quot;&gt;&lt;strong&gt;aion kinah&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.aionrealm.com/&quot;&gt;&lt;strong&gt;cheap  aion gold&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/Aion/Aion-gold/Aion-gold.html&quot;&gt;&lt;strong&gt;buy aion gold&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/Aion/Aion-power-leveling/Cheap-Aion-power-leveling.html&quot;&gt;&lt;strong&gt;aion power level&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/Aion-eu/Aion-gold-eu/Aion-gold-eu.html&quot;&gt;&lt;strong&gt;buy aion kinah&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.aionrealm.com/cheap-aion-gold.html&quot;&gt;&lt;strong&gt;aion online gold&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/Aion-us/Aion-Gold-us/Cheap-Aion-Gold-us.html&quot;&gt;&lt;strong&gt;aion kinah&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.gamevive.com/Aion-eu/Aion-gold-eu/Aion-gold-eu.html&quot;&gt;&lt;strong&gt;cheap aion kinah&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.aionrealm.com/aion_pwl_us.php&quot;&gt;&lt;strong&gt;aion power level&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.aionrealm.com/&quot;&gt;&lt;strong&gt;aion  power leveling&lt;/strong&gt;&lt;/a&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;http://www.gamevive.com/WoW/WoW-CD-Key/WoW-CD-Key.html&quot;&gt;wow
cataclysm cd key&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/cataclysm-power-leveling-eu.php&quot;&gt;cataclysm
power level&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.leveling4wow.com/cataclysm-power-leveling-eu.php&quot;&gt;wow
cataclysm leveling&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/WoW/WoW-CD-Key/WoW-CD-Key.html&quot;&gt;cataclysm
cd key&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/WoW/WoW-CD-Key/WoW-CD-Key.html&quot;&gt;buy
cataclysm cd key&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/WoW-EU/Cheap-WoW-CD-Key/Cheap-WoW-CD-Key.html&quot;&gt;
buy world of warcraft cataclysm&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/cataclysm-power-leveling-eu.php&quot;&gt;wow
cataclysm power level&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.leveling4wow.com/cataclysm-power-leveling-us.php&quot;&gt;cataclysm
leveling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://www.leveling4wow.com/cataclysm-power-leveling-us.php&quot;&gt;cataclysm
power level&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/cataclysm-power-leveling-us.php&quot;&gt;cataclysm
leveling&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.leveling4wow.com/cataclysm-power-leveling-eu.php&quot;&gt;wow
cataclysm power level&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/cataclysm-power-leveling-us.php&quot;&gt;wow
cataclysm power leveling&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.leveling4wow.com/cataclysm-power-leveling-us.php&quot;&gt;cataclysm
power leveling&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/WoW-EU/Cheap-WoW-CD-Key/Cheap-WoW-CD-Key.html&quot;&gt;
buy wow cataclysm&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/WoW/WoW-CD-Key/WoW-CD-Key.html&quot;&gt;buy
cataclysm&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/cataclysm-power-leveling-us.php&quot;&gt;cataclysm
power leveling&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.leveling4wow.com/cataclysm-power-leveling-eu.php&quot;&gt;wow
cataclysm power leveling&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/WoW-EU/Cheap-WoW-CD-Key/Cheap-WoW-CD-Key.html&quot;&gt;
buy wow cataclysm cd key&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://www.gamevive.com/Aion/Aion-gold/Aion-gold.html&quot;&gt;&lt;strong&gt;aion
gold&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/Aion/Aion-power-leveling/Cheap-Aion-power-leveling.html&quot;&gt;
&lt;strong&gt;aion power leveling&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/Aion/Aion-CD-key/Aion-CD-key.html&quot;&gt;&lt;strong&gt;
aion cd key&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/Aion-eu/Aion-power-leveling-eu/Cheap-Aion-power-leveling-eu.html&quot;&gt;
&lt;strong&gt;aion leveling&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/Aion-eu/Aion-gold-eu/Aion-gold-eu.html&quot;&gt;&lt;strong&gt;
aion kina&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.aionrealm.com/cheap-aion-gold.html&quot;&gt;&lt;strong&gt;aion
kinah&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.aionrealm.com/&quot;&gt;&lt;strong&gt;cheap aion
gold&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/Aion/Aion-gold/Aion-gold.html&quot;&gt;&lt;strong&gt;buy
aion gold&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/Aion/Aion-power-leveling/Cheap-Aion-power-leveling.html&quot;&gt;
&lt;strong&gt;aion power level&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/Aion-eu/Aion-gold-eu/Aion-gold-eu.html&quot;&gt;&lt;strong&gt;
buy aion kinah&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.aionrealm.com/cheap-aion-gold.html&quot;&gt;&lt;strong&gt;aion online
gold&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/Aion-us/Aion-Gold-us/Cheap-Aion-Gold-us.html&quot;&gt;
&lt;strong&gt;aion kinah&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://www.gamevive.com/Aion-eu/Aion-gold-eu/Aion-gold-eu.html&quot;&gt;&lt;strong&gt;
cheap aion kinah&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.aionrealm.com/aion_pwl_us.php&quot;&gt;&lt;strong&gt;aion
power level&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.aionrealm.com/&quot;&gt;&lt;strong&gt;aion power
leveling&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-23T07:16:54+01:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">148016</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_controller bug memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2010-10-25T03:23:39+01:00</updated-at>
      <user-id type="integer">121508</user-id>
      <version type="integer">12</version>
      <user-name>ffxivgil</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:21:17+00:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">148016</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>action_controller bug memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2011-02-02T16:28:43+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">13</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:21:19+00:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">148016</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>action_controller bug memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2011-02-02T16:28:27+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">14</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>So I just took another look at this.

    def test_prevents_session_fixation
      with_test_route_set do
        get '/get_session_value'
        assert_response :success
        assert_equal 'foo: nil', response.body
        session_id = cookies['_session_id']

        reset!

        get '/set_session_value', :_session_id =&gt; session_id
        assert_response :success
        assert_not_equal session_id, cookies['_session_id']
      end
    end

Basically, Rails's session fixation protection is that it doesn't accept a session_id as a parameter (by default -- if you pass the session option `cookie_only: false` session fixation can be a problem). What I was confused about in this test is the part before `reset!`, but now I guess it makes sense: it's just generating a &quot;valid&quot; session_id.

Please close this ticket.</body>
      <body-html>&lt;div&gt;&lt;p&gt;So I just took another look at this.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def test_prevents_session_fixation
  with_test_route_set do
    get '/get_session_value'
    assert_response :success
    assert_equal 'foo: nil', response.body
    session_id = cookies['_session_id']

    reset!

    get '/set_session_value', :_session_id =&amp;gt; session_id
    assert_response :success
    assert_not_equal session_id, cookies['_session_id']
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Basically, Rails's session fixation protection is that it
doesn't accept a session_id as a parameter (by default -- if you
pass the session option &lt;code&gt;cookie_only: false&lt;/code&gt; session
fixation can be a problem). What I was confused about in this test
is the part before &lt;code&gt;reset!&lt;/code&gt;, but now I guess it makes
sense: it's just generating a &quot;valid&quot; session_id.&lt;/p&gt;
&lt;p&gt;Please close this ticket.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-14T14:50:59+00:00</created-at>
      <creator-id type="integer">23550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3238</number>
      <permalink>mem_cache_store_test-has-flawed-test</permalink>
      <priority type="integer">148016</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>action_controller bug memcachestore patch session-fixation sessions</tag>
      <title>mem_cache_store_test has flawed test</title>
      <updated-at type="datetime">2011-02-14T14:51:04+00:00</updated-at>
      <user-id type="integer">23550</user-id>
      <version type="integer">15</version>
      <user-name>Aaron Gibralter</user-name>
      <creator-name>Aaron Gibralter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3238</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>c50473d4ebda9b46ddc85ca7979978249f793318</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-20T20:51:47+01:00</created-at>
      <filename>mem_cache_store_fix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">273515</id>
      <size type="integer">2478</size>
      <uploader-id type="integer">23550</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/273515/mem_cache_store_fix.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>bd7a00b123921400a09a7866814e1727dc668027</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-27T00:54:53+01:00</created-at>
      <filename>LH3238-mem_cache_store_prevents_arbitrary_key_selection-master.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">279514</id>
      <size type="integer">2397</size>
      <uploader-id type="integer">36381</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/279514/LH3238-mem_cache_store_prevents_arbitrary_key_selection-master.diff</url>
    </attachment>
  </attachments>
</ticket>
