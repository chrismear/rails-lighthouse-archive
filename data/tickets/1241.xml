<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-20T21:44:24+01:00</created-at>
  <creator-id type="integer">16155</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1241</number>
  <permalink>nan-inputs-to-actionviews-numberhelper-methods-will-become-00-in-order-to-standardize-output</permalink>
  <priority type="integer">646</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>actionpack action_view patch</tag>
  <title>NaN inputs to ActionView's NumberHelper methods will become 0.0 in order to standardize output</title>
  <updated-at type="datetime">2009-01-19T20:07:13+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Brennan Dunn</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1241</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When writing some reporting code that ended up dividing 0.0 by 0.0 (while generating a ratio), number helpers weren't performing as expected as they didn't have any handling in place for `NaN` values.

I'm assuming that anytime a `NaN` Float value comes into a number helper, the expected return should be as if the input number was 0.0.

For example, `number_to_percentage(0.0 / 0.0)` should result with '0.00%', rather than 'NaN'.</original-body>
  <latest-body>When writing some reporting code that ended up dividing 0.0 by 0.0 (while generating a ratio), number helpers weren't performing as expected as they didn't have any handling in place for `NaN` values.

I'm assuming that anytime a `NaN` Float value comes into a number helper, the expected return should be as if the input number was 0.0.

For example, `number_to_percentage(0.0 / 0.0)` should result with '0.00%', rather than 'NaN'.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When writing some reporting code that ended up dividing 0.0 by
0.0 (while generating a ratio), number helpers weren't performing
as expected as they didn't have any handling in place for
&lt;code&gt;NaN&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;I'm assuming that anytime a &lt;code&gt;NaN&lt;/code&gt; Float value comes
into a number helper, the expected return should be as if the input
number was 0.0.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;number_to_percentage(0.0 / 0.0)&lt;/code&gt; should
result with '0.00%', rather than 'NaN'.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When writing some reporting code that ended up dividing 0.0 by 0.0 (while generating a ratio), number helpers weren't performing as expected as they didn't have any handling in place for `NaN` values.

I'm assuming that anytime a `NaN` Float value comes into a number helper, the expected return should be as if the input number was 0.0.

For example, `number_to_percentage(0.0 / 0.0)` should result with '0.00%', rather than 'NaN'.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When writing some reporting code that ended up dividing 0.0 by
0.0 (while generating a ratio), number helpers weren't performing
as expected as they didn't have any handling in place for
&lt;code&gt;NaN&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;I'm assuming that anytime a &lt;code&gt;NaN&lt;/code&gt; Float value comes
into a number helper, the expected return should be as if the input
number was 0.0.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;number_to_percentage(0.0 / 0.0)&lt;/code&gt; should
result with '0.00%', rather than 'NaN'.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-20T21:44:24+01:00</created-at>
      <creator-id type="integer">16155</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1241</number>
      <permalink>nan-inputs-to-actionviews-numberhelper-methods-will-become-00-in-order-to-standardize-output</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack action_view patch</tag>
      <title>NaN inputs to ActionView's NumberHelper methods will become 0.0 in order to standardize output</title>
      <updated-at type="datetime">2008-10-20T21:44:30+01:00</updated-at>
      <user-id type="integer">16155</user-id>
      <version type="integer">1</version>
      <user-name>Brennan Dunn</user-name>
      <creator-name>Brennan Dunn</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1241</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't think NaN should be normalized as 0 as it could hide real errors/code smells too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think NaN should be normalized as 0 as it could hide
real errors/code smells too.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-19T20:07:10+00:00</created-at>
      <creator-id type="integer">16155</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1241</number>
      <permalink>nan-inputs-to-actionviews-numberhelper-methods-will-become-00-in-order-to-standardize-output</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>actionpack action_view patch</tag>
      <title>NaN inputs to ActionView's NumberHelper methods will become 0.0 in order to standardize output</title>
      <updated-at type="datetime">2009-01-19T20:07:13+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Brennan Dunn</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1241</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>d9bad951e9b4247feb79788241d6032a543be078</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-20T21:44:24+01:00</created-at>
      <filename>nan-to-zero.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">55516</id>
      <size type="integer">5185</size>
      <uploader-id type="integer">16155</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/55516/nan-to-zero.patch</url>
    </attachment>
  </attachments>
</ticket>
