<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-07T03:05:56+00:00</created-at>
  <creator-id type="integer">19998</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1706</number>
  <permalink>clearing-a-has_many-does-not-nil-the-object-fks-and-loading-a-has_many-adds-db-objects-in-preference-to-in-memory-objects</permalink>
  <priority type="integer">1019</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord association associations collection has_many</tag>
  <title>Clearing a has_many does not nil the object FKs, and loading a has_many adds DB objects in preference to in-memory objects</title>
  <updated-at type="datetime">2009-03-07T14:05:32+00:00</updated-at>
  <user-id type="integer">7211</user-id>
  <version type="integer">3</version>
  <user-name>CancelProfileIsBroken</user-name>
  <creator-name>Mark Reginald James</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1706</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>A response to the unexpected behaviour described in [this](http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/4788efe8a1f5e6db) mailing list thread.

First, the has_many delete_records method is patched to nil the foreign keys of the in-memory objects after they are NULLed in the database.

And second, the association_collection load_target method is patched to use in-memory objects in the collection in preference to objects from the database.</original-body>
  <latest-body>A response to the unexpected behaviour described in [this](http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/4788efe8a1f5e6db) mailing list thread.

First, the has_many delete_records method is patched to nil the foreign keys of the in-memory objects after they are NULLed in the database.

And second, the association_collection load_target method is patched to use in-memory objects in the collection in preference to objects from the database.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;A response to the unexpected behaviour described in &lt;a href=&quot;http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/4788efe8a1f5e6db&quot;&gt;
this&lt;/a&gt; mailing list thread.&lt;/p&gt;
&lt;p&gt;First, the has_many delete_records method is patched to nil the
foreign keys of the in-memory objects after they are NULLed in the
database.&lt;/p&gt;
&lt;p&gt;And second, the association_collection load_target method is
patched to use in-memory objects in the collection in preference to
objects from the database.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A response to the unexpected behaviour described in [this](http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/4788efe8a1f5e6db) mailing list thread.

First, the has_many delete_records method is patched to nil the foreign keys of the in-memory objects after they are NULLed in the database.

And second, the association_collection load_target method is patched to use in-memory objects in the collection in preference to objects from the database.</body>
      <body-html>&lt;div&gt;&lt;p&gt;A response to the unexpected behaviour described in &lt;a href=&quot;http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/4788efe8a1f5e6db&quot;&gt;
this&lt;/a&gt; mailing list thread.&lt;/p&gt;
&lt;p&gt;First, the has_many delete_records method is patched to nil the
foreign keys of the in-memory objects after they are NULLed in the
database.&lt;/p&gt;
&lt;p&gt;And second, the association_collection load_target method is
patched to use in-memory objects in the collection in preference to
objects from the database.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-07T03:05:57+00:00</created-at>
      <creator-id type="integer">19998</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1706</number>
      <permalink>clearing-a-has_many-does-not-nil-the-object-fks-and-loading-a-has_many-adds-db-objects-in-preference-to-in-memory-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord association associations collection has_many</tag>
      <title>Clearing a has_many does not nil the object FKs, and loading a has_many adds DB objects in preference to in-memory objects</title>
      <updated-at type="datetime">2009-01-07T03:06:02+00:00</updated-at>
      <user-id type="integer">19998</user-id>
      <version type="integer">1</version>
      <user-name>Mark Reginald James</user-name>
      <creator-name>Mark Reginald James</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1706</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You didn't attach the patch :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;You didn't attach the patch :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-07T09:59:39+00:00</created-at>
      <creator-id type="integer">19998</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1706</number>
      <permalink>clearing-a-has_many-does-not-nil-the-object-fks-and-loading-a-has_many-adds-db-objects-in-preference-to-in-memory-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord association associations collection has_many</tag>
      <title>Clearing a has_many does not nil the object FKs, and loading a has_many adds DB objects in preference to in-memory objects</title>
      <updated-at type="datetime">2009-01-07T09:59:45+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">2</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Mark Reginald James</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1706</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-07T14:05:29+00:00</created-at>
      <creator-id type="integer">19998</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1706</number>
      <permalink>clearing-a-has_many-does-not-nil-the-object-fks-and-loading-a-has_many-adds-db-objects-in-preference-to-in-memory-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord association associations collection has_many</tag>
      <title>Clearing a has_many does not nil the object FKs, and loading a has_many adds DB objects in preference to in-memory objects</title>
      <updated-at type="datetime">2009-03-07T14:05:32+00:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Mark Reginald James</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1706</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
