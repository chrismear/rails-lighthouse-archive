<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-16T03:33:34+00:00</created-at>
  <creator-id type="integer">117569</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6178</number>
  <permalink>dbmigrateup-and-dbmigratedown-dont-use-transactions</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>database databasesrake migrations migrator postgresql rails303 sqlite transactions</tag>
  <title>db:migrate:up and db:migrate:down don't use transactions</title>
  <updated-at type="datetime">2011-03-17T00:01:35+00:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">3</version>
  <user-name>rails</user-name>
  <creator-name>Arthur Pirogovski</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6178</url>
  <priority-name nil="true"></priority-name>
  <original-body>While db:migrate and db:rollback both wrap changes into transactions if database engine supports DDL transactions, db:migrate:up and db:migrate:down don't even try to detect if engine supports this.

Also, the code which handles this is not really very DRY.

up/down tasks are using this piece of code:

@@@ ruby
    def run
      target = migrations.detect { |m| m.version == @target_version }
      raise UnknownMigrationVersionError.new(@target_version) if target.nil?
      unless (up? &amp;&amp; migrated.include?(target.version.to_i)) || (down? &amp;&amp; !migrated.include?(target.version.to_i))
        target.migrate(@direction)
        record_version_state_after_migrating(target.version)
      end
    end
@@@

migrate/rollback tasks are using this one:

@@@ ruby
    def migrate
      current = migrations.detect { |m| m.version == current_version }
      target = migrations.detect { |m| m.version == @target_version }

      if target.nil? &amp;&amp; !@target_version.nil? &amp;&amp; @target_version &gt; 0
        raise UnknownMigrationVersionError.new(@target_version)
      end
...
        # On our way up, we skip migrating the ones we've already migrated
        next if up? &amp;&amp; migrated.include?(migration.version.to_i)

        # On our way down, we skip reverting the ones we've never migrated
        if down? &amp;&amp; !migrated.include?(migration.version.to_i)
          migration.announce 'never migrated, skipping'; migration.write
          next
        end

        begin
          ddl_transaction do
            migration.migrate(@direction)
            record_version_state_after_migrating(migration.version)
          end
        rescue =&gt; e
...
@@@

Need to:

* make both up/down and migrate/rollback use the same method

* ensure up/down/migrate/rollback tasks are using ddl_transaction wrapper

* backport to 2.x since it is also affected</original-body>
  <latest-body>While db:migrate and db:rollback both wrap changes into transactions if database engine supports DDL transactions, db:migrate:up and db:migrate:down don't even try to detect if engine supports this.

Also, the code which handles this is not really very DRY.

up/down tasks are using this piece of code:

@@@ ruby
    def run
      target = migrations.detect { |m| m.version == @target_version }
      raise UnknownMigrationVersionError.new(@target_version) if target.nil?
      unless (up? &amp;&amp; migrated.include?(target.version.to_i)) || (down? &amp;&amp; !migrated.include?(target.version.to_i))
        target.migrate(@direction)
        record_version_state_after_migrating(target.version)
      end
    end
@@@

migrate/rollback tasks are using this one:

@@@ ruby
    def migrate
      current = migrations.detect { |m| m.version == current_version }
      target = migrations.detect { |m| m.version == @target_version }

      if target.nil? &amp;&amp; !@target_version.nil? &amp;&amp; @target_version &gt; 0
        raise UnknownMigrationVersionError.new(@target_version)
      end
...
        # On our way up, we skip migrating the ones we've already migrated
        next if up? &amp;&amp; migrated.include?(migration.version.to_i)

        # On our way down, we skip reverting the ones we've never migrated
        if down? &amp;&amp; !migrated.include?(migration.version.to_i)
          migration.announce 'never migrated, skipping'; migration.write
          next
        end

        begin
          ddl_transaction do
            migration.migrate(@direction)
            record_version_state_after_migrating(migration.version)
          end
        rescue =&gt; e
...
@@@

Need to:

* make both up/down and migrate/rollback use the same method

* ensure up/down/migrate/rollback tasks are using ddl_transaction wrapper

* backport to 2.x since it is also affected</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;While db:migrate and db:rollback both wrap changes into
transactions if database engine supports DDL transactions,
db:migrate:up and db:migrate:down don't even try to detect if
engine supports this.&lt;/p&gt;
&lt;p&gt;Also, the code which handles this is not really very DRY.&lt;/p&gt;
&lt;p&gt;up/down tasks are using this piece of code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    def run
      target = migrations.detect { |m| m.version == @target_version }
      raise UnknownMigrationVersionError.new(@target_version) if target.nil?
      unless (up? &amp;amp;&amp;amp; migrated.include?(target.version.to_i)) || (down? &amp;amp;&amp;amp; !migrated.include?(target.version.to_i))
        target.migrate(@direction)
        record_version_state_after_migrating(target.version)
      end
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;migrate/rollback tasks are using this one:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    def migrate
      current = migrations.detect { |m| m.version == current_version }
      target = migrations.detect { |m| m.version == @target_version }

      if target.nil? &amp;amp;&amp;amp; !@target_version.nil? &amp;amp;&amp;amp; @target_version &amp;gt; 0
        raise UnknownMigrationVersionError.new(@target_version)
      end
...
        # On our way up, we skip migrating the ones we've already migrated
        next if up? &amp;amp;&amp;amp; migrated.include?(migration.version.to_i)

        # On our way down, we skip reverting the ones we've never migrated
        if down? &amp;amp;&amp;amp; !migrated.include?(migration.version.to_i)
          migration.announce 'never migrated, skipping'; migration.write
          next
        end

        begin
          ddl_transaction do
            migration.migrate(@direction)
            record_version_state_after_migrating(migration.version)
          end
        rescue =&amp;gt; e
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make both up/down and migrate/rollback use the same method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ensure up/down/migrate/rollback tasks are using ddl_transaction
wrapper&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;backport to 2.x since it is also affected&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>While db:migrate and db:rollback both wrap changes into transactions if database engine supports DDL transactions, db:migrate:up and db:migrate:down don't even try to detect if engine supports this.

Also, the code which handles this is not really very DRY.

up/down tasks are using this piece of code:

@@@ ruby
    def run
      target = migrations.detect { |m| m.version == @target_version }
      raise UnknownMigrationVersionError.new(@target_version) if target.nil?
      unless (up? &amp;&amp; migrated.include?(target.version.to_i)) || (down? &amp;&amp; !migrated.include?(target.version.to_i))
        target.migrate(@direction)
        record_version_state_after_migrating(target.version)
      end
    end
@@@

migrate/rollback tasks are using this one:

@@@ ruby
    def migrate
      current = migrations.detect { |m| m.version == current_version }
      target = migrations.detect { |m| m.version == @target_version }

      if target.nil? &amp;&amp; !@target_version.nil? &amp;&amp; @target_version &gt; 0
        raise UnknownMigrationVersionError.new(@target_version)
      end
...
        # On our way up, we skip migrating the ones we've already migrated
        next if up? &amp;&amp; migrated.include?(migration.version.to_i)

        # On our way down, we skip reverting the ones we've never migrated
        if down? &amp;&amp; !migrated.include?(migration.version.to_i)
          migration.announce 'never migrated, skipping'; migration.write
          next
        end

        begin
          ddl_transaction do
            migration.migrate(@direction)
            record_version_state_after_migrating(migration.version)
          end
        rescue =&gt; e
...
@@@

Need to:

* make both up/down and migrate/rollback use the same method

* ensure up/down/migrate/rollback tasks are using ddl_transaction wrapper

* backport to 2.x since it is also affected</body>
      <body-html>&lt;div&gt;&lt;p&gt;While db:migrate and db:rollback both wrap changes into
transactions if database engine supports DDL transactions,
db:migrate:up and db:migrate:down don't even try to detect if
engine supports this.&lt;/p&gt;
&lt;p&gt;Also, the code which handles this is not really very DRY.&lt;/p&gt;
&lt;p&gt;up/down tasks are using this piece of code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    def run
      target = migrations.detect { |m| m.version == @target_version }
      raise UnknownMigrationVersionError.new(@target_version) if target.nil?
      unless (up? &amp;amp;&amp;amp; migrated.include?(target.version.to_i)) || (down? &amp;amp;&amp;amp; !migrated.include?(target.version.to_i))
        target.migrate(@direction)
        record_version_state_after_migrating(target.version)
      end
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;migrate/rollback tasks are using this one:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    def migrate
      current = migrations.detect { |m| m.version == current_version }
      target = migrations.detect { |m| m.version == @target_version }

      if target.nil? &amp;amp;&amp;amp; !@target_version.nil? &amp;amp;&amp;amp; @target_version &amp;gt; 0
        raise UnknownMigrationVersionError.new(@target_version)
      end
...
        # On our way up, we skip migrating the ones we've already migrated
        next if up? &amp;amp;&amp;amp; migrated.include?(migration.version.to_i)

        # On our way down, we skip reverting the ones we've never migrated
        if down? &amp;amp;&amp;amp; !migrated.include?(migration.version.to_i)
          migration.announce 'never migrated, skipping'; migration.write
          next
        end

        begin
          ddl_transaction do
            migration.migrate(@direction)
            record_version_state_after_migrating(migration.version)
          end
        rescue =&amp;gt; e
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make both up/down and migrate/rollback use the same method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ensure up/down/migrate/rollback tasks are using ddl_transaction
wrapper&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;backport to 2.x since it is also affected&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-16T03:33:34+00:00</created-at>
      <creator-id type="integer">117569</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6178</number>
      <permalink>dbmigrateup-and-dbmigratedown-dont-use-transactions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>database databases.rake migrations migrator postgresql rails3.0.3 sqlite transactions</tag>
      <title>db:migrate:up and db:migrate:down don't use transactions</title>
      <updated-at type="datetime">2010-12-16T03:33:36+00:00</updated-at>
      <user-id type="integer">117569</user-id>
      <version type="integer">1</version>
      <user-name>Arthur Pirogovski</user-name>
      <creator-name>Arthur Pirogovski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6178</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-17T00:00:13+00:00</created-at>
      <creator-id type="integer">117569</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: database databases.rake migrations migrator postgresql rails3.0.3 sqlite transactions
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6178</number>
      <permalink>dbmigrateup-and-dbmigratedown-dont-use-transactions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>database databasesrake migrations migrator postgresql rails303 sqlite transactions</tag>
      <title>db:migrate:up and db:migrate:down don't use transactions</title>
      <updated-at type="datetime">2011-03-17T00:01:35+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">2</version>
      <user-name>rails</user-name>
      <creator-name>Arthur Pirogovski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6178</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-17T00:00:13+00:00</created-at>
      <creator-id type="integer">117569</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6178</number>
      <permalink>dbmigrateup-and-dbmigratedown-dont-use-transactions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>database databasesrake migrations migrator postgresql rails303 sqlite transactions</tag>
      <title>db:migrate:up and db:migrate:down don't use transactions</title>
      <updated-at type="datetime">2011-03-17T00:01:29+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Arthur Pirogovski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6178</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
