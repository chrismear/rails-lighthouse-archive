<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-27T11:27:47+00:00</created-at>
  <creator-id type="integer">12893</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1276</number>
  <permalink>rjs-c</permalink>
  <priority type="integer">681</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>RJS &amp; C.</title>
  <updated-at type="datetime">2008-10-30T10:50:48+00:00</updated-at>
  <user-id type="integer">83</user-id>
  <version type="integer">2</version>
  <user-name>DHH</user-name>
  <creator-name>DAddYE</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1276</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Hello,

I want report a suggestion.

Now rails is great because in one framework we have all! 

Most of us don't like prototype, rjs &amp; c.

In my opinion we can make the easy use of rails with ajax in a unobtrusive.

See that:

**Helpers:**
 The most usefull helper are link_to_remote, form_remote etc... but in my opinion make the html code very unclean:

Why do some like this: 

@@@ html
  # Generates: &lt;a href=&quot;#&quot; onclick=&quot;new Ajax.Updater({success:'posts',failure:'error'}, '/blog/destroy/5',
  #            {asynchronous:true, evalScripts:true}); return false;&quot;&gt;Delete this post&lt;/a&gt;
@@@

do some like
@@@ html
  # Generates: &lt;a href=&quot;#&quot; onclick=&quot;linkToRemote('/blog/destroy/5');&quot;&gt;Delete this post&lt;/a&gt;
@@@

Then you can easy make a /public/javascripts/adapter.js (yes the template can be in prototype) with all ajax functions that are used by prototype/scriptaculus helpers

So we can rename this two modules in AjaxHelper/EffectsHelper...

In this way, rails can be bundled with prototype and for a lot of newbie users still happy without any problem with this change. But for the most users, that now love jquery, mootools, extjs can simply change their adapter.js and use all beautifull ajax/effects helpers without install some (good) plugins like jRails.

**Views:**
Now if we make an ajax request mime: text/javascripts rails look for rjs template.

Ive see few project and I don't know any person that love rjs, because are limited and are not a standard...
Why don't remove rjs in favor of a simply js.erb template?

I know there is format.js, but all this small changes for people that don't use prototype complicate the life

Why:

@@@
render :update do |page|
  page &lt;&lt; &quot;alert('test')&quot;
end
@@@

and not:
@@@
render :js =&gt; &quot;alert('test')&quot;
@@@

I think you can follow my suggestion, rails still easy for prototype users, but very very flexible for people that need some different js frameworks. And in my opinion can be a standard.

Think in future when people can do this:

@@@
 rails myapp --js prototype/jquery/mootools
@@@

One more thing, like merb, why insert haml as choice of developper integrated in rails?

@@@
  rails myapp --template erb/haml
@@@

Thanks</original-body>
  <latest-body>Hello,

I want report a suggestion.

Now rails is great because in one framework we have all! 

Most of us don't like prototype, rjs &amp; c.

In my opinion we can make the easy use of rails with ajax in a unobtrusive.

See that:

**Helpers:**
 The most usefull helper are link_to_remote, form_remote etc... but in my opinion make the html code very unclean:

Why do some like this: 

@@@ html
  # Generates: &lt;a href=&quot;#&quot; onclick=&quot;new Ajax.Updater({success:'posts',failure:'error'}, '/blog/destroy/5',
  #            {asynchronous:true, evalScripts:true}); return false;&quot;&gt;Delete this post&lt;/a&gt;
@@@

do some like
@@@ html
  # Generates: &lt;a href=&quot;#&quot; onclick=&quot;linkToRemote('/blog/destroy/5');&quot;&gt;Delete this post&lt;/a&gt;
@@@

Then you can easy make a /public/javascripts/adapter.js (yes the template can be in prototype) with all ajax functions that are used by prototype/scriptaculus helpers

So we can rename this two modules in AjaxHelper/EffectsHelper...

In this way, rails can be bundled with prototype and for a lot of newbie users still happy without any problem with this change. But for the most users, that now love jquery, mootools, extjs can simply change their adapter.js and use all beautifull ajax/effects helpers without install some (good) plugins like jRails.

**Views:**
Now if we make an ajax request mime: text/javascripts rails look for rjs template.

Ive see few project and I don't know any person that love rjs, because are limited and are not a standard...
Why don't remove rjs in favor of a simply js.erb template?

I know there is format.js, but all this small changes for people that don't use prototype complicate the life

Why:

@@@
render :update do |page|
  page &lt;&lt; &quot;alert('test')&quot;
end
@@@

and not:
@@@
render :js =&gt; &quot;alert('test')&quot;
@@@

I think you can follow my suggestion, rails still easy for prototype users, but very very flexible for people that need some different js frameworks. And in my opinion can be a standard.

Think in future when people can do this:

@@@
 rails myapp --js prototype/jquery/mootools
@@@

One more thing, like merb, why insert haml as choice of developper integrated in rails?

@@@
  rails myapp --template erb/haml
@@@

Thanks</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I want report a suggestion.&lt;/p&gt;
&lt;p&gt;Now rails is great because in one framework we have all!&lt;/p&gt;
&lt;p&gt;Most of us don't like prototype, rjs &amp;amp; c.&lt;/p&gt;
&lt;p&gt;In my opinion we can make the easy use of rails with ajax in a
unobtrusive.&lt;/p&gt;
&lt;p&gt;See that:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Helpers:&lt;/strong&gt; The most usefull helper are
link_to_remote, form_remote etc... but in my opinion make the html
code very unclean:&lt;/p&gt;
&lt;p&gt;Why do some like this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
  # Generates: &amp;lt;a href=&amp;quot;#&amp;quot; onclick=&amp;quot;new Ajax.Updater({success:'posts',failure:'error'}, '/blog/destroy/5',
  #            {asynchronous:true, evalScripts:true}); return false;&amp;quot;&amp;gt;Delete this post&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;do some like&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
  # Generates: &amp;lt;a href=&amp;quot;#&amp;quot; onclick=&amp;quot;linkToRemote('/blog/destroy/5');&amp;quot;&amp;gt;Delete this post&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can easy make a /public/javascripts/adapter.js (yes the
template can be in prototype) with all ajax functions that are used
by prototype/scriptaculus helpers&lt;/p&gt;
&lt;p&gt;So we can rename this two modules in
AjaxHelper/EffectsHelper...&lt;/p&gt;
&lt;p&gt;In this way, rails can be bundled with prototype and for a lot
of newbie users still happy without any problem with this change.
But for the most users, that now love jquery, mootools, extjs can
simply change their adapter.js and use all beautifull ajax/effects
helpers without install some (good) plugins like jRails.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Views:&lt;/strong&gt; Now if we make an ajax request mime:
text/javascripts rails look for rjs template.&lt;/p&gt;
&lt;p&gt;Ive see few project and I don't know any person that love rjs,
because are limited and are not a standard... Why don't remove rjs
in favor of a simply js.erb template?&lt;/p&gt;
&lt;p&gt;I know there is format.js, but all this small changes for people
that don't use prototype complicate the life&lt;/p&gt;
&lt;p&gt;Why:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
render :update do |page|
  page &amp;lt;&amp;lt; &amp;quot;alert('test')&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and not:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
render :js =&amp;gt; &amp;quot;alert('test')&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think you can follow my suggestion, rails still easy for
prototype users, but very very flexible for people that need some
different js frameworks. And in my opinion can be a standard.&lt;/p&gt;
&lt;p&gt;Think in future when people can do this:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
 rails myapp --js prototype/jquery/mootools
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One more thing, like merb, why insert haml as choice of
developper integrated in rails?&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
  rails myapp --template erb/haml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello,

I want report a suggestion.

Now rails is great because in one framework we have all! 

Most of us don't like prototype, rjs &amp; c.

In my opinion we can make the easy use of rails with ajax in a unobtrusive way.

See that:

**Helpers:**
 The most usefull helper are link_to_remote, form_remote etc... but in my opinion make the html code very unclean:

Why do some like this? 

@@@ html
&lt;a href=&quot;#&quot; onclick=&quot;new Ajax.Updater({success:'posts',failure:'error'}, '/blog/destroy/5',
{asynchronous:true, evalScripts:true}); return false;&quot;&gt;Delete this post&lt;/a&gt;
@@@

in favor of:
@@@ html
&lt;a href=&quot;'/blog/destroy/5&quot; onclick=&quot;linkToRemote('/blog/destroy/5');&quot;&gt;Delete this post&lt;/a&gt;
@@@

Then you can easy make a /adapter.js (yes the template can be in prototype) with all ajax functions that are used by prototype/scriptaculus helpers like:

@@@ javascripts

function linkToRemote(url){
new Ajax.Updater({success:'posts',failure:'error'}, url, ...
}
@@@

So we can rename this two modules in AjaxHelper/EffectsHelper...

In this way, rails can be bundled with prototype and for a lot of newbie users still happy without any problem with this change. But for the most users that love jquery, mootools, extjs can simply change their adapter.js and use all beautifull ajax/effects helpers without install some (good) plugins like jRails and edit by hand all helpers.

**Views:**
Now if we make an ajax request mime: text/javascripts rails look for rjs template.

Ive see very very few project that use it and I don't know any person that love and use rjs templates, because are limited and are not a standard... Why don't remove rjs in favor of a simply js.erb template?

In controllers we can still use some like:

@@@
  render :js do |page|
    page.replace_html ...
  end
@@@

and in our adapter.js

@@@
function replaceHtml(id, text){
 new Element.update(id, text);
}
@@@

(Im not sure that the prototype syntax are correct :D)

also why this?:

@@@
render :update do |page|
  page &lt;&lt; &quot;alert('test')&quot;
end
@@@

and not:
@@@
render :js =&gt; &quot;alert('test')&quot;
@@@

I know there is format.js, but all this small changes for people that don't use prototype complicate the life

I think you can follow my suggestion, rails still easy for prototype users, but very very flexible for people that need some different js frameworks. And in my opinion can be a standard.

Think in future when people can do this:

@@@
 rails myapp --js prototype/jquery/mootools
@@@

One more thing, like merb, why insert haml as choice of developper integrated in rails?

@@@
  rails myapp --template erb/haml
@@@

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I want report a suggestion.&lt;/p&gt;
&lt;p&gt;Now rails is great because in one framework we have all!&lt;/p&gt;
&lt;p&gt;Most of us don't like prototype, rjs &amp;amp; c.&lt;/p&gt;
&lt;p&gt;In my opinion we can make the easy use of rails with ajax in a
unobtrusive way.&lt;/p&gt;
&lt;p&gt;See that:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Helpers:&lt;/strong&gt; The most usefull helper are
link_to_remote, form_remote etc... but in my opinion make the html
code very unclean:&lt;/p&gt;
&lt;p&gt;Why do some like this?&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;a href=&amp;quot;#&amp;quot; onclick=&amp;quot;new Ajax.Updater({success:'posts',failure:'error'}, '/blog/destroy/5',
{asynchronous:true, evalScripts:true}); return false;&amp;quot;&amp;gt;Delete this post&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in favor of:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;a href=&amp;quot;'/blog/destroy/5&amp;quot; onclick=&amp;quot;linkToRemote('/blog/destroy/5');&amp;quot;&amp;gt;Delete this post&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can easy make a /adapter.js (yes the template can be in
prototype) with all ajax functions that are used by
prototype/scriptaculus helpers like:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;javascripts&quot;&gt;

function linkToRemote(url){
new Ajax.Updater({success:'posts',failure:'error'}, url, ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we can rename this two modules in
AjaxHelper/EffectsHelper...&lt;/p&gt;
&lt;p&gt;In this way, rails can be bundled with prototype and for a lot
of newbie users still happy without any problem with this change.
But for the most users that love jquery, mootools, extjs can simply
change their adapter.js and use all beautifull ajax/effects helpers
without install some (good) plugins like jRails and edit by hand
all helpers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Views:&lt;/strong&gt; Now if we make an ajax request mime:
text/javascripts rails look for rjs template.&lt;/p&gt;
&lt;p&gt;Ive see very very few project that use it and I don't know any
person that love and use rjs templates, because are limited and are
not a standard... Why don't remove rjs in favor of a simply js.erb
template?&lt;/p&gt;
&lt;p&gt;In controllers we can still use some like:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
  render :js do |page|
    page.replace_html ...
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in our adapter.js&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
function replaceHtml(id, text){
 new Element.update(id, text);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Im not sure that the prototype syntax are correct :D)&lt;/p&gt;
&lt;p&gt;also why this?:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
render :update do |page|
  page &amp;lt;&amp;lt; &amp;quot;alert('test')&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and not:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
render :js =&amp;gt; &amp;quot;alert('test')&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know there is format.js, but all this small changes for people
that don't use prototype complicate the life&lt;/p&gt;
&lt;p&gt;I think you can follow my suggestion, rails still easy for
prototype users, but very very flexible for people that need some
different js frameworks. And in my opinion can be a standard.&lt;/p&gt;
&lt;p&gt;Think in future when people can do this:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
 rails myapp --js prototype/jquery/mootools
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One more thing, like merb, why insert haml as choice of
developper integrated in rails?&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
  rails myapp --template erb/haml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-27T11:27:47+00:00</created-at>
      <creator-id type="integer">12893</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1276</number>
      <permalink>rjs-c</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>RJS &amp; C.</title>
      <updated-at type="datetime">2008-10-27T11:52:56+00:00</updated-at>
      <user-id type="integer">12893</user-id>
      <version type="integer">1</version>
      <user-name>DAddYE</user-name>
      <creator-name>DAddYE</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1276</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We don't use Lighthouse to track feature request. If you want to implement any of this, please do go ahead and create a patch ticket when you have something running.

But be aware that your circle of friends not liking RJS is not representative for the entire Rails community. And that as a feature it's entirely optional. You're more than free to have action.erb.js templates.</body>
      <body-html>&lt;div&gt;&lt;p&gt;We don't use Lighthouse to track feature request. If you want to
implement any of this, please do go ahead and create a patch ticket
when you have something running.&lt;/p&gt;
&lt;p&gt;But be aware that your circle of friends not liking RJS is not
representative for the entire Rails community. And that as a
feature it's entirely optional. You're more than free to have
action.erb.js templates.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-30T10:50:45+00:00</created-at>
      <creator-id type="integer">12893</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1276</number>
      <permalink>rjs-c</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>RJS &amp; C.</title>
      <updated-at type="datetime">2008-10-30T10:50:48+00:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">2</version>
      <user-name>DHH</user-name>
      <creator-name>DAddYE</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1276</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
