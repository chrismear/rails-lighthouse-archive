<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">17477</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-16T13:27:44+01:00</created-at>
  <creator-id type="integer">14415</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1226</number>
  <permalink>named_scope-buggy-with-has_many-through</permalink>
  <priority type="integer">633</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.1 activerecord has_many_through named_scope</tag>
  <title>named_scope buggy with has_many :through</title>
  <updated-at type="datetime">2010-01-22T08:52:01+00:00</updated-at>
  <user-id type="integer">25293</user-id>
  <version type="integer">5</version>
  <user-name>Prem Sichanugrist (sikachu)</user-name>
  <creator-name>J&#233;r&#244;me</creator-name>
  <assigned-user-name>Frederick Cheung</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1226</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Hello,

I found named_scope is buggy with has_many :through when the 2 models do have the same column name used by the scope.

@@@ ruby
class User &lt; AR::Base
  has_many :friendships
  has_many :friends, :class_name =&gt; 'User', :through =&gt; :friendships
end

class Friendship &lt; AR::Base
  belongs_to :user
  belongs_to :friend, :class_name =&gt; 'User', :foreign_key =&gt; 'friend_id'

  named_scope :pending,  :conditions =&gt; { :state =&gt; 'pending' }
  named_scope :accepted, :conditions =&gt; { :state =&gt; 'accepted' }
  named_scope :denied,   :conditions =&gt;  { :state =&gt; 'denied' }
end
@@@

@@@ bash
&gt;&gt; User.first.friendships.pending
=&gt; []
# SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN friendships ON users.id = friendships.friend_id WHERE ((&quot;friendships&quot;.user_id = 1)) AND (&quot;users&quot;.&quot;state&quot; = E'pending') 
@@@

h2. See ?

The SQL query takes &quot;users&quot;.&quot;state&quot; instead of &quot;friendships&quot;.&quot;state&quot;.

Now the weirderst part:

@@@ ruby
class Friendship &lt; AR::Base
  belongs_to :user
  belongs_to :friend, :class_name =&gt; 'User', :foreign_key =&gt; 'friend_id'

  named_scope :pending,  :conditions =&gt; { 'friendships.state' =&gt; 'pending' }
  named_scope :accepted, :conditions =&gt; { 'friendships.state' =&gt; 'accepted' }
  named_scope :denied,   :conditions =&gt; { 'friendships.state' =&gt; 'denied' }
end
@@@

Declaring the table name in the :conditions hash doesn't change anything ! It still queries &quot;users&quot;.&quot;state&quot; !

The only way I found to solve this issue is to double the friendships named_scope in the user model !!

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, :class_name =&gt; 'User', :through =&gt; :friendships
  named_scope :pending,  :conditions =&gt; { 'friendships.state' =&gt; 'pending' }
  named_scope :accepted, :conditions =&gt; { 'friendships.state' =&gt; 'accepted' }
  named_scope :denied,   :conditions =&gt; { 'friendships.state' =&gt; 'denied' }
 end
@@@

of course the following will raise an error:
@@@ bash
&gt;&gt; User.first.pending
@@@

but this call won't now:
@@@ bash
&gt;&gt; User.first.friends.pending
=&gt; [#&lt;User id: 7701,... &gt;]
@@@</original-body>
  <latest-body>Hello,

I found named_scope is buggy with has_many :through when the 2 models do have the same column name used by the scope.

@@@ ruby
class User &lt; AR::Base
  has_many :friendships
  has_many :friends, :class_name =&gt; 'User', :through =&gt; :friendships
end

class Friendship &lt; AR::Base
  belongs_to :user
  belongs_to :friend, :class_name =&gt; 'User', :foreign_key =&gt; 'friend_id'

  named_scope :pending,  :conditions =&gt; { :state =&gt; 'pending' }
  named_scope :accepted, :conditions =&gt; { :state =&gt; 'accepted' }
  named_scope :denied,   :conditions =&gt;  { :state =&gt; 'denied' }
end
@@@

@@@ bash
&gt;&gt; User.first.friendships.pending
=&gt; []
# SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN friendships ON users.id = friendships.friend_id WHERE ((&quot;friendships&quot;.user_id = 1)) AND (&quot;users&quot;.&quot;state&quot; = E'pending') 
@@@

h2. See ?

The SQL query takes &quot;users&quot;.&quot;state&quot; instead of &quot;friendships&quot;.&quot;state&quot;.

Now the weirderst part:

@@@ ruby
class Friendship &lt; AR::Base
  belongs_to :user
  belongs_to :friend, :class_name =&gt; 'User', :foreign_key =&gt; 'friend_id'

  named_scope :pending,  :conditions =&gt; { 'friendships.state' =&gt; 'pending' }
  named_scope :accepted, :conditions =&gt; { 'friendships.state' =&gt; 'accepted' }
  named_scope :denied,   :conditions =&gt; { 'friendships.state' =&gt; 'denied' }
end
@@@

Declaring the table name in the :conditions hash doesn't change anything ! It still queries &quot;users&quot;.&quot;state&quot; !

The only way I found to solve this issue is to double the friendships named_scope in the user model !!

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, :class_name =&gt; 'User', :through =&gt; :friendships
  named_scope :pending,  :conditions =&gt; { 'friendships.state' =&gt; 'pending' }
  named_scope :accepted, :conditions =&gt; { 'friendships.state' =&gt; 'accepted' }
  named_scope :denied,   :conditions =&gt; { 'friendships.state' =&gt; 'denied' }
 end
@@@

of course the following will raise an error:
@@@ bash
&gt;&gt; User.first.pending
@@@

but this call won't now:
@@@ bash
&gt;&gt; User.first.friends.pending
=&gt; [#&lt;User id: 7701,... &gt;]
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I found named_scope is buggy with has_many :through when the 2
models do have the same column name used by the scope.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; AR::Base
  has_many :friendships
  has_many :friends, :class_name =&amp;gt; 'User', :through =&amp;gt; :friendships
end

class Friendship &amp;lt; AR::Base
  belongs_to :user
  belongs_to :friend, :class_name =&amp;gt; 'User', :foreign_key =&amp;gt; 'friend_id'

  named_scope :pending,  :conditions =&amp;gt; { :state =&amp;gt; 'pending' }
  named_scope :accepted, :conditions =&amp;gt; { :state =&amp;gt; 'accepted' }
  named_scope :denied,   :conditions =&amp;gt;  { :state =&amp;gt; 'denied' }
end
&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;
&amp;gt;&amp;gt; User.first.friendships.pending
=&amp;gt; []
# SELECT &amp;quot;users&amp;quot;.* FROM &amp;quot;users&amp;quot; INNER JOIN friendships ON users.id = friendships.friend_id WHERE ((&amp;quot;friendships&amp;quot;.user_id = 1)) AND (&amp;quot;users&amp;quot;.&amp;quot;state&amp;quot; = E'pending')
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;See ?&lt;/h2&gt;
&lt;p&gt;The SQL query takes &quot;users&quot;.&quot;state&quot; instead of
&quot;friendships&quot;.&quot;state&quot;.&lt;/p&gt;
&lt;p&gt;Now the weirderst part:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Friendship &amp;lt; AR::Base
  belongs_to :user
  belongs_to :friend, :class_name =&amp;gt; 'User', :foreign_key =&amp;gt; 'friend_id'

  named_scope :pending,  :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'pending' }
  named_scope :accepted, :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'accepted' }
  named_scope :denied,   :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'denied' }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Declaring the table name in the :conditions hash doesn't change
anything ! It still queries &quot;users&quot;.&quot;state&quot; !&lt;/p&gt;
&lt;p&gt;The only way I found to solve this issue is to double the
friendships named_scope in the user model !!&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, :class_name =&amp;gt; 'User', :through =&amp;gt; :friendships
  named_scope :pending,  :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'pending' }
  named_scope :accepted, :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'accepted' }
  named_scope :denied,   :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'denied' }
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;of course the following will raise an error:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;
&amp;gt;&amp;gt; User.first.pending
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but this call won't now:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;
&amp;gt;&amp;gt; User.first.friends.pending
=&amp;gt; [#&amp;lt;User id: 7701,... &amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello,

I found named_scope is buggy with has_many :through when the 2 models do have the same column name used by the scope.

@@@ ruby
class User &lt; AR::Base
  has_many :friendships
  has_many :friends, :class_name =&gt; 'User', :through =&gt; :friendships
end

class Friendship &lt; AR::Base
  belongs_to :user
  belongs_to :friend, :class_name =&gt; 'User', :foreign_key =&gt; 'friend_id'

  named_scope :pending,  :conditions =&gt; { :state =&gt; 'pending' }
  named_scope :accepted, :conditions =&gt; { :state =&gt; 'accepted' }
  named_scope :denied,   :conditions =&gt;  { :state =&gt; 'denied' }
end
@@@

@@@ bash
&gt;&gt; User.first.friendships.pending
=&gt; []
# SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN friendships ON users.id = friendships.friend_id WHERE ((&quot;friendships&quot;.user_id = 1)) AND (&quot;users&quot;.&quot;state&quot; = E'pending') 
@@@

h2. See ?

The SQL query takes &quot;users&quot;.&quot;state&quot; instead of &quot;friendships&quot;.&quot;state&quot;.

Now the weirderst part:

@@@ ruby
class Friendship &lt; AR::Base
  belongs_to :user
  belongs_to :friend, :class_name =&gt; 'User', :foreign_key =&gt; 'friend_id'

  named_scope :pending,  :conditions =&gt; { 'friendships.state' =&gt; 'pending' }
  named_scope :accepted, :conditions =&gt; { 'friendships.state' =&gt; 'accepted' }
  named_scope :denied,   :conditions =&gt; { 'friendships.state' =&gt; 'denied' }
end
@@@

Declaring the table name in the :conditions hash doesn't change anything ! It still queries &quot;users&quot;.&quot;state&quot; !

The only way I found to solve this issue is to double the friendships named_scope in the user model !!

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, :class_name =&gt; 'User', :through =&gt; :friendships
  named_scope :pending,  :conditions =&gt; { 'friendships.state' =&gt; 'pending' }
  named_scope :accepted, :conditions =&gt; { 'friendships.state' =&gt; 'accepted' }
  named_scope :denied,   :conditions =&gt; { 'friendships.state' =&gt; 'denied' }
 end
@@@

of course the following will raise an error:
@@@ bash
&gt;&gt; User.first.pending
@@@

but this call won't now:
@@@ bash
&gt;&gt; User.first.friends.pending
=&gt; [#&lt;User id: 7701,... &gt;]
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I found named_scope is buggy with has_many :through when the 2
models do have the same column name used by the scope.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; AR::Base
  has_many :friendships
  has_many :friends, :class_name =&amp;gt; 'User', :through =&amp;gt; :friendships
end

class Friendship &amp;lt; AR::Base
  belongs_to :user
  belongs_to :friend, :class_name =&amp;gt; 'User', :foreign_key =&amp;gt; 'friend_id'

  named_scope :pending,  :conditions =&amp;gt; { :state =&amp;gt; 'pending' }
  named_scope :accepted, :conditions =&amp;gt; { :state =&amp;gt; 'accepted' }
  named_scope :denied,   :conditions =&amp;gt;  { :state =&amp;gt; 'denied' }
end
&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;
&amp;gt;&amp;gt; User.first.friendships.pending
=&amp;gt; []
# SELECT &amp;quot;users&amp;quot;.* FROM &amp;quot;users&amp;quot; INNER JOIN friendships ON users.id = friendships.friend_id WHERE ((&amp;quot;friendships&amp;quot;.user_id = 1)) AND (&amp;quot;users&amp;quot;.&amp;quot;state&amp;quot; = E'pending')
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;See ?&lt;/h2&gt;
&lt;p&gt;The SQL query takes &quot;users&quot;.&quot;state&quot; instead of
&quot;friendships&quot;.&quot;state&quot;.&lt;/p&gt;
&lt;p&gt;Now the weirderst part:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Friendship &amp;lt; AR::Base
  belongs_to :user
  belongs_to :friend, :class_name =&amp;gt; 'User', :foreign_key =&amp;gt; 'friend_id'

  named_scope :pending,  :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'pending' }
  named_scope :accepted, :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'accepted' }
  named_scope :denied,   :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'denied' }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Declaring the table name in the :conditions hash doesn't change
anything ! It still queries &quot;users&quot;.&quot;state&quot; !&lt;/p&gt;
&lt;p&gt;The only way I found to solve this issue is to double the
friendships named_scope in the user model !!&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, :class_name =&amp;gt; 'User', :through =&amp;gt; :friendships
  named_scope :pending,  :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'pending' }
  named_scope :accepted, :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'accepted' }
  named_scope :denied,   :conditions =&amp;gt; { 'friendships.state' =&amp;gt; 'denied' }
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;of course the following will raise an error:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;
&amp;gt;&amp;gt; User.first.pending
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but this call won't now:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;
&amp;gt;&amp;gt; User.first.friends.pending
=&amp;gt; [#&amp;lt;User id: 7701,... &amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-16T13:27:45+01:00</created-at>
      <creator-id type="integer">14415</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1226</number>
      <permalink>named_scope-buggy-with-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord has_many_through named_scope</tag>
      <title>named_scope buggy with has_many :through</title>
      <updated-at type="datetime">2008-10-16T13:27:50+01:00</updated-at>
      <user-id type="integer">14415</user-id>
      <version type="integer">1</version>
      <user-name>J&#233;r&#244;me</user-name>
      <creator-name>J&#233;r&#244;me</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1226</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I couldn't reproduce this with 2.1.2 or 2.2.2 or edge

I think you've skipped over a few steps. In the first bit you show a query selecting users.* going wrong but the corresponding bit of code you've shown you should be loading friendships, not users. Could your provide a more complete description of steps to reproduce ? (or even better, a failing test case)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I couldn't reproduce this with 2.1.2 or 2.2.2 or edge&lt;/p&gt;
&lt;p&gt;I think you've skipped over a few steps. In the first bit you
show a query selecting users.* going wrong but the corresponding
bit of code you've shown you should be loading friendships, not
users. Could your provide a more complete description of steps to
reproduce ? (or even better, a failing test case)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-21T22:49:06+00:00</created-at>
      <creator-id type="integer">14415</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1226</number>
      <permalink>named_scope-buggy-with-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>2.1 activerecord has_many_through named_scope</tag>
      <title>named_scope buggy with has_many :through</title>
      <updated-at type="datetime">2008-12-21T22:49:08+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">2</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>J&#233;r&#244;me</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1226</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Frederick, actually there's a bug in specification or in reflection code
Spec says:
# [:through]
#   Specifies a Join Model through which to perform the query.  Options for &lt;tt&gt;:class_name&lt;/tt&gt; and &lt;tt&gt;:foreign_key&lt;/tt&gt;
#   are ignored, as the association uses the source reflection. You can only use a &lt;tt&gt;:through&lt;/tt&gt; query through a &lt;tt&gt;belongs_to&lt;/tt&gt;
#   or &lt;tt&gt;has_many&lt;/tt&gt; association on the join model.
As we see here, :class_name should be ignored.

But in the source code we see: 
MacroReflection class in reflection.rb:
# Returns the class name for the macro.  For example, &lt;tt&gt;composed_of :balance, :class_name =&gt; 'Money'&lt;/tt&gt; returns &lt;tt&gt;'Money'&lt;/tt&gt;
# and &lt;tt&gt;has_many :clients&lt;/tt&gt; returns &lt;tt&gt;'Client'&lt;/tt&gt;.
def class_name
  @class_name ||= options[:class_name] || derive_class_name
end
and no check for through attribute</body>
      <body-html>&lt;div&gt;&lt;p&gt;Frederick, actually there's a bug in specification or in
reflection code Spec says:&lt;/p&gt;
&lt;h1&gt;[:through]&lt;/h1&gt;
&lt;h1&gt;Specifies a Join Model through which to perform the query.
Options for &lt;tt&gt;:class_name&lt;/tt&gt; and &lt;tt&gt;:foreign_key&lt;/tt&gt;&lt;/h1&gt;
&lt;h1&gt;are ignored, as the association uses the source reflection. You
can only use a &lt;tt&gt;:through&lt;/tt&gt; query through a
&lt;tt&gt;belongs_to&lt;/tt&gt;&lt;/h1&gt;
&lt;h1&gt;or &lt;tt&gt;has_many&lt;/tt&gt; association on the join model.&lt;/h1&gt;
&lt;p&gt;As we see here, :class_name should be ignored.&lt;/p&gt;
&lt;p&gt;But in the source code we see: MacroReflection class in
reflection.rb:&lt;/p&gt;
&lt;h1&gt;Returns the class name for the macro. For example,
&lt;tt&gt;composed_of :balance, :class_name =&amp;gt; 'Money'&lt;/tt&gt; returns
&lt;tt&gt;'Money'&lt;/tt&gt;&lt;/h1&gt;
&lt;h1&gt;and &lt;tt&gt;has_many :clients&lt;/tt&gt; returns &lt;tt&gt;'Client'&lt;/tt&gt;.&lt;/h1&gt;
&lt;p&gt;def class_name @class_name ||= options[:class_name] ||
derive_class_name end and no check for through attribute&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-16T13:31:31+00:00</created-at>
      <creator-id type="integer">14415</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1226</number>
      <permalink>named_scope-buggy-with-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>2.1 activerecord has_many_through named_scope</tag>
      <title>named_scope buggy with has_many :through</title>
      <updated-at type="datetime">2009-01-16T13:31:33+00:00</updated-at>
      <user-id type="integer">43907</user-id>
      <version type="integer">3</version>
      <user-name>Dennis Ushakov</user-name>
      <creator-name>J&#233;r&#244;me</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1226</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry for formatting issues.
One addition. As I understand :source attribute should be used in this case, but it seems typo is dependent on this behaviour:
&lt;code&gt;
class Category &lt; ActiveRecord::Base
  acts_as_list
  has_many :categorizations

  has_many :articles,
    :through =&gt; :categorizations,
    :order   =&gt; &quot;published_at DESC, created_at DESC&quot;

  has_many :published_articles,
    :through    =&gt; :categorizations,
    :class_name =&gt; 'Article',
    :conditions =&gt; { :published =&gt; true },
    :order      =&gt; &quot;published_at DESC&quot;
&lt;/code&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry for formatting issues. One addition. As I understand
:source attribute should be used in this case, but it seems typo is
dependent on this behaviour: &lt;code&gt;class Category &amp;lt;
ActiveRecord::Base acts_as_list has_many
:categorizations&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;has_many :articles,&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:through =&amp;gt; :categorizations,
:order   =&amp;gt; &quot;published_at DESC, created_at DESC&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;has_many :published_articles,&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:through    =&amp;gt; :categorizations,
:class_name =&amp;gt; 'Article',
:conditions =&amp;gt; { :published =&amp;gt; true },
:order      =&amp;gt; &quot;published_at DESC&quot;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-16T13:38:50+00:00</created-at>
      <creator-id type="integer">14415</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1226</number>
      <permalink>named_scope-buggy-with-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>2.1 activerecord has_many_through named_scope</tag>
      <title>named_scope buggy with has_many :through</title>
      <updated-at type="datetime">2009-01-16T13:38:55+00:00</updated-at>
      <user-id type="integer">43907</user-id>
      <version type="integer">4</version>
      <user-name>Dennis Ushakov</user-name>
      <creator-name>J&#233;r&#244;me</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1226</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-22T08:52:00+00:00</created-at>
      <creator-id type="integer">14415</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1226</number>
      <permalink>named_scope-buggy-with-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.1 activerecord has_many_through named_scope</tag>
      <title>named_scope buggy with has_many :through</title>
      <updated-at type="datetime">2010-01-22T08:52:01+00:00</updated-at>
      <user-id type="integer">25293</user-id>
      <version type="integer">5</version>
      <user-name>Prem Sichanugrist (sikachu)</user-name>
      <creator-name>J&#233;r&#244;me</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1226</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
