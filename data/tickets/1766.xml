<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-15T21:58:51+00:00</created-at>
  <creator-id type="integer">32534</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1766</number>
  <permalink>patch-sqlite-adapters-copy_table-should-not-set-id-true-if-id-is-not-a-primary-key</permalink>
  <priority type="integer">1071</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>activerecord copy_table patch pull-request sqlite_adapter</tag>
  <title>[PATCH] Sqlite adapter's copy_table should not set :id =&gt; true if :id is not a primary key</title>
  <updated-at type="datetime">2009-01-29T04:40:03+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">3</version>
  <user-name>Repository</user-name>
  <creator-name>jdunphy</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1766</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Sqlite adapter's copy_table should not set :id =&gt; true if :id is not a primary key.

We had a legacy table with a string id.  Changing the table was not a good option, according to people more important than me.  To recreate the table locally for development, I used a migration like the one below.

@@@
create_table :table_name, :id =&gt; false do |t|
  t.column :id,                   :string,  :limit =&gt; 40, :null =&gt; false
  t.column :value,                :integer
end


#later we tried to call

remove_column :table_name, :value
@@@

And upon calling remove_column, the whole thing blew up.  When SQLiteAdapter tried to call copy_table, it set :id =&gt; true and wrote over the original id column.

The following commit will set :id =&gt; false if there is an :id column, but it's not a primary_key.

http://github.com/jdunphy/rails/commit/2e3e2fc39cd93d875776069d2d8b8a51bb5b1e4e</original-body>
  <latest-body>Sqlite adapter's copy_table should not set :id =&gt; true if :id is not a primary key.

We had a legacy table with a string id.  Changing the table was not a good option, according to people more important than me.  To recreate the table locally for development, I used a migration like the one below.

@@@
create_table :table_name, :id =&gt; false do |t|
  t.column :id,                   :string,  :limit =&gt; 40, :null =&gt; false
  t.column :value,                :integer
end


#later we tried to call

remove_column :table_name, :value
@@@

And upon calling remove_column, the whole thing blew up.  When SQLiteAdapter tried to call copy_table, it set :id =&gt; true and wrote over the original id column.

The following commit will set :id =&gt; false if there is an :id column, but it's not a primary_key.

http://github.com/jdunphy/rails/commit/2e3e2fc39cd93d875776069d2d8b8a51bb5b1e4e</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Sqlite adapter's copy_table should not set :id =&amp;gt; true if :id
is not a primary key.&lt;/p&gt;
&lt;p&gt;We had a legacy table with a string id. Changing the table was
not a good option, according to people more important than me. To
recreate the table locally for development, I used a migration like
the one below.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
create_table :table_name, :id =&amp;gt; false do |t|
  t.column :id,                   :string,  :limit =&amp;gt; 40, :null =&amp;gt; false
  t.column :value,                :integer
end


#later we tried to call

remove_column :table_name, :value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And upon calling remove_column, the whole thing blew up. When
SQLiteAdapter tried to call copy_table, it set :id =&amp;gt; true and
wrote over the original id column.&lt;/p&gt;
&lt;p&gt;The following commit will set :id =&amp;gt; false if there is an :id
column, but it's not a primary_key.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/jdunphy/rails/commit/2e3e2fc39cd93d875776069d2d8b8a51bb5b1e4e&quot;&gt;
http://github.com/jdunphy/rails/...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sqlite adapter's copy_table should not set :id =&gt; true if :id is not a primary key.

We had a legacy table with a string id.  Changing the table was not a good option, according to people more important than me.  To recreate the table locally for development, I used a migration like the one below.

@@@
create_table :table_name, :id =&gt; false do |t|
  t.column :id,                   :string,  :limit =&gt; 40, :null =&gt; false
  t.column :value,                :integer
end


#later we tried to call

remove_column :table_name, :value
@@@

And upon calling remove_column, the whole thing blew up.  When SQLiteAdapter tried to call copy_table, it set :id =&gt; true and wrote over the original id column.

The following commit will set :id =&gt; false if there is an :id column, but it's not a primary_key.

&lt;replaced it with a file attachment&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sqlite adapter's copy_table should not set :id =&amp;gt; true if :id
is not a primary key.&lt;/p&gt;
&lt;p&gt;We had a legacy table with a string id. Changing the table was
not a good option, according to people more important than me. To
recreate the table locally for development, I used a migration like
the one below.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
create_table :table_name, :id =&amp;gt; false do |t|
  t.column :id,                   :string,  :limit =&amp;gt; 40, :null =&amp;gt; false
  t.column :value,                :integer
end


#later we tried to call

remove_column :table_name, :value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And upon calling remove_column, the whole thing blew up. When
SQLiteAdapter tried to call copy_table, it set :id =&amp;gt; true and
wrote over the original id column.&lt;/p&gt;
&lt;p&gt;The following commit will set :id =&amp;gt; false if there is an :id
column, but it's not a primary_key.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-15T21:58:51+00:00</created-at>
      <creator-id type="integer">32534</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1766</number>
      <permalink>patch-sqlite-adapters-copy_table-should-not-set-id-true-if-id-is-not-a-primary-key</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord copy_table patch pull-request sqlite_adapter</tag>
      <title>[PATCH] Sqlite adapter's copy_table should not set :id =&gt; true if :id is not a primary key</title>
      <updated-at type="datetime">2009-01-15T22:15:16+00:00</updated-at>
      <user-id type="integer">32534</user-id>
      <version type="integer">1</version>
      <user-name>jdunphy</user-name>
      <creator-name>jdunphy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1766</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Somebody told me that patch files were preferred on single commit type patches.  Here's the patch</body>
      <body-html>&lt;div&gt;&lt;p&gt;Somebody told me that patch files were preferred on single
commit type patches. Here's the patch&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-15T22:08:30+00:00</created-at>
      <creator-id type="integer">32534</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1766</number>
      <permalink>patch-sqlite-adapters-copy_table-should-not-set-id-true-if-id-is-not-a-primary-key</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord copy_table patch pull-request sqlite_adapter</tag>
      <title>[PATCH] Sqlite adapter's copy_table should not set :id =&gt; true if :id is not a primary key</title>
      <updated-at type="datetime">2009-01-15T22:08:33+00:00</updated-at>
      <user-id type="integer">32534</user-id>
      <version type="integer">2</version>
      <user-name>jdunphy</user-name>
      <creator-name>jdunphy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1766</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [e6493eb9b76de73afef2706493efd090dfff4ecc]) Sqlite adapter's copy_table incorrectly attempts to recreate a primary key id (:id =&gt; true in the create_table) if an :id column is present, even if it isn't a primary_key.

This fix sets :id =&gt; false if there is an :id column, but it's not the primary_key.

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
[#1766 state:committed]
http://github.com/rails/rails/commit/e6493eb9b76de73afef2706493efd090dfff4ecc</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [e6493eb9b76de73afef2706493efd090dfff4ecc]) Sqlite
adapter's copy_table incorrectly attempts to recreate a primary key
id (:id =&amp;gt; true in the create_table) if an :id column is
present, even if it isn't a primary_key.&lt;/p&gt;
&lt;p&gt;This fix sets :id =&amp;gt; false if there is an :id column, but
it's not the primary_key.&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt; [&lt;a href=&quot;/projects/8994/tickets/1766&quot; title=&quot;Ticket #1766&quot;&gt;#1766&lt;/a&gt;
state:committed] &lt;a href=&quot;http://github.com/rails/rails/commit/e6493eb9b76de73afef2706493efd090dfff4ecc&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-29T04:40:02+00:00</created-at>
      <creator-id type="integer">32534</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1766</number>
      <permalink>patch-sqlite-adapters-copy_table-should-not-set-id-true-if-id-is-not-a-primary-key</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord copy_table patch pull-request sqlite_adapter</tag>
      <title>[PATCH] Sqlite adapter's copy_table should not set :id =&gt; true if :id is not a primary key</title>
      <updated-at type="datetime">2009-01-29T04:40:03+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">3</version>
      <user-name>Repository</user-name>
      <creator-name>jdunphy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1766</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>5e65b738d44026d0be861127a6fa167285b5169e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-15T22:08:31+00:00</created-at>
      <filename>sqlite-copy-table.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">78922</id>
      <size type="integer">3112</size>
      <uploader-id type="integer">32534</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/78922/sqlite-copy-table.diff</url>
    </attachment>
  </attachments>
</ticket>
