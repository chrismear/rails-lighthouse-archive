<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-27T16:42:43+01:00</created-at>
  <creator-id type="integer">26148</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">5477</number>
  <permalink>arel-wont-let-activerecord-query-against-tables-that-have-columns-it-doesnt-know-how-to-handle</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>&quot;activerecord arel rails3&quot;</tag>
  <title>Arel won't let ActiveRecord query against tables that have columns it doesn't know how to handle</title>
  <updated-at type="datetime">2010-11-16T16:10:49+00:00</updated-at>
  <user-id type="integer">15316</user-id>
  <version type="integer">6</version>
  <user-name>Aaron Patterson</user-name>
  <creator-name>Brian Durand</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5477</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>There is an incompatibility between arel and activerecord in which arel will not let you query against a table that contains a column with a SQL type that arel doesn't know how to handle.

I ran across this when trying to map a table that contains a PostGIS geometry column in Rails 3. If I do MyModel.first, it works because ActiveRecord knows how to handle the geometry column. However, if I call MyModel.find(1) it blows up because Arel doesn't know how to handle the column type when it maps out the table columns into attributes.

My fix is to introduce a generic Undefined attribute type in arel instead of raising an error. That way arel will only blow up if you try to query on a column it doesn't know about.</original-body>
  <latest-body>There is an incompatibility between arel and activerecord in which arel will not let you query against a table that contains a column with a SQL type that arel doesn't know how to handle.

I ran across this when trying to map a table that contains a PostGIS geometry column in Rails 3. If I do MyModel.first, it works because ActiveRecord knows how to handle the geometry column. However, if I call MyModel.find(1) it blows up because Arel doesn't know how to handle the column type when it maps out the table columns into attributes.

My fix is to introduce a generic Undefined attribute type in arel instead of raising an error. That way arel will only blow up if you try to query on a column it doesn't know about.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;There is an incompatibility between arel and activerecord in
which arel will not let you query against a table that contains a
column with a SQL type that arel doesn't know how to handle.&lt;/p&gt;
&lt;p&gt;I ran across this when trying to map a table that contains a
PostGIS geometry column in Rails 3. If I do MyModel.first, it works
because ActiveRecord knows how to handle the geometry column.
However, if I call MyModel.find(1) it blows up because Arel doesn't
know how to handle the column type when it maps out the table
columns into attributes.&lt;/p&gt;
&lt;p&gt;My fix is to introduce a generic Undefined attribute type in
arel instead of raising an error. That way arel will only blow up
if you try to query on a column it doesn't know about.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There is an incompatibility between arel and activerecord in which arel will not let you query against a table that contains a column with a SQL type that arel doesn't know how to handle.

I ran across this when trying to map a table that contains a PostGIS geometry column in Rails 3. If I do MyModel.first, it works because ActiveRecord knows how to handle the geometry column. However, if I call MyModel.find(1) it blows up because Arel doesn't know how to handle the column type when it maps out the table columns into attributes.

My fix is to introduce a generic Undefined attribute type in arel instead of raising an error. That way arel will only blow up if you try to query on a column it doesn't know about.</body>
      <body-html>&lt;div&gt;&lt;p&gt;There is an incompatibility between arel and activerecord in
which arel will not let you query against a table that contains a
column with a SQL type that arel doesn't know how to handle.&lt;/p&gt;
&lt;p&gt;I ran across this when trying to map a table that contains a
PostGIS geometry column in Rails 3. If I do MyModel.first, it works
because ActiveRecord knows how to handle the geometry column.
However, if I call MyModel.find(1) it blows up because Arel doesn't
know how to handle the column type when it maps out the table
columns into attributes.&lt;/p&gt;
&lt;p&gt;My fix is to introduce a generic Undefined attribute type in
arel instead of raising an error. That way arel will only blow up
if you try to query on a column it doesn't know about.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T16:42:43+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5477</number>
      <permalink>arel-wont-let-activerecord-query-against-tables-that-have-columns-it-doesnt-know-how-to-handle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord arel rails3&quot;</tag>
      <title>Arel won't let ActiveRecord query against tables that have columns it doesn't know how to handle</title>
      <updated-at type="datetime">2010-08-27T16:42:45+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">1</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5477</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T23:20:33+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5477</number>
      <permalink>arel-wont-let-activerecord-query-against-tables-that-have-columns-it-doesnt-know-how-to-handle</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord arel rails3&quot;</tag>
      <title>Arel won't let ActiveRecord query against tables that have columns it doesn't know how to handle</title>
      <updated-at type="datetime">2010-08-27T23:20:36+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5477</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Done:

http://github.com/rails/arel/commit/33445ba4c7729970ff8840634c920097fc5054d6</body>
      <body-html>&lt;div&gt;&lt;p&gt;Done:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/arel/commit/33445ba4c7729970ff8840634c920097fc5054d6&quot;&gt;
http://github.com/rails/arel/commit/33445ba4c7729970ff8840634c92009...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-28T08:02:23+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5477</number>
      <permalink>arel-wont-let-activerecord-query-against-tables-that-have-columns-it-doesnt-know-how-to-handle</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>&quot;activerecord arel rails3&quot;</tag>
      <title>Arel won't let ActiveRecord query against tables that have columns it doesn't know how to handle</title>
      <updated-at type="datetime">2010-08-28T08:02:26+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">3</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5477</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:02:02+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5477</number>
      <permalink>arel-wont-let-activerecord-query-against-tables-that-have-columns-it-doesnt-know-how-to-handle</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>&quot;activerecord arel rails3&quot;</tag>
      <title>Arel won't let ActiveRecord query against tables that have columns it doesn't know how to handle</title>
      <updated-at type="datetime">2010-10-15T23:02:02+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5477</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This bug appears to have regressed in Rails 3.0.2 - I'm seeing the same error raised from a PostgreSQL BIGINT column. Stack trace below:

  arel (2.0.2) lib/arel/attributes.rb:16:in `for'
  arel (2.0.2) lib/arel/table.rb:113:in `attributes_for'
  arel (2.0.2) lib/arel/table.rb:112:in `map'
  arel (2.0.2) lib/arel/table.rb:112:in `attributes_for'
  arel (2.0.2) lib/arel/table.rb:92:in `columns'
  arel (2.0.2) lib/arel/table.rb:100:in `[]'
  composite_primary_keys (3.0.0.b2) lib/composite_primary_keys/associations.rb:104:in `association_join'
  activerecord (3.0.2) lib/active_record/relation/query_methods.rb:242:in `build_joins'
  activerecord (3.0.2) lib/active_record/relation/query_methods.rb:237:in `each'
  activerecord (3.0.2) lib/active_record/relation/query_methods.rb:237:in `build_joins'
  activerecord (3.0.2) lib/active_record/relation/query_methods.rb:177:in `build_arel'
  activerecord (3.0.2) lib/active_record/relation/query_methods.rb:150:in `arel'
  activerecord (3.0.2) lib/active_record/relation.rb:64:in `to_a'
  activerecord (3.0.2) lib/active_record/relation/finder_methods.rb:189:in `find_with_associations'
  activerecord (3.0.2) lib/active_record/relation.rb:64:in `to_a'
  activerecord (3.0.2) lib/active_record/relation/finder_methods.rb:143:in `all' 
  activerecord (3.0.2) lib/active_record/relation/finder_methods.rb:103:in `find'</body>
      <body-html>&lt;div&gt;&lt;p&gt;This bug appears to have regressed in Rails 3.0.2 - I'm seeing
the same error raised from a PostgreSQL BIGINT column. Stack trace
below:&lt;/p&gt;
&lt;p&gt;arel (2.0.2) lib/arel/attributes.rb:16:in &lt;code&gt;for' arel
(2.0.2) lib/arel/table.rb:113:in&lt;/code&gt;attributes_for' arel (2.0.2)
lib/arel/table.rb:112:in &lt;code&gt;map' arel (2.0.2)
lib/arel/table.rb:112:in&lt;/code&gt;attributes_for' arel (2.0.2)
lib/arel/table.rb:92:in &lt;code&gt;columns' arel (2.0.2)
lib/arel/table.rb:100:in&lt;/code&gt;[]' composite_primary_keys
(3.0.0.b2) lib/composite_primary_keys/associations.rb:104:in
&lt;code&gt;association_join' activerecord (3.0.2)
lib/active_record/relation/query_methods.rb:242:in&lt;/code&gt;build_joins'
activerecord (3.0.2)
lib/active_record/relation/query_methods.rb:237:in &lt;code&gt;each'
activerecord (3.0.2)
lib/active_record/relation/query_methods.rb:237:in&lt;/code&gt;build_joins'
activerecord (3.0.2)
lib/active_record/relation/query_methods.rb:177:in
&lt;code&gt;build_arel' activerecord (3.0.2)
lib/active_record/relation/query_methods.rb:150:in&lt;/code&gt;arel'
activerecord (3.0.2) lib/active_record/relation.rb:64:in
&lt;code&gt;to_a' activerecord (3.0.2)
lib/active_record/relation/finder_methods.rb:189:in&lt;/code&gt;find_with_associations'
activerecord (3.0.2) lib/active_record/relation.rb:64:in
&lt;code&gt;to_a' activerecord (3.0.2)
lib/active_record/relation/finder_methods.rb:143:in&lt;/code&gt;all'
activerecord (3.0.2)
lib/active_record/relation/finder_methods.rb:103:in
&lt;code&gt;find'&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-16T10:48:23+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5477</number>
      <permalink>arel-wont-let-activerecord-query-against-tables-that-have-columns-it-doesnt-know-how-to-handle</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>&quot;activerecord arel rails3&quot;</tag>
      <title>Arel won't let ActiveRecord query against tables that have columns it doesn't know how to handle</title>
      <updated-at type="datetime">2010-11-16T10:48:29+00:00</updated-at>
      <user-id type="integer">96260</user-id>
      <version type="integer">5</version>
      <user-name>Jason Langenauer</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5477</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Sorry about that.  Looks like I didn't add a test, so this got lost.  :-(

I've added a test and we'll have a bugfix release of arel shortly.

  https://github.com/rails/arel/commit/f0139a16c263ba62e7e45d462a4fff411ebf2523</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry about that. Looks like I didn't add a test, so this got
lost. :-(&lt;/p&gt;
&lt;p&gt;I've added a test and we'll have a bugfix release of arel
shortly.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/arel/commit/f0139a16c263ba62e7e45d462a4fff411ebf2523&quot;&gt;
https://github.com/rails/arel/commit/f0139a16c263ba62e7e45d462a4fff...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-16T16:10:46+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5477</number>
      <permalink>arel-wont-let-activerecord-query-against-tables-that-have-columns-it-doesnt-know-how-to-handle</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>&quot;activerecord arel rails3&quot;</tag>
      <title>Arel won't let ActiveRecord query against tables that have columns it doesn't know how to handle</title>
      <updated-at type="datetime">2010-11-16T16:10:49+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">6</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5477</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>56a4d5201df00d0c15456b2d469d2dd9cdda166d</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-08-27T16:42:44+01:00</created-at>
      <filename>arel_handle_unknown_column_types.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">648386</id>
      <size type="integer">1236</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/648386/arel_handle_unknown_column_types.diff</url>
    </attachment>
  </attachments>
</ticket>
