<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-09-22T22:56:58+01:00</created-at>
  <creator-id type="integer">117031</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5687</number>
  <permalink>activerecord-caching-has_many-through</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord caching has_many rails3</tag>
  <title>ActiveRecord caching has_many :through</title>
  <updated-at type="datetime">2010-12-21T23:56:55+00:00</updated-at>
  <user-id type="integer">117031</user-id>
  <version type="integer">3</version>
  <user-name>Barak</user-name>
  <creator-name>Barak</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5687</url>
  <priority-name>Low</priority-name>
  <original-body>The second assert of this test incorrectly fails. However, when the first assert is removed, the second assert will pass. Looks like ActiveRecord is caching the value of me.favorite_pets, and Favorite.new isn't invalidating the cache.
@@@ ruby
test &quot;favorite pet&quot; do
  me = User.new({:name =&gt; 'Me'})
  sparky = Pet.new({:name =&gt; 'Sparky'})
  assert_equal [], me.favorite_pets
  Favorite.new({:user =&gt; me, :favorite_thing =&gt; sparky}).save
  assert_equal [sparky], me.favorite_pets
end
@@@

The models are as follows:
@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :favorites
  has_many :favorite_pets, :through =&gt; :favorites, :source =&gt; :pet
  has_many :favorite_movies, :through =&gt; :favorites, :source =&gt; :movie
end
@@@
@@@ ruby
class Favorite &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :favorite_thing, :polymorphic =&gt; true
  belongs_to :pet, :foreign_key =&gt; :favorite_thing_id
  belongs_to :movie, :foreign_key =&gt; :favorite_thing_id
end
@@@</original-body>
  <latest-body>The second assert of this test incorrectly fails. However, when the first assert is removed, the second assert will pass. Looks like ActiveRecord is caching the value of me.favorite_pets, and Favorite.new isn't invalidating the cache.
@@@ ruby
test &quot;favorite pet&quot; do
  me = User.new({:name =&gt; 'Me'})
  sparky = Pet.new({:name =&gt; 'Sparky'})
  assert_equal [], me.favorite_pets
  Favorite.new({:user =&gt; me, :favorite_thing =&gt; sparky}).save
  assert_equal [sparky], me.favorite_pets
end
@@@

The models are as follows:
@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :favorites
  has_many :favorite_pets, :through =&gt; :favorites, :source =&gt; :pet
  has_many :favorite_movies, :through =&gt; :favorites, :source =&gt; :movie
end
@@@
@@@ ruby
class Favorite &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :favorite_thing, :polymorphic =&gt; true
  belongs_to :pet, :foreign_key =&gt; :favorite_thing_id
  belongs_to :movie, :foreign_key =&gt; :favorite_thing_id
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The second assert of this test incorrectly fails. However, when
the first assert is removed, the second assert will pass. Looks
like ActiveRecord is caching the value of me.favorite_pets, and
Favorite.new isn't invalidating the cache.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;test &quot;favorite pet&quot; do
  me = User.new({:name =&amp;gt; 'Me'})
  sparky = Pet.new({:name =&amp;gt; 'Sparky'})
  assert_equal [], me.favorite_pets
  Favorite.new({:user =&amp;gt; me, :favorite_thing =&amp;gt; sparky}).save
  assert_equal [sparky], me.favorite_pets
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The models are as follows:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :favorites
  has_many :favorite_pets, :through =&amp;gt; :favorites, :source =&amp;gt; :pet
  has_many :favorite_movies, :through =&amp;gt; :favorites, :source =&amp;gt; :movie
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Favorite &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :favorite_thing, :polymorphic =&amp;gt; true
  belongs_to :pet, :foreign_key =&amp;gt; :favorite_thing_id
  belongs_to :movie, :foreign_key =&amp;gt; :favorite_thing_id
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The second assert of this test incorrectly fails. However, when the first assert is removed, the second assert will pass. Looks like ActiveRecord is caching the value of me.favorite_pets, and Favorite.new isn't invalidating the cache.
@@@ ruby
test &quot;favorite pet&quot; do
  me = User.new({:name =&gt; 'Me'})
  sparky = Pet.new({:name =&gt; 'Sparky'})
  assert_equal [], me.favorite_pets
  Favorite.new({:user =&gt; me, :favorite_thing =&gt; sparky}).save
  assert_equal [sparky], me.favorite_pets
end
@@@

The models are as follows:
@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :favorites
  has_many :favorite_pets, :through =&gt; :favorites, :source =&gt; :pet
  has_many :favorite_movies, :through =&gt; :favorites, :source =&gt; :movie
end
@@@
@@@ ruby
class Favorite &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :favorite_thing, :polymorphic =&gt; true
  belongs_to :pet, :foreign_key =&gt; :favorite_thing_id
  belongs_to :movie, :foreign_key =&gt; :favorite_thing_id
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;The second assert of this test incorrectly fails. However, when
the first assert is removed, the second assert will pass. Looks
like ActiveRecord is caching the value of me.favorite_pets, and
Favorite.new isn't invalidating the cache.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;test &quot;favorite pet&quot; do
  me = User.new({:name =&amp;gt; 'Me'})
  sparky = Pet.new({:name =&amp;gt; 'Sparky'})
  assert_equal [], me.favorite_pets
  Favorite.new({:user =&amp;gt; me, :favorite_thing =&amp;gt; sparky}).save
  assert_equal [sparky], me.favorite_pets
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The models are as follows:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :favorites
  has_many :favorite_pets, :through =&amp;gt; :favorites, :source =&amp;gt; :pet
  has_many :favorite_movies, :through =&amp;gt; :favorites, :source =&amp;gt; :movie
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Favorite &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :favorite_thing, :polymorphic =&amp;gt; true
  belongs_to :pet, :foreign_key =&amp;gt; :favorite_thing_id
  belongs_to :movie, :foreign_key =&amp;gt; :favorite_thing_id
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-22T22:56:58+01:00</created-at>
      <creator-id type="integer">117031</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5687</number>
      <permalink>activerecord-caching-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord caching has_many rails3</tag>
      <title>ActiveRecord caching has_many :through</title>
      <updated-at type="datetime">2010-09-22T22:56:59+01:00</updated-at>
      <user-id type="integer">117031</user-id>
      <version type="integer">1</version>
      <user-name>Barak</user-name>
      <creator-name>Barak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5687</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks for the bug report.

In the example you've given, the first time you run `me.favorite_pets`, it goes to the database and get the answer (empty). It then remembers the answer until there is a reason to forget it.

When you do `Favorite.new`, your `me` object doesn't know anything about it. So when you run `me.favorite_pets` again it just returns the same result because it doesn't realise that the result has changed.

To fix your code, you could:

* Run `me.favorite_pets(true)` to force the association to be reloaded
* Create the `Favorite` object by doing `me.favorites.new(:favorite_thing =&gt; sparky)`</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for the bug report.&lt;/p&gt;
&lt;p&gt;In the example you've given, the first time you run
&lt;code&gt;me.favorite_pets&lt;/code&gt;, it goes to the database and get the
answer (empty). It then remembers the answer until there is a
reason to forget it.&lt;/p&gt;
&lt;p&gt;When you do &lt;code&gt;Favorite.new&lt;/code&gt;, your &lt;code&gt;me&lt;/code&gt;
object doesn't know anything about it. So when you run
&lt;code&gt;me.favorite_pets&lt;/code&gt; again it just returns the same result
because it doesn't realise that the result has changed.&lt;/p&gt;
&lt;p&gt;To fix your code, you could:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;me.favorite_pets(true)&lt;/code&gt; to force the
association to be reloaded&lt;/li&gt;
&lt;li&gt;Create the &lt;code&gt;Favorite&lt;/code&gt; object by doing
&lt;code&gt;me.favorites.new(:favorite_thing =&amp;gt; sparky)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-21T18:48:36+00:00</created-at>
      <creator-id type="integer">117031</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5687</number>
      <permalink>activerecord-caching-has_many-through</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord caching has_many rails3</tag>
      <title>ActiveRecord caching has_many :through</title>
      <updated-at type="datetime">2010-12-21T18:48:48+00:00</updated-at>
      <user-id type="integer">11330</user-id>
      <version type="integer">2</version>
      <user-name>Jon Leighton</user-name>
      <creator-name>Barak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5687</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Jon, thanks for the reply.

I wasn't aware that me.favorite_pets(true) existed. Very useful thing to know. Thanks again.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Jon, thanks for the reply.&lt;/p&gt;
&lt;p&gt;I wasn't aware that me.favorite_pets(true) existed. Very useful
thing to know. Thanks again.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-21T23:56:44+00:00</created-at>
      <creator-id type="integer">117031</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5687</number>
      <permalink>activerecord-caching-has_many-through</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord caching has_many rails3</tag>
      <title>ActiveRecord caching has_many :through</title>
      <updated-at type="datetime">2010-12-21T23:56:55+00:00</updated-at>
      <user-id type="integer">117031</user-id>
      <version type="integer">3</version>
      <user-name>Barak</user-name>
      <creator-name>Barak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5687</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
