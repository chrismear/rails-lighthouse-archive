<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-04-27T23:43:39+01:00</created-at>
  <creator-id type="integer">7400</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">56</number>
  <permalink>cheaper-dependencies-log_call-to-resolve-irritating-error-message-w-rake-db-create</permalink>
  <priority type="integer">10235</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activesupport dependencies patch</tag>
  <title>Cheaper Dependencies#log_call to resolve irritating error message w/ rake db:create</title>
  <updated-at type="datetime">2008-05-01T23:35:38+01:00</updated-at>
  <user-id type="integer">7400</user-id>
  <version type="integer">3</version>
  <user-name>Sven Fuchs</user-name>
  <creator-name>Sven Fuchs</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/56</url>
  <priority-name nil="true"></priority-name>
  <original-body>I've just had the irritating experience of:

@@@
$rake db:create
rake aborted!
Unknown database 'foo'
@@@

... which resulted from a plugin's ActiveRecord model referencing an unknown constant like so:

@@@
class Tag &lt; ActiveRecord::Base
  class Jail &lt; Safemode::Jail
    allow :id, :name
  end
end
@@@

At this point the class Safemode::Jail was not defined yet, so Dependencies#load_missing_constant kicked in.

Dependencies#load_missing_constant first calls #log_call which builds a log message and sends it to #log. While building the log message it calls #inspect on the ActiveRecord model which tries to look up the table and then fails with the message &quot;Unknown database 'foo'&quot;.

The error message above was obviously a little confusing :)

But I also wondered why that whole log message is composed for every call to several Dependencies methods even though #log would only use it (and actually log something) if RAILS_DEFAULT_LOGGER is defined and the log_activity flag is set to true (defaults to false).

@@@ruby
  def log_call(*args)
    arg_str = args.collect(&amp;:inspect) * ', '
    /in `([a-z_\?\!]+)'/ =~ caller(1).first
    selector = $1 || '&lt;unknown&gt;'
    log &quot;called #{selector}(#{arg_str})&quot;
  end

  def log(msg)
    if defined?(RAILS_DEFAULT_LOGGER) &amp;&amp; RAILS_DEFAULT_LOGGER &amp;&amp; log_activity
      RAILS_DEFAULT_LOGGER.debug &quot;Dependencies: #{msg}&quot;
    end
  end
@@@  

I suggest to skip the log message building part in #log_call for those cases when #log wouldn't do anything anyways:

@@@ ruby
  def log_call(*args)
    return unless defined?(RAILS_DEFAULT_LOGGER) &amp;&amp; RAILS_DEFAULT_LOGGER &amp;&amp; log_activity
    ...
@@@

This would also allow Dependencies to actually load the missing constant in that scenario mentioned above.

Additionally I wonder if it's a good idea to change ActiveRecord::Base#inspect so that it doesn't bomb when the database does not exist?</original-body>
  <latest-body>I've just had the irritating experience of:

@@@
$rake db:create
rake aborted!
Unknown database 'foo'
@@@

... which resulted from a plugin's ActiveRecord model referencing an unknown constant like so:

@@@
class Tag &lt; ActiveRecord::Base
  class Jail &lt; Safemode::Jail
    allow :id, :name
  end
end
@@@

At this point the class Safemode::Jail was not defined yet, so Dependencies#load_missing_constant kicked in.

Dependencies#load_missing_constant first calls #log_call which builds a log message and sends it to #log. While building the log message it calls #inspect on the ActiveRecord model which tries to look up the table and then fails with the message &quot;Unknown database 'foo'&quot;.

The error message above was obviously a little confusing :)

But I also wondered why that whole log message is composed for every call to several Dependencies methods even though #log would only use it (and actually log something) if RAILS_DEFAULT_LOGGER is defined and the log_activity flag is set to true (defaults to false).

@@@ruby
  def log_call(*args)
    arg_str = args.collect(&amp;:inspect) * ', '
    /in `([a-z_\?\!]+)'/ =~ caller(1).first
    selector = $1 || '&lt;unknown&gt;'
    log &quot;called #{selector}(#{arg_str})&quot;
  end

  def log(msg)
    if defined?(RAILS_DEFAULT_LOGGER) &amp;&amp; RAILS_DEFAULT_LOGGER &amp;&amp; log_activity
      RAILS_DEFAULT_LOGGER.debug &quot;Dependencies: #{msg}&quot;
    end
  end
@@@  

I suggest to skip the log message building part in #log_call for those cases when #log wouldn't do anything anyways:

@@@ ruby
  def log_call(*args)
    return unless defined?(RAILS_DEFAULT_LOGGER) &amp;&amp; RAILS_DEFAULT_LOGGER &amp;&amp; log_activity
    ...
@@@

This would also allow Dependencies to actually load the missing constant in that scenario mentioned above.

Additionally I wonder if it's a good idea to change ActiveRecord::Base#inspect so that it doesn't bomb when the database does not exist?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
I've just had the irritating experience of:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;$rake db:create
rake aborted!
Unknown database 'foo'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
... which resulted from a plugin's ActiveRecord model referencing an unknown constant like so:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;class Tag &amp;lt; ActiveRecord::Base
  class Jail &amp;lt; Safemode::Jail
    allow :id, :name
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
At this point the class Safemode::Jail was not defined yet, so Dependencies#load_missing_constant kicked in.
&lt;/p&gt;&lt;p&gt;
Dependencies#load_missing_constant first calls #log_call which builds a log message and sends it to #log. While building the log message it calls #inspect on the ActiveRecord model which tries to look up the table and then fails with the message &quot;Unknown database 'foo'&quot;.
&lt;/p&gt;&lt;p&gt;
The error message above was obviously a little confusing :)
&lt;/p&gt;&lt;p&gt;
But I also wondered why that whole log message is composed for every call to several Dependencies methods even though #log would only use it (and actually log something) if RAILS_DEFAULT_LOGGER is defined and the log_activity flag is set to true (defaults to false).
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;  def log_call(*args)
    arg_str = args.collect(&amp;amp;:inspect) * ', '
    /in `([a-z_\?\!]+)'/ =~ caller(1).first
    selector = $1 || '&amp;lt;unknown&amp;gt;'
    log &amp;quot;called #{selector}(#{arg_str})&amp;quot;
  end

  def log(msg)
    if defined?(RAILS_DEFAULT_LOGGER) &amp;amp;&amp;amp; RAILS_DEFAULT_LOGGER &amp;amp;&amp;amp; log_activity
      RAILS_DEFAULT_LOGGER.debug &amp;quot;Dependencies: #{msg}&amp;quot;
    end
  end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I suggest to skip the log message building part in #log_call for those cases when #log wouldn't do anything anyways:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  def log_call(*args)
    return unless defined?(RAILS_DEFAULT_LOGGER) &amp;amp;&amp;amp; RAILS_DEFAULT_LOGGER &amp;amp;&amp;amp; log_activity
    ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This would also allow Dependencies to actually load the missing constant in that scenario mentioned above.
&lt;/p&gt;&lt;p&gt;
Additionally I wonder if it's a good idea to change ActiveRecord::Base#inspect so that it doesn't bomb when the database does not exist?
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've just had the irritating experience of:

@@@
$rake db:create
rake aborted!
Unknown database 'foo'
@@@

... which resulted from a plugin's ActiveRecord model referencing an unknown constant like so:

@@@
class Tag &lt; ActiveRecord::Base
  class Jail &lt; Safemode::Jail
    allow :id, :name
  end
end
@@@

At this point the class Safemode::Jail was not defined yet, so Dependencies#load_missing_constant kicked in.

Dependencies#load_missing_constant first calls #log_call which builds a log message and sends it to #log. While building the log message it calls #inspect on the ActiveRecord model which tries to look up the table and then fails with the message &quot;Unknown database 'foo'&quot;.

The error message above was obviously a little confusing :)

But I also wondered why that whole log message is composed for every call to several Dependencies methods even though #log would only use it (and actually log something) if RAILS_DEFAULT_LOGGER is defined and the log_activity flag is set to true (defaults to false).

@@@ruby
  def log_call(*args)
    arg_str = args.collect(&amp;:inspect) * ', '
    /in `([a-z_\?\!]+)'/ =~ caller(1).first
    selector = $1 || '&lt;unknown&gt;'
    log &quot;called #{selector}(#{arg_str})&quot;
  end

  def log(msg)
    if defined?(RAILS_DEFAULT_LOGGER) &amp;&amp; RAILS_DEFAULT_LOGGER &amp;&amp; log_activity
      RAILS_DEFAULT_LOGGER.debug &quot;Dependencies: #{msg}&quot;
    end
  end
@@@  

I suggest to skip the log message building part in #log_call for those cases when #log wouldn't do anything anyways:

@@@ ruby
  def log_call(*args)
    return unless defined?(RAILS_DEFAULT_LOGGER) &amp;&amp; RAILS_DEFAULT_LOGGER &amp;&amp; log_activity
    ...
@@@

This would also allow Dependencies to actually load the missing constant in that scenario mentioned above.

Additionally I wonder if it's a good idea to change ActiveRecord::Base#inspect so that it doesn't bomb when the database does not exist?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I've just had the irritating experience of:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;$rake db:create
rake aborted!
Unknown database 'foo'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
... which resulted from a plugin's ActiveRecord model referencing an unknown constant like so:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;class Tag &amp;lt; ActiveRecord::Base
  class Jail &amp;lt; Safemode::Jail
    allow :id, :name
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
At this point the class Safemode::Jail was not defined yet, so Dependencies#load_missing_constant kicked in.
&lt;/p&gt;&lt;p&gt;
Dependencies#load_missing_constant first calls #log_call which builds a log message and sends it to #log. While building the log message it calls #inspect on the ActiveRecord model which tries to look up the table and then fails with the message &quot;Unknown database 'foo'&quot;.
&lt;/p&gt;&lt;p&gt;
The error message above was obviously a little confusing :)
&lt;/p&gt;&lt;p&gt;
But I also wondered why that whole log message is composed for every call to several Dependencies methods even though #log would only use it (and actually log something) if RAILS_DEFAULT_LOGGER is defined and the log_activity flag is set to true (defaults to false).
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;  def log_call(*args)
    arg_str = args.collect(&amp;amp;:inspect) * ', '
    /in `([a-z_\?\!]+)'/ =~ caller(1).first
    selector = $1 || '&amp;lt;unknown&amp;gt;'
    log &amp;quot;called #{selector}(#{arg_str})&amp;quot;
  end

  def log(msg)
    if defined?(RAILS_DEFAULT_LOGGER) &amp;amp;&amp;amp; RAILS_DEFAULT_LOGGER &amp;amp;&amp;amp; log_activity
      RAILS_DEFAULT_LOGGER.debug &amp;quot;Dependencies: #{msg}&amp;quot;
    end
  end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I suggest to skip the log message building part in #log_call for those cases when #log wouldn't do anything anyways:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  def log_call(*args)
    return unless defined?(RAILS_DEFAULT_LOGGER) &amp;amp;&amp;amp; RAILS_DEFAULT_LOGGER &amp;amp;&amp;amp; log_activity
    ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This would also allow Dependencies to actually load the missing constant in that scenario mentioned above.
&lt;/p&gt;&lt;p&gt;
Additionally I wonder if it's a good idea to change ActiveRecord::Base#inspect so that it doesn't bomb when the database does not exist?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-27T23:43:39+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">56</number>
      <permalink>cheaper-dependencies-log_call-to-resolve-irritating-error-message-w-rake-db-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Cheaper Dependencies#log_call to resolve irritating error message w/ rake db:create</title>
      <updated-at type="datetime">2008-04-27T23:43:39+01:00</updated-at>
      <user-id type="integer">7400</user-id>
      <version type="integer">1</version>
      <user-name>Sven Fuchs</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/56</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [1eb686a0e5944d99d40bc8ab8039e4179ed78cf7]) Cheaper Dependencies#log_call to resolve irritating error message w/ rake db:create (Sven) [#56 state:resolved]
http://github.com/rails/rails/commit/1eb686a0e5944d99d40bc8ab8039e4179ed78cf7</body>
      <body-html>&lt;div&gt;&lt;p&gt;
(from [1eb686a0e5944d99d40bc8ab8039e4179ed78cf7]) Cheaper Dependencies#log_call to resolve irritating error message w/ rake db:create (Sven) [#56 state:resolved]
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/1eb686a0e5944d99d40bc8ab8039e4179ed78cf7&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-01T05:21:11+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">56</number>
      <permalink>cheaper-dependencies-log_call-to-resolve-irritating-error-message-w-rake-db-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Cheaper Dependencies#log_call to resolve irritating error message w/ rake db:create</title>
      <updated-at type="datetime">2008-05-01T05:21:11+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">2</version>
      <user-name>Repository</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/56</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Cool. 

Thanks, David!</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Cool.
&lt;/p&gt;&lt;p&gt;
Thanks, David!
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-01T23:35:38+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">56</number>
      <permalink>cheaper-dependencies-log_call-to-resolve-irritating-error-message-w-rake-db-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Cheaper Dependencies#log_call to resolve irritating error message w/ rake db:create</title>
      <updated-at type="datetime">2008-05-01T23:35:38+01:00</updated-at>
      <user-id type="integer">7400</user-id>
      <version type="integer">3</version>
      <user-name>Sven Fuchs</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/56</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4dcd0e6fdaca16c51f2a9370da33e3dcd4153cc9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-04-27T23:43:39+01:00</created-at>
      <filename>dependencies_cheaper_log_call.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">20372</id>
      <size type="integer">399</size>
      <uploader-id type="integer">7400</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/20372/dependencies_cheaper_log_call.diff</url>
    </attachment>
  </attachments>
</ticket>
