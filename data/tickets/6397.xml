<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-09T13:19:24+00:00</created-at>
  <creator-id type="integer">68888</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6397</number>
  <permalink>routing-when-member-name-is-update</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>routes</tag>
  <title>Routing when member name is update</title>
  <updated-at type="datetime">2011-02-10T14:51:18+00:00</updated-at>
  <user-id type="integer">68888</user-id>
  <version type="integer">12</version>
  <user-name>lic (at crd)</user-name>
  <creator-name>lic (at crd)</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
  <priority-name>Low</priority-name>
  <original-body>Hi I have a weird situation with routing and member
Looks like that 
    post 'update', :on =&gt; :member 

misbehaves. 

*LONG STORY*:
I need to integrate a backend to Adobe Flash.
Since Flash runs in a browser I don't have any PUT and DELETE.
So I used to make a POST request to ex: /api/profiles/:id/update(.:format)

In the old Rails2 days I used to have this route

    map.namespace :api do |api|
      api.resources :profiles,:member =&gt; { :update  =&gt; :post}
    end

This generated a fine route like:
    update_api_profile POST   /api/profiles/:id/update(.:format) {:action=&gt;&quot;update&quot;, :controller=&gt;&quot;api/profiles&quot;}

Now in Rails 3 I have 

    namespace :api do
      resources :profiles do
        post 'update', :on =&gt; :member
      end
    end

And I don't get my /api/profiles/:id/update(.:format) anymore.


If I try something like
    namespace :api do
      resources :profiles do
        post 'update2', :on =&gt; :member
      end
    end

So I get the expected route /api/profiles/:id/update2(.:format)</original-body>
  <latest-body>Hi I have a weird situation with routing and member
Looks like that 
    post 'update', :on =&gt; :member 

misbehaves. 

*LONG STORY*:
I need to integrate a backend to Adobe Flash.
Since Flash runs in a browser I don't have any PUT and DELETE.
So I used to make a POST request to ex: /api/profiles/:id/update(.:format)

In the old Rails2 days I used to have this route

    map.namespace :api do |api|
      api.resources :profiles,:member =&gt; { :update  =&gt; :post}
    end

This generated a fine route like:
    update_api_profile POST   /api/profiles/:id/update(.:format) {:action=&gt;&quot;update&quot;, :controller=&gt;&quot;api/profiles&quot;}

Now in Rails 3 I have 

    namespace :api do
      resources :profiles do
        post 'update', :on =&gt; :member
      end
    end

And I don't get my /api/profiles/:id/update(.:format) anymore.


If I try something like
    namespace :api do
      resources :profiles do
        post 'update2', :on =&gt; :member
      end
    end

So I get the expected route /api/profiles/:id/update2(.:format)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi I have a weird situation with routing and member&lt;br&gt;
Looks like that&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;post 'update', :on =&amp;gt; :member&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;misbehaves.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;LONG STORY&lt;/em&gt;: I need to integrate a backend to Adobe
Flash.&lt;br&gt;
Since Flash runs in a browser I don't have any PUT and DELETE.&lt;br&gt;
So I used to make a POST request to ex:
/api/profiles/:id/update(.:format)&lt;/p&gt;
&lt;p&gt;In the old Rails2 days I used to have this route&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;map.namespace :api do |api|
  api.resources :profiles,:member =&amp;gt; { :update  =&amp;gt; :post}
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This generated a fine route like:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;update_api_profile POST   /api/profiles/:id/update(.:format) {:action=&amp;gt;&quot;update&quot;, :controller=&amp;gt;&quot;api/profiles&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now in Rails 3 I have&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;namespace :api do
  resources :profiles do
    post 'update', :on =&amp;gt; :member
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And I don't get my /api/profiles/:id/update(.:format)
anymore.&lt;/p&gt;
&lt;p&gt;If I try something like&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;namespace :api do
  resources :profiles do
    post 'update2', :on =&amp;gt; :member
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So I get the expected route
/api/profiles/:id/update2(.:format)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi I have a weird situation with routing and member
Looks like that 
    post 'update', :on =&gt; :member 

misbehaves. 

*LONG STORY*:
I need to integrate a backend to Adobe Flash.
Since Flash runs in a browser I don't have any PUT and DELETE.
So I used to make a POST request to ex: /api/profiles/:id/update(.:format)

In the old Rails2 days I used to have this route

    map.namespace :api do |api|
      api.resources :profiles,:member =&gt; { :update  =&gt; :post}
    end

This generated a fine route like:
    update_api_profile POST   /api/profiles/:id/update(.:format) {:action=&gt;&quot;update&quot;, :controller=&gt;&quot;api/profiles&quot;}

Now in Rails 3 I have 

    namespace :api do
      resources :profiles do
        post 'update', :on =&gt; :member
      end
    end

And I don't get my /api/profiles/:id/update(.:format) anymore.


If I try something like
    namespace :api do
      resources :profiles do
        post 'update2', :on =&gt; :member
      end
    end

So I get the expected route /api/profiles/:id/update2(.:format)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi I have a weird situation with routing and member&lt;br&gt;
Looks like that&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;post 'update', :on =&amp;gt; :member&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;misbehaves.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;LONG STORY&lt;/em&gt;: I need to integrate a backend to Adobe
Flash.&lt;br&gt;
Since Flash runs in a browser I don't have any PUT and DELETE.&lt;br&gt;
So I used to make a POST request to ex:
/api/profiles/:id/update(.:format)&lt;/p&gt;
&lt;p&gt;In the old Rails2 days I used to have this route&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;map.namespace :api do |api|
  api.resources :profiles,:member =&amp;gt; { :update  =&amp;gt; :post}
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This generated a fine route like:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;update_api_profile POST   /api/profiles/:id/update(.:format) {:action=&amp;gt;&quot;update&quot;, :controller=&amp;gt;&quot;api/profiles&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now in Rails 3 I have&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;namespace :api do
  resources :profiles do
    post 'update', :on =&amp;gt; :member
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And I don't get my /api/profiles/:id/update(.:format)
anymore.&lt;/p&gt;
&lt;p&gt;If I try something like&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;namespace :api do
  resources :profiles do
    post 'update2', :on =&amp;gt; :member
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So I get the expected route
/api/profiles/:id/update2(.:format)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-09T13:19:24+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-09T13:19:26+00:00</updated-at>
      <user-id type="integer">68888</user-id>
      <version type="integer">1</version>
      <user-name>lic (at crd)</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>So far I have fixed with a workaround

    namespace :api do
      resources :profiles, :only =&gt; [:show, :create]
    end
    match '/api/profiles/:id/update(.:format)' =&gt; 'profile#update', :method =&gt; :post

but shouldn't it work as in the Rails2 API ? I mean with a proper syntax?</body>
      <body-html>&lt;div&gt;&lt;p&gt;So far I have fixed with a workaround&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;namespace :api do
  resources :profiles, :only =&amp;gt; [:show, :create]
end
match '/api/profiles/:id/update(.:format)' =&amp;gt; 'profile#update', :method =&amp;gt; :post&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but shouldn't it work as in the Rails2 API ? I mean with a
proper syntax?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-09T13:26:12+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-09T13:26:16+00:00</updated-at>
      <user-id type="integer">68888</user-id>
      <version type="integer">2</version>
      <user-name>lic (at crd)</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Browsers don't support the PUT and DELETE http methods either so to work around this problem you can pass a form parameter which overrides the HTTP method. Just pass _method=put and the normal route will be recognised. Alternatively, if you can't change the Flash movie then just add the update route manually as you have done.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Browsers don't support the PUT and DELETE http methods either so
to work around this problem you can pass a form parameter which
overrides the HTTP method. Just pass _method=put and the normal
route will be recognised. Alternatively, if you can't change the
Flash movie then just add the update route manually as you have
done.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-09T14:33:29+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-09T14:33:39+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">3</version>
      <user-name>Andrew White</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry Andrew but I can't pass a _method=put. My payload is XML or JSON.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry Andrew but I can't pass a _method=put. My payload is XML
or JSON.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-10T09:01:49+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-10T09:01:57+00:00</updated-at>
      <user-id type="integer">68888</user-id>
      <version type="integer">4</version>
      <user-name>lic (at crd)</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Okay, how about sending a custom header? You can set the X-HTTP-Method-Override header to 'PUT' and the Rack middleware will adjust the HTTP method. You'll need to provide a cross-domain policy file on the server or the request will fail: http://kb2.adobe.com/cps/403/kb403185.html</body>
      <body-html>&lt;div&gt;&lt;p&gt;Okay, how about sending a custom header? You can set the
X-HTTP-Method-Override header to 'PUT' and the Rack middleware will
adjust the HTTP method. You'll need to provide a cross-domain
policy file on the server or the request will fail: &lt;a href=
&quot;http://kb2.adobe.com/cps/403/kb403185.html&quot;&gt;http://kb2.adobe.com/cps/403/kb403185.html&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-10T09:52:58+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-10T09:53:07+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">5</version>
      <user-name>Andrew White</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yeps that is a possibility. We can also do this in the route 

    namespace :api do
      resources :profiles, :only =&gt; [:show, :create]
      match '/profiles/:id/update(.:format)' =&gt; 'profiles#update', :method =&gt; :post
      match '/profiles/:id/delete(.:format)' =&gt; 'profiles#destroy', :method =&gt; :delete
    end

And it works. My question here is why can't we make an API that is back compatible with Rails2.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeps that is a possibility. We can also do this in the route&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;namespace :api do
  resources :profiles, :only =&amp;gt; [:show, :create]
  match '/profiles/:id/update(.:format)' =&amp;gt; 'profiles#update', :method =&amp;gt; :post
  match '/profiles/:id/delete(.:format)' =&amp;gt; 'profiles#destroy', :method =&amp;gt; :delete
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And it works. My question here is why can't we make an API that
is back compatible with Rails2.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-10T09:59:20+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-10T09:59:28+00:00</updated-at>
      <user-id type="integer">68888</user-id>
      <version type="integer">6</version>
      <user-name>lic (at crd)</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>How about this:

@@@ ruby
  namespace :api do
    resources :profiles, :only =&gt; [:show, :create] do
      member do
        post :update, :path =&gt; 'update', :as =&gt; :update
        post :destroy, :path =&gt; 'destroy', :as =&gt; :destroy
      end
    end
  end
@@@

You need the :path and :as options to override the inbuilt defaults of blank for the action path and helper prefix.</body>
      <body-html>&lt;div&gt;&lt;p&gt;How about this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  namespace :api do
    resources :profiles, :only =&amp;gt; [:show, :create] do
      member do
        post :update, :path =&amp;gt; 'update', :as =&amp;gt; :update
        post :destroy, :path =&amp;gt; 'destroy', :as =&amp;gt; :destroy
      end
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You need the :path and :as options to override the inbuilt
defaults of blank for the action path and helper prefix.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-10T10:29:30+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-10T10:29:40+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">7</version>
      <user-name>Andrew White</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Superb! 
I didn't know that the :path option could override inbuilt defaults!
That's perfect! 

Thank you for helping out! I own you a beer!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Superb!&lt;br&gt;
I didn't know that the :path option could override inbuilt
defaults!&lt;br&gt;
That's perfect!&lt;/p&gt;
&lt;p&gt;Thank you for helping out! I own you a beer!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-10T10:40:34+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-10T10:40:43+00:00</updated-at>
      <user-id type="integer">68888</user-id>
      <version type="integer">8</version>
      <user-name>lic (at crd)</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Weird thing...

    rake routes | grep profile
 
    api_profile_sessions POST   /api/profile_sessions(.:format)    {:action=&gt;&quot;create&quot;, :controller=&gt;&quot;api/profile_sessions&quot;}
  update_api_profile POST   /api/profiles/:id/update(.:format) {:action=&gt;&quot;update&quot;, :controller=&gt;&quot;api/profiles&quot;}
        api_profiles POST   /api/profiles(.:format)            {:action=&gt;&quot;create&quot;, :controller=&gt;&quot;api/profiles&quot;}
         api_profile GET    /api/profiles/:id(.:format)        {:action=&gt;&quot;show&quot;, :controller=&gt;&quot;api/profiles&quot;}

So I have it and works fine.

From rspec:

    Failure/Error: assert_routing(&quot;/api/profiles/PUBLICKEY/update.xml&quot;,
     No route matches &quot;/api/profiles/PUBLICKEY/update.xml&quot;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Weird thing...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;rake routes | grep profile

api_profile_sessions POST   /api/profile_sessions(.:format)    {:action=&amp;gt;&quot;create&quot;, :controller=&amp;gt;&quot;api/profile_sessions&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;update_api_profile POST /api/profiles/:id/update(.:format)
{:action=&amp;gt;&quot;update&quot;, :controller=&amp;gt;&quot;api/profiles&quot;}&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    api_profiles POST   /api/profiles(.:format)            {:action=&amp;gt;&quot;create&quot;, :controller=&amp;gt;&quot;api/profiles&quot;}
     api_profile GET    /api/profiles/:id(.:format)        {:action=&amp;gt;&quot;show&quot;, :controller=&amp;gt;&quot;api/profiles&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So I have it and works fine.&lt;/p&gt;
&lt;p&gt;From rspec:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Failure/Error: assert_routing(&quot;/api/profiles/PUBLICKEY/update.xml&quot;,
 No route matches &quot;/api/profiles/PUBLICKEY/update.xml&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-10T10:53:04+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-10T10:53:13+00:00</updated-at>
      <user-id type="integer">68888</user-id>
      <version type="integer">9</version>
      <user-name>lic (at crd)</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Could it be a bug in ActionDispatch::Assertions::RoutingAssertions ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Could it be a bug in
ActionDispatch::Assertions::RoutingAssertions ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-10T11:24:22+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-10T11:24:36+00:00</updated-at>
      <user-id type="integer">68888</user-id>
      <version type="integer">10</version>
      <user-name>lic (at crd)</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't think so - the following test works in a new app:

@@@ ruby
require 'test_helper'

class RoutingTest &lt; ActionDispatch::IntegrationTest

  test &quot;API routing&quot; do

    assert_routing(
      { :path =&gt; &quot;/api/profiles/PUBLICKEY.xml&quot;, :method =&gt; :get },
      {
        :controller =&gt; &quot;api/profiles&quot;,
        :action =&gt; &quot;show&quot;,
        :id =&gt; &quot;PUBLICKEY&quot;,
        :format =&gt; &quot;xml&quot;
      }
    )

    assert_routing(
      { :path =&gt; &quot;/api/profiles.xml&quot;, :method =&gt; :post },
      {
        :controller =&gt; &quot;api/profiles&quot;,
        :action =&gt; &quot;create&quot;,
        :format =&gt; &quot;xml&quot;
      }
    )

    assert_routing(
      { :path =&gt; &quot;/api/profiles/PUBLICKEY/update.xml&quot;, :method =&gt; :post },
      {
        :controller =&gt; &quot;api/profiles&quot;,
        :action =&gt; &quot;update&quot;,
        :id =&gt; &quot;PUBLICKEY&quot;,
        :format =&gt; &quot;xml&quot;
      }
    )

    assert_routing(
      { :path =&gt; &quot;/api/profiles/PUBLICKEY/destroy.xml&quot;, :method =&gt; :post },
      {
        :controller =&gt; &quot;api/profiles&quot;,
        :action =&gt; &quot;destroy&quot;,
        :id =&gt; &quot;PUBLICKEY&quot;,
        :format =&gt; &quot;xml&quot;
      }
    )

  end
end
@@@

Are you sure that the assert_routing call is being passed :method =&gt; :post? Are you using assert_routing in your spec directly?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think so - the following test works in a new app:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;require 'test_helper'

class RoutingTest &amp;lt; ActionDispatch::IntegrationTest

  test &quot;API routing&quot; do

    assert_routing(
      { :path =&amp;gt; &quot;/api/profiles/PUBLICKEY.xml&quot;, :method =&amp;gt; :get },
      {
        :controller =&amp;gt; &quot;api/profiles&quot;,
        :action =&amp;gt; &quot;show&quot;,
        :id =&amp;gt; &quot;PUBLICKEY&quot;,
        :format =&amp;gt; &quot;xml&quot;
      }
    )

    assert_routing(
      { :path =&amp;gt; &quot;/api/profiles.xml&quot;, :method =&amp;gt; :post },
      {
        :controller =&amp;gt; &quot;api/profiles&quot;,
        :action =&amp;gt; &quot;create&quot;,
        :format =&amp;gt; &quot;xml&quot;
      }
    )

    assert_routing(
      { :path =&amp;gt; &quot;/api/profiles/PUBLICKEY/update.xml&quot;, :method =&amp;gt; :post },
      {
        :controller =&amp;gt; &quot;api/profiles&quot;,
        :action =&amp;gt; &quot;update&quot;,
        :id =&amp;gt; &quot;PUBLICKEY&quot;,
        :format =&amp;gt; &quot;xml&quot;
      }
    )

    assert_routing(
      { :path =&amp;gt; &quot;/api/profiles/PUBLICKEY/destroy.xml&quot;, :method =&amp;gt; :post },
      {
        :controller =&amp;gt; &quot;api/profiles&quot;,
        :action =&amp;gt; &quot;destroy&quot;,
        :id =&amp;gt; &quot;PUBLICKEY&quot;,
        :format =&amp;gt; &quot;xml&quot;
      }
    )

  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Are you sure that the assert_routing call is being passed
:method =&amp;gt; :post? Are you using assert_routing in your spec
directly?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-10T12:01:21+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-10T12:01:27+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">11</version>
      <user-name>Andrew White</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I made it work in rspec I guess the issue was calling the wrong assertion method.

    describe &quot;Routes&quot; do
      it &quot;should route update profile from Flash&quot; do
        {:post =&gt; &quot;/api/profiles/PUBLICKEY/update.xml&quot;}.should route_to(
         :controller =&gt; &quot;api/profiles&quot;,
         :action     =&gt; &quot;update&quot;,
         :id         =&gt; &quot;PUBLICKEY&quot;,
         :format     =&gt; &quot;xml&quot;
         )
      end
    end
    
Ok I own you definitively a beer now!
Thank you for tips!</body>
      <body-html>&lt;div&gt;&lt;p&gt;I made it work in rspec I guess the issue was calling the wrong
assertion method.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;describe &quot;Routes&quot; do
  it &quot;should route update profile from Flash&quot; do
    {:post =&amp;gt; &quot;/api/profiles/PUBLICKEY/update.xml&quot;}.should route_to(
     :controller =&amp;gt; &quot;api/profiles&quot;,
     :action     =&amp;gt; &quot;update&quot;,
     :id         =&amp;gt; &quot;PUBLICKEY&quot;,
     :format     =&amp;gt; &quot;xml&quot;
     )
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Ok I own you definitively a beer now!&lt;br&gt;
Thank you for tips!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-10T14:51:10+00:00</created-at>
      <creator-id type="integer">68888</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6397</number>
      <permalink>routing-when-member-name-is-update</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>routes</tag>
      <title>Routing when member name is update</title>
      <updated-at type="datetime">2011-02-10T14:51:18+00:00</updated-at>
      <user-id type="integer">68888</user-id>
      <version type="integer">12</version>
      <user-name>lic (at crd)</user-name>
      <creator-name>lic (at crd)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6397</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
