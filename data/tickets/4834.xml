<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-27T17:39:54+01:00</created-at>
  <creator-id type="integer">15459</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4834</number>
  <permalink>please-un-deprecate-before_save-after_save-etc-methods</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>&quot;activerecord rails3&quot; active_record deprecation &quot;rails 3.0.0.beta4&quot;</tag>
  <title>Please un-deprecate before_save, after_save, etc methods</title>
  <updated-at type="datetime">2011-02-18T10:09:01+00:00</updated-at>
  <user-id type="integer">73395</user-id>
  <version type="integer">4</version>
  <user-name>Michael Hasenstein</user-name>
  <creator-name>Nate Wiger</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4834</url>
  <priority-name>Low</priority-name>
  <original-body>We have been working to move from 2.3.3 to 3.0.0.beta4 recently and have run into this decision:

    Base#before_save has been deprecated, please use Base.before_save :method instead. (called from &lt;class:User&gt; at app/models/user.rb

I assume this decision was designed to protect people from themselves; that is, where they use inheritance or mixins that result in multiple &quot;def before_save&quot; definitions, which results in them not getting the callbacks that they expect.  So the Rails team is recommending that the other ways of registering callbacks are preferred.

IF so, this is just that - a recommendation - and should remain as such.  It's a great thing to document and point out to people as a caveat.  It's also a great thing for plugin others to abide by.  However, the &quot;def before_save&quot; idiom has been in Rails for years, and is immensely powerful.  Consider:

    class Auto &lt; ActiveRecord::Base
      def before_save
        # ...
      end
    end

    class Car &lt; Auto
      def before_save
        super
        # ...
      end
    end

The great thing about this approach is the developer is using features of the Ruby language.  A while ago Yehuda posted a long blog post about how we need to go back to our Ruby roots, and this approach supports that.

Furthermore, you can get into just as much trouble with the symbol approach:

    class Auto &lt; ActiveRecord::Base
      before_save :set_defaults
      def set_defaults
        # ...
      end
    end

    class Car &lt; Auto
      before_save :set_defaults
      def set_defaults
        # ...
      end
    end

With this setup, the developer could mistakenly think both were going to get called; using the symbol method name approach obscures what is going on under the hood.  You would still need to put &quot;super&quot; in set_defaults, which requires a good amount of explanation.

Please reverse this decision and allow us Rails users to keep the &quot;def callback&quot; approach which has proven to be so powerful in Rails over the past years.

Thanks,
Nate Wiger
PlayStation</original-body>
  <latest-body>We have been working to move from 2.3.3 to 3.0.0.beta4 recently and have run into this decision:

    Base#before_save has been deprecated, please use Base.before_save :method instead. (called from &lt;class:User&gt; at app/models/user.rb

I assume this decision was designed to protect people from themselves; that is, where they use inheritance or mixins that result in multiple &quot;def before_save&quot; definitions, which results in them not getting the callbacks that they expect.  So the Rails team is recommending that the other ways of registering callbacks are preferred.

IF so, this is just that - a recommendation - and should remain as such.  It's a great thing to document and point out to people as a caveat.  It's also a great thing for plugin others to abide by.  However, the &quot;def before_save&quot; idiom has been in Rails for years, and is immensely powerful.  Consider:

    class Auto &lt; ActiveRecord::Base
      def before_save
        # ...
      end
    end

    class Car &lt; Auto
      def before_save
        super
        # ...
      end
    end

The great thing about this approach is the developer is using features of the Ruby language.  A while ago Yehuda posted a long blog post about how we need to go back to our Ruby roots, and this approach supports that.

Furthermore, you can get into just as much trouble with the symbol approach:

    class Auto &lt; ActiveRecord::Base
      before_save :set_defaults
      def set_defaults
        # ...
      end
    end

    class Car &lt; Auto
      before_save :set_defaults
      def set_defaults
        # ...
      end
    end

With this setup, the developer could mistakenly think both were going to get called; using the symbol method name approach obscures what is going on under the hood.  You would still need to put &quot;super&quot; in set_defaults, which requires a good amount of explanation.

Please reverse this decision and allow us Rails users to keep the &quot;def callback&quot; approach which has proven to be so powerful in Rails over the past years.

Thanks,
Nate Wiger
PlayStation</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;We have been working to move from 2.3.3 to 3.0.0.beta4 recently
and have run into this decision:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Base#before_save has been deprecated, please use Base.before_save :method instead. (called from &amp;lt;class:User&amp;gt; at app/models/user.rb&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I assume this decision was designed to protect people from
themselves; that is, where they use inheritance or mixins that
result in multiple &quot;def before_save&quot; definitions, which results in
them not getting the callbacks that they expect. So the Rails team
is recommending that the other ways of registering callbacks are
preferred.&lt;/p&gt;
&lt;p&gt;IF so, this is just that - a recommendation - and should remain
as such. It's a great thing to document and point out to people as
a caveat. It's also a great thing for plugin others to abide by.
However, the &quot;def before_save&quot; idiom has been in Rails for years,
and is immensely powerful. Consider:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Auto &amp;lt; ActiveRecord::Base
  def before_save
    # ...
  end
end

class Car &amp;lt; Auto
  def before_save
    super
    # ...
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The great thing about this approach is the developer is using
features of the Ruby language. A while ago Yehuda posted a long
blog post about how we need to go back to our Ruby roots, and this
approach supports that.&lt;/p&gt;
&lt;p&gt;Furthermore, you can get into just as much trouble with the
symbol approach:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Auto &amp;lt; ActiveRecord::Base
  before_save :set_defaults
  def set_defaults
    # ...
  end
end

class Car &amp;lt; Auto
  before_save :set_defaults
  def set_defaults
    # ...
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With this setup, the developer could mistakenly think both were
going to get called; using the symbol method name approach obscures
what is going on under the hood. You would still need to put
&quot;super&quot; in set_defaults, which requires a good amount of
explanation.&lt;/p&gt;
&lt;p&gt;Please reverse this decision and allow us Rails users to keep
the &quot;def callback&quot; approach which has proven to be so powerful in
Rails over the past years.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
Nate Wiger&lt;br&gt;
PlayStation&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We have been working to move from 2.3.3 to 3.0.0.beta4 recently and have run into this decision:

    Base#before_save has been deprecated, please use Base.before_save :method instead. (called from &lt;class:User&gt; at app/models/user.rb

I assume this decision was designed to protect people from themselves; that is, where they use inheritance or mixins that result in multiple &quot;def before_save&quot; definitions, which results in them not getting the callbacks that they expect.  So the Rails team is recommending that the other ways of registering callbacks are preferred.

IF so, this is just that - a recommendation - and should remain as such.  It's a great thing to document and point out to people as a caveat.  It's also a great thing for plugin others to abide by.  However, the &quot;def before_save&quot; idiom has been in Rails for years, and is immensely powerful.  Consider:

    class Auto &lt; ActiveRecord::Base
      def before_save
        # ...
      end
    end

    class Car &lt; Auto
      def before_save
        super
        # ...
      end
    end

The great thing about this approach is the developer is using features of the Ruby language.  A while ago Yehuda posted a long blog post about how we need to go back to our Ruby roots, and this approach supports that.

Furthermore, you can get into just as much trouble with the symbol approach:

    class Auto &lt; ActiveRecord::Base
      before_save :set_defaults
      def set_defaults
        # ...
      end
    end

    class Car &lt; Auto
      before_save :set_defaults
      def set_defaults
        # ...
      end
    end

With this setup, the developer could mistakenly think both were going to get called; using the symbol method name approach obscures what is going on under the hood.  You would still need to put &quot;super&quot; in set_defaults, which requires a good amount of explanation.

Please reverse this decision and allow us Rails users to keep the &quot;def callback&quot; approach which has proven to be so powerful in Rails over the past years.

Thanks,
Nate Wiger
PlayStation</body>
      <body-html>&lt;div&gt;&lt;p&gt;We have been working to move from 2.3.3 to 3.0.0.beta4 recently
and have run into this decision:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Base#before_save has been deprecated, please use Base.before_save :method instead. (called from &amp;lt;class:User&amp;gt; at app/models/user.rb&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I assume this decision was designed to protect people from
themselves; that is, where they use inheritance or mixins that
result in multiple &quot;def before_save&quot; definitions, which results in
them not getting the callbacks that they expect. So the Rails team
is recommending that the other ways of registering callbacks are
preferred.&lt;/p&gt;
&lt;p&gt;IF so, this is just that - a recommendation - and should remain
as such. It's a great thing to document and point out to people as
a caveat. It's also a great thing for plugin others to abide by.
However, the &quot;def before_save&quot; idiom has been in Rails for years,
and is immensely powerful. Consider:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Auto &amp;lt; ActiveRecord::Base
  def before_save
    # ...
  end
end

class Car &amp;lt; Auto
  def before_save
    super
    # ...
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The great thing about this approach is the developer is using
features of the Ruby language. A while ago Yehuda posted a long
blog post about how we need to go back to our Ruby roots, and this
approach supports that.&lt;/p&gt;
&lt;p&gt;Furthermore, you can get into just as much trouble with the
symbol approach:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Auto &amp;lt; ActiveRecord::Base
  before_save :set_defaults
  def set_defaults
    # ...
  end
end

class Car &amp;lt; Auto
  before_save :set_defaults
  def set_defaults
    # ...
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With this setup, the developer could mistakenly think both were
going to get called; using the symbol method name approach obscures
what is going on under the hood. You would still need to put
&quot;super&quot; in set_defaults, which requires a good amount of
explanation.&lt;/p&gt;
&lt;p&gt;Please reverse this decision and allow us Rails users to keep
the &quot;def callback&quot; approach which has proven to be so powerful in
Rails over the past years.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
Nate Wiger&lt;br&gt;
PlayStation&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-11T20:41:58+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4834</number>
      <permalink>please-un-deprecate-before_save-after_save-etc-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; active_record deprecation &quot;rails 3.0.0.beta4&quot;</tag>
      <title>Please un-deprecate before_save, after_save, etc methods</title>
      <updated-at type="datetime">2010-06-11T20:42:02+01:00</updated-at>
      <user-id type="integer">15459</user-id>
      <version type="integer">1</version>
      <user-name>Nate Wiger</user-name>
      <creator-name>Nate Wiger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4834</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Cheap balenciaga purses, &lt;a href='http://www.poboshop.com'&gt;balenciaga handbags&lt;/a&gt;, balenciaga wallets onsale, 
Luxuy handbags, purses, high quality at low price at poboshop.com.
&lt;a href='http://www.balenciagaonsale.com'&gt;balenciaga bags&lt;/a&gt;

The most cool online shoes shop where you can find the most fashion designers shoes, include
&lt;a href='http://www.fashionshoesmart.com'&gt;Manolo Blahnik Shoes&lt;/a&gt;, &lt;a href='http://www.fashionshoesmart.com'&gt;Jimmy Choo Shoes&lt;/a&gt;, Christian Louboutin shoes and more. 
we offer high quality highheels at low price.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Cheap balenciaga purses, &lt;a href=
&quot;http://www.poboshop.com&quot;&gt;balenciaga handbags&lt;/a&gt;, balenciaga
wallets onsale,&lt;br&gt;
Luxuy handbags, purses, high quality at low price at
poboshop.com.&lt;br&gt;
&lt;a href=&quot;http://www.balenciagaonsale.com&quot;&gt;balenciaga bags&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The most cool online shoes shop where you can find the most
fashion designers shoes, include&lt;br&gt;
&lt;a href=&quot;http://www.fashionshoesmart.com&quot;&gt;Manolo Blahnik Shoes&lt;/a&gt;,
&lt;a href=&quot;http://www.fashionshoesmart.com&quot;&gt;Jimmy Choo Shoes&lt;/a&gt;,
Christian Louboutin shoes and more.&lt;br&gt;
we offer high quality highheels at low price.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-27T15:20:07+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4834</number>
      <permalink>please-un-deprecate-before_save-after_save-etc-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; active_record deprecation &quot;rails 3.0.0.beta4&quot;</tag>
      <title>Please un-deprecate before_save, after_save, etc methods</title>
      <updated-at type="datetime">2010-07-27T17:39:54+01:00</updated-at>
      <user-id type="integer">109040</user-id>
      <version type="integer">2</version>
      <user-name>matin</user-name>
      <creator-name>Nate Wiger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4834</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't think &lt;code&gt;before_save&lt;/code&gt;/&lt;code&gt;after_save&lt;/code&gt; have been deprecated. I don't get any deprecation warnings.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think &lt;code&gt;before_save&lt;/code&gt;/&lt;code&gt;after_save&lt;/code&gt;
have been deprecated. I don't get any deprecation warnings.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-07T07:19:22+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4834</number>
      <permalink>please-un-deprecate-before_save-after_save-etc-methods</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;activerecord rails3&quot; active_record deprecation &quot;rails 3.0.0.beta4&quot;</tag>
      <title>Please un-deprecate before_save, after_save, etc methods</title>
      <updated-at type="datetime">2010-10-07T07:19:25+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">3</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Nate Wiger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4834</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I do - Rails 3.0.4. I don't know if it's VALID, but I DO see the message. I changed the names of my before/after_save functions to something else, in my case naming was accidental and I don't care.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I do - Rails 3.0.4. I don't know if it's VALID, but I DO see the
message. I changed the names of my before/after_save functions to
something else, in my case naming was accidental and I don't
care.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-18T10:08:49+00:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4834</number>
      <permalink>please-un-deprecate-before_save-after_save-etc-methods</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;activerecord rails3&quot; active_record deprecation &quot;rails 3.0.0.beta4&quot;</tag>
      <title>Please un-deprecate before_save, after_save, etc methods</title>
      <updated-at type="datetime">2011-02-18T10:09:01+00:00</updated-at>
      <user-id type="integer">73395</user-id>
      <version type="integer">4</version>
      <user-name>Michael Hasenstein</user-name>
      <creator-name>Nate Wiger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4834</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
