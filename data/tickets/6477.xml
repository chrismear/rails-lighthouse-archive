<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-03T09:20:19+00:00</created-at>
  <creator-id type="integer">20854</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6477</number>
  <permalink>activemodel-transformations</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>ActiveModel transformations</title>
  <updated-at type="datetime">2011-03-03T09:20:19+00:00</updated-at>
  <user-id type="integer">130381</user-id>
  <version type="integer">10</version>
  <user-name>Oriol Gual</user-name>
  <creator-name>Mike Perham</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
  <priority-name nil="true"></priority-name>
  <original-body>I'd like to propose adding the notion of transformations and transformers to ActiveModel.  I've found that basically every web project I've ever worked on has needed functionality to strip and clean form inputs, e.g. stripping non-numeric characters from a credit card number field.

So I'd like to implement something similar to ActiveModel's validations, except that it would happen before the validation stage.  The API is completely open at this point; I was thinking something like this:

@@@ ruby
class CreditCard

  # attributes: number, name
  transform :number do |num|
    num.gsub(/\D/, '')
  end
  transform :name do |num|
    num.strip
  end
end

cc = CreditCard.new(:number =&gt; '4111-1111-1111-1111', :name =&gt; ' Mike Perham ')
cc.save!
[cc.number, cc.name] # =&gt; ['4111111111111111', 'Mike Perham']
@@@

but I'm happy to discuss use cases and what the API might look like at this point.  Some other possibilities: type coercion (String -&gt; Date, e.g.) and what might we supply as common, built-in transformers.</original-body>
  <latest-body>I'd like to propose adding the notion of transformations and transformers to ActiveModel.  I've found that basically every web project I've ever worked on has needed functionality to strip and clean form inputs, e.g. stripping non-numeric characters from a credit card number field.

So I'd like to implement something similar to ActiveModel's validations, except that it would happen before the validation stage.  The API is completely open at this point; I was thinking something like this:

@@@ ruby
class CreditCard

  # attributes: number, name
  transform :number do |num|
    num.gsub(/\D/, '')
  end
  transform :name do |num|
    num.strip
  end
end

cc = CreditCard.new(:number =&gt; '4111-1111-1111-1111', :name =&gt; ' Mike Perham ')
cc.save!
[cc.number, cc.name] # =&gt; ['4111111111111111', 'Mike Perham']
@@@

but I'm happy to discuss use cases and what the API might look like at this point.  Some other possibilities: type coercion (String -&gt; Date, e.g.) and what might we supply as common, built-in transformers.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'd like to propose adding the notion of transformations and
transformers to ActiveModel. I've found that basically every web
project I've ever worked on has needed functionality to strip and
clean form inputs, e.g. stripping non-numeric characters from a
credit card number field.&lt;/p&gt;
&lt;p&gt;So I'd like to implement something similar to ActiveModel's
validations, except that it would happen before the validation
stage. The API is completely open at this point; I was thinking
something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class CreditCard

  # attributes: number, name
  transform :number do |num|
    num.gsub(/\D/, '')
  end
  transform :name do |num|
    num.strip
  end
end

cc = CreditCard.new(:number =&amp;gt; '4111-1111-1111-1111', :name =&amp;gt; ' Mike Perham ')
cc.save!
[cc.number, cc.name] # =&amp;gt; ['4111111111111111', 'Mike Perham']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but I'm happy to discuss use cases and what the API might look
like at this point. Some other possibilities: type coercion (String
-&amp;gt; Date, e.g.) and what might we supply as common, built-in
transformers.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'd like to propose adding the notion of transformations and transformers to ActiveModel.  I've found that basically every web project I've ever worked on has needed functionality to strip and clean form inputs, e.g. stripping non-numeric characters from a credit card number field.

So I'd like to implement something similar to ActiveModel's validations, except that it would happen before the validation stage.  The API is completely open at this point; I was thinking something like this:

@@@ ruby
class CreditCard

  # attributes: number, name
  transform :number do |num|
    num.gsub(/\D/, '')
  end
  transform :name do |num|
    num.strip
  end
end

cc = CreditCard.new(:number =&gt; '4111-1111-1111-1111', :name =&gt; ' Mike Perham ')
cc.save!
[cc.number, cc.name] # =&gt; ['4111111111111111', 'Mike Perham']
@@@

but I'm happy to discuss use cases and what the API might look like at this point.  Some other possibilities: type coercion (String -&gt; Date, e.g.) and what might we supply as common, built-in transformers.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'd like to propose adding the notion of transformations and
transformers to ActiveModel. I've found that basically every web
project I've ever worked on has needed functionality to strip and
clean form inputs, e.g. stripping non-numeric characters from a
credit card number field.&lt;/p&gt;
&lt;p&gt;So I'd like to implement something similar to ActiveModel's
validations, except that it would happen before the validation
stage. The API is completely open at this point; I was thinking
something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class CreditCard

  # attributes: number, name
  transform :number do |num|
    num.gsub(/\D/, '')
  end
  transform :name do |num|
    num.strip
  end
end

cc = CreditCard.new(:number =&amp;gt; '4111-1111-1111-1111', :name =&amp;gt; ' Mike Perham ')
cc.save!
[cc.number, cc.name] # =&amp;gt; ['4111111111111111', 'Mike Perham']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but I'm happy to discuss use cases and what the API might look
like at this point. Some other possibilities: type coercion (String
-&amp;gt; Date, e.g.) and what might we supply as common, built-in
transformers.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-27T05:34:53+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-02-27T05:34:55+00:00</updated-at>
      <user-id type="integer">20854</user-id>
      <version type="integer">1</version>
      <user-name>Mike Perham</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey Mike,

I like your idea basically as this is really default functionality! The first thing that comes to my mind was that these transformers should easily be chainable e.g. like rack-middleware. Output of the first transformer could be treated as input to the next transformer. Furthermore I think it&#180;s important to implement the API in a way that custom transformers can easily be added. 

What do you think about this: 

&lt;pre&gt;
validates :name, :presence =&gt; true, :transformer =&gt; [:remove_whitespace, :remove_invalid_chars]
&lt;/pre&gt;

This way the entire chain of transformers is grouped with the validator and easily verifyable.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Mike,&lt;/p&gt;
&lt;p&gt;I like your idea basically as this is really default
functionality! The first thing that comes to my mind was that these
transformers should easily be chainable e.g. like rack-middleware.
Output of the first transformer could be treated as input to the
next transformer. Furthermore I think it&amp;acute;s important to
implement the API in a way that custom transformers can easily be
added.&lt;/p&gt;
&lt;p&gt;What do you think about this:&lt;/p&gt;
&lt;pre&gt;
validates :name, :presence =&amp;gt; true, :transformer =&amp;gt; [:remove_whitespace, :remove_invalid_chars]
&lt;/pre&gt;
&lt;p&gt;This way the entire chain of transformers is grouped with the
validator and easily verifyable.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-27T15:28:13+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-02-27T15:28:22+00:00</updated-at>
      <user-id type="integer">137141</user-id>
      <version type="integer">2</version>
      <user-name>thoefer</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>And I think it&#180;s important to really distinguish between what&#180;s is implemented as a transformer (and therefore before the validation stage) and what should be a validator.</body>
      <body-html>&lt;div&gt;&lt;p&gt;And I think it&amp;acute;s important to really distinguish between
what&amp;acute;s is implemented as a transformer (and therefore before
the validation stage) and what should be a validator.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-27T15:34:20+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-02-27T15:34:30+00:00</updated-at>
      <user-id type="integer">137141</user-id>
      <version type="integer">3</version>
      <user-name>thoefer</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Mike,

I gave it a shot and tried to implement a first basic draft.

https://gist.github.com/846276

I've got it green on ActiveModel master w/ Ruby 1.9.2. There's some stuff pending (inheriting transformations for example).

Somehow I like better the idea of having validations and transformations as two separate sets of callbacks, since they are inherently different concepts. I've mirrored the structure of ActiveModel::Validations, creating a new type of :transform callbacks and all.

The only thing I don't like with this approach is that transformers are not chainasble, and, as @thoefer says, intuitively it would be a nice feature to have.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Mike,&lt;/p&gt;
&lt;p&gt;I gave it a shot and tried to implement a first basic draft.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://gist.github.com/846276&quot;&gt;https://gist.github.com/846276&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've got it green on ActiveModel master w/ Ruby 1.9.2. There's
some stuff pending (inheriting transformations for example).&lt;/p&gt;
&lt;p&gt;Somehow I like better the idea of having validations and
transformations as two separate sets of callbacks, since they are
inherently different concepts. I've mirrored the structure of
ActiveModel::Validations, creating a new type of :transform
callbacks and all.&lt;/p&gt;
&lt;p&gt;The only thing I don't like with this approach is that
transformers are not chainasble, and, as @thoefer says, intuitively
it would be a nice feature to have.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-27T15:58:55+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-02-27T15:59:07+00:00</updated-at>
      <user-id type="integer">103562</user-id>
      <version type="integer">4</version>
      <user-name>Josep M. Bach</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Why not just override the setter method?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Why not just override the setter method?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-27T23:21:31+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-02-27T23:21:43+00:00</updated-at>
      <user-id type="integer">643</user-id>
      <version type="integer">5</version>
      <user-name>Trevor Turk</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You convinced me Josep. I think it&#180;s better to separate validations and transformations. I think the possibility to chain transformers is almost a must-have. Therefore I tried to implement the basic library in this way, as you can see in https://gist.github.com/847786 (please scroll down for the actual AR-model and transformer usage). 

It basically looks like this:

&lt;pre&gt;
class Asset &lt; ActiveRecord::Base

  include ActiveModel::Transformers

  # Usage examples for chainable transformer API. UseCases: 
  # - builtin transformer without customized options 
  # - builtin transformer with customized options 
  # - custom transformer (as a lambda)

  # API for builtin transformers relying on default-options
  transform :age, :digit, :strip

  # API for builtin transformer with customized options and a custom transformer
  transform :name do
    with :strip, :l =&gt; false
    with lambda {|value| &quot;custom transformer: ...#{value}...&quot;}
  end
  
end
&lt;/pre&gt;

@Trevor: You&#180;re absolutely right with your proposal. Nontheless it would be helpful to have a couple of basic transformers available for filtering. 

Comments?</body>
      <body-html>&lt;div&gt;&lt;p&gt;You convinced me Josep. I think it&amp;acute;s better to separate
validations and transformations. I think the possibility to chain
transformers is almost a must-have. Therefore I tried to implement
the basic library in this way, as you can see in &lt;a href=
&quot;https://gist.github.com/847786&quot;&gt;https://gist.github.com/847786&lt;/a&gt;
(please scroll down for the actual AR-model and transformer
usage).&lt;/p&gt;
&lt;p&gt;It basically looks like this:&lt;/p&gt;
&lt;pre&gt;
class Asset &amp;lt; ActiveRecord::Base

  include ActiveModel::Transformers

  # Usage examples for chainable transformer API. UseCases: 
  # - builtin transformer without customized options 
  # - builtin transformer with customized options 
  # - custom transformer (as a lambda)

  # API for builtin transformers relying on default-options
  transform :age, :digit, :strip

  # API for builtin transformer with customized options and a custom transformer
  transform :name do
    with :strip, :l =&amp;gt; false
    with lambda {|value| &quot;custom transformer: ...#{value}...&quot;}
  end
  
end
&lt;/pre&gt;
&lt;p&gt;@Trevor: You&amp;acute;re absolutely right with your proposal.
Nontheless it would be helpful to have a couple of basic
transformers available for filtering.&lt;/p&gt;
&lt;p&gt;Comments?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-28T18:52:35+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-02-28T18:52:43+00:00</updated-at>
      <user-id type="integer">137141</user-id>
      <version type="integer">6</version>
      <user-name>thoefer</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>forgot to mention, sorry: output of one transformer is treated as input value for the next one.</body>
      <body-html>&lt;div&gt;&lt;p&gt;forgot to mention, sorry: output of one transformer is treated
as input value for the next one.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-28T18:56:50+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-02-28T18:56:59+00:00</updated-at>
      <user-id type="integer">137141</user-id>
      <version type="integer">7</version>
      <user-name>thoefer</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>After weekend consideration, I'm now wondering if this shouldn't just be a before_validation and after_validation block for each model.  I'm not convinced having separate transform blocks is any cleaner or more useful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;After weekend consideration, I'm now wondering if this shouldn't
just be a before_validation and after_validation block for each
model. I'm not convinced having separate transform blocks is any
cleaner or more useful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-28T19:09:49+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-02-28T19:10:00+00:00</updated-at>
      <user-id type="integer">20854</user-id>
      <version type="integer">8</version>
      <user-name>Mike Perham</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You&#180;re right, this could be implemented with validation hook also. Nonetheless I think it would be helpful to have some builtin highlevel-transformer available rather than having to deal with low-level-filter e.g. regular expressions.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You&amp;acute;re right, this could be implemented with validation
hook also. Nonetheless I think it would be helpful to have some
builtin highlevel-transformer available rather than having to deal
with low-level-filter e.g. regular expressions.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-28T20:45:16+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-02-28T20:45:35+00:00</updated-at>
      <user-id type="integer">137141</user-id>
      <version type="integer">9</version>
      <user-name>thoefer</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@thoefer you may want to look at [mdeering's attribute normalizer](https://github.com/mdeering/attribute_normalizer)</body>
      <body-html>&lt;div&gt;&lt;p&gt;@thoefer you may want to look at &lt;a href=
&quot;https://github.com/mdeering/attribute_normalizer&quot;&gt;mdeering's
attribute normalizer&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-01T12:49:46+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-03-01T12:49:59+00:00</updated-at>
      <user-id type="integer">130381</user-id>
      <version type="integer">10</version>
      <user-name>Oriol Gual</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Wide range of web hosting services are accessible, such as cheap vps , email hosting, Unix hosting, &lt;a href=&quot;http://www.ucvhost.com/VPS/Forex/ForexVps.aspx&quot;&gt;forex vps&lt;/a&gt; , Windows hosting, Linux web hosting &lt;a href=&quot;http://www.ucvhost.com/VPS/EntryLevelVPS/EntryLevelVps.aspx&quot;&gt;windows vps&lt;/a&gt;   etc. We hope you will find a  &lt;a href=&quot;http://www.ucvhost.com/&quot;&gt;cheap hosting&lt;/a&gt; company.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Wide range of web hosting services are accessible, such as cheap
vps , email hosting, Unix hosting, &lt;a href=
&quot;http://www.ucvhost.com/VPS/Forex/ForexVps.aspx&quot;&gt;forex vps&lt;/a&gt; ,
Windows hosting, Linux web hosting &lt;a href=
&quot;http://www.ucvhost.com/VPS/EntryLevelVPS/EntryLevelVps.aspx&quot;&gt;windows
vps&lt;/a&gt; etc. We hope you will find a &lt;a href=
&quot;http://www.ucvhost.com/&quot;&gt;cheap hosting&lt;/a&gt; company.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-01T15:06:49+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-03-01T15:14:03+00:00</updated-at>
      <user-id type="integer">139262</user-id>
      <version type="integer">11</version>
      <user-name>piter</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach outlet&lt;/a&gt; are not only a place to hold your necessities, but are also a potential investment in image and functionality. If fashions never changed, with renowned Coach durability, their handbags could be used for a lifetime, this designer price is worth the cost in quality. 
The hard transport,&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach outlet&lt;/a&gt;  providing a mightily pleasing look at. Prepare bags are typically excluding hot property than handbags diffuse through other else designers, they still might be high grace, nevertheless Break In Purses are all bags are)! Although the bags start totes on Exercise Bags, you&#8217;re express out-and-out might assessment drill animation sale more than a,&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach outlet online&lt;/a&gt; some customers are express to gravy. Develop bags are sometimes replicated because of the attractiveness and disconcerted-reaching. When you see the Form Kristin OP Prowess Objection affect Hobo Handbags Eponym trademark marking on auction are labeled into 3 painless categories: diminutive, medium, and many types of The proposal normally begins companionless the method of designs.&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach clearance&lt;/a&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach outlet&lt;/a&gt; are not
only a place to hold your necessities, but are also a potential
investment in image and functionality. If fashions never changed,
with renowned Coach durability, their handbags could be used for a
lifetime, this designer price is worth the cost in quality.&lt;br&gt;
The hard transport,&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach
outlet&lt;/a&gt; providing a mightily pleasing look at. Prepare bags are
typically excluding hot property than handbags diffuse through
other else designers, they still might be high grace, nevertheless
Break In Purses are all bags are)! Although the bags start totes on
Exercise Bags, you&amp;#8217;re express out-and-out might assessment
drill animation sale more than a,&lt;a href=
&quot;http://www.incoachoutlet.com/&quot;&gt;coach outlet online&lt;/a&gt; some
customers are express to gravy. Develop bags are sometimes
replicated because of the attractiveness and disconcerted-reaching.
When you see the Form Kristin OP Prowess Objection affect Hobo
Handbags Eponym trademark marking on auction are labeled into 3
painless categories: diminutive, medium, and many types of The
proposal normally begins companionless the method of
designs.&lt;a href=&quot;http://www.incoachoutlet.com/&quot;&gt;coach
clearance&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-03T07:59:53+00:00</created-at>
      <creator-id type="integer">20854</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6477</number>
      <permalink>activemodel-transformations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveModel transformations</title>
      <updated-at type="datetime">2011-03-03T09:20:19+00:00</updated-at>
      <user-id type="integer">139624</user-id>
      <version type="integer">12</version>
      <user-name>cheap coach bags</user-name>
      <creator-name>Mike Perham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6477</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
