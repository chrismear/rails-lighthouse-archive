<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-08T03:47:32+00:00</created-at>
  <creator-id type="integer">22033</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6543</number>
  <permalink>chaining-named-scopes-executes-an-unnecessary-query</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>named_scope</tag>
  <title>Chaining named scopes executes an unnecessary query.</title>
  <updated-at type="datetime">2011-03-08T03:47:36+00:00</updated-at>
  <user-id type="integer">22033</user-id>
  <version type="integer">1</version>
  <user-name>Ben Johnson</user-name>
  <creator-name>Ben Johnson</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6543</url>
  <priority-name nil="true"></priority-name>
  <original-body>I found a rather serious problem with named scopes in ActiveRecord 2.3.X. After analyzing my logs I noticed that chaining named scopes actually executes extra unscoped queries along the way. Which is a big deal, especially if they are loading thousands of records.

The fix is actually very easy, but it involved removing code, and I have no idea what the purpose of the code is. Take the original method:


  def named_scope(name, options = {}, &amp;block)
    name = name.to_sym

    scopes[name] = lambda do |parent_scope, *args|
      Scope.new(parent_scope, case options
        when Hash
          options
        when Proc
          if self.model_name != parent_scope.model_name
            options.bind(parent_scope).call(*args)
          else
            options.call(*args)
          end
      end, &amp;block)
    end

    singleton_class.send :define_method, name do |*args|
      scopes[name].call(self, *args)
    end
  end

Notice this line:

  if self.model_name != parent_scope.model_name

The &quot;parent_scope.model_name&quot; actually executes a query, because parent scope can be a proxy that delegates its method calls off to the query result. So doing something like:

  user = User.first
  user.orders.state_equals(&quot;pending&quot;).total_greater_than(100).count

The last line should execute a single &quot;count&quot; query. Instead, because of line mentioned above, it actually executes a &quot;select all&quot; for the users orders with state &quot;pending&quot;. Then it executes the count query.

The fix ix very easy. Change this:

  if self.model_name != parent_scope.model_name
    options.bind(parent_scope).call(*args)
  else
    options.call(*args)
  end

To this:

  if self.model_name != parent_scope.model_name
    options.bind(parent_scope).call(*args)
  else
    options.call(*args)
  end

Again, I have no idea what the line in question does. Hence the reason I didn't create a pull request on github.</original-body>
  <latest-body>I found a rather serious problem with named scopes in ActiveRecord 2.3.X. After analyzing my logs I noticed that chaining named scopes actually executes extra unscoped queries along the way. Which is a big deal, especially if they are loading thousands of records.

The fix is actually very easy, but it involved removing code, and I have no idea what the purpose of the code is. Take the original method:


  def named_scope(name, options = {}, &amp;block)
    name = name.to_sym

    scopes[name] = lambda do |parent_scope, *args|
      Scope.new(parent_scope, case options
        when Hash
          options
        when Proc
          if self.model_name != parent_scope.model_name
            options.bind(parent_scope).call(*args)
          else
            options.call(*args)
          end
      end, &amp;block)
    end

    singleton_class.send :define_method, name do |*args|
      scopes[name].call(self, *args)
    end
  end

Notice this line:

  if self.model_name != parent_scope.model_name

The &quot;parent_scope.model_name&quot; actually executes a query, because parent scope can be a proxy that delegates its method calls off to the query result. So doing something like:

  user = User.first
  user.orders.state_equals(&quot;pending&quot;).total_greater_than(100).count

The last line should execute a single &quot;count&quot; query. Instead, because of line mentioned above, it actually executes a &quot;select all&quot; for the users orders with state &quot;pending&quot;. Then it executes the count query.

The fix ix very easy. Change this:

  if self.model_name != parent_scope.model_name
    options.bind(parent_scope).call(*args)
  else
    options.call(*args)
  end

To this:

  if self.model_name != parent_scope.model_name
    options.bind(parent_scope).call(*args)
  else
    options.call(*args)
  end

Again, I have no idea what the line in question does. Hence the reason I didn't create a pull request on github.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I found a rather serious problem with named scopes in
ActiveRecord 2.3.X. After analyzing my logs I noticed that chaining
named scopes actually executes extra unscoped queries along the
way. Which is a big deal, especially if they are loading thousands
of records.&lt;/p&gt;
&lt;p&gt;The fix is actually very easy, but it involved removing code,
and I have no idea what the purpose of the code is. Take the
original method:&lt;/p&gt;
&lt;p&gt;def named_scope(name, options = {}, &amp;amp;block)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;name = name.to_sym

scopes[name] = lambda do |parent_scope, *args|
  Scope.new(parent_scope, case options
    when Hash
      options
    when Proc
      if self.model_name != parent_scope.model_name
        options.bind(parent_scope).call(*args)
      else
        options.call(*args)
      end
  end, &amp;amp;block)
end

singleton_class.send :define_method, name do |*args|
  scopes[name].call(self, *args)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;Notice this line:&lt;/p&gt;
&lt;p&gt;if self.model_name != parent_scope.model_name&lt;/p&gt;
&lt;p&gt;The &quot;parent_scope.model_name&quot; actually executes a query, because
parent scope can be a proxy that delegates its method calls off to
the query result. So doing something like:&lt;/p&gt;
&lt;p&gt;user = User.first
user.orders.state_equals(&quot;pending&quot;).total_greater_than(100).count&lt;/p&gt;
&lt;p&gt;The last line should execute a single &quot;count&quot; query. Instead,
because of line mentioned above, it actually executes a &quot;select
all&quot; for the users orders with state &quot;pending&quot;. Then it executes
the count query.&lt;/p&gt;
&lt;p&gt;The fix ix very easy. Change this:&lt;/p&gt;
&lt;p&gt;if self.model_name != parent_scope.model_name&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;options.bind(parent_scope).call(*args)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;options.call(*args)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;p&gt;if self.model_name != parent_scope.model_name&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;options.bind(parent_scope).call(*args)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;options.call(*args)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;Again, I have no idea what the line in question does. Hence the
reason I didn't create a pull request on github.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I found a rather serious problem with named scopes in ActiveRecord 2.3.X. After analyzing my logs I noticed that chaining named scopes actually executes extra unscoped queries along the way. Which is a big deal, especially if they are loading thousands of records.

The fix is actually very easy, but it involved removing code, and I have no idea what the purpose of the code is. Take the original method:


  def named_scope(name, options = {}, &amp;block)
    name = name.to_sym

    scopes[name] = lambda do |parent_scope, *args|
      Scope.new(parent_scope, case options
        when Hash
          options
        when Proc
          if self.model_name != parent_scope.model_name
            options.bind(parent_scope).call(*args)
          else
            options.call(*args)
          end
      end, &amp;block)
    end

    singleton_class.send :define_method, name do |*args|
      scopes[name].call(self, *args)
    end
  end

Notice this line:

  if self.model_name != parent_scope.model_name

The &quot;parent_scope.model_name&quot; actually executes a query, because parent scope can be a proxy that delegates its method calls off to the query result. So doing something like:

  user = User.first
  user.orders.state_equals(&quot;pending&quot;).total_greater_than(100).count

The last line should execute a single &quot;count&quot; query. Instead, because of line mentioned above, it actually executes a &quot;select all&quot; for the users orders with state &quot;pending&quot;. Then it executes the count query.

The fix ix very easy. Change this:

  if self.model_name != parent_scope.model_name
    options.bind(parent_scope).call(*args)
  else
    options.call(*args)
  end

To this:

  if self.model_name != parent_scope.model_name
    options.bind(parent_scope).call(*args)
  else
    options.call(*args)
  end

Again, I have no idea what the line in question does. Hence the reason I didn't create a pull request on github.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I found a rather serious problem with named scopes in
ActiveRecord 2.3.X. After analyzing my logs I noticed that chaining
named scopes actually executes extra unscoped queries along the
way. Which is a big deal, especially if they are loading thousands
of records.&lt;/p&gt;
&lt;p&gt;The fix is actually very easy, but it involved removing code,
and I have no idea what the purpose of the code is. Take the
original method:&lt;/p&gt;
&lt;p&gt;def named_scope(name, options = {}, &amp;amp;block)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;name = name.to_sym

scopes[name] = lambda do |parent_scope, *args|
  Scope.new(parent_scope, case options
    when Hash
      options
    when Proc
      if self.model_name != parent_scope.model_name
        options.bind(parent_scope).call(*args)
      else
        options.call(*args)
      end
  end, &amp;amp;block)
end

singleton_class.send :define_method, name do |*args|
  scopes[name].call(self, *args)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;Notice this line:&lt;/p&gt;
&lt;p&gt;if self.model_name != parent_scope.model_name&lt;/p&gt;
&lt;p&gt;The &quot;parent_scope.model_name&quot; actually executes a query, because
parent scope can be a proxy that delegates its method calls off to
the query result. So doing something like:&lt;/p&gt;
&lt;p&gt;user = User.first
user.orders.state_equals(&quot;pending&quot;).total_greater_than(100).count&lt;/p&gt;
&lt;p&gt;The last line should execute a single &quot;count&quot; query. Instead,
because of line mentioned above, it actually executes a &quot;select
all&quot; for the users orders with state &quot;pending&quot;. Then it executes
the count query.&lt;/p&gt;
&lt;p&gt;The fix ix very easy. Change this:&lt;/p&gt;
&lt;p&gt;if self.model_name != parent_scope.model_name&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;options.bind(parent_scope).call(*args)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;options.call(*args)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;p&gt;if self.model_name != parent_scope.model_name&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;options.bind(parent_scope).call(*args)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;options.call(*args)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;Again, I have no idea what the line in question does. Hence the
reason I didn't create a pull request on github.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-08T03:47:32+00:00</created-at>
      <creator-id type="integer">22033</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6543</number>
      <permalink>chaining-named-scopes-executes-an-unnecessary-query</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>named_scope</tag>
      <title>Chaining named scopes executes an unnecessary query.</title>
      <updated-at type="datetime">2011-03-08T03:47:36+00:00</updated-at>
      <user-id type="integer">22033</user-id>
      <version type="integer">1</version>
      <user-name>Ben Johnson</user-name>
      <creator-name>Ben Johnson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6543</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
