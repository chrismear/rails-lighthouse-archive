<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2010-12-08T22:42:14+00:00</created-at>
  <creator-id type="integer">39039</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6136</number>
  <permalink>allow-dynamic-lists-with-validates_inclusion_of-in</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>validates_inclusion_of validations</tag>
  <title>Allow dynamic lists with validates_inclusion_of :in</title>
  <updated-at type="datetime">2011-03-09T00:06:35+00:00</updated-at>
  <user-id type="integer">39039</user-id>
  <version type="integer">4</version>
  <user-name>Paul Schreiber</user-name>
  <creator-name>Paul Schreiber</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6136</url>
  <priority-name nil="true"></priority-name>
  <original-body>Suppose you have a validation rule such as this:
 `validates_inclusion_of :foo, :in =&gt; [1,2,3]`

Currently, you can only pass a constant value to `:in`.

Suppose that the list of valid values changes. In that case, you have to resort to workarounds like this:

@@@ ruby
validate :validate_foo

def validate_foo
  unless my_foo_list.include?(foo)
    self.errors.add(:foo, I18n.t(&quot;activerecord.errors.models.bar.attributes.foo.inclusion&quot;))
  end
end
@@@
And you have to write this for every attribute in every model. I suppose you could do some trickery to refactor this, but it's still a lot of extra code that's not very DRY.

It would be nice if you could pass a symbol to `:in`, and have that symbol evaluated.

@@@ ruby
validates_inclusion_of :foo, :in =&gt; :valid_foo_values_list

def valid_foo_values_list
 if things?
   [1,2,3]
 else
   [4,5,6]
 end
end
@@@

In lib/active_record/validations.rb, in validates_inclusion_of, we have this call
`enum = configuration[:in] || configuration[:within]`

A simple would be to add this line:
`enum = self.send(enum) if enum.is_a?(Symbol)`

However, I suspect there are other implications.</original-body>
  <latest-body>Suppose you have a validation rule such as this:
 `validates_inclusion_of :foo, :in =&gt; [1,2,3]`

Currently, you can only pass a constant value to `:in`.

Suppose that the list of valid values changes. In that case, you have to resort to workarounds like this:

@@@ ruby
validate :validate_foo

def validate_foo
  unless my_foo_list.include?(foo)
    self.errors.add(:foo, I18n.t(&quot;activerecord.errors.models.bar.attributes.foo.inclusion&quot;))
  end
end
@@@
And you have to write this for every attribute in every model. I suppose you could do some trickery to refactor this, but it's still a lot of extra code that's not very DRY.

It would be nice if you could pass a symbol to `:in`, and have that symbol evaluated.

@@@ ruby
validates_inclusion_of :foo, :in =&gt; :valid_foo_values_list

def valid_foo_values_list
 if things?
   [1,2,3]
 else
   [4,5,6]
 end
end
@@@

In lib/active_record/validations.rb, in validates_inclusion_of, we have this call
`enum = configuration[:in] || configuration[:within]`

A simple would be to add this line:
`enum = self.send(enum) if enum.is_a?(Symbol)`

However, I suspect there are other implications.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Suppose you have a validation rule such as this:&lt;br&gt;
&lt;code&gt;validates_inclusion_of :foo, :in =&amp;gt; [1,2,3]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Currently, you can only pass a constant value to
&lt;code&gt;:in&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Suppose that the list of valid values changes. In that case, you
have to resort to workarounds like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;validate :validate_foo

def validate_foo
  unless my_foo_list.include?(foo)
    self.errors.add(:foo, I18n.t(&quot;activerecord.errors.models.bar.attributes.foo.inclusion&quot;))
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And you have to write this for every attribute in every model. I
suppose you could do some trickery to refactor this, but it's still
a lot of extra code that's not very DRY.&lt;/p&gt;
&lt;p&gt;It would be nice if you could pass a symbol to &lt;code&gt;:in&lt;/code&gt;,
and have that symbol evaluated.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;validates_inclusion_of :foo, :in =&amp;gt; :valid_foo_values_list

def valid_foo_values_list
 if things?
   [1,2,3]
 else
   [4,5,6]
 end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In lib/active_record/validations.rb, in validates_inclusion_of,
we have this call&lt;br&gt;
&lt;code&gt;enum = configuration[:in] ||
configuration[:within]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A simple would be to add this line:&lt;br&gt;
&lt;code&gt;enum = self.send(enum) if enum.is_a?(Symbol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, I suspect there are other implications.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Suppose you have a validation rule such as this:
 `validates_inclusion_of :foo, :in =&gt; [1,2,3]`

Currently, you can only pass a constant value to `:in`.

Suppose that the list of valid values changes. In that case, you have to resort to workarounds like this:

@@@ ruby
validate :validate_foo

def validate_foo
  unless my_foo_list.include?(foo)
    self.errors.add(:foo, I18n.t(&quot;activerecord.errors.models.bar.attributes.foo.inclusion&quot;))
  end
end
@@@
And you have to write this for every attribute in every model. I suppose you could do some trickery to refactor this, but it's still a lot of extra code that's not very DRY.

It would be nice if you could pass a symbol to `:in`, and have that symbol evaluated.

@@@ ruby
validates_inclusion_of :foo, :in =&gt; :valid_foo_values_list

def valid_foo_values_list
 if things?
   [1,2,3]
 else
   [4,5,6]
 end
end
@@@

In lib/active_record/validations.rb, in validates_inclusion_of, we have this call
`enum = configuration[:in] || configuration[:within]`

A simple would be to add this line:
`enum = self.send(enum) if enum.is_a?(Symbol)`

However, I suspect there are other implications.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Suppose you have a validation rule such as this:&lt;br&gt;
&lt;code&gt;validates_inclusion_of :foo, :in =&amp;gt; [1,2,3]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Currently, you can only pass a constant value to
&lt;code&gt;:in&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Suppose that the list of valid values changes. In that case, you
have to resort to workarounds like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;validate :validate_foo

def validate_foo
  unless my_foo_list.include?(foo)
    self.errors.add(:foo, I18n.t(&quot;activerecord.errors.models.bar.attributes.foo.inclusion&quot;))
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And you have to write this for every attribute in every model. I
suppose you could do some trickery to refactor this, but it's still
a lot of extra code that's not very DRY.&lt;/p&gt;
&lt;p&gt;It would be nice if you could pass a symbol to &lt;code&gt;:in&lt;/code&gt;,
and have that symbol evaluated.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;validates_inclusion_of :foo, :in =&amp;gt; :valid_foo_values_list

def valid_foo_values_list
 if things?
   [1,2,3]
 else
   [4,5,6]
 end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In lib/active_record/validations.rb, in validates_inclusion_of,
we have this call&lt;br&gt;
&lt;code&gt;enum = configuration[:in] ||
configuration[:within]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A simple would be to add this line:&lt;br&gt;
&lt;code&gt;enum = self.send(enum) if enum.is_a?(Symbol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, I suspect there are other implications.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-08T22:42:14+00:00</created-at>
      <creator-id type="integer">39039</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6136</number>
      <permalink>allow-dynamic-lists-with-validates_inclusion_of-in</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_inclusion_of validations</tag>
      <title>Allow dynamic lists with validates_inclusion_of :in</title>
      <updated-at type="datetime">2010-12-08T22:42:18+00:00</updated-at>
      <user-id type="integer">39039</user-id>
      <version type="integer">1</version>
      <user-name>Paul Schreiber</user-name>
      <creator-name>Paul Schreiber</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6136</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-09T00:00:12+00:00</created-at>
      <creator-id type="integer">39039</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6136</number>
      <permalink>allow-dynamic-lists-with-validates_inclusion_of-in</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>validates_inclusion_of validations</tag>
      <title>Allow dynamic lists with validates_inclusion_of :in</title>
      <updated-at type="datetime">2011-03-09T00:00:20+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">2</version>
      <user-name>rails</user-name>
      <creator-name>Paul Schreiber</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6136</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-09T00:00:12+00:00</created-at>
      <creator-id type="integer">39039</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6136</number>
      <permalink>allow-dynamic-lists-with-validates_inclusion_of-in</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>validates_inclusion_of validations</tag>
      <title>Allow dynamic lists with validates_inclusion_of :in</title>
      <updated-at type="datetime">2011-03-09T00:00:17+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Paul Schreiber</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6136</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[state:open].</body>
      <body-html>&lt;div&gt;&lt;p&gt;[state:open].&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-09T00:06:33+00:00</created-at>
      <creator-id type="integer">39039</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6136</number>
      <permalink>allow-dynamic-lists-with-validates_inclusion_of-in</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>validates_inclusion_of validations</tag>
      <title>Allow dynamic lists with validates_inclusion_of :in</title>
      <updated-at type="datetime">2011-03-09T00:06:35+00:00</updated-at>
      <user-id type="integer">39039</user-id>
      <version type="integer">4</version>
      <user-name>Paul Schreiber</user-name>
      <creator-name>Paul Schreiber</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6136</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
