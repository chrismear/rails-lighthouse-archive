<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-22T13:28:38+00:00</created-at>
  <creator-id type="integer">9958</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2310</number>
  <permalink>has_many-through-scope-empty-fails-in-232-but-not-230</permalink>
  <priority type="integer">1482</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>2.3.2 activerecord bug regression</tag>
  <title>has_many :through + scope + empty? fails in 2.3.2 (but not 2.3.0)</title>
  <updated-at type="datetime">2010-04-16T01:25:00+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">8</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Henrik Nyh</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2310</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>A Post has_many Tags through Taggings.

Tag has this named scope:
@@@ ruby
named_scope :by_name, { :order =&gt; 'name ASC' }
@@@

In Rails 2.2.2 and 2.3.0, this worked fine:
@@@ ruby
a_post.tags.by_name.empty?
@@@
It generates a query like
@@@ sql
SELECT count(*) AS count_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE ((`taggings`.post_id = 881129040)) 
@@@

In Rails 2.3.2, it breaks:
@@@
  SQL (0.0ms)   Mysql::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`' at line 1: SELECT count(`tags`.*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE (((`taggings`.post_id = 881129040)) AND ((`taggings`.post_id = 881129040))) 
@@@
The (invalid) query generated here is
@@@ sql
SELECT count(`tags`.*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE (((`taggings`.post_id = 881129040)) AND ((`taggings`.post_id = 881129040)))
@@@

I'm sorry I don't have more details or a failing spec yet. Figured I'd report the issue for now, and possibly dig into later.</original-body>
  <latest-body>A Post has_many Tags through Taggings.

Tag has this named scope:
@@@ ruby
named_scope :by_name, { :order =&gt; 'name ASC' }
@@@

In Rails 2.2.2 and 2.3.0, this worked fine:
@@@ ruby
a_post.tags.by_name.empty?
@@@
It generates a query like
@@@ sql
SELECT count(*) AS count_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE ((`taggings`.post_id = 881129040)) 
@@@

In Rails 2.3.2, it breaks:
@@@
  SQL (0.0ms)   Mysql::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`' at line 1: SELECT count(`tags`.*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE (((`taggings`.post_id = 881129040)) AND ((`taggings`.post_id = 881129040))) 
@@@
The (invalid) query generated here is
@@@ sql
SELECT count(`tags`.*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE (((`taggings`.post_id = 881129040)) AND ((`taggings`.post_id = 881129040)))
@@@

I'm sorry I don't have more details or a failing spec yet. Figured I'd report the issue for now, and possibly dig into later.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;A Post has_many Tags through Taggings.&lt;/p&gt;
&lt;p&gt;Tag has this named scope:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
named_scope :by_name, { :order =&amp;gt; 'name ASC' }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rails 2.2.2 and 2.3.0, this worked fine:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
a_post.tags.by_name.empty?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It generates a query like&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT count(*) AS count_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE ((`taggings`.post_id = 881129040)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rails 2.3.2, it breaks:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
  SQL (0.0ms)   Mysql::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`' at line 1: SELECT count(`tags`.*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE (((`taggings`.post_id = 881129040)) AND ((`taggings`.post_id = 881129040))) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The (invalid) query generated here is&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT count(`tags`.*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE (((`taggings`.post_id = 881129040)) AND ((`taggings`.post_id = 881129040)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'm sorry I don't have more details or a failing spec yet.
Figured I'd report the issue for now, and possibly dig into
later.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A Post has_many Tags through Taggings.

Tag has this named scope:
@@@ ruby
named_scope :by_name, { :order =&gt; 'name ASC' }
@@@

In Rails 2.2.2 and 2.3.0, this worked fine:
@@@ ruby
a_post.tags.by_name.empty?
@@@
It generates a query like
@@@ sql
SELECT count(*) AS count_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE ((`taggings`.post_id = 881129040)) 
@@@

In Rails 2.3.2, it breaks:
@@@
  SQL (0.0ms)   Mysql::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`' at line 1: SELECT count(`tags`.*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE (((`taggings`.post_id = 881129040)) AND ((`taggings`.post_id = 881129040))) 
@@@
The (invalid) query generated here is
@@@ sql
SELECT count(`tags`.*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE (((`taggings`.post_id = 881129040)) AND ((`taggings`.post_id = 881129040)))
@@@

I'm sorry I don't have more details or a failing spec yet. Figured I'd report the issue for now, and possibly dig into later.</body>
      <body-html>&lt;div&gt;&lt;p&gt;A Post has_many Tags through Taggings.&lt;/p&gt;
&lt;p&gt;Tag has this named scope:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
named_scope :by_name, { :order =&amp;gt; 'name ASC' }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rails 2.2.2 and 2.3.0, this worked fine:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
a_post.tags.by_name.empty?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It generates a query like&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT count(*) AS count_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE ((`taggings`.post_id = 881129040)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rails 2.3.2, it breaks:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
  SQL (0.0ms)   Mysql::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`' at line 1: SELECT count(`tags`.*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE (((`taggings`.post_id = 881129040)) AND ((`taggings`.post_id = 881129040))) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The (invalid) query generated here is&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT count(`tags`.*) AS count_tags_all FROM `tags` INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id WHERE (((`taggings`.post_id = 881129040)) AND ((`taggings`.post_id = 881129040)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'm sorry I don't have more details or a failing spec yet.
Figured I'd report the issue for now, and possibly dig into
later.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-22T13:28:38+00:00</created-at>
      <creator-id type="integer">9958</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2310</number>
      <permalink>has_many-through-scope-empty-fails-in-232-but-not-230</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord bug regression</tag>
      <title>has_many :through + scope + empty? fails in 2.3.2 (but not 2.3.0)</title>
      <updated-at type="datetime">2009-03-22T13:28:42+00:00</updated-at>
      <user-id type="integer">9958</user-id>
      <version type="integer">1</version>
      <user-name>Henrik Nyh</user-name>
      <creator-name>Henrik Nyh</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2310</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Probably related:

@@@ ruby
p = Post.last
t = Tag.last
p.tags &lt;&lt; t
@@@
gives
@@@
ActiveRecord::StatementInvalid: Mysql::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) AS count_posts_all FROM `posts` INNER JOIN `taggings` ON `posts`.id = `taggin' at line 1: SELECT count(`posts`.*) AS count_posts_all FROM `posts` INNER JOIN `taggings` ON `posts`.id = `taggings`.post_id WHERE (((posts.published_at IS NOT NULL) AND ((`taggings`.tag_id = 834120776))) AND ((`taggings`.tag_id = 834120776))) 
@@@
Where the invalid query is
@@@ sql
SELECT count(`posts`.*) AS count_posts_all FROM `posts` INNER JOIN `taggings` ON `posts`.id = `taggings`.post_id WHERE (((posts.published_at IS NOT NULL) AND ((`taggings`.tag_id = 834120776))) AND ((`taggings`.tag_id = 834120776))) 
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Probably related:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
p = Post.last
t = Tag.last
p.tags &amp;lt;&amp;lt; t
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gives&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
ActiveRecord::StatementInvalid: Mysql::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) AS count_posts_all FROM `posts` INNER JOIN `taggings` ON `posts`.id = `taggin' at line 1: SELECT count(`posts`.*) AS count_posts_all FROM `posts` INNER JOIN `taggings` ON `posts`.id = `taggings`.post_id WHERE (((posts.published_at IS NOT NULL) AND ((`taggings`.tag_id = 834120776))) AND ((`taggings`.tag_id = 834120776))) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where the invalid query is&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT count(`posts`.*) AS count_posts_all FROM `posts` INNER JOIN `taggings` ON `posts`.id = `taggings`.post_id WHERE (((posts.published_at IS NOT NULL) AND ((`taggings`.tag_id = 834120776))) AND ((`taggings`.tag_id = 834120776))) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-22T14:02:32+00:00</created-at>
      <creator-id type="integer">9958</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2310</number>
      <permalink>has_many-through-scope-empty-fails-in-232-but-not-230</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord bug regression</tag>
      <title>has_many :through + scope + empty? fails in 2.3.2 (but not 2.3.0)</title>
      <updated-at type="datetime">2009-03-22T14:02:35+00:00</updated-at>
      <user-id type="integer">9958</user-id>
      <version type="integer">2</version>
      <user-name>Henrik Nyh</user-name>
      <creator-name>Henrik Nyh</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2310</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm having the exact same problem. :/</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm having the exact same problem. :/&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-24T02:03:14+00:00</created-at>
      <creator-id type="integer">9958</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2310</number>
      <permalink>has_many-through-scope-empty-fails-in-232-but-not-230</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord bug regression</tag>
      <title>has_many :through + scope + empty? fails in 2.3.2 (but not 2.3.0)</title>
      <updated-at type="datetime">2009-03-24T02:03:16+00:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">3</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Henrik Nyh</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2310</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This bug was introduced by commit 6543426... Ensure calculations respect scoped :select [#1334 state:resolved]</body>
      <body-html>&lt;div&gt;&lt;p&gt;This bug was introduced by commit 6543426... Ensure calculations
respect scoped :select [&lt;a href=&quot;/projects/8994/tickets/1334&quot; title=&quot;Ticket #1334&quot;&gt;#1334&lt;/a&gt; state:resolved]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-26T16:03:50+00:00</created-at>
      <creator-id type="integer">9958</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2310</number>
      <permalink>has_many-through-scope-empty-fails-in-232-but-not-230</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord bug regression</tag>
      <title>has_many :through + scope + empty? fails in 2.3.2 (but not 2.3.0)</title>
      <updated-at type="datetime">2009-03-26T16:03:53+00:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">4</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Henrik Nyh</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2310</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>uh. that was not supposed to change the state. wonder if this will change it back: [#2310 state:new]</body>
      <body-html>&lt;div&gt;&lt;p&gt;uh. that was not supposed to change the state. wonder if this
will change it back: [&lt;a href=&quot;/projects/8994/tickets/2310&quot; title=&quot;Ticket #2310&quot;&gt;#2310&lt;/a&gt; state:new]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-26T16:05:27+00:00</created-at>
      <creator-id type="integer">9958</creator-id>
      <diffable-attributes type="yaml">--- 
:state: resolved
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2310</number>
      <permalink>has_many-through-scope-empty-fails-in-232-but-not-230</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord bug regression</tag>
      <title>has_many :through + scope + empty? fails in 2.3.2 (but not 2.3.0)</title>
      <updated-at type="datetime">2009-03-26T16:05:29+00:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">5</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Henrik Nyh</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2310</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>this is the same problem referenced in #2189</body>
      <body-html>&lt;div&gt;&lt;p&gt;this is the same problem referenced in &lt;a href=&quot;/projects/8994/tickets/2189&quot; title=&quot;Ticket #2189&quot;&gt;#2189&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-26T16:12:07+00:00</created-at>
      <creator-id type="integer">9958</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2310</number>
      <permalink>has_many-through-scope-empty-fails-in-232-but-not-230</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord bug regression</tag>
      <title>has_many :through + scope + empty? fails in 2.3.2 (but not 2.3.0)</title>
      <updated-at type="datetime">2009-03-26T16:12:09+00:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">6</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Henrik Nyh</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2310</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>duplicates #2189, can be marked as duplicate</body>
      <body-html>&lt;div&gt;&lt;p&gt;duplicates &lt;a href=&quot;/projects/8994/tickets/2189&quot; title=
&quot;Ticket #2189&quot;&gt;#2189&lt;/a&gt;, can be marked as duplicate&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-15T23:53:04+01:00</created-at>
      <creator-id type="integer">9958</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2310</number>
      <permalink>has_many-through-scope-empty-fails-in-232-but-not-230</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord bug regression</tag>
      <title>has_many :through + scope + empty? fails in 2.3.2 (but not 2.3.0)</title>
      <updated-at type="datetime">2010-04-15T23:53:12+01:00</updated-at>
      <user-id type="integer">65576</user-id>
      <version type="integer">7</version>
      <user-name>Steve St. Martin</user-name>
      <creator-name>Henrik Nyh</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2310</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-16T01:24:58+01:00</created-at>
      <creator-id type="integer">9958</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2310</number>
      <permalink>has_many-through-scope-empty-fails-in-232-but-not-230</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>2.3.2 activerecord bug regression</tag>
      <title>has_many :through + scope + empty? fails in 2.3.2 (but not 2.3.0)</title>
      <updated-at type="datetime">2010-04-16T01:25:00+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">8</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Henrik Nyh</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2310</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
