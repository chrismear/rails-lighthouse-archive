<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-03T16:43:01+00:00</created-at>
  <creator-id type="integer">8730</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1321</number>
  <permalink>treat-new-records-with-equivalent-attributes-as-equivalent</permalink>
  <priority type="integer">723</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>patch testing</tag>
  <title>treat new records with equivalent attributes as equivalent (==)</title>
  <updated-at type="datetime">2009-03-06T17:44:12+00:00</updated-at>
  <user-id type="integer">7315</user-id>
  <version type="integer">4</version>
  <user-name>David Chelimsky</user-name>
  <creator-name>David Chelimsky</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1321</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>If I want to specify that the 'new' action in my AccountsController assigns a new Account to @account, I'd instinctively do this:

@@@
get :new
assigns[:account].should == Account.new
@@@

and expect this controller code to pass that code example:

@@@
def new
  @account = Account.new
end
@@@

But this fails because ActiveRecord::Base doesn't treat new records as equivalent (==), regardless of the values of their attributes.

@@@
$ script/console
$ Account.new == Account.new
=&gt; false
$ Role.new(:name =&gt; 'admin') == Role.new(:name =&gt; 'admin')
=&gt; false
@@@

This means that the simple example above has to be more complex. Here's the solution I see most often (in my code and in others, regardless of testing and mocking frameworks used):

@@@
account = Account.new
Account.should_receive(:new).and(account)
get :new
assigns[:account].should == account
@@@

I think a reasonable approach would be to treat new records as equivalent (==) as long as they are both new records and have equivalent attributes (self.attributes == other.attributes).

This would make all of my rspec code examples much, much, much cleaner and less brittle, and I'm quite sure I'm not alone.

Now I'll admit that changing the meaning of == might seem to pose significant risk, but I made the change and the activerecord unittest suite still passes. The change only affects new records, and I can't imagine there would be many, if any, cases where application code would actually behave differently due to this change.

But that's just me :) I'm sure I'm not thinking of something.

In any case, solution can be found at http://github.com/dchelimsky/rails/commit/03be4832e22f9ec45d10e18e55e6c06c83dbe983.</original-body>
  <latest-body>If I want to specify that the 'new' action in my AccountsController assigns a new Account to @account, I'd instinctively do this:

@@@
get :new
assigns[:account].should == Account.new
@@@

and expect this controller code to pass that code example:

@@@
def new
  @account = Account.new
end
@@@

But this fails because ActiveRecord::Base doesn't treat new records as equivalent (==), regardless of the values of their attributes.

@@@
$ script/console
$ Account.new == Account.new
=&gt; false
$ Role.new(:name =&gt; 'admin') == Role.new(:name =&gt; 'admin')
=&gt; false
@@@

This means that the simple example above has to be more complex. Here's the solution I see most often (in my code and in others, regardless of testing and mocking frameworks used):

@@@
account = Account.new
Account.should_receive(:new).and(account)
get :new
assigns[:account].should == account
@@@

I think a reasonable approach would be to treat new records as equivalent (==) as long as they are both new records and have equivalent attributes (self.attributes == other.attributes).

This would make all of my rspec code examples much, much, much cleaner and less brittle, and I'm quite sure I'm not alone.

Now I'll admit that changing the meaning of == might seem to pose significant risk, but I made the change and the activerecord unittest suite still passes. The change only affects new records, and I can't imagine there would be many, if any, cases where application code would actually behave differently due to this change.

But that's just me :) I'm sure I'm not thinking of something.

In any case, solution can be found at http://github.com/dchelimsky/rails/commit/03be4832e22f9ec45d10e18e55e6c06c83dbe983.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If I want to specify that the 'new' action in my
AccountsController assigns a new Account to @account, I'd
instinctively do this:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
get :new
assigns[:account].should == Account.new
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and expect this controller code to pass that code example:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
def new
  @account = Account.new
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this fails because ActiveRecord::Base doesn't treat new
records as equivalent (==), regardless of the values of their
attributes.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
$ script/console
$ Account.new == Account.new
=&amp;gt; false
$ Role.new(:name =&amp;gt; 'admin') == Role.new(:name =&amp;gt; 'admin')
=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that the simple example above has to be more complex.
Here's the solution I see most often (in my code and in others,
regardless of testing and mocking frameworks used):&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
account = Account.new
Account.should_receive(:new).and(account)
get :new
assigns[:account].should == account
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think a reasonable approach would be to treat new records as
equivalent (==) as long as they are both new records and have
equivalent attributes (self.attributes == other.attributes).&lt;/p&gt;
&lt;p&gt;This would make all of my rspec code examples much, much, much
cleaner and less brittle, and I'm quite sure I'm not alone.&lt;/p&gt;
&lt;p&gt;Now I'll admit that changing the meaning of == might seem to
pose significant risk, but I made the change and the activerecord
unittest suite still passes. The change only affects new records,
and I can't imagine there would be many, if any, cases where
application code would actually behave differently due to this
change.&lt;/p&gt;
&lt;p&gt;But that's just me :) I'm sure I'm not thinking of
something.&lt;/p&gt;
&lt;p&gt;In any case, solution can be found at &lt;a href=&quot;http://github.com/dchelimsky/rails/commit/03be4832e22f9ec45d10e18e55e6c06c83dbe983.%3C/p&quot;&gt;
http://github.com/dchelimsky/rai...&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If I want to specify that the 'new' action in my AccountsController assigns a new Account to @account, I'd instinctively do this:

@@@
get :new
assigns[:account].should == Account.new
@@@

and expect this controller code to pass that code example:

@@@
def new
  @account = Account.new
end
@@@

But this fails because ActiveRecord::Base doesn't treat new records as equivalent (==), regardless of the values of their attributes.

@@@
$ script/console
$ Account.new == Account.new
=&gt; false
$ Role.new(:name =&gt; 'admin') == Role.new(:name =&gt; 'admin')
=&gt; false
@@@

This means that the simple example above has to be more complex. Here's the solution I see most often (in my code and in others, regardless of testing and mocking frameworks used):

@@@
account = Account.new
Account.should_receive(:new).and(account)
get :new
assigns[:account].should == account
@@@

I think a reasonable approach would be to treat new records as equivalent (==) as long as they are both new records and have equivalent attributes (self.attributes == other.attributes).

This would make all of my rspec code examples much, much, much cleaner and less brittle, and I'm quite sure I'm not alone.

Now I'll admit that changing the meaning of == might seem to pose significant risk, but I made the change and the activerecord unittest suite still passes. The change only affects new records, and I can't imagine there would be many, if any, cases where application code would actually behave differently due to this change.

But that's just me :) I'm sure I'm not thinking of something.

In any case, solution can be found at http://github.com/dchelimsky/rails/commit/03be4832e22f9ec45d10e18e55e6c06c83dbe983.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If I want to specify that the 'new' action in my
AccountsController assigns a new Account to @account, I'd
instinctively do this:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
get :new
assigns[:account].should == Account.new
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and expect this controller code to pass that code example:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
def new
  @account = Account.new
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this fails because ActiveRecord::Base doesn't treat new
records as equivalent (==), regardless of the values of their
attributes.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
$ script/console
$ Account.new == Account.new
=&amp;gt; false
$ Role.new(:name =&amp;gt; 'admin') == Role.new(:name =&amp;gt; 'admin')
=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that the simple example above has to be more complex.
Here's the solution I see most often (in my code and in others,
regardless of testing and mocking frameworks used):&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
account = Account.new
Account.should_receive(:new).and(account)
get :new
assigns[:account].should == account
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think a reasonable approach would be to treat new records as
equivalent (==) as long as they are both new records and have
equivalent attributes (self.attributes == other.attributes).&lt;/p&gt;
&lt;p&gt;This would make all of my rspec code examples much, much, much
cleaner and less brittle, and I'm quite sure I'm not alone.&lt;/p&gt;
&lt;p&gt;Now I'll admit that changing the meaning of == might seem to
pose significant risk, but I made the change and the activerecord
unittest suite still passes. The change only affects new records,
and I can't imagine there would be many, if any, cases where
application code would actually behave differently due to this
change.&lt;/p&gt;
&lt;p&gt;But that's just me :) I'm sure I'm not thinking of
something.&lt;/p&gt;
&lt;p&gt;In any case, solution can be found at &lt;a href=&quot;http://github.com/dchelimsky/rails/commit/03be4832e22f9ec45d10e18e55e6c06c83dbe983.%3C/p&quot;&gt;
http://github.com/dchelimsky/rai...&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-03T16:43:01+00:00</created-at>
      <creator-id type="integer">8730</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1321</number>
      <permalink>treat-new-records-with-equivalent-attributes-as-equivalent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch testing</tag>
      <title>treat new records with equivalent attributes as equivalent (==)</title>
      <updated-at type="datetime">2008-11-03T16:43:02+00:00</updated-at>
      <user-id type="integer">8730</user-id>
      <version type="integer">1</version>
      <user-name>David Chelimsky</user-name>
      <creator-name>David Chelimsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1321</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That link should be http://github.com/dchelimsky/rails/commit/03be4832e22f9ec45d10e18e55e6c06c83dbe983</body>
      <body-html>&lt;div&gt;&lt;p&gt;That link should be &lt;a href=&quot;http://github.com/dchelimsky/rails/commit/03be4832e22f9ec45d10e18e55e6c06c83dbe983&quot;&gt;
http://github.com/dchelimsky/rai...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-03T18:16:41+00:00</created-at>
      <creator-id type="integer">8730</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1321</number>
      <permalink>treat-new-records-with-equivalent-attributes-as-equivalent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch testing</tag>
      <title>treat new records with equivalent attributes as equivalent (==)</title>
      <updated-at type="datetime">2008-11-03T18:16:42+00:00</updated-at>
      <user-id type="integer">8730</user-id>
      <version type="integer">2</version>
      <user-name>David Chelimsky</user-name>
      <creator-name>David Chelimsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1321</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think the present behaviour is expected. The relevant commit is - http://github.com/rails/rails/commit/0faca07056e2dd6284d79522614cb991a680d5d0</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think the present behaviour is expected. The relevant commit
is - &lt;a href=&quot;http://github.com/rails/rails/commit/0faca07056e2dd6284d79522614cb991a680d5d0&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-06T17:20:27+00:00</created-at>
      <creator-id type="integer">8730</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1321</number>
      <permalink>treat-new-records-with-equivalent-attributes-as-equivalent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>patch testing</tag>
      <title>treat new records with equivalent attributes as equivalent (==)</title>
      <updated-at type="datetime">2009-03-06T17:20:31+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>David Chelimsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1321</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Understood that this is unlikely to change. Agreed that it's the tested, and expected behaviour, but that doesn't make it right. The fact that MyModel.new != MyModel.new makes it harder for me to test my controllers in isolation (stubbing out the model). So its a somewhat developer-unfriendly choice, which is the opposite of what I believe to be the rails ethos. FWIW. I don't expect that to change any minds.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Understood that this is unlikely to change. Agreed that it's the
tested, and expected behaviour, but that doesn't make it right. The
fact that MyModel.new != MyModel.new makes it harder for me to test
my controllers in isolation (stubbing out the model). So its a
somewhat developer-unfriendly choice, which is the opposite of what
I believe to be the rails ethos. FWIW. I don't expect that to
change any minds.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-06T17:44:07+00:00</created-at>
      <creator-id type="integer">8730</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1321</number>
      <permalink>treat-new-records-with-equivalent-attributes-as-equivalent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>patch testing</tag>
      <title>treat new records with equivalent attributes as equivalent (==)</title>
      <updated-at type="datetime">2009-03-06T17:44:12+00:00</updated-at>
      <user-id type="integer">7315</user-id>
      <version type="integer">4</version>
      <user-name>David Chelimsky</user-name>
      <creator-name>David Chelimsky</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1321</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
