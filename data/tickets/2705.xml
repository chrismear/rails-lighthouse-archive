<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-02T06:40:54+00:00</created-at>
  <creator-id type="integer">8964</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2705</number>
  <permalink>deprecate-attr_accessible-attr_protected</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>3.0 active_record patch tested testing tests</tag>
  <title>deprecate attr_accessible, attr_protected</title>
  <updated-at type="datetime">2010-12-02T06:40:54+00:00</updated-at>
  <user-id type="integer">8964</user-id>
  <version type="integer">3</version>
  <user-name>cainlevy</user-name>
  <creator-name>cainlevy</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2705</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This is a follow-up to #2704, which revisits mass assignment and one-ups attr_accessible and attr_protected. If that patch is accepted, then I don't see enough remaining use for these two methods. They would only apply in a situation where a developer had forgotten to specify the allowed attributes at calltime. But this developer, presumably the forgetful sort, is unlikely to have remembered to set attr_accessible or attr_protected in the first place.

Furthermore, encouraging the usage of allowed_attributes at calltime (see #2704) makes it all the more likely that attr_accessible and attr_protected declarations will be spotty and poorly maintained.

Rather than support two systems for protecting methods and deal with the resulting confusion, I'd vote we deprecate attr_accessible and attr_protected and promote the new system. This is my attempt at fighting API bloat. :-)

The only other use I can see for keeping attr_accessible and attr_protected is to ease the upgrade process for older applications. But Rails 3.0 seems like the best time to go for a clean break!

NOTE: This patch also deprecates attributes= since it doesn't easily support the allowed_attributes syntax. I could imagine keeping it as a shortcut for the default-protection mass assignment use case, but I would rather remove it for a leaner API.</original-body>
  <latest-body>This is a follow-up to #2704, which revisits mass assignment and one-ups attr_accessible and attr_protected. If that patch is accepted, then I don't see enough remaining use for these two methods. They would only apply in a situation where a developer had forgotten to specify the allowed attributes at calltime. But this developer, presumably the forgetful sort, is unlikely to have remembered to set attr_accessible or attr_protected in the first place.

Furthermore, encouraging the usage of allowed_attributes at calltime (see #2704) makes it all the more likely that attr_accessible and attr_protected declarations will be spotty and poorly maintained.

Rather than support two systems for protecting methods and deal with the resulting confusion, I'd vote we deprecate attr_accessible and attr_protected and promote the new system. This is my attempt at fighting API bloat. :-)

The only other use I can see for keeping attr_accessible and attr_protected is to ease the upgrade process for older applications. But Rails 3.0 seems like the best time to go for a clean break!

NOTE: This patch also deprecates attributes= since it doesn't easily support the allowed_attributes syntax. I could imagine keeping it as a shortcut for the default-protection mass assignment use case, but I would rather remove it for a leaner API.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is a follow-up to &lt;a href=&quot;/projects/8994/tickets/2704&quot; title=&quot;Ticket #2704&quot;&gt;#2704&lt;/a&gt;, which revisits mass assignment and
one-ups attr_accessible and attr_protected. If that patch is
accepted, then I don't see enough remaining use for these two
methods. They would only apply in a situation where a developer had
forgotten to specify the allowed attributes at calltime. But this
developer, presumably the forgetful sort, is unlikely to have
remembered to set attr_accessible or attr_protected in the first
place.&lt;/p&gt;
&lt;p&gt;Furthermore, encouraging the usage of allowed_attributes at
calltime (see &lt;a href=&quot;/projects/8994/tickets/2704&quot; title=&quot;Ticket #2704&quot;&gt;#2704&lt;/a&gt;) makes it all the more likely that
attr_accessible and attr_protected declarations will be spotty and
poorly maintained.&lt;/p&gt;
&lt;p&gt;Rather than support two systems for protecting methods and deal
with the resulting confusion, I'd vote we deprecate attr_accessible
and attr_protected and promote the new system. This is my attempt
at fighting API bloat. :-)&lt;/p&gt;
&lt;p&gt;The only other use I can see for keeping attr_accessible and
attr_protected is to ease the upgrade process for older
applications. But Rails 3.0 seems like the best time to go for a
clean break!&lt;/p&gt;
&lt;p&gt;NOTE: This patch also deprecates attributes= since it doesn't
easily support the allowed_attributes syntax. I could imagine
keeping it as a shortcut for the default-protection mass assignment
use case, but I would rather remove it for a leaner API.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is a follow-up to #2704, which revisits mass assignment and one-ups attr_accessible and attr_protected. If that patch is accepted, then I don't see enough remaining use for these two methods. They would only apply in a situation where a developer had forgotten to specify the allowed attributes at calltime. But this developer, presumably the forgetful sort, is unlikely to have remembered to set attr_accessible or attr_protected in the first place.

Furthermore, encouraging the usage of allowed_attributes at calltime (see #2704) makes it all the more likely that attr_accessible and attr_protected declarations will be spotty and poorly maintained.

Rather than support two systems for protecting methods and deal with the resulting confusion, I'd vote we deprecate attr_accessible and attr_protected and promote the new system. This is my attempt at fighting API bloat. :-)

The only other use I can see for keeping attr_accessible and attr_protected is to ease the upgrade process for older applications. But Rails 3.0 seems like the best time to go for a clean break!

NOTE: This patch also deprecates attributes= since it doesn't easily support the allowed_attributes syntax. I could imagine keeping it as a shortcut for the default-protection mass assignment use case, but I would rather remove it for a leaner API.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is a follow-up to &lt;a href=&quot;/projects/8994/tickets/2704&quot;
title=&quot;Ticket #2704&quot;&gt;#2704&lt;/a&gt;, which revisits mass assignment and
one-ups attr_accessible and attr_protected. If that patch is
accepted, then I don't see enough remaining use for these two
methods. They would only apply in a situation where a developer had
forgotten to specify the allowed attributes at calltime. But this
developer, presumably the forgetful sort, is unlikely to have
remembered to set attr_accessible or attr_protected in the first
place.&lt;/p&gt;
&lt;p&gt;Furthermore, encouraging the usage of allowed_attributes at
calltime (see &lt;a href=&quot;/projects/8994/tickets/2704&quot; title=
&quot;Ticket #2704&quot;&gt;#2704&lt;/a&gt;) makes it all the more likely that
attr_accessible and attr_protected declarations will be spotty and
poorly maintained.&lt;/p&gt;
&lt;p&gt;Rather than support two systems for protecting methods and deal
with the resulting confusion, I'd vote we deprecate attr_accessible
and attr_protected and promote the new system. This is my attempt
at fighting API bloat. :-)&lt;/p&gt;
&lt;p&gt;The only other use I can see for keeping attr_accessible and
attr_protected is to ease the upgrade process for older
applications. But Rails 3.0 seems like the best time to go for a
clean break!&lt;/p&gt;
&lt;p&gt;NOTE: This patch also deprecates attributes= since it doesn't
easily support the allowed_attributes syntax. I could imagine
keeping it as a shortcut for the default-protection mass assignment
use case, but I would rather remove it for a leaner API.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-24T04:16:02+01:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2705</number>
      <permalink>deprecate-attr_accessible-attr_protected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 active_record patch tested testing tests</tag>
      <title>deprecate attr_accessible, attr_protected</title>
      <updated-at type="datetime">2009-05-24T04:16:06+01:00</updated-at>
      <user-id type="integer">8964</user-id>
      <version type="integer">1</version>
      <user-name>cainlevy</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2705</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>While there are several cases where a more complicated mass assignment permissions model is needed, the base case is incredibly useful for a huge number of users.

Requiring everyone to specify every attribute every time they assign them sits well on the other side of the 'reasonable complexity' line.</body>
      <body-html>&lt;div&gt;&lt;p&gt;While there are several cases where a more complicated mass
assignment permissions model is needed, the base case is incredibly
useful for a huge number of users.&lt;/p&gt;
&lt;p&gt;Requiring everyone to specify every attribute every time they
assign them sits well on the other side of the 'reasonable
complexity' line.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-24T07:18:50+01:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2705</number>
      <permalink>deprecate-attr_accessible-attr_protected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0 active_record patch tested testing tests</tag>
      <title>deprecate attr_accessible, attr_protected</title>
      <updated-at type="datetime">2009-05-24T07:18:53+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2705</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>True. The base case does cover a lot of ground. And until I finally did away with ActiveScaffold (the beast) and went back to a more light-weight admin interface approach (http://github.com/cainlevy/presenting), it was enough for me.

I suspect, though, that moving the assignable attribute list from the model to the controller would be a nearly net zero change in terms of complexity, except where the complexity is useful.

Thanks to these lovely RESTful resource controllers, my application rarely mass assigns to some model class in more than one location. And when it does, it's nearly always because it's a different permissions context. So in the former case I'd remove a line of code from my User model and add it to my UsersController ... no more or less complex. And the latter case is, well, exactly where I'd want to specify the assignable columns in the controller anyway!

Hopefully I'm not committing the fallacy of assuming everyone's application works like mine.</body>
      <body-html>&lt;div&gt;&lt;p&gt;True. The base case does cover a lot of ground. And until I
finally did away with ActiveScaffold (the beast) and went back to a
more light-weight admin interface approach (&lt;a href=
&quot;http://github.com/cainlevy/presenting)&quot;&gt;http://github.com/cainlevy/presenting)&lt;/a&gt;,
it was enough for me.&lt;/p&gt;
&lt;p&gt;I suspect, though, that moving the assignable attribute list
from the model to the controller would be a nearly net zero change
in terms of complexity, except where the complexity is useful.&lt;/p&gt;
&lt;p&gt;Thanks to these lovely RESTful resource controllers, my
application rarely mass assigns to some model class in more than
one location. And when it does, it's nearly always because it's a
different permissions context. So in the former case I'd remove a
line of code from my User model and add it to my UsersController
... no more or less complex. And the latter case is, well, exactly
where I'd want to specify the assignable columns in the controller
anyway!&lt;/p&gt;
&lt;p&gt;Hopefully I'm not committing the fallacy of assuming everyone's
application works like mine.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-24T08:25:15+01:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2705</number>
      <permalink>deprecate-attr_accessible-attr_protected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0 active_record patch tested testing tests</tag>
      <title>deprecate attr_accessible, attr_protected</title>
      <updated-at type="datetime">2009-05-24T08:25:19+01:00</updated-at>
      <user-id type="integer">8964</user-id>
      <version type="integer">3</version>
      <user-name>cainlevy</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2705</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Remember what should be remembered, and forget what should be forgotten.Alter what is changeable, and accept what is mutable.Apart from tears, only time could wear everything away..When I was asked to give a &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Cardy-Boots-5819.html&quot;&gt;ugg classic cardy&lt;/A&gt; write-up, on the topic Life is Beautiful I smiled. I believed it &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Cardy-Boots-5819.html&quot;&gt;uggs classic cardy&lt;/A&gt; was a simple topic with a very simple proposition. With a firm belief in myself, I tried to pen a few &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Bailey-Button-Boots-5803.html&quot;&gt;bailey button fancy&lt;/A&gt; words. I found myself helpless as I had fiddled away precious &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Bailey-Button-Boots-5803.html&quot;&gt;bailey button uggs&lt;/A&gt; time. Apparently an innocuous proposition made me ponder, which began in a &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Argyle-Knit-Boots-5879.html&quot;&gt;cheap ugg boots argyle&lt;/A&gt; listless way and later took a definite direction.As my thought process gained some &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Argyle-Knit-Boots-5879.html&quot;&gt;classic argyle knit ugg boots&lt;/A&gt; ground, I could not fathom the depth of this topic nor scale the &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Mini-Boots-5854.html&quot;&gt;uggs mini&lt;/A&gt; height of it. At one time I thought it could be dealt by filling the write up with anecdotes of my &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Mini-Boots-5854.html&quot;&gt;short mini uggs&lt;/A&gt; life and thus proving Life is Beautiful. The very next instance made me shudder, as a serious &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Ultra-Tall-Boots-5245.html&quot;&gt;ugg boots ultra&lt;/A&gt; topic should be dealt philosophically. A chain developed with one approach giving way to the other.As we grew old &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Ultra-Tall-Boots-5245/UGG-Womens-Ultra-Tall-Boots-Sand.html&quot;&gt;ugg ultra tall boots sale&lt;/A&gt; together, I would tease you that you had not changed  since we first met. But it is true, my &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Tall-Boots.html&quot;&gt;uggs tall women&lt;/A&gt; darling. I do not see the  wrinkles and grey hair that other people see. When I look at you &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Tall-Boots/UGG-Women-Classic-Tall-5815-Black.html&quot;&gt;ugg black classic tall sale&lt;/A&gt; now, I  only see your sweet tender lips and youthful sparkling eyes as we sat  and had out first picnic next &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Short-Boots.html&quot;&gt;black short ugg&lt;/A&gt; to that small stream, and chased each  other around &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Short-Boots.html&quot;&gt;ugg black short&lt;/A&gt; that big old oak tree. I remember wishing those &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Sundance-II-Boots-5325.html&quot;&gt;sundance ugg boots&lt;/A&gt; first few  days together would last forever. Do you remember how exciting and  wonderful those &lt;A href=&quot;http://www.uggcardyuk.co.uk/UGG-Nightfall-Boots-5359/Womens-UGG-Nightfall-Boots-Chestnut.html&quot;&gt;chestnut ugg boots nightfall&lt;/A&gt; days were?  ZHC</body>
      <body-html>&lt;div&gt;&lt;p&gt;Remember what should be remembered, and forget what should be
forgotten.Alter what is changeable, and accept what is
mutable.Apart from tears, only time could wear everything
away..When I was asked to give a &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Cardy-Boots-5819.html&quot;&gt;ugg
classic cardy&lt;/a&gt; write-up, on the topic Life is Beautiful I
smiled. I believed it &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Cardy-Boots-5819.html&quot;&gt;uggs
classic cardy&lt;/a&gt; was a simple topic with a very simple
proposition. With a firm belief in myself, I tried to pen a few
&lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Bailey-Button-Boots-5803.html&quot;&gt;bailey
button fancy&lt;/a&gt; words. I found myself helpless as I had fiddled
away precious &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Bailey-Button-Boots-5803.html&quot;&gt;bailey
button uggs&lt;/a&gt; time. Apparently an innocuous proposition made me
ponder, which began in a &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Argyle-Knit-Boots-5879.html&quot;&gt;
cheap ugg boots argyle&lt;/a&gt; listless way and later took a definite
direction.As my thought process gained some &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Argyle-Knit-Boots-5879.html&quot;&gt;
classic argyle knit ugg boots&lt;/a&gt; ground, I could not fathom the
depth of this topic nor scale the &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Mini-Boots-5854.html&quot;&gt;uggs
mini&lt;/a&gt; height of it. At one time I thought it could be dealt by
filling the write up with anecdotes of my &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Mini-Boots-5854.html&quot;&gt;short
mini uggs&lt;/a&gt; life and thus proving Life is Beautiful. The very
next instance made me shudder, as a serious &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Ultra-Tall-Boots-5245.html&quot;&gt;ugg
boots ultra&lt;/a&gt; topic should be dealt philosophically. A chain
developed with one approach giving way to the other.As we grew old
&lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Ultra-Tall-Boots-5245/UGG-Womens-Ultra-Tall-Boots-Sand.html&quot;&gt;
ugg ultra tall boots sale&lt;/a&gt; together, I would tease you that you
had not changed since we first met. But it is true, my &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Tall-Boots.html&quot;&gt;uggs tall
women&lt;/a&gt; darling. I do not see the wrinkles and grey hair that
other people see. When I look at you &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Tall-Boots/UGG-Women-Classic-Tall-5815-Black.html&quot;&gt;
ugg black classic tall sale&lt;/a&gt; now, I only see your sweet tender
lips and youthful sparkling eyes as we sat and had out first picnic
next &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Short-Boots.html&quot;&gt;black
short ugg&lt;/a&gt; to that small stream, and chased each other around
&lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Classic-Short-Boots.html&quot;&gt;ugg
black short&lt;/a&gt; that big old oak tree. I remember wishing those
&lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Sundance-II-Boots-5325.html&quot;&gt;sundance
ugg boots&lt;/a&gt; first few days together would last forever. Do you
remember how exciting and wonderful those &lt;a href=
&quot;http://www.uggcardyuk.co.uk/UGG-Nightfall-Boots-5359/Womens-UGG-Nightfall-Boots-Chestnut.html&quot;&gt;
chestnut ugg boots nightfall&lt;/a&gt; days were? ZHC&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-02T03:16:17+00:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2705</number>
      <permalink>deprecate-attr_accessible-attr_protected</permalink>
      <priority type="integer">1825</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0 active_record patch tested testing tests</tag>
      <title>deprecate attr_accessible, attr_protected</title>
      <updated-at type="datetime">2010-12-02T06:40:54+00:00</updated-at>
      <user-id type="integer">127490</user-id>
      <version type="integer">4</version>
      <user-name>ugg classic cardy tall</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2705</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>119d56cb722c1d858855ef657b03e12daa2682a9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-05-24T04:16:02+01:00</created-at>
      <filename>deprecate_attr_accessible_and_attr_protected.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">125759</id>
      <size type="integer">13971</size>
      <uploader-id type="integer">8964</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/125759/deprecate_attr_accessible_and_attr_protected.patch</url>
    </attachment>
  </attachments>
</ticket>
