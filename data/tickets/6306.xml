<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-01-18T08:52:33+00:00</created-at>
  <creator-id type="integer">133040</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6306</number>
  <permalink>collection-associations-build-method-not-supported-for-sti</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Collection Associations Build Method Not Supported for STI</title>
  <updated-at type="datetime">2011-03-01T19:07:39+00:00</updated-at>
  <user-id type="integer">123417</user-id>
  <version type="integer">4</version>
  <user-name>x37v</user-name>
  <creator-name>simple10</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6306</url>
  <priority-name nil="true"></priority-name>
  <original-body>The belongs_to association build method does not currently allow for specifying a :type subclass. This creates a lot of confusion and annoyances around STI support. 

@@@ ruby
# Currently working...
u = User.first
b = u.badges &lt;&lt; Badges::Superhero.new
# b.class == Badges::Superhero

# Not working...
u = User.first
u.badges.build(:type =&gt; Badges::Superhero)
# b.class == Badge
@@@

The quick fix is to change the build_association method in ActiveRecord::Reflection::AssociationReflection to detect if :type is a Class object and create the appropriate subclass model.

@@@ ruby
class ActiveRecord::Reflection::AssociationReflection
  def build_association(*opts)
    col = klass.inheritance_column.to_sym
    if (h = opts.first).is_a? Hash and (type = h.symbolize_keys[col]) and type.class == Class
      opts.first[col].to_s.constantize.new(*opts)
    elsif klass.abstract_class?
      raise &quot;#{klass.to_s} is an abstract class and can not be directly instantiated&quot;
    else
      klass.new(*opts)
    end
  end
end
@@@
Full writeup here: http://www.simple10.com/rails-3-sti/</original-body>
  <latest-body>The belongs_to association build method does not currently allow for specifying a :type subclass. This creates a lot of confusion and annoyances around STI support. 

@@@ ruby
# Currently working...
u = User.first
b = u.badges &lt;&lt; Badges::Superhero.new
# b.class == Badges::Superhero

# Not working...
u = User.first
u.badges.build(:type =&gt; Badges::Superhero)
# b.class == Badge
@@@

The quick fix is to change the build_association method in ActiveRecord::Reflection::AssociationReflection to detect if :type is a Class object and create the appropriate subclass model.

@@@ ruby
class ActiveRecord::Reflection::AssociationReflection
  def build_association(*opts)
    col = klass.inheritance_column.to_sym
    if (h = opts.first).is_a? Hash and (type = h.symbolize_keys[col]) and type.class == Class
      opts.first[col].to_s.constantize.new(*opts)
    elsif klass.abstract_class?
      raise &quot;#{klass.to_s} is an abstract class and can not be directly instantiated&quot;
    else
      klass.new(*opts)
    end
  end
end
@@@
Full writeup here: http://www.simple10.com/rails-3-sti/</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The belongs_to association build method does not currently allow
for specifying a :type subclass. This creates a lot of confusion
and annoyances around STI support.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# Currently working...
u = User.first
b = u.badges &amp;lt;&amp;lt; Badges::Superhero.new
# b.class == Badges::Superhero

# Not working...
u = User.first
u.badges.build(:type =&amp;gt; Badges::Superhero)
# b.class == Badge&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The quick fix is to change the build_association method in
ActiveRecord::Reflection::AssociationReflection to detect if :type
is a Class object and create the appropriate subclass model.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class ActiveRecord::Reflection::AssociationReflection
  def build_association(*opts)
    col = klass.inheritance_column.to_sym
    if (h = opts.first).is_a? Hash and (type = h.symbolize_keys[col]) and type.class == Class
      opts.first[col].to_s.constantize.new(*opts)
    elsif klass.abstract_class?
      raise &quot;#{klass.to_s} is an abstract class and can not be directly instantiated&quot;
    else
      klass.new(*opts)
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Full writeup here: &lt;a href=
&quot;http://www.simple10.com/rails-3-sti/&quot;&gt;http://www.simple10.com/rails-3-sti/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The belongs_to association build method does not currently allow for specifying a :type subclass. This creates a lot of confusion and annoyances around STI support. 

@@@ ruby
# Currently working...
u = User.first
b = u.badges &lt;&lt; Badges::Superhero.new
# b.class == Badges::Superhero

# Not working...
u = User.first
u.badges.build(:type =&gt; Badges::Superhero)
# b.class == Badge
@@@

The quick fix is to change the build_association method in ActiveRecord::Reflection::AssociationReflection to detect if :type is a Class object and create the appropriate subclass model.

@@@ ruby
class ActiveRecord::Reflection::AssociationReflection
  def build_association(*opts)
    col = klass.inheritance_column.to_sym
    if (h = opts.first).is_a? Hash and (type = h.symbolize_keys[col]) and type.class == Class
      opts.first[col].to_s.constantize.new(*opts)
    elsif klass.abstract_class?
      raise &quot;#{klass.to_s} is an abstract class and can not be directly instantiated&quot;
    else
      klass.new(*opts)
    end
  end
end
@@@
Full writeup here: http://www.simple10.com/rails-3-sti/</body>
      <body-html>&lt;div&gt;&lt;p&gt;The belongs_to association build method does not currently allow
for specifying a :type subclass. This creates a lot of confusion
and annoyances around STI support.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# Currently working...
u = User.first
b = u.badges &amp;lt;&amp;lt; Badges::Superhero.new
# b.class == Badges::Superhero

# Not working...
u = User.first
u.badges.build(:type =&amp;gt; Badges::Superhero)
# b.class == Badge&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The quick fix is to change the build_association method in
ActiveRecord::Reflection::AssociationReflection to detect if :type
is a Class object and create the appropriate subclass model.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class ActiveRecord::Reflection::AssociationReflection
  def build_association(*opts)
    col = klass.inheritance_column.to_sym
    if (h = opts.first).is_a? Hash and (type = h.symbolize_keys[col]) and type.class == Class
      opts.first[col].to_s.constantize.new(*opts)
    elsif klass.abstract_class?
      raise &quot;#{klass.to_s} is an abstract class and can not be directly instantiated&quot;
    else
      klass.new(*opts)
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Full writeup here: &lt;a href=
&quot;http://www.simple10.com/rails-3-sti/&quot;&gt;http://www.simple10.com/rails-3-sti/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-18T07:16:24+00:00</created-at>
      <creator-id type="integer">133040</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6306</number>
      <permalink>collection-associations-build-method-not-supported-for-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Collection Associations Build Method Not Supported for STI</title>
      <updated-at type="datetime">2011-01-18T07:16:26+00:00</updated-at>
      <user-id type="integer">133040</user-id>
      <version type="integer">1</version>
      <user-name>simple10</user-name>
      <creator-name>simple10</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6306</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Choose your &lt;b&gt;&lt;a href=&quot;http://www.bridalgownsinlove.com/cheap-designer-wedding-dresses-2011-35&quot;&gt;Designer Wedding Dresses 2011&lt;/a&gt;&lt;/b&gt; should be an enjoyable experience and that is what the bride wants big and beautiful! Every bride should receive personal attention when shopping for &lt;b&gt;&lt;a href=&quot;http://www.bridalgownsinlove.com/cheap-empire-waist-wedding-dresses-8&quot;&gt;Wholesale Empire Waist Wedding Dresses&lt;/a&gt;&lt;/b&gt; .
Ask around and visit several stores before making a decision. Note, however, there is now a large and beautiful selection of &lt;b&gt;&lt;a href=&quot;http://www.bridalgownsinlove.com/cheap-flower-girl-dresses-2&quot;&gt;Wholesale Flower girl dresses&lt;/a&gt;&lt;/b&gt; that can be purchased online.
Online shopping for bridal gown size could be your best bet. Styles include long or short sleeves, tight sleeves or strapless dresses nice to see a full figure and bare shoulders.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Choose your &lt;b&gt;&lt;a href=
&quot;http://www.bridalgownsinlove.com/cheap-designer-wedding-dresses-2011-35&quot;&gt;
Designer Wedding Dresses 2011&lt;/a&gt;&lt;/b&gt; should be an enjoyable
experience and that is what the bride wants big and beautiful!
Every bride should receive personal attention when shopping for
&lt;b&gt;&lt;a href=
&quot;http://www.bridalgownsinlove.com/cheap-empire-waist-wedding-dresses-8&quot;&gt;
Wholesale Empire Waist Wedding Dresses&lt;/a&gt;&lt;/b&gt; .&lt;br&gt;
Ask around and visit several stores before making a decision. Note,
however, there is now a large and beautiful selection of
&lt;b&gt;&lt;a href=&quot;http://www.bridalgownsinlove.com/cheap-flower-girl-dresses-2&quot;&gt;
Wholesale Flower girl dresses&lt;/a&gt;&lt;/b&gt; that can be purchased
online.&lt;br&gt;
Online shopping for bridal gown size could be your best bet. Styles
include long or short sleeves, tight sleeves or strapless dresses
nice to see a full figure and bare shoulders.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-18T08:32:19+00:00</created-at>
      <creator-id type="integer">133040</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6306</number>
      <permalink>collection-associations-build-method-not-supported-for-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Collection Associations Build Method Not Supported for STI</title>
      <updated-at type="datetime">2011-01-18T08:52:32+00:00</updated-at>
      <user-id type="integer">133048</user-id>
      <version type="integer">2</version>
      <user-name>mary01</user-name>
      <creator-name>simple10</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6306</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This works nicely for `parent.collection.build(:type =&gt; ClassName)` but it breaks `parent.collection.create(:type =&gt; ClassName)`
the parent_id isn't filled in in the created object...

I'm not sure why because the original source for build_association is very simple and there is also a create_association which i assume would be called for the collection.create approach..</body>
      <body-html>&lt;div&gt;&lt;p&gt;This works nicely for &lt;code&gt;parent.collection.build(:type =&amp;gt;
ClassName)&lt;/code&gt; but it breaks
&lt;code&gt;parent.collection.create(:type =&amp;gt; ClassName)&lt;/code&gt;&lt;br&gt;
the parent_id isn't filled in in the created object...&lt;/p&gt;
&lt;p&gt;I'm not sure why because the original source for
build_association is very simple and there is also a
create_association which i assume would be called for the
collection.create approach..&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-01T19:05:51+00:00</created-at>
      <creator-id type="integer">133040</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6306</number>
      <permalink>collection-associations-build-method-not-supported-for-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Collection Associations Build Method Not Supported for STI</title>
      <updated-at type="datetime">2011-03-01T19:06:01+00:00</updated-at>
      <user-id type="integer">123417</user-id>
      <version type="integer">3</version>
      <user-name>x37v</user-name>
      <creator-name>simple10</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6306</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>well, besides the fact that the type field is filled in with a class instead of a string.. i figure it should do h.symbolize_keys[col] = type.to_s</body>
      <body-html>&lt;div&gt;&lt;p&gt;well, besides the fact that the type field is filled in with a
class instead of a string.. i figure it should do
h.symbolize_keys[col] = type.to_s&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-01T19:07:30+00:00</created-at>
      <creator-id type="integer">133040</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6306</number>
      <permalink>collection-associations-build-method-not-supported-for-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Collection Associations Build Method Not Supported for STI</title>
      <updated-at type="datetime">2011-03-01T19:07:39+00:00</updated-at>
      <user-id type="integer">123417</user-id>
      <version type="integer">4</version>
      <user-name>x37v</user-name>
      <creator-name>simple10</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6306</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
