<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-10T00:36:49+01:00</created-at>
  <creator-id type="integer">17454</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5343</number>
  <permalink>cache-convenience-accessor-in-controllers-create-fragments-that-expire_fragment-cant-expire</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>cache &quot;Convenience accessor&quot; in controllers create fragments that expire_fragment can't expire </title>
  <updated-at type="datetime">2011-02-02T18:53:46+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>sudara</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5343</url>
  <priority-name nil="true"></priority-name>
  <original-body>Typical Disclaimer: Maybe I'm missing something, but this is not working/intuitive and causing problems. At best it's a doc issue?

The cache 'helper in controllers looks like so

    # actionpack/lib/action_controller/caching.rb, line 76
    def cache(key, options = {}, &amp;block)
      if cache_configured?
        cache_store.fetch(ActiveSupport::Cache.expand_cache_key(key, :controller), options, &amp;block)
      else
        yield
      end
    end

Note that expand_cache_key is passed :controller, which namespaces the cache key.

If I want to explicitly expire this fragment, using (naturally) expire_fragment, it is impossible. This is because expire_fragment calls fragment_cache_key which explicitly sets the namespace to :views

    def fragment_cache_key(key)
      ActiveSupport::Cache.expand_cache_key(key.is_a?(Hash) ? url_for(key).split(&quot;://&quot;).last : key, :views)
    end

This leaves the developer having to create their own version of &quot;expires_fragment&quot; for controller namedspaced fragments. Or, in my case, I just overrode the controllers &quot;cache&quot; accessor so that it didn't namespace it with :controller, because frankly, it doesn't matter to me where the item is cached from.

I'm not familiar enough with how rails is organized to make a best practice call for how this can be resolved without ruffling feathers, but it seemed worth bringing up, as it's a head-scratching moment! Personally, the namespacing is something i don't like as a developer, but I imagine a patch that removes it would not be accepted.</original-body>
  <latest-body>Typical Disclaimer: Maybe I'm missing something, but this is not working/intuitive and causing problems. At best it's a doc issue?

The cache 'helper in controllers looks like so

    # actionpack/lib/action_controller/caching.rb, line 76
    def cache(key, options = {}, &amp;block)
      if cache_configured?
        cache_store.fetch(ActiveSupport::Cache.expand_cache_key(key, :controller), options, &amp;block)
      else
        yield
      end
    end

Note that expand_cache_key is passed :controller, which namespaces the cache key.

If I want to explicitly expire this fragment, using (naturally) expire_fragment, it is impossible. This is because expire_fragment calls fragment_cache_key which explicitly sets the namespace to :views

    def fragment_cache_key(key)
      ActiveSupport::Cache.expand_cache_key(key.is_a?(Hash) ? url_for(key).split(&quot;://&quot;).last : key, :views)
    end

This leaves the developer having to create their own version of &quot;expires_fragment&quot; for controller namedspaced fragments. Or, in my case, I just overrode the controllers &quot;cache&quot; accessor so that it didn't namespace it with :controller, because frankly, it doesn't matter to me where the item is cached from.

I'm not familiar enough with how rails is organized to make a best practice call for how this can be resolved without ruffling feathers, but it seemed worth bringing up, as it's a head-scratching moment! Personally, the namespacing is something i don't like as a developer, but I imagine a patch that removes it would not be accepted.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Typical Disclaimer: Maybe I'm missing something, but this is not
working/intuitive and causing problems. At best it's a doc
issue?&lt;/p&gt;
&lt;p&gt;The cache 'helper in controllers looks like so&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# actionpack/lib/action_controller/caching.rb, line 76
def cache(key, options = {}, &amp;amp;block)
  if cache_configured?
    cache_store.fetch(ActiveSupport::Cache.expand_cache_key(key, :controller), options, &amp;amp;block)
  else
    yield
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that expand_cache_key is passed :controller, which
namespaces the cache key.&lt;/p&gt;
&lt;p&gt;If I want to explicitly expire this fragment, using (naturally)
expire_fragment, it is impossible. This is because expire_fragment
calls fragment_cache_key which explicitly sets the namespace to
:views&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def fragment_cache_key(key)
  ActiveSupport::Cache.expand_cache_key(key.is_a?(Hash) ? url_for(key).split(&quot;://&quot;).last : key, :views)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This leaves the developer having to create their own version of
&quot;expires_fragment&quot; for controller namedspaced fragments. Or, in my
case, I just overrode the controllers &quot;cache&quot; accessor so that it
didn't namespace it with :controller, because frankly, it doesn't
matter to me where the item is cached from.&lt;/p&gt;
&lt;p&gt;I'm not familiar enough with how rails is organized to make a
best practice call for how this can be resolved without ruffling
feathers, but it seemed worth bringing up, as it's a
head-scratching moment! Personally, the namespacing is something i
don't like as a developer, but I imagine a patch that removes it
would not be accepted.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Typical Disclaimer: Maybe I'm missing something, but this is not working/intuitive and causing problems. At best it's a doc issue?

The cache 'helper in controllers looks like so

    # actionpack/lib/action_controller/caching.rb, line 76
    def cache(key, options = {}, &amp;block)
      if cache_configured?
        cache_store.fetch(ActiveSupport::Cache.expand_cache_key(key, :controller), options, &amp;block)
      else
        yield
      end
    end

Note that expand_cache_key is passed :controller, which namespaces the cache key.

If I want to explicitly expire this fragment, using (naturally) expire_fragment, it is impossible. This is because expire_fragment calls fragment_cache_key which explicitly sets the namespace to :views

    def fragment_cache_key(key)
      ActiveSupport::Cache.expand_cache_key(key.is_a?(Hash) ? url_for(key).split(&quot;://&quot;).last : key, :views)
    end

This leaves the developer having to create their own version of &quot;expires_fragment&quot; for controller namedspaced fragments. Or, in my case, I just overrode the controllers &quot;cache&quot; accessor so that it didn't namespace it with :controller, because frankly, it doesn't matter to me where the item is cached from.

I'm not familiar enough with how rails is organized to make a best practice call for how this can be resolved without ruffling feathers, but it seemed worth bringing up, as it's a head-scratching moment! Personally, the namespacing is something i don't like as a developer, but I imagine a patch that removes it would not be accepted.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Typical Disclaimer: Maybe I'm missing something, but this is not
working/intuitive and causing problems. At best it's a doc
issue?&lt;/p&gt;
&lt;p&gt;The cache 'helper in controllers looks like so&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# actionpack/lib/action_controller/caching.rb, line 76
def cache(key, options = {}, &amp;amp;block)
  if cache_configured?
    cache_store.fetch(ActiveSupport::Cache.expand_cache_key(key, :controller), options, &amp;amp;block)
  else
    yield
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that expand_cache_key is passed :controller, which
namespaces the cache key.&lt;/p&gt;
&lt;p&gt;If I want to explicitly expire this fragment, using (naturally)
expire_fragment, it is impossible. This is because expire_fragment
calls fragment_cache_key which explicitly sets the namespace to
:views&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def fragment_cache_key(key)
  ActiveSupport::Cache.expand_cache_key(key.is_a?(Hash) ? url_for(key).split(&quot;://&quot;).last : key, :views)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This leaves the developer having to create their own version of
&quot;expires_fragment&quot; for controller namedspaced fragments. Or, in my
case, I just overrode the controllers &quot;cache&quot; accessor so that it
didn't namespace it with :controller, because frankly, it doesn't
matter to me where the item is cached from.&lt;/p&gt;
&lt;p&gt;I'm not familiar enough with how rails is organized to make a
best practice call for how this can be resolved without ruffling
feathers, but it seemed worth bringing up, as it's a
head-scratching moment! Personally, the namespacing is something i
don't like as a developer, but I imagine a patch that removes it
would not be accepted.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-10T00:36:49+01:00</created-at>
      <creator-id type="integer">17454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5343</number>
      <permalink>cache-convenience-accessor-in-controllers-create-fragments-that-expire_fragment-cant-expire</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>cache &quot;Convenience accessor&quot; in controllers create fragments that expire_fragment can't expire </title>
      <updated-at type="datetime">2010-08-10T00:43:04+01:00</updated-at>
      <user-id type="integer">17454</user-id>
      <version type="integer">1</version>
      <user-name>sudara</user-name>
      <creator-name>sudara</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5343</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T17:00:29+00:00</created-at>
      <creator-id type="integer">17454</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5343</number>
      <permalink>cache-convenience-accessor-in-controllers-create-fragments-that-expire_fragment-cant-expire</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>cache &quot;Convenience accessor&quot; in controllers create fragments that expire_fragment can't expire </title>
      <updated-at type="datetime">2011-02-02T18:53:34+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>sudara</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5343</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T17:00:30+00:00</created-at>
      <creator-id type="integer">17454</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5343</number>
      <permalink>cache-convenience-accessor-in-controllers-create-fragments-that-expire_fragment-cant-expire</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>cache &quot;Convenience accessor&quot; in controllers create fragments that expire_fragment can't expire </title>
      <updated-at type="datetime">2011-02-02T18:53:46+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>sudara</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5343</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
