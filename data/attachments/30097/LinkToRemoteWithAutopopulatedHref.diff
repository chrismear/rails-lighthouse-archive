diff --git a/actionpack/lib/action_view/helpers/prototype_helper.rb b/actionpack/lib/action_view/helpers/prototype_helper.rb
index a7c3b9d..2fd2a21 100644
--- a/actionpack/lib/action_view/helpers/prototype_helper.rb
+++ b/actionpack/lib/action_view/helpers/prototype_helper.rb
@@ -122,12 +122,12 @@ module ActionView
       # render :partial. 
       #
       # Examples:
-      #   # Generates: <a href="#" onclick="new Ajax.Updater('posts', '/blog/destroy/3', {asynchronous:true, evalScripts:true}); 
+      #   # Generates: <a href="/blog/destroy/3" onclick="new Ajax.Updater('posts', '/blog/destroy/3', {asynchronous:true, evalScripts:true}); 
       #   #            return false;">Delete this post</a>
       #   link_to_remote "Delete this post", :update => "posts", 
       #     :url => { :action => "destroy", :id => post.id }
       #
-      #   # Generates: <a href="#" onclick="new Ajax.Updater('emails', '/mail/list_emails', {asynchronous:true, evalScripts:true}); 
+      #   # Generates: <a href="/mail/list_emails" onclick="new Ajax.Updater('emails', '/mail/list_emails', {asynchronous:true, evalScripts:true}); 
       #   #            return false;"><img alt="Refresh" src="/images/refresh.png?" /></a>
       #   link_to_remote(image_tag("refresh"), :update => "emails", 
       #     :url => { :action => "list_emails" })
@@ -144,7 +144,7 @@ module ActionView
       # error occurs:
       #
       # Example:
-      #   # Generates: <a href="#" onclick="new Ajax.Updater({success:'posts',failure:'error'}, '/blog/destroy/5', 
+      #   # Generates: <a href="/blog/destroy/5" onclick="new Ajax.Updater({success:'posts',failure:'error'}, '/blog/destroy/5', 
       #   #            {asynchronous:true, evalScripts:true}); return false;">Delete this post</a>
       #   link_to_remote "Delete this post",
       #     :url => { :action => "destroy", :id => post.id },
@@ -171,7 +171,7 @@ module ActionView
       # find out the HTTP status, use <tt>request.status</tt>.
       #
       # Example:
-      #   # Generates: <a href="#" onclick="new Ajax.Request('/words/undo?n=33', {asynchronous:true, evalScripts:true, 
+      #   # Generates: <a href="/words/undo?n=33" onclick="new Ajax.Request('/words/undo?n=33', {asynchronous:true, evalScripts:true, 
       #   #            onComplete:function(request){undoRequestCompleted(request)}}); return false;">hello</a>
       #   word = 'hello'
       #   link_to_remote word,
@@ -200,7 +200,7 @@ module ActionView
       # adding additional callbacks for specific status codes.
       #
       # Example:
-      #   # Generates: <a href="#" onclick="new Ajax.Request('/testing/action', {asynchronous:true, evalScripts:true, 
+      #   # Generates: <a href="/testing/action" onclick="new Ajax.Request('/testing/action', {asynchronous:true, evalScripts:true, 
       #   #            on404:function(request){alert('Not found...? Wrong URL...?')}, 
       #   #            onFailure:function(request){alert('HTTP Error ' + request.status + '!')}}); return false;">hello</a>
       #   link_to_remote word,
@@ -241,18 +241,21 @@ module ActionView
       #                          
       #                            :with => "'name=' + $('name').value"
       #
-      # You can generate a link that uses AJAX in the general case, while 
-      # degrading gracefully to plain link behavior in the absence of
-      # JavaScript by setting <tt>html_options[:href]</tt> to an alternate URL.
+      # <tt>link_to_remote</tt> automatically sets the href of the generated link
+      # to the value you passed in as <tt>:url</tt> to degrade gracefully for users
+      # with JavaScript disabled or unavailable. You can override the generated href
+      # by setting <tt>html_options[:href]</tt> to an alternate URL.
       # Note the extra curly braces around the <tt>options</tt> hash separate
       # it as the second parameter from <tt>html_options</tt>, the third.
       #
       # Example:
-      #   link_to_remote "Delete this post",
-      #     { :update => "posts", :url => { :action => "destroy", :id => post.id } },
-      #     :href => url_for(:action => "destroy", :id => post.id)
+      #   # Generates: <a href="/people/4/destroy_without_ajax" onclick="new Ajax.Request('/people/4', {asynchronous:true, evalScripts:true, 
+      #   #            method:'delete'}); return false;">hello</a>
+      #   link_to_remote "Delete this person",
+      #     { :update => "people", :url => person_path(person), :method => :delete },
+      #     :href => url_for(:controller => "people", :action => "destroy_without_ajax", :id => person.id)
       def link_to_remote(name, options = {}, html_options = nil)  
-        link_to_function(name, remote_function(options), html_options || options.delete(:html))
+        link_to_function(name, remote_function(options), (html_options || options.delete(:html) || {}).reverse_merge(:href => url_for(options[:url])))
       end
 
       # Periodically calls the specified url (<tt>options[:url]</tt>) every
diff --git a/actionpack/test/template/prototype_helper_test.rb b/actionpack/test/template/prototype_helper_test.rb
index 60b83b4..986d3dd 100644
--- a/actionpack/test/template/prototype_helper_test.rb
+++ b/actionpack/test/template/prototype_helper_test.rb
@@ -67,25 +67,27 @@ class PrototypeHelperTest < PrototypeHelperBaseTest
   end
 
   def test_link_to_remote
-    assert_dom_equal %(<a class=\"fine\" href=\"#\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true}); return false;\">Remote outauthor</a>),
+    assert_dom_equal %(<a class=\"fine\" href=\"http://www.example.com/whatnot\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true}); return false;\">Remote outauthor</a>),
       link_to_remote("Remote outauthor", { :url => { :action => "whatnot"  }}, { :class => "fine"  })
-    assert_dom_equal %(<a href=\"#\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true, onComplete:function(request){alert(request.responseText)}}); return false;\">Remote outauthor</a>),
+    assert_dom_equal %(<a href=\"http://www.example.com/whatnot\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true, onComplete:function(request){alert(request.responseText)}}); return false;\">Remote outauthor</a>),
       link_to_remote("Remote outauthor", :complete => "alert(request.responseText)", :url => { :action => "whatnot"  })
-    assert_dom_equal %(<a href=\"#\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true, onSuccess:function(request){alert(request.responseText)}}); return false;\">Remote outauthor</a>),
+    assert_dom_equal %(<a href=\"http://www.example.com/whatnot\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true, onSuccess:function(request){alert(request.responseText)}}); return false;\">Remote outauthor</a>),
       link_to_remote("Remote outauthor", :success => "alert(request.responseText)", :url => { :action => "whatnot"  })
-    assert_dom_equal %(<a href=\"#\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true, onFailure:function(request){alert(request.responseText)}}); return false;\">Remote outauthor</a>),
+    assert_dom_equal %(<a href=\"http://www.example.com/whatnot\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true, onFailure:function(request){alert(request.responseText)}}); return false;\">Remote outauthor</a>),
       link_to_remote("Remote outauthor", :failure => "alert(request.responseText)", :url => { :action => "whatnot"  })
-    assert_dom_equal %(<a href=\"#\" onclick=\"new Ajax.Request('http://www.example.com/whatnot?a=10&amp;b=20', {asynchronous:true, evalScripts:true, onFailure:function(request){alert(request.responseText)}}); return false;\">Remote outauthor</a>),
+    assert_dom_equal %(<a href=\"http://www.example.com/whatnot?a=10&amp;b=20\" onclick=\"new Ajax.Request('http://www.example.com/whatnot?a=10&amp;b=20', {asynchronous:true, evalScripts:true, onFailure:function(request){alert(request.responseText)}}); return false;\">Remote outauthor</a>),
       link_to_remote("Remote outauthor", :failure => "alert(request.responseText)", :url => { :action => "whatnot", :a => '10', :b => '20' })
   end
 
   def test_link_to_remote_html_options
-    assert_dom_equal %(<a class=\"fine\" href=\"#\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true}); return false;\">Remote outauthor</a>),
+    assert_dom_equal %(<a class=\"fine\" href=\"http://www.example.com/whatnot\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true}); return false;\">Remote outauthor</a>),
       link_to_remote("Remote outauthor", { :url => { :action => "whatnot"  }, :html => { :class => "fine" } })
+    assert_dom_equal %(<a href=\"something_else\" onclick=\"new Ajax.Request('http://www.example.com/whatnot', {asynchronous:true, evalScripts:true}); return false;\">Remote outauthor</a>),
+      link_to_remote("Remote outauthor", { :url => { :action => "whatnot"  }, :html => { :href => "something_else" } })
   end
 
   def test_link_to_remote_url_quote_escaping
-    assert_dom_equal %(<a href="#" onclick="new Ajax.Request('http://www.example.com/whatnot\\\'s', {asynchronous:true, evalScripts:true}); return false;">Remote</a>),
+    assert_dom_equal %(<a href="http://www.example.com/whatnot's" onclick="new Ajax.Request('http://www.example.com/whatnot\\\'s', {asynchronous:true, evalScripts:true}); return false;">Remote</a>),
       link_to_remote("Remote", { :url => { :action => "whatnot's" } })
   end
 
