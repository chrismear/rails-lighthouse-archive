<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">8</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-25T12:27:55+00:00</created-at>
  <creator-id type="integer">23277</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">445</number>
  <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord enhancement fixtures generators patch railties routing</tag>
  <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
  <updated-at type="datetime">2010-11-25T12:27:55+00:00</updated-at>
  <user-id type="integer">7697</user-id>
  <version type="integer">38</version>
  <user-name>Andrew White</user-name>
  <creator-name>Harri Kauhanen</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Rails 2.1 already has quite good support for namespaced models, and Edge Rails seems to fix some bugs left. In practice, however, there are still some issues left.

I really wanted to get namespaces and models work nicely. So here's a patch that changes one convention and improves Rails support for namespaced models. I never done such thingie before, so pardon any mistakes I made, but I surely found this &quot;screencast&quot;:http://railscasts.com/episodes/113 very useful. The patch is against the latest development trunk (18th June 2008).

The convention for database table names of namespaced models currently is:

@@@ ruby
  module Animal; class Lion &lt; ActiveRecord::Base; end; end;
  Animal::Lion  # ( database name --&gt; )  lions
@@@

I changed this to:

@@@ ruby
  Animal::Lion  # --&gt;  animal_lions
@@@

This, however, overlaps with the convention of nested classes:

@@@ ruby
  class Animal &lt; ActiveRecord::Base; class Lion &lt; ActiveRecord::Base; end; end;  
  Animal::Lion  # --&gt;  animal_lions
@@@

In practice, this is not such a big problem, because we now at least &quot;bigger&quot; namespace we can use, and I guess you will have problems anyways if you have a module and class with exactly same name in your Ruby code. I also tried convention of using two ugly underscores (e.g. animal__lions) and also tried to stick with the old convention. After all the experimenting, the convention I chose seemed to work best. The greatest benefit, of course, is that we really get bigger namespace for our models. It also improves how we can handle fixtures. 

Perhaps the correct solution would be to provide this new table naming convention as configurable option?

I did quite a lot of manual testing using various associations. I also tried STI and polymorphic inheritance. They seemed to work well. has_many :through had problems, but it probably is an another problem (ticket #323 may contain a patch).

Next, I needed to check out the ActiveRecord tests pass. Well, they did not, because I changed the database table naming convention. Not many changes though, but one line did not please my very much:

@@@ ruby
  assert_equal 'my_application_business_company_my_application_business_client_contacts', MyApplication::Business::Client::Contact.table_name,  'table_name for ActiveRecord model enclosed by another ActiveRecord model'
@@@

MyApplication::Business::Client::Contact is inner class of MyApplication::Business::Company, so according the new rules, it is correct, but err... ugly. The positive aspect is that it gave as unlikely conflicting table name and probably it does not happen too often.

ActiveRecord tests depend of fixtures, and of course, they weren't working after the changes made. I really wanted fixtures to work so that I can organize fixtures just like I would organize my model files. For instance: 'animal' folder would contain 'lions.yml' for fixtures. The final solution, while being somewhat hackish, would find lion fixtures both under animal/lions.yml or animal_lions.yml. First one will keep you more organized and the latter one is consistent with the database table names.

Ok, all the existing tests pass and cannot find anything major by testing with Rails code and console. But what about generators? We use them every day and without working generators we don't really have working namespaces. These generator should now work fine by supporting namespaces:

* model
* resource
* scaffold

For instance scaffolding an Animal::Lion should generate fully working controllers, views, routing, fixtures and test cases. The trickiest part was to improve routing, but now routes to namespaced resources should be namespaced as well. For instance:

@@@ ruby
  map.namespace :animal do |animal|
    animal.resources :lions
  end
@@@

I am still very much novice with my Rails abilities, and my code may still look more like Java than Ruby. Don't let this you down. Instead, please help me by testing the patch and by:

* improving the code
* writing some proper unit tests
* check out if I have done something really stupid (yes, it's possible, see the comments in the patch)
* giving those +1's :-)
* tell me what should I do next</original-body>
  <latest-body>Rails 2.1 already has quite good support for namespaced models, and Edge Rails seems to fix some bugs left. In practice, however, there are still some issues left.

I really wanted to get namespaces and models work nicely. So here's a patch that changes one convention and improves Rails support for namespaced models. I never done such thingie before, so pardon any mistakes I made, but I surely found this &quot;screencast&quot;:http://railscasts.com/episodes/113 very useful. The patch is against the latest development trunk (18th June 2008).

The convention for database table names of namespaced models currently is:

@@@ ruby
  module Animal; class Lion &lt; ActiveRecord::Base; end; end;
  Animal::Lion  # ( database name --&gt; )  lions
@@@

I changed this to:

@@@ ruby
  Animal::Lion  # --&gt;  animal_lions
@@@

This, however, overlaps with the convention of nested classes:

@@@ ruby
  class Animal &lt; ActiveRecord::Base; class Lion &lt; ActiveRecord::Base; end; end;  
  Animal::Lion  # --&gt;  animal_lions
@@@

In practice, this is not such a big problem, because we now at least &quot;bigger&quot; namespace we can use, and I guess you will have problems anyways if you have a module and class with exactly same name in your Ruby code. I also tried convention of using two ugly underscores (e.g. animal__lions) and also tried to stick with the old convention. After all the experimenting, the convention I chose seemed to work best. The greatest benefit, of course, is that we really get bigger namespace for our models. It also improves how we can handle fixtures. 

Perhaps the correct solution would be to provide this new table naming convention as configurable option?

I did quite a lot of manual testing using various associations. I also tried STI and polymorphic inheritance. They seemed to work well. has_many :through had problems, but it probably is an another problem (ticket #323 may contain a patch).

Next, I needed to check out the ActiveRecord tests pass. Well, they did not, because I changed the database table naming convention. Not many changes though, but one line did not please my very much:

@@@ ruby
  assert_equal 'my_application_business_company_my_application_business_client_contacts', MyApplication::Business::Client::Contact.table_name,  'table_name for ActiveRecord model enclosed by another ActiveRecord model'
@@@

MyApplication::Business::Client::Contact is inner class of MyApplication::Business::Company, so according the new rules, it is correct, but err... ugly. The positive aspect is that it gave as unlikely conflicting table name and probably it does not happen too often.

ActiveRecord tests depend of fixtures, and of course, they weren't working after the changes made. I really wanted fixtures to work so that I can organize fixtures just like I would organize my model files. For instance: 'animal' folder would contain 'lions.yml' for fixtures. The final solution, while being somewhat hackish, would find lion fixtures both under animal/lions.yml or animal_lions.yml. First one will keep you more organized and the latter one is consistent with the database table names.

Ok, all the existing tests pass and cannot find anything major by testing with Rails code and console. But what about generators? We use them every day and without working generators we don't really have working namespaces. These generator should now work fine by supporting namespaces:

* model
* resource
* scaffold

For instance scaffolding an Animal::Lion should generate fully working controllers, views, routing, fixtures and test cases. The trickiest part was to improve routing, but now routes to namespaced resources should be namespaced as well. For instance:

@@@ ruby
  map.namespace :animal do |animal|
    animal.resources :lions
  end
@@@

I am still very much novice with my Rails abilities, and my code may still look more like Java than Ruby. Don't let this you down. Instead, please help me by testing the patch and by:

* improving the code
* writing some proper unit tests
* check out if I have done something really stupid (yes, it's possible, see the comments in the patch)
* giving those +1's :-)
* tell me what should I do next</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Rails 2.1 already has quite good support for namespaced models, and Edge Rails seems to fix some bugs left. In practice, however, there are still some issues left.
&lt;/p&gt;&lt;p&gt;
I really wanted to get namespaces and models work nicely. So here's a patch that changes one convention and improves Rails support for namespaced models. I never done such thingie before, so pardon any mistakes I made, but I surely found this &lt;a href=&quot;http://railscasts.com/episodes/113&quot;&gt;screencast&lt;/a&gt; very useful. The patch is against the latest development trunk (18th June 2008).
&lt;/p&gt;&lt;p&gt;
The convention for database table names of namespaced models currently is:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  module Animal; class Lion &amp;lt; ActiveRecord::Base; end; end;
  Animal::Lion  # ( database name --&amp;gt; )  lions&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I changed this to:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  Animal::Lion  # --&amp;gt;  animal_lions&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This, however, overlaps with the convention of nested classes:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  class Animal &amp;lt; ActiveRecord::Base; class Lion &amp;lt; ActiveRecord::Base; end; end;  
  Animal::Lion  # --&amp;gt;  animal_lions&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
In practice, this is not such a big problem, because we now at least &quot;bigger&quot; namespace we can use, and I guess you will have problems anyways if you have a module and class with exactly same name in your Ruby code. I also tried convention of using two ugly underscores (e.g. animal__lions) and also tried to stick with the old convention. After all the experimenting, the convention I chose seemed to work best. The greatest benefit, of course, is that we really get bigger namespace for our models. It also improves how we can handle fixtures.
&lt;/p&gt;&lt;p&gt;
Perhaps the correct solution would be to provide this new table naming convention as configurable option?
&lt;/p&gt;&lt;p&gt;
I did quite a lot of manual testing using various associations. I also tried STI and polymorphic inheritance. They seemed to work well. has_many :through had problems, but it probably is an another problem (ticket &lt;a href=&quot;/projects/8994/tickets/323&quot; title=&quot;Ticket #323&quot;&gt;#323&lt;/a&gt; may contain a patch).
&lt;/p&gt;&lt;p&gt;
Next, I needed to check out the ActiveRecord tests pass. Well, they did not, because I changed the database table naming convention. Not many changes though, but one line did not please my very much:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  assert_equal 'my_application_business_company_my_application_business_client_contacts', MyApplication::Business::Client::Contact.table_name,  'table_name for ActiveRecord model enclosed by another ActiveRecord model'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
MyApplication::Business::Client::Contact is inner class of MyApplication::Business::Company, so according the new rules, it is correct, but err... ugly. The positive aspect is that it gave as unlikely conflicting table name and probably it does not happen too often.
&lt;/p&gt;&lt;p&gt;
ActiveRecord tests depend of fixtures, and of course, they weren't working after the changes made. I really wanted fixtures to work so that I can organize fixtures just like I would organize my model files. For instance: 'animal' folder would contain 'lions.yml' for fixtures. The final solution, while being somewhat hackish, would find lion fixtures both under animal/lions.yml or animal_lions.yml. First one will keep you more organized and the latter one is consistent with the database table names.
&lt;/p&gt;&lt;p&gt;
Ok, all the existing tests pass and cannot find anything major by testing with Rails code and console. But what about generators? We use them every day and without working generators we don't really have working namespaces. These generator should now work fine by supporting namespaces:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
model
&lt;/li&gt;&lt;li&gt;
resource
&lt;/li&gt;&lt;li&gt;
scaffold
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
For instance scaffolding an Animal::Lion should generate fully working controllers, views, routing, fixtures and test cases. The trickiest part was to improve routing, but now routes to namespaced resources should be namespaced as well. For instance:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  map.namespace :animal do |animal|
    animal.resources :lions
  end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I am still very much novice with my Rails abilities, and my code may still look more like Java than Ruby. Don't let this you down. Instead, please help me by testing the patch and by:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
improving the code
&lt;/li&gt;&lt;li&gt;
writing some proper unit tests
&lt;/li&gt;&lt;li&gt;
check out if I have done something really stupid (yes, it's possible, see the comments in the patch)
&lt;/li&gt;&lt;li&gt;
giving those +1's :-)
&lt;/li&gt;&lt;li&gt;
tell me what should I do next
&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails 2.1 already has quite good support for namespaced models, and Edge Rails seems to fix some bugs left. In practice, however, there are still some issues left.

I really wanted to get namespaces and models work nicely. So here's a patch that changes one convention and improves Rails support for namespaced models. I never done such thingie before, so pardon any mistakes I made, but I surely found this &quot;screencast&quot;:http://railscasts.com/episodes/113 very useful. The patch is against the latest development trunk (18th June 2008).

The convention for database table names of namespaced models currently is:

@@@ ruby
  module Animal; class Lion &lt; ActiveRecord::Base; end; end;
  Animal::Lion  # ( database name --&gt; )  lions
@@@

I changed this to:

@@@ ruby
  Animal::Lion  # --&gt;  animal_lions
@@@

This, however, overlaps with the convention of nested classes:

@@@ ruby
  class Animal &lt; ActiveRecord::Base; class Lion &lt; ActiveRecord::Base; end; end;  
  Animal::Lion  # --&gt;  animal_lions
@@@

In practice, this is not such a big problem, because we now at least &quot;bigger&quot; namespace we can use, and I guess you will have problems anyways if you have a module and class with exactly same name in your Ruby code. I also tried convention of using two ugly underscores (e.g. animal__lions) and also tried to stick with the old convention. After all the experimenting, the convention I chose seemed to work best. The greatest benefit, of course, is that we really get bigger namespace for our models. It also improves how we can handle fixtures. 

Perhaps the correct solution would be to provide this new table naming convention as configurable option?

I did quite a lot of manual testing using various associations. I also tried STI and polymorphic inheritance. They seemed to work well. has_many :through had problems, but it probably is an another problem (ticket #323 may contain a patch).

Next, I needed to check out the ActiveRecord tests pass. Well, they did not, because I changed the database table naming convention. Not many changes though, but one line did not please my very much:

@@@ ruby
  assert_equal 'my_application_business_company_my_application_business_client_contacts', MyApplication::Business::Client::Contact.table_name,  'table_name for ActiveRecord model enclosed by another ActiveRecord model'
@@@

MyApplication::Business::Client::Contact is inner class of MyApplication::Business::Company, so according the new rules, it is correct, but err... ugly. The positive aspect is that it gave as unlikely conflicting table name and probably it does not happen too often.

ActiveRecord tests depend of fixtures, and of course, they weren't working after the changes made. I really wanted fixtures to work so that I can organize fixtures just like I would organize my model files. For instance: 'animal' folder would contain 'lions.yml' for fixtures. The final solution, while being somewhat hackish, would find lion fixtures both under animal/lions.yml or animal_lions.yml. First one will keep you more organized and the latter one is consistent with the database table names.

Ok, all the existing tests pass and cannot find anything major by testing with Rails code and console. But what about generators? We use them every day and without working generators we don't really have working namespaces. These generator should now work fine by supporting namespaces:

* model
* resource
* scaffold

For instance scaffolding an Animal::Lion should generate fully working controllers, views, routing, fixtures and test cases. The trickiest part was to improve routing, but now routes to namespaced resources should be namespaced as well. For instance:

@@@ ruby
  map.namespace :animal do |animal|
    animal.resources :lions
  end
@@@

I am still very much novice with my Rails abilities, and my code may still look more like Java than Ruby. Don't let this you down. Instead, please help me by testing the patch and by:

* improving the code
* writing some proper unit tests
* check out if I have done something really stupid (yes, it's possible, see the comments in the patch)
* giving those +1's :-)
* tell me what should I do next</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Rails 2.1 already has quite good support for namespaced models, and Edge Rails seems to fix some bugs left. In practice, however, there are still some issues left.
&lt;/p&gt;&lt;p&gt;
I really wanted to get namespaces and models work nicely. So here's a patch that changes one convention and improves Rails support for namespaced models. I never done such thingie before, so pardon any mistakes I made, but I surely found this &lt;a href=&quot;http://railscasts.com/episodes/113&quot;&gt;screencast&lt;/a&gt; very useful. The patch is against the latest development trunk (18th June 2008).
&lt;/p&gt;&lt;p&gt;
The convention for database table names of namespaced models currently is:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  module Animal; class Lion &amp;lt; ActiveRecord::Base; end; end;
  Animal::Lion  # ( database name --&amp;gt; )  lions&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I changed this to:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  Animal::Lion  # --&amp;gt;  animal_lions&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This, however, overlaps with the convention of nested classes:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  class Animal &amp;lt; ActiveRecord::Base; class Lion &amp;lt; ActiveRecord::Base; end; end;  
  Animal::Lion  # --&amp;gt;  animal_lions&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
In practice, this is not such a big problem, because we now at least &quot;bigger&quot; namespace we can use, and I guess you will have problems anyways if you have a module and class with exactly same name in your Ruby code. I also tried convention of using two ugly underscores (e.g. animal__lions) and also tried to stick with the old convention. After all the experimenting, the convention I chose seemed to work best. The greatest benefit, of course, is that we really get bigger namespace for our models. It also improves how we can handle fixtures.
&lt;/p&gt;&lt;p&gt;
Perhaps the correct solution would be to provide this new table naming convention as configurable option?
&lt;/p&gt;&lt;p&gt;
I did quite a lot of manual testing using various associations. I also tried STI and polymorphic inheritance. They seemed to work well. has_many :through had problems, but it probably is an another problem (ticket &lt;a href=&quot;/projects/8994/tickets/323&quot; title=&quot;Ticket #323&quot;&gt;#323&lt;/a&gt; may contain a patch).
&lt;/p&gt;&lt;p&gt;
Next, I needed to check out the ActiveRecord tests pass. Well, they did not, because I changed the database table naming convention. Not many changes though, but one line did not please my very much:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  assert_equal 'my_application_business_company_my_application_business_client_contacts', MyApplication::Business::Client::Contact.table_name,  'table_name for ActiveRecord model enclosed by another ActiveRecord model'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
MyApplication::Business::Client::Contact is inner class of MyApplication::Business::Company, so according the new rules, it is correct, but err... ugly. The positive aspect is that it gave as unlikely conflicting table name and probably it does not happen too often.
&lt;/p&gt;&lt;p&gt;
ActiveRecord tests depend of fixtures, and of course, they weren't working after the changes made. I really wanted fixtures to work so that I can organize fixtures just like I would organize my model files. For instance: 'animal' folder would contain 'lions.yml' for fixtures. The final solution, while being somewhat hackish, would find lion fixtures both under animal/lions.yml or animal_lions.yml. First one will keep you more organized and the latter one is consistent with the database table names.
&lt;/p&gt;&lt;p&gt;
Ok, all the existing tests pass and cannot find anything major by testing with Rails code and console. But what about generators? We use them every day and without working generators we don't really have working namespaces. These generator should now work fine by supporting namespaces:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
model
&lt;/li&gt;&lt;li&gt;
resource
&lt;/li&gt;&lt;li&gt;
scaffold
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
For instance scaffolding an Animal::Lion should generate fully working controllers, views, routing, fixtures and test cases. The trickiest part was to improve routing, but now routes to namespaced resources should be namespaced as well. For instance:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  map.namespace :animal do |animal|
    animal.resources :lions
  end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I am still very much novice with my Rails abilities, and my code may still look more like Java than Ruby. Don't let this you down. Instead, please help me by testing the patch and by:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
improving the code
&lt;/li&gt;&lt;li&gt;
writing some proper unit tests
&lt;/li&gt;&lt;li&gt;
check out if I have done something really stupid (yes, it's possible, see the comments in the patch)
&lt;/li&gt;&lt;li&gt;
giving those +1's :-)
&lt;/li&gt;&lt;li&gt;
tell me what should I do next
&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-18T16:09:29+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-06-18T16:09:29+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">1</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hallelujah, how have we gone this long without model namespacing?!?!


The big problem I see with your current approach is that it only works in one direction, from class name to table name.   
&quot;Animal::Lion&quot;.tableize  # --&gt;  animal_lions
&quot;animal_lions&quot;.classify  # --&gt;  AnimalLion

Until both directions work, I don't think module namespacing will be all that useful. It seems like we need some type of indicator to allow for translation in the other direction. Like you, I considered using a double underscore, but because that would require changes to Inflector#classify I opted instead for a double colon in my actual table name. Colon is a legal character in MySQL but I'm not sure about other dbs.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hallelujah, how have we gone this long without model namespacing?!?!
&lt;/p&gt;&lt;p&gt;
The big problem I see with your current approach is that it only works in one direction, from class name to table name.
&lt;/p&gt;&lt;p&gt;
&quot;Animal::Lion&quot;.tableize  # --&gt;  animal_lions
&lt;/p&gt;&lt;p&gt;
&quot;animal_lions&quot;.classify  # --&gt;  AnimalLion
&lt;/p&gt;&lt;p&gt;
Until both directions work, I don't think module namespacing will be all that useful. It seems like we need some type of indicator to allow for translation in the other direction. Like you, I considered using a double underscore, but because that would require changes to Inflector#classify I opted instead for a double colon in my actual table name. Colon is a legal character in MySQL but I'm not sure about other dbs.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-19T02:22:57+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-06-19T02:22:57+01:00</updated-at>
      <user-id type="integer">18589</user-id>
      <version type="integer">2</version>
      <user-name>acechase</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Some blog post related to this issue:

http://www.strictlyuntyped.com/2008/08/activerecord-can-haz-namespaces.html

(mine) http://blog.humaneq.com/2008/6/24/namespaced-models-in-rails</body>
      <body-html>&lt;div&gt;&lt;p&gt;Some blog post related to this issue:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.strictlyuntyped.com/2008/08/activerecord-can-haz-namespaces.html&quot;&gt;http://www.strictlyuntyped.com/2...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(mine) &lt;a href=&quot;http://blog.humaneq.com/2008/6/24/namespaced-models-in-rails&quot;&gt;http://blog.humaneq.com/2008/6/2...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-27T10:31:16+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-08-27T10:31:16+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">3</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-30T18:08:06+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-2</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-08-30T18:08:06+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'd like to focus on these as two seperate issues, and only talk about the AR table naming stuff to start with.

The reason we had differing behaviour for nested classes and modules was for backwards compatibility, so the table name doesn't change when you upgrade rails.  However that doesn't need to hold us back from making the change.

I can't follow your rationale of nesting in the table names:

@@@
my_application_business_company_contacts 
MyApplication::Business::Client::Contact.table_name
@@@

That seems far too verbose ;)  Why not:

@@@
my_application_businesses_companies_contacts
@@@

or 

@@@
my_application_business_company_contacts
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'd like to focus on these as two seperate issues, and only talk
about the AR table naming stuff to start with.&lt;/p&gt;
&lt;p&gt;The reason we had differing behaviour for nested classes and
modules was for backwards compatibility, so the table name doesn't
change when you upgrade rails. However that doesn't need to hold us
back from making the change.&lt;/p&gt;
&lt;p&gt;I can't follow your rationale of nesting in the table names:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
my_application_business_company_contacts
MyApplication::Business::Client::Contact.table_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That seems far too verbose ;) Why not:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
my_application_businesses_companies_contacts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
my_application_business_company_contacts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-30T19:16:21+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-08-30T19:16:21+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">5</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Obviously I messed up the cut-n-paste.  But the verbose version is:

@@@
my_application_business_company_my_application_business_client_contacts
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Obviously I messed up the cut-n-paste. But the verbose version
is:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
my_application_business_company_my_application_business_client_contacts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-30T19:17:23+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-4</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-08-30T19:17:23+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">6</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-30T20:42:18+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-5</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-08-30T20:42:18+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">7</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;code&gt;my_application_business_company_my_application_business_client_contacts&lt;/code&gt; is too verbose, indeed. I did not like this either, but did not fix it. This verbose naming seems to occur (when using inner nested classes!) because I just changed the method &lt;code&gt;undecorated_table_name&lt;/code&gt; in &lt;code&gt;activerecord/lib/active_record/base.rb&lt;/code&gt;, and perhaps for inner classes the table name is &quot;joined&quot; by calling undecorated_table_name multiple times.

By inner class nesting I mean how MyApplication::Business::Client::Contact is actually defined in rails/activerecord/test/models/company_in_module.rb

@@@
module MyApplication
  module Business
    class Company &lt; ActiveRecord::Base
      attr_protected :rating
    end

    # ...

    class Client &lt; Company
      belongs_to :firm, :foreign_key =&gt; &quot;client_of&quot;
      belongs_to :firm_with_other_name, :class_name =&gt; &quot;Firm&quot;, :foreign_key =&gt; &quot;client_of&quot;

      class Contact &lt; ActiveRecord::Base; end
    end

    # ...
  end
end
@@@

In my app, I did not have such complex nesting, just additional namespaces, therefore the table naming convention was nice and not too verbose.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&lt;code&gt;my_application_business_company_my_application_business_client_contacts&lt;/code&gt;
is too verbose, indeed. I did not like this either, but did not fix
it. This verbose naming seems to occur (when using inner nested
classes!) because I just changed the method
&lt;code&gt;undecorated_table_name&lt;/code&gt; in
&lt;code&gt;activerecord/lib/active_record/base.rb&lt;/code&gt;, and perhaps
for inner classes the table name is &quot;joined&quot; by calling
undecorated_table_name multiple times.&lt;/p&gt;
&lt;p&gt;By inner class nesting I mean how
MyApplication::Business::Client::Contact is actually defined in
rails/activerecord/test/models/company_in_module.rb&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
module MyApplication
  module Business
    class Company &amp;lt; ActiveRecord::Base
      attr_protected :rating
    end

    # ...

    class Client &amp;lt; Company
      belongs_to :firm, :foreign_key =&amp;gt; &amp;quot;client_of&amp;quot;
      belongs_to :firm_with_other_name, :class_name =&amp;gt; &amp;quot;Firm&amp;quot;, :foreign_key =&amp;gt; &amp;quot;client_of&amp;quot;

      class Contact &amp;lt; ActiveRecord::Base; end
    end

    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my app, I did not have such complex nesting, just additional
namespaces, therefore the table naming convention was nice and not
too verbose.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-02T20:58:02+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-6</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-02T20:58:02+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">8</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>But what do you think the 'correct' table name should be?

@@@
Account::Payment::Invoice
@@@

Seems to me the choices are:

@@@
account_payment_invoices or
accounts_payments_invoices
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;But what do you think the 'correct' table name should be?&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
Account::Payment::Invoice
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems to me the choices are:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
account_payment_invoices or
accounts_payments_invoices
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-03T09:00:34+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-7</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-03T09:00:34+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">9</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I see no reasons why namespaces should always be pluralized. Therefore I would go with the convention &lt;code&gt;account_payment_invoices&lt;/code&gt;. If, however, namespace is plural (e.g. module Animals), then it should be kept pluralized. For instance: &lt;code&gt;animals_cats&lt;/code&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I see no reasons why namespaces should always be pluralized.
Therefore I would go with the convention
&lt;code&gt;account_payment_invoices&lt;/code&gt;. If, however, namespace is
plural (e.g. module Animals), then it should be kept pluralized.
For instance: &lt;code&gt;animals_cats&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-03T12:44:08+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-8</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-03T12:44:08+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">10</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>OK, We're about to push out 2.2 betas, so we won't be able to get this in before then, but we'll look at it after that.

In the meantime maybe you should talk with a few people who use or want heavily nested models, and see what they think the table names should be.

acechase, do you have any thoughts?</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, We're about to push out 2.2 betas, so we won't be able to
get this in before then, but we'll look at it after that.&lt;/p&gt;
&lt;p&gt;In the meantime maybe you should talk with a few people who use
or want heavily nested models, and see what they think the table
names should be.&lt;/p&gt;
&lt;p&gt;acechase, do you have any thoughts?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-03T14:14:52+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-9</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-03T14:14:52+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">11</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree with Harri, I can't think of any good reason to add pluralization to the module names (especially since it would confuse things if you were starting with a module name that was already plural, like 'Animals').

The one sticking point I would like to come back to is the inability to work backwards from table name to class name without some distinct differentiator to make clear the boundary between one module/class name and the next. It seems that the easiest way to get around this is to use a double underscore to separate distinct names from one another and to update Inflector.classify to support this. 

It seems that the one argument against double underscore is they lead to ugly table names. While not having double underscores (or some other differentiator) in the table name means there's absolutely no way to translate from table name to class name, thus taking away a very useful metaprogramming technique. In my mind, the answer is quite simple. Aesthetics are great, but when given the choice, I'll opt for correct functionality every time ;-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree with Harri, I can't think of any good reason to add
pluralization to the module names (especially since it would
confuse things if you were starting with a module name that was
already plural, like 'Animals').&lt;/p&gt;
&lt;p&gt;The one sticking point I would like to come back to is the
inability to work backwards from table name to class name without
some distinct differentiator to make clear the boundary between one
module/class name and the next. It seems that the easiest way to
get around this is to use a double underscore to separate distinct
names from one another and to update Inflector.classify to support
this.&lt;/p&gt;
&lt;p&gt;It seems that the one argument against double underscore is they
lead to ugly table names. While not having double underscores (or
some other differentiator) in the table name means there's
absolutely no way to translate from table name to class name, thus
taking away a very useful metaprogramming technique. In my mind,
the answer is quite simple. Aesthetics are great, but when given
the choice, I'll opt for correct functionality every time ;-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-03T18:50:31+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-10</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-03T18:50:31+01:00</updated-at>
      <user-id type="integer">18589</user-id>
      <version type="integer">12</version>
      <user-name>acechase</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Agreed, acechase. As long as we introduce a convention for this, it should actually work both ways.

How about a different delimiter character entirely?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Agreed, acechase. As long as we introduce a convention for this,
it should actually work both ways.&lt;/p&gt;
&lt;p&gt;How about a different delimiter character entirely?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-03T23:05:56+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-11</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-03T23:05:56+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">13</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Jeremy, do you have any other delimiters in mind? I had previously suggested we use '::' -- I know that's legal in MySQL, but I don't know how that flies with other dbs. Also, it may be nice to use a delimiter that doesn't force the table name to be quoted (not that that's an issue with AR). In MySQL I think that narrows it down to either underscore or question mark. Trying to be db agnostic, I took a look around the SLQ92 spec and reading that it looked like latin characters and underscore are the characters the spec specifically defines as legal, but my BNF reading skills are at about a first grade level so I may have misunderstood.

Personally, I'm somewhat indifferent, so long as we can agree on some identifier and stick with it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jeremy, do you have any other delimiters in mind? I had
previously suggested we use '::' -- I know that's legal in MySQL,
but I don't know how that flies with other dbs. Also, it may be
nice to use a delimiter that doesn't force the table name to be
quoted (not that that's an issue with AR). In MySQL I think that
narrows it down to either underscore or question mark. Trying to be
db agnostic, I took a look around the SLQ92 spec and reading that
it looked like latin characters and underscore are the characters
the spec specifically defines as legal, but my BNF reading skills
are at about a first grade level so I may have misunderstood.&lt;/p&gt;
&lt;p&gt;Personally, I'm somewhat indifferent, so long as we can agree on
some identifier and stick with it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-04T01:27:05+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-12</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-04T01:27:05+01:00</updated-at>
      <user-id type="integer">18589</user-id>
      <version type="integer">14</version>
      <user-name>acechase</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I think underscores are pretty much the only option.  That won't allow for perfect roundtripping from class -&gt; table, but I don't think that's going to be a real problem in actual applications.  I don't really think it's likely that someone will have

@@@
AnimalFeed
@@@

and

@@@
Animal::Feed
@@@

In the same app.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think underscores are pretty much the only option. That won't
allow for perfect roundtripping from class -&amp;gt; table, but I don't
think that's going to be a real problem in actual applications. I
don't really think it's likely that someone will have&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
AnimalFeed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
Animal::Feed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the same app.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-04T12:57:30+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-13</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-04T12:57:30+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">15</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Don't we have a problem already to resolve the class name from table name? I mean... 

@@@
# table name animals_cats could be... 
class AnimalsCat &lt; ActiveRecord::Base 
  # ...
end

# or table animals_cats could as well be... 
class Animal &lt; ActiveRecord::Base
  class Cat &lt;  ActiveRecord::Base
    # ...
  end
end
@@@


Using colons '::' might not be working solution. MySQL table names must be allowed filenames, and colon is not allowed in Windows filesystems (I did not test it).

http://dev.mysql.com/doc/refman/5.0/en/identifiers.html
http://en.wikipedia.org/wiki/Filename

Using colons '::' or slash '/' would be the prettiest solution, but I'm also afraid we are stuck using underscores. I don't have very strong opinions should the namespace separator be '_' or '__'. I ended up using a single underscore mainly because I could not get double underscore (easily) working (I just don't understand the Rails internals enough). Single underscore looks better, but double underscore perhaps tells you more.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Don't we have a problem already to resolve the class name from
table name? I mean...&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
# table name animals_cats could be...
class AnimalsCat &amp;lt; ActiveRecord::Base
  # ...
end

# or table animals_cats could as well be...
class Animal &amp;lt; ActiveRecord::Base
  class Cat &amp;lt;  ActiveRecord::Base
    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using colons '::' might not be working solution. MySQL table
names must be allowed filenames, and colon is not allowed in
Windows filesystems (I did not test it).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/identifiers.html&quot;&gt;http://dev.mysql.com/doc/refman/...&lt;/a&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Filename&quot;&gt;http://en.wikipedia.org/wiki/Fil...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using colons '::' or slash '/' would be the prettiest solution,
but I'm also afraid we are stuck using underscores. I don't have
very strong opinions should the namespace separator be '_' or '__'.
I ended up using a single underscore mainly because I could not get
double underscore (easily) working (I just don't understand the
Rails internals enough). Single underscore looks better, but double
underscore perhaps tells you more.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-04T15:41:35+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-14</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-04T15:41:35+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">16</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Harri, the second case is animal_cats.

I guess I'd go for double underscore, then -- it seems worth being able to predictably do table_name.classify.constantize (fixtures, for example)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Harri, the second case is animal_cats.&lt;/p&gt;
&lt;p&gt;I guess I'd go for double underscore, then -- it seems worth
being able to predictably do table_name.classify.constantize
(fixtures, for example)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-04T16:06:16+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-15</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-04T16:06:16+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">17</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yeah, the roundtripping is already broken, but acechase mentioned it as an important feature.

I'm personally not worried about it, so perhaps it's a non-issue.

I like the idea of having modules not be pluralized but keeping the nested classes behaving like they do at present.

After 2.2 we'll pick this discussion up again, but in the meantime you can probably get the patch split up into two chunks.  AR fixes, and the rest.  Then get the AR fixes working correctly</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah, the roundtripping is already broken, but acechase
mentioned it as an important feature.&lt;/p&gt;
&lt;p&gt;I'm personally not worried about it, so perhaps it's a
non-issue.&lt;/p&gt;
&lt;p&gt;I like the idea of having modules not be pluralized but keeping
the nested classes behaving like they do at present.&lt;/p&gt;
&lt;p&gt;After 2.2 we'll pick this discussion up again, but in the
meantime you can probably get the patch split up into two chunks.
AR fixes, and the rest. Then get the AR fixes working correctly&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-04T16:07:28+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-16</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-04T16:07:28+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">18</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Michael says &quot;Yeah, the roundtripping is already broken, but acechase mentioned it as an important feature.  I'm personally not worried about it, so perhaps it's a non-issue.&quot;


This is a little like saying &quot;the brakes on all Ford vehicles are defective, but I don't drive a Ford so perhaps it's a non-issue&quot;.  Simply because you or some subset of the population aren't affected doesn't mean it doesn't affect the rest of us, with potentially hazardous results.

Yes, I'm being a bit sarcastic, but the point is that if something is broken, don't use that as justification to break it further, without a really good reason.

To be fair, you're not always going to make everyone happy, and some things will change over time and break old apps.  But these types of changes should not be done lightly, or without proper advertising of that fact.  If the current system has shortcomings or known use cases where it does not work as expected, then this should be documented as well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Michael says &quot;Yeah, the roundtripping is already broken, but
acechase mentioned it as an important feature. I'm personally not
worried about it, so perhaps it's a non-issue.&quot;&lt;/p&gt;
&lt;p&gt;This is a little like saying &quot;the brakes on all Ford vehicles
are defective, but I don't drive a Ford so perhaps it's a
non-issue&quot;. Simply because you or some subset of the population
aren't affected doesn't mean it doesn't affect the rest of us, with
potentially hazardous results.&lt;/p&gt;
&lt;p&gt;Yes, I'm being a bit sarcastic, but the point is that if
something is broken, don't use that as justification to break it
further, without a really good reason.&lt;/p&gt;
&lt;p&gt;To be fair, you're not always going to make everyone happy, and
some things will change over time and break old apps. But these
types of changes should not be done lightly, or without proper
advertising of that fact. If the current system has shortcomings or
known use cases where it does not work as expected, then this
should be documented as well.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-04T20:50:31+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-17</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-04T20:50:31+01:00</updated-at>
      <user-id type="integer">31043</user-id>
      <version type="integer">19</version>
      <user-name>CJV</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I went ahead and implemented the double underscore differentiator in Inflector to see what kind of ramifications it would have. By changing the Inflector#underscore method to gsub '::' with '__' (instead of '/') and changing  Inflector#camelize to gsub '__' rather than '/' we get the desired roundtrip behavior:
@@@ ruby
&gt;&gt; module TestModule ; class Test ; class NestedTest ; end ; end ; end
&gt;&gt; TestModule::Test::NestedTest.name.tableize
=&gt; &quot;test_module__test__nested_tests&quot;
&gt;&gt; TestModule::Test::NestedTest.name.tableize.classify
=&gt; &quot;TestModule::Test::NestedTest&quot;
@@@

Of course, changing the #camelize and #underscore methods will break code relying on the old behavior. IMO, camelize and underscore should just be camelizing and underscoring, the fact they currently deal with slashes as well is a bad idea since that is beyond the scope of those methods responsibilities. Ideally, that logic that adds in slashes would live in a #pathify method. But for the purposes of the here and now, we can keep all of the necessary changes consolidated to just the #classify and #tableize methods, like so:
@@@ ruby
class Inflector
...
def tableize(class_name)
  pluralize(underscore(class_name)).gsub(/\//, '__')
end
def classify(table_name)
  camelize(singularize(table_name.to_s.sub(/.*\./, '')).gsub(/__/, '/'))
end
@@@

Sorry for belaboring this point... I hope I'm not frustrating anyone too much with my excessive anal-ness ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I went ahead and implemented the double underscore
differentiator in Inflector to see what kind of ramifications it
would have. By changing the Inflector#underscore method to gsub
'::' with '&lt;strong&gt;' (instead of '/') and changing
Inflector#camelize to gsub '&lt;/strong&gt;' rather than '/' we get the
desired roundtrip behavior:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;gt;&amp;gt; module TestModule ; class Test ; class NestedTest ; end ; end ; end
&amp;gt;&amp;gt; TestModule::Test::NestedTest.name.tableize
=&amp;gt; &amp;quot;test_module__test__nested_tests&amp;quot;
&amp;gt;&amp;gt; TestModule::Test::NestedTest.name.tableize.classify
=&amp;gt; &amp;quot;TestModule::Test::NestedTest&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, changing the #camelize and #underscore methods will
break code relying on the old behavior. IMO, camelize and
underscore should just be camelizing and underscoring, the fact
they currently deal with slashes as well is a bad idea since that
is beyond the scope of those methods responsibilities. Ideally,
that logic that adds in slashes would live in a #pathify method.
But for the purposes of the here and now, we can keep all of the
necessary changes consolidated to just the #classify and #tableize
methods, like so:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Inflector
...
def tableize(class_name)
  pluralize(underscore(class_name)).gsub(/\//, '__')
end
def classify(table_name)
  camelize(singularize(table_name.to_s.sub(/.*\./, '')).gsub(/__/, '/'))
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sorry for belaboring this point... I hope I'm not frustrating
anyone too much with my excessive anal-ness ;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-04T22:14:13+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-18</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-04T22:14:13+01:00</updated-at>
      <user-id type="integer">18589</user-id>
      <version type="integer">20</version>
      <user-name>acechase</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I understand the concern of CJV. If this change is made so that the table name convention is configurable, and the initial configuration keeps the naming &quot;the old way&quot;, there should not be a big hassle.

I still believe this &quot;new convention&quot; should be default in some point. It could, for instance, ease the existing problems of many plugins and namespace conflicts.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I understand the concern of CJV. If this change is made so that
the table name convention is configurable, and the initial
configuration keeps the naming &quot;the old way&quot;, there should not be a
big hassle.&lt;/p&gt;
&lt;p&gt;I still believe this &quot;new convention&quot; should be default in some
point. It could, for instance, ease the existing problems of many
plugins and namespace conflicts.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-04T22:26:37+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming-19</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-04T22:26:37+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">21</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't see reason for using double underscores to disambiguate modules from class names. There is no need to go from table name -&gt; class.

Currently, Inflector.tableize does not consider the 'ActiveRecord::Base.pluralize_table_names' option, so ActiveRecord cannot even use it. Trying to modify or fix tableize might be out of the scope of this patch. (On a grander scale, I think adding tableize to Inflectors was silly in the first place)

ActiveRecord::Base.demodulize_table_names seems most consistent naming with the existing 'pluralize_table_names' option.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't see reason for using double underscores to disambiguate
modules from class names. There is no need to go from table name
-&amp;gt; class.&lt;/p&gt;
&lt;p&gt;Currently, Inflector.tableize does not consider the
'ActiveRecord::Base.pluralize_table_names' option, so ActiveRecord
cannot even use it. Trying to modify or fix tableize might be out
of the scope of this patch. (On a grander scale, I think adding
tableize to Inflectors was silly in the first place)&lt;/p&gt;
&lt;p&gt;ActiveRecord::Base.demodulize_table_names seems most consistent
naming with the existing 'pluralize_table_names' option.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-08T05:33:19+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-08T05:33:45+01:00</updated-at>
      <user-id type="integer">17971</user-id>
      <version type="integer">22</version>
      <user-name>matthuhiggins</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Ok, I did some rework with the patch and sliced it into pieces.

The first patch just updates the active_record so that table names for namespaced models are (can be) in format &lt;code&gt;namespace1__module2__model_objects&lt;/code&gt;. Namespaces (modules) are used in database table name, and separated with two underscore characters. 

This is configurable using parameter &lt;code&gt;ActiveRecord::Base.namespace_modules_in_table_names&lt;/code&gt;. For initial backward compatibility, this is by default set to false.

Note! &lt;code&gt;class_name&lt;/code&gt; method is broken with nested classes, and probably impossible to fix. However, it should now work fine with the namespaced model and new tablename convention.

Note! I did not touch the &lt;code&gt;Inflector&lt;/code&gt; class. The active_record code was not using it either, and there was quite strong statement written by Rails core team in the file header of &lt;code&gt;inflector.rb&lt;/code&gt; not to patch it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, I did some rework with the patch and sliced it into
pieces.&lt;/p&gt;
&lt;p&gt;The first patch just updates the active_record so that table
names for namespaced models are (can be) in format
&lt;code&gt;namespace1&lt;strong&gt;module2&lt;/strong&gt;model_objects&lt;/code&gt;.
Namespaces (modules) are used in database table name, and separated
with two underscore characters.&lt;/p&gt;
&lt;p&gt;This is configurable using parameter
&lt;code&gt;ActiveRecord::Base.namespace_modules_in_table_names&lt;/code&gt;.
For initial backward compatibility, this is by default set to
false.&lt;/p&gt;
&lt;p&gt;Note! &lt;code&gt;class_name&lt;/code&gt; method is broken with nested
classes, and probably impossible to fix. However, it should now
work fine with the namespaced model and new tablename
convention.&lt;/p&gt;
&lt;p&gt;Note! I did not touch the &lt;code&gt;Inflector&lt;/code&gt; class. The
active_record code was not using it either, and there was quite
strong statement written by Rails core team in the file header of
&lt;code&gt;inflector.rb&lt;/code&gt; not to patch it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T15:51:43+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-10T15:51:50+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">23</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>The next patch has nothing to do with the database naming convention. It should, however, fix some issues with namespaced models, and relations such as &quot;has_many&quot; and &quot;belongs_to&quot;. Without this patch, your namespaced models might seem to work fine at first, but you will run into errors in certain cases. For instance:

@@@
class Animal::Dog &lt; ActiveRecord::Base
  has_many :bugs
end

class Animal::Bug &lt; ActiveRecord::Base
  belongs_to :dog
end
@@@

Now you may e.g. execute &lt;code&gt;Animal::Dog.first.bugs&lt;/code&gt; and it works. If you reload the console and call &lt;code&gt;Animal::Bug.first.dog&lt;/code&gt; will also work. If, however, you execute these sequentially WITHOUT reloading the console, you will get an error such as &quot;Bug is not missing constant Dog!&quot;

I have no idea, whether my fix is 'correct', and why it works. However, it fixed the problem and seemed not break Rails tests.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The next patch has nothing to do with the database naming
convention. It should, however, fix some issues with namespaced
models, and relations such as &quot;has_many&quot; and &quot;belongs_to&quot;. Without
this patch, your namespaced models might seem to work fine at
first, but you will run into errors in certain cases. For
instance:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class Animal::Dog &amp;lt; ActiveRecord::Base
  has_many :bugs
end

class Animal::Bug &amp;lt; ActiveRecord::Base
  belongs_to :dog
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you may e.g. execute &lt;code&gt;Animal::Dog.first.bugs&lt;/code&gt; and
it works. If you reload the console and call
&lt;code&gt;Animal::Bug.first.dog&lt;/code&gt; will also work. If, however, you
execute these sequentially WITHOUT reloading the console, you will
get an error such as &quot;Bug is not missing constant Dog!&quot;&lt;/p&gt;
&lt;p&gt;I have no idea, whether my fix is 'correct', and why it works.
However, it fixed the problem and seemed not break Rails tests.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T15:52:34+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-10T15:52:38+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">24</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>This patch just ads a simple test case for the improved naming convention. I admit, we should perhaps more tests (e.g. testing the &quot;has_many&quot; and other relations with namespaced models).</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch just ads a simple test case for the improved naming
convention. I admit, we should perhaps more tests (e.g. testing the
&quot;has_many&quot; and other relations with namespaced models).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T15:53:19+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-10T15:53:24+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">25</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>I believe this new convention should be default in some point of time. I found this &quot;new_rails_defaults&quot; initializer, and thought it probably should be here. If I was right, here's the patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I believe this new convention should be default in some point of
time. I found this &quot;new_rails_defaults&quot; initializer, and thought it
probably should be here. If I was right, here's the patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T15:53:54+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-10T15:54:01+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">26</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>This patch makes the fixtures for namespaced models work. If you have e.g. class &lt;code&gt;Animal::Monkey&lt;/code&gt;, the fixture file should be either &lt;code&gt;animal__monkey.yml&lt;/code&gt; or &lt;code&gt;monkey.yml&lt;/code&gt; UNDER THE FOLDER called &lt;code&gt;animal&lt;/code&gt;. The first option resembles the database names used and second keeps you more organized (probably the better choice). 

I had to write couple of additional methods to magic happen. Hopefully someone has time to go through the code. All the active_record tests seemed to work fine with mysql.

I also fixed the rake task &lt;code&gt;db:fixtures:load&lt;/code&gt; to support namespaced models.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch makes the fixtures for namespaced models work. If you
have e.g. class &lt;code&gt;Animal::Monkey&lt;/code&gt;, the fixture file
should be either &lt;code&gt;animal__monkey.yml&lt;/code&gt; or
&lt;code&gt;monkey.yml&lt;/code&gt; UNDER THE FOLDER called
&lt;code&gt;animal&lt;/code&gt;. The first option resembles the database names
used and second keeps you more organized (probably the better
choice).&lt;/p&gt;
&lt;p&gt;I had to write couple of additional methods to magic happen.
Hopefully someone has time to go through the code. All the
active_record tests seemed to work fine with mysql.&lt;/p&gt;
&lt;p&gt;I also fixed the rake task &lt;code&gt;db:fixtures:load&lt;/code&gt; to
support namespaced models.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T15:54:27+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-10T15:54:33+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">27</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>This is a rather bigger patch. It makes Rails generator generate working code with namespaced model. For instance, if you run &lt;code&gt;script/generate scaffold Animal::Monkey::Ape name:string age:integer&lt;/code&gt;, you should get

- migration file that uses new naming convention (tablename --&gt; animal__monkey__apes)
- fixtures: animal/monkey/apes.yml
- working functional (and unit) tests
- namespaced routes into route.rb
- working web interface you can access at: http://localhost:3000/animal/monkey/apes

Note! This patch is not checking whether &lt;code&gt;ActiveRecord::Base.namespace_modules_in_table_names&lt;/code&gt; is turned on or off

Again, there are some code changes that might be questionable... or not :) Just check out the comments in the code, before committing.

How model associations work with namespaced models? See the code below:

@@@
class Animal::Bug &lt; ActiveRecord::Base
  # This one uses Animal::Dog
  belongs_to :dog
end

class Animal::Dog &lt; ActiveRecord::Base
  # This one uses Animal::Bug
  has_many :bugs

  # If not found in the same module, will look it from &quot;root&quot; namespace automatically
  belongs_to :person
end

class Person &lt; ActiveRecord::Base
  # Dog class not found if class name (wtih namespace) not defined
  has_many :dogs, :class_name =&gt; &quot;Animal::Dog&quot;
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is a rather bigger patch. It makes Rails generator generate
working code with namespaced model. For instance, if you run
&lt;code&gt;script/generate scaffold Animal::Monkey::Ape name:string
age:integer&lt;/code&gt;, you should get&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;migration file that uses new naming convention (tablename
--&amp;gt; animal&lt;strong&gt;monkey&lt;/strong&gt;apes)&lt;/li&gt;
&lt;li&gt;fixtures: animal/monkey/apes.yml&lt;/li&gt;
&lt;li&gt;working functional (and unit) tests&lt;/li&gt;
&lt;li&gt;namespaced routes into route.rb&lt;/li&gt;
&lt;li&gt;working web interface you can access at: &lt;a href=&quot;http://localhost:3000/animal/monkey/apes&quot;&gt;http://localhost:3000/animal/mon...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note! This patch is not checking whether
&lt;code&gt;ActiveRecord::Base.namespace_modules_in_table_names&lt;/code&gt; is
turned on or off&lt;/p&gt;
&lt;p&gt;Again, there are some code changes that might be questionable...
or not :) Just check out the comments in the code, before
committing.&lt;/p&gt;
&lt;p&gt;How model associations work with namespaced models? See the code
below:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class Animal::Bug &amp;lt; ActiveRecord::Base
  # This one uses Animal::Dog
  belongs_to :dog
end

class Animal::Dog &amp;lt; ActiveRecord::Base
  # This one uses Animal::Bug
  has_many :bugs

  # If not found in the same module, will look it from &amp;quot;root&amp;quot; namespace automatically
  belongs_to :person
end

class Person &amp;lt; ActiveRecord::Base
  # Dog class not found if class name (wtih namespace) not defined
  has_many :dogs, :class_name =&amp;gt; &amp;quot;Animal::Dog&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T15:55:00+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-10T15:55:07+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">28</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>This patch contains all the previous patches (except the improve_model_namespace_support.diff which is now obsolete).

While doing this patch, I noticed that Rails is not very DRY about finding out the correct name for database table/class/etc. Perhaps there should be a centralized piece of logic handling all this stuff (just my 5 cents here). It was quite fun to have a peek into Rails codebase. Hopefully, improved namespace support will end up there as well :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch contains all the previous patches (except the
improve_model_namespace_support.diff which is now obsolete).&lt;/p&gt;
&lt;p&gt;While doing this patch, I noticed that Rails is not very DRY
about finding out the correct name for database table/class/etc.
Perhaps there should be a centralized piece of logic handling all
this stuff (just my 5 cents here). It was quite fun to have a peek
into Rails codebase. Hopefully, improved namespace support will end
up there as well :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T15:55:52+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-10T15:55:59+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">29</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body>Uups.. wiki formatting ate my double underscores. animal__monkey__apes should be animal(double-underscore)monkey(double-underscore)apes .</body>
      <body-html>&lt;div&gt;&lt;p&gt;Uups.. wiki formatting ate my double underscores.
animal&lt;strong&gt;monkey&lt;/strong&gt;apes should be
animal(double-underscore)monkey(double-underscore)apes .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T16:05:30+01:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-09-10T16:05:34+01:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">30</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body>Patch doesn't apply clean anymore.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Patch doesn't apply clean anymore.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-20T19:31:33+00:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-12-20T19:31:35+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">31</version>
      <user-name>Pratik</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-20T19:55:07+00:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-12-20T19:55:13+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">32</version>
      <user-name>Pratik</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body>Ok.

My personal project no longer needs this. Therefore (and unfortunatelly), I do not have interest enough to go through the fixing process again.

I'm really happy to see Rails is maturing and have gone such a great improvements lately directly benefitting my work (e.g. thread safety). Namespaced models would be quite natural improvement -- perhaps not a major feature for the most of us, but something that should IMHO work out of the box. Perhaps one day they do ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok.&lt;/p&gt;
&lt;p&gt;My personal project no longer needs this. Therefore (and
unfortunatelly), I do not have interest enough to go through the
fixing process again.&lt;/p&gt;
&lt;p&gt;I'm really happy to see Rails is maturing and have gone such a
great improvements lately directly benefitting my work (e.g. thread
safety). Namespaced models would be quite natural improvement --
perhaps not a major feature for the most of us, but something that
should IMHO work out of the box. Perhaps one day they do ;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-21T09:41:50+00:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2008-12-21T09:41:54+00:00</updated-at>
      <user-id type="integer">23277</user-id>
      <version type="integer">33</version>
      <user-name>Harri Kauhanen</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body>Would be awesome to have such feature in rails 3 out of the box.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Would be awesome to have such feature in rails 3 out of the
box.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-13T11:25:28+00:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2010-01-13T11:25:31+00:00</updated-at>
      <user-id type="integer">8322</user-id>
      <version type="integer">34</version>
      <user-name>wildchild</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body>I'm marking this as stale. This would be a great feature, but we need someone to actually work on it. If someone has a patch, I'm glad to review and apply.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm marking this as stale. This would be a great feature, but we
need someone to actually work on it. If someone has a patch, I'm
glad to review and apply.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-21T19:37:44+00:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2010-02-21T19:37:47+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">35</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body>Jos&#233;, I still think having some degree of control over the table namespace would be a good idea, however I think blindly adding in the parent module names isn't the way to go. The main need for something like this is to avoid collisions with the host application when writing engines/plugins and a simple prefix is probably all that is needed.

Therefore what I'm proposing is that we enhance the current table_name_prefix which is global to first check whether a parent module responds to table_name_prefix and then use that instead of the global setting. This has the benefit of not breaking backward compatibility and is a lot simpler than the proposed patch in this ticket. I could knock together a patch within 24/48 hours if the idea is acceptable.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jos&amp;eacute;, I still think having some degree of control over
the table namespace would be a good idea, however I think blindly
adding in the parent module names isn't the way to go. The main
need for something like this is to avoid collisions with the host
application when writing engines/plugins and a simple prefix is
probably all that is needed.&lt;/p&gt;
&lt;p&gt;Therefore what I'm proposing is that we enhance the current
table_name_prefix which is global to first check whether a parent
module responds to table_name_prefix and then use that instead of
the global setting. This has the benefit of not breaking backward
compatibility and is a lot simpler than the proposed patch in this
ticket. I could knock together a patch within 24/48 hours if the
idea is acceptable.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-22T03:17:11+00:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2010-02-22T03:17:14+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">36</version>
      <user-name>Andrew White</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body>Sure, put up a patch and feel free to create a new ticket and assign it to me.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sure, put up a patch and feel free to create a new ticket and
assign it to me.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-22T06:51:40+00:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2010-02-22T06:51:42+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">37</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body>Okay - patch and new ticket [here](https://rails.lighthouseapp.com/projects/8994/tickets/4032)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Okay - patch and new ticket &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/4032&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-22T11:41:07+00:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2010-02-22T11:41:09+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">38</version>
      <user-name>Andrew White</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body>&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs the only boot sale&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs for cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap kids uggs&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap classic tall ugg boots 5815 mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uk cheap ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;super cheap ugg classic mini boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots with zips&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg sunburst boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;really cheap ugg classic mini&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for $64&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots for cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;ugg slippers cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap authentic uggs&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for sale in uk&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots mulberry&lt;/a&gt; So You Can Buy It Now!

&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;cheap ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg brand boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots uk&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg australia boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;discount ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale authorized&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;us ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;mens ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;australian ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;fur inside ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;kids ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg bailey boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;adirondack tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;shopping for ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg mini boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;womens ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;lowest price ugg boots&lt;/a&gt;,&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt; baby ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg style boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;knock off ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots discount&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove boots sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;discounted ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg roseberry boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;purple ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots sydney&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots cheap&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots store&lt;/a&gt; SO Cheap With Free Shipping!

&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store Outlet&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UK UGG Store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg factory store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet stores&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet store locations in pa hit bg&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg boots store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg australia sandals kids&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;boot shoes store ugg hit bg&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg store locater&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg australia kids&lt;/a&gt; Thats ugg store uk online shop!

&lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;tall boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;cardy ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;uggs sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy chocolate&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots cardy&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots cream&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boot&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;adirondack tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg mosaic tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg tall boot sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;cheap classic tall ugg boots 5815 mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall boot&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;sundance tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots classic tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg adirondack tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall wool&lt;/a&gt;. Have You Best Choice, Buy It Now!


&lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Classic Short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Short Boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;Short uggs&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Shop online&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;authentic ugg australia women's classic short #5825 - black sheepskin&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg fern suede classic short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg in grey&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg short boots fushia&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots 8 short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg ultra short black&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;eggplant short ugg&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;short classic ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;short ugg boots chestnut womens&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots black short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short black paisley&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg ultra short sku&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg women's classic short&lt;/a&gt;, Buy It Now! 

&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Triplet&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Bomber&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots 5803, UGG Boots 1873&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots USA&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;bailey button ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots bomber&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots at macys&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots - bailey button novelty- kids grey&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button crinkle leather&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button triplet boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button blackberry wine&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;discount ugg bailey button&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button 5803 grey size 10&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boot grey&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button cheap&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button triple&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots - bailey button novelty&lt;/a&gt;, Buy It Now!</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs the only boot sale&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs for cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap kids uggs&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap classic tall ugg boots 5815
mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs cheap&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uk cheap ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;super cheap ugg classic mini
boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots
with zips&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg
sunburst boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;really
cheap ugg classic mini&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for $64&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots for cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;ugg slippers cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap authentic uggs&lt;/a&gt;,&lt;br&gt;
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for sale in
uk&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots
mulberry&lt;/a&gt; So You Can Buy It Now!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;cheap ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg brand boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots uk&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots sale&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg australia boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;discount ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale
authorized&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;us ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;mens ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;australian ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;fur inside ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;kids ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg bailey
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;adirondack tall
ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;shopping for
ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg mini
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;womens ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;lowest price ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;baby ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg style
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;knock off ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
discount&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove boots
sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;discounted ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg roseberry
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;purple ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
sydney&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
cheap&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
store&lt;/a&gt; SO Cheap With Free Shipping!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store Outlet&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;UK UGG Store&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;ugg factory store&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet stores&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet store locations
in pa hit bg&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg
store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg boots
store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg
australia sandals kids&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;boot shoes store ugg hit bg&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg store locater&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg australia
kids&lt;/a&gt; Thats ugg store uk online shop!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;tall boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;cardy ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;uggs sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots on sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy chocolate&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy tall&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg boots cardy&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots cream&lt;/a&gt;,
&lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boot&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;adirondack tall ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg mosaic tall&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg tall boot sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;cheap classic tall ugg boots 5815
mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic tall ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall
boot&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy
tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;sundance tall ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots classic
tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg adirondack
tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall
wool&lt;/a&gt;. Have You Best Choice, Buy It Now!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Classic Short&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;UGG Short Boots&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;Short uggs&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;UGG Shop online&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;authentic ugg australia women's classic
short&lt;/a&gt; &lt;a href=&quot;/projects/8994/tickets/5825&quot; title=
&quot;Ticket #5825&quot;&gt;#5825&lt;/a&gt; - black sheepskin,&lt;br&gt;
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg fern suede classic short&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg in grey&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg short boots fushia&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots 8 short&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;ugg ultra short black&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;eggplant short ugg&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;short classic ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;short ugg boots chestnut womens&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots black short&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short black
paisley&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short
boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg ultra short sku&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg women's classic short&lt;/a&gt;, Buy
It Now!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Triplet&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Bomber&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots 5803, UGG Boots
1873&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots USA&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;bailey button ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots
bomber&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
boots at macys&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots
- bailey button novelty- kids grey&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button crinkle
leather&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey
button triplet boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg
bailey button blackberry wine&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;discount ugg bailey button&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button
boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
5803 grey size 10&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg
bailey button boot grey&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button triple&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots - bailey button novelty&lt;/a&gt;,
Buy It Now!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-25T12:13:19+00:00</created-at>
      <creator-id type="integer">23277</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">445</number>
      <permalink>improved-support-for-model-namespaces-fixtures-generators-table-naming</permalink>
      <priority type="integer">350</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord enhancement fixtures generators patch railties routing</tag>
      <title>Improved support for model namespaces (fixtures, generators, table naming)</title>
      <updated-at type="datetime">2010-11-25T12:27:55+00:00</updated-at>
      <user-id type="integer">126682</user-id>
      <version type="integer">39</version>
      <user-name>sunnyabc</user-name>
      <creator-name>Harri Kauhanen</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/445</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4371efc8087bc08052840faf3050242289d47289</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-06-18T16:09:30+01:00</created-at>
      <filename>improve_model_namespace_support.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">28051</id>
      <size type="integer">30906</size>
      <uploader-id type="integer">23277</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/28051/improve_model_namespace_support.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>4457d2f91d48645a7a1e369f2e2ca5089bcd5d51</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-10T15:51:43+01:00</created-at>
      <filename>rails_namespaced_models_activerecord.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">45049</id>
      <size type="integer">4087</size>
      <uploader-id type="integer">23277</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/45049/rails_namespaced_models_activerecord.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>a443a8a693447f0f3fe70f37b0628da0e4fe207f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-10T15:52:34+01:00</created-at>
      <filename>rails_namespaced_models_fix_load_missing_constant.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">45050</id>
      <size type="integer">1673</size>
      <uploader-id type="integer">23277</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/45050/rails_namespaced_models_fix_load_missing_constant.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>cef9b969394fa2e22e88e86ca7ad65e6d55b3a19</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-10T15:53:19+01:00</created-at>
      <filename>rails_namespaced_models_simple_testcase.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">45052</id>
      <size type="integer">2158</size>
      <uploader-id type="integer">23277</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/45052/rails_namespaced_models_simple_testcase.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>6b5a5c7c47590bf78a52218e1da098044d8beaf9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-10T15:53:54+01:00</created-at>
      <filename>rails_namespaced_models_new_rails_defaults.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">45054</id>
      <size type="integer">991</size>
      <uploader-id type="integer">23277</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/45054/rails_namespaced_models_new_rails_defaults.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>86bde76ceb6de00a1f617dfcf1ccf1cab3d7ec3f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-10T15:54:27+01:00</created-at>
      <filename>rails_namespaced_models_fixtures_fixed.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">45055</id>
      <size type="integer">7523</size>
      <uploader-id type="integer">23277</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/45055/rails_namespaced_models_fixtures_fixed.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>d8d39fd477a5de66e06b42e4f2614c10000935fb</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-10T15:55:00+01:00</created-at>
      <filename>rails_namespaced_models_generator_stuff.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">45057</id>
      <size type="integer">19436</size>
      <uploader-id type="integer">23277</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/45057/rails_namespaced_models_generator_stuff.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>bff047262c9c6840c2948b03873fba977776750c</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-10T15:55:52+01:00</created-at>
      <filename>rails_namespaced_models_ALL_PATCHES.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">45058</id>
      <size type="integer">35868</size>
      <uploader-id type="integer">23277</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/45058/rails_namespaced_models_ALL_PATCHES.diff</url>
    </attachment>
  </attachments>
</ticket>
