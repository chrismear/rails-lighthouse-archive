<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-12-10T18:31:20+00:00</created-at>
  <creator-id type="integer">23266</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1548</number>
  <permalink>gem-tasks-fail-when-cache_classestrue</permalink>
  <priority type="integer">906</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>bug gems initializer patch railties rake tiny</tag>
  <title>Gem tasks fail when cache_classes=true</title>
  <updated-at type="datetime">2009-08-08T20:54:56+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">6</version>
  <user-name>Pratik</user-name>
  <creator-name>Richie Vos</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1548</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>If I have a model like:
@@@ ruby
# MyModel.rb
require 'fastercsv'
class MyModel &lt; ActiveRecord::Base; end
@@@

and in my config file I have
@@@ ruby
# ....
config.cache_classes = true
config.gem 'fastercsv'
@@@

and I don't have the fastercsv gem installed, the rake gems tasks cannot run. 

In initializer.rb, cache_classes=true ends up kicking off the class preloading, which then ends up trying to require a gem that's not yet been installed, ... (another gems:install catch-22).

The easy fix is fairly straightforward (will provide a patch &amp; tests), but load_application_classes needs to just check for $rails_gem_installer to be set, and if so don't try and do the preloading.

It kind of seems like the $rails_gem_installer flag is a bit of a hack, and that really rake gems:install should be setting what initializer steps get ran (seems like very few of them), but that's a bigger fix.

Here's a workaround you can drop into environment.rb in the mean-time
@@@ ruby
# this is a workaround for a Rails issue where cache_classing can lead to not yet installed
# gems to cause the gem:install to fail
module Rails
  class Initializer
    def load_application_classes_with_check_for_gem_loading
      load_application_classes_without_check_for_gem_loading unless $rails_gem_installer
    end
    alias_method :load_application_classes_without_check_for_gem_loading, :load_application_classes
    alias_method :load_application_classes, :load_application_classes_with_check_for_gem_loading
  end
end
@@@</original-body>
  <latest-body>If I have a model like:
@@@ ruby
# MyModel.rb
require 'fastercsv'
class MyModel &lt; ActiveRecord::Base; end
@@@

and in my config file I have
@@@ ruby
# ....
config.cache_classes = true
config.gem 'fastercsv'
@@@

and I don't have the fastercsv gem installed, the rake gems tasks cannot run. 

In initializer.rb, cache_classes=true ends up kicking off the class preloading, which then ends up trying to require a gem that's not yet been installed, ... (another gems:install catch-22).

The easy fix is fairly straightforward (will provide a patch &amp; tests), but load_application_classes needs to just check for $rails_gem_installer to be set, and if so don't try and do the preloading.

It kind of seems like the $rails_gem_installer flag is a bit of a hack, and that really rake gems:install should be setting what initializer steps get ran (seems like very few of them), but that's a bigger fix.

Here's a workaround you can drop into environment.rb in the mean-time
@@@ ruby
# this is a workaround for a Rails issue where cache_classing can lead to not yet installed
# gems to cause the gem:install to fail
module Rails
  class Initializer
    def load_application_classes_with_check_for_gem_loading
      load_application_classes_without_check_for_gem_loading unless $rails_gem_installer
    end
    alias_method :load_application_classes_without_check_for_gem_loading, :load_application_classes
    alias_method :load_application_classes, :load_application_classes_with_check_for_gem_loading
  end
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If I have a model like:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# MyModel.rb
require 'fastercsv'
class MyModel &amp;lt; ActiveRecord::Base; end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in my config file I have&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# ....
config.cache_classes = true
config.gem 'fastercsv'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and I don't have the fastercsv gem installed, the rake gems
tasks cannot run.&lt;/p&gt;
&lt;p&gt;In initializer.rb, cache_classes=true ends up kicking off the
class preloading, which then ends up trying to require a gem that's
not yet been installed, ... (another gems:install catch-22).&lt;/p&gt;
&lt;p&gt;The easy fix is fairly straightforward (will provide a patch
&amp;amp; tests), but load_application_classes needs to just check for
$rails_gem_installer to be set, and if so don't try and do the
preloading.&lt;/p&gt;
&lt;p&gt;It kind of seems like the $rails_gem_installer flag is a bit of
a hack, and that really rake gems:install should be setting what
initializer steps get ran (seems like very few of them), but that's
a bigger fix.&lt;/p&gt;
&lt;p&gt;Here's a workaround you can drop into environment.rb in the
mean-time&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# this is a workaround for a Rails issue where cache_classing can lead to not yet installed
# gems to cause the gem:install to fail
module Rails
  class Initializer
    def load_application_classes_with_check_for_gem_loading
      load_application_classes_without_check_for_gem_loading unless $rails_gem_installer
    end
    alias_method :load_application_classes_without_check_for_gem_loading, :load_application_classes
    alias_method :load_application_classes, :load_application_classes_with_check_for_gem_loading
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If I have a model like:
@@@ ruby
# MyModel.rb
require 'fastercsv'
class MyModel &lt; ActiveRecord::Base; end
@@@

and in my config file I have
@@@ ruby
# ....
config.cache_classes = true
config.gem 'fastercsv'
@@@

and I don't have the fastercsv gem installed, the rake gems tasks cannot run. 

In initializer.rb, cache_classes=true ends up kicking off the class preloading, which then ends up trying to require a gem that's not yet been installed, ... (another gems:install catch-22).

The easy fix is fairly straightforward (will provide a patch &amp; tests), but load_application_classes needs to just check for $rails_gem_installer to be set, and if so don't try and do the preloading.

It kind of seems like the $rails_gem_installer flag is a bit of a hack, and that really rake gems:install should be setting what initializer steps get ran (seems like very few of them), but that's a bigger fix.

Here's a workaround you can drop into environment.rb in the mean-time
@@@ ruby
# this is a workaround for a Rails issue where cache_classing can lead to not yet installed
# gems to cause the gem:install to fail
module Rails
  class Initializer
    def load_application_classes_with_check_for_gem_loading
      load_application_classes_without_check_for_gem_loading unless $rails_gem_installer
    end
    alias_method :load_application_classes_without_check_for_gem_loading, :load_application_classes
    alias_method :load_application_classes, :load_application_classes_with_check_for_gem_loading
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;If I have a model like:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# MyModel.rb
require 'fastercsv'
class MyModel &amp;lt; ActiveRecord::Base; end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in my config file I have&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# ....
config.cache_classes = true
config.gem 'fastercsv'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and I don't have the fastercsv gem installed, the rake gems
tasks cannot run.&lt;/p&gt;
&lt;p&gt;In initializer.rb, cache_classes=true ends up kicking off the
class preloading, which then ends up trying to require a gem that's
not yet been installed, ... (another gems:install catch-22).&lt;/p&gt;
&lt;p&gt;The easy fix is fairly straightforward (will provide a patch
&amp;amp; tests), but load_application_classes needs to just check for
$rails_gem_installer to be set, and if so don't try and do the
preloading.&lt;/p&gt;
&lt;p&gt;It kind of seems like the $rails_gem_installer flag is a bit of
a hack, and that really rake gems:install should be setting what
initializer steps get ran (seems like very few of them), but that's
a bigger fix.&lt;/p&gt;
&lt;p&gt;Here's a workaround you can drop into environment.rb in the
mean-time&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# this is a workaround for a Rails issue where cache_classing can lead to not yet installed
# gems to cause the gem:install to fail
module Rails
  class Initializer
    def load_application_classes_with_check_for_gem_loading
      load_application_classes_without_check_for_gem_loading unless $rails_gem_installer
    end
    alias_method :load_application_classes_without_check_for_gem_loading, :load_application_classes
    alias_method :load_application_classes, :load_application_classes_with_check_for_gem_loading
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-10T18:31:20+00:00</created-at>
      <creator-id type="integer">23266</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1548</number>
      <permalink>gem-tasks-fail-when-cache_classestrue</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 bug cache_classes initializer load_application_classes railties</tag>
      <title>Gem tasks fail when cache_classes=true</title>
      <updated-at type="datetime">2008-12-10T18:31:23+00:00</updated-at>
      <user-id type="integer">23266</user-id>
      <version type="integer">1</version>
      <user-name>Richie Vos</user-name>
      <creator-name>Richie Vos</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1548</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Don't use &quot;require 'fastercsv'&quot; in your model - config.gem will do it for you if the gem is available.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Don't use &quot;require 'fastercsv'&quot; in your model - config.gem will
do it for you if the gem is available.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-20T21:16:22+00:00</created-at>
      <creator-id type="integer">23266</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1548</number>
      <permalink>gem-tasks-fail-when-cache_classestrue</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 bug cache_classes initializer load_application_classes railties</tag>
      <title>Gem tasks fail when cache_classes=true</title>
      <updated-at type="datetime">2008-12-20T21:16:25+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">2</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Richie Vos</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1548</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Actually, this is still a problem, even when not using require in the model. Initializer#load_application_classes runs, even when executing a gems task, which means that if the gem isn't installed, you end up with errors. Note this only happens in production or when `config.cache_classes = true`.

Here is how you can replicate:
1) Uninstall 'thoughtbot-paperclip' if you have it installed
2) New rails project, with vendored rails
3) `config.gem 'thoughtbot-paperclip', :lib =&gt; 'paperclip', :source =&gt; 'http://gems.github.com'`
4) `script/generate model foo`
5) `class Foo &lt; AR; has_attached_file :image; end`
6) RAILS_ENV=production rake gems

Patch against master attached, which just doesn't loaded classes if $rails_gem_installer is set:

@@@ ruby
def load_application_classes
  if configuration.cache_classes &amp;&amp; !$rails_gem_installer
@@@

PS: I'd love to see this backported into 2.2 as well. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Actually, this is still a problem, even when not using require
in the model. Initializer#load_application_classes runs, even when
executing a gems task, which means that if the gem isn't installed,
you end up with errors. Note this only happens in production or
when &lt;code&gt;config.cache_classes = true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is how you can replicate: 1) Uninstall
'thoughtbot-paperclip' if you have it installed 2) New rails
project, with vendored rails 3) &lt;code&gt;config.gem
'thoughtbot-paperclip', :lib =&amp;gt; 'paperclip', :source =&amp;gt;
'http://gems.github.com'&lt;/code&gt; 4) &lt;code&gt;script/generate model
foo&lt;/code&gt; 5) &lt;code&gt;class Foo &amp;lt; AR; has_attached_file :image;
end&lt;/code&gt; 6) RAILS_ENV=production rake gems&lt;/p&gt;
&lt;p&gt;Patch against master attached, which just doesn't loaded classes
if $rails_gem_installer is set:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
def load_application_classes
  if configuration.cache_classes &amp;amp;&amp;amp; !$rails_gem_installer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PS: I'd love to see this backported into 2.2 as well. :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-07T17:50:44+00:00</created-at>
      <creator-id type="integer">23266</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.2.2 bug cache_classes initializer load_application_classes railties
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1548</number>
      <permalink>gem-tasks-fail-when-cache_classestrue</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug cache_classes edge gems initializer load_application_classes patch railties rake</tag>
      <title>Gem tasks fail when cache_classes=true</title>
      <updated-at type="datetime">2009-01-07T17:50:46+00:00</updated-at>
      <user-id type="integer">9616</user-id>
      <version type="integer">3</version>
      <user-name>dstrelau</user-name>
      <creator-name>Richie Vos</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1548</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm going to bump this, in the hopes that someone might take a look and care, seeing as this bug essentially makes rake gems:install useless for satisfying gem dependencies on a production server.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm going to bump this, in the hopes that someone might take a
look and care, seeing as this bug essentially makes rake
gems:install useless for satisfying gem dependencies on a
production server.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-29T16:22:29+00:00</created-at>
      <creator-id type="integer">23266</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: bug cache_classes edge gems initializer load_application_classes patch railties rake
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1548</number>
      <permalink>gem-tasks-fail-when-cache_classestrue</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug gems initializer patch railties rake tiny</tag>
      <title>Gem tasks fail when cache_classes=true</title>
      <updated-at type="datetime">2009-01-29T16:22:33+00:00</updated-at>
      <user-id type="integer">9616</user-id>
      <version type="integer">4</version>
      <user-name>dstrelau</user-name>
      <creator-name>Richie Vos</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1548</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Take a look at #1750 - I've attached a patch that basically bails out of the initializer if rake gems tasks are being run and gems are missing. This *should* stop anything like this from happening.

Also see #802, which has probably handled this case already by turning off eager loading in all rake tasks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Take a look at &lt;a href=&quot;/projects/8994/tickets/1750&quot; title=&quot;Ticket #1750&quot;&gt;#1750&lt;/a&gt; - I've attached a patch that basically
bails out of the initializer if rake gems tasks are being run and
gems are missing. This &lt;em&gt;should&lt;/em&gt; stop anything like this from
happening.&lt;/p&gt;
&lt;p&gt;Also see &lt;a href=&quot;/projects/8994/tickets/802&quot; title=&quot;Ticket #802&quot;&gt;#802&lt;/a&gt;, which has probably handled this case
already by turning off eager loading in all rake tasks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-18T01:15:01+00:00</created-at>
      <creator-id type="integer">23266</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1548</number>
      <permalink>gem-tasks-fail-when-cache_classestrue</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug gems initializer patch railties rake tiny</tag>
      <title>Gem tasks fail when cache_classes=true</title>
      <updated-at type="datetime">2009-02-18T01:15:03+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">5</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Richie Vos</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1548</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Please reopen if this is still an issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please reopen if this is still an issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-08T20:54:53+01:00</created-at>
      <creator-id type="integer">23266</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1548</number>
      <permalink>gem-tasks-fail-when-cache_classestrue</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>bug gems initializer patch railties rake tiny</tag>
      <title>Gem tasks fail when cache_classes=true</title>
      <updated-at type="datetime">2009-08-08T20:54:56+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">6</version>
      <user-name>Pratik</user-name>
      <creator-name>Richie Vos</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1548</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>659a9793168a6f61cb4ff630bb9f71d4e63c582c</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-07T17:50:44+00:00</created-at>
      <filename>fix-gems-tasks-against-2f9231.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">76135</id>
      <size type="integer">1083</size>
      <uploader-id type="integer">9616</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/76135/fix-gems-tasks-against-2f9231.patch</url>
    </attachment>
  </attachments>
</ticket>
