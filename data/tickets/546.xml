<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-03T16:39:48+01:00</created-at>
  <creator-id type="integer">18589</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">546</number>
  <permalink>error-in-ar-associationpreload-classmethods-preload_associations-when-records-are-from-multiple-classes</permalink>
  <priority type="integer">42</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>eager_loading polymorphic preload_associaitons</tag>
  <title>Error in AR::AssociationPreload::ClassMethods#preload_associations when records are from multiple classes</title>
  <updated-at type="datetime">2008-10-05T15:17:37+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>acechase</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/546</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This is a similar problem to the one I created a ticket for earlier, here:
http://dev.rubyonrails.org/ticket/11154
which was subsequently fixed:
http://dev.rubyonrails.org/changeset/8896

However, on further testing I believe that the fix should have been at one level higher up, in #preload_associations, rather than #preload_one_association. I have a forked version of rails where I've made the fix (on the 2.1 branch), which can be seen here (apologies for the debug clutter):
http://github.com/glyde/rails/commit/e9b955eff8f420ebd842db827260708a23e3347a

The error occurs when trying to do an include like this:
@@@ruby
find(:all, :includes =&gt; {:a =&gt; {:b =&gt; :c}}
@@@
where both :b and :c are polymorphic associations. In this scenario the :b associations are fetched appropriately, but then :c is loaded incorrectly because the #preload_associations method is doing:
@@@ruby
parents.first.class.preload_associations(parents, child)
@@@
where 'parents' is not guaranteed to contain records of only one type. So what ends up happening is the preload code has the incorrect class_name specified in the conditions for the queries on :c. 

I believe that if the parents.group_by change is added to #preload_associations than the similar records.group_by in #preload_one_association can be removed, because all records will be of one type by the time they get to that method.

Unfortunately, I don't have time at the moment to create a proper test case, but hopefully the bug is self-evident when looking at the #preload_associations method in light nested polymorphic includes.</original-body>
  <latest-body>This is a similar problem to the one I created a ticket for earlier, here:
http://dev.rubyonrails.org/ticket/11154
which was subsequently fixed:
http://dev.rubyonrails.org/changeset/8896

However, on further testing I believe that the fix should have been at one level higher up, in #preload_associations, rather than #preload_one_association. I have a forked version of rails where I've made the fix (on the 2.1 branch), which can be seen here (apologies for the debug clutter):
http://github.com/glyde/rails/commit/e9b955eff8f420ebd842db827260708a23e3347a

The error occurs when trying to do an include like this:
@@@ruby
find(:all, :includes =&gt; {:a =&gt; {:b =&gt; :c}}
@@@
where both :b and :c are polymorphic associations. In this scenario the :b associations are fetched appropriately, but then :c is loaded incorrectly because the #preload_associations method is doing:
@@@ruby
parents.first.class.preload_associations(parents, child)
@@@
where 'parents' is not guaranteed to contain records of only one type. So what ends up happening is the preload code has the incorrect class_name specified in the conditions for the queries on :c. 

I believe that if the parents.group_by change is added to #preload_associations than the similar records.group_by in #preload_one_association can be removed, because all records will be of one type by the time they get to that method.

Unfortunately, I don't have time at the moment to create a proper test case, but hopefully the bug is self-evident when looking at the #preload_associations method in light nested polymorphic includes.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
This is a similar problem to the one I created a ticket for earlier, here:
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://dev.rubyonrails.org/ticket/11154&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
which was subsequently fixed:
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://dev.rubyonrails.org/changeset/8896&quot;&gt;http://dev.rubyonrails.org/chang...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
However, on further testing I believe that the fix should have been at one level higher up, in #preload_associations, rather than #preload_one_association. I have a forked version of rails where I've made the fix (on the 2.1 branch), which can be seen here (apologies for the debug clutter):
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/glyde/rails/commit/e9b955eff8f420ebd842db827260708a23e3347a&quot;&gt;http://github.com/glyde/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
The error occurs when trying to do an include like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;find(:all, :includes =&amp;gt; {:a =&amp;gt; {:b =&amp;gt; :c}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
where both :b and :c are polymorphic associations. In this scenario the :b associations are fetched appropriately, but then :c is loaded incorrectly because the #preload_associations method is doing:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;parents.first.class.preload_associations(parents, child)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
where 'parents' is not guaranteed to contain records of only one type. So what ends up happening is the preload code has the incorrect class_name specified in the conditions for the queries on :c.
&lt;/p&gt;&lt;p&gt;
I believe that if the parents.group_by change is added to #preload_associations than the similar records.group_by in #preload_one_association can be removed, because all records will be of one type by the time they get to that method.
&lt;/p&gt;&lt;p&gt;
Unfortunately, I don't have time at the moment to create a proper test case, but hopefully the bug is self-evident when looking at the #preload_associations method in light nested polymorphic includes.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is a similar problem to the one I created a ticket for earlier, here:
http://dev.rubyonrails.org/ticket/11154
which was subsequently fixed:
http://dev.rubyonrails.org/changeset/8896

However, on further testing I believe that the fix should have been at one level higher up, in #preload_associations, rather than #preload_one_association. I have a forked version of rails where I've made the fix (on the 2.1 branch), which can be seen here (apologies for the debug clutter):
http://github.com/glyde/rails/commit/e9b955eff8f420ebd842db827260708a23e3347a

The error occurs when trying to do an include like this:
@@@ruby
find(:all, :includes =&gt; {:a =&gt; {:b =&gt; :c}}
@@@
where both :b and :c are polymorphic associations. In this scenario the :b associations are fetched appropriately, but then :c is loaded incorrectly because the #preload_associations method is doing:
@@@ruby
parents.first.class.preload_associations(parents, child)
@@@
where 'parents' is not guaranteed to contain records of only one type. So what ends up happening is the preload code has the incorrect class_name specified in the conditions for the queries on :c. 

I believe that if the parents.group_by change is added to #preload_associations than the similar records.group_by in #preload_one_association can be removed, because all records will be of one type by the time they get to that method.

Unfortunately, I don't have time at the moment to create a proper test case, but hopefully the bug is self-evident when looking at the #preload_associations method in light nested polymorphic includes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This is a similar problem to the one I created a ticket for earlier, here:
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://dev.rubyonrails.org/ticket/11154&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
which was subsequently fixed:
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://dev.rubyonrails.org/changeset/8896&quot;&gt;http://dev.rubyonrails.org/chang...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
However, on further testing I believe that the fix should have been at one level higher up, in #preload_associations, rather than #preload_one_association. I have a forked version of rails where I've made the fix (on the 2.1 branch), which can be seen here (apologies for the debug clutter):
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/glyde/rails/commit/e9b955eff8f420ebd842db827260708a23e3347a&quot;&gt;http://github.com/glyde/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
The error occurs when trying to do an include like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;find(:all, :includes =&amp;gt; {:a =&amp;gt; {:b =&amp;gt; :c}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
where both :b and :c are polymorphic associations. In this scenario the :b associations are fetched appropriately, but then :c is loaded incorrectly because the #preload_associations method is doing:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;parents.first.class.preload_associations(parents, child)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
where 'parents' is not guaranteed to contain records of only one type. So what ends up happening is the preload code has the incorrect class_name specified in the conditions for the queries on :c.
&lt;/p&gt;&lt;p&gt;
I believe that if the parents.group_by change is added to #preload_associations than the similar records.group_by in #preload_one_association can be removed, because all records will be of one type by the time they get to that method.
&lt;/p&gt;&lt;p&gt;
Unfortunately, I don't have time at the moment to create a proper test case, but hopefully the bug is self-evident when looking at the #preload_associations method in light nested polymorphic includes.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-03T16:39:48+01:00</created-at>
      <creator-id type="integer">18589</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">546</number>
      <permalink>error-in-ar-associationpreload-classmethods-preload_associations-when-records-are-from-multiple-classes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>eager_loading polymorphic preload_associaitons</tag>
      <title>Error in AR::AssociationPreload::ClassMethods#preload_associations when records are from multiple classes</title>
      <updated-at type="datetime">2008-07-03T16:39:48+01:00</updated-at>
      <user-id type="integer">18589</user-id>
      <version type="integer">1</version>
      <user-name>acechase</user-name>
      <creator-name>acechase</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/546</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-05T15:17:33+01:00</created-at>
      <creator-id type="integer">18589</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">546</number>
      <permalink>error-in-ar-associationpreload-classmethods-preload_associations-when-records-are-from-multiple-classes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>eager_loading polymorphic preload_associaitons</tag>
      <title>Error in AR::AssociationPreload::ClassMethods#preload_associations when records are from multiple classes</title>
      <updated-at type="datetime">2008-10-05T15:17:37+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>acechase</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/546</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
