<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-19T17:15:27+00:00</created-at>
  <creator-id type="integer">115648</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6454</number>
  <permalink>custom-methods-return-values-wont-apply-on-form-helper-like-text_field</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Custom methods' return values won't apply on form helper like text_field!</title>
  <updated-at type="datetime">2011-02-19T17:15:29+00:00</updated-at>
  <user-id type="integer">115648</user-id>
  <version type="integer">1</version>
  <user-name>habermann24</user-name>
  <creator-name>habermann24</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6454</url>
  <priority-name nil="true"></priority-name>
  <original-body>Say there is the following model with a database column 'reference_id' (of type string).

@@@

class Post &lt; ActiveRecord::Base

  def reference_id
    if self.new_record?
      return &quot;test&quot;
    else
      return self[:reference_id]
    end
  end

end

@@@

Somewhere in the form one would do:

@@@

builder.text_field :subject

@@@

In Rails 3.0.0 the behaviour was that when i render &quot;new&quot; with a new record assigned, the text_field would get the value &quot;test&quot; (because that is what the method returns).

Now the text_field will be empty. Rails probably just reads the attribute (which is still nil) and doesn't call the method to fill out the value.

I used that technique to provide my own attribute methods for default values etc. Now i always have to provide &quot;:value =&gt; @post.reference_id&quot; to the text_field, so that i get the same result.

Is this supposed to be the new behaviour? Or was that an unintentional change / bug?

I hope this example is clear enough!</original-body>
  <latest-body>Say there is the following model with a database column 'reference_id' (of type string).

@@@

class Post &lt; ActiveRecord::Base

  def reference_id
    if self.new_record?
      return &quot;test&quot;
    else
      return self[:reference_id]
    end
  end

end

@@@

Somewhere in the form one would do:

@@@

builder.text_field :subject

@@@

In Rails 3.0.0 the behaviour was that when i render &quot;new&quot; with a new record assigned, the text_field would get the value &quot;test&quot; (because that is what the method returns).

Now the text_field will be empty. Rails probably just reads the attribute (which is still nil) and doesn't call the method to fill out the value.

I used that technique to provide my own attribute methods for default values etc. Now i always have to provide &quot;:value =&gt; @post.reference_id&quot; to the text_field, so that i get the same result.

Is this supposed to be the new behaviour? Or was that an unintentional change / bug?

I hope this example is clear enough!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Say there is the following model with a database column
'reference_id' (of type string).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
class Post &amp;lt; ActiveRecord::Base

  def reference_id
    if self.new_record?
      return &quot;test&quot;
    else
      return self[:reference_id]
    end
  end

end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Somewhere in the form one would do:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
builder.text_field :subject&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In Rails 3.0.0 the behaviour was that when i render &quot;new&quot; with a
new record assigned, the text_field would get the value &quot;test&quot;
(because that is what the method returns).&lt;/p&gt;
&lt;p&gt;Now the text_field will be empty. Rails probably just reads the
attribute (which is still nil) and doesn't call the method to fill
out the value.&lt;/p&gt;
&lt;p&gt;I used that technique to provide my own attribute methods for
default values etc. Now i always have to provide &quot;:value =&amp;gt;
@post.reference_id&quot; to the text_field, so that i get the same
result.&lt;/p&gt;
&lt;p&gt;Is this supposed to be the new behaviour? Or was that an
unintentional change / bug?&lt;/p&gt;
&lt;p&gt;I hope this example is clear enough!&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Say there is the following model with a database column 'reference_id' (of type string).

@@@

class Post &lt; ActiveRecord::Base

  def reference_id
    if self.new_record?
      return &quot;test&quot;
    else
      return self[:reference_id]
    end
  end

end

@@@

Somewhere in the form one would do:

@@@

builder.text_field :subject

@@@

In Rails 3.0.0 the behaviour was that when i render &quot;new&quot; with a new record assigned, the text_field would get the value &quot;test&quot; (because that is what the method returns).

Now the text_field will be empty. Rails probably just reads the attribute (which is still nil) and doesn't call the method to fill out the value.

I used that technique to provide my own attribute methods for default values etc. Now i always have to provide &quot;:value =&gt; @post.reference_id&quot; to the text_field, so that i get the same result.

Is this supposed to be the new behaviour? Or was that an unintentional change / bug?

I hope this example is clear enough!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Say there is the following model with a database column
'reference_id' (of type string).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
class Post &amp;lt; ActiveRecord::Base

  def reference_id
    if self.new_record?
      return &quot;test&quot;
    else
      return self[:reference_id]
    end
  end

end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Somewhere in the form one would do:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
builder.text_field :subject&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In Rails 3.0.0 the behaviour was that when i render &quot;new&quot; with a
new record assigned, the text_field would get the value &quot;test&quot;
(because that is what the method returns).&lt;/p&gt;
&lt;p&gt;Now the text_field will be empty. Rails probably just reads the
attribute (which is still nil) and doesn't call the method to fill
out the value.&lt;/p&gt;
&lt;p&gt;I used that technique to provide my own attribute methods for
default values etc. Now i always have to provide &quot;:value =&amp;gt;
@post.reference_id&quot; to the text_field, so that i get the same
result.&lt;/p&gt;
&lt;p&gt;Is this supposed to be the new behaviour? Or was that an
unintentional change / bug?&lt;/p&gt;
&lt;p&gt;I hope this example is clear enough!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-19T17:15:27+00:00</created-at>
      <creator-id type="integer">115648</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6454</number>
      <permalink>custom-methods-return-values-wont-apply-on-form-helper-like-text_field</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Custom methods' return values won't apply on form helper like text_field!</title>
      <updated-at type="datetime">2011-02-19T17:15:29+00:00</updated-at>
      <user-id type="integer">115648</user-id>
      <version type="integer">1</version>
      <user-name>habermann24</user-name>
      <creator-name>habermann24</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6454</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
