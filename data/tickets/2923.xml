<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-07-20T07:15:20+01:00</created-at>
  <creator-id type="integer">34034</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2923</number>
  <permalink>named_scope-through-a-has_many-or-has_many-through-generates-redundant-conditions</permalink>
  <priority type="integer">2006</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>named_scope patch</tag>
  <title>named_scope through a has_many (or has_many through) generates redundant conditions</title>
  <updated-at type="datetime">2010-10-09T04:02:14+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">6</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Elliot Winkler</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2923</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Setup:

    class Shop &lt; ActiveRecord::Base
      has_many :dogs
    end
    class Dog &lt; ActiveRecord::Base
      named_scope :attractive, :conditions =&gt; { &quot;color&quot; =&gt; %w(yellow black) }
    end

Calling shop.dogs.attractive.to_a generates this SQL:

    SELECT * FROM &quot;dogs&quot; WHERE (&quot;dogs&quot;.shop_id = 1) AND ((&quot;dogs&quot;.&quot;color&quot; IN ('yellow','black')) AND (&quot;dogs&quot;.shop_id = 1))

when it should just be:

    SELECT * FROM &quot;dogs&quot; WHERE ((&quot;dogs&quot;.&quot;color&quot; IN ('yellow','black')) AND (&quot;dogs&quot;.shop_id = 1))

The reason this is happening is in part due to #1960 and #2346, but also just a consequence of association proxy magic. What is happening here is essentially this:

    Dog.with_scope(:find =&gt; {:conditions =&gt; {:color =&gt; %w(yellow black)}}) do
      Dog.with_scope(:find =&gt; {:conditions =&gt; {:shop_id =&gt; 1}}) do
        Dog.find(:all, :conditions =&gt; { :shop_id =&gt; 1 })
      end
    end

when this should be happening:

    Dog.with_scope(:find =&gt; {:conditions =&gt; {:color =&gt; %w(yellow black)}}) do
      Dog.find(:all, :conditions =&gt; { :shop_id =&gt; 1 })
    end

That is, the second scope is being created when it should not be. The key is this line in Scope#method_missing:

    if current_scoped_methods_when_defined &amp;&amp; !scoped_methods.include?(current_scoped_methods_when_defined)

That seems harmless, right? If the Scope object was created within a scope, apply the scope, unless it's already been applied. Except that here the Scope object *wasn't* created within a scope, since we went through an association, so the second scope shouldn't be applied, right? And yet it is. What gives?

The culprit is this line in Scope.new:

    @current_scoped_methods_when_defined = proxy_scope.send(:current_scoped_methods)

Turns out that since proxy_scope is an association here, when it forwards current_scoped_methods to Dog, it also wraps that in a scope. So this variable ends up storing a scope that will already be applied later.

All that to say, the attached patch+test (tested against 2-3-stable and master) simply fixes AssociationCollection to *not* wrap calls to current_scoped_methods in a scope. Kind of a hack, but it works...</original-body>
  <latest-body>Setup:

    class Shop &lt; ActiveRecord::Base
      has_many :dogs
    end
    class Dog &lt; ActiveRecord::Base
      named_scope :attractive, :conditions =&gt; { &quot;color&quot; =&gt; %w(yellow black) }
    end

Calling shop.dogs.attractive.to_a generates this SQL:

    SELECT * FROM &quot;dogs&quot; WHERE (&quot;dogs&quot;.shop_id = 1) AND ((&quot;dogs&quot;.&quot;color&quot; IN ('yellow','black')) AND (&quot;dogs&quot;.shop_id = 1))

when it should just be:

    SELECT * FROM &quot;dogs&quot; WHERE ((&quot;dogs&quot;.&quot;color&quot; IN ('yellow','black')) AND (&quot;dogs&quot;.shop_id = 1))

The reason this is happening is in part due to #1960 and #2346, but also just a consequence of association proxy magic. What is happening here is essentially this:

    Dog.with_scope(:find =&gt; {:conditions =&gt; {:color =&gt; %w(yellow black)}}) do
      Dog.with_scope(:find =&gt; {:conditions =&gt; {:shop_id =&gt; 1}}) do
        Dog.find(:all, :conditions =&gt; { :shop_id =&gt; 1 })
      end
    end

when this should be happening:

    Dog.with_scope(:find =&gt; {:conditions =&gt; {:color =&gt; %w(yellow black)}}) do
      Dog.find(:all, :conditions =&gt; { :shop_id =&gt; 1 })
    end

That is, the second scope is being created when it should not be. The key is this line in Scope#method_missing:

    if current_scoped_methods_when_defined &amp;&amp; !scoped_methods.include?(current_scoped_methods_when_defined)

That seems harmless, right? If the Scope object was created within a scope, apply the scope, unless it's already been applied. Except that here the Scope object *wasn't* created within a scope, since we went through an association, so the second scope shouldn't be applied, right? And yet it is. What gives?

The culprit is this line in Scope.new:

    @current_scoped_methods_when_defined = proxy_scope.send(:current_scoped_methods)

Turns out that since proxy_scope is an association here, when it forwards current_scoped_methods to Dog, it also wraps that in a scope. So this variable ends up storing a scope that will already be applied later.

All that to say, the attached patch+test (tested against 2-3-stable and master) simply fixes AssociationCollection to *not* wrap calls to current_scoped_methods in a scope. Kind of a hack, but it works...</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Setup:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Shop &amp;lt; ActiveRecord::Base
  has_many :dogs
end
class Dog &amp;lt; ActiveRecord::Base
  named_scope :attractive, :conditions =&amp;gt; { &quot;color&quot; =&amp;gt; %w(yellow black) }
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Calling shop.dogs.attractive.to_a generates this SQL:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT * FROM &quot;dogs&quot; WHERE (&quot;dogs&quot;.shop_id = 1) AND ((&quot;dogs&quot;.&quot;color&quot; IN ('yellow','black')) AND (&quot;dogs&quot;.shop_id = 1))
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;when it should just be:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT * FROM &quot;dogs&quot; WHERE ((&quot;dogs&quot;.&quot;color&quot; IN ('yellow','black')) AND (&quot;dogs&quot;.shop_id = 1))
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The reason this is happening is in part due to &lt;a href=&quot;/projects/8994/tickets/1960&quot; title=&quot;Ticket #1960&quot;&gt;#1960&lt;/a&gt; and
&lt;a href=&quot;/projects/8994/tickets/2346&quot; title=&quot;Ticket #2346&quot;&gt;#2346&lt;/a&gt;, but also just a consequence of
association proxy magic. What is happening here is essentially
this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Dog.with_scope(:find =&amp;gt; {:conditions =&amp;gt; {:color =&amp;gt; %w(yellow black)}}) do
  Dog.with_scope(:find =&amp;gt; {:conditions =&amp;gt; {:shop_id =&amp;gt; 1}}) do
    Dog.find(:all, :conditions =&amp;gt; { :shop_id =&amp;gt; 1 })
  end
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;when this should be happening:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Dog.with_scope(:find =&amp;gt; {:conditions =&amp;gt; {:color =&amp;gt; %w(yellow black)}}) do
  Dog.find(:all, :conditions =&amp;gt; { :shop_id =&amp;gt; 1 })
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That is, the second scope is being created when it should not
be. The key is this line in Scope#method_missing:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if current_scoped_methods_when_defined &amp;amp;&amp;amp; !scoped_methods.include?(current_scoped_methods_when_defined)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That seems harmless, right? If the Scope object was created
within a scope, apply the scope, unless it's already been applied.
Except that here the Scope object &lt;em&gt;wasn't&lt;/em&gt; created within a
scope, since we went through an association, so the second scope
shouldn't be applied, right? And yet it is. What gives?&lt;/p&gt;
&lt;p&gt;The culprit is this line in Scope.new:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@current_scoped_methods_when_defined = proxy_scope.send(:current_scoped_methods)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Turns out that since proxy_scope is an association here, when it
forwards current_scoped_methods to Dog, it also wraps that in a
scope. So this variable ends up storing a scope that will already
be applied later.&lt;/p&gt;
&lt;p&gt;All that to say, the attached patch+test (tested against
2-3-stable and master) simply fixes AssociationCollection to
&lt;em&gt;not&lt;/em&gt; wrap calls to current_scoped_methods in a scope. Kind
of a hack, but it works...&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Setup:

    class Shop &lt; ActiveRecord::Base
      has_many :dogs
    end
    class Dog &lt; ActiveRecord::Base
      named_scope :attractive, :conditions =&gt; { &quot;color&quot; =&gt; %w(yellow black) }
    end

Calling shop.dogs.attractive.to_a generates this SQL:

    SELECT * FROM &quot;dogs&quot; WHERE (&quot;dogs&quot;.shop_id = 1) AND ((&quot;dogs&quot;.&quot;color&quot; IN ('yellow','black')) AND (&quot;dogs&quot;.shop_id = 1))

when it should just be:

    SELECT * FROM &quot;dogs&quot; WHERE ((&quot;dogs&quot;.&quot;color&quot; IN ('yellow','black')) AND (&quot;dogs&quot;.shop_id = 1))

The reason this is happening is in part due to #1960 and #2346, but also just a consequence of association proxy magic. What is happening here is essentially this:

    Dog.with_scope(:find =&gt; {:conditions =&gt; {:color =&gt; %w(yellow black)}}) do
      Dog.with_scope(:find =&gt; {:conditions =&gt; {:shop_id =&gt; 1}}) do
        Dog.find(:all, :conditions =&gt; { :shop_id =&gt; 1 })
      end
    end

when this should be happening:

    Dog.with_scope(:find =&gt; {:conditions =&gt; {:color =&gt; %w(yellow black)}}) do
      Dog.find(:all, :conditions =&gt; { :shop_id =&gt; 1 })
    end

That is, the second scope is being created when it should not be. The key is this line in Scope#method_missing:

    if current_scoped_methods_when_defined &amp;&amp; !scoped_methods.include?(current_scoped_methods_when_defined)

That seems harmless, right? If the Scope object was created within a scope, apply the scope, unless it's already been applied. Except that here the Scope object *wasn't* created within a scope, since we went through an association, so the second scope shouldn't be applied, right? And yet it is. What gives?

The culprit is this line in Scope.new:

    @current_scoped_methods_when_defined = proxy_scope.send(:current_scoped_methods)

Turns out that since proxy_scope is an association here, when it forwards current_scoped_methods to Dog, it also wraps that in a scope. So this variable ends up storing a scope that will already be applied later.

All that to say, the attached patch+test (tested against 2-3-stable and master) simply fixes AssociationCollection to *not* wrap calls to current_scoped_methods in a scope. Kind of a hack, but it works...</body>
      <body-html>&lt;div&gt;&lt;p&gt;Setup:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Shop &amp;lt; ActiveRecord::Base
  has_many :dogs
end
class Dog &amp;lt; ActiveRecord::Base
  named_scope :attractive, :conditions =&amp;gt; { &quot;color&quot; =&amp;gt; %w(yellow black) }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Calling shop.dogs.attractive.to_a generates this SQL:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT * FROM &quot;dogs&quot; WHERE (&quot;dogs&quot;.shop_id = 1) AND ((&quot;dogs&quot;.&quot;color&quot; IN ('yellow','black')) AND (&quot;dogs&quot;.shop_id = 1))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;when it should just be:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT * FROM &quot;dogs&quot; WHERE ((&quot;dogs&quot;.&quot;color&quot; IN ('yellow','black')) AND (&quot;dogs&quot;.shop_id = 1))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The reason this is happening is in part due to &lt;a href=
&quot;/projects/8994/tickets/1960&quot; title=&quot;Ticket #1960&quot;&gt;#1960&lt;/a&gt; and
&lt;a href=&quot;/projects/8994/tickets/2346&quot; title=
&quot;Ticket #2346&quot;&gt;#2346&lt;/a&gt;, but also just a consequence of
association proxy magic. What is happening here is essentially
this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Dog.with_scope(:find =&amp;gt; {:conditions =&amp;gt; {:color =&amp;gt; %w(yellow black)}}) do
  Dog.with_scope(:find =&amp;gt; {:conditions =&amp;gt; {:shop_id =&amp;gt; 1}}) do
    Dog.find(:all, :conditions =&amp;gt; { :shop_id =&amp;gt; 1 })
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;when this should be happening:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Dog.with_scope(:find =&amp;gt; {:conditions =&amp;gt; {:color =&amp;gt; %w(yellow black)}}) do
  Dog.find(:all, :conditions =&amp;gt; { :shop_id =&amp;gt; 1 })
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That is, the second scope is being created when it should not
be. The key is this line in Scope#method_missing:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if current_scoped_methods_when_defined &amp;amp;&amp;amp; !scoped_methods.include?(current_scoped_methods_when_defined)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That seems harmless, right? If the Scope object was created
within a scope, apply the scope, unless it's already been applied.
Except that here the Scope object &lt;em&gt;wasn't&lt;/em&gt; created within a
scope, since we went through an association, so the second scope
shouldn't be applied, right? And yet it is. What gives?&lt;/p&gt;
&lt;p&gt;The culprit is this line in Scope.new:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@current_scoped_methods_when_defined = proxy_scope.send(:current_scoped_methods)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Turns out that since proxy_scope is an association here, when it
forwards current_scoped_methods to Dog, it also wraps that in a
scope. So this variable ends up storing a scope that will already
be applied later.&lt;/p&gt;
&lt;p&gt;All that to say, the attached patch+test (tested against
2-3-stable and master) simply fixes AssociationCollection to
&lt;em&gt;not&lt;/em&gt; wrap calls to current_scoped_methods in a scope. Kind
of a hack, but it works...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-20T07:15:20+01:00</created-at>
      <creator-id type="integer">34034</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2923</number>
      <permalink>named_scope-through-a-has_many-or-has_many-through-generates-redundant-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>named_scope</tag>
      <title>named_scope through a has_many (or has_many through) generates redundant conditions</title>
      <updated-at type="datetime">2009-07-20T07:15:23+01:00</updated-at>
      <user-id type="integer">34034</user-id>
      <version type="integer">1</version>
      <user-name>Elliot Winkler</user-name>
      <creator-name>Elliot Winkler</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2923</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-21T03:24:20+01:00</created-at>
      <creator-id type="integer">34034</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: named_scope
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2923</number>
      <permalink>named_scope-through-a-has_many-or-has_many-through-generates-redundant-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>named_scope patch</tag>
      <title>named_scope through a has_many (or has_many through) generates redundant conditions</title>
      <updated-at type="datetime">2009-07-21T03:24:25+01:00</updated-at>
      <user-id type="integer">34034</user-id>
      <version type="integer">2</version>
      <user-name>Elliot Winkler</user-name>
      <creator-name>Elliot Winkler</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2923</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Had the same problem with the following constellation. The patch fixed it as well. 

@@@ ruby
class Employment &lt; ActiveRecord::Base
  belongs_to :user

  has_many :silblings,
    :primary_key =&gt; :user_id,
    :foreign_key =&gt; :user_id,
    :class_name =&gt; 'Employment'
end

class User
  has_many :employments
end
@@@

(see also http://stackoverflow.com/questions/1623743/silblings-in-hasmany-relationship)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Had the same problem with the following constellation. The patch
fixed it as well.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Employment &amp;lt; ActiveRecord::Base
  belongs_to :user

  has_many :silblings,
    :primary_key =&amp;gt; :user_id,
    :foreign_key =&amp;gt; :user_id,
    :class_name =&amp;gt; 'Employment'
end

class User
  has_many :employments
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(see also &lt;a href=
&quot;http://stackoverflow.com/questions/1623743/silblings-in-hasmany-relationship&quot;&gt;
http://stackoverflow.com/questions/1623743/silblings-in-hasmany-rel...&lt;/a&gt;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-26T09:24:15+00:00</created-at>
      <creator-id type="integer">34034</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2923</number>
      <permalink>named_scope-through-a-has_many-or-has_many-through-generates-redundant-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>named_scope patch</tag>
      <title>named_scope through a has_many (or has_many through) generates redundant conditions</title>
      <updated-at type="datetime">2009-10-26T09:24:19+00:00</updated-at>
      <user-id type="integer">62959</user-id>
      <version type="integer">3</version>
      <user-name>Reto</user-name>
      <creator-name>Elliot Winkler</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2923</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm so glad that someone found this issue.  Any word on when this will be fixed?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm so glad that someone found this issue. Any word on when this
will be fixed?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-06T22:21:21+00:00</created-at>
      <creator-id type="integer">34034</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2923</number>
      <permalink>named_scope-through-a-has_many-or-has_many-through-generates-redundant-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>named_scope patch</tag>
      <title>named_scope through a has_many (or has_many through) generates redundant conditions</title>
      <updated-at type="datetime">2009-11-06T22:21:26+00:00</updated-at>
      <user-id type="integer">24763</user-id>
      <version type="integer">4</version>
      <user-name>Jon Druse</user-name>
      <creator-name>Elliot Winkler</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2923</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:54+01:00</created-at>
      <creator-id type="integer">34034</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2923</number>
      <permalink>named_scope-through-a-has_many-or-has_many-through-generates-redundant-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>named_scope patch</tag>
      <title>named_scope through a has_many (or has_many through) generates redundant conditions</title>
      <updated-at type="datetime">2010-05-04T18:48:54+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Elliot Winkler</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2923</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-09T04:02:10+01:00</created-at>
      <creator-id type="integer">34034</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2923</number>
      <permalink>named_scope-through-a-has_many-or-has_many-through-generates-redundant-conditions</permalink>
      <priority type="integer">2006</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>named_scope patch</tag>
      <title>named_scope through a has_many (or has_many through) generates redundant conditions</title>
      <updated-at type="datetime">2010-10-09T04:02:14+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">6</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Elliot Winkler</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2923</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>7b77421756a775e9606912b77e0510a2c4833a1f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-07-20T07:16:55+01:00</created-at>
      <filename>fix_redundant_conditions.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">224658</id>
      <size type="integer">2424</size>
      <uploader-id type="integer">34034</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/224658/fix_redundant_conditions.patch</url>
    </attachment>
  </attachments>
</ticket>
