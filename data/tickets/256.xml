<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-26T17:26:47+01:00</created-at>
  <creator-id type="integer">21318</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">256</number>
  <permalink>model-objects-are-falsely-marked-as-not-new-after-transaction-rollback</permalink>
  <priority type="integer">14200</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>2.0-stable activerecord activeresource tests transaction</tag>
  <title>Model objects are falsely marked as not-new after transaction rollback</title>
  <updated-at type="datetime">2008-08-29T16:41:11+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">4</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>pdietrich</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/256</url>
  <priority-name nil="true"></priority-name>
  <original-body>Consider the following code from a controller action:

@@@ ruby
begin
  @auction.transaction do
    @auction.save!
    @lot.auction = @auction
    @lot.save!
    flash[:notice] = 'Auction was successfully created.'
    redirect_to(@auction) 
  end
rescue  
  render :action =&gt; &quot;new&quot;
end
@@@

If no validations fail on @auction ActiveRecord considers it saved even if the transaction cannot be finished successfully (e.g. when @lot.save raises an exception). Hence @auction.new_record? will return false although the record is not saved in the DB.

This leads a problem in the view:

@@@ ruby
form_for(@auction)
@@@
will generate a put (to controller action 'update') instead of a post (to controller action 'create').

I think the right way to fix this is to remember which model objects have been saved in a transaction and to revert their state after rollback. Any suggestions how this could be done the best?</original-body>
  <latest-body>Consider the following code from a controller action:

@@@ ruby
begin
  @auction.transaction do
    @auction.save!
    @lot.auction = @auction
    @lot.save!
    flash[:notice] = 'Auction was successfully created.'
    redirect_to(@auction) 
  end
rescue  
  render :action =&gt; &quot;new&quot;
end
@@@

If no validations fail on @auction ActiveRecord considers it saved even if the transaction cannot be finished successfully (e.g. when @lot.save raises an exception). Hence @auction.new_record? will return false although the record is not saved in the DB.

This leads a problem in the view:

@@@ ruby
form_for(@auction)
@@@
will generate a put (to controller action 'update') instead of a post (to controller action 'create').

I think the right way to fix this is to remember which model objects have been saved in a transaction and to revert their state after rollback. Any suggestions how this could be done the best?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Consider the following code from a controller action:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;begin
  @auction.transaction do
    @auction.save!
    @lot.auction = @auction
    @lot.save!
    flash[:notice] = 'Auction was successfully created.'
    redirect_to(@auction) 
  end
rescue  
  render :action =&amp;gt; &amp;quot;new&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
If no validations fail on @auction ActiveRecord considers it saved even if the transaction cannot be finished successfully (e.g. when @lot.save raises an exception). Hence @auction.new_record? will return false although the record is not saved in the DB.
&lt;/p&gt;&lt;p&gt;
This leads a problem in the view:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;form_for(@auction)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
will generate a put (to controller action 'update') instead of a post (to controller action 'create').
&lt;/p&gt;&lt;p&gt;
I think the right way to fix this is to remember which model objects have been saved in a transaction and to revert their state after rollback. Any suggestions how this could be done the best?
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Consider the following code from a controller action:

@@@ ruby
begin
  @auction.transaction do
    @auction.save!
    @lot.auction = @auction
    @lot.save!
    flash[:notice] = 'Auction was successfully created.'
    redirect_to(@auction) 
  end
rescue  
  render :action =&gt; &quot;new&quot;
end
@@@

If no validations fail on @auction ActiveRecord considers it saved even if the transaction cannot be finished successfully (e.g. when @lot.save raises an exception). Hence @auction.new_record? will return false although the record is not saved in the DB.

This leads a problem in the view:

@@@ ruby
form_for(@auction)
@@@
will generate a put (to controller action 'update') instead of a post (to controller action 'create').

I think the right way to fix this is to remember which model objects have been saved in a transaction and to revert their state after rollback. Any suggestions how this could be done the best?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Consider the following code from a controller action:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;begin
  @auction.transaction do
    @auction.save!
    @lot.auction = @auction
    @lot.save!
    flash[:notice] = 'Auction was successfully created.'
    redirect_to(@auction) 
  end
rescue  
  render :action =&amp;gt; &amp;quot;new&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
If no validations fail on @auction ActiveRecord considers it saved even if the transaction cannot be finished successfully (e.g. when @lot.save raises an exception). Hence @auction.new_record? will return false although the record is not saved in the DB.
&lt;/p&gt;&lt;p&gt;
This leads a problem in the view:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;form_for(@auction)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
will generate a put (to controller action 'update') instead of a post (to controller action 'create').
&lt;/p&gt;&lt;p&gt;
I think the right way to fix this is to remember which model objects have been saved in a transaction and to revert their state after rollback. Any suggestions how this could be done the best?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-26T17:26:47+01:00</created-at>
      <creator-id type="integer">21318</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">256</number>
      <permalink>model-objects-are-falsely-marked-as-not-new-after-transaction-rollback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Model objects are falsely marked as not-new after transaction rollback</title>
      <updated-at type="datetime">2008-05-26T17:26:47+01:00</updated-at>
      <user-id type="integer">21318</user-id>
      <version type="integer">1</version>
      <user-name>pdietrich</user-name>
      <creator-name>pdietrich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/256</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Also timestamps are not rolled back, so the new record may have an initialized created_at. (Related to #93.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Also timestamps are not rolled back, so the new record may have an initialized created_at. (Related to &lt;a href=&quot;/projects/8994/tickets/93&quot; title=&quot;Ticket #93&quot;&gt;#93&lt;/a&gt;.)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-26T18:17:27+01:00</created-at>
      <creator-id type="integer">21318</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">256</number>
      <permalink>model-objects-are-falsely-marked-as-not-new-after-transaction-rollback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Model objects are falsely marked as not-new after transaction rollback</title>
      <updated-at type="datetime">2008-05-26T18:17:27+01:00</updated-at>
      <user-id type="integer">11378</user-id>
      <version type="integer">2</version>
      <user-name>Xavier Noria</user-name>
      <creator-name>pdietrich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/256</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm attaching an update to TransactionTest#test_callback_rollback_in_create to expose this bug.  Perhaps it will be of use to someone who knows the transaction code well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I'm attaching an update to TransactionTest#test_callback_rollback_in_create to expose this bug.  Perhaps it will be of use to someone who knows the transaction code well.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-28T06:05:30+01:00</created-at>
      <creator-id type="integer">21318</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">256</number>
      <permalink>model-objects-are-falsely-marked-as-not-new-after-transaction-rollback</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Model objects are falsely marked as not-new after transaction rollback</title>
      <updated-at type="datetime">2008-05-28T06:05:30+01:00</updated-at>
      <user-id type="integer">10280</user-id>
      <version type="integer">3</version>
      <user-name>Carl Porth</user-name>
      <creator-name>pdietrich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/256</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-29T16:41:11+01:00</created-at>
      <creator-id type="integer">21318</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">256</number>
      <permalink>model-objects-are-falsely-marked-as-not-new-after-transaction-rollback-2</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.0-stable activerecord activeresource tests transaction</tag>
      <title>Model objects are falsely marked as not-new after transaction rollback</title>
      <updated-at type="datetime">2008-08-29T16:41:11+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">4</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>pdietrich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/256</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>16a81911d1d7c02af4f4d3eb06dbdf61b6fa1e92</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-28T06:05:30+01:00</created-at>
      <filename>updated_test_for_rollback_with_multiple_records.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">24752</id>
      <size type="integer">2379</size>
      <uploader-id type="integer">10280</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/24752/updated_test_for_rollback_with_multiple_records.diff</url>
    </attachment>
  </attachments>
</ticket>
