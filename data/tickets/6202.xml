<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-21T15:46:36+00:00</created-at>
  <creator-id type="integer">65306</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6202</number>
  <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>associations has_many_through rails_2_3_stable</tag>
  <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
  <updated-at type="datetime">2011-04-08T01:00:19+01:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">13</version>
  <user-name>rails</user-name>
  <creator-name>Blake Smith</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hello there,

I've found what I believe to be a bug in the 2-3-stable branch. Given a model that contains a has_many :through association that uses the :uniq option like so:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :user_events
  has_many :events, :through =&gt; :user_events, :uniq =&gt; true
end

class UserEvent &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :event
end

class Event &lt; ActiveRecord::Base
  has_many :user_events
  has_many :users, :through =&gt; :user_events
end
@@@

When I make a call for the elemnts of the unique association, the query generated uses a SELECT DISTINCT query like expected:

@@@ ruby
ree-1.8.7-2010.02 &gt; u = User.first
ree-1.8.7-2010.02 &gt; u.events
  Event Load (0.3ms)   SELECT DISTINCT &quot;events&quot;.* FROM &quot;events&quot; INNER JOIN &quot;user_events&quot; ON &quot;events&quot;.id = &quot;user_events&quot;.event_id WHERE ((&quot;user_events&quot;.user_id = 1)) 
 =&gt; [#&lt;Event id: 1, user_event_id: nil&gt;] 
@@@

However, when I make the call on the association's _ids method, it does not generate a DISTINCT query.

@@@ ruby
ree-1.8.7-2010.02 &gt; u.event_ids
  Event Load (0.2ms)   SELECT &quot;events&quot;.id FROM &quot;events&quot; INNER JOIN &quot;user_events&quot; ON &quot;events&quot;.id = &quot;user_events&quot;.event_id WHERE ((&quot;user_events&quot;.user_id = 1)) 
@@@

The expected behavior does seem to be working properly in Rails 3, attached is a patch that backports this behavior to the rails 2-3-stable branch.

Thanks!

Blake</original-body>
  <latest-body>Hello there,

I've found what I believe to be a bug in the 2-3-stable branch. Given a model that contains a has_many :through association that uses the :uniq option like so:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :user_events
  has_many :events, :through =&gt; :user_events, :uniq =&gt; true
end

class UserEvent &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :event
end

class Event &lt; ActiveRecord::Base
  has_many :user_events
  has_many :users, :through =&gt; :user_events
end
@@@

When I make a call for the elemnts of the unique association, the query generated uses a SELECT DISTINCT query like expected:

@@@ ruby
ree-1.8.7-2010.02 &gt; u = User.first
ree-1.8.7-2010.02 &gt; u.events
  Event Load (0.3ms)   SELECT DISTINCT &quot;events&quot;.* FROM &quot;events&quot; INNER JOIN &quot;user_events&quot; ON &quot;events&quot;.id = &quot;user_events&quot;.event_id WHERE ((&quot;user_events&quot;.user_id = 1)) 
 =&gt; [#&lt;Event id: 1, user_event_id: nil&gt;] 
@@@

However, when I make the call on the association's _ids method, it does not generate a DISTINCT query.

@@@ ruby
ree-1.8.7-2010.02 &gt; u.event_ids
  Event Load (0.2ms)   SELECT &quot;events&quot;.id FROM &quot;events&quot; INNER JOIN &quot;user_events&quot; ON &quot;events&quot;.id = &quot;user_events&quot;.event_id WHERE ((&quot;user_events&quot;.user_id = 1)) 
@@@

The expected behavior does seem to be working properly in Rails 3, attached is a patch that backports this behavior to the rails 2-3-stable branch.

Thanks!

Blake</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hello there,&lt;/p&gt;
&lt;p&gt;I've found what I believe to be a bug in the 2-3-stable branch.
Given a model that contains a has_many :through association that
uses the :uniq option like so:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :user_events
  has_many :events, :through =&amp;gt; :user_events, :uniq =&amp;gt; true
end

class UserEvent &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :event
end

class Event &amp;lt; ActiveRecord::Base
  has_many :user_events
  has_many :users, :through =&amp;gt; :user_events
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When I make a call for the elemnts of the unique association,
the query generated uses a SELECT DISTINCT query like expected:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;ree-1.8.7-2010.02 &amp;gt; u = User.first
ree-1.8.7-2010.02 &amp;gt; u.events
  Event Load (0.3ms)   SELECT DISTINCT &quot;events&quot;.* FROM &quot;events&quot; INNER JOIN &quot;user_events&quot; ON &quot;events&quot;.id = &quot;user_events&quot;.event_id WHERE ((&quot;user_events&quot;.user_id = 1)) 
 =&amp;gt; [#&amp;lt;Event id: 1, user_event_id: nil&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, when I make the call on the association's _ids method,
it does not generate a DISTINCT query.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;ree-1.8.7-2010.02 &amp;gt; u.event_ids
  Event Load (0.2ms)   SELECT &quot;events&quot;.id FROM &quot;events&quot; INNER JOIN &quot;user_events&quot; ON &quot;events&quot;.id = &quot;user_events&quot;.event_id WHERE ((&quot;user_events&quot;.user_id = 1))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The expected behavior does seem to be working properly in Rails
3, attached is a patch that backports this behavior to the rails
2-3-stable branch.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;p&gt;Blake&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello there,

I've found what I believe to be a bug in the 2-3-stable branch. Given a model that contains a has_many :through association that uses the :uniq option like so:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :user_events
  has_many :events, :through =&gt; :user_events, :uniq =&gt; true
end

class UserEvent &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :event
end

class Event &lt; ActiveRecord::Base
  has_many :user_events
  has_many :users, :through =&gt; :user_events
end
@@@

When I make a call for the elemnts of the unique association, the query generated uses a SELECT DISTINCT query like expected:

@@@ ruby
ree-1.8.7-2010.02 &gt; u = User.first
ree-1.8.7-2010.02 &gt; u.events
  Event Load (0.3ms)   SELECT DISTINCT &quot;events&quot;.* FROM &quot;events&quot; INNER JOIN &quot;user_events&quot; ON &quot;events&quot;.id = &quot;user_events&quot;.event_id WHERE ((&quot;user_events&quot;.user_id = 1)) 
 =&gt; [#&lt;Event id: 1, user_event_id: nil&gt;] 
@@@

However, when I make the call on the association's _ids method, it does not generate a DISTINCT query.

@@@ ruby
ree-1.8.7-2010.02 &gt; u.event_ids
  Event Load (0.2ms)   SELECT &quot;events&quot;.id FROM &quot;events&quot; INNER JOIN &quot;user_events&quot; ON &quot;events&quot;.id = &quot;user_events&quot;.event_id WHERE ((&quot;user_events&quot;.user_id = 1)) 
@@@

The expected behavior does seem to be working properly in Rails 3, attached is a patch that backports this behavior to the rails 2-3-stable branch.

Thanks!

Blake</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello there,&lt;/p&gt;
&lt;p&gt;I've found what I believe to be a bug in the 2-3-stable branch.
Given a model that contains a has_many :through association that
uses the :uniq option like so:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :user_events
  has_many :events, :through =&amp;gt; :user_events, :uniq =&amp;gt; true
end

class UserEvent &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :event
end

class Event &amp;lt; ActiveRecord::Base
  has_many :user_events
  has_many :users, :through =&amp;gt; :user_events
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When I make a call for the elemnts of the unique association,
the query generated uses a SELECT DISTINCT query like expected:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;ree-1.8.7-2010.02 &amp;gt; u = User.first
ree-1.8.7-2010.02 &amp;gt; u.events
  Event Load (0.3ms)   SELECT DISTINCT &quot;events&quot;.* FROM &quot;events&quot; INNER JOIN &quot;user_events&quot; ON &quot;events&quot;.id = &quot;user_events&quot;.event_id WHERE ((&quot;user_events&quot;.user_id = 1)) 
 =&amp;gt; [#&amp;lt;Event id: 1, user_event_id: nil&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, when I make the call on the association's _ids method,
it does not generate a DISTINCT query.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;ree-1.8.7-2010.02 &amp;gt; u.event_ids
  Event Load (0.2ms)   SELECT &quot;events&quot;.id FROM &quot;events&quot; INNER JOIN &quot;user_events&quot; ON &quot;events&quot;.id = &quot;user_events&quot;.event_id WHERE ((&quot;user_events&quot;.user_id = 1))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The expected behavior does seem to be working properly in Rails
3, attached is a patch that backports this behavior to the rails
2-3-stable branch.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;p&gt;Blake&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-21T15:46:36+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2010-12-21T15:46:37+00:00</updated-at>
      <user-id type="integer">65306</user-id>
      <version type="integer">1</version>
      <user-name>Blake Smith</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1

Thanks for fixing this! Bake it away, toys.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;Thanks for fixing this! Bake it away, toys.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-06T15:59:17+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-01-06T15:59:33+00:00</updated-at>
      <user-id type="integer">52328</user-id>
      <version type="integer">2</version>
      <user-name>Quigebo</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1

This is an annoying bug that we've had to patch our app for, and it'd be great to get it directly from the repo and delete our patch.  Pretty straight-forward fix as well, so can't be that much risk or effort in patching it in.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;This is an annoying bug that we've had to patch our app for, and
it'd be great to get it directly from the repo and delete our
patch. Pretty straight-forward fix as well, so can't be that much
risk or effort in patching it in.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-06T15:59:56+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-01-06T16:00:01+00:00</updated-at>
      <user-id type="integer">21359</user-id>
      <version type="integer">3</version>
      <user-name>Ryan Kinderman</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1
But, why not just upgrade to Rails 3? ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 But, why not just upgrade to Rails 3? ;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-06T16:05:00+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-01-06T16:05:06+00:00</updated-at>
      <user-id type="integer">131520</user-id>
      <version type="integer">4</version>
      <user-name>Keith Norman</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-06T16:15:21+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-01-06T16:15:27+00:00</updated-at>
      <user-id type="integer">45228</user-id>
      <version type="integer">5</version>
      <user-name>Joey Schoblaska</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-06T16:38:58+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-01-06T16:39:05+00:00</updated-at>
      <user-id type="integer">43174</user-id>
      <version type="integer">6</version>
      <user-name>Adam Walters</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 Simple fix, seems to work</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 Simple fix, seems to work&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-06T16:57:52+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-01-06T16:58:02+00:00</updated-at>
      <user-id type="integer">65299</user-id>
      <version type="integer">7</version>
      <user-name>anthony_caliendo</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-06T17:31:29+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-01-06T17:31:35+00:00</updated-at>
      <user-id type="integer">24185</user-id>
      <version type="integer">8</version>
      <user-name>mloseke</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>finally!</body>
      <body-html>&lt;div&gt;&lt;p&gt;finally!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-06T18:09:58+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-01-06T18:10:10+00:00</updated-at>
      <user-id type="integer">131536</user-id>
      <version type="integer">9</version>
      <user-name>Alex Rakoczy</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1, also seeing this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1, also seeing this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-06T23:55:11+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-01-06T23:55:15+00:00</updated-at>
      <user-id type="integer">23417</user-id>
      <version type="integer">10</version>
      <user-name>Dave Nawara</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-07T02:02:13+00:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-01-07T02:02:16+00:00</updated-at>
      <user-id type="integer">10008</user-id>
      <version type="integer">11</version>
      <user-name>Dave Hoover</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-08T01:00:06+01:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-04-08T01:00:15+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">12</version>
      <user-name>rails</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-08T01:00:07+01:00</created-at>
      <creator-id type="integer">65306</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6202</number>
      <permalink>patch-has_many-through-_ids-collection_reader-methods-should-honor-uniq-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>associations has_many_through rails_2_3_stable</tag>
      <title>[PATCH] has_many :through _ids collection_reader methods should honor :uniq option</title>
      <updated-at type="datetime">2011-04-08T01:00:19+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">13</version>
      <user-name>rails</user-name>
      <creator-name>Blake Smith</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6202</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>9dd165504f22b4dbc26faa11bc63eb462ab91ed2</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-12-21T15:46:36+00:00</created-at>
      <filename>0001-has_many-through-_ids-collection_reader-methods-shou.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">829563</id>
      <size type="integer">2136</size>
      <uploader-id type="integer">65306</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/829563/0001-has_many-through-_ids-collection_reader-methods-shou.patch</url>
    </attachment>
  </attachments>
</ticket>
