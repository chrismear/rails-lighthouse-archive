<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-10-13T19:13:56+01:00</created-at>
  <creator-id type="integer">31640</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3373</number>
  <permalink>embed-scoped-collections-inside-conditions-option-as-sql</permalink>
  <priority type="integer">161803</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>:conditions active_record scope</tag>
  <title>Embed scoped collections inside :conditions option as SQL</title>
  <updated-at type="datetime">2010-10-06T06:40:05+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">2</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Maxim Kulkin</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3373</url>
  <priority-name nil="true"></priority-name>
  <original-body>When scoped collections are used as a value for some attribute in :conditions clause, the generated SQL contains &quot;attribute IN ( ... )&quot; clause, where &quot;( ... )&quot; is enumeration of values of scoped collection. To do that an extra SQL clause is executed to get items of scoped collection. But in fact scoped collection can be inserted as a sub-SELECT.

Example:

  @@@ ruby
    class PaymentType &lt; AR::Base
      named_scope :credit_cards, :conditions =&gt; { :credit_card =&gt; true }
    end

    Orders.all(:conditions =&gt; { :payment_type_id =&gt; PaymentType.credit_cards })
  @@@

  This could be translated into a single query:

  @@@ sql
    SELECT * from `orders` WHERE payment_type_id IN (SELECT id FROM `payment_types` WHERE credit_card = 1)
  @@@

Solution:

Specially treat AR::NamedScope::Scope values in AR::Base#quote_bound_value

  def quote_bound_value(value) #:nodoc:
    if ActiveRecord::NamedScope::Scope === value
      scope = value.scope(:find) || {}
      field = (scope[:select] || value.primary_key).to_s.split(/,/).first.strip
      return value.construct_finder_sql(:select =&gt; field)
    end

    ...

This patch allows
1. Select #primary_key attribute by default.
2. If :select option is present, use first attribute specified.

If for some reason scoped collection should be embedded as enumeration, one can e.g. instantiate it manually (by calling #all or #to_a).</original-body>
  <latest-body>When scoped collections are used as a value for some attribute in :conditions clause, the generated SQL contains &quot;attribute IN ( ... )&quot; clause, where &quot;( ... )&quot; is enumeration of values of scoped collection. To do that an extra SQL clause is executed to get items of scoped collection. But in fact scoped collection can be inserted as a sub-SELECT.

Example:

  @@@ ruby
    class PaymentType &lt; AR::Base
      named_scope :credit_cards, :conditions =&gt; { :credit_card =&gt; true }
    end

    Orders.all(:conditions =&gt; { :payment_type_id =&gt; PaymentType.credit_cards })
  @@@

  This could be translated into a single query:

  @@@ sql
    SELECT * from `orders` WHERE payment_type_id IN (SELECT id FROM `payment_types` WHERE credit_card = 1)
  @@@

Solution:

Specially treat AR::NamedScope::Scope values in AR::Base#quote_bound_value

  def quote_bound_value(value) #:nodoc:
    if ActiveRecord::NamedScope::Scope === value
      scope = value.scope(:find) || {}
      field = (scope[:select] || value.primary_key).to_s.split(/,/).first.strip
      return value.construct_finder_sql(:select =&gt; field)
    end

    ...

This patch allows
1. Select #primary_key attribute by default.
2. If :select option is present, use first attribute specified.

If for some reason scoped collection should be embedded as enumeration, one can e.g. instantiate it manually (by calling #all or #to_a).</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When scoped collections are used as a value for some attribute
in :conditions clause, the generated SQL contains &quot;attribute IN (
... )&quot; clause, where &quot;( ... )&quot; is enumeration of values of scoped
collection. To do that an extra SQL clause is executed to get items
of scoped collection. But in fact scoped collection can be inserted
as a sub-SELECT.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;@@@ ruby&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class PaymentType &amp;lt; AR::Base
  named_scope :credit_cards, :conditions =&amp;gt; { :credit_card =&amp;gt; true }
end

Orders.all(:conditions =&amp;gt; { :payment_type_id =&amp;gt; PaymentType.credit_cards })&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;@@@&lt;/p&gt;
&lt;p&gt;This could be translated into a single query:&lt;/p&gt;
&lt;p&gt;@@@ sql&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT * from `orders` WHERE payment_type_id IN (SELECT id FROM `payment_types` WHERE credit_card = 1)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;@@@&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Specially treat AR::NamedScope::Scope values in
AR::Base#quote_bound_value&lt;/p&gt;
&lt;p&gt;def quote_bound_value(value) #:nodoc:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if ActiveRecord::NamedScope::Scope === value
  scope = value.scope(:find) || {}
  field = (scope[:select] || value.primary_key).to_s.split(/,/).first.strip
  return value.construct_finder_sql(:select =&amp;gt; field)
end

...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This patch allows&lt;br&gt;
1. Select #primary_key attribute by default.&lt;br&gt;
2. If :select option is present, use first attribute specified.&lt;/p&gt;
&lt;p&gt;If for some reason scoped collection should be embedded as
enumeration, one can e.g. instantiate it manually (by calling #all
or #to_a).&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When scoped collections are used as a value for some attribute in :conditions clause, the generated SQL contains &quot;attribute IN ( ... )&quot; clause, where &quot;( ... )&quot; is enumeration of values of scoped collection. To do that an extra SQL clause is executed to get items of scoped collection. But in fact scoped collection can be inserted as a sub-SELECT.

Example:

    @@@ ruby
        class PaymentType &lt; AR::Base
          named_scope :credit_cards, :conditions =&gt; { :credit_card =&gt; true }
        end

        Orders.all(:conditions =&gt; { :payment_type_id =&gt; PaymentType.credit_cards })
    @@@

  This could be translated into a single query:

    @@@ sql
        SELECT * from `orders` WHERE payment_type_id IN (SELECT id FROM `payment_types` WHERE credit_card = 1)
    @@@

Solution:

Specially treat AR::NamedScope::Scope values in AR::Base#quote_bound_value

    @@@ ruby
        def quote_bound_value(value) #:nodoc:
          if ActiveRecord::NamedScope::Scope === value
            scope = value.scope(:find) || {}
            field = (scope[:select] || value.primary_key).to_s.split(/,/).first.strip
            return value.construct_finder_sql(:select =&gt; field)
          end

          ...
    @@@

This patch allows
1. Select #primary_key attribute by default.
2. If :select option is present, use first attribute specified.

If for some reason scoped collection should be embedded as enumeration, one can e.g. instantiate it manually (by calling #all or #to_a).</body>
      <body-html>&lt;div&gt;&lt;p&gt;When scoped collections are used as a value for some attribute
in :conditions clause, the generated SQL contains &quot;attribute IN (
... )&quot; clause, where &quot;( ... )&quot; is enumeration of values of scoped
collection. To do that an extra SQL clause is executed to get items
of scoped collection. But in fact scoped collection can be inserted
as a sub-SELECT.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@@@ ruby
    class PaymentType &amp;lt; AR::Base
      named_scope :credit_cards, :conditions =&amp;gt; { :credit_card =&amp;gt; true }
    end

    Orders.all(:conditions =&amp;gt; { :payment_type_id =&amp;gt; PaymentType.credit_cards })
@@@&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This could be translated into a single query:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@@@ sql
    SELECT * from `orders` WHERE payment_type_id IN (SELECT id FROM `payment_types` WHERE credit_card = 1)
@@@&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Specially treat AR::NamedScope::Scope values in
AR::Base#quote_bound_value&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@@@ ruby
    def quote_bound_value(value) #:nodoc:
      if ActiveRecord::NamedScope::Scope === value
        scope = value.scope(:find) || {}
        field = (scope[:select] || value.primary_key).to_s.split(/,/).first.strip
        return value.construct_finder_sql(:select =&amp;gt; field)
      end

      ...
@@@&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This patch allows&lt;br&gt;
1. Select #primary_key attribute by default.&lt;br&gt;
2. If :select option is present, use first attribute specified.&lt;/p&gt;
&lt;p&gt;If for some reason scoped collection should be embedded as
enumeration, one can e.g. instantiate it manually (by calling #all
or #to_a).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-13T19:13:56+01:00</created-at>
      <creator-id type="integer">31640</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3373</number>
      <permalink>embed-scoped-collections-inside-conditions-option-as-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:conditions active_record scope</tag>
      <title>Embed scoped collections inside :conditions option as SQL</title>
      <updated-at type="datetime">2009-10-13T19:16:34+01:00</updated-at>
      <user-id type="integer">31640</user-id>
      <version type="integer">1</version>
      <user-name>Maxim Kulkin</user-name>
      <creator-name>Maxim Kulkin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3373</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:40:03+01:00</created-at>
      <creator-id type="integer">31640</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3373</number>
      <permalink>embed-scoped-collections-inside-conditions-option-as-sql</permalink>
      <priority type="integer">161803</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>:conditions active_record scope</tag>
      <title>Embed scoped collections inside :conditions option as SQL</title>
      <updated-at type="datetime">2010-10-06T06:40:05+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Maxim Kulkin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3373</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
