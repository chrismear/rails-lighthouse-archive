<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-17T06:48:08+00:00</created-at>
  <creator-id type="integer">24689</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2177</number>
  <permalink>unneccessary-session-loadingcreation-in-form_authenticity_token</permalink>
  <priority type="integer">1382</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>forgery performance protection session</tag>
  <title>Unneccessary session loading/creation in form_authenticity_token</title>
  <updated-at type="datetime">2011-02-17T06:48:08+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Pawel</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2177</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This is the current implementation of form_authenticity_token:

def form_authenticity_token
  session[:_csrf_token] ||= ActiveSupport::SecureRandom.base64(32)
end

The problem with it:
When user doesn't have a session and visits page with form protected from request forgery Rails automatically created new session for him just to store :_csrf_token.
When user has a session cookie and visits page with form, Rails loads the session just to retrieve :_csrf_token, even if the session is not used entirely in the given action.

In applications with main functionality accessible after login the session can be used only in actions for logged, trusted users. This design protect against DoS against session store (when something else than cookie store is being used) as not logged attackers won't be able to create and even load the session.

My idea is to introduce two changes to make form_authenticity_token not create or load the session:

1. Create method to get session id without loading the session itself. Except cookie store it is as easy as getting session id from cookie. In cookie store it should be acceptable to load the session to get id as it doesn't cost much.
2. Modify form_authenticity_token to return HMAC(session_id, server_side_secret). Yup, code changed by [this nice commit](http://github.com/rails/rails/commit/9fdb15e60f4d4e37916e5354c50d559773bbe014 &quot;Change the forgery token implementation to just be a simple random string&quot;) needs to be changed once again. HMAC is to make it impossible for attacker to obtain session id from forgery protection token (as it is easier for him to obtain token than session). Secret is safely stored on server so session id will be secure.

Note: when session cookie is not set in the browser, getting session id would require setting this cookie. This is side effect, but it is already present in Rails -- loading the session (to get session id) automatically sets the cookie.</original-body>
  <latest-body>This is the current implementation of form_authenticity_token:

def form_authenticity_token
  session[:_csrf_token] ||= ActiveSupport::SecureRandom.base64(32)
end

The problem with it:
When user doesn't have a session and visits page with form protected from request forgery Rails automatically created new session for him just to store :_csrf_token.
When user has a session cookie and visits page with form, Rails loads the session just to retrieve :_csrf_token, even if the session is not used entirely in the given action.

In applications with main functionality accessible after login the session can be used only in actions for logged, trusted users. This design protect against DoS against session store (when something else than cookie store is being used) as not logged attackers won't be able to create and even load the session.

My idea is to introduce two changes to make form_authenticity_token not create or load the session:

1. Create method to get session id without loading the session itself. Except cookie store it is as easy as getting session id from cookie. In cookie store it should be acceptable to load the session to get id as it doesn't cost much.
2. Modify form_authenticity_token to return HMAC(session_id, server_side_secret). Yup, code changed by [this nice commit](http://github.com/rails/rails/commit/9fdb15e60f4d4e37916e5354c50d559773bbe014 &quot;Change the forgery token implementation to just be a simple random string&quot;) needs to be changed once again. HMAC is to make it impossible for attacker to obtain session id from forgery protection token (as it is easier for him to obtain token than session). Secret is safely stored on server so session id will be secure.

Note: when session cookie is not set in the browser, getting session id would require setting this cookie. This is side effect, but it is already present in Rails -- loading the session (to get session id) automatically sets the cookie.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is the current implementation of
form_authenticity_token:&lt;/p&gt;
&lt;p&gt;def form_authenticity_token session[:_csrf_token] ||=
ActiveSupport::SecureRandom.base64(32) end&lt;/p&gt;
&lt;p&gt;The problem with it: When user doesn't have a session and visits
page with form protected from request forgery Rails automatically
created new session for him just to store :&lt;em&gt;csrf_token. When
user has a session cookie and visits page with form, Rails loads
the session just to retrieve :&lt;/em&gt;csrf_token, even if the session
is not used entirely in the given action.&lt;/p&gt;
&lt;p&gt;In applications with main functionality accessible after login
the session can be used only in actions for logged, trusted users.
This design protect against DoS against session store (when
something else than cookie store is being used) as not logged
attackers won't be able to create and even load the session.&lt;/p&gt;
&lt;p&gt;My idea is to introduce two changes to make
form_authenticity_token not create or load the session:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create method to get session id without loading the session
itself. Except cookie store it is as easy as getting session id
from cookie. In cookie store it should be acceptable to load the
session to get id as it doesn't cost much.&lt;/li&gt;
&lt;li&gt;Modify form_authenticity_token to return HMAC(session_id,
server_side_secret). Yup, code changed by &lt;a href=&quot;http://github.com/rails/rails/commit/9fdb15e60f4d4e37916e5354c50d559773bbe014&quot; title=&quot;Change the forgery token implementation to just be a simple random string&quot;&gt;
this nice commit&lt;/a&gt; needs to be changed once again. HMAC is to
make it impossible for attacker to obtain session id from forgery
protection token (as it is easier for him to obtain token than
session). Secret is safely stored on server so session id will be
secure.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: when session cookie is not set in the browser, getting
session id would require setting this cookie. This is side effect,
but it is already present in Rails -- loading the session (to get
session id) automatically sets the cookie.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is the current implementation of form_authenticity_token:
@@@ ruby
def form_authenticity_token
  session[:_csrf_token] ||= ActiveSupport::SecureRandom.base64(32)
end
@@@

The problem with it:

When user doesn't have a session and visits page with form protected from request forgery Rails automatically create new session for him just to store csrf_token.
When user has a session cookie and visits page with form, Rails loads the session just to retrieve csrf_token, even if the session is not used entirely in the given action.

In applications with main functionality accessible after login the session can be used only in actions for logged, trusted users. This design protect against DoS against session store (when something else than cookie store is being used) as not logged attackers won't be able to create and even load the session.

My idea is to introduce two changes to make form_authenticity_token not create or load the session:

1. Create method to get session id without loading the session itself. Except cookie store it is as easy as getting session id from cookie. In cookie store it should be acceptable to load the session to get id as it doesn't cost much.
2. Modify form_authenticity_token to return HMAC(session_id, server_side_secret). Yup, code changed by [this nice commit](http://github.com/rails/rails/commit/9fdb15e60f4d4e37916e5354c50d559773bbe014 &quot;Change the forgery token implementation to just be a simple random string&quot;) needs to be changed once again. HMAC is to make it impossible for attacker to obtain session id from forgery protection token (as it is easier for him to obtain token than session). Secret is safely stored on server so session id will be secure.

Note: when session cookie is not set in the browser, getting session id would require setting this cookie. This is side effect, but it is already present in Rails -- loading the session (to get session id) automatically sets the cookie.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is the current implementation of
form_authenticity_token:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
def form_authenticity_token
  session[:_csrf_token] ||= ActiveSupport::SecureRandom.base64(32)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem with it:&lt;/p&gt;
&lt;p&gt;When user doesn't have a session and visits page with form
protected from request forgery Rails automatically create new
session for him just to store csrf_token. When user has a session
cookie and visits page with form, Rails loads the session just to
retrieve csrf_token, even if the session is not used entirely in
the given action.&lt;/p&gt;
&lt;p&gt;In applications with main functionality accessible after login
the session can be used only in actions for logged, trusted users.
This design protect against DoS against session store (when
something else than cookie store is being used) as not logged
attackers won't be able to create and even load the session.&lt;/p&gt;
&lt;p&gt;My idea is to introduce two changes to make
form_authenticity_token not create or load the session:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create method to get session id without loading the session
itself. Except cookie store it is as easy as getting session id
from cookie. In cookie store it should be acceptable to load the
session to get id as it doesn't cost much.&lt;/li&gt;
&lt;li&gt;Modify form_authenticity_token to return HMAC(session_id,
server_side_secret). Yup, code changed by &lt;a href=&quot;http://github.com/rails/rails/commit/9fdb15e60f4d4e37916e5354c50d559773bbe014&quot; title=&quot;Change the forgery token implementation to just be a simple random string&quot;&gt;
this nice commit&lt;/a&gt; needs to be changed once again. HMAC is to
make it impossible for attacker to obtain session id from forgery
protection token (as it is easier for him to obtain token than
session). Secret is safely stored on server so session id will be
secure.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: when session cookie is not set in the browser, getting
session id would require setting this cookie. This is side effect,
but it is already present in Rails -- loading the session (to get
session id) automatically sets the cookie.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-09T11:10:05+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2177</number>
      <permalink>unneccessary-session-loadingcreation-in-form_authenticity_token</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>forgery performance protection session</tag>
      <title>Unneccessary session loading/creation in form_authenticity_token</title>
      <updated-at type="datetime">2009-03-09T11:11:49+00:00</updated-at>
      <user-id type="integer">24689</user-id>
      <version type="integer">1</version>
      <user-name>Pawel</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2177</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 for me. I'm using ActiveRecord session store and my db would be
gratefull to see less session related hits.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for me. I'm using ActiveRecord session store and my db would
be gratefull to see less session related hits.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-15T20:13:11+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2177</number>
      <permalink>unneccessary-session-loadingcreation-in-form_authenticity_token</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>forgery performance protection session</tag>
      <title>Unneccessary session loading/creation in form_authenticity_token</title>
      <updated-at type="datetime">2009-03-15T20:13:14+00:00</updated-at>
      <user-id type="integer">50752</user-id>
      <version type="integer">2</version>
      <user-name>foospam (at o2)</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2177</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Also, ActiveSupport::SecureRandom.base64(32) is spitting out strings with spaces in them.  The spaces are converted to + in params manipulation so there are intermittent InvalidAuthTokens.

Have you guys seen this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Also, ActiveSupport::SecureRandom.base64(32) is spitting out
strings with spaces in them. The spaces are converted to + in
params manipulation so there are intermittent
InvalidAuthTokens.&lt;/p&gt;
&lt;p&gt;Have you guys seen this?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-19T22:27:17+01:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2177</number>
      <permalink>unneccessary-session-loadingcreation-in-form_authenticity_token</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>forgery performance protection session</tag>
      <title>Unneccessary session loading/creation in form_authenticity_token</title>
      <updated-at type="datetime">2009-05-19T22:27:23+01:00</updated-at>
      <user-id type="integer">20792</user-id>
      <version type="integer">3</version>
      <user-name>Matthew Beale</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2177</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 for me 2! I have seen the intermittent InvalidAuthToken messages (mainly IE6). { Still can't figure out why Rails still uses base64 when hex is also available on the same module }

I am all for the proposed method of using hmac for the authenticitytoken as it will prevent those errors and seems more secure then the current random value, but I fail to see how one can protect the session store against DoS with it if you need a session ID.

If an antagonist where to make 1000 fresh requests, you will have 1000 sessions created. In a DDoS that will swamp your mysql server in no time - seems like a non fix on that end 2 me</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for me 2! I have seen the intermittent InvalidAuthToken
messages (mainly IE6). { Still can't figure out why Rails still
uses base64 when hex is also available on the same module }&lt;/p&gt;
&lt;p&gt;I am all for the proposed method of using hmac for the
authenticitytoken as it will prevent those errors and seems more
secure then the current random value, but I fail to see how one can
protect the session store against DoS with it if you need a session
ID.&lt;/p&gt;
&lt;p&gt;If an antagonist where to make 1000 fresh requests, you will
have 1000 sessions created. In a DDoS that will swamp your mysql
server in no time - seems like a non fix on that end 2 me&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-10T07:07:35+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2177</number>
      <permalink>unneccessary-session-loadingcreation-in-form_authenticity_token</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>forgery performance protection session</tag>
      <title>Unneccessary session loading/creation in form_authenticity_token</title>
      <updated-at type="datetime">2009-12-10T07:07:38+00:00</updated-at>
      <user-id type="integer">73543</user-id>
      <version type="integer">4</version>
      <user-name>coffeeaddict_nl</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2177</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:41+01:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2177</number>
      <permalink>unneccessary-session-loadingcreation-in-form_authenticity_token</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>forgery performance protection session</tag>
      <title>Unneccessary session loading/creation in form_authenticity_token</title>
      <updated-at type="datetime">2010-05-04T18:48:41+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2177</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:53:50+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2177</number>
      <permalink>unneccessary-session-loadingcreation-in-form_authenticity_token</permalink>
      <priority type="integer">1382</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>forgery performance protection session</tag>
      <title>Unneccessary session loading/creation in form_authenticity_token</title>
      <updated-at type="datetime">2011-02-02T18:31:39+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2177</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:53:52+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2177</number>
      <permalink>unneccessary-session-loadingcreation-in-form_authenticity_token</permalink>
      <priority type="integer">1382</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>forgery performance protection session</tag>
      <title>Unneccessary session loading/creation in form_authenticity_token</title>
      <updated-at type="datetime">2011-02-02T18:31:54+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2177</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-17T05:56:44+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2177</number>
      <permalink>unneccessary-session-loadingcreation-in-form_authenticity_token</permalink>
      <priority type="integer">1382</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>forgery performance protection session</tag>
      <title>Unneccessary session loading/creation in form_authenticity_token</title>
      <updated-at type="datetime">2011-02-17T06:48:08+00:00</updated-at>
      <user-id type="integer">137442</user-id>
      <version type="integer">8</version>
      <user-name>gfh</user-name>
      <creator-name>Pawel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2177</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
