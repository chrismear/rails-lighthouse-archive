<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-30T16:16:43+00:00</created-at>
  <creator-id type="integer">45627</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1827</number>
  <permalink>has_many-collectionforce_reloadtrue-hits-cache-under-lock</permalink>
  <priority type="integer">1114</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.1.1 2.3.x activerecord collection has_many lock query_cache transaction</tag>
  <title>has_many collection(force_reload=TRUE) hits cache under lock!</title>
  <updated-at type="datetime">2009-12-16T16:50:10+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">4</version>
  <user-name>Repository</user-name>
  <creator-name>ebriscoe</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1827</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>In a has_many association, collection(true) failed to execute a fresh SQL command, despite force_reload being set to true, and instead hit the cache, inside a transaction / lock!. The problem only occurred with concurrent requests and multiple mongrels, in the 2nd concurrence/lock!. Here's the simplified/offending code...

where as...
# Order has_many :order_items
# And :order_items has_many :quantities

Class Order
  def update
    Order.transaction do
      self.lock!
      order_item = self.order_items.first
      order_item.quantities(true).clear
      order_item.quantities &lt;&lt; OrderItemQuantity(...stuff here...)
    end
  end
end

The problem was that in the 2nd concurrence, &quot;order_item.quantities(true).clear&quot; was failing to delete the quantities created by the 1st concurrence. The solution was to replace:

  order_item.quantities(true).clear
    ...with...
  OrderItemQuantities.delete_all([&quot;order_item_id = ?&quot;, order_item.id])

So here are some facts, in the 2nd instance/concurrence/lock!:

  1. &quot;order_item.quantities(true).clear&quot; was hitting the cache (according to the log), despite the (true) which (as far as I understand) should have forced a reload.

  2. The quantities cache was stale (returning quantities from before the 1st instance/concurrence/lock!. This caused the clear to do nothing (because the id's returned from quantities(true) no longer existed because of the 1st concurrence).

  3. OrderItemQuantities.all([&quot;order_item_id = ?&quot;, order_item.id]), when inserted before the &quot;order_item.quantities(true).clear&quot;, issued fresh SQL and returned the correct list of quantities (where &quot;correct&quot; means the quantities created by the 1st concurrence/lock!).

Using Rails 2.1.1, MySQL, storage engine is InnoDB for all tables.

Unless I misunderstand the documentation, order_item.quantities(true) should have issued fresh SQL rather than hitting the cache.</original-body>
  <latest-body>In a has_many association, collection(true) failed to execute a fresh SQL command, despite force_reload being set to true, and instead hit the cache, inside a transaction / lock!. The problem only occurred with concurrent requests and multiple mongrels, in the 2nd concurrence/lock!. Here's the simplified/offending code...

where as...
# Order has_many :order_items
# And :order_items has_many :quantities

Class Order
  def update
    Order.transaction do
      self.lock!
      order_item = self.order_items.first
      order_item.quantities(true).clear
      order_item.quantities &lt;&lt; OrderItemQuantity(...stuff here...)
    end
  end
end

The problem was that in the 2nd concurrence, &quot;order_item.quantities(true).clear&quot; was failing to delete the quantities created by the 1st concurrence. The solution was to replace:

  order_item.quantities(true).clear
    ...with...
  OrderItemQuantities.delete_all([&quot;order_item_id = ?&quot;, order_item.id])

So here are some facts, in the 2nd instance/concurrence/lock!:

  1. &quot;order_item.quantities(true).clear&quot; was hitting the cache (according to the log), despite the (true) which (as far as I understand) should have forced a reload.

  2. The quantities cache was stale (returning quantities from before the 1st instance/concurrence/lock!. This caused the clear to do nothing (because the id's returned from quantities(true) no longer existed because of the 1st concurrence).

  3. OrderItemQuantities.all([&quot;order_item_id = ?&quot;, order_item.id]), when inserted before the &quot;order_item.quantities(true).clear&quot;, issued fresh SQL and returned the correct list of quantities (where &quot;correct&quot; means the quantities created by the 1st concurrence/lock!).

Using Rails 2.1.1, MySQL, storage engine is InnoDB for all tables.

Unless I misunderstand the documentation, order_item.quantities(true) should have issued fresh SQL rather than hitting the cache.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In a has_many association, collection(true) failed to execute a
fresh SQL command, despite force_reload being set to true, and
instead hit the cache, inside a transaction / lock!. The problem
only occurred with concurrent requests and multiple mongrels, in
the 2nd concurrence/lock!. Here's the simplified/offending
code...&lt;/p&gt;
&lt;p&gt;where as...&lt;/p&gt;
&lt;h1&gt;Order has_many :order_items&lt;/h1&gt;
&lt;h1&gt;And :order_items has_many :quantities&lt;/h1&gt;
&lt;p&gt;Class Order def update&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Order.transaction do
  self.lock!
  order_item = self.order_items.first
  order_item.quantities(true).clear
  order_item.quantities &amp;lt;&amp;lt; OrderItemQuantity(...stuff here...)
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;The problem was that in the 2nd concurrence,
&quot;order_item.quantities(true).clear&quot; was failing to delete the
quantities created by the 1st concurrence. The solution was to
replace:&lt;/p&gt;
&lt;p&gt;order_item.quantities(true).clear&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;...with...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;OrderItemQuantities.delete_all([&quot;order_item_id = ?&quot;,
order_item.id])&lt;/p&gt;
&lt;p&gt;So here are some facts, in the 2nd
instance/concurrence/lock!:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&quot;order_item.quantities(true).clear&quot; was hitting the cache
(according to the log), despite the (true) which (as far as I
understand) should have forced a reload.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The quantities cache was stale (returning quantities from before
the 1st instance/concurrence/lock!. This caused the clear to do
nothing (because the id's returned from quantities(true) no longer
existed because of the 1st concurrence).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OrderItemQuantities.all([&quot;order_item_id = ?&quot;, order_item.id]),
when inserted before the &quot;order_item.quantities(true).clear&quot;,
issued fresh SQL and returned the correct list of quantities (where
&quot;correct&quot; means the quantities created by the 1st
concurrence/lock!).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using Rails 2.1.1, MySQL, storage engine is InnoDB for all
tables.&lt;/p&gt;
&lt;p&gt;Unless I misunderstand the documentation,
order_item.quantities(true) should have issued fresh SQL rather
than hitting the cache.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In a has_many association, collection(true) failed to execute a fresh SQL command, despite force_reload being set to true, and instead hit the cache, inside a transaction / lock!. The problem only occurred with concurrent requests and multiple mongrels, in the 2nd concurrence/lock!. Here's the simplified/offending code...

where as...
  Order has_many :order_items
  And :order_items has_many :quantities

Class Order

  def update
    Order.transaction do
      self.lock!
      order_item = self.order_items.first
      order_item.quantities(true).clear
      order_item.quantities &lt;&lt; OrderItemQuantity(...stuff here...)
    end
  end
end

The problem was that in the 2nd concurrence, &quot;order_item.quantities(true).clear&quot; was failing to delete the quantities created by the 1st concurrence. The solution was to replace:

  order_item.quantities(true).clear
    ...with...
  OrderItemQuantities.delete_all([&quot;order_item_id = ?&quot;, order_item.id])

So here are some facts, in the 2nd instance/concurrence/lock!:

  1. &quot;order_item.quantities(true).clear&quot; was hitting the cache (according to the log), despite the (true) which (as far as I understand) should have forced a reload.

  2. The quantities cache was stale (returning quantities from before the 1st instance/concurrence/lock!. This caused the clear to do nothing (because the id's returned from quantities(true) no longer existed because of the 1st concurrence).

  3. OrderItemQuantities.all([&quot;order_item_id = ?&quot;, order_item.id]), when inserted before the &quot;order_item.quantities(true).clear&quot;, issued fresh SQL and returned the correct list of quantities (where &quot;correct&quot; means the quantities created by the 1st concurrence/lock!).

Using Rails 2.1.1, MySQL, storage engine is InnoDB for all tables.

Unless I misunderstand the documentation, order_item.quantities(true) should have issued fresh SQL rather than hitting the cache.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In a has_many association, collection(true) failed to execute a
fresh SQL command, despite force_reload being set to true, and
instead hit the cache, inside a transaction / lock!. The problem
only occurred with concurrent requests and multiple mongrels, in
the 2nd concurrence/lock!. Here's the simplified/offending
code...&lt;/p&gt;
&lt;p&gt;where as... Order has_many :order_items And :order_items
has_many :quantities&lt;/p&gt;
&lt;p&gt;Class Order&lt;/p&gt;
&lt;p&gt;def update&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Order.transaction do
  self.lock!
  order_item = self.order_items.first
  order_item.quantities(true).clear
  order_item.quantities &amp;lt;&amp;lt; OrderItemQuantity(...stuff here...)
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;The problem was that in the 2nd concurrence,
&quot;order_item.quantities(true).clear&quot; was failing to delete the
quantities created by the 1st concurrence. The solution was to
replace:&lt;/p&gt;
&lt;p&gt;order_item.quantities(true).clear&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;...with...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;OrderItemQuantities.delete_all([&quot;order_item_id = ?&quot;,
order_item.id])&lt;/p&gt;
&lt;p&gt;So here are some facts, in the 2nd
instance/concurrence/lock!:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&quot;order_item.quantities(true).clear&quot; was hitting the cache
(according to the log), despite the (true) which (as far as I
understand) should have forced a reload.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The quantities cache was stale (returning quantities from before
the 1st instance/concurrence/lock!. This caused the clear to do
nothing (because the id's returned from quantities(true) no longer
existed because of the 1st concurrence).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OrderItemQuantities.all([&quot;order_item_id = ?&quot;, order_item.id]),
when inserted before the &quot;order_item.quantities(true).clear&quot;,
issued fresh SQL and returned the correct list of quantities (where
&quot;correct&quot; means the quantities created by the 1st
concurrence/lock!).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using Rails 2.1.1, MySQL, storage engine is InnoDB for all
tables.&lt;/p&gt;
&lt;p&gt;Unless I misunderstand the documentation,
order_item.quantities(true) should have issued fresh SQL rather
than hitting the cache.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-30T16:16:43+00:00</created-at>
      <creator-id type="integer">45627</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1827</number>
      <permalink>has_many-collectionforce_reloadtrue-hits-cache-under-lock</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1.1 activerecord collection has_many lock transaction</tag>
      <title>has_many collection(force_reload=TRUE) hits cache under lock!</title>
      <updated-at type="datetime">2009-01-30T16:19:19+00:00</updated-at>
      <user-id type="integer">45627</user-id>
      <version type="integer">1</version>
      <user-name>ebriscoe</user-name>
      <creator-name>ebriscoe</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1827</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This affects one of my projects too - we're not using clear, but we are locking and using (true) to check for the current record - very bad thing happened when it used the cached result...

Patch attached.  Josh, does this look OK to you?

It's surprising that this hasn't come up before - but from examining the projects I have access to it seems most times when people use (true) they've already dirtied the cache by executing a CUD operation on another instance, so the cache doesn't get used anyway.  On a more positive note, that means that the performance impact of punching through the cache for force_reload=true is pretty minimal for most apps - they already don't cache most calls.

This patch is against 2-3-stable.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This affects one of my projects too - we're not using clear, but
we are locking and using (true) to check for the current record -
very bad thing happened when it used the cached result...&lt;/p&gt;
&lt;p&gt;Patch attached. Josh, does this look OK to you?&lt;/p&gt;
&lt;p&gt;It's surprising that this hasn't come up before - but from
examining the projects I have access to it seems most times when
people use (true) they've already dirtied the cache by executing a
CUD operation on another instance, so the cache doesn't get used
anyway. On a more positive note, that means that the performance
impact of punching through the cache for force_reload=true is
pretty minimal for most apps - they already don't cache most
calls.&lt;/p&gt;
&lt;p&gt;This patch is against 2-3-stable.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-14T04:43:24+00:00</created-at>
      <creator-id type="integer">45627</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1.1 activerecord collection has_many lock transaction
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1827</number>
      <permalink>has_many-collectionforce_reloadtrue-hits-cache-under-lock</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1.1 2.3.x activerecord collection has_many lock query_cache transaction</tag>
      <title>has_many collection(force_reload=TRUE) hits cache under lock!</title>
      <updated-at type="datetime">2009-12-14T04:43:28+00:00</updated-at>
      <user-id type="integer">10460</user-id>
      <version type="integer">2</version>
      <user-name>Will Bryant</user-name>
      <creator-name>ebriscoe</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1827</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [b1bbf90dffbc412670286154d9c7749d4388806b]) When passing force_reload = true to an association, don't use the query cache [#1827 state:resolved]

Signed-off-by: Joshua Peek &lt;josh@joshpeek.com&gt;
http://github.com/rails/rails/commit/b1bbf90dffbc412670286154d9c7749d4388806b</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/b1bbf90dffbc412670286154d9c7749d4388806b&quot;
title=
&quot;Changeset [b1bbf90dffbc412670286154d9c7749d4388806b]&quot;&gt;[b1bbf90dffbc412670286154d9c7749d4388806b]&lt;/a&gt;)
When passing force_reload = true to an association, don't use the
query cache [&lt;a href=&quot;/projects/8994/tickets/1827&quot; title=
&quot;Ticket #1827&quot;&gt;#1827&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Joshua Peek &lt;a&gt;josh@joshpeek.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/b1bbf90dffbc412670286154d9c7749d4388806b&quot;&gt;
http://github.com/rails/rails/commit/b1bbf90dffbc412670286154d9c774...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-12-16T16:49:50+00:00</created-at>
      <creator-id type="integer">45627</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1827</number>
      <permalink>has_many-collectionforce_reloadtrue-hits-cache-under-lock</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.1.1 2.3.x activerecord collection has_many lock query_cache transaction</tag>
      <title>has_many collection(force_reload=TRUE) hits cache under lock!</title>
      <updated-at type="datetime">2009-12-16T16:49:52+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">3</version>
      <user-name>Repository</user-name>
      <creator-name>ebriscoe</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1827</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [bf6af5f71917b5615edb5905729b22772133eea4]) When passing force_reload = true to an association, don't use the query cache [#1827 state:resolved]

Signed-off-by: Joshua Peek &lt;josh@joshpeek.com&gt;
http://github.com/rails/rails/commit/bf6af5f71917b5615edb5905729b22772133eea4</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/bf6af5f71917b5615edb5905729b22772133eea4&quot;
title=
&quot;Changeset [bf6af5f71917b5615edb5905729b22772133eea4]&quot;&gt;[bf6af5f71917b5615edb5905729b22772133eea4]&lt;/a&gt;)
When passing force_reload = true to an association, don't use the
query cache [&lt;a href=&quot;/projects/8994/tickets/1827&quot; title=
&quot;Ticket #1827&quot;&gt;#1827&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Joshua Peek &lt;a&gt;josh@joshpeek.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/bf6af5f71917b5615edb5905729b22772133eea4&quot;&gt;
http://github.com/rails/rails/commit/bf6af5f71917b5615edb5905729b22...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-12-16T16:50:08+00:00</created-at>
      <creator-id type="integer">45627</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1827</number>
      <permalink>has_many-collectionforce_reloadtrue-hits-cache-under-lock</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.1.1 2.3.x activerecord collection has_many lock query_cache transaction</tag>
      <title>has_many collection(force_reload=TRUE) hits cache under lock!</title>
      <updated-at type="datetime">2009-12-16T16:50:10+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">4</version>
      <user-name>Repository</user-name>
      <creator-name>ebriscoe</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1827</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>62423e1b66562a1845bc6318edb5d9b0fcf265d2</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-12-14T04:43:24+00:00</created-at>
      <filename>0001-when-passing-force_reload-true-to-an-association-don.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">351158</id>
      <size type="integer">2392</size>
      <uploader-id type="integer">10460</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/351158/0001-when-passing-force_reload-true-to-an-association-don.patch</url>
    </attachment>
  </attachments>
</ticket>
