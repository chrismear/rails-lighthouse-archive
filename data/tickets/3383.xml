<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-10-16T14:17:41+01:00</created-at>
  <creator-id type="integer">18314</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3383</number>
  <permalink>nested-attributes-for-ignores-default-scope-on-child-model</permalink>
  <priority type="integer">39884</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord default_scope</tag>
  <title>Nested attributes for ignores default scope on child model</title>
  <updated-at type="datetime">2010-07-29T16:29:56+01:00</updated-at>
  <user-id type="integer">102763</user-id>
  <version type="integer">4</version>
  <user-name>Mike Riley</user-name>
  <creator-name>Paul Jensen</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3383</url>
  <priority-name nil="true"></priority-name>
  <original-body>When you setup a nested form for a parent model, the default scope for the child models are ignored.

E.g.

@@@class Package &lt; ActiveRecord::Base
  has_many :products
  accepts_nested_attributes_for :products
end@@@

@@@class Product &lt; ActiveRecord::Base
  belongs_to :package
  default_scope :order =&gt; 'end_date ASC'
end@@@

In the view:

@@@&lt;% form_for @package, :url =&gt; update_all_admin_package_products_path(@package), :html =&gt; {:method =&gt; :put} do |f| %&gt;
  &lt;% f.fields_for :products do |product_form| %&gt;
     &lt;td&gt;&lt;%= product_form.date_select :end_date %&gt;&lt;/td&gt;
  &lt;% end %&gt;
&lt;% end %&gt;@@@

If you create two products:

@@@&lt; Product id:1, end_date: 2nd February 2010 &gt;, &lt; Product id:2, end_date: 1st February 2010 &gt;@@@

You would expect the products to be displayed in this order (sorted by end date ascending):

@@@&lt; Product id:2, end_date: 1st February 2010 &gt;, &lt; Product id:1, end_date: 2nd February 2010 &gt;@@@

However, they are sorted by id ascending.

In order to get the package's products to be sorted by the end date ascending, I removed the default scope (as it was redundant), and added the following conditions on the relationship between package and product:

@@@class Package &lt; ActiveRecord::Base
  has_many :products, :order =&gt; 'end_date ASC'
  accepts_nested_attributes_for :products
end@@@

Maybe I'm making the wrong assumption, but should nested form attributes inherit the default scope of the child model?

I'm using Rails 2.3.4 on Mac OS X Snow Leopard, ruby 1.8.7 (2008-08-11 patchlevel 72) [universal-darwin10.0]</original-body>
  <latest-body>When you setup a nested form for a parent model, the default scope for the child models are ignored.

E.g.

@@@class Package &lt; ActiveRecord::Base
  has_many :products
  accepts_nested_attributes_for :products
end@@@

@@@class Product &lt; ActiveRecord::Base
  belongs_to :package
  default_scope :order =&gt; 'end_date ASC'
end@@@

In the view:

@@@&lt;% form_for @package, :url =&gt; update_all_admin_package_products_path(@package), :html =&gt; {:method =&gt; :put} do |f| %&gt;
  &lt;% f.fields_for :products do |product_form| %&gt;
     &lt;td&gt;&lt;%= product_form.date_select :end_date %&gt;&lt;/td&gt;
  &lt;% end %&gt;
&lt;% end %&gt;@@@

If you create two products:

@@@&lt; Product id:1, end_date: 2nd February 2010 &gt;, &lt; Product id:2, end_date: 1st February 2010 &gt;@@@

You would expect the products to be displayed in this order (sorted by end date ascending):

@@@&lt; Product id:2, end_date: 1st February 2010 &gt;, &lt; Product id:1, end_date: 2nd February 2010 &gt;@@@

However, they are sorted by id ascending.

In order to get the package's products to be sorted by the end date ascending, I removed the default scope (as it was redundant), and added the following conditions on the relationship between package and product:

@@@class Package &lt; ActiveRecord::Base
  has_many :products, :order =&gt; 'end_date ASC'
  accepts_nested_attributes_for :products
end@@@

Maybe I'm making the wrong assumption, but should nested form attributes inherit the default scope of the child model?

I'm using Rails 2.3.4 on Mac OS X Snow Leopard, ruby 1.8.7 (2008-08-11 patchlevel 72) [universal-darwin10.0]</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When you setup a nested form for a parent model, the default
scope for the child models are ignored.&lt;/p&gt;
&lt;p&gt;E.g.&lt;/p&gt;
&lt;p&gt;@@@class Package &amp;lt; ActiveRecord::Base has_many :products
accepts_nested_attributes_for :products end@@@&lt;/p&gt;
&lt;p&gt;@@@class Product &amp;lt; ActiveRecord::Base belongs_to :package
default_scope :order =&amp;gt; 'end_date ASC' end@@@&lt;/p&gt;
&lt;p&gt;In the view:&lt;/p&gt;
&lt;p&gt;@@@&amp;lt;% form_for @package, :url =&amp;gt;
update_all_admin_package_products_path(@package), :html =&amp;gt;
{:method =&amp;gt; :put} do |f| %&amp;gt; &amp;lt;% f.fields_for :products do
|product_form| %&amp;gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; &amp;lt;td&amp;gt;&amp;lt;%= product_form.date_select :end_date %&amp;gt;&amp;lt;/td&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;lt;% end %&amp;gt; &amp;lt;% end %&amp;gt;@@@&lt;/p&gt;
&lt;p&gt;If you create two products:&lt;/p&gt;
&lt;p&gt;@@@&amp;lt; Product id:1, end_date: 2nd February 2010 &amp;gt;, &amp;lt;
Product id:2, end_date: 1st February 2010 &amp;gt;@@@&lt;/p&gt;
&lt;p&gt;You would expect the products to be displayed in this order
(sorted by end date ascending):&lt;/p&gt;
&lt;p&gt;@@@&amp;lt; Product id:2, end_date: 1st February 2010 &amp;gt;, &amp;lt;
Product id:1, end_date: 2nd February 2010 &amp;gt;@@@&lt;/p&gt;
&lt;p&gt;However, they are sorted by id ascending.&lt;/p&gt;
&lt;p&gt;In order to get the package's products to be sorted by the end
date ascending, I removed the default scope (as it was redundant),
and added the following conditions on the relationship between
package and product:&lt;/p&gt;
&lt;p&gt;@@@class Package &amp;lt; ActiveRecord::Base has_many :products,
:order =&amp;gt; 'end_date ASC' accepts_nested_attributes_for :products
end@@@&lt;/p&gt;
&lt;p&gt;Maybe I'm making the wrong assumption, but should nested form
attributes inherit the default scope of the child model?&lt;/p&gt;
&lt;p&gt;I'm using Rails 2.3.4 on Mac OS X Snow Leopard, ruby 1.8.7
(2008-08-11 patchlevel 72) [universal-darwin10.0]&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">83</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When you setup a nested form for a parent model, the default scope for the child models are ignored.

E.g.

@@@
class Package &lt; ActiveRecord::Base
  has_many :products
  accepts_nested_attributes_for :products
end
@@@

@@@
class Product &lt; ActiveRecord::Base
  belongs_to :package
  default_scope :order =&gt; 'end_date ASC'
end
@@@

In the view:

@@@
&lt;% form_for @package, :url =&gt; update_all_admin_package_products_path(@package), :html =&gt; {:method =&gt; :put} do |f| %&gt;
  &lt;% f.fields_for :products do |product_form| %&gt;
     &lt;td&gt;&lt;%= product_form.date_select :end_date %&gt;&lt;/td&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
@@@

If you create two products:

@@@
&lt; Product id:1, end_date: 2nd February 2010 &gt;, &lt; Product id:2, end_date: 1st February 2010 &gt;
@@@

You would expect the products to be displayed in this order (sorted by end date ascending):

@@@
&lt; Product id:2, end_date: 1st February 2010 &gt;, &lt; Product id:1, end_date: 2nd February 2010 &gt;
@@@

However, they are sorted by id ascending.

In order to get the package's products to be sorted by the end date ascending, I removed the default scope (as it was redundant), and added the following conditions on the relationship between package and product:

@@@
class Package &lt; ActiveRecord::Base
  has_many :products, :order =&gt; 'end_date ASC'
  accepts_nested_attributes_for :products
end
@@@

Maybe I'm making the wrong assumption, but should nested form attributes inherit the default scope of the child model?

I'm using Rails 2.3.4 on Mac OS X Snow Leopard, ruby 1.8.7 (2008-08-11 patchlevel 72) [universal-darwin10.0]</body>
      <body-html>&lt;div&gt;&lt;p&gt;When you setup a nested form for a parent model, the default
scope for the child models are ignored.&lt;/p&gt;
&lt;p&gt;E.g.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Package &amp;lt; ActiveRecord::Base
  has_many :products
  accepts_nested_attributes_for :products
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;class Product &amp;lt; ActiveRecord::Base
  belongs_to :package
  default_scope :order =&amp;gt; 'end_date ASC'
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the view:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;% form_for @package, :url =&amp;gt; update_all_admin_package_products_path(@package), :html =&amp;gt; {:method =&amp;gt; :put} do |f| %&amp;gt;
  &amp;lt;% f.fields_for :products do |product_form| %&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;%= product_form.date_select :end_date %&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you create two products:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt; Product id:1, end_date: 2nd February 2010 &amp;gt;, &amp;lt; Product id:2, end_date: 1st February 2010 &amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You would expect the products to be displayed in this order
(sorted by end date ascending):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt; Product id:2, end_date: 1st February 2010 &amp;gt;, &amp;lt; Product id:1, end_date: 2nd February 2010 &amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, they are sorted by id ascending.&lt;/p&gt;
&lt;p&gt;In order to get the package's products to be sorted by the end
date ascending, I removed the default scope (as it was redundant),
and added the following conditions on the relationship between
package and product:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Package &amp;lt; ActiveRecord::Base
  has_many :products, :order =&amp;gt; 'end_date ASC'
  accepts_nested_attributes_for :products
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Maybe I'm making the wrong assumption, but should nested form
attributes inherit the default scope of the child model?&lt;/p&gt;
&lt;p&gt;I'm using Rails 2.3.4 on Mac OS X Snow Leopard, ruby 1.8.7
(2008-08-11 patchlevel 72) [universal-darwin10.0]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-16T13:55:54+01:00</created-at>
      <creator-id type="integer">18314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3383</number>
      <permalink>nested-attributes-for-ignores-default-scope-on-child-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord default_scope nested_attributes_for</tag>
      <title>Nested attributes for ignores default scope on child model</title>
      <updated-at type="datetime">2009-10-16T13:57:29+01:00</updated-at>
      <user-id type="integer">18314</user-id>
      <version type="integer">1</version>
      <user-name>Paul Jensen</user-name>
      <creator-name>Paul Jensen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3383</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>DHH</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">83</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It simply iterates over the association collect as it receives it from the model. So if you'd expect it to return that collection with the default scope applied, then that's what should be fixed. Ie, it's not a nested attributes issue. Could you try to isolate the issue (a failing test for the AR test suite) and edit this ticket, or create a new ticket?

I have no opinion on whether or not the default scopes should apply to these collections, I don't use them.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It simply iterates over the association collect as it receives
it from the model. So if you'd expect it to return that collection
with the default scope applied, then that's what should be fixed.
Ie, it's not a nested attributes issue. Could you try to isolate
the issue (a failing test for the AR test suite) and edit this
ticket, or create a new ticket?&lt;/p&gt;
&lt;p&gt;I have no opinion on whether or not the default scopes should
apply to these collections, I don't use them.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-16T14:17:41+01:00</created-at>
      <creator-id type="integer">18314</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord default_scope nested_attributes_for
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3383</number>
      <permalink>nested-attributes-for-ignores-default-scope-on-child-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord default_scope</tag>
      <title>Nested attributes for ignores default scope on child model</title>
      <updated-at type="datetime">2009-10-16T14:18:22+01:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">2</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Paul Jensen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3383</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>DHH</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Eloy,

Thanks for looking at the ticket, and pointing me in the right direction. My assertion is that a default scope should filter through to all collections of a class. I must confess I'm an absolute rookie to adding tests and patches to Rails, but I'll attempt to write a test and a patch for this, and reply here.

Thanks again.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Eloy,&lt;/p&gt;
&lt;p&gt;Thanks for looking at the ticket, and pointing me in the right
direction. My assertion is that a default scope should filter
through to all collections of a class. I must confess I'm an
absolute rookie to adding tests and patches to Rails, but I'll
attempt to write a test and a patch for this, and reply here.&lt;/p&gt;
&lt;p&gt;Thanks again.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-16T22:34:06+01:00</created-at>
      <creator-id type="integer">18314</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 83
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3383</number>
      <permalink>nested-attributes-for-ignores-default-scope-on-child-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord default_scope</tag>
      <title>Nested attributes for ignores default scope on child model</title>
      <updated-at type="datetime">2009-10-16T22:34:07+01:00</updated-at>
      <user-id type="integer">18314</user-id>
      <version type="integer">3</version>
      <user-name>Paul Jensen</user-name>
      <creator-name>Paul Jensen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3383</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello Paul,

This ticket is quite old, but still wanted to check in on it.  Were you able to write a test and a patch for this issue?  I am going to mark this as resolved, but if you have more information or a failing test/patch we can reopen this and investigate further.

Mike Riley</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello Paul,&lt;/p&gt;
&lt;p&gt;This ticket is quite old, but still wanted to check in on it.
Were you able to write a test and a patch for this issue? I am
going to mark this as resolved, but if you have more information or
a failing test/patch we can reopen this and investigate
further.&lt;/p&gt;
&lt;p&gt;Mike Riley&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-29T16:29:54+01:00</created-at>
      <creator-id type="integer">18314</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3383</number>
      <permalink>nested-attributes-for-ignores-default-scope-on-child-model</permalink>
      <priority type="integer">39884</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord default_scope</tag>
      <title>Nested attributes for ignores default scope on child model</title>
      <updated-at type="datetime">2010-07-29T16:29:56+01:00</updated-at>
      <user-id type="integer">102763</user-id>
      <version type="integer">4</version>
      <user-name>Mike Riley</user-name>
      <creator-name>Paul Jensen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3383</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
  </versions>
</ticket>
