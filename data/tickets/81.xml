<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-01T17:21:52+01:00</created-at>
  <creator-id type="integer">18806</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">81</number>
  <permalink>association-ids-carry-over-to-associated-model</permalink>
  <priority type="integer">10544</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord associations bug</tag>
  <title>Association IDs carry over to associated model</title>
  <updated-at type="datetime">2008-07-17T00:57:57+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Matthew Moore</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/81</url>
  <priority-name nil="true"></priority-name>
  <original-body>I've had big problems with this bug in 2.0.2 &amp; 2.0.3.

In Rails Edge (2.0.3) and 2.0.2, I'm having problems with has_many associations where there are colliding names for id fields.  The #{model}_id of the associated record takes the #{model}_id value from the join table, not it's own value.

I have:

Emails
  has_many contacts

Contact
  has_one :user
  has_one :contact, :class_name =&gt; 'User' (foreign_key: contact_id)

Join Table, contacts_emails
  t.integer :email_id
  t.integer :contact_id

Note that a column named &quot;contact_id&quot; is in two tables: contacts and contacts_emails.

If you call emails.contacts, you'll get an array of Contacts, obviously.  

The bug is that the array that's returned of Contacts will have contact_id set to the contact_id that's in the joining contacts_emails row, not that's in the contacts row.

-----

Example

contacts_emails
------------------
email_id | contact_id
    1               3


contacts
------------------
id | email_id | contact_id
 3        1               2

users
------------------
id   |  first_name
 2          User


If you do emails.contacts, one Contact will be returned (which is correct).

emails.contacts[0].contact_id will be 3, not 2 as it should be in the table above.

emails.contacts[0].reload.contact_id will correctly be 2. 


This is caused because there is a collision on contact_id.  If I change contact's contact_id to contact_user_id, it works perfectly.</original-body>
  <latest-body>I've had big problems with this bug in 2.0.2 &amp; 2.0.3.

In Rails Edge (2.0.3) and 2.0.2, I'm having problems with has_many associations where there are colliding names for id fields.  The #{model}_id of the associated record takes the #{model}_id value from the join table, not it's own value.

I have:

Emails
  has_many contacts

Contact
  has_one :user
  has_one :contact, :class_name =&gt; 'User' (foreign_key: contact_id)

Join Table, contacts_emails
  t.integer :email_id
  t.integer :contact_id

Note that a column named &quot;contact_id&quot; is in two tables: contacts and contacts_emails.

If you call emails.contacts, you'll get an array of Contacts, obviously.  

The bug is that the array that's returned of Contacts will have contact_id set to the contact_id that's in the joining contacts_emails row, not that's in the contacts row.

-----

Example

contacts_emails
------------------
email_id | contact_id
    1               3


contacts
------------------
id | email_id | contact_id
 3        1               2

users
------------------
id   |  first_name
 2          User


If you do emails.contacts, one Contact will be returned (which is correct).

emails.contacts[0].contact_id will be 3, not 2 as it should be in the table above.

emails.contacts[0].reload.contact_id will correctly be 2. 


This is caused because there is a collision on contact_id.  If I change contact's contact_id to contact_user_id, it works perfectly.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
I've had big problems with this bug in 2.0.2 &amp; 2.0.3.
&lt;/p&gt;&lt;p&gt;
In Rails Edge (2.0.3) and 2.0.2, I'm having problems with has_many associations where there are colliding names for id fields.  The #{model}_id of the associated record takes the #{model}_id value from the join table, not it's own value.
&lt;/p&gt;&lt;p&gt;
I have:
&lt;/p&gt;&lt;p&gt;
Emails
&lt;/p&gt;&lt;p&gt;
has_many contacts
&lt;/p&gt;&lt;p&gt;
Contact
&lt;/p&gt;&lt;p&gt;
has_one :user
&lt;/p&gt;&lt;p&gt;
has_one :contact, :class_name =&gt; 'User' (foreign_key: contact_id)
&lt;/p&gt;&lt;p&gt;
Join Table, contacts_emails
&lt;/p&gt;&lt;p&gt;
t.integer :email_id
&lt;/p&gt;&lt;p&gt;
t.integer :contact_id
&lt;/p&gt;&lt;p&gt;
Note that a column named &quot;contact_id&quot; is in two tables: contacts and contacts_emails.
&lt;/p&gt;&lt;p&gt;
If you call emails.contacts, you'll get an array of Contacts, obviously.
&lt;/p&gt;&lt;p&gt;
The bug is that the array that's returned of Contacts will have contact_id set to the contact_id that's in the joining contacts_emails row, not that's in the contacts row.
&lt;/p&gt;&lt;p&gt;
-----
&lt;/p&gt;&lt;p&gt;
Example
&lt;/p&gt;&lt;p&gt;
contacts_emails
&lt;/p&gt;&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
email_id | contact_id
&lt;/p&gt;&lt;p&gt;
1               3
&lt;/p&gt;&lt;p&gt;
contacts
&lt;/p&gt;&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
id | email_id | contact_id
&lt;/p&gt;&lt;p&gt;
3        1               2
&lt;/p&gt;&lt;p&gt;
users
&lt;/p&gt;&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
id   |  first_name
&lt;/p&gt;&lt;p&gt;
2          User
&lt;/p&gt;&lt;p&gt;
If you do emails.contacts, one Contact will be returned (which is correct).
&lt;/p&gt;&lt;p&gt;
emails.contacts[0].contact_id will be 3, not 2 as it should be in the table above.
&lt;/p&gt;&lt;p&gt;
emails.contacts[0].reload.contact_id will correctly be 2.
&lt;/p&gt;&lt;p&gt;
This is caused because there is a collision on contact_id.  If I change contact's contact_id to contact_user_id, it works perfectly.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've had big problems with this bug in 2.0.2 &amp; 2.0.3.

In Rails Edge (2.0.3) and 2.0.2, I'm having problems with has_many associations where there are colliding names for id fields.  The #{model}_id of the associated record takes the #{model}_id value from the join table, not it's own value.

I have:

Emails
  has_many contacts

Contact
  has_one :user
  has_one :contact, :class_name =&gt; 'User' (foreign_key: contact_id)

Join Table, contacts_emails
  t.integer :email_id
  t.integer :contact_id

Note that a column named &quot;contact_id&quot; is in two tables: contacts and contacts_emails.

If you call emails.contacts, you'll get an array of Contacts, obviously.  

The bug is that the array that's returned of Contacts will have contact_id set to the contact_id that's in the joining contacts_emails row, not that's in the contacts row.

-----

Example

contacts_emails
------------------
email_id | contact_id
    1               3


contacts
------------------
id | email_id | contact_id
 3        1               2

users
------------------
id   |  first_name
 2          User


If you do emails.contacts, one Contact will be returned (which is correct).

emails.contacts[0].contact_id will be 3, not 2 as it should be in the table above.

emails.contacts[0].reload.contact_id will correctly be 2. 


This is caused because there is a collision on contact_id.  If I change contact's contact_id to contact_user_id, it works perfectly.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I've had big problems with this bug in 2.0.2 &amp; 2.0.3.
&lt;/p&gt;&lt;p&gt;
In Rails Edge (2.0.3) and 2.0.2, I'm having problems with has_many associations where there are colliding names for id fields.  The #{model}_id of the associated record takes the #{model}_id value from the join table, not it's own value.
&lt;/p&gt;&lt;p&gt;
I have:
&lt;/p&gt;&lt;p&gt;
Emails
&lt;/p&gt;&lt;p&gt;
has_many contacts
&lt;/p&gt;&lt;p&gt;
Contact
&lt;/p&gt;&lt;p&gt;
has_one :user
&lt;/p&gt;&lt;p&gt;
has_one :contact, :class_name =&gt; 'User' (foreign_key: contact_id)
&lt;/p&gt;&lt;p&gt;
Join Table, contacts_emails
&lt;/p&gt;&lt;p&gt;
t.integer :email_id
&lt;/p&gt;&lt;p&gt;
t.integer :contact_id
&lt;/p&gt;&lt;p&gt;
Note that a column named &quot;contact_id&quot; is in two tables: contacts and contacts_emails.
&lt;/p&gt;&lt;p&gt;
If you call emails.contacts, you'll get an array of Contacts, obviously.
&lt;/p&gt;&lt;p&gt;
The bug is that the array that's returned of Contacts will have contact_id set to the contact_id that's in the joining contacts_emails row, not that's in the contacts row.
&lt;/p&gt;&lt;p&gt;
-----
&lt;/p&gt;&lt;p&gt;
Example
&lt;/p&gt;&lt;p&gt;
contacts_emails
&lt;/p&gt;&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
email_id | contact_id
&lt;/p&gt;&lt;p&gt;
1               3
&lt;/p&gt;&lt;p&gt;
contacts
&lt;/p&gt;&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
id | email_id | contact_id
&lt;/p&gt;&lt;p&gt;
3        1               2
&lt;/p&gt;&lt;p&gt;
users
&lt;/p&gt;&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
id   |  first_name
&lt;/p&gt;&lt;p&gt;
2          User
&lt;/p&gt;&lt;p&gt;
If you do emails.contacts, one Contact will be returned (which is correct).
&lt;/p&gt;&lt;p&gt;
emails.contacts[0].contact_id will be 3, not 2 as it should be in the table above.
&lt;/p&gt;&lt;p&gt;
emails.contacts[0].reload.contact_id will correctly be 2.
&lt;/p&gt;&lt;p&gt;
This is caused because there is a collision on contact_id.  If I change contact's contact_id to contact_user_id, it works perfectly.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T17:21:52+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">81</number>
      <permalink>association-ids-carry-over-to-associated-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Association IDs carry over to associated model</title>
      <updated-at type="datetime">2008-05-01T17:21:52+01:00</updated-at>
      <user-id type="integer">18806</user-id>
      <version type="integer">1</version>
      <user-name>Matthew Moore</user-name>
      <creator-name>Matthew Moore</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/81</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Closing this ticket as stale. If this is still an issue for you, feel free to reopen this ticket or create a new one with an updated description. Remember those unit tests too ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Closing this ticket as stale. If this is still an issue for you, feel free to reopen this ticket or create a new one with an updated description. Remember those unit tests too ;)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-17T00:57:57+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">81</number>
      <permalink>association-ids-carry-over-to-associated-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord associations bug</tag>
      <title>Association IDs carry over to associated model</title>
      <updated-at type="datetime">2008-07-17T00:57:57+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Matthew Moore</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/81</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
