From e0ac5b90df8be93118a1b729644d27497676e796 Mon Sep 17 00:00:00 2001
From: Jonathan Dance <jd@wuputah.com>
Date: Tue, 6 May 2008 14:58:26 -0400
Subject: [PATCH] improvements to the page caching docs

---
 actionpack/lib/action_controller/caching.rb       |    3 ++-
 actionpack/lib/action_controller/caching/pages.rb |   21 +++++++++++++--------
 2 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/actionpack/lib/action_controller/caching.rb b/actionpack/lib/action_controller/caching.rb
index 08cbd13..c4063df 100644
--- a/actionpack/lib/action_controller/caching.rb
+++ b/actionpack/lib/action_controller/caching.rb
@@ -20,7 +20,8 @@ module ActionController #:nodoc:
   #
   # == Caching stores
   #
-  # All the caching stores from ActiveSupport::Cache is available to be used as backends for Action Controller caching.
+  # All the caching stores from ActiveSupport::Cache is available to be used as backends for Action Controller caching. This setting only
+  # affects action and fragment caching as page caching is always written to disk.
   #
   # Configuration examples (MemoryStore is the default):
   #
diff --git a/actionpack/lib/action_controller/caching/pages.rb b/actionpack/lib/action_controller/caching/pages.rb
index 7aa6ce1..8ceac55 100644
--- a/actionpack/lib/action_controller/caching/pages.rb
+++ b/actionpack/lib/action_controller/caching/pages.rb
@@ -4,10 +4,11 @@ require 'uri'
 module ActionController #:nodoc:
   module Caching
     # Page caching is an approach to caching where the entire action output of is stored as a HTML file that the web server
-    # can serve without going through the Action Pack. This can be as much as 100 times faster than going through the process of dynamically
-    # generating the content. Unfortunately, this incredible speed-up is only available to stateless pages where all visitors
-    # are treated the same. Content management systems -- including weblogs and wikis -- have many pages that are a great fit
-    # for this approach, but account-based systems where people log in and manipulate their own data are often less likely candidates.
+    # can serve without going through the Action Pack. This is the fastest way to cache your content as opposed to going dynamically
+    # through the process of generating the content. Unfortunately, this incredible speed-up is only available to stateless pages
+    # where all visitors are treated the same. Content management systems -- including weblogs and wikis -- have many pages that are
+    # a great fit for this approach, but account-based systems where people log in and manipulate their own data are often less
+    # likely candidates.
     #
     # Specifying which actions to cache is done through the <tt>caches</tt> class method:
     #
@@ -15,7 +16,7 @@ module ActionController #:nodoc:
     #     caches_page :show, :new
     #   end
     #
-    # This will generate cache files such as weblog/show/5 and weblog/new, which match the URLs used to trigger the dynamic
+    # This will generate cache files such as weblog/show/5.html and weblog/new.html, which match the URLs used to trigger the dynamic
     # generation. This is how the web server is able pick up a cache file when it exists and otherwise let the request pass on to
     # the Action Pack to generate it.
     #
@@ -36,12 +37,16 @@ module ActionController #:nodoc:
     # == Setting the cache directory
     #
     # The cache directory should be the document root for the web server and is set using Base.page_cache_directory = "/document/root".
-    # For Rails, this directory has already been set to Rails.public_path (which is usually set to RAILS_ROOT + "/public").
+    # For Rails, this directory has already been set to Rails.public_path (which is usually set to RAILS_ROOT + "/public"). Changing
+    # this setting can be useful to avoid naming conflicts with files in public/, but doing so will likely require configuring your
+    # web server to look in the new location for cached files.
     #
     # == Setting the cache extension
     #
-    # By default, the cache extension is .html, which makes it easy for the cached files to be picked up by the web server. If you want
-    # something else, like .php or .shtml, just set Base.page_cache_extension.
+    # Most Rails requests do not have an extension, such as /weblog/new. In these cases, the page caching mechanism will add one in
+    # order to make it easy for the cached files to be picked up properly by the web server. By default, this cache extension is .html.
+    # If you want something else, like .php or .shtml, just set Base.page_cache_extension. In cases where a request already has an
+    # extension, such as .xml or .rss, page caching will not add an extension. This allows it to work well with RESTful apps.
     module Pages
       def self.included(base) #:nodoc:
         base.extend(ClassMethods)
-- 
1.5.4.4

