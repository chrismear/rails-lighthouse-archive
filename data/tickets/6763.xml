<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-05-02T08:43:03+01:00</created-at>
  <creator-id type="integer">40448</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6763</number>
  <permalink>deleting-a-cookie-and-calling-reset_session-in-the-same-controller-action-does-not-send-new-session-cookie</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>bug cookies headers rails3 sessions</tag>
  <title>Deleting a cookie and calling reset_session in the same controller action does not send new session cookie</title>
  <updated-at type="datetime">2011-05-02T08:43:05+01:00</updated-at>
  <user-id type="integer">40448</user-id>
  <version type="integer">1</version>
  <user-name>Chris Corbyn</user-name>
  <creator-name>Chris Corbyn</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6763</url>
  <priority-name nil="true"></priority-name>
  <original-body>Rails 3.0.7, ruby-1.9.2 (via RVM).  Take the following code:

@@@ ruby
class LoginController &lt; ApplicationController
	# ... SNIP ... 
	
	def destroy
		cookies.delete(:secureusertokens)
		reset_session
		redirect_to root_url
	end
end

@@@

This is simply a logout.  It resets the session and deletes any &quot;remember me&quot; cookie that may be set.

Unfortunately, while a new session ID is generated, the `Set-Cookie:` header lacks this information (presumably because the session logic has a reference to some stale cookie data, and the controller overwrites it).

The session key is just `SESSID` in these headers.

In the request:

@@@
Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO
@@@

And in the response (no mention of the newly generated session ID):

@@@
Set-Cookie: secureusertokens=; path=/; expires=Thu, 01-Jan-1970 00:00:00 GMT
@@@

Now if I remove the call to `cookies.delete(...)` in the controller.

In the request (identical):

@@@
Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO
@@@

And in the response (correct!!):

@@@
Set-Cookie: SESSID=50640523cf32b5b0fe8c93eb16aba6dc; path=/; HttpOnly
@@@

It seems that I can either have the new session ID sent, or the &quot;remember me&quot; cookie deleted, but not both.  I can work around this by manually sending the new cookie, but it seems like a bug to me ;)

I have my own custom `SessionStore` (MemCache + MySQL), but it does not set these cookies, that happens elsewhere.</original-body>
  <latest-body>Rails 3.0.7, ruby-1.9.2 (via RVM).  Take the following code:

@@@ ruby
class LoginController &lt; ApplicationController
	# ... SNIP ... 
	
	def destroy
		cookies.delete(:secureusertokens)
		reset_session
		redirect_to root_url
	end
end

@@@

This is simply a logout.  It resets the session and deletes any &quot;remember me&quot; cookie that may be set.

Unfortunately, while a new session ID is generated, the `Set-Cookie:` header lacks this information (presumably because the session logic has a reference to some stale cookie data, and the controller overwrites it).

The session key is just `SESSID` in these headers.

In the request:

@@@
Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO
@@@

And in the response (no mention of the newly generated session ID):

@@@
Set-Cookie: secureusertokens=; path=/; expires=Thu, 01-Jan-1970 00:00:00 GMT
@@@

Now if I remove the call to `cookies.delete(...)` in the controller.

In the request (identical):

@@@
Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO
@@@

And in the response (correct!!):

@@@
Set-Cookie: SESSID=50640523cf32b5b0fe8c93eb16aba6dc; path=/; HttpOnly
@@@

It seems that I can either have the new session ID sent, or the &quot;remember me&quot; cookie deleted, but not both.  I can work around this by manually sending the new cookie, but it seems like a bug to me ;)

I have my own custom `SessionStore` (MemCache + MySQL), but it does not set these cookies, that happens elsewhere.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Rails 3.0.7, ruby-1.9.2 (via RVM). Take the following code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class LoginController &amp;lt; ApplicationController
    # ... SNIP ... 
    
    def destroy
        cookies.delete(:secureusertokens)
        reset_session
        redirect_to root_url
    end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is simply a logout. It resets the session and deletes any
&quot;remember me&quot; cookie that may be set.&lt;/p&gt;
&lt;p&gt;Unfortunately, while a new session ID is generated, the
&lt;code&gt;Set-Cookie:&lt;/code&gt; header lacks this information (presumably
because the session logic has a reference to some stale cookie
data, and the controller overwrites it).&lt;/p&gt;
&lt;p&gt;The session key is just &lt;code&gt;SESSID&lt;/code&gt; in these
headers.&lt;/p&gt;
&lt;p&gt;In the request:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And in the response (no mention of the newly generated session
ID):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Set-Cookie: secureusertokens=; path=/; expires=Thu, 01-Jan-1970 00:00:00 GMT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now if I remove the call to &lt;code&gt;cookies.delete(...)&lt;/code&gt; in
the controller.&lt;/p&gt;
&lt;p&gt;In the request (identical):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And in the response (correct!!):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Set-Cookie: SESSID=50640523cf32b5b0fe8c93eb16aba6dc; path=/; HttpOnly&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It seems that I can either have the new session ID sent, or the
&quot;remember me&quot; cookie deleted, but not both. I can work around this
by manually sending the new cookie, but it seems like a bug to me
;)&lt;/p&gt;
&lt;p&gt;I have my own custom &lt;code&gt;SessionStore&lt;/code&gt; (MemCache +
MySQL), but it does not set these cookies, that happens
elsewhere.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails 3.0.7, ruby-1.9.2 (via RVM).  Take the following code:

@@@ ruby
class LoginController &lt; ApplicationController
	# ... SNIP ... 
	
	def destroy
		cookies.delete(:secureusertokens)
		reset_session
		redirect_to root_url
	end
end

@@@

This is simply a logout.  It resets the session and deletes any &quot;remember me&quot; cookie that may be set.

Unfortunately, while a new session ID is generated, the `Set-Cookie:` header lacks this information (presumably because the session logic has a reference to some stale cookie data, and the controller overwrites it).

The session key is just `SESSID` in these headers.

In the request:

@@@
Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO
@@@

And in the response (no mention of the newly generated session ID):

@@@
Set-Cookie: secureusertokens=; path=/; expires=Thu, 01-Jan-1970 00:00:00 GMT
@@@

Now if I remove the call to `cookies.delete(...)` in the controller.

In the request (identical):

@@@
Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO
@@@

And in the response (correct!!):

@@@
Set-Cookie: SESSID=50640523cf32b5b0fe8c93eb16aba6dc; path=/; HttpOnly
@@@

It seems that I can either have the new session ID sent, or the &quot;remember me&quot; cookie deleted, but not both.  I can work around this by manually sending the new cookie, but it seems like a bug to me ;)

I have my own custom `SessionStore` (MemCache + MySQL), but it does not set these cookies, that happens elsewhere.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails 3.0.7, ruby-1.9.2 (via RVM). Take the following code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class LoginController &amp;lt; ApplicationController
    # ... SNIP ... 
    
    def destroy
        cookies.delete(:secureusertokens)
        reset_session
        redirect_to root_url
    end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is simply a logout. It resets the session and deletes any
&quot;remember me&quot; cookie that may be set.&lt;/p&gt;
&lt;p&gt;Unfortunately, while a new session ID is generated, the
&lt;code&gt;Set-Cookie:&lt;/code&gt; header lacks this information (presumably
because the session logic has a reference to some stale cookie
data, and the controller overwrites it).&lt;/p&gt;
&lt;p&gt;The session key is just &lt;code&gt;SESSID&lt;/code&gt; in these
headers.&lt;/p&gt;
&lt;p&gt;In the request:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And in the response (no mention of the newly generated session
ID):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Set-Cookie: secureusertokens=; path=/; expires=Thu, 01-Jan-1970 00:00:00 GMT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now if I remove the call to &lt;code&gt;cookies.delete(...)&lt;/code&gt; in
the controller.&lt;/p&gt;
&lt;p&gt;In the request (identical):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Cookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And in the response (correct!!):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Set-Cookie: SESSID=50640523cf32b5b0fe8c93eb16aba6dc; path=/; HttpOnly&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It seems that I can either have the new session ID sent, or the
&quot;remember me&quot; cookie deleted, but not both. I can work around this
by manually sending the new cookie, but it seems like a bug to me
;)&lt;/p&gt;
&lt;p&gt;I have my own custom &lt;code&gt;SessionStore&lt;/code&gt; (MemCache +
MySQL), but it does not set these cookies, that happens
elsewhere.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-05-02T08:43:03+01:00</created-at>
      <creator-id type="integer">40448</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6763</number>
      <permalink>deleting-a-cookie-and-calling-reset_session-in-the-same-controller-action-does-not-send-new-session-cookie</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug cookies headers rails3 sessions</tag>
      <title>Deleting a cookie and calling reset_session in the same controller action does not send new session cookie</title>
      <updated-at type="datetime">2011-05-02T08:43:06+01:00</updated-at>
      <user-id type="integer">40448</user-id>
      <version type="integer">1</version>
      <user-name>Chris Corbyn</user-name>
      <creator-name>Chris Corbyn</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6763</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
