<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-10T00:42:33+01:00</created-at>
  <creator-id type="integer">52142</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2470</number>
  <permalink>cannot-make-zoneparse-create-given-time-dst</permalink>
  <priority type="integer">1619</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activesupport dst parse tests timezone</tag>
  <title>Cannot make zone.parse create given time (DST)</title>
  <updated-at type="datetime">2009-04-11T15:19:56+01:00</updated-at>
  <user-id type="integer">15783</user-id>
  <version type="integer">2</version>
  <user-name>Geoff Buesing</user-name>
  <creator-name>Cezary Baginski</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2470</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When leaving DST time, time is shifted back an hour, so we get two ambiguous times. I cannot seem to find a way to control which one is returned by ActiveSupport::TimeZone.parse:

(e.g. in activesupport/test/time_zone_test.rb)

@@@ruby
  def test_parse_on_dst_boundary
    zone = ActiveSupport::TimeZone['Moscow']
    zone.stubs(:now).returns zone.local(2009,4,5)

    assert_equal Time.utc(2008,10,25,21), zone.parse('2008-10-26 1:00')

    assert_equal Time.utc(2008,10,25,22), zone.parse('2008-10-26 2:00')

    #This fails - I don't know how to make zone.parse give the equiv. UTC time
    assert_equal Time.utc(2008,10,25,23), zone.parse('2008-10-26 2:00 MSK +0300').utc

    assert_equal Time.utc(2008,10,26,0),  zone.parse('2008-10-26 3:00')

  end
@@@

NOTE: the additonal 'MSK +0300' of course isn't parsed properly - this is just for the sake of the example.

I have no idea how to make zone.parse '2:00' into the time I want - 23:00 UTC instead of 22:00 UTC.

I wouldn't be surprised if this is resolved as &quot;wont fix&quot;. I would love to debug this and create a patch, but I have no idea if and how this can be nicely solved. How can I allow entering a time (e.g. '2:00') in a timezone without it being ambiguous? 

The best I can think of is extending zone.parse to handle:

&quot;2:00 D&quot;  (DST version, 22:00 UTC) -&gt; 2:00 MSD
and
&quot;2:00 K&quot;  (non-DST version, 23:00 UTC) -&gt; 2:00 MSK

Any comments or suggestions?</original-body>
  <latest-body>When leaving DST time, time is shifted back an hour, so we get two ambiguous times. I cannot seem to find a way to control which one is returned by ActiveSupport::TimeZone.parse:

(e.g. in activesupport/test/time_zone_test.rb)

@@@ruby
  def test_parse_on_dst_boundary
    zone = ActiveSupport::TimeZone['Moscow']
    zone.stubs(:now).returns zone.local(2009,4,5)

    assert_equal Time.utc(2008,10,25,21), zone.parse('2008-10-26 1:00')

    assert_equal Time.utc(2008,10,25,22), zone.parse('2008-10-26 2:00')

    #This fails - I don't know how to make zone.parse give the equiv. UTC time
    assert_equal Time.utc(2008,10,25,23), zone.parse('2008-10-26 2:00 MSK +0300').utc

    assert_equal Time.utc(2008,10,26,0),  zone.parse('2008-10-26 3:00')

  end
@@@

NOTE: the additonal 'MSK +0300' of course isn't parsed properly - this is just for the sake of the example.

I have no idea how to make zone.parse '2:00' into the time I want - 23:00 UTC instead of 22:00 UTC.

I wouldn't be surprised if this is resolved as &quot;wont fix&quot;. I would love to debug this and create a patch, but I have no idea if and how this can be nicely solved. How can I allow entering a time (e.g. '2:00') in a timezone without it being ambiguous? 

The best I can think of is extending zone.parse to handle:

&quot;2:00 D&quot;  (DST version, 22:00 UTC) -&gt; 2:00 MSD
and
&quot;2:00 K&quot;  (non-DST version, 23:00 UTC) -&gt; 2:00 MSK

Any comments or suggestions?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When leaving DST time, time is shifted back an hour, so we get
two ambiguous times. I cannot seem to find a way to control which
one is returned by ActiveSupport::TimeZone.parse:&lt;/p&gt;
&lt;p&gt;(e.g. in activesupport/test/time_zone_test.rb)&lt;/p&gt;
&lt;p&gt;@@@ruby def test_parse_on_dst_boundary&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;zone = ActiveSupport::TimeZone['Moscow']
zone.stubs(:now).returns zone.local(2009,4,5)

assert_equal Time.utc(2008,10,25,21), zone.parse('2008-10-26 1:00')

assert_equal Time.utc(2008,10,25,22), zone.parse('2008-10-26 2:00')

#This fails - I don't know how to make zone.parse give the equiv. UTC time
assert_equal Time.utc(2008,10,25,23), zone.parse('2008-10-26 2:00 MSK +0300').utc

assert_equal Time.utc(2008,10,26,0),  zone.parse('2008-10-26 3:00')
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;

NOTE: the additonal 'MSK +0300' of course isn't parsed properly - this is just for the sake of the example.

I have no idea how to make zone.parse '2:00' into the time I want - 23:00 UTC instead of 22:00 UTC.

I wouldn't be surprised if this is resolved as &amp;quot;wont fix&amp;quot;. I would love to debug this and create a patch, but I have no idea if and how this can be nicely solved. How can I allow entering a time (e.g. '2:00') in a timezone without it being ambiguous? 

The best I can think of is extending zone.parse to handle:

&amp;quot;2:00 D&amp;quot;  (DST version, 22:00 UTC) -&amp;gt; 2:00 MSD
and
&amp;quot;2:00 K&amp;quot;  (non-DST version, 23:00 UTC) -&amp;gt; 2:00 MSK

Any comments or suggestions?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When leaving DST time, time is shifted back an hour, so we get two ambiguous times. I cannot seem to find a way to control which one is returned by ActiveSupport::TimeZone.parse:

(e.g. in activesupport/test/time_zone_test.rb)


@@@ ruby
  def test_parse_on_dst_boundary
    zone = ActiveSupport::TimeZone['Moscow']
    zone.stubs(:now).returns zone.local(2009,4,5)

    assert_equal Time.utc(2008,10,25,21), zone.parse('2008-10-26 1:00')

    assert_equal Time.utc(2008,10,25,22), zone.parse('2008-10-26 2:00')

    #This fails - I don't know how to make zone.parse give the equiv. UTC time
    assert_equal Time.utc(2008,10,25,23), zone.parse('2008-10-26 2:00 MSK +0300').utc

    assert_equal Time.utc(2008,10,26,0),  zone.parse('2008-10-26 3:00')

  end

@@@

NOTE: the additonal 'MSK +0300' of course isn't parsed properly - this is just for the sake of the example.

I have no idea how to make zone.parse '2:00' into the time I want - 23:00 UTC instead of 22:00 UTC.

I wouldn't be surprised if this is resolved as &quot;wont fix&quot;. I would love to debug this and create a patch, but I have no idea if and how this can be nicely solved. How can I allow entering a time (e.g. '2:00') in a timezone without it being ambiguous? 

The best I can think of is extending zone.parse to handle:

&quot;2:00 D&quot;  (DST version, 22:00 UTC) -&gt; 2:00 MSD

and

&quot;2:00 K&quot;  (non-DST version, 23:00 UTC) -&gt; 2:00 MSK

Any comments or suggestions?</body>
      <body-html>&lt;div&gt;&lt;p&gt;When leaving DST time, time is shifted back an hour, so we get
two ambiguous times. I cannot seem to find a way to control which
one is returned by ActiveSupport::TimeZone.parse:&lt;/p&gt;
&lt;p&gt;(e.g. in activesupport/test/time_zone_test.rb)&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def test_parse_on_dst_boundary
    zone = ActiveSupport::TimeZone['Moscow']
    zone.stubs(:now).returns zone.local(2009,4,5)

    assert_equal Time.utc(2008,10,25,21), zone.parse('2008-10-26 1:00')

    assert_equal Time.utc(2008,10,25,22), zone.parse('2008-10-26 2:00')

    #This fails - I don't know how to make zone.parse give the equiv. UTC time
    assert_equal Time.utc(2008,10,25,23), zone.parse('2008-10-26 2:00 MSK +0300').utc

    assert_equal Time.utc(2008,10,26,0),  zone.parse('2008-10-26 3:00')

  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: the additonal 'MSK +0300' of course isn't parsed properly
- this is just for the sake of the example.&lt;/p&gt;
&lt;p&gt;I have no idea how to make zone.parse '2:00' into the time I
want - 23:00 UTC instead of 22:00 UTC.&lt;/p&gt;
&lt;p&gt;I wouldn't be surprised if this is resolved as &quot;wont fix&quot;. I
would love to debug this and create a patch, but I have no idea if
and how this can be nicely solved. How can I allow entering a time
(e.g. '2:00') in a timezone without it being ambiguous?&lt;/p&gt;
&lt;p&gt;The best I can think of is extending zone.parse to handle:&lt;/p&gt;
&lt;p&gt;&quot;2:00 D&quot; (DST version, 22:00 UTC) -&amp;gt; 2:00 MSD&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&quot;2:00 K&quot; (non-DST version, 23:00 UTC) -&amp;gt; 2:00 MSK&lt;/p&gt;
&lt;p&gt;Any comments or suggestions?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-10T00:42:33+01:00</created-at>
      <creator-id type="integer">52142</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2470</number>
      <permalink>cannot-make-zoneparse-create-given-time-dst</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport dst parse tests timezone</tag>
      <title>Cannot make zone.parse create given time (DST)</title>
      <updated-at type="datetime">2009-04-10T07:15:10+01:00</updated-at>
      <user-id type="integer">52142</user-id>
      <version type="integer">1</version>
      <user-name>Cezary Baginski</user-name>
      <creator-name>Cezary Baginski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2470</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you include the UTC offset and leave out the MSK/MDK from the string, it works:

@@@ ruby
&gt;&gt; zone = ActiveSupport::TimeZone['Moscow']
=&gt; #&lt;ActiveSupport::TimeZone:0x183ec98 @tzinfo=nil, @name=&quot;Moscow&quot;, @utc_offset=10800&gt;
&gt;&gt; zone.parse('2008-10-26 2:00 +0300')
=&gt; Sun, 26 Oct 2008 02:00:00 MSK +03:00
&gt;&gt; zone.parse('2008-10-26 2:00 +0400')
=&gt; Sun, 26 Oct 2008 02:00:00 MSD +04:00
@@@

Here's why:

@@@ ruby
&gt;&gt; Date._parse('2008-10-26 2:00 +0300')
=&gt; {:mday=&gt;26, :mon=&gt;10, :zone=&gt;&quot;+0300&quot;, :offset=&gt;10800, :year=&gt;2008, :hour=&gt;2, :min=&gt;0}
&gt;&gt; Date._parse('2008-10-26 2:00 MSK +0300')
=&gt; {:mday=&gt;26, :mon=&gt;10, :zone=&gt;&quot;MSK&quot;, :year=&gt;2008, :hour=&gt;2, :min=&gt;0}
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you include the UTC offset and leave out the MSK/MDK from the
string, it works:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;gt;&amp;gt; zone = ActiveSupport::TimeZone['Moscow']
=&amp;gt; #&amp;lt;ActiveSupport::TimeZone:0x183ec98 @tzinfo=nil, @name=&amp;quot;Moscow&amp;quot;, @utc_offset=10800&amp;gt;
&amp;gt;&amp;gt; zone.parse('2008-10-26 2:00 +0300')
=&amp;gt; Sun, 26 Oct 2008 02:00:00 MSK +03:00
&amp;gt;&amp;gt; zone.parse('2008-10-26 2:00 +0400')
=&amp;gt; Sun, 26 Oct 2008 02:00:00 MSD +04:00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's why:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;gt;&amp;gt; Date._parse('2008-10-26 2:00 +0300')
=&amp;gt; {:mday=&amp;gt;26, :mon=&amp;gt;10, :zone=&amp;gt;&amp;quot;+0300&amp;quot;, :offset=&amp;gt;10800, :year=&amp;gt;2008, :hour=&amp;gt;2, :min=&amp;gt;0}
&amp;gt;&amp;gt; Date._parse('2008-10-26 2:00 MSK +0300')
=&amp;gt; {:mday=&amp;gt;26, :mon=&amp;gt;10, :zone=&amp;gt;&amp;quot;MSK&amp;quot;, :year=&amp;gt;2008, :hour=&amp;gt;2, :min=&amp;gt;0}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-11T15:19:55+01:00</created-at>
      <creator-id type="integer">52142</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2470</number>
      <permalink>cannot-make-zoneparse-create-given-time-dst</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activesupport dst parse tests timezone</tag>
      <title>Cannot make zone.parse create given time (DST)</title>
      <updated-at type="datetime">2009-04-11T15:19:56+01:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">2</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>Cezary Baginski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2470</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
