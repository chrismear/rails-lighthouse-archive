<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-05T12:42:46+00:00</created-at>
  <creator-id type="integer">46326</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1882</number>
  <permalink>rails-metal-with-activerecord-too-slow</permalink>
  <priority type="integer">1114</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Rails Metal with ActiveRecord, Too slow</title>
  <updated-at type="datetime">2011-05-05T02:57:33+01:00</updated-at>
  <user-id type="integer">148049</user-id>
  <version type="integer">3</version>
  <user-name>af001</user-name>
  <creator-name>Diegorv</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1882</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Too slow when use metal with AR, tests running in a Imac 2.6ghz - 4gb ram, with the last version of rails 2.3 in production environment

I`m trying a simple example with metal working with activerecord:

# Allow the metal piece to run in isolation
require(File.dirname(__FILE__) + &quot;/../../config/environment&quot;) unless defined?(Rails)

class Poller
  def self.call(env)
    if env[&quot;PATH_INFO&quot;] =~ /^\/poller/
      @post = Post.find(1)
      [200, {&quot;Content-Type&quot; =&gt; &quot;text/html&quot;}, @post.title]
    else
      [404, {&quot;Content-Type&quot; =&gt; &quot;text/html&quot;}, [&quot;Not Found&quot;]]
    end
  end
end

When i try run: ab -n 100 -c 5 http://127.0.0.1:3000/poller

Results are too slow:

Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /poller
Document Length:        19 bytes

Concurrency Level:      5
Time taken for tests:   100.113 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      11900 bytes
HTML transferred:       1900 bytes
Requests per second:    1.00 [#/sec] (mean)
Time per request:       5005.638 [ms] (mean)
Time per request:       1001.128 [ms] (mean, across all concurrent requests)
Transfer rate:          0.12 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       0
Processing:     3 4905 703.8   5005    5009
Waiting:        2 4904 703.7   5004    5007
Total:          4 4906 703.7   5005    5009

Percentage of the requests served within a certain time (ms)
  50%   5005
  66%   5006
  75%   5006
  80%   5006
  90%   5006
  95%   5007
  98%   5008
  99%   5009
 100%   5009 (longest request)

When i try with a controller like:

class TesteController &lt; ApplicationController
  def index
    @post = Post.find(1)
    render :text =&gt; @post.title
  end
end

And i run ab -n 100 -c 5 http://127.0.0.1:3000/teste

Results: 

Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /teste
Document Length:        19 bytes

Concurrency Level:      5
Time taken for tests:   0.210 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      26200 bytes
HTML transferred:       1900 bytes
Requests per second:    476.65 [#/sec] (mean)
Time per request:       10.490 [ms] (mean)
Time per request:       2.098 [ms] (mean, across all concurrent requests)
Transfer rate:          121.96 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       1
Processing:     5   10   1.2     10      16
Waiting:        5   10   1.2     10      16
Total:          6   10   1.2     10      16

Percentage of the requests served within a certain time (ms)
  50%     10
  66%     10
  75%     10
  80%     10
  90%     11
  95%     14
  98%     14
  99%     16
 100%     16 (longest request)
-diegorv:~ diegorv$ 

I don't know if is expected, but i think its a problem with mysql pools or some like that.</original-body>
  <latest-body>Too slow when use metal with AR, tests running in a Imac 2.6ghz - 4gb ram, with the last version of rails 2.3 in production environment

I`m trying a simple example with metal working with activerecord:

# Allow the metal piece to run in isolation
require(File.dirname(__FILE__) + &quot;/../../config/environment&quot;) unless defined?(Rails)

class Poller
  def self.call(env)
    if env[&quot;PATH_INFO&quot;] =~ /^\/poller/
      @post = Post.find(1)
      [200, {&quot;Content-Type&quot; =&gt; &quot;text/html&quot;}, @post.title]
    else
      [404, {&quot;Content-Type&quot; =&gt; &quot;text/html&quot;}, [&quot;Not Found&quot;]]
    end
  end
end

When i try run: ab -n 100 -c 5 http://127.0.0.1:3000/poller

Results are too slow:

Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /poller
Document Length:        19 bytes

Concurrency Level:      5
Time taken for tests:   100.113 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      11900 bytes
HTML transferred:       1900 bytes
Requests per second:    1.00 [#/sec] (mean)
Time per request:       5005.638 [ms] (mean)
Time per request:       1001.128 [ms] (mean, across all concurrent requests)
Transfer rate:          0.12 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       0
Processing:     3 4905 703.8   5005    5009
Waiting:        2 4904 703.7   5004    5007
Total:          4 4906 703.7   5005    5009

Percentage of the requests served within a certain time (ms)
  50%   5005
  66%   5006
  75%   5006
  80%   5006
  90%   5006
  95%   5007
  98%   5008
  99%   5009
 100%   5009 (longest request)

When i try with a controller like:

class TesteController &lt; ApplicationController
  def index
    @post = Post.find(1)
    render :text =&gt; @post.title
  end
end

And i run ab -n 100 -c 5 http://127.0.0.1:3000/teste

Results: 

Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /teste
Document Length:        19 bytes

Concurrency Level:      5
Time taken for tests:   0.210 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      26200 bytes
HTML transferred:       1900 bytes
Requests per second:    476.65 [#/sec] (mean)
Time per request:       10.490 [ms] (mean)
Time per request:       2.098 [ms] (mean, across all concurrent requests)
Transfer rate:          121.96 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       1
Processing:     5   10   1.2     10      16
Waiting:        5   10   1.2     10      16
Total:          6   10   1.2     10      16

Percentage of the requests served within a certain time (ms)
  50%     10
  66%     10
  75%     10
  80%     10
  90%     11
  95%     14
  98%     14
  99%     16
 100%     16 (longest request)
-diegorv:~ diegorv$ 

I don't know if is expected, but i think its a problem with mysql pools or some like that.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Too slow when use metal with AR, tests running in a Imac 2.6ghz
- 4gb ram, with the last version of rails 2.3 in production
environment&lt;/p&gt;
&lt;p&gt;I&lt;code&gt;m trying a simple example with metal working with
activerecord:&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Allow the metal piece to run in isolation&lt;/h1&gt;
&lt;p&gt;require(File.dirname(&lt;strong&gt;FILE&lt;/strong&gt;) +
&quot;/../../config/environment&quot;) unless defined?(Rails)&lt;/p&gt;
&lt;p&gt;class Poller def self.call(env)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if env[&quot;PATH_INFO&quot;] =~ /^\/poller/
  @post = Post.find(1)
  [200, {&quot;Content-Type&quot; =&amp;gt; &quot;text/html&quot;}, @post.title]
else
  [404, {&quot;Content-Type&quot; =&amp;gt; &quot;text/html&quot;}, [&quot;Not Found&quot;]]
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;When i try run: ab -n 100 -c 5 &lt;a href=&quot;http://127.0.0.1:3000/poller&quot;&gt;http://127.0.0.1:3000/poller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Results are too slow:&lt;/p&gt;
&lt;p&gt;Benchmarking 127.0.0.1 (be patient).....done&lt;/p&gt;
&lt;p&gt;Server Software:&lt;br&gt;
Server Hostname: 127.0.0.1 Server Port: 3000&lt;/p&gt;
&lt;p&gt;Document Path: /poller Document Length: 19 bytes&lt;/p&gt;
&lt;p&gt;Concurrency Level: 5 Time taken for tests: 100.113 seconds
Complete requests: 100 Failed requests: 0 Write errors: 0 Total
transferred: 11900 bytes HTML transferred: 1900 bytes Requests per
second: 1.00 &lt;a href=&quot;mean&quot;&gt;#/sec&lt;/a&gt; Time per request: 5005.638
&lt;a href=&quot;mean&quot;&gt;ms&lt;/a&gt; Time per request: 1001.128 [ms] (mean, across
all concurrent requests) Transfer rate: 0.12 [Kbytes/sec]
received&lt;/p&gt;
&lt;p&gt;Connection Times (ms)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;          min  mean[+/-sd] median   max
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Connect: 0 0 0.1 0 0 Processing: 3 4905 703.8 5005 5009 Waiting:
2 4904 703.7 5004 5007 Total: 4 4906 703.7 5005 5009&lt;/p&gt;
&lt;p&gt;Percentage of the requests served within a certain time (ms) 50%
5005 66% 5006 75% 5006 80% 5006 90% 5006 95% 5007 98% 5008 99% 5009
100% 5009 (longest request)&lt;/p&gt;
&lt;p&gt;When i try with a controller like:&lt;/p&gt;
&lt;p&gt;class TesteController &amp;lt; ApplicationController def index&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@post = Post.find(1)
render :text =&amp;gt; @post.title
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;And i run ab -n 100 -c 5 &lt;a href=&quot;http://127.0.0.1:3000/teste&quot;&gt;http://127.0.0.1:3000/teste&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Results:&lt;/p&gt;
&lt;p&gt;Benchmarking 127.0.0.1 (be patient).....done&lt;/p&gt;
&lt;p&gt;Server Software:&lt;br&gt;
Server Hostname: 127.0.0.1 Server Port: 3000&lt;/p&gt;
&lt;p&gt;Document Path: /teste Document Length: 19 bytes&lt;/p&gt;
&lt;p&gt;Concurrency Level: 5 Time taken for tests: 0.210 seconds
Complete requests: 100 Failed requests: 0 Write errors: 0 Total
transferred: 26200 bytes HTML transferred: 1900 bytes Requests per
second: 476.65 &lt;a href=&quot;mean&quot;&gt;#/sec&lt;/a&gt; Time per request: 10.490
&lt;a href=&quot;mean&quot;&gt;ms&lt;/a&gt; Time per request: 2.098 [ms] (mean, across
all concurrent requests) Transfer rate: 121.96 [Kbytes/sec]
received&lt;/p&gt;
&lt;p&gt;Connection Times (ms)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;          min  mean[+/-sd] median   max
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Connect: 0 0 0.1 0 1 Processing: 5 10 1.2 10 16 Waiting: 5 10
1.2 10 16 Total: 6 10 1.2 10 16&lt;/p&gt;
&lt;p&gt;Percentage of the requests served within a certain time (ms) 50%
10 66% 10 75% 10 80% 10 90% 11 95% 14 98% 14 99% 16 100% 16
(longest request) -diegorv:~ diegorv$&lt;/p&gt;
&lt;p&gt;I don't know if is expected, but i think its a problem with
mysql pools or some like that.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body># Rails Metal, work too slow, when use AR. #

&gt; Tests running in a Imac 2.6ghz - 4gb ram, with the last version of rails 2.3 in production environment working with Mysql(pool: 5)

&gt; I'm trying a simple example with metal and activerecord.

---

inside: app/metal/poller.rb
@@@
# Allow the metal piece to run in isolation
require(File.dirname(__FILE__) + &quot;/../../config/environment&quot;) unless defined?(Rails)

class Poller
  def self.call(env)
    if env[&quot;PATH_INFO&quot;] =~ /^\/poller/
      @post = Post.find(1)
      [200, {&quot;Content-Type&quot; =&gt; &quot;text/html&quot;}, @post.title]
    else
      [404, {&quot;Content-Type&quot; =&gt; &quot;text/html&quot;}, [&quot;Not Found&quot;]]
    end
  end
end
@@@

# When i try in console: ab -n 100 -c 5 http://127.0.0.1:3000/poller #

# Results are too slow, take a look: #
@@@
Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /poller
Document Length:        19 bytes

Concurrency Level:      5
Time taken for tests:   100.113 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      11900 bytes
HTML transferred:       1900 bytes
@@@
**Requests per second:    1.00 [#/sec] (mean)**
@@@
Time per request:       5005.638 [ms] (mean)
Time per request:       1001.128 [ms] (mean, across all concurrent requests)
Transfer rate:          0.12 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       0
Processing:     3 4905 703.8   5005    5009
Waiting:        2 4904 703.7   5004    5007
Total:          4 4906 703.7   5005    5009

Percentage of the requests served within a certain time (ms)
  50%   5005
  66%   5006
  75%   5006
  80%   5006
  90%   5006
  95%   5007
  98%   5008
  99%   5009
 100%   5009 (longest request)
@@@

---

# When i try with a controller way: #
@@@
class TesteController &lt; ApplicationController
  def index
    @post = Post.find(1)
    render :text =&gt; @post.title
  end
end
@@@
# And i run: ab -n 100 -c 5 http://127.0.0.1:3000/teste #

# Results are more fast than in metal, much more: #
@@@
Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /teste
Document Length:        19 bytes

Concurrency Level:      5
Time taken for tests:   0.210 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      26200 bytes
HTML transferred:       1900 bytes
@@@
**Requests per second:    476.65 [#/sec] (mean)**
@@@
Time per request:       10.490 [ms] (mean)
Time per request:       2.098 [ms] (mean, across all concurrent requests)
Transfer rate:          121.96 [Kbytes/sec] received

Connection Times (ms)
                    min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       1
Processing:    5   10   1.2     10      16
Waiting:         5   10   1.2     10      16
Total:            6   10   1.2     10      16

Percentage of the requests served within a certain time (ms)
  50%     10
  66%     10
  75%     10
  80%     10
  90%     11
  95%     14
  98%     14
  99%     16
 100%     16 (longest request)
-diegorv:~ diegorv$ 
@@@

---

## I don't know if is expected, but i think its a problem. ##
# I can think in: #
* Mysql pools problem
* Metal needs load AR libs in each find()
* Metal open 1 connection for request, which cause too many conections

* * *
* * *

## Other tests: ##
# Rails metal, 1 request - 1 concurrency #
&gt; ab -n 1 -c 1 http://127.0.0.1:3000/poller

@@@
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /poller
Document Length:        19 bytes

Concurrency Level:      1
Time taken for tests:   0.001 seconds
Complete requests:      1
Failed requests:        0
Write errors:           0
Total transferred:      119 bytes
HTML transferred:       19 bytes
Requests per second:    746.83 [#/sec] (mean)
Time per request:       1.339 [ms] (mean)
Time per request:       1.339 [ms] (mean, across all concurrent requests)
Transfer rate:          86.79 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:     1    1   0.0      1       1
Waiting:        1    1   0.0      1       1
Total:          1    1   0.0      1       1
@@@

--- 

# Controller, 1 request - 1 concurrency #
&gt; ab -n 1 -c 1 http://127.0.0.1:3000/teste

@@@
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /teste
Document Length:        19 bytes

Concurrency Level:      1
Time taken for tests:   0.003 seconds
Complete requests:      1
Failed requests:        0
Write errors:           0
Total transferred:      262 bytes
HTML transferred:       19 bytes
Requests per second:    367.51 [#/sec] (mean)
Time per request:       2.721 [ms] (mean)
Time per request:       2.721 [ms] (mean, across all concurrent requests)
Transfer rate:          94.03 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:     3    3   0.0      3       3
Waiting:        3    3   0.0      3       3
Total:          3    3   0.0      3       3

@@@

---
---

&gt; script/about
@@@
About your application's environment
Ruby version              1.8.6 (universal-darwin9.0)
RubyGems version          1.3.1
Rails version             2.3.0
Active Record version     2.3.0
Action Pack version       2.3.0
Active Resource version   2.3.0
Action Mailer version     2.3.0
Active Support version    2.3.0
Application root          /Users/diegorv/rails/2.3/metal
Environment               development
Database adapter          mysql
Database schema version   20090205122220
@@@</body>
      <body-html>&lt;div&gt;&lt;h1&gt;Rails Metal, work too slow, when use AR.&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Tests running in a Imac 2.6ghz - 4gb ram, with the last version
of rails 2.3 in production environment working with Mysql(pool:
5)&lt;/p&gt;
&lt;p&gt;I'm trying a simple example with metal and activerecord.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;inside: app/metal/poller.rb&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
# Allow the metal piece to run in isolation
require(File.dirname(__FILE__) + &amp;quot;/../../config/environment&amp;quot;) unless defined?(Rails)

class Poller
  def self.call(env)
    if env[&amp;quot;PATH_INFO&amp;quot;] =~ /^\/poller/
      @post = Post.find(1)
      [200, {&amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;text/html&amp;quot;}, @post.title]
    else
      [404, {&amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;text/html&amp;quot;}, [&amp;quot;Not Found&amp;quot;]]
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;When i try in console: ab -n 100 -c 5 &lt;a href=&quot;http://127.0.0.1:3000/poller&quot;&gt;http://127.0.0.1:3000/poller&lt;/a&gt;&lt;/h1&gt;
&lt;h1&gt;Results are too slow, take a look:&lt;/h1&gt;


&lt;pre&gt;&lt;code&gt;
Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /poller
Document Length:        19 bytes

Concurrency Level:      5
Time taken for tests:   100.113 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      11900 bytes
HTML transferred:       1900 bytes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Requests per second: 1.00 &lt;a href=&quot;mean&quot;&gt;#/sec&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
Time per request:       5005.638 [ms] (mean)
Time per request:       1001.128 [ms] (mean, across all concurrent requests)
Transfer rate:          0.12 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       0
Processing:     3 4905 703.8   5005    5009
Waiting:        2 4904 703.7   5004    5007
Total:          4 4906 703.7   5005    5009

Percentage of the requests served within a certain time (ms)
  50%   5005
  66%   5006
  75%   5006
  80%   5006
  90%   5006
  95%   5007
  98%   5008
  99%   5009
 100%   5009 (longest request)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1&gt;When i try with a controller way:&lt;/h1&gt;


&lt;pre&gt;&lt;code&gt;
class TesteController &amp;lt; ApplicationController
  def index
    @post = Post.find(1)
    render :text =&amp;gt; @post.title
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;And i run: ab -n 100 -c 5 &lt;a href=&quot;http://127.0.0.1:3000/teste&quot;&gt;http://127.0.0.1:3000/teste&lt;/a&gt;&lt;/h1&gt;
&lt;h1&gt;Results are more fast than in metal, much more:&lt;/h1&gt;


&lt;pre&gt;&lt;code&gt;
Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /teste
Document Length:        19 bytes

Concurrency Level:      5
Time taken for tests:   0.210 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      26200 bytes
HTML transferred:       1900 bytes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Requests per second: 476.65 &lt;a href=&quot;mean&quot;&gt;#/sec&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
Time per request:       10.490 [ms] (mean)
Time per request:       2.098 [ms] (mean, across all concurrent requests)
Transfer rate:          121.96 [Kbytes/sec] received

Connection Times (ms)
                    min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       1
Processing:    5   10   1.2     10      16
Waiting:         5   10   1.2     10      16
Total:            6   10   1.2     10      16

Percentage of the requests served within a certain time (ms)
  50%     10
  66%     10
  75%     10
  80%     10
  90%     11
  95%     14
  98%     14
  99%     16
 100%     16 (longest request)
-diegorv:~ diegorv$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2&gt;I don't know if is expected, but i think its a problem.&lt;/h2&gt;
&lt;h1&gt;I can think in:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Mysql pools problem&lt;/li&gt;
&lt;li&gt;Metal needs load AR libs in each find()&lt;/li&gt;
&lt;li&gt;Metal open 1 connection for request, which cause too many
conections&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2&gt;Other tests:&lt;/h2&gt;
&lt;h1&gt;Rails metal, 1 request - 1 concurrency&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;ab -n 1 -c 1 &lt;a href=&quot;http://127.0.0.1:3000/poller&quot;&gt;http://127.0.0.1:3000/poller&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;pre&gt;&lt;code&gt;
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 655654 $&amp;gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /poller
Document Length:        19 bytes

Concurrency Level:      1
Time taken for tests:   0.001 seconds
Complete requests:      1
Failed requests:        0
Write errors:           0
Total transferred:      119 bytes
HTML transferred:       19 bytes
Requests per second:    746.83 [#/sec] (mean)
Time per request:       1.339 [ms] (mean)
Time per request:       1.339 [ms] (mean, across all concurrent requests)
Transfer rate:          86.79 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:     1    1   0.0      1       1
Waiting:        1    1   0.0      1       1
Total:          1    1   0.0      1       1
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1&gt;Controller, 1 request - 1 concurrency&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;ab -n 1 -c 1 &lt;a href=&quot;http://127.0.0.1:3000/teste&quot;&gt;http://127.0.0.1:3000/teste&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;pre&gt;&lt;code&gt;
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 655654 $&amp;gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient).....done


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            3000

Document Path:          /teste
Document Length:        19 bytes

Concurrency Level:      1
Time taken for tests:   0.003 seconds
Complete requests:      1
Failed requests:        0
Write errors:           0
Total transferred:      262 bytes
HTML transferred:       19 bytes
Requests per second:    367.51 [#/sec] (mean)
Time per request:       2.721 [ms] (mean)
Time per request:       2.721 [ms] (mean, across all concurrent requests)
Transfer rate:          94.03 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:     3    3   0.0      3       3
Waiting:        3    3   0.0      3       3
Total:          3    3   0.0      3       3

&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;script/about&lt;/p&gt;
&lt;/blockquote&gt;


&lt;pre&gt;&lt;code&gt;
About your application's environment
Ruby version              1.8.6 (universal-darwin9.0)
RubyGems version          1.3.1
Rails version             2.3.0
Active Record version     2.3.0
Action Pack version       2.3.0
Active Resource version   2.3.0
Action Mailer version     2.3.0
Active Support version    2.3.0
Application root          /Users/diegorv/rails/2.3/metal
Environment               development
Database adapter          mysql
Database schema version   20090205122220
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-05T12:42:46+00:00</created-at>
      <creator-id type="integer">46326</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1882</number>
      <permalink>rails-metal-with-activerecord-too-slow</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails Metal with ActiveRecord, Too slow</title>
      <updated-at type="datetime">2009-02-05T16:07:30+00:00</updated-at>
      <user-id type="integer">46326</user-id>
      <version type="integer">1</version>
      <user-name>Diegorv</user-name>
      <creator-name>Diegorv</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1882</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Looks like your connection pool deadlocked. Make sure you check in your connections after you are done.

@@@ ruby
ActiveRecord::Base.clear_active_connections!
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks like your connection pool deadlocked. Make sure you check
in your connections after you are done.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
ActiveRecord::Base.clear_active_connections!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-05T21:32:09+00:00</created-at>
      <creator-id type="integer">46326</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1882</number>
      <permalink>rails-metal-with-activerecord-too-slow</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Rails Metal with ActiveRecord, Too slow</title>
      <updated-at type="datetime">2009-02-05T21:32:14+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Diegorv</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1882</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&#31169;&#12398;&#20013;&#12391;&#12289;&#32207;&#21512;&#35413;&#20385;&#12398;&#12392;&#12387;&#12390;&#12418;&#20302;&#12356;&#12450;&#12496;&lt;a href=&quot;http://www.abakuro.co.jp/&quot; rel=&quot;dofollow&quot;&gt;&lt;b&gt;&#12450;&#12496;&#12463;&#12525;&#12507;&#12522;&#12473;&#12479;&#12540;&lt;/b&gt;&lt;/a&gt;&#12463;&#12525;&#37504;&#24231;&#24215;&#12290;&#12450;&#12496;&#12463;&#12525;&#12399;&#22823;&#22909;&#12365;&#12394;&#12435;&#12391;&#12377;&#12369;&#12393;&#12397;&#12290;&#19968;&#26152;&#26085;&#12398;&#26481;&#20140;&#39365;&#20184;&#36817;&#12391;&#12398;&#25171;&#12385;&#21512;&#12431;&#12379;&#12398;&#24460;&#12289;&#25955;&#27497;&#12364;&#12390;&#12425;&#20037;&#12293;&#12395;&#34892;&#12387;&#12390;&#12365;&#12414;&#12375;&#12383;&#12290;&#12381;&#12375;&#12383;&#12425;&#12499;&#12483;&#12463;&#12522;&#65281;&#30456;&#22793;&#12431;&#12425;&lt;a href=&quot;http://www.abakuro.co.jp/&quot; rel=&quot;dofollow&quot;&gt;&lt;b&gt;&#12450;&#12496;&#12463;&#12525;&lt;/b&gt;&lt;/a&gt;&#12378;&#12289;&#36362;&#12387;&#12390;&#12356;&#12427;&#12384;&#12369;&#12398;&#24215;&#21729;&#12373;&#12435;&#12392;&#12363;&#12418;&#12356;&#12414;&#12375;&#12383;&#12364;&#12289;</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&amp;#31169;&amp;#12398;&amp;#20013;&amp;#12391;&amp;#12289;&amp;#32207;&amp;#21512;&amp;#35413;&amp;#20385;&amp;#12398;&amp;#12392;&amp;#12387;&amp;#12390;&amp;#12418;&amp;#20302;&amp;#12356;&amp;#12450;&amp;#12496;&lt;a href=&quot;http://www.abakuro.co.jp/&quot;&gt;&lt;b&gt;&amp;#12450;&amp;#12496;&amp;#12463;&amp;#12525;&amp;#12507;&amp;#12522;&amp;#12473;&amp;#12479;&amp;#12540;&lt;/b&gt;&lt;/a&gt;&amp;#12463;&amp;#12525;&amp;#37504;&amp;#24231;&amp;#24215;&amp;#12290;&amp;#12450;&amp;#12496;&amp;#12463;&amp;#12525;&amp;#12399;&amp;#22823;&amp;#22909;&amp;#12365;&amp;#12394;&amp;#12435;&amp;#12391;&amp;#12377;&amp;#12369;&amp;#12393;&amp;#12397;&amp;#12290;&amp;#19968;&amp;#26152;&amp;#26085;&amp;#12398;&amp;#26481;&amp;#20140;&amp;#39365;&amp;#20184;&amp;#36817;&amp;#12391;&amp;#12398;&amp;#25171;&amp;#12385;&amp;#21512;&amp;#12431;&amp;#12379;&amp;#12398;&amp;#24460;&amp;#12289;&amp;#25955;&amp;#27497;&amp;#12364;&amp;#12390;&amp;#12425;&amp;#20037;&amp;#12293;&amp;#12395;&amp;#34892;&amp;#12387;&amp;#12390;&amp;#12365;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12381;&amp;#12375;&amp;#12383;&amp;#12425;&amp;#12499;&amp;#12483;&amp;#12463;&amp;#12522;&amp;#65281;&amp;#30456;&amp;#22793;&amp;#12431;&amp;#12425;&lt;a href=&quot;http://www.abakuro.co.jp/&quot;&gt;&lt;b&gt;&amp;#12450;&amp;#12496;&amp;#12463;&amp;#12525;&lt;/b&gt;&lt;/a&gt;&amp;#12378;&amp;#12289;&amp;#36362;&amp;#12387;&amp;#12390;&amp;#12356;&amp;#12427;&amp;#12384;&amp;#12369;&amp;#12398;&amp;#24215;&amp;#21729;&amp;#12373;&amp;#12435;&amp;#12392;&amp;#12363;&amp;#12418;&amp;#12356;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12364;&amp;#12289;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-05-05T02:55:33+01:00</created-at>
      <creator-id type="integer">46326</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1882</number>
      <permalink>rails-metal-with-activerecord-too-slow</permalink>
      <priority type="integer">1114</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Rails Metal with ActiveRecord, Too slow</title>
      <updated-at type="datetime">2011-05-05T02:57:33+01:00</updated-at>
      <user-id type="integer">148049</user-id>
      <version type="integer">3</version>
      <user-name>af001</user-name>
      <creator-name>Diegorv</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1882</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
