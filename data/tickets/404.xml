<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-12T21:36:44+01:00</created-at>
  <creator-id type="integer">11063</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">404</number>
  <permalink>named_scope-bashes-critical-methods</permalink>
  <priority type="integer">16410</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord</tag>
  <title>named_scope can bash critical methods</title>
  <updated-at type="datetime">2008-07-23T14:36:37+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">12</version>
  <user-name>Pratik</user-name>
  <creator-name>Rick DeNatale</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
  <priority-name nil="true"></priority-name>
  <original-body>ActiveRecord::NamedScope::ClassMethods#named_scope when called, defines a new class method when it is called, which has the same name as the first argument.  This is exactly the same code as is in the has_finder method in the has_finder gem with the appropriate method and variable name changes.

Unfortunately the method makes no check on the name.  Our app uses has_finder with the call

   has_finder :public, ...

We ran into a problem with RSpec, when I stubbed a method on one of these active record instances, the stub! method failed because call was being sent to nil.  I finally tracked the point of failure to the line equivalent to line 95 in activerecord/lib/active_record/named_scope.rb

84:  def named_scope(name, options = {}, &amp;block)
85:    scopes[name] = lambda do |parent_scope, *args|
86:      Scope.new(parent_scope, case options
87:        when Hash
88:          options
89:        when Proc
90:          options.call(*args)
91:      end, &amp;block)
92:    end
93:    (class &lt;&lt; self; self end).instance_eval do
95:      define_method name do |*args|
96:        scopes[name].call(self, *args)
97:      end
98:    end
99:  end

What appears to be happening is that RSpec is using class_eval to define a method on the model class in processing a stub! call, and the method public is being called internally by ruby to make the method public, but the public method defined by has_finder/named_scope is called instead and scopes[:public] is nil.

I've proved that this is what is happening with a simple attached spec file, which doesn't use stub but simply shows that after using named_scope the public method in class is ineffective in making newly defined methods public.

I haven't written a patch because I'm not sure what the fix should be.</original-body>
  <latest-body>ActiveRecord::NamedScope::ClassMethods#named_scope when called, defines a new class method when it is called, which has the same name as the first argument.  This is exactly the same code as is in the has_finder method in the has_finder gem with the appropriate method and variable name changes.

Unfortunately the method makes no check on the name.  Our app uses has_finder with the call

   has_finder :public, ...

We ran into a problem with RSpec, when I stubbed a method on one of these active record instances, the stub! method failed because call was being sent to nil.  I finally tracked the point of failure to the line equivalent to line 95 in activerecord/lib/active_record/named_scope.rb

84:  def named_scope(name, options = {}, &amp;block)
85:    scopes[name] = lambda do |parent_scope, *args|
86:      Scope.new(parent_scope, case options
87:        when Hash
88:          options
89:        when Proc
90:          options.call(*args)
91:      end, &amp;block)
92:    end
93:    (class &lt;&lt; self; self end).instance_eval do
95:      define_method name do |*args|
96:        scopes[name].call(self, *args)
97:      end
98:    end
99:  end

What appears to be happening is that RSpec is using class_eval to define a method on the model class in processing a stub! call, and the method public is being called internally by ruby to make the method public, but the public method defined by has_finder/named_scope is called instead and scopes[:public] is nil.

I've proved that this is what is happening with a simple attached spec file, which doesn't use stub but simply shows that after using named_scope the public method in class is ineffective in making newly defined methods public.

I haven't written a patch because I'm not sure what the fix should be.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
ActiveRecord::NamedScope::ClassMethods#named_scope when called, defines a new class method when it is called, which has the same name as the first argument.  This is exactly the same code as is in the has_finder method in the has_finder gem with the appropriate method and variable name changes.
&lt;/p&gt;&lt;p&gt;
Unfortunately the method makes no check on the name.  Our app uses has_finder with the call
&lt;/p&gt;&lt;p&gt;
has_finder :public, ...
&lt;/p&gt;&lt;p&gt;
We ran into a problem with RSpec, when I stubbed a method on one of these active record instances, the stub! method failed because call was being sent to nil.  I finally tracked the point of failure to the line equivalent to line 95 in activerecord/lib/active_record/named_scope.rb
&lt;/p&gt;&lt;p&gt;
84:  def named_scope(name, options = {}, &amp;block)
&lt;/p&gt;&lt;p&gt;
85:    scopes[name] = lambda do |parent_scope, *args|
&lt;/p&gt;&lt;p&gt;
86:      Scope.new(parent_scope, case options
&lt;/p&gt;&lt;p&gt;
87:        when Hash
&lt;/p&gt;&lt;p&gt;
88:          options
&lt;/p&gt;&lt;p&gt;
89:        when Proc
&lt;/p&gt;&lt;p&gt;
90:          options.call(*args)
&lt;/p&gt;&lt;p&gt;
91:      end, &amp;block)
&lt;/p&gt;&lt;p&gt;
92:    end
&lt;/p&gt;&lt;p&gt;
93:    (class &amp;lt;&amp;lt; self; self end).instance_eval do
&lt;/p&gt;&lt;p&gt;
95:      define_method name do |*args|
&lt;/p&gt;&lt;p&gt;
96:        scopes[name].call(self, *args)
&lt;/p&gt;&lt;p&gt;
97:      end
&lt;/p&gt;&lt;p&gt;
98:    end
&lt;/p&gt;&lt;p&gt;
99:  end
&lt;/p&gt;&lt;p&gt;
What appears to be happening is that RSpec is using class_eval to define a method on the model class in processing a stub! call, and the method public is being called internally by ruby to make the method public, but the public method defined by has_finder/named_scope is called instead and scopes[:public] is nil.
&lt;/p&gt;&lt;p&gt;
I've proved that this is what is happening with a simple attached spec file, which doesn't use stub but simply shows that after using named_scope the public method in class is ineffective in making newly defined methods public.
&lt;/p&gt;&lt;p&gt;
I haven't written a patch because I'm not sure what the fix should be.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveRecord::NamedScope::ClassMethods#named_scope when called, defines a new class method when it is called, which has the same name as the first argument.  This is exactly the same code as is in the has_finder method in the has_finder gem with the appropriate method and variable name changes.

Unfortunately the method makes no check on the name.  Our app uses has_finder with the call

   has_finder :public, ...

We ran into a problem with RSpec, when I stubbed a method on one of these active record instances, the stub! method failed because call was being sent to nil.  I finally tracked the point of failure to the line equivalent to line 95 in activerecord/lib/active_record/named_scope.rb

84:  def named_scope(name, options = {}, &amp;block)
85:    scopes[name] = lambda do |parent_scope, *args|
86:      Scope.new(parent_scope, case options
87:        when Hash
88:          options
89:        when Proc
90:          options.call(*args)
91:      end, &amp;block)
92:    end
93:    (class &lt;&lt; self; self end).instance_eval do
95:      define_method name do |*args|
96:        scopes[name].call(self, *args)
97:      end
98:    end
99:  end

What appears to be happening is that RSpec is using class_eval to define a method on the model class in processing a stub! call, and the method public is being called internally by ruby to make the method public, but the public method defined by has_finder/named_scope is called instead and scopes[:public] is nil.

I've proved that this is what is happening with a simple attached spec file, which doesn't use stub but simply shows that after using named_scope the public method in class is ineffective in making newly defined methods public.

I haven't written a patch because I'm not sure what the fix should be.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
ActiveRecord::NamedScope::ClassMethods#named_scope when called, defines a new class method when it is called, which has the same name as the first argument.  This is exactly the same code as is in the has_finder method in the has_finder gem with the appropriate method and variable name changes.
&lt;/p&gt;&lt;p&gt;
Unfortunately the method makes no check on the name.  Our app uses has_finder with the call
&lt;/p&gt;&lt;p&gt;
has_finder :public, ...
&lt;/p&gt;&lt;p&gt;
We ran into a problem with RSpec, when I stubbed a method on one of these active record instances, the stub! method failed because call was being sent to nil.  I finally tracked the point of failure to the line equivalent to line 95 in activerecord/lib/active_record/named_scope.rb
&lt;/p&gt;&lt;p&gt;
84:  def named_scope(name, options = {}, &amp;block)
&lt;/p&gt;&lt;p&gt;
85:    scopes[name] = lambda do |parent_scope, *args|
&lt;/p&gt;&lt;p&gt;
86:      Scope.new(parent_scope, case options
&lt;/p&gt;&lt;p&gt;
87:        when Hash
&lt;/p&gt;&lt;p&gt;
88:          options
&lt;/p&gt;&lt;p&gt;
89:        when Proc
&lt;/p&gt;&lt;p&gt;
90:          options.call(*args)
&lt;/p&gt;&lt;p&gt;
91:      end, &amp;block)
&lt;/p&gt;&lt;p&gt;
92:    end
&lt;/p&gt;&lt;p&gt;
93:    (class &amp;lt;&amp;lt; self; self end).instance_eval do
&lt;/p&gt;&lt;p&gt;
95:      define_method name do |*args|
&lt;/p&gt;&lt;p&gt;
96:        scopes[name].call(self, *args)
&lt;/p&gt;&lt;p&gt;
97:      end
&lt;/p&gt;&lt;p&gt;
98:    end
&lt;/p&gt;&lt;p&gt;
99:  end
&lt;/p&gt;&lt;p&gt;
What appears to be happening is that RSpec is using class_eval to define a method on the model class in processing a stub! call, and the method public is being called internally by ruby to make the method public, but the public method defined by has_finder/named_scope is called instead and scopes[:public] is nil.
&lt;/p&gt;&lt;p&gt;
I've proved that this is what is happening with a simple attached spec file, which doesn't use stub but simply shows that after using named_scope the public method in class is ineffective in making newly defined methods public.
&lt;/p&gt;&lt;p&gt;
I haven't written a patch because I'm not sure what the fix should be.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-12T21:36:44+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope bashes critical methods</title>
      <updated-at type="datetime">2008-06-12T21:36:44+01:00</updated-at>
      <user-id type="integer">11063</user-id>
      <version type="integer">1</version>
      <user-name>Rick DeNatale</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>let me get this straight.... it's a bug because you told a meta-method to overwrite 'public'? So are you going to bitch about how &quot;named_scope :find&quot; is screwing you up too?

if anything,  the real bug here is that it's not bitching about you overwriting something you shouldn't be overwriting.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
let me get this straight.... it's a bug because you told a meta-method to overwrite 'public'? So are you going to bitch about how &quot;named_scope :find&quot; is screwing you up too?
&lt;/p&gt;&lt;p&gt;
if anything,  the real bug here is that it's not bitching about you overwriting something you shouldn't be overwriting.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-12T22:20:36+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope bashes critical methods</title>
      <updated-at type="datetime">2008-06-12T22:20:36+01:00</updated-at>
      <user-id type="integer">22</user-id>
      <version type="integer">2</version>
      <user-name>Matt Lyon</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Calm down.  I said that I didn't know what the proper disposition of this should be.

But.

It probably should warn or prevent giving a named_scope a name which interferes with Ruby or Rails. It's unfortunate that our app used public, and that at this time, the name is pretty engrained in the app.  I didn't make that decision or write the code, I just was the one who discovered the problem late in the game.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Calm down.  I said that I didn't know what the proper disposition of this should be.
&lt;/p&gt;&lt;p&gt;
But.
&lt;/p&gt;&lt;p&gt;
It probably should warn or prevent giving a named_scope a name which interferes with Ruby or Rails. It's unfortunate that our app used public, and that at this time, the name is pretty engrained in the app.  I didn't make that decision or write the code, I just was the one who discovered the problem late in the game.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-12T22:33:06+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope bashes critical methods</title>
      <updated-at type="datetime">2008-06-12T22:33:06+01:00</updated-at>
      <user-id type="integer">11063</user-id>
      <version type="integer">3</version>
      <user-name>Rick DeNatale</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Could add a defined?(...) check.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Could add a defined?(...) check.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-13T00:24:08+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope bashes critical methods</title>
      <updated-at type="datetime">2008-06-13T00:24:08+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Definitely not a bug, but a warning or documentation may be helpful. I personally wouldn't add the warning, but that's because I have a certain minimalist aesthetic toward code. Elsewhere in ActiveRecord there are lots of rich warnings/exceptions for when people do silly things, so it is consistent with the AR to add warnings here. It sort of depends how defensive you want to be; there are an infinite number of ways to use library code in a way that is counter-productive. Have to make a judgement call about how much time we'll save end users vs. extra entropy in the codebase. In other words, I support the decision whatever it is ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Definitely not a bug, but a warning or documentation may be helpful. I personally wouldn't add the warning, but that's because I have a certain minimalist aesthetic toward code. Elsewhere in ActiveRecord there are lots of rich warnings/exceptions for when people do silly things, so it is consistent with the AR to add warnings here. It sort of depends how defensive you want to be; there are an infinite number of ways to use library code in a way that is counter-productive. Have to make a judgement call about how much time we'll save end users vs. extra entropy in the codebase. In other words, I support the decision whatever it is ;)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-13T01:16:38+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope bashes critical methods</title>
      <updated-at type="datetime">2008-06-13T01:16:38+01:00</updated-at>
      <user-id type="integer">18729</user-id>
      <version type="integer">5</version>
      <user-name>nkallen</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Maybe protected method names should be available with an indirection?

For example:

Foo.find(:public)

This should apply to some Ruby methods and all class methods already defined in AR::Base.

(BTW, isn't the approach above worth adding? It's good to be able to define a named_scope :all and get, for example, default sorting on a model. Then Foo.find(:all) just works)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Maybe protected method names should be available with an indirection?
&lt;/p&gt;&lt;p&gt;
For example:
&lt;/p&gt;&lt;p&gt;
Foo.find(:public)
&lt;/p&gt;&lt;p&gt;
This should apply to some Ruby methods and all class methods already defined in AR::Base.
&lt;/p&gt;&lt;p&gt;
(BTW, isn't the approach above worth adding? It's good to be able to define a named_scope :all and get, for example, default sorting on a model. Then Foo.find(:all) just works)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-13T15:57:55+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope bashes critical methods</title>
      <updated-at type="datetime">2008-06-13T15:57:55+01:00</updated-at>
      <user-id type="integer">975</user-id>
      <version type="integer">6</version>
      <user-name>Damian Janowski</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>First, I've edited the title of this ticket to more accurately reflect the issue.

I'm for adding an exception if someone tries to use named_scope with a name that matches an existing class method.

I our case the code was written by a very experienced ruby/rails developer, and he missed the subtlety that it was defining a class method which conflicts with the public directive.  We only discovered the issue when I started converting over from RSpec 1.1.3 to 1.1.4 which exposed the issue, but I then proved that it is an issue with the file I attached.

I suspect that others might also miss this subtlety and other plugins or tools which use similar metaprogramming techniques will produce other hard to debug problems.

I'm attaching a patch, which restricts any methods of Class.  I originally tried to restrict any methods already defined in the receiving class of named_scope, but the Active records failed because at least one named scope used in the test cases is :base, and that seems to be a method.

The methods restricted are:
&quot;&lt;&quot;, &quot;&lt;=&quot;, &quot;&lt;=&gt;&quot;, &quot;==&quot;, &quot;===&quot;, &quot;=~&quot;, &quot;&gt;&quot;, &quot;&gt;=&quot;, &quot;Array&quot;, &quot;BigDecimal&quot;, &quot;DelegateClass&quot;, &quot;Float&quot;, &quot;Integer&quot;, &quot;Pathname&quot;, &quot;Rational&quot;, &quot;String&quot;, &quot;__id__&quot;, &quot;__send__&quot;, &quot;`&quot;, &quot;abort&quot;, &quot;active_gem_with_options&quot;, &quot;acts_like?&quot;, &quot;alias_attribute&quot;, &quot;alias_method&quot;, &quot;alias_method_chain&quot;, &quot;allocate&quot;, &quot;ancestors&quot;, &quot;as_load_path&quot;, &quot;at_exit&quot;, &quot;attr&quot;, &quot;attr_accessor&quot;, &quot;attr_accessor_with_default&quot;, &quot;attr_internal&quot;, &quot;attr_internal_accessor&quot;, &quot;attr_internal_ivar_name&quot;, &quot;attr_internal_naming_format&quot;, &quot;attr_internal_naming_format=&quot;, &quot;attr_internal_reader&quot;, &quot;attr_internal_writer&quot;, &quot;attr_reader&quot;, &quot;attr_writer&quot;, &quot;autoload&quot;, &quot;autoload?&quot;, &quot;b64encode&quot;, &quot;binding&quot;, &quot;blank?&quot;, &quot;blank_slate_method_added&quot;, &quot;blankslate_original_append_features&quot;, &quot;block_given?&quot;, &quot;breakpoint&quot;, &quot;callcc&quot;, &quot;caller&quot;, &quot;catch&quot;, &quot;cattr_accessor&quot;, &quot;cattr_reader&quot;, &quot;cattr_writer&quot;, &quot;chomp&quot;, &quot;chomp!&quot;, &quot;chop&quot;, &quot;chop!&quot;, &quot;class&quot;, &quot;class_eval&quot;, &quot;class_inheritable_accessor&quot;, &quot;class_inheritable_array&quot;, &quot;class_inheritable_array_writer&quot;, &quot;class_inheritable_hash&quot;, &quot;class_inheritable_hash_writer&quot;, &quot;class_inheritable_reader&quot;, &quot;class_inheritable_writer&quot;, &quot;class_variable_defined?&quot;, &quot;class_variable_get&quot;, &quot;class_variable_set&quot;, &quot;class_variables&quot;, &quot;clone&quot;, &quot;const_defined?&quot;, &quot;const_get&quot;, &quot;const_missing&quot;, &quot;const_set&quot;, &quot;constants&quot;, &quot;copy_instance_variables_from&quot;, &quot;daemonize&quot;, &quot;dclone&quot;, &quot;debugger&quot;, &quot;decode64&quot;, &quot;decode_b&quot;, &quot;define_method&quot;, &quot;delegate&quot;, &quot;deprecate&quot;, &quot;deprecated_method_warning&quot;, &quot;deprecation_horizon&quot;, &quot;display&quot;, &quot;dup&quot;, &quot;duplicable?&quot;, &quot;enable_warnings&quot;, &quot;encode64&quot;, &quot;enum_for&quot;, &quot;eql?&quot;, &quot;equal?&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;exit&quot;, &quot;exit!&quot;, &quot;extend&quot;, &quot;extend_with_included_modules_from&quot;, &quot;extended&quot;, &quot;extended_by&quot;, &quot;fail&quot;, &quot;find_hidden_method&quot;, &quot;fork&quot;, &quot;format&quot;, &quot;freeze&quot;, &quot;frozen?&quot;, &quot;gem&quot;, &quot;gem_original_require&quot;, &quot;getc&quot;, &quot;gets&quot;, &quot;global_variables&quot;, &quot;gsub&quot;, &quot;gsub!&quot;, &quot;hash&quot;, &quot;id&quot;, &quot;include&quot;, &quot;include?&quot;, &quot;included&quot;, &quot;included_in_classes&quot;, &quot;included_modules&quot;, &quot;inheritable_attributes&quot;, &quot;inherited&quot;, &quot;inherited_with_inheritable_attributes&quot;, &quot;inherited_without_inheritable_attributes&quot;, &quot;initialize&quot;, &quot;initialize_copy&quot;, &quot;inspect&quot;, &quot;instance_eval&quot;, &quot;instance_exec&quot;, &quot;instance_method&quot;, &quot;instance_methods&quot;, &quot;instance_of?&quot;, &quot;instance_values&quot;, &quot;instance_variable_defined?&quot;, &quot;instance_variable_get&quot;, &quot;instance_variable_names&quot;, &quot;instance_variable_set&quot;, &quot;instance_variables&quot;, &quot;is_a?&quot;, &quot;iterator?&quot;, &quot;kind_of?&quot;, &quot;lambda&quot;, &quot;load&quot;, &quot;load_without_new_constant_marking&quot;, &quot;local_constant_names&quot;, &quot;local_constants&quot;, &quot;local_variables&quot;, &quot;location_of_caller&quot;, &quot;loop&quot;, &quot;mattr_accessor&quot;, &quot;mattr_reader&quot;, &quot;mattr_writer&quot;, &quot;method&quot;, &quot;method_added&quot;, &quot;method_defined?&quot;, &quot;method_missing&quot;, &quot;method_removed&quot;, &quot;method_undefined&quot;, &quot;methods&quot;, &quot;model_name&quot;, &quot;module_eval&quot;, &quot;name&quot;, &quot;nesting&quot;, &quot;new&quot;, &quot;nil?&quot;, &quot;object_id&quot;, &quot;open&quot;, &quot;p&quot;, &quot;parent&quot;, &quot;parents&quot;, &quot;present?&quot;, &quot;print&quot;, &quot;printf&quot;, &quot;private&quot;, &quot;private_class_method&quot;, &quot;private_instance_methods&quot;, &quot;private_method_defined?&quot;, &quot;private_methods&quot;, &quot;proc&quot;, &quot;protected&quot;, &quot;protected_instance_methods&quot;, &quot;protected_method_defined?&quot;, &quot;protected_methods&quot;, &quot;public&quot;, &quot;public_class_method&quot;, &quot;public_instance_methods&quot;, &quot;public_method_defined?&quot;, &quot;public_methods&quot;, &quot;putc&quot;, &quot;puts&quot;, &quot;rails_original_const_missing&quot;, &quot;raise&quot;, &quot;rand&quot;, &quot;read_inheritable_attribute&quot;, &quot;readline&quot;, &quot;readlines&quot;, &quot;remove_class&quot;, &quot;remove_class_variable&quot;, &quot;remove_const&quot;, &quot;remove_instance_variable&quot;, &quot;remove_method&quot;, &quot;remove_subclasses&quot;, &quot;remove_subclasses_of&quot;, &quot;require&quot;, &quot;require_association&quot;, &quot;require_dependency&quot;, &quot;require_gem&quot;, &quot;require_library_or_gem&quot;, &quot;require_or_load&quot;, &quot;reset_inheritable_attributes&quot;, &quot;respond_to?&quot;, &quot;returning&quot;, &quot;scan&quot;, &quot;select&quot;, &quot;send&quot;, &quot;send!&quot;, &quot;set_trace_func&quot;, &quot;silence_stderr&quot;, &quot;silence_stream&quot;, &quot;silence_warnings&quot;, &quot;singleton_method_added&quot;, &quot;singleton_method_removed&quot;, &quot;singleton_method_undefined&quot;, &quot;singleton_methods&quot;, &quot;sleep&quot;, &quot;split&quot;, &quot;sprintf&quot;, &quot;srand&quot;, &quot;sub&quot;, &quot;sub!&quot;, &quot;subclasses&quot;, &quot;subclasses_of&quot;, &quot;superclass&quot;, &quot;superclass_delegating_accessor&quot;, &quot;superclass_delegating_reader&quot;, &quot;superclass_delegating_writer&quot;, &quot;suppress&quot;, &quot;syscall&quot;, &quot;system&quot;, &quot;taguri&quot;, &quot;taguri=&quot;, &quot;taint&quot;, &quot;tainted?&quot;, &quot;test&quot;, &quot;throw&quot;, &quot;timeout&quot;, &quot;to_a&quot;, &quot;to_enum&quot;, &quot;to_json&quot;, &quot;to_param&quot;, &quot;to_query&quot;, &quot;to_s&quot;, &quot;to_yaml&quot;, &quot;to_yaml_properties&quot;, &quot;to_yaml_style&quot;, &quot;trace_var&quot;, &quot;trap&quot;, &quot;type&quot;, &quot;undef_method&quot;, &quot;unloadable&quot;, &quot;untaint&quot;, &quot;untrace_var&quot;, &quot;warn&quot;, &quot;with_options&quot;, &quot;write_inheritable_array&quot;, &quot;write_inheritable_attribute&quot;, &quot;write_inheritable_hash&quot;, &quot;y&quot;, &quot;yaml_as&quot;, &quot;yaml_tag_class_name&quot;, &quot;yaml_tag_read_class&quot;, and &quot;yaml_tag_subclasses?&quot;

So the patch is a staw man.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
First, I've edited the title of this ticket to more accurately reflect the issue.
&lt;/p&gt;&lt;p&gt;
I'm for adding an exception if someone tries to use named_scope with a name that matches an existing class method.
&lt;/p&gt;&lt;p&gt;
I our case the code was written by a very experienced ruby/rails developer, and he missed the subtlety that it was defining a class method which conflicts with the public directive.  We only discovered the issue when I started converting over from RSpec 1.1.3 to 1.1.4 which exposed the issue, but I then proved that it is an issue with the file I attached.
&lt;/p&gt;&lt;p&gt;
I suspect that others might also miss this subtlety and other plugins or tools which use similar metaprogramming techniques will produce other hard to debug problems.
&lt;/p&gt;&lt;p&gt;
I'm attaching a patch, which restricts any methods of Class.  I originally tried to restrict any methods already defined in the receiving class of named_scope, but the Active records failed because at least one named scope used in the test cases is :base, and that seems to be a method.
&lt;/p&gt;&lt;p&gt;
The methods restricted are:
&lt;/p&gt;&lt;p&gt;
&quot;&amp;lt;&quot;, &quot;&amp;lt;=&quot;, &quot;&amp;lt;=&gt;&quot;, &quot;==&quot;, &quot;===&quot;, &quot;=~&quot;, &quot;&gt;&quot;, &quot;&gt;=&quot;, &quot;Array&quot;, &quot;BigDecimal&quot;, &quot;DelegateClass&quot;, &quot;Float&quot;, &quot;Integer&quot;, &quot;Pathname&quot;, &quot;Rational&quot;, &quot;String&quot;, &quot;__id__&quot;, &quot;__send__&quot;, &quot;`&quot;, &quot;abort&quot;, &quot;active_gem_with_options&quot;, &quot;acts_like?&quot;, &quot;alias_attribute&quot;, &quot;alias_method&quot;, &quot;alias_method_chain&quot;, &quot;allocate&quot;, &quot;ancestors&quot;, &quot;as_load_path&quot;, &quot;at_exit&quot;, &quot;attr&quot;, &quot;attr_accessor&quot;, &quot;attr_accessor_with_default&quot;, &quot;attr_internal&quot;, &quot;attr_internal_accessor&quot;, &quot;attr_internal_ivar_name&quot;, &quot;attr_internal_naming_format&quot;, &quot;attr_internal_naming_format=&quot;, &quot;attr_internal_reader&quot;, &quot;attr_internal_writer&quot;, &quot;attr_reader&quot;, &quot;attr_writer&quot;, &quot;autoload&quot;, &quot;autoload?&quot;, &quot;b64encode&quot;, &quot;binding&quot;, &quot;blank?&quot;, &quot;blank_slate_method_added&quot;, &quot;blankslate_original_append_features&quot;, &quot;block_given?&quot;, &quot;breakpoint&quot;, &quot;callcc&quot;, &quot;caller&quot;, &quot;catch&quot;, &quot;cattr_accessor&quot;, &quot;cattr_reader&quot;, &quot;cattr_writer&quot;, &quot;chomp&quot;, &quot;chomp!&quot;, &quot;chop&quot;, &quot;chop!&quot;, &quot;class&quot;, &quot;class_eval&quot;, &quot;class_inheritable_accessor&quot;, &quot;class_inheritable_array&quot;, &quot;class_inheritable_array_writer&quot;, &quot;class_inheritable_hash&quot;, &quot;class_inheritable_hash_writer&quot;, &quot;class_inheritable_reader&quot;, &quot;class_inheritable_writer&quot;, &quot;class_variable_defined?&quot;, &quot;class_variable_get&quot;, &quot;class_variable_set&quot;, &quot;class_variables&quot;, &quot;clone&quot;, &quot;const_defined?&quot;, &quot;const_get&quot;, &quot;const_missing&quot;, &quot;const_set&quot;, &quot;constants&quot;, &quot;copy_instance_variables_from&quot;, &quot;daemonize&quot;, &quot;dclone&quot;, &quot;debugger&quot;, &quot;decode64&quot;, &quot;decode_b&quot;, &quot;define_method&quot;, &quot;delegate&quot;, &quot;deprecate&quot;, &quot;deprecated_method_warning&quot;, &quot;deprecation_horizon&quot;, &quot;display&quot;, &quot;dup&quot;, &quot;duplicable?&quot;, &quot;enable_warnings&quot;, &quot;encode64&quot;, &quot;enum_for&quot;, &quot;eql?&quot;, &quot;equal?&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;exit&quot;, &quot;exit!&quot;, &quot;extend&quot;, &quot;extend_with_included_modules_from&quot;, &quot;extended&quot;, &quot;extended_by&quot;, &quot;fail&quot;, &quot;find_hidden_method&quot;, &quot;fork&quot;, &quot;format&quot;, &quot;freeze&quot;, &quot;frozen?&quot;, &quot;gem&quot;, &quot;gem_original_require&quot;, &quot;getc&quot;, &quot;gets&quot;, &quot;global_variables&quot;, &quot;gsub&quot;, &quot;gsub!&quot;, &quot;hash&quot;, &quot;id&quot;, &quot;include&quot;, &quot;include?&quot;, &quot;included&quot;, &quot;included_in_classes&quot;, &quot;included_modules&quot;, &quot;inheritable_attributes&quot;, &quot;inherited&quot;, &quot;inherited_with_inheritable_attributes&quot;, &quot;inherited_without_inheritable_attributes&quot;, &quot;initialize&quot;, &quot;initialize_copy&quot;, &quot;inspect&quot;, &quot;instance_eval&quot;, &quot;instance_exec&quot;, &quot;instance_method&quot;, &quot;instance_methods&quot;, &quot;instance_of?&quot;, &quot;instance_values&quot;, &quot;instance_variable_defined?&quot;, &quot;instance_variable_get&quot;, &quot;instance_variable_names&quot;, &quot;instance_variable_set&quot;, &quot;instance_variables&quot;, &quot;is_a?&quot;, &quot;iterator?&quot;, &quot;kind_of?&quot;, &quot;lambda&quot;, &quot;load&quot;, &quot;load_without_new_constant_marking&quot;, &quot;local_constant_names&quot;, &quot;local_constants&quot;, &quot;local_variables&quot;, &quot;location_of_caller&quot;, &quot;loop&quot;, &quot;mattr_accessor&quot;, &quot;mattr_reader&quot;, &quot;mattr_writer&quot;, &quot;method&quot;, &quot;method_added&quot;, &quot;method_defined?&quot;, &quot;method_missing&quot;, &quot;method_removed&quot;, &quot;method_undefined&quot;, &quot;methods&quot;, &quot;model_name&quot;, &quot;module_eval&quot;, &quot;name&quot;, &quot;nesting&quot;, &quot;new&quot;, &quot;nil?&quot;, &quot;object_id&quot;, &quot;open&quot;, &quot;p&quot;, &quot;parent&quot;, &quot;parents&quot;, &quot;present?&quot;, &quot;print&quot;, &quot;printf&quot;, &quot;private&quot;, &quot;private_class_method&quot;, &quot;private_instance_methods&quot;, &quot;private_method_defined?&quot;, &quot;private_methods&quot;, &quot;proc&quot;, &quot;protected&quot;, &quot;protected_instance_methods&quot;, &quot;protected_method_defined?&quot;, &quot;protected_methods&quot;, &quot;public&quot;, &quot;public_class_method&quot;, &quot;public_instance_methods&quot;, &quot;public_method_defined?&quot;, &quot;public_methods&quot;, &quot;putc&quot;, &quot;puts&quot;, &quot;rails_original_const_missing&quot;, &quot;raise&quot;, &quot;rand&quot;, &quot;read_inheritable_attribute&quot;, &quot;readline&quot;, &quot;readlines&quot;, &quot;remove_class&quot;, &quot;remove_class_variable&quot;, &quot;remove_const&quot;, &quot;remove_instance_variable&quot;, &quot;remove_method&quot;, &quot;remove_subclasses&quot;, &quot;remove_subclasses_of&quot;, &quot;require&quot;, &quot;require_association&quot;, &quot;require_dependency&quot;, &quot;require_gem&quot;, &quot;require_library_or_gem&quot;, &quot;require_or_load&quot;, &quot;reset_inheritable_attributes&quot;, &quot;respond_to?&quot;, &quot;returning&quot;, &quot;scan&quot;, &quot;select&quot;, &quot;send&quot;, &quot;send!&quot;, &quot;set_trace_func&quot;, &quot;silence_stderr&quot;, &quot;silence_stream&quot;, &quot;silence_warnings&quot;, &quot;singleton_method_added&quot;, &quot;singleton_method_removed&quot;, &quot;singleton_method_undefined&quot;, &quot;singleton_methods&quot;, &quot;sleep&quot;, &quot;split&quot;, &quot;sprintf&quot;, &quot;srand&quot;, &quot;sub&quot;, &quot;sub!&quot;, &quot;subclasses&quot;, &quot;subclasses_of&quot;, &quot;superclass&quot;, &quot;superclass_delegating_accessor&quot;, &quot;superclass_delegating_reader&quot;, &quot;superclass_delegating_writer&quot;, &quot;suppress&quot;, &quot;syscall&quot;, &quot;system&quot;, &quot;taguri&quot;, &quot;taguri=&quot;, &quot;taint&quot;, &quot;tainted?&quot;, &quot;test&quot;, &quot;throw&quot;, &quot;timeout&quot;, &quot;to_a&quot;, &quot;to_enum&quot;, &quot;to_json&quot;, &quot;to_param&quot;, &quot;to_query&quot;, &quot;to_s&quot;, &quot;to_yaml&quot;, &quot;to_yaml_properties&quot;, &quot;to_yaml_style&quot;, &quot;trace_var&quot;, &quot;trap&quot;, &quot;type&quot;, &quot;undef_method&quot;, &quot;unloadable&quot;, &quot;untaint&quot;, &quot;untrace_var&quot;, &quot;warn&quot;, &quot;with_options&quot;, &quot;write_inheritable_array&quot;, &quot;write_inheritable_attribute&quot;, &quot;write_inheritable_hash&quot;, &quot;y&quot;, &quot;yaml_as&quot;, &quot;yaml_tag_class_name&quot;, &quot;yaml_tag_read_class&quot;, and &quot;yaml_tag_subclasses?&quot;
&lt;/p&gt;&lt;p&gt;
So the patch is a staw man.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-13T18:07:51+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- 
:title: named_scope bashes critical methods
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope can bash critical methods</title>
      <updated-at type="datetime">2008-06-13T18:07:51+01:00</updated-at>
      <user-id type="integer">11063</user-id>
      <version type="integer">7</version>
      <user-name>Rick DeNatale</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Fix the bad test, then :)  Just because it fails doesn't mean it was a good test originally.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Fix the bad test, then :)  Just because it fails doesn't mean it was a good test originally.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-13T19:03:01+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope can bash critical methods</title>
      <updated-at type="datetime">2008-06-13T19:03:01+01:00</updated-at>
      <user-id type="integer">13</user-id>
      <version type="integer">8</version>
      <user-name>court3nay</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Courtenay,

I'm not sure to which test you are referring.

The problem I had was not that the test was failing, but that misuse of named_scope had so borked Ruby so as to make class_eval defining a new method fail.

The spec just exposed a rather critical 'timebomb'.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Courtenay,
&lt;/p&gt;&lt;p&gt;
I'm not sure to which test you are referring.
&lt;/p&gt;&lt;p&gt;
The problem I had was not that the test was failing, but that misuse of named_scope had so borked Ruby so as to make class_eval defining a new method fail.
&lt;/p&gt;&lt;p&gt;
The spec just exposed a rather critical 'timebomb'.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-13T20:16:16+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope can bash critical methods</title>
      <updated-at type="datetime">2008-06-13T20:16:16+01:00</updated-at>
      <user-id type="integer">11063</user-id>
      <version type="integer">9</version>
      <user-name>Rick DeNatale</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>ha, no i mean... if you patch it to check for defined? before allowing a named scope, and one of the core rails tests breaks, then fix that test..</body>
      <body-html>&lt;div&gt;&lt;p&gt;
ha, no i mean... if you patch it to check for defined? before allowing a named scope, and one of the core rails tests breaks, then fix that test..
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-13T21:11:21+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope can bash critical methods</title>
      <updated-at type="datetime">2008-06-13T21:11:21+01:00</updated-at>
      <user-id type="integer">13</user-id>
      <version type="integer">10</version>
      <user-name>court3nay</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I don't think that patch is doing quite the right thing. To get the list of methods to warn about, it does this.

@@@ ruby
RestrictedMethods = Class.methods + Class.private_methods + Class.protected_methods
@@@

But that's going to give you all the methods that the class Class responds to, as opposed to all the methods that an instance of Class that inherits from Object would have. (It turns out the only difference is that it includes the method &quot;nesting,&quot; but it's still in principle just not the list ActiveRecord ought to be warning about.)

It seems like the restricted methods should be pulled from ActiveRecord::Base.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I don't think that patch is doing quite the right thing. To get the list of methods to warn about, it does this.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;RestrictedMethods = Class.methods + Class.private_methods + Class.protected_methods&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
But that's going to give you all the methods that the class Class responds to, as opposed to all the methods that an instance of Class that inherits from Object would have. (It turns out the only difference is that it includes the method &quot;nesting,&quot; but it's still in principle just not the list ActiveRecord ought to be warning about.)
&lt;/p&gt;&lt;p&gt;
It seems like the restricted methods should be pulled from ActiveRecord::Base.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-14T04:24:02+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope can bash critical methods</title>
      <updated-at type="datetime">2008-06-14T04:24:02+01:00</updated-at>
      <user-id type="integer">18585</user-id>
      <version type="integer">11</version>
      <user-name>John Hume</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>What nkallen said.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
What nkallen said.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-23T14:36:37+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">404</number>
      <permalink>named_scope-bashes-critical-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord</tag>
      <title>named_scope can bash critical methods</title>
      <updated-at type="datetime">2008-07-23T14:36:37+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">12</version>
      <user-name>Pratik</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/404</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ec3516b7df95c5fc0ba35d807246eb2d5e5d0304</code>
      <content-type>application/octet-stream</content-type>
      <created-at type="datetime">2008-06-12T21:36:44+01:00</created-at>
      <filename>named_scope_spec.rb</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">27185</id>
      <size type="integer">365</size>
      <uploader-id type="integer">11063</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/27185/named_scope_spec.rb</url>
    </attachment>
    <attachment type="Attachment">
      <code>767766479f4a9a578eb6205042497193e6c0c996</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-06-13T18:07:52+01:00</created-at>
      <filename>restrict_named_scope.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">27359</id>
      <size type="integer">2055</size>
      <uploader-id type="integer">11063</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/27359/restrict_named_scope.diff</url>
    </attachment>
  </attachments>
</ticket>
