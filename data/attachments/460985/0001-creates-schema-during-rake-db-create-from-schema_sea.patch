From be8417e09e2fbd4ba9ceb0756d4cf3d4f6b9c9db Mon Sep 17 00:00:00 2001
From: Rizwan Reza <rizwanreza@gmail.com>
Date: Fri, 26 Mar 2010 17:53:42 +0430
Subject: [PATCH] Creates schema during rake db:create from schema_search_path if it does not exist for PostgreSQL.

---
 .../connection_adapters/postgresql_adapter.rb      |   13 +++++++++++++
 .../lib/active_record/railties/databases.rake      |    6 ++++++
 .../test/cases/active_schema_test_postgresql.rb    |    4 ++++
 activerecord/test/cases/adapter_test.rb            |    4 ++++
 4 files changed, 27 insertions(+), 0 deletions(-)

diff --git a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
index b3ce8c7..5c1e629 100644
--- a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
@@ -651,6 +651,19 @@ module ActiveRecord
         end
       end
 
+      # Creates a schema for the given user
+      #
+      # Example:
+      #   create_schema('products', 'jim')
+      def create_schema(name, username)
+        query("CREATE SCHEMA #{name} AUTHORIZATION #{username}")
+      end
+
+      # Returns an array of all schemas in the database
+      def all_schemas
+        query('SELECT schema_name FROM information_schema.schemata').flatten
+      end
+
 
       # Returns the list of all tables in the schema search path or a specified schema.
       def tables(name = nil)
diff --git a/activerecord/lib/active_record/railties/databases.rake b/activerecord/lib/active_record/railties/databases.rake
index 0229793..06485b9 100644
--- a/activerecord/lib/active_record/railties/databases.rake
+++ b/activerecord/lib/active_record/railties/databases.rake
@@ -85,8 +85,14 @@ namespace :db do
         end
       when 'postgresql'
         @encoding = config[:encoding] || ENV['CHARSET'] || 'utf8'
+        schema_search_path = config['schema_search_path'] || 'public'
+        first_in_schema_search_path = schema_search_path.split(',').first.strip
         begin
           ActiveRecord::Base.establish_connection(config.merge('database' => 'postgres', 'schema_search_path' => 'public'))
+          unless ActiveRecord::Base.connection.all_schemas.include?(first_in_schema_search_path)
+            ActiveRecord::Base.connection.create_schema(first_in_schema_search_path, config['username'])
+            $stderr.puts "Schema #{first_in_schema_search_path} has been created."
+          end
           ActiveRecord::Base.connection.create_database(config['database'], config.merge('encoding' => @encoding))
           ActiveRecord::Base.establish_connection(config)
         rescue
diff --git a/activerecord/test/cases/active_schema_test_postgresql.rb b/activerecord/test/cases/active_schema_test_postgresql.rb
index af80f72..f70a0ea 100644
--- a/activerecord/test/cases/active_schema_test_postgresql.rb
+++ b/activerecord/test/cases/active_schema_test_postgresql.rb
@@ -17,6 +17,10 @@ class PostgresqlActiveSchemaTest < Test::Unit::TestCase
     assert_equal %(CREATE DATABASE "aimonetti" ENCODING = 'latin1'), create_database(:aimonetti, :encoding => :latin1)
   end
 
+  def test_create_schema
+    assert_equal %(CREATE SCHEMA "products" AUTHORIZATION "jim"), create_schema(:products, :jim)
+  end
+
   private
     def method_missing(method_symbol, *arguments)
       ActiveRecord::Base.connection.send(method_symbol, *arguments)
diff --git a/activerecord/test/cases/adapter_test.rb b/activerecord/test/cases/adapter_test.rb
index 9b28766..e798d8e 100644
--- a/activerecord/test/cases/adapter_test.rb
+++ b/activerecord/test/cases/adapter_test.rb
@@ -81,6 +81,10 @@ class AdapterTest < ActiveRecord::TestCase
     def test_encoding
       assert_not_nil @connection.encoding
     end
+
+    def test_all_schemas
+      assert_equal @connection.all_schemas, %w{test_schema test_schema2}
+    end
   end
 
   def test_table_alias
-- 
1.6.5.2

