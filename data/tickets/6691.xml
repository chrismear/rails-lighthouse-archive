<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-09T00:35:29+01:00</created-at>
  <creator-id type="integer">86404</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6691</number>
  <permalink>rails-303-validates_uniqueness_of-case_sensitive-fails-on-utf8-fields</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>&quot;rails 3&quot; validates_uniqueness_of</tag>
  <title>Rails 3.0.3 - validates_uniqueness_of case_sensitive fails on UTF8 fields</title>
  <updated-at type="datetime">2011-04-09T00:35:35+01:00</updated-at>
  <user-id type="integer">86404</user-id>
  <version type="integer">1</version>
  <user-name>Shawn</user-name>
  <creator-name>Shawn</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6691</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hi,

Sorry if this has been fixed in a later release, or is an issue in MySQL, but I'm experiencing an issue with validates_uniqueness_of in my app.  Specifically, when I try to violate the rule the validation does not return an error.

Database is MYSQL 5.0.1 (have tried on later versions as well)
Rails Version is 3.0.3
Ruby Version = 1.9.2p180
Connection encoding is; UTF8
MySQL collation on table / field is: utf8_general_ci
Platforms are Windows and Linux

Example code:

On my User model:

  validates_uniqueness_of :login

In Rails console I find a user record and set it's login to a login that's in use on another record.  Then check user.valid? and it's true when it should be false.

The validator emits the following statement:

SELECT `users`.`id` FROM `users` WHERE (`users`.`login` = BINARY 'my-dupe-id') AND (`users`.id &lt;&gt; 66664) LIMIT 1

This query returns no results.

Adding the :case_sensitive =&gt; true option gets  things working  as the validator is forcing both values to LOWER() and not using the BINARY qualifier.

Again, sorry if this is something wrong with MySQL (as in the product of how I have the database set up) and thanks for reading this and supporting Rails.


Shawn</original-body>
  <latest-body>Hi,

Sorry if this has been fixed in a later release, or is an issue in MySQL, but I'm experiencing an issue with validates_uniqueness_of in my app.  Specifically, when I try to violate the rule the validation does not return an error.

Database is MYSQL 5.0.1 (have tried on later versions as well)
Rails Version is 3.0.3
Ruby Version = 1.9.2p180
Connection encoding is; UTF8
MySQL collation on table / field is: utf8_general_ci
Platforms are Windows and Linux

Example code:

On my User model:

  validates_uniqueness_of :login

In Rails console I find a user record and set it's login to a login that's in use on another record.  Then check user.valid? and it's true when it should be false.

The validator emits the following statement:

SELECT `users`.`id` FROM `users` WHERE (`users`.`login` = BINARY 'my-dupe-id') AND (`users`.id &lt;&gt; 66664) LIMIT 1

This query returns no results.

Adding the :case_sensitive =&gt; true option gets  things working  as the validator is forcing both values to LOWER() and not using the BINARY qualifier.

Again, sorry if this is something wrong with MySQL (as in the product of how I have the database set up) and thanks for reading this and supporting Rails.


Shawn</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Sorry if this has been fixed in a later release, or is an issue
in MySQL, but I'm experiencing an issue with
validates_uniqueness_of in my app. Specifically, when I try to
violate the rule the validation does not return an error.&lt;/p&gt;
&lt;p&gt;Database is MYSQL 5.0.1 (have tried on later versions as
well)&lt;br&gt;
Rails Version is 3.0.3&lt;br&gt;
Ruby Version = 1.9.2p180&lt;br&gt;
Connection encoding is; UTF8&lt;br&gt;
MySQL collation on table / field is: utf8_general_ci&lt;br&gt;
Platforms are Windows and Linux&lt;/p&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;p&gt;On my User model:&lt;/p&gt;
&lt;p&gt;validates_uniqueness_of :login&lt;/p&gt;
&lt;p&gt;In Rails console I find a user record and set it's login to a
login that's in use on another record. Then check user.valid? and
it's true when it should be false.&lt;/p&gt;
&lt;p&gt;The validator emits the following statement:&lt;/p&gt;
&lt;p&gt;SELECT &lt;code&gt;users&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; FROM
&lt;code&gt;users&lt;/code&gt; WHERE (&lt;code&gt;users&lt;/code&gt;.&lt;code&gt;login&lt;/code&gt; =
BINARY 'my-dupe-id') AND (&lt;code&gt;users&lt;/code&gt;.id &amp;lt;&amp;gt; 66664)
LIMIT 1&lt;/p&gt;
&lt;p&gt;This query returns no results.&lt;/p&gt;
&lt;p&gt;Adding the :case_sensitive =&amp;gt; true option gets things working
as the validator is forcing both values to LOWER() and not using
the BINARY qualifier.&lt;/p&gt;
&lt;p&gt;Again, sorry if this is something wrong with MySQL (as in the
product of how I have the database set up) and thanks for reading
this and supporting Rails.&lt;/p&gt;
&lt;p&gt;Shawn&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

Sorry if this has been fixed in a later release, or is an issue in MySQL, but I'm experiencing an issue with validates_uniqueness_of in my app.  Specifically, when I try to violate the rule the validation does not return an error.

Database is MYSQL 5.0.1 (have tried on later versions as well)
Rails Version is 3.0.3
Ruby Version = 1.9.2p180
Connection encoding is; UTF8
MySQL collation on table / field is: utf8_general_ci
Platforms are Windows and Linux

Example code:

On my User model:

  validates_uniqueness_of :login

In Rails console I find a user record and set it's login to a login that's in use on another record.  Then check user.valid? and it's true when it should be false.

The validator emits the following statement:

SELECT `users`.`id` FROM `users` WHERE (`users`.`login` = BINARY 'my-dupe-id') AND (`users`.id &lt;&gt; 66664) LIMIT 1

This query returns no results.

Adding the :case_sensitive =&gt; true option gets  things working  as the validator is forcing both values to LOWER() and not using the BINARY qualifier.

Again, sorry if this is something wrong with MySQL (as in the product of how I have the database set up) and thanks for reading this and supporting Rails.


Shawn</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Sorry if this has been fixed in a later release, or is an issue
in MySQL, but I'm experiencing an issue with
validates_uniqueness_of in my app. Specifically, when I try to
violate the rule the validation does not return an error.&lt;/p&gt;
&lt;p&gt;Database is MYSQL 5.0.1 (have tried on later versions as
well)&lt;br&gt;
Rails Version is 3.0.3&lt;br&gt;
Ruby Version = 1.9.2p180&lt;br&gt;
Connection encoding is; UTF8&lt;br&gt;
MySQL collation on table / field is: utf8_general_ci&lt;br&gt;
Platforms are Windows and Linux&lt;/p&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;p&gt;On my User model:&lt;/p&gt;
&lt;p&gt;validates_uniqueness_of :login&lt;/p&gt;
&lt;p&gt;In Rails console I find a user record and set it's login to a
login that's in use on another record. Then check user.valid? and
it's true when it should be false.&lt;/p&gt;
&lt;p&gt;The validator emits the following statement:&lt;/p&gt;
&lt;p&gt;SELECT &lt;code&gt;users&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; FROM
&lt;code&gt;users&lt;/code&gt; WHERE (&lt;code&gt;users&lt;/code&gt;.&lt;code&gt;login&lt;/code&gt; =
BINARY 'my-dupe-id') AND (&lt;code&gt;users&lt;/code&gt;.id &amp;lt;&amp;gt; 66664)
LIMIT 1&lt;/p&gt;
&lt;p&gt;This query returns no results.&lt;/p&gt;
&lt;p&gt;Adding the :case_sensitive =&amp;gt; true option gets things working
as the validator is forcing both values to LOWER() and not using
the BINARY qualifier.&lt;/p&gt;
&lt;p&gt;Again, sorry if this is something wrong with MySQL (as in the
product of how I have the database set up) and thanks for reading
this and supporting Rails.&lt;/p&gt;
&lt;p&gt;Shawn&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-09T00:35:29+01:00</created-at>
      <creator-id type="integer">86404</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6691</number>
      <permalink>rails-303-validates_uniqueness_of-case_sensitive-fails-on-utf8-fields</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 3&quot; validates_uniqueness_of</tag>
      <title>Rails 3.0.3 - validates_uniqueness_of case_sensitive fails on UTF8 fields</title>
      <updated-at type="datetime">2011-04-09T00:35:35+01:00</updated-at>
      <user-id type="integer">86404</user-id>
      <version type="integer">1</version>
      <user-name>Shawn</user-name>
      <creator-name>Shawn</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6691</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
