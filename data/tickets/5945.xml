<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-10T18:05:03+00:00</created-at>
  <creator-id type="integer">32570</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5945</number>
  <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>active_model active_record callbacks dirty &quot;rails 3.0.1&quot;</tag>
  <title>after_save callbacks are called before dirty tracking is updated</title>
  <updated-at type="datetime">2010-11-26T17:58:12+00:00</updated-at>
  <user-id type="integer">40263</user-id>
  <version type="integer">10</version>
  <user-name>Neeraj Singh</user-name>
  <creator-name>Ari Epstein</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
  <priority-name>Low</priority-name>
  <original-body>Issue:

Callbacks registered with after_save seem to be called before dirty tracking attributes are updated.  Thusly, even though the record is saved, changed attributes still are recorded as changed while the after_save/after_create/after_update callbacks are utilized.

I don't know enough about the internals, but two possible issues here:

 1. Is the current behavior correct?  If so, it would be nice to have it clearly documented that dirty caching is triggered after the callbacks have been called.  This appears to be a change from Rails 2.3 series.
 2. If not, why is this happening?  I don't know enough about the internals to fix it.


To reproduce, set up a new project with just this customization for the model:

@@@ ruby
class Simple &lt; ActiveRecord::Base

  after_create :show_previous_changes

  def show_previous_changes
    puts &quot;Previous changes: #{previous_changes}&quot;
    puts &quot;Changes: #{changes}&quot;
  end

end
@@@


@@@ console

ate2@ari-g5:~/prj$ rails g model simple name:string
      invoke  active_record
      create    db/migrate/20101110174416_create_simples.rb
      create    app/models/simple.rb
      invoke    rspec
      create      spec/models/simple_spec.rb
ate2@ari-g5:~/prj$ rake db:migrate
(in /home/ate2/prj)
==  CreateSimples: migrating ==================================================
-- create_table(:simples)
   -&gt; 0.0018s
==  CreateSimples: migrated (0.0020s) =========================================

ate2@ari-g5:~/prj$ rails c

irb(main):002:0&gt; s=Simple.create :name =&gt; 'blah'
Previous changes: {}
Changes: {&quot;name&quot;=&gt;[nil, &quot;blah&quot;], &quot;created_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;updated_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;id&quot;=&gt;[nil, 1]}
=&gt; #&lt;Simple id: 1, name: &quot;blah&quot;, created_at: &quot;2010-11-10 17:47:07&quot;, updated_at: &quot;2010-11-10 17:47:07&quot;&gt;
irb(main):003:0&gt; s.show_previous_changes
Previous changes: {&quot;name&quot;=&gt;[nil, &quot;blah&quot;], &quot;created_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;updated_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;id&quot;=&gt;[nil, 1]}
Changes: {}
=&gt; nil

@@@</original-body>
  <latest-body>Issue:

Callbacks registered with after_save seem to be called before dirty tracking attributes are updated.  Thusly, even though the record is saved, changed attributes still are recorded as changed while the after_save/after_create/after_update callbacks are utilized.

I don't know enough about the internals, but two possible issues here:

 1. Is the current behavior correct?  If so, it would be nice to have it clearly documented that dirty caching is triggered after the callbacks have been called.  This appears to be a change from Rails 2.3 series.
 2. If not, why is this happening?  I don't know enough about the internals to fix it.


To reproduce, set up a new project with just this customization for the model:

@@@ ruby
class Simple &lt; ActiveRecord::Base

  after_create :show_previous_changes

  def show_previous_changes
    puts &quot;Previous changes: #{previous_changes}&quot;
    puts &quot;Changes: #{changes}&quot;
  end

end
@@@


@@@ console

ate2@ari-g5:~/prj$ rails g model simple name:string
      invoke  active_record
      create    db/migrate/20101110174416_create_simples.rb
      create    app/models/simple.rb
      invoke    rspec
      create      spec/models/simple_spec.rb
ate2@ari-g5:~/prj$ rake db:migrate
(in /home/ate2/prj)
==  CreateSimples: migrating ==================================================
-- create_table(:simples)
   -&gt; 0.0018s
==  CreateSimples: migrated (0.0020s) =========================================

ate2@ari-g5:~/prj$ rails c

irb(main):002:0&gt; s=Simple.create :name =&gt; 'blah'
Previous changes: {}
Changes: {&quot;name&quot;=&gt;[nil, &quot;blah&quot;], &quot;created_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;updated_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;id&quot;=&gt;[nil, 1]}
=&gt; #&lt;Simple id: 1, name: &quot;blah&quot;, created_at: &quot;2010-11-10 17:47:07&quot;, updated_at: &quot;2010-11-10 17:47:07&quot;&gt;
irb(main):003:0&gt; s.show_previous_changes
Previous changes: {&quot;name&quot;=&gt;[nil, &quot;blah&quot;], &quot;created_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;updated_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;id&quot;=&gt;[nil, 1]}
Changes: {}
=&gt; nil

@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Issue:&lt;/p&gt;
&lt;p&gt;Callbacks registered with after_save seem to be called before
dirty tracking attributes are updated. Thusly, even though the
record is saved, changed attributes still are recorded as changed
while the after_save/after_create/after_update callbacks are
utilized.&lt;/p&gt;
&lt;p&gt;I don't know enough about the internals, but two possible issues
here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is the current behavior correct? If so, it would be nice to
have it clearly documented that dirty caching is triggered after
the callbacks have been called. This appears to be a change from
Rails 2.3 series.&lt;/li&gt;
&lt;li&gt;If not, why is this happening? I don't know enough about the
internals to fix it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To reproduce, set up a new project with just this customization
for the model:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Simple &amp;lt; ActiveRecord::Base

  after_create :show_previous_changes

  def show_previous_changes
    puts &quot;Previous changes: #{previous_changes}&quot;
    puts &quot;Changes: #{changes}&quot;
  end

end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;console&quot;&gt;
ate2@ari-g5:~/prj$ rails g model simple name:string
      invoke  active_record
      create    db/migrate/20101110174416_create_simples.rb
      create    app/models/simple.rb
      invoke    rspec
      create      spec/models/simple_spec.rb
ate2@ari-g5:~/prj$ rake db:migrate
(in /home/ate2/prj)
==  CreateSimples: migrating ==================================================
-- create_table(:simples)
   -&amp;gt; 0.0018s
==  CreateSimples: migrated (0.0020s) =========================================

ate2@ari-g5:~/prj$ rails c

irb(main):002:0&amp;gt; s=Simple.create :name =&amp;gt; 'blah'
Previous changes: {}
Changes: {&quot;name&quot;=&amp;gt;[nil, &quot;blah&quot;], &quot;created_at&quot;=&amp;gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;updated_at&quot;=&amp;gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;id&quot;=&amp;gt;[nil, 1]}
=&amp;gt; #&amp;lt;Simple id: 1, name: &quot;blah&quot;, created_at: &quot;2010-11-10 17:47:07&quot;, updated_at: &quot;2010-11-10 17:47:07&quot;&amp;gt;
irb(main):003:0&amp;gt; s.show_previous_changes
Previous changes: {&quot;name&quot;=&amp;gt;[nil, &quot;blah&quot;], &quot;created_at&quot;=&amp;gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;updated_at&quot;=&amp;gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;id&quot;=&amp;gt;[nil, 1]}
Changes: {}
=&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Issue:

Callbacks registered with after_save seem to be called before dirty tracking attributes are updated.  Thusly, even though the record is saved, changed attributes still are recorded as changed while the after_save/after_create/after_update callbacks are utilized.

I don't know enough about the internals, but two possible issues here:

 1. Is the current behavior correct?  If so, it would be nice to have it clearly documented that dirty caching is triggered after the callbacks have been called.  This appears to be a change from Rails 2.3 series.
 2. If not, why is this happening?  I don't know enough about the internals to fix it.


To reproduce, set up a new project with just this customization for the model:

@@@ ruby
class Simple &lt; ActiveRecord::Base

  after_create :show_previous_changes

  def show_previous_changes
    puts &quot;Previous changes: #{previous_changes}&quot;
    puts &quot;Changes: #{changes}&quot;
  end

end
@@@


@@@ console

ate2@ari-g5:~/prj$ rails g model simple name:string
      invoke  active_record
      create    db/migrate/20101110174416_create_simples.rb
      create    app/models/simple.rb
      invoke    rspec
      create      spec/models/simple_spec.rb
ate2@ari-g5:~/prj$ rake db:migrate
(in /home/ate2/prj)
==  CreateSimples: migrating ==================================================
-- create_table(:simples)
   -&gt; 0.0018s
==  CreateSimples: migrated (0.0020s) =========================================

ate2@ari-g5:~/prj$ rails c

irb(main):002:0&gt; s=Simple.create :name =&gt; 'blah'
Previous changes: {}
Changes: {&quot;name&quot;=&gt;[nil, &quot;blah&quot;], &quot;created_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;updated_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;id&quot;=&gt;[nil, 1]}
=&gt; #&lt;Simple id: 1, name: &quot;blah&quot;, created_at: &quot;2010-11-10 17:47:07&quot;, updated_at: &quot;2010-11-10 17:47:07&quot;&gt;
irb(main):003:0&gt; s.show_previous_changes
Previous changes: {&quot;name&quot;=&gt;[nil, &quot;blah&quot;], &quot;created_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;updated_at&quot;=&gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;id&quot;=&gt;[nil, 1]}
Changes: {}
=&gt; nil

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Issue:&lt;/p&gt;
&lt;p&gt;Callbacks registered with after_save seem to be called before
dirty tracking attributes are updated. Thusly, even though the
record is saved, changed attributes still are recorded as changed
while the after_save/after_create/after_update callbacks are
utilized.&lt;/p&gt;
&lt;p&gt;I don't know enough about the internals, but two possible issues
here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is the current behavior correct? If so, it would be nice to
have it clearly documented that dirty caching is triggered after
the callbacks have been called. This appears to be a change from
Rails 2.3 series.&lt;/li&gt;
&lt;li&gt;If not, why is this happening? I don't know enough about the
internals to fix it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To reproduce, set up a new project with just this customization
for the model:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Simple &amp;lt; ActiveRecord::Base

  after_create :show_previous_changes

  def show_previous_changes
    puts &quot;Previous changes: #{previous_changes}&quot;
    puts &quot;Changes: #{changes}&quot;
  end

end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;console&quot;&gt;
ate2@ari-g5:~/prj$ rails g model simple name:string
      invoke  active_record
      create    db/migrate/20101110174416_create_simples.rb
      create    app/models/simple.rb
      invoke    rspec
      create      spec/models/simple_spec.rb
ate2@ari-g5:~/prj$ rake db:migrate
(in /home/ate2/prj)
==  CreateSimples: migrating ==================================================
-- create_table(:simples)
   -&amp;gt; 0.0018s
==  CreateSimples: migrated (0.0020s) =========================================

ate2@ari-g5:~/prj$ rails c

irb(main):002:0&amp;gt; s=Simple.create :name =&amp;gt; 'blah'
Previous changes: {}
Changes: {&quot;name&quot;=&amp;gt;[nil, &quot;blah&quot;], &quot;created_at&quot;=&amp;gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;updated_at&quot;=&amp;gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;id&quot;=&amp;gt;[nil, 1]}
=&amp;gt; #&amp;lt;Simple id: 1, name: &quot;blah&quot;, created_at: &quot;2010-11-10 17:47:07&quot;, updated_at: &quot;2010-11-10 17:47:07&quot;&amp;gt;
irb(main):003:0&amp;gt; s.show_previous_changes
Previous changes: {&quot;name&quot;=&amp;gt;[nil, &quot;blah&quot;], &quot;created_at&quot;=&amp;gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;updated_at&quot;=&amp;gt;[nil, Wed, 10 Nov 2010 17:47:07 UTC +00:00], &quot;id&quot;=&amp;gt;[nil, 1]}
Changes: {}
=&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-10T18:05:03+00:00</created-at>
      <creator-id type="integer">32570</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5945</number>
      <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_model active_record callbacks dirty</tag>
      <title>after_save callbacks are called before dirty tracking is updated</title>
      <updated-at type="datetime">2010-11-10T18:06:50+00:00</updated-at>
      <user-id type="integer">32570</user-id>
      <version type="integer">1</version>
      <user-name>Ari Epstein</user-name>
      <creator-name>Ari Epstein</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-10T18:06:19+00:00</created-at>
      <creator-id type="integer">32570</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: active_model active_record callbacks dirty
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5945</number>
      <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_model active_record callbacks dirty &quot;rails 3.0.1&quot;</tag>
      <title>after_save callbacks are called before dirty tracking is updated</title>
      <updated-at type="datetime">2010-11-10T18:06:21+00:00</updated-at>
      <user-id type="integer">32570</user-id>
      <version type="integer">2</version>
      <user-name>Ari Epstein</user-name>
      <creator-name>Ari Epstein</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes it is a feature and it is documented.

@@@ ruby

    # Map of attributes that were changed when the model was saved.
    #   person.name # =&gt; 'bob'
    #   person.name = 'robert'
    #   person.save
    #   person.previous_changes # =&gt; {'name' =&gt; ['bob, 'robert']}
    def previous_changes
      @previously_changed
    end
@@@

Does that answer your question?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes it is a feature and it is documented.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
    # Map of attributes that were changed when the model was saved.
    #   person.name # =&amp;gt; 'bob'
    #   person.name = 'robert'
    #   person.save
    #   person.previous_changes # =&amp;gt; {'name' =&amp;gt; ['bob, 'robert']}
    def previous_changes
      @previously_changed
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Does that answer your question?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-10T21:08:56+00:00</created-at>
      <creator-id type="integer">32570</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5945</number>
      <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_model active_record callbacks dirty &quot;rails 3.0.1&quot;</tag>
      <title>after_save callbacks are called before dirty tracking is updated</title>
      <updated-at type="datetime">2010-11-10T21:09:01+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">3</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Ari Epstein</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>No, does not answer my question.  The question is when should @previously_changed be populated and changes be cleared?  It appears that it is populated AFTER the after_save, after_create, etc. callbacks are called.  In the 2.3 branch, the changes were cleared before the after_save callbacks.  The behavior has changed.  Is this intentional (if so, it doesn't seem right to me and certainly does not appear to be documented) or is this a bug?  It seems like a bug to me.</body>
      <body-html>&lt;div&gt;&lt;p&gt;No, does not answer my question. The question is when should
@previously_changed be populated and changes be cleared? It appears
that it is populated AFTER the after_save, after_create, etc.
callbacks are called. In the 2.3 branch, the changes were cleared
before the after_save callbacks. The behavior has changed. Is this
intentional (if so, it doesn't seem right to me and certainly does
not appear to be documented) or is this a bug? It seems like a bug
to me.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-10T21:59:51+00:00</created-at>
      <creator-id type="integer">32570</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5945</number>
      <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_model active_record callbacks dirty &quot;rails 3.0.1&quot;</tag>
      <title>after_save callbacks are called before dirty tracking is updated</title>
      <updated-at type="datetime">2010-11-10T21:59:53+00:00</updated-at>
      <user-id type="integer">32570</user-id>
      <version type="integer">4</version>
      <user-name>Ari Epstein</user-name>
      <creator-name>Ari Epstein</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I see what you are saying. I will try to get some info on this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I see what you are saying. I will try to get some info on
this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-10T22:29:49+00:00</created-at>
      <creator-id type="integer">32570</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5945</number>
      <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_model active_record callbacks dirty &quot;rails 3.0.1&quot;</tag>
      <title>after_save callbacks are called before dirty tracking is updated</title>
      <updated-at type="datetime">2010-11-10T22:29:52+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">5</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Ari Epstein</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Assigning it to Mr. Valim because the question has more to do with historical context. And he has been around a long time :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Assigning it to Mr. Valim because the question has more to do
with historical context. And he has been around a long time :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-12T17:40:30+00:00</created-at>
      <creator-id type="integer">32570</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5945</number>
      <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_model active_record callbacks dirty &quot;rails 3.0.1&quot;</tag>
      <title>after_save callbacks are called before dirty tracking is updated</title>
      <updated-at type="datetime">2010-11-12T17:40:31+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Ari Epstein</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, this seems to be a bug. Maybe the order of callbacks is reversed? In other words:

  after_save :a
  after_save :b

Should first execute :a and then :b. This may cause the callback that cleans up dirty attributes to come last.

Neeraj, I think we had a ticket about this, right? Wasn't it fixed? Ari, in which Rails version have you tested?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, this seems to be a bug. Maybe the order of callbacks is
reversed? In other words:&lt;/p&gt;
&lt;p&gt;after_save :a after_save :b&lt;/p&gt;
&lt;p&gt;Should first execute :a and then :b. This may cause the callback
that cleans up dirty attributes to come last.&lt;/p&gt;
&lt;p&gt;Neeraj, I think we had a ticket about this, right? Wasn't it
fixed? Ari, in which Rails version have you tested?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-25T09:54:58+00:00</created-at>
      <creator-id type="integer">32570</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5945</number>
      <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_model active_record callbacks dirty &quot;rails 3.0.1&quot;</tag>
      <title>after_save callbacks are called before dirty tracking is updated</title>
      <updated-at type="datetime">2010-11-25T09:55:00+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">7</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Ari Epstein</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ari said: 

&gt;In the 2.3 branch, the changes were cleared before the after_save callbacks. 

I tested with Rails 2.3.10 and this is what I found.

@@@ ruby
class User &lt; ActiveRecord::Base
  after_save :show_previous_changes

  def show_previous_changes
    #puts &quot;Previous changes: #{self.previous_changes}&quot;
    puts &quot;Changes: #{self.changes.inspect}&quot;
  end  
end

u = Useree-1.8.7-2010.02 &gt; u = User.first
  User Load (0.6ms)   SELECT * FROM &quot;users&quot; LIMIT 1
 =&gt; #&lt;User id: 1, name: &quot;john&quot;, created_at: &quot;2010-11-26 09:31:07&quot;, updated_at: &quot;2010-11-26 09:42:53&quot;&gt; 
ree-1.8.7-2010.02 &gt; u.name = 'john2'
ree-1.8.7-2010.02 &gt; u.save
Changes: {&quot;name&quot;=&gt;[&quot;john&quot;, &quot;john2&quot;], &quot;updated_at&quot;=&gt;[Fri Nov 26 09:42:53 UTC 2010, Fri, 26 Nov 2010 09:43:21 UTC +00:00]}
ree-1.8.7-2010.02 &gt; u.show_previous_changes
Changes: {}
@@@

As you can see after_save callback in Rails 2.3.10 has changes *NOT* cleared.

If I run the same code with rails edge this is what I get

@@@ ruby
class User &lt; ActiveRecord::Base
  after_save :show_previous_changes

  def show_previous_changes
    puts &quot;Previous changes: #{self.previous_changes}&quot;
    puts &quot;Changes: #{self.changes.inspect}&quot;
  end
end

ree-1.8.7-2010.02 &gt; u = User.first
  User Load (0.8ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; LIMIT 1
 =&gt; #&lt;User id: 1, name: &quot;john&quot;, created_at: &quot;2010-11-26 09:33:47&quot;, updated_at: &quot;2010-11-26 09:43:07&quot;&gt; 
ree-1.8.7-2010.02 &gt; u.name='john2'
ree-1.8.7-2010.02 &gt; u.save
Previous changes: 
Changes: {&quot;name&quot;=&gt;[&quot;john&quot;, &quot;john2&quot;], &quot;updated_at&quot;=&gt;[Fri, 26 Nov 2010 09:43:07 UTC +00:00, Fri, 26 Nov 2010 09:43:54 UTC +00:00]}
ree-1.8.7-2010.02 &gt; u.show_previous_changes
Previous changes: namejohnjohn2updated_at2010-11-26 09:43:07 UTC2010-11-26 09:43:54 UTC
Changes: {}
@@@

It seems to me that both Rails edge and Rails 2.3.10 after_save callbacks keep the value of changes intact and there does not seem to be any discrepancy.

It's 5 in the morning so I am sure I am missing something. :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ari said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the 2.3 branch, the changes were cleared before the
after_save callbacks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I tested with Rails 2.3.10 and this is what I found.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  after_save :show_previous_changes

  def show_previous_changes
    #puts &quot;Previous changes: #{self.previous_changes}&quot;
    puts &quot;Changes: #{self.changes.inspect}&quot;
  end  
end

u = Useree-1.8.7-2010.02 &amp;gt; u = User.first
  User Load (0.6ms)   SELECT * FROM &quot;users&quot; LIMIT 1
 =&amp;gt; #&amp;lt;User id: 1, name: &quot;john&quot;, created_at: &quot;2010-11-26 09:31:07&quot;, updated_at: &quot;2010-11-26 09:42:53&quot;&amp;gt; 
ree-1.8.7-2010.02 &amp;gt; u.name = 'john2'
ree-1.8.7-2010.02 &amp;gt; u.save
Changes: {&quot;name&quot;=&amp;gt;[&quot;john&quot;, &quot;john2&quot;], &quot;updated_at&quot;=&amp;gt;[Fri Nov 26 09:42:53 UTC 2010, Fri, 26 Nov 2010 09:43:21 UTC +00:00]}
ree-1.8.7-2010.02 &amp;gt; u.show_previous_changes
Changes: {}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see after_save callback in Rails 2.3.10 has changes
&lt;em&gt;NOT&lt;/em&gt; cleared.&lt;/p&gt;
&lt;p&gt;If I run the same code with rails edge this is what I get&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  after_save :show_previous_changes

  def show_previous_changes
    puts &quot;Previous changes: #{self.previous_changes}&quot;
    puts &quot;Changes: #{self.changes.inspect}&quot;
  end
end

ree-1.8.7-2010.02 &amp;gt; u = User.first
  User Load (0.8ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; LIMIT 1
 =&amp;gt; #&amp;lt;User id: 1, name: &quot;john&quot;, created_at: &quot;2010-11-26 09:33:47&quot;, updated_at: &quot;2010-11-26 09:43:07&quot;&amp;gt; 
ree-1.8.7-2010.02 &amp;gt; u.name='john2'
ree-1.8.7-2010.02 &amp;gt; u.save
Previous changes: 
Changes: {&quot;name&quot;=&amp;gt;[&quot;john&quot;, &quot;john2&quot;], &quot;updated_at&quot;=&amp;gt;[Fri, 26 Nov 2010 09:43:07 UTC +00:00, Fri, 26 Nov 2010 09:43:54 UTC +00:00]}
ree-1.8.7-2010.02 &amp;gt; u.show_previous_changes
Previous changes: namejohnjohn2updated_at2010-11-26 09:43:07 UTC2010-11-26 09:43:54 UTC
Changes: {}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It seems to me that both Rails edge and Rails 2.3.10 after_save
callbacks keep the value of changes intact and there does not seem
to be any discrepancy.&lt;/p&gt;
&lt;p&gt;It's 5 in the morning so I am sure I am missing something.
:-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-26T09:52:52+00:00</created-at>
      <creator-id type="integer">32570</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5945</number>
      <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_model active_record callbacks dirty &quot;rails 3.0.1&quot;</tag>
      <title>after_save callbacks are called before dirty tracking is updated</title>
      <updated-at type="datetime">2010-11-26T09:52:54+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">8</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Ari Epstein</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hmm... when I did my initial coding on an application where this matters, I could swear that changes got reset before after_save callbacks, but I'm finding this isn't the case with 2.3.5 or subsequent branches. So I guess this is not a bug if it's the intended behavior.  Just want to make sure it's not going to change.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hmm... when I did my initial coding on an application where this
matters, I could swear that changes got reset before after_save
callbacks, but I'm finding this isn't the case with 2.3.5 or
subsequent branches. So I guess this is not a bug if it's the
intended behavior. Just want to make sure it's not going to
change.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-26T17:41:32+00:00</created-at>
      <creator-id type="integer">32570</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5945</number>
      <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_model active_record callbacks dirty &quot;rails 3.0.1&quot;</tag>
      <title>after_save callbacks are called before dirty tracking is updated</title>
      <updated-at type="datetime">2010-11-26T17:41:42+00:00</updated-at>
      <user-id type="integer">32570</user-id>
      <version type="integer">9</version>
      <user-name>Ari Epstein</user-name>
      <creator-name>Ari Epstein</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It is quite possible that behavior might have changed between 2.3.5 and 2.3.10. :-(

However it seems current rails edge is consistent with 2.3.10 . Closing this ticket for now. Please feel free to add to it if you find anything new.

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;It is quite possible that behavior might have changed between
2.3.5 and 2.3.10. :-(&lt;/p&gt;
&lt;p&gt;However it seems current rails edge is consistent with 2.3.10 .
Closing this ticket for now. Please feel free to add to it if you
find anything new.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-26T17:58:09+00:00</created-at>
      <creator-id type="integer">32570</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5945</number>
      <permalink>after_save-callbacks-are-called-before-dirty-tracking-is-updated</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>active_model active_record callbacks dirty &quot;rails 3.0.1&quot;</tag>
      <title>after_save callbacks are called before dirty tracking is updated</title>
      <updated-at type="datetime">2010-11-26T17:58:12+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">10</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Ari Epstein</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5945</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
