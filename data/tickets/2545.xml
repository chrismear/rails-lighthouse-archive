<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-22T23:43:03+01:00</created-at>
  <creator-id type="integer">21653</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2545</number>
  <permalink>validations-based-on-methods-and-not-actual-attributes</permalink>
  <priority type="integer">1687</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>validations</tag>
  <title>validations based on methods and not actual attributes</title>
  <updated-at type="datetime">2009-04-23T15:18:02+01:00</updated-at>
  <user-id type="integer">21653</user-id>
  <version type="integer">5</version>
  <user-name>Amos King</user-name>
  <creator-name>Amos King</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2545</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The validations are calling methods.  Let's say I have an attribute 'attr' and I have a validates_presence_of :attr.  Now I have the following method

def attr
  super || 0
end

This is a dumb example, but I think you will get the point.

MyObject.create!

does not fail.  This is because the validations are running against methods and not against actual attribute values.</original-body>
  <latest-body>The validations are calling methods.  Let's say I have an attribute 'attr' and I have a validates_presence_of :attr.  Now I have the following method

def attr
  super || 0
end

This is a dumb example, but I think you will get the point.

MyObject.create!

does not fail.  This is because the validations are running against methods and not against actual attribute values.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The validations are calling methods. Let's say I have an
attribute 'attr' and I have a validates_presence_of :attr. Now I
have the following method&lt;/p&gt;
&lt;p&gt;def attr super || 0 end&lt;/p&gt;
&lt;p&gt;This is a dumb example, but I think you will get the point.&lt;/p&gt;
&lt;p&gt;MyObject.create!&lt;/p&gt;
&lt;p&gt;does not fail. This is because the validations are running
against methods and not against actual attribute values.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The validations are calling methods.  Let's say I have an attribute 'attr' and I have a validates_presence_of :attr.  Now I have the following method

def attr
  super || 0
end

This is a dumb example, but I think you will get the point.

MyObject.create!

does not fail.  This is because the validations are running against methods and not against actual attribute values.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The validations are calling methods. Let's say I have an
attribute 'attr' and I have a validates_presence_of :attr. Now I
have the following method&lt;/p&gt;
&lt;p&gt;def attr super || 0 end&lt;/p&gt;
&lt;p&gt;This is a dumb example, but I think you will get the point.&lt;/p&gt;
&lt;p&gt;MyObject.create!&lt;/p&gt;
&lt;p&gt;does not fail. This is because the validations are running
against methods and not against actual attribute values.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-22T23:43:03+01:00</created-at>
      <creator-id type="integer">21653</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2545</number>
      <permalink>validations-based-on-methods-and-not-actual-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>validations based on methods and not actual attributes</title>
      <updated-at type="datetime">2009-04-22T23:43:05+01:00</updated-at>
      <user-id type="integer">21653</user-id>
      <version type="integer">1</version>
      <user-name>Amos King</user-name>
      <creator-name>Amos King</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2545</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It is ok, because You've defined accessor method yourself.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It is ok, because You've defined accessor method yourself.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-23T10:22:56+01:00</created-at>
      <creator-id type="integer">21653</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2545</number>
      <permalink>validations-based-on-methods-and-not-actual-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>invalid</tag>
      <title>validations based on methods and not actual attributes</title>
      <updated-at type="datetime">2009-04-23T10:23:01+01:00</updated-at>
      <user-id type="integer">9721</user-id>
      <version type="integer">2</version>
      <user-name>Max Lapshin</user-name>
      <creator-name>Amos King</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2545</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It is not ok.  If your database isn't constraining that column you may have bad data in the database.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It is not ok. If your database isn't constraining that column
you may have bad data in the database.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-23T13:25:19+01:00</created-at>
      <creator-id type="integer">21653</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: invalid
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2545</number>
      <permalink>validations-based-on-methods-and-not-actual-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validations</tag>
      <title>validations based on methods and not actual attributes</title>
      <updated-at type="datetime">2009-04-23T13:25:22+01:00</updated-at>
      <user-id type="integer">21653</user-id>
      <version type="integer">3</version>
      <user-name>Amos King</user-name>
      <creator-name>Amos King</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2545</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you have a fix for this, please submit a patch. Otherwise, it looks like a simple case of &quot;don't do that.&quot; If you patch, please explain how Rails is supposed to figure out what database column you intend to be validated for an arbitrary method.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you have a fix for this, please submit a patch. Otherwise, it
looks like a simple case of &quot;don't do that.&quot; If you patch, please
explain how Rails is supposed to figure out what database column
you intend to be validated for an arbitrary method.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-23T13:47:25+01:00</created-at>
      <creator-id type="integer">21653</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2545</number>
      <permalink>validations-based-on-methods-and-not-actual-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>validations</tag>
      <title>validations based on methods and not actual attributes</title>
      <updated-at type="datetime">2009-04-23T13:47:30+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">4</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Amos King</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2545</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails should validate off of the attribute and save from the attribute.  I'm not suggesting to change the save.  The save currently works off of the attributes.  I'm suggesting that since save is run from those attributes that validations should also be run against the same attributes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails should validate off of the attribute and save from the
attribute. I'm not suggesting to change the save. The save
currently works off of the attributes. I'm suggesting that since
save is run from those attributes that validations should also be
run against the same attributes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-23T15:18:01+01:00</created-at>
      <creator-id type="integer">21653</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2545</number>
      <permalink>validations-based-on-methods-and-not-actual-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>validations</tag>
      <title>validations based on methods and not actual attributes</title>
      <updated-at type="datetime">2009-04-23T15:18:02+01:00</updated-at>
      <user-id type="integer">21653</user-id>
      <version type="integer">5</version>
      <user-name>Amos King</user-name>
      <creator-name>Amos King</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2545</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
