<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-24T22:59:35+00:00</created-at>
  <creator-id type="integer">22814</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1463</number>
  <permalink>in_scope</permalink>
  <priority type="integer">832</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord edge enhancement named_scope patch tested</tag>
  <title>in_scope?</title>
  <updated-at type="datetime">2009-03-07T15:58:57+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>qoobaa</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1463</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The patch adds new scope functionality that I've found very useful in my project. It simple adds new instance method called in_scope? to each defined named_scope. I use it in several cases, i.e.

@@@
class User
  named_scope :destroyable, :conditions =&gt; &quot;...&quot; # simple association check
  before_destroy :in_destroyable?
end
@@@

Firstly I used :destroyable? method (without &quot;in_&quot;) but it may collide with some boolean attributes like &quot;active&quot;, etc. Implementation is very simple and it uses ordinary :include? method to check the inclusion. Probably it can be optimised to do the inclusion check in SQL, but for me it's really enough.</original-body>
  <latest-body>The patch adds new scope functionality that I've found very useful in my project. It simple adds new instance method called in_scope? to each defined named_scope. I use it in several cases, i.e.

@@@
class User
  named_scope :destroyable, :conditions =&gt; &quot;...&quot; # simple association check
  before_destroy :in_destroyable?
end
@@@

Firstly I used :destroyable? method (without &quot;in_&quot;) but it may collide with some boolean attributes like &quot;active&quot;, etc. Implementation is very simple and it uses ordinary :include? method to check the inclusion. Probably it can be optimised to do the inclusion check in SQL, but for me it's really enough.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The patch adds new scope functionality that I've found very
useful in my project. It simple adds new instance method called
in_scope? to each defined named_scope. I use it in several cases,
i.e.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class User
  named_scope :destroyable, :conditions =&amp;gt; &amp;quot;...&amp;quot; # simple association check
  before_destroy :in_destroyable?
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Firstly I used :destroyable? method (without &quot;in_&quot;) but it may
collide with some boolean attributes like &quot;active&quot;, etc.
Implementation is very simple and it uses ordinary :include? method
to check the inclusion. Probably it can be optimised to do the
inclusion check in SQL, but for me it's really enough.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The patch adds new scope functionality that I've found very useful in my project. It simply adds new instance method called in_scope? to each defined named_scope. I use it in several cases, i.e.

@@@
class User
  named_scope :destroyable, :conditions =&gt; &quot;...&quot; # simple association check
  before_destroy :in_destroyable?
end

user = User.destroyable.first

user.in_destroyable? # the same as User.destroyable.include?(user)
#=&gt; true
@@@

Firstly I used :destroyable? method (without &quot;in_&quot;) but it may collide with some boolean attributes like &quot;active&quot;, etc. Implementation is very simple and it uses ordinary :include? method to check the inclusion. Probably it can be optimised to do the inclusion check in SQL, but for me it's really enough.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The patch adds new scope functionality that I've found very
useful in my project. It simply adds new instance method called
in_scope? to each defined named_scope. I use it in several cases,
i.e.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class User
  named_scope :destroyable, :conditions =&amp;gt; &amp;quot;...&amp;quot; # simple association check
  before_destroy :in_destroyable?
end

user = User.destroyable.first

user.in_destroyable? # the same as User.destroyable.include?(user)
#=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Firstly I used :destroyable? method (without &quot;in_&quot;) but it may
collide with some boolean attributes like &quot;active&quot;, etc.
Implementation is very simple and it uses ordinary :include? method
to check the inclusion. Probably it can be optimised to do the
inclusion check in SQL, but for me it's really enough.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-24T22:59:35+00:00</created-at>
      <creator-id type="integer">22814</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1463</number>
      <permalink>in_scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord edge enhancement named_scope tested</tag>
      <title>in_scope?</title>
      <updated-at type="datetime">2008-11-25T09:39:08+00:00</updated-at>
      <user-id type="integer">22814</user-id>
      <version type="integer">1</version>
      <user-name>qoobaa</user-name>
      <creator-name>qoobaa</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1463</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't think this belongs to core. Also, you could just use exists? though.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think this belongs to core. Also, you could just use
exists? though.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-07T15:58:52+00:00</created-at>
      <creator-id type="integer">22814</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord edge enhancement named_scope tested
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1463</number>
      <permalink>in_scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord edge enhancement named_scope patch tested</tag>
      <title>in_scope?</title>
      <updated-at type="datetime">2009-03-07T15:58:57+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>qoobaa</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1463</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>43911d78a9cd7f3cf0ae1065762785ef0c45880a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-11-24T22:59:35+00:00</created-at>
      <filename>in_scope.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">65176</id>
      <size type="integer">1814</size>
      <uploader-id type="integer">22814</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/65176/in_scope.diff</url>
    </attachment>
  </attachments>
</ticket>
