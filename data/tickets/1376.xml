<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-14T18:18:22+00:00</created-at>
  <creator-id type="integer">22589</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1376</number>
  <permalink>has_one-through-with-decorated-join-model-saves-incorrectly</permalink>
  <priority type="integer">771</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.2.rc1 bug edge has_one_through patch</tag>
  <title>has_one :through with decorated join model saves incorrectly</title>
  <updated-at type="datetime">2008-11-15T17:24:36+00:00</updated-at>
  <user-id type="integer">141</user-id>
  <version type="integer">3</version>
  <user-name>Michael Koziarski</user-name>
  <creator-name>Matt Jones</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1376</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The attached patch is several failing tests that show a problem with using has_one :through with a decorated model.

Models are:

@@@ ruby
# simplified for readability - see full model in source
class Member &lt; ActiveRecord::Base
  has_one :member_detail
  has_one :organization, :through =&gt; :member_detail
end

class MemberDetail &lt; ActiveRecord::Base
  # has additional string field 'extra_data'
  belongs_to :member
  belongs_to :organization
end

class Organization &lt; ActiveRecord::Base
  has_many :member_details
  has_many :members, :through =&gt; :member_details
end
@@@

The problem appears when you create a member, add a member_detail to it, and then add it to an organization. Either two MemberDetails get created, or one is created without the extra_data field set correctly.

See attached tests for more details - all three currently fail.</original-body>
  <latest-body>The attached patch is several failing tests that show a problem with using has_one :through with a decorated model.

Models are:

@@@ ruby
# simplified for readability - see full model in source
class Member &lt; ActiveRecord::Base
  has_one :member_detail
  has_one :organization, :through =&gt; :member_detail
end

class MemberDetail &lt; ActiveRecord::Base
  # has additional string field 'extra_data'
  belongs_to :member
  belongs_to :organization
end

class Organization &lt; ActiveRecord::Base
  has_many :member_details
  has_many :members, :through =&gt; :member_details
end
@@@

The problem appears when you create a member, add a member_detail to it, and then add it to an organization. Either two MemberDetails get created, or one is created without the extra_data field set correctly.

See attached tests for more details - all three currently fail.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The attached patch is several failing tests that show a problem
with using has_one :through with a decorated model.&lt;/p&gt;
&lt;p&gt;Models are:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# simplified for readability - see full model in source
class Member &amp;lt; ActiveRecord::Base
  has_one :member_detail
  has_one :organization, :through =&amp;gt; :member_detail
end

class MemberDetail &amp;lt; ActiveRecord::Base
  # has additional string field 'extra_data'
  belongs_to :member
  belongs_to :organization
end

class Organization &amp;lt; ActiveRecord::Base
  has_many :member_details
  has_many :members, :through =&amp;gt; :member_details
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem appears when you create a member, add a
member_detail to it, and then add it to an organization. Either two
MemberDetails get created, or one is created without the extra_data
field set correctly.&lt;/p&gt;
&lt;p&gt;See attached tests for more details - all three currently
fail.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The attached patch is several failing tests that show a problem with using has_one :through with a decorated model.

Models are:

@@@ ruby
# simplified for readability - see full model in source
class Member &lt; ActiveRecord::Base
  has_one :member_detail
  has_one :organization, :through =&gt; :member_detail
end

class MemberDetail &lt; ActiveRecord::Base
  # has additional string field 'extra_data'
  belongs_to :member
  belongs_to :organization
end

class Organization &lt; ActiveRecord::Base
  has_many :member_details
  has_many :members, :through =&gt; :member_details
end
@@@

The problem appears when you create a member, add a member_detail to it, and then add it to an organization. Either two MemberDetails get created, or one is created without the extra_data field set correctly.

See attached tests for more details - all three currently fail.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The attached patch is several failing tests that show a problem
with using has_one :through with a decorated model.&lt;/p&gt;
&lt;p&gt;Models are:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# simplified for readability - see full model in source
class Member &amp;lt; ActiveRecord::Base
  has_one :member_detail
  has_one :organization, :through =&amp;gt; :member_detail
end

class MemberDetail &amp;lt; ActiveRecord::Base
  # has additional string field 'extra_data'
  belongs_to :member
  belongs_to :organization
end

class Organization &amp;lt; ActiveRecord::Base
  has_many :member_details
  has_many :members, :through =&amp;gt; :member_details
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem appears when you create a member, add a
member_detail to it, and then add it to an organization. Either two
MemberDetails get created, or one is created without the extra_data
field set correctly.&lt;/p&gt;
&lt;p&gt;See attached tests for more details - all three currently
fail.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-14T18:18:22+00:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1376</number>
      <permalink>has_one-through-with-decorated-join-model-saves-incorrectly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.rc1 bug edge has_one_through</tag>
      <title>has_one :through with decorated join model saves incorrectly</title>
      <updated-at type="datetime">2008-11-14T18:18:28+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">1</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Matt Jones</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1376</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Update: Some digging tracked this down to HasOneThroughAssociation#create_through_record; it was always deleting the join model record. The attached patch instead uses update_attributes if the join model already exists, and includes tests.

Two of the tests in the previous patch were removed; adding records to the association from the other side doesn't work correctly. Thus

@@@ ruby
@organization.members &lt;&lt; @member
@@@

will still yield bad behavior - but I'm not sure if it *should* work. The has_many :through on @organization doesn't know anything about the associations defined on @member. Maybe there needs to be a warning in the docs?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Update: Some digging tracked this down to
HasOneThroughAssociation#create_through_record; it was always
deleting the join model record. The attached patch instead uses
update_attributes if the join model already exists, and includes
tests.&lt;/p&gt;
&lt;p&gt;Two of the tests in the previous patch were removed; adding
records to the association from the other side doesn't work
correctly. Thus&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
@organization.members &amp;lt;&amp;lt; @member
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will still yield bad behavior - but I'm not sure if it
&lt;em&gt;should&lt;/em&gt; work. The has_many :through on @organization
doesn't know anything about the associations defined on @member.
Maybe there needs to be a warning in the docs?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-15T07:16:41+00:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.2.rc1 bug edge has_one_through
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1376</number>
      <permalink>has_one-through-with-decorated-join-model-saves-incorrectly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.rc1 bug edge has_one_through patch</tag>
      <title>has_one :through with decorated join model saves incorrectly</title>
      <updated-at type="datetime">2008-11-15T07:16:45+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">2</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Matt Jones</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1376</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Nice find,

Yeah, the inverses of associations don't work anywhere in rails at present.  The same is true with a simple has_many /belongs_to.  

Ideally we can fix that in 2.3, but depends on people getting the time and motivation

Fixed for 2-2 and master.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Nice find,&lt;/p&gt;
&lt;p&gt;Yeah, the inverses of associations don't work anywhere in rails
at present. The same is true with a simple has_many
/belongs_to.&lt;/p&gt;
&lt;p&gt;Ideally we can fix that in 2.3, but depends on people getting
the time and motivation&lt;/p&gt;
&lt;p&gt;Fixed for 2-2 and master.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-15T17:24:33+00:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1376</number>
      <permalink>has_one-through-with-decorated-join-model-saves-incorrectly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.2.rc1 bug edge has_one_through patch</tag>
      <title>has_one :through with decorated join model saves incorrectly</title>
      <updated-at type="datetime">2008-11-15T17:24:36+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">3</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Matt Jones</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1376</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4f6b1115a7c836884e027307b4a3c98dbe1090e3</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-11-14T18:18:22+00:00</created-at>
      <filename>add-has-one-through-tests.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">62381</id>
      <size type="integer">5959</size>
      <uploader-id type="integer">22589</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/62381/add-has-one-through-tests.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>d265930843d72919c780e6173c1c6dc11ec95e32</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-11-15T07:16:41+00:00</created-at>
      <filename>has_one_through_fix.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">62530</id>
      <size type="integer">6661</size>
      <uploader-id type="integer">22589</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/62530/has_one_through_fix.patch</url>
    </attachment>
  </attachments>
</ticket>
