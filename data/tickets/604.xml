<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-12T00:27:17+01:00</created-at>
  <creator-id type="integer">20429</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">604</number>
  <permalink>eager-loading-polymorphic-has_one-association-with-conditions-generates-incorrect-sql</permalink>
  <priority type="integer">92</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>2.1 activerecord bug has_one</tag>
  <title>eager loading polymorphic has_one association with conditions generates incorrect sql</title>
  <updated-at type="datetime">2008-10-23T16:32:52+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Jeremy McNevin</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/604</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Given the following association in an &quot;Org&quot; model:

@@@ ruby
has_one :primary_address, :class_name =&gt; &quot;Address&quot;, :as =&gt; :addressable, :conditions =&gt; { :primary =&gt; true }
@@@

The following query will be generated if you don't use :include and reference the primary_address:

@@@ ruby
SELECT * FROM &quot;addresses&quot; WHERE (&quot;addresses&quot;.addressable_id = 1 AND &quot;addresses&quot;.addressable_type = E'Org' AND (&quot;addresses&quot;.&quot;primary&quot; = 't')) LIMIT 1
@@@

but if you do an &quot;Org.find&quot; and :include =&gt; :primary_address, you get the following, incorrect sql during the address load:

@@@ ruby
SELECT &quot;addresses&quot;.* FROM &quot;addresses&quot; WHERE (&quot;addresses&quot;.&quot;addressable_id&quot; IN (1) and &quot;addresses&quot;.&quot;addressable_type&quot; = 'Org' AND (&quot;orgs&quot;.&quot;primary&quot; = 't'))
@@@

Here, it's applying the conditions hash to the Org, rather than to the Address.</original-body>
  <latest-body>Given the following association in an &quot;Org&quot; model:

@@@ ruby
has_one :primary_address, :class_name =&gt; &quot;Address&quot;, :as =&gt; :addressable, :conditions =&gt; { :primary =&gt; true }
@@@

The following query will be generated if you don't use :include and reference the primary_address:

@@@ ruby
SELECT * FROM &quot;addresses&quot; WHERE (&quot;addresses&quot;.addressable_id = 1 AND &quot;addresses&quot;.addressable_type = E'Org' AND (&quot;addresses&quot;.&quot;primary&quot; = 't')) LIMIT 1
@@@

but if you do an &quot;Org.find&quot; and :include =&gt; :primary_address, you get the following, incorrect sql during the address load:

@@@ ruby
SELECT &quot;addresses&quot;.* FROM &quot;addresses&quot; WHERE (&quot;addresses&quot;.&quot;addressable_id&quot; IN (1) and &quot;addresses&quot;.&quot;addressable_type&quot; = 'Org' AND (&quot;orgs&quot;.&quot;primary&quot; = 't'))
@@@

Here, it's applying the conditions hash to the Org, rather than to the Address.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Given the following association in an &quot;Org&quot; model:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;has_one :primary_address, :class_name =&amp;gt; &amp;quot;Address&amp;quot;, :as =&amp;gt; :addressable, :conditions =&amp;gt; { :primary =&amp;gt; true }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The following query will be generated if you don't use :include and reference the primary_address:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;SELECT * FROM &amp;quot;addresses&amp;quot; WHERE (&amp;quot;addresses&amp;quot;.addressable_id = 1 AND &amp;quot;addresses&amp;quot;.addressable_type = E'Org' AND (&amp;quot;addresses&amp;quot;.&amp;quot;primary&amp;quot; = 't')) LIMIT 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
but if you do an &quot;Org.find&quot; and :include =&gt; :primary_address, you get the following, incorrect sql during the address load:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;SELECT &amp;quot;addresses&amp;quot;.* FROM &amp;quot;addresses&amp;quot; WHERE (&amp;quot;addresses&amp;quot;.&amp;quot;addressable_id&amp;quot; IN (1) and &amp;quot;addresses&amp;quot;.&amp;quot;addressable_type&amp;quot; = 'Org' AND (&amp;quot;orgs&amp;quot;.&amp;quot;primary&amp;quot; = 't'))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Here, it's applying the conditions hash to the Org, rather than to the Address.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Given the following association in an &quot;Org&quot; model:

@@@ ruby
has_one :primary_address, :class_name =&gt; &quot;Address&quot;, :as =&gt; :addressable, :conditions =&gt; { :primary =&gt; true }
@@@

The following query will be generated if you don't use :include and reference the primary_address:

@@@ ruby
SELECT * FROM &quot;addresses&quot; WHERE (&quot;addresses&quot;.addressable_id = 1 AND &quot;addresses&quot;.addressable_type = E'Org' AND (&quot;addresses&quot;.&quot;primary&quot; = 't')) LIMIT 1
@@@

but if you do an &quot;Org.find&quot; and :include =&gt; :primary_address, you get the following, incorrect sql during the address load:

@@@ ruby
SELECT &quot;addresses&quot;.* FROM &quot;addresses&quot; WHERE (&quot;addresses&quot;.&quot;addressable_id&quot; IN (1) and &quot;addresses&quot;.&quot;addressable_type&quot; = 'Org' AND (&quot;orgs&quot;.&quot;primary&quot; = 't'))
@@@

Here, it's applying the conditions hash to the Org, rather than to the Address.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Given the following association in an &quot;Org&quot; model:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;has_one :primary_address, :class_name =&amp;gt; &amp;quot;Address&amp;quot;, :as =&amp;gt; :addressable, :conditions =&amp;gt; { :primary =&amp;gt; true }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The following query will be generated if you don't use :include and reference the primary_address:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;SELECT * FROM &amp;quot;addresses&amp;quot; WHERE (&amp;quot;addresses&amp;quot;.addressable_id = 1 AND &amp;quot;addresses&amp;quot;.addressable_type = E'Org' AND (&amp;quot;addresses&amp;quot;.&amp;quot;primary&amp;quot; = 't')) LIMIT 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
but if you do an &quot;Org.find&quot; and :include =&gt; :primary_address, you get the following, incorrect sql during the address load:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;SELECT &amp;quot;addresses&amp;quot;.* FROM &amp;quot;addresses&amp;quot; WHERE (&amp;quot;addresses&amp;quot;.&amp;quot;addressable_id&amp;quot; IN (1) and &amp;quot;addresses&amp;quot;.&amp;quot;addressable_type&amp;quot; = 'Org' AND (&amp;quot;orgs&amp;quot;.&amp;quot;primary&amp;quot; = 't'))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Here, it's applying the conditions hash to the Org, rather than to the Address.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-12T00:27:17+01:00</created-at>
      <creator-id type="integer">20429</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">604</number>
      <permalink>eager-loading-polymorphic-has_one-association-with-conditions-generates-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug has_one</tag>
      <title>eager loading polymorphic has_one association with conditions generates incorrect sql</title>
      <updated-at type="datetime">2008-07-12T00:27:17+01:00</updated-at>
      <user-id type="integer">20429</user-id>
      <version type="integer">1</version>
      <user-name>Jeremy McNevin</user-name>
      <creator-name>Jeremy McNevin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/604</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-23T16:32:46+01:00</created-at>
      <creator-id type="integer">20429</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">604</number>
      <permalink>eager-loading-polymorphic-has_one-association-with-conditions-generates-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.1 activerecord bug has_one</tag>
      <title>eager loading polymorphic has_one association with conditions generates incorrect sql</title>
      <updated-at type="datetime">2008-10-23T16:32:52+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Jeremy McNevin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/604</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
