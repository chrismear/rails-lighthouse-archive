<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-08-04T04:17:46+01:00</created-at>
  <creator-id type="integer">12160</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">2985</number>
  <permalink>return-the-most-popular-timezone-given-a-utc-offset</permalink>
  <priority type="integer">129546</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>3.0 active_support patch time timezone</tag>
  <title>Return the most popular TimeZone given a UTC offset</title>
  <updated-at type="datetime">2009-08-04T04:20:26+01:00</updated-at>
  <user-id type="integer">15783</user-id>
  <version type="integer">7</version>
  <user-name>Geoff Buesing</user-name>
  <creator-name>Ryan McGeary</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2985</url>
  <priority-name nil="true"></priority-name>
  <original-body>Regarding `ActiveSupport::TimeZone`, when looking up a time zone from a UTC offset, the returned value is rarely what is expected.  Offsets have possible time zones tied to different places.  Currently, the time zone returned happens to be the first one alphabetically for a given offset, which leads to seemingly inconsistent behavior.  I think it would be better to return the most popular time zone given each UTC offset.

**Current (pre-patch) time zones for different offsets**

@@@
&gt;&gt; require 'active_support/time'
=&gt; true
&gt;&gt; ActiveSupport::TimeZone[-5].name
=&gt; &quot;Bogota&quot;
&gt;&gt; ActiveSupport::TimeZone[-6].name
=&gt; &quot;Central America&quot;
&gt;&gt; ActiveSupport::TimeZone[-7].name
=&gt; &quot;Arizona&quot;
&gt;&gt; ActiveSupport::TimeZone[-8].name
=&gt; &quot;Pacific Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[0].name
=&gt; &quot;Casablanca&quot;
@@@

**Examples of proposed time zones for different offsets**

@@@
&gt;&gt; require 'active_support/time'
=&gt; true
&gt;&gt; ActiveSupport::TimeZone[-5].name
=&gt; &quot;Eastern Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[-6].name
=&gt; &quot;Central Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[-7].name
=&gt; &quot;Mountain Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[-8].name
=&gt; &quot;Pacific Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[0].name
=&gt; &quot;UTC&quot;
@@@

I battled with which time zone should be selected for each offset, but I used local population as the deciding factor.  When in doubt, the place of highest population is the default. 

The attached patch picks a sensible time zone default for each UTC offset.  Tests included.

_Note:_ The patch currently picks 'UTC' for offset +0, but 'London' might be a better guess for daylight savings reasons. (Stupid DST)

_Justification:_ I'm auto-sniffing user's time zones based on their browser settings which gives me an offset value.  I'd like the _guess_ to be as accurate as possible.</original-body>
  <latest-body>Regarding `ActiveSupport::TimeZone`, when looking up a time zone from a UTC offset, the returned value is rarely what is expected.  Offsets have possible time zones tied to different places.  Currently, the time zone returned happens to be the first one alphabetically for a given offset, which leads to seemingly inconsistent behavior.  I think it would be better to return the most popular time zone given each UTC offset.

**Current (pre-patch) time zones for different offsets**

@@@
&gt;&gt; require 'active_support/time'
=&gt; true
&gt;&gt; ActiveSupport::TimeZone[-5].name
=&gt; &quot;Bogota&quot;
&gt;&gt; ActiveSupport::TimeZone[-6].name
=&gt; &quot;Central America&quot;
&gt;&gt; ActiveSupport::TimeZone[-7].name
=&gt; &quot;Arizona&quot;
&gt;&gt; ActiveSupport::TimeZone[-8].name
=&gt; &quot;Pacific Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[0].name
=&gt; &quot;Casablanca&quot;
@@@

**Examples of proposed time zones for different offsets**

@@@
&gt;&gt; require 'active_support/time'
=&gt; true
&gt;&gt; ActiveSupport::TimeZone[-5].name
=&gt; &quot;Eastern Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[-6].name
=&gt; &quot;Central Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[-7].name
=&gt; &quot;Mountain Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[-8].name
=&gt; &quot;Pacific Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[0].name
=&gt; &quot;UTC&quot;
@@@

I battled with which time zone should be selected for each offset, but I used local population as the deciding factor.  When in doubt, the place of highest population is the default. 

The attached patch picks a sensible time zone default for each UTC offset.  Tests included.

_Note:_ The patch currently picks 'UTC' for offset +0, but 'London' might be a better guess for daylight savings reasons. (Stupid DST)

_Justification:_ I'm auto-sniffing user's time zones based on their browser settings which gives me an offset value.  I'd like the _guess_ to be as accurate as possible.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Regarding &lt;code&gt;ActiveSupport::TimeZone&lt;/code&gt;, when looking up
a time zone from a UTC offset, the returned value is rarely what is
expected. Offsets have possible time zones tied to different
places. Currently, the time zone returned happens to be the first
one alphabetically for a given offset, which leads to seemingly
inconsistent behavior. I think it would be better to return the
most popular time zone given each UTC offset.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Current (pre-patch) time zones for different
offsets&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt; require 'active_support/time'
=&amp;gt; true
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-5].name
=&amp;gt; &amp;quot;Bogota&amp;quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-6].name
=&amp;gt; &amp;quot;Central America&amp;quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-7].name
=&amp;gt; &amp;quot;Arizona&amp;quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-8].name
=&amp;gt; &amp;quot;Pacific Time (US &amp;amp; Canada)&amp;quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[0].name
=&amp;gt; &amp;quot;Casablanca&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Examples of proposed time zones for different
offsets&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt; require 'active_support/time'
=&amp;gt; true
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-5].name
=&amp;gt; &amp;quot;Eastern Time (US &amp;amp; Canada)&amp;quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-6].name
=&amp;gt; &amp;quot;Central Time (US &amp;amp; Canada)&amp;quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-7].name
=&amp;gt; &amp;quot;Mountain Time (US &amp;amp; Canada)&amp;quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-8].name
=&amp;gt; &amp;quot;Pacific Time (US &amp;amp; Canada)&amp;quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[0].name
=&amp;gt; &amp;quot;UTC&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I battled with which time zone should be selected for each
offset, but I used local population as the deciding factor. When in
doubt, the place of highest population is the default.&lt;/p&gt;
&lt;p&gt;The attached patch picks a sensible time zone default for each
UTC offset. Tests included.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The patch currently picks 'UTC' for offset +0,
but 'London' might be a better guess for daylight savings reasons.
(Stupid DST)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Justification:&lt;/em&gt; I'm auto-sniffing user's time zones
based on their browser settings which gives me an offset value. I'd
like the &lt;em&gt;guess&lt;/em&gt; to be as accurate as possible.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Regarding `ActiveSupport::TimeZone`, when looking up a time zone from a UTC offset, the returned value is rarely what is expected.  Offsets have multiple time zones tied to different places.  Currently, the time zone returned happens to be the first one alphabetically for a given offset, which leads to seemingly inconsistent behavior.  I think it would be better to return the most popular time zone given each UTC offset.

**Current (pre-patch) time zones for different offsets**

@@@
&gt;&gt; require 'active_support/time'
=&gt; true
&gt;&gt; ActiveSupport::TimeZone[-5].name
=&gt; &quot;Bogota&quot;
&gt;&gt; ActiveSupport::TimeZone[-6].name
=&gt; &quot;Central America&quot;
&gt;&gt; ActiveSupport::TimeZone[-7].name
=&gt; &quot;Arizona&quot;
&gt;&gt; ActiveSupport::TimeZone[-8].name
=&gt; &quot;Pacific Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[0].name
=&gt; &quot;Casablanca&quot;
@@@

**Examples of proposed time zones for different offsets**

@@@
&gt;&gt; require 'active_support/time'
=&gt; true
&gt;&gt; ActiveSupport::TimeZone[-5].name
=&gt; &quot;Eastern Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[-6].name
=&gt; &quot;Central Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[-7].name
=&gt; &quot;Mountain Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[-8].name
=&gt; &quot;Pacific Time (US &amp; Canada)&quot;
&gt;&gt; ActiveSupport::TimeZone[0].name
=&gt; &quot;UTC&quot;
@@@

I battled with which time zone should be selected for each offset, but I used local population as the deciding factor.  When in doubt, the place of highest population is the default. 

The attached patch picks a sensible time zone default for each UTC offset.  Tests included.

_Note:_ The patch currently picks 'UTC' for offset +0, but 'London' might be a better guess for daylight savings reasons. (Stupid DST)

_Justification:_ I'm auto-sniffing user's time zones based on their browser settings which gives me an offset value.  I'd like the _guess_ to be as accurate as possible.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Regarding &lt;code&gt;ActiveSupport::TimeZone&lt;/code&gt;, when looking up
a time zone from a UTC offset, the returned value is rarely what is
expected. Offsets have multiple time zones tied to different
places. Currently, the time zone returned happens to be the first
one alphabetically for a given offset, which leads to seemingly
inconsistent behavior. I think it would be better to return the
most popular time zone given each UTC offset.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Current (pre-patch) time zones for different
offsets&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; require 'active_support/time'
=&amp;gt; true
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-5].name
=&amp;gt; &quot;Bogota&quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-6].name
=&amp;gt; &quot;Central America&quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-7].name
=&amp;gt; &quot;Arizona&quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-8].name
=&amp;gt; &quot;Pacific Time (US &amp;amp; Canada)&quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[0].name
=&amp;gt; &quot;Casablanca&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Examples of proposed time zones for different
offsets&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; require 'active_support/time'
=&amp;gt; true
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-5].name
=&amp;gt; &quot;Eastern Time (US &amp;amp; Canada)&quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-6].name
=&amp;gt; &quot;Central Time (US &amp;amp; Canada)&quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-7].name
=&amp;gt; &quot;Mountain Time (US &amp;amp; Canada)&quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[-8].name
=&amp;gt; &quot;Pacific Time (US &amp;amp; Canada)&quot;
&amp;gt;&amp;gt; ActiveSupport::TimeZone[0].name
=&amp;gt; &quot;UTC&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I battled with which time zone should be selected for each
offset, but I used local population as the deciding factor. When in
doubt, the place of highest population is the default.&lt;/p&gt;
&lt;p&gt;The attached patch picks a sensible time zone default for each
UTC offset. Tests included.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The patch currently picks 'UTC' for offset +0,
but 'London' might be a better guess for daylight savings reasons.
(Stupid DST)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Justification:&lt;/em&gt; I'm auto-sniffing user's time zones
based on their browser settings which gives me an offset value. I'd
like the &lt;em&gt;guess&lt;/em&gt; to be as accurate as possible.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-03T00:50:35+01:00</created-at>
      <creator-id type="integer">12160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2985</number>
      <permalink>return-the-most-popular-timezone-given-a-utc-offset</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 active_support patch time timezone</tag>
      <title>Return the most popular TimeZone given a UTC offset</title>
      <updated-at type="datetime">2009-08-03T00:51:28+01:00</updated-at>
      <user-id type="integer">12160</user-id>
      <version type="integer">1</version>
      <user-name>Ryan McGeary</user-name>
      <creator-name>Ryan McGeary</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2985</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Sensible is in the eye of the beholder here,  application's populations aren't uniformly distributed across the world so we can't use local population.

I'm not looking to get into another country_select style situation, we'll stick with what we have.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sensible is in the eye of the beholder here, application's
populations aren't uniformly distributed across the world so we
can't use local population.&lt;/p&gt;
&lt;p&gt;I'm not looking to get into another country_select style
situation, we'll stick with what we have.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-03T01:25:44+01:00</created-at>
      <creator-id type="integer">12160</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2985</number>
      <permalink>return-the-most-popular-timezone-given-a-utc-offset</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0 active_support patch time timezone</tag>
      <title>Return the most popular TimeZone given a UTC offset</title>
      <updated-at type="datetime">2009-08-03T01:25:45+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Ryan McGeary</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2985</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Koz, I understand the concern, but a lot of apps guess the wrong time zone for a majority of their users because of the default behavior that's in ActiveSupport.  Twitter is one of them.  

If people are offended by picking a time zone based on relative population, then they are probably already pretty offended by picking an arbitrary time zone based on the English alphabet.  I say &quot;tough noogies&quot; to them.

I know it might sound elitist, but Eastern Time (with DST) is a better guess for the majority than America/Bogota (no DST).  Applications can still override the defaults just like I'm doing in an existing app (using a custom hash lookup based on populations pulled from WolframAlpha), but improving the defaults helps everyone.  

True, application population probably isn't directly correlated to local population, but it's likely close, and it's about as politically correct as you can get.

(For the record, I think time zones and, specifically, daylight savings is an abomination.  I wish this discussion was moot.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Koz, I understand the concern, but a lot of apps guess the wrong
time zone for a majority of their users because of the default
behavior that's in ActiveSupport. Twitter is one of them.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;If people are offended by picking a time zone based on relative
population, then they are probably already pretty offended by
picking an arbitrary time zone based on the English alphabet. I say
&quot;tough noogies&quot; to them.&lt;/p&gt;
&lt;p&gt;I know it might sound elitist, but Eastern Time (with DST) is a
better guess for the majority than America/Bogota (no DST).
Applications can still override the defaults just like I'm doing in
an existing app (using a custom hash lookup based on populations
pulled from WolframAlpha), but improving the defaults helps
everyone.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;True, application population probably isn't directly correlated
to local population, but it's likely close, and it's about as
politically correct as you can get.&lt;/p&gt;
&lt;p&gt;(For the record, I think time zones and, specifically, daylight
savings is an abomination. I wish this discussion was moot.)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-03T02:13:38+01:00</created-at>
      <creator-id type="integer">12160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2985</number>
      <permalink>return-the-most-popular-timezone-given-a-utc-offset</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0 active_support patch time timezone</tag>
      <title>Return the most popular TimeZone given a UTC offset</title>
      <updated-at type="datetime">2009-08-03T02:13:39+01:00</updated-at>
      <user-id type="integer">12160</user-id>
      <version type="integer">3</version>
      <user-name>Ryan McGeary</user-name>
      <creator-name>Ryan McGeary</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2985</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Mapping an offset to a TZ is impossible without some user input, at
the very least you should be confirming it for them.

I'd take a patch which made it easier to rejuggle those timezones or
assign defaults for an offset, but that's all.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Mapping an offset to a TZ is impossible without some user input,
at&lt;br&gt;
the very least you should be confirming it for them.&lt;/p&gt;
&lt;p&gt;I'd take a patch which made it easier to rejuggle those
timezones or&lt;br&gt;
assign defaults for an offset, but that's all.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-03T02:19:53+01:00</created-at>
      <creator-id type="integer">12160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2985</number>
      <permalink>return-the-most-popular-timezone-given-a-utc-offset</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0 active_support patch time timezone</tag>
      <title>Return the most popular TimeZone given a UTC offset</title>
      <updated-at type="datetime">2009-08-03T02:19:53+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">4</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Ryan McGeary</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2985</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&gt; I'd take a patch which made it easier to rejuggle those timezones or assign defaults for an offset, but that's all.

That sounds like configuration over convention to me, but I'll give it some thought.  Thanks for your time.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;I'd take a patch which made it easier to rejuggle those
timezones or assign defaults for an offset, but that's all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That sounds like configuration over convention to me, but I'll
give it some thought. Thanks for your time.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-03T02:53:53+01:00</created-at>
      <creator-id type="integer">12160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2985</number>
      <permalink>return-the-most-popular-timezone-given-a-utc-offset</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0 active_support patch time timezone</tag>
      <title>Return the most popular TimeZone given a UTC offset</title>
      <updated-at type="datetime">2009-08-03T02:53:57+01:00</updated-at>
      <user-id type="integer">12160</user-id>
      <version type="integer">5</version>
      <user-name>Ryan McGeary</user-name>
      <creator-name>Ryan McGeary</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2985</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I realise this sucks from your perspective, but we've had two seperate
incidents with similar code and frankly I can't take another month of
hate mail and rage :/</body>
      <body-html>&lt;div&gt;&lt;p&gt;I realise this sucks from your perspective, but we've had two
seperate&lt;br&gt;
incidents with similar code and frankly I can't take another month
of&lt;br&gt;
hate mail and rage :/&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-03T03:03:07+01:00</created-at>
      <creator-id type="integer">12160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2985</number>
      <permalink>return-the-most-popular-timezone-given-a-utc-offset</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0 active_support patch time timezone</tag>
      <title>Return the most popular TimeZone given a UTC offset</title>
      <updated-at type="datetime">2009-08-03T03:03:08+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">6</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Ryan McGeary</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2985</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Every app could potentially want different preferred zones, so this sounds like logic that's best left to the app.

Very easy to implement your own preferred zones, no need to hack the TimeZone class:

@@@ ruby
&gt;&gt; PREFERRED_ZONES = {-5 =&gt; &quot;Eastern Time (US &amp; Canada)&quot;, -6 =&gt; &quot;Central Time (US &amp; Canada)&quot;}
=&gt; {-6=&gt;&quot;Central Time (US &amp; Canada)&quot;, -5=&gt;&quot;Eastern Time (US &amp; Canada)&quot;}
&gt;&gt; ActiveSupport::TimeZone[PREFERRED_ZONES[-5]].name
=&gt; &quot;Eastern Time (US &amp; Canada)&quot;
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Every app could potentially want different preferred zones, so
this sounds like logic that's best left to the app.&lt;/p&gt;
&lt;p&gt;Very easy to implement your own preferred zones, no need to hack
the TimeZone class:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; PREFERRED_ZONES = {-5 =&amp;gt; &quot;Eastern Time (US &amp;amp; Canada)&quot;, -6 =&amp;gt; &quot;Central Time (US &amp;amp; Canada)&quot;}
=&amp;gt; {-6=&amp;gt;&quot;Central Time (US &amp;amp; Canada)&quot;, -5=&amp;gt;&quot;Eastern Time (US &amp;amp; Canada)&quot;}
&amp;gt;&amp;gt; ActiveSupport::TimeZone[PREFERRED_ZONES[-5]].name
=&amp;gt; &quot;Eastern Time (US &amp;amp; Canada)&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-04T04:17:46+01:00</created-at>
      <creator-id type="integer">12160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2985</number>
      <permalink>return-the-most-popular-timezone-given-a-utc-offset</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0 active_support patch time timezone</tag>
      <title>Return the most popular TimeZone given a UTC offset</title>
      <updated-at type="datetime">2009-08-04T04:20:26+01:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">7</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>Ryan McGeary</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2985</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>529a1a045c9493dfcdefede0e4cbf26396d19d70</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-08-03T17:46:20+01:00</created-at>
      <filename>better_time_zone_offset_defaults.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">234934</id>
      <size type="integer">9271</size>
      <uploader-id type="integer">12160</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/234934/better_time_zone_offset_defaults.diff</url>
    </attachment>
  </attachments>
</ticket>
