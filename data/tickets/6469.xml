<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-25T13:56:05+00:00</created-at>
  <creator-id type="integer">138707</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6469</number>
  <permalink>sti-inheritance-and-reload-bug</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>STI, inheritance and reload! bug</title>
  <updated-at type="datetime">2011-02-25T13:56:08+00:00</updated-at>
  <user-id type="integer">138707</user-id>
  <version type="integer">1</version>
  <user-name>Kirill Lazarev</user-name>
  <creator-name>Kirill Lazarev</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6469</url>
  <priority-name nil="true"></priority-name>
  <original-body>##Environment 

Ruby: 1.9.2-p136
Rails: 3.0.4

##Situation
Create project with STI for Users and inherit one type of User (Support) to another types (Administrator, Employee)
##Models
@@@ ruby  
#app/models/user.rb
class User &lt; ActiveRecord::Base
end

#app/models/support.rb
class Support &lt; User
end

#app/models/administrator.rb
class Administrator &lt; Support
end

#app/models/employee.rb
class Employee &lt; Support
end
@@@
##Migration
@@@ ruby
#db/migrate/20110225123900_create_users.rb
class CreateUsers &lt; ActiveRecord::Migration
  def self.up
    create_table :users do |t|
      t.string :type
    end
  end

  def self.down
    drop_table :users
  end
end
@@@
#Console
Create instances of Administrator and Employee:
@@@ ruby
&gt; Administrator.create
&gt; Employee.create
@@@
Now get them(Support's users) using Support.all.
@@@ ruby
&gt; Support.all
=&gt; [#&lt;Administrator id: 1, type: &quot;Administrator&quot;&gt;, #&lt;Employee id: 2, type: &quot;Employee&quot;&gt;]
@@@
Now we reload environment and check Support.all again. And get this bug!
@@@ ruby
&gt; reload!
&gt; Support.all
=&gt; []
@@@

##Difference in SQL command
Before reload!
@@@ sql
SELECT `users`.* FROM `users` WHERE (((`users`.`type` = 'Support' OR `users`.`type` = 'Administrator') OR `users`.`type` = 'Employee')
@@@
After reload!
@@@ sql
SELECT `users`.* FROM `users` WHERE (`users`.`type` = 'Support')
@@@
##Workaround
We can temporary repair it by using before method #all for parent class User:
@@@ ruby
&gt; User.all
=&gt; [#&lt;Administrator id: 1, type: &quot;Administrator&quot;&gt;, #&lt;Employee id: 2, type: &quot;Employee&quot;&gt;]
&gt; Support.all
=&gt; [#&lt;Administrator id: 1, type: &quot;Administrator&quot;&gt;, #&lt;Employee id: 2, type: &quot;Employee&quot;&gt;]
@@@</original-body>
  <latest-body>##Environment 

Ruby: 1.9.2-p136
Rails: 3.0.4

##Situation
Create project with STI for Users and inherit one type of User (Support) to another types (Administrator, Employee)
##Models
@@@ ruby  
#app/models/user.rb
class User &lt; ActiveRecord::Base
end

#app/models/support.rb
class Support &lt; User
end

#app/models/administrator.rb
class Administrator &lt; Support
end

#app/models/employee.rb
class Employee &lt; Support
end
@@@
##Migration
@@@ ruby
#db/migrate/20110225123900_create_users.rb
class CreateUsers &lt; ActiveRecord::Migration
  def self.up
    create_table :users do |t|
      t.string :type
    end
  end

  def self.down
    drop_table :users
  end
end
@@@
#Console
Create instances of Administrator and Employee:
@@@ ruby
&gt; Administrator.create
&gt; Employee.create
@@@
Now get them(Support's users) using Support.all.
@@@ ruby
&gt; Support.all
=&gt; [#&lt;Administrator id: 1, type: &quot;Administrator&quot;&gt;, #&lt;Employee id: 2, type: &quot;Employee&quot;&gt;]
@@@
Now we reload environment and check Support.all again. And get this bug!
@@@ ruby
&gt; reload!
&gt; Support.all
=&gt; []
@@@

##Difference in SQL command
Before reload!
@@@ sql
SELECT `users`.* FROM `users` WHERE (((`users`.`type` = 'Support' OR `users`.`type` = 'Administrator') OR `users`.`type` = 'Employee')
@@@
After reload!
@@@ sql
SELECT `users`.* FROM `users` WHERE (`users`.`type` = 'Support')
@@@
##Workaround
We can temporary repair it by using before method #all for parent class User:
@@@ ruby
&gt; User.all
=&gt; [#&lt;Administrator id: 1, type: &quot;Administrator&quot;&gt;, #&lt;Employee id: 2, type: &quot;Employee&quot;&gt;]
&gt; Support.all
=&gt; [#&lt;Administrator id: 1, type: &quot;Administrator&quot;&gt;, #&lt;Employee id: 2, type: &quot;Employee&quot;&gt;]
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;h2&gt;Environment&lt;/h2&gt;
&lt;p&gt;Ruby: 1.9.2-p136&lt;br&gt;
Rails: 3.0.4&lt;/p&gt;
&lt;h2&gt;Situation&lt;/h2&gt;
&lt;p&gt;Create project with STI for Users and inherit one type of User
(Support) to another types (Administrator, Employee)&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Models&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;#app/models/user.rb
class User &amp;lt; ActiveRecord::Base
end

#app/models/support.rb
class Support &amp;lt; User
end

#app/models/administrator.rb
class Administrator &amp;lt; Support
end

#app/models/employee.rb
class Employee &amp;lt; Support
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Migration&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;#db/migrate/20110225123900_create_users.rb
class CreateUsers &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :users do |t|
      t.string :type
    end
  end

  def self.down
    drop_table :users
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;Console&lt;/h1&gt;
&lt;p&gt;Create instances of Administrator and Employee:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt; Administrator.create
&amp;gt; Employee.create&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now get them(Support's users) using Support.all.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt; Support.all
=&amp;gt; [#&amp;lt;Administrator id: 1, type: &quot;Administrator&quot;&amp;gt;, #&amp;lt;Employee id: 2, type: &quot;Employee&quot;&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now we reload environment and check Support.all again. And get
this bug!&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt; reload!
&amp;gt; Support.all
=&amp;gt; []&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Difference in SQL command&lt;/h2&gt;
&lt;p&gt;Before reload!&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT `users`.* FROM `users` WHERE (((`users`.`type` = 'Support' OR `users`.`type` = 'Administrator') OR `users`.`type` = 'Employee')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After reload!&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT `users`.* FROM `users` WHERE (`users`.`type` = 'Support')&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Workaround&lt;/h2&gt;
&lt;p&gt;We can temporary repair it by using before method #all for
parent class User:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt; User.all
=&amp;gt; [#&amp;lt;Administrator id: 1, type: &quot;Administrator&quot;&amp;gt;, #&amp;lt;Employee id: 2, type: &quot;Employee&quot;&amp;gt;]
&amp;gt; Support.all
=&amp;gt; [#&amp;lt;Administrator id: 1, type: &quot;Administrator&quot;&amp;gt;, #&amp;lt;Employee id: 2, type: &quot;Employee&quot;&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>##Environment 

Ruby: 1.9.2-p136
Rails: 3.0.4

##Situation
Create project with STI for Users and inherit one type of User (Support) to another types (Administrator, Employee)
##Models
@@@ ruby  
#app/models/user.rb
class User &lt; ActiveRecord::Base
end

#app/models/support.rb
class Support &lt; User
end

#app/models/administrator.rb
class Administrator &lt; Support
end

#app/models/employee.rb
class Employee &lt; Support
end
@@@
##Migration
@@@ ruby
#db/migrate/20110225123900_create_users.rb
class CreateUsers &lt; ActiveRecord::Migration
  def self.up
    create_table :users do |t|
      t.string :type
    end
  end

  def self.down
    drop_table :users
  end
end
@@@
#Console
Create instances of Administrator and Employee:
@@@ ruby
&gt; Administrator.create
&gt; Employee.create
@@@
Now get them(Support's users) using Support.all.
@@@ ruby
&gt; Support.all
=&gt; [#&lt;Administrator id: 1, type: &quot;Administrator&quot;&gt;, #&lt;Employee id: 2, type: &quot;Employee&quot;&gt;]
@@@
Now we reload environment and check Support.all again. And get this bug!
@@@ ruby
&gt; reload!
&gt; Support.all
=&gt; []
@@@

##Difference in SQL command
Before reload!
@@@ sql
SELECT `users`.* FROM `users` WHERE (((`users`.`type` = 'Support' OR `users`.`type` = 'Administrator') OR `users`.`type` = 'Employee')
@@@
After reload!
@@@ sql
SELECT `users`.* FROM `users` WHERE (`users`.`type` = 'Support')
@@@
##Workaround
We can temporary repair it by using before method #all for parent class User:
@@@ ruby
&gt; User.all
=&gt; [#&lt;Administrator id: 1, type: &quot;Administrator&quot;&gt;, #&lt;Employee id: 2, type: &quot;Employee&quot;&gt;]
&gt; Support.all
=&gt; [#&lt;Administrator id: 1, type: &quot;Administrator&quot;&gt;, #&lt;Employee id: 2, type: &quot;Employee&quot;&gt;]
@@@</body>
      <body-html>&lt;div&gt;&lt;h2&gt;Environment&lt;/h2&gt;
&lt;p&gt;Ruby: 1.9.2-p136&lt;br&gt;
Rails: 3.0.4&lt;/p&gt;
&lt;h2&gt;Situation&lt;/h2&gt;
&lt;p&gt;Create project with STI for Users and inherit one type of User
(Support) to another types (Administrator, Employee)&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Models&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;#app/models/user.rb
class User &amp;lt; ActiveRecord::Base
end

#app/models/support.rb
class Support &amp;lt; User
end

#app/models/administrator.rb
class Administrator &amp;lt; Support
end

#app/models/employee.rb
class Employee &amp;lt; Support
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Migration&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;#db/migrate/20110225123900_create_users.rb
class CreateUsers &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :users do |t|
      t.string :type
    end
  end

  def self.down
    drop_table :users
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;Console&lt;/h1&gt;
&lt;p&gt;Create instances of Administrator and Employee:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt; Administrator.create
&amp;gt; Employee.create&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now get them(Support's users) using Support.all.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt; Support.all
=&amp;gt; [#&amp;lt;Administrator id: 1, type: &quot;Administrator&quot;&amp;gt;, #&amp;lt;Employee id: 2, type: &quot;Employee&quot;&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now we reload environment and check Support.all again. And get
this bug!&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt; reload!
&amp;gt; Support.all
=&amp;gt; []&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Difference in SQL command&lt;/h2&gt;
&lt;p&gt;Before reload!&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT `users`.* FROM `users` WHERE (((`users`.`type` = 'Support' OR `users`.`type` = 'Administrator') OR `users`.`type` = 'Employee')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After reload!&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT `users`.* FROM `users` WHERE (`users`.`type` = 'Support')&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Workaround&lt;/h2&gt;
&lt;p&gt;We can temporary repair it by using before method #all for
parent class User:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt; User.all
=&amp;gt; [#&amp;lt;Administrator id: 1, type: &quot;Administrator&quot;&amp;gt;, #&amp;lt;Employee id: 2, type: &quot;Employee&quot;&amp;gt;]
&amp;gt; Support.all
=&amp;gt; [#&amp;lt;Administrator id: 1, type: &quot;Administrator&quot;&amp;gt;, #&amp;lt;Employee id: 2, type: &quot;Employee&quot;&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-25T13:56:05+00:00</created-at>
      <creator-id type="integer">138707</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6469</number>
      <permalink>sti-inheritance-and-reload-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>STI, inheritance and reload! bug</title>
      <updated-at type="datetime">2011-02-25T13:56:08+00:00</updated-at>
      <user-id type="integer">138707</user-id>
      <version type="integer">1</version>
      <user-name>Kirill Lazarev</user-name>
      <creator-name>Kirill Lazarev</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6469</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
