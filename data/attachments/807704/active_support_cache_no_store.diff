From be434da2d315e38634e799590e8b874af00be94b Mon Sep 17 00:00:00 2001
From: Brian Durand <brian@embellishedvisions.com>
Date: Tue, 7 Dec 2010 16:32:41 -0600
Subject: [PATCH] Add no_store cache for use in development and testing environments so they can use the cache interfaces without actually storing anything.

---
 activesupport/lib/active_support/cache.rb          |    1 +
 activesupport/lib/active_support/cache/no_store.rb |   41 +++++++++++++++++++
 activesupport/test/caching_test.rb                 |   43 ++++++++++++++++++++
 3 files changed, 85 insertions(+), 0 deletions(-)
 create mode 100644 activesupport/lib/active_support/cache/no_store.rb

diff --git a/activesupport/lib/active_support/cache.rb b/activesupport/lib/active_support/cache.rb
index b4f0c42..fce4df6 100644
--- a/activesupport/lib/active_support/cache.rb
+++ b/activesupport/lib/active_support/cache.rb
@@ -16,6 +16,7 @@ module ActiveSupport
     autoload :FileStore, 'active_support/cache/file_store'
     autoload :MemoryStore, 'active_support/cache/memory_store'
     autoload :MemCacheStore, 'active_support/cache/mem_cache_store'
+    autoload :NoStore, 'active_support/cache/no_store'
     autoload :SynchronizedMemoryStore, 'active_support/cache/synchronized_memory_store'
     autoload :CompressedMemCacheStore, 'active_support/cache/compressed_mem_cache_store'
 
diff --git a/activesupport/lib/active_support/cache/no_store.rb b/activesupport/lib/active_support/cache/no_store.rb
new file mode 100644
index 0000000..34ed441
--- /dev/null
+++ b/activesupport/lib/active_support/cache/no_store.rb
@@ -0,0 +1,41 @@
+require 'monitor'
+
+module ActiveSupport
+  module Cache
+    # A cache store implementation which doesn't actually store anything. Useful in
+    # development and test environments where you don't want caching turned on but
+    # need to go through the caching interface.
+    class NoStore < Store
+      def initialize(options = nil)
+        super(options)
+      end
+
+      def clear(options = nil)
+      end
+      
+      def cleanup(options = nil)
+      end
+
+      def increment(name, amount = 1, options = nil)
+      end
+
+      def decrement(name, amount = 1, options = nil)
+      end
+
+      def delete_matched(matcher, options = nil)
+      end
+
+      protected
+        def read_entry(key, options) # :nodoc:
+        end
+
+        def write_entry(key, entry, options) # :nodoc:
+          true
+        end
+
+        def delete_entry(key, options) # :nodoc:
+          false
+        end
+    end
+  end
+end
diff --git a/activesupport/test/caching_test.rb b/activesupport/test/caching_test.rb
index 579d5da..f8086cf 100644
--- a/activesupport/test/caching_test.rb
+++ b/activesupport/test/caching_test.rb
@@ -648,6 +648,49 @@ uses_memcached 'memcached backed store' do
   end
 end
 
+class NoStoreTest < ActiveSupport::TestCase
+  def setup
+    @cache = ActiveSupport::Cache.lookup_store(:no_store)
+  end
+  
+  def test_clear
+    @cache.clear
+  end
+  
+  def test_cleanup
+    @cache.cleanup
+  end
+  
+  def test_write
+    assert_equal true, @cache.write("name", "value")
+  end
+  
+  def test_read
+    @cache.write("name", "value")
+    assert_nil @cache.read("name")
+  end
+  
+  def test_delete
+    @cache.write("name", "value")
+    assert_equal false, @cache.delete("name")
+  end
+  
+  def test_increment
+    @cache.write("name", 1, :raw => true)
+    assert_nil @cache.increment("name")
+  end
+  
+  def test_decrement
+    @cache.write("name", 1, :raw => true)
+    assert_nil @cache.increment("name")
+  end
+  
+  def delete_matched
+    @cache.write("name", "value")
+    @cache.delete_matched(/name/)
+  end  
+end
+
 class CacheStoreLoggerTest < ActiveSupport::TestCase
   def setup
     @cache = ActiveSupport::Cache.lookup_store(:memory_store)
-- 
1.6.4.1

