<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-21T19:10:43+00:00</created-at>
  <creator-id type="integer">138071</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6459</number>
  <permalink>arel-update-method-silently-drops-offset-clause</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>arel</tag>
  <title>Arel update method silently drops OFFSET clause</title>
  <updated-at type="datetime">2011-03-06T11:01:56+00:00</updated-at>
  <user-id type="integer">30376</user-id>
  <version type="integer">3</version>
  <user-name>Hugo Peixoto</user-name>
  <creator-name>GSnyder</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6459</url>
  <priority-name nil="true"></priority-name>
  <original-body>Arel::Crud::update silently fails to propagate OFFSET clauses to the update manager, probably because common SQL dialects do not support OFFSET in UPDATEs.

For example, the following code 

@@@ ruby
    relation = Thing.order(&quot;freshness ASC&quot;).offset(20).limit(10)
    relation.update_all([&quot;broken = ?&quot;, true])
@@@

executes as &quot;UPDATE things SET broken = 1 ORDER BY freshness ASC LIMIT 10&quot;. 

The bug (I would claim) is that the bogus update attempt is not detected and rejected. Instead, erroneous SQL is emitted and allowed to corrupt the database by updating random records.

AR shouldn't try to protect programmers from every possible manifestation of their own folly. However, in this case, Arel is actually partially responsible for *creating* the problem: it turns an invalid request into a valid-but-inaccurate SQL statement. Better to pass the OFFSET along and let the database choke on the invalid query syntax.

I'm using MySQL, but it looks like Postgres does not even allow LIMIT in updates. I would be curious to know what happens when the example above is run against Postgres.</original-body>
  <latest-body>Arel::Crud::update silently fails to propagate OFFSET clauses to the update manager, probably because common SQL dialects do not support OFFSET in UPDATEs.

For example, the following code 

@@@ ruby
    relation = Thing.order(&quot;freshness ASC&quot;).offset(20).limit(10)
    relation.update_all([&quot;broken = ?&quot;, true])
@@@

executes as &quot;UPDATE things SET broken = 1 ORDER BY freshness ASC LIMIT 10&quot;. 

The bug (I would claim) is that the bogus update attempt is not detected and rejected. Instead, erroneous SQL is emitted and allowed to corrupt the database by updating random records.

AR shouldn't try to protect programmers from every possible manifestation of their own folly. However, in this case, Arel is actually partially responsible for *creating* the problem: it turns an invalid request into a valid-but-inaccurate SQL statement. Better to pass the OFFSET along and let the database choke on the invalid query syntax.

I'm using MySQL, but it looks like Postgres does not even allow LIMIT in updates. I would be curious to know what happens when the example above is run against Postgres.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Arel::Crud::update silently fails to propagate OFFSET clauses to
the update manager, probably because common SQL dialects do not
support OFFSET in UPDATEs.&lt;/p&gt;
&lt;p&gt;For example, the following code&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    relation = Thing.order(&quot;freshness ASC&quot;).offset(20).limit(10)
    relation.update_all([&quot;broken = ?&quot;, true])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;executes as &quot;UPDATE things SET broken = 1 ORDER BY freshness ASC
LIMIT 10&quot;.&lt;/p&gt;
&lt;p&gt;The bug (I would claim) is that the bogus update attempt is not
detected and rejected. Instead, erroneous SQL is emitted and
allowed to corrupt the database by updating random records.&lt;/p&gt;
&lt;p&gt;AR shouldn't try to protect programmers from every possible
manifestation of their own folly. However, in this case, Arel is
actually partially responsible for &lt;em&gt;creating&lt;/em&gt; the problem:
it turns an invalid request into a valid-but-inaccurate SQL
statement. Better to pass the OFFSET along and let the database
choke on the invalid query syntax.&lt;/p&gt;
&lt;p&gt;I'm using MySQL, but it looks like Postgres does not even allow
LIMIT in updates. I would be curious to know what happens when the
example above is run against Postgres.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Arel::Crud::update silently fails to propagate OFFSET clauses to the update manager, probably because common SQL dialects do not support OFFSET in UPDATEs.

For example, the following code 

@@@ ruby
    relation = Thing.order(&quot;freshness ASC&quot;).offset(20).limit(10)
    relation.update_all([&quot;broken = ?&quot;, true])
@@@

executes as &quot;UPDATE things SET broken = 1 ORDER BY freshness ASC LIMIT 10&quot;. 

The bug (I would claim) is that the bogus update attempt is not detected and rejected. Instead, erroneous SQL is emitted and allowed to corrupt the database by updating random records.

AR shouldn't try to protect programmers from every possible manifestation of their own folly. However, in this case, Arel is actually partially responsible for *creating* the problem: it turns an invalid request into a valid-but-inaccurate SQL statement. Better to pass the OFFSET along and let the database choke on the invalid query syntax.

I'm using MySQL, but it looks like Postgres does not even allow LIMIT in updates. I would be curious to know what happens when the example above is run against Postgres.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Arel::Crud::update silently fails to propagate OFFSET clauses to
the update manager, probably because common SQL dialects do not
support OFFSET in UPDATEs.&lt;/p&gt;
&lt;p&gt;For example, the following code&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    relation = Thing.order(&quot;freshness ASC&quot;).offset(20).limit(10)
    relation.update_all([&quot;broken = ?&quot;, true])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;executes as &quot;UPDATE things SET broken = 1 ORDER BY freshness ASC
LIMIT 10&quot;.&lt;/p&gt;
&lt;p&gt;The bug (I would claim) is that the bogus update attempt is not
detected and rejected. Instead, erroneous SQL is emitted and
allowed to corrupt the database by updating random records.&lt;/p&gt;
&lt;p&gt;AR shouldn't try to protect programmers from every possible
manifestation of their own folly. However, in this case, Arel is
actually partially responsible for &lt;em&gt;creating&lt;/em&gt; the problem:
it turns an invalid request into a valid-but-inaccurate SQL
statement. Better to pass the OFFSET along and let the database
choke on the invalid query syntax.&lt;/p&gt;
&lt;p&gt;I'm using MySQL, but it looks like Postgres does not even allow
LIMIT in updates. I would be curious to know what happens when the
example above is run against Postgres.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-21T19:10:43+00:00</created-at>
      <creator-id type="integer">138071</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6459</number>
      <permalink>arel-update-method-silently-drops-offset-clause</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Arel update method silently drops OFFSET clause</title>
      <updated-at type="datetime">2011-02-21T19:10:47+00:00</updated-at>
      <user-id type="integer">138071</user-id>
      <version type="integer">1</version>
      <user-name>GSnyder</user-name>
      <creator-name>GSnyder</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6459</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In postgresql, that query gets converted to the something like the following:

    UPDATE things SET broken = 1 WHERE id IN (SELECT id FROM things ORDER BY freshness ASC LIMIT 10)

The OFFSET clause is ignored independently of the RDBMS. I made a patch that fixes this by converting the query to the following:

    UPDATE things SET broken = 1 WHERE id IN (SELECT id FROM things ORDER BY freshness ASC LIMIT 10 OFFSET 20)

Unfortunately, this is invalid in MySQL, as it doesn't support LIMIT/OFFSET in subqueries. One possible work-around (http://forums.mysql.com/read.php?86,14788,239000#msg-239000) is to create the following query:

    UPDATE things SET broken = 1 WHERE id IN (SELECT id FROM (SELECT id FROM things ORDER BY freshness ASC LIMIT 10 OFFSET 20) alias)

The patch I'm uploading does both. The first commit adds the ability to specify an OFFSET clause in an UPDATE statement, while the second commit adds this workaround so that it works in MySQL too.

Comments on this are welcome.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In postgresql, that query gets converted to the something like
the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;UPDATE things SET broken = 1 WHERE id IN (SELECT id FROM things ORDER BY freshness ASC LIMIT 10)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The OFFSET clause is ignored independently of the RDBMS. I made
a patch that fixes this by converting the query to the
following:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;UPDATE things SET broken = 1 WHERE id IN (SELECT id FROM things ORDER BY freshness ASC LIMIT 10 OFFSET 20)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unfortunately, this is invalid in MySQL, as it doesn't support
LIMIT/OFFSET in subqueries. One possible work-around (&lt;a href=
&quot;http://forums.mysql.com/read.php?86,14788,239000#msg-239000&quot;&gt;http://forums.mysql.com/read.php?86,14788,239000#msg-239000&lt;/a&gt;)
is to create the following query:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;UPDATE things SET broken = 1 WHERE id IN (SELECT id FROM (SELECT id FROM things ORDER BY freshness ASC LIMIT 10 OFFSET 20) alias)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The patch I'm uploading does both. The first commit adds the
ability to specify an OFFSET clause in an UPDATE statement, while
the second commit adds this workaround so that it works in MySQL
too.&lt;/p&gt;
&lt;p&gt;Comments on this are welcome.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-06T01:54:37+00:00</created-at>
      <creator-id type="integer">138071</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6459</number>
      <permalink>arel-update-method-silently-drops-offset-clause</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>arel</tag>
      <title>Arel update method silently drops OFFSET clause</title>
      <updated-at type="datetime">2011-03-06T01:54:40+00:00</updated-at>
      <user-id type="integer">30376</user-id>
      <version type="integer">2</version>
      <user-name>Hugo Peixoto</user-name>
      <creator-name>GSnyder</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6459</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The previous patch had a problem. The WHERE conditions should not be in the parent UPDATE statement, but in the subselect one. This is related to [Bug \#6058](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6058-update_all-ignores-conditions-when-orders-and-limit-options-are-supplied#ticket-6058-8 &quot;Bug #6058&quot;).

The patch I'm attaching now removes the WHERE conditions from the UPDATE statement. As there is a bug regarding the where clauses propagation, the patch in the aforementioned ticket should also be applied.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The previous patch had a problem. The WHERE conditions should
not be in the parent UPDATE statement, but in the subselect one.
This is related to &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6058-update_all-ignores-conditions-when-orders-and-limit-options-are-supplied#ticket-6058-8&quot;
title=
&quot;Bug [#6058](/projects/8994/tickets/6058 &amp;quot;Ticket #6058&quot;&gt;Bug
#6058&lt;/a&gt;&quot;).&lt;/p&gt;
&lt;p&gt;The patch I'm attaching now removes the WHERE conditions from
the UPDATE statement. As there is a bug regarding the where clauses
propagation, the patch in the aforementioned ticket should also be
applied.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-06T11:01:50+00:00</created-at>
      <creator-id type="integer">138071</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6459</number>
      <permalink>arel-update-method-silently-drops-offset-clause</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>arel</tag>
      <title>Arel update method silently drops OFFSET clause</title>
      <updated-at type="datetime">2011-03-06T11:01:56+00:00</updated-at>
      <user-id type="integer">30376</user-id>
      <version type="integer">3</version>
      <user-name>Hugo Peixoto</user-name>
      <creator-name>GSnyder</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6459</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>3735c3f34c02263eca127ec6cb49f3b2800929f2</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-06T01:54:37+00:00</created-at>
      <filename>6459-mysql_offset_clause_on_upd.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">944565</id>
      <size type="integer">14122</size>
      <uploader-id type="integer">30376</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/944565/6459-mysql_offset_clause_on_upd.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>fd18ce8e8db52a3fc6730c873ba0fa7575e6fb82</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-06T11:01:50+00:00</created-at>
      <filename>6459-mysql_offset_clause_on_upd.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">944656</id>
      <size type="integer">12927</size>
      <uploader-id type="integer">30376</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/944656/6459-mysql_offset_clause_on_upd.diff</url>
    </attachment>
  </attachments>
</ticket>
