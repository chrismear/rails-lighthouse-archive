<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-17T17:13:00+01:00</created-at>
  <creator-id type="integer">21541</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">644</number>
  <permalink>ar-and-postgres-performace-issue</permalink>
  <priority type="integer">126</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord bug postgres</tag>
  <title>AR and postgres performace issue</title>
  <updated-at type="datetime">2008-10-23T16:32:19+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Daniel Podlejski</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/644</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Using of unquoted values in find(id) may cause long seq scan on huge tables.

For example:

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = 111111);
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Index Scan using messages_pkey on messages  (cost=0.00..8.35 rows=1 width=51)
   Index Cond: (id = 111111)
(2 rows)

It's OK, but:

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = 111111111111111111111111);
                           QUERY PLAN
----------------------------------------------------------------
 Seq Scan on messages  (cost=0.00..23400.56 rows=4588 width=51)
   Filter: ((id)::numeric = 111111111111111111111111::numeric)
(2 rows)

Postgres cast ID to numeric, so can't use integer index.
When table is really huge, this can kill our database server.

Solution on AR level is to use quoted values:

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = '111111');
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Index Scan using messages_pkey on messages  (cost=0.00..8.35 rows=1 width=51)
   Index Cond: (id = 111111)
(2 rows)

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = '111111111111111111111111');
ERROR:  value &quot;111111111111111111111111&quot; is out of range for type integer</original-body>
  <latest-body>Using of unquoted values in find(id) may cause long seq scan on huge tables.

For example:

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = 111111);
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Index Scan using messages_pkey on messages  (cost=0.00..8.35 rows=1 width=51)
   Index Cond: (id = 111111)
(2 rows)

It's OK, but:

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = 111111111111111111111111);
                           QUERY PLAN
----------------------------------------------------------------
 Seq Scan on messages  (cost=0.00..23400.56 rows=4588 width=51)
   Filter: ((id)::numeric = 111111111111111111111111::numeric)
(2 rows)

Postgres cast ID to numeric, so can't use integer index.
When table is really huge, this can kill our database server.

Solution on AR level is to use quoted values:

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = '111111');
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Index Scan using messages_pkey on messages  (cost=0.00..8.35 rows=1 width=51)
   Index Cond: (id = 111111)
(2 rows)

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = '111111111111111111111111');
ERROR:  value &quot;111111111111111111111111&quot; is out of range for type integer</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Using of unquoted values in find(id) may cause long seq scan on huge tables.
&lt;/p&gt;&lt;p&gt;
For example:
&lt;/p&gt;&lt;p&gt;
cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = 111111);
&lt;/p&gt;&lt;p&gt;
QUERY PLAN
&lt;/p&gt;&lt;p&gt;
-------------------------------------------------------------------------------
&lt;/p&gt;&lt;p&gt;
Index Scan using messages_pkey on messages  (cost=0.00..8.35 rows=1 width=51)
&lt;/p&gt;&lt;p&gt;
Index Cond: (id = 111111)
&lt;/p&gt;&lt;p&gt;
(2 rows)
&lt;/p&gt;&lt;p&gt;
It's OK, but:
&lt;/p&gt;&lt;p&gt;
cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = 111111111111111111111111);
&lt;/p&gt;&lt;p&gt;
QUERY PLAN
&lt;/p&gt;&lt;p&gt;
----------------------------------------------------------------
&lt;/p&gt;&lt;p&gt;
Seq Scan on messages  (cost=0.00..23400.56 rows=4588 width=51)
&lt;/p&gt;&lt;p&gt;
Filter: ((id)::numeric = 111111111111111111111111::numeric)
&lt;/p&gt;&lt;p&gt;
(2 rows)
&lt;/p&gt;&lt;p&gt;
Postgres cast ID to numeric, so can't use integer index.
&lt;/p&gt;&lt;p&gt;
When table is really huge, this can kill our database server.
&lt;/p&gt;&lt;p&gt;
Solution on AR level is to use quoted values:
&lt;/p&gt;&lt;p&gt;
cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = '111111');
&lt;/p&gt;&lt;p&gt;
QUERY PLAN
&lt;/p&gt;&lt;p&gt;
-------------------------------------------------------------------------------
&lt;/p&gt;&lt;p&gt;
Index Scan using messages_pkey on messages  (cost=0.00..8.35 rows=1 width=51)
&lt;/p&gt;&lt;p&gt;
Index Cond: (id = 111111)
&lt;/p&gt;&lt;p&gt;
(2 rows)
&lt;/p&gt;&lt;p&gt;
cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = '111111111111111111111111');
&lt;/p&gt;&lt;p&gt;
ERROR:  value &quot;111111111111111111111111&quot; is out of range for type integer
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Using of unquoted values in find(id) may cause long seq scan on huge tables.

For example:

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = 111111);
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Index Scan using messages_pkey on messages  (cost=0.00..8.35 rows=1 width=51)
   Index Cond: (id = 111111)
(2 rows)

It's OK, but:

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = 111111111111111111111111);
                           QUERY PLAN
----------------------------------------------------------------
 Seq Scan on messages  (cost=0.00..23400.56 rows=4588 width=51)
   Filter: ((id)::numeric = 111111111111111111111111::numeric)
(2 rows)

Postgres cast ID to numeric, so can't use integer index.
When table is really huge, this can kill our database server.

Solution on AR level is to use quoted values:

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = '111111');
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Index Scan using messages_pkey on messages  (cost=0.00..8.35 rows=1 width=51)
   Index Cond: (id = 111111)
(2 rows)

cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = '111111111111111111111111');
ERROR:  value &quot;111111111111111111111111&quot; is out of range for type integer</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Using of unquoted values in find(id) may cause long seq scan on huge tables.
&lt;/p&gt;&lt;p&gt;
For example:
&lt;/p&gt;&lt;p&gt;
cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = 111111);
&lt;/p&gt;&lt;p&gt;
QUERY PLAN
&lt;/p&gt;&lt;p&gt;
-------------------------------------------------------------------------------
&lt;/p&gt;&lt;p&gt;
Index Scan using messages_pkey on messages  (cost=0.00..8.35 rows=1 width=51)
&lt;/p&gt;&lt;p&gt;
Index Cond: (id = 111111)
&lt;/p&gt;&lt;p&gt;
(2 rows)
&lt;/p&gt;&lt;p&gt;
It's OK, but:
&lt;/p&gt;&lt;p&gt;
cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = 111111111111111111111111);
&lt;/p&gt;&lt;p&gt;
QUERY PLAN
&lt;/p&gt;&lt;p&gt;
----------------------------------------------------------------
&lt;/p&gt;&lt;p&gt;
Seq Scan on messages  (cost=0.00..23400.56 rows=4588 width=51)
&lt;/p&gt;&lt;p&gt;
Filter: ((id)::numeric = 111111111111111111111111::numeric)
&lt;/p&gt;&lt;p&gt;
(2 rows)
&lt;/p&gt;&lt;p&gt;
Postgres cast ID to numeric, so can't use integer index.
&lt;/p&gt;&lt;p&gt;
When table is really huge, this can kill our database server.
&lt;/p&gt;&lt;p&gt;
Solution on AR level is to use quoted values:
&lt;/p&gt;&lt;p&gt;
cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = '111111');
&lt;/p&gt;&lt;p&gt;
QUERY PLAN
&lt;/p&gt;&lt;p&gt;
-------------------------------------------------------------------------------
&lt;/p&gt;&lt;p&gt;
Index Scan using messages_pkey on messages  (cost=0.00..8.35 rows=1 width=51)
&lt;/p&gt;&lt;p&gt;
Index Cond: (id = 111111)
&lt;/p&gt;&lt;p&gt;
(2 rows)
&lt;/p&gt;&lt;p&gt;
cvalley_dev=# EXPLAIN SELECT * FROM messages WHERE (messages.&quot;id&quot; = '111111111111111111111111');
&lt;/p&gt;&lt;p&gt;
ERROR:  value &quot;111111111111111111111111&quot; is out of range for type integer
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T17:13:00+01:00</created-at>
      <creator-id type="integer">21541</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">644</number>
      <permalink>ar-and-postgres-performace-issue</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug postgres</tag>
      <title>AR and postgres performace issue</title>
      <updated-at type="datetime">2008-07-17T17:13:00+01:00</updated-at>
      <user-id type="integer">21541</user-id>
      <version type="integer">1</version>
      <user-name>Daniel Podlejski</user-name>
      <creator-name>Daniel Podlejski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/644</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-23T16:32:17+01:00</created-at>
      <creator-id type="integer">21541</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">644</number>
      <permalink>ar-and-postgres-performace-issue</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord bug postgres</tag>
      <title>AR and postgres performace issue</title>
      <updated-at type="datetime">2008-10-23T16:32:19+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Daniel Podlejski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/644</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
