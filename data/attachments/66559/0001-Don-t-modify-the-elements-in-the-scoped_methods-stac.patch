From 19192e28d10473faf58dba2d7605c715665e6407 Mon Sep 17 00:00:00 2001
From: Daniel Luz <dev@mernen.com>
Date: Mon, 1 Dec 2008 05:58:44 -0200
Subject: [PATCH] Don't modify the elements in the scoped_methods stack in find_last

Instead, temporarily reverse the current scope's order.
---
 activerecord/lib/active_record/base.rb         |   13 ++++++++++---
 activerecord/test/cases/method_scoping_test.rb |   17 +++++++++++++++++
 2 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index 9e45143..825a192 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -1466,11 +1466,18 @@ module ActiveRecord #:nodoc:
           end
 
           if scoped?(:find, :order)
-            scoped_order = reverse_sql_order(scope(:find, :order))
-            scoped_methods.select { |s| s[:find].update(:order => scoped_order) }
+            scope = scope(:find)
+            old_scoped_order = scope[:order]
+            scope[:order] = reverse_sql_order(old_scoped_order)
+          else
+            scope = nil
           end
 
-          find_initial(options.merge({ :order => order }))
+          begin
+            find_initial(options.merge({ :order => order }))
+          ensure
+            scope[:order] = old_scoped_order if scope
+          end
         end
 
         def reverse_sql_order(order_query)
diff --git a/activerecord/test/cases/method_scoping_test.rb b/activerecord/test/cases/method_scoping_test.rb
index 6372b4f..39e0429 100644
--- a/activerecord/test/cases/method_scoping_test.rb
+++ b/activerecord/test/cases/method_scoping_test.rb
@@ -27,6 +27,23 @@ class MethodScopingTest < ActiveRecord::TestCase
     end
   end
 
+  def test_scoped_find_last
+    highest_salary = Developer.find(:first, :order => "salary DESC")
+    Developer.with_scope(:find => { :order => "salary" }) do
+      assert_equal highest_salary, Developer.find(:last)
+    end
+  end
+
+  def test_scoped_find_last_preserves_scope
+    lowest_salary = Developer.find(:first, :order => "salary ASC")
+    highest_salary = Developer.find(:first, :order => "salary DESC")
+    Developer.with_scope(:find => { :order => "salary" }) do
+      assert_equal highest_salary, Developer.find(:last)
+      # should still work (i.e. the :last call should not have side effects)
+      assert_equal lowest_salary, Developer.find(:first)
+    end
+  end
+
   def test_scoped_find_combines_conditions
     Developer.with_scope(:find => { :conditions => "salary = 9000" }) do
       assert_equal developers(:poor_jamis), Developer.find(:first, :conditions => "name = 'Jamis'")
-- 
1.6.0.4

