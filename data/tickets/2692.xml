<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-05-21T22:13:27+01:00</created-at>
  <creator-id type="integer">57654</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2692</number>
  <permalink>disable_referential_integrity-fix</permalink>
  <priority type="integer">1813</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>bugmash patch</tag>
  <title>[PATCH] Fix disable_referential_integrity in postgresql_adapter</title>
  <updated-at type="datetime">2011-02-02T17:29:45+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Victor Nawothnig</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2692</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The old code could leave the database in an inconsistent state.

The original approach did the following things:

Disable all triggers on all tables.
yield the block
Ensure that all triggers are enabled on all tables with a
begin; ensure; block

As I understand the idea of the method is disable RI, yield the block, enable RI again.

However, this can leave to several problems:

This also disables triggers not related to RI, such as user defined triggers or simple constraints to ensure data safety/consistency.
If a transaction relies on that, safety/consistency is no longer
ensured, the database can be left in an inconsistent state.

The intended effect and this side effect would also apply to any
concurrent transaction, which is even more dangerous, because
this effectively disables all constraints, triggers (and thus also RI) for concurrent transactions, not just the block.

Furthermore this would effectively enable triggers or constraints
that a user has created, but disabled for some reason. Might lead
to unexpected results.

And another hazardous case, if the database connection fails
before the triggers are enabled again *ALL* triggers would stay
disabled. (If we're loading a large bulk of data in that block
it would increase the time window something like a disconnect,
server or client crash or a simple blackout, would leave all triggers disabled).

My version wraps everything automatically inside a database
transaction. This ensures that once we are done the triggers are 
set back to normal. 

It acquires a SHARE ROW EXCLUSIVE lock on all affected tables, which ensures that this transaction is the only one with write access to those tables (anything lower can cause a deadlock, but if absolutely necessary this can be lowered to SHARE)

Then it only disables triggers for referential integrity, yields
the block, enables those triggers again and commits the transaction.

The locks are automatically released when the transaction commits.


If users previously working around some of those problems with an external database transaction and SHARE ROW EXCLUSIVE locks on all tables, this will only provoke warning messages (because of the nested BEGIN; COMMIT;).

Also I added an optional argument (array of symbols/strings) in case a user wants to limit the affected tables (might make sense if one wants to do some dirty work on some specific table without effectively locking down the entire database.

Since I directly UPDATE the pg_trigger table, I needed a specific version, because pg_trigger.tgenabled used a bool 8.1 and 8.2, and a char in 8.3. So I replaced supports_disable_referential_integrity with a method that allows to identify which datatype is used. (I'm not perfectly comfortable with the way I wrote it, but I found no other good solution).</original-body>
  <latest-body>The old code could leave the database in an inconsistent state.

The original approach did the following things:

Disable all triggers on all tables.
yield the block
Ensure that all triggers are enabled on all tables with a
begin; ensure; block

As I understand the idea of the method is disable RI, yield the block, enable RI again.

However, this can leave to several problems:

This also disables triggers not related to RI, such as user defined triggers or simple constraints to ensure data safety/consistency.
If a transaction relies on that, safety/consistency is no longer
ensured, the database can be left in an inconsistent state.

The intended effect and this side effect would also apply to any
concurrent transaction, which is even more dangerous, because
this effectively disables all constraints, triggers (and thus also RI) for concurrent transactions, not just the block.

Furthermore this would effectively enable triggers or constraints
that a user has created, but disabled for some reason. Might lead
to unexpected results.

And another hazardous case, if the database connection fails
before the triggers are enabled again *ALL* triggers would stay
disabled. (If we're loading a large bulk of data in that block
it would increase the time window something like a disconnect,
server or client crash or a simple blackout, would leave all triggers disabled).

My version wraps everything automatically inside a database
transaction. This ensures that once we are done the triggers are 
set back to normal. 

It acquires a SHARE ROW EXCLUSIVE lock on all affected tables, which ensures that this transaction is the only one with write access to those tables (anything lower can cause a deadlock, but if absolutely necessary this can be lowered to SHARE)

Then it only disables triggers for referential integrity, yields
the block, enables those triggers again and commits the transaction.

The locks are automatically released when the transaction commits.


If users previously working around some of those problems with an external database transaction and SHARE ROW EXCLUSIVE locks on all tables, this will only provoke warning messages (because of the nested BEGIN; COMMIT;).

Also I added an optional argument (array of symbols/strings) in case a user wants to limit the affected tables (might make sense if one wants to do some dirty work on some specific table without effectively locking down the entire database.

Since I directly UPDATE the pg_trigger table, I needed a specific version, because pg_trigger.tgenabled used a bool 8.1 and 8.2, and a char in 8.3. So I replaced supports_disable_referential_integrity with a method that allows to identify which datatype is used. (I'm not perfectly comfortable with the way I wrote it, but I found no other good solution).</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The old code could leave the database in an inconsistent
state.&lt;/p&gt;
&lt;p&gt;The original approach did the following things:&lt;/p&gt;
&lt;p&gt;Disable all triggers on all tables. yield the block Ensure that
all triggers are enabled on all tables with a begin; ensure;
block&lt;/p&gt;
&lt;p&gt;As I understand the idea of the method is disable RI, yield the
block, enable RI again.&lt;/p&gt;
&lt;p&gt;However, this can leave to several problems:&lt;/p&gt;
&lt;p&gt;This also disables triggers not related to RI, such as user
defined triggers or simple constraints to ensure data
safety/consistency. If a transaction relies on that,
safety/consistency is no longer ensured, the database can be left
in an inconsistent state.&lt;/p&gt;
&lt;p&gt;The intended effect and this side effect would also apply to any
concurrent transaction, which is even more dangerous, because this
effectively disables all constraints, triggers (and thus also RI)
for concurrent transactions, not just the block.&lt;/p&gt;
&lt;p&gt;Furthermore this would effectively enable triggers or
constraints that a user has created, but disabled for some reason.
Might lead to unexpected results.&lt;/p&gt;
&lt;p&gt;And another hazardous case, if the database connection fails
before the triggers are enabled again &lt;em&gt;ALL&lt;/em&gt; triggers would
stay disabled. (If we're loading a large bulk of data in that block
it would increase the time window something like a disconnect,
server or client crash or a simple blackout, would leave all
triggers disabled).&lt;/p&gt;
&lt;p&gt;My version wraps everything automatically inside a database
transaction. This ensures that once we are done the triggers are
set back to normal.&lt;/p&gt;
&lt;p&gt;It acquires a SHARE ROW EXCLUSIVE lock on all affected tables,
which ensures that this transaction is the only one with write
access to those tables (anything lower can cause a deadlock, but if
absolutely necessary this can be lowered to SHARE)&lt;/p&gt;
&lt;p&gt;Then it only disables triggers for referential integrity, yields
the block, enables those triggers again and commits the
transaction.&lt;/p&gt;
&lt;p&gt;The locks are automatically released when the transaction
commits.&lt;/p&gt;
&lt;p&gt;If users previously working around some of those problems with
an external database transaction and SHARE ROW EXCLUSIVE locks on
all tables, this will only provoke warning messages (because of the
nested BEGIN; COMMIT;).&lt;/p&gt;
&lt;p&gt;Also I added an optional argument (array of symbols/strings) in
case a user wants to limit the affected tables (might make sense if
one wants to do some dirty work on some specific table without
effectively locking down the entire database.&lt;/p&gt;
&lt;p&gt;Since I directly UPDATE the pg_trigger table, I needed a
specific version, because pg_trigger.tgenabled used a bool 8.1 and
8.2, and a char in 8.3. So I replaced
supports_disable_referential_integrity with a method that allows to
identify which datatype is used. (I'm not perfectly comfortable
with the way I wrote it, but I found no other good solution).&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is regarding the disable_referential_integrity method in the postgresql_adapter.rb.

The original approach did the following things:
1. Disable all triggers on all tables.
2. Yield the block.
3. Ensure that all triggers are enabled on all tables with a &quot;begin; ensure; end&quot; block

However, this can leave to several problems:
This disables triggers not related to RI, such as user or system triggers or constraints to ensure data safety/consistency. If a transaction relies on that, safety/consistency is no longer
ensured, the database can be left in an inconsistent state (outside RI).

The intended effect and that side effect would also apply to any concurrent transaction, which is even more dangerous, because
this effectively disables all constraints, triggers (and thus also RI) for concurrent transactions, not just the block.

Furthermore this would effectively enable triggers or constraints that a user has created, but disabled for some reason which might lead to unexpected results. (Even though they should be rather dropped in the first place, I don't think we want to do that).

And another hazardous case, if the database connection fails before the triggers are enabled again *ALL* triggers would stay disabled. 
If we're loading a large bulk of data in that block it would increase the time window something like a disconnect, server or client crash or a simple blackout occurs, and all triggers would be left disabled).

I replaced the code with more a more direct and fine-grained approach,
removing all of those problems, with an optional argument to limit the disabling of RI and locks to specific table(names).

 In addition I had to replace supports_disable_referential_integrity with a more detailed method, required to update pg_trigger directly.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is regarding the disable_referential_integrity method in
the postgresql_adapter.rb.&lt;/p&gt;
&lt;p&gt;The original approach did the following things:&lt;br&gt;
1. Disable all triggers on all tables.&lt;br&gt;
2. Yield the block.&lt;br&gt;
3. Ensure that all triggers are enabled on all tables with a
&quot;begin; ensure; end&quot; block&lt;/p&gt;
&lt;p&gt;However, this can leave to several problems:&lt;br&gt;
This disables triggers not related to RI, such as user or system
triggers or constraints to ensure data safety/consistency. If a
transaction relies on that, safety/consistency is no longer&lt;br&gt;
ensured, the database can be left in an inconsistent state (outside
RI).&lt;/p&gt;
&lt;p&gt;The intended effect and that side effect would also apply to any
concurrent transaction, which is even more dangerous, because&lt;br&gt;
this effectively disables all constraints, triggers (and thus also
RI) for concurrent transactions, not just the block.&lt;/p&gt;
&lt;p&gt;Furthermore this would effectively enable triggers or
constraints that a user has created, but disabled for some reason
which might lead to unexpected results. (Even though they should be
rather dropped in the first place, I don't think we want to do
that).&lt;/p&gt;
&lt;p&gt;And another hazardous case, if the database connection fails
before the triggers are enabled again &lt;em&gt;ALL&lt;/em&gt; triggers would
stay disabled.&lt;br&gt;
If we're loading a large bulk of data in that block it would
increase the time window something like a disconnect, server or
client crash or a simple blackout occurs, and all triggers would be
left disabled).&lt;/p&gt;
&lt;p&gt;I replaced the code with more a more direct and fine-grained
approach,&lt;br&gt;
removing all of those problems, with an optional argument to limit
the disabling of RI and locks to specific table(names).&lt;/p&gt;
&lt;p&gt;In addition I had to replace
supports_disable_referential_integrity with a more detailed method,
required to update pg_trigger directly.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-21T22:13:27+01:00</created-at>
      <creator-id type="integer">57654</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2692</number>
      <permalink>disable_referential_integrity-fix</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>[PATCH] Fix disable_referential_integrity in postgresql_adapter</title>
      <updated-at type="datetime">2009-05-23T05:25:45+01:00</updated-at>
      <user-id type="integer">57654</user-id>
      <version type="integer">1</version>
      <user-name>Victor Nawothnig</user-name>
      <creator-name>Victor Nawothnig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2692</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Added a new patch which handles the version checking
in pg_trigger_enabled_type properly through postgresql_version.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Added a new patch which handles the version checking&lt;br&gt;
in pg_trigger_enabled_type properly through postgresql_version.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-23T05:31:44+01:00</created-at>
      <creator-id type="integer">57654</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2692</number>
      <permalink>disable_referential_integrity-fix</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>[PATCH] Fix disable_referential_integrity in postgresql_adapter</title>
      <updated-at type="datetime">2009-05-23T05:31:49+01:00</updated-at>
      <user-id type="integer">57654</user-id>
      <version type="integer">2</version>
      <user-name>Victor Nawothnig</user-name>
      <creator-name>Victor Nawothnig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2692</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:50+01:00</created-at>
      <creator-id type="integer">57654</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2692</number>
      <permalink>disable_referential_integrity-fix</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>[PATCH] Fix disable_referential_integrity in postgresql_adapter</title>
      <updated-at type="datetime">2010-05-04T18:48:50+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Victor Nawothnig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2692</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-09T19:31:20+01:00</created-at>
      <creator-id type="integer">57654</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: patch
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2692</number>
      <permalink>disable_referential_integrity-fix</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash patch</tag>
      <title>[PATCH] Fix disable_referential_integrity in postgresql_adapter</title>
      <updated-at type="datetime">2010-05-09T19:31:22+01:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">4</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>Victor Nawothnig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2692</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:39:22+00:00</created-at>
      <creator-id type="integer">57654</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2692</number>
      <permalink>disable_referential_integrity-fix</permalink>
      <priority type="integer">1813</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>bugmash patch</tag>
      <title>[PATCH] Fix disable_referential_integrity in postgresql_adapter</title>
      <updated-at type="datetime">2011-02-02T17:29:42+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Victor Nawothnig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2692</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:39:23+00:00</created-at>
      <creator-id type="integer">57654</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2692</number>
      <permalink>disable_referential_integrity-fix</permalink>
      <priority type="integer">1813</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>bugmash patch</tag>
      <title>[PATCH] Fix disable_referential_integrity in postgresql_adapter</title>
      <updated-at type="datetime">2011-02-02T17:29:45+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Victor Nawothnig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2692</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>89d92d162624fc4e4060d3977bed163e8fa19e67</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-05-21T22:13:27+01:00</created-at>
      <filename>disable_ri_fix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">125242</id>
      <size type="integer">4198</size>
      <uploader-id type="integer">57654</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/125242/disable_ri_fix.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>ad37131e0a870a3fb95da75d150673a262d59bb5</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-05-23T05:31:44+01:00</created-at>
      <filename>disable_ri_fix2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">125700</id>
      <size type="integer">3901</size>
      <uploader-id type="integer">57654</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/125700/disable_ri_fix2.diff</url>
    </attachment>
  </attachments>
</ticket>
