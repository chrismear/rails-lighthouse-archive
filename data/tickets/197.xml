<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-14T18:45:03+01:00</created-at>
  <creator-id type="integer">20269</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">197</number>
  <permalink>sqliteadapter-fails-with-a-dark-message-when-creating-columns-when-inside-a-transaction</permalink>
  <priority type="integer">14942</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.0-stable activerecord patch sqlite</tag>
  <title>SQLiteAdapter fails with a dark message when creating columns when inside a transaction</title>
  <updated-at type="datetime">2008-05-20T11:14:38+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">6</version>
  <user-name>Repository</user-name>
  <creator-name>Gunnar Wolf</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/197</url>
  <priority-name nil="true"></priority-name>
  <original-body>&#65279;While running some tests which require modifying some fields in a DB table, I ran across a problem that made me lose quite some time. The error I got when running the test (under SQLite3) was:

ActiveRecord::StatementInvalid: SQLite3::SQLException: SQL logic error or missing database: VACUUM

Now, digging into ConnectionAdapters::SQLiteAdapter, I found:

      def add_column(table_name, column_name, type, options = {}) #:nodoc:
        super(table_name, column_name, type, options)
        # See last paragraph on http://www.sqlite.org/lang_altertable.html
        execute &quot;VACUUM&quot;
      end

Now... Refering to its own documentation, SQLite will fail on vacuums when there is an active transaction (http://www.sqlite.org/lang_vacuum.html)... &#65279;So my tests fail miserably. 

I would suggest either of the following patches: 

First version: Try to create the requested column; if it was called in mid-transaction, the DB won't be readable with older versions of MySQL, but it will succeed:

--- sqlite_adapter.rb	2008-04-22 13:29:35.000000000 -0500
+++ /tmp/sqlite_adapter.rb	2008-05-14 12:38:18.000000000 -0500
@@ -216,7 +216,7 @@
       def add_column(table_name, column_name, type, options = {}) #:nodoc:
         super(table_name, column_name, type, options)
         # See last paragraph on http://www.sqlite.org/lang_altertable.html
-        execute &quot;VACUUM&quot;
+        execute &quot;VACUUM&quot; unless ActiveRecord::Base.connection.instance_variable_get(:@connection).transaction_active?
       end
 
       def remove_column(table_name, column_name) #:nodoc:

The second possibility is just to disallow adding columns while in a transaction:

-- sqlite_adapter.rb	2008-04-22 13:29:35.000000000 -0500
+++ /tmp/sqlite_adapter.rb	2008-05-14 12:44:18.000000000 -0500
@@ -214,6 +214,8 @@
       end
 
       def add_column(table_name, column_name, type, options = {}) #:nodoc:
+        raise StatementInvalid, 'Cannot add columns to a SQLite database while inside a transaction' if 
+          ActiveRecord::Base.connection.instance_variable_get(:@connection).transaction_active?
         super(table_name, column_name, type, options)
         # See last paragraph on http://www.sqlite.org/lang_altertable.html
         execute &quot;VACUUM&quot;

Any of them will be better than just leaving the user scratching his head to understand where the error lies :)</original-body>
  <latest-body>&#65279;While running some tests which require modifying some fields in a DB table, I ran across a problem that made me lose quite some time. The error I got when running the test (under SQLite3) was:

ActiveRecord::StatementInvalid: SQLite3::SQLException: SQL logic error or missing database: VACUUM

Now, digging into ConnectionAdapters::SQLiteAdapter, I found:

      def add_column(table_name, column_name, type, options = {}) #:nodoc:
        super(table_name, column_name, type, options)
        # See last paragraph on http://www.sqlite.org/lang_altertable.html
        execute &quot;VACUUM&quot;
      end

Now... Refering to its own documentation, SQLite will fail on vacuums when there is an active transaction (http://www.sqlite.org/lang_vacuum.html)... &#65279;So my tests fail miserably. 

I would suggest either of the following patches: 

First version: Try to create the requested column; if it was called in mid-transaction, the DB won't be readable with older versions of MySQL, but it will succeed:

--- sqlite_adapter.rb	2008-04-22 13:29:35.000000000 -0500
+++ /tmp/sqlite_adapter.rb	2008-05-14 12:38:18.000000000 -0500
@@ -216,7 +216,7 @@
       def add_column(table_name, column_name, type, options = {}) #:nodoc:
         super(table_name, column_name, type, options)
         # See last paragraph on http://www.sqlite.org/lang_altertable.html
-        execute &quot;VACUUM&quot;
+        execute &quot;VACUUM&quot; unless ActiveRecord::Base.connection.instance_variable_get(:@connection).transaction_active?
       end
 
       def remove_column(table_name, column_name) #:nodoc:

The second possibility is just to disallow adding columns while in a transaction:

-- sqlite_adapter.rb	2008-04-22 13:29:35.000000000 -0500
+++ /tmp/sqlite_adapter.rb	2008-05-14 12:44:18.000000000 -0500
@@ -214,6 +214,8 @@
       end
 
       def add_column(table_name, column_name, type, options = {}) #:nodoc:
+        raise StatementInvalid, 'Cannot add columns to a SQLite database while inside a transaction' if 
+          ActiveRecord::Base.connection.instance_variable_get(:@connection).transaction_active?
         super(table_name, column_name, type, options)
         # See last paragraph on http://www.sqlite.org/lang_altertable.html
         execute &quot;VACUUM&quot;

Any of them will be better than just leaving the user scratching his head to understand where the error lies :)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
&#65279;While running some tests which require modifying some fields in a DB table, I ran across a problem that made me lose quite some time. The error I got when running the test (under SQLite3) was:
&lt;/p&gt;&lt;p&gt;
ActiveRecord::StatementInvalid: SQLite3::SQLException: SQL logic error or missing database: VACUUM
&lt;/p&gt;&lt;p&gt;
Now, digging into ConnectionAdapters::SQLiteAdapter, I found:
&lt;/p&gt;&lt;p&gt;
def add_column(table_name, column_name, type, options = {}) #:nodoc:
&lt;/p&gt;&lt;p&gt;
super(table_name, column_name, type, options)
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
See last paragraph on &lt;a href=&quot;http://www.sqlite.org/lang_altertable.html&quot;&gt;http://www.sqlite.org/lang_alter...&lt;/a&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;
execute &quot;VACUUM&quot;
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
Now... Refering to its own documentation, SQLite will fail on vacuums when there is an active transaction (&lt;a href=&quot;http://www.sqlite.org/lang_vacuum.html&quot;&gt;http://www.sqlite.org/lang_vacuu...&lt;/a&gt;)... &#65279;So my tests fail miserably.
&lt;/p&gt;&lt;p&gt;
I would suggest either of the following patches:
&lt;/p&gt;&lt;p&gt;
First version: Try to create the requested column; if it was called in mid-transaction, the DB won't be readable with older versions of MySQL, but it will succeed:
&lt;/p&gt;&lt;p&gt;
--- sqlite_adapter.rb	2008-04-22 13:29:35.000000000 -0500
&lt;/p&gt;&lt;p&gt;
+++ /tmp/sqlite_adapter.rb	2008-05-14 12:38:18.000000000 -0500
&lt;/p&gt;&lt;p&gt;
@@ -216,7 +216,7 @@
&lt;/p&gt;&lt;p&gt;
def add_column(table_name, column_name, type, options = {}) #:nodoc:
&lt;/p&gt;&lt;p&gt;
super(table_name, column_name, type, options)
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
See last paragraph on &lt;a href=&quot;http://www.sqlite.org/lang_altertable.html&quot;&gt;http://www.sqlite.org/lang_alter...&lt;/a&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;ul&gt;&lt;li&gt;
       execute &quot;VACUUM&quot;
&lt;/li&gt;&lt;li&gt;
       execute &quot;VACUUM&quot; unless ActiveRecord::Base.connection.instance_variable_get(:@connection).transaction_active?
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
def remove_column(table_name, column_name) #:nodoc:
&lt;/p&gt;&lt;p&gt;
The second possibility is just to disallow adding columns while in a transaction:
&lt;/p&gt;&lt;p&gt;
-- sqlite_adapter.rb	2008-04-22 13:29:35.000000000 -0500
&lt;/p&gt;&lt;p&gt;
+++ /tmp/sqlite_adapter.rb	2008-05-14 12:44:18.000000000 -0500
&lt;/p&gt;&lt;p&gt;
@@ -214,6 +214,8 @@
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
def add_column(table_name, column_name, type, options = {}) #:nodoc:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
       raise StatementInvalid, 'Cannot add columns to a SQLite database while inside a transaction' if
&lt;/li&gt;&lt;li&gt;
         ActiveRecord::Base.connection.instance_variable_get(:@connection).transaction_active?
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
super(table_name, column_name, type, options)
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
See last paragraph on &lt;a href=&quot;http://www.sqlite.org/lang_altertable.html&quot;&gt;http://www.sqlite.org/lang_alter...&lt;/a&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;
execute &quot;VACUUM&quot;
&lt;/p&gt;&lt;p&gt;
Any of them will be better than just leaving the user scratching his head to understand where the error lies :)
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&#65279;While running some tests which require modifying some fields in a DB table, I ran across a problem that made me lose quite some time. The error I got when running the test (under SQLite3) was:

&lt;code&gt;ActiveRecord::StatementInvalid: SQLite3::SQLException: SQL logic error or missing database: VACUUM&lt;/code&gt;

Now, digging into ConnectionAdapters::SQLiteAdapter, I found:

&lt;pre&gt;
      def add_column(table_name, column_name, type, options = {}) #:nodoc:
        super(table_name, column_name, type, options)
        # See last paragraph on http://www.sqlite.org/lang_altertable.html
        execute &quot;VACUUM&quot;
      end
&lt;/pre&gt;

Now... Refering to its own documentation, SQLite will fail on vacuums when there is an active transaction (http://www.sqlite.org/lang_vacuum.html)... &#65279;So my tests fail miserably. 

I would suggest either of the attached patches.

First version: Try to create the requested column; if it was called in mid-transaction, the DB won't be readable with older versions of MySQL, but it will succeed:

The second possibility is just to disallow adding columns while in a transaction:
Any of them will be better than just leaving the user scratching his head to understand where the error lies :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&#65279;While running some tests which require modifying some fields in a DB table, I ran across a problem that made me lose quite some time. The error I got when running the test (under SQLite3) was:
&lt;/p&gt;&lt;p&gt;
&lt;code&gt;ActiveRecord::StatementInvalid: SQLite3::SQLException: SQL logic error or missing database: VACUUM&lt;/code&gt;
&lt;/p&gt;&lt;p&gt;
Now, digging into ConnectionAdapters::SQLiteAdapter, I found:
&lt;/p&gt;&lt;p&gt;
&lt;pre&gt;
&lt;/p&gt;&lt;p&gt;
def add_column(table_name, column_name, type, options = {}) #:nodoc:
&lt;/p&gt;&lt;p&gt;
super(table_name, column_name, type, options)
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
See last paragraph on &lt;a href=&quot;http://www.sqlite.org/lang_altertable.html&quot;&gt;http://www.sqlite.org/lang_alter...&lt;/a&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;
execute &quot;VACUUM&quot;
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;
Now... Refering to its own documentation, SQLite will fail on vacuums when there is an active transaction (&lt;a href=&quot;http://www.sqlite.org/lang_vacuum.html&quot;&gt;http://www.sqlite.org/lang_vacuu...&lt;/a&gt;)... &#65279;So my tests fail miserably.
&lt;/p&gt;&lt;p&gt;
I would suggest either of the attached patches.
&lt;/p&gt;&lt;p&gt;
First version: Try to create the requested column; if it was called in mid-transaction, the DB won't be readable with older versions of MySQL, but it will succeed:
&lt;/p&gt;&lt;p&gt;
The second possibility is just to disallow adding columns while in a transaction:
&lt;/p&gt;&lt;p&gt;
Any of them will be better than just leaving the user scratching his head to understand where the error lies :)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-14T18:55:09+01:00</created-at>
      <creator-id type="integer">20269</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">197</number>
      <permalink>sqliteadapter-fails-with-a-dark-message-when-creating-columns-when-inside-a-transaction</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>SQLiteAdapter fails with a dark message when creating columns when inside a transaction</title>
      <updated-at type="datetime">2008-05-14T18:55:09+01:00</updated-at>
      <user-id type="integer">20269</user-id>
      <version type="integer">1</version>
      <user-name>Gunnar Wolf</user-name>
      <creator-name>Gunnar Wolf</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/197</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>UGH... This got formatted as hell. I'm uploading both versions of the patch. 
Here goes the first version: Try to make it work, just leaving out the vacuum</body>
      <body-html>&lt;div&gt;&lt;p&gt;
UGH... This got formatted as hell. I'm uploading both versions of the patch.
&lt;/p&gt;&lt;p&gt;
Here goes the first version: Try to make it work, just leaving out the vacuum
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-14T18:54:15+01:00</created-at>
      <creator-id type="integer">20269</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">197</number>
      <permalink>sqliteadapter-fails-with-a-dark-message-when-creating-columns-when-inside-a-transaction</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>SQLiteAdapter fails with a dark message when creating columns when inside a transaction</title>
      <updated-at type="datetime">2008-05-14T18:54:15+01:00</updated-at>
      <user-id type="integer">20269</user-id>
      <version type="integer">2</version>
      <user-name>Gunnar Wolf</user-name>
      <creator-name>Gunnar Wolf</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/197</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Second patch</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Second patch
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-14T18:50:37+01:00</created-at>
      <creator-id type="integer">20269</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">197</number>
      <permalink>sqliteadapter-fails-with-a-dark-message-when-creating-columns-when-inside-a-transaction</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>SQLiteAdapter fails with a dark message when creating columns when inside a transaction</title>
      <updated-at type="datetime">2008-05-14T18:50:37+01:00</updated-at>
      <user-id type="integer">20269</user-id>
      <version type="integer">3</version>
      <user-name>Gunnar Wolf</user-name>
      <creator-name>Gunnar Wolf</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/197</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Can you please add a test case verifying expected exception is raised for sqlite adapter ?

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Can you please add a test case verifying expected exception is raised for sqlite adapter ?
&lt;/p&gt;&lt;p&gt;
Thanks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-19T11:12:09+01:00</created-at>
      <creator-id type="integer">20269</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">197</number>
      <permalink>sqliteadapter-fails-with-a-dark-message-when-creating-columns-when-inside-a-transaction</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>SQLiteAdapter fails with a dark message when creating columns when inside a transaction</title>
      <updated-at type="datetime">2008-05-19T11:12:09+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Gunnar Wolf</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/197</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Here it is - I'm doing the test for the second case I mentioned (raising a StatementInvalid when adding a column inside a transaction).
Stylistically it might be quite un-railish - But it does work as expected.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Here it is - I'm doing the test for the second case I mentioned (raising a StatementInvalid when adding a column inside a transaction).
&lt;/p&gt;&lt;p&gt;
Stylistically it might be quite un-railish - But it does work as expected.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-19T17:33:28+01:00</created-at>
      <creator-id type="integer">20269</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">197</number>
      <permalink>sqliteadapter-fails-with-a-dark-message-when-creating-columns-when-inside-a-transaction</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>SQLiteAdapter fails with a dark message when creating columns when inside a transaction</title>
      <updated-at type="datetime">2008-05-19T17:33:28+01:00</updated-at>
      <user-id type="integer">20269</user-id>
      <version type="integer">5</version>
      <user-name>Gunnar Wolf</user-name>
      <creator-name>Gunnar Wolf</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/197</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [089251581137b041828a7e6dcbf75ecbef55b4a3]) Ensure add_column gives valid error for sqlite. [Gunnar Wolf, Pratik] [#197 state:resolved]

SQLite#add_column executes &quot;VACUUM&quot;, which fails if inside a live transaction. This patch
ensures a valid exception is raised if add_column is executed within a live transaction for
sqlite adapter.
http://github.com/rails/rails/commit/089251581137b041828a7e6dcbf75ecbef55b4a3</body>
      <body-html>&lt;div&gt;&lt;p&gt;
(from [089251581137b041828a7e6dcbf75ecbef55b4a3]) Ensure add_column gives valid error for sqlite. [Gunnar Wolf, Pratik] [#197 state:resolved]
&lt;/p&gt;&lt;p&gt;
SQLite#add_column executes &quot;VACUUM&quot;, which fails if inside a live transaction. This patch
&lt;/p&gt;&lt;p&gt;
ensures a valid exception is raised if add_column is executed within a live transaction for
&lt;/p&gt;&lt;p&gt;
sqlite adapter.
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/089251581137b041828a7e6dcbf75ecbef55b4a3&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-20T11:14:38+01:00</created-at>
      <creator-id type="integer">20269</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">197</number>
      <permalink>sqliteadapter-fails-with-a-dark-message-when-creating-columns-when-inside-a-transaction</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>SQLiteAdapter fails with a dark message when creating columns when inside a transaction</title>
      <updated-at type="datetime">2008-05-20T11:14:38+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">6</version>
      <user-name>Repository</user-name>
      <creator-name>Gunnar Wolf</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/197</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>7e8d9b3430f11179826b5d552a8895e99119bc18</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-14T18:49:54+01:00</created-at>
      <filename>sqlite.1.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">22930</id>
      <size type="integer">565</size>
      <uploader-id type="integer">20269</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/22930/sqlite.1.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>f2af4c8560165517af80f342fcd3ec7107cd9ad1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-14T18:50:37+01:00</created-at>
      <filename>sqlite.2.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">22931</id>
      <size type="integer">590</size>
      <uploader-id type="integer">20269</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/22931/sqlite.2.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>c15c8dda95ad16ee8f408685be181a0bef2bb60c</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-19T17:33:28+01:00</created-at>
      <filename>sqlite_add_column_under_transaction.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">23606</id>
      <size type="integer">2728</size>
      <uploader-id type="integer">20269</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/23606/sqlite_add_column_under_transaction.diff</url>
    </attachment>
  </attachments>
</ticket>
