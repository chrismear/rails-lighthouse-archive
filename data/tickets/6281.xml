<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-01-12T12:06:42+00:00</created-at>
  <creator-id type="integer">42916</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6281</number>
  <permalink>double-bind-variable-expansion-in-activerecord-condtions</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>2.3.11 activerecord conditions &quot;rails 2.3.11&quot;</tag>
  <title>double bind variable expansion in activerecord condtions</title>
  <updated-at type="datetime">2011-04-13T05:17:56+01:00</updated-at>
  <user-id type="integer">42916</user-id>
  <version type="integer">4</version>
  <user-name>Greg Hazel</user-name>
  <creator-name>Greg Hazel</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6281</url>
  <priority-name nil="true"></priority-name>
  <original-body>When specifying the table name in an ActiveRecord model scope, the bind variables expansion runs when it should not:

@@@ ruby
&gt;&gt; Action.scoped(:conditions =&gt; {:actions =&gt; {:message =&gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]}})
ActiveRecord::PreparedStatementInvalid: wrong number of bind variables (0 for 1) in: `actions`.`message` IN ('is this fun?','hats are nice')
@@@

These forms all work as expected:

@@@ ruby
&gt;&gt; # no question mark
&gt;&gt; Action.scoped(:conditions =&gt; {:actions =&gt; {:message =&gt; [&quot;is this fun&quot;, &quot;hats are nice&quot;]}})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun','hats are nice'))

&gt;&gt; # no table name
&gt;&gt; Action.scoped(:conditions =&gt; {:message =&gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))

&gt;&gt; # no nesting
&gt;&gt; Action.scoped(:conditions =&gt; {&quot;actions.message&quot; =&gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))
@@@

I believe the problem is that sanitize_sql_hash_for_conditions calls itself recursively after generating the table name, and expand_range_bind_variables is called twice instead of once as it unwinds.

https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2355
https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2359</original-body>
  <latest-body>When specifying the table name in an ActiveRecord model scope, the bind variables expansion runs when it should not:

@@@ ruby
&gt;&gt; Action.scoped(:conditions =&gt; {:actions =&gt; {:message =&gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]}})
ActiveRecord::PreparedStatementInvalid: wrong number of bind variables (0 for 1) in: `actions`.`message` IN ('is this fun?','hats are nice')
@@@

These forms all work as expected:

@@@ ruby
&gt;&gt; # no question mark
&gt;&gt; Action.scoped(:conditions =&gt; {:actions =&gt; {:message =&gt; [&quot;is this fun&quot;, &quot;hats are nice&quot;]}})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun','hats are nice'))

&gt;&gt; # no table name
&gt;&gt; Action.scoped(:conditions =&gt; {:message =&gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))

&gt;&gt; # no nesting
&gt;&gt; Action.scoped(:conditions =&gt; {&quot;actions.message&quot; =&gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))
@@@

I believe the problem is that sanitize_sql_hash_for_conditions calls itself recursively after generating the table name, and expand_range_bind_variables is called twice instead of once as it unwinds.

https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2355
https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2359</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When specifying the table name in an ActiveRecord model scope,
the bind variables expansion runs when it should not:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; Action.scoped(:conditions =&amp;gt; {:actions =&amp;gt; {:message =&amp;gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]}})
ActiveRecord::PreparedStatementInvalid: wrong number of bind variables (0 for 1) in: `actions`.`message` IN ('is this fun?','hats are nice')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;These forms all work as expected:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; # no question mark
&amp;gt;&amp;gt; Action.scoped(:conditions =&amp;gt; {:actions =&amp;gt; {:message =&amp;gt; [&quot;is this fun&quot;, &quot;hats are nice&quot;]}})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun','hats are nice'))

&amp;gt;&amp;gt; # no table name
&amp;gt;&amp;gt; Action.scoped(:conditions =&amp;gt; {:message =&amp;gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))

&amp;gt;&amp;gt; # no nesting
&amp;gt;&amp;gt; Action.scoped(:conditions =&amp;gt; {&quot;actions.message&quot; =&amp;gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I believe the problem is that sanitize_sql_hash_for_conditions
calls itself recursively after generating the table name, and
expand_range_bind_variables is called twice instead of once as it
unwinds.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2355&quot;&gt;
https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/act...&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2359&quot;&gt;
https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/act...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When specifying the table name in an ActiveRecord model scope, the bind variables expansion runs when it should not:

@@@ ruby
&gt;&gt; Action.scoped(:conditions =&gt; {:actions =&gt; {:message =&gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]}})
ActiveRecord::PreparedStatementInvalid: wrong number of bind variables (0 for 1) in: `actions`.`message` IN ('is this fun?','hats are nice')
@@@

These forms all work as expected:

@@@ ruby
&gt;&gt; # no question mark
&gt;&gt; Action.scoped(:conditions =&gt; {:actions =&gt; {:message =&gt; [&quot;is this fun&quot;, &quot;hats are nice&quot;]}})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun','hats are nice'))

&gt;&gt; # no table name
&gt;&gt; Action.scoped(:conditions =&gt; {:message =&gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))

&gt;&gt; # no nesting
&gt;&gt; Action.scoped(:conditions =&gt; {&quot;actions.message&quot; =&gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))
@@@

I believe the problem is that sanitize_sql_hash_for_conditions calls itself recursively after generating the table name, and expand_range_bind_variables is called twice instead of once as it unwinds.

https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2355
https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2359</body>
      <body-html>&lt;div&gt;&lt;p&gt;When specifying the table name in an ActiveRecord model scope,
the bind variables expansion runs when it should not:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; Action.scoped(:conditions =&amp;gt; {:actions =&amp;gt; {:message =&amp;gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]}})
ActiveRecord::PreparedStatementInvalid: wrong number of bind variables (0 for 1) in: `actions`.`message` IN ('is this fun?','hats are nice')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;These forms all work as expected:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; # no question mark
&amp;gt;&amp;gt; Action.scoped(:conditions =&amp;gt; {:actions =&amp;gt; {:message =&amp;gt; [&quot;is this fun&quot;, &quot;hats are nice&quot;]}})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun','hats are nice'))

&amp;gt;&amp;gt; # no table name
&amp;gt;&amp;gt; Action.scoped(:conditions =&amp;gt; {:message =&amp;gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))

&amp;gt;&amp;gt; # no nesting
&amp;gt;&amp;gt; Action.scoped(:conditions =&amp;gt; {&quot;actions.message&quot; =&amp;gt; [&quot;is this fun?&quot;, &quot;hats are nice&quot;]})
Action Load (1.0ms)  SELECT * FROM `actions` WHERE (`actions`.`message` IN ('is this fun?','hats are nice'))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I believe the problem is that sanitize_sql_hash_for_conditions
calls itself recursively after generating the table name, and
expand_range_bind_variables is called twice instead of once as it
unwinds.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2355&quot;&gt;
https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/act...&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/active_record/base.rb#L2359&quot;&gt;
https://github.com/rails/rails/blob/2-3-stable/activerecord/lib/act...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-12T12:06:42+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6281</number>
      <permalink>double-bind-variable-expansion-in-activerecord-condtions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.10 activerecord conditions &quot;rails 2.3.10&quot;</tag>
      <title>double bind variable expansion in activerecord condtions</title>
      <updated-at type="datetime">2011-01-12T12:06:44+00:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">1</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6281</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-13T01:00:08+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.10 activerecord conditions &quot;rails 2.3.10&quot;
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6281</number>
      <permalink>double-bind-variable-expansion-in-activerecord-condtions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2310 activerecord conditions &quot;rails 2310&quot;</tag>
      <title>double bind variable expansion in activerecord condtions</title>
      <updated-at type="datetime">2011-04-13T01:00:55+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">2</version>
      <user-name>rails</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6281</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-13T01:00:08+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6281</number>
      <permalink>double-bind-variable-expansion-in-activerecord-condtions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2310 activerecord conditions &quot;rails 2310&quot;</tag>
      <title>double bind variable expansion in activerecord condtions</title>
      <updated-at type="datetime">2011-04-13T01:01:08+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6281</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-13T05:17:55+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2310 activerecord conditions &quot;rails 2310&quot;
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6281</number>
      <permalink>double-bind-variable-expansion-in-activerecord-condtions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.11 activerecord conditions &quot;rails 2.3.11&quot;</tag>
      <title>double bind variable expansion in activerecord condtions</title>
      <updated-at type="datetime">2011-04-13T05:17:56+01:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">4</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6281</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
