<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-02-05T21:10:14+00:00</created-at>
  <creator-id type="integer">606</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3867</number>
  <permalink>add-modify-in-place-setters-for-relations</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>arel enhancement</tag>
  <title>add modify in place setters for relations</title>
  <updated-at type="datetime">2010-02-06T12:07:09+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Steve Erickson</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3867</url>
  <priority-name>Low</priority-name>
  <original-body>While playing around with Arel I was surprised to find that there were no setters to modify a relation.  In other words, &quot;bang&quot; methods (!) to update a relation using multiple calls.  I think it would be nice if the following were possible:

users = Table[:users]

users.where!(users[:id].eq(1))

This would make it possible to use conditionals when generating a query.  

I realize I can achieve a similar effect today just by storing the results of a where call into a new variable, but I think the bang methods are more elegant.

Thanks for your consideration.</original-body>
  <latest-body>While playing around with Arel I was surprised to find that there were no setters to modify a relation.  In other words, &quot;bang&quot; methods (!) to update a relation using multiple calls.  I think it would be nice if the following were possible:

users = Table[:users]

users.where!(users[:id].eq(1))

This would make it possible to use conditionals when generating a query.  

I realize I can achieve a similar effect today just by storing the results of a where call into a new variable, but I think the bang methods are more elegant.

Thanks for your consideration.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;While playing around with Arel I was surprised to find that
there were no setters to modify a relation. In other words, &quot;bang&quot;
methods (!) to update a relation using multiple calls. I think it
would be nice if the following were possible:&lt;/p&gt;
&lt;p&gt;users = Table[:users]&lt;/p&gt;
&lt;p&gt;users.where!(users[:id].eq(1))&lt;/p&gt;
&lt;p&gt;This would make it possible to use conditionals when generating
a query.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I realize I can achieve a similar effect today just by storing
the results of a where call into a new variable, but I think the
bang methods are more elegant.&lt;/p&gt;
&lt;p&gt;Thanks for your consideration.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>While playing around with Arel I was surprised to find that there were no setters to modify a relation.  In other words, &quot;bang&quot; methods (!) to update a relation using multiple calls.  I think it would be nice if the following were possible:

users = Table[:users]

users.where!(users[:id].eq(1))

This would make it possible to use conditionals when generating a query.  

I realize I can achieve a similar effect today just by storing the results of a where call into a new variable, but I think the bang methods are more elegant.

Thanks for your consideration.</body>
      <body-html>&lt;div&gt;&lt;p&gt;While playing around with Arel I was surprised to find that
there were no setters to modify a relation. In other words, &quot;bang&quot;
methods (!) to update a relation using multiple calls. I think it
would be nice if the following were possible:&lt;/p&gt;
&lt;p&gt;users = Table[:users]&lt;/p&gt;
&lt;p&gt;users.where!(users[:id].eq(1))&lt;/p&gt;
&lt;p&gt;This would make it possible to use conditionals when generating
a query.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I realize I can achieve a similar effect today just by storing
the results of a where call into a new variable, but I think the
bang methods are more elegant.&lt;/p&gt;
&lt;p&gt;Thanks for your consideration.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-05T21:10:14+00:00</created-at>
      <creator-id type="integer">606</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3867</number>
      <permalink>add-modify-in-place-setters-for-relations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>arel enhancement</tag>
      <title>add modify in place setters for relations</title>
      <updated-at type="datetime">2010-02-05T21:10:16+00:00</updated-at>
      <user-id type="integer">606</user-id>
      <version type="integer">1</version>
      <user-name>Steve Erickson</user-name>
      <creator-name>Steve Erickson</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3867</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Most of the core team believes that it's great to have immutability and is the recommended way. So I don't see ! methods making it to the core. However, it should be simple to write a plugin for it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Most of the core team believes that it's great to have
immutability and is the recommended way. So I don't see ! methods
making it to the core. However, it should be simple to write a
plugin for it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-06T12:07:05+00:00</created-at>
      <creator-id type="integer">606</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3867</number>
      <permalink>add-modify-in-place-setters-for-relations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>arel enhancement</tag>
      <title>add modify in place setters for relations</title>
      <updated-at type="datetime">2010-02-06T12:07:09+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Steve Erickson</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3867</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
