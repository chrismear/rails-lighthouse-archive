<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-08T02:39:30+01:00</created-at>
  <creator-id type="integer">19506</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">993</number>
  <permalink>having-column-named-transaction-in-a-model-leads-to-weird-behavior</permalink>
  <priority type="integer">435</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord</tag>
  <title>Having  column named 'transaction' in a model leads to weird behavior</title>
  <updated-at type="datetime">2008-12-10T23:13:49+00:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">4</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>Denis</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/993</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>While the doc warns not to use associations that are named the same as methods in AcitiveRecord::Base, I could not find any warning about column names.  But using a column named 'transaction' leads to strange behavior.

Create a model with a column named 'transaction', e.g.

@@@
class CreateItems &lt; ActiveRecord::Migration
  def self.up
    create_table :items do |t|
      t.string :transaction

      t.timestamps
    end
  end
end
@@@

@@@
class Item &lt; ActiveRecord::Base
end
@@@

Create instances of the class in console:
@@@
$ script/console
Loading development environment (Rails 2.1.1)
&gt;&gt; Item.create!
=&gt; #&lt;Item id: 1, transaction: nil, created_at: &quot;2008-09-08 01:30:14&quot;, updated_at: &quot;2008-09-08 01:30:14&quot;&gt;
&gt;&gt; Item.create!
=&gt; #&lt;Item id: nil, transaction: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; 
@@@

Note the second (and all subsequent) attempt to create and persist an instance creates the instance but does not save it to the database.

If the column is renamed to something else, this problem does not happen.</original-body>
  <latest-body>While the doc warns not to use associations that are named the same as methods in AcitiveRecord::Base, I could not find any warning about column names.  But using a column named 'transaction' leads to strange behavior.

Create a model with a column named 'transaction', e.g.

@@@
class CreateItems &lt; ActiveRecord::Migration
  def self.up
    create_table :items do |t|
      t.string :transaction

      t.timestamps
    end
  end
end
@@@

@@@
class Item &lt; ActiveRecord::Base
end
@@@

Create instances of the class in console:
@@@
$ script/console
Loading development environment (Rails 2.1.1)
&gt;&gt; Item.create!
=&gt; #&lt;Item id: 1, transaction: nil, created_at: &quot;2008-09-08 01:30:14&quot;, updated_at: &quot;2008-09-08 01:30:14&quot;&gt;
&gt;&gt; Item.create!
=&gt; #&lt;Item id: nil, transaction: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; 
@@@

Note the second (and all subsequent) attempt to create and persist an instance creates the instance but does not save it to the database.

If the column is renamed to something else, this problem does not happen.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;While the doc warns not to use associations that are named the
same as methods in AcitiveRecord::Base, I could not find any
warning about column names. But using a column named 'transaction'
leads to strange behavior.&lt;/p&gt;
&lt;p&gt;Create a model with a column named 'transaction', e.g.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class CreateItems &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :items do |t|
      t.string :transaction

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code&gt;
class Item &amp;lt; ActiveRecord::Base
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create instances of the class in console:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
$ script/console
Loading development environment (Rails 2.1.1)
&amp;gt;&amp;gt; Item.create!
=&amp;gt; #&amp;lt;Item id: 1, transaction: nil, created_at: &amp;quot;2008-09-08 01:30:14&amp;quot;, updated_at: &amp;quot;2008-09-08 01:30:14&amp;quot;&amp;gt;
&amp;gt;&amp;gt; Item.create!
=&amp;gt; #&amp;lt;Item id: nil, transaction: nil, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the second (and all subsequent) attempt to create and
persist an instance creates the instance but does not save it to
the database.&lt;/p&gt;
&lt;p&gt;If the column is renamed to something else, this problem does
not happen.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>While the doc warns not to use associations that are named the same as methods in AcitiveRecord::Base, I could not find any warning about column names.  But using a column named 'transaction' leads to strange behavior.

Create a model with a column named 'transaction', e.g.

@@@
class CreateItems &lt; ActiveRecord::Migration
  def self.up
    create_table :items do |t|
      t.string :transaction

      t.timestamps
    end
  end
end
@@@

@@@
class Item &lt; ActiveRecord::Base
end
@@@

Create instances of the class in console:
@@@
$ script/console
Loading development environment (Rails 2.1.1)
&gt;&gt; Item.create!
=&gt; #&lt;Item id: 1, transaction: nil, created_at: &quot;2008-09-08 01:30:14&quot;, updated_at: &quot;2008-09-08 01:30:14&quot;&gt;
&gt;&gt; Item.create!
=&gt; #&lt;Item id: nil, transaction: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; 
@@@

Note the second (and all subsequent) attempt to create and persist an instance creates the instance but does not save it to the database.

If the column is renamed to something else, this problem does not happen.</body>
      <body-html>&lt;div&gt;&lt;p&gt;While the doc warns not to use associations that are named the
same as methods in AcitiveRecord::Base, I could not find any
warning about column names. But using a column named 'transaction'
leads to strange behavior.&lt;/p&gt;
&lt;p&gt;Create a model with a column named 'transaction', e.g.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class CreateItems &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :items do |t|
      t.string :transaction

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code&gt;
class Item &amp;lt; ActiveRecord::Base
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create instances of the class in console:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
$ script/console
Loading development environment (Rails 2.1.1)
&amp;gt;&amp;gt; Item.create!
=&amp;gt; #&amp;lt;Item id: 1, transaction: nil, created_at: &amp;quot;2008-09-08 01:30:14&amp;quot;, updated_at: &amp;quot;2008-09-08 01:30:14&amp;quot;&amp;gt;
&amp;gt;&amp;gt; Item.create!
=&amp;gt; #&amp;lt;Item id: nil, transaction: nil, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the second (and all subsequent) attempt to create and
persist an instance creates the instance but does not save it to
the database.&lt;/p&gt;
&lt;p&gt;If the column is renamed to something else, this problem does
not happen.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-08T02:39:30+01:00</created-at>
      <creator-id type="integer">19506</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">993</number>
      <permalink>having-column-named-transaction-in-a-model-leads-to-weird-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Having  column named 'transaction' in a model leads to weird behavior</title>
      <updated-at type="datetime">2008-09-08T02:39:37+01:00</updated-at>
      <user-id type="integer">19506</user-id>
      <version type="integer">1</version>
      <user-name>Denis</user-name>
      <creator-name>Denis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/993</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Some kind soul in #rubyonrails pointed out that there is a transaction method, courtesy of ActiveRecord::Transactions.  Still, it would be nice if ActiveRecord could somehow warn us we're doing something stupid...</body>
      <body-html>&lt;div&gt;&lt;p&gt;Some kind soul in #rubyonrails pointed out that there is a
transaction method, courtesy of ActiveRecord::Transactions. Still,
it would be nice if ActiveRecord could somehow warn us we're doing
something stupid...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-08T02:55:04+01:00</created-at>
      <creator-id type="integer">19506</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">993</number>
      <permalink>having-column-named-transaction-in-a-model-leads-to-weird-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Having  column named 'transaction' in a model leads to weird behavior</title>
      <updated-at type="datetime">2008-09-08T02:55:09+01:00</updated-at>
      <user-id type="integer">19506</user-id>
      <version type="integer">2</version>
      <user-name>Denis</user-name>
      <creator-name>Denis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/993</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Associations and columns boil down to the same thing since both generate methods with the same name as the association/column.

ActiveRecord already has a a thing to check for 'dangerous' column names, not sure why it didn't do anything in this case.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Associations and columns boil down to the same thing since both
generate methods with the same name as the association/column.&lt;/p&gt;
&lt;p&gt;ActiveRecord already has a a thing to check for 'dangerous'
column names, not sure why it didn't do anything in this case.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-08T12:05:52+01:00</created-at>
      <creator-id type="integer">19506</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">993</number>
      <permalink>having-column-named-transaction-in-a-model-leads-to-weird-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Having  column named 'transaction' in a model leads to weird behavior</title>
      <updated-at type="datetime">2008-09-08T12:05:56+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Denis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/993</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Should be fixed by #1551 - overriding transaction shouldn't barf stuff anymore</body>
      <body-html>&lt;div&gt;&lt;p&gt;Should be fixed by &lt;a href=&quot;/projects/8994/tickets/1551&quot; title=&quot;Ticket #1551&quot;&gt;#1551&lt;/a&gt; - overriding transaction shouldn't barf
stuff anymore&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-10T23:13:45+00:00</created-at>
      <creator-id type="integer">19506</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">993</number>
      <permalink>having-column-named-transaction-in-a-model-leads-to-weird-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord</tag>
      <title>Having  column named 'transaction' in a model leads to weird behavior</title>
      <updated-at type="datetime">2008-12-10T23:13:49+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">4</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Denis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/993</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
