<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-08T02:23:17+00:00</created-at>
  <creator-id type="integer">71481</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3549</number>
  <permalink>activerecordbasecreate-has-a-performance-loss</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>ActiveRecord::Base#create has a performance loss</title>
  <updated-at type="datetime">2010-10-07T12:01:17+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">2</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>sserdyuk</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3549</url>
  <priority-name>Low</priority-name>
  <original-body>I was profiling my application and noticed that serialized attributes are encoded into yaml twice. The reason is that ActiveRecord::Base#create is calling #quoted_column_names without specifying quoted attributes that it already calculated, which causes the second call to #attributes_with_quotes, which encodes serialized attributes into yaml. I have noticed it because I have a large hash in that attribute, which takes 3+ seconds to #to_yaml.

This is in Rails 2.3.5. I haven't looked into the older versions.

My fix for it was to monkey patch AR:Base with:

@@@
  def create_without_timestamps
    if self.id.nil? &amp;&amp; connection.prefetch_primary_key?(self.class.table_name)
      self.id = connection.next_sequence_value(self.class.sequence_name)
    end

    quoted_attributes = attributes_with_quotes

    statement = if quoted_attributes.empty?
      connection.empty_insert_statement(self.class.table_name)
    else
      &quot;INSERT INTO #{self.class.quoted_table_name} &quot; +
      #&quot;(#{quoted_column_names.join(', ')}) &quot; + # original
      &quot;(#{quoted_column_names(quoted_attributes).join(', ')}) &quot; + # providing an existing set of attributes to avoid performance penalty
      &quot;VALUES(#{quoted_attributes.values.join(', ')})&quot;
    end

    self.id = connection.insert(statement, &quot;#{self.class.name} Create&quot;,
      self.class.primary_key, self.id, self.class.sequence_name)

    @new_record = false
    id
  end
@@@</original-body>
  <latest-body>I was profiling my application and noticed that serialized attributes are encoded into yaml twice. The reason is that ActiveRecord::Base#create is calling #quoted_column_names without specifying quoted attributes that it already calculated, which causes the second call to #attributes_with_quotes, which encodes serialized attributes into yaml. I have noticed it because I have a large hash in that attribute, which takes 3+ seconds to #to_yaml.

This is in Rails 2.3.5. I haven't looked into the older versions.

My fix for it was to monkey patch AR:Base with:

@@@
  def create_without_timestamps
    if self.id.nil? &amp;&amp; connection.prefetch_primary_key?(self.class.table_name)
      self.id = connection.next_sequence_value(self.class.sequence_name)
    end

    quoted_attributes = attributes_with_quotes

    statement = if quoted_attributes.empty?
      connection.empty_insert_statement(self.class.table_name)
    else
      &quot;INSERT INTO #{self.class.quoted_table_name} &quot; +
      #&quot;(#{quoted_column_names.join(', ')}) &quot; + # original
      &quot;(#{quoted_column_names(quoted_attributes).join(', ')}) &quot; + # providing an existing set of attributes to avoid performance penalty
      &quot;VALUES(#{quoted_attributes.values.join(', ')})&quot;
    end

    self.id = connection.insert(statement, &quot;#{self.class.name} Create&quot;,
      self.class.primary_key, self.id, self.class.sequence_name)

    @new_record = false
    id
  end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I was profiling my application and noticed that serialized
attributes are encoded into yaml twice. The reason is that
ActiveRecord::Base#create is calling #quoted_column_names without
specifying quoted attributes that it already calculated, which
causes the second call to #attributes_with_quotes, which encodes
serialized attributes into yaml. I have noticed it because I have a
large hash in that attribute, which takes 3+ seconds to
#to_yaml.&lt;/p&gt;
&lt;p&gt;This is in Rails 2.3.5. I haven't looked into the older
versions.&lt;/p&gt;
&lt;p&gt;My fix for it was to monkey patch AR:Base with:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def create_without_timestamps
    if self.id.nil? &amp;amp;&amp;amp; connection.prefetch_primary_key?(self.class.table_name)
      self.id = connection.next_sequence_value(self.class.sequence_name)
    end

    quoted_attributes = attributes_with_quotes

    statement = if quoted_attributes.empty?
      connection.empty_insert_statement(self.class.table_name)
    else
      &quot;INSERT INTO #{self.class.quoted_table_name} &quot; +
      #&quot;(#{quoted_column_names.join(', ')}) &quot; + # original
      &quot;(#{quoted_column_names(quoted_attributes).join(', ')}) &quot; + # providing an existing set of attributes to avoid performance penalty
      &quot;VALUES(#{quoted_attributes.values.join(', ')})&quot;
    end

    self.id = connection.insert(statement, &quot;#{self.class.name} Create&quot;,
      self.class.primary_key, self.id, self.class.sequence_name)

    @new_record = false
    id
  end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I was profiling my application and noticed that serialized attributes are encoded into yaml twice. The reason is that ActiveRecord::Base#create is calling #quoted_column_names without specifying quoted attributes that it already calculated, which causes the second call to #attributes_with_quotes, which encodes serialized attributes into yaml. I have noticed it because I have a large hash in that attribute, which takes 3+ seconds to #to_yaml.

This is in Rails 2.3.5. I haven't looked into the older versions.

My fix for it was to monkey patch AR:Base with:

@@@
  def create_without_timestamps
    if self.id.nil? &amp;&amp; connection.prefetch_primary_key?(self.class.table_name)
      self.id = connection.next_sequence_value(self.class.sequence_name)
    end

    quoted_attributes = attributes_with_quotes

    statement = if quoted_attributes.empty?
      connection.empty_insert_statement(self.class.table_name)
    else
      &quot;INSERT INTO #{self.class.quoted_table_name} &quot; +
      #&quot;(#{quoted_column_names.join(', ')}) &quot; + # original
      &quot;(#{quoted_column_names(quoted_attributes).join(', ')}) &quot; + # providing an existing set of attributes to avoid performance penalty
      &quot;VALUES(#{quoted_attributes.values.join(', ')})&quot;
    end

    self.id = connection.insert(statement, &quot;#{self.class.name} Create&quot;,
      self.class.primary_key, self.id, self.class.sequence_name)

    @new_record = false
    id
  end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I was profiling my application and noticed that serialized
attributes are encoded into yaml twice. The reason is that
ActiveRecord::Base#create is calling #quoted_column_names without
specifying quoted attributes that it already calculated, which
causes the second call to #attributes_with_quotes, which encodes
serialized attributes into yaml. I have noticed it because I have a
large hash in that attribute, which takes 3+ seconds to
#to_yaml.&lt;/p&gt;
&lt;p&gt;This is in Rails 2.3.5. I haven't looked into the older
versions.&lt;/p&gt;
&lt;p&gt;My fix for it was to monkey patch AR:Base with:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def create_without_timestamps
    if self.id.nil? &amp;amp;&amp;amp; connection.prefetch_primary_key?(self.class.table_name)
      self.id = connection.next_sequence_value(self.class.sequence_name)
    end

    quoted_attributes = attributes_with_quotes

    statement = if quoted_attributes.empty?
      connection.empty_insert_statement(self.class.table_name)
    else
      &quot;INSERT INTO #{self.class.quoted_table_name} &quot; +
      #&quot;(#{quoted_column_names.join(', ')}) &quot; + # original
      &quot;(#{quoted_column_names(quoted_attributes).join(', ')}) &quot; + # providing an existing set of attributes to avoid performance penalty
      &quot;VALUES(#{quoted_attributes.values.join(', ')})&quot;
    end

    self.id = connection.insert(statement, &quot;#{self.class.name} Create&quot;,
      self.class.primary_key, self.id, self.class.sequence_name)

    @new_record = false
    id
  end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-08T02:23:17+00:00</created-at>
      <creator-id type="integer">71481</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3549</number>
      <permalink>activerecordbasecreate-has-a-performance-loss</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Base#create has a performance loss</title>
      <updated-at type="datetime">2009-12-08T02:23:18+00:00</updated-at>
      <user-id type="integer">71481</user-id>
      <version type="integer">1</version>
      <user-name>sserdyuk</user-name>
      <creator-name>sserdyuk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3549</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-07T12:01:15+01:00</created-at>
      <creator-id type="integer">71481</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3549</number>
      <permalink>activerecordbasecreate-has-a-performance-loss</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Base#create has a performance loss</title>
      <updated-at type="datetime">2010-10-07T12:01:17+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>sserdyuk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3549</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
