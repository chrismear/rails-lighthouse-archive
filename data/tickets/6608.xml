<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">7697</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-23T03:39:09+00:00</created-at>
  <creator-id type="integer">142439</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6608</number>
  <permalink>generated-sql-for-has_many-through-relation-wrong-when-used-with-sti</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag nil="true"></tag>
  <title>Generated sql for has_many :through relation wrong when used with STI</title>
  <updated-at type="datetime">2011-03-24T11:59:57+00:00</updated-at>
  <user-id type="integer">7697</user-id>
  <version type="integer">4</version>
  <user-name>Andrew White</user-name>
  <creator-name>eli.b</creator-name>
  <assigned-user-name>Andrew White</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6608</url>
  <priority-name>Low</priority-name>
  <original-body>Consider these models:
---
&lt;code&gt;
`class First &lt; ActiveRecord::Base`

  `has_many :tags`

  `has_many :thirds, :through =&gt; :tags`

`end`

`class Second &lt; ActiveRecord::Base
end`

`class Third &lt; Second`

  `has_many :tags`

  `has_many :firsts, :through =&gt; :tags`

`end`

`class Tag &lt; ActiveRecord::Base`

  `belongs_to :first`

  `belongs_to :third`

`end`
&lt;/code&gt;
---

In other words, we have a has_many :through 'tag-style' relationship, but with one of the models (Third) being an STI inheriting from another (Second).
Say I wanted to do a join to see all instances of Third for some value of First:

@thirds = Third.joins(:firsts).where(&quot;first.id = 2&quot;)

This will work as expected; the generated sql (via to_sql) being:

SELECT `seconds`.* FROM `seconds`
INNER JOIN `tags` ON `seconds`.`id` = `tags`.`third_id`
INNER JOIN `firsts` ON `firsts`.`id` = `tags`.`first_id`
WHERE `seconds`.`type` = 'Third' AND (first.id = 1)

This doesn't work in the other direction:

@firsts = First.joins(:thirds).where(&quot;second.id = 2&quot;)

The SQL generated being:

SELECT `firsts`.* FROM `firsts` 
INNER JOIN `tags` ON `firsts`.`id` = `tags`.`first_id` 
INNER JOIN `seconds` ON `seconds`.`type` = 'Third'
WHERE (second.id = 2)

This results in tag duplication due to the fact that :seconds are not joined correctly with the tag table as in the first case above (see third line of sql statement in each case). All firsts with tags will show up in the resulting table, the WHERE clause being entirely ineffectual. 

If something different needs to be stated in the ActiveRecord::Query statements above, it is not documented...

This is all using Rails 3.0.5.</original-body>
  <latest-body>Consider these models:
---
&lt;code&gt;
`class First &lt; ActiveRecord::Base`

  `has_many :tags`

  `has_many :thirds, :through =&gt; :tags`

`end`

`class Second &lt; ActiveRecord::Base
end`

`class Third &lt; Second`

  `has_many :tags`

  `has_many :firsts, :through =&gt; :tags`

`end`

`class Tag &lt; ActiveRecord::Base`

  `belongs_to :first`

  `belongs_to :third`

`end`
&lt;/code&gt;
---

In other words, we have a has_many :through 'tag-style' relationship, but with one of the models (Third) being an STI inheriting from another (Second).
Say I wanted to do a join to see all instances of Third for some value of First:

@thirds = Third.joins(:firsts).where(&quot;first.id = 2&quot;)

This will work as expected; the generated sql (via to_sql) being:

SELECT `seconds`.* FROM `seconds`
INNER JOIN `tags` ON `seconds`.`id` = `tags`.`third_id`
INNER JOIN `firsts` ON `firsts`.`id` = `tags`.`first_id`
WHERE `seconds`.`type` = 'Third' AND (first.id = 1)

This doesn't work in the other direction:

@firsts = First.joins(:thirds).where(&quot;second.id = 2&quot;)

The SQL generated being:

SELECT `firsts`.* FROM `firsts` 
INNER JOIN `tags` ON `firsts`.`id` = `tags`.`first_id` 
INNER JOIN `seconds` ON `seconds`.`type` = 'Third'
WHERE (second.id = 2)

This results in tag duplication due to the fact that :seconds are not joined correctly with the tag table as in the first case above (see third line of sql statement in each case). All firsts with tags will show up in the resulting table, the WHERE clause being entirely ineffectual. 

If something different needs to be stated in the ActiveRecord::Query statements above, it is not documented...

This is all using Rails 3.0.5.</latest-body>
  <original-body-html>&lt;div&gt;&lt;h2&gt;Consider these models:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;br&gt;&lt;/code&gt;class First &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;p&gt;&lt;code&gt;has_many :tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;has_many :thirds, :through =&amp;gt; :tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class Second &amp;lt; ActiveRecord::Base end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class Third &amp;lt; Second&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;has_many :tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;has_many :firsts, :through =&amp;gt; :tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class Tag &amp;lt; ActiveRecord::Base&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;belongs_to :first&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;belongs_to :third&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In other words, we have a has_many :through 'tag-style'
relationship, but with one of the models (Third) being an STI
inheriting from another (Second).&lt;br&gt;
Say I wanted to do a join to see all instances of Third for some
value of First:&lt;/p&gt;
&lt;p&gt;@thirds = Third.joins(:firsts).where(&quot;first.id = 2&quot;)&lt;/p&gt;
&lt;p&gt;This will work as expected; the generated sql (via to_sql)
being:&lt;/p&gt;
&lt;p&gt;SELECT &lt;code&gt;seconds&lt;/code&gt;.* FROM &lt;code&gt;seconds&lt;/code&gt;&lt;br&gt;
INNER JOIN &lt;code&gt;tags&lt;/code&gt; ON
&lt;code&gt;seconds&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;tags&lt;/code&gt;.&lt;code&gt;third_id&lt;/code&gt;&lt;br&gt;
INNER JOIN &lt;code&gt;firsts&lt;/code&gt; ON
&lt;code&gt;firsts&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;tags&lt;/code&gt;.&lt;code&gt;first_id&lt;/code&gt;&lt;br&gt;
WHERE &lt;code&gt;seconds&lt;/code&gt;.&lt;code&gt;type&lt;/code&gt; = 'Third' AND
(first.id = 1)&lt;/p&gt;
&lt;p&gt;This doesn't work in the other direction:&lt;/p&gt;
&lt;p&gt;@firsts = First.joins(:thirds).where(&quot;second.id = 2&quot;)&lt;/p&gt;
&lt;p&gt;The SQL generated being:&lt;/p&gt;
&lt;p&gt;SELECT &lt;code&gt;firsts&lt;/code&gt;.* FROM &lt;code&gt;firsts&lt;/code&gt;&lt;br&gt;
INNER JOIN &lt;code&gt;tags&lt;/code&gt; ON &lt;code&gt;firsts&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt;
= &lt;code&gt;tags&lt;/code&gt;.&lt;code&gt;first_id&lt;/code&gt;&lt;br&gt;
INNER JOIN &lt;code&gt;seconds&lt;/code&gt; ON
&lt;code&gt;seconds&lt;/code&gt;.&lt;code&gt;type&lt;/code&gt; = 'Third'&lt;br&gt;
WHERE (second.id = 2)&lt;/p&gt;
&lt;p&gt;This results in tag duplication due to the fact that :seconds
are not joined correctly with the tag table as in the first case
above (see third line of sql statement in each case). All firsts
with tags will show up in the resulting table, the WHERE clause
being entirely ineffectual.&lt;/p&gt;
&lt;p&gt;If something different needs to be stated in the
ActiveRecord::Query statements above, it is not documented...&lt;/p&gt;
&lt;p&gt;This is all using Rails 3.0.5.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Consider these models:
---
&lt;code&gt;
`class First &lt; ActiveRecord::Base`

  `has_many :tags`

  `has_many :thirds, :through =&gt; :tags`

`end`

`class Second &lt; ActiveRecord::Base
end`

`class Third &lt; Second`

  `has_many :tags`

  `has_many :firsts, :through =&gt; :tags`

`end`

`class Tag &lt; ActiveRecord::Base`

  `belongs_to :first`

  `belongs_to :third`

`end`
&lt;/code&gt;
---

In other words, we have a has_many :through 'tag-style' relationship, but with one of the models (Third) being an STI inheriting from another (Second).
Say I wanted to do a join to see all instances of Third for some value of First:

@thirds = Third.joins(:firsts).where(&quot;first.id = 2&quot;)

This will work as expected; the generated sql (via to_sql) being:

SELECT `seconds`.* FROM `seconds`
INNER JOIN `tags` ON `seconds`.`id` = `tags`.`third_id`
INNER JOIN `firsts` ON `firsts`.`id` = `tags`.`first_id`
WHERE `seconds`.`type` = 'Third' AND (first.id = 1)

This doesn't work in the other direction:

@firsts = First.joins(:thirds).where(&quot;second.id = 2&quot;)

The SQL generated being:

SELECT `firsts`.* FROM `firsts` 
INNER JOIN `tags` ON `firsts`.`id` = `tags`.`first_id` 
INNER JOIN `seconds` ON `seconds`.`type` = 'Third'
WHERE (second.id = 2)

This results in tag duplication due to the fact that :seconds are not joined correctly with the tag table as in the first case above (see third line of sql statement in each case). All firsts with tags will show up in the resulting table, the WHERE clause being entirely ineffectual. 

If something different needs to be stated in the ActiveRecord::Query statements above, it is not documented...

This is all using Rails 3.0.5.</body>
      <body-html>&lt;div&gt;&lt;h2&gt;Consider these models:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;br&gt;&lt;/code&gt;class First &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;p&gt;&lt;code&gt;has_many :tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;has_many :thirds, :through =&amp;gt; :tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class Second &amp;lt; ActiveRecord::Base end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class Third &amp;lt; Second&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;has_many :tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;has_many :firsts, :through =&amp;gt; :tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class Tag &amp;lt; ActiveRecord::Base&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;belongs_to :first&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;belongs_to :third&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In other words, we have a has_many :through 'tag-style'
relationship, but with one of the models (Third) being an STI
inheriting from another (Second).&lt;br&gt;
Say I wanted to do a join to see all instances of Third for some
value of First:&lt;/p&gt;
&lt;p&gt;@thirds = Third.joins(:firsts).where(&quot;first.id = 2&quot;)&lt;/p&gt;
&lt;p&gt;This will work as expected; the generated sql (via to_sql)
being:&lt;/p&gt;
&lt;p&gt;SELECT &lt;code&gt;seconds&lt;/code&gt;.* FROM &lt;code&gt;seconds&lt;/code&gt;&lt;br&gt;
INNER JOIN &lt;code&gt;tags&lt;/code&gt; ON
&lt;code&gt;seconds&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;tags&lt;/code&gt;.&lt;code&gt;third_id&lt;/code&gt;&lt;br&gt;
INNER JOIN &lt;code&gt;firsts&lt;/code&gt; ON
&lt;code&gt;firsts&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;tags&lt;/code&gt;.&lt;code&gt;first_id&lt;/code&gt;&lt;br&gt;
WHERE &lt;code&gt;seconds&lt;/code&gt;.&lt;code&gt;type&lt;/code&gt; = 'Third' AND
(first.id = 1)&lt;/p&gt;
&lt;p&gt;This doesn't work in the other direction:&lt;/p&gt;
&lt;p&gt;@firsts = First.joins(:thirds).where(&quot;second.id = 2&quot;)&lt;/p&gt;
&lt;p&gt;The SQL generated being:&lt;/p&gt;
&lt;p&gt;SELECT &lt;code&gt;firsts&lt;/code&gt;.* FROM &lt;code&gt;firsts&lt;/code&gt;&lt;br&gt;
INNER JOIN &lt;code&gt;tags&lt;/code&gt; ON &lt;code&gt;firsts&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt;
= &lt;code&gt;tags&lt;/code&gt;.&lt;code&gt;first_id&lt;/code&gt;&lt;br&gt;
INNER JOIN &lt;code&gt;seconds&lt;/code&gt; ON
&lt;code&gt;seconds&lt;/code&gt;.&lt;code&gt;type&lt;/code&gt; = 'Third'&lt;br&gt;
WHERE (second.id = 2)&lt;/p&gt;
&lt;p&gt;This results in tag duplication due to the fact that :seconds
are not joined correctly with the tag table as in the first case
above (see third line of sql statement in each case). All firsts
with tags will show up in the resulting table, the WHERE clause
being entirely ineffectual.&lt;/p&gt;
&lt;p&gt;If something different needs to be stated in the
ActiveRecord::Query statements above, it is not documented...&lt;/p&gt;
&lt;p&gt;This is all using Rails 3.0.5.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-23T03:39:09+00:00</created-at>
      <creator-id type="integer">142439</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6608</number>
      <permalink>generated-sql-for-has_many-through-relation-wrong-when-used-with-sti</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Generated sql for has_many :through relation wrong when used with STI</title>
      <updated-at type="datetime">2011-03-23T05:14:23+00:00</updated-at>
      <user-id type="integer">142439</user-id>
      <version type="integer">1</version>
      <user-name>eli.b</user-name>
      <creator-name>eli.b</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6608</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">7697</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yep, I've confirmed this - if you define the association in the base class it works as expected though.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yep, I've confirmed this - if you define the association in the
base class it works as expected though.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-23T18:09:04+00:00</created-at>
      <creator-id type="integer">142439</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6608</number>
      <permalink>generated-sql-for-has_many-through-relation-wrong-when-used-with-sti</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Generated sql for has_many :through relation wrong when used with STI</title>
      <updated-at type="datetime">2011-03-23T18:09:15+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>eli.b</creator-name>
      <assigned-user-name>Andrew White</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6608</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">7697</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey-
Thanks Andrew!
'if you define the association in the base class it works as expected though.'
What do you mean exactly? If I just put the class definition of Third inside second.rb? Sorry, I'm a little new to the not-so-simple associations game.
-e</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey-&lt;br&gt;
Thanks Andrew!&lt;br&gt;
'if you define the association in the base class it works as
expected though.' What do you mean exactly? If I just put the class
definition of Third inside second.rb? Sorry, I'm a little new to
the not-so-simple associations game.&lt;br&gt;
-e&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-23T18:17:24+00:00</created-at>
      <creator-id type="integer">142439</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6608</number>
      <permalink>generated-sql-for-has_many-through-relation-wrong-when-used-with-sti</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Generated sql for has_many :through relation wrong when used with STI</title>
      <updated-at type="datetime">2011-03-23T18:17:45+00:00</updated-at>
      <user-id type="integer">142439</user-id>
      <version type="integer">3</version>
      <user-name>eli.b</user-name>
      <creator-name>eli.b</creator-name>
      <assigned-user-name>Andrew White</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6608</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">7697</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Using your models it would be like this:

@@@ ruby
class First &lt; ActiveRecord::Base
  has_many :tags
  has_many :seconds, :through =&gt; :tags
end

class Second &lt; ActiveRecord::Base
  has_many :tags
  has_many :firsts, :through =&gt; :tags
end

class Third &lt; Second; end

class Tag &lt; ActiveRecord::Base
  belongs_to :first
  belongs_to :seconds
end
@@@

Setting it up this way will return the appropriate models when use First.joins(:seconds).where(:seconds =&gt; { :id =&gt; 1 }). Using more descriptive model names will make it clearer:

@@@ ruby
class Vehicle &lt; ActiveRecord::Base
  has_many :taggings
  has_many :tags, :through =&gt; :taggings
end
class Car &lt; Vehicle; end
class Van &lt; Vehicle; end
class Motorbike &lt; Vehicle; end

class Tag &lt; ActiveRecord::Base
  has_many :taggings
  has_many :vehicles, :through =&gt; :taggings
end

class Tagging &lt; ActiveRecord::Base
  belongs_to :vehicle
  belongs_to :tag
end

&gt;&gt; Tag.joins(:vehicles).where(&quot;vehicles.id = 1&quot;).to_sql
=&gt; &quot;SELECT tags.* FROM tags INNER JOIN taggings ON tags.id = taggings.tag_id INNER JOIN vehicles ON taggings.vehicle_id = vehicles.id WHERE vehicles.id = 1&quot;
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Using your models it would be like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class First &amp;lt; ActiveRecord::Base
  has_many :tags
  has_many :seconds, :through =&amp;gt; :tags
end

class Second &amp;lt; ActiveRecord::Base
  has_many :tags
  has_many :firsts, :through =&amp;gt; :tags
end

class Third &amp;lt; Second; end

class Tag &amp;lt; ActiveRecord::Base
  belongs_to :first
  belongs_to :seconds
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Setting it up this way will return the appropriate models when
use First.joins(:seconds).where(:seconds =&amp;gt; { :id =&amp;gt; 1 }).
Using more descriptive model names will make it clearer:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Vehicle &amp;lt; ActiveRecord::Base
  has_many :taggings
  has_many :tags, :through =&amp;gt; :taggings
end
class Car &amp;lt; Vehicle; end
class Van &amp;lt; Vehicle; end
class Motorbike &amp;lt; Vehicle; end

class Tag &amp;lt; ActiveRecord::Base
  has_many :taggings
  has_many :vehicles, :through =&amp;gt; :taggings
end

class Tagging &amp;lt; ActiveRecord::Base
  belongs_to :vehicle
  belongs_to :tag
end

&amp;gt;&amp;gt; Tag.joins(:vehicles).where(&quot;vehicles.id = 1&quot;).to_sql
=&amp;gt; &quot;SELECT tags.* FROM tags INNER JOIN taggings ON tags.id = taggings.tag_id INNER JOIN vehicles ON taggings.vehicle_id = vehicles.id WHERE vehicles.id = 1&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-24T11:59:33+00:00</created-at>
      <creator-id type="integer">142439</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6608</number>
      <permalink>generated-sql-for-has_many-through-relation-wrong-when-used-with-sti</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Generated sql for has_many :through relation wrong when used with STI</title>
      <updated-at type="datetime">2011-03-24T11:59:57+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">4</version>
      <user-name>Andrew White</user-name>
      <creator-name>eli.b</creator-name>
      <assigned-user-name>Andrew White</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6608</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
