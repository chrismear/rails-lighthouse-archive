<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-26T08:45:31+01:00</created-at>
  <creator-id type="integer">8964</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">576</number>
  <permalink>allow-explicit-association-preloading-load-vs-include</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>2.1 activerecord eager_loading enhancement patch tested</tag>
  <title>allow explicit association preloading (:load vs :include)</title>
  <updated-at type="datetime">2010-07-26T08:45:31+01:00</updated-at>
  <user-id type="integer">8964</user-id>
  <version type="integer">7</version>
  <user-name>cainlevy</user-name>
  <creator-name>cainlevy</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/576</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The attached patch adds a :load option for ActiveRecord.

I've found it useful to be able to specify associations for preloading through a :load option that is independent of the :include option. There are two benefits that I can see:

1) When any :include association is referenced in condition/grouping/order SQL, then all :include associations are retrieved via SQL joins. Adding a separate :load option allows a developer to optimize which associations are joined and which are preloaded.

2) Associations that are preloaded do not affect the result set, whereas associations that are loaded through SQL joins do.

In my case, I'm using the :load option to set up named_scope's that do nothing more than optimize a result set for a particular context, e.g. Posts.for_home_page.by_recency.</original-body>
  <latest-body>The attached patch adds a :load option for ActiveRecord.

I've found it useful to be able to specify associations for preloading through a :load option that is independent of the :include option. There are two benefits that I can see:

1) When any :include association is referenced in condition/grouping/order SQL, then all :include associations are retrieved via SQL joins. Adding a separate :load option allows a developer to optimize which associations are joined and which are preloaded.

2) Associations that are preloaded do not affect the result set, whereas associations that are loaded through SQL joins do.

In my case, I'm using the :load option to set up named_scope's that do nothing more than optimize a result set for a particular context, e.g. Posts.for_home_page.by_recency.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
The attached patch adds a :load option for ActiveRecord.
&lt;/p&gt;&lt;p&gt;
I've found it useful to be able to specify associations for preloading through a :load option that is independent of the :include option. There are two benefits that I can see:
&lt;/p&gt;&lt;p&gt;
1) When any :include association is referenced in condition/grouping/order SQL, then all :include associations are retrieved via SQL joins. Adding a separate :load option allows a developer to optimize which associations are joined and which are preloaded.
&lt;/p&gt;&lt;p&gt;
2) Associations that are preloaded do not affect the result set, whereas associations that are loaded through SQL joins do.
&lt;/p&gt;&lt;p&gt;
In my case, I'm using the :load option to set up named_scope's that do nothing more than optimize a result set for a particular context, e.g. Posts.for_home_page.by_recency.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The attached patch adds a :load option for ActiveRecord.

I've found it useful to be able to specify associations for preloading through a :load option that is independent of the :include option. There are two benefits that I can see:

1) When any :include association is referenced in condition/grouping/order SQL, then all :include associations are retrieved via SQL joins. Adding a separate :load option allows a developer to optimize which associations are joined and which are preloaded.

2) Associations that are preloaded do not affect the result set, whereas associations that are loaded through SQL joins do.

In my case, I'm using the :load option to set up named_scope's that do nothing more than optimize a result set for a particular context, e.g. Posts.for_home_page.by_recency.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The attached patch adds a :load option for ActiveRecord.
&lt;/p&gt;&lt;p&gt;
I've found it useful to be able to specify associations for preloading through a :load option that is independent of the :include option. There are two benefits that I can see:
&lt;/p&gt;&lt;p&gt;
1) When any :include association is referenced in condition/grouping/order SQL, then all :include associations are retrieved via SQL joins. Adding a separate :load option allows a developer to optimize which associations are joined and which are preloaded.
&lt;/p&gt;&lt;p&gt;
2) Associations that are preloaded do not affect the result set, whereas associations that are loaded through SQL joins do.
&lt;/p&gt;&lt;p&gt;
In my case, I'm using the :load option to set up named_scope's that do nothing more than optimize a result set for a particular context, e.g. Posts.for_home_page.by_recency.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-08T19:49:08+01:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">576</number>
      <permalink>allow-explicit-association-preloading-load-vs-include</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord eager_loading enhancement patch tested</tag>
      <title>allow explicit association preloading (:load vs :include)</title>
      <updated-at type="datetime">2008-07-08T19:49:08+01:00</updated-at>
      <user-id type="integer">8964</user-id>
      <version type="integer">1</version>
      <user-name>cainlevy</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/576</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>After some discussion in #rails-contrib, I came to see this new option as completing a triad:

* :include names associations that should be eager loaded but may also be needed for sql references (e.g. in conditions, orders, etc.)

* :joins names associations that are needed for sql references but should not be loaded

* :load names associations that should be loaded but are not needed for sql references

API bloat is something to be taken seriously. In this case I feel like the new option rounds out the use cases, and is not bloat.

Thoughts?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
After some discussion in #rails-contrib, I came to see this new option as completing a triad:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
:include names associations that should be eager loaded but may also be needed for sql references (e.g. in conditions, orders, etc.)
&lt;/li&gt;&lt;li&gt;
:joins names associations that are needed for sql references but should not be loaded
&lt;/li&gt;&lt;li&gt;
:load names associations that should be loaded but are not needed for sql references
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
API bloat is something to be taken seriously. In this case I feel like the new option rounds out the use cases, and is not bloat.
&lt;/p&gt;&lt;p&gt;
Thoughts?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-09T00:09:22+01:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">576</number>
      <permalink>allow-explicit-association-preloading-load-vs-include</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord eager_loading enhancement patch tested</tag>
      <title>allow explicit association preloading (:load vs :include)</title>
      <updated-at type="datetime">2008-07-09T00:09:22+01:00</updated-at>
      <user-id type="integer">8964</user-id>
      <version type="integer">2</version>
      <user-name>cainlevy</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/576</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I express approval about the :load option.

cainlevy suggested capabilities against optimization, moreover, I point out that a problem of 'join' eager loading has_many association with group option.

For example, Ticket has_many :tags, and I would like to find tickets which has tags, 'foo' and 'bar', also I prefer eager loading because search result will show tags for each ticket. The code can be like that:
@@@ ruby
# 
Ticket.find(:all,
  :include =&gt; :tags,
  :joins =&gt; &quot;INNER JOIN tags AS t ON t.ticket_id = tickets.id&quot;,
  :conditions =&gt; [&quot;t.name IN (:tags)&quot;, {:tags =&gt; ['foo', 'bar']}],
  :group =&gt; &quot;t.ticket_id HAVING COUNT(t.ticket_id) &gt;= 2&quot;)
@@@

This call of find() internally uses find_with_associations (join eager loading) instead of preload_associations.
Any of the resulted ticket included only one tag (because ticket is grouped by own id), but they may have two or more tags.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I express approval about the :load option.&lt;/p&gt;

&lt;p&gt;cainlevy suggested capabilities against optimization, moreover, I point out that a problem of 'join' eager loading has_many association with group option.&lt;/p&gt;

&lt;p&gt;For example, Ticket has_many :tags, and I would like to find tickets which has tags, 'foo' and 'bar', also I prefer eager loading because search result will show tags for each ticket. The code can be like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
#
Ticket.find(:all,
  :include =&amp;gt; :tags,
  :joins =&amp;gt; &amp;quot;INNER JOIN tags AS t ON t.ticket_id = tickets.id&amp;quot;,
  :conditions =&amp;gt; [&amp;quot;t.name IN (:tags)&amp;quot;, {:tags =&amp;gt; ['foo', 'bar']}],
  :group =&amp;gt; &amp;quot;t.ticket_id HAVING COUNT(t.ticket_id) &amp;gt;= 2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This call of find() internally uses find_with_associations (join eager loading) instead of preload_associations.
Any of the resulted ticket included only one tag (because ticket is grouped by own id), but they may have two or more tags.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-17T13:36:56+01:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">576</number>
      <permalink>allow-explicit-association-preloading-load-vs-include</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord eager_loading enhancement patch tested</tag>
      <title>allow explicit association preloading (:load vs :include)</title>
      <updated-at type="datetime">2008-08-17T13:36:56+01:00</updated-at>
      <user-id type="integer">29204</user-id>
      <version type="integer">3</version>
      <user-name>hiroshi</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/576</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I also found a quick option (a hack?) for explicit association preloading.

@@@ ruby
tickets = Ticket.find(:all,
# :include =&gt; :tags,
  :joins =&gt; &quot;INNER JOIN tags AS t ON t.ticket_id = tickets.id&quot;,
  :conditions =&gt; [&quot;t.name IN (:tags)&quot;, {:tags =&gt; ['foo', 'bar']}],
  :group =&gt; &quot;t.ticket_id HAVING COUNT(t.ticket_id) &gt;= 2&quot;)
Ticket.send(:preload_associations, tickets, :tags)
@@@
It worked (for me).</body>
      <body-html>&lt;div&gt;&lt;p&gt;I also found a quick option (a hack?) for explicit association preloading.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
tickets = Ticket.find(:all,
# :include =&amp;gt; :tags,
  :joins =&amp;gt; &amp;quot;INNER JOIN tags AS t ON t.ticket_id = tickets.id&amp;quot;,
  :conditions =&amp;gt; [&amp;quot;t.name IN (:tags)&amp;quot;, {:tags =&amp;gt; ['foo', 'bar']}],
  :group =&amp;gt; &amp;quot;t.ticket_id HAVING COUNT(t.ticket_id) &amp;gt;= 2&amp;quot;)
Ticket.send(:preload_associations, tickets, :tags)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It worked (for me).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-17T13:49:15+01:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">576</number>
      <permalink>allow-explicit-association-preloading-load-vs-include</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord eager_loading enhancement patch tested</tag>
      <title>allow explicit association preloading (:load vs :include)</title>
      <updated-at type="datetime">2008-08-17T13:49:15+01:00</updated-at>
      <user-id type="integer">29204</user-id>
      <version type="integer">4</version>
      <user-name>hiroshi</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/576</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Please discuss in the core mailing list. Meanwhile, you could write a simple plugin with hiroshi's suggestion.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please discuss in the core mailing list. Meanwhile, you could write a simple plugin with hiroshi's suggestion.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-18T16:30:58+01:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">576</number>
      <permalink>allow-explicit-association-preloading-load-vs-include</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord eager_loading enhancement patch tested</tag>
      <title>allow explicit association preloading (:load vs :include)</title>
      <updated-at type="datetime">2008-08-18T16:30:58+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">5</version>
      <user-name>Pratik</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/576</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-18T16:31:06+01:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">576</number>
      <permalink>allow-explicit-association-preloading-load-vs-include</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.1 activerecord eager_loading enhancement patch tested</tag>
      <title>allow explicit association preloading (:load vs :include)</title>
      <updated-at type="datetime">2008-08-18T16:31:06+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">6</version>
      <user-name>Pratik</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/576</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I use the following patch in my own project:

@@@ ruby
class ActiveRecord::Base
  class &lt;&lt; self
    private
    def find_every_with_explicit_preloading(options)
      returning find_every_without_explicit_preloading(options) do |records|
        to_load = merge_includes(scope(:find, :load), options[:load])
        preload_associations(records, to_load) if to_load
      end
    end
    alias_method_chain :find_every, :explicit_preloading

    VALID_FIND_OPTIONS &lt;&lt; :load
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I use the following patch in my own project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class ActiveRecord::Base
  class &amp;lt;&amp;lt; self
    private
    def find_every_with_explicit_preloading(options)
      returning find_every_without_explicit_preloading(options) do |records|
        to_load = merge_includes(scope(:find, :load), options[:load])
        preload_associations(records, to_load) if to_load
      end
    end
    alias_method_chain :find_every, :explicit_preloading

    VALID_FIND_OPTIONS &amp;lt;&amp;lt; :load
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-18T22:38:37+01:00</created-at>
      <creator-id type="integer">8964</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">576</number>
      <permalink>allow-explicit-association-preloading-load-vs-include</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.1 activerecord eager_loading enhancement patch tested</tag>
      <title>allow explicit association preloading (:load vs :include)</title>
      <updated-at type="datetime">2008-08-18T22:38:37+01:00</updated-at>
      <user-id type="integer">8964</user-id>
      <version type="integer">7</version>
      <user-name>cainlevy</user-name>
      <creator-name>cainlevy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/576</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>66ea9e600527095cf224eed9436d377d6fa610ad</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-07-08T19:49:08+01:00</created-at>
      <filename>explicit_preloading.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">31466</id>
      <size type="integer">6851</size>
      <uploader-id type="integer">8964</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/31466/explicit_preloading.diff</url>
    </attachment>
  </attachments>
</ticket>
