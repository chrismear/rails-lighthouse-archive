<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-19T22:16:32+01:00</created-at>
  <creator-id type="integer">15613</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">453</number>
  <permalink>has_many-delete-suffers-premature-disassociation</permalink>
  <priority type="integer">17493</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord bug has_many tested</tag>
  <title>has_many delete suffers premature disassociation</title>
  <updated-at type="datetime">2009-02-09T20:02:31+00:00</updated-at>
  <user-id type="integer">15613</user-id>
  <version type="integer">11</version>
  <user-name>Jacob Burkhart</user-name>
  <creator-name>Jacob Burkhart</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
  <priority-name nil="true"></priority-name>
  <original-body>It seems this has been the behavior of has_many delete since as far back in rails as I could test... but It was surprising to me when I encountered it.

The attached test case (which you can invoke directly assuming you have an active record gem installed) demonstrates the behavior.

The problem stems from having a validation which checks that a particular entity has at least one item on it's has_many association.

In my example, it's that driver has_many cars and a driver must have at least one car.

calling:

some_driver.cars.delete(some_car)

causes the association to be broken, without a chance for this validation to run

This seems unfair to both car and driver validations.  Either delete should call validations... Or, the disassociation should not happen until 'save' is called on either the car or driver.

Do you agree?

I'd like to hear confirmation that this is indeed a bug before I begin working on a patch...</original-body>
  <latest-body>It seems this has been the behavior of has_many delete since as far back in rails as I could test... but It was surprising to me when I encountered it.

The attached test case (which you can invoke directly assuming you have an active record gem installed) demonstrates the behavior.

The problem stems from having a validation which checks that a particular entity has at least one item on it's has_many association.

In my example, it's that driver has_many cars and a driver must have at least one car.

calling:

some_driver.cars.delete(some_car)

causes the association to be broken, without a chance for this validation to run

This seems unfair to both car and driver validations.  Either delete should call validations... Or, the disassociation should not happen until 'save' is called on either the car or driver.

Do you agree?

I'd like to hear confirmation that this is indeed a bug before I begin working on a patch...</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
It seems this has been the behavior of has_many delete since as far back in rails as I could test... but It was surprising to me when I encountered it.
&lt;/p&gt;&lt;p&gt;
The attached test case (which you can invoke directly assuming you have an active record gem installed) demonstrates the behavior.
&lt;/p&gt;&lt;p&gt;
The problem stems from having a validation which checks that a particular entity has at least one item on it's has_many association.
&lt;/p&gt;&lt;p&gt;
In my example, it's that driver has_many cars and a driver must have at least one car.
&lt;/p&gt;&lt;p&gt;
calling:
&lt;/p&gt;&lt;p&gt;
some_driver.cars.delete(some_car)
&lt;/p&gt;&lt;p&gt;
causes the association to be broken, without a chance for this validation to run
&lt;/p&gt;&lt;p&gt;
This seems unfair to both car and driver validations.  Either delete should call validations... Or, the disassociation should not happen until 'save' is called on either the car or driver.
&lt;/p&gt;&lt;p&gt;
Do you agree?
&lt;/p&gt;&lt;p&gt;
I'd like to hear confirmation that this is indeed a bug before I begin working on a patch...
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It seems this has been the behavior of has_many delete since as far back in rails as I could test... but It was surprising to me when I encountered it.

The attached test case (which you can invoke directly assuming you have an active record gem installed) demonstrates the behavior.

The problem stems from having a validation which checks that a particular entity has at least one item on it's has_many association.

In my example, it's that driver has_many cars and a driver must have at least one car.

calling:

some_driver.cars.delete(some_car)

causes the association to be broken, without a chance for this validation to run

This seems unfair to both car and driver validations.  Either delete should call validations... Or, the disassociation should not happen until 'save' is called on either the car or driver.

Do you agree?

I'd like to hear confirmation that this is indeed a bug before I begin working on a patch...</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It seems this has been the behavior of has_many delete since as far back in rails as I could test... but It was surprising to me when I encountered it.
&lt;/p&gt;&lt;p&gt;
The attached test case (which you can invoke directly assuming you have an active record gem installed) demonstrates the behavior.
&lt;/p&gt;&lt;p&gt;
The problem stems from having a validation which checks that a particular entity has at least one item on it's has_many association.
&lt;/p&gt;&lt;p&gt;
In my example, it's that driver has_many cars and a driver must have at least one car.
&lt;/p&gt;&lt;p&gt;
calling:
&lt;/p&gt;&lt;p&gt;
some_driver.cars.delete(some_car)
&lt;/p&gt;&lt;p&gt;
causes the association to be broken, without a chance for this validation to run
&lt;/p&gt;&lt;p&gt;
This seems unfair to both car and driver validations.  Either delete should call validations... Or, the disassociation should not happen until 'save' is called on either the car or driver.
&lt;/p&gt;&lt;p&gt;
Do you agree?
&lt;/p&gt;&lt;p&gt;
I'd like to hear confirmation that this is indeed a bug before I begin working on a patch...
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-19T22:16:32+01:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2008-06-19T22:16:32+01:00</updated-at>
      <user-id type="integer">15613</user-id>
      <version type="integer">1</version>
      <user-name>Jacob Burkhart</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I also ran into this and it sucks like hell. It is a clear violation of the validation system in Rails.

I see two possible solutions:
- Delete should only remove the element from the collection and wait to do the database stuff until the parent's save method is called. I agree that a direct deletion might be useful sometimes (but put a warning in the documentation about skipping validations then!), so here is another possibility:

- Do it like collection.&lt;&lt; and collection.build. When using &lt;&lt; the attached object is saved instantly whereas build saves the object when the parents save method is called. Such a thing should exists for deletion, too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I also ran into this and it sucks like hell. It is a clear violation of the validation system in Rails.
&lt;/p&gt;&lt;p&gt;
I see two possible solutions:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
Delete should only remove the element from the collection and wait to do the database stuff until the parent's save method is called. I agree that a direct deletion might be useful sometimes (but put a warning in the documentation about skipping validations then!), so here is another possibility:
&lt;/li&gt;&lt;li&gt;
Do it like collection.&amp;lt;&amp;lt; and collection.build. When using &amp;lt;&amp;lt; the attached object is saved instantly whereas build saves the object when the parents save method is called. Such a thing should exists for deletion, too.
&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-07T23:38:25+01:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord has_many tested</tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2008-07-07T23:38:25+01:00</updated-at>
      <user-id type="integer">24104</user-id>
      <version type="integer">2</version>
      <user-name>Christian Weyer</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm hitting this exact problem. Does anyone have a workaround for this? Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I'm hitting this exact problem. Does anyone have a workaround for this? Thanks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-01T22:53:25+01:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord has_many tested
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many tested</tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2008-08-01T22:53:25+01:00</updated-at>
      <user-id type="integer">8441</user-id>
      <version type="integer">3</version>
      <user-name>Rob Dupuis</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The workaround is to delete from the collection and then re-assign to the association:

for example, instead of:

group.users.delete(bob)


you have to do something like:

g_users = group.users.to_a
g_users.delete(bob)
group.users = g_users
group.save!
bob.destroy</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The workaround is to delete from the collection and then re-assign to the association:
&lt;/p&gt;&lt;p&gt;
for example, instead of:
&lt;/p&gt;&lt;p&gt;
group.users.delete(bob)
&lt;/p&gt;&lt;p&gt;
you have to do something like:
&lt;/p&gt;&lt;p&gt;
g_users = group.users.to_a
&lt;/p&gt;&lt;p&gt;
g_users.delete(bob)
&lt;/p&gt;&lt;p&gt;
group.users = g_users
&lt;/p&gt;&lt;p&gt;
group.save!
&lt;/p&gt;&lt;p&gt;
bob.destroy
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-02T03:37:57+01:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many tested</tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2008-08-02T03:37:57+01:00</updated-at>
      <user-id type="integer">15613</user-id>
      <version type="integer">4</version>
      <user-name>Jacob Burkhart</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't think this works (at least for me). As soon as I do the assignment (group.users = g_users) the sql is instantly executed to update the has_many collection. Therefore the update has been committed before I can validate the new collection.

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I don't think this works (at least for me). As soon as I do the assignment (group.users = g_users) the sql is instantly executed to update the has_many collection. Therefore the update has been committed before I can validate the new collection.
&lt;/p&gt;&lt;p&gt;
Thanks
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-02T13:31:20+01:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many tested</tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2008-08-02T13:31:20+01:00</updated-at>
      <user-id type="integer">8441</user-id>
      <version type="integer">5</version>
      <user-name>Rob Dupuis</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This seems to work for me. It is based on Railscast #75 http://railscasts.com/episodes/75, where Projects have many Tasks. I also give each task a position to allow for reordering (not shown).

project.rb

has_many :tasks, :dependent =&gt; :destroy

#validation statements here...

after_update :save_tasks

def tasks=(tasks_attributes)
	tasks_attributes[:new_tasks] ||= []
	position = 0
	
	#For existing tasks
	tasks.each do |task|
		attributes = tasks_attributes[task.id_s]
		unless attributes.nil?
			task.attributes = attributes
			unless task.should_delete
				task.position = position
				position += 1
			end
		end
	end
	
	#For new tasks
	tasks_attributes[:new_tasks].each do |task_attributes|
		task_attributes[:position] = position
		tasks.build(task_attributes)
		position += 1
	end
end

def save_tasks
 	tasks.each do |task|
		if (task.should_delete != true)
    			task.save(false)
		else
			tasks.delete(task)
		end
	end
end

def id_s(element = nil)
	id = self.id || self.object_id
	if element.nil?
  		&quot;#{self.class.to_s.underscore}_#{id}&quot;
    	else
      		&quot;#{self.class.to_s.underscore}_#{id}_#{element}&quot;
    	end
end

protected
	
def validate
	tasks.each_with_index do |task, position|
		errors.add_to_base(&quot;Task #{position + 1} Name cannot be blank.&quot;) if (task.name.blank?)
	end
end

------------------

task.rb

belongs_to :project

validates_presence_of :name

attr_accessor :should_delete
	
def should_delete
	@should_delete || false
end
	
def should_delete=(bool)
	if (bool == false)
		@should_delete = false
	else
		@should_delete = true
	end
end
	
def id_s(element = nil)
	id = self.id || self.object_id
	if element.nil?
  		&quot;#{self.class.to_s.underscore}_#{id}&quot;
    	else
      		&quot;#{self.class.to_s.underscore}_#{id}_#{element}&quot;
    	end
end

------------------

new.rhtml

&lt;% form_tag({:controller =&gt; Project, :action =&gt; &quot;new&quot;}) do %&gt;
	&lt;h1&gt;New Project&lt;/h1&gt;
	
	&lt;%= error_messages_for :project %&gt;

	&lt;div class=&quot;form_div&quot;&gt;
	  &lt;%= label :project, :name, &quot;Name:&quot; %&gt; &lt;%= text_field :project, :name %&gt;
	&lt;/div&gt;
	
	&lt;div class=&quot;form_div&quot;&gt;
		&lt;div id=&quot;tasks&quot;&gt;
		 	&lt;%= render :partial =&gt; 'task', :collection =&gt; @project.tasks %&gt;
		&lt;/div&gt;
		&lt;%= link_to_remote(&quot;Add Task&quot;, :update =&gt; :tasks, :position =&gt; :bottom, :url =&gt; {:controller =&gt; Project, :action =&gt; &quot;add_task&quot;}) %&gt;
	&lt;/div&gt;

  &lt;div class=&quot;submit_div&quot;&gt;
		&lt;%= submit_tag &quot;Create&quot;, :name =&gt; 'submit_action' %&gt;
		&lt;%= submit_tag &quot;Cancel&quot;, :name =&gt; 'submit_action' %&gt;
	&lt;/div&gt;
&lt;% end %&gt;

------------------

_task.rhtml

&lt;div id=&quot;&lt;%= task.id_s %&gt;&quot; class=&quot;task&quot;&gt;
	&lt;% unless task.new_record? %&gt;
		&lt;%= label_tag task.id_s(&quot;name&quot;), &quot;Task:&quot; %&gt;
		&lt;%= text_field_tag &quot;project[tasks][#{task.id_s}][name]&quot;, task.name, :id =&gt; task.id_s(&quot;name&quot;) %&gt;
		&lt;%= check_box_tag &quot;project[tasks][#{task.id_s}][should_delete]&quot;, 1, task.should_delete, :id =&gt; task.id_s(&quot;should_delete&quot;) %&gt;
		&lt;%= label_tag task.id_s(&quot;should_delete&quot;), &quot;Delete&quot; %&gt;
	&lt;% else %&gt;
		&lt;%= label_tag task.id_s(&quot;name&quot;), &quot;Task:&quot; %&gt;
		&lt;%= text_field_tag &quot;project[tasks][new_tasks][][name]&quot;, task.name, :id =&gt; task.id_s(&quot;name&quot;) %&gt;
		&lt;%= link_to_function &quot;remove&quot;, &quot;removeTask('#{task.id_s}')&quot; %&gt;
	&lt;% end %&gt;
&lt;/div&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This seems to work for me. It is based on Railscast &lt;a href=&quot;/projects/8994/tickets/75&quot; title=&quot;Ticket #75&quot;&gt;#75&lt;/a&gt; &lt;a href=&quot;http://railscasts.com/episodes/75&quot;&gt;http://railscasts.com/episodes/75&lt;/a&gt;, where Projects have many Tasks. I also give each task a position to allow for reordering (not shown).
&lt;/p&gt;&lt;p&gt;
project.rb
&lt;/p&gt;&lt;p&gt;
has_many :tasks, :dependent =&gt; :destroy
&lt;/p&gt;&lt;p&gt;
#validation statements here...
&lt;/p&gt;&lt;p&gt;
after_update :save_tasks
&lt;/p&gt;&lt;p&gt;
def tasks=(tasks_attributes)
&lt;/p&gt;&lt;p&gt;
tasks_attributes[:new_tasks] ||= []
&lt;/p&gt;&lt;p&gt;
position = 0
&lt;/p&gt;&lt;p&gt;
#For existing tasks
&lt;/p&gt;&lt;p&gt;
tasks.each do |task|
&lt;/p&gt;&lt;p&gt;
attributes = tasks_attributes[task.id_s]
&lt;/p&gt;&lt;p&gt;
unless attributes.nil?
&lt;/p&gt;&lt;p&gt;
task.attributes = attributes
&lt;/p&gt;&lt;p&gt;
unless task.should_delete
&lt;/p&gt;&lt;p&gt;
task.position = position
&lt;/p&gt;&lt;p&gt;
position += 1
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
#For new tasks
&lt;/p&gt;&lt;p&gt;
tasks_attributes[:new_tasks].each do |task_attributes|
&lt;/p&gt;&lt;p&gt;
task_attributes[:position] = position
&lt;/p&gt;&lt;p&gt;
tasks.build(task_attributes)
&lt;/p&gt;&lt;p&gt;
position += 1
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
def save_tasks
&lt;/p&gt;&lt;p&gt;
tasks.each do |task|
&lt;/p&gt;&lt;p&gt;
if (task.should_delete != true)
&lt;/p&gt;&lt;p&gt;
task.save(false)
&lt;/p&gt;&lt;p&gt;
else
&lt;/p&gt;&lt;p&gt;
tasks.delete(task)
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
def id_s(element = nil)
&lt;/p&gt;&lt;p&gt;
id = self.id || self.object_id
&lt;/p&gt;&lt;p&gt;
if element.nil?
&lt;/p&gt;&lt;p&gt;
&quot;#{self.class.to_s.underscore}_#{id}&quot;
&lt;/p&gt;&lt;p&gt;
else
&lt;/p&gt;&lt;p&gt;
&quot;#{self.class.to_s.underscore}_#{id}_#{element}&quot;
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
protected
&lt;/p&gt;&lt;p&gt;
def validate
&lt;/p&gt;&lt;p&gt;
tasks.each_with_index do |task, position|
&lt;/p&gt;&lt;p&gt;
errors.add_to_base(&quot;Task #{position + 1} Name cannot be blank.&quot;) if (task.name.blank?)
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
task.rb
&lt;/p&gt;&lt;p&gt;
belongs_to :project
&lt;/p&gt;&lt;p&gt;
validates_presence_of :name
&lt;/p&gt;&lt;p&gt;
attr_accessor :should_delete
&lt;/p&gt;&lt;p&gt;
def should_delete
&lt;/p&gt;&lt;p&gt;
@should_delete || false
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
def should_delete=(bool)
&lt;/p&gt;&lt;p&gt;
if (bool == false)
&lt;/p&gt;&lt;p&gt;
@should_delete = false
&lt;/p&gt;&lt;p&gt;
else
&lt;/p&gt;&lt;p&gt;
@should_delete = true
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
def id_s(element = nil)
&lt;/p&gt;&lt;p&gt;
id = self.id || self.object_id
&lt;/p&gt;&lt;p&gt;
if element.nil?
&lt;/p&gt;&lt;p&gt;
&quot;#{self.class.to_s.underscore}_#{id}&quot;
&lt;/p&gt;&lt;p&gt;
else
&lt;/p&gt;&lt;p&gt;
&quot;#{self.class.to_s.underscore}_#{id}_#{element}&quot;
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
new.rhtml
&lt;/p&gt;&lt;p&gt;
&amp;lt;% form_tag({:controller =&gt; Project, :action =&gt; &quot;new&quot;}) do %&gt;
&lt;/p&gt;&lt;p&gt;
&lt;h1&gt;New Project&lt;/h1&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= error_messages_for :project %&gt;
&lt;/p&gt;&lt;p&gt;
&lt;div class=&quot;form_div&quot;&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= label :project, :name, &quot;Name:&quot; %&gt; &amp;lt;%= text_field :project, :name %&gt;
&lt;/p&gt;&lt;p&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;
&lt;div class=&quot;form_div&quot;&gt;
&lt;/p&gt;&lt;p&gt;
&lt;div&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= render :partial =&gt; 'task', :collection =&gt; @project.tasks %&gt;
&lt;/p&gt;&lt;p&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= link_to_remote(&quot;Add Task&quot;, :update =&gt; :tasks, :position =&gt; :bottom, :url =&gt; {:controller =&gt; Project, :action =&gt; &quot;add_task&quot;}) %&gt;
&lt;/p&gt;&lt;p&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;
&lt;div class=&quot;submit_div&quot;&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= submit_tag &quot;Create&quot;, :name =&gt; 'submit_action' %&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= submit_tag &quot;Cancel&quot;, :name =&gt; 'submit_action' %&gt;
&lt;/p&gt;&lt;p&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;% end %&gt;
&lt;/p&gt;&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
_task.rhtml
&lt;/p&gt;&lt;p&gt;
&lt;div class=&quot;task&quot;&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;% unless task.new_record? %&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= label_tag task.id_s(&quot;name&quot;), &quot;Task:&quot; %&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= text_field_tag &quot;project[tasks][#{task.id_s}][name]&quot;, task.name, :id =&gt; task.id_s(&quot;name&quot;) %&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= check_box_tag &quot;project[tasks][#{task.id_s}][should_delete]&quot;, 1, task.should_delete, :id =&gt; task.id_s(&quot;should_delete&quot;) %&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= label_tag task.id_s(&quot;should_delete&quot;), &quot;Delete&quot; %&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;% else %&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= label_tag task.id_s(&quot;name&quot;), &quot;Task:&quot; %&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= text_field_tag &quot;project[tasks][new_tasks][][name]&quot;, task.name, :id =&gt; task.id_s(&quot;name&quot;) %&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;%= link_to_function &quot;remove&quot;, &quot;removeTask('#{task.id_s}')&quot; %&gt;
&lt;/p&gt;&lt;p&gt;
&amp;lt;% end %&gt;
&lt;/p&gt;&lt;p&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-04T00:28:40+01:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many tested</tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2008-08-04T00:28:40+01:00</updated-at>
      <user-id type="integer">27940</user-id>
      <version type="integer">6</version>
      <user-name>Zef RosnBrick</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This seems to work for me. It is based on Railscast 75 http://railscasts.com/episodes/75, where Projects have many Tasks. I also give each task a position to allow for reordering (not shown).

project.rb

@@@ HTML

has_many :tasks, :dependent =&gt; :destroy

#validation statements here...

after_update :save_tasks

def tasks=(tasks_attributes)
	tasks_attributes[:new_tasks] ||= []
	position = 0
	
	#For existing tasks
	tasks.each do |task|
		attributes = tasks_attributes[task.id_s]
		unless attributes.nil?
			task.attributes = attributes
			unless task.should_delete
				task.position = position
				position += 1
			end
		end
	end
	
	#For new tasks
	tasks_attributes[:new_tasks].each do |task_attributes|
		task_attributes[:position] = position
		tasks.build(task_attributes)
		position += 1
	end
end

def save_tasks
 	tasks.each do |task|
		if (task.should_delete != true)
    			task.save(false)
		else
			tasks.delete(task)
		end
	end
end

def id_s(element = nil)
	id = self.id || self.object_id
	if element.nil?
  		&quot;#{self.class.to_s.underscore}_#{id}&quot;
    	else
      		&quot;#{self.class.to_s.underscore}_#{id}_#{element}&quot;
    	end
end

protected
	
def validate
	tasks.each_with_index do |task, position|
		errors.add_to_base(&quot;Task #{position + 1} Name cannot be blank.&quot;) if (task.name.blank?)
	end
end

@@@

------------------

task.rb

@@@ HTML

belongs_to :project

validates_presence_of :name

attr_accessor :should_delete
	
def should_delete
	@should_delete || false
end
	
def should_delete=(bool)
	if (bool == false)
		@should_delete = false
	else
		@should_delete = true
	end
end
	
def id_s(element = nil)
	id = self.id || self.object_id
	if element.nil?
  		&quot;#{self.class.to_s.underscore}_#{id}&quot;
    	else
      		&quot;#{self.class.to_s.underscore}_#{id}_#{element}&quot;
    	end
end

@@@

------------------

new.rhtml

@@@ HTML

&lt;% form_tag({:controller =&gt; Project, :action =&gt; &quot;new&quot;}) do %&gt;
	&lt;h1&gt;New Project&lt;/h1&gt;
	
	&lt;%= error_messages_for :project %&gt;

	&lt;div class=&quot;form_div&quot;&gt;
	  &lt;%= label :project, :name, &quot;Name:&quot; %&gt; &lt;%= text_field :project, :name %&gt;
	&lt;/div&gt;
	
	&lt;div class=&quot;form_div&quot;&gt;
		&lt;div id=&quot;tasks&quot;&gt;
		 	&lt;%= render :partial =&gt; 'task', :collection =&gt; @project.tasks %&gt;
		&lt;/div&gt;
		&lt;%= link_to_remote(&quot;Add Task&quot;, :update =&gt; :tasks, :position =&gt; :bottom, :url =&gt; {:controller =&gt; Project, :action =&gt; &quot;add_task&quot;}) %&gt;
	&lt;/div&gt;

  &lt;div class=&quot;submit_div&quot;&gt;
		&lt;%= submit_tag &quot;Create&quot;, :name =&gt; 'submit_action' %&gt;
		&lt;%= submit_tag &quot;Cancel&quot;, :name =&gt; 'submit_action' %&gt;
	&lt;/div&gt;
&lt;% end %&gt;

@@@

------------------

_task.rhtml

@@@ HTML

&lt;div id=&quot;&lt;%= task.id_s %&gt;&quot; class=&quot;task&quot;&gt;
	&lt;% unless task.new_record? %&gt;
		&lt;%= label_tag task.id_s(&quot;name&quot;), &quot;Task:&quot; %&gt;
		&lt;%= text_field_tag &quot;project[tasks][#{task.id_s}][name]&quot;, task.name, :id =&gt; task.id_s(&quot;name&quot;) %&gt;
		&lt;%= check_box_tag &quot;project[tasks][#{task.id_s}][should_delete]&quot;, 1, task.should_delete, :id =&gt; task.id_s(&quot;should_delete&quot;) %&gt;
		&lt;%= label_tag task.id_s(&quot;should_delete&quot;), &quot;Delete&quot; %&gt;
	&lt;% else %&gt;
		&lt;%= label_tag task.id_s(&quot;name&quot;), &quot;Task:&quot; %&gt;
		&lt;%= text_field_tag &quot;project[tasks][new_tasks][][name]&quot;, task.name, :id =&gt; task.id_s(&quot;name&quot;) %&gt;
		&lt;%= link_to_function &quot;remove&quot;, &quot;removeTask('#{task.id_s}')&quot; %&gt;
	&lt;% end %&gt;
&lt;/div&gt;

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This seems to work for me. It is based on Railscast 75 &lt;a href=&quot;http://railscasts.com/episodes/75&quot;&gt;http://railscasts.com/episodes/75&lt;/a&gt;, where Projects have many Tasks. I also give each task a position to allow for reordering (not shown).
&lt;/p&gt;&lt;p&gt;
project.rb
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;
has_many :tasks, :dependent =&amp;gt; :destroy

#validation statements here...

after_update :save_tasks

def tasks=(tasks_attributes)
	tasks_attributes[:new_tasks] ||= []
	position = 0
	
	#For existing tasks
	tasks.each do |task|
		attributes = tasks_attributes[task.id_s]
		unless attributes.nil?
			task.attributes = attributes
			unless task.should_delete
				task.position = position
				position += 1
			end
		end
	end
	
	#For new tasks
	tasks_attributes[:new_tasks].each do |task_attributes|
		task_attributes[:position] = position
		tasks.build(task_attributes)
		position += 1
	end
end

def save_tasks
 	tasks.each do |task|
		if (task.should_delete != true)
    			task.save(false)
		else
			tasks.delete(task)
		end
	end
end

def id_s(element = nil)
	id = self.id || self.object_id
	if element.nil?
  		&amp;quot;#{self.class.to_s.underscore}_#{id}&amp;quot;
    	else
      		&amp;quot;#{self.class.to_s.underscore}_#{id}_#{element}&amp;quot;
    	end
end

protected
	
def validate
	tasks.each_with_index do |task, position|
		errors.add_to_base(&amp;quot;Task #{position + 1} Name cannot be blank.&amp;quot;) if (task.name.blank?)
	end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
task.rb
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;
belongs_to :project

validates_presence_of :name

attr_accessor :should_delete
	
def should_delete
	@should_delete || false
end
	
def should_delete=(bool)
	if (bool == false)
		@should_delete = false
	else
		@should_delete = true
	end
end
	
def id_s(element = nil)
	id = self.id || self.object_id
	if element.nil?
  		&amp;quot;#{self.class.to_s.underscore}_#{id}&amp;quot;
    	else
      		&amp;quot;#{self.class.to_s.underscore}_#{id}_#{element}&amp;quot;
    	end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
new.rhtml
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;
&amp;lt;% form_tag({:controller =&amp;gt; Project, :action =&amp;gt; &amp;quot;new&amp;quot;}) do %&amp;gt;
	&amp;lt;h1&amp;gt;New Project&amp;lt;/h1&amp;gt;
	
	&amp;lt;%= error_messages_for :project %&amp;gt;

	&amp;lt;div class=&amp;quot;form_div&amp;quot;&amp;gt;
	  &amp;lt;%= label :project, :name, &amp;quot;Name:&amp;quot; %&amp;gt; &amp;lt;%= text_field :project, :name %&amp;gt;
	&amp;lt;/div&amp;gt;
	
	&amp;lt;div class=&amp;quot;form_div&amp;quot;&amp;gt;
		&amp;lt;div id=&amp;quot;tasks&amp;quot;&amp;gt;
		 	&amp;lt;%= render :partial =&amp;gt; 'task', :collection =&amp;gt; @project.tasks %&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;%= link_to_remote(&amp;quot;Add Task&amp;quot;, :update =&amp;gt; :tasks, :position =&amp;gt; :bottom, :url =&amp;gt; {:controller =&amp;gt; Project, :action =&amp;gt; &amp;quot;add_task&amp;quot;}) %&amp;gt;
	&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;submit_div&amp;quot;&amp;gt;
		&amp;lt;%= submit_tag &amp;quot;Create&amp;quot;, :name =&amp;gt; 'submit_action' %&amp;gt;
		&amp;lt;%= submit_tag &amp;quot;Cancel&amp;quot;, :name =&amp;gt; 'submit_action' %&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
------------------
&lt;/p&gt;&lt;p&gt;
_task.rhtml
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;
&amp;lt;div id=&amp;quot;&amp;lt;%= task.id_s %&amp;gt;&amp;quot; class=&amp;quot;task&amp;quot;&amp;gt;
	&amp;lt;% unless task.new_record? %&amp;gt;
		&amp;lt;%= label_tag task.id_s(&amp;quot;name&amp;quot;), &amp;quot;Task:&amp;quot; %&amp;gt;
		&amp;lt;%= text_field_tag &amp;quot;project[tasks][#{task.id_s}][name]&amp;quot;, task.name, :id =&amp;gt; task.id_s(&amp;quot;name&amp;quot;) %&amp;gt;
		&amp;lt;%= check_box_tag &amp;quot;project[tasks][#{task.id_s}][should_delete]&amp;quot;, 1, task.should_delete, :id =&amp;gt; task.id_s(&amp;quot;should_delete&amp;quot;) %&amp;gt;
		&amp;lt;%= label_tag task.id_s(&amp;quot;should_delete&amp;quot;), &amp;quot;Delete&amp;quot; %&amp;gt;
	&amp;lt;% else %&amp;gt;
		&amp;lt;%= label_tag task.id_s(&amp;quot;name&amp;quot;), &amp;quot;Task:&amp;quot; %&amp;gt;
		&amp;lt;%= text_field_tag &amp;quot;project[tasks][new_tasks][][name]&amp;quot;, task.name, :id =&amp;gt; task.id_s(&amp;quot;name&amp;quot;) %&amp;gt;
		&amp;lt;%= link_to_function &amp;quot;remove&amp;quot;, &amp;quot;removeTask('#{task.id_s}')&amp;quot; %&amp;gt;
	&amp;lt;% end %&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-04T00:31:54+01:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many tested</tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2008-08-04T00:31:54+01:00</updated-at>
      <user-id type="integer">27940</user-id>
      <version type="integer">7</version>
      <user-name>Zef RosnBrick</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here is a better solution to allow for sorting of tasks using scriptaculous drag and drop.

project_controller.rb

@@@ HTML
class ProjectController &lt; ApplicationController
	def index
		redirect_to :action =&gt; 'list'
	end
	
	def new
		submit_action = params['submit_action']
		
		if (submit_action == nil)
		  @project = Project.new
		  @project.tasks.build
		elsif (submit_action == &quot;Create&quot;)
			@project = Project.new(params[:project])
		  if @project.save
		    flash[:notice] = &quot;Successfully created project and tasks.&quot;
		    redirect_to :action =&gt; 'list'
		  end
		elsif (submit_action == &quot;Cancel&quot;)
			redirect_to :action =&gt; 'list'
		end
	end

	def edit
		submit_action = params['submit_action']
		
		begin
	  	@project = Project.find(params[:id], :include =&gt; :tasks)
		rescue ActiveRecord::RecordNotFound
			flash[:notice] = &quot;Invalid Project.&quot;
			redirect_to :action =&gt; 'list'
		else
			if (submit_action == nil)
			elsif (submit_action == &quot;Save&quot;)
			  if @project.update_attributes(params[:project])
			    flash[:notice] = &quot;Successfully updated project and tasks.&quot;
			    redirect_to :action =&gt; 'list'
			  end
			elsif (submit_action == &quot;Cancel&quot;)
				redirect_to :action =&gt; 'list'
			end
		end
	end
	
	def delete
		submit_action = params['submit_action']
		
		begin
	  	@project = Project.find(params[:id])
		rescue ActiveRecord::RecordNotFound
			flash[:notice] = &quot;Invalid Project.&quot;
			redirect_to :action =&gt; 'list'
		else
			if (submit_action == nil)
			elsif (submit_action == &quot;Delete&quot;)
				@project.destroy
			  flash[:notice] = &quot;Successfully deleted project and tasks.&quot;
		    redirect_to :action =&gt; 'list'
			elsif (submit_action == &quot;Cancel&quot;)
				redirect_to :action =&gt; 'list'
			end
		end
	end
		
	def list
		@projects = Project.find(:all, :include =&gt; :tasks)
	end
	
	def add_task
		render :partial =&gt; &quot;task&quot;, :object =&gt; Task.new()
	end
end
@@@

application_helper.rb

@@@ HTML
# Methods added to this helper will be available to all templates in the application.
module ApplicationHelper
	def label_tag(for_tag, name)
		&quot;&lt;label for='#{for_tag}'&gt;#{name}&lt;/label&gt;&quot;
	end
end
@@@

project.rb

@@@ HTML
class Project &lt; ActiveRecord::Base
  has_many :tasks, :dependent =&gt; :destroy

  validates_presence_of :name
	validates_uniqueness_of :name

  after_update :save_tasks

	def tasks=(tasks_attributes)
		existing_tasks = {}
		new_tasks = []
		
		tasks_attributes.each_with_index do |task_attributes, position|
			task_attributes[:position] = position
			if (task_attributes.has_key?(:id))
				id = task_attributes.delete(:id)
				existing_tasks[id] = task_attributes
			else
				new_tasks.push(task_attributes)
			end
		end
		
		#For existing tasks
		tasks.each do |task|
			attributes = existing_tasks[task.id.to_s]
			unless attributes.nil?
				task.attributes = attributes
			end
		end
		
		#For new tasks
		new_tasks.each do |task_attributes|
			tasks.build(task_attributes)
		end
	end
	  
  def save_tasks
    tasks.each do |task|
			logger.info(&quot;#{task.id}: #{task.should_delete}&quot;)
			if (task.should_delete != true)
      	task.save(false)
			else
				tasks.delete(task)
			end
    end
  end
	
	def id_s(element = nil)
		id = self.id || self.object_id
    if element.nil?
  	  &quot;#{self.class.to_s.underscore}_#{id}&quot;
    else
      &quot;#{self.class.to_s.underscore}_#{id}_#{element}&quot;
    end
  end

	protected
	
	def validate
		tasks.each_with_index do |task, position|
			errors.add_to_base(&quot;Task #{position + 1} Name cannot be blank.&quot;) if (task.name.blank?)
		end
	end
end
@@@

task.rb

@@@ HTML
class Task &lt; ActiveRecord::Base
  belongs_to :project

  validates_presence_of :name

	attr_accessor :should_delete
	
	def &lt;=&gt; other_task
		position &lt;=&gt; other_task.position
	end
	
	def should_delete
		@should_delete || false
	end
	
	def should_delete=(bool)
		if (bool == false)
			@should_delete = false
		else
			@should_delete = true
		end
	end
	
	def id_s(element = nil)
		id = self.id || self.object_id
    if element.nil?
  	  &quot;#{self.class.to_s.underscore}_#{id}&quot;
    else
      &quot;#{self.class.to_s.underscore}_#{id}_#{element}&quot;
    end
  end
end
@@@

new.rhtml

@@@ HTML
&lt;% form_tag({:controller =&gt; Project, :action =&gt; &quot;new&quot;}) do %&gt;
	&lt;h1&gt;New Project&lt;/h1&gt;
	
	&lt;%= error_messages_for :project %&gt;

	&lt;div class=&quot;form_div&quot;&gt;
	  &lt;%= label :project, :name, &quot;Name:&quot; %&gt; &lt;%= text_field :project, :name %&gt;
	&lt;/div&gt;
	
	&lt;div class=&quot;form_div&quot;&gt;
		&lt;div id=&quot;tasks&quot;&gt;
		 	&lt;%= render :partial =&gt; 'task', :collection =&gt; @project.tasks.sort %&gt;
		&lt;/div&gt;
		&lt;%= javascript_tag(&quot;createTaskSortable()&quot;) %&gt;
		&lt;%= link_to_remote(&quot;Add Task&quot;, :update =&gt; :tasks, :position =&gt; :bottom, :url =&gt; {:controller =&gt; Project, :action =&gt; &quot;add_task&quot;}, :complete =&gt; &quot;createTaskSortable()&quot;) %&gt;
	&lt;/div&gt;

  &lt;div class=&quot;submit_div&quot;&gt;
		&lt;%= submit_tag &quot;Create&quot;, :name =&gt; 'submit_action' %&gt;
		&lt;%= submit_tag &quot;Cancel&quot;, :name =&gt; 'submit_action' %&gt;
	&lt;/div&gt;
&lt;% end %&gt;
@@@

edit.rhtml

@@@ HTML
&lt;% form_tag({:controller =&gt; Project, :action =&gt; &quot;edit&quot;, :id =&gt; @project.id}) do %&gt;
	&lt;h1&gt;Edit Project&lt;/h1&gt;
	
	&lt;%= error_messages_for :project %&gt;

	&lt;div class=&quot;form_div&quot;&gt;
	  &lt;%= label :project, :name, &quot;Name:&quot; %&gt; &lt;%= text_field :project, :name %&gt;
	&lt;/div&gt;
	
	&lt;div class=&quot;form_div&quot;&gt;
		&lt;div id=&quot;tasks&quot;&gt;
		 	&lt;%= render :partial =&gt; 'task', :collection =&gt; @project.tasks.sort %&gt;
		&lt;/div&gt;
		&lt;%= javascript_tag(&quot;createTaskSortable()&quot;) %&gt;
		&lt;%= link_to_remote(&quot;Add Task&quot;, :update =&gt; :tasks, :position =&gt; :bottom, :url =&gt; {:controller =&gt; Project, :action =&gt; &quot;add_task&quot;}, :complete =&gt; &quot;createTaskSortable()&quot;) %&gt;
	&lt;/div&gt;

  &lt;div class=&quot;submit_div&quot;&gt;
		&lt;%= submit_tag &quot;Save&quot;, :name =&gt; 'submit_action' %&gt;
		&lt;%= submit_tag &quot;Cancel&quot;, :name =&gt; 'submit_action' %&gt;
	&lt;/div&gt;
&lt;% end %&gt;
@@@

_task.rhtml

@@@ HTML
&lt;div id=&quot;&lt;%= task.id_s %&gt;&quot; class=&quot;task&quot;&gt;
	&lt;%= image_tag(&quot;drag.png&quot;, :class =&gt; &quot;drag_handle&quot;, :id =&gt; task.id_s(&quot;drag_handle&quot;), :style =&gt; &quot;cursor: move;&quot;) %&gt;
	&lt;% unless task.new_record? %&gt;
		&lt;%= hidden_field_tag &quot;project[tasks][][id]&quot;, task.id, :id =&gt; task.id_s(&quot;id&quot;) %&gt;
	
		&lt;%= label_tag task.id_s(&quot;name&quot;), &quot;Task:&quot; %&gt;	&lt;%= text_field_tag &quot;project[tasks][][name]&quot;, task.name, :id =&gt; task.id_s(&quot;name&quot;) %&gt;
		
		&lt;%= check_box_tag &quot;project[tasks][][should_delete]&quot;, 1, task.should_delete, :id =&gt; task.id_s(&quot;should_delete&quot;) %&gt; &lt;%= label_tag task.id_s(&quot;should_delete&quot;), &quot;Delete&quot; %&gt;
	&lt;% else %&gt;
		&lt;%= label_tag task.id_s(&quot;name&quot;), &quot;Task:&quot; %&gt; &lt;%= text_field_tag &quot;project[tasks][][name]&quot;, task.name, :id =&gt; task.id_s(&quot;name&quot;) %&gt;
		
		&lt;%= link_to_function &quot;remove&quot;, &quot;removeTask('#{task.id_s}')&quot; %&gt;
	&lt;% end %&gt;
&lt;/div&gt;
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Here is a better solution to allow for sorting of tasks using scriptaculous drag and drop.
&lt;/p&gt;&lt;p&gt;
project_controller.rb
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;class ProjectController &amp;lt; ApplicationController
	def index
		redirect_to :action =&amp;gt; 'list'
	end
	
	def new
		submit_action = params['submit_action']
		
		if (submit_action == nil)
		  @project = Project.new
		  @project.tasks.build
		elsif (submit_action == &amp;quot;Create&amp;quot;)
			@project = Project.new(params[:project])
		  if @project.save
		    flash[:notice] = &amp;quot;Successfully created project and tasks.&amp;quot;
		    redirect_to :action =&amp;gt; 'list'
		  end
		elsif (submit_action == &amp;quot;Cancel&amp;quot;)
			redirect_to :action =&amp;gt; 'list'
		end
	end

	def edit
		submit_action = params['submit_action']
		
		begin
	  	@project = Project.find(params[:id], :include =&amp;gt; :tasks)
		rescue ActiveRecord::RecordNotFound
			flash[:notice] = &amp;quot;Invalid Project.&amp;quot;
			redirect_to :action =&amp;gt; 'list'
		else
			if (submit_action == nil)
			elsif (submit_action == &amp;quot;Save&amp;quot;)
			  if @project.update_attributes(params[:project])
			    flash[:notice] = &amp;quot;Successfully updated project and tasks.&amp;quot;
			    redirect_to :action =&amp;gt; 'list'
			  end
			elsif (submit_action == &amp;quot;Cancel&amp;quot;)
				redirect_to :action =&amp;gt; 'list'
			end
		end
	end
	
	def delete
		submit_action = params['submit_action']
		
		begin
	  	@project = Project.find(params[:id])
		rescue ActiveRecord::RecordNotFound
			flash[:notice] = &amp;quot;Invalid Project.&amp;quot;
			redirect_to :action =&amp;gt; 'list'
		else
			if (submit_action == nil)
			elsif (submit_action == &amp;quot;Delete&amp;quot;)
				@project.destroy
			  flash[:notice] = &amp;quot;Successfully deleted project and tasks.&amp;quot;
		    redirect_to :action =&amp;gt; 'list'
			elsif (submit_action == &amp;quot;Cancel&amp;quot;)
				redirect_to :action =&amp;gt; 'list'
			end
		end
	end
		
	def list
		@projects = Project.find(:all, :include =&amp;gt; :tasks)
	end
	
	def add_task
		render :partial =&amp;gt; &amp;quot;task&amp;quot;, :object =&amp;gt; Task.new()
	end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
application_helper.rb
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;# Methods added to this helper will be available to all templates in the application.
module ApplicationHelper
	def label_tag(for_tag, name)
		&amp;quot;&amp;lt;label for='#{for_tag}'&amp;gt;#{name}&amp;lt;/label&amp;gt;&amp;quot;
	end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
project.rb
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;class Project &amp;lt; ActiveRecord::Base
  has_many :tasks, :dependent =&amp;gt; :destroy

  validates_presence_of :name
	validates_uniqueness_of :name

  after_update :save_tasks

	def tasks=(tasks_attributes)
		existing_tasks = {}
		new_tasks = []
		
		tasks_attributes.each_with_index do |task_attributes, position|
			task_attributes[:position] = position
			if (task_attributes.has_key?(:id))
				id = task_attributes.delete(:id)
				existing_tasks[id] = task_attributes
			else
				new_tasks.push(task_attributes)
			end
		end
		
		#For existing tasks
		tasks.each do |task|
			attributes = existing_tasks[task.id.to_s]
			unless attributes.nil?
				task.attributes = attributes
			end
		end
		
		#For new tasks
		new_tasks.each do |task_attributes|
			tasks.build(task_attributes)
		end
	end
	  
  def save_tasks
    tasks.each do |task|
			logger.info(&amp;quot;#{task.id}: #{task.should_delete}&amp;quot;)
			if (task.should_delete != true)
      	task.save(false)
			else
				tasks.delete(task)
			end
    end
  end
	
	def id_s(element = nil)
		id = self.id || self.object_id
    if element.nil?
  	  &amp;quot;#{self.class.to_s.underscore}_#{id}&amp;quot;
    else
      &amp;quot;#{self.class.to_s.underscore}_#{id}_#{element}&amp;quot;
    end
  end

	protected
	
	def validate
		tasks.each_with_index do |task, position|
			errors.add_to_base(&amp;quot;Task #{position + 1} Name cannot be blank.&amp;quot;) if (task.name.blank?)
		end
	end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
task.rb
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;class Task &amp;lt; ActiveRecord::Base
  belongs_to :project

  validates_presence_of :name

	attr_accessor :should_delete
	
	def &amp;lt;=&amp;gt; other_task
		position &amp;lt;=&amp;gt; other_task.position
	end
	
	def should_delete
		@should_delete || false
	end
	
	def should_delete=(bool)
		if (bool == false)
			@should_delete = false
		else
			@should_delete = true
		end
	end
	
	def id_s(element = nil)
		id = self.id || self.object_id
    if element.nil?
  	  &amp;quot;#{self.class.to_s.underscore}_#{id}&amp;quot;
    else
      &amp;quot;#{self.class.to_s.underscore}_#{id}_#{element}&amp;quot;
    end
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
new.rhtml
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;&amp;lt;% form_tag({:controller =&amp;gt; Project, :action =&amp;gt; &amp;quot;new&amp;quot;}) do %&amp;gt;
	&amp;lt;h1&amp;gt;New Project&amp;lt;/h1&amp;gt;
	
	&amp;lt;%= error_messages_for :project %&amp;gt;

	&amp;lt;div class=&amp;quot;form_div&amp;quot;&amp;gt;
	  &amp;lt;%= label :project, :name, &amp;quot;Name:&amp;quot; %&amp;gt; &amp;lt;%= text_field :project, :name %&amp;gt;
	&amp;lt;/div&amp;gt;
	
	&amp;lt;div class=&amp;quot;form_div&amp;quot;&amp;gt;
		&amp;lt;div id=&amp;quot;tasks&amp;quot;&amp;gt;
		 	&amp;lt;%= render :partial =&amp;gt; 'task', :collection =&amp;gt; @project.tasks.sort %&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;%= javascript_tag(&amp;quot;createTaskSortable()&amp;quot;) %&amp;gt;
		&amp;lt;%= link_to_remote(&amp;quot;Add Task&amp;quot;, :update =&amp;gt; :tasks, :position =&amp;gt; :bottom, :url =&amp;gt; {:controller =&amp;gt; Project, :action =&amp;gt; &amp;quot;add_task&amp;quot;}, :complete =&amp;gt; &amp;quot;createTaskSortable()&amp;quot;) %&amp;gt;
	&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;submit_div&amp;quot;&amp;gt;
		&amp;lt;%= submit_tag &amp;quot;Create&amp;quot;, :name =&amp;gt; 'submit_action' %&amp;gt;
		&amp;lt;%= submit_tag &amp;quot;Cancel&amp;quot;, :name =&amp;gt; 'submit_action' %&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
edit.rhtml
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;&amp;lt;% form_tag({:controller =&amp;gt; Project, :action =&amp;gt; &amp;quot;edit&amp;quot;, :id =&amp;gt; @project.id}) do %&amp;gt;
	&amp;lt;h1&amp;gt;Edit Project&amp;lt;/h1&amp;gt;
	
	&amp;lt;%= error_messages_for :project %&amp;gt;

	&amp;lt;div class=&amp;quot;form_div&amp;quot;&amp;gt;
	  &amp;lt;%= label :project, :name, &amp;quot;Name:&amp;quot; %&amp;gt; &amp;lt;%= text_field :project, :name %&amp;gt;
	&amp;lt;/div&amp;gt;
	
	&amp;lt;div class=&amp;quot;form_div&amp;quot;&amp;gt;
		&amp;lt;div id=&amp;quot;tasks&amp;quot;&amp;gt;
		 	&amp;lt;%= render :partial =&amp;gt; 'task', :collection =&amp;gt; @project.tasks.sort %&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;%= javascript_tag(&amp;quot;createTaskSortable()&amp;quot;) %&amp;gt;
		&amp;lt;%= link_to_remote(&amp;quot;Add Task&amp;quot;, :update =&amp;gt; :tasks, :position =&amp;gt; :bottom, :url =&amp;gt; {:controller =&amp;gt; Project, :action =&amp;gt; &amp;quot;add_task&amp;quot;}, :complete =&amp;gt; &amp;quot;createTaskSortable()&amp;quot;) %&amp;gt;
	&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;submit_div&amp;quot;&amp;gt;
		&amp;lt;%= submit_tag &amp;quot;Save&amp;quot;, :name =&amp;gt; 'submit_action' %&amp;gt;
		&amp;lt;%= submit_tag &amp;quot;Cancel&amp;quot;, :name =&amp;gt; 'submit_action' %&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
_task.rhtml
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;&amp;lt;div id=&amp;quot;&amp;lt;%= task.id_s %&amp;gt;&amp;quot; class=&amp;quot;task&amp;quot;&amp;gt;
	&amp;lt;%= image_tag(&amp;quot;drag.png&amp;quot;, :class =&amp;gt; &amp;quot;drag_handle&amp;quot;, :id =&amp;gt; task.id_s(&amp;quot;drag_handle&amp;quot;), :style =&amp;gt; &amp;quot;cursor: move;&amp;quot;) %&amp;gt;
	&amp;lt;% unless task.new_record? %&amp;gt;
		&amp;lt;%= hidden_field_tag &amp;quot;project[tasks][][id]&amp;quot;, task.id, :id =&amp;gt; task.id_s(&amp;quot;id&amp;quot;) %&amp;gt;
	
		&amp;lt;%= label_tag task.id_s(&amp;quot;name&amp;quot;), &amp;quot;Task:&amp;quot; %&amp;gt;	&amp;lt;%= text_field_tag &amp;quot;project[tasks][][name]&amp;quot;, task.name, :id =&amp;gt; task.id_s(&amp;quot;name&amp;quot;) %&amp;gt;
		
		&amp;lt;%= check_box_tag &amp;quot;project[tasks][][should_delete]&amp;quot;, 1, task.should_delete, :id =&amp;gt; task.id_s(&amp;quot;should_delete&amp;quot;) %&amp;gt; &amp;lt;%= label_tag task.id_s(&amp;quot;should_delete&amp;quot;), &amp;quot;Delete&amp;quot; %&amp;gt;
	&amp;lt;% else %&amp;gt;
		&amp;lt;%= label_tag task.id_s(&amp;quot;name&amp;quot;), &amp;quot;Task:&amp;quot; %&amp;gt; &amp;lt;%= text_field_tag &amp;quot;project[tasks][][name]&amp;quot;, task.name, :id =&amp;gt; task.id_s(&amp;quot;name&amp;quot;) %&amp;gt;
		
		&amp;lt;%= link_to_function &amp;quot;remove&amp;quot;, &amp;quot;removeTask('#{task.id_s}')&amp;quot; %&amp;gt;
	&amp;lt;% end %&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-04T02:44:27+01:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many tested</tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2008-08-04T02:44:27+01:00</updated-at>
      <user-id type="integer">27940</user-id>
      <version type="integer">8</version>
      <user-name>Zef RosnBrick</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Staling out, please let me know if its still an issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Staling out, please let me know if its still an issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-22T19:50:57+00:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug has_many tested</tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2008-11-22T19:51:00+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">9</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Josh,

Just tested this again with Rails 2.3... Same code I attached with my original ticket.  I still think this is a problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Josh,&lt;/p&gt;
&lt;p&gt;Just tested this again with Rails 2.3... Same code I attached
with my original ticket. I still think this is a problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-09T20:01:09+00:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug has_many tested</tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2009-02-09T20:01:12+00:00</updated-at>
      <user-id type="integer">15613</user-id>
      <version type="integer">10</version>
      <user-name>Jacob Burkhart</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I wouldn't call this ticket stale... perhaps you really mean 'wontfix' ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I wouldn't call this ticket stale... perhaps you really mean
'wontfix' ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-09T20:02:29+00:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">453</number>
      <permalink>has_many-delete-suffers-premature-disassociation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug has_many tested</tag>
      <title>has_many delete suffers premature disassociation</title>
      <updated-at type="datetime">2009-02-09T20:02:31+00:00</updated-at>
      <user-id type="integer">15613</user-id>
      <version type="integer">11</version>
      <user-name>Jacob Burkhart</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/453</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>1d8d1177f07db2af09ea6ae405a82e094296c777</code>
      <content-type>text/x-ruby-script</content-type>
      <created-at type="datetime">2008-06-19T22:16:32+01:00</created-at>
      <filename>has_many_delete_test.rb</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">28429</id>
      <size type="integer">2383</size>
      <uploader-id type="integer">15613</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/28429/has_many_delete_test.rb</url>
    </attachment>
  </attachments>
</ticket>
