<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-16T15:00:03+01:00</created-at>
  <creator-id type="integer">51563</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2808</number>
  <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
  <priority type="integer">1907</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>2-3-stable active_record attributes patch</tag>
  <title>AR attribute collides with private method, results in NoMethodError</title>
  <updated-at type="datetime">2010-06-10T12:48:41+01:00</updated-at>
  <user-id type="integer">55442</user-id>
  <version type="integer">16</version>
  <user-name>Jarl Friis</user-name>
  <creator-name>Tjalling van der Wal</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Since 2.3 (possibly 2.2) there is a check in activerecord/lib/active_record/attribute_methods.rb to protect against calling private methods through method_missing:

@@@
if self.class.private_method_defined?(method_name)
  raise NoMethodError.new(&quot;Attempt to call private method&quot;, method_name, args)
end 
@@@

However I've ran into a bug that occurs in particular situations when an attribute and a private method have the same name. Take a look at this: Zipcode is a simple AR::Base object, with a private method 'y'.

@@@
&gt;&gt; zip = Zipcode.new
=&gt; #&lt;Zipcode id: nil, zipcode: nil, state: nil, county: nil, city: nil, x: nil, y: nil, z: 0 &gt;
&gt;&gt; zip.y
NoMethodError: Attempt to call private method
	from ../trunk/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing'
	from (irb):8
&gt;&gt; zip.x
=&gt; nil
&gt;&gt; zip.y
=&gt; nil
@@@

The first call to zip.y raises, but the second one succeeds! This is caused by the call to zip.x, because when the check above does succeed for 'x', all attribute accessors are generated in bulk, including a public 'y' method.

The problem is that the bulk generation does a lot of checking, but does not perform the check against calling private methods, if I understand things correctly.</original-body>
  <latest-body>Since 2.3 (possibly 2.2) there is a check in activerecord/lib/active_record/attribute_methods.rb to protect against calling private methods through method_missing:

@@@
if self.class.private_method_defined?(method_name)
  raise NoMethodError.new(&quot;Attempt to call private method&quot;, method_name, args)
end 
@@@

However I've ran into a bug that occurs in particular situations when an attribute and a private method have the same name. Take a look at this: Zipcode is a simple AR::Base object, with a private method 'y'.

@@@
&gt;&gt; zip = Zipcode.new
=&gt; #&lt;Zipcode id: nil, zipcode: nil, state: nil, county: nil, city: nil, x: nil, y: nil, z: 0 &gt;
&gt;&gt; zip.y
NoMethodError: Attempt to call private method
	from ../trunk/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing'
	from (irb):8
&gt;&gt; zip.x
=&gt; nil
&gt;&gt; zip.y
=&gt; nil
@@@

The first call to zip.y raises, but the second one succeeds! This is caused by the call to zip.x, because when the check above does succeed for 'x', all attribute accessors are generated in bulk, including a public 'y' method.

The problem is that the bulk generation does a lot of checking, but does not perform the check against calling private methods, if I understand things correctly.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Since 2.3 (possibly 2.2) there is a check in
activerecord/lib/active_record/attribute_methods.rb to protect
against calling private methods through method_missing:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
if self.class.private_method_defined?(method_name)
  raise NoMethodError.new(&amp;quot;Attempt to call private method&amp;quot;, method_name, args)
end 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However I've ran into a bug that occurs in particular situations
when an attribute and a private method have the same name. Take a
look at this: Zipcode is a simple AR::Base object, with a private
method 'y'.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt; zip = Zipcode.new
=&amp;gt; #&amp;lt;Zipcode id: nil, zipcode: nil, state: nil, county: nil, city: nil, x: nil, y: nil, z: 0 &amp;gt;
&amp;gt;&amp;gt; zip.y
NoMethodError: Attempt to call private method
	from ../trunk/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing'
	from (irb):8
&amp;gt;&amp;gt; zip.x
=&amp;gt; nil
&amp;gt;&amp;gt; zip.y
=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first call to zip.y raises, but the second one succeeds!
This is caused by the call to zip.x, because when the check above
does succeed for 'x', all attribute accessors are generated in
bulk, including a public 'y' method.&lt;/p&gt;
&lt;p&gt;The problem is that the bulk generation does a lot of checking,
but does not perform the check against calling private methods, if
I understand things correctly.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Since 2.3 (possibly 2.2) there is a check in activerecord/lib/active_record/attribute_methods.rb to protect against calling private methods through method_missing:

@@@
if self.class.private_method_defined?(method_name)
  raise NoMethodError.new(&quot;Attempt to call private method&quot;, method_name, args)
end 
@@@

However I've ran into a bug that occurs in particular situations when an attribute and a private method have the same name. Take a look at this: Zipcode is a simple AR::Base object, with a private method 'y'.

@@@
&gt;&gt; zip = Zipcode.new
=&gt; #&lt;Zipcode id: nil, zipcode: nil, state: nil, county: nil, city: nil, x: nil, y: nil, z: 0 &gt;
&gt;&gt; zip.y
NoMethodError: Attempt to call private method
	from ../trunk/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing'
	from (irb):8
&gt;&gt; zip.x
=&gt; nil
&gt;&gt; zip.y
=&gt; nil
@@@

The first call to zip.y raises, but the second one succeeds! This is caused by the call to zip.x, because when the check above does succeed for 'x', all attribute accessors are generated in bulk, including a public 'y' method.

The problem is that the bulk generation does a lot of checking, but does not perform the check against calling private methods, if I understand things correctly.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Since 2.3 (possibly 2.2) there is a check in
activerecord/lib/active_record/attribute_methods.rb to protect
against calling private methods through method_missing:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if self.class.private_method_defined?(method_name)
  raise NoMethodError.new(&quot;Attempt to call private method&quot;, method_name, args)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However I've ran into a bug that occurs in particular situations
when an attribute and a private method have the same name. Take a
look at this: Zipcode is a simple AR::Base object, with a private
method 'y'.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; zip = Zipcode.new
=&amp;gt; #&amp;lt;Zipcode id: nil, zipcode: nil, state: nil, county: nil, city: nil, x: nil, y: nil, z: 0 &amp;gt;
&amp;gt;&amp;gt; zip.y
NoMethodError: Attempt to call private method
    from ../trunk/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing'
    from (irb):8
&amp;gt;&amp;gt; zip.x
=&amp;gt; nil
&amp;gt;&amp;gt; zip.y
=&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first call to zip.y raises, but the second one succeeds!
This is caused by the call to zip.x, because when the check above
does succeed for 'x', all attribute accessors are generated in
bulk, including a public 'y' method.&lt;/p&gt;
&lt;p&gt;The problem is that the bulk generation does a lot of checking,
but does not perform the check against calling private methods, if
I understand things correctly.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-16T15:00:03+01:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable active_record attributes</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2009-06-16T15:00:06+01:00</updated-at>
      <user-id type="integer">51563</user-id>
      <version type="integer">1</version>
      <user-name>Tjalling van der Wal</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I was not able to reproduce your error with the automated tests in the attached app, or in the console. Did I get the test conditions correct?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I was not able to reproduce your error with the automated tests
in the attached app, or in the console. Did I get the test
conditions correct?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-18T06:36:36+01:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable active_record attributes</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2009-06-18T06:36:39+01:00</updated-at>
      <user-id type="integer">58626</user-id>
      <version type="integer">2</version>
      <user-name>Andy Atkinson</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi, thanks for your interest.

To reproduce the error I made the following changes: 

First, instead of defining 'y' in Foo, add it to Object in an initializer (in our project it is some utility function inject by a plugin)
@@@
class Object
  private 
  def y
    &quot;The value of y&quot;
  end
end
@@@


Second, I rewrote your tests:
@@@
def test_aaaa_raise_error_when_y_is_called_the_first_time
  puts &quot;running: test_raise_error_when_y_is_called_the_first_time&quot;
  assert_raise NoMethodError do
    Foo.new.y 
  end
end
  
def test_bbbb_access_the_private_call
  puts &quot;running: test_access_the_private_call&quot;
  assert &quot;The value of y&quot;, Foo.new.send(:y)
end
  
def test_cccc_first_call_x_the_y
  puts &quot;running: test_first_call_x_the_y&quot;
  f = Foo.new
  f.x
  assert_equal &quot;The value of y&quot;, f.y    # This one should fail as the AR-attribute has no value set.
end  
@@@

Note that the order of the tests matters because calling 'x' has side effects. Therefore I added explicit output to the tests to be sure they are run in the correct order. I added the aaaa, bbbc, cccc prefixes to the tests names because (apparently) tests are sorted alphabetically.

The 3rd test you wrote (&quot;fetch the value accessing the private method the second time&quot;) should indeed fail. Calling the private y method with send in the 2nd test does not generate the public method.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi, thanks for your interest.&lt;/p&gt;
&lt;p&gt;To reproduce the error I made the following changes:&lt;/p&gt;
&lt;p&gt;First, instead of defining 'y' in Foo, add it to Object in an
initializer (in our project it is some utility function inject by a
plugin)&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Object
  private 
  def y&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&lt;code&gt;&amp;amp;quot;The value of y&amp;amp;quot;&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
  end
end
&lt;/pre&gt;
&lt;p&gt;Second, I rewrote your tests:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def test_aaaa_raise_error_when_y_is_called_the_first_time
  puts &quot;running: test_raise_error_when_y_is_called_the_first_time&quot;
  assert_raise NoMethodError do&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&lt;code&gt;Foo.new.y&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
  end
end

&lt;br&gt;
def test_bbbb_access_the_private_call
  puts &quot;running: test_access_the_private_call&quot;
  assert &quot;The value of y&quot;, Foo.new.send(:y)
end

&lt;br&gt;
def test_cccc_first_call_x_the_y
  puts &quot;running: test_first_call_x_the_y&quot;
  f = Foo.new
  f.x
  assert_equal &quot;The value of y&quot;, f.y    # This one should fail as the AR-attribute has no value set.
end
&lt;/pre&gt;
&lt;p&gt;Note that the order of the tests matters because calling 'x' has
side effects. Therefore I added explicit output to the tests to be
sure they are run in the correct order. I added the aaaa, bbbc,
cccc prefixes to the tests names because (apparently) tests are
sorted alphabetically.&lt;/p&gt;
&lt;p&gt;The 3rd test you wrote (&quot;fetch the value accessing the private
method the second time&quot;) should indeed fail. Calling the private y
method with send in the 2nd test does not generate the public
method.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-18T14:21:01+01:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable active_record attributes</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2009-06-18T14:21:04+01:00</updated-at>
      <user-id type="integer">51563</user-id>
      <version type="integer">3</version>
      <user-name>Tjalling van der Wal</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm having a similar issue with a Model that has a @system@ attribute.  Since this is an inherited private method an error is sometimes thrown when the accessor is called (but only if no other attribute accessor has been called.)

Is anyone working on a patch for this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm having a similar issue with a Model that has a
&lt;code&gt;system&lt;/code&gt; attribute. Since this is an inherited private
method an error is sometimes thrown when the accessor is called
(but only if no other attribute accessor has been called.)&lt;/p&gt;
&lt;p&gt;Is anyone working on a patch for this?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-01T21:16:05+01:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable active_record attributes</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2009-07-01T21:16:08+01:00</updated-at>
      <user-id type="integer">12946</user-id>
      <version type="integer">4</version>
      <user-name>Sam Goldstein</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've commented the check for calling private methods out in our project. I don't know if the check is really needed, since method_missing performs other checks too.

The only nice solution to this problem is to resolve the naming conflict.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've commented the check for calling private methods out in our
project. I don't know if the check is really needed, since
method_missing performs other checks too.&lt;/p&gt;
&lt;p&gt;The only nice solution to this problem is to resolve the naming
conflict.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-07T08:49:44+01:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable active_record attributes</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2009-07-07T08:49:47+01:00</updated-at>
      <user-id type="integer">51563</user-id>
      <version type="integer">5</version>
      <user-name>Tjalling van der Wal</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">7211</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've created a patch for this issue.

The root problem here was that ActiveRecord was using two inconsistent methods for determining if an attribute method had been implemented.

When checking if access control allowed an attribute method to be called AR looked to see if a private method with that name was defined, raising an error if it was.

When checking to determine whether an attribute method was already implemented AR looked to see if the method was defined by an ancestor _below_ ActiveRecord in the inheritance chain.  Methods that shared their names with attributes but were inherited from ancestors above ActiveRecord (e.g. Object, Module, Kernel) were overridden.

The existing AR method which defines this check is shown below.

@@@ ruby
      # Checks whether the method is defined in the model or any of its subclasses
      # that also derive from Active Record. Raises DangerousAttributeError if the
      # method is defined by Active Record though.
      def instance_method_already_implemented?(method_name)
        method_name = method_name.to_s
        return true if method_name =~ /^id(=$|\?$|$)/
        @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map {|m| m.to_s }.to_set
        @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map{|m| m.to_s }.to_set
        raise DangerousAttributeError, &quot;#{method_name} is defined by ActiveRecord&quot; if @@_defined_activerecord_methods.include?(method_name)
        @_defined_class_methods.include?(method_name)
      end

@@@

I've updated ActiveRecord to respect access control, using this same check.  Private methods inherited from Object (for example) will be overridden, while those implemented by an ActiveRecord descendant are respected.  This avoids situations where an read attribute method will behave differently depending on whether another attribute was called before it (as detailed in this ticket.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've created a patch for this issue.&lt;/p&gt;
&lt;p&gt;The root problem here was that ActiveRecord was using two
inconsistent methods for determining if an attribute method had
been implemented.&lt;/p&gt;
&lt;p&gt;When checking if access control allowed an attribute method to
be called AR looked to see if a private method with that name was
defined, raising an error if it was.&lt;/p&gt;
&lt;p&gt;When checking to determine whether an attribute method was
already implemented AR looked to see if the method was defined by
an ancestor &lt;em&gt;below&lt;/em&gt; ActiveRecord in the inheritance chain.
Methods that shared their names with attributes but were inherited
from ancestors above ActiveRecord (e.g. Object, Module, Kernel)
were overridden.&lt;/p&gt;
&lt;p&gt;The existing AR method which defines this check is shown
below.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;      # Checks whether the method is defined in the model or any of its subclasses
      # that also derive from Active Record. Raises DangerousAttributeError if the
      # method is defined by Active Record though.
      def instance_method_already_implemented?(method_name)
        method_name = method_name.to_s
        return true if method_name =~ /^id(=$|\?$|$)/
        @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map {|m| m.to_s }.to_set
        @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map{|m| m.to_s }.to_set
        raise DangerousAttributeError, &quot;#{method_name} is defined by ActiveRecord&quot; if @@_defined_activerecord_methods.include?(method_name)
        @_defined_class_methods.include?(method_name)
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've updated ActiveRecord to respect access control, using this
same check. Private methods inherited from Object (for example)
will be overridden, while those implemented by an ActiveRecord
descendant are respected. This avoids situations where an read
attribute method will behave differently depending on whether
another attribute was called before it (as detailed in this
ticket.)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-08T20:01:08+01:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable active_record attributes</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2009-07-08T20:01:18+01:00</updated-at>
      <user-id type="integer">12946</user-id>
      <version type="integer">6</version>
      <user-name>Sam Goldstein</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>CancelProfileIsBroken</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">7211</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-08T20:01:54+01:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2-3-stable active_record attributes
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable active_record attributes patch</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2009-07-08T20:01:56+01:00</updated-at>
      <user-id type="integer">12946</user-id>
      <version type="integer">7</version>
      <user-name>Sam Goldstein</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>CancelProfileIsBroken</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-08T22:11:05+01:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 7211
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable active_record attributes patch</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2009-07-08T22:11:07+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">8</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [d60d7edce462f4602bfc9996689087a235b034c9]) Make it so AR attributes which conflict with object-private methods (e.g. system) don't 'randomly' cause NoMethodErrors

Previously if you called this attribute before others, you'd get exceptions.  But if it was the second-or-subsequent attribute you retrieved you'd get the correct behaviour.

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
[#2808 state:committed]
http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/d60d7edce462f4602bfc9996689087a235b034c9&quot;
title=
&quot;Changeset [d60d7edce462f4602bfc9996689087a235b034c9]&quot;&gt;[d60d7edce462f4602bfc9996689087a235b034c9]&lt;/a&gt;)
Make it so AR attributes which conflict with object-private methods
(e.g. system) don't 'randomly' cause NoMethodErrors&lt;/p&gt;
&lt;p&gt;Previously if you called this attribute before others, you'd get
exceptions. But if it was the second-or-subsequent attribute you
retrieved you'd get the correct behaviour.&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=
&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt;&lt;br&gt;
[&lt;a href=&quot;/projects/8994/tickets/2808&quot; title=
&quot;Ticket #2808&quot;&gt;#2808&lt;/a&gt; state:committed] &lt;a href=
&quot;http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9&quot;&gt;
http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-09T05:47:22+01:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2-3-stable active_record attributes patch</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2009-07-09T05:47:24+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">9</version>
      <user-name>Repository</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Not sure if this is news, just been looking at the 2.3.5 tag to see if this fix is included and it doesn't seem to be

http://github.com/rails/rails/blob/v2.3.5/activerecord/lib/active_record/attribute_methods.rb#L232

Does anybody know if this is scheduled to go into a later version?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not sure if this is news, just been looking at the 2.3.5 tag to
see if this fix is included and it doesn't seem to be&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/rails/blob/v2.3.5/activerecord/lib/active_record/attribute_methods.rb#L232&quot;&gt;
http://github.com/rails/rails/blob/v2.3.5/activerecord/lib/active_r...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does anybody know if this is scheduled to go into a later
version?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-06T19:57:36+00:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2-3-stable active_record attributes patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2 active_record attributes patch</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2010-01-06T19:57:39+00:00</updated-at>
      <user-id type="integer">34583</user-id>
      <version type="integer">10</version>
      <user-name>Eliot Sykes</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-06T19:58:15+00:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2 active_record attributes patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2-3-stable active_record attributes patch</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2010-01-06T19:58:18+00:00</updated-at>
      <user-id type="integer">34583</user-id>
      <version type="integer">11</version>
      <user-name>Eliot Sykes</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I'm putting this patch I'm using on Rails 2.2.2 for completeness, in case anyone else hits this, plus I'm not sure if respond_to? has been fixed in line with how method_missing has above.

Put this in config/initializers/active_record.rb

@@@ ruby

class ActiveRecord::Base
  def method_missing_with_force_define_attribute_methods(method_id, *args, &amp;block)
    self.class.define_attribute_methods unless self.class.generated_methods?
    method_missing_without_force_define_attribute_methods(method_id, *args, &amp;block)
  end
  alias_method_chain :method_missing, :force_define_attribute_methods
  
  def respond_to_with_force_define_attribute_methods?(method, include_private_methods = false)
    self.class.define_attribute_methods unless self.class.generated_methods?
    respond_to_without_force_define_attribute_methods?(method, include_private_methods)
  end
  alias_method_chain :respond_to?, :force_define_attribute_methods
end

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm putting this patch I'm using on Rails 2.2.2 for
completeness, in case anyone else hits this, plus I'm not sure if
respond_to? has been fixed in line with how method_missing has
above.&lt;/p&gt;
&lt;p&gt;Put this in config/initializers/active_record.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class ActiveRecord::Base
  def method_missing_with_force_define_attribute_methods(method_id, *args, &amp;amp;block)
    self.class.define_attribute_methods unless self.class.generated_methods?
    method_missing_without_force_define_attribute_methods(method_id, *args, &amp;amp;block)
  end
  alias_method_chain :method_missing, :force_define_attribute_methods
  
  def respond_to_with_force_define_attribute_methods?(method, include_private_methods = false)
    self.class.define_attribute_methods unless self.class.generated_methods?
    respond_to_without_force_define_attribute_methods?(method, include_private_methods)
  end
  alias_method_chain :respond_to?, :force_define_attribute_methods
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-06T20:50:34+00:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2-3-stable active_record attributes patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2 active_record attributes patch</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2010-01-06T20:50:37+00:00</updated-at>
      <user-id type="integer">34583</user-id>
      <version type="integer">12</version>
      <user-name>Eliot Sykes</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-06T20:51:54+00:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2 active_record attributes patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2-3-stable active_record attributes patch</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2010-01-06T20:51:57+00:00</updated-at>
      <user-id type="integer">34583</user-id>
      <version type="integer">13</version>
      <user-name>Eliot Sykes</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I just ran into this issue as well and wasted a good bit of time tracing the odd behavior before finding this post.  Please do incorporate it into the next release... it's sad that a commit has been out there since July.

Eliot, thanks for the above patch as a quick temporary fix.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just ran into this issue as well and wasted a good bit of time
tracing the odd behavior before finding this post. Please do
incorporate it into the next release... it's sad that a commit has
been out there since July.&lt;/p&gt;
&lt;p&gt;Eliot, thanks for the above patch as a quick temporary fix.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-26T00:16:29+00:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2-3-stable active_record attributes patch</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2010-01-26T00:16:32+00:00</updated-at>
      <user-id type="integer">35956</user-id>
      <version type="integer">14</version>
      <user-name>Marcus Mateus</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I ran into this as well, because I have an attribute called link, but the problem only comes up when you try to call that method in a Rake task, because Rake defines a private link method on Object.  I got around it simply by calling define_attribute_methods in the class definition.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I ran into this as well, because I have an attribute called
link, but the problem only comes up when you try to call that
method in a Rake task, because Rake defines a private link method
on Object. I got around it simply by calling
define_attribute_methods in the class definition.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-26T02:42:05+00:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2-3-stable active_record attributes patch</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2010-03-26T02:42:08+00:00</updated-at>
      <user-id type="integer">10193</user-id>
      <version type="integer">15</version>
      <user-name>Paul Barry</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I think I ran into this problem as well (using 2.3.5), see
http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/e19f8251b45d34c8

Jarl</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think I ran into this problem as well (using 2.3.5), see&lt;br&gt;
&lt;a href=
&quot;http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/e19f8251b45d34c8&quot;&gt;
http://groups.google.com/group/rubyonrails-talk/browse_thread/threa...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jarl&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-10T12:48:31+01:00</created-at>
      <creator-id type="integer">51563</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2808</number>
      <permalink>ar-attribute-collides-with-private-method-results-in-nomethoderror</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2-3-stable active_record attributes patch</tag>
      <title>AR attribute collides with private method, results in NoMethodError</title>
      <updated-at type="datetime">2010-06-10T12:48:41+01:00</updated-at>
      <user-id type="integer">55442</user-id>
      <version type="integer">16</version>
      <user-name>Jarl Friis</user-name>
      <creator-name>Tjalling van der Wal</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2808</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>7e4973a494ef75b56cad97da4a4eaa208edbf70b</code>
      <content-type>application/x-gzip</content-type>
      <created-at type="datetime">2009-06-18T06:36:36+01:00</created-at>
      <filename>2808bug.tgz</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">134747</id>
      <size type="integer">79602</size>
      <uploader-id type="integer">58626</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/134747/2808bug.tgz</url>
    </attachment>
    <attachment type="Attachment">
      <code>cea96fcbdb78e5d524ef30deae6d2e61de234082</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-07-08T20:01:08+01:00</created-at>
      <filename>bug2808.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">216729</id>
      <size type="integer">3502</size>
      <uploader-id type="integer">12946</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/216729/bug2808.diff</url>
    </attachment>
  </attachments>
</ticket>
