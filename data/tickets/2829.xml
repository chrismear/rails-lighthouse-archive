<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-24T00:21:34+01:00</created-at>
  <creator-id type="integer">21548</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2829</number>
  <permalink>a-has_many-association-starts-no-op-transaction-for-new-activerecords</permalink>
  <priority type="integer">1924</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>bugmash has_many</tag>
  <title>&lt;&lt; a has_many association starts no-op transaction for .new ActiveRecords</title>
  <updated-at type="datetime">2011-02-02T17:31:04+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>George Montana Harkin</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2829</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When building up an object to be saved later in a large transaction, I am adding Models to a has_many relation for another:

Timsheet has many TimesheetRevisions

timesheet = Timesheet.new do |t&quot;
    t.pay_period_id = 12
    t.user_id = user_id
    ...
end

timesheet_revision = TimesheetRevision.new do |tr|
    tr.timehsheet_status_id = timesheet_status_id
    ...
end

timesheet.timesheet_revisions&lt;&lt;timesheet_revision

Checking the log, right around the &lt;&lt; I receive a BEGIN followed by a COMMIT.

It looks to be an issue with &lt;&lt; always starting a transaction even if the model has not been saved yet. See line 115 of rails/activerecord/lib/active_record/associations/association_collection.rb</original-body>
  <latest-body>When building up an object to be saved later in a large transaction, I am adding Models to a has_many relation for another:

Timsheet has many TimesheetRevisions

timesheet = Timesheet.new do |t&quot;
    t.pay_period_id = 12
    t.user_id = user_id
    ...
end

timesheet_revision = TimesheetRevision.new do |tr|
    tr.timehsheet_status_id = timesheet_status_id
    ...
end

timesheet.timesheet_revisions&lt;&lt;timesheet_revision

Checking the log, right around the &lt;&lt; I receive a BEGIN followed by a COMMIT.

It looks to be an issue with &lt;&lt; always starting a transaction even if the model has not been saved yet. See line 115 of rails/activerecord/lib/active_record/associations/association_collection.rb</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When building up an object to be saved later in a large
transaction, I am adding Models to a has_many relation for
another:&lt;/p&gt;
&lt;p&gt;Timsheet has many TimesheetRevisions&lt;/p&gt;
&lt;p&gt;timesheet = Timesheet.new do |t&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;t.pay_period_id = 12
t.user_id = user_id
...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;timesheet_revision = TimesheetRevision.new do |tr|&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;tr.timehsheet_status_id = timesheet_status_id
...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;timesheet.timesheet_revisions&amp;lt;&amp;lt;timesheet_revision&lt;/p&gt;
&lt;p&gt;Checking the log, right around the &amp;lt;&amp;lt; I receive a BEGIN
followed by a COMMIT.&lt;/p&gt;
&lt;p&gt;It looks to be an issue with &amp;lt;&amp;lt; always starting a
transaction even if the model has not been saved yet. See line 115
of
rails/activerecord/lib/active_record/associations/association_collection.rb&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When building up an object to be saved later in a large transaction, I am adding Models to a has_many relation for another:

Timsheet has many TimesheetRevisions

&lt;pre&gt;
  timesheet = Timesheet.new do |t&quot;
    t.pay_period_id = 12
    t.user_id = user_id
    ...
  end

  timesheet_revision = TimesheetRevision.new do |tr|
    tr.timehsheet_status_id = timesheet_status_id
    ...
  end

  timesheet.timesheet_revisions&lt;&lt;timesheet_revision
&lt;/pre&gt;

Checking the log, right around the &lt;&lt; I receive a BEGIN followed by a COMMIT.

It looks to be an issue with &lt;&lt; always starting a transaction even if the model has not been saved yet. See line 115 of rails/activerecord/lib/active_record/associations/association_collection.rb</body>
      <body-html>&lt;div&gt;&lt;p&gt;When building up an object to be saved later in a large
transaction, I am adding Models to a has_many relation for
another:&lt;/p&gt;
&lt;p&gt;Timsheet has many TimesheetRevisions&lt;/p&gt;
&lt;pre&gt;
  timesheet = Timesheet.new do |t&quot;
    t.pay_period_id = 12
    t.user_id = user_id
    ...
  end

  timesheet_revision = TimesheetRevision.new do |tr|
    tr.timehsheet_status_id = timesheet_status_id
    ...
  end

  timesheet.timesheet_revisions&amp;lt;
&lt;/pre&gt;
&lt;p&gt;Checking the log, right around the &amp;lt;&amp;lt; I receive a BEGIN
followed by a COMMIT.&lt;/p&gt;
&lt;p&gt;It looks to be an issue with &amp;lt;&amp;lt; always starting a
transaction even if the model has not been saved yet. See line 115
of
rails/activerecord/lib/active_record/associations/association_collection.rb&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-24T00:21:34+01:00</created-at>
      <creator-id type="integer">21548</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2829</number>
      <permalink>a-has_many-association-starts-no-op-transaction-for-new-activerecords</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>has_many</tag>
      <title>&lt;&lt; a has_many association starts no-op transaction for .new ActiveRecords</title>
      <updated-at type="datetime">2009-07-08T20:27:56+01:00</updated-at>
      <user-id type="integer">21548</user-id>
      <version type="integer">1</version>
      <user-name>George Montana Harkin</user-name>
      <creator-name>George Montana Harkin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2829</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've created a simple patch for this issue. It isn't very ruby so you'll probably want to clean it up.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've created a simple patch for this issue. It isn't very ruby
so you'll probably want to clean it up.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-08T20:17:54+01:00</created-at>
      <creator-id type="integer">21548</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2829</number>
      <permalink>a-has_many-association-starts-no-op-transaction-for-new-activerecords</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>has_many</tag>
      <title>&lt;&lt; a has_many association starts no-op transaction for .new ActiveRecords</title>
      <updated-at type="datetime">2009-07-08T20:17:55+01:00</updated-at>
      <user-id type="integer">21548</user-id>
      <version type="integer">2</version>
      <user-name>George Montana Harkin</user-name>
      <creator-name>George Montana Harkin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2829</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:52+01:00</created-at>
      <creator-id type="integer">21548</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2829</number>
      <permalink>a-has_many-association-starts-no-op-transaction-for-new-activerecords</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>has_many</tag>
      <title>&lt;&lt; a has_many association starts no-op transaction for .new ActiveRecords</title>
      <updated-at type="datetime">2010-05-04T18:48:52+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>George Montana Harkin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2829</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Can a bugmasher verify this as errant behavior in master with a failing test?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can a bugmasher verify this as errant behavior in master with a
failing test?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-09T19:07:25+01:00</created-at>
      <creator-id type="integer">21548</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: has_many
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2829</number>
      <permalink>a-has_many-association-starts-no-op-transaction-for-new-activerecords</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash has_many</tag>
      <title>&lt;&lt; a has_many association starts no-op transaction for .new ActiveRecords</title>
      <updated-at type="datetime">2010-05-09T19:07:29+01:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">4</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>George Montana Harkin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2829</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:39:30+00:00</created-at>
      <creator-id type="integer">21548</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2829</number>
      <permalink>a-has_many-association-starts-no-op-transaction-for-new-activerecords</permalink>
      <priority type="integer">1924</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>bugmash has_many</tag>
      <title>&lt;&lt; a has_many association starts no-op transaction for .new ActiveRecords</title>
      <updated-at type="datetime">2011-02-02T17:31:04+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>George Montana Harkin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2829</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:39:31+00:00</created-at>
      <creator-id type="integer">21548</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2829</number>
      <permalink>a-has_many-association-starts-no-op-transaction-for-new-activerecords</permalink>
      <priority type="integer">1924</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>bugmash has_many</tag>
      <title>&lt;&lt; a has_many association starts no-op transaction for .new ActiveRecords</title>
      <updated-at type="datetime">2011-02-02T17:30:46+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>George Montana Harkin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2829</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2f17c9128d3c2030499bf8c1c661c40b296c5d49</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-07-08T20:17:54+01:00</created-at>
      <filename>activerecord-2.3.2-has-many-begin-commit.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">216743</id>
      <size type="integer">1458</size>
      <uploader-id type="integer">21548</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/216743/activerecord-2.3.2-has-many-begin-commit.patch</url>
    </attachment>
  </attachments>
</ticket>
