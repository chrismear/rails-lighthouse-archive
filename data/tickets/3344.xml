<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-10-07T20:37:24+01:00</created-at>
  <creator-id type="integer">25075</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3344</number>
  <permalink>counter_cache-doesnt-update-when-order-specified-on-has_many-association</permalink>
  <priority type="integer">159121</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>counter_cache doesn't update when :order specified on has_many association</title>
  <updated-at type="datetime">2010-11-08T08:22:50+00:00</updated-at>
  <user-id type="integer">94458</user-id>
  <version type="integer">6</version>
  <user-name>Jeff Kreeftmeijer</user-name>
  <creator-name>subimage</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3344</url>
  <priority-name nil="true"></priority-name>
  <original-body>When using &lt;&lt; to add child items to a parent collection, those items will not be counted in the parent's counter_cache _if they already exist_.

This only seems to happen if :order is specified on the has_many association. I assume it happens with other options, but I've only tested with :order.

Note that these items _already exist within the database_. Adding items via &lt;&lt; for _new entries_ seems to work fine.

# BEFORE - NOT WORKING #

@@@

class Expense &lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&gt; true
  # more code...
end

class InvoiceLineItem &lt; ActiveRecord::Base
  has_many :expenses, :order =&gt; &quot;created_on ASC&quot;
  # more code...
end

&gt;&gt; ili.expenses
=&gt; []
&gt;&gt; ili.expenses &lt;&lt; exp
=&gt; [#&lt;Expense id: 1, account_id: 3, person_id: 0, assigned_id: &quot;000001&quot;, project_id: nil, invoice_line_item_id: 129484, category: &quot;food&quot;, amount_in_cents: 20000, amount_currency: &quot;USD&quot;, description: nil, created_on: &quot;2009-10-07 18:06:00&quot;, is_billable: false&gt;]
&gt;&gt; ili.expenses.count
=&gt; 1
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt; ili.reload
=&gt; #&lt;InvoiceLineItem id: 129484, account_id: 3, invoice_id: 58541, title: &quot;line item&quot;, quantity: 0.0, price_per_in_cents: 0, price_per_currency: &quot;&quot;, flat_fee_in_cents: 0, flat_fee_currency: &quot;&quot;, final_cost_in_cents: 0, final_cost_currency: &quot;USD&quot;, basecamp_id: nil, rank: nil, invoice_schedule_id: 0, line_item_id: nil, description: nil, is_taxable: true, person_id: nil, time_entries_count: 0, expenses_count: 0&gt;
&gt;&gt; ili.expenses.size
=&gt; 0
&gt;&gt; ili.expenses_count
=&gt; 0
&gt;&gt; ili.expenses.count
=&gt; 1
&gt;&gt;

@@@

# AFTER - WORKING #

class Expense &lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&gt; true
  # more code...
end

class InvoiceLineItem &lt; ActiveRecord::Base
  has_many :expenses # REMOVED THE ORDER CLAUSE
  # more code...
end

&gt;&gt; ili.expenses
=&gt; []
&gt;&gt; ili.expenses &lt;&lt; exp
=&gt; [#&lt;Expense id: 2, account_id: 3, person_id: 0, assigned_id: &quot;000002&quot;, project_id: nil, invoice_line_item_id: 129485, category: &quot;tools&quot;, amount_in_cents: 1000, amount_currency: &quot;USD&quot;, description: nil, created_on: &quot;2009-10-07 18:09:02&quot;, is_billable: false&gt;]
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt; ili.reload.expenses_count
=&gt; 1
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt;

@@@</original-body>
  <latest-body>When using &lt;&lt; to add child items to a parent collection, those items will not be counted in the parent's counter_cache _if they already exist_.

This only seems to happen if :order is specified on the has_many association. I assume it happens with other options, but I've only tested with :order.

Note that these items _already exist within the database_. Adding items via &lt;&lt; for _new entries_ seems to work fine.

# BEFORE - NOT WORKING #

@@@

class Expense &lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&gt; true
  # more code...
end

class InvoiceLineItem &lt; ActiveRecord::Base
  has_many :expenses, :order =&gt; &quot;created_on ASC&quot;
  # more code...
end

&gt;&gt; ili.expenses
=&gt; []
&gt;&gt; ili.expenses &lt;&lt; exp
=&gt; [#&lt;Expense id: 1, account_id: 3, person_id: 0, assigned_id: &quot;000001&quot;, project_id: nil, invoice_line_item_id: 129484, category: &quot;food&quot;, amount_in_cents: 20000, amount_currency: &quot;USD&quot;, description: nil, created_on: &quot;2009-10-07 18:06:00&quot;, is_billable: false&gt;]
&gt;&gt; ili.expenses.count
=&gt; 1
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt; ili.reload
=&gt; #&lt;InvoiceLineItem id: 129484, account_id: 3, invoice_id: 58541, title: &quot;line item&quot;, quantity: 0.0, price_per_in_cents: 0, price_per_currency: &quot;&quot;, flat_fee_in_cents: 0, flat_fee_currency: &quot;&quot;, final_cost_in_cents: 0, final_cost_currency: &quot;USD&quot;, basecamp_id: nil, rank: nil, invoice_schedule_id: 0, line_item_id: nil, description: nil, is_taxable: true, person_id: nil, time_entries_count: 0, expenses_count: 0&gt;
&gt;&gt; ili.expenses.size
=&gt; 0
&gt;&gt; ili.expenses_count
=&gt; 0
&gt;&gt; ili.expenses.count
=&gt; 1
&gt;&gt;

@@@

# AFTER - WORKING #

class Expense &lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&gt; true
  # more code...
end

class InvoiceLineItem &lt; ActiveRecord::Base
  has_many :expenses # REMOVED THE ORDER CLAUSE
  # more code...
end

&gt;&gt; ili.expenses
=&gt; []
&gt;&gt; ili.expenses &lt;&lt; exp
=&gt; [#&lt;Expense id: 2, account_id: 3, person_id: 0, assigned_id: &quot;000002&quot;, project_id: nil, invoice_line_item_id: 129485, category: &quot;tools&quot;, amount_in_cents: 1000, amount_currency: &quot;USD&quot;, description: nil, created_on: &quot;2009-10-07 18:09:02&quot;, is_billable: false&gt;]
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt; ili.reload.expenses_count
=&gt; 1
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt;

@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When using &amp;lt;&amp;lt; to add child items to a parent collection,
those items will not be counted in the parent's counter_cache
&lt;em&gt;if they already exist&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This only seems to happen if :order is specified on the has_many
association. I assume it happens with other options, but I've only
tested with :order.&lt;/p&gt;
&lt;p&gt;Note that these items &lt;em&gt;already exist within the
database&lt;/em&gt;. Adding items via &amp;lt;&amp;lt; for &lt;em&gt;new entries&lt;/em&gt;
seems to work fine.&lt;/p&gt;
&lt;h1&gt;BEFORE - NOT WORKING&lt;/h1&gt;
&lt;pre&gt;
&lt;code&gt;
class Expense &amp;lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&amp;gt; true
  # more code...
end

class InvoiceLineItem &amp;lt; ActiveRecord::Base
  has_many :expenses, :order =&amp;gt; &quot;created_on ASC&quot;
  # more code...
end

&amp;gt;&amp;gt; ili.expenses
=&amp;gt; []
&amp;gt;&amp;gt; ili.expenses &amp;lt;&amp;lt; exp
=&amp;gt; [#&amp;lt;Expense id: 1, account_id: 3, person_id: 0, assigned_id: &quot;000001&quot;, project_id: nil, invoice_line_item_id: 129484, category: &quot;food&quot;, amount_in_cents: 20000, amount_currency: &quot;USD&quot;, description: nil, created_on: &quot;2009-10-07 18:06:00&quot;, is_billable: false&amp;gt;]
&amp;gt;&amp;gt; ili.expenses.count
=&amp;gt; 1
&amp;gt;&amp;gt; ili.expenses.size
=&amp;gt; 1
&amp;gt;&amp;gt; ili.reload
=&amp;gt; #&amp;lt;InvoiceLineItem id: 129484, account_id: 3, invoice_id: 58541, title: &quot;line item&quot;, quantity: 0.0, price_per_in_cents: 0, price_per_currency: &quot;&quot;, flat_fee_in_cents: 0, flat_fee_currency: &quot;&quot;, final_cost_in_cents: 0, final_cost_currency: &quot;USD&quot;, basecamp_id: nil, rank: nil, invoice_schedule_id: 0, line_item_id: nil, description: nil, is_taxable: true, person_id: nil, time_entries_count: 0, expenses_count: 0&amp;gt;
&amp;gt;&amp;gt; ili.expenses.size
=&amp;gt; 0
&amp;gt;&amp;gt; ili.expenses_count
=&amp;gt; 0
&amp;gt;&amp;gt; ili.expenses.count
=&amp;gt; 1
&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;AFTER - WORKING&lt;/h1&gt;
&lt;p&gt;class Expense &amp;lt; ActiveRecord::Base&lt;br&gt;
belongs_to :invoice_line_item, :counter_cache =&amp;gt; true # more
code... end&lt;/p&gt;
&lt;p&gt;class InvoiceLineItem &amp;lt; ActiveRecord::Base&lt;br&gt;
has_many :expenses # REMOVED THE ORDER CLAUSE # more code...
end&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ili.expenses =&amp;gt; [] ili.expenses &amp;lt;&amp;lt; exp =&amp;gt; [#]
ili.expenses.size =&amp;gt; 1 ili.reload.expenses_count =&amp;gt; 1
ili.expenses.size =&amp;gt; 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;pre&gt;

&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When using &lt;&lt; to add child items to a parent collection, those items will not be counted in the parent's counter_cache _if they already exist_.

This only seems to happen if :order is specified on the has_many association. I assume it happens with other options, but I've only tested with :order.

Note that these items _already exist within the database_. Adding items via &lt;&lt; for _new entries_ seems to work fine.

# BEFORE - NOT WORKING #

@@@

class Expense &lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&gt; true
  # more code...
end

class InvoiceLineItem &lt; ActiveRecord::Base
  has_many :expenses, :order =&gt; &quot;created_on ASC&quot;
  # more code...
end

&gt;&gt; ili.expenses
=&gt; []
&gt;&gt; ili.expenses &lt;&lt; exp
=&gt; [#&lt;Expense id: 1, account_id: 3, person_id: 0, assigned_id: &quot;000001&quot;, project_id: nil, invoice_line_item_id: 129484, category: &quot;food&quot;, amount_in_cents: 20000, amount_currency: &quot;USD&quot;, description: nil, created_on: &quot;2009-10-07 18:06:00&quot;, is_billable: false&gt;]
&gt;&gt; ili.expenses.count
=&gt; 1
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt; ili.reload
=&gt; #&lt;InvoiceLineItem id: 129484, account_id: 3, invoice_id: 58541, title: &quot;line item&quot;, quantity: 0.0, price_per_in_cents: 0, price_per_currency: &quot;&quot;, flat_fee_in_cents: 0, flat_fee_currency: &quot;&quot;, final_cost_in_cents: 0, final_cost_currency: &quot;USD&quot;, basecamp_id: nil, rank: nil, invoice_schedule_id: 0, line_item_id: nil, description: nil, is_taxable: true, person_id: nil, time_entries_count: 0, expenses_count: 0&gt;
&gt;&gt; ili.expenses.size
=&gt; 0
&gt;&gt; ili.expenses_count
=&gt; 0
&gt;&gt; ili.expenses.count
=&gt; 1
&gt;&gt;

@@@

# AFTER - WORKING #

@@@

class Expense &lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&gt; true
  # more code...
end

class InvoiceLineItem &lt; ActiveRecord::Base
  has_many :expenses # REMOVED THE ORDER CLAUSE
  # more code...
end

&gt;&gt; ili.expenses
=&gt; []
&gt;&gt; ili.expenses &lt;&lt; exp
=&gt; [#&lt;Expense id: 2, account_id: 3, person_id: 0, assigned_id: &quot;000002&quot;, project_id: nil, invoice_line_item_id: 129485, category: &quot;tools&quot;, amount_in_cents: 1000, amount_currency: &quot;USD&quot;, description: nil, created_on: &quot;2009-10-07 18:09:02&quot;, is_billable: false&gt;]
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt; ili.reload.expenses_count
=&gt; 1
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt;

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;When using &amp;lt;&amp;lt; to add child items to a parent collection,
those items will not be counted in the parent's counter_cache
&lt;em&gt;if they already exist&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This only seems to happen if :order is specified on the has_many
association. I assume it happens with other options, but I've only
tested with :order.&lt;/p&gt;
&lt;p&gt;Note that these items &lt;em&gt;already exist within the
database&lt;/em&gt;. Adding items via &amp;lt;&amp;lt; for &lt;em&gt;new entries&lt;/em&gt;
seems to work fine.&lt;/p&gt;
&lt;h1&gt;BEFORE - NOT WORKING&lt;/h1&gt;
&lt;pre&gt;
&lt;code&gt;
class Expense &amp;lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&amp;gt; true
  # more code...
end

class InvoiceLineItem &amp;lt; ActiveRecord::Base
  has_many :expenses, :order =&amp;gt; &quot;created_on ASC&quot;
  # more code...
end

&amp;gt;&amp;gt; ili.expenses
=&amp;gt; []
&amp;gt;&amp;gt; ili.expenses &amp;lt;&amp;lt; exp
=&amp;gt; [#&amp;lt;Expense id: 1, account_id: 3, person_id: 0, assigned_id: &quot;000001&quot;, project_id: nil, invoice_line_item_id: 129484, category: &quot;food&quot;, amount_in_cents: 20000, amount_currency: &quot;USD&quot;, description: nil, created_on: &quot;2009-10-07 18:06:00&quot;, is_billable: false&amp;gt;]
&amp;gt;&amp;gt; ili.expenses.count
=&amp;gt; 1
&amp;gt;&amp;gt; ili.expenses.size
=&amp;gt; 1
&amp;gt;&amp;gt; ili.reload
=&amp;gt; #&amp;lt;InvoiceLineItem id: 129484, account_id: 3, invoice_id: 58541, title: &quot;line item&quot;, quantity: 0.0, price_per_in_cents: 0, price_per_currency: &quot;&quot;, flat_fee_in_cents: 0, flat_fee_currency: &quot;&quot;, final_cost_in_cents: 0, final_cost_currency: &quot;USD&quot;, basecamp_id: nil, rank: nil, invoice_schedule_id: 0, line_item_id: nil, description: nil, is_taxable: true, person_id: nil, time_entries_count: 0, expenses_count: 0&amp;gt;
&amp;gt;&amp;gt; ili.expenses.size
=&amp;gt; 0
&amp;gt;&amp;gt; ili.expenses_count
=&amp;gt; 0
&amp;gt;&amp;gt; ili.expenses.count
=&amp;gt; 1
&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;AFTER - WORKING&lt;/h1&gt;
&lt;pre&gt;
&lt;code&gt;
class Expense &amp;lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&amp;gt; true
  # more code...
end

class InvoiceLineItem &amp;lt; ActiveRecord::Base
  has_many :expenses # REMOVED THE ORDER CLAUSE
  # more code...
end

&amp;gt;&amp;gt; ili.expenses
=&amp;gt; []
&amp;gt;&amp;gt; ili.expenses &amp;lt;&amp;lt; exp
=&amp;gt; [#&amp;lt;Expense id: 2, account_id: 3, person_id: 0, assigned_id: &quot;000002&quot;, project_id: nil, invoice_line_item_id: 129485, category: &quot;tools&quot;, amount_in_cents: 1000, amount_currency: &quot;USD&quot;, description: nil, created_on: &quot;2009-10-07 18:09:02&quot;, is_billable: false&amp;gt;]
&amp;gt;&amp;gt; ili.expenses.size
=&amp;gt; 1
&amp;gt;&amp;gt; ili.reload.expenses_count
=&amp;gt; 1
&amp;gt;&amp;gt; ili.expenses.size
=&amp;gt; 1
&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-07T20:37:24+01:00</created-at>
      <creator-id type="integer">25075</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3344</number>
      <permalink>counter_cache-doesnt-update-when-order-specified-on-has_many-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>counter_cache doesn't update when :order specified on has_many association</title>
      <updated-at type="datetime">2009-10-07T20:37:59+01:00</updated-at>
      <user-id type="integer">25075</user-id>
      <version type="integer">1</version>
      <user-name>subimage</user-name>
      <creator-name>subimage</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3344</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>## Cant Duplicate In Rails 2.3.4 ##

### app/models/invoice_line_item.rb ###
@@@ ruby
class InvoiceLineItem &lt; ActiveRecord::Base
  has_many :expenses, :order =&gt; &quot;created_at ASC&quot;
end
@@@

### app/models/expense.rb ###
@@@ ruby
class Expense &lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&gt; true
end
@@@

### Console Session: ###
@@@ ruby
Loading development environment (Rails 2.3.4)
&gt;&gt; ili = InvoiceLineItem.new
+----------------+------------+------------+
| expenses_count | created_at | updated_at |
+----------------+------------+------------+
|                |            |            |
+----------------+------------+------------+
1 row in set
&gt;&gt; ili.save
  InvoiceLineItem Create (0.8ms)   INSERT INTO &quot;invoice_line_items&quot; (&quot;created_at&quot;, &quot;expenses_count&quot;, &quot;updated_at&quot;) VALUES('2009-10-08 07:26:05', NULL, '2009-10-08 07:26:05')
=&gt; true
&gt;&gt; ili
+----+----------------+-------------------------+-------------------------+
| id | expenses_count | created_at              | updated_at              |
+----+----------------+-------------------------+-------------------------+
| 7  |                | 2009-10-08 07:26:05 UTC | 2009-10-08 07:26:05 UTC |
+----+----------------+-------------------------+-------------------------+
1 row in set
&gt;&gt; ili.expenses &lt;&lt; Expense.new
  Expense Create (0.3ms)   INSERT INTO &quot;expenses&quot; (&quot;created_at&quot;, &quot;updated_at&quot;, &quot;invoice_line_item_id&quot;) VALUES('2009-10-08 07:26:46', '2009-10-08 07:26:46', 7)
  InvoiceLineItem Load (0.2ms)   SELECT * FROM &quot;invoice_line_items&quot; WHERE (&quot;invoice_line_items&quot;.&quot;id&quot; = 7) 
  InvoiceLineItem Update (0.1ms)   UPDATE &quot;invoice_line_items&quot; SET &quot;expenses_count&quot; = COALESCE(&quot;expenses_count&quot;, 0) + 1 WHERE (&quot;id&quot; = 7) 
  Expense Load (0.4ms)   SELECT * FROM &quot;expenses&quot; WHERE (&quot;expenses&quot;.invoice_line_item_id = 7) ORDER BY created_at ASC
+----+----------------------+-------------------------+-------------------------+
| id | invoice_line_item_id | created_at              | updated_at              |
+----+----------------------+-------------------------+-------------------------+
| 5  | 7                    | 2009-10-08 07:26:46 UTC | 2009-10-08 07:26:46 UTC |
+----+----------------------+-------------------------+-------------------------+
1 row in set
&gt;&gt; ili.expenses
+----+----------------------+-------------------------+-------------------------+
| id | invoice_line_item_id | created_at              | updated_at              |
+----+----------------------+-------------------------+-------------------------+
| 5  | 7                    | 2009-10-08 07:26:46 UTC | 2009-10-08 07:26:46 UTC |
+----+----------------------+-------------------------+-------------------------+
1 row in set
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt; ili.expenses.count
  SQL (0.3ms)   SELECT count(*) AS count_all FROM &quot;expenses&quot; WHERE (&quot;expenses&quot;.invoice_line_item_id = 7) 
=&gt; 1
&gt;&gt; ili.expenses_count
=&gt; nil
&gt;&gt; ili.save
=&gt; true
&gt;&gt; ili.reload
  InvoiceLineItem Load (0.3ms)   SELECT * FROM &quot;invoice_line_items&quot; WHERE (&quot;invoice_line_items&quot;.&quot;id&quot; = 7) 
+----+----------------+-------------------------+-------------------------+
| id | expenses_count | created_at              | updated_at              |
+----+----------------+-------------------------+-------------------------+
| 7  | 1              | 2009-10-08 07:26:05 UTC | 2009-10-08 07:26:05 UTC |
+----+----------------+-------------------------+-------------------------+
1 row in set
&gt;&gt; ili.expenses.size
=&gt; 1
&gt;&gt; ili.expenses_count
=&gt; 1
&gt;&gt; ili.expenses.count
  SQL (0.3ms)   SELECT count(*) AS count_all FROM &quot;expenses&quot; WHERE (&quot;expenses&quot;.invoice_line_item_id = 7) 
=&gt; 1
&gt;&gt; 
@@@</body>
      <body-html>&lt;div&gt;&lt;h2&gt;Cant Duplicate In Rails 2.3.4&lt;/h2&gt;
&lt;h3&gt;app/models/invoice_line_item.rb&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class InvoiceLineItem &amp;lt; ActiveRecord::Base
  has_many :expenses, :order =&amp;gt; &quot;created_at ASC&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;app/models/expense.rb&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Expense &amp;lt; ActiveRecord::Base
  belongs_to :invoice_line_item, :counter_cache =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Console Session:&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;Loading development environment (Rails 2.3.4)
&amp;gt;&amp;gt; ili = InvoiceLineItem.new
+----------------+------------+------------+
| expenses_count | created_at | updated_at |
+----------------+------------+------------+
|                |            |            |
+----------------+------------+------------+
1 row in set
&amp;gt;&amp;gt; ili.save
  InvoiceLineItem Create (0.8ms)   INSERT INTO &quot;invoice_line_items&quot; (&quot;created_at&quot;, &quot;expenses_count&quot;, &quot;updated_at&quot;) VALUES('2009-10-08 07:26:05', NULL, '2009-10-08 07:26:05')
=&amp;gt; true
&amp;gt;&amp;gt; ili
+----+----------------+-------------------------+-------------------------+
| id | expenses_count | created_at              | updated_at              |
+----+----------------+-------------------------+-------------------------+
| 7  |                | 2009-10-08 07:26:05 UTC | 2009-10-08 07:26:05 UTC |
+----+----------------+-------------------------+-------------------------+
1 row in set
&amp;gt;&amp;gt; ili.expenses &amp;lt;&amp;lt; Expense.new
  Expense Create (0.3ms)   INSERT INTO &quot;expenses&quot; (&quot;created_at&quot;, &quot;updated_at&quot;, &quot;invoice_line_item_id&quot;) VALUES('2009-10-08 07:26:46', '2009-10-08 07:26:46', 7)
  InvoiceLineItem Load (0.2ms)   SELECT * FROM &quot;invoice_line_items&quot; WHERE (&quot;invoice_line_items&quot;.&quot;id&quot; = 7) 
  InvoiceLineItem Update (0.1ms)   UPDATE &quot;invoice_line_items&quot; SET &quot;expenses_count&quot; = COALESCE(&quot;expenses_count&quot;, 0) + 1 WHERE (&quot;id&quot; = 7) 
  Expense Load (0.4ms)   SELECT * FROM &quot;expenses&quot; WHERE (&quot;expenses&quot;.invoice_line_item_id = 7) ORDER BY created_at ASC
+----+----------------------+-------------------------+-------------------------+
| id | invoice_line_item_id | created_at              | updated_at              |
+----+----------------------+-------------------------+-------------------------+
| 5  | 7                    | 2009-10-08 07:26:46 UTC | 2009-10-08 07:26:46 UTC |
+----+----------------------+-------------------------+-------------------------+
1 row in set
&amp;gt;&amp;gt; ili.expenses
+----+----------------------+-------------------------+-------------------------+
| id | invoice_line_item_id | created_at              | updated_at              |
+----+----------------------+-------------------------+-------------------------+
| 5  | 7                    | 2009-10-08 07:26:46 UTC | 2009-10-08 07:26:46 UTC |
+----+----------------------+-------------------------+-------------------------+
1 row in set
&amp;gt;&amp;gt; ili.expenses.size
=&amp;gt; 1
&amp;gt;&amp;gt; ili.expenses.count
  SQL (0.3ms)   SELECT count(*) AS count_all FROM &quot;expenses&quot; WHERE (&quot;expenses&quot;.invoice_line_item_id = 7) 
=&amp;gt; 1
&amp;gt;&amp;gt; ili.expenses_count
=&amp;gt; nil
&amp;gt;&amp;gt; ili.save
=&amp;gt; true
&amp;gt;&amp;gt; ili.reload
  InvoiceLineItem Load (0.3ms)   SELECT * FROM &quot;invoice_line_items&quot; WHERE (&quot;invoice_line_items&quot;.&quot;id&quot; = 7) 
+----+----------------+-------------------------+-------------------------+
| id | expenses_count | created_at              | updated_at              |
+----+----------------+-------------------------+-------------------------+
| 7  | 1              | 2009-10-08 07:26:05 UTC | 2009-10-08 07:26:05 UTC |
+----+----------------+-------------------------+-------------------------+
1 row in set
&amp;gt;&amp;gt; ili.expenses.size
=&amp;gt; 1
&amp;gt;&amp;gt; ili.expenses_count
=&amp;gt; 1
&amp;gt;&amp;gt; ili.expenses.count
  SQL (0.3ms)   SELECT count(*) AS count_all FROM &quot;expenses&quot; WHERE (&quot;expenses&quot;.invoice_line_item_id = 7) 
=&amp;gt; 1
&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-08T08:31:01+01:00</created-at>
      <creator-id type="integer">25075</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3344</number>
      <permalink>counter_cache-doesnt-update-when-order-specified-on-has_many-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>counter_cache doesn't update when :order specified on has_many association</title>
      <updated-at type="datetime">2009-10-08T08:31:03+01:00</updated-at>
      <user-id type="integer">3059</user-id>
      <version type="integer">2</version>
      <user-name>Mark Turner</user-name>
      <creator-name>subimage</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3344</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Mark - read the original bug report. You missed the intent. It _works_ when you use...

@@@

ili.expenses &lt;&lt; Expense.new

@@@

What _doesn't work_ is when you use...

@@@

expense = Expense.create
ili.expenses &lt;&lt; expense

@@@

However if you remove the :order option then re-run the above code it _does work_ for the already existing expense.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Mark - read the original bug report. You missed the intent. It
&lt;em&gt;works&lt;/em&gt; when you use...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
ili.expenses &amp;lt;&amp;lt; Expense.new&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What &lt;em&gt;doesn't work&lt;/em&gt; is when you use...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
expense = Expense.create
ili.expenses &amp;lt;&amp;lt; expense&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However if you remove the :order option then re-run the above
code it &lt;em&gt;does work&lt;/em&gt; for the already existing expense.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-08T08:41:55+01:00</created-at>
      <creator-id type="integer">25075</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3344</number>
      <permalink>counter_cache-doesnt-update-when-order-specified-on-has_many-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>counter_cache doesn't update when :order specified on has_many association</title>
      <updated-at type="datetime">2009-10-08T08:41:57+01:00</updated-at>
      <user-id type="integer">25075</user-id>
      <version type="integer">3</version>
      <user-name>subimage</user-name>
      <creator-name>subimage</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3344</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:38:46+01:00</created-at>
      <creator-id type="integer">25075</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3344</number>
      <permalink>counter_cache-doesnt-update-when-order-specified-on-has_many-association</permalink>
      <priority type="integer">159121</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>counter_cache doesn't update when :order specified on has_many association</title>
      <updated-at type="datetime">2010-10-06T06:38:49+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">4</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>subimage</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3344</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-08T08:22:46+00:00</created-at>
      <creator-id type="integer">25075</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3344</number>
      <permalink>counter_cache-doesnt-update-when-order-specified-on-has_many-association</permalink>
      <priority type="integer">159121</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>counter_cache doesn't update when :order specified on has_many association</title>
      <updated-at type="datetime">2010-11-08T08:22:48+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">6</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>subimage</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3344</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
