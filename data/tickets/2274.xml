<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-17T17:09:33+00:00</created-at>
  <creator-id type="integer">42916</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2274</number>
  <permalink>named_scope-join-issue-nil-ids</permalink>
  <priority type="integer">1451</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>ids joins wrong</tag>
  <title>named_scope join issue, nil ids</title>
  <updated-at type="datetime">2009-05-11T14:40:30+01:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">5</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>Greg Hazel</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2274</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Here are three examples which I would expect to be the same. The first works best. The second is not functional, since the Address records come back with nil ids. The third works ok, but duplicates the condition in the WHERE clause.

This is ActiveRecord 2.2

@@@ ruby
class Address &lt; ActiveRecord::Base
  # doesn't quite work
  named_scope :not_invited, :joins =&gt; &quot;LEFT JOIN invites ON addresses.id = invites.address_id&quot;,
                            :conditions =&gt; &quot;invites.id IS NULL&quot;
end

class User &lt; ActiveRecord::Base
  has_and_belongs_to_many :contacts, :class_name =&gt; 'Address'

  def contacts_not_invited
    contacts.all(:joins =&gt; &quot;LEFT JOIN invites ON addresses.id = invites.address_id&quot;,
                 :conditions =&gt; &quot;invites.id IS NULL&quot;)
  end
end

current_user = User.find_by_email(&quot;aaron@example.com&quot;)

p current_user.contacts_not_invited
# =&gt; Address Load (0.0ms)  SELECT &quot;addresses&quot;.* FROM &quot;addresses&quot; INNER JOIN &quot;addresses_users&quot; ON &quot;addresses&quot;.id = &quot;addresses_users&quot;.address_id LEFT JOIN invites ON addresses.id = invites.address_id WHERE (invites.id IS NULL) AND (&quot;addresses_users&quot;.user_id = 317248456 ) 
# =&gt; [#&lt;Address id: 718047205, email: &quot;woo@thanks.com&quot;&gt;, #&lt;Address id: 1068445024, email: &quot;newguy@place.com&quot;&gt;]

p current_user.contacts.not_invited
# =&gt; Address Load (0.0ms)  SELECT * FROM &quot;addresses&quot; LEFT JOIN invites ON addresses.id = invites.address_id INNER JOIN &quot;addresses_users&quot; ON &quot;addresses&quot;.id = &quot;addresses_users&quot;.address_id WHERE (&quot;addresses_users&quot;.user_id = 317248456 ) AND ((invites.id IS NULL) AND (&quot;addresses_users&quot;.user_id = 317248456 ))
# XXX: address records ids are nil!!
# =&gt; [#&lt;Address id: nil, email: &quot;woo@thanks.com&quot;&gt;, #&lt;Address id: nil, email: &quot;newguy@place.com&quot;&gt;]

p current_user.contacts.not_invited.all
# =&gt; Address Load (0.0ms)  SELECT &quot;addresses&quot;.* FROM &quot;addresses&quot; LEFT JOIN invites ON addresses.id = invites.address_id INNER JOIN &quot;addresses_users&quot; ON &quot;addresses&quot;.id = &quot;addresses_users&quot;.address_id WHERE (((invites.id IS NULL) AND (&quot;addresses_users&quot;.user_id = 317248456 )) AND (&quot;addresses_users&quot;.user_id = 317248456 )) 
# =&gt; [#&lt;Address id: 718047205, email: &quot;woo@thanks.com&quot;&gt;, #&lt;Address id: 1068445024, email: &quot;newguy@place.com&quot;&gt;]
@@@</original-body>
  <latest-body>Here are three examples which I would expect to be the same. The first works best. The second is not functional, since the Address records come back with nil ids. The third works ok, but duplicates the condition in the WHERE clause.

This is ActiveRecord 2.2

@@@ ruby
class Address &lt; ActiveRecord::Base
  # doesn't quite work
  named_scope :not_invited, :joins =&gt; &quot;LEFT JOIN invites ON addresses.id = invites.address_id&quot;,
                            :conditions =&gt; &quot;invites.id IS NULL&quot;
end

class User &lt; ActiveRecord::Base
  has_and_belongs_to_many :contacts, :class_name =&gt; 'Address'

  def contacts_not_invited
    contacts.all(:joins =&gt; &quot;LEFT JOIN invites ON addresses.id = invites.address_id&quot;,
                 :conditions =&gt; &quot;invites.id IS NULL&quot;)
  end
end

current_user = User.find_by_email(&quot;aaron@example.com&quot;)

p current_user.contacts_not_invited
# =&gt; Address Load (0.0ms)  SELECT &quot;addresses&quot;.* FROM &quot;addresses&quot; INNER JOIN &quot;addresses_users&quot; ON &quot;addresses&quot;.id = &quot;addresses_users&quot;.address_id LEFT JOIN invites ON addresses.id = invites.address_id WHERE (invites.id IS NULL) AND (&quot;addresses_users&quot;.user_id = 317248456 ) 
# =&gt; [#&lt;Address id: 718047205, email: &quot;woo@thanks.com&quot;&gt;, #&lt;Address id: 1068445024, email: &quot;newguy@place.com&quot;&gt;]

p current_user.contacts.not_invited
# =&gt; Address Load (0.0ms)  SELECT * FROM &quot;addresses&quot; LEFT JOIN invites ON addresses.id = invites.address_id INNER JOIN &quot;addresses_users&quot; ON &quot;addresses&quot;.id = &quot;addresses_users&quot;.address_id WHERE (&quot;addresses_users&quot;.user_id = 317248456 ) AND ((invites.id IS NULL) AND (&quot;addresses_users&quot;.user_id = 317248456 ))
# XXX: address records ids are nil!!
# =&gt; [#&lt;Address id: nil, email: &quot;woo@thanks.com&quot;&gt;, #&lt;Address id: nil, email: &quot;newguy@place.com&quot;&gt;]

p current_user.contacts.not_invited.all
# =&gt; Address Load (0.0ms)  SELECT &quot;addresses&quot;.* FROM &quot;addresses&quot; LEFT JOIN invites ON addresses.id = invites.address_id INNER JOIN &quot;addresses_users&quot; ON &quot;addresses&quot;.id = &quot;addresses_users&quot;.address_id WHERE (((invites.id IS NULL) AND (&quot;addresses_users&quot;.user_id = 317248456 )) AND (&quot;addresses_users&quot;.user_id = 317248456 )) 
# =&gt; [#&lt;Address id: 718047205, email: &quot;woo@thanks.com&quot;&gt;, #&lt;Address id: 1068445024, email: &quot;newguy@place.com&quot;&gt;]
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Here are three examples which I would expect to be the same. The
first works best. The second is not functional, since the Address
records come back with nil ids. The third works ok, but duplicates
the condition in the WHERE clause.&lt;/p&gt;
&lt;p&gt;This is ActiveRecord 2.2&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Address &amp;lt; ActiveRecord::Base
  # doesn't quite work
  named_scope :not_invited, :joins =&amp;gt; &amp;quot;LEFT JOIN invites ON addresses.id = invites.address_id&amp;quot;,
                            :conditions =&amp;gt; &amp;quot;invites.id IS NULL&amp;quot;
end

class User &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :contacts, :class_name =&amp;gt; 'Address'

  def contacts_not_invited
    contacts.all(:joins =&amp;gt; &amp;quot;LEFT JOIN invites ON addresses.id = invites.address_id&amp;quot;,
                 :conditions =&amp;gt; &amp;quot;invites.id IS NULL&amp;quot;)
  end
end

current_user = User.find_by_email(&amp;quot;aaron@example.com&amp;quot;)

p current_user.contacts_not_invited
# =&amp;gt; Address Load (0.0ms)  SELECT &amp;quot;addresses&amp;quot;.* FROM &amp;quot;addresses&amp;quot; INNER JOIN &amp;quot;addresses_users&amp;quot; ON &amp;quot;addresses&amp;quot;.id = &amp;quot;addresses_users&amp;quot;.address_id LEFT JOIN invites ON addresses.id = invites.address_id WHERE (invites.id IS NULL) AND (&amp;quot;addresses_users&amp;quot;.user_id = 317248456 ) 
# =&amp;gt; [#&amp;lt;Address id: 718047205, email: &amp;quot;woo@thanks.com&amp;quot;&amp;gt;, #&amp;lt;Address id: 1068445024, email: &amp;quot;newguy@place.com&amp;quot;&amp;gt;]

p current_user.contacts.not_invited
# =&amp;gt; Address Load (0.0ms)  SELECT * FROM &amp;quot;addresses&amp;quot; LEFT JOIN invites ON addresses.id = invites.address_id INNER JOIN &amp;quot;addresses_users&amp;quot; ON &amp;quot;addresses&amp;quot;.id = &amp;quot;addresses_users&amp;quot;.address_id WHERE (&amp;quot;addresses_users&amp;quot;.user_id = 317248456 ) AND ((invites.id IS NULL) AND (&amp;quot;addresses_users&amp;quot;.user_id = 317248456 ))
# XXX: address records ids are nil!!
# =&amp;gt; [#&amp;lt;Address id: nil, email: &amp;quot;woo@thanks.com&amp;quot;&amp;gt;, #&amp;lt;Address id: nil, email: &amp;quot;newguy@place.com&amp;quot;&amp;gt;]

p current_user.contacts.not_invited.all
# =&amp;gt; Address Load (0.0ms)  SELECT &amp;quot;addresses&amp;quot;.* FROM &amp;quot;addresses&amp;quot; LEFT JOIN invites ON addresses.id = invites.address_id INNER JOIN &amp;quot;addresses_users&amp;quot; ON &amp;quot;addresses&amp;quot;.id = &amp;quot;addresses_users&amp;quot;.address_id WHERE (((invites.id IS NULL) AND (&amp;quot;addresses_users&amp;quot;.user_id = 317248456 )) AND (&amp;quot;addresses_users&amp;quot;.user_id = 317248456 )) 
# =&amp;gt; [#&amp;lt;Address id: 718047205, email: &amp;quot;woo@thanks.com&amp;quot;&amp;gt;, #&amp;lt;Address id: 1068445024, email: &amp;quot;newguy@place.com&amp;quot;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here are three examples which I would expect to be the same. The first works best. The second is not functional, since the Address records come back with nil ids. The third works ok, but duplicates the condition in the WHERE clause. (Bonus points if you can get that condition to go on the ON clause of the INNER JOIN).

This is ActiveRecord 2.2

@@@ ruby
class Address &lt; ActiveRecord::Base
  # doesn't quite work
  named_scope :not_invited, :joins =&gt; &quot;LEFT JOIN invites ON addresses.id = invites.address_id&quot;,
                            :conditions =&gt; &quot;invites.id IS NULL&quot;
end

class User &lt; ActiveRecord::Base
  has_and_belongs_to_many :contacts, :class_name =&gt; 'Address'

  def contacts_not_invited
    contacts.all(:joins =&gt; &quot;LEFT JOIN invites ON addresses.id = invites.address_id&quot;,
                 :conditions =&gt; &quot;invites.id IS NULL&quot;)
  end
end

current_user = User.find_by_email(&quot;aaron@example.com&quot;)

p current_user.contacts_not_invited
# =&gt; Address Load (0.0ms)  SELECT &quot;addresses&quot;.* FROM &quot;addresses&quot; INNER JOIN &quot;addresses_users&quot; ON &quot;addresses&quot;.id = &quot;addresses_users&quot;.address_id LEFT JOIN invites ON addresses.id = invites.address_id WHERE (invites.id IS NULL) AND (&quot;addresses_users&quot;.user_id = 317248456 ) 
# =&gt; [#&lt;Address id: 718047205, email: &quot;woo@thanks.com&quot;&gt;, #&lt;Address id: 1068445024, email: &quot;newguy@place.com&quot;&gt;]

p current_user.contacts.not_invited
# =&gt; Address Load (0.0ms)  SELECT * FROM &quot;addresses&quot; LEFT JOIN invites ON addresses.id = invites.address_id INNER JOIN &quot;addresses_users&quot; ON &quot;addresses&quot;.id = &quot;addresses_users&quot;.address_id WHERE (&quot;addresses_users&quot;.user_id = 317248456 ) AND ((invites.id IS NULL) AND (&quot;addresses_users&quot;.user_id = 317248456 ))
# XXX: address records ids are nil!!
# =&gt; [#&lt;Address id: nil, email: &quot;woo@thanks.com&quot;&gt;, #&lt;Address id: nil, email: &quot;newguy@place.com&quot;&gt;]

p current_user.contacts.not_invited.all
# =&gt; Address Load (0.0ms)  SELECT &quot;addresses&quot;.* FROM &quot;addresses&quot; LEFT JOIN invites ON addresses.id = invites.address_id INNER JOIN &quot;addresses_users&quot; ON &quot;addresses&quot;.id = &quot;addresses_users&quot;.address_id WHERE (((invites.id IS NULL) AND (&quot;addresses_users&quot;.user_id = 317248456 )) AND (&quot;addresses_users&quot;.user_id = 317248456 )) 
# =&gt; [#&lt;Address id: 718047205, email: &quot;woo@thanks.com&quot;&gt;, #&lt;Address id: 1068445024, email: &quot;newguy@place.com&quot;&gt;]
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here are three examples which I would expect to be the same. The
first works best. The second is not functional, since the Address
records come back with nil ids. The third works ok, but duplicates
the condition in the WHERE clause. (Bonus points if you can get
that condition to go on the ON clause of the INNER JOIN).&lt;/p&gt;
&lt;p&gt;This is ActiveRecord 2.2&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Address &amp;lt; ActiveRecord::Base
  # doesn't quite work
  named_scope :not_invited, :joins =&amp;gt; &amp;quot;LEFT JOIN invites ON addresses.id = invites.address_id&amp;quot;,
                            :conditions =&amp;gt; &amp;quot;invites.id IS NULL&amp;quot;
end

class User &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :contacts, :class_name =&amp;gt; 'Address'

  def contacts_not_invited
    contacts.all(:joins =&amp;gt; &amp;quot;LEFT JOIN invites ON addresses.id = invites.address_id&amp;quot;,
                 :conditions =&amp;gt; &amp;quot;invites.id IS NULL&amp;quot;)
  end
end

current_user = User.find_by_email(&amp;quot;aaron@example.com&amp;quot;)

p current_user.contacts_not_invited
# =&amp;gt; Address Load (0.0ms)  SELECT &amp;quot;addresses&amp;quot;.* FROM &amp;quot;addresses&amp;quot; INNER JOIN &amp;quot;addresses_users&amp;quot; ON &amp;quot;addresses&amp;quot;.id = &amp;quot;addresses_users&amp;quot;.address_id LEFT JOIN invites ON addresses.id = invites.address_id WHERE (invites.id IS NULL) AND (&amp;quot;addresses_users&amp;quot;.user_id = 317248456 ) 
# =&amp;gt; [#&amp;lt;Address id: 718047205, email: &amp;quot;woo@thanks.com&amp;quot;&amp;gt;, #&amp;lt;Address id: 1068445024, email: &amp;quot;newguy@place.com&amp;quot;&amp;gt;]

p current_user.contacts.not_invited
# =&amp;gt; Address Load (0.0ms)  SELECT * FROM &amp;quot;addresses&amp;quot; LEFT JOIN invites ON addresses.id = invites.address_id INNER JOIN &amp;quot;addresses_users&amp;quot; ON &amp;quot;addresses&amp;quot;.id = &amp;quot;addresses_users&amp;quot;.address_id WHERE (&amp;quot;addresses_users&amp;quot;.user_id = 317248456 ) AND ((invites.id IS NULL) AND (&amp;quot;addresses_users&amp;quot;.user_id = 317248456 ))
# XXX: address records ids are nil!!
# =&amp;gt; [#&amp;lt;Address id: nil, email: &amp;quot;woo@thanks.com&amp;quot;&amp;gt;, #&amp;lt;Address id: nil, email: &amp;quot;newguy@place.com&amp;quot;&amp;gt;]

p current_user.contacts.not_invited.all
# =&amp;gt; Address Load (0.0ms)  SELECT &amp;quot;addresses&amp;quot;.* FROM &amp;quot;addresses&amp;quot; LEFT JOIN invites ON addresses.id = invites.address_id INNER JOIN &amp;quot;addresses_users&amp;quot; ON &amp;quot;addresses&amp;quot;.id = &amp;quot;addresses_users&amp;quot;.address_id WHERE (((invites.id IS NULL) AND (&amp;quot;addresses_users&amp;quot;.user_id = 317248456 )) AND (&amp;quot;addresses_users&amp;quot;.user_id = 317248456 )) 
# =&amp;gt; [#&amp;lt;Address id: 718047205, email: &amp;quot;woo@thanks.com&amp;quot;&amp;gt;, #&amp;lt;Address id: 1068445024, email: &amp;quot;newguy@place.com&amp;quot;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T17:09:33+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2274</number>
      <permalink>named_scope-join-issue-nil-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope join issue, nil ids</title>
      <updated-at type="datetime">2009-03-17T17:12:41+00:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">1</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2274</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've had similar problem (wrong ids), when used named_scope through HAMTB model.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've had similar problem (wrong ids), when used named_scope
through HAMTB model.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-21T00:57:54+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2274</number>
      <permalink>named_scope-join-issue-nil-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>ids joins wrong</tag>
      <title>named_scope join issue, nil ids</title>
      <updated-at type="datetime">2009-03-21T00:57:58+00:00</updated-at>
      <user-id type="integer">16383</user-id>
      <version type="integer">2</version>
      <user-name>Dmitry Polushkin</user-name>
      <creator-name>Greg Hazel</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2274</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You need to specify :select =&gt; 'addresses.*' or else the id column from the joined table clobbers the one from the addresses table.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You need to specify :select =&amp;gt; 'addresses.*' or else the id
column from the joined table clobbers the one from the addresses
table.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-10T15:59:27+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2274</number>
      <permalink>named_scope-join-issue-nil-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>ids joins wrong</tag>
      <title>named_scope join issue, nil ids</title>
      <updated-at type="datetime">2009-05-10T15:59:32+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Greg Hazel</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2274</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Frederick Cheung: Are you sure that it works correctly?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Frederick Cheung: Are you sure that it works correctly?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-11T14:10:44+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2274</number>
      <permalink>named_scope-join-issue-nil-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>ids joins wrong</tag>
      <title>named_scope join issue, nil ids</title>
      <updated-at type="datetime">2009-05-11T14:10:47+01:00</updated-at>
      <user-id type="integer">16383</user-id>
      <version type="integer">4</version>
      <user-name>Dmitry Polushkin</user-name>
      <creator-name>Greg Hazel</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2274</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>been there, done that got the tshirt (there was also a thread on the core list a while back proposing that select =&gt; 'foo.\*' be the default). find default :select to 'table.\*' when you specify :joins, named_scope should quite possible do that too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;been there, done that got the tshirt (there was also a thread on
the core list a while back proposing that select =&amp;gt; 'foo.*' be
the default). find default :select to 'table.*' when you specify
:joins, named_scope should quite possible do that too.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-11T14:39:55+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2274</number>
      <permalink>named_scope-join-issue-nil-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>ids joins wrong</tag>
      <title>named_scope join issue, nil ids</title>
      <updated-at type="datetime">2009-05-11T14:40:29+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">5</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Greg Hazel</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2274</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
