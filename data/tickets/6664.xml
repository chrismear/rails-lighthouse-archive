<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-02T22:52:54+01:00</created-at>
  <creator-id type="integer">63478</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6664</number>
  <permalink>active-support-class-to-path-conventions-for-autoload</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>active_support autoload conventions</tag>
  <title>active support class to path conventions for autoload</title>
  <updated-at type="datetime">2011-04-02T22:55:54+01:00</updated-at>
  <user-id type="integer">63478</user-id>
  <version type="integer">2</version>
  <user-name>Dawid Marcin Grzesiak</user-name>
  <creator-name>Dawid Marcin Grzesiak</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6664</url>
  <priority-name nil="true"></priority-name>
  <original-body>I want to have an ability to setup my own class to path convention for autoloading feature, ie:

Normally AS works like that
MyNew::Class::Path =&gt; my_new/class/path

I want this:
MyNew::Class::Path =&gt; MyNew/Class/Path

To do this I introduced:

+      class_to_path_conventions = []
+      class_to_path_conventions &lt;&lt; lambda { |c| c.underscore }
+      class_to_path_conventions &lt;&lt; lambda { |c| c.gsub('::', '/') }

Where the first convention is ruby and rails convention, while the second one is mine.
We don't need to hardcode my convention into Rails, but what do you think to setup an API to add someone others conventions?
Please, advise where we can put class_to_path_conventions array into API.</original-body>
  <latest-body>I want to have an ability to setup my own class to path convention for autoloading feature, ie:

Normally AS works like that
MyNew::Class::Path =&gt; my_new/class/path

I want this:
MyNew::Class::Path =&gt; MyNew/Class/Path

To do this I introduced:

+      class_to_path_conventions = []
+      class_to_path_conventions &lt;&lt; lambda { |c| c.underscore }
+      class_to_path_conventions &lt;&lt; lambda { |c| c.gsub('::', '/') }

Where the first convention is ruby and rails convention, while the second one is mine.
We don't need to hardcode my convention into Rails, but what do you think to setup an API to add someone others conventions?
Please, advise where we can put class_to_path_conventions array into API.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I want to have an ability to setup my own class to path
convention for autoloading feature, ie:&lt;/p&gt;
&lt;p&gt;Normally AS works like that&lt;br&gt;
MyNew::Class::Path =&amp;gt; my_new/class/path&lt;/p&gt;
&lt;p&gt;I want this:&lt;br&gt;
MyNew::Class::Path =&amp;gt; MyNew/Class/Path&lt;/p&gt;
&lt;p&gt;To do this I introduced:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;class_to_path_conventions = []&lt;/li&gt;
&lt;li&gt;class_to_path_conventions &amp;lt;&amp;lt; lambda { |c| c.underscore
}&lt;/li&gt;
&lt;li&gt;class_to_path_conventions &amp;lt;&amp;lt; lambda { |c| c.gsub('::',
'/') }&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where the first convention is ruby and rails convention, while
the second one is mine.&lt;br&gt;
We don't need to hardcode my convention into Rails, but what do you
think to setup an API to add someone others conventions?&lt;br&gt;
Please, advise where we can put class_to_path_conventions array
into API.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I want to have an ability to setup my own class to path convention for autoloading feature, ie:

Normally AS works like that
MyNew::Class::Path =&gt; my_new/class/path

I want this:
MyNew::Class::Path =&gt; MyNew/Class/Path

To do this I introduced:

+      class_to_path_conventions = []
+      class_to_path_conventions &lt;&lt; lambda { |c| c.underscore }
+      class_to_path_conventions &lt;&lt; lambda { |c| c.gsub('::', '/') }

Where the first convention is ruby and rails convention, while the second one is mine.
We don't need to hardcode my convention into Rails, but what do you think to setup an API to add someone others conventions?
Please, advise where we can put class_to_path_conventions array into API.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I want to have an ability to setup my own class to path
convention for autoloading feature, ie:&lt;/p&gt;
&lt;p&gt;Normally AS works like that&lt;br&gt;
MyNew::Class::Path =&amp;gt; my_new/class/path&lt;/p&gt;
&lt;p&gt;I want this:&lt;br&gt;
MyNew::Class::Path =&amp;gt; MyNew/Class/Path&lt;/p&gt;
&lt;p&gt;To do this I introduced:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;class_to_path_conventions = []&lt;/li&gt;
&lt;li&gt;class_to_path_conventions &amp;lt;&amp;lt; lambda { |c| c.underscore
}&lt;/li&gt;
&lt;li&gt;class_to_path_conventions &amp;lt;&amp;lt; lambda { |c| c.gsub('::',
'/') }&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where the first convention is ruby and rails convention, while
the second one is mine.&lt;br&gt;
We don't need to hardcode my convention into Rails, but what do you
think to setup an API to add someone others conventions?&lt;br&gt;
Please, advise where we can put class_to_path_conventions array
into API.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-02T22:52:54+01:00</created-at>
      <creator-id type="integer">63478</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6664</number>
      <permalink>active-support-class-to-path-conventions-for-autoload</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_support autoload conventions</tag>
      <title>active support class to path conventions for autoload</title>
      <updated-at type="datetime">2011-04-02T22:53:54+01:00</updated-at>
      <user-id type="integer">63478</user-id>
      <version type="integer">1</version>
      <user-name>Dawid Marcin Grzesiak</user-name>
      <creator-name>Dawid Marcin Grzesiak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6664</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-02T22:55:52+01:00</created-at>
      <creator-id type="integer">63478</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6664</number>
      <permalink>active-support-class-to-path-conventions-for-autoload</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_support autoload conventions</tag>
      <title>active support class to path conventions for autoload</title>
      <updated-at type="datetime">2011-04-02T22:55:54+01:00</updated-at>
      <user-id type="integer">63478</user-id>
      <version type="integer">2</version>
      <user-name>Dawid Marcin Grzesiak</user-name>
      <creator-name>Dawid Marcin Grzesiak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6664</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f39cd1d890264370c51e6ec33ef5ac170d6bb303</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-04-02T22:55:53+01:00</created-at>
      <filename>my_new_patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">991776</id>
      <size type="integer">2881</size>
      <uploader-id type="integer">63478</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/991776/my_new_patch.diff</url>
    </attachment>
  </attachments>
</ticket>
