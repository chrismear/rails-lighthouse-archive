From 7b2f16812a687dc0a23b9fc583b2ff38651248eb Mon Sep 17 00:00:00 2001
From: Tore Darell <toredarell@gmail.com>
Date: Mon, 2 Aug 2010 21:15:44 +0200
Subject: [PATCH] Remove or fix non-working examples and add a few tests to Dirty [#5185 state:resolved]

---
 activemodel/lib/active_model/dirty.rb |    9 +---
 activemodel/test/cases/dirty_test.rb  |   90 +++++++++++++++++++++++++++++++--
 2 files changed, 87 insertions(+), 12 deletions(-)

diff --git a/activemodel/lib/active_model/dirty.rb b/activemodel/lib/active_model/dirty.rb
index 5ea7636..2516377 100644
--- a/activemodel/lib/active_model/dirty.rb
+++ b/activemodel/lib/active_model/dirty.rb
@@ -37,12 +37,13 @@ module ActiveModel
   #     end
   #   
   #     def name=(val)
-  #       name_will_change!
+  #       name_will_change! unless val == @name
   #       @name = val
   #     end
   #   
   #     def save
   #       @previously_changed = changes
+  #       @changed_attributes.clear
   #     end
   #   
   #   end
@@ -77,12 +78,6 @@ module ActiveModel
   #   person.changed        # => ['name']
   #   person.changes        # => { 'name' => ['Bill', 'Bob'] }
   #
-  # Resetting an attribute returns it to its original state:
-  #   person.reset_name!    # => 'Bill'
-  #   person.changed?       # => false
-  #   person.name_changed?  # => false
-  #   person.name           # => 'Bill'
-  #
   # If an attribute is modified in-place then make use of <tt>[attribute_name]_will_change!</tt>
   # to mark that the attribute is changing. Otherwise ActiveModel can't track changes to 
   # in-place attributes.
diff --git a/activemodel/test/cases/dirty_test.rb b/activemodel/test/cases/dirty_test.rb
index e1a35be..858ae9c 100644
--- a/activemodel/test/cases/dirty_test.rb
+++ b/activemodel/test/cases/dirty_test.rb
@@ -3,10 +3,11 @@ require "cases/helper"
 class DirtyTest < ActiveModel::TestCase
   class DirtyModel
     include ActiveModel::Dirty
-    define_attribute_methods [:name]
+    define_attribute_methods [:name, :color]
 
     def initialize
       @name = nil
+      @color = nil
     end
 
     def name
@@ -17,13 +18,92 @@ class DirtyTest < ActiveModel::TestCase
       name_will_change!
       @name = val
     end
+
+    def color
+      @color
+    end
+
+    def color=(val)
+      color_will_change! unless val == @color
+      @color = val
+    end
+
+    def save
+      @previously_changed = changes
+      @changed_attributes.clear
+    end
+  end
+
+  setup do
+    @model = DirtyModel.new
+  end
+
+  test "setting attribute will result in change" do
+    assert !@model.changed?
+    assert !@model.name_changed?
+    @model.name = "Ringo"
+    assert @model.changed?
+    assert @model.name_changed?
+  end
+
+  test "list of changed attributes" do
+    assert_equal [], @model.changed
+    @model.name = "Paul"
+    assert_equal ['name'], @model.changed
+  end
+
+  test "changes to attribute values" do
+    assert !@model.changes['name']
+    @model.name = "John"
+    assert_equal [nil, "John"], @model.changes['name']
   end
 
   test "changes accessible through both strings and symbols" do
-    model = DirtyModel.new
-    model.name = "David"
-    assert_not_nil model.changes[:name]
-    assert_not_nil model.changes['name']
+    @model.name = "David"
+    assert_not_nil @model.changes[:name]
+    assert_not_nil @model.changes['name']
+  end
+
+  test "attribute mutation" do
+    @model.instance_variable_set("@name", "Yam")
+    assert !@model.name_changed?
+    @model.name.replace("Hadad")
+    assert !@model.name_changed?
+    @model.name_will_change!
+    @model.name.replace("Baal")
+    assert @model.name_changed?
+  end
+
+  test "resetting attribute" do
+    @model.name = "Bob"
+    @model.reset_name!
+    assert_nil @model.name
+    #assert !@model.name_changed #Doesn't work yet
+  end
+
+  test "setting color to same value should not result in change being recorded" do
+    @model.color = "red"
+    assert @model.color_changed?
+    @model.save
+    assert !@model.color_changed?
+    assert !@model.changed?
+    @model.color = "red"
+    assert !@model.color_changed?
+    assert !@model.changed?
+  end
+
+  test "saving should reset model's changed status" do
+    @model.name = "Alf"
+    assert @model.changed?
+    @model.save
+    assert !@model.changed?
+    assert !@model.name_changed?
+  end
+
+  test "saving should preserve previous changes" do
+    @model.name = "Jericho Cane"
+    @model.save
+    assert_equal [nil, "Jericho Cane"], @model.previous_changes['name']
   end
 
 end
-- 
1.6.5.1

