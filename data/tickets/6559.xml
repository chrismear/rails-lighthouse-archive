<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-04-22T06:48:03+01:00</created-at>
  <creator-id type="integer">65158</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6559</number>
  <permalink>activerecord-fails-with-both-non-ascii-string-and-binary-on-sqlite3adapter</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>ActiveRecord fails with both non ASCII string and binary on SQLite3Adapter</title>
  <updated-at type="datetime">2011-04-22T06:48:03+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">5</version>
  <user-name>Repository</user-name>
  <creator-name>naruse</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6559</url>
  <priority-name>Low</priority-name>
  <original-body># Summary #

ActiveRecord (and Arel) generates a SQL statement string from arguments.
When arguments consists non ASCII string (for example UTF-8) and binary,
it raises Encoding::CompatibilityError.

# How to reproduce #

For example create an app by following commands:

@@@ ruby
rails new foo
cd foo
rails *scaffold *bar name:string data:binary
rails server
@@@

And show http://127.0.0.1:3000/bar/new and input two fields some UTF-8 string (non ASCII),
and push [Create Bar] button.
Then it occurs error.

# Why #

ActiveRecord (Arel) generates an SQL statement from those arguments (UTF-8 string and binary).
So it concats UTF-8 string and binary at somewhere, and raises Encoding::CompatibilityError.
(on arel 2.0.8 it is lib/arel/visitors/to_sql.rb:70:in `join')

# How to fix #

To fix this, the simple answer is force the same encoding to both string, but how and what?
This question is resulted an another question by a policy &quot;a string should be valid&quot;:
 &quot;What is the correct encoding of a resulted SQL statement string.&quot;
There seems two options how it should be.

## UTF-8 ##

If a resulted SQL statement string should be UTF-8, binary should be escaped.
I wrote a patch for SQL3Adapter:

@@@ ruby
% diff -u lib/active_record/connection_adapters/sqlite3_adapter.rb.orig lib/active_record/connection_adapters/sqlite3_adapter.rb
--- lib/active_record/connection_adapters/sqlite3_adapter.rb.orig 2011-03-11 11:10:39.000000000 +0900
+++ lib/active_record/connection_adapters/sqlite3_adapter.rb   2011-03-11 11:11:10.000000000 +0900
@@ -38,6 +38,15 @@
   module ConnectionAdapters #:nodoc:
     class SQLite3Adapter &lt; SQLiteAdapter # :nodoc:
 
+      def quote(value, column = nil)
+        if value.kind_of?(String) &amp;&amp; column &amp;&amp; column.type == :binary &amp;&amp; column.class.respond_to?(:string_to_binary)
+          s = column.class.string_to_binary(value).unpack(&quot;H*&quot;)[0]
+          &quot;x'#{s}'&quot;
+        else
+          super
+        end
+      end
+
       # Returns the current database encoding format as a string, eg: 'UTF-8'
       def encoding
         if @connection.respond_to?(:encoding)
@@@

## ASCII-8BIT (BINARY) ##

If it should be binary, all parts should have ASCII-8BIT encoding.
So patch should be for Arel and it is following:

@@@ ruby
% diff -u lib/arel/visitors/to_sql.rb.orig lib/arel/visitors/to_sql.rb
--- lib/arel/visitors/to_sql.rb.orig    2011-03-11 13:48:57.000000000 +0900
+++ lib/arel/visitors/to_sql.rb 2011-03-11 13:58:19.000000000 +0900
@@ -68,7 +68,9 @@
 
       def visit_Arel_Nodes_Values o
         &quot;VALUES (#{o.expressions.zip(o.columns).map { |value, column|
-          quote(value, column &amp;&amp; column.column)
+          str = quote(value, column &amp;&amp; column.column)
+          str.force_encoding(Encoding::ASCII_8BIT) if str.respond_to?(:force_encoding)
+          str
         }.join ', '})&quot;
       end
@@@

# Conclusion #

Please apply either of above patch.</original-body>
  <latest-body># Summary #

ActiveRecord (and Arel) generates a SQL statement string from arguments.
When arguments consists non ASCII string (for example UTF-8) and binary,
it raises Encoding::CompatibilityError.

# How to reproduce #

For example create an app by following commands:

@@@ ruby
rails new foo
cd foo
rails *scaffold *bar name:string data:binary
rails server
@@@

And show http://127.0.0.1:3000/bar/new and input two fields some UTF-8 string (non ASCII),
and push [Create Bar] button.
Then it occurs error.

# Why #

ActiveRecord (Arel) generates an SQL statement from those arguments (UTF-8 string and binary).
So it concats UTF-8 string and binary at somewhere, and raises Encoding::CompatibilityError.
(on arel 2.0.8 it is lib/arel/visitors/to_sql.rb:70:in `join')

# How to fix #

To fix this, the simple answer is force the same encoding to both string, but how and what?
This question is resulted an another question by a policy &quot;a string should be valid&quot;:
 &quot;What is the correct encoding of a resulted SQL statement string.&quot;
There seems two options how it should be.

## UTF-8 ##

If a resulted SQL statement string should be UTF-8, binary should be escaped.
I wrote a patch for SQL3Adapter:

@@@ ruby
% diff -u lib/active_record/connection_adapters/sqlite3_adapter.rb.orig lib/active_record/connection_adapters/sqlite3_adapter.rb
--- lib/active_record/connection_adapters/sqlite3_adapter.rb.orig 2011-03-11 11:10:39.000000000 +0900
+++ lib/active_record/connection_adapters/sqlite3_adapter.rb   2011-03-11 11:11:10.000000000 +0900
@@ -38,6 +38,15 @@
   module ConnectionAdapters #:nodoc:
     class SQLite3Adapter &lt; SQLiteAdapter # :nodoc:
 
+      def quote(value, column = nil)
+        if value.kind_of?(String) &amp;&amp; column &amp;&amp; column.type == :binary &amp;&amp; column.class.respond_to?(:string_to_binary)
+          s = column.class.string_to_binary(value).unpack(&quot;H*&quot;)[0]
+          &quot;x'#{s}'&quot;
+        else
+          super
+        end
+      end
+
       # Returns the current database encoding format as a string, eg: 'UTF-8'
       def encoding
         if @connection.respond_to?(:encoding)
@@@

## ASCII-8BIT (BINARY) ##

If it should be binary, all parts should have ASCII-8BIT encoding.
So patch should be for Arel and it is following:

@@@ ruby
% diff -u lib/arel/visitors/to_sql.rb.orig lib/arel/visitors/to_sql.rb
--- lib/arel/visitors/to_sql.rb.orig    2011-03-11 13:48:57.000000000 +0900
+++ lib/arel/visitors/to_sql.rb 2011-03-11 13:58:19.000000000 +0900
@@ -68,7 +68,9 @@
 
       def visit_Arel_Nodes_Values o
         &quot;VALUES (#{o.expressions.zip(o.columns).map { |value, column|
-          quote(value, column &amp;&amp; column.column)
+          str = quote(value, column &amp;&amp; column.column)
+          str.force_encoding(Encoding::ASCII_8BIT) if str.respond_to?(:force_encoding)
+          str
         }.join ', '})&quot;
       end
@@@

# Conclusion #

Please apply either of above patch.</latest-body>
  <original-body-html>&lt;div&gt;&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;ActiveRecord (and Arel) generates a SQL statement string from
arguments.&lt;br&gt;
When arguments consists non ASCII string (for example UTF-8) and
binary,&lt;br&gt;
it raises Encoding::CompatibilityError.&lt;/p&gt;
&lt;h1&gt;How to reproduce&lt;/h1&gt;
&lt;p&gt;For example create an app by following commands:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;rails new foo
cd foo
rails scaffold bar name:string data:binary
rails server&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And show &lt;a href=
&quot;http://127.0.0.1:3000/bar/new&quot;&gt;http://127.0.0.1:3000/bar/new&lt;/a&gt;
and input two fields some UTF-8 string (non ASCII),&lt;br&gt;
and push [Create Bar] button.&lt;br&gt;
Then it occurs error.&lt;/p&gt;
&lt;h1&gt;Why&lt;/h1&gt;
&lt;p&gt;ActiveRecord (Arel) generates an SQL statement from those
arguments (UTF-8 string and binary).&lt;br&gt;
So it concats UTF-8 string and binary at somewhere, and raises
Encoding::CompatibilityError.&lt;br&gt;
(on arel 2.0.8 it is lib/arel/visitors/to_sql.rb:70:in `join')&lt;/p&gt;
&lt;h1&gt;How to fix&lt;/h1&gt;
&lt;p&gt;To fix this, the simple answer is force the same encoding to
both string, but how and what?&lt;br&gt;
This question is resulted an another question by a policy &quot;a string
should be valid&quot;:&lt;br&gt;
&quot;What is the correct encoding of a resulted SQL statement string.&quot;
There seems two options how it should be.&lt;/p&gt;
&lt;h2&gt;UTF-8&lt;/h2&gt;
&lt;p&gt;If a resulted SQL statement string should be UTF-8, binary
should be escaped.&lt;br&gt;
I wrote a patch for SQL3Adapter:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;% diff -u lib/active_record/connection_adapters/sqlite3_adapter.rb.orig lib/active_record/connection_adapters/sqlite3_adapter.rb
--- lib/active_record/connection_adapters/sqlite3_adapter.rb.orig 2011-03-11 11:10:39.000000000 +0900
+++ lib/active_record/connection_adapters/sqlite3_adapter.rb   2011-03-11 11:11:10.000000000 +0900
@@ -38,6 +38,15 @@
   module ConnectionAdapters #:nodoc:
     class SQLite3Adapter &amp;lt; SQLiteAdapter # :nodoc:
 
+      def quote(value, column = nil)
+        if value.kind_of?(String) &amp;amp;&amp;amp; column &amp;amp;&amp;amp; column.type == :binary &amp;amp;&amp;amp; column.class.respond_to?(:string_to_binary)
+          s = column.class.string_to_binary(value).unpack(&quot;H*&quot;)[0]
+          &quot;x'#{s}'&quot;
+        else
+          super
+        end
+      end
+
       # Returns the current database encoding format as a string, eg: 'UTF-8'
       def encoding
         if @connection.respond_to?(:encoding)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;ASCII-8BIT (BINARY)&lt;/h2&gt;
&lt;p&gt;If it should be binary, all parts should have ASCII-8BIT
encoding.&lt;br&gt;
So patch should be for Arel and it is following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;% diff -u lib/arel/visitors/to_sql.rb.orig lib/arel/visitors/to_sql.rb
--- lib/arel/visitors/to_sql.rb.orig    2011-03-11 13:48:57.000000000 +0900
+++ lib/arel/visitors/to_sql.rb 2011-03-11 13:58:19.000000000 +0900
@@ -68,7 +68,9 @@
 
       def visit_Arel_Nodes_Values o
         &quot;VALUES (#{o.expressions.zip(o.columns).map { |value, column|
-          quote(value, column &amp;amp;&amp;amp; column.column)
+          str = quote(value, column &amp;amp;&amp;amp; column.column)
+          str.force_encoding(Encoding::ASCII_8BIT) if str.respond_to?(:force_encoding)
+          str
         }.join ', '})&quot;
       end&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Please apply either of above patch.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body># Summary #

ActiveRecord (and Arel) generates a SQL statement string from arguments.
When arguments consists non ASCII string (for example UTF-8) and binary,
it raises Encoding::CompatibilityError.

# How to reproduce #

For example create an app by following commands:

@@@ ruby
rails new foo
cd foo
rails *scaffold *bar name:string data:binary
rails server
@@@

And show http://127.0.0.1:3000/bar/new and input two fields some UTF-8 string (non ASCII),
and push [Create Bar] button.
Then it occurs error.

# Why #

ActiveRecord (Arel) generates an SQL statement from those arguments (UTF-8 string and binary).
So it concats UTF-8 string and binary at somewhere, and raises Encoding::CompatibilityError.
(on arel 2.0.8 it is lib/arel/visitors/to_sql.rb:70:in `join')

# How to fix #

To fix this, the simple answer is force the same encoding to both string, but how and what?
This question is resulted an another question by a policy &quot;a string should be valid&quot;:
 &quot;What is the correct encoding of a resulted SQL statement string.&quot;
There seems two options how it should be.

## UTF-8 ##

If a resulted SQL statement string should be UTF-8, binary should be escaped.
I wrote a patch for SQL3Adapter:

@@@ ruby
% diff -u lib/active_record/connection_adapters/sqlite3_adapter.rb.orig lib/active_record/connection_adapters/sqlite3_adapter.rb
--- lib/active_record/connection_adapters/sqlite3_adapter.rb.orig 2011-03-11 11:10:39.000000000 +0900
+++ lib/active_record/connection_adapters/sqlite3_adapter.rb   2011-03-11 11:11:10.000000000 +0900
@@ -38,6 +38,15 @@
   module ConnectionAdapters #:nodoc:
     class SQLite3Adapter &lt; SQLiteAdapter # :nodoc:
 
+      def quote(value, column = nil)
+        if value.kind_of?(String) &amp;&amp; column &amp;&amp; column.type == :binary &amp;&amp; column.class.respond_to?(:string_to_binary)
+          s = column.class.string_to_binary(value).unpack(&quot;H*&quot;)[0]
+          &quot;x'#{s}'&quot;
+        else
+          super
+        end
+      end
+
       # Returns the current database encoding format as a string, eg: 'UTF-8'
       def encoding
         if @connection.respond_to?(:encoding)
@@@

## ASCII-8BIT (BINARY) ##

If it should be binary, all parts should have ASCII-8BIT encoding.
So patch should be for Arel and it is following:

@@@ ruby
% diff -u lib/arel/visitors/to_sql.rb.orig lib/arel/visitors/to_sql.rb
--- lib/arel/visitors/to_sql.rb.orig    2011-03-11 13:48:57.000000000 +0900
+++ lib/arel/visitors/to_sql.rb 2011-03-11 13:58:19.000000000 +0900
@@ -68,7 +68,9 @@
 
       def visit_Arel_Nodes_Values o
         &quot;VALUES (#{o.expressions.zip(o.columns).map { |value, column|
-          quote(value, column &amp;&amp; column.column)
+          str = quote(value, column &amp;&amp; column.column)
+          str.force_encoding(Encoding::ASCII_8BIT) if str.respond_to?(:force_encoding)
+          str
         }.join ', '})&quot;
       end
@@@

# Conclusion #

Please apply either of above patch.</body>
      <body-html>&lt;div&gt;&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;ActiveRecord (and Arel) generates a SQL statement string from
arguments.&lt;br&gt;
When arguments consists non ASCII string (for example UTF-8) and
binary,&lt;br&gt;
it raises Encoding::CompatibilityError.&lt;/p&gt;
&lt;h1&gt;How to reproduce&lt;/h1&gt;
&lt;p&gt;For example create an app by following commands:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;rails new foo
cd foo
rails scaffold bar name:string data:binary
rails server&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And show &lt;a href=
&quot;http://127.0.0.1:3000/bar/new&quot;&gt;http://127.0.0.1:3000/bar/new&lt;/a&gt;
and input two fields some UTF-8 string (non ASCII),&lt;br&gt;
and push [Create Bar] button.&lt;br&gt;
Then it occurs error.&lt;/p&gt;
&lt;h1&gt;Why&lt;/h1&gt;
&lt;p&gt;ActiveRecord (Arel) generates an SQL statement from those
arguments (UTF-8 string and binary).&lt;br&gt;
So it concats UTF-8 string and binary at somewhere, and raises
Encoding::CompatibilityError.&lt;br&gt;
(on arel 2.0.8 it is lib/arel/visitors/to_sql.rb:70:in `join')&lt;/p&gt;
&lt;h1&gt;How to fix&lt;/h1&gt;
&lt;p&gt;To fix this, the simple answer is force the same encoding to
both string, but how and what?&lt;br&gt;
This question is resulted an another question by a policy &quot;a string
should be valid&quot;:&lt;br&gt;
&quot;What is the correct encoding of a resulted SQL statement string.&quot;
There seems two options how it should be.&lt;/p&gt;
&lt;h2&gt;UTF-8&lt;/h2&gt;
&lt;p&gt;If a resulted SQL statement string should be UTF-8, binary
should be escaped.&lt;br&gt;
I wrote a patch for SQL3Adapter:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;% diff -u lib/active_record/connection_adapters/sqlite3_adapter.rb.orig lib/active_record/connection_adapters/sqlite3_adapter.rb
--- lib/active_record/connection_adapters/sqlite3_adapter.rb.orig 2011-03-11 11:10:39.000000000 +0900
+++ lib/active_record/connection_adapters/sqlite3_adapter.rb   2011-03-11 11:11:10.000000000 +0900
@@ -38,6 +38,15 @@
   module ConnectionAdapters #:nodoc:
     class SQLite3Adapter &amp;lt; SQLiteAdapter # :nodoc:
 
+      def quote(value, column = nil)
+        if value.kind_of?(String) &amp;amp;&amp;amp; column &amp;amp;&amp;amp; column.type == :binary &amp;amp;&amp;amp; column.class.respond_to?(:string_to_binary)
+          s = column.class.string_to_binary(value).unpack(&quot;H*&quot;)[0]
+          &quot;x'#{s}'&quot;
+        else
+          super
+        end
+      end
+
       # Returns the current database encoding format as a string, eg: 'UTF-8'
       def encoding
         if @connection.respond_to?(:encoding)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;ASCII-8BIT (BINARY)&lt;/h2&gt;
&lt;p&gt;If it should be binary, all parts should have ASCII-8BIT
encoding.&lt;br&gt;
So patch should be for Arel and it is following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;% diff -u lib/arel/visitors/to_sql.rb.orig lib/arel/visitors/to_sql.rb
--- lib/arel/visitors/to_sql.rb.orig    2011-03-11 13:48:57.000000000 +0900
+++ lib/arel/visitors/to_sql.rb 2011-03-11 13:58:19.000000000 +0900
@@ -68,7 +68,9 @@
 
       def visit_Arel_Nodes_Values o
         &quot;VALUES (#{o.expressions.zip(o.columns).map { |value, column|
-          quote(value, column &amp;amp;&amp;amp; column.column)
+          str = quote(value, column &amp;amp;&amp;amp; column.column)
+          str.force_encoding(Encoding::ASCII_8BIT) if str.respond_to?(:force_encoding)
+          str
         }.join ', '})&quot;
       end&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Please apply either of above patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T04:59:40+00:00</created-at>
      <creator-id type="integer">65158</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6559</number>
      <permalink>activerecord-fails-with-both-non-ascii-string-and-binary-on-sqlite3adapter</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord fails with both non ASCII string and binary on SQLite3Adapter</title>
      <updated-at type="datetime">2011-03-11T05:01:31+00:00</updated-at>
      <user-id type="integer">65158</user-id>
      <version type="integer">1</version>
      <user-name>naruse</user-name>
      <creator-name>naruse</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6559</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T14:25:44+00:00</created-at>
      <creator-id type="integer">65158</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6559</number>
      <permalink>activerecord-fails-with-both-non-ascii-string-and-binary-on-sqlite3adapter</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord fails with both non ASCII string and binary on SQLite3Adapter</title>
      <updated-at type="datetime">2011-03-11T14:25:56+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>naruse</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6559</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [7222786c15eacbd432b2bce9798d3f3459f7e05f]) escaping binary data encoding when inserting to sqlite3. Thanks Naruse! [#6559 state:resolved]
https://github.com/rails/rails/commit/7222786c15eacbd432b2bce9798d3f3459f7e05f</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/7222786c15eacbd432b2bce9798d3f3459f7e05f&quot;
title=
&quot;Changeset [7222786c15eacbd432b2bce9798d3f3459f7e05f]&quot;&gt;[7222786c15eacbd432b2bce9798d3f3459f7e05f]&lt;/a&gt;)
escaping binary data encoding when inserting to sqlite3. Thanks
Naruse! [&lt;a href=&quot;/projects/8994/tickets/6559&quot; title=
&quot;Ticket #6559&quot;&gt;#6559&lt;/a&gt; state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/7222786c15eacbd432b2bce9798d3f3459f7e05f&quot;&gt;
https://github.com/rails/rails/commit/7222786c15eacbd432b2bce9798d3...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-21T21:50:17+00:00</created-at>
      <creator-id type="integer">65158</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6559</number>
      <permalink>activerecord-fails-with-both-non-ascii-string-and-binary-on-sqlite3adapter</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>ActiveRecord fails with both non ASCII string and binary on SQLite3Adapter</title>
      <updated-at type="datetime">2011-03-21T21:50:28+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">3</version>
      <user-name>Repository</user-name>
      <creator-name>naruse</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6559</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [88636f7195fc936421392740f980d17ebe77d701]) escaping binary data encoding when inserting to sqlite3. Thanks Naruse! [#6559 state:resolved]
https://github.com/rails/rails/commit/88636f7195fc936421392740f980d17ebe77d701</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/88636f7195fc936421392740f980d17ebe77d701&quot;
title=
&quot;Changeset [88636f7195fc936421392740f980d17ebe77d701]&quot;&gt;[88636f7195fc936421392740f980d17ebe77d701]&lt;/a&gt;)
escaping binary data encoding when inserting to sqlite3. Thanks
Naruse! [&lt;a href=&quot;/projects/8994/tickets/6559&quot; title=
&quot;Ticket #6559&quot;&gt;#6559&lt;/a&gt; state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/88636f7195fc936421392740f980d17ebe77d701&quot;&gt;
https://github.com/rails/rails/commit/88636f7195fc936421392740f980d...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-21T21:50:21+00:00</created-at>
      <creator-id type="integer">65158</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6559</number>
      <permalink>activerecord-fails-with-both-non-ascii-string-and-binary-on-sqlite3adapter</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>ActiveRecord fails with both non ASCII string and binary on SQLite3Adapter</title>
      <updated-at type="datetime">2011-03-21T21:50:40+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">4</version>
      <user-name>Repository</user-name>
      <creator-name>naruse</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6559</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [2ef6270f8fbbefba8d4f10504497e198d8e7deea]) Merge branch 'master' into fuuu

* master:
  Do not show optional (.:format) block for wildcard route [#6605 state:resolved]
  pushing id insertion and prefetch primary keys down to Relation#insert
  use prepared statements to fetch the last insert id
  escaping binary data encoding when inserting to sqlite3. Thanks Naruse! [#6559 state:resolved]
  schemas set by set_table_name are respected by the mysql adapter. [#5322 state:resolved]
  Reapply extensions when using except and only
  SJIS is an alias to Windows-31J in ruby trunk. Use SHIFT_JIS for this test
  Improved resolver docs a bit
  [action_view] docs for FileSystemResolver
  [action_view] added custom patterns to template resolver
https://github.com/rails/rails/commit/2ef6270f8fbbefba8d4f10504497e198d8e7deea</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/2ef6270f8fbbefba8d4f10504497e198d8e7deea&quot;
title=
&quot;Changeset [2ef6270f8fbbefba8d4f10504497e198d8e7deea]&quot;&gt;[2ef6270f8fbbefba8d4f10504497e198d8e7deea]&lt;/a&gt;)
Merge branch 'master' into fuuu&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master: Do not show optional (.:format) block for wildcard
route [&lt;a href=&quot;/projects/8994/tickets/6605&quot; title=
&quot;Ticket #6605&quot;&gt;#6605&lt;/a&gt; state:resolved] pushing id insertion and
prefetch primary keys down to Relation#insert use prepared
statements to fetch the last insert id escaping binary data
encoding when inserting to sqlite3. Thanks Naruse! [&lt;a href=
&quot;/projects/8994/tickets/6559&quot; title=&quot;Ticket #6559&quot;&gt;#6559&lt;/a&gt;
state:resolved] schemas set by set_table_name are respected by the
mysql adapter. [&lt;a href=&quot;/projects/8994/tickets/5322&quot; title=
&quot;Ticket #5322&quot;&gt;#5322&lt;/a&gt; state:resolved] Reapply extensions when
using except and only SJIS is an alias to Windows-31J in ruby
trunk. Use SHIFT_JIS for this test Improved resolver docs a bit
[action_view] docs for FileSystemResolver [action_view] added
custom patterns to template resolver &lt;a href=
&quot;https://github.com/rails/rails/commit/2ef6270f8fbbefba8d4f10504497e198d8e7deea&quot;&gt;
https://github.com/rails/rails/commit/2ef6270f8fbbefba8d4f10504497e...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-22T17:11:28+00:00</created-at>
      <creator-id type="integer">65158</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6559</number>
      <permalink>activerecord-fails-with-both-non-ascii-string-and-binary-on-sqlite3adapter</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>ActiveRecord fails with both non ASCII string and binary on SQLite3Adapter</title>
      <updated-at type="datetime">2011-03-22T17:12:22+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">5</version>
      <user-name>Repository</user-name>
      <creator-name>naruse</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6559</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>PDF to JPG Converter is a more efficient pdf to jpg conversion software
&lt;a href=&quot;http://www.oxpdf.com/pdf-creator.html&quot;&gt;PDF Creator&lt;/a&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-jpg-converter.html&quot;&gt;pdf to jpg converter&lt;/a&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-image-converter.html&quot;&gt;pdf to image converter&lt;/a&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-tiff-converter.html&quot;&gt;pdf to tiff converter&lt;/a&gt;
which is able to convert pdf to jpg format with original output quality and fast conversion speed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;PDF to JPG Converter is a more efficient pdf to jpg conversion
software&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-creator.html&quot;&gt;PDF Creator&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-jpg-converter.html&quot;&gt;pdf to jpg
converter&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-image-converter.html&quot;&gt;pdf to
image converter&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-tiff-converter.html&quot;&gt;pdf to
tiff converter&lt;/a&gt;&lt;br&gt;
which is able to convert pdf to jpg format with original output
quality and fast conversion speed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-22T04:47:37+01:00</created-at>
      <creator-id type="integer">65158</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6559</number>
      <permalink>activerecord-fails-with-both-non-ascii-string-and-binary-on-sqlite3adapter</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>ActiveRecord fails with both non ASCII string and binary on SQLite3Adapter</title>
      <updated-at type="datetime">2011-04-22T06:48:03+01:00</updated-at>
      <user-id type="integer">146598</user-id>
      <version type="integer">6</version>
      <user-name>machen</user-name>
      <creator-name>naruse</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6559</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
