<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-24T23:40:35+01:00</created-at>
  <creator-id type="integer">13705</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1107</number>
  <permalink>vendord-rails-gems-cant-be-depended</permalink>
  <priority type="integer">525</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag nil="true"></tag>
  <title>Vendor'd rails gems can't be &quot;depended&quot;</title>
  <updated-at type="datetime">2009-01-18T06:49:55+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">6</version>
  <user-name>Pratik</user-name>
  <creator-name>Steven Parkes</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1107</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>If a gem depends on a rails gem, e.g., activesupport, if the vendor'd version is not also in the system repository, an error occurs.

For example, right now I have 2-1-stable vendor'd, which reports its gem version as 2.1.2. If I config.gem thoughtbot-factory_girl, script/console errors out with
@@@
/usr/lib64/ruby/site_ruby/1.8/rubygems.rb:150:in `activate':Gem::Exception: can't activate activesupport (&gt;= 1.0, runtime), already activated activesupport-2.1.2
@@@

In initalizer.rb, rails bashes gem's Gem.loaded_specs[stub] so that it knows activesupport is loaded. However, when trying to do the version matching, this isn't enough to get  gem to consider the vendor'd rails version as possibility.

Changing
@@@
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
  end
end
@@@
to
@@@
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
  end
  Gem.source_index.add_spec(Gem.loaded_specs[stub])
end
@@@
makes the vendor'd version a valid candidate and fixes the problem. This doesn't force the vendor'd version to be okay: it's still checked against the requiring gem's spec and will still error out if the vendor'd version doesn't meet the requirements.</original-body>
  <latest-body>If a gem depends on a rails gem, e.g., activesupport, if the vendor'd version is not also in the system repository, an error occurs.

For example, right now I have 2-1-stable vendor'd, which reports its gem version as 2.1.2. If I config.gem thoughtbot-factory_girl, script/console errors out with
@@@
/usr/lib64/ruby/site_ruby/1.8/rubygems.rb:150:in `activate':Gem::Exception: can't activate activesupport (&gt;= 1.0, runtime), already activated activesupport-2.1.2
@@@

In initalizer.rb, rails bashes gem's Gem.loaded_specs[stub] so that it knows activesupport is loaded. However, when trying to do the version matching, this isn't enough to get  gem to consider the vendor'd rails version as possibility.

Changing
@@@
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
  end
end
@@@
to
@@@
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
  end
  Gem.source_index.add_spec(Gem.loaded_specs[stub])
end
@@@
makes the vendor'd version a valid candidate and fixes the problem. This doesn't force the vendor'd version to be okay: it's still checked against the requiring gem's spec and will still error out if the vendor'd version doesn't meet the requirements.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If a gem depends on a rails gem, e.g., activesupport, if the
vendor'd version is not also in the system repository, an error
occurs.&lt;/p&gt;
&lt;p&gt;For example, right now I have 2-1-stable vendor'd, which reports
its gem version as 2.1.2. If I config.gem thoughtbot-factory_girl,
script/console errors out with&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
/usr/lib64/ruby/site_ruby/1.8/rubygems.rb:150:in `activate':Gem::Exception: can't activate activesupport (&amp;gt;= 1.0, runtime), already activated activesupport-2.1.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In initalizer.rb, rails bashes gem's Gem.loaded_specs[stub] so
that it knows activesupport is loaded. However, when trying to do
the version matching, this isn't enough to get gem to consider the
vendor'd rails version as possibility.&lt;/p&gt;
&lt;p&gt;Changing&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
  end
  Gem.source_index.add_spec(Gem.loaded_specs[stub])
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;makes the vendor'd version a valid candidate and fixes the
problem. This doesn't force the vendor'd version to be okay: it's
still checked against the requiring gem's spec and will still error
out if the vendor'd version doesn't meet the requirements.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If a gem depends on a rails gem, e.g., activesupport, if the vendor'd version is not also in the system repository, an error occurs.

For example, right now I have 2-1-stable vendor'd, which reports its gem version as 2.1.2. If I config.gem thoughtbot-factory_girl, script/console errors out with
@@@
/usr/lib64/ruby/site_ruby/1.8/rubygems.rb:150:in `activate':Gem::Exception: can't activate activesupport (&gt;= 1.0, runtime), already activated activesupport-2.1.2
@@@

In initalizer.rb, rails bashes gem's Gem.loaded_specs[stub] so that it knows activesupport is loaded. However, when trying to do the version matching, this isn't enough to get  gem to consider the vendor'd rails version as possibility.

Changing
@@@
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
  end
end
@@@
to
@@@
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
  end
  Gem.source_index.add_spec(Gem.loaded_specs[stub])
end
@@@
makes the vendor'd version a valid candidate and fixes the problem. This doesn't force the vendor'd version to be okay: it's still checked against the requiring gem's spec and will still error out if the vendor'd version doesn't meet the requirements.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If a gem depends on a rails gem, e.g., activesupport, if the
vendor'd version is not also in the system repository, an error
occurs.&lt;/p&gt;
&lt;p&gt;For example, right now I have 2-1-stable vendor'd, which reports
its gem version as 2.1.2. If I config.gem thoughtbot-factory_girl,
script/console errors out with&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
/usr/lib64/ruby/site_ruby/1.8/rubygems.rb:150:in `activate':Gem::Exception: can't activate activesupport (&amp;gt;= 1.0, runtime), already activated activesupport-2.1.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In initalizer.rb, rails bashes gem's Gem.loaded_specs[stub] so
that it knows activesupport is loaded. However, when trying to do
the version matching, this isn't enough to get gem to consider the
vendor'd rails version as possibility.&lt;/p&gt;
&lt;p&gt;Changing&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
  end
  Gem.source_index.add_spec(Gem.loaded_specs[stub])
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;makes the vendor'd version a valid candidate and fixes the
problem. This doesn't force the vendor'd version to be okay: it's
still checked against the requiring gem's spec and will still error
out if the vendor'd version doesn't meet the requirements.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-24T23:40:35+01:00</created-at>
      <creator-id type="integer">13705</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1107</number>
      <permalink>vendord-rails-gems-cant-be-depended</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Vendor'd rails gems can't be &quot;depended&quot;</title>
      <updated-at type="datetime">2008-09-24T23:40:39+01:00</updated-at>
      <user-id type="integer">13705</user-id>
      <version type="integer">1</version>
      <user-name>Steven Parkes</user-name>
      <creator-name>Steven Parkes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1107</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Well, the principle may be right, but the patch is a little light. For other functions (e.g., rake spec), gem is now going to want spec.loaded_from to be something other than nil for the stub specs

Setting it to &quot;&quot;, i.e.,
@@@
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
    s.loaded_from = &quot;&quot;
  end
  Gem.source_index.add_spec(Gem.loaded_specs[stub])
end
@@@
is certainly not right, but I'm not sure what is. Gem wants the gem to be in a repository and vendor/rails doesn't have gem repository layout.

In any case, its enough to get gem to be able to continue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well, the principle may be right, but the patch is a little
light. For other functions (e.g., rake spec), gem is now going to
want spec.loaded_from to be something other than nil for the stub
specs&lt;/p&gt;
&lt;p&gt;Setting it to &quot;&quot;, i.e.,&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
stubs.each do |stub|
  Gem.loaded_specs[stub] = Gem::Specification.new do |s|
    s.name = stub
    s.version = Rails::VERSION::STRING
    s.loaded_from = &amp;quot;&amp;quot;
  end
  Gem.source_index.add_spec(Gem.loaded_specs[stub])
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is certainly not right, but I'm not sure what is. Gem wants the
gem to be in a repository and vendor/rails doesn't have gem
repository layout.&lt;/p&gt;
&lt;p&gt;In any case, its enough to get gem to be able to continue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-25T00:20:37+01:00</created-at>
      <creator-id type="integer">13705</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1107</number>
      <permalink>vendord-rails-gems-cant-be-depended</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Vendor'd rails gems can't be &quot;depended&quot;</title>
      <updated-at type="datetime">2008-09-25T00:20:43+01:00</updated-at>
      <user-id type="integer">13705</user-id>
      <version type="integer">2</version>
      <user-name>Steven Parkes</user-name>
      <creator-name>Steven Parkes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1107</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I believe this is fixed with latest gem dependencies updates, can you check?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I believe this is fixed with latest gem dependencies updates,
can you check?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-07T20:43:23+01:00</created-at>
      <creator-id type="integer">13705</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1107</number>
      <permalink>vendord-rails-gems-cant-be-depended</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Vendor'd rails gems can't be &quot;depended&quot;</title>
      <updated-at type="datetime">2008-10-07T20:43:29+01:00</updated-at>
      <user-id type="integer">192</user-id>
      <version type="integer">3</version>
      <user-name>Mislav</user-name>
      <creator-name>Steven Parkes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1107</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, #1128 definitely fixes this issue for us.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, &lt;a href=&quot;/projects/8994/tickets/1128&quot; title=&quot;Ticket #1128&quot;&gt;#1128&lt;/a&gt; definitely fixes this issue for us.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-07T21:35:02+01:00</created-at>
      <creator-id type="integer">13705</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1107</number>
      <permalink>vendord-rails-gems-cant-be-depended</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Vendor'd rails gems can't be &quot;depended&quot;</title>
      <updated-at type="datetime">2008-10-07T21:35:05+01:00</updated-at>
      <user-id type="integer">192</user-id>
      <version type="integer">4</version>
      <user-name>Mislav</user-name>
      <creator-name>Steven Parkes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1107</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yup; the latest #1128 patch works for me.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yup; the latest &lt;a href=&quot;/projects/8994/tickets/1128&quot; title=&quot;Ticket #1128&quot;&gt;#1128&lt;/a&gt; patch works for me.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-07T22:08:33+01:00</created-at>
      <creator-id type="integer">13705</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1107</number>
      <permalink>vendord-rails-gems-cant-be-depended</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Vendor'd rails gems can't be &quot;depended&quot;</title>
      <updated-at type="datetime">2008-10-07T22:08:38+01:00</updated-at>
      <user-id type="integer">13705</user-id>
      <version type="integer">5</version>
      <user-name>Steven Parkes</user-name>
      <creator-name>Steven Parkes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1107</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-18T06:49:54+00:00</created-at>
      <creator-id type="integer">13705</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1107</number>
      <permalink>vendord-rails-gems-cant-be-depended</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag nil="true"></tag>
      <title>Vendor'd rails gems can't be &quot;depended&quot;</title>
      <updated-at type="datetime">2009-01-18T06:49:55+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">6</version>
      <user-name>Pratik</user-name>
      <creator-name>Steven Parkes</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1107</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
