From 42b1a5f278382c341bf14e1e0800ebc807c22550 Mon Sep 17 00:00:00 2001
From: Kieran Pilkington <kieran@katipo.co.nz>
Date: Sun, 28 Mar 2010 08:58:18 +1300
Subject: [PATCH] Add a few missing requires in ActiveModel Dirty

---
 activemodel/lib/active_model/dirty.rb |   29 ++++++++++++++++-------------
 1 files changed, 16 insertions(+), 13 deletions(-)

diff --git a/activemodel/lib/active_model/dirty.rb b/activemodel/lib/active_model/dirty.rb
index cb67ef7..1da0827 100644
--- a/activemodel/lib/active_model/dirty.rb
+++ b/activemodel/lib/active_model/dirty.rb
@@ -1,44 +1,47 @@
+require 'active_support/concern'
+require 'active_model/attribute_methods'
+require 'active_support/core_ext/object/duplicable'
 require 'active_support/hash_with_indifferent_access'
 
 module ActiveModel
   # <tt>ActiveModel::Dirty</tt> provides a way to track changes in your
   # object in the same way as ActiveRecord does.
-  # 
+  #
   # The requirements to implement ActiveModel::Dirty are:
   #
   # * <tt>include ActiveModel::Dirty</tt> in your object
   # * Call <tt>define_attribute_methods</tt> passing each method you want to track
   # * Call <tt>attr_name_will_change!</tt> before each change to the tracked attribute
-  # 
+  #
   # If you wish to also track previous changes on save or update, you need to add
-  # 
+  #
   #   @previously_changed = changes
-  # 
+  #
   # inside of your save or update method.
-  # 
+  #
   # A minimal implementation could be:
-  # 
+  #
   #   class Person
-  #   
+  #
   #     include ActiveModel::Dirty
-  #   
+  #
   #     define_attribute_methods [:name]
-  #   
+  #
   #     def name
   #       @name
   #     end
-  #   
+  #
   #     def name=(val)
   #       name_will_change!
   #       @name = val
   #     end
-  #   
+  #
   #     def save
   #       @previously_changed = changes
   #     end
-  #   
+  #
   #   end
-  # 
+  #
   # == Examples:
   #
   # A newly instantiated object is unchanged:
-- 
1.6.6

