<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-13T20:19:36+01:00</created-at>
  <creator-id type="integer">40490</creator-id>
  <milestone-due-on type="datetime">2011-02-27T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">101623</milestone-id>
  <number type="integer">2801</number>
  <permalink>incorrect-sql-from-has_many-through</permalink>
  <priority type="integer">1901</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>:through :through_conditions bugmash has_many has_many_through patch</tag>
  <title>incorrect sql from has_many :through </title>
  <updated-at type="datetime">2011-02-12T21:58:20+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">14</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Wildgoose</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
  <milestone-title>3.0.5</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>It would appear that AR is generating incorrect SQL for a :through relationship if the middle relationship is a &quot;belongs_to&quot;

It's not really clear from the code that this can ever have worked, so would appreciate some advice.

The end result is that I end up with the error (formatted for clarity):

Mysql::Error: Unknown column 'users.user_id' in 'on clause': 
SELECT count(DISTINCT `fleet_agents`.id) AS count_all 
FROM `fleet_agents`  
LEFT OUTER JOIN `users` ON (`fleet_agents`.`id` = `users`.`user_id`)  
LEFT OUTER JOIN `position_mappings` ON (`position_mappings`.`user_id` = `users`.`id`)  

Given:

class FleetAgent &lt; ActiveRecord::Base
  belongs_to :user
  has_many :position_mappings, :through =&gt; :user
end

Trigger the error with:
FleetAgent.count(:include=&gt; [:position_mappings])


Basically the first &quot;LEFT OUTER JOIN&quot; clause has it's keys and tables mixed up.  Its a belongs to, so should be &quot;fleet_agents.user_id = users.id&quot;



The relevant chunk of code seems to be   associations.rb :2051

                      &quot; #{join_type} %s ON (%s.%s = %s.%s%s%s%s) &quot; % [
                        table_alias_for(through_reflection.klass.table_name, aliased_join_table_name),
                        connection.quote_table_name(parent.aliased_table_name),
                        connection.quote_column_name(parent.primary_key),
                        connection.quote_table_name(aliased_join_table_name),
                        connection.quote_column_name(jt_foreign_key),
                        jt_as_extra, jt_source_extra, jt_sti_extra
                      ] +
                      ... second clause is correct ...

Here we can see &quot;parent.aliased_table_name . parent.primary_key&quot;, which is never going to be a good pairing for a belongs_to relationship.  In fact it seems hardwired for a &quot;has_many&quot; interim relationship?


The problem is now highlighted, but as someone who doesn't stare into the rails internals too often I'm struggling to propose the correct solution.

For example looking at the code bath for a normal &quot;belongs_to&quot; and things are completely different there.. In my case reversing the keys is the solution, but that's clearly a coincidence in naming and obviously the reflections need adapting somehow.  Also the return value obviously needs to become specific to whether it's a belongs_to or has_many (I'm not even sure how to see what kind of a relationship it is?)

Can someone help take this a bit further and propose a fix?</original-body>
  <latest-body>It would appear that AR is generating incorrect SQL for a :through relationship if the middle relationship is a &quot;belongs_to&quot;

It's not really clear from the code that this can ever have worked, so would appreciate some advice.

The end result is that I end up with the error (formatted for clarity):

Mysql::Error: Unknown column 'users.user_id' in 'on clause': 
SELECT count(DISTINCT `fleet_agents`.id) AS count_all 
FROM `fleet_agents`  
LEFT OUTER JOIN `users` ON (`fleet_agents`.`id` = `users`.`user_id`)  
LEFT OUTER JOIN `position_mappings` ON (`position_mappings`.`user_id` = `users`.`id`)  

Given:

class FleetAgent &lt; ActiveRecord::Base
  belongs_to :user
  has_many :position_mappings, :through =&gt; :user
end

Trigger the error with:
FleetAgent.count(:include=&gt; [:position_mappings])


Basically the first &quot;LEFT OUTER JOIN&quot; clause has it's keys and tables mixed up.  Its a belongs to, so should be &quot;fleet_agents.user_id = users.id&quot;



The relevant chunk of code seems to be   associations.rb :2051

                      &quot; #{join_type} %s ON (%s.%s = %s.%s%s%s%s) &quot; % [
                        table_alias_for(through_reflection.klass.table_name, aliased_join_table_name),
                        connection.quote_table_name(parent.aliased_table_name),
                        connection.quote_column_name(parent.primary_key),
                        connection.quote_table_name(aliased_join_table_name),
                        connection.quote_column_name(jt_foreign_key),
                        jt_as_extra, jt_source_extra, jt_sti_extra
                      ] +
                      ... second clause is correct ...

Here we can see &quot;parent.aliased_table_name . parent.primary_key&quot;, which is never going to be a good pairing for a belongs_to relationship.  In fact it seems hardwired for a &quot;has_many&quot; interim relationship?


The problem is now highlighted, but as someone who doesn't stare into the rails internals too often I'm struggling to propose the correct solution.

For example looking at the code bath for a normal &quot;belongs_to&quot; and things are completely different there.. In my case reversing the keys is the solution, but that's clearly a coincidence in naming and obviously the reflections need adapting somehow.  Also the return value obviously needs to become specific to whether it's a belongs_to or has_many (I'm not even sure how to see what kind of a relationship it is?)

Can someone help take this a bit further and propose a fix?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;It would appear that AR is generating incorrect SQL for a
:through relationship if the middle relationship is a
&quot;belongs_to&quot;&lt;/p&gt;
&lt;p&gt;It's not really clear from the code that this can ever have
worked, so would appreciate some advice.&lt;/p&gt;
&lt;p&gt;The end result is that I end up with the error (formatted for
clarity):&lt;/p&gt;
&lt;p&gt;Mysql::Error: Unknown column 'users.user_id' in 'on clause':
SELECT count(DISTINCT &lt;code&gt;fleet_agents&lt;/code&gt;.id) AS count_all
FROM &lt;code&gt;fleet_agents&lt;/code&gt;&lt;br&gt;
LEFT OUTER JOIN &lt;code&gt;users&lt;/code&gt; ON
(&lt;code&gt;fleet_agents&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;users&lt;/code&gt;.&lt;code&gt;user_id&lt;/code&gt;)&lt;br&gt;
LEFT OUTER JOIN &lt;code&gt;position_mappings&lt;/code&gt; ON
(&lt;code&gt;position_mappings&lt;/code&gt;.&lt;code&gt;user_id&lt;/code&gt; =
&lt;code&gt;users&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt;)&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Given:&lt;/p&gt;
&lt;p&gt;class FleetAgent &amp;lt; ActiveRecord::Base belongs_to :user
has_many :position_mappings, :through =&amp;gt; :user end&lt;/p&gt;
&lt;p&gt;Trigger the error with: FleetAgent.count(:include=&amp;gt;
[:position_mappings])&lt;/p&gt;
&lt;p&gt;Basically the first &quot;LEFT OUTER JOIN&quot; clause has it's keys and
tables mixed up. Its a belongs to, so should be
&quot;fleet_agents.user_id = users.id&quot;&lt;/p&gt;
&lt;p&gt;The relevant chunk of code seems to be associations.rb :2051&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;                  &quot; #{join_type} %s ON (%s.%s = %s.%s%s%s%s) &quot; % [
                    table_alias_for(through_reflection.klass.table_name, aliased_join_table_name),
                    connection.quote_table_name(parent.aliased_table_name),
                    connection.quote_column_name(parent.primary_key),
                    connection.quote_table_name(aliased_join_table_name),
                    connection.quote_column_name(jt_foreign_key),
                    jt_as_extra, jt_source_extra, jt_sti_extra
                  ] +
                  ... second clause is correct ...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here we can see &quot;parent.aliased_table_name .
parent.primary_key&quot;, which is never going to be a good pairing for
a belongs_to relationship. In fact it seems hardwired for a
&quot;has_many&quot; interim relationship?&lt;/p&gt;
&lt;p&gt;The problem is now highlighted, but as someone who doesn't stare
into the rails internals too often I'm struggling to propose the
correct solution.&lt;/p&gt;
&lt;p&gt;For example looking at the code bath for a normal &quot;belongs_to&quot;
and things are completely different there.. In my case reversing
the keys is the solution, but that's clearly a coincidence in
naming and obviously the reflections need adapting somehow. Also
the return value obviously needs to become specific to whether it's
a belongs_to or has_many (I'm not even sure how to see what kind of
a relationship it is?)&lt;/p&gt;
&lt;p&gt;Can someone help take this a bit further and propose a fix?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It would appear that AR is generating incorrect SQL for a :through relationship if the middle relationship is a &quot;belongs_to&quot;

It's not really clear from the code that this can ever have worked, so would appreciate some advice.

The end result is that I end up with the error (formatted for clarity):
    Mysql::Error: Unknown column 'users.user_id' in 'on clause': 
    SELECT count(DISTINCT `fleet_agents`.id) AS count_all 
    FROM `fleet_agents`  
    LEFT OUTER JOIN `users` ON (`fleet_agents`.`id` = `users`.`user_id`)  
    LEFT OUTER JOIN `position_mappings` ON (`position_mappings`.`user_id` = `users`.`id`)  

Given:
@@@ ruby
class FleetAgent &lt; ActiveRecord::Base
  belongs_to :user
  has_many :position_mappings, :through =&gt; :user
end
@@@

Trigger the error with:
    FleetAgent.count(:include=&gt; [:position_mappings])

Basically the first &quot;LEFT OUTER JOIN&quot; clause has it's keys and tables mixed up.  Its a belongs to, so should be &quot;fleet_agents.user_id = users.id&quot;


The relevant chunk of code seems to be   associations.rb :2051

                      &quot; #{join_type} %s ON (%s.%s = %s.%s%s%s%s) &quot; % [
                        table_alias_for(through_reflection.klass.table_name, aliased_join_table_name),
                        connection.quote_table_name(parent.aliased_table_name),
                        connection.quote_column_name(parent.primary_key),
                        connection.quote_table_name(aliased_join_table_name),
                        connection.quote_column_name(jt_foreign_key),
                        jt_as_extra, jt_source_extra, jt_sti_extra
                      ] +
                      ... second clause is correct ...

Here we can see &quot;parent.aliased_table_name . parent.primary_key&quot;, which is never going to be a good pairing for a belongs_to relationship.  In fact it seems hardwired for a &quot;has_many&quot; interim relationship?


The problem is now highlighted, but as someone who doesn't stare into the rails internals too often I'm struggling to propose the correct solution.

For example looking at the code bath for a normal &quot;belongs_to&quot; and things are completely different there.. In my case reversing the keys is the solution, but that's clearly a coincidence in naming and obviously the reflections need adapting somehow.  Also the return value obviously needs to become specific to whether it's a belongs_to or has_many (I'm not even sure how to see what kind of a relationship it is?)

Can someone help take this a bit further and propose a fix?</body>
      <body-html>&lt;div&gt;&lt;p&gt;It would appear that AR is generating incorrect SQL for a
:through relationship if the middle relationship is a
&quot;belongs_to&quot;&lt;/p&gt;
&lt;p&gt;It's not really clear from the code that this can ever have
worked, so would appreciate some advice.&lt;/p&gt;
&lt;p&gt;The end result is that I end up with the error (formatted for
clarity):&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Mysql::Error: Unknown column 'users.user_id' in 'on clause':
SELECT count(DISTINCT `fleet_agents`.id) AS count_all 
FROM `fleet_agents`  
LEFT OUTER JOIN `users` ON (`fleet_agents`.`id` = `users`.`user_id`)  
LEFT OUTER JOIN `position_mappings` ON (`position_mappings`.`user_id` = `users`.`id`)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Given:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class FleetAgent &amp;lt; ActiveRecord::Base
  belongs_to :user
  has_many :position_mappings, :through =&amp;gt; :user
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Trigger the error with:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;FleetAgent.count(:include=&amp;gt; [:position_mappings])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Basically the first &quot;LEFT OUTER JOIN&quot; clause has it's keys and
tables mixed up. Its a belongs to, so should be
&quot;fleet_agents.user_id = users.id&quot;&lt;/p&gt;
&lt;p&gt;The relevant chunk of code seems to be associations.rb :2051&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;                  &quot; #{join_type} %s ON (%s.%s = %s.%s%s%s%s) &quot; % [
                    table_alias_for(through_reflection.klass.table_name, aliased_join_table_name),
                    connection.quote_table_name(parent.aliased_table_name),
                    connection.quote_column_name(parent.primary_key),
                    connection.quote_table_name(aliased_join_table_name),
                    connection.quote_column_name(jt_foreign_key),
                    jt_as_extra, jt_source_extra, jt_sti_extra
                  ] +
                  ... second clause is correct ...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here we can see &quot;parent.aliased_table_name .
parent.primary_key&quot;, which is never going to be a good pairing for
a belongs_to relationship. In fact it seems hardwired for a
&quot;has_many&quot; interim relationship?&lt;/p&gt;
&lt;p&gt;The problem is now highlighted, but as someone who doesn't stare
into the rails internals too often I'm struggling to propose the
correct solution.&lt;/p&gt;
&lt;p&gt;For example looking at the code bath for a normal &quot;belongs_to&quot;
and things are completely different there.. In my case reversing
the keys is the solution, but that's clearly a coincidence in
naming and obviously the reflections need adapting somehow. Also
the return value obviously needs to become specific to whether it's
a belongs_to or has_many (I'm not even sure how to see what kind of
a relationship it is?)&lt;/p&gt;
&lt;p&gt;Can someone help take this a bit further and propose a fix?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-13T20:23:29+01:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:through :through_conditions has_many has_many_through</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2009-06-13T20:23:29+01:00</updated-at>
      <user-id type="integer">40490</user-id>
      <version type="integer">1</version>
      <user-name>Wildgoose</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:52+01:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:through :through_conditions has_many has_many_through</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-05-04T18:48:52+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can a bugmasher verify this behavior with a failing test case in master?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can a bugmasher verify this behavior with a failing test case in
master?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-09T19:05:34+01:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;:through :through_conditions has_many has_many_through&quot;
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:through :through_conditions bugmash has_many has_many_through</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-05-09T19:05:38+01:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">3</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am not able to reproduce this issue in rails edge.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am not able to reproduce this issue in rails edge.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-09T22:44:58+01:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:through :through_conditions bugmash has_many has_many_through</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-05-09T22:45:03+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">4</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>-1 not reproducible

This ticket is not fully coherent to me. What are you wanting to get with FleetAgent.count(:include=&gt; [:position_mappings])
 which would be any different from a plain FleetAgent.count ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1 not reproducible&lt;/p&gt;
&lt;p&gt;This ticket is not fully coherent to me. What are you wanting to
get with FleetAgent.count(:include=&amp;gt; [:position_mappings])&lt;br&gt;
which would be any different from a plain FleetAgent.count ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-15T22:00:16+01:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:through :through_conditions bugmash has_many has_many_through</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-05-15T22:00:18+01:00</updated-at>
      <user-id type="integer">9698</user-id>
      <version type="integer">5</version>
      <user-name>Diego Algorta</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 verified in current master.

Here are my models:
@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :position_mappings
end
@@@

@@@ ruby
class PositionMapping &lt; ActiveRecord::Base
  belongs_to :user
end
@@@

@@@ ruby
class FleetAgent &lt; ActiveRecord::Base
  belongs_to :user
  has_many :position_mappings, :through =&gt; :user
end
@@@

And here's the error:
@@@
ruby-1.8.7-p249 &gt; FleetAgent.count(:include =&gt; [:position_mappings])
ActiveRecord::StatementInvalid: Mysql::Error: Unknown column 'users.user_id' in 'on clause': SELECT     COUNT(DISTINCT `fleet_agents`.`id`) AS count_id FROM       `fleet_agents` LEFT OUTER JOIN `users` ON `fleet_agents`.`id` = `users`.`user_id` LEFT OUTER JOIN `position_mappings` ON `position_mappings`.`user_id` = `users`.`id`
@@@

But, strangely, the error doesn't happen when calling for actual models instead of counting:
(Note: I didn't actually write any records into the DB)
@@@
ruby-1.8.7-p249 &gt; FleetAgent.all(:include =&gt; [:position_mappings])
 =&gt; [] 
@@@

But why would one want to count FleetAgents and include the position_mappings relation in it? To create conditions based on the position_mappings for the count?</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 verified in current master.&lt;/p&gt;
&lt;p&gt;Here are my models:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :position_mappings
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class PositionMapping &amp;lt; ActiveRecord::Base
  belongs_to :user
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class FleetAgent &amp;lt; ActiveRecord::Base
  belongs_to :user
  has_many :position_mappings, :through =&amp;gt; :user
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And here's the error:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.8.7-p249 &amp;gt; FleetAgent.count(:include =&amp;gt; [:position_mappings])
ActiveRecord::StatementInvalid: Mysql::Error: Unknown column 'users.user_id' in 'on clause': SELECT     COUNT(DISTINCT &lt;/code&gt;fleet_agents.&lt;code&gt;id&lt;/code&gt;) AS count_id FROM       &lt;code&gt;fleet_agents&lt;/code&gt; LEFT OUTER JOIN &lt;code&gt;users&lt;/code&gt; ON &lt;code&gt;fleet_agents&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = &lt;code&gt;users&lt;/code&gt;.&lt;code&gt;user_id&lt;/code&gt; LEFT OUTER JOIN &lt;code&gt;position_mappings&lt;/code&gt; ON &lt;code&gt;position_mappings&lt;/code&gt;.&lt;code&gt;user_id&lt;/code&gt; = &lt;code&gt;users&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But, strangely, the error doesn't happen when calling for actual
models instead of counting:&lt;br&gt;
(Note: I didn't actually write any records into the DB)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.8.7-p249 &amp;gt; FleetAgent.all(:include =&amp;gt; [:position_mappings])
 =&amp;gt; []&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But why would one want to count FleetAgents and include the
position_mappings relation in it? To create conditions based on the
position_mappings for the count?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-16T00:35:11+01:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:through :through_conditions bugmash has_many has_many_through</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-05-16T00:35:12+01:00</updated-at>
      <user-id type="integer">54225</user-id>
      <version type="integer">6</version>
      <user-name>Enrico Bianco</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, haven't repro'd this with latest rails, but I think the original issue only occurred once you tried to set any kind of conditions on the relation, it's not the relation itself that see's the problem.  So .count is just one way to repro it, but also doing any kind of filter I think should also cause the same issue?

I think if you glance at the code I referenced in the original error report (and presumably factor in that it might have moved line since), then the problem was fairly easy to see - there are several code paths through that section and quite clearly you can see that several types of association should be handled, but there is code only for I think &quot;has_many&quot; associations?

I think if you look at the code the problem should be quite apparent?  The challenge to code a fix is that I wasn't sure what other code paths enter this hunk and hence what the full and proper fix should look like.  It's somewhat abstract at this point what the various variables point to in terms of different types of relationships and I think it would take someone a little more familiar with what else uses this code to do a full fix (ie we should cover all types of relationship here).  I don't think the change is hard or a big change, it's simply that the code appears to be used by several other (unknown) code paths and the solution looks a bit subtle?

From memory it's only a problem when you apply a relationship which is probably why not so many people bang into this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, haven't repro'd this with latest rails, but I think the
original issue only occurred once you tried to set any kind of
conditions on the relation, it's not the relation itself that see's
the problem. So .count is just one way to repro it, but also doing
any kind of filter I think should also cause the same issue?&lt;/p&gt;
&lt;p&gt;I think if you glance at the code I referenced in the original
error report (and presumably factor in that it might have moved
line since), then the problem was fairly easy to see - there are
several code paths through that section and quite clearly you can
see that several types of association should be handled, but there
is code only for I think &quot;has_many&quot; associations?&lt;/p&gt;
&lt;p&gt;I think if you look at the code the problem should be quite
apparent? The challenge to code a fix is that I wasn't sure what
other code paths enter this hunk and hence what the full and proper
fix should look like. It's somewhat abstract at this point what the
various variables point to in terms of different types of
relationships and I think it would take someone a little more
familiar with what else uses this code to do a full fix (ie we
should cover all types of relationship here). I don't think the
change is hard or a big change, it's simply that the code appears
to be used by several other (unknown) code paths and the solution
looks a bit subtle?&lt;/p&gt;
&lt;p&gt;From memory it's only a problem when you apply a relationship
which is probably why not so many people bang into this?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-17T20:08:45+01:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:through :through_conditions bugmash has_many has_many_through</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-05-17T20:08:47+01:00</updated-at>
      <user-id type="integer">40490</user-id>
      <version type="integer">7</version>
      <user-name>Wildgoose</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Any updates here? Is this still an issue on master?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Any updates here? Is this still an issue on master?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-04T03:17:15+01:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">1901</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:through :through_conditions bugmash has_many has_many_through</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-07-04T03:17:19+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">8</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I can confirm this. It affects queries involving joins, so while the above example using `count` doesn't quite seem to make sense, a query in the form `Foo.joins(:bar)` would equally have this problem.

Attached is a fix, with tests.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can confirm this. It affects queries involving joins, so while
the above example using &lt;code&gt;count&lt;/code&gt; doesn't quite seem to
make sense, a query in the form &lt;code&gt;Foo.joins(:bar)&lt;/code&gt; would
equally have this problem.&lt;/p&gt;
&lt;p&gt;Attached is a fix, with tests.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-16T10:31:41+00:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;:through :through_conditions bugmash has_many has_many_through&quot;
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">1901</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:through :through_conditions bugmash has_many has_many_through patch</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-12-16T10:31:57+00:00</updated-at>
      <user-id type="integer">11330</user-id>
      <version type="integer">9</version>
      <user-name>Jon Leighton</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Just realised the file name of that patch says 2461. This is a mistake, but rest assured the patch is definitely concerned with this ticket and not a different one.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just realised the file name of that patch says 2461. This is a
mistake, but rest assured the patch is definitely concerned with
this ticket and not a different one.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-19T16:41:15+00:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">1901</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:through :through_conditions bugmash has_many has_many_through patch</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-12-19T16:41:32+00:00</updated-at>
      <user-id type="integer">11330</user-id>
      <version type="integer">10</version>
      <user-name>Jon Leighton</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [b8153fd5a18441567f787a33ca882acb3bb5088a]) Fix problem where wrong keys are used in JoinAssociation when an association goes :through a belongs_to [#2801 state:resolved]
https://github.com/rails/rails/commit/b8153fd5a18441567f787a33ca882acb3bb5088a</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/b8153fd5a18441567f787a33ca882acb3bb5088a&quot;
title=
&quot;Changeset [b8153fd5a18441567f787a33ca882acb3bb5088a]&quot;&gt;[b8153fd5a18441567f787a33ca882acb3bb5088a]&lt;/a&gt;)
Fix problem where wrong keys are used in JoinAssociation when an
association goes :through a belongs_to [&lt;a href=
&quot;/projects/8994/tickets/2801&quot; title=&quot;Ticket #2801&quot;&gt;#2801&lt;/a&gt;
state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/b8153fd5a18441567f787a33ca882acb3bb5088a&quot;&gt;
https://github.com/rails/rails/commit/b8153fd5a18441567f787a33ca882...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-20T22:05:19+00:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">1901</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>:through :through_conditions bugmash has_many has_many_through patch</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-12-20T22:05:36+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">11</version>
      <user-name>Repository</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've seen about 3 other bug reports about this issue, so I've ported the fix to 3-0-stable too, as it would be good to get in 3.0.4. Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've seen about 3 other bug reports about this issue, so I've
ported the fix to 3-0-stable too, as it would be good to get in
3.0.4. Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-21T21:01:28+00:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- 
:state: resolved
:milestone: 71472
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">1901</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>:through :through_conditions bugmash has_many has_many_through patch</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-12-21T21:01:49+00:00</updated-at>
      <user-id type="integer">11330</user-id>
      <version type="integer">12</version>
      <user-name>Jon Leighton</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [e4b384222c303414c42d92c67acdc87385c49c92]) Fix problem where wrong keys are used in JoinAssociation when an association goes :through a belongs_to [#2801 state:resolved]
https://github.com/rails/rails/commit/e4b384222c303414c42d92c67acdc87385c49c92</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/e4b384222c303414c42d92c67acdc87385c49c92&quot;
title=
&quot;Changeset [e4b384222c303414c42d92c67acdc87385c49c92]&quot;&gt;[e4b384222c303414c42d92c67acdc87385c49c92]&lt;/a&gt;)
Fix problem where wrong keys are used in JoinAssociation when an
association goes :through a belongs_to [&lt;a href=
&quot;/projects/8994/tickets/2801&quot; title=&quot;Ticket #2801&quot;&gt;#2801&lt;/a&gt;
state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/e4b384222c303414c42d92c67acdc87385c49c92&quot;&gt;
https://github.com/rails/rails/commit/e4b384222c303414c42d92c67acdc...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-23T23:31:23+00:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">1901</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>:through :through_conditions bugmash has_many has_many_through patch</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2010-12-23T23:33:53+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">13</version>
      <user-name>Repository</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/42275)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/42275&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-12T21:58:20+00:00</created-at>
      <creator-id type="integer">40490</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 92071
</diffable-attributes>
      <milestone-id type="integer">101623</milestone-id>
      <number type="integer">2801</number>
      <permalink>incorrect-sql-from-has_many-through</permalink>
      <priority type="integer">1901</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>:through :through_conditions bugmash has_many has_many_through patch</tag>
      <title>incorrect sql from has_many :through </title>
      <updated-at type="datetime">2011-02-12T21:58:20+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">14</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Wildgoose</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2801</url>
      <milestone-title>3.0.5</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>c706fe5bca7733a915735359b829798a562e61c1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-12-16T10:31:41+00:00</created-at>
      <filename>2461_has_many_through_join_quoting.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">822154</id>
      <size type="integer">5587</size>
      <uploader-id type="integer">11330</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/822154/2461_has_many_through_join_quoting.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>175943040982afd9c3bb4eb63193aec94b7d9d8b</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-12-21T21:01:29+00:00</created-at>
      <filename>2801_3-0-stable_port.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">830253</id>
      <size type="integer">6823</size>
      <uploader-id type="integer">11330</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/830253/2801_3-0-stable_port.diff</url>
    </attachment>
  </attachments>
</ticket>
