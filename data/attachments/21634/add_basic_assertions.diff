From 14b2ae02b70556cd994a4e9483df0bb67867deb9 Mon Sep 17 00:00:00 2001
From: pivotal <pivotal@cypress.flood.pivotallabs.com>
Date: Mon, 5 May 2008 16:50:41 -0700
Subject: [PATCH] nw/ch - Basic assertions

---
 .../core_ext/test/unit/assertions.rb               |   39 ++++++++++++++++++++
 activesupport/test/test_test.rb                    |   35 ++++++++++++++++++
 2 files changed, 74 insertions(+), 0 deletions(-)

diff --git a/activesupport/lib/active_support/core_ext/test/unit/assertions.rb b/activesupport/lib/active_support/core_ext/test/unit/assertions.rb
index 77fe325..e0ed704 100644
--- a/activesupport/lib/active_support/core_ext/test/unit/assertions.rb
+++ b/activesupport/lib/active_support/core_ext/test/unit/assertions.rb
@@ -59,6 +59,45 @@ module Test
       def assert_no_difference(expressions, message = nil, &block)
         assert_difference expressions, 0, message, &block
       end
+      
+      
+      # Assertion that a container includes a particular object.
+      #
+      def assert_contains(expected_object, container, message_on_error = "Expected #{expected_object.inspect} to be in #{container.inspect}")
+        assert container.include?(expected_object), message_on_error
+      end
+
+      # Assertion that a container does not include a particular object.
+      #
+      def assert_does_not_contain(expected_object, container, message_on_error = "Expected #{expected_object.inspect}' not to be in '#{container.inspect}', but it was")
+        assert !container.include?(expected_object), message_on_error
+      end
+
+      alias_method :assert_includes, :assert_contains
+      alias_method :assert_does_not_include, :assert_does_not_contain
+      alias_method :assert_not_contains, :assert_does_not_contain
+      alias_method :assert_true, :assert
+
+      # Alias for assert !condition.
+      #
+      def assert_false(condition, msg = nil)
+        assert !condition, msg
+      end
+
+      # Assert that two arrays have the same collections of elements.
+      #
+      def assert_array_contents_match(collection_to_match, collection_to_test, message = "")
+        extra_in_match = collection_to_match - collection_to_test
+        extra_in_test = collection_to_test - collection_to_match
+        assert_equal extra_in_match, [], "Missing elements" + message
+        assert_equal [], extra_in_test, "Extra elements" + message
+      end
+      
+      # Assert that a container is empty.
+      #
+      def assert_empty(container, msg = nil)
+        assert container.empty?, msg
+      end
     end
   end
 end
diff --git a/activesupport/test/test_test.rb b/activesupport/test/test_test.rb
index 1e75e18..39d0dd6 100644
--- a/activesupport/test/test_test.rb
+++ b/activesupport/test/test_test.rb
@@ -118,3 +118,38 @@ class SubclassSetupAndTeardownTest < SetupAndTeardownTest
       assert_equal [:foo, :bar, :bar, :foo], @called_back
     end
 end
+
+# Basic assertion tests
+class BasicAssertionTest < Test::Unit::TestCase
+  def test_assert_contains
+    assert_contains("substring", "string with substring")
+    assert_raises(Test::Unit::AssertionFailedError) {assert_contains("substring", "string with no such string")}
+  end
+
+  def test_assert_does_not_contain
+    assert_does_not_contain("substring", "string with no such string")
+    assert_raises(Test::Unit::AssertionFailedError) {assert_does_not_contain("substring", "string with substring")}
+  end
+
+  def test_assert_false
+    assert_false(false)
+    assert_raises(Test::Unit::AssertionFailedError) {assert_false(true)}
+  end
+
+  def test_assert_true
+    assert_true(true)
+    assert_raises(Test::Unit::AssertionFailedError) {assert_true(false)}
+  end
+
+  def test_assert_empty
+    assert_empty([])
+    assert_raises(Test::Unit::AssertionFailedError) {assert_empty([1])}
+  end
+
+  def test_assert_array_contents_match
+    assert_array_contents_match([1,3,2], [3,1,2])
+    assert_raises(Test::Unit::AssertionFailedError) {assert_array_contents_match([1,3], [3,1,2])}
+    assert_raises(Test::Unit::AssertionFailedError) {assert_array_contents_match([1,3,4], [3,1,2])}
+    assert_raises(Test::Unit::AssertionFailedError) {assert_array_contents_match([1,2,3,4], [3,1,2])}
+  end
+end
-- 
1.5.4.5

