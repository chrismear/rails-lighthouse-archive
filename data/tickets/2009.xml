<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-18T18:24:26+00:00</created-at>
  <creator-id type="integer">19777</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2009</number>
  <permalink>counter-cache-not-used-for-size-and-count-through-has_many-associations</permalink>
  <priority type="integer">1252</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activecord association counters counter_cache</tag>
  <title>Counter cache not used for size and count through has_many associations</title>
  <updated-at type="datetime">2009-08-06T12:58:11+01:00</updated-at>
  <user-id type="integer">7211</user-id>
  <version type="integer">3</version>
  <user-name>CancelProfileIsBroken</user-name>
  <creator-name>Alexandre da Silva</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2009</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>counter_cache feature is not working correctly with rails version 2.2.2 and 2.3.0 RC1

The counter is incrementing and decrementing as well, but the size and count methods, over association
are issuing a SQL COUNT to the database on every call.


to reproduce create a new rails application (2.2.2 or 2.3RC1)
define the migrations ans models as folows:

@@@
create_table :projects do |t|
  t.string :name
  t.integer :tasks_count
  t.timestamps
end

create_table :tasks do |t|
  t.references :project
  t.string :name
  t.timestamps
end

class Project &lt; ActiveRecord::Base
  has_many :tasks
end

class Task &lt; ActiveRecord::Base
  belongs_to :project, :counter_cache =&gt; true
end
@@@

Open up a console and see the log:

@@@
p = Project.create :name =&gt; 'My Project'
&gt;&gt;   Project Create (0.5ms)   INSERT INTO &quot;projects&quot; (&quot;name&quot;, &quot;tasks_count&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES('My Project', NULL, '2009-02-18 18:02:28', '2009-02-18 18:02:28')
p.tasks.create :name =&gt; 'Task 1'
&gt;&gt; Task Create (0.7ms)   INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;created_at&quot;, &quot;project_id&quot;, &quot;updated_at&quot;) VALUES('Task 1', '2009-02-18 18:03:45', 1, '2009-02-18 18:03:45')
&gt;&gt;  Project Load (0.8ms)   SELECT * FROM &quot;projects&quot; WHERE (&quot;projects&quot;.&quot;id&quot; = 1) 
&gt;&gt;  Project Update (0.4ms)   UPDATE &quot;projects&quot; SET &quot;tasks_count&quot; = COALESCE(&quot;tasks_count&quot;, 0) + 1 WHERE (&quot;id&quot; = 1) 
p.tasks.create :name =&gt; 'Task 2'
&gt;&gt; Task Create (0.7ms)   ... UPDATE &quot;projects&quot; SET &quot;tasks_count&quot;...
p.tasks.create :name =&gt; 'Task 3'
&gt;&gt;  Task Create (0.7ms)  ... UPDATE &quot;projects&quot; SET &quot;tasks_count&quot;...
p.tasks.size
&gt;&gt; SQL (0.6ms)   SELECT count(*) AS count_all FROM &quot;tasks&quot; WHERE (&quot;tasks&quot;.project_id = 1)
p.tasks.count
&gt;&gt; SQL (0.6ms)   SELECT count(*) AS count_all FROM &quot;tasks&quot; WHERE (&quot;tasks&quot;.project_id = 1)
.....
@@@</original-body>
  <latest-body>counter_cache feature is not working correctly with rails version 2.2.2 and 2.3.0 RC1

The counter is incrementing and decrementing as well, but the size and count methods, over association
are issuing a SQL COUNT to the database on every call.


to reproduce create a new rails application (2.2.2 or 2.3RC1)
define the migrations ans models as folows:

@@@
create_table :projects do |t|
  t.string :name
  t.integer :tasks_count
  t.timestamps
end

create_table :tasks do |t|
  t.references :project
  t.string :name
  t.timestamps
end

class Project &lt; ActiveRecord::Base
  has_many :tasks
end

class Task &lt; ActiveRecord::Base
  belongs_to :project, :counter_cache =&gt; true
end
@@@

Open up a console and see the log:

@@@
p = Project.create :name =&gt; 'My Project'
&gt;&gt;   Project Create (0.5ms)   INSERT INTO &quot;projects&quot; (&quot;name&quot;, &quot;tasks_count&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES('My Project', NULL, '2009-02-18 18:02:28', '2009-02-18 18:02:28')
p.tasks.create :name =&gt; 'Task 1'
&gt;&gt; Task Create (0.7ms)   INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;created_at&quot;, &quot;project_id&quot;, &quot;updated_at&quot;) VALUES('Task 1', '2009-02-18 18:03:45', 1, '2009-02-18 18:03:45')
&gt;&gt;  Project Load (0.8ms)   SELECT * FROM &quot;projects&quot; WHERE (&quot;projects&quot;.&quot;id&quot; = 1) 
&gt;&gt;  Project Update (0.4ms)   UPDATE &quot;projects&quot; SET &quot;tasks_count&quot; = COALESCE(&quot;tasks_count&quot;, 0) + 1 WHERE (&quot;id&quot; = 1) 
p.tasks.create :name =&gt; 'Task 2'
&gt;&gt; Task Create (0.7ms)   ... UPDATE &quot;projects&quot; SET &quot;tasks_count&quot;...
p.tasks.create :name =&gt; 'Task 3'
&gt;&gt;  Task Create (0.7ms)  ... UPDATE &quot;projects&quot; SET &quot;tasks_count&quot;...
p.tasks.size
&gt;&gt; SQL (0.6ms)   SELECT count(*) AS count_all FROM &quot;tasks&quot; WHERE (&quot;tasks&quot;.project_id = 1)
p.tasks.count
&gt;&gt; SQL (0.6ms)   SELECT count(*) AS count_all FROM &quot;tasks&quot; WHERE (&quot;tasks&quot;.project_id = 1)
.....
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;counter_cache feature is not working correctly with rails
version 2.2.2 and 2.3.0 RC1&lt;/p&gt;
&lt;p&gt;The counter is incrementing and decrementing as well, but the
size and count methods, over association are issuing a SQL COUNT to
the database on every call.&lt;/p&gt;
&lt;p&gt;to reproduce create a new rails application (2.2.2 or 2.3RC1)
define the migrations ans models as folows:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
create_table :projects do |t|
  t.string :name
  t.integer :tasks_count
  t.timestamps
end

create_table :tasks do |t|
  t.references :project
  t.string :name
  t.timestamps
end

class Project &amp;lt; ActiveRecord::Base
  has_many :tasks
end

class Task &amp;lt; ActiveRecord::Base
  belongs_to :project, :counter_cache =&amp;gt; true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open up a console and see the log:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
p = Project.create :name =&amp;gt; 'My Project'
&amp;gt;&amp;gt;   Project Create (0.5ms)   INSERT INTO &amp;quot;projects&amp;quot; (&amp;quot;name&amp;quot;, &amp;quot;tasks_count&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;) VALUES('My Project', NULL, '2009-02-18 18:02:28', '2009-02-18 18:02:28')
p.tasks.create :name =&amp;gt; 'Task 1'
&amp;gt;&amp;gt; Task Create (0.7ms)   INSERT INTO &amp;quot;tasks&amp;quot; (&amp;quot;name&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;project_id&amp;quot;, &amp;quot;updated_at&amp;quot;) VALUES('Task 1', '2009-02-18 18:03:45', 1, '2009-02-18 18:03:45')
&amp;gt;&amp;gt;  Project Load (0.8ms)   SELECT * FROM &amp;quot;projects&amp;quot; WHERE (&amp;quot;projects&amp;quot;.&amp;quot;id&amp;quot; = 1) 
&amp;gt;&amp;gt;  Project Update (0.4ms)   UPDATE &amp;quot;projects&amp;quot; SET &amp;quot;tasks_count&amp;quot; = COALESCE(&amp;quot;tasks_count&amp;quot;, 0) + 1 WHERE (&amp;quot;id&amp;quot; = 1) 
p.tasks.create :name =&amp;gt; 'Task 2'
&amp;gt;&amp;gt; Task Create (0.7ms)   ... UPDATE &amp;quot;projects&amp;quot; SET &amp;quot;tasks_count&amp;quot;...
p.tasks.create :name =&amp;gt; 'Task 3'
&amp;gt;&amp;gt;  Task Create (0.7ms)  ... UPDATE &amp;quot;projects&amp;quot; SET &amp;quot;tasks_count&amp;quot;...
p.tasks.size
&amp;gt;&amp;gt; SQL (0.6ms)   SELECT count(*) AS count_all FROM &amp;quot;tasks&amp;quot; WHERE (&amp;quot;tasks&amp;quot;.project_id = 1)
p.tasks.count
&amp;gt;&amp;gt; SQL (0.6ms)   SELECT count(*) AS count_all FROM &amp;quot;tasks&amp;quot; WHERE (&amp;quot;tasks&amp;quot;.project_id = 1)
.....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>counter_cache feature is not working correctly with rails version 2.2.2 and 2.3.0 RC1

The counter is incrementing and decrementing as well, but the size and count methods, over association
are issuing a SQL COUNT to the database on every call.


to reproduce create a new rails application (2.2.2 or 2.3RC1)
define the migrations ans models as folows:

@@@
create_table :projects do |t|
  t.string :name
  t.integer :tasks_count
  t.timestamps
end

create_table :tasks do |t|
  t.references :project
  t.string :name
  t.timestamps
end

class Project &lt; ActiveRecord::Base
  has_many :tasks
end

class Task &lt; ActiveRecord::Base
  belongs_to :project, :counter_cache =&gt; true
end
@@@

Open up a console and see the log:

@@@
p = Project.create :name =&gt; 'My Project'
&gt;&gt;   Project Create (0.5ms)   INSERT INTO &quot;projects&quot; (&quot;name&quot;, &quot;tasks_count&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES('My Project', NULL, '2009-02-18 18:02:28', '2009-02-18 18:02:28')
p.tasks.create :name =&gt; 'Task 1'
&gt;&gt; Task Create (0.7ms)   INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;created_at&quot;, &quot;project_id&quot;, &quot;updated_at&quot;) VALUES('Task 1', '2009-02-18 18:03:45', 1, '2009-02-18 18:03:45')
&gt;&gt;  Project Load (0.8ms)   SELECT * FROM &quot;projects&quot; WHERE (&quot;projects&quot;.&quot;id&quot; = 1) 
&gt;&gt;  Project Update (0.4ms)   UPDATE &quot;projects&quot; SET &quot;tasks_count&quot; = COALESCE(&quot;tasks_count&quot;, 0) + 1 WHERE (&quot;id&quot; = 1) 
p.tasks.create :name =&gt; 'Task 2'
&gt;&gt; Task Create (0.7ms)   ... UPDATE &quot;projects&quot; SET &quot;tasks_count&quot;...
p.tasks.create :name =&gt; 'Task 3'
&gt;&gt;  Task Create (0.7ms)  ... UPDATE &quot;projects&quot; SET &quot;tasks_count&quot;...
p.tasks.size
&gt;&gt; SQL (0.6ms)   SELECT count(*) AS count_all FROM &quot;tasks&quot; WHERE (&quot;tasks&quot;.project_id = 1)
p.tasks.count
&gt;&gt; SQL (0.6ms)   SELECT count(*) AS count_all FROM &quot;tasks&quot; WHERE (&quot;tasks&quot;.project_id = 1)
.....
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;counter_cache feature is not working correctly with rails
version 2.2.2 and 2.3.0 RC1&lt;/p&gt;
&lt;p&gt;The counter is incrementing and decrementing as well, but the
size and count methods, over association are issuing a SQL COUNT to
the database on every call.&lt;/p&gt;
&lt;p&gt;to reproduce create a new rails application (2.2.2 or 2.3RC1)
define the migrations ans models as folows:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
create_table :projects do |t|
  t.string :name
  t.integer :tasks_count
  t.timestamps
end

create_table :tasks do |t|
  t.references :project
  t.string :name
  t.timestamps
end

class Project &amp;lt; ActiveRecord::Base
  has_many :tasks
end

class Task &amp;lt; ActiveRecord::Base
  belongs_to :project, :counter_cache =&amp;gt; true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open up a console and see the log:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
p = Project.create :name =&amp;gt; 'My Project'
&amp;gt;&amp;gt;   Project Create (0.5ms)   INSERT INTO &amp;quot;projects&amp;quot; (&amp;quot;name&amp;quot;, &amp;quot;tasks_count&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;) VALUES('My Project', NULL, '2009-02-18 18:02:28', '2009-02-18 18:02:28')
p.tasks.create :name =&amp;gt; 'Task 1'
&amp;gt;&amp;gt; Task Create (0.7ms)   INSERT INTO &amp;quot;tasks&amp;quot; (&amp;quot;name&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;project_id&amp;quot;, &amp;quot;updated_at&amp;quot;) VALUES('Task 1', '2009-02-18 18:03:45', 1, '2009-02-18 18:03:45')
&amp;gt;&amp;gt;  Project Load (0.8ms)   SELECT * FROM &amp;quot;projects&amp;quot; WHERE (&amp;quot;projects&amp;quot;.&amp;quot;id&amp;quot; = 1) 
&amp;gt;&amp;gt;  Project Update (0.4ms)   UPDATE &amp;quot;projects&amp;quot; SET &amp;quot;tasks_count&amp;quot; = COALESCE(&amp;quot;tasks_count&amp;quot;, 0) + 1 WHERE (&amp;quot;id&amp;quot; = 1) 
p.tasks.create :name =&amp;gt; 'Task 2'
&amp;gt;&amp;gt; Task Create (0.7ms)   ... UPDATE &amp;quot;projects&amp;quot; SET &amp;quot;tasks_count&amp;quot;...
p.tasks.create :name =&amp;gt; 'Task 3'
&amp;gt;&amp;gt;  Task Create (0.7ms)  ... UPDATE &amp;quot;projects&amp;quot; SET &amp;quot;tasks_count&amp;quot;...
p.tasks.size
&amp;gt;&amp;gt; SQL (0.6ms)   SELECT count(*) AS count_all FROM &amp;quot;tasks&amp;quot; WHERE (&amp;quot;tasks&amp;quot;.project_id = 1)
p.tasks.count
&amp;gt;&amp;gt; SQL (0.6ms)   SELECT count(*) AS count_all FROM &amp;quot;tasks&amp;quot; WHERE (&amp;quot;tasks&amp;quot;.project_id = 1)
.....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-18T18:24:26+00:00</created-at>
      <creator-id type="integer">19777</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2009</number>
      <permalink>counter-cache-not-used-for-size-and-count-through-has_many-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Counter cache not used for size and count through has_many associations</title>
      <updated-at type="datetime">2009-02-18T18:24:31+00:00</updated-at>
      <user-id type="integer">19777</user-id>
      <version type="integer">1</version>
      <user-name>Alexandre da Silva</user-name>
      <creator-name>Alexandre da Silva</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2009</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>With final release of 2.3 this seems to be working.
thank's</body>
      <body-html>&lt;div&gt;&lt;p&gt;With final release of 2.3 this seems to be working. thank's&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-05T02:23:16+01:00</created-at>
      <creator-id type="integer">19777</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2009</number>
      <permalink>counter-cache-not-used-for-size-and-count-through-has_many-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activecord association counters counter_cache</tag>
      <title>Counter cache not used for size and count through has_many associations</title>
      <updated-at type="datetime">2009-04-05T02:23:17+01:00</updated-at>
      <user-id type="integer">19777</user-id>
      <version type="integer">2</version>
      <user-name>Alexandre da Silva</user-name>
      <creator-name>Alexandre da Silva</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2009</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-06T12:58:09+01:00</created-at>
      <creator-id type="integer">19777</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2009</number>
      <permalink>counter-cache-not-used-for-size-and-count-through-has_many-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activecord association counters counter_cache</tag>
      <title>Counter cache not used for size and count through has_many associations</title>
      <updated-at type="datetime">2009-08-06T12:58:11+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Alexandre da Silva</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2009</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
