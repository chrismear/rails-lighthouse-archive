<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">5</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-12T15:50:25+00:00</created-at>
  <creator-id type="integer">43314</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1738</number>
  <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
  <priority type="integer">1046</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>cache has_and_belongs_to_many patch</tag>
  <title>connection.columns doesn't get cached</title>
  <updated-at type="datetime">2009-03-14T16:17:46+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">18</version>
  <user-name>Pratik</user-name>
  <creator-name>Luke Ludwig</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This patch caches columns for has_and_belongs_to_many associations. The cache is stored in a hash (with table name as the key) within one of the owners of the habtm association. The connection.columns method (&quot;SHOW FIELDS&quot; query) is called when a find or an insert is done through the habtm association and can be expensive depending on the database configuration.

After applying this patch on Team Sport Tech's app we saw a noticeable performance improvement. See details at http://lukeludwig.com/blog/2009/01/08/rails-patch-for-caching-show-fields-for-has_and_belongs_to_many-associations

If someone could take a look at this patch and let me know what they think that would be great,

Luke Ludwig</original-body>
  <latest-body>This patch caches columns for has_and_belongs_to_many associations. The cache is stored in a hash (with table name as the key) within one of the owners of the habtm association. The connection.columns method (&quot;SHOW FIELDS&quot; query) is called when a find or an insert is done through the habtm association and can be expensive depending on the database configuration.

After applying this patch on Team Sport Tech's app we saw a noticeable performance improvement. See details at http://lukeludwig.com/blog/2009/01/08/rails-patch-for-caching-show-fields-for-has_and_belongs_to_many-associations

If someone could take a look at this patch and let me know what they think that would be great,

Luke Ludwig</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch caches columns for has_and_belongs_to_many
associations. The cache is stored in a hash (with table name as the
key) within one of the owners of the habtm association. The
connection.columns method (&quot;SHOW FIELDS&quot; query) is called when a
find or an insert is done through the habtm association and can be
expensive depending on the database configuration.&lt;/p&gt;
&lt;p&gt;After applying this patch on Team Sport Tech's app we saw a
noticeable performance improvement. See details at &lt;a href=&quot;http://lukeludwig.com/blog/2009/01/08/rails-patch-for-caching-show-fields-for-has_and_belongs_to_many-associations&quot;&gt;
http://lukeludwig.com/blog/2009/...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If someone could take a look at this patch and let me know what
they think that would be great,&lt;/p&gt;
&lt;p&gt;Luke Ludwig&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch caches columns for has_and_belongs_to_many associations. The cache is stored in a hash (with table name as the key) within one of the owners of the habtm association. The connection.columns method (&quot;SHOW FIELDS&quot; query) is called when a find or an insert is done through the habtm association and can be expensive depending on the database configuration.

After applying this patch on Team Sport Tech's app we saw a noticeable performance improvement. See details at http://lukeludwig.com/blog/2009/01/08/rails-patch-for-caching-show-fields-for-has_and_belongs_to_many-associations

If someone could take a look at this patch and let me know what they think that would be great,

Luke Ludwig</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch caches columns for has_and_belongs_to_many
associations. The cache is stored in a hash (with table name as the
key) within one of the owners of the habtm association. The
connection.columns method (&quot;SHOW FIELDS&quot; query) is called when a
find or an insert is done through the habtm association and can be
expensive depending on the database configuration.&lt;/p&gt;
&lt;p&gt;After applying this patch on Team Sport Tech's app we saw a
noticeable performance improvement. See details at &lt;a href=&quot;http://lukeludwig.com/blog/2009/01/08/rails-patch-for-caching-show-fields-for-has_and_belongs_to_many-associations&quot;&gt;
http://lukeludwig.com/blog/2009/...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If someone could take a look at this patch and let me know what
they think that would be great,&lt;/p&gt;
&lt;p&gt;Luke Ludwig&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-12T15:50:25+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>Caching columns for has_and_belongs_to_many</title>
      <updated-at type="datetime">2009-01-12T15:50:27+00:00</updated-at>
      <user-id type="integer">43314</user-id>
      <version type="integer">1</version>
      <user-name>Luke Ludwig</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>There's something more complicated going on here; the return value for columns is supposed to be cached. (in query_cache.rb)

It looks like this is a clash between alias_method_chain in query_cache.rb and the subclassing in each individual adapter; the cache method *never* gets called... It just happens that AR caches the value for regular objects itself (line 1218, base.rb).

This problem needs a patch that addresses the general problem, not just for habtm.</body>
      <body-html>&lt;div&gt;&lt;p&gt;There's something more complicated going on here; the return
value for columns is supposed to be cached. (in query_cache.rb)&lt;/p&gt;
&lt;p&gt;It looks like this is a clash between alias_method_chain in
query_cache.rb and the subclassing in each individual adapter; the
cache method &lt;em&gt;never&lt;/em&gt; gets called... It just happens that AR
caches the value for regular objects itself (line 1218,
base.rb).&lt;/p&gt;
&lt;p&gt;This problem needs a patch that addresses the general problem,
not just for habtm.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-14T16:53:13+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- 
:title: Caching columns for has_and_belongs_to_many
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-14T16:53:15+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">2</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This is primarily an issue with HABTM though right?  As the other associations don't look at their columns every time you try to use them?

Luke, perhaps the best bet here is to simply cache the number of columns in the join table when the association is first used?  So have this live in the association instance not the model class?</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is primarily an issue with HABTM though right? As the other
associations don't look at their columns every time you try to use
them?&lt;/p&gt;
&lt;p&gt;Luke, perhaps the best bet here is to simply cache the number of
columns in the join table when the association is first used? So
have this live in the association instance not the model class?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-15T20:54:56+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-15T20:55:00+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">3</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Matt - Doesn't the query_cache only persist for the life of the request? We want the habtm columns to be cached for the life of the process, (or until reset_column_information is called), similar to how ActiveRecord::Base caches columns. It seems that the alias method chaining of columns in query_cache should just be removed... even if it was working it is redundant unless someone calls connection.columns directly from their code.

Michael - By caching the columns in the &quot;association instance&quot; I assume you mean within the reflection object. This seems to work as intended (caches columns for life of process) and is cleaner then my original solution of putting the cache in the owner class.

module ActiveRecord
  module Reflection

    class AssociationReflection &lt; MacroReflection
 
      def columns(join_table_name)
        unless defined?(@columns) &amp;&amp; @columns
          @columns = klass.connection.columns(join_table_name, &quot;#{join_table_name} Join Table Columns&quot;)
        end
        @columns
      end

I'll get a new patch together using this approach.

Luke</body>
      <body-html>&lt;div&gt;&lt;p&gt;Matt - Doesn't the query_cache only persist for the life of the
request? We want the habtm columns to be cached for the life of the
process, (or until reset_column_information is called), similar to
how ActiveRecord::Base caches columns. It seems that the alias
method chaining of columns in query_cache should just be removed...
even if it was working it is redundant unless someone calls
connection.columns directly from their code.&lt;/p&gt;
&lt;p&gt;Michael - By caching the columns in the &quot;association instance&quot; I
assume you mean within the reflection object. This seems to work as
intended (caches columns for life of process) and is cleaner then
my original solution of putting the cache in the owner class.&lt;/p&gt;
&lt;p&gt;module ActiveRecord module Reflection&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class AssociationReflection &amp;lt; MacroReflection

  def columns(join_table_name)
    unless defined?(@columns) &amp;amp;&amp;amp; @columns
      @columns = klass.connection.columns(join_table_name, &quot;#{join_table_name} Join Table Columns&quot;)
    end
    @columns
  end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'll get a new patch together using this approach.&lt;/p&gt;
&lt;p&gt;Luke&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-16T03:34:03+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-16T03:34:04+00:00</updated-at>
      <user-id type="integer">43314</user-id>
      <version type="integer">4</version>
      <user-name>Luke Ludwig</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>That's what I had in mind luke,  just make sure it forgets the info
when you call reset_column_information, and I'll be happy to apply the
patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;That's what I had in mind luke, just make sure it forgets the
info when you call reset_column_information, and I'll be happy to
apply the patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-16T03:56:17+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-16T03:56:17+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">5</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here is the patch file. The columns are now cached within the reflection instance. You can now call columns and reset_column_information on the the habtm association directly, like this:

    developer = Developer.find(1)
    devloper.projects.columns
    developer.projects.reset_column_information</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is the patch file. The columns are now cached within the
reflection instance. You can now call columns and
reset_column_information on the the habtm association directly,
like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;developer = Developer.find(1)
devloper.projects.columns
developer.projects.reset_column_information
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-16T19:15:46+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-16T19:15:52+00:00</updated-at>
      <user-id type="integer">43314</user-id>
      <version type="integer">6</version>
      <user-name>Luke Ludwig</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@@@
+        unless defined?(@columns) &amp;&amp; @columns
+          @columns = klass.connection.columns(tbl_name, log_msg)
+        end
+        @columns
@@@

This is synonymous with @columns ||= klass...

Is there any reason you have the specific defined? test in there?</body>
      <body-html>&lt;div&gt;&lt;pre&gt;&lt;code&gt;
+        unless defined?(@columns) &amp;amp;&amp;amp; @columns
+          @columns = klass.connection.columns(tbl_name, log_msg)
+        end
+        @columns
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is synonymous with @columns ||= klass...&lt;/p&gt;
&lt;p&gt;Is there any reason you have the specific defined? test in
there?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-16T22:09:18+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-16T22:09:23+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">7</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Good point. New patch attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good point. New patch attached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-16T22:26:45+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-16T22:26:49+00:00</updated-at>
      <user-id type="integer">43314</user-id>
      <version type="integer">8</version>
      <user-name>Luke Ludwig</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [3ee4e009185173aab78f6503ee45e3ef4482874e]) Cache columns for has_and_belongs_to_many associations

This avoids repeatedly calling SHOW COLUMNS when the association is queried
[#1738 state:committed]
http://github.com/rails/rails/commit/3ee4e009185173aab78f6503ee45e3ef4482874e</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [3ee4e009185173aab78f6503ee45e3ef4482874e]) Cache columns
for has_and_belongs_to_many associations&lt;/p&gt;
&lt;p&gt;This avoids repeatedly calling SHOW COLUMNS when the association
is queried [&lt;a href=&quot;/projects/8994/tickets/1738&quot; title=&quot;Ticket #1738&quot;&gt;#1738&lt;/a&gt; state:committed] &lt;a href=&quot;http://github.com/rails/rails/commit/3ee4e009185173aab78f6503ee45e3ef4482874e&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-17T05:09:45+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-17T05:09:46+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">9</version>
      <user-name>Repository</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [7c147e94e66530a8314bc5d836df412fd749d55b]) Cache columns for has_and_belongs_to_many associations

This avoids repeatedly calling SHOW COLUMNS when the association is queried
[#1738 state:committed]
http://github.com/rails/rails/commit/7c147e94e66530a8314bc5d836df412fd749d55b</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [7c147e94e66530a8314bc5d836df412fd749d55b]) Cache columns
for has_and_belongs_to_many associations&lt;/p&gt;
&lt;p&gt;This avoids repeatedly calling SHOW COLUMNS when the association
is queried [&lt;a href=&quot;/projects/8994/tickets/1738&quot; title=&quot;Ticket #1738&quot;&gt;#1738&lt;/a&gt; state:committed] &lt;a href=&quot;http://github.com/rails/rails/commit/7c147e94e66530a8314bc5d836df412fd749d55b&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-17T05:11:57+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-17T05:11:58+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">10</version>
      <user-name>Repository</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Tests are failing on both edge and 2.2 after applying this patch:

http://ci.rubyonrails.org/builds/rails/3ee4e0
http://ci.rubyonrails.org/builds/rails_2-2-stable/7c147e</body>
      <body-html>&lt;div&gt;&lt;p&gt;Tests are failing on both edge and 2.2 after applying this
patch:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ci.rubyonrails.org/builds/rails/3ee4e0&quot;&gt;http://ci.rubyonrails.org/builds...&lt;/a&gt;
&lt;a href=&quot;http://ci.rubyonrails.org/builds/rails_2-2-stable/7c147e&quot;&gt;http://ci.rubyonrails.org/builds...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-17T11:39:32+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-17T11:39:35+00:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">11</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Looks like the sqlite adapter doesn't make any queries when calling connection.columns, at least from the perspective of assert_queries, which causes the test_caching_of_columns test to fail. I added an 'if current_adapter?(:MysqlAdapter)' around the test, since the only adapter that I know this test works with for sure is the MysqlAdapter.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks like the sqlite adapter doesn't make any queries when
calling connection.columns, at least from the perspective of
assert_queries, which causes the test_caching_of_columns test to
fail. I added an 'if current_adapter?(:MysqlAdapter)' around the
test, since the only adapter that I know this test works with for
sure is the MysqlAdapter.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-17T16:06:37+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-17T16:06:39+00:00</updated-at>
      <user-id type="integer">43314</user-id>
      <version type="integer">12</version>
      <user-name>Luke Ludwig</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Checking the build logs, we're seeing pass on MySQL, fail on PostgreSQL, SQLite2, SQLite3, before this patch.

All tests pass after applying this patch, but I'm -1 on it anyhow. If the problem is that the tests aren't testing the right thing, we should fix the tests. If the problem is that the caching works differently depending on adapter, we should have the check in the caching code, not in the test code. This approach is just hiding the issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Checking the build logs, we're seeing pass on MySQL, fail on
PostgreSQL, SQLite2, SQLite3, before this patch.&lt;/p&gt;
&lt;p&gt;All tests pass after applying this patch, but I'm -1 on it
anyhow. If the problem is that the tests aren't testing the right
thing, we should fix the tests. If the problem is that the caching
works differently depending on adapter, we should have the check in
the caching code, not in the test code. This approach is just
hiding the issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-17T16:39:40+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-17T16:39:43+00:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">13</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>The caching works the same for all adapters, so this is just a test issue. The caching of the habtm columns is very similar in regards to the caching of columns in ActiveRecord::Base. As far as I can tell there aren't any tests to verify that the caching works in ActiveRecord::Base.columns, so this test that I've added is better than nothing! I can look at getting this test to work for the other adapters, and at adding similar tests for ActiveRecord::Base.columns.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The caching works the same for all adapters, so this is just a
test issue. The caching of the habtm columns is very similar in
regards to the caching of columns in ActiveRecord::Base. As far as
I can tell there aren't any tests to verify that the caching works
in ActiveRecord::Base.columns, so this test that I've added is
better than nothing! I can look at getting this test to work for
the other adapters, and at adding similar tests for
ActiveRecord::Base.columns.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-17T18:11:37+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-17T18:11:41+00:00</updated-at>
      <user-id type="integer">43314</user-id>
      <version type="integer">14</version>
      <user-name>Luke Ludwig</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>@Luke - indeed, there isn't a test. The current code in query_cache.rb doesn't get called at all. 

I've got an idea how to rewrite it transparently (using some of the .extend stuff wycats wrote about yesterday) - will post a patch in the next few days.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Luke - indeed, there isn't a test. The current code in
query_cache.rb doesn't get called at all.&lt;/p&gt;
&lt;p&gt;I've got an idea how to rewrite it transparently (using some of
the .extend stuff wycats wrote about yesterday) - will post a patch
in the next few days.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-19T05:27:01+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-19T05:27:02+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">15</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Attached is a patch that fixes test_caching_of_columns to work for all database adapters. I did an alias_method_chain on connection.columns to count the number of times it is called, and then defined an assert_columns method which I use instead of assert_queries. I also added a test_caching_of_columns to base_test.rb.

Note that these tests do not test the query cache in any way.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attached is a patch that fixes test_caching_of_columns to work
for all database adapters. I did an alias_method_chain on
connection.columns to count the number of times it is called, and
then defined an assert_columns method which I use instead of
assert_queries. I also added a test_caching_of_columns to
base_test.rb.&lt;/p&gt;
&lt;p&gt;Note that these tests do not test the query cache in any
way.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-20T04:25:44+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-20T04:25:46+00:00</updated-at>
      <user-id type="integer">43314</user-id>
      <version type="integer">16</version>
      <user-name>Luke Ludwig</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-20T10:32:10+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- 
:state: committed
:assigned_user: 141
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-01-20T10:32:12+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">17</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>Is this still a problem ? If so, could you please open a new ticket and assign to me.

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;Is this still a problem ? If so, could you please open a new
ticket and assign to me.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-14T16:17:44+00:00</created-at>
      <creator-id type="integer">43314</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1738</number>
      <permalink>caching-columns-for-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>cache has_and_belongs_to_many patch</tag>
      <title>connection.columns doesn't get cached</title>
      <updated-at type="datetime">2009-03-14T16:17:46+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">18</version>
      <user-name>Pratik</user-name>
      <creator-name>Luke Ludwig</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>168bee810ce6945b6a55118f86cfd8aa56051f7e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-12T15:50:25+00:00</created-at>
      <filename>cache_habtm_colums.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">77407</id>
      <size type="integer">6261</size>
      <uploader-id type="integer">43314</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/77407/cache_habtm_colums.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>4920f8b128964831197ee30c45eca1cfcc5eec76</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-16T19:15:46+00:00</created-at>
      <filename>cache_habtm_columns_in_reflection.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">79190</id>
      <size type="integer">3934</size>
      <uploader-id type="integer">43314</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/79190/cache_habtm_columns_in_reflection.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>e9f67461cb3b336cd2ef0475666a7068f1ae311b</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-16T22:26:45+00:00</created-at>
      <filename>cache_habtm_columns_in_reflection_2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">79259</id>
      <size type="integer">4847</size>
      <uploader-id type="integer">43314</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/79259/cache_habtm_columns_in_reflection_2.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>500ac236655c3fc6408c8ecb13ccde1f025c4207</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-17T16:06:37+00:00</created-at>
      <filename>fix_habtm_cache_columns_test.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">79377</id>
      <size type="integer">1824</size>
      <uploader-id type="integer">43314</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/79377/fix_habtm_cache_columns_test.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>6b666ff609a6918122ff6456ca130790ed56c057</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-20T04:25:44+00:00</created-at>
      <filename>fix_test_caching_of_columns.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">79934</id>
      <size type="integer">3879</size>
      <uploader-id type="integer">43314</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/79934/fix_test_caching_of_columns.diff</url>
    </attachment>
  </attachments>
</ticket>
