From 193b2183aadd336305cc94f388e5f996abc3872c Mon Sep 17 00:00:00 2001
From: Ches Martin <ches@whiskeyandgrits.net>
Date: Sun, 12 Dec 2010 02:29:37 +0700
Subject: [PATCH] Add field and tag helpers for HTML5 date input types

Complementing the already-existing helpers for HTML5 input fields like
email, url, telephone, range, etc., this adds simple helpers for date,
month, week, time, datetime and datetime-local input types.

By virtue of the usual helper support for passing HTML options, you may
specify attributes for these inputs:

    <%= date_field :todo, :due_date, :min => Date.today.rfc3339 %>
---
 actionpack/lib/action_view/helpers/form_helper.rb  |   30 ++++++++++++
 .../lib/action_view/helpers/form_tag_helper.rb     |   48 ++++++++++++++++++++
 actionpack/test/template/form_helper_test.rb       |   30 ++++++++++++
 actionpack/test/template/form_tag_helper_test.rb   |   30 ++++++++++++
 4 files changed, 138 insertions(+), 0 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/form_helper.rb b/actionpack/lib/action_view/helpers/form_helper.rb
index befaa3e..3f655b5 100644
--- a/actionpack/lib/action_view/helpers/form_helper.rb
+++ b/actionpack/lib/action_view/helpers/form_helper.rb
@@ -844,6 +844,36 @@ module ActionView
         InstanceTag.new(object_name, method, self, options.delete(:object)).to_input_field_tag("email", options)
       end
 
+      # Returns a text_field of type "date".
+      def date_field(object_name, method, options = {})
+        InstanceTag.new(object_name, method, self, options.delete(:object)).to_input_field_tag("date", options)
+      end
+
+      # Returns a text_field of type "month".
+      def month_field(object_name, method, options = {})
+        InstanceTag.new(object_name, method, self, options.delete(:object)).to_input_field_tag("month", options)
+      end
+
+      # Returns a text_field of type "week".
+      def week_field(object_name, method, options = {})
+        InstanceTag.new(object_name, method, self, options.delete(:object)).to_input_field_tag("week", options)
+      end
+
+      # Returns a text_field of type "time".
+      def time_field(object_name, method, options = {})
+        InstanceTag.new(object_name, method, self, options.delete(:object)).to_input_field_tag("time", options)
+      end
+
+      # Returns a text_field of type "datetime".
+      def datetime_field(object_name, method, options = {})
+        InstanceTag.new(object_name, method, self, options.delete(:object)).to_input_field_tag("datetime", options)
+      end
+
+      # Returns a text_field of type "datetime-local".
+      def datetime_local_field(object_name, method, options = {})
+        InstanceTag.new(object_name, method, self, options.delete(:object)).to_input_field_tag("datetime-local", options)
+      end
+
       # Returns an input tag of type "number".
       #
       # ==== Options
diff --git a/actionpack/lib/action_view/helpers/form_tag_helper.rb b/actionpack/lib/action_view/helpers/form_tag_helper.rb
index 71f8534..dffc62c 100644
--- a/actionpack/lib/action_view/helpers/form_tag_helper.rb
+++ b/actionpack/lib/action_view/helpers/form_tag_helper.rb
@@ -557,6 +557,54 @@ module ActionView
         text_field_tag(name, value, options.stringify_keys.update("type" => "email"))
       end
 
+      # Creates a text field of type "date".
+      #
+      # ==== Options
+      # * Accepts the same options as text_field_tag.
+      def date_field_tag(name, value = nil, options = {})
+        text_field_tag(name, value, options.stringify_keys.update("type" => "date"))
+      end
+
+      # Creates a text field of type "month".
+      #
+      # ==== Options
+      # * Accepts the same options as text_field_tag.
+      def month_field_tag(name, value = nil, options = {})
+        text_field_tag(name, value, options.stringify_keys.update("type" => "month"))
+      end
+
+      # Creates a text field of type "week".
+      #
+      # ==== Options
+      # * Accepts the same options as text_field_tag.
+      def week_field_tag(name, value = nil, options = {})
+        text_field_tag(name, value, options.stringify_keys.update("type" => "week"))
+      end
+
+      # Creates a text field of type "time".
+      #
+      # ==== Options
+      # * Accepts the same options as text_field_tag.
+      def time_field_tag(name, value = nil, options = {})
+        text_field_tag(name, value, options.stringify_keys.update("type" => "time"))
+      end
+
+      # Creates a text field of type "datetime".
+      #
+      # ==== Options
+      # * Accepts the same options as text_field_tag.
+      def datetime_field_tag(name, value = nil, options = {})
+        text_field_tag(name, value, options.stringify_keys.update("type" => "datetime"))
+      end
+
+      # Creates a text field of type "datetime-local".
+      #
+      # ==== Options
+      # * Accepts the same options as text_field_tag.
+      def datetime_local_field_tag(name, value = nil, options = {})
+        text_field_tag(name, value, options.stringify_keys.update("type" => "datetime-local"))
+      end
+
       # Creates a number field.
       #
       # ==== Options
diff --git a/actionpack/test/template/form_helper_test.rb b/actionpack/test/template/form_helper_test.rb
index 31da26d..51b09ae 100644
--- a/actionpack/test/template/form_helper_test.rb
+++ b/actionpack/test/template/form_helper_test.rb
@@ -426,6 +426,36 @@ class FormHelperTest < ActionView::TestCase
     assert_dom_equal(expected, email_field("user", "address"))
   end
 
+  def test_date_field
+    expected = %{<input id="user_birthday" size="30" name="user[birthday]" type="date" />}
+    assert_dom_equal(expected, date_field("user", "birthday"))
+  end
+
+  def test_month_field
+    expected = %{<input id="promotion_period" size="30" name="promotion[period]" type="month" />}
+    assert_dom_equal(expected, month_field("promotion", "period"))
+  end
+
+  def test_week_field
+    expected = %{<input id="weekly_report_term" size="30" name="weekly_report[term]" type="week" />}
+    assert_dom_equal(expected, week_field("weekly_report", "term"))
+  end
+
+  def test_time_field
+    expected = %{<input id="meal_served_at" size="30" name="meal[served_at]" type="time" />}
+    assert_dom_equal(expected, time_field("meal", "served_at"))
+  end
+
+  def test_datetime_field
+    expected = %{<input id="todo_due_at" size="30" name="todo[due_at]" type="datetime" />}
+    assert_dom_equal(expected, datetime_field("todo", "due_at"))
+  end
+
+  def test_datetime_local_field
+    expected = %{<input id="event_when" size="30" name="event[when]" type="datetime-local" />}
+    assert_dom_equal(expected, datetime_local_field("event", "when"))
+  end
+
   def test_number_field
     expected = %{<input name="order[quantity]" size="30" max="9" id="order_quantity" type="number" min="1" />}
     assert_dom_equal(expected, number_field("order", "quantity", :in => 1...10))
diff --git a/actionpack/test/template/form_tag_helper_test.rb b/actionpack/test/template/form_tag_helper_test.rb
index f8671f2..c10bd00 100644
--- a/actionpack/test/template/form_tag_helper_test.rb
+++ b/actionpack/test/template/form_tag_helper_test.rb
@@ -463,6 +463,36 @@ class FormTagHelperTest < ActionView::TestCase
     assert_dom_equal(expected, email_field_tag("address"))
   end
 
+  def test_date_field_tag
+    expected = %{<input id="birthday" name="birthday" type="date" />}
+    assert_dom_equal(expected, date_field_tag("birthday"))
+  end
+
+  def test_month_field_tag
+    expected = %{<input id="promotion_period" name="promotion_period" type="month" />}
+    assert_dom_equal(expected, month_field_tag("promotion_period"))
+  end
+
+  def test_week_field_tag
+    expected = %{<input id="report_term" name="report_term" type="week" />}
+    assert_dom_equal(expected, week_field_tag("report_term"))
+  end
+
+  def test_time_field_tag
+    expected = %{<input id="served_at" name="served_at" type="time" />}
+    assert_dom_equal(expected, time_field_tag("served_at"))
+  end
+
+  def test_datetime_field_tag
+    expected = %{<input id="due_at" name="due_at" type="datetime" />}
+    assert_dom_equal(expected, datetime_field_tag("due_at"))
+  end
+
+  def test_datetime_local_field_tag
+    expected = %{<input id="when" name="when" type="datetime-local" />}
+    assert_dom_equal(expected, datetime_local_field_tag("when"))
+  end
+
   def test_number_field_tag
     expected = %{<input name="quantity" max="9" id="quantity" type="number" min="1" />}
     assert_dom_equal(expected, number_field_tag("quantity", nil, :in => 1...10))
-- 
1.7.1

