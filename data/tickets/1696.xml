<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">17477</assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-05T13:27:19+00:00</created-at>
  <creator-id type="integer">136</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1696</number>
  <permalink>problem-with-nested-include-missing-data-and-old-style-single-query-eager-loading</permalink>
  <priority type="integer">810</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord eager_loading include joins patch</tag>
  <title>Problem with nested include missing data and old-style single query eager loading</title>
  <updated-at type="datetime">2009-03-12T14:36:08+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">8</version>
  <user-name>Repository</user-name>
  <creator-name>Murray Steele</creator-name>
  <assigned-user-name>Frederick Cheung</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1696</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>If we write a find as follows (using the AR test schema):

@@@ ruby
Author.find :all, :include =&gt; {:posts =&gt; :comments, :categorizations =&gt; :category, :author_favorites =&gt; :favorite_author }, :order =&gt; 'categories.name'
@@@

And the data is such that there is an author that has posts with comments and categorizations with categories but no author_favorites we'll get a NoMethodError as ActiveRecord tries to call comments= on a Categorization instance.  If there were only 2 rather than 3 includes there'd be no error (possibly an extra SQL query) and if the include with the missing data isn't the 1st when the joins are alphabetised, again there would be no error.

The problem occurs because JoinDependency uses 2 arrays (one of associations and one of joins) to interrogate rows of data and construct the correct objects and their associations.  The code assumes that the 2 arrays never get out of sync, but in this case they do.  It's only a problem when there are 2 joins after the join with missing data, otherwise the arrays exhaust themselves before the error can happen.

The supplied patch changes JoinDependency to find the correct join from the array of joins based on the association we are trying to build, rather than just assume the arrays are synced up.</original-body>
  <latest-body>If we write a find as follows (using the AR test schema):

@@@ ruby
Author.find :all, :include =&gt; {:posts =&gt; :comments, :categorizations =&gt; :category, :author_favorites =&gt; :favorite_author }, :order =&gt; 'categories.name'
@@@

And the data is such that there is an author that has posts with comments and categorizations with categories but no author_favorites we'll get a NoMethodError as ActiveRecord tries to call comments= on a Categorization instance.  If there were only 2 rather than 3 includes there'd be no error (possibly an extra SQL query) and if the include with the missing data isn't the 1st when the joins are alphabetised, again there would be no error.

The problem occurs because JoinDependency uses 2 arrays (one of associations and one of joins) to interrogate rows of data and construct the correct objects and their associations.  The code assumes that the 2 arrays never get out of sync, but in this case they do.  It's only a problem when there are 2 joins after the join with missing data, otherwise the arrays exhaust themselves before the error can happen.

The supplied patch changes JoinDependency to find the correct join from the array of joins based on the association we are trying to build, rather than just assume the arrays are synced up.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If we write a find as follows (using the AR test schema):&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Author.find :all, :include =&amp;gt; {:posts =&amp;gt; :comments, :categorizations =&amp;gt; :category, :author_favorites =&amp;gt; :favorite_author }, :order =&amp;gt; 'categories.name'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the data is such that there is an author that has posts with
comments and categorizations with categories but no
author_favorites we'll get a NoMethodError as ActiveRecord tries to
call comments= on a Categorization instance. If there were only 2
rather than 3 includes there'd be no error (possibly an extra SQL
query) and if the include with the missing data isn't the 1st when
the joins are alphabetised, again there would be no error.&lt;/p&gt;
&lt;p&gt;The problem occurs because JoinDependency uses 2 arrays (one of
associations and one of joins) to interrogate rows of data and
construct the correct objects and their associations. The code
assumes that the 2 arrays never get out of sync, but in this case
they do. It's only a problem when there are 2 joins after the join
with missing data, otherwise the arrays exhaust themselves before
the error can happen.&lt;/p&gt;
&lt;p&gt;The supplied patch changes JoinDependency to find the correct
join from the array of joins based on the association we are trying
to build, rather than just assume the arrays are synced up.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If we write a find as follows (using the AR test schema):

@@@ ruby
Author.find :all, :include =&gt; {:posts =&gt; :comments, :categorizations =&gt; :category, :author_favorites =&gt; :favorite_author }, :order =&gt; 'categories.name'
@@@

And the data is such that there is an author that has posts with comments and categorizations with categories but no author_favorites we'll get a NoMethodError as ActiveRecord tries to call comments= on a Categorization instance.  If there were only 2 rather than 3 includes there'd be no error (possibly an extra SQL query) and if the include with the missing data isn't the 1st when the joins are alphabetised, again there would be no error.

The problem occurs because JoinDependency uses 2 arrays (one of associations and one of joins) to interrogate rows of data and construct the correct objects and their associations.  The code assumes that the 2 arrays never get out of sync, but in this case they do.  It's only a problem when there are 2 joins after the join with missing data, otherwise the arrays exhaust themselves before the error can happen.

The supplied patch changes JoinDependency to find the correct join from the array of joins based on the association we are trying to build, rather than just assume the arrays are synced up.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If we write a find as follows (using the AR test schema):&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Author.find :all, :include =&amp;gt; {:posts =&amp;gt; :comments, :categorizations =&amp;gt; :category, :author_favorites =&amp;gt; :favorite_author }, :order =&amp;gt; 'categories.name'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the data is such that there is an author that has posts with
comments and categorizations with categories but no
author_favorites we'll get a NoMethodError as ActiveRecord tries to
call comments= on a Categorization instance. If there were only 2
rather than 3 includes there'd be no error (possibly an extra SQL
query) and if the include with the missing data isn't the 1st when
the joins are alphabetised, again there would be no error.&lt;/p&gt;
&lt;p&gt;The problem occurs because JoinDependency uses 2 arrays (one of
associations and one of joins) to interrogate rows of data and
construct the correct objects and their associations. The code
assumes that the 2 arrays never get out of sync, but in this case
they do. It's only a problem when there are 2 joins after the join
with missing data, otherwise the arrays exhaust themselves before
the error can happen.&lt;/p&gt;
&lt;p&gt;The supplied patch changes JoinDependency to find the correct
join from the array of joins based on the association we are trying
to build, rather than just assume the arrays are synced up.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-05T13:27:19+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1696</number>
      <permalink>problem-with-nested-include-missing-data-and-old-style-single-query-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading include joins patch</tag>
      <title>Problem with nested include missing data and old-style single query eager loading</title>
      <updated-at type="datetime">2009-01-05T13:27:21+00:00</updated-at>
      <user-id type="integer">136</user-id>
      <version type="integer">1</version>
      <user-name>Murray Steele</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1696</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-05T13:52:02+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 141
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1696</number>
      <permalink>problem-with-nested-include-missing-data-and-old-style-single-query-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading include joins patch</tag>
      <title>Problem with nested include missing data and old-style single query eager loading</title>
      <updated-at type="datetime">2009-01-05T13:52:07+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1696</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 Code looks like it will work with this strange edge case. Have included a patch to remove unnecessary delete in Murray's patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 Code looks like it will work with this strange edge case.
Have included a patch to remove unnecessary delete in Murray's
patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-15T12:37:13+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1696</number>
      <permalink>problem-with-nested-include-missing-data-and-old-style-single-query-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading include joins patch</tag>
      <title>Problem with nested include missing data and old-style single query eager loading</title>
      <updated-at type="datetime">2009-01-15T12:37:17+00:00</updated-at>
      <user-id type="integer">3299</user-id>
      <version type="integer">3</version>
      <user-name>Jonathan Lim</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1696</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Any thoughts on this Frederick?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Any thoughts on this Frederick?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-15T21:03:03+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1696</number>
      <permalink>problem-with-nested-include-missing-data-and-old-style-single-query-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading include joins patch</tag>
      <title>Problem with nested include missing data and old-style single query eager loading</title>
      <updated-at type="datetime">2009-01-15T21:03:06+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">4</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1696</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Don't have time to give this a detailed work over but looks sensible to me</body>
      <body-html>&lt;div&gt;&lt;p&gt;Don't have time to give this a detailed work over but looks
sensible to me&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-15T23:35:51+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1696</number>
      <permalink>problem-with-nested-include-missing-data-and-old-style-single-query-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading include joins patch</tag>
      <title>Problem with nested include missing data and old-style single query eager loading</title>
      <updated-at type="datetime">2009-01-15T23:35:55+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">5</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1696</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>OK, the commit message should get redone to just describe the bug getting fixed rather than having review notes.  There's some whitespace stuff

Beyond that I think we're good to go.  Got time to wrap it up murray?</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, the commit message should get redone to just describe the
bug getting fixed rather than having review notes. There's some
whitespace stuff&lt;/p&gt;
&lt;p&gt;Beyond that I think we're good to go. Got time to wrap it up
murray?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-16T00:31:54+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1696</number>
      <permalink>problem-with-nested-include-missing-data-and-old-style-single-query-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading include joins patch</tag>
      <title>Problem with nested include missing data and old-style single query eager loading</title>
      <updated-at type="datetime">2009-01-16T00:31:58+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">6</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1696</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sounds good.  Hopefully the new commit message is ok.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sounds good. Hopefully the new commit message is ok.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-19T11:41:47+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1696</number>
      <permalink>problem-with-nested-include-missing-data-and-old-style-single-query-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading include joins patch</tag>
      <title>Problem with nested include missing data and old-style single query eager loading</title>
      <updated-at type="datetime">2009-01-19T11:41:53+00:00</updated-at>
      <user-id type="integer">136</user-id>
      <version type="integer">7</version>
      <user-name>Murray Steele</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1696</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [db26ace030f6704da6fc80bcc6cd00a2aee664ce]) Ensure NoMethodError isn't raised when some of the nested eager loaded associations are empty [#1696 state:resolved]

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/db26ace030f6704da6fc80bcc6cd00a2aee664ce</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [db26ace030f6704da6fc80bcc6cd00a2aee664ce]) Ensure
NoMethodError isn't raised when some of the nested eager loaded
associations are empty [&lt;a href=&quot;/projects/8994/tickets/1696&quot; title=&quot;Ticket #1696&quot;&gt;#1696&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Pratik Naik &lt;a href=&quot;mailto:pratiknaik@gmail.com&quot;&gt;pratiknaik@gmail.com&lt;/a&gt; &lt;a href=&quot;http://github.com/rails/rails/commit/db26ace030f6704da6fc80bcc6cd00a2aee664ce&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-12T14:36:04+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1696</number>
      <permalink>problem-with-nested-include-missing-data-and-old-style-single-query-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord eager_loading include joins patch</tag>
      <title>Problem with nested include missing data and old-style single query eager loading</title>
      <updated-at type="datetime">2009-03-12T14:36:08+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1696</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ee3e2b2ba66320192c85b04fa4910c5edfcc0cab</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-05T13:27:19+00:00</created-at>
      <filename>adding-a-fix-for-obscure-problem-with-nested-include.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">75336</id>
      <size type="integer">6213</size>
      <uploader-id type="integer">136</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/75336/adding-a-fix-for-obscure-problem-with-nested-include.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>755ae012b4640d42f77786c5dd2912078a37170c</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-15T12:37:13+00:00</created-at>
      <filename>1696_removing_unnecessary_delete.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">78719</id>
      <size type="integer">7245</size>
      <uploader-id type="integer">3299</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/78719/1696_removing_unnecessary_delete.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>240bc7fb990254680581b2b0ae53c151862cb389</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-19T11:41:47+00:00</created-at>
      <filename>adding-a-fix-for-obscure-problem-with-nested-include-_reworded-commit-message_.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">79618</id>
      <size type="integer">4712</size>
      <uploader-id type="integer">136</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/79618/adding-a-fix-for-obscure-problem-with-nested-include-_reworded-commit-message_.patch</url>
    </attachment>
  </attachments>
</ticket>
