<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-02-24T12:26:42+00:00</created-at>
  <creator-id type="integer">17428</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">4046</number>
  <permalink>responder-method-for-controller</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>controller rails3 responder</tag>
  <title>responder method for controller</title>
  <updated-at type="datetime">2010-10-15T23:01:45+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">5</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Jan De Poorter</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4046</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>I'm developing a project in Rails 3.0 and I love the Responder functionality. I'm currently using around 4 to 5 different responders per controller, and bumped into the problem that I had to create custom Responders for different sets of functions. I had a PaginationAndSortingResponder, a SortingAndFlash responder, a PaginationAndSortingAndFlash responder, and so on.

I'd think it better to have a way to cherry-pick the responders you want in a easy way. I came up with this syntax:

@@@ ruby
class InvitationController &lt; ApplicationController
  responder :pagination, :flash
end
@@@

This codes loads up a responder with PaginationResponder and FlashResponder. I'm currently implementing this code in ApplicationController this way:

@@@ ruby
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  
  class &lt;&lt; self
    def responder *responders
      if responders.any?
        responder_class = Class.new(ActionController::Responder)
        responders.each do |responder|
          responder = responder.is_a?(Module) ? responder : &quot;#{responder.to_s.classify}Responder&quot;.constantize
          responder_class.send(:include, responder)
        end
        self.responder = responder_class
      else
        super()
      end
    end
  end
end
@@@

I'd write a patch but with the new structure I'm not sure where I should put this method. I see the `responder` definition now is in `ActionController::MimeResponds`, is this also the place I should implement this function? (if wanted, ofcourse)</original-body>
  <latest-body>I'm developing a project in Rails 3.0 and I love the Responder functionality. I'm currently using around 4 to 5 different responders per controller, and bumped into the problem that I had to create custom Responders for different sets of functions. I had a PaginationAndSortingResponder, a SortingAndFlash responder, a PaginationAndSortingAndFlash responder, and so on.

I'd think it better to have a way to cherry-pick the responders you want in a easy way. I came up with this syntax:

@@@ ruby
class InvitationController &lt; ApplicationController
  responder :pagination, :flash
end
@@@

This codes loads up a responder with PaginationResponder and FlashResponder. I'm currently implementing this code in ApplicationController this way:

@@@ ruby
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  
  class &lt;&lt; self
    def responder *responders
      if responders.any?
        responder_class = Class.new(ActionController::Responder)
        responders.each do |responder|
          responder = responder.is_a?(Module) ? responder : &quot;#{responder.to_s.classify}Responder&quot;.constantize
          responder_class.send(:include, responder)
        end
        self.responder = responder_class
      else
        super()
      end
    end
  end
end
@@@

I'd write a patch but with the new structure I'm not sure where I should put this method. I see the `responder` definition now is in `ActionController::MimeResponds`, is this also the place I should implement this function? (if wanted, ofcourse)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm developing a project in Rails 3.0 and I love the Responder
functionality. I'm currently using around 4 to 5 different
responders per controller, and bumped into the problem that I had
to create custom Responders for different sets of functions. I had
a PaginationAndSortingResponder, a SortingAndFlash responder, a
PaginationAndSortingAndFlash responder, and so on.&lt;/p&gt;
&lt;p&gt;I'd think it better to have a way to cherry-pick the responders
you want in a easy way. I came up with this syntax:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class InvitationController &amp;lt; ApplicationController
  responder :pagination, :flash
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This codes loads up a responder with PaginationResponder and
FlashResponder. I'm currently implementing this code in
ApplicationController this way:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  protect_from_forgery
  
  class &amp;lt;&amp;lt; self
    def responder *responders
      if responders.any?
        responder_class = Class.new(ActionController::Responder)
        responders.each do |responder|
          responder = responder.is_a?(Module) ? responder : &quot;#{responder.to_s.classify}Responder&quot;.constantize
          responder_class.send(:include, responder)
        end
        self.responder = responder_class
      else
        super()
      end
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'd write a patch but with the new structure I'm not sure where
I should put this method. I see the &lt;code&gt;responder&lt;/code&gt;
definition now is in &lt;code&gt;ActionController::MimeResponds&lt;/code&gt;,
is this also the place I should implement this function? (if
wanted, ofcourse)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm developing a project in Rails 3.0 and I love the Responder functionality. I'm currently using around 4 to 5 different responders per controller, and bumped into the problem that I had to create custom Responders for different sets of functions. I had a PaginationAndSortingResponder, a SortingAndFlash responder, a PaginationAndSortingAndFlash responder, and so on.

I'd think it better to have a way to cherry-pick the responders you want in a easy way. I came up with this syntax:

@@@ ruby
class InvitationController &lt; ApplicationController
  responder :pagination, :flash
end
@@@

This codes loads up a responder with PaginationResponder and FlashResponder. I'm currently implementing this code in ApplicationController this way:

@@@ ruby
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  
  class &lt;&lt; self
    def responder *responders
      if responders.any?
        responder_class = Class.new(ActionController::Responder)
        responders.each do |responder|
          responder = responder.is_a?(Module) ? responder : &quot;#{responder.to_s.classify}Responder&quot;.constantize
          responder_class.send(:include, responder)
        end
        self.responder = responder_class
      else
        super()
      end
    end
  end
end
@@@

I'd write a patch but with the new structure I'm not sure where I should put this method. I see the `responder` definition now is in `ActionController::MimeResponds`, is this also the place I should implement this function? (if wanted, ofcourse)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm developing a project in Rails 3.0 and I love the Responder
functionality. I'm currently using around 4 to 5 different
responders per controller, and bumped into the problem that I had
to create custom Responders for different sets of functions. I had
a PaginationAndSortingResponder, a SortingAndFlash responder, a
PaginationAndSortingAndFlash responder, and so on.&lt;/p&gt;
&lt;p&gt;I'd think it better to have a way to cherry-pick the responders
you want in a easy way. I came up with this syntax:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class InvitationController &amp;lt; ApplicationController
  responder :pagination, :flash
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This codes loads up a responder with PaginationResponder and
FlashResponder. I'm currently implementing this code in
ApplicationController this way:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  protect_from_forgery
  
  class &amp;lt;&amp;lt; self
    def responder *responders
      if responders.any?
        responder_class = Class.new(ActionController::Responder)
        responders.each do |responder|
          responder = responder.is_a?(Module) ? responder : &quot;#{responder.to_s.classify}Responder&quot;.constantize
          responder_class.send(:include, responder)
        end
        self.responder = responder_class
      else
        super()
      end
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'd write a patch but with the new structure I'm not sure where
I should put this method. I see the &lt;code&gt;responder&lt;/code&gt;
definition now is in &lt;code&gt;ActionController::MimeResponds&lt;/code&gt;,
is this also the place I should implement this function? (if
wanted, ofcourse)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-24T12:26:42+00:00</created-at>
      <creator-id type="integer">17428</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4046</number>
      <permalink>responder-method-for-controller</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>controller rails3 responder</tag>
      <title>responder method for controller</title>
      <updated-at type="datetime">2010-02-24T12:26:46+00:00</updated-at>
      <user-id type="integer">17428</user-id>
      <version type="integer">1</version>
      <user-name>Jan De Poorter</user-name>
      <creator-name>Jan De Poorter</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4046</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>While using it for about 6 days I notice I'd also like this method to inherit from ApplicationController, but possibility to override. Wondering how to do this though :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;While using it for about 6 days I notice I'd also like this
method to inherit from ApplicationController, but possibility to
override. Wondering how to do this though :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-03T09:53:54+00:00</created-at>
      <creator-id type="integer">17428</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4046</number>
      <permalink>responder-method-for-controller</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>controller rails3 responder</tag>
      <title>responder method for controller</title>
      <updated-at type="datetime">2010-03-03T09:53:57+00:00</updated-at>
      <user-id type="integer">17428</user-id>
      <version type="integer">2</version>
      <user-name>Jan De Poorter</user-name>
      <creator-name>Jan De Poorter</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4046</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Figured this was more of a plugin thing for now. Moved it to http://github.com/DefV/easy_responders</body>
      <body-html>&lt;div&gt;&lt;p&gt;Figured this was more of a plugin thing for now. Moved it to
&lt;a href=
&quot;http://github.com/DefV/easy_responders&quot;&gt;http://github.com/DefV/easy_responders&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-15T15:33:42+00:00</created-at>
      <creator-id type="integer">17428</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4046</number>
      <permalink>responder-method-for-controller</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>controller rails3 responder</tag>
      <title>responder method for controller</title>
      <updated-at type="datetime">2010-03-15T15:33:44+00:00</updated-at>
      <user-id type="integer">17428</user-id>
      <version type="integer">3</version>
      <user-name>Jan De Poorter</user-name>
      <creator-name>Jan De Poorter</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4046</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey, I was talking with Jeremy and we just realized the same. Although, I was thinking in merging it with my responders gem:

http://github.com/plataformatec/responders

Are you in mood for a patch or should I implement it myself? :)

Regards!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey, I was talking with Jeremy and we just realized the same.
Although, I was thinking in merging it with my responders gem:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/plataformatec/responders&quot;&gt;http://github.com/plataformatec/responders&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Are you in mood for a patch or should I implement it myself?
:)&lt;/p&gt;
&lt;p&gt;Regards!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-15T15:37:58+00:00</created-at>
      <creator-id type="integer">17428</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4046</number>
      <permalink>responder-method-for-controller</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>controller rails3 responder</tag>
      <title>responder method for controller</title>
      <updated-at type="datetime">2010-03-15T15:38:01+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">4</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jan De Poorter</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4046</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:45+01:00</created-at>
      <creator-id type="integer">17428</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4046</number>
      <permalink>responder-method-for-controller</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>controller rails3 responder</tag>
      <title>responder method for controller</title>
      <updated-at type="datetime">2010-10-15T23:01:45+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Jan De Poorter</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4046</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
