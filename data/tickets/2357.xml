<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-17T08:07:22+00:00</created-at>
  <creator-id type="integer">39170</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2357</number>
  <permalink>predictable-table-aliases-in-joins</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>activerecord joins named_scope table_alias</tag>
  <title>Predictable Table Aliases in Joins</title>
  <updated-at type="datetime">2011-03-26T02:30:34+00:00</updated-at>
  <user-id type="integer">142823</user-id>
  <version type="integer">13</version>
  <user-name>bingbing</user-name>
  <creator-name>Steffen Bartsch</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Right now, ActiveRecord assigns table aliases for association joins fairly unpredictable.  The first association to a certain table keeps the table name.  Further joins with associations to that table use aliases consisting of the association names in the path.

With the great flexibility of named_scoped, it is increasingly common for app developers not to know about already existing joins at coding time.  Also, the order of joins in a Hash is undefined in Ruby 1.8.

Table aliases are needed, though, for building conditions on the association tables.  With our plugin declarative_authorization, which is using named_scopes to rewrite queries according to permissions, we frequently run into problems because of unpredictable table aliases.

I'd like to propose (and am willing to implement) the following simple API for querying the expected table alias for certain association join path, to be used by app developers

@@@ ruby
ActiveRecord::Base.table_alias_for(*path)

# Example:
company_alias = User.table_alias_for(:home_branch, :company)
User.some_scope.find(:all, 
    :joins      =&gt; {:home_branch =&gt; :company}, 
    :conditions =&gt; [&quot;#{company_alias}.name LIKE ?&quot;, search])
@@@

The actual algorithm for determining the table alias should work as follows:
* All joins receive a table alias according to the join path
* Association names in a path are concatenated into a long alias, i.e. :home_branch, :company =&gt; &quot;home_branch_company&quot;
* Aliases exceeding the max alias name length are shortened to (max_length - 9) and concatenated with an underscore and 8 characters from the long alias string hash in hex

I.e.
@@@ ruby
long_alias = join_path * &quot;_&quot;
table_alias = long_alias[0, max_table_alias_length - 9] + &quot;_&quot; + (&quot;%x&quot; % long_alias.hash)[0,8]
@@@

Thoughts?</original-body>
  <latest-body>Right now, ActiveRecord assigns table aliases for association joins fairly unpredictable.  The first association to a certain table keeps the table name.  Further joins with associations to that table use aliases consisting of the association names in the path.

With the great flexibility of named_scoped, it is increasingly common for app developers not to know about already existing joins at coding time.  Also, the order of joins in a Hash is undefined in Ruby 1.8.

Table aliases are needed, though, for building conditions on the association tables.  With our plugin declarative_authorization, which is using named_scopes to rewrite queries according to permissions, we frequently run into problems because of unpredictable table aliases.

I'd like to propose (and am willing to implement) the following simple API for querying the expected table alias for certain association join path, to be used by app developers

@@@ ruby
ActiveRecord::Base.table_alias_for(*path)

# Example:
company_alias = User.table_alias_for(:home_branch, :company)
User.some_scope.find(:all, 
    :joins      =&gt; {:home_branch =&gt; :company}, 
    :conditions =&gt; [&quot;#{company_alias}.name LIKE ?&quot;, search])
@@@

The actual algorithm for determining the table alias should work as follows:
* All joins receive a table alias according to the join path
* Association names in a path are concatenated into a long alias, i.e. :home_branch, :company =&gt; &quot;home_branch_company&quot;
* Aliases exceeding the max alias name length are shortened to (max_length - 9) and concatenated with an underscore and 8 characters from the long alias string hash in hex

I.e.
@@@ ruby
long_alias = join_path * &quot;_&quot;
table_alias = long_alias[0, max_table_alias_length - 9] + &quot;_&quot; + (&quot;%x&quot; % long_alias.hash)[0,8]
@@@

Thoughts?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Right now, ActiveRecord assigns table aliases for association
joins fairly unpredictable. The first association to a certain
table keeps the table name. Further joins with associations to that
table use aliases consisting of the association names in the
path.&lt;/p&gt;
&lt;p&gt;With the great flexibility of named_scoped, it is increasingly
common for app developers not to know about already existing joins
at coding time. Also, the order of joins in a Hash is undefined in
Ruby 1.8.&lt;/p&gt;
&lt;p&gt;Table aliases are needed, though, for building conditions on the
association tables. With our plugin declarative_authorization,
which is using named_scopes to rewrite queries according to
permissions, we frequently run into problems because of
unpredictable table aliases.&lt;/p&gt;
&lt;p&gt;I'd like to propose (and am willing to implement) the following
simple API for querying the expected table alias for certain
association join path, to be used by app developers&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
ActiveRecord::Base.table_alias_for(*path)

# Example:
company_alias = User.table_alias_for(:home_branch, :company)
User.some_scope.find(:all, 
    :joins      =&amp;gt; {:home_branch =&amp;gt; :company}, 
    :conditions =&amp;gt; [&amp;quot;#{company_alias}.name LIKE ?&amp;quot;, search])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The actual algorithm for determining the table alias should work
as follows: * All joins receive a table alias according to the join
path * Association names in a path are concatenated into a long
alias, i.e. :home_branch, :company =&amp;gt; &quot;home_branch_company&quot; *
Aliases exceeding the max alias name length are shortened to
(max_length - 9) and concatenated with an underscore and 8
characters from the long alias string hash in hex&lt;/p&gt;
&lt;p&gt;I.e.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
long_alias = join_path * &amp;quot;_&amp;quot;
table_alias = long_alias[0, max_table_alias_length - 9] + &amp;quot;_&amp;quot; + (&amp;quot;%x&amp;quot; % long_alias.hash)[0,8]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Right now, ActiveRecord assigns table aliases for association joins fairly unpredictable.  The first association to a certain table keeps the table name.  Further joins with associations to that table use aliases consisting of the association names in the path.

With the great flexibility of named_scoped, it is increasingly common for app developers not to know about already existing joins at coding time.  Also, the order of joins in a Hash is undefined in Ruby 1.8.

Table aliases are needed, though, for building conditions on the association tables.  With our plugin declarative_authorization, which is using named_scopes to rewrite queries according to permissions, we frequently run into problems because of unpredictable table aliases.

I'd like to propose (and am willing to implement) the following simple API for querying the expected table alias for certain association join path, to be used by app developers
@@@ ruby
ActiveRecord::Base.table_alias_for(*path)

# Example:
company_alias = User.table_alias_for(:home_branch, :company)
User.some_scope.find(:all, 
    :joins      =&gt; {:home_branch =&gt; :company}, 
    :conditions =&gt; [&quot;#{company_alias}.name LIKE ?&quot;, search])
@@@

The actual algorithm for determining the table alias should work as follows:

* All joins receive a table alias according to the join path
* Association names in a path are concatenated into a long alias, i.e. :home_branch, :company =&gt; &quot;home_branch_company&quot;
* Aliases exceeding the max alias name length are shortened to (max_length - 9) and concatenated with an underscore and 8 characters from the long alias string hash in hex

I.e.
@@@ ruby
long_alias = join_path * &quot;_&quot;
table_alias = long_alias[0, max_table_alias_length - 9] + 
    &quot;_&quot; + (&quot;%x&quot; % long_alias.hash)[0,8]
@@@

Thoughts?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Right now, ActiveRecord assigns table aliases for association
joins fairly unpredictable. The first association to a certain
table keeps the table name. Further joins with associations to that
table use aliases consisting of the association names in the
path.&lt;/p&gt;
&lt;p&gt;With the great flexibility of named_scoped, it is increasingly
common for app developers not to know about already existing joins
at coding time. Also, the order of joins in a Hash is undefined in
Ruby 1.8.&lt;/p&gt;
&lt;p&gt;Table aliases are needed, though, for building conditions on the
association tables. With our plugin declarative_authorization,
which is using named_scopes to rewrite queries according to
permissions, we frequently run into problems because of
unpredictable table aliases.&lt;/p&gt;
&lt;p&gt;I'd like to propose (and am willing to implement) the following
simple API for querying the expected table alias for certain
association join path, to be used by app developers&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
ActiveRecord::Base.table_alias_for(*path)

# Example:
company_alias = User.table_alias_for(:home_branch, :company)
User.some_scope.find(:all, 
    :joins      =&amp;gt; {:home_branch =&amp;gt; :company}, 
    :conditions =&amp;gt; [&amp;quot;#{company_alias}.name LIKE ?&amp;quot;, search])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The actual algorithm for determining the table alias should work
as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All joins receive a table alias according to the join path&lt;/li&gt;
&lt;li&gt;Association names in a path are concatenated into a long alias,
i.e. :home_branch, :company =&amp;gt; &quot;home_branch_company&quot;&lt;/li&gt;
&lt;li&gt;Aliases exceeding the max alias name length are shortened to
(max_length - 9) and concatenated with an underscore and 8
characters from the long alias string hash in hex&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I.e.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
long_alias = join_path * &amp;quot;_&amp;quot;
table_alias = long_alias[0, max_table_alias_length - 9] + 
    &amp;quot;_&amp;quot; + (&amp;quot;%x&amp;quot; % long_alias.hash)[0,8]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-27T14:36:00+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2009-03-27T14:37:31+00:00</updated-at>
      <user-id type="integer">39170</user-id>
      <version type="integer">1</version>
      <user-name>Steffen Bartsch</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This should definitely be addressed. It's a huge issue for named_scope use, as you stated.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This should definitely be addressed. It's a huge issue for
named_scope use, as you stated.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-25T01:50:26+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord joins table_alias
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2009-04-25T01:50:32+01:00</updated-at>
      <user-id type="integer">38963</user-id>
      <version type="integer">2</version>
      <user-name>ronin-38963 (at lighthouseapp)</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good to see you again, Steffen!

I recently did some screwing around in ActiveRecord base.rb to make `:conditions` &quot;follow along&quot; with the `:joins` specified in `find`.  So you can do something like this...

@@@ ruby
Blah.find(:all,
  :joins =&gt; {:foo =&gt; {:bar =&gt; {:baz =&gt; :foos}}},
  :conditions =&gt; {:foo =&gt; {:bar =&gt; {:baz =&gt; {:foos =&gt; {:name =&gt; 'Qux'}}}}}
)
@@@

...and the generated SQL will have the correct table alias for `:foos` (probably something like `blahs_foos`).  The conditions can be arbitrarily complex, as long as your attribute and association names are correct and all referenced associations are included in `:joins`.

This patch doesn't really do what Steffen requested, but it might help some users.  It makes `:conditions` behave in such a way that you don't really need to know the table aliases in the first place.

Of course, if you want to test for anything but equality (like in Steffen's example, using a LIKE), this patch isn't going to help.  I wonder if we could/should get the job done by also amending `find` to make `:conditions` able to handle things other than equality (e.g. like, not_like, between, not_between).

@@@ ruby
User.some_scope.find(:all, 
    :joins      =&gt; {:home_branch =&gt; :company}, 
    :conditions =&gt; {:home_branch =&gt; :company =&gt; {:name =&gt; like {search}}})
@@@

Patch attached.  It doesn't include any new tests, but I did make sure that none of the existing ActiveRecord tests broke.  (Tested against sqlite3 only.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good to see you again, Steffen!&lt;/p&gt;
&lt;p&gt;I recently did some screwing around in ActiveRecord base.rb to
make &lt;code&gt;:conditions&lt;/code&gt; &quot;follow along&quot; with the
&lt;code&gt;:joins&lt;/code&gt; specified in &lt;code&gt;find&lt;/code&gt;. So you can do
something like this...&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Blah.find(:all,
  :joins =&amp;gt; {:foo =&amp;gt; {:bar =&amp;gt; {:baz =&amp;gt; :foos}}},
  :conditions =&amp;gt; {:foo =&amp;gt; {:bar =&amp;gt; {:baz =&amp;gt; {:foos =&amp;gt; {:name =&amp;gt; 'Qux'}}}}}
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...and the generated SQL will have the correct table alias for
&lt;code&gt;:foos&lt;/code&gt; (probably something like
&lt;code&gt;blahs_foos&lt;/code&gt;). The conditions can be arbitrarily
complex, as long as your attribute and association names are
correct and all referenced associations are included in
&lt;code&gt;:joins&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This patch doesn't really do what Steffen requested, but it
might help some users. It makes &lt;code&gt;:conditions&lt;/code&gt; behave in
such a way that you don't really need to know the table aliases in
the first place.&lt;/p&gt;
&lt;p&gt;Of course, if you want to test for anything but equality (like
in Steffen's example, using a LIKE), this patch isn't going to
help. I wonder if we could/should get the job done by also amending
&lt;code&gt;find&lt;/code&gt; to make &lt;code&gt;:conditions&lt;/code&gt; able to handle
things other than equality (e.g. like, not_like, between,
not_between).&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
User.some_scope.find(:all, 
    :joins      =&amp;gt; {:home_branch =&amp;gt; :company}, 
    :conditions =&amp;gt; {:home_branch =&amp;gt; :company =&amp;gt; {:name =&amp;gt; like {search}}})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Patch attached. It doesn't include any new tests, but I did make
sure that none of the existing ActiveRecord tests broke. (Tested
against sqlite3 only.)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-26T08:03:38+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2009-04-26T08:03:42+01:00</updated-at>
      <user-id type="integer">42524</user-id>
      <version type="integer">3</version>
      <user-name>Brian Langenfeld</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'd say, we should have both, a way of predicting table aliases for complex named_scopes and an easy mechanism for nested conditions as you propose, Brian.

The problem with the last code block in Brian's comment is that it relies on the method like to be available in the scope of the find call.  Even if you  added all operators as instance methods to AR (which would introduce quite a lot of noise in the models), you still wouldn't be able to use those when calling find from a controller, for instance.

You could do something like this, but it is quite a lot of code, I'd say:
@@@ ruby
User.some_scope.find(:all,
    :conditions =&gt; ActiveRecord.condition {
        {:home_branch =&gt; :company =&gt; {:name =&gt; like {search}}}})
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'd say, we should have both, a way of predicting table aliases
for complex named_scopes and an easy mechanism for nested
conditions as you propose, Brian.&lt;/p&gt;
&lt;p&gt;The problem with the last code block in Brian's comment is that
it relies on the method like to be available in the scope of the
find call. Even if you added all operators as instance methods to
AR (which would introduce quite a lot of noise in the models), you
still wouldn't be able to use those when calling find from a
controller, for instance.&lt;/p&gt;
&lt;p&gt;You could do something like this, but it is quite a lot of code,
I'd say:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
User.some_scope.find(:all,
    :conditions =&amp;gt; ActiveRecord.condition {
        {:home_branch =&amp;gt; :company =&amp;gt; {:name =&amp;gt; like {search}}}})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-26T11:16:57+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2009-04-26T11:17:03+01:00</updated-at>
      <user-id type="integer">39170</user-id>
      <version type="integer">4</version>
      <user-name>Steffen Bartsch</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I still support strongly Steffen's original report. It's easy to misuse the nested hash conditions/joins syntax and think you're doing The Right Thing, until you look at the SQL on the console.

Joining a table twice requires a crafted joins string and a crafted conditions string, else all hell breaks loose. It really kills the joy of scoping.

I would love to see what Frederick Cheung has to say about this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I still support strongly Steffen's original report. It's easy to
misuse the nested hash conditions/joins syntax and think you're
doing The Right Thing, until you look at the SQL on the
console.&lt;/p&gt;
&lt;p&gt;Joining a table twice requires a crafted joins string and a
crafted conditions string, else all hell breaks loose. It really
kills the joy of scoping.&lt;/p&gt;
&lt;p&gt;I would love to see what Frederick Cheung has to say about
this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-06T11:01:25+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2009-06-06T11:01:29+01:00</updated-at>
      <user-id type="integer">38963</user-id>
      <version type="integer">5</version>
      <user-name>ronin-38963 (at lighthouseapp)</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>You should check out arel:

http://github.com/nkallen/arel

I think Emilio's arel branch will get merged into ActiveRecord at some point.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You should check out arel:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/nkallen/arel&quot;&gt;http://github.com/nkallen/arel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think Emilio's arel branch will get merged into ActiveRecord
at some point.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T23:18:27+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2009-09-28T23:18:29+01:00</updated-at>
      <user-id type="integer">71333</user-id>
      <version type="integer">6</version>
      <user-name>wtn</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This looks like a dupe of #2087

https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2087

Even though you offer a solution, I think the preference is to stick with the status quo for now, so I imagine it will be marked as won't fix.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This looks like a dupe of &lt;a href=&quot;/projects/8994/tickets/2087&quot;
title=&quot;Ticket #2087&quot;&gt;#2087&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2087&quot;&gt;
https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Even though you offer a solution, I think the preference is to
stick with the status quo for now, so I imagine it will be marked
as won't fix.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T23:22:36+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2009-09-28T23:22:38+01:00</updated-at>
      <user-id type="integer">71333</user-id>
      <version type="integer">7</version>
      <user-name>wtn</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:44+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2010-05-04T18:48:44+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">8</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;a href=http://www.beautiful-ugg.com &gt;ugg nederland&lt;/a&gt; with a legendary brand, first glimpse of &lt;a href=http://www.beautiful-ugg.com &gt;goedkope ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg laarzen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg australia nederland&lt;/a&gt;for both &lt;a href=http://www.beautiful-ugg.com &gt;ugg store rotterdam&lt;/a&gt;
&lt;a href=http://www.beautiful-ugg.com &gt;ugg schoenen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg kopen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg amsterdam&lt;/a&gt;beer-drinking cartoon appearance is not too cold, and it is a style boots, since many euramerican star street pats have sufficient terengganu Ugg snow handsome appearance and fashionable boots and the earth, Ugg sweep of popular wind continues to explode, &lt;a href=http://www.beautiful-ugg.com &gt;ugg bestellen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg online kopen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg online bestellen&lt;/a&gt; Ugg there are many fans.

About Australia Ugg sheep leather &lt;a href=http://www.beautiful-ugg.com &gt;kinder ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg goedkoop&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg maten&lt;/a&gt; history dates back to 1978, called a Brian Smith Australian young surfing member once took a batch of sheep leather boots to America. In the past years, Australia craftsman people always habits in New Zealand seaside sewing sheep leather boots, however, is the young man with the business mind bold attempt will this Australian traditional products to the United States ugg boots sale.

At that time, he only a few several pairs &lt;a href=http://www.beautiful-ugg.com &gt;ugg nl&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg in nederland&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;nep ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;echte ugg&lt;/a&gt; leather boots, with full of passion and self-confidence, began in New York street hawkers. However, the start, he has not been so good luck, one day come down, did not sell a pair of &lt;a href=http://www.beautiful-ugg.com &gt;goedkoopste ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg goedkoopste&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg voor kids&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;maten ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;online ugg bestellen&lt;/a&gt; However, he did not lose heart, even a little stubborn think sure to succeed. He believes that, in the U.S. market will have a belong to his boots of heaven and earth.

So he decided to go to California western, to find opportunities. When he arrived at the destination and found there has been part of that such a man as he, with similar sheep leather boots at the seaside sale. Here he head round business into five customer sold 48 boots. Of course, can say is California developed surfing market attracted these from Australia boutique sheep leather boots. Australia &lt;a href=http://www.beautiful-ugg.com &gt;laarzen ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg amerika&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;uggs for cheap&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg warmer schoenen&lt;/a&gt; sheep leather boots begins to become every surfers landed necessary article.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http:&quot;&gt;ugg nederland with a legendary brand, first
glimpse of &lt;a href=&quot;http:&quot;&gt;goedkope ugg&lt;a href=&quot;http:&quot;&gt;ugg
laarzen&lt;a href=&quot;http:&quot;&gt;ugg australia nederlandfor both &lt;a href=
&quot;http:&quot;&gt;ugg store rotterdam&lt;br&gt;
&lt;a href=&quot;http:&quot;&gt;ugg schoenen&lt;a href=&quot;http:&quot;&gt;ugg kopen&lt;a href=
&quot;http:&quot;&gt;ugg amsterdambeer-drinking cartoon appearance is not too
cold, and it is a style boots, since many euramerican star street
pats have sufficient terengganu Ugg snow handsome appearance and
fashionable boots and the earth, Ugg sweep of popular wind
continues to explode, &lt;a href=&quot;http:&quot;&gt;ugg bestellen&lt;a href=
&quot;http:&quot;&gt;ugg online kopen&lt;a href=&quot;http:&quot;&gt;ugg online bestellen Ugg
there are many fans.&lt;/p&gt;
&lt;p&gt;About Australia Ugg sheep leather &lt;a href=&quot;http:&quot;&gt;kinder
ugg&lt;a href=&quot;http:&quot;&gt;ugg goedkoop&lt;a href=&quot;http:&quot;&gt;ugg maten history
dates back to 1978, called a Brian Smith Australian young surfing
member once took a batch of sheep leather boots to America. In the
past years, Australia craftsman people always habits in New Zealand
seaside sewing sheep leather boots, however, is the young man with
the business mind bold attempt will this Australian traditional
products to the United States ugg boots sale.&lt;/p&gt;
&lt;p&gt;At that time, he only a few several pairs &lt;a href=&quot;http:&quot;&gt;ugg
nl&lt;a href=&quot;http:&quot;&gt;ugg in nederland&lt;a href=&quot;http:&quot;&gt;nep ugg&lt;a href=
&quot;http:&quot;&gt;echte ugg leather boots, with full of passion and
self-confidence, began in New York street hawkers. However, the
start, he has not been so good luck, one day come down, did not
sell a pair of &lt;a href=&quot;http:&quot;&gt;goedkoopste ugg&lt;a href=&quot;http:&quot;&gt;ugg
goedkoopste&lt;a href=&quot;http:&quot;&gt;ugg voor kids&lt;a href=&quot;http:&quot;&gt;maten
ugg&lt;a href=&quot;http:&quot;&gt;online ugg bestellen However, he did not lose
heart, even a little stubborn think sure to succeed. He believes
that, in the U.S. market will have a belong to his boots of heaven
and earth.&lt;/p&gt;
&lt;p&gt;So he decided to go to California western, to find
opportunities. When he arrived at the destination and found there
has been part of that such a man as he, with similar sheep leather
boots at the seaside sale. Here he head round business into five
customer sold 48 boots. Of course, can say is California developed
surfing market attracted these from Australia boutique sheep
leather boots. Australia &lt;a href=&quot;http:&quot;&gt;laarzen ugg&lt;a href=
&quot;http:&quot;&gt;ugg amerika&lt;a href=&quot;http:&quot;&gt;uggs for cheap&lt;a href=
&quot;http:&quot;&gt;ugg warmer schoenen sheep leather boots begins to become
every surfers landed necessary article.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-28T03:25:39+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">1518</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2010-12-28T03:36:21+00:00</updated-at>
      <user-id type="integer">130424</user-id>
      <version type="integer">9</version>
      <user-name>tdtgrdhg</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-14T03:00:34+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2011-02-14T05:41:58+00:00</updated-at>
      <user-id type="integer">136860</user-id>
      <version type="integer">10</version>
      <user-name>xixi</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Today, kids as babyish as Ashcan School or nine name-conscious and trend-alert, puma ducati buying at for solid garments rather than just throwing on what&#8217;s pure. Here are just some of the brands and trends your children hungered over 2011. The 80&#8242;s Are Back. You may have noticed a trend this year for evisu jeans, supra shoes, leggings petticoats, oversized tees, and big &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; shoes. This is a look that appeals to babies girls-it&#8217;s quirky and yet smart at the same time.
&lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; with success sets the charm for manner, lifestyle and gambols. This has been believed to serve for an ideal cross flight simulator. This has been fine-looking by most jocks and the Speed Cat is an old name for the industriousness which made &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; gain millions with this business. With many people converting more wellness conscious in time, a lot wants also to commit on a good pair of cross trainers. These are very indestructible and forward-looking just like the real carrying out of a real &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt;. It consumes been systematically on the forefront of design and carrying out when it pertains comfort and style commingled.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Today, kids as babyish as Ashcan School or nine name-conscious
and trend-alert, puma ducati buying at for solid garments rather
than just throwing on what&amp;#8217;s pure. Here are just some of the
brands and trends your children hungered over 2011. The 80&amp;#8242;s
Are Back. You may have noticed a trend this year for evisu jeans,
supra shoes, leggings petticoats, oversized tees, and big &lt;a href=
&quot;http:&quot;&gt;puma speed cat shoes. This is a look that appeals to babies
girls-it&amp;#8217;s quirky and yet smart at the same time.&lt;br&gt;
&lt;a href=&quot;http:&quot;&gt;Puma future cat with success sets the charm for
manner, lifestyle and gambols. This has been believed to serve for
an ideal cross flight simulator. This has been fine-looking by most
jocks and the Speed Cat is an old name for the industriousness
which made &lt;a href=&quot;http:&quot;&gt;Puma shoes gain millions with this
business. With many people converting more wellness conscious in
time, a lot wants also to commit on a good pair of cross trainers.
These are very indestructible and forward-looking just like the
real carrying out of a real &lt;a href=&quot;http:&quot;&gt;Puma future cat. It
consumes been systematically on the forefront of design and
carrying out when it pertains comfort and style commingled.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-17T08:00:59+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2011-02-17T08:07:22+00:00</updated-at>
      <user-id type="integer">137453</user-id>
      <version type="integer">11</version>
      <user-name>gfhg</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yes Predictable table aliasing in needed in activerecord</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes Predictable table aliasing in needed in activerecord&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-18T14:12:39+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2011-02-18T14:13:00+00:00</updated-at>
      <user-id type="integer">78726</user-id>
      <version type="integer">12</version>
      <user-name>tankwanghow</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton
watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-26T02:08:04+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2357</number>
      <permalink>predictable-table-aliases-in-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins named_scope table_alias</tag>
      <title>Predictable Table Aliases in Joins</title>
      <updated-at type="datetime">2011-03-26T02:30:34+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">13</version>
      <user-name>bingbing</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2357</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4436c66872a09b74f3667128bb78ab9b59362a96</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-04-26T08:03:38+01:00</created-at>
      <filename>base.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">115363</id>
      <size type="integer">7748</size>
      <uploader-id type="integer">42524</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/115363/base.patch</url>
    </attachment>
  </attachments>
</ticket>
