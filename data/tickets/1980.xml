<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-15T21:38:57+00:00</created-at>
  <creator-id type="integer">7400</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1980</number>
  <permalink>let-engines-ship-their-own-initializers</permalink>
  <priority type="integer">1230</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>engines initializer plugins</tag>
  <title>Let engines ship their own initializers?</title>
  <updated-at type="datetime">2010-04-16T08:29:16+01:00</updated-at>
  <user-id type="integer">7400</user-id>
  <version type="integer">11</version>
  <user-name>Sven Fuchs</user-name>
  <creator-name>Sven Fuchs</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>With engines init.rb is the new environment.rb. Err, by that I mean that plugin init.rb files can quickly get messy once there are a few engines.

So, how about this? http://gist.github.com/64852

PS: after_initialize is not really an option because engines usually want to allow the app to overwrite their defaults. Thus plugin initializers would need to run before the app intializers - as that's now happening with routes. So the only alternative here often is to mess with the plugin load order but that of course has its merits, too.</original-body>
  <latest-body>With engines init.rb is the new environment.rb. Err, by that I mean that plugin init.rb files can quickly get messy once there are a few engines.

So, how about this? http://gist.github.com/64852

PS: after_initialize is not really an option because engines usually want to allow the app to overwrite their defaults. Thus plugin initializers would need to run before the app intializers - as that's now happening with routes. So the only alternative here often is to mess with the plugin load order but that of course has its merits, too.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;With engines init.rb is the new environment.rb. Err, by that I
mean that plugin init.rb files can quickly get messy once there are
a few engines.&lt;/p&gt;
&lt;p&gt;So, how about this? &lt;a href=&quot;http://gist.github.com/64852&quot;&gt;http://gist.github.com/64852&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: after_initialize is not really an option because engines
usually want to allow the app to overwrite their defaults. Thus
plugin initializers would need to run before the app intializers -
as that's now happening with routes. So the only alternative here
often is to mess with the plugin load order but that of course has
its merits, too.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>With engines init.rb is the new environment.rb. Err, by that I mean that plugin init.rb files can quickly get messy once there are a few engines.

So, how about this? http://gist.github.com/64852

PS: after_initialize is not really an option because engines usually want to allow the app to overwrite their defaults. Thus plugin initializers would need to run before the app intializers - as that's now happening with routes. So the only alternative here often is to mess with the plugin load order but that of course has its merits, too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;With engines init.rb is the new environment.rb. Err, by that I
mean that plugin init.rb files can quickly get messy once there are
a few engines.&lt;/p&gt;
&lt;p&gt;So, how about this? &lt;a href=&quot;http://gist.github.com/64852&quot;&gt;http://gist.github.com/64852&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: after_initialize is not really an option because engines
usually want to allow the app to overwrite their defaults. Thus
plugin initializers would need to run before the app intializers -
as that's now happening with routes. So the only alternative here
often is to mess with the plugin load order but that of course has
its merits, too.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-15T21:38:58+00:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>engines initializer plugins</tag>
      <title>Let engines ship their own initializers?</title>
      <updated-at type="datetime">2009-02-15T21:39:03+00:00</updated-at>
      <user-id type="integer">7400</user-id>
      <version type="integer">1</version>
      <user-name>Sven Fuchs</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is something that a client of ours wanted, and we're now using the code in the gist. It works well, and we definitely support its inclusion.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is something that a client of ours wanted, and we're now
using the code in the gist. It works well, and we definitely
support its inclusion.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-16T17:42:18+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- 
:title: Let engines ship their own initializers?
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>engines initializer plugins</tag>
      <title>+1</title>
      <updated-at type="datetime">2009-04-16T17:42:22+01:00</updated-at>
      <user-id type="integer">22473</user-id>
      <version type="integer">2</version>
      <user-name>Simon Parsons</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-16T17:42:38+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- 
:title: &quot;+1&quot;
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>engines initializer plugins</tag>
      <title>Let engines ship their own initializers?</title>
      <updated-at type="datetime">2009-04-16T17:42:41+01:00</updated-at>
      <user-id type="integer">22473</user-id>
      <version type="integer">3</version>
      <user-name>Simon Parsons</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-06T11:41:23+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>engines initializer plugins</tag>
      <title>Let engines ship their own initializers?</title>
      <updated-at type="datetime">2009-07-06T11:41:31+01:00</updated-at>
      <user-id type="integer">27185</user-id>
      <version type="integer">4</version>
      <user-name>Glenn Powell</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In my opinion an initializer has to be inside the application because if you want to configure something, with what you propose, you would have to modify the engine initializer itself.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In my opinion an initializer has to be inside the application
because if you want to configure something, with what you propose,
you would have to modify the engine initializer itself.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-08T16:41:13+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>engines initializer plugins</tag>
      <title>Let engines ship their own initializers?</title>
      <updated-at type="datetime">2009-07-08T16:41:16+01:00</updated-at>
      <user-id type="integer">31975</user-id>
      <version type="integer">5</version>
      <user-name>Francesc Esplugas</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Francesc, I don't think that's always true. 

For one thing you might set defaults in an engine intializer but make it so that people can overwrite it in the application.

Also, you might just want to use engine initializers as a place to wire things up, which needs to happen after engines are already fully loaded.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Francesc, I don't think that's always true.&lt;/p&gt;
&lt;p&gt;For one thing you might set defaults in an engine intializer but
make it so that people can overwrite it in the application.&lt;/p&gt;
&lt;p&gt;Also, you might just want to use engine initializers as a place
to wire things up, which needs to happen after engines are already
fully loaded.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-08T16:46:29+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>engines initializer plugins</tag>
      <title>Let engines ship their own initializers?</title>
      <updated-at type="datetime">2009-07-08T16:46:31+01:00</updated-at>
      <user-id type="integer">7400</user-id>
      <version type="integer">6</version>
      <user-name>Sven Fuchs</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have to agree with Sven. Currently I'm using the Desert plugin to be able to split our application apart and reuse parts of it in other applications. I'm looking forward to move to Rails 2.3 and port all this to engine plugins. Currently I'am manually loading all plugin classes esp. some classes need to register them self. For this case it would be helpful to have the plugin define which classes need to register them self instead of keeping track of it in the parent application.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have to agree with Sven. Currently I'm using the Desert plugin
to be able to split our application apart and reuse parts of it in
other applications. I'm looking forward to move to Rails 2.3 and
port all this to engine plugins. Currently I'am manually loading
all plugin classes esp. some classes need to register them self.
For this case it would be helpful to have the plugin define which
classes need to register them self instead of keeping track of it
in the parent application.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-08T16:53:31+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>engines initializer plugins</tag>
      <title>Let engines ship their own initializers?</title>
      <updated-at type="datetime">2009-07-08T16:53:35+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">7</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Our client continues to use this feature in a production environment with multiple engines shared between multiple apps. We have had no issues arise, and wouldn't go back even if this patch was definitively rejected.

In my opinion this is an intuitive solution to the needs of engines (particularly as opposed to standard plugins), given that engines which provide controllers and models are likely more tightly integrated with apps.

As Francesc says, it's important that plugin initializers run first: Sven definitely got this part right</body>
      <body-html>&lt;div&gt;&lt;p&gt;Our client continues to use this feature in a production
environment with multiple engines shared between multiple apps. We
have had no issues arise, and wouldn't go back even if this patch
was definitively rejected.&lt;/p&gt;
&lt;p&gt;In my opinion this is an intuitive solution to the needs of
engines (particularly as opposed to standard plugins), given that
engines which provide controllers and models are likely more
tightly integrated with apps.&lt;/p&gt;
&lt;p&gt;As Francesc says, it's important that plugin initializers run
first: Sven definitely got this part right&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-08T17:13:35+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>engines initializer plugins</tag>
      <title>Let engines ship their own initializers?</title>
      <updated-at type="datetime">2009-07-08T17:13:42+01:00</updated-at>
      <user-id type="integer">22473</user-id>
      <version type="integer">8</version>
      <user-name>Simon Parsons</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've been thinking about it, and this makes sense as the &quot;engine&quot; has to boot and generate its environment.

For example in [Typus](http://github.com/fesplugas/typus) I've a `Typus.enable` which makes the application configure for the first time, and then the application initializer is run, this could be done automaGIcally.

Definitelly +1 to see an initial patch to test how this can work. I would modify Typus to take advantage of this new feature.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've been thinking about it, and this makes sense as the
&quot;engine&quot; has to boot and generate its environment.&lt;/p&gt;
&lt;p&gt;For example in &lt;a href=
&quot;http://github.com/fesplugas/typus&quot;&gt;Typus&lt;/a&gt; I've a
&lt;code&gt;Typus.enable&lt;/code&gt; which makes the application configure for
the first time, and then the application initializer is run, this
could be done automaGIcally.&lt;/p&gt;
&lt;p&gt;Definitelly +1 to see an initial patch to test how this can
work. I would modify Typus to take advantage of this new
feature.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-08T23:57:46+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>engines initializer plugins</tag>
      <title>Let engines ship their own initializers?</title>
      <updated-at type="datetime">2009-07-08T23:57:49+01:00</updated-at>
      <user-id type="integer">31975</user-id>
      <version type="integer">9</version>
      <user-name>Francesc Esplugas</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Doesn't all the Railtie work in Rails 3.0 account for this? this could probably be marked as resolved.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Doesn't all the Railtie work in Rails 3.0 account for this? this
could probably be marked as resolved.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-16T01:48:11+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>engines initializer plugins</tag>
      <title>Let engines ship their own initializers?</title>
      <updated-at type="datetime">2010-04-16T01:48:13+01:00</updated-at>
      <user-id type="integer">65576</user-id>
      <version type="integer">10</version>
      <user-name>Steve St. Martin</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That's true. Will set it to wontfix bc/ this probably won't go into 2.x anymore, right?

Thanks Steve! :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;That's true. Will set it to wontfix bc/ this probably won't go
into 2.x anymore, right?&lt;/p&gt;
&lt;p&gt;Thanks Steve! :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-16T08:29:14+01:00</created-at>
      <creator-id type="integer">7400</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1980</number>
      <permalink>let-engines-ship-their-own-initializers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>engines initializer plugins</tag>
      <title>Let engines ship their own initializers?</title>
      <updated-at type="datetime">2010-04-16T08:29:16+01:00</updated-at>
      <user-id type="integer">7400</user-id>
      <version type="integer">11</version>
      <user-name>Sven Fuchs</user-name>
      <creator-name>Sven Fuchs</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1980</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
