<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-29T18:16:09+01:00</created-at>
  <creator-id type="integer">12845</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">275</number>
  <permalink>make-first-and-last-on-associations-accept-conditions-etc</permalink>
  <priority type="integer">14599</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>Make &quot;first&quot; and &quot;last&quot; on associations accept conditions (etc)</title>
  <updated-at type="datetime">2008-05-30T11:49:57+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">6</version>
  <user-name>Pratik</user-name>
  <creator-name>Wincent Colaiuta</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/275</url>
  <priority-name nil="true"></priority-name>
  <original-body>Just noticed that while you can do stuff like this:

@@@
Topic.first :conditions =&gt; { :foo =&gt; bar }
@@@

Trying the same type of thing across an association won't work:

@@@
topic.users.first :order =&gt; 'created_at'
topic.users.last :conditions =&gt; { :bar =&gt; baz }
topic.users.last :condtions =&gt; 'abc &gt; 1'
@@@

All of those produce an exception:

@@@
TypeError: can't convert Hash into Integer
@@@

So evidently the proxy being returned by the association is Array-like (not sure of the internal implementation details, if it's an Array subclass, an Array extended with a module or something else), and the methods getting called are actually Array#first and Array#last, which take a single integer argument.

Not sure if this is a bug or merely a missing feature. I won't have time to dig into this myself for a while yet, but I wanted to get it into the tracker anyway so that it won't get forgotten.

Any comments on what the best solution would be? My guess is that we should alias the Array#first and Array#last methods, pass through to them if we get a single integer argument otherwise if we get a hash then do the standard ActiveRecord thing on them. What do people think?</original-body>
  <latest-body>Just noticed that while you can do stuff like this:

@@@
Topic.first :conditions =&gt; { :foo =&gt; bar }
@@@

Trying the same type of thing across an association won't work:

@@@
topic.users.first :order =&gt; 'created_at'
topic.users.last :conditions =&gt; { :bar =&gt; baz }
topic.users.last :condtions =&gt; 'abc &gt; 1'
@@@

All of those produce an exception:

@@@
TypeError: can't convert Hash into Integer
@@@

So evidently the proxy being returned by the association is Array-like (not sure of the internal implementation details, if it's an Array subclass, an Array extended with a module or something else), and the methods getting called are actually Array#first and Array#last, which take a single integer argument.

Not sure if this is a bug or merely a missing feature. I won't have time to dig into this myself for a while yet, but I wanted to get it into the tracker anyway so that it won't get forgotten.

Any comments on what the best solution would be? My guess is that we should alias the Array#first and Array#last methods, pass through to them if we get a single integer argument otherwise if we get a hash then do the standard ActiveRecord thing on them. What do people think?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Just noticed that while you can do stuff like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;Topic.first :conditions =&amp;gt; { :foo =&amp;gt; bar }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Trying the same type of thing across an association won't work:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;topic.users.first :order =&amp;gt; 'created_at'
topic.users.last :conditions =&amp;gt; { :bar =&amp;gt; baz }
topic.users.last :condtions =&amp;gt; 'abc &amp;gt; 1'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
All of those produce an exception:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;TypeError: can't convert Hash into Integer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
So evidently the proxy being returned by the association is Array-like (not sure of the internal implementation details, if it's an Array subclass, an Array extended with a module or something else), and the methods getting called are actually Array#first and Array#last, which take a single integer argument.
&lt;/p&gt;&lt;p&gt;
Not sure if this is a bug or merely a missing feature. I won't have time to dig into this myself for a while yet, but I wanted to get it into the tracker anyway so that it won't get forgotten.
&lt;/p&gt;&lt;p&gt;
Any comments on what the best solution would be? My guess is that we should alias the Array#first and Array#last methods, pass through to them if we get a single integer argument otherwise if we get a hash then do the standard ActiveRecord thing on them. What do people think?
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Just noticed that while you can do stuff like this:

@@@
Topic.first :conditions =&gt; { :foo =&gt; bar }
@@@

Trying the same type of thing across an association won't work:

@@@
topic.users.first :order =&gt; 'created_at'
topic.users.last :conditions =&gt; { :bar =&gt; baz }
topic.users.last :condtions =&gt; 'abc &gt; 1'
@@@

All of those produce an exception:

@@@
TypeError: can't convert Hash into Integer
@@@

So evidently the proxy being returned by the association is Array-like (not sure of the internal implementation details, if it's an Array subclass, an Array extended with a module or something else), and the methods getting called are actually Array#first and Array#last, which take a single integer argument.

Not sure if this is a bug or merely a missing feature. I won't have time to dig into this myself for a while yet, but I wanted to get it into the tracker anyway so that it won't get forgotten.

Any comments on what the best solution would be? My guess is that we should alias the Array#first and Array#last methods, pass through to them if we get a single integer argument otherwise if we get a hash then do the standard ActiveRecord thing on them. What do people think?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Just noticed that while you can do stuff like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;Topic.first :conditions =&amp;gt; { :foo =&amp;gt; bar }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Trying the same type of thing across an association won't work:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;topic.users.first :order =&amp;gt; 'created_at'
topic.users.last :conditions =&amp;gt; { :bar =&amp;gt; baz }
topic.users.last :condtions =&amp;gt; 'abc &amp;gt; 1'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
All of those produce an exception:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;TypeError: can't convert Hash into Integer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
So evidently the proxy being returned by the association is Array-like (not sure of the internal implementation details, if it's an Array subclass, an Array extended with a module or something else), and the methods getting called are actually Array#first and Array#last, which take a single integer argument.
&lt;/p&gt;&lt;p&gt;
Not sure if this is a bug or merely a missing feature. I won't have time to dig into this myself for a while yet, but I wanted to get it into the tracker anyway so that it won't get forgotten.
&lt;/p&gt;&lt;p&gt;
Any comments on what the best solution would be? My guess is that we should alias the Array#first and Array#last methods, pass through to them if we get a single integer argument otherwise if we get a hash then do the standard ActiveRecord thing on them. What do people think?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-29T18:16:09+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">275</number>
      <permalink>make-first-and-last-on-associations-accept-conditions-etc</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Make &quot;first&quot; and &quot;last&quot; on associations accept conditions (etc)</title>
      <updated-at type="datetime">2008-05-29T18:16:09+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">1</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/275</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Maybe I'm missing something, but I put this test in my branch:

def test_first_on_association_with_conditions
		firm = Firm.new(&quot;name&quot; =&gt; &quot;A New Firm, Inc&quot;)
    firm.save
		client = Client.new(&quot;name&quot; =&gt; &quot;TheClient.com&quot;, &quot;firm_id&quot; =&gt; firm.id)
    client.save
		client2 = Client.new(&quot;name&quot; =&gt; &quot;TheClient2.com&quot;, &quot;firm_id&quot; =&gt; firm.id)
    client2.save
    assert (firm.clients.first :conditions =&gt; { :name =&gt; 'TheClient2.com' }) == client2
end

and everything is passing just fine.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Maybe I'm missing something, but I put this test in my branch:
&lt;/p&gt;&lt;p&gt;
def test_first_on_association_with_conditions
&lt;/p&gt;&lt;p&gt;
firm = Firm.new(&quot;name&quot; =&gt; &quot;A New Firm, Inc&quot;)
&lt;/p&gt;&lt;p&gt;
firm.save
&lt;/p&gt;&lt;p&gt;
client = Client.new(&quot;name&quot; =&gt; &quot;TheClient.com&quot;, &quot;firm_id&quot; =&gt; firm.id)
&lt;/p&gt;&lt;p&gt;
client.save
&lt;/p&gt;&lt;p&gt;
client2 = Client.new(&quot;name&quot; =&gt; &quot;TheClient2.com&quot;, &quot;firm_id&quot; =&gt; firm.id)
&lt;/p&gt;&lt;p&gt;
client2.save
&lt;/p&gt;&lt;p&gt;
assert (firm.clients.first :conditions =&gt; { :name =&gt; 'TheClient2.com' }) == client2
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
and everything is passing just fine.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-29T22:14:49+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">275</number>
      <permalink>make-first-and-last-on-associations-accept-conditions-etc</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Make &quot;first&quot; and &quot;last&quot; on associations accept conditions (etc)</title>
      <updated-at type="datetime">2008-05-29T22:14:49+01:00</updated-at>
      <user-id type="integer">21653</user-id>
      <version type="integer">2</version>
      <user-name>Amos King</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/275</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is a patch that has passing tests to do the same thing.  I don't think this a bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Here is a patch that has passing tests to do the same thing.  I don't think this a bug.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-30T11:49:33+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">275</number>
      <permalink>make-first-and-last-on-associations-accept-conditions-etc</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Make &quot;first&quot; and &quot;last&quot; on associations accept conditions (etc)</title>
      <updated-at type="datetime">2008-05-30T11:49:33+01:00</updated-at>
      <user-id type="integer">21653</user-id>
      <version type="integer">3</version>
      <user-name>Amos King</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/275</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Perhaps it depends on the type of the association and the options specified? I can reproduce this with a number of different models in my codebase. One example:

@@@
$ script/console
Loading development environment (Rails 2.0.991)
&gt;&gt; user = User.first
=&gt; #&lt;User id: 7921, display_name: &quot;Wincent Colaiuta&quot;, passphrase_hash: &quot;f2833a7d3dcd18b9c3c6379d461ad96586c5fb547c1c3dea6b2...&quot;, passphrase_salt: &quot;1u1CfzMOxH4Jzguk&quot;, superuser: true, verified: true, suspended: false, session_key: &quot;XHY8AUi08bjyxSpOkIvZ0eEE7ElWJOBg&quot;, session_expiry: &quot;2008-04-18 20:54:50&quot;, deleted_at: nil, created_at: &quot;2008-04-11 20:53:08&quot;, updated_at: &quot;2008-04-11 20:54:50&quot;, comments_count: 4348, topics_count: 6&gt;
&gt;&gt; user.emails
=&gt; [#&lt;Email id: 6817, user_id: 7921, address: &quot;win@wincent.org&quot;, default: true, verified: true, created_at: &quot;2008-04-11 20:53:08&quot;, updated_at: &quot;2008-04-11 20:53:08&quot;, deleted_at: nil&gt;]
&gt;&gt; user.emails.class
=&gt; Array
&gt;&gt; user.emails.first
=&gt; #&lt;Email id: 6817, user_id: 7921, address: &quot;win@wincent.org&quot;, default: true, verified: true, created_at: &quot;2008-04-11 20:53:08&quot;, updated_at: &quot;2008-04-11 20:53:08&quot;, deleted_at: nil&gt;
&gt;&gt; user.emails.first :conditions =&gt; { :default =&gt; false }
TypeError: can't convert Hash into Integer
	from /Users/wincent/trabajo/unversioned/wincent.com/src/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:177:in `first'
	from /Users/wincent/trabajo/unversioned/wincent.com/src/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:177:in `send'
	from /Users/wincent/trabajo/unversioned/wincent.com/src/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:177:in `method_missing'
	from /Users/wincent/trabajo/unversioned/wincent.com/src/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:250:in `method_missing'
	from (irb):5
&gt;&gt; user.emails.first(1)
=&gt; [#&lt;Email id: 6817, user_id: 7921, address: &quot;win@wincent.org&quot;, default: true, verified: true, created_at: &quot;2008-04-11 20:53:08&quot;, updated_at: &quot;2008-04-11 20:53:08&quot;, deleted_at: nil&gt;]
@@@

Will see if I can come up with a reduced test case.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Perhaps it depends on the type of the association and the options specified? I can reproduce this with a number of different models in my codebase. One example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;$ script/console
Loading development environment (Rails 2.0.991)
&amp;gt;&amp;gt; user = User.first
=&amp;gt; #&amp;lt;User id: 7921, display_name: &amp;quot;Wincent Colaiuta&amp;quot;, passphrase_hash: &amp;quot;f2833a7d3dcd18b9c3c6379d461ad96586c5fb547c1c3dea6b2...&amp;quot;, passphrase_salt: &amp;quot;1u1CfzMOxH4Jzguk&amp;quot;, superuser: true, verified: true, suspended: false, session_key: &amp;quot;XHY8AUi08bjyxSpOkIvZ0eEE7ElWJOBg&amp;quot;, session_expiry: &amp;quot;2008-04-18 20:54:50&amp;quot;, deleted_at: nil, created_at: &amp;quot;2008-04-11 20:53:08&amp;quot;, updated_at: &amp;quot;2008-04-11 20:54:50&amp;quot;, comments_count: 4348, topics_count: 6&amp;gt;
&amp;gt;&amp;gt; user.emails
=&amp;gt; [#&amp;lt;Email id: 6817, user_id: 7921, address: &amp;quot;&lt;a href=&quot;mailto:win@wincent.org&quot;&gt;win@wincent.org&lt;/a&gt;&amp;quot;, default: true, verified: true, created_at: &amp;quot;2008-04-11 20:53:08&amp;quot;, updated_at: &amp;quot;2008-04-11 20:53:08&amp;quot;, deleted_at: nil&amp;gt;]
&amp;gt;&amp;gt; user.emails.class
=&amp;gt; Array
&amp;gt;&amp;gt; user.emails.first
=&amp;gt; #&amp;lt;Email id: 6817, user_id: 7921, address: &amp;quot;&lt;a href=&quot;mailto:win@wincent.org&quot;&gt;win@wincent.org&lt;/a&gt;&amp;quot;, default: true, verified: true, created_at: &amp;quot;2008-04-11 20:53:08&amp;quot;, updated_at: &amp;quot;2008-04-11 20:53:08&amp;quot;, deleted_at: nil&amp;gt;
&amp;gt;&amp;gt; user.emails.first :conditions =&amp;gt; { :default =&amp;gt; false }
TypeError: can't convert Hash into Integer
	from /Users/wincent/trabajo/unversioned/wincent.com/src/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:177:in `first'
	from /Users/wincent/trabajo/unversioned/wincent.com/src/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:177:in `send'
	from /Users/wincent/trabajo/unversioned/wincent.com/src/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:177:in `method_missing'
	from /Users/wincent/trabajo/unversioned/wincent.com/src/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:250:in `method_missing'
	from (irb):5
&amp;gt;&amp;gt; user.emails.first(1)
=&amp;gt; [#&amp;lt;Email id: 6817, user_id: 7921, address: &amp;quot;&lt;a href=&quot;mailto:win@wincent.org&quot;&gt;win@wincent.org&lt;/a&gt;&amp;quot;, default: true, verified: true, created_at: &amp;quot;2008-04-11 20:53:08&amp;quot;, updated_at: &amp;quot;2008-04-11 20:53:08&amp;quot;, deleted_at: nil&amp;gt;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Will see if I can come up with a reduced test case.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-30T11:08:54+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">275</number>
      <permalink>make-first-and-last-on-associations-accept-conditions-etc</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Make &quot;first&quot; and &quot;last&quot; on associations accept conditions (etc)</title>
      <updated-at type="datetime">2008-05-30T11:08:54+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">4</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/275</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Looks like this might be fixed by commit 73c5963 (which is post-RC1).</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Looks like this might be fixed by commit 73c5963 (which is post-RC1).
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-30T11:31:50+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">275</number>
      <permalink>make-first-and-last-on-associations-accept-conditions-etc</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Make &quot;first&quot; and &quot;last&quot; on associations accept conditions (etc)</title>
      <updated-at type="datetime">2008-05-30T11:31:50+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">5</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/275</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-30T11:49:57+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">275</number>
      <permalink>make-first-and-last-on-associations-accept-conditions-etc</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Make &quot;first&quot; and &quot;last&quot; on associations accept conditions (etc)</title>
      <updated-at type="datetime">2008-05-30T11:49:57+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">6</version>
      <user-name>Pratik</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/275</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>532c9a6a178b3a8b3ba79e0f9888d420ca914527</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-29T23:07:06+01:00</created-at>
      <filename>0001-tests-for-associations-first-and-last-methods-being.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">25077</id>
      <size type="integer">1617</size>
      <uploader-id type="integer">21653</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/25077/0001-tests-for-associations-first-and-last-methods-being.patch</url>
    </attachment>
  </attachments>
</ticket>
