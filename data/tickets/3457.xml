<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2009-11-04T21:11:46+00:00</created-at>
  <creator-id type="integer">47289</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3457</number>
  <permalink>actioncontrollercachingsweeper-controller-instance-is-not-thread-safe</permalink>
  <priority type="integer">173780</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>observer sweeper threadsafe</tag>
  <title>ActionController::Caching::Sweeper controller instance is not thread safe</title>
  <updated-at type="datetime">2011-02-09T22:31:23+00:00</updated-at>
  <user-id type="integer">70301</user-id>
  <version type="integer">7</version>
  <user-name>Matt D</user-name>
  <creator-name>blythe</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3457</url>
  <priority-name nil="true"></priority-name>
  <original-body>Since Sweeper is a singleton(derived from `ActiveRecord::Observer` or `ActiveModel::Observer` edge) it seems that multiple threads could modify the single controller instance set and cleared in the around_filter.

      class Sweeper &lt; ActiveRecord::Observer #:nodoc:
        attr_accessor :controller
 
        def before(controller)
          self.controller = controller
          callback(:before) if controller.perform_caching
        end
 
        def after(controller)
          callback(:after) if controller.perform_caching
          # Clean up, so that the controller can be collected after this request
          self.controller = nil
        end

Would using `Thread.current` be preferable?</original-body>
  <latest-body>Since Sweeper is a singleton(derived from `ActiveRecord::Observer` or `ActiveModel::Observer` edge) it seems that multiple threads could modify the single controller instance set and cleared in the around_filter.

      class Sweeper &lt; ActiveRecord::Observer #:nodoc:
        attr_accessor :controller
 
        def before(controller)
          self.controller = controller
          callback(:before) if controller.perform_caching
        end
 
        def after(controller)
          callback(:after) if controller.perform_caching
          # Clean up, so that the controller can be collected after this request
          self.controller = nil
        end

Would using `Thread.current` be preferable?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Since Sweeper is a singleton(derived from
&lt;code&gt;ActiveRecord::Observer&lt;/code&gt; or
&lt;code&gt;ActiveModel::Observer&lt;/code&gt; edge) it seems that multiple
threads could modify the single controller instance set and cleared
in the around_filter.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  class Sweeper &amp;lt; ActiveRecord::Observer #:nodoc:
    attr_accessor :controller

    def before(controller)
      self.controller = controller
      callback(:before) if controller.perform_caching
    end

    def after(controller)
      callback(:after) if controller.perform_caching
      # Clean up, so that the controller can be collected after this request
      self.controller = nil
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Would using &lt;code&gt;Thread.current&lt;/code&gt; be preferable?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Since Sweeper is a singleton(derived from `ActiveRecord::Observer` or `ActiveModel::Observer` edge) it seems that multiple threads could modify the single controller instance set and cleared in the around_filter.

      class Sweeper &lt; ActiveRecord::Observer #:nodoc:
        attr_accessor :controller
 
        def before(controller)
          self.controller = controller
          callback(:before) if controller.perform_caching
        end
 
        def after(controller)
          callback(:after) if controller.perform_caching
          # Clean up, so that the controller can be collected after this request
          self.controller = nil
        end

Would using `Thread.current` be preferable?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Since Sweeper is a singleton(derived from
&lt;code&gt;ActiveRecord::Observer&lt;/code&gt; or
&lt;code&gt;ActiveModel::Observer&lt;/code&gt; edge) it seems that multiple
threads could modify the single controller instance set and cleared
in the around_filter.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  class Sweeper &amp;lt; ActiveRecord::Observer #:nodoc:
    attr_accessor :controller

    def before(controller)
      self.controller = controller
      callback(:before) if controller.perform_caching
    end

    def after(controller)
      callback(:after) if controller.perform_caching
      # Clean up, so that the controller can be collected after this request
      self.controller = nil
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Would using &lt;code&gt;Thread.current&lt;/code&gt; be preferable?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-04T21:11:46+00:00</created-at>
      <creator-id type="integer">47289</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3457</number>
      <permalink>actioncontrollercachingsweeper-controller-instance-is-not-thread-safe</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>observer sweeper threadsafe</tag>
      <title>ActionController::Caching::Sweeper controller instance is not thread safe</title>
      <updated-at type="datetime">2009-11-04T21:11:51+00:00</updated-at>
      <user-id type="integer">47289</user-id>
      <version type="integer">1</version>
      <user-name>blythe</user-name>
      <creator-name>blythe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3457</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-04T05:12:55+00:00</created-at>
      <creator-id type="integer">47289</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3457</number>
      <permalink>actioncontrollercachingsweeper-controller-instance-is-not-thread-safe</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>observer sweeper threadsafe</tag>
      <title>ActionController::Caching::Sweeper controller instance is not thread safe</title>
      <updated-at type="datetime">2010-02-04T05:12:58+00:00</updated-at>
      <user-id type="integer">35669</user-id>
      <version type="integer">2</version>
      <user-name>Timothy Jones</user-name>
      <creator-name>blythe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3457</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This often yields to the following errors when two requests overlap on the sweeper

@@@ exception
NoMethodError (undefined method `controller_name' for nil:NilClass):
  ...actionpack-2.3.5/lib/action_controller/caching/sweeper.rb:32:in `callback'
  ...actionpack-2.3.5/lib/action_controller/caching/sweeper.rb:14:in `after'
  ...actionpack-2.3.5/lib/action_controller/filters.rb:208:in `around_proc'
@@@

Workaround:

@@@ ruby
class ActionController::Caching::Sweeper
  def controller
    Thread.current[:&quot;#{self}_controller&quot;]
  end

  def controller=(c)
    Thread.current[:&quot;#{self}_controller&quot;] = c
  end
end  
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;This often yields to the following errors when two requests
overlap on the sweeper&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;exception&quot;&gt;NoMethodError (undefined method `controller_name' for nil:NilClass):
  ...actionpack-2.3.5/lib/action_controller/caching/sweeper.rb:32:in `callback'
  ...actionpack-2.3.5/lib/action_controller/caching/sweeper.rb:14:in `after'
  ...actionpack-2.3.5/lib/action_controller/filters.rb:208:in `around_proc'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Workaround:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class ActionController::Caching::Sweeper
  def controller
    Thread.current[:&quot;#{self}_controller&quot;]
  end

  def controller=(c)
    Thread.current[:&quot;#{self}_controller&quot;] = c
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-07T21:07:43+01:00</created-at>
      <creator-id type="integer">47289</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3457</number>
      <permalink>actioncontrollercachingsweeper-controller-instance-is-not-thread-safe</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>observer sweeper threadsafe</tag>
      <title>ActionController::Caching::Sweeper controller instance is not thread safe</title>
      <updated-at type="datetime">2010-04-07T21:07:49+01:00</updated-at>
      <user-id type="integer">60487</user-id>
      <version type="integer">3</version>
      <user-name>Michael Rykov</user-name>
      <creator-name>blythe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3457</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-15T04:57:10+00:00</created-at>
      <creator-id type="integer">47289</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3457</number>
      <permalink>actioncontrollercachingsweeper-controller-instance-is-not-thread-safe</permalink>
      <priority type="integer">173780</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>observer sweeper threadsafe</tag>
      <title>ActionController::Caching::Sweeper controller instance is not thread safe</title>
      <updated-at type="datetime">2010-12-15T04:57:27+00:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">4</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>blythe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3457</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1

Ran in to this (several times a second...) when trying to use Rails with config.threadsafe!</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;Ran in to this (several times a second...) when trying to use
Rails with config.threadsafe!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-15T05:01:06+00:00</created-at>
      <creator-id type="integer">47289</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3457</number>
      <permalink>actioncontrollercachingsweeper-controller-instance-is-not-thread-safe</permalink>
      <priority type="integer">173780</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>observer sweeper threadsafe</tag>
      <title>ActionController::Caching::Sweeper controller instance is not thread safe</title>
      <updated-at type="datetime">2010-12-15T05:01:24+00:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">5</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>blythe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3457</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'd take this as fix for 2-3-stable and possibly 3-0-stable.  but for master we should probably do this *right* and have a sweeper instance per controller rather than a weird 'instance variable backed by a thread local'.  There's a reason why we have a controller per request rather than request, session, etc all being in Thread.current.

Care to take a stab at that larger refactoring?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'd take this as fix for 2-3-stable and possibly 3-0-stable. but
for master we should probably do this &lt;em&gt;right&lt;/em&gt; and have a
sweeper instance per controller rather than a weird 'instance
variable backed by a thread local'. There's a reason why we have a
controller per request rather than request, session, etc all being
in Thread.current.&lt;/p&gt;
&lt;p&gt;Care to take a stab at that larger refactoring?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-20T02:37:03+00:00</created-at>
      <creator-id type="integer">47289</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3457</number>
      <permalink>actioncontrollercachingsweeper-controller-instance-is-not-thread-safe</permalink>
      <priority type="integer">173780</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>observer sweeper threadsafe</tag>
      <title>ActionController::Caching::Sweeper controller instance is not thread safe</title>
      <updated-at type="datetime">2010-12-20T02:37:26+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">6</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>blythe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3457</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Running into this issue regularly in production. +1</body>
      <body-html>&lt;div&gt;&lt;p&gt;Running into this issue regularly in production. +1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-09T22:31:01+00:00</created-at>
      <creator-id type="integer">47289</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3457</number>
      <permalink>actioncontrollercachingsweeper-controller-instance-is-not-thread-safe</permalink>
      <priority type="integer">173780</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>observer sweeper threadsafe</tag>
      <title>ActionController::Caching::Sweeper controller instance is not thread safe</title>
      <updated-at type="datetime">2011-02-09T22:31:23+00:00</updated-at>
      <user-id type="integer">70301</user-id>
      <version type="integer">7</version>
      <user-name>Matt D</user-name>
      <creator-name>blythe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3457</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>fcf5a71ef55a9931b67fa8d4960e095487736802</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-11-04T21:11:48+00:00</created-at>
      <filename>sweeper_thread_patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">312650</id>
      <size type="integer">1511</size>
      <uploader-id type="integer">47289</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/312650/sweeper_thread_patch.diff</url>
    </attachment>
  </attachments>
</ticket>
