diff --git a/actionpack/lib/action_controller/metal/responder.rb b/actionpack/lib/action_controller/metal/responder.rb
index aafba2a..38d3221 100644
--- a/actionpack/lib/action_controller/metal/responder.rb
+++ b/actionpack/lib/action_controller/metal/responder.rb
@@ -1,7 +1,7 @@
 require 'active_support/json'
 
 module ActionController #:nodoc:
-  # Responder is responsible for exposing a resource to different mime requests,
+  # Responsible for exposing a resource to different mime requests,
   # usually depending on the HTTP verb. The responder is triggered when
   # <code>respond_with</code> is called. The simplest case to study is a GET request:
   #
@@ -24,10 +24,10 @@ module ActionController #:nodoc:
   #
   # === Builtin HTTP verb semantics
   #
-  # The default Rails responder holds semantics for each HTTP verb. Depending on the
+  # The default \Rails responder holds semantics for each HTTP verb. Depending on the
   # content type, verb and the resource status, it will behave differently.
   #
-  # Using Rails default responder, a POST request for creating an object could
+  # Using \Rails default responder, a POST request for creating an object could
   # be written as:
   #
   #   def create
@@ -140,7 +140,7 @@ module ActionController #:nodoc:
 
   protected
 
-    # This is the common behavior for "navigation" requests, like :html, :iphone and so forth.
+    # This is the common behavior for formats associated with browsing, like :html, :iphone and so forth.
     def navigation_behavior(error)
       if get?
         raise error
@@ -151,7 +151,7 @@ module ActionController #:nodoc:
       end
     end
 
-    # This is the common behavior for "API" requests, like :xml and :json.
+    # This is the common behavior for formats associated with APIs, such as :xml and :json.
     def api_behavior(error)
       raise error unless resourceful?
 
@@ -161,6 +161,8 @@ module ActionController #:nodoc:
         display resource.errors, :status => :unprocessable_entity
       elsif post?
         display resource, :status => :created, :location => api_location
+      elsif has_empty_resource_definition?
+        display empty_resource, :status => :ok
       else
         head :ok
       end
@@ -221,5 +223,23 @@ module ActionController #:nodoc:
     def default_action
       @action ||= ACTIONS_FOR_VERBS[request.request_method_symbol]
     end
+
+    # Check whether resource needs a specific definition of empty resource to be valid
+    #
+    def has_empty_resource_definition?
+      respond_to?("empty_#{format}_resource")
+    end
+
+    # Delegate to proper empty resource method
+    #
+    def empty_resource
+      send("empty_#{format}_resource")
+    end
+
+    # Return a valid empty JSON resource
+    #
+    def empty_json_resource
+      "{}"
+    end
   end
 end
