<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2010-09-16T11:34:23+01:00</created-at>
  <creator-id type="integer">75489</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3461</number>
  <permalink>touch-called-on-parent-destroy</permalink>
  <priority type="integer">173895</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>2.3.4 2.3.8 2.3.9 :dependent :destroy active_record destroy touch</tag>
  <title>Touch called on parent destroy</title>
  <updated-at type="datetime">2011-03-16T22:39:25+00:00</updated-at>
  <user-id type="integer">10950</user-id>
  <version type="integer">6</version>
  <user-name>Ryan Wallace</user-name>
  <creator-name>Helmut Juskewycz</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3461</url>
  <priority-name nil="true"></priority-name>
  <original-body>I have two models: Project and Tags

@@@ ruby
class Project &lt; ActiveRecord::Base
  has_many :tags, :dependent =&gt; :destroy
end

class Tag &lt; ActiveRecord::Base
  belongs_to :project, :touch =&gt; true
end
@@@

And every project must have at least one tag (I skipped the valiations). So when project.destroy is called, I get the following error message:

...application/vendor/rails/activerecord/lib/active_record/validations.rb:1090:in `save_without_dirty!'
...application/vendor/rails/activerecord/lib/active_record/dirty.rb:87:in `save_without_transactions!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in `save!'
...application/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:136:in `transaction'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:182:in `transaction'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in `save!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:208:in `rollback_active_record_state!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in `save!'
...application/vendor/rails/activerecord/lib/active_record/timestamp.rb:37:in `touch'
...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in `send'
...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in `method_missing'
...application/vendor/rails/activerecord/lib/active_record/associations.rb:1380:in `belongs_to_touch_after_save_or_destroy_for_project'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `send'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `evaluate_method'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in `call'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:93:in `run'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in `each'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in `send'


It seems that every tag.destroy call project.touch, and my guess the last touch is invalid because the project needs at least one tag. In my opinion, when the project is destroyed it shouldn't be touched at all.

Does someone know a workaround? Thanks</original-body>
  <latest-body>I have two models: Project and Tags

@@@ ruby
class Project &lt; ActiveRecord::Base
  has_many :tags, :dependent =&gt; :destroy
end

class Tag &lt; ActiveRecord::Base
  belongs_to :project, :touch =&gt; true
end
@@@

And every project must have at least one tag (I skipped the valiations). So when project.destroy is called, I get the following error message:

...application/vendor/rails/activerecord/lib/active_record/validations.rb:1090:in `save_without_dirty!'
...application/vendor/rails/activerecord/lib/active_record/dirty.rb:87:in `save_without_transactions!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in `save!'
...application/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:136:in `transaction'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:182:in `transaction'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in `save!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:208:in `rollback_active_record_state!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in `save!'
...application/vendor/rails/activerecord/lib/active_record/timestamp.rb:37:in `touch'
...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in `send'
...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in `method_missing'
...application/vendor/rails/activerecord/lib/active_record/associations.rb:1380:in `belongs_to_touch_after_save_or_destroy_for_project'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `send'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `evaluate_method'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in `call'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:93:in `run'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in `each'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in `send'


It seems that every tag.destroy call project.touch, and my guess the last touch is invalid because the project needs at least one tag. In my opinion, when the project is destroyed it shouldn't be touched at all.

Does someone know a workaround? Thanks</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have two models: Project and Tags&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Project &amp;lt; ActiveRecord::Base
  has_many :tags, :dependent =&amp;gt; :destroy
end

class Tag &amp;lt; ActiveRecord::Base
  belongs_to :project, :touch =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And every project must have at least one tag (I skipped the
valiations). So when project.destroy is called, I get the following
error message:&lt;/p&gt;
&lt;p&gt;
...application/vendor/rails/activerecord/lib/active_record/validations.rb:1090:in
&lt;code&gt;save_without_dirty!'
...application/vendor/rails/activerecord/lib/active_record/dirty.rb:87:in&lt;/code&gt;save_without_transactions!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in
&lt;code&gt;save!'
...application/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:136:in&lt;/code&gt;transaction'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:182:in
&lt;code&gt;transaction'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in&lt;/code&gt;save!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:208:in
&lt;code&gt;rollback_active_record_state!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in&lt;/code&gt;save!'
...application/vendor/rails/activerecord/lib/active_record/timestamp.rb:37:in
&lt;code&gt;touch'
...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in&lt;/code&gt;send'
...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in
&lt;code&gt;method_missing'
...application/vendor/rails/activerecord/lib/active_record/associations.rb:1380:in&lt;/code&gt;belongs_to_touch_after_save_or_destroy_for_project'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in
&lt;code&gt;send'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in&lt;/code&gt;evaluate_method'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in
&lt;code&gt;call'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:93:in&lt;/code&gt;run'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in
&lt;code&gt;each'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in&lt;/code&gt;send'&lt;/p&gt;
&lt;p&gt;It seems that every tag.destroy call project.touch, and my guess
the last touch is invalid because the project needs at least one
tag. In my opinion, when the project is destroyed it shouldn't be
touched at all.&lt;/p&gt;
&lt;p&gt;Does someone know a workaround? Thanks&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have two models: Project and Tags

@@@ ruby
class Project &lt; ActiveRecord::Base
  has_many :tags, :dependent =&gt; :destroy
end

class Tag &lt; ActiveRecord::Base
  belongs_to :project, :touch =&gt; true
end
@@@

And every project must have at least one tag (I skipped the valiations). So when project.destroy is called, I get the following error message:

...application/vendor/rails/activerecord/lib/active_record/validations.rb:1090:in `save_without_dirty!'
...application/vendor/rails/activerecord/lib/active_record/dirty.rb:87:in `save_without_transactions!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in `save!'
...application/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:136:in `transaction'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:182:in `transaction'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in `save!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:208:in `rollback_active_record_state!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in `save!'
...application/vendor/rails/activerecord/lib/active_record/timestamp.rb:37:in `touch'
...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in `send'
...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in `method_missing'
...application/vendor/rails/activerecord/lib/active_record/associations.rb:1380:in `belongs_to_touch_after_save_or_destroy_for_project'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `send'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `evaluate_method'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in `call'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:93:in `run'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in `each'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in `send'


It seems that every tag.destroy call project.touch, and my guess the last touch is invalid because the project needs at least one tag. In my opinion, when the project is destroyed it shouldn't be touched at all.

Does someone know a workaround? Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have two models: Project and Tags&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Project &amp;lt; ActiveRecord::Base
  has_many :tags, :dependent =&amp;gt; :destroy
end

class Tag &amp;lt; ActiveRecord::Base
  belongs_to :project, :touch =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And every project must have at least one tag (I skipped the
valiations). So when project.destroy is called, I get the following
error message:&lt;/p&gt;
&lt;p&gt;
...application/vendor/rails/activerecord/lib/active_record/validations.rb:1090:in
&lt;code&gt;save_without_dirty!'
...application/vendor/rails/activerecord/lib/active_record/dirty.rb:87:in&lt;/code&gt;save_without_transactions!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in
&lt;code&gt;save!'
...application/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:136:in&lt;/code&gt;transaction'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:182:in
&lt;code&gt;transaction'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in&lt;/code&gt;save!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:208:in
&lt;code&gt;rollback_active_record_state!'
...application/vendor/rails/activerecord/lib/active_record/transactions.rb:200:in&lt;/code&gt;save!'
...application/vendor/rails/activerecord/lib/active_record/timestamp.rb:37:in
&lt;code&gt;touch'
...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in&lt;/code&gt;send'
...application/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:221:in
&lt;code&gt;method_missing'
...application/vendor/rails/activerecord/lib/active_record/associations.rb:1380:in&lt;/code&gt;belongs_to_touch_after_save_or_destroy_for_project'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in
&lt;code&gt;send'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in&lt;/code&gt;evaluate_method'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in
&lt;code&gt;call'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:93:in&lt;/code&gt;run'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in
&lt;code&gt;each'
...application/vendor/rails/activesupport/lib/active_support/callbacks.rb:92:in&lt;/code&gt;send'&lt;/p&gt;
&lt;p&gt;It seems that every tag.destroy call project.touch, and my guess
the last touch is invalid because the project needs at least one
tag. In my opinion, when the project is destroyed it shouldn't be
touched at all.&lt;/p&gt;
&lt;p&gt;Does someone know a workaround? Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-05T09:46:42+00:00</created-at>
      <creator-id type="integer">75489</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3461</number>
      <permalink>touch-called-on-parent-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 :dependent :destroy active_record destroy touch</tag>
      <title>Touch called on parent destroy</title>
      <updated-at type="datetime">2009-11-05T09:46:49+00:00</updated-at>
      <user-id type="integer">75489</user-id>
      <version type="integer">1</version>
      <user-name>Helmut Juskewycz</user-name>
      <creator-name>Helmut Juskewycz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3461</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Why has this not been addressed?  This is affecting my application also, you should be able to limit :touch to save, update, or destroy.  Otherwise validations are running on an object that is trying to be destroyed (the parent in the dependent destroy).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Why has this not been addressed? This is affecting my
application also, you should be able to limit :touch to save,
update, or destroy. Otherwise validations are running on an object
that is trying to be destroyed (the parent in the dependent
destroy).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-03T17:34:46+01:00</created-at>
      <creator-id type="integer">75489</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3461</number>
      <permalink>touch-called-on-parent-destroy</permalink>
      <priority type="integer">173895</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 :dependent :destroy active_record destroy touch</tag>
      <title>Touch called on parent destroy</title>
      <updated-at type="datetime">2010-08-03T17:34:47+01:00</updated-at>
      <user-id type="integer">64408</user-id>
      <version type="integer">2</version>
      <user-name>joel</user-name>
      <creator-name>Helmut Juskewycz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3461</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Joel what version of rails you are using?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Joel what version of rails you are using?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-03T18:54:03+01:00</created-at>
      <creator-id type="integer">75489</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3461</number>
      <permalink>touch-called-on-parent-destroy</permalink>
      <priority type="integer">173895</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 :dependent :destroy active_record destroy touch</tag>
      <title>Touch called on parent destroy</title>
      <updated-at type="datetime">2010-08-03T18:54:04+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">3</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Helmut Juskewycz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3461</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Same here. Tested on Rails 2.3.8 and 2.3.9.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Same here. Tested on Rails 2.3.8 and 2.3.9.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-15T01:03:02+01:00</created-at>
      <creator-id type="integer">75489</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.4 :dependent :destroy active_record destroy touch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3461</number>
      <permalink>touch-called-on-parent-destroy</permalink>
      <priority type="integer">173895</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.8 2.3.9 :dependent :destroy active_record destroy touch</tag>
      <title>Touch called on parent destroy</title>
      <updated-at type="datetime">2010-09-15T01:03:03+01:00</updated-at>
      <user-id type="integer">83904</user-id>
      <version type="integer">4</version>
      <user-name>perrycz</user-name>
      <creator-name>Helmut Juskewycz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3461</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Any news on this? Also experiencing this in 2.3.8.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Any news on this? Also experiencing this in 2.3.8.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-24T18:25:32+00:00</created-at>
      <creator-id type="integer">75489</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3461</number>
      <permalink>touch-called-on-parent-destroy</permalink>
      <priority type="integer">173895</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.8 2.3.9 :dependent :destroy active_record destroy touch</tag>
      <title>Touch called on parent destroy</title>
      <updated-at type="datetime">2011-01-24T18:26:01+00:00</updated-at>
      <user-id type="integer">107431</user-id>
      <version type="integer">5</version>
      <user-name>Tony Daly</user-name>
      <creator-name>Helmut Juskewycz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3461</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>FYI: This is fixed in Rails 3</body>
      <body-html>&lt;div&gt;&lt;p&gt;FYI: This is fixed in Rails 3&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-16T22:39:12+00:00</created-at>
      <creator-id type="integer">75489</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3461</number>
      <permalink>touch-called-on-parent-destroy</permalink>
      <priority type="integer">173895</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 2.3.8 2.3.9 :dependent :destroy active_record destroy touch</tag>
      <title>Touch called on parent destroy</title>
      <updated-at type="datetime">2011-03-16T22:39:25+00:00</updated-at>
      <user-id type="integer">10950</user-id>
      <version type="integer">6</version>
      <user-name>Ryan Wallace</user-name>
      <creator-name>Helmut Juskewycz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3461</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
