From 1bc19f342e7feed09c0b1d64570f14b8862444ed Mon Sep 17 00:00:00 2001
From: Tan Kwang How <tankwanghow@gmail.com>
Date: Sun, 3 Jan 2010 13:49:18 +0800
Subject: [PATCH] fixed optimistic locking model with nested_attributes

---
 activerecord/lib/active_record/associations.rb     |    6 ++-
 .../lib/active_record/autosave_association.rb      |    7 +++-
 activerecord/lib/active_record/timestamp.rb        |   30 ++++++++++++--------
 3 files changed, 27 insertions(+), 16 deletions(-)

diff --git a/activerecord/lib/active_record/associations.rb b/activerecord/lib/active_record/associations.rb
index b2ae447..d84246b 100755
--- a/activerecord/lib/active_record/associations.rb
+++ b/activerecord/lib/active_record/associations.rb
@@ -1454,11 +1454,12 @@ module ActiveRecord
           method_name = "belongs_to_touch_after_save_or_destroy_for_#{reflection.name}".to_sym
           define_method(method_name) do
             association = send(reflection.name)
+            touch_method = methods.include?(:_silent_touch) && _silent_touch ? "silent_touch" : "touch"
 
             if touch_attribute == true
-              association.touch unless association.nil?
+              association.send(touch_method) unless association.nil?
             else
-              association.touch(touch_attribute) unless association.nil?
+              association.send(touch_method, touch_attribute) unless association.nil?
             end
           end
           after_save(method_name)
@@ -2208,3 +2209,4 @@ module ActiveRecord
     end
   end
 end
+
diff --git a/activerecord/lib/active_record/autosave_association.rb b/activerecord/lib/active_record/autosave_association.rb
index 98ab645..eac425f 100644
--- a/activerecord/lib/active_record/autosave_association.rb
+++ b/activerecord/lib/active_record/autosave_association.rb
@@ -300,6 +300,8 @@ module ActiveRecord
           records.each do |record|
             next if record.destroyed?
 
+            add_silent_touch(record) if @new_record_before_save
+
             if autosave && record.marked_for_destruction?
               association.destroy(record)
             elsif autosave != false && (@new_record_before_save || record.new_record?)
@@ -308,7 +310,7 @@ module ActiveRecord
               else
                 association.send(:insert_record, record)
               end
-            elsif autosave
+            elsif autosave && record.changed?
               record.save(false)
             end
           end
@@ -372,4 +374,5 @@ module ActiveRecord
       end
     end
   end
-end
\ No newline at end of file
+end
+
diff --git a/activerecord/lib/active_record/timestamp.rb b/activerecord/lib/active_record/timestamp.rb
index da075da..f200aef 100644
--- a/activerecord/lib/active_record/timestamp.rb
+++ b/activerecord/lib/active_record/timestamp.rb
@@ -17,7 +17,7 @@ module ActiveRecord
       class_inheritable_accessor :record_timestamps, :instance_writer => false
       self.record_timestamps = true
     end
-    
+
     # Saves the record with the updated_at/on attributes set to the current time.
     # If the save fails because of validation errors, an ActiveRecord::RecordInvalid exception is raised.
     # If an attribute name is passed, that attribute is used for the touch instead of the updated_at/on attributes.
@@ -27,20 +27,25 @@ module ActiveRecord
     #   product.touch               # updates updated_at
     #   product.touch(:designed_at) # updates the designed_at attribute
     def touch(attribute = nil)
-      current_time = current_time_from_proper_timezone
-
-      if attribute
-        write_attribute(attribute, current_time)
-      else
-        write_attribute('updated_at', current_time) if respond_to?(:updated_at)
-        write_attribute('updated_on', current_time) if respond_to?(:updated_on)
-      end
-
+      timestamp_attribute(attribute)
       save!
     end
 
+    def silent_touch(attribute = nil)
+      timestamp_attribute(attribute)
+    end
 
     private
+      def timestamp_attribute(attribute = nil)
+        current_time = current_time_from_proper_timezone
+        if attribute
+          write_attribute(attribute, current_time)
+        else
+          write_attribute('updated_at', current_time) if respond_to?(:updated_at)
+          write_attribute('updated_on', current_time) if respond_to?(:updated_on)
+        end
+      end
+
       def create_with_timestamps #:nodoc:
         if record_timestamps
           current_time = current_time_from_proper_timezone
@@ -65,9 +70,10 @@ module ActiveRecord
 
         update_without_timestamps(*args)
       end
-      
+
       def current_time_from_proper_timezone
         self.class.default_timezone == :utc ? Time.now.utc : Time.now
       end
   end
-end
\ No newline at end of file
+end
+
-- 
1.6.4

