<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-08T17:32:55+00:00</created-at>
  <creator-id type="integer">24689</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2173</number>
  <permalink>security-reset_session-doesnt-work-under-some-conditions-session-fixation-possible</permalink>
  <priority type="integer">1379</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>active_record reset_session security store</tag>
  <title>Security: reset_session doesn't work under some conditions (session fixation possible)</title>
  <updated-at type="datetime">2009-03-10T03:48:03+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">4</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Pawel</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2173</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Hello,

As Rails 2.3 is not stable yet I think it won't hurt anyone if I publish this security related bug as a public ticket.

This bug is similiar to #1601.

Using ActiveRecord session store and setting session variables after invoking reset_session causes session id to not change.
It is common to reset session, and then set authentication related variables in session to prevent session fixation. Under ActiveRecord store this attack is not prevented.

Example controller code:

  def authenticate
    session[:lazy_load_to_get_id]
    old_session_id = request.session_options[:id]
    reset_session # standard way to prevent session fixation
    session[:old_session_id] = old_session_id
    redirect_to :action =&gt; 'privileged_action'
  end

  def privileged_action
    if session[:old_session_id] == request.session_options[:id]
      render :text =&gt; 'Hej, session fixation is possible!'
    else
      render :text =&gt; 'Looks ok'
    end
  end

CookieStore handles this scenario correctly.

Tested on 2.3-rc2 and edge rails (revision 9b8cde41bc84466bf60fc4de6af54dbeb11cc0d6).</original-body>
  <latest-body>Hello,

As Rails 2.3 is not stable yet I think it won't hurt anyone if I publish this security related bug as a public ticket.

This bug is similiar to #1601.

Using ActiveRecord session store and setting session variables after invoking reset_session causes session id to not change.
It is common to reset session, and then set authentication related variables in session to prevent session fixation. Under ActiveRecord store this attack is not prevented.

Example controller code:

  def authenticate
    session[:lazy_load_to_get_id]
    old_session_id = request.session_options[:id]
    reset_session # standard way to prevent session fixation
    session[:old_session_id] = old_session_id
    redirect_to :action =&gt; 'privileged_action'
  end

  def privileged_action
    if session[:old_session_id] == request.session_options[:id]
      render :text =&gt; 'Hej, session fixation is possible!'
    else
      render :text =&gt; 'Looks ok'
    end
  end

CookieStore handles this scenario correctly.

Tested on 2.3-rc2 and edge rails (revision 9b8cde41bc84466bf60fc4de6af54dbeb11cc0d6).</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;As Rails 2.3 is not stable yet I think it won't hurt anyone if I
publish this security related bug as a public ticket.&lt;/p&gt;
&lt;p&gt;This bug is similiar to &lt;a href=&quot;/projects/8994/tickets/1601&quot; title=&quot;Ticket #1601&quot;&gt;#1601&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using ActiveRecord session store and setting session variables
after invoking reset_session causes session id to not change. It is
common to reset session, and then set authentication related
variables in session to prevent session fixation. Under
ActiveRecord store this attack is not prevented.&lt;/p&gt;
&lt;p&gt;Example controller code:&lt;/p&gt;
&lt;p&gt;def authenticate&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;session[:lazy_load_to_get_id]
old_session_id = request.session_options[:id]
reset_session # standard way to prevent session fixation
session[:old_session_id] = old_session_id
redirect_to :action =&amp;gt; 'privileged_action'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;def privileged_action&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if session[:old_session_id] == request.session_options[:id]
  render :text =&amp;gt; 'Hej, session fixation is possible!'
else
  render :text =&amp;gt; 'Looks ok'
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;CookieStore handles this scenario correctly.&lt;/p&gt;
&lt;p&gt;Tested on 2.3-rc2 and edge rails (revision
9b8cde41bc84466bf60fc4de6af54dbeb11cc0d6).&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello,

As Rails 2.3 is not stable yet I think it won't hurt anyone if I publish this security related bug as a public ticket.

This bug is similiar to #1601.

Using ActiveRecord session store and setting session variables after invoking reset_session causes session id to not change.
It is common to reset session, and then set authentication related variables in session to prevent session fixation. Under ActiveRecord store this attack is not prevented.

Example controller code:

@@@ ruby
  def authenticate
    session[:lazy_load_to_get_id]
    old_session_id = request.session_options[:id]
    reset_session # standard way to prevent session fixation
    session[:old_session_id] = old_session_id
    redirect_to :action =&gt; 'privileged_action'
  end

  def privileged_action
    if session[:old_session_id] == request.session_options[:id]
      render :text =&gt; 'Hey, session fixation is possible!'
    else
      render :text =&gt; 'Looks ok'
    end
  end
@@@

CookieStore handles this scenario correctly.

Tested on 2.3-rc2 and edge rails (revision 9b8cde41bc84466bf60fc4de6af54dbeb11cc0d6).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;As Rails 2.3 is not stable yet I think it won't hurt anyone if I
publish this security related bug as a public ticket.&lt;/p&gt;
&lt;p&gt;This bug is similiar to &lt;a href=&quot;/projects/8994/tickets/1601&quot; title=&quot;Ticket #1601&quot;&gt;#1601&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using ActiveRecord session store and setting session variables
after invoking reset_session causes session id to not change. It is
common to reset session, and then set authentication related
variables in session to prevent session fixation. Under
ActiveRecord store this attack is not prevented.&lt;/p&gt;
&lt;p&gt;Example controller code:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def authenticate
    session[:lazy_load_to_get_id]
    old_session_id = request.session_options[:id]
    reset_session # standard way to prevent session fixation
    session[:old_session_id] = old_session_id
    redirect_to :action =&amp;gt; 'privileged_action'
  end

  def privileged_action
    if session[:old_session_id] == request.session_options[:id]
      render :text =&amp;gt; 'Hey, session fixation is possible!'
    else
      render :text =&amp;gt; 'Looks ok'
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CookieStore handles this scenario correctly.&lt;/p&gt;
&lt;p&gt;Tested on 2.3-rc2 and edge rails (revision
9b8cde41bc84466bf60fc4de6af54dbeb11cc0d6).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-08T17:32:55+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2173</number>
      <permalink>security-reset_session-doesnt-work-under-some-conditions-session-fixation-possible</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record reset_session security store</tag>
      <title>Security: reset_session doesn't work under some conditions (session fixation possible)</title>
      <updated-at type="datetime">2009-03-09T10:26:56+00:00</updated-at>
      <user-id type="integer">24689</user-id>
      <version type="integer">1</version>
      <user-name>Pawel</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2173</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-08T18:05:44+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2173</number>
      <permalink>security-reset_session-doesnt-work-under-some-conditions-session-fixation-possible</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record reset_session security store</tag>
      <title>Security: reset_session doesn't work under some conditions (session fixation possible)</title>
      <updated-at type="datetime">2009-03-08T18:05:46+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2173</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [224a534400fd622dda57058d1eed349b8375e5e3]) reset_session should force a new session id to be generated [#2173]
http://github.com/rails/rails/commit/224a534400fd622dda57058d1eed349b8375e5e3</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [224a534400fd622dda57058d1eed349b8375e5e3]) reset_session
should force a new session id to be generated [&lt;a href=&quot;/projects/8994/tickets/2173&quot; title=&quot;Ticket #2173&quot;&gt;#2173&lt;/a&gt;]
&lt;a href=&quot;http://github.com/rails/rails/commit/224a534400fd622dda57058d1eed349b8375e5e3&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-10T03:46:18+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2173</number>
      <permalink>security-reset_session-doesnt-work-under-some-conditions-session-fixation-possible</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record reset_session security store</tag>
      <title>Security: reset_session doesn't work under some conditions (session fixation possible)</title>
      <updated-at type="datetime">2009-03-10T03:46:19+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">3</version>
      <user-name>Repository</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2173</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-10T03:47:58+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2173</number>
      <permalink>security-reset_session-doesnt-work-under-some-conditions-session-fixation-possible</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>active_record reset_session security store</tag>
      <title>Security: reset_session doesn't work under some conditions (session fixation possible)</title>
      <updated-at type="datetime">2009-03-10T03:48:03+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">4</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2173</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
