<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-25T00:43:52+01:00</created-at>
  <creator-id type="integer">27133</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">700</number>
  <permalink>actionmailer-base-should-respond-to-methods-handled-by-method_missing</permalink>
  <priority type="integer">172</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>actionmailer bug patch tested tests</tag>
  <title>ActionMailer::Base should respond to methods handled by method_missing</title>
  <updated-at type="datetime">2008-08-29T21:10:37+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">7</version>
  <user-name>Repository</user-name>
  <creator-name>James Mead</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/700</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>ActionMailer::Base uses method_missing to handle dynamic create &amp; deliver methods, but does not alter respond_to? to include the handled methods. So for example:

@@@ ruby
TopicMailer.deliver_activation_email # =&gt; although this works
TopicMailer.respond_to?(:deliver_activation_email) # =&gt; this returns false
@@@

It's my understanding that if you implement method_missing on a class to handle extra methods, you should add a corresponding implementation of respond_to? which recognizes the methods that method_missing will handle. Dan Manges has a nice explanation on his &quot;blog&quot;:http://www.dcmanges.com/blog/30. If this were fixed, the above example becomes:

@@@ ruby
TopicMailer.deliver_activation_email # =&gt; this still works
TopicMailer.respond_to?(:deliver_activation_email) # =&gt; this returns true
@@@

I have a practical reason for wanting this fixed. I've added functionality to &quot;Mocha&quot;:http://mocha.rubyforge.org which allows you to get warnings or errors when stubbing non-existent methods. The problem is that when running in a Rails project, false negatives are produced when you are legitimately stubbing ActionMailer create/deliver methods. I think this functionality could be really useful in catching incorrectly stubbed methods.

The attached patch fixes this problem. It includes tests which fail against the current implementation and tests that check that original behaviour is preserved.

This ticket corresponds to a similar &quot;patch&quot;:http://dev.rubyonrails.org/ticket/11538 applied to ActiveRecord::Base.</original-body>
  <latest-body>ActionMailer::Base uses method_missing to handle dynamic create &amp; deliver methods, but does not alter respond_to? to include the handled methods. So for example:

@@@ ruby
TopicMailer.deliver_activation_email # =&gt; although this works
TopicMailer.respond_to?(:deliver_activation_email) # =&gt; this returns false
@@@

It's my understanding that if you implement method_missing on a class to handle extra methods, you should add a corresponding implementation of respond_to? which recognizes the methods that method_missing will handle. Dan Manges has a nice explanation on his &quot;blog&quot;:http://www.dcmanges.com/blog/30. If this were fixed, the above example becomes:

@@@ ruby
TopicMailer.deliver_activation_email # =&gt; this still works
TopicMailer.respond_to?(:deliver_activation_email) # =&gt; this returns true
@@@

I have a practical reason for wanting this fixed. I've added functionality to &quot;Mocha&quot;:http://mocha.rubyforge.org which allows you to get warnings or errors when stubbing non-existent methods. The problem is that when running in a Rails project, false negatives are produced when you are legitimately stubbing ActionMailer create/deliver methods. I think this functionality could be really useful in catching incorrectly stubbed methods.

The attached patch fixes this problem. It includes tests which fail against the current implementation and tests that check that original behaviour is preserved.

This ticket corresponds to a similar &quot;patch&quot;:http://dev.rubyonrails.org/ticket/11538 applied to ActiveRecord::Base.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
ActionMailer::Base uses method_missing to handle dynamic create &amp; deliver methods, but does not alter respond_to? to include the handled methods. So for example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;TopicMailer.deliver_activation_email # =&amp;gt; although this works
TopicMailer.respond_to?(:deliver_activation_email) # =&amp;gt; this returns false&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
It's my understanding that if you implement method_missing on a class to handle extra methods, you should add a corresponding implementation of respond_to? which recognizes the methods that method_missing will handle. Dan Manges has a nice explanation on his &lt;a href=&quot;http://www.dcmanges.com/blog/30&quot;&gt;blog&lt;/a&gt;. If this were fixed, the above example becomes:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;TopicMailer.deliver_activation_email # =&amp;gt; this still works
TopicMailer.respond_to?(:deliver_activation_email) # =&amp;gt; this returns true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I have a practical reason for wanting this fixed. I've added functionality to &lt;a href=&quot;http://mocha.rubyforge.org&quot;&gt;Mocha&lt;/a&gt; which allows you to get warnings or errors when stubbing non-existent methods. The problem is that when running in a Rails project, false negatives are produced when you are legitimately stubbing ActionMailer create/deliver methods. I think this functionality could be really useful in catching incorrectly stubbed methods.
&lt;/p&gt;&lt;p&gt;
The attached patch fixes this problem. It includes tests which fail against the current implementation and tests that check that original behaviour is preserved.
&lt;/p&gt;&lt;p&gt;
This ticket corresponds to a similar &lt;a href=&quot;http://dev.rubyonrails.org/ticket/11538&quot;&gt;patch&lt;/a&gt; applied to ActiveRecord::Base.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>ActionMailer::Base uses method_missing to handle dynamic create &amp; deliver methods, but does not alter respond_to? to include the handled methods. So for example:

@@@ ruby
TopicMailer.deliver_activation_email # =&gt; although this works
TopicMailer.respond_to?(:deliver_activation_email) # =&gt; this returns false
@@@

It's my understanding that if you implement method_missing on a class to handle extra methods, you should add a corresponding implementation of respond_to? which recognizes the methods that method_missing will handle. Dan Manges has a nice explanation on his &quot;blog&quot;:http://www.dcmanges.com/blog/30. If this were fixed, the above example becomes:

@@@ ruby
TopicMailer.deliver_activation_email # =&gt; this still works
TopicMailer.respond_to?(:deliver_activation_email) # =&gt; this returns true
@@@

I have a practical reason for wanting this fixed. I've added functionality to &quot;Mocha&quot;:http://mocha.rubyforge.org which allows you to get warnings or errors when stubbing non-existent methods. The problem is that when running in a Rails project, false negatives are produced when you are legitimately stubbing ActionMailer create/deliver methods. I think this functionality could be really useful in catching incorrectly stubbed methods.

The attached patch fixes this problem. It includes tests which fail against the current implementation and tests that check that original behaviour is preserved.  

This ticket corresponds to a similar &quot;patch&quot;:http://dev.rubyonrails.org/ticket/11538 applied to ActiveRecord::Base.

I wonder whether the method_missing interception of the &quot;new&quot; method is really necessary - there is only one (seemingly insignificant) test failure if this is removed. Also it would be good if method_missing and thus respond_to? checked whether the requested template existed - in a similar manner to ActiveRecord::Base checking whether a specific dynamic finder exists depending on attributes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
ActionMailer::Base uses method_missing to handle dynamic create &amp; deliver methods, but does not alter respond_to? to include the handled methods. So for example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;TopicMailer.deliver_activation_email # =&amp;gt; although this works
TopicMailer.respond_to?(:deliver_activation_email) # =&amp;gt; this returns false&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
It's my understanding that if you implement method_missing on a class to handle extra methods, you should add a corresponding implementation of respond_to? which recognizes the methods that method_missing will handle. Dan Manges has a nice explanation on his &lt;a href=&quot;http://www.dcmanges.com/blog/30&quot;&gt;blog&lt;/a&gt;. If this were fixed, the above example becomes:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;TopicMailer.deliver_activation_email # =&amp;gt; this still works
TopicMailer.respond_to?(:deliver_activation_email) # =&amp;gt; this returns true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I have a practical reason for wanting this fixed. I've added functionality to &lt;a href=&quot;http://mocha.rubyforge.org&quot;&gt;Mocha&lt;/a&gt; which allows you to get warnings or errors when stubbing non-existent methods. The problem is that when running in a Rails project, false negatives are produced when you are legitimately stubbing ActionMailer create/deliver methods. I think this functionality could be really useful in catching incorrectly stubbed methods.
&lt;/p&gt;&lt;p&gt;
The attached patch fixes this problem. It includes tests which fail against the current implementation and tests that check that original behaviour is preserved.
&lt;/p&gt;&lt;p&gt;
This ticket corresponds to a similar &lt;a href=&quot;http://dev.rubyonrails.org/ticket/11538&quot;&gt;patch&lt;/a&gt; applied to ActiveRecord::Base.
&lt;/p&gt;&lt;p&gt;
I wonder whether the method_missing interception of the &quot;new&quot; method is really necessary - there is only one (seemingly insignificant) test failure if this is removed. Also it would be good if method_missing and thus respond_to? checked whether the requested template existed - in a similar manner to ActiveRecord::Base checking whether a specific dynamic finder exists depending on attributes.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-25T01:07:20+01:00</created-at>
      <creator-id type="integer">27133</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">700</number>
      <permalink>actionmailer-base-should-respond-to-methods-handled-by-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>mailer patch</tag>
      <title>ActionMailer::Base should respond to methods handled by method_missing</title>
      <updated-at type="datetime">2008-07-25T01:07:20+01:00</updated-at>
      <user-id type="integer">27133</user-id>
      <version type="integer">1</version>
      <user-name>James Mead</user-name>
      <creator-name>James Mead</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/700</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1. Plus we should probably investigate if the same happens as well for other cases where method_missing is used.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
+1. Plus we should probably investigate if the same happens as well for other cases where method_missing is used.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-25T02:17:33+01:00</created-at>
      <creator-id type="integer">27133</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: mailer patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">700</number>
      <permalink>actionmailer-base-should-respond-to-methods-handled-by-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionmailer bug patch tested tests</tag>
      <title>ActionMailer::Base should respond to methods handled by method_missing</title>
      <updated-at type="datetime">2008-07-25T02:17:33+01:00</updated-at>
      <user-id type="integer">18096</user-id>
      <version type="integer">2</version>
      <user-name>Clemens Kofler</user-name>
      <creator-name>James Mead</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/700</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 - if it quacks like a duck,  it should know that it can quack like a duck.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 - if it quacks like a duck,  it should know that it can quack like a duck.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-20T09:31:45+01:00</created-at>
      <creator-id type="integer">27133</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">700</number>
      <permalink>actionmailer-base-should-respond-to-methods-handled-by-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionmailer bug patch tested tests</tag>
      <title>ActionMailer::Base should respond to methods handled by method_missing</title>
      <updated-at type="datetime">2008-08-20T09:31:45+01:00</updated-at>
      <user-id type="integer">160</user-id>
      <version type="integer">3</version>
      <user-name>Luke Redpath</user-name>
      <creator-name>James Mead</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/700</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 - This seems like a no-brainer win.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 - This seems like a no-brainer win.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-20T09:54:46+01:00</created-at>
      <creator-id type="integer">27133</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">700</number>
      <permalink>actionmailer-base-should-respond-to-methods-handled-by-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionmailer bug patch tested tests</tag>
      <title>ActionMailer::Base should respond to methods handled by method_missing</title>
      <updated-at type="datetime">2008-08-20T09:54:46+01:00</updated-at>
      <user-id type="integer">137</user-id>
      <version type="integer">4</version>
      <user-name>James Adam</user-name>
      <creator-name>James Mead</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/700</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1. The current implementation generates a lot of unnecessary noise when you disable the stubbing of non existent methods in Mocha.</body>
      <body-html>&lt;div&gt;&lt;ol&gt;
&lt;li&gt;The current implementation generates a lot of unnecessary noise when you disable the stubbing of non existent methods in Mocha.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-20T10:01:17+01:00</created-at>
      <creator-id type="integer">27133</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">700</number>
      <permalink>actionmailer-base-should-respond-to-methods-handled-by-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionmailer bug patch tested tests</tag>
      <title>ActionMailer::Base should respond to methods handled by method_missing</title>
      <updated-at type="datetime">2008-08-20T10:01:17+01:00</updated-at>
      <user-id type="integer">19697</user-id>
      <version type="integer">5</version>
      <user-name>Chris Roos</user-name>
      <creator-name>James Mead</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/700</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1. It's how it should be.</body>
      <body-html>&lt;div&gt;&lt;ol&gt;
&lt;li&gt;It's how it should be.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-20T10:08:46+01:00</created-at>
      <creator-id type="integer">27133</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">700</number>
      <permalink>actionmailer-base-should-respond-to-methods-handled-by-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionmailer bug patch tested tests</tag>
      <title>ActionMailer::Base should respond to methods handled by method_missing</title>
      <updated-at type="datetime">2008-08-20T10:08:46+01:00</updated-at>
      <user-id type="integer">26445</user-id>
      <version type="integer">6</version>
      <user-name>Paul Battley</user-name>
      <creator-name>James Mead</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/700</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [3cf773b187e803e16b8237e5923fa4c1139cde8a]) ActionMailer should respond_to? to methods handled by method_missing [#700 state:resolved]

Signed-off-by: Joshua Peek &lt;josh@joshpeek.com&gt;
http://github.com/rails/rails/commit/3cf773b187e803e16b8237e5923fa4c1139cde8a</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [3cf773b187e803e16b8237e5923fa4c1139cde8a]) ActionMailer
should respond_to? to methods handled by method_missing [&lt;a href=&quot;/projects/8994/tickets/700&quot; title=&quot;Ticket #700&quot;&gt;#700&lt;/a&gt;
state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Joshua Peek &lt;a href=&quot;mailto:josh@joshpeek.com&quot;&gt;josh@joshpeek.com&lt;/a&gt; &lt;a href=&quot;http://github.com/rails/rails/commit/3cf773b187e803e16b8237e5923fa4c1139cde8a&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-29T21:10:37+01:00</created-at>
      <creator-id type="integer">27133</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">700</number>
      <permalink>actionmailer-base-should-respond-to-methods-handled-by-method_missing-2</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>actionmailer bug patch tested tests</tag>
      <title>ActionMailer::Base should respond to methods handled by method_missing</title>
      <updated-at type="datetime">2008-08-29T21:10:37+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">7</version>
      <user-name>Repository</user-name>
      <creator-name>James Mead</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/700</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>13d0c28ca591a863f5bd7f7b3736c3910f10c975</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-07-25T00:43:52+01:00</created-at>
      <filename>action-mailer-should-respond-to-methods-handled-by-method-missing.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">34842</id>
      <size type="integer">4019</size>
      <uploader-id type="integer">27133</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/34842/action-mailer-should-respond-to-methods-handled-by-method-missing.patch</url>
    </attachment>
  </attachments>
</ticket>
