From 3bcd2ff176f6bfe3e3f55293b5ca60f103d4b9f1 Mon Sep 17 00:00:00 2001
From: Joachim Garth <jpgarth@googlemail.com>
Date: Fri, 27 Jun 2008 20:03:51 +0200
Subject: [PATCH] Fixed a bug in the eager loading of records' associations with ActiveRecord.store_full_sti_class = true

---
 .../lib/active_record/association_preload.rb       |    2 +-
 .../eager_load_includes_full_sti_class_test.rb     |   40 ++++++++++++++++++++
 2 files changed, 41 insertions(+), 1 deletions(-)
 create mode 100644 activerecord/test/cases/associations/eager_load_includes_full_sti_class_test.rb

diff --git a/activerecord/lib/active_record/association_preload.rb b/activerecord/lib/active_record/association_preload.rb
index 49f5270..6a4e5ac 100644
--- a/activerecord/lib/active_record/association_preload.rb
+++ b/activerecord/lib/active_record/association_preload.rb
@@ -243,7 +243,7 @@ module ActiveRecord
         table_name = reflection.klass.quoted_table_name
 
         if interface = reflection.options[:as]
-          conditions = "#{reflection.klass.quoted_table_name}.#{connection.quote_column_name "#{interface}_id"} IN (?) and #{reflection.klass.quoted_table_name}.#{connection.quote_column_name "#{interface}_type"} = '#{self.base_class.name.demodulize}'"
+          conditions = "#{reflection.klass.quoted_table_name}.#{connection.quote_column_name "#{interface}_id"} IN (?) and #{reflection.klass.quoted_table_name}.#{connection.quote_column_name "#{interface}_type"} = '#{self.store_full_sti_class ? self.base_class.name : self.base_class.name.demodulize}'"
         else
           foreign_key = reflection.primary_key_name
           conditions = "#{reflection.klass.quoted_table_name}.#{foreign_key} IN (?)"
diff --git a/activerecord/test/cases/associations/eager_load_includes_full_sti_class_test.rb b/activerecord/test/cases/associations/eager_load_includes_full_sti_class_test.rb
new file mode 100644
index 0000000..efbb851
--- /dev/null
+++ b/activerecord/test/cases/associations/eager_load_includes_full_sti_class_test.rb
@@ -0,0 +1,40 @@
+require 'cases/helper'
+require 'models/post'
+require 'models/tagging'
+
+module Namespaced
+  class Post < ActiveRecord::Base
+    set_table_name 'posts'
+    has_one :tagging, :as => :taggable, :class_name => 'Tagging'
+  end
+end
+
+class EagerLoadIncludeFullStiClassNamesTest < ActiveRecord::TestCase
+
+  def setup
+    generate_test_objects
+  end
+  
+  def teardown
+    
+  end
+
+  def generate_test_objects
+    post = Namespaced::Post.create( :title => 'Great stuff', :body => 'This is not', :author_id => 1 )
+    tagging = Tagging.create( :taggable => post )
+  end
+
+  def test_class_names
+    old = ActiveRecord::Base.store_full_sti_class
+
+    ActiveRecord::Base.store_full_sti_class = false
+    post = Namespaced::Post.find_by_title( 'Great stuff', :include => :tagging )
+    assert_nil post.tagging
+
+    ActiveRecord::Base.store_full_sti_class = true
+    post = Namespaced::Post.find_by_title( 'Great stuff', :include => :tagging )
+    assert_equal 'Tagging', post.tagging.class.name
+  ensure
+    ActiveRecord::Base.store_full_sti_class = old
+  end
+end
-- 
1.5.6

