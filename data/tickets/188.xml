<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-13T22:32:13+01:00</created-at>
  <creator-id type="integer">20201</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">188</number>
  <permalink>single-table-inheritance-bug-only-in-production-environment</permalink>
  <priority type="integer">12878</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord bug</tag>
  <title>Single table inheritance bug only in production environment</title>
  <updated-at type="datetime">2009-04-01T04:33:41+01:00</updated-at>
  <user-id type="integer">23078</user-id>
  <version type="integer">5</version>
  <user-name>Pete P.</user-name>
  <creator-name>Joshua J. Born</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/188</url>
  <priority-name nil="true"></priority-name>
  <original-body>With ActiveRecord 2.0.2, define the following classes.

class A &lt; ActiveRecord::Base
class B &lt; A
class C &lt; B

Implement all three with single table inheritance. Create several instances of B and of C and save them in the database.

Call B.find(:all) in a controller list action.

If a development environment is loaded, then B.find(:all) will always return just objects of class B. Set a breakpoint on B.find(:all) in a debugger to verify this. 

If a production environment is loaded, then the first time B.find(:all) is run it will return just objects of class B. However, on subsequent calls to B.find(:all), ActiveRecord returns objects of class C as well. This was checked with a debugger breaking as soon as B.find(:all) was called.

Loading a production environment in the console and running B.find(:all) multiple times seems to work correctly. This bug only occurs when called from within a controller.</original-body>
  <latest-body>With ActiveRecord 2.0.2, define the following classes.

class A &lt; ActiveRecord::Base
class B &lt; A
class C &lt; B

Implement all three with single table inheritance. Create several instances of B and of C and save them in the database.

Call B.find(:all) in a controller list action.

If a development environment is loaded, then B.find(:all) will always return just objects of class B. Set a breakpoint on B.find(:all) in a debugger to verify this. 

If a production environment is loaded, then the first time B.find(:all) is run it will return just objects of class B. However, on subsequent calls to B.find(:all), ActiveRecord returns objects of class C as well. This was checked with a debugger breaking as soon as B.find(:all) was called.

Loading a production environment in the console and running B.find(:all) multiple times seems to work correctly. This bug only occurs when called from within a controller.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
With ActiveRecord 2.0.2, define the following classes.
&lt;/p&gt;&lt;p&gt;
class A &amp;lt; ActiveRecord::Base
&lt;/p&gt;&lt;p&gt;
class B &amp;lt; A
&lt;/p&gt;&lt;p&gt;
class C &amp;lt; B
&lt;/p&gt;&lt;p&gt;
Implement all three with single table inheritance. Create several instances of B and of C and save them in the database.
&lt;/p&gt;&lt;p&gt;
Call B.find(:all) in a controller list action.
&lt;/p&gt;&lt;p&gt;
If a development environment is loaded, then B.find(:all) will always return just objects of class B. Set a breakpoint on B.find(:all) in a debugger to verify this.
&lt;/p&gt;&lt;p&gt;
If a production environment is loaded, then the first time B.find(:all) is run it will return just objects of class B. However, on subsequent calls to B.find(:all), ActiveRecord returns objects of class C as well. This was checked with a debugger breaking as soon as B.find(:all) was called.
&lt;/p&gt;&lt;p&gt;
Loading a production environment in the console and running B.find(:all) multiple times seems to work correctly. This bug only occurs when called from within a controller.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>With ActiveRecord 2.0.2, define the following classes.

class A &lt; ActiveRecord::Base
class B &lt; A
class C &lt; B

Implement all three with single table inheritance. Create several instances of B and of C and save them in the database.

Call B.find(:all) in a controller list action.

If a development environment is loaded, then B.find(:all) will always return just objects of class B. Set a breakpoint on B.find(:all) in a debugger to verify this. 

If a production environment is loaded, then the first time B.find(:all) is run it will return just objects of class B. However, on subsequent calls to B.find(:all), ActiveRecord returns objects of class C as well. This was checked with a debugger breaking as soon as B.find(:all) was called.

Loading a production environment in the console and running B.find(:all) multiple times seems to work correctly. This bug only occurs when called from within a controller.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
With ActiveRecord 2.0.2, define the following classes.
&lt;/p&gt;&lt;p&gt;
class A &amp;lt; ActiveRecord::Base
&lt;/p&gt;&lt;p&gt;
class B &amp;lt; A
&lt;/p&gt;&lt;p&gt;
class C &amp;lt; B
&lt;/p&gt;&lt;p&gt;
Implement all three with single table inheritance. Create several instances of B and of C and save them in the database.
&lt;/p&gt;&lt;p&gt;
Call B.find(:all) in a controller list action.
&lt;/p&gt;&lt;p&gt;
If a development environment is loaded, then B.find(:all) will always return just objects of class B. Set a breakpoint on B.find(:all) in a debugger to verify this.
&lt;/p&gt;&lt;p&gt;
If a production environment is loaded, then the first time B.find(:all) is run it will return just objects of class B. However, on subsequent calls to B.find(:all), ActiveRecord returns objects of class C as well. This was checked with a debugger breaking as soon as B.find(:all) was called.
&lt;/p&gt;&lt;p&gt;
Loading a production environment in the console and running B.find(:all) multiple times seems to work correctly. This bug only occurs when called from within a controller.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-13T22:32:13+01:00</created-at>
      <creator-id type="integer">20201</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">188</number>
      <permalink>single-table-inheritance-bug-only-in-production-environment</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Single table inheritance bug only in production environment</title>
      <updated-at type="datetime">2008-05-13T22:32:13+01:00</updated-at>
      <user-id type="integer">20201</user-id>
      <version type="integer">1</version>
      <user-name>Joshua J. Born</user-name>
      <creator-name>Joshua J. Born</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/188</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm not sure why this occurred only when Rails was loaded in its production environment and not the development environment, but this seems to be due to the documented foible of ActiveRecord getting subclasses in STI only if the subclass module has been loaded.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I'm not sure why this occurred only when Rails was loaded in its production environment and not the development environment, but this seems to be due to the documented foible of ActiveRecord getting subclasses in STI only if the subclass module has been loaded.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-13T22:45:36+01:00</created-at>
      <creator-id type="integer">20201</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">188</number>
      <permalink>single-table-inheritance-bug-only-in-production-environment</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Single table inheritance bug only in production environment</title>
      <updated-at type="datetime">2008-05-13T22:45:36+01:00</updated-at>
      <user-id type="integer">20201</user-id>
      <version type="integer">2</version>
      <user-name>Joshua J. Born</user-name>
      <creator-name>Joshua J. Born</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/188</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>http://dev.rubyonrails.org/ticket/4730</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&lt;a href=&quot;http://dev.rubyonrails.org/ticket/4730&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-13T22:46:06+01:00</created-at>
      <creator-id type="integer">20201</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">188</number>
      <permalink>single-table-inheritance-bug-only-in-production-environment</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Single table inheritance bug only in production environment</title>
      <updated-at type="datetime">2008-05-13T22:46:06+01:00</updated-at>
      <user-id type="integer">20201</user-id>
      <version type="integer">3</version>
      <user-name>Joshua J. Born</user-name>
      <creator-name>Joshua J. Born</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/188</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Closing this ticket as stale. If this is still an issue for you, feel free to reopen this ticket or create a new one with an updated description. Remember those unit tests too ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Closing this ticket as stale. If this is still an issue for you, feel free to reopen this ticket or create a new one with an updated description. Remember those unit tests too ;)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-17T01:38:51+01:00</created-at>
      <creator-id type="integer">20201</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">188</number>
      <permalink>single-table-inheritance-bug-only-in-production-environment</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug</tag>
      <title>Single table inheritance bug only in production environment</title>
      <updated-at type="datetime">2008-07-17T01:38:51+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">4</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Joshua J. Born</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/188</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've encountered this problem as well as detailed on this new ticket: 

https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2389-sti-changes-behavior-depending-on-environment</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've encountered this problem as well as detailed on this new
ticket:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2389-sti-changes-behavior-depending-on-environment&quot;&gt;
https://rails.lighthouseapp.com/...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-01T04:33:41+01:00</created-at>
      <creator-id type="integer">20201</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">188</number>
      <permalink>single-table-inheritance-bug-only-in-production-environment</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug</tag>
      <title>Single table inheritance bug only in production environment</title>
      <updated-at type="datetime">2009-04-01T04:33:41+01:00</updated-at>
      <user-id type="integer">23078</user-id>
      <version type="integer">5</version>
      <user-name>Pete P.</user-name>
      <creator-name>Joshua J. Born</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/188</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
