<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-10-08T00:07:35+01:00</created-at>
  <creator-id type="integer">4023</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3346</number>
  <permalink>find_in_batches-is-slow-on-large-datasets</permalink>
  <priority type="integer">159230</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>find_in_batches is slow on large datasets</title>
  <updated-at type="datetime">2011-02-08T19:26:37+00:00</updated-at>
  <user-id type="integer">22990</user-id>
  <version type="integer">4</version>
  <user-name>Yong Bakos</user-name>
  <creator-name>Chris</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3346</url>
  <priority-name nil="true"></priority-name>
  <original-body>Using find_in_batches on a table of ~1MM rows generates queries that take &gt;3s for a very simple query because the order clause has to consider the whole table greater than the start row.

http://github.com/chriseppstein/rails/commit/0a726f1b1447ddf105a3e571e4ed6e67a3360013

is a patch that changes the implementation of find_in_batches such that it selects a section of ids and only sorts that section.

With this patch, my queries are about 3ms on my local system - a 1000x speed improvement - but they are a constant-time query with the number of records instead of growing slower over time.

To do this, I made the assumption that the primary key is an integer -- I'm not sure if that's a valid assumption, but it's certainly the most common scenario.

This patch also adds support for :limit, because there's really no good reason to not support it in code.

Lastly, this patch breaks the behavior that only the last batch will have less than the batch size number of records. However, it does make sure that every batch has at least one record. This doesn't seem like a terribly important aspect of the api, but it's worth noting.</original-body>
  <latest-body>Using find_in_batches on a table of ~1MM rows generates queries that take &gt;3s for a very simple query because the order clause has to consider the whole table greater than the start row.

http://github.com/chriseppstein/rails/commit/0a726f1b1447ddf105a3e571e4ed6e67a3360013

is a patch that changes the implementation of find_in_batches such that it selects a section of ids and only sorts that section.

With this patch, my queries are about 3ms on my local system - a 1000x speed improvement - but they are a constant-time query with the number of records instead of growing slower over time.

To do this, I made the assumption that the primary key is an integer -- I'm not sure if that's a valid assumption, but it's certainly the most common scenario.

This patch also adds support for :limit, because there's really no good reason to not support it in code.

Lastly, this patch breaks the behavior that only the last batch will have less than the batch size number of records. However, it does make sure that every batch has at least one record. This doesn't seem like a terribly important aspect of the api, but it's worth noting.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Using find_in_batches on a table of ~1MM rows generates queries
that take &amp;gt;3s for a very simple query because the order clause
has to consider the whole table greater than the start row.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/chriseppstein/rails/commit/0a726f1b1447ddf105a3e571e4ed6e67a3360013&quot;&gt;
http://github.com/chriseppstein/rails/commit/0a726f1b1447ddf105a3e5...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;is a patch that changes the implementation of find_in_batches
such that it selects a section of ids and only sorts that
section.&lt;/p&gt;
&lt;p&gt;With this patch, my queries are about 3ms on my local system - a
1000x speed improvement - but they are a constant-time query with
the number of records instead of growing slower over time.&lt;/p&gt;
&lt;p&gt;To do this, I made the assumption that the primary key is an
integer -- I'm not sure if that's a valid assumption, but it's
certainly the most common scenario.&lt;/p&gt;
&lt;p&gt;This patch also adds support for :limit, because there's really
no good reason to not support it in code.&lt;/p&gt;
&lt;p&gt;Lastly, this patch breaks the behavior that only the last batch
will have less than the batch size number of records. However, it
does make sure that every batch has at least one record. This
doesn't seem like a terribly important aspect of the api, but it's
worth noting.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Using find_in_batches on a table of ~1MM rows generates queries that take &gt;3s for a very simple query because the order clause has to consider the whole table greater than the start row.

http://github.com/chriseppstein/rails/commit/0a726f1b1447ddf105a3e571e4ed6e67a3360013

is a patch that changes the implementation of find_in_batches such that it selects a section of ids and only sorts that section.

With this patch, my queries are about 3ms on my local system - a 1000x speed improvement - but they are a constant-time query with the number of records instead of growing slower over time.

To do this, I made the assumption that the primary key is an integer -- I'm not sure if that's a valid assumption, but it's certainly the most common scenario.

This patch also adds support for :limit, because there's really no good reason to not support it in code.

Lastly, this patch breaks the behavior that only the last batch will have less than the batch size number of records. However, it does make sure that every batch has at least one record. This doesn't seem like a terribly important aspect of the api, but it's worth noting.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Using find_in_batches on a table of ~1MM rows generates queries
that take &amp;gt;3s for a very simple query because the order clause
has to consider the whole table greater than the start row.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/chriseppstein/rails/commit/0a726f1b1447ddf105a3e571e4ed6e67a3360013&quot;&gt;
http://github.com/chriseppstein/rails/commit/0a726f1b1447ddf105a3e5...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;is a patch that changes the implementation of find_in_batches
such that it selects a section of ids and only sorts that
section.&lt;/p&gt;
&lt;p&gt;With this patch, my queries are about 3ms on my local system - a
1000x speed improvement - but they are a constant-time query with
the number of records instead of growing slower over time.&lt;/p&gt;
&lt;p&gt;To do this, I made the assumption that the primary key is an
integer -- I'm not sure if that's a valid assumption, but it's
certainly the most common scenario.&lt;/p&gt;
&lt;p&gt;This patch also adds support for :limit, because there's really
no good reason to not support it in code.&lt;/p&gt;
&lt;p&gt;Lastly, this patch breaks the behavior that only the last batch
will have less than the batch size number of records. However, it
does make sure that every batch has at least one record. This
doesn't seem like a terribly important aspect of the api, but it's
worth noting.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-08T00:07:35+01:00</created-at>
      <creator-id type="integer">4023</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3346</number>
      <permalink>find_in_batches-is-slow-on-large-datasets</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>find_in_batches is slow on large datasets</title>
      <updated-at type="datetime">2009-10-08T00:07:42+01:00</updated-at>
      <user-id type="integer">4023</user-id>
      <version type="integer">1</version>
      <user-name>Chris</user-name>
      <creator-name>Chris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3346</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here's the changeset as a patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here's the changeset as a patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-08T00:10:24+01:00</created-at>
      <creator-id type="integer">4023</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3346</number>
      <permalink>find_in_batches-is-slow-on-large-datasets</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>find_in_batches is slow on large datasets</title>
      <updated-at type="datetime">2009-10-08T00:10:26+01:00</updated-at>
      <user-id type="integer">4023</user-id>
      <version type="integer">2</version>
      <user-name>Chris</user-name>
      <creator-name>Chris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3346</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:38:51+01:00</created-at>
      <creator-id type="integer">4023</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3346</number>
      <permalink>find_in_batches-is-slow-on-large-datasets</permalink>
      <priority type="integer">159230</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>find_in_batches is slow on large datasets</title>
      <updated-at type="datetime">2010-10-06T06:38:52+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">3</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Chris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3346</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>FWIW, I've confirmed the same slow behavior with Rails 2.3.10.</body>
      <body-html>&lt;div&gt;&lt;p&gt;FWIW, I've confirmed the same slow behavior with Rails
2.3.10.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-08T19:26:27+00:00</created-at>
      <creator-id type="integer">4023</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3346</number>
      <permalink>find_in_batches-is-slow-on-large-datasets</permalink>
      <priority type="integer">159230</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>find_in_batches is slow on large datasets</title>
      <updated-at type="datetime">2011-02-08T19:26:37+00:00</updated-at>
      <user-id type="integer">22990</user-id>
      <version type="integer">4</version>
      <user-name>Yong Bakos</user-name>
      <creator-name>Chris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3346</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>9bfba1043d5b8c17acb2448608b2f18328c4ca77</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-10-08T00:10:24+01:00</created-at>
      <filename>0001-A-faster-more-flexible-implementation-of-find_in_ba.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">289381</id>
      <size type="integer">4895</size>
      <uploader-id type="integer">4023</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/289381/0001-A-faster-more-flexible-implementation-of-find_in_ba.patch</url>
    </attachment>
  </attachments>
</ticket>
