<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-04T16:45:34+00:00</created-at>
  <creator-id type="integer">3793</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6374</number>
  <permalink>limit-is-ignored-when-joins-is-specified</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>arel</tag>
  <title>Limit is ignored when joins is specified</title>
  <updated-at type="datetime">2011-02-25T20:02:12+00:00</updated-at>
  <user-id type="integer">15316</user-id>
  <version type="integer">5</version>
  <user-name>Aaron Patterson</user-name>
  <creator-name>James</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6374</url>
  <priority-name>Low</priority-name>
  <original-body>Limit is being ignored in the following case.  When calling to_sql on the ARel object, it returns the correct SQL.  Then, calling that query with find_by_sql returns the correct count.

ruby-1.9.2-p136 :005 &gt; Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&gt; 20).where(&quot;lots.species&quot; =&gt; &quot;Horse&quot;).count
=&gt; 229

ruby-1.9.2-p136 :006 &gt; Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&gt; 20).where(&quot;lots.species&quot; =&gt; &quot;Horse&quot;).to_sql
=&gt; &quot;SELECT  `animals`.* FROM `animals` INNER JOIN `lots` ON `lots`.`id` = `animals`.`lot_id` WHERE `animals`.`location_id` = 20 AND `lots`.`species` = 'Horse' LIMIT 1&quot;

ruby-1.9.2-p136 :007 &gt; Animal.find_by_sql(&quot;SELECT  `animals`.* FROM `animals` INNER JOIN `lots` ON `lots`.`id` = `animals`.`lot_id` WHERE `animals`.`location_id` = 20 AND `lots`.`species` = 'Horse' LIMIT 1&quot;).count
=&gt; 1</original-body>
  <latest-body>Limit is being ignored in the following case.  When calling to_sql on the ARel object, it returns the correct SQL.  Then, calling that query with find_by_sql returns the correct count.

ruby-1.9.2-p136 :005 &gt; Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&gt; 20).where(&quot;lots.species&quot; =&gt; &quot;Horse&quot;).count
=&gt; 229

ruby-1.9.2-p136 :006 &gt; Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&gt; 20).where(&quot;lots.species&quot; =&gt; &quot;Horse&quot;).to_sql
=&gt; &quot;SELECT  `animals`.* FROM `animals` INNER JOIN `lots` ON `lots`.`id` = `animals`.`lot_id` WHERE `animals`.`location_id` = 20 AND `lots`.`species` = 'Horse' LIMIT 1&quot;

ruby-1.9.2-p136 :007 &gt; Animal.find_by_sql(&quot;SELECT  `animals`.* FROM `animals` INNER JOIN `lots` ON `lots`.`id` = `animals`.`lot_id` WHERE `animals`.`location_id` = 20 AND `lots`.`species` = 'Horse' LIMIT 1&quot;).count
=&gt; 1</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Limit is being ignored in the following case. When calling
to_sql on the ARel object, it returns the correct SQL. Then,
calling that query with find_by_sql returns the correct count.&lt;/p&gt;
&lt;p&gt;ruby-1.9.2-p136 :005 &amp;gt;
Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&amp;gt;
20).where(&quot;lots.species&quot; =&amp;gt; &quot;Horse&quot;).count&lt;br&gt;
=&amp;gt; 229&lt;/p&gt;
&lt;p&gt;ruby-1.9.2-p136 :006 &amp;gt;
Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&amp;gt;
20).where(&quot;lots.species&quot; =&amp;gt; &quot;Horse&quot;).to_sql&lt;br&gt;
=&amp;gt; &quot;SELECT &lt;code&gt;animals&lt;/code&gt;.* FROM &lt;code&gt;animals&lt;/code&gt;
INNER JOIN &lt;code&gt;lots&lt;/code&gt; ON &lt;code&gt;lots&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;animals&lt;/code&gt;.&lt;code&gt;lot_id&lt;/code&gt; WHERE
&lt;code&gt;animals&lt;/code&gt;.&lt;code&gt;location_id&lt;/code&gt; = 20 AND
&lt;code&gt;lots&lt;/code&gt;.&lt;code&gt;species&lt;/code&gt; = 'Horse' LIMIT 1&quot;&lt;/p&gt;
&lt;p&gt;ruby-1.9.2-p136 :007 &amp;gt; Animal.find_by_sql(&quot;SELECT
&lt;code&gt;animals&lt;/code&gt;.* FROM &lt;code&gt;animals&lt;/code&gt; INNER JOIN
&lt;code&gt;lots&lt;/code&gt; ON &lt;code&gt;lots&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;animals&lt;/code&gt;.&lt;code&gt;lot_id&lt;/code&gt; WHERE
&lt;code&gt;animals&lt;/code&gt;.&lt;code&gt;location_id&lt;/code&gt; = 20 AND
&lt;code&gt;lots&lt;/code&gt;.&lt;code&gt;species&lt;/code&gt; = 'Horse' LIMIT
1&quot;).count&lt;br&gt;
=&amp;gt; 1&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Limit is being ignored in the following case.  When calling to_sql on the ARel object, it returns the correct SQL.  Then, calling that query with find_by_sql returns the correct count.

ruby-1.9.2-p136 :005 &gt; Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&gt; 20).where(&quot;lots.species&quot; =&gt; &quot;Horse&quot;).count
=&gt; 229

ruby-1.9.2-p136 :006 &gt; Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&gt; 20).where(&quot;lots.species&quot; =&gt; &quot;Horse&quot;).to_sql
=&gt; &quot;SELECT  `animals`.* FROM `animals` INNER JOIN `lots` ON `lots`.`id` = `animals`.`lot_id` WHERE `animals`.`location_id` = 20 AND `lots`.`species` = 'Horse' LIMIT 1&quot;

ruby-1.9.2-p136 :007 &gt; Animal.find_by_sql(&quot;SELECT  `animals`.* FROM `animals` INNER JOIN `lots` ON `lots`.`id` = `animals`.`lot_id` WHERE `animals`.`location_id` = 20 AND `lots`.`species` = 'Horse' LIMIT 1&quot;).count
=&gt; 1</body>
      <body-html>&lt;div&gt;&lt;p&gt;Limit is being ignored in the following case. When calling
to_sql on the ARel object, it returns the correct SQL. Then,
calling that query with find_by_sql returns the correct count.&lt;/p&gt;
&lt;p&gt;ruby-1.9.2-p136 :005 &amp;gt;
Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&amp;gt;
20).where(&quot;lots.species&quot; =&amp;gt; &quot;Horse&quot;).count&lt;br&gt;
=&amp;gt; 229&lt;/p&gt;
&lt;p&gt;ruby-1.9.2-p136 :006 &amp;gt;
Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&amp;gt;
20).where(&quot;lots.species&quot; =&amp;gt; &quot;Horse&quot;).to_sql&lt;br&gt;
=&amp;gt; &quot;SELECT &lt;code&gt;animals&lt;/code&gt;.* FROM &lt;code&gt;animals&lt;/code&gt;
INNER JOIN &lt;code&gt;lots&lt;/code&gt; ON &lt;code&gt;lots&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;animals&lt;/code&gt;.&lt;code&gt;lot_id&lt;/code&gt; WHERE
&lt;code&gt;animals&lt;/code&gt;.&lt;code&gt;location_id&lt;/code&gt; = 20 AND
&lt;code&gt;lots&lt;/code&gt;.&lt;code&gt;species&lt;/code&gt; = 'Horse' LIMIT 1&quot;&lt;/p&gt;
&lt;p&gt;ruby-1.9.2-p136 :007 &amp;gt; Animal.find_by_sql(&quot;SELECT
&lt;code&gt;animals&lt;/code&gt;.* FROM &lt;code&gt;animals&lt;/code&gt; INNER JOIN
&lt;code&gt;lots&lt;/code&gt; ON &lt;code&gt;lots&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;animals&lt;/code&gt;.&lt;code&gt;lot_id&lt;/code&gt; WHERE
&lt;code&gt;animals&lt;/code&gt;.&lt;code&gt;location_id&lt;/code&gt; = 20 AND
&lt;code&gt;lots&lt;/code&gt;.&lt;code&gt;species&lt;/code&gt; = 'Horse' LIMIT
1&quot;).count&lt;br&gt;
=&amp;gt; 1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-04T16:45:34+00:00</created-at>
      <creator-id type="integer">3793</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6374</number>
      <permalink>limit-is-ignored-when-joins-is-specified</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>arel</tag>
      <title>Limit is ignored when joins is specified</title>
      <updated-at type="datetime">2011-02-04T16:45:37+00:00</updated-at>
      <user-id type="integer">3793</user-id>
      <version type="integer">1</version>
      <user-name>James</user-name>
      <creator-name>James</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6374</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Turns out it has nothing to do with the joins.

Animal.limit(1).count
=&gt; 1297

Is that expected behavior?

Found this by trying to do (essentially) Animal.limit(1).update_all(...) -- not surprisingly based on the above, it's updating every record.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Turns out it has nothing to do with the joins.&lt;/p&gt;
&lt;p&gt;Animal.limit(1).count&lt;br&gt;
=&amp;gt; 1297&lt;/p&gt;
&lt;p&gt;Is that expected behavior?&lt;/p&gt;
&lt;p&gt;Found this by trying to do (essentially)
Animal.limit(1).update_all(...) -- not surprisingly based on the
above, it's updating every record.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-04T17:22:24+00:00</created-at>
      <creator-id type="integer">3793</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6374</number>
      <permalink>limit-is-ignored-when-joins-is-specified</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>arel</tag>
      <title>Limit is ignored when joins is specified</title>
      <updated-at type="datetime">2011-02-04T17:22:28+00:00</updated-at>
      <user-id type="integer">3793</user-id>
      <version type="integer">2</version>
      <user-name>James</user-name>
      <creator-name>James</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6374</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Model.limit(1).count generate correct sql (select count(*) from model limit 1), it's mysql's behavior:

@@@
mysql&gt; select count(*) from knowledges limit 1;
+----------+
| count(*) |
+----------+
|      842 |
+----------+
1 row in set (0.00 sec)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Model.limit(1).count generate correct sql (select count(*) from
model limit 1), it's mysql's behavior:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mysql&amp;gt; select count(*) from knowledges limit 1;
+----------+
| count(*) |
+----------+
|      842 |
+----------+
1 row in set (0.00 sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-05T13:04:03+00:00</created-at>
      <creator-id type="integer">3793</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6374</number>
      <permalink>limit-is-ignored-when-joins-is-specified</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>arel</tag>
      <title>Limit is ignored when joins is specified</title>
      <updated-at type="datetime">2011-02-05T13:04:09+00:00</updated-at>
      <user-id type="integer">24538</user-id>
      <version type="integer">3</version>
      <user-name>Jan Xie</user-name>
      <creator-name>James</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6374</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yeah -- that makes perfect sense -- forgot that count and size actually modify the query and return a single row.

So what about my specific case with update_all?  It builds the update_all query including the &quot;wheres&quot; and discards the limit:
Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&gt; 20).where(&quot;lots.species&quot; =&gt; &quot;Horse&quot;).update_all(:location_id =&gt; 20)

AREL (2.7ms)  UPDATE `animals` INNER JOIN `lots` ON `lots`.`id` = `animals`.`lot_id` SET `location_id` = 20 WHERE `animals`.`location_id` = 20 AND `lots`.`species` = 'Horse'</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah -- that makes perfect sense -- forgot that count and size
actually modify the query and return a single row.&lt;/p&gt;
&lt;p&gt;So what about my specific case with update_all? It builds the
update_all query including the &quot;wheres&quot; and discards the limit:&lt;br&gt;
Animal.limit(1).joins(:lot).where(&quot;animals.location_id&quot; =&amp;gt;
20).where(&quot;lots.species&quot; =&amp;gt; &quot;Horse&quot;).update_all(:location_id
=&amp;gt; 20)&lt;/p&gt;
&lt;p&gt;AREL (2.7ms) UPDATE &lt;code&gt;animals&lt;/code&gt; INNER JOIN
&lt;code&gt;lots&lt;/code&gt; ON &lt;code&gt;lots&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;animals&lt;/code&gt;.&lt;code&gt;lot_id&lt;/code&gt; SET
&lt;code&gt;location_id&lt;/code&gt; = 20 WHERE
&lt;code&gt;animals&lt;/code&gt;.&lt;code&gt;location_id&lt;/code&gt; = 20 AND
&lt;code&gt;lots&lt;/code&gt;.&lt;code&gt;species&lt;/code&gt; = 'Horse'&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-05T15:55:00+00:00</created-at>
      <creator-id type="integer">3793</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6374</number>
      <permalink>limit-is-ignored-when-joins-is-specified</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>arel</tag>
      <title>Limit is ignored when joins is specified</title>
      <updated-at type="datetime">2011-02-05T15:55:06+00:00</updated-at>
      <user-id type="integer">3793</user-id>
      <version type="integer">4</version>
      <user-name>James</user-name>
      <creator-name>James</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6374</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>James,

`order` must also be supplied if you want the limit to work on updates.</body>
      <body-html>&lt;div&gt;&lt;p&gt;James,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;order&lt;/code&gt; must also be supplied if you want the limit
to work on updates.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-25T20:02:03+00:00</created-at>
      <creator-id type="integer">3793</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6374</number>
      <permalink>limit-is-ignored-when-joins-is-specified</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>arel</tag>
      <title>Limit is ignored when joins is specified</title>
      <updated-at type="datetime">2011-02-25T20:02:12+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">5</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>James</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6374</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
