<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-05-20T01:41:32+01:00</created-at>
  <creator-id type="integer">20011</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">4653</number>
  <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
  <priority type="integer">1</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activemodel callbacks patch rails3 &quot;rails3 validations&quot; validations</tag>
  <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
  <updated-at type="datetime">2010-10-15T23:01:54+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">23</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Matt Powell</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>High</priority-name>
  <original-body>Take a look at [this gist](http://gist.github.com/407034).

Both specs should pass: the `before_validate` callback should *always* be run before the validators. Instead, what appears to be happening is that the order of the declaration matters: if I define the `before_validate` callback after the validation rule, it is run *after* the validation, which is bad news.

It doesn't seem to matter what type the validation is.

In summary: the first spec passes because the callback is hit first; the second fails, because the validation on `#something` is run *before* the callback. **If you declare any validators before you call `before_validate`, your poor callback is left out in the cold.**

I have tested this both with and without an ORM (Mongoid, though not ActiveRecord), within and without an application, and also by shifting the exceptions inside the actual validation methods, so that I could be sure it was the validation firing that was causing the error. In each case, the same error occurred. I started trying to look at stack traces and so on, but I wound up in the middle of generated code, and backed away slowly, trying not to blink.

I'd still love some independent verification, though.</original-body>
  <latest-body>Take a look at [this gist](http://gist.github.com/407034).

Both specs should pass: the `before_validate` callback should *always* be run before the validators. Instead, what appears to be happening is that the order of the declaration matters: if I define the `before_validate` callback after the validation rule, it is run *after* the validation, which is bad news.

It doesn't seem to matter what type the validation is.

In summary: the first spec passes because the callback is hit first; the second fails, because the validation on `#something` is run *before* the callback. **If you declare any validators before you call `before_validate`, your poor callback is left out in the cold.**

I have tested this both with and without an ORM (Mongoid, though not ActiveRecord), within and without an application, and also by shifting the exceptions inside the actual validation methods, so that I could be sure it was the validation firing that was causing the error. In each case, the same error occurred. I started trying to look at stack traces and so on, but I wound up in the middle of generated code, and backed away slowly, trying not to blink.

I'd still love some independent verification, though.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Take a look at &lt;a href=&quot;http://gist.github.com/407034&quot;&gt;this
gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both specs should pass: the &lt;code&gt;before_validate&lt;/code&gt;
callback should &lt;em&gt;always&lt;/em&gt; be run before the validators.
Instead, what appears to be happening is that the order of the
declaration matters: if I define the &lt;code&gt;before_validate&lt;/code&gt;
callback after the validation rule, it is run &lt;em&gt;after&lt;/em&gt; the
validation, which is bad news.&lt;/p&gt;
&lt;p&gt;It doesn't seem to matter what type the validation is.&lt;/p&gt;
&lt;p&gt;In summary: the first spec passes because the callback is hit
first; the second fails, because the validation on
&lt;code&gt;#something&lt;/code&gt; is run &lt;em&gt;before&lt;/em&gt; the callback.
&lt;strong&gt;If you declare any validators before you call
&lt;code&gt;before_validate&lt;/code&gt;, your poor callback is left out in the
cold.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have tested this both with and without an ORM (Mongoid, though
not ActiveRecord), within and without an application, and also by
shifting the exceptions inside the actual validation methods, so
that I could be sure it was the validation firing that was causing
the error. In each case, the same error occurred. I started trying
to look at stack traces and so on, but I wound up in the middle of
generated code, and backed away slowly, trying not to blink.&lt;/p&gt;
&lt;p&gt;I'd still love some independent verification, though.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Take a look at [this gist](http://gist.github.com/407034).

Both specs should pass: the `before_validate` callback should *always* be run before the validators. Instead, what appears to be happening is that the order of the declaration matters: if I define the `before_validate` callback after the validation rule, it is run *after* the validation, which is bad news.

It doesn't seem to matter what type the validation is.

In summary: the first spec passes because the callback is hit first; the second fails, because the validation on `#something` is run *before* the callback. **If you declare any validators before you call `before_validate`, your poor callback is left out in the cold.**

I have tested this both with and without an ORM (Mongoid, though not ActiveRecord), within and without an application, and also by shifting the exceptions inside the actual validation methods, so that I could be sure it was the validation firing that was causing the error. In each case, the same error occurred. I started trying to look at stack traces and so on, but I wound up in the middle of generated code, and backed away slowly, trying not to blink.

I'd still love some independent verification, though.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Take a look at &lt;a href=&quot;http://gist.github.com/407034&quot;&gt;this
gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both specs should pass: the &lt;code&gt;before_validate&lt;/code&gt;
callback should &lt;em&gt;always&lt;/em&gt; be run before the validators.
Instead, what appears to be happening is that the order of the
declaration matters: if I define the &lt;code&gt;before_validate&lt;/code&gt;
callback after the validation rule, it is run &lt;em&gt;after&lt;/em&gt; the
validation, which is bad news.&lt;/p&gt;
&lt;p&gt;It doesn't seem to matter what type the validation is.&lt;/p&gt;
&lt;p&gt;In summary: the first spec passes because the callback is hit
first; the second fails, because the validation on
&lt;code&gt;#something&lt;/code&gt; is run &lt;em&gt;before&lt;/em&gt; the callback.
&lt;strong&gt;If you declare any validators before you call
&lt;code&gt;before_validate&lt;/code&gt;, your poor callback is left out in the
cold.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have tested this both with and without an ORM (Mongoid, though
not ActiveRecord), within and without an application, and also by
shifting the exceptions inside the actual validation methods, so
that I could be sure it was the validation firing that was causing
the error. In each case, the same error occurred. I started trying
to look at stack traces and so on, but I wound up in the middle of
generated code, and backed away slowly, trying not to blink.&lt;/p&gt;
&lt;p&gt;I'd still love some independent verification, though.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-20T01:41:32+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-05-20T01:41:36+01:00</updated-at>
      <user-id type="integer">20011</user-id>
      <version type="integer">1</version>
      <user-name>Matt Powell</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-21T00:43:46+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-05-21T00:43:47+01:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">2</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think it's because is a before_validate.

The validate method is not a normal method. In ActiveRecord, there are no callback on validate. The callback is in valid? method and call before/after_validation.

For me it's not a really bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think it's because is a before_validate.&lt;/p&gt;
&lt;p&gt;The validate method is not a normal method. In ActiveRecord,
there are no callback on validate. The callback is in valid? method
and call before/after_validation.&lt;/p&gt;
&lt;p&gt;For me it's not a really bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-27T22:41:21+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-05-27T22:41:26+01:00</updated-at>
      <user-id type="integer">8262</user-id>
      <version type="integer">3</version>
      <user-name>Cyril Mougel</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Cyril

This isn't ActiveRecord, though. The whole idea of ActiveModel is that callbacks, validations, etc should be able to be used independently of ActiveRecord. If you look on lines 150-154 of `activemodel/validations.rb`, you'll see that `valid?` is indeed calling the validation callbacks, and it's only the name that's been changed to be more consistent with other callbacks, which use verbs (`on_create`) rather than nouns (`on_creation`). `before_validation` isn't in ActiveModel, and therefore no longer exists in Rails 3, having been replaced by `before_validate`.

Regardless of internal implementation, this **still seems like a bug in ActiveModel**, because the only thing I'm changing between examples is the order of the declaration, which historically (in ActiveRecord) hasn't mattered. Nor am I calling `validate` directly: I'm calling `valid?` as you suggest. Once again, I've only declared the callback with `before_validate` because that is what it is called in ActiveModel.

M</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Cyril&lt;/p&gt;
&lt;p&gt;This isn't ActiveRecord, though. The whole idea of ActiveModel
is that callbacks, validations, etc should be able to be used
independently of ActiveRecord. If you look on lines 150-154 of
&lt;code&gt;activemodel/validations.rb&lt;/code&gt;, you'll see that
&lt;code&gt;valid?&lt;/code&gt; is indeed calling the validation callbacks, and
it's only the name that's been changed to be more consistent with
other callbacks, which use verbs (&lt;code&gt;on_create&lt;/code&gt;) rather
than nouns (&lt;code&gt;on_creation&lt;/code&gt;).
&lt;code&gt;before_validation&lt;/code&gt; isn't in ActiveModel, and therefore
no longer exists in Rails 3, having been replaced by
&lt;code&gt;before_validate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Regardless of internal implementation, this &lt;strong&gt;still seems
like a bug in ActiveModel&lt;/strong&gt;, because the only thing I'm
changing between examples is the order of the declaration, which
historically (in ActiveRecord) hasn't mattered. Nor am I calling
&lt;code&gt;validate&lt;/code&gt; directly: I'm calling &lt;code&gt;valid?&lt;/code&gt; as
you suggest. Once again, I've only declared the callback with
&lt;code&gt;before_validate&lt;/code&gt; because that is what it is called in
ActiveModel.&lt;/p&gt;
&lt;p&gt;M&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-27T23:10:02+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-05-27T23:10:09+01:00</updated-at>
      <user-id type="integer">20011</user-id>
      <version type="integer">4</version>
      <user-name>Matt Powell</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I check again the ActiveModel code.

We can see that [ActiveModel::Validation](http://github.com/rails/rails/blob/master/activemodel/lib/active_model/validations.rb) use the validate callback to chain his validation.

So like callback are call by chaining in order of define, if you define a validate before your before_validate, the validate methode add a [callback :validate](http://github.com/rails/rails/blob/master/activemodel/lib/active_model/validations.rb#L128). But if you define a `before_validate` is add to chain. So if it's before all validation is define in first, instead if call in order.

So it's really not a bug. the validate callback is define by ActiveModel::Validation, so it's reserved callback. we can't use it if you use ActiveModel::Validation.

The solution is change ActiveModel::Validations and avoid using ActiveSupport::Callback. Or avoid it.

I prefer avoiding it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I check again the ActiveModel code.&lt;/p&gt;
&lt;p&gt;We can see that &lt;a href=
&quot;http://github.com/rails/rails/blob/master/activemodel/lib/active_model/validations.rb&quot;&gt;
ActiveModel::Validation&lt;/a&gt; use the validate callback to chain his
validation.&lt;/p&gt;
&lt;p&gt;So like callback are call by chaining in order of define, if you
define a validate before your before_validate, the validate methode
add a &lt;a href=
&quot;http://github.com/rails/rails/blob/master/activemodel/lib/active_model/validations.rb#L128&quot;&gt;
callback :validate&lt;/a&gt;. But if you define a
&lt;code&gt;before_validate&lt;/code&gt; is add to chain. So if it's before all
validation is define in first, instead if call in order.&lt;/p&gt;
&lt;p&gt;So it's really not a bug. the validate callback is define by
ActiveModel::Validation, so it's reserved callback. we can't use it
if you use ActiveModel::Validation.&lt;/p&gt;
&lt;p&gt;The solution is change ActiveModel::Validations and avoid using
ActiveSupport::Callback. Or avoid it.&lt;/p&gt;
&lt;p&gt;I prefer avoiding it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-28T11:35:01+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-05-28T11:35:05+01:00</updated-at>
      <user-id type="integer">8262</user-id>
      <version type="integer">5</version>
      <user-name>Cyril Mougel</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Matt I created a patch that applies to master to demonstrate the issue. It's just a rewrite of your spec. I'm pretty confused as to the right way to use the new validation api. Here's 3 ways of defining a validation, all of which behave differently:

    class Person
      include ActiveModel::Validations
      extend ActiveModel::Callbacks
      define_model_callbacks :validate

      attr_accessor :name

      def default_name
        @name = &quot;John Smith&quot;
      end
    end

    # Doesn't run callback before validation
    class A &lt; Person
      validate { validates_presence_of :name }
      before_validate :default_name
    end

    # Works as expected
    class B &lt; Person
      def validate
        validates_presence_of :name
      end
      before_validate :default_name
    end

    # NoMethodError: undefined method `before_validate' for #&lt;ActiveModel::Validations::PresenceValidator&gt;
    class C &lt; Person
      validates_presence_of :name
      before_validate :default_name
    end</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Matt I created a patch that applies to master to demonstrate
the issue. It's just a rewrite of your spec. I'm pretty confused as
to the right way to use the new validation api. Here's 3 ways of
defining a validation, all of which behave differently:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person
  include ActiveModel::Validations
  extend ActiveModel::Callbacks
  define_model_callbacks :validate

  attr_accessor :name

  def default_name
    @name = &quot;John Smith&quot;
  end
end

# Doesn't run callback before validation
class A &amp;lt; Person
  validate { validates_presence_of :name }
  before_validate :default_name
end

# Works as expected
class B &amp;lt; Person
  def validate
    validates_presence_of :name
  end
  before_validate :default_name
end

# NoMethodError: undefined method `before_validate' for #&amp;lt;ActiveModel::Validations::PresenceValidator&amp;gt;
class C &amp;lt; Person
  validates_presence_of :name
  before_validate :default_name
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-13T23:03:32+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-13T23:03:45+01:00</updated-at>
      <user-id type="integer">21894</user-id>
      <version type="integer">6</version>
      <user-name>Ben Marini</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Just to recap and to make it easier for others to understand please take a look at following code.

@@@ ruby
class Developer
  include ActiveModel::Validations
  extend ActiveModel::Callbacks
  define_model_callbacks :validate

  before_validate :set_default_name

  validates_presence_of :name
  attr_accessor :name

  def set_default_name
    @name = 'neeraj'
  end
end
@@@

If you do 
  
@@@ ruby
Developer.new.valid?
# exception 
#NoMethodError: undefined method `before_validate' for #&lt;ActiveModel::Validations::PresenceValidator:0x104359c60&gt;
@@@

Please note that in the above code if you remove the &lt;tt&gt;validates_presence_of :name&lt;/tt&gt; code then &lt;tt&gt;Developer.new.valid?&lt;/tt&gt; will not blow up.

The fix for above case is to understand how &lt;tt&gt;include ActiveModel::Validations&lt;/tt&gt; works. When a class includes that module then a call similar to
&lt;tt&gt;define_model_callbacks :validate&lt;/tt&gt; is already being made. All you need to do is to wire up the callbacks.

Here is the modified code that works.

@@@ ruby
class Developer
  include ActiveModel::Validations

  validate :before, :set_default_name

  validates_presence_of :name
  attr_accessor :name

  def set_default_name
    @name = 'neeraj'
  end
end
@@@

@Ben this takes care of the example that your provided with class *C*. I have not looked at example with *A* and *B* in great detail but do let me know if solution I provided does not work.

I am going to update the rails guide to reflect this style of usage ( given that it is right ). I will try to get sign off from a rails core team on this one. :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just to recap and to make it easier for others to understand
please take a look at following code.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Developer
  include ActiveModel::Validations
  extend ActiveModel::Callbacks
  define_model_callbacks :validate

  before_validate :set_default_name

  validates_presence_of :name
  attr_accessor :name

  def set_default_name
    @name = 'neeraj'
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you do&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;Developer.new.valid?
# exception 
#NoMethodError: undefined method `before_validate' for #&amp;lt;ActiveModel::Validations::PresenceValidator:0x104359c60&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Please note that in the above code if you remove the
&lt;tt&gt;validates_presence_of :name&lt;/tt&gt; code then
&lt;tt&gt;Developer.new.valid?&lt;/tt&gt; will not blow up.&lt;/p&gt;
&lt;p&gt;The fix for above case is to understand how &lt;tt&gt;include
ActiveModel::Validations&lt;/tt&gt; works. When a class includes that
module then a call similar to&lt;br&gt;
&lt;tt&gt;define_model_callbacks :validate&lt;/tt&gt; is already being made.
All you need to do is to wire up the callbacks.&lt;/p&gt;
&lt;p&gt;Here is the modified code that works.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Developer
  include ActiveModel::Validations

  validate :before, :set_default_name

  validates_presence_of :name
  attr_accessor :name

  def set_default_name
    @name = 'neeraj'
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;@Ben this takes care of the example that your provided with
class &lt;em&gt;C&lt;/em&gt;. I have not looked at example with &lt;em&gt;A&lt;/em&gt; and
&lt;em&gt;B&lt;/em&gt; in great detail but do let me know if solution I
provided does not work.&lt;/p&gt;
&lt;p&gt;I am going to update the rails guide to reflect this style of
usage ( given that it is right ). I will try to get sign off from a
rails core team on this one. :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-14T03:23:57+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-14T03:24:05+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">7</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@neeraj thanks for the explanation. I updated the test case i wrote to use your syntax. Unfortunately it doesn't seem to solve the original problem. Here's the updated version of the test case:

@@@ ruby
    require &quot;cases/helper&quot;

    class ValidationCallbackTest &lt; ActiveModel::TestCase

      class Person
        include ActiveModel::Validations

        attr_accessor :name

        def default_name
          @name = &quot;John Smith&quot;
        end
      end

      class PersonWithCallbackFirst &lt; Person
        validate :before, :default_name
        validates_presence_of :name
      end

      class PersonWithCallbackLast &lt; Person
        validates_presence_of :name
        validate :before, :default_name
      end

      test &quot;should run callback before validation when callback defined before&quot; do
        assert PersonWithCallbackFirst.new.valid?
      end

      test &quot;should run callback before validation when callback defined after&quot; do
        assert PersonWithCallbackLast.new.valid?
      end
    end
@@@ ruby</body>
      <body-html>&lt;div&gt;&lt;p&gt;@neeraj thanks for the explanation. I updated the test case i
wrote to use your syntax. Unfortunately it doesn't seem to solve
the original problem. Here's the updated version of the test
case:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    require &quot;cases/helper&quot;

    class ValidationCallbackTest &amp;lt; ActiveModel::TestCase

      class Person
        include ActiveModel::Validations

        attr_accessor :name

        def default_name
          @name = &quot;John Smith&quot;
        end
      end

      class PersonWithCallbackFirst &amp;lt; Person
        validate :before, :default_name
        validates_presence_of :name
      end

      class PersonWithCallbackLast &amp;lt; Person
        validates_presence_of :name
        validate :before, :default_name
      end

      test &quot;should run callback before validation when callback defined before&quot; do
        assert PersonWithCallbackFirst.new.valid?
      end

      test &quot;should run callback before validation when callback defined after&quot; do
        assert PersonWithCallbackLast.new.valid?
      end
    end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-14T04:06:45+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-14T04:06:53+01:00</updated-at>
      <user-id type="integer">21894</user-id>
      <version type="integer">8</version>
      <user-name>Ben Marini</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@Ben. Thanks for recreating the test cases. 

And you are right that order of declaration matters. Test related to PersonWithCallbackFirst is passing. However test related to PersonWithCallbackLast is failing.

I will try to dig into the matter tomorrow.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Ben. Thanks for recreating the test cases.&lt;/p&gt;
&lt;p&gt;And you are right that order of declaration matters. Test
related to PersonWithCallbackFirst is passing. However test related
to PersonWithCallbackLast is failing.&lt;/p&gt;
&lt;p&gt;I will try to dig into the matter tomorrow.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-14T06:59:38+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-14T06:59:46+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">9</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@Ben : Can you try this patch. It works for me. Have not written any test etc. Just want to get a quick feel if it works for others. This is still work in progress.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Ben : Can you try this patch. It works for me. Have not written
any test etc. Just want to get a quick feel if it works for others.
This is still work in progress.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-14T23:58:36+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-14T23:58:47+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">10</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Active Model executes all the callbacks in the order they are defined. And that is great. This ensures that in Active Record I can define three before_save callbacks and the second callback rely on the value set by first callback.

PersonWithCallbackLast class in Ben's example fails and ,I think, that is okay.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Active Model executes all the callbacks in the order they are
defined. And that is great. This ensures that in Active Record I
can define three before_save callbacks and the second callback rely
on the value set by first callback.&lt;/p&gt;
&lt;p&gt;PersonWithCallbackLast class in Ben's example fails and ,I
think, that is okay.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-15T01:37:47+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-15T01:37:55+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">11</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Neeraj: I disagree: I think it's *terrible*.

A callback defined to be run before validation should be run before validation, not after if that happens to be the order in which it was defined. Otherwise, what's the point of callbacks?

It's all very well saying &quot;you just have to define the callbacks before the validations&quot;, but what if that's impossible? What if a parent class defines a validation and a child class defines a callback that needs to be run before it? I know it happens, because that's how I stumbled across this behaviour in the first place.

I agree that all the callbacks of the same *type* ought to be run in the order they were defined, but I can't think of any circumstance in which it would be sensible behaviour for a `before_validate` callback (however it's defined) to be called *after* validation. It just makes no sense. What if you defined an `after_save` callback before a `before_save` callback? Would you expect them to be run in that order?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Neeraj: I disagree: I think it's &lt;em&gt;terrible&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A callback defined to be run before validation should be run
before validation, not after if that happens to be the order in
which it was defined. Otherwise, what's the point of callbacks?&lt;/p&gt;
&lt;p&gt;It's all very well saying &quot;you just have to define the callbacks
before the validations&quot;, but what if that's impossible? What if a
parent class defines a validation and a child class defines a
callback that needs to be run before it? I know it happens, because
that's how I stumbled across this behaviour in the first place.&lt;/p&gt;
&lt;p&gt;I agree that all the callbacks of the same &lt;em&gt;type&lt;/em&gt; ought
to be run in the order they were defined, but I can't think of any
circumstance in which it would be sensible behaviour for a
&lt;code&gt;before_validate&lt;/code&gt; callback (however it's defined) to be
called &lt;em&gt;after&lt;/em&gt; validation. It just makes no sense. What if
you defined an &lt;code&gt;after_save&lt;/code&gt; callback before a
&lt;code&gt;before_save&lt;/code&gt; callback? Would you expect them to be run
in that order?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-15T01:48:55+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-15T01:49:02+01:00</updated-at>
      <user-id type="integer">20011</user-id>
      <version type="integer">12</version>
      <user-name>Matt Powell</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I would expect all the after_save callbacks to run in the same order.

I did some more testing with my patch and it seems to be working. However right now I add every single before callback as the topmost callback which means all the last before callback would be the first one to run.

In order to fix it, I need to ensure that order of before callbacks are maintained and at the same time the later declared callbacks are inserted just before the validation callbacks. And that is possible.

However at this point of time I would like to get feedback from a core team member to ensure my sanity.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I would expect all the after_save callbacks to run in the same
order.&lt;/p&gt;
&lt;p&gt;I did some more testing with my patch and it seems to be
working. However right now I add every single before callback as
the topmost callback which means all the last before callback would
be the first one to run.&lt;/p&gt;
&lt;p&gt;In order to fix it, I need to ensure that order of before
callbacks are maintained and at the same time the later declared
callbacks are inserted just before the validation callbacks. And
that is possible.&lt;/p&gt;
&lt;p&gt;However at this point of time I would like to get feedback from
a core team member to ensure my sanity.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-15T03:10:53+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-15T03:10:59+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">13</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Assigning it to Pratik to get his take on this issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Assigning it to Pratik to get his take on this issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-15T03:17:40+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-15T03:17:47+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">14</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>It's indeed a bug. Does anyone mind adding a small test case for ActiveModel test suite? I will fix it ASAP.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It's indeed a bug. Does anyone mind adding a small test case for
ActiveModel test suite? I will fix it ASAP.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-15T14:14:42+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
:assigned_user: 1366
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-15T14:14:59+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">15</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sorry, I'm wrong. This is not a bug in Rails. ActiveModel already reserves the :validate callbacks for validations, so you should not use it. Take as example ActiveRecord, it uses before_validation to ensure it does not conflict with validate.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry, I'm wrong. This is not a bug in Rails. ActiveModel
already reserves the :validate callbacks for validations, so you
should not use it. Take as example ActiveRecord, it uses
before_validation to ensure it does not conflict with validate.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-15T14:24:53+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-15T14:25:05+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">16</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Take a look at http://github.com/neerajdotname/r_4653/blob/1afe74156456ceb54efd186324f4085b63f04de9/vendor/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activemodel/lib/active_model/validations.rb#L59-L80 . 


I moved before_validation from ActiveRecord to ActiveModel and now ActiveModel has before_validation http://github.com/neerajdotname/r_4653/blob/master/app/models/user.rb#L14 .


Also now it does not matter whether before_validation is define before or after validates_presence_of. 

With this change only three tests are failing in ActiveRecord which I can take a look at. No test is failing in ActiveModel.

I would say that before_validation and after_validation callbacks should be moved from ActiveRecord to ActiveModel.

I will dig more into it later. Just wanted to chime in what I found so far.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Take a look at &lt;a href=
&quot;http://github.com/neerajdotname/r_4653/blob/1afe74156456ceb54efd186324f4085b63f04de9/vendor/bundler/gems/rails-16a5e918a06649ffac24fd5873b875daf66212ad-master/activemodel/lib/active_model/validations.rb#L59-L80&quot;&gt;
http://github.com/neerajdotname/r_4653/blob/1afe74156456ceb54efd186...&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;I moved before_validation from ActiveRecord to ActiveModel and
now ActiveModel has before_validation &lt;a href=
&quot;http://github.com/neerajdotname/r_4653/blob/master/app/models/user.rb#L14&quot;&gt;
http://github.com/neerajdotname/r_4653/blob/master/app/models/user....&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Also now it does not matter whether before_validation is define
before or after validates_presence_of.&lt;/p&gt;
&lt;p&gt;With this change only three tests are failing in ActiveRecord
which I can take a look at. No test is failing in ActiveModel.&lt;/p&gt;
&lt;p&gt;I would say that before_validation and after_validation
callbacks should be moved from ActiveRecord to ActiveModel.&lt;/p&gt;
&lt;p&gt;I will dig more into it later. Just wanted to chime in what I
found so far.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-15T15:22:12+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-15T15:22:34+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">17</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Valim, so this would be the proper way to do it? (These test pass on master):

@@@ ruby
    require &quot;cases/helper&quot;

    class ValidationCallbackTest &lt; ActiveModel::TestCase

      class Person
        include ActiveModel::Validations
        extend ActiveModel::Callbacks
        define_model_callbacks :validation

        attr_accessor :name

        def default_name
          @name = &quot;John Smith&quot;
        end

        def valid?
          _run_validation_callbacks { super }
        end
      end

      class PersonWithCallbackFirst &lt; Person
        before_validation :default_name
        validates_presence_of :name
      end

      class PersonWithCallbackLast &lt; Person
        validates_presence_of :name
        before_validation :default_name
      end

      test &quot;should run callback before validation when callback defined before&quot; do
        assert PersonWithCallbackFirst.new.valid?
      end

      test &quot;should run callback before validation when callback defined after&quot; do
        assert PersonWithCallbackLast.new.valid?
      end
    end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Valim, so this would be the proper way to do it? (These test
pass on master):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    require &quot;cases/helper&quot;

    class ValidationCallbackTest &amp;lt; ActiveModel::TestCase

      class Person
        include ActiveModel::Validations
        extend ActiveModel::Callbacks
        define_model_callbacks :validation

        attr_accessor :name

        def default_name
          @name = &quot;John Smith&quot;
        end

        def valid?
          _run_validation_callbacks { super }
        end
      end

      class PersonWithCallbackFirst &amp;lt; Person
        before_validation :default_name
        validates_presence_of :name
      end

      class PersonWithCallbackLast &amp;lt; Person
        validates_presence_of :name
        before_validation :default_name
      end

      test &quot;should run callback before validation when callback defined before&quot; do
        assert PersonWithCallbackFirst.new.valid?
      end

      test &quot;should run callback before validation when callback defined after&quot; do
        assert PersonWithCallbackLast.new.valid?
      end
    end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-15T16:30:41+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-15T16:30:54+01:00</updated-at>
      <user-id type="integer">21894</user-id>
      <version type="integer">18</version>
      <user-name>Ben Marini</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Yes, that would be one way to do it! Take a look at ActiveRecord::Callbacks for more examples!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, that would be one way to do it! Take a look at
ActiveRecord::Callbacks for more examples!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-15T16:31:58+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activemodel callbacks rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-15T16:32:10+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">19</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Attached is patch with test which moves the before_validation and after_validation logic from ActiveRecord to ActiveModel. 

Because of this change validating a plain class is as simple as this one.

@@@ ruby
class Dog
  include ActiveModel::Validations

  attr_accessor :name
  validates_presence_of :name

  before_validation :set_default_name

  private

  def set_default_name
    @name = 'super_cool_dog'
  end

end

Dog.new.valid?
@@@

Without the patch one needs to do a lot of heavy lifting to get validation + before_validation callback working. http://gist.github.com/440882

Thanks to Jos&#233; for providing most of code and all of guidance :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attached is patch with test which moves the before_validation
and after_validation logic from ActiveRecord to ActiveModel.&lt;/p&gt;
&lt;p&gt;Because of this change validating a plain class is as simple as
this one.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Dog
  include ActiveModel::Validations

  attr_accessor :name
  validates_presence_of :name

  before_validation :set_default_name

  private

  def set_default_name
    @name = 'super_cool_dog'
  end

end

Dog.new.valid?&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Without the patch one needs to do a lot of heavy lifting to get
validation + before_validation callback working. &lt;a href=
&quot;http://gist.github.com/440882&quot;&gt;http://gist.github.com/440882&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to Jos&amp;eacute; for providing most of code and all of
guidance :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-16T16:58:03+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activemodel callbacks rails3 &quot;rails3 validations&quot; validations
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activemodel callbacks patch rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-16T16:58:14+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">20</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-18T13:37:51+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- 
:state: invalid
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activemodel callbacks patch rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-18T13:38:01+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">21</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [51739d3228d12907d60fb1b0a2b1ef96c55f66a3]) moving before_validation and after_validation functionality from ActiveRecord to ActiveModel

[#4653 state:resolved]

Signed-off-by: Jos&#233; Valim &lt;jose.valim@gmail.com&gt;
http://github.com/rails/rails/commit/51739d3228d12907d60fb1b0a2b1ef96c55f66a3</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/51739d3228d12907d60fb1b0a2b1ef96c55f66a3&quot;
title=
&quot;Changeset [51739d3228d12907d60fb1b0a2b1ef96c55f66a3]&quot;&gt;[51739d3228d12907d60fb1b0a2b1ef96c55f66a3]&lt;/a&gt;)
moving before_validation and after_validation functionality from
ActiveRecord to ActiveModel&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/4653&quot; title=
&quot;Ticket #4653&quot;&gt;#4653&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jos&amp;eacute; Valim &lt;a href=
&quot;mailto:jose.valim@gmail.com&quot;&gt;jose.valim@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/51739d3228d12907d60fb1b0a2b1ef96c55f66a3&quot;&gt;
http://github.com/rails/rails/commit/51739d3228d12907d60fb1b0a2b1ef...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-19T23:19:02+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activemodel callbacks patch rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-06-19T23:19:11+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">22</version>
      <user-name>Repository</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:54+01:00</created-at>
      <creator-id type="integer">20011</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 74033
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4653</number>
      <permalink>before_validation-callbacks-being-run-after-validation-actvemodel-300beta3</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activemodel callbacks patch rails3 &quot;rails3 validations&quot; validations</tag>
      <title>before_validation callbacks being run AFTER validation [ActveModel 3.0.0.beta3]</title>
      <updated-at type="datetime">2010-10-15T23:01:54+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">23</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Matt Powell</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4653</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>High</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f19dd2e616b36d1c5edd01e7ae9eb374b2fed41e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-06-13T23:03:32+01:00</created-at>
      <filename>validation-with-callback-test.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">557405</id>
      <size type="integer">1529</size>
      <uploader-id type="integer">21894</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/557405/validation-with-callback-test.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>65bef68629bfa723cd9dccd9426e5245e0e6c696</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-06-14T23:58:37+01:00</created-at>
      <filename>4653_work_in_progress.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">558988</id>
      <size type="integer">1076</size>
      <uploader-id type="integer">40263</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/558988/4653_work_in_progress.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>3c8ab0f741e6b14c8d21a0f4cb63f8ad1383f0fc</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-06-16T16:58:03+01:00</created-at>
      <filename>4653_fix_against_master.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">561856</id>
      <size type="integer">10520</size>
      <uploader-id type="integer">40263</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/561856/4653_fix_against_master.diff</url>
    </attachment>
  </attachments>
</ticket>
