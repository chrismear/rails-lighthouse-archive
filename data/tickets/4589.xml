<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-05-13T06:49:01+01:00</created-at>
  <creator-id type="integer">24170</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4589</number>
  <permalink>issues-with-scopesassociation-proxies-lazyenum-behavior</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>&quot;activerecord rails3&quot; named_scope &quot;rails 3.0.0.beta3&quot;</tag>
  <title>Issues with scopes/association proxies lazy/enum behavior ...</title>
  <updated-at type="datetime">2010-05-14T23:24:09+01:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>VirtualFunction</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4589</url>
  <priority-name>Low</priority-name>
  <original-body>This seems to have crapped up in trunk in recent days...

lets say I have a setup like this:

@@@
class User &lt; ActiveRecord::Base
  has_many :channels
end

class Channel &lt; ActiveRecord::Base
  scope :audio, where(:classification =&gt; 'audio')
end

Assuming each user has some related audio channels, if I do something like:

User.first.channels.audio.select &amp;:nil?

I would expect an empty array. However it appears the 'select &amp;:nil?' bit is not working, as it returns the same results as User.first.channels.audio (as I say above, assuming all users have channels)

If I take out the audio scope and do something like:

User.first.channel_user_permissions.select &amp;:nil? that seems to work.</original-body>
  <latest-body>This seems to have crapped up in trunk in recent days...

lets say I have a setup like this:

@@@
class User &lt; ActiveRecord::Base
  has_many :channels
end

class Channel &lt; ActiveRecord::Base
  scope :audio, where(:classification =&gt; 'audio')
end

Assuming each user has some related audio channels, if I do something like:

User.first.channels.audio.select &amp;:nil?

I would expect an empty array. However it appears the 'select &amp;:nil?' bit is not working, as it returns the same results as User.first.channels.audio (as I say above, assuming all users have channels)

If I take out the audio scope and do something like:

User.first.channel_user_permissions.select &amp;:nil? that seems to work.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This seems to have crapped up in trunk in recent days...&lt;/p&gt;
&lt;p&gt;lets say I have a setup like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class User &amp;lt; ActiveRecord::Base
  has_many :channels
end

class Channel &amp;lt; ActiveRecord::Base
  scope :audio, where(:classification =&amp;gt; 'audio')
end

Assuming each user has some related audio channels, if I do something like:

User.first.channels.audio.select &amp;amp;:nil?

I would expect an empty array. However it appears the 'select &amp;amp;:nil?' bit is not working, as it returns the same results as User.first.channels.audio (as I say above, assuming all users have channels)

If I take out the audio scope and do something like:

User.first.channel_user_permissions.select &amp;amp;:nil? that seems to work.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This seems to have crapped up in trunk in recent days...

lets say I have a setup like this:

@@@
class User &lt; ActiveRecord::Base
  has_many :channels
end

class Channel &lt; ActiveRecord::Base
  scope :audio, where(:classification =&gt; 'audio')
end

Assuming each user has some related audio channels, if I do something like:

User.first.channels.audio.select &amp;:nil?

I would expect an empty array. However it appears the 'select &amp;:nil?' bit is not working, as it returns the same results as User.first.channels.audio (as I say above, assuming all users have channels)

If I take out the audio scope and do something like:

User.first.channel_user_permissions.select &amp;:nil? that seems to work.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This seems to have crapped up in trunk in recent days...&lt;/p&gt;
&lt;p&gt;lets say I have a setup like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class User &amp;lt; ActiveRecord::Base
  has_many :channels
end

class Channel &amp;lt; ActiveRecord::Base
  scope :audio, where(:classification =&amp;gt; 'audio')
end

Assuming each user has some related audio channels, if I do something like:

User.first.channels.audio.select &amp;amp;:nil?

I would expect an empty array. However it appears the 'select &amp;amp;:nil?' bit is not working, as it returns the same results as User.first.channels.audio (as I say above, assuming all users have channels)

If I take out the audio scope and do something like:

User.first.channel_user_permissions.select &amp;amp;:nil? that seems to work.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-13T06:49:01+01:00</created-at>
      <creator-id type="integer">24170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4589</number>
      <permalink>issues-with-scopesassociation-proxies-lazyenum-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; named_scope &quot;rails 3.0.0.beta3&quot;</tag>
      <title>Issues with scopes/association proxies lazy/enum behavior ...</title>
      <updated-at type="datetime">2010-05-13T06:49:05+01:00</updated-at>
      <user-id type="integer">24170</user-id>
      <version type="integer">1</version>
      <user-name>VirtualFunction</user-name>
      <creator-name>VirtualFunction</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4589</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>OK, looks like this is specifically a scope issue, association proxies without scopes seem OK. For instance this fails:

Channel.audio.select &amp;:nil?</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, looks like this is specifically a scope issue, association
proxies without scopes seem OK. For instance this fails:&lt;/p&gt;
&lt;p&gt;Channel.audio.select &amp;amp;:nil?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-13T06:50:52+01:00</created-at>
      <creator-id type="integer">24170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4589</number>
      <permalink>issues-with-scopesassociation-proxies-lazyenum-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; named_scope &quot;rails 3.0.0.beta3&quot;</tag>
      <title>Issues with scopes/association proxies lazy/enum behavior ...</title>
      <updated-at type="datetime">2010-05-13T06:50:55+01:00</updated-at>
      <user-id type="integer">24170</user-id>
      <version type="integer">2</version>
      <user-name>VirtualFunction</user-name>
      <creator-name>VirtualFunction</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4589</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>For your info, I'm using the trunk version of Rails, it's a streaming fresh copy, about few hours old.</body>
      <body-html>&lt;div&gt;&lt;p&gt;For your info, I'm using the trunk version of Rails, it's a
streaming fresh copy, about few hours old.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-13T06:51:45+01:00</created-at>
      <creator-id type="integer">24170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4589</number>
      <permalink>issues-with-scopesassociation-proxies-lazyenum-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; named_scope &quot;rails 3.0.0.beta3&quot;</tag>
      <title>Issues with scopes/association proxies lazy/enum behavior ...</title>
      <updated-at type="datetime">2010-05-13T06:51:50+01:00</updated-at>
      <user-id type="integer">24170</user-id>
      <version type="integer">3</version>
      <user-name>VirtualFunction</user-name>
      <creator-name>VirtualFunction</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4589</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I spent some time looking into this issue and this is what I found.

@@@ ruby
class Brake
  scope :good, where(:quality =&gt; 'good')
end
Brake.all.class #=&gt; Array
Brake.good.select #=&gt; ActiveRecord::Relation
@@@

Actually you were unlucky to encounter 'select'. Instead of 'select' if you try 'collect' or 'map' they will work fine.

Why is it so?

Well Brake.unscoped returns ActiveRecord::Relation. This class has following statement.

@@@ ruby
ASSOCIATION_METHODS = [:includes, :eager_load, :preload]
MULTI_VALUE_METHODS = [:select, :group, :order, :joins, :where, :having]
SINGLE_VALUE_METHODS = [:limit, :offset, :lock, :readonly, :create_with, :from]
@@@

ActiveRecord::Relation declares a method for all the items in the array. That method returns an instance of ActiveRecor::Relation. So 'select' method returns an instance of ActiveRecord::Relation so that you can do things like this.

@@@ ruby
rails console  
&gt; unscoped = Brake.unscoped; nil
&gt; unscoped.select(:id)
SELECT id FROM &quot;brakes&quot;
&gt; unscoped.inspect
SELECT &quot;brakes&quot;.* FROM &quot;brakes&quot;
@@@

So in this case 'select' is being used to select what columns should be picked up.
  
You will also find following statement in ActiveRecord::Relation

@@@ ruby
delegate :length, :collect, :map, :each, :all?, :include?, :to =&gt; :to_a
@@@

It means that operations like 'map' and 'collect' would work fine.

*Back to original problem*

One solution could be to rename select to select_query so that select could be used for enumeration purpose. 

I will post it on the mailing list and will see what the core team says.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I spent some time looking into this issue and this is what I
found.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Brake
  scope :good, where(:quality =&amp;gt; 'good')
end
Brake.all.class #=&amp;gt; Array
Brake.good.select #=&amp;gt; ActiveRecord::Relation&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Actually you were unlucky to encounter 'select'. Instead of
'select' if you try 'collect' or 'map' they will work fine.&lt;/p&gt;
&lt;p&gt;Why is it so?&lt;/p&gt;
&lt;p&gt;Well Brake.unscoped returns ActiveRecord::Relation. This class
has following statement.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;ASSOCIATION_METHODS = [:includes, :eager_load, :preload]
MULTI_VALUE_METHODS = [:select, :group, :order, :joins, :where, :having]
SINGLE_VALUE_METHODS = [:limit, :offset, :lock, :readonly, :create_with, :from]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ActiveRecord::Relation declares a method for all the items in
the array. That method returns an instance of
ActiveRecor::Relation. So 'select' method returns an instance of
ActiveRecord::Relation so that you can do things like this.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;rails console  
&amp;gt; unscoped = Brake.unscoped; nil
&amp;gt; unscoped.select(:id)
SELECT id FROM &quot;brakes&quot;
&amp;gt; unscoped.inspect
SELECT &quot;brakes&quot;.* FROM &quot;brakes&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So in this case 'select' is being used to select what columns
should be picked up.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;You will also find following statement in
ActiveRecord::Relation&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;delegate :length, :collect, :map, :each, :all?, :include?, :to =&amp;gt; :to_a&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It means that operations like 'map' and 'collect' would work
fine.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Back to original problem&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One solution could be to rename select to select_query so that
select could be used for enumeration purpose.&lt;/p&gt;
&lt;p&gt;I will post it on the mailing list and will see what the core
team says.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-14T04:17:25+01:00</created-at>
      <creator-id type="integer">24170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4589</number>
      <permalink>issues-with-scopesassociation-proxies-lazyenum-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; named_scope &quot;rails 3.0.0.beta3&quot;</tag>
      <title>Issues with scopes/association proxies lazy/enum behavior ...</title>
      <updated-at type="datetime">2010-05-14T04:17:28+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">4</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>VirtualFunction</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4589</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>OK, thanks for getting back. Yes I should I've realized this this myself tbh... My bad, probably due to a lack of sleep. 

Could be worth making this clear in the documentation when the final release is made given the ambiguity of expectation here. Just another idea that's all along with the select_query concept (given that the &quot;find&quot; method also has the same ambiguity).

Given that enum has a find_all method that is aliased to select, I'll probably use that (or just call &quot;all&quot; prior to that to coerce things to an Enum)</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, thanks for getting back. Yes I should I've realized this
this myself tbh... My bad, probably due to a lack of sleep.&lt;/p&gt;
&lt;p&gt;Could be worth making this clear in the documentation when the
final release is made given the ambiguity of expectation here. Just
another idea that's all along with the select_query concept (given
that the &quot;find&quot; method also has the same ambiguity).&lt;/p&gt;
&lt;p&gt;Given that enum has a find_all method that is aliased to select,
I'll probably use that (or just call &quot;all&quot; prior to that to coerce
things to an Enum)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-14T13:03:57+01:00</created-at>
      <creator-id type="integer">24170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4589</number>
      <permalink>issues-with-scopesassociation-proxies-lazyenum-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; named_scope &quot;rails 3.0.0.beta3&quot;</tag>
      <title>Issues with scopes/association proxies lazy/enum behavior ...</title>
      <updated-at type="datetime">2010-05-14T13:03:59+01:00</updated-at>
      <user-id type="integer">24170</user-id>
      <version type="integer">5</version>
      <user-name>VirtualFunction</user-name>
      <creator-name>VirtualFunction</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4589</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yeah select at this point returns a Relation object which represents the query to be executed and doesn't execute it. Lazy Load :).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah select at this point returns a Relation object which
represents the query to be executed and doesn't execute it. Lazy
Load :).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-05-14T23:24:07+01:00</created-at>
      <creator-id type="integer">24170</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4589</number>
      <permalink>issues-with-scopesassociation-proxies-lazyenum-behavior</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;activerecord rails3&quot; named_scope &quot;rails 3.0.0.beta3&quot;</tag>
      <title>Issues with scopes/association proxies lazy/enum behavior ...</title>
      <updated-at type="datetime">2010-05-14T23:24:09+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>VirtualFunction</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4589</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
