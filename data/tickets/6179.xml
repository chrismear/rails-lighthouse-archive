<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-17T06:48:11+00:00</created-at>
  <creator-id type="integer">93488</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6179</number>
  <permalink>heisenberg-principal-in-activerecordrelation-observing-relation-changes-it</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Heisenberg principal in ActiveRecord::Relation: observing relation changes it</title>
  <updated-at type="datetime">2011-02-17T06:48:11+00:00</updated-at>
  <user-id type="integer">93488</user-id>
  <version type="integer">4</version>
  <user-name>fearless_fool</user-name>
  <creator-name>fearless_fool</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6179</url>
  <priority-name nil="true"></priority-name>
  <original-body>I have isolated a case where calling ActiveRecord::Relation#all (or evidently anything operation that forces evaluation) changes its state to that it subsequently produces incorrect results.  A self-contained test example is attached.  Observed in Ruby 1.9.2 / Rails 3.0.0

The general synopsis:

A RefThing table has two fks: obj1_id and obj2_id.  The following method correctly create a RefThing and returns 1:

    def works(obj1, obj2)
      relation1 = RefThing.where(:obj1_id =&gt; obj1.id)
      relation1.where(:obj2_id =&gt; obj2.id).create
      relation1.size
    end

The following method returns zero instead, even though it correctly creates a RefThing.  Note the ONLY difference is the call to relation1.all before the create:

    def broke(obj1, obj2)
      relation1 = RefThing.where(:obj1_id =&gt; obj1.id)
      relation1.all    # forces evaluation of relation1
      relation1.where(:obj2_id =&gt; obj2.id).create
      relation1.size
    end

[As an aside: it's not just that relation1.size is returning 0 -- it's simply empty, and attempts to use it for accessing fields from RefThing are futile.  And yes, it took me a long time to isolate this from a much larger code body!  :)]</original-body>
  <latest-body>I have isolated a case where calling ActiveRecord::Relation#all (or evidently anything operation that forces evaluation) changes its state to that it subsequently produces incorrect results.  A self-contained test example is attached.  Observed in Ruby 1.9.2 / Rails 3.0.0

The general synopsis:

A RefThing table has two fks: obj1_id and obj2_id.  The following method correctly create a RefThing and returns 1:

    def works(obj1, obj2)
      relation1 = RefThing.where(:obj1_id =&gt; obj1.id)
      relation1.where(:obj2_id =&gt; obj2.id).create
      relation1.size
    end

The following method returns zero instead, even though it correctly creates a RefThing.  Note the ONLY difference is the call to relation1.all before the create:

    def broke(obj1, obj2)
      relation1 = RefThing.where(:obj1_id =&gt; obj1.id)
      relation1.all    # forces evaluation of relation1
      relation1.where(:obj2_id =&gt; obj2.id).create
      relation1.size
    end

[As an aside: it's not just that relation1.size is returning 0 -- it's simply empty, and attempts to use it for accessing fields from RefThing are futile.  And yes, it took me a long time to isolate this from a much larger code body!  :)]</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have isolated a case where calling ActiveRecord::Relation#all
(or evidently anything operation that forces evaluation) changes
its state to that it subsequently produces incorrect results. A
self-contained test example is attached. Observed in Ruby 1.9.2 /
Rails 3.0.0&lt;/p&gt;
&lt;p&gt;The general synopsis:&lt;/p&gt;
&lt;p&gt;A RefThing table has two fks: obj1_id and obj2_id. The following
method correctly create a RefThing and returns 1:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def works(obj1, obj2)
  relation1 = RefThing.where(:obj1_id =&amp;gt; obj1.id)
  relation1.where(:obj2_id =&amp;gt; obj2.id).create
  relation1.size
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The following method returns zero instead, even though it
correctly creates a RefThing. Note the ONLY difference is the call
to relation1.all before the create:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def broke(obj1, obj2)
  relation1 = RefThing.where(:obj1_id =&amp;gt; obj1.id)
  relation1.all    # forces evaluation of relation1
  relation1.where(:obj2_id =&amp;gt; obj2.id).create
  relation1.size
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;[As an aside: it's not just that relation1.size is returning 0
-- it's simply empty, and attempts to use it for accessing fields
from RefThing are futile. And yes, it took me a long time to
isolate this from a much larger code body! :)]&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have isolated a case where calling ActiveRecord::Relation#all (or evidently anything operation that forces evaluation) changes its state to that it subsequently produces incorrect results.  A self-contained test example is attached.  Observed in Ruby 1.9.2 / Rails 3.0.0

The general synopsis:

A RefThing table has two fks: obj1_id and obj2_id.  The following method correctly create a RefThing and returns 1:

    def works(obj1, obj2)
      relation1 = RefThing.where(:obj1_id =&gt; obj1.id)
      relation1.where(:obj2_id =&gt; obj2.id).create
      relation1.size
    end

The following method returns zero instead, even though it correctly creates a RefThing.  Note the ONLY difference is the call to relation1.all before the create:

    def broke(obj1, obj2)
      relation1 = RefThing.where(:obj1_id =&gt; obj1.id)
      relation1.all    # forces evaluation of relation1
      relation1.where(:obj2_id =&gt; obj2.id).create
      relation1.size
    end

[As an aside: it's not just that relation1.size is returning 0 -- it's simply empty, and attempts to use it for accessing fields from RefThing are futile.  And yes, it took me a long time to isolate this from a much larger code body!  :)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have isolated a case where calling ActiveRecord::Relation#all
(or evidently anything operation that forces evaluation) changes
its state to that it subsequently produces incorrect results. A
self-contained test example is attached. Observed in Ruby 1.9.2 /
Rails 3.0.0&lt;/p&gt;
&lt;p&gt;The general synopsis:&lt;/p&gt;
&lt;p&gt;A RefThing table has two fks: obj1_id and obj2_id. The following
method correctly create a RefThing and returns 1:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def works(obj1, obj2)
  relation1 = RefThing.where(:obj1_id =&amp;gt; obj1.id)
  relation1.where(:obj2_id =&amp;gt; obj2.id).create
  relation1.size
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The following method returns zero instead, even though it
correctly creates a RefThing. Note the ONLY difference is the call
to relation1.all before the create:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def broke(obj1, obj2)
  relation1 = RefThing.where(:obj1_id =&amp;gt; obj1.id)
  relation1.all    # forces evaluation of relation1
  relation1.where(:obj2_id =&amp;gt; obj2.id).create
  relation1.size
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;[As an aside: it's not just that relation1.size is returning 0
-- it's simply empty, and attempts to use it for accessing fields
from RefThing are futile. And yes, it took me a long time to
isolate this from a much larger code body! :)]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-16T05:45:24+00:00</created-at>
      <creator-id type="integer">93488</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6179</number>
      <permalink>heisenberg-principal-in-activerecordrelation-observing-relation-changes-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;bug activerecord relation scope&quot;</tag>
      <title>Heisenberg principal in ActiveRecord::Relation: observing relation changes it</title>
      <updated-at type="datetime">2010-12-16T05:46:23+00:00</updated-at>
      <user-id type="integer">93488</user-id>
      <version type="integer">1</version>
      <user-name>fearless_fool</user-name>
      <creator-name>fearless_fool</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6179</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Assigning this to Aaron, since he appears to be the relationship maven.  If I'm violating lighthouse etiquette by assigning the ticket, please excuse me - I'm not sure of the process.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Assigning this to Aaron, since he appears to be the relationship
maven. If I'm violating lighthouse etiquette by assigning the
ticket, please excuse me - I'm not sure of the process.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-17T19:53:50+00:00</created-at>
      <creator-id type="integer">93488</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6179</number>
      <permalink>heisenberg-principal-in-activerecordrelation-observing-relation-changes-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;bug activerecord relation scope&quot;</tag>
      <title>Heisenberg principal in ActiveRecord::Relation: observing relation changes it</title>
      <updated-at type="datetime">2010-12-17T19:53:54+00:00</updated-at>
      <user-id type="integer">93488</user-id>
      <version type="integer">2</version>
      <user-name>fearless_fool</user-name>
      <creator-name>fearless_fool</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6179</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>For future reference, misusing a physics term isn't helpful.

This is simply because the results of the relation are being cached and currently models created with `create` are not added into the relation's cache.

    ruby-1.9.2-p0 &gt; r = Widget.scoped
     =&gt; [#&lt;Widget id: 1&gt;]
    ruby-1.9.2-p0 &gt; r
     =&gt; [#&lt;Widget id: 1&gt;]
    ruby-1.9.2-p0 &gt; r.create
     =&gt; #&lt;Widget id: 2&gt;
    ruby-1.9.2-p0 &gt; r
     =&gt; [#&lt;Widget id: 1&gt;]

Calling `reload` on the relation proves this.

    ruby-1.9.2-p0 &gt; r.reload
     =&gt; [#&lt;Widget id: 1,&gt;, #&lt;Widget id: 2&gt;]</body>
      <body-html>&lt;div&gt;&lt;p&gt;For future reference, misusing a physics term isn't helpful.&lt;/p&gt;
&lt;p&gt;This is simply because the results of the relation are being
cached and currently models created with &lt;code&gt;create&lt;/code&gt; are
not added into the relation's cache.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.9.2-p0 &amp;gt; r = Widget.scoped
 =&amp;gt; [#&amp;lt;Widget id: 1&amp;gt;]
ruby-1.9.2-p0 &amp;gt; r
 =&amp;gt; [#&amp;lt;Widget id: 1&amp;gt;]
ruby-1.9.2-p0 &amp;gt; r.create
 =&amp;gt; #&amp;lt;Widget id: 2&amp;gt;
ruby-1.9.2-p0 &amp;gt; r
 =&amp;gt; [#&amp;lt;Widget id: 1&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Calling &lt;code&gt;reload&lt;/code&gt; on the relation proves this.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.9.2-p0 &amp;gt; r.reload
 =&amp;gt; [#&amp;lt;Widget id: 1,&amp;gt;, #&amp;lt;Widget id: 2&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-17T20:15:57+00:00</created-at>
      <creator-id type="integer">93488</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;bug activerecord relation scope\&quot;&quot;
:assigned_user: 15316
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6179</number>
      <permalink>heisenberg-principal-in-activerecordrelation-observing-relation-changes-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Heisenberg principal in ActiveRecord::Relation: observing relation changes it</title>
      <updated-at type="datetime">2010-12-17T20:16:03+00:00</updated-at>
      <user-id type="integer">103676</user-id>
      <version type="integer">3</version>
      <user-name>Samuel Kadolph</user-name>
      <creator-name>fearless_fool</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6179</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@SK:

The Heisenberg reference was intended to enliven your day, even if not totally accurate.  But -- absent any documentation about how relations are cached -- one would agree that having a relation change its state merely by observing it is kind of astonishing.

So, to make sure I understand, what was happening in the OP was that in the working example, relation1 was NOT being cached because nothing had forced its evaluation.  In the broken example, relation1 was getting cached in its empty state and not getting reloaded after the create, so it appeared to be empty.  

I can live with that if it's documented somewhere.  If not, please (please) point me to the appropriate section on relations and I'd be happy to contribute to improving them.

- ff</body>
      <body-html>&lt;div&gt;&lt;p&gt;@SK:&lt;/p&gt;
&lt;p&gt;The Heisenberg reference was intended to enliven your day, even
if not totally accurate. But -- absent any documentation about how
relations are cached -- one would agree that having a relation
change its state merely by observing it is kind of astonishing.&lt;/p&gt;
&lt;p&gt;So, to make sure I understand, what was happening in the OP was
that in the working example, relation1 was NOT being cached because
nothing had forced its evaluation. In the broken example, relation1
was getting cached in its empty state and not getting reloaded
after the create, so it appeared to be empty.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I can live with that if it's documented somewhere. If not,
please (please) point me to the appropriate section on relations
and I'd be happy to contribute to improving them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ff&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-17T22:38:36+00:00</created-at>
      <creator-id type="integer">93488</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6179</number>
      <permalink>heisenberg-principal-in-activerecordrelation-observing-relation-changes-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Heisenberg principal in ActiveRecord::Relation: observing relation changes it</title>
      <updated-at type="datetime">2010-12-17T22:38:41+00:00</updated-at>
      <user-id type="integer">93488</user-id>
      <version type="integer">4</version>
      <user-name>fearless_fool</user-name>
      <creator-name>fearless_fool</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6179</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>No, now people &lt;a href=&quot;http://www.airmaxshoes.uk.com&quot;&gt;cheap airmax 90s&lt;/a&gt;  are &lt;a href=&quot;http://www.airmaxshoes.uk.com&quot;&gt;nike airmax&lt;/a&gt;  not looking just to tell time. People buy watches &lt;a href=&quot;http://www.airmaxshoes.uk.com&quot;&gt;air max 95s&lt;/a&gt;  because &lt;a href=&quot;http://www.airmaxshoes.uk.com&quot;&gt;nike air max trainers&lt;/a&gt;  they watch the match and improve the image of the people. Bring &lt;a href=&quot;http://www.airmaxshoes.uk.com/nike-air-max-180-c23_35/&quot;&gt;nike air max 180&lt;/a&gt;  sophistication to a person. &lt;a href=&quot;http://www.airmaxshoes.uk.com/nike-air-max-24-7-c23_34/&quot;&gt;nike air max 24-7&lt;/a&gt;  When it comes to picture, there are many people of different options available to &lt;a href=&quot;http://www.airmaxshoes.uk.com/nike-air-max-1-c23_48/&quot;&gt;nike air max 1&lt;/a&gt;  them. Hats &lt;a href=&quot;http://www.airmaxshoes.uk.com/nike-air-max-90-c23_25/&quot;&gt;nike air max 90&lt;/a&gt;  sunnies, diamond rings - in fact many &lt;a href=&quot;http://www.airmaxshoes.uk.com/nike-air-max-95-c23_26/&quot;&gt;nike air max 95&lt;/a&gt;  different components &lt;a href=&quot;http://www.airmaxshoes.uk.com/air-max-classic-bw-c23_27/&quot;&gt;air max classic bw&lt;/a&gt;  that people buy to improve their image. You can also buy a time clock, watches and &lt;a href=&quot;http://www.airmaxshoes.uk.com/nike-air-max-ltd-c23_28/&quot;&gt;nike air max ltd&lt;/a&gt;  Armani is definitely a good choice. &lt;a href=&quot;http://www.airmaxshoes.uk.com/air-max-90-current-c23_36/&quot;&gt;air max 90 current&lt;/a&gt;  But it is a good choice? Is a good choice &lt;a href=&quot;http://www.airmaxshoes.uk.com/nike-air-max-ltd-2-c23_37/&quot;&gt;nike air max ltd 2&lt;/a&gt;  for one simple reason. Armani watches are some of the most demanding role in the market and may actually improve the image of a person. For example, if a person goes to a party and wanted to impress someone, they could shift Armani watch. This will help their image and would certainly go a long way to help them improve their chances of getting a good impression. Even if a person were to attend a meeting of business and would like to be a successful and highly specialized professional help then find an Armani watch. It would be useful because if Armani is perceived as a highly regarded brand, high, and is considered as part of a trademark can not be. Armani watches are extremely demanding, and everyone is certainly clear that there is one. There are other reasons for Armani watches are popular, but the element of improvement is definitely the main reason.</body>
      <body-html>&lt;div&gt;&lt;p&gt;No, now people &lt;a href=&quot;http://www.airmaxshoes.uk.com&quot;&gt;cheap
airmax 90s&lt;/a&gt; are &lt;a href=&quot;http://www.airmaxshoes.uk.com&quot;&gt;nike
airmax&lt;/a&gt; not looking just to tell time. People buy watches
&lt;a href=&quot;http://www.airmaxshoes.uk.com&quot;&gt;air max 95s&lt;/a&gt; because
&lt;a href=&quot;http://www.airmaxshoes.uk.com&quot;&gt;nike air max trainers&lt;/a&gt;
they watch the match and improve the image of the people. Bring
&lt;a href=
&quot;http://www.airmaxshoes.uk.com/nike-air-max-180-c23_35/&quot;&gt;nike air
max 180&lt;/a&gt; sophistication to a person. &lt;a href=
&quot;http://www.airmaxshoes.uk.com/nike-air-max-24-7-c23_34/&quot;&gt;nike air
max 24-7&lt;/a&gt; When it comes to picture, there are many people of
different options available to &lt;a href=
&quot;http://www.airmaxshoes.uk.com/nike-air-max-1-c23_48/&quot;&gt;nike air max
1&lt;/a&gt; them. Hats &lt;a href=
&quot;http://www.airmaxshoes.uk.com/nike-air-max-90-c23_25/&quot;&gt;nike air
max 90&lt;/a&gt; sunnies, diamond rings - in fact many &lt;a href=
&quot;http://www.airmaxshoes.uk.com/nike-air-max-95-c23_26/&quot;&gt;nike air
max 95&lt;/a&gt; different components &lt;a href=
&quot;http://www.airmaxshoes.uk.com/air-max-classic-bw-c23_27/&quot;&gt;air max
classic bw&lt;/a&gt; that people buy to improve their image. You can also
buy a time clock, watches and &lt;a href=
&quot;http://www.airmaxshoes.uk.com/nike-air-max-ltd-c23_28/&quot;&gt;nike air
max ltd&lt;/a&gt; Armani is definitely a good choice. &lt;a href=
&quot;http://www.airmaxshoes.uk.com/air-max-90-current-c23_36/&quot;&gt;air max
90 current&lt;/a&gt; But it is a good choice? Is a good choice &lt;a href=
&quot;http://www.airmaxshoes.uk.com/nike-air-max-ltd-2-c23_37/&quot;&gt;nike air
max ltd 2&lt;/a&gt; for one simple reason. Armani watches are some of the
most demanding role in the market and may actually improve the
image of a person. For example, if a person goes to a party and
wanted to impress someone, they could shift Armani watch. This will
help their image and would certainly go a long way to help them
improve their chances of getting a good impression. Even if a
person were to attend a meeting of business and would like to be a
successful and highly specialized professional help then find an
Armani watch. It would be useful because if Armani is perceived as
a highly regarded brand, high, and is considered as part of a
trademark can not be. Armani watches are extremely demanding, and
everyone is certainly clear that there is one. There are other
reasons for Armani watches are popular, but the element of
improvement is definitely the main reason.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-20T07:07:48+00:00</created-at>
      <creator-id type="integer">93488</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6179</number>
      <permalink>heisenberg-principal-in-activerecordrelation-observing-relation-changes-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Heisenberg principal in ActiveRecord::Relation: observing relation changes it</title>
      <updated-at type="datetime">2010-12-20T17:21:37+00:00</updated-at>
      <user-id type="integer">129580</user-id>
      <version type="integer">5</version>
      <user-name>air  max  shoes</user-name>
      <creator-name>fearless_fool</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6179</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-17T06:08:29+00:00</created-at>
      <creator-id type="integer">93488</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6179</number>
      <permalink>heisenberg-principal-in-activerecordrelation-observing-relation-changes-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Heisenberg principal in ActiveRecord::Relation: observing relation changes it</title>
      <updated-at type="datetime">2011-02-17T06:48:11+00:00</updated-at>
      <user-id type="integer">137442</user-id>
      <version type="integer">6</version>
      <user-name>gfh</user-name>
      <creator-name>fearless_fool</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6179</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>29624c41057939a9fbe93ea2440ce09ec090dcbe</code>
      <content-type>text/x-ruby-script</content-type>
      <created-at type="datetime">2010-12-16T05:45:24+00:00</created-at>
      <filename>ar_heisenberg.rb</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">821961</id>
      <size type="integer">2423</size>
      <uploader-id type="integer">93488</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/821961/ar_heisenberg.rb</url>
    </attachment>
  </attachments>
</ticket>
