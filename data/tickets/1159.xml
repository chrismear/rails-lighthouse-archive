<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-02T22:14:25+01:00</created-at>
  <creator-id type="integer">9497</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1159</number>
  <permalink>gem-dependency-const-loading-issues</permalink>
  <priority type="integer">569</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activesupport constant dependency gem gems loading</tag>
  <title>gem dependency const loading issues</title>
  <updated-at type="datetime">2009-03-07T14:45:07+00:00</updated-at>
  <user-id type="integer">7211</user-id>
  <version type="integer">3</version>
  <user-name>CancelProfileIsBroken</user-name>
  <creator-name>James</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1159</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I have been having major issues with resource_controller loading as a gem dependency. The problem is that when active support tries to load the gem, it comes up with a crazy constant name like this one:

Gems::ResourceController-0.5.3::Lib

It is difficult to diagnose, and regression test, since it's heavily dependent on the circumstances:

* With the gem installed on the system, it never happens (unless rails version &gt;= 2.1.1).
* It never ever happens in test mode.

I have tried manually requiring all the files in resource_controller to make sure that the consts are never missing, as a workaround, but since I need ApplicationController in r_c, it seems to create a lot of conflicts.

I have narrowed the issue down to this load path being present in my Dependencies.load_paths

RAILS_ROOT/vendor

with Dependencies' logging turned on, I can see that it tries to load the const properly from:

RAILS_ROOT/vendor/gems/resource_controller-0.5.3/lib

but also from the above path:

e.g. 

Dependencies: called load_file(&quot;/Users/james/Documents/railsApps/po_creator/vendor/gems/resource_controller-0.5.3/lib/urligence.rb&quot;, [&quot;Urligence&quot;, &quot;Gems::ResourceController-0.5.3::Lib::Urligence&quot;])

If I delete RAILS_ROOT/vendor from the load_paths, everything works fine, but I'm not sure whether that path is necessary, so I don't want to ship a version of r_c that deletes it. 

It is there in test mode, but doesn't seem to cause the problem. Anybody have any ideas?</original-body>
  <latest-body>I have been having major issues with resource_controller loading as a gem dependency. The problem is that when active support tries to load the gem, it comes up with a crazy constant name like this one:

Gems::ResourceController-0.5.3::Lib

It is difficult to diagnose, and regression test, since it's heavily dependent on the circumstances:

* With the gem installed on the system, it never happens (unless rails version &gt;= 2.1.1).
* It never ever happens in test mode.

I have tried manually requiring all the files in resource_controller to make sure that the consts are never missing, as a workaround, but since I need ApplicationController in r_c, it seems to create a lot of conflicts.

I have narrowed the issue down to this load path being present in my Dependencies.load_paths

RAILS_ROOT/vendor

with Dependencies' logging turned on, I can see that it tries to load the const properly from:

RAILS_ROOT/vendor/gems/resource_controller-0.5.3/lib

but also from the above path:

e.g. 

Dependencies: called load_file(&quot;/Users/james/Documents/railsApps/po_creator/vendor/gems/resource_controller-0.5.3/lib/urligence.rb&quot;, [&quot;Urligence&quot;, &quot;Gems::ResourceController-0.5.3::Lib::Urligence&quot;])

If I delete RAILS_ROOT/vendor from the load_paths, everything works fine, but I'm not sure whether that path is necessary, so I don't want to ship a version of r_c that deletes it. 

It is there in test mode, but doesn't seem to cause the problem. Anybody have any ideas?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have been having major issues with resource_controller loading
as a gem dependency. The problem is that when active support tries
to load the gem, it comes up with a crazy constant name like this
one:&lt;/p&gt;
&lt;p&gt;Gems::ResourceController-0.5.3::Lib&lt;/p&gt;
&lt;p&gt;It is difficult to diagnose, and regression test, since it's
heavily dependent on the circumstances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With the gem installed on the system, it never happens (unless
rails version &amp;gt;= 2.1.1).&lt;/li&gt;
&lt;li&gt;It never ever happens in test mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have tried manually requiring all the files in
resource_controller to make sure that the consts are never missing,
as a workaround, but since I need ApplicationController in r_c, it
seems to create a lot of conflicts.&lt;/p&gt;
&lt;p&gt;I have narrowed the issue down to this load path being present
in my Dependencies.load_paths&lt;/p&gt;
&lt;p&gt;RAILS_ROOT/vendor&lt;/p&gt;
&lt;p&gt;with Dependencies' logging turned on, I can see that it tries to
load the const properly from:&lt;/p&gt;
&lt;p&gt;RAILS_ROOT/vendor/gems/resource_controller-0.5.3/lib&lt;/p&gt;
&lt;p&gt;but also from the above path:&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;p&gt;Dependencies: called
load_file(&quot;/Users/james/Documents/railsApps/po_creator/vendor/gems/resource_controller-0.5.3/lib/urligence.rb&quot;,
[&quot;Urligence&quot;,
&quot;Gems::ResourceController-0.5.3::Lib::Urligence&quot;])&lt;/p&gt;
&lt;p&gt;If I delete RAILS_ROOT/vendor from the load_paths, everything
works fine, but I'm not sure whether that path is necessary, so I
don't want to ship a version of r_c that deletes it.&lt;/p&gt;
&lt;p&gt;It is there in test mode, but doesn't seem to cause the problem.
Anybody have any ideas?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have been having major issues with resource_controller loading as a gem dependency. The problem is that when active support tries to load the gem, it comes up with a crazy constant name like this one:

Gems::ResourceController-0.5.3::Lib

It is difficult to diagnose, and regression test, since it's heavily dependent on the circumstances:

* With the gem installed on the system, it never happens (unless rails version &gt;= 2.1.1).
* It never ever happens in test mode.

I have tried manually requiring all the files in resource_controller to make sure that the consts are never missing, as a workaround, but since I need ApplicationController in r_c, it seems to create a lot of conflicts.

I have narrowed the issue down to this load path being present in my Dependencies.load_paths

RAILS_ROOT/vendor

with Dependencies' logging turned on, I can see that it tries to load the const properly from:

RAILS_ROOT/vendor/gems/resource_controller-0.5.3/lib

but also from the above path:

e.g. 

Dependencies: called load_file(&quot;/Users/james/Documents/railsApps/po_creator/vendor/gems/resource_controller-0.5.3/lib/urligence.rb&quot;, [&quot;Urligence&quot;, &quot;Gems::ResourceController-0.5.3::Lib::Urligence&quot;])

If I delete RAILS_ROOT/vendor from the load_paths, everything works fine, but I'm not sure whether that path is necessary, so I don't want to ship a version of r_c that deletes it. 

It is there in test mode, but doesn't seem to cause the problem. Anybody have any ideas?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have been having major issues with resource_controller loading
as a gem dependency. The problem is that when active support tries
to load the gem, it comes up with a crazy constant name like this
one:&lt;/p&gt;
&lt;p&gt;Gems::ResourceController-0.5.3::Lib&lt;/p&gt;
&lt;p&gt;It is difficult to diagnose, and regression test, since it's
heavily dependent on the circumstances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With the gem installed on the system, it never happens (unless
rails version &amp;gt;= 2.1.1).&lt;/li&gt;
&lt;li&gt;It never ever happens in test mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have tried manually requiring all the files in
resource_controller to make sure that the consts are never missing,
as a workaround, but since I need ApplicationController in r_c, it
seems to create a lot of conflicts.&lt;/p&gt;
&lt;p&gt;I have narrowed the issue down to this load path being present
in my Dependencies.load_paths&lt;/p&gt;
&lt;p&gt;RAILS_ROOT/vendor&lt;/p&gt;
&lt;p&gt;with Dependencies' logging turned on, I can see that it tries to
load the const properly from:&lt;/p&gt;
&lt;p&gt;RAILS_ROOT/vendor/gems/resource_controller-0.5.3/lib&lt;/p&gt;
&lt;p&gt;but also from the above path:&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;p&gt;Dependencies: called
load_file(&quot;/Users/james/Documents/railsApps/po_creator/vendor/gems/resource_controller-0.5.3/lib/urligence.rb&quot;,
[&quot;Urligence&quot;,
&quot;Gems::ResourceController-0.5.3::Lib::Urligence&quot;])&lt;/p&gt;
&lt;p&gt;If I delete RAILS_ROOT/vendor from the load_paths, everything
works fine, but I'm not sure whether that path is necessary, so I
don't want to ship a version of r_c that deletes it.&lt;/p&gt;
&lt;p&gt;It is there in test mode, but doesn't seem to cause the problem.
Anybody have any ideas?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-02T22:14:26+01:00</created-at>
      <creator-id type="integer">9497</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1159</number>
      <permalink>gem-dependency-const-loading-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport constant dependency gem gems loading</tag>
      <title>gem dependency const loading issues</title>
      <updated-at type="datetime">2008-10-02T22:14:31+01:00</updated-at>
      <user-id type="integer">9497</user-id>
      <version type="integer">1</version>
      <user-name>James</user-name>
      <creator-name>James</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1159</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This got fixed in [this commit](http://github.com/rails/rails/commit/fb1eebac940d0648d1640d20a24f085d901d6f30) and in a corresponding one in 2-2-stable.

Let me know if it still give you problems on 2.2.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This got fixed in &lt;a href=&quot;http://github.com/rails/rails/commit/fb1eebac940d0648d1640d20a24f085d901d6f30&quot;&gt;
this commit&lt;/a&gt; and in a corresponding one in 2-2-stable.&lt;/p&gt;
&lt;p&gt;Let me know if it still give you problems on 2.2.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-25T03:39:44+00:00</created-at>
      <creator-id type="integer">9497</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1159</number>
      <permalink>gem-dependency-const-loading-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport constant dependency gem gems loading</tag>
      <title>gem dependency const loading issues</title>
      <updated-at type="datetime">2008-11-25T03:39:47+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">2</version>
      <user-name>Matt Jones</user-name>
      <creator-name>James</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1159</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-07T14:45:03+00:00</created-at>
      <creator-id type="integer">9497</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1159</number>
      <permalink>gem-dependency-const-loading-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activesupport constant dependency gem gems loading</tag>
      <title>gem dependency const loading issues</title>
      <updated-at type="datetime">2009-03-07T14:45:07+00:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>James</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1159</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
