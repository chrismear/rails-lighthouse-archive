<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-07T16:57:26+01:00</created-at>
  <creator-id type="integer">25962</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1185</number>
  <permalink>old-single-query-includes-should-be-globally-disableable</permalink>
  <priority type="integer">594</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord config include join left outer patch query single</tag>
  <title>Old-single-query-includes should be globally disableable</title>
  <updated-at type="datetime">2008-10-16T19:10:10+01:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">8</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>David Stevenson</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1185</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Rails often guesses conservatively that pre-rails-2.1 style includes are required for queries that they are not.  Rather than trying to fix this so it guesses perfectly, projects that are serious about include performance should be able to disable this style of includes entirely.</original-body>
  <latest-body>Rails often guesses conservatively that pre-rails-2.1 style includes are required for queries that they are not.  Rather than trying to fix this so it guesses perfectly, projects that are serious about include performance should be able to disable this style of includes entirely.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Rails often guesses conservatively that pre-rails-2.1 style
includes are required for queries that they are not. Rather than
trying to fix this so it guesses perfectly, projects that are
serious about include performance should be able to disable this
style of includes entirely.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails often guesses conservatively that pre-rails-2.1 style includes are required for queries that they are not.  Rather than trying to fix this so it guesses perfectly, projects that are serious about include performance should be able to disable this style of includes entirely.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails often guesses conservatively that pre-rails-2.1 style
includes are required for queries that they are not. Rather than
trying to fix this so it guesses perfectly, projects that are
serious about include performance should be able to disable this
style of includes entirely.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-07T16:57:26+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1185</number>
      <permalink>old-single-query-includes-should-be-globally-disableable</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord config include query single</tag>
      <title>Old-single-query-includes should be globally disableable</title>
      <updated-at type="datetime">2008-10-07T16:57:31+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">1</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1185</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here's the patch... pretty trivial.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here's the patch... pretty trivial.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-09T17:34:48+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1185</number>
      <permalink>old-single-query-includes-should-be-globally-disableable</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord config include query single</tag>
      <title>Old-single-query-includes should be globally disableable</title>
      <updated-at type="datetime">2008-10-09T17:34:50+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">2</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1185</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Previous patch had a bad line in it, which didn't change the functionality but was misleading.  Removed line from the diff and resubmitting.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Previous patch had a bad line in it, which didn't change the
functionality but was misleading. Removed line from the diff and
resubmitting.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-09T17:44:54+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord config include query single
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1185</number>
      <permalink>old-single-query-includes-should-be-globally-disableable</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord config include join left outer patch query single</tag>
      <title>Old-single-query-includes should be globally disableable</title>
      <updated-at type="datetime">2008-10-09T17:44:59+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">3</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1185</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I don't understand the argument that &quot;projects that are serious about include performance&quot; should only want this. If we can come up with a fail-safe heuristic that is always faster, why wouldn't everyone want that? I take it that there are specific reasons why the previous style includes are still being selected at times.

In any case, I don't see it being a general option. If anything, it should be a per-query option. But not until we've tried to make the underlying selector better.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't understand the argument that &quot;projects that are serious
about include performance&quot; should only want this. If we can come up
with a fail-safe heuristic that is always faster, why wouldn't
everyone want that? I take it that there are specific reasons why
the previous style includes are still being selected at times.&lt;/p&gt;
&lt;p&gt;In any case, I don't see it being a general option. If anything,
it should be a per-query option. But not until we've tried to make
the underlying selector better.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-16T09:15:30+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1185</number>
      <permalink>old-single-query-includes-should-be-globally-disableable</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord config include join left outer patch query single</tag>
      <title>Old-single-query-includes should be globally disableable</title>
      <updated-at type="datetime">2008-10-16T09:15:30+01:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">4</version>
      <user-name>DHH</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1185</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>We do have heuristics, but they don't always get it right. In particular they don't work when you specify a table via the :joins option, largely because in the most general case parsing a join statement is a) hard and b) database dependant (we might be able to do something for the simpler :joins =&gt; :some_association case)</body>
      <body-html>&lt;div&gt;&lt;p&gt;We do have heuristics, but they don't always get it right. In
particular they don't work when you specify a table via the :joins
option, largely because in the most general case parsing a join
statement is a) hard and b) database dependant (we might be able to
do something for the simpler :joins =&amp;gt; :some_association
case)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-16T11:17:09+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1185</number>
      <permalink>old-single-query-includes-should-be-globally-disableable</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord config include join left outer patch query single</tag>
      <title>Old-single-query-includes should be globally disableable</title>
      <updated-at type="datetime">2008-10-16T11:17:12+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">5</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1185</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I think it might be possible to find all the tables from :joins, but it would probably be easier to approach this problem the other way around:

Why don't we make a blacklist of tables that trigger a fallback, rather than a whitelist of allowed tables?  It's easier to find all the &quot;bad&quot; tables by traversing the include chain.  This wouldn't allow for the case when you want to :join and :include from the same table, however, but would be overall an improvement.

Since the performance difference between the old-style and new-style is pretty big, I'd imagine that high performance projects are going to want to switch ALL their queries over.  I think the best way to accomplish that is to just disable the old style includes.  With good test coverage, it's easy to find the queries that reference included tables and fix them up... this only took us about 15-30 minutes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think it might be possible to find all the tables from :joins,
but it would probably be easier to approach this problem the other
way around:&lt;/p&gt;
&lt;p&gt;Why don't we make a blacklist of tables that trigger a fallback,
rather than a whitelist of allowed tables? It's easier to find all
the &quot;bad&quot; tables by traversing the include chain. This wouldn't
allow for the case when you want to :join and :include from the
same table, however, but would be overall an improvement.&lt;/p&gt;
&lt;p&gt;Since the performance difference between the old-style and
new-style is pretty big, I'd imagine that high performance projects
are going to want to switch ALL their queries over. I think the
best way to accomplish that is to just disable the old style
includes. With good test coverage, it's easy to find the queries
that reference included tables and fix them up... this only took us
about 15-30 minutes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-16T18:50:05+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1185</number>
      <permalink>old-single-query-includes-should-be-globally-disableable</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord config include join left outer patch query single</tag>
      <title>Old-single-query-includes should be globally disableable</title>
      <updated-at type="datetime">2008-10-16T18:50:07+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">6</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1185</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I had originally opened this ticket:

http://rails.lighthouseapp.com/projects/8994/tickets/1104-references_eager_loaded_tables-should-search-tables-in-join-clauses

which I guess I could try to come up with a patch for.  But it seems to be orthogonal to this configuration ticket.  Even if it guesses better, it would still be useful to disable these across the board (especially for finding &quot;bad queries&quot; that reference included tables).</body>
      <body-html>&lt;div&gt;&lt;p&gt;I had originally opened this ticket:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/1104-references_eager_loaded_tables-should-search-tables-in-join-clauses&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;which I guess I could try to come up with a patch for. But it
seems to be orthogonal to this configuration ticket. Even if it
guesses better, it would still be useful to disable these across
the board (especially for finding &quot;bad queries&quot; that reference
included tables).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-16T18:52:36+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1185</number>
      <permalink>old-single-query-includes-should-be-globally-disableable</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord config include join left outer patch query single</tag>
      <title>Old-single-query-includes should be globally disableable</title>
      <updated-at type="datetime">2008-10-16T18:52:42+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">7</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1185</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Even that can get hairy when table aliases are involved but at that  
point it's quite tricky to write the conditions anyway. Definitely  
worth a try

On 16 Oct 2008, at 18:50, Lighthouse &lt;support@lighthouseapp.com&gt; wrote:</body>
      <body-html>&lt;div&gt;&lt;p&gt;Even that can get hairy when table aliases are involved but at
that point it's quite tricky to write the conditions anyway.
Definitely worth a try&lt;/p&gt;
&lt;p&gt;On 16 Oct 2008, at 18:50, Lighthouse &lt;a href=&quot;mailto:support@lighthouseapp.com&quot;&gt;support@lighthouseapp.com&lt;/a&gt;
wrote:&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-16T19:10:08+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1185</number>
      <permalink>old-single-query-includes-should-be-globally-disableable</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord config include join left outer patch query single</tag>
      <title>Old-single-query-includes should be globally disableable</title>
      <updated-at type="datetime">2008-10-16T19:10:10+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">8</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1185</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>63196291effee802c8737091741fb1fa54b9d9f2</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-09T17:34:48+01:00</created-at>
      <filename>ar-option-to-disable-single-query-includes.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">52819</id>
      <size type="integer">5819</size>
      <uploader-id type="integer">25962</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/52819/ar-option-to-disable-single-query-includes.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>94112b610bf7fea3497a00b7df23a8ae8ab11c3f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-09T17:44:54+01:00</created-at>
      <filename>ar-option-to-disable-single-query-includes-fixed.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">52826</id>
      <size type="integer">5360</size>
      <uploader-id type="integer">25962</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/52826/ar-option-to-disable-single-query-includes-fixed.diff</url>
    </attachment>
  </attachments>
</ticket>
