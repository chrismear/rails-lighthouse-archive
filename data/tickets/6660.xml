<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-31T18:48:22+01:00</created-at>
  <creator-id type="integer">143742</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6660</number>
  <permalink>allow-after_commit-do_something-on-update-create</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>callbacks</tag>
  <title>Allow after_commit :do_something, :on =&gt; [:update, :create]</title>
  <updated-at type="datetime">2011-04-16T03:02:30+01:00</updated-at>
  <user-id type="integer">114903</user-id>
  <version type="integer">8</version>
  <user-name>laptopbatteries</user-name>
  <creator-name>Ary Borenszweig</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6660</url>
  <priority-name nil="true"></priority-name>
  <original-body>It's very common to want to do the same thing on an update/create callback after commit (example: create/update a related file, but if the file was there then it is just overwritten).

I tried:

@@@
after_commit :do_something, :on =&gt; [:update, :create]
@@@

but I get:

@@@
/Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:400:in `class_eval': /Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414: syntax error, unexpected '[', expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END (SyntaxError)
if (transaction_include_action?(:[:create, :update]))
                                  ^
@@@

I tried doing this:

@@@
after_commit :do_something, :on =&gt; :create
after_commit :do_something, :on =&gt; :update
@@@

but the second callback overrides the first one. So for now I'm using two different methods, or just using an alias_method, but I think the :on =&gt; [...] is more DRY, useful and it also similar to the controllers :before_filter, :only =&gt; [...]</original-body>
  <latest-body>It's very common to want to do the same thing on an update/create callback after commit (example: create/update a related file, but if the file was there then it is just overwritten).

I tried:

@@@
after_commit :do_something, :on =&gt; [:update, :create]
@@@

but I get:

@@@
/Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:400:in `class_eval': /Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414: syntax error, unexpected '[', expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END (SyntaxError)
if (transaction_include_action?(:[:create, :update]))
                                  ^
@@@

I tried doing this:

@@@
after_commit :do_something, :on =&gt; :create
after_commit :do_something, :on =&gt; :update
@@@

but the second callback overrides the first one. So for now I'm using two different methods, or just using an alias_method, but I think the :on =&gt; [...] is more DRY, useful and it also similar to the controllers :before_filter, :only =&gt; [...]</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;It's very common to want to do the same thing on an
update/create callback after commit (example: create/update a
related file, but if the file was there then it is just
overwritten).&lt;/p&gt;
&lt;p&gt;I tried:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;after_commit :do_something, :on =&amp;gt; [:update, :create]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but I get:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:400:in `class_eval': /Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414: syntax error, unexpected '[', expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END (SyntaxError)
if (transaction_include_action?(:[:create, :update]))
                                  ^&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I tried doing this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;after_commit :do_something, :on =&amp;gt; :create
after_commit :do_something, :on =&amp;gt; :update&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but the second callback overrides the first one. So for now I'm
using two different methods, or just using an alias_method, but I
think the :on =&amp;gt; [...] is more DRY, useful and it also similar
to the controllers :before_filter, :only =&amp;gt; [...]&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It's very common to want to do the same thing on an update/create callback after commit (example: create/update a related file, but if the file was there then it is just overwritten).

I tried:

@@@
after_commit :do_something, :on =&gt; [:update, :create]
@@@

but I get:

@@@
/Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:400:in `class_eval': /Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414: syntax error, unexpected '[', expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END (SyntaxError)
if (transaction_include_action?(:[:create, :update]))
                                  ^
@@@

I tried doing this:

@@@
after_commit :do_something, :on =&gt; :create
after_commit :do_something, :on =&gt; :update
@@@

but the second callback overrides the first one. So for now I'm using two different methods, or just using an alias_method, but I think the :on =&gt; [...] is more DRY, useful and it also similar to the controllers :before_filter, :only =&gt; [...]</body>
      <body-html>&lt;div&gt;&lt;p&gt;It's very common to want to do the same thing on an
update/create callback after commit (example: create/update a
related file, but if the file was there then it is just
overwritten).&lt;/p&gt;
&lt;p&gt;I tried:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;after_commit :do_something, :on =&amp;gt; [:update, :create]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but I get:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:400:in `class_eval': /Users/asterite/.rvm/gems/ruby-1.9.2-p136@verbo/gems/activesupport-3.0.3/lib/active_support/callbacks.rb:414: syntax error, unexpected '[', expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END (SyntaxError)
if (transaction_include_action?(:[:create, :update]))
                                  ^&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I tried doing this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;after_commit :do_something, :on =&amp;gt; :create
after_commit :do_something, :on =&amp;gt; :update&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but the second callback overrides the first one. So for now I'm
using two different methods, or just using an alias_method, but I
think the :on =&amp;gt; [...] is more DRY, useful and it also similar
to the controllers :before_filter, :only =&amp;gt; [...]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-31T18:48:22+01:00</created-at>
      <creator-id type="integer">143742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6660</number>
      <permalink>allow-after_commit-do_something-on-update-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Allow after_commit :do_something, :on =&gt; [:update, :create]</title>
      <updated-at type="datetime">2011-03-31T18:48:24+01:00</updated-at>
      <user-id type="integer">143742</user-id>
      <version type="integer">1</version>
      <user-name>Ary Borenszweig</user-name>
      <creator-name>Ary Borenszweig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6660</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I just encountered this same bug today and was fortunate to find this bug report from a day ago. I have the same situation and I'd like to run the same actions but only on create/update, not destroy.

I definitely wouldn't expect that using after_commit twice would override the first action.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just encountered this same bug today and was fortunate to find
this bug report from a day ago. I have the same situation and I'd
like to run the same actions but only on create/update, not
destroy.&lt;/p&gt;
&lt;p&gt;I definitely wouldn't expect that using after_commit twice would
override the first action.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-01T20:16:51+01:00</created-at>
      <creator-id type="integer">143742</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6660</number>
      <permalink>allow-after_commit-do_something-on-update-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>callbacks</tag>
      <title>Allow after_commit :do_something, :on =&gt; [:update, :create]</title>
      <updated-at type="datetime">2011-04-01T20:16:56+01:00</updated-at>
      <user-id type="integer">116169</user-id>
      <version type="integer">2</version>
      <user-name>bgentry</user-name>
      <creator-name>Ary Borenszweig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6660</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Also, I believe you can work around this exact issue by defining a single callback and only running it if the object is persisted:

@@@ ruby
after_commit :do_something, :if =&gt; :persisted?
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Also, I believe you can work around this exact issue by defining
a single callback and only running it if the object is
persisted:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;after_commit :do_something, :if =&amp;gt; :persisted?&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-01T20:25:32+01:00</created-at>
      <creator-id type="integer">143742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6660</number>
      <permalink>allow-after_commit-do_something-on-update-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>callbacks</tag>
      <title>Allow after_commit :do_something, :on =&gt; [:update, :create]</title>
      <updated-at type="datetime">2011-04-01T20:25:36+01:00</updated-at>
      <user-id type="integer">116169</user-id>
      <version type="integer">3</version>
      <user-name>bgentry</user-name>
      <creator-name>Ary Borenszweig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6660</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, thanks! That worked. So what do we do about this? Close as invalid? Still propose to do it? (I will try to make a patch for this)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, thanks! That worked. So what do we do about this? Close as
invalid? Still propose to do it? (I will try to make a patch for
this)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-01T20:29:00+01:00</created-at>
      <creator-id type="integer">143742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6660</number>
      <permalink>allow-after_commit-do_something-on-update-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>callbacks</tag>
      <title>Allow after_commit :do_something, :on =&gt; [:update, :create]</title>
      <updated-at type="datetime">2011-04-01T20:29:05+01:00</updated-at>
      <user-id type="integer">143742</user-id>
      <version type="integer">4</version>
      <user-name>Ary Borenszweig</user-name>
      <creator-name>Ary Borenszweig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6660</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I still thing it's a valid bug, the behavior is certainly not as I'd expect. Callbacks are never supposed to override each other like this. At a glance it didn't look like the patch would be very simple, but go ahead and take a crack at it. Hopefully we can get some assistance from the core team.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I still thing it's a valid bug, the behavior is certainly not as
I'd expect. Callbacks are never supposed to override each other
like this. At a glance it didn't look like the patch would be very
simple, but go ahead and take a crack at it. Hopefully we can get
some assistance from the core team.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-01T21:04:44+01:00</created-at>
      <creator-id type="integer">143742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6660</number>
      <permalink>allow-after_commit-do_something-on-update-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>callbacks</tag>
      <title>Allow after_commit :do_something, :on =&gt; [:update, :create]</title>
      <updated-at type="datetime">2011-04-01T21:04:51+01:00</updated-at>
      <user-id type="integer">116169</user-id>
      <version type="integer">5</version>
      <user-name>bgentry</user-name>
      <creator-name>Ary Borenszweig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6660</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I also recently encountered this problem. Here is a unit test demonstrating this behavior:

https://github.com/rails/rails/pull/269</body>
      <body-html>&lt;div&gt;&lt;p&gt;I also recently encountered this problem. Here is a unit test
demonstrating this behavior:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/pull/269&quot;&gt;https://github.com/rails/rails/pull/269&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-14T02:27:53+01:00</created-at>
      <creator-id type="integer">143742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6660</number>
      <permalink>allow-after_commit-do_something-on-update-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>callbacks</tag>
      <title>Allow after_commit :do_something, :on =&gt; [:update, :create]</title>
      <updated-at type="datetime">2011-04-14T02:28:03+01:00</updated-at>
      <user-id type="integer">145563</user-id>
      <version type="integer">6</version>
      <user-name>Michael Andrews</user-name>
      <creator-name>Ary Borenszweig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6660</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Updated the pull request with a fix to prevent the callbacks in separate contexts from overriding one another.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Updated the pull request with a fix to prevent the callbacks in
separate contexts from overriding one another.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-14T03:11:52+01:00</created-at>
      <creator-id type="integer">143742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6660</number>
      <permalink>allow-after_commit-do_something-on-update-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>callbacks</tag>
      <title>Allow after_commit :do_something, :on =&gt; [:update, :create]</title>
      <updated-at type="datetime">2011-04-14T03:12:00+01:00</updated-at>
      <user-id type="integer">145563</user-id>
      <version type="integer">7</version>
      <user-name>Michael Andrews</user-name>
      <creator-name>Ary Borenszweig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6660</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;a href=&quot;http://www.rolexreplicascollection.net/&quot;&gt;rolex watches&lt;/a&gt; are very common in our &lt;a href=&quot;http://www.rolexreplicascollection.net/audemars-piguet-watches-c-114.html&quot;&gt;Audemars Piguet Replicas&lt;/a&gt;  lifes, there are quite several well known &lt;a href=&quot;http://www.freereplicawatches.com&quot;&gt;wrist watches&lt;/a&gt;  brands, the majority &lt;a href=&quot;http://www.rolexreplicascollection.net/gucci-watches-c-117.html&quot;&gt;Gucci Replicas&lt;/a&gt;  of them are Swiss bands,  &lt;a href=&quot;http://www.rolexreplicascollection.net/panerai-watches-c-118.html&quot;&gt;Panerai Replicas&lt;/a&gt; ,and it is &lt;a href=&quot;http://www.rolexreplicascollection.net/omega-watches-c-127.html&quot;&gt;Omega Replicas&lt;/a&gt; unlikely, unless the &lt;a href=&quot;http://www.replica-watches-uk.net/&quot;&gt;replica watches&lt;/a&gt; 's owner is filthy rich and equally careless &lt;a href=&quot;http://www.replicawatches.uk.net/breitling-watches-c-11.html&quot;&gt;replica breitling&lt;/a&gt; with his, Even the highest quality, Some &lt;a href=&quot;http://www.replicawatches.uk.net/omega-watches-c-27.html&quot;&gt;replica omega&lt;/a&gt; are believed to be to acquire luxury wrist that are &lt;a href=&quot;http://www.replica-watches-uk.net/&quot;&gt;Replica Concord&lt;/a&gt; founded of gold or platinum or other high priced materials. placing on these wrist &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;fake rolex&lt;/a&gt; certainly will make us stand out from other &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;Swiss Replica Watch&lt;/a&gt; people.Does everyone can afford these genuine, &lt;a href=&quot;http://www.replicawatches.uk.net/tag-heuer-watches-c-35.html&quot;&gt;replica tag heuer&lt;/a&gt; Taking your or &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch&lt;/a&gt; ? When should expensive &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch uk&lt;/a&gt; , before you take your precious?</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.rolexreplicascollection.net/&quot;&gt;rolex
watches&lt;/a&gt; are very common in our &lt;a href=
&quot;http://www.rolexreplicascollection.net/audemars-piguet-watches-c-114.html&quot;&gt;
Audemars Piguet Replicas&lt;/a&gt; lifes, there are quite several well
known &lt;a href=&quot;http://www.freereplicawatches.com&quot;&gt;wrist watches&lt;/a&gt;
brands, the majority &lt;a href=
&quot;http://www.rolexreplicascollection.net/gucci-watches-c-117.html&quot;&gt;Gucci
Replicas&lt;/a&gt; of them are Swiss bands, &lt;a href=
&quot;http://www.rolexreplicascollection.net/panerai-watches-c-118.html&quot;&gt;
Panerai Replicas&lt;/a&gt; ,and it is &lt;a href=
&quot;http://www.rolexreplicascollection.net/omega-watches-c-127.html&quot;&gt;Omega
Replicas&lt;/a&gt; unlikely, unless the &lt;a href=
&quot;http://www.replica-watches-uk.net/&quot;&gt;replica watches&lt;/a&gt; 's owner
is filthy rich and equally careless &lt;a href=
&quot;http://www.replicawatches.uk.net/breitling-watches-c-11.html&quot;&gt;replica
breitling&lt;/a&gt; with his, Even the highest quality, Some &lt;a href=
&quot;http://www.replicawatches.uk.net/omega-watches-c-27.html&quot;&gt;replica
omega&lt;/a&gt; are believed to be to acquire luxury wrist that are
&lt;a href=&quot;http://www.replica-watches-uk.net/&quot;&gt;Replica Concord&lt;/a&gt;
founded of gold or platinum or other high priced materials. placing
on these wrist &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;fake
rolex&lt;/a&gt; certainly will make us stand out from other &lt;a href=
&quot;http://www.replicawatches.uk.net/&quot;&gt;Swiss Replica Watch&lt;/a&gt;
people.Does everyone can afford these genuine, &lt;a href=
&quot;http://www.replicawatches.uk.net/tag-heuer-watches-c-35.html&quot;&gt;replica
tag heuer&lt;/a&gt; Taking your or &lt;a href=
&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch&lt;/a&gt; ? When should
expensive &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch
uk&lt;/a&gt; , before you take your precious?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-16T03:02:20+01:00</created-at>
      <creator-id type="integer">143742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6660</number>
      <permalink>allow-after_commit-do_something-on-update-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>callbacks</tag>
      <title>Allow after_commit :do_something, :on =&gt; [:update, :create]</title>
      <updated-at type="datetime">2011-04-16T03:02:30+01:00</updated-at>
      <user-id type="integer">114903</user-id>
      <version type="integer">8</version>
      <user-name>laptopbatteries</user-name>
      <creator-name>Ary Borenszweig</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6660</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
