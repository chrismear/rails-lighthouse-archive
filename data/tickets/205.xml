<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-15T22:57:48+01:00</created-at>
  <creator-id type="integer">17361</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">205</number>
  <permalink>rescue-handlers-should-only-run-for-non-local-requests</permalink>
  <priority type="integer">13145</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>controller patch</tag>
  <title>Rescue handlers should only run for non-local requests</title>
  <updated-at type="datetime">2008-05-16T12:44:03+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>David Yeu</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/205</url>
  <priority-name nil="true"></priority-name>
  <original-body>The new rescue_from declarative handlers run in every mode.  Since they're usually pimped as a replacement for rescue_action_in_public, I think they should act accordingly (at least for now) and run only for non-local requests.  The offending code in action_controller/rescue.rb:

@@@ ruby
def perform_action_with_rescue #:nodoc:
  perform_action_without_rescue
rescue Exception =&gt; exception
  rescue_action_with_handler(exception) || 
    rescue_action(exception)
end
@@@

A patch is attached to implement this behavior change.</original-body>
  <latest-body>The new rescue_from declarative handlers run in every mode.  Since they're usually pimped as a replacement for rescue_action_in_public, I think they should act accordingly (at least for now) and run only for non-local requests.  The offending code in action_controller/rescue.rb:

@@@ ruby
def perform_action_with_rescue #:nodoc:
  perform_action_without_rescue
rescue Exception =&gt; exception
  rescue_action_with_handler(exception) || 
    rescue_action(exception)
end
@@@

A patch is attached to implement this behavior change.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
The new rescue_from declarative handlers run in every mode.  Since they're usually pimped as a replacement for rescue_action_in_public, I think they should act accordingly (at least for now) and run only for non-local requests.  The offending code in action_controller/rescue.rb:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def perform_action_with_rescue #:nodoc:
  perform_action_without_rescue
rescue Exception =&amp;gt; exception
  rescue_action_with_handler(exception) || 
    rescue_action(exception)
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
A patch is attached to implement this behavior change.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The new rescue_from declarative handlers run in every mode.  Since they're usually pimped as a replacement for rescue_action_in_public, I think they should act accordingly (at least for now) and run only for non-local requests.  The offending code in action_controller/rescue.rb:

@@@ ruby
def perform_action_with_rescue #:nodoc:
  perform_action_without_rescue
rescue Exception =&gt; exception
  rescue_action_with_handler(exception) || 
    rescue_action(exception)
end
@@@

A patch is attached to implement this behavior change.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The new rescue_from declarative handlers run in every mode.  Since they're usually pimped as a replacement for rescue_action_in_public, I think they should act accordingly (at least for now) and run only for non-local requests.  The offending code in action_controller/rescue.rb:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def perform_action_with_rescue #:nodoc:
  perform_action_without_rescue
rescue Exception =&amp;gt; exception
  rescue_action_with_handler(exception) || 
    rescue_action(exception)
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
A patch is attached to implement this behavior change.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-15T22:57:48+01:00</created-at>
      <creator-id type="integer">17361</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">205</number>
      <permalink>rescue-handlers-should-only-run-for-non-local-requests</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rescue handlers should only run for non-local requests</title>
      <updated-at type="datetime">2008-05-15T22:57:48+01:00</updated-at>
      <user-id type="integer">17361</user-id>
      <version type="integer">1</version>
      <user-name>David Yeu</user-name>
      <creator-name>David Yeu</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/205</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It's very common to use rescue_from along with AR#save! method to render 'edit' or 'new' on validation failures, irrespective of dev/prod mode. And many similar use cases.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It's very common to use rescue_from along with AR#save! method to render 'edit' or 'new' on validation failures, irrespective of dev/prod mode. And many similar use cases.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-16T12:44:03+01:00</created-at>
      <creator-id type="integer">17361</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">205</number>
      <permalink>rescue-handlers-should-only-run-for-non-local-requests</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Rescue handlers should only run for non-local requests</title>
      <updated-at type="datetime">2008-05-16T12:44:03+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>David Yeu</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/205</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>78f90776b844b6526994fbf731999d273bae7ae6</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-15T22:57:48+01:00</created-at>
      <filename>0001-Rescue-handlers-only-run-for-non-local-requests.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">23155</id>
      <size type="integer">4607</size>
      <uploader-id type="integer">17361</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/23155/0001-Rescue-handlers-only-run-for-non-local-requests.patch</url>
    </attachment>
  </attachments>
</ticket>
