<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-13T17:53:33+01:00</created-at>
  <creator-id type="integer">17461</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">182</number>
  <permalink>routes-restricted-to-head-fail-to-be-matched</permalink>
  <priority type="integer">12845</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>actionpack routing</tag>
  <title>Routes restricted to HEAD fail to be matched</title>
  <updated-at type="datetime">2010-10-06T02:05:55+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">10</version>
  <user-name>Repository</user-name>
  <creator-name>Chris Hapgood</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/182</url>
  <priority-name nil="true"></priority-name>
  <original-body>Consider a route that is restricted to just HEAD requests.  For example:

@@@ ruby
map.resource :session, :collection =&gt; {:status =&gt; :head}
@@@

This action can never be invoked due to the following:

Prior to the recognize_path phase of route recognition, the extract_request_environment method (in routing.rb) determines the request verb by calling request.method, which in turn... always converts :head to :get (line 35 of request.rb).</original-body>
  <latest-body>Consider a route that is restricted to just HEAD requests.  For example:

@@@ ruby
map.resource :session, :collection =&gt; {:status =&gt; :head}
@@@

This action can never be invoked due to the following:

Prior to the recognize_path phase of route recognition, the extract_request_environment method (in routing.rb) determines the request verb by calling request.method, which in turn... always converts :head to :get (line 35 of request.rb).</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Consider a route that is restricted to just HEAD requests.  For example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;map.resource :session, :collection =&amp;gt; {:status =&amp;gt; :head}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This action can never be invoked due to the following:
&lt;/p&gt;&lt;p&gt;
Prior to the recognize_path phase of route recognition, the extract_request_environment method (in routing.rb) determines the request verb by calling request.method, which in turn... always converts :head to :get (line 35 of request.rb).
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Consider a route that is restricted to just HEAD requests.  For example:

@@@ ruby
map.resource :session, :collection =&gt; {:status =&gt; :head}
@@@

This action can never be invoked due to the following:

Prior to the recognize_path phase of route recognition, the extract_request_environment method (in routing.rb) determines the request verb by calling request.method, which in turn... always converts :head to :get (line 35 of request.rb).</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Consider a route that is restricted to just HEAD requests.  For example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;map.resource :session, :collection =&amp;gt; {:status =&amp;gt; :head}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This action can never be invoked due to the following:
&lt;/p&gt;&lt;p&gt;
Prior to the recognize_path phase of route recognition, the extract_request_environment method (in routing.rb) determines the request verb by calling request.method, which in turn... always converts :head to :get (line 35 of request.rb).
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-13T17:53:33+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">182</number>
      <permalink>routes-restricted-to-head-fail-to-be-matched</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Routes restricted to HEAD fail to be matched</title>
      <updated-at type="datetime">2008-05-13T17:53:33+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">1</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/182</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&quot;It makes no sense to restrict a route to just HEAD requests.&quot;

That's a bit dogmatic (or should I say &quot;opinionated&quot;?).  I need a low- cost action/resource that allows a (mobile web service) client to periodically authenticate or confirm authentication via HTTP_AUTH.  Sure, I could make the client GET an existing resource (expensive for the server), but why?  So we have a simple action (no DB, no calcs, no nothing!) that is only capable of returning header data.

Once you accept that such a method deserves to live, it's easy to accept that it should be restricted to HEAD -it allows buggy clients to be spotted at the server with an exception being raised.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&quot;It makes no sense to restrict a route to just HEAD requests.&quot;
&lt;/p&gt;&lt;p&gt;
That's a bit dogmatic (or should I say &quot;opinionated&quot;?).  I need a low- cost action/resource that allows a (mobile web service) client to periodically authenticate or confirm authentication via HTTP_AUTH.  Sure, I could make the client GET an existing resource (expensive for the server), but why?  So we have a simple action (no DB, no calcs, no nothing!) that is only capable of returning header data.
&lt;/p&gt;&lt;p&gt;
Once you accept that such a method deserves to live, it's easy to accept that it should be restricted to HEAD -it allows buggy clients to be spotted at the server with an exception being raised.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-23T13:22:54+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">182</number>
      <permalink>routes-restricted-to-head-fail-to-be-matched</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Routes restricted to HEAD fail to be matched</title>
      <updated-at type="datetime">2008-05-23T13:22:54+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">4</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/182</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It's my understanding that a HEAD request to a URI should always return exactly the same headers as a GET request to the same URI.  By restricting methods allowed on the URI to only HEAD you would break this rule.  A HEAD request would return either status code 200 or 401, while a GET request would return 405.

I agree that your cheap authentication action deserves to exist, but it doesn't follow that it should be restricted to only handle HEAD.  Instead, you should also handle GET, returning either a very simple body (such as just 'OK') or no body at all if you prefer.  This would be just as cheap, without breaking the implicit HTTP contract.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It's my understanding that a HEAD request to a URI should always return exactly the same headers as a GET request to the same URI.  By restricting methods allowed on the URI to only HEAD you would break this rule.  A HEAD request would return either status code 200 or 401, while a GET request would return 405.
&lt;/p&gt;&lt;p&gt;
I agree that your cheap authentication action deserves to exist, but it doesn't follow that it should be restricted to only handle HEAD.  Instead, you should also handle GET, returning either a very simple body (such as just 'OK') or no body at all if you prefer.  This would be just as cheap, without breaking the implicit HTTP contract.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-23T14:33:43+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">182</number>
      <permalink>routes-restricted-to-head-fail-to-be-matched</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Routes restricted to HEAD fail to be matched</title>
      <updated-at type="datetime">2008-05-23T14:33:43+01:00</updated-at>
      <user-id type="integer">14288</user-id>
      <version type="integer">5</version>
      <user-name>Tom Ward</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/182</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Tom,
Thanks for taking the time to look at this ticket a second time.  I accept that this request is not going to be implemented, and I can live with it.

It might be a good idea to document this restriction because it is accepted when routes are built, but then fails with a contradictory error message at run time.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Tom,
&lt;/p&gt;&lt;p&gt;
Thanks for taking the time to look at this ticket a second time.  I accept that this request is not going to be implemented, and I can live with it.
&lt;/p&gt;&lt;p&gt;
It might be a good idea to document this restriction because it is accepted when routes are built, but then fails with a contradictory error message at run time.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-23T14:51:15+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">182</number>
      <permalink>routes-restricted-to-head-fail-to-be-matched</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Routes restricted to HEAD fail to be matched</title>
      <updated-at type="datetime">2008-05-23T14:51:15+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">6</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/182</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Now that sounds like a valid bug which should certainly be fixed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Now that sounds like a valid bug which should certainly be fixed.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-23T15:05:09+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">182</number>
      <permalink>routes-restricted-to-head-fail-to-be-matched</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Routes restricted to HEAD fail to be matched</title>
      <updated-at type="datetime">2008-05-23T15:05:09+01:00</updated-at>
      <user-id type="integer">14288</user-id>
      <version type="integer">7</version>
      <user-name>Tom Ward</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/182</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>fyi: from the CHANGELOG at http://dev.rubyonrails.org/changeset/5621

Added GET-masquarading for HEAD, so request.method will return :get even for HEADs. This will help anyone relying on case request.method to automatically work with HEAD and map.resources will also allow HEADs to all GET actions. Rails automatically throws away the response content in a reply to HEAD, so you don't even need to worry about that. 

**If you, for whatever reason, still need to distinguish between GET and HEAD in some edge case, you can use Request#head? and even Request.headers[&quot;REQUEST_METHOD&quot;] for get the &quot;real&quot; answer.**</body>
      <body-html>&lt;div&gt;&lt;p&gt;
fyi: from the CHANGELOG at &lt;a href=&quot;http://dev.rubyonrails.org/changeset/5621&quot;&gt;http://dev.rubyonrails.org/chang...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
Added GET-masquarading for HEAD, so request.method will return :get even for HEADs. This will help anyone relying on case request.method to automatically work with HEAD and map.resources will also allow HEADs to all GET actions. Rails automatically throws away the response content in a reply to HEAD, so you don't even need to worry about that.
&lt;/p&gt;&lt;p&gt;
**If you, for whatever reason, still need to distinguish between GET and HEAD in some edge case, you can use Request#head? and even Request.headers[&quot;REQUEST_METHOD&quot;] for get the &quot;real&quot; answer.**
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-27T03:43:19+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">182</number>
      <permalink>routes-restricted-to-head-fail-to-be-matched</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>actionpack routing</tag>
      <title>Routes restricted to HEAD fail to be matched</title>
      <updated-at type="datetime">2008-06-27T03:43:19+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">8</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/182</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Lawrence, good find.  I guess that really puts a nail in the coffin.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Lawrence, good find.  I guess that really puts a nail in the coffin.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-27T04:11:50+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">182</number>
      <permalink>routes-restricted-to-head-fail-to-be-matched</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>actionpack routing</tag>
      <title>Routes restricted to HEAD fail to be matched</title>
      <updated-at type="datetime">2008-06-27T04:11:50+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">9</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/182</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [d39485078ec56e25a96e97d44b53498d8a1c7426]) Raise ArgumentError if an invalid method is specified as part of a route's conditions.  Also raise an error if HEAD is specified as the method, as rails routes all HEAD requests through the equivalent GET, though doesn't return the response body [#182 state:resolved]

Signed-off-by: Joshua Peek &lt;josh@joshpeek.com&gt;
http://github.com/rails/rails/commit/d39485078ec56e25a96e97d44b53498d8a1c7426</body>
      <body-html>&lt;div&gt;&lt;p&gt;
(from [d39485078ec56e25a96e97d44b53498d8a1c7426]) Raise ArgumentError if an invalid method is specified as part of a route's conditions.  Also raise an error if HEAD is specified as the method, as rails routes all HEAD requests through the equivalent GET, though doesn't return the response body [#182 state:resolved]
&lt;/p&gt;&lt;p&gt;
Signed-off-by: Joshua Peek 
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/d39485078ec56e25a96e97d44b53498d8a1c7426&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-19T02:16:42+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- 
:state: invalid
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">182</number>
      <permalink>routes-restricted-to-head-fail-to-be-matched</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>actionpack routing</tag>
      <title>Routes restricted to HEAD fail to be matched</title>
      <updated-at type="datetime">2008-07-19T02:16:42+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">10</version>
      <user-name>Repository</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/182</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
