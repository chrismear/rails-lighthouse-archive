<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-04-09T06:52:20+01:00</created-at>
  <creator-id type="integer">33287</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4354</number>
  <permalink>unable-to-create-has_one-association-within-after_initialize-of-nested-belongs_to-association</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>&quot;rails associations after_initialize belongs_to&quot;</tag>
  <title>Unable to create has_one association within after_initialize  of nested belongs_to association </title>
  <updated-at type="datetime">2011-02-02T17:52:01+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">4</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>feldercarb</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4354</url>
  <priority-name nil="true"></priority-name>
  <original-body>When following an after_initialize chain through multiple layers of an object hierarchy, has_one associations created within a belongs_to association do not remain in the object hierarchy when returning up the chain.

The following classes are from the associated test case:

    class Book &lt; ActiveRecord::Base
        has_many :stories
        def after_initialize
            stories.build( :book =&gt; self ) if stories.empty?
        end
    end

    class Story &lt; ActiveRecord::Base
        belongs_to :book
        belongs_to :author
        def after_initialize
            build_author if author.nil?
        end
    end

    class Author &lt; ActiveRecord::Base
        has_one :profile
        def after_initialize
            build_profile if profile.nil?
        end
    end

    class Profile &lt; ActiveRecord::Base
        belongs_to :author
    end

If the above objects are defined, then creating a new Book will fire all after_initialize methods and we should end up with a Book with one Story attributed to one Author who has one Profile

Stepping through the methods proves that the Author.after_initialize creates the Profile, but when we return to the Story level, the Author does not have the created  Profile.

Therefore the test case:

    class BookTest &lt; ActiveSupport::TestCase
        test &quot;book has author profiles&quot; do
            b = Book.new
            assert_not_nil b.stories.first.author.profile, &quot;Author profile is missing&quot;
        end
    end

will fail when it should succeed.</original-body>
  <latest-body>When following an after_initialize chain through multiple layers of an object hierarchy, has_one associations created within a belongs_to association do not remain in the object hierarchy when returning up the chain.

The following classes are from the associated test case:

    class Book &lt; ActiveRecord::Base
        has_many :stories
        def after_initialize
            stories.build( :book =&gt; self ) if stories.empty?
        end
    end

    class Story &lt; ActiveRecord::Base
        belongs_to :book
        belongs_to :author
        def after_initialize
            build_author if author.nil?
        end
    end

    class Author &lt; ActiveRecord::Base
        has_one :profile
        def after_initialize
            build_profile if profile.nil?
        end
    end

    class Profile &lt; ActiveRecord::Base
        belongs_to :author
    end

If the above objects are defined, then creating a new Book will fire all after_initialize methods and we should end up with a Book with one Story attributed to one Author who has one Profile

Stepping through the methods proves that the Author.after_initialize creates the Profile, but when we return to the Story level, the Author does not have the created  Profile.

Therefore the test case:

    class BookTest &lt; ActiveSupport::TestCase
        test &quot;book has author profiles&quot; do
            b = Book.new
            assert_not_nil b.stories.first.author.profile, &quot;Author profile is missing&quot;
        end
    end

will fail when it should succeed.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When following an after_initialize chain through multiple layers
of an object hierarchy, has_one associations created within a
belongs_to association do not remain in the object hierarchy when
returning up the chain.&lt;/p&gt;
&lt;p&gt;The following classes are from the associated test case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Book &amp;lt; ActiveRecord::Base
    has_many :stories
    def after_initialize
        stories.build( :book =&amp;gt; self ) if stories.empty?
    end
end

class Story &amp;lt; ActiveRecord::Base
    belongs_to :book
    belongs_to :author
    def after_initialize
        build_author if author.nil?
    end
end

class Author &amp;lt; ActiveRecord::Base
    has_one :profile
    def after_initialize
        build_profile if profile.nil?
    end
end

class Profile &amp;lt; ActiveRecord::Base
    belongs_to :author
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If the above objects are defined, then creating a new Book will
fire all after_initialize methods and we should end up with a Book
with one Story attributed to one Author who has one Profile&lt;/p&gt;
&lt;p&gt;Stepping through the methods proves that the
Author.after_initialize creates the Profile, but when we return to
the Story level, the Author does not have the created Profile.&lt;/p&gt;
&lt;p&gt;Therefore the test case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class BookTest &amp;lt; ActiveSupport::TestCase
    test &quot;book has author profiles&quot; do
        b = Book.new
        assert_not_nil b.stories.first.author.profile, &quot;Author profile is missing&quot;
    end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;will fail when it should succeed.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When following an after_initialize chain through multiple layers of an object hierarchy, has_one associations created within a belongs_to association do not remain in the object hierarchy when returning up the chain.

The following classes are from the associated test case:

    class Book &lt; ActiveRecord::Base
        has_many :stories
        def after_initialize
            stories.build( :book =&gt; self ) if stories.empty?
        end
    end

    class Story &lt; ActiveRecord::Base
        belongs_to :book
        belongs_to :author
        def after_initialize
            build_author if author.nil?
        end
    end

    class Author &lt; ActiveRecord::Base
        has_one :profile
        def after_initialize
            build_profile if profile.nil?
        end
    end

    class Profile &lt; ActiveRecord::Base
        belongs_to :author
    end

If the above objects are defined, then creating a new Book will fire all after_initialize methods and we should end up with a Book with one Story attributed to one Author who has one Profile

Stepping through the methods proves that the Author.after_initialize creates the Profile, but when we return to the Story level, the Author does not have the created  Profile.

Therefore the test case:

    class BookTest &lt; ActiveSupport::TestCase
        test &quot;book has author profiles&quot; do
            b = Book.new
            assert_not_nil b.stories.first.author.profile, &quot;Author profile is missing&quot;
        end
    end

will fail when it should succeed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When following an after_initialize chain through multiple layers
of an object hierarchy, has_one associations created within a
belongs_to association do not remain in the object hierarchy when
returning up the chain.&lt;/p&gt;
&lt;p&gt;The following classes are from the associated test case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Book &amp;lt; ActiveRecord::Base
    has_many :stories
    def after_initialize
        stories.build( :book =&amp;gt; self ) if stories.empty?
    end
end

class Story &amp;lt; ActiveRecord::Base
    belongs_to :book
    belongs_to :author
    def after_initialize
        build_author if author.nil?
    end
end

class Author &amp;lt; ActiveRecord::Base
    has_one :profile
    def after_initialize
        build_profile if profile.nil?
    end
end

class Profile &amp;lt; ActiveRecord::Base
    belongs_to :author
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If the above objects are defined, then creating a new Book will
fire all after_initialize methods and we should end up with a Book
with one Story attributed to one Author who has one Profile&lt;/p&gt;
&lt;p&gt;Stepping through the methods proves that the
Author.after_initialize creates the Profile, but when we return to
the Story level, the Author does not have the created Profile.&lt;/p&gt;
&lt;p&gt;Therefore the test case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class BookTest &amp;lt; ActiveSupport::TestCase
    test &quot;book has author profiles&quot; do
        b = Book.new
        assert_not_nil b.stories.first.author.profile, &quot;Author profile is missing&quot;
    end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;will fail when it should succeed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-09T06:52:20+01:00</created-at>
      <creator-id type="integer">33287</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4354</number>
      <permalink>unable-to-create-has_one-association-within-after_initialize-of-nested-belongs_to-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails associations after_initialize belongs_to&quot;</tag>
      <title>Unable to create has_one association within after_initialize  of nested belongs_to association </title>
      <updated-at type="datetime">2010-04-09T06:52:34+01:00</updated-at>
      <user-id type="integer">33287</user-id>
      <version type="integer">1</version>
      <user-name>feldercarb</user-name>
      <creator-name>feldercarb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4354</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I have a temporary work-around for this which requires the removal of all after_initialize methods and calling the after_initialize functionality manually.

If you go in and change all of the after_initialize methods to something like &quot;build_associations&quot;, then call the build_association methods after each object is created, and chain the build_associations methods, it works.

So if we change the models from the first report to:

    class Book &lt; ActiveRecord::Base
        has_many :stories
        def build_associations
            s = stories.build( :book =&gt; self ) if stories.empty?
            s.build_associations
        end
    end

    class Story &lt; ActiveRecord::Base
        belongs_to :book
        belongs_to :author
        def build_associations
            build_author if author.nil?
            author.build_associations
        end
    end

    class Author &lt; ActiveRecord::Base
        has_one :profile
        def build_associations
            build_profile if profile.nil?
        end
    end

The test will succeed.  (See attached belongstoafterinitializefailureworking.tgz file for full app)

I don't know the full reasoning behind this except that we are not inside the framework's object initialization process when we initialize the associations.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have a temporary work-around for this which requires the
removal of all after_initialize methods and calling the
after_initialize functionality manually.&lt;/p&gt;
&lt;p&gt;If you go in and change all of the after_initialize methods to
something like &quot;build_associations&quot;, then call the
build_association methods after each object is created, and chain
the build_associations methods, it works.&lt;/p&gt;
&lt;p&gt;So if we change the models from the first report to:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Book &amp;lt; ActiveRecord::Base
    has_many :stories
    def build_associations
        s = stories.build( :book =&amp;gt; self ) if stories.empty?
        s.build_associations
    end
end

class Story &amp;lt; ActiveRecord::Base
    belongs_to :book
    belongs_to :author
    def build_associations
        build_author if author.nil?
        author.build_associations
    end
end

class Author &amp;lt; ActiveRecord::Base
    has_one :profile
    def build_associations
        build_profile if profile.nil?
    end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The test will succeed. (See attached
belongstoafterinitializefailureworking.tgz file for full app)&lt;/p&gt;
&lt;p&gt;I don't know the full reasoning behind this except that we are
not inside the framework's object initialization process when we
initialize the associations.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-09T15:56:00+01:00</created-at>
      <creator-id type="integer">33287</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4354</number>
      <permalink>unable-to-create-has_one-association-within-after_initialize-of-nested-belongs_to-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails associations after_initialize belongs_to&quot;</tag>
      <title>Unable to create has_one association within after_initialize  of nested belongs_to association </title>
      <updated-at type="datetime">2010-04-09T15:56:20+01:00</updated-at>
      <user-id type="integer">33287</user-id>
      <version type="integer">2</version>
      <user-name>feldercarb</user-name>
      <creator-name>feldercarb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4354</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:44:05+00:00</created-at>
      <creator-id type="integer">33287</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4354</number>
      <permalink>unable-to-create-has_one-association-within-after_initialize-of-nested-belongs_to-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;rails associations after_initialize belongs_to&quot;</tag>
      <title>Unable to create has_one association within after_initialize  of nested belongs_to association </title>
      <updated-at type="datetime">2011-02-02T17:51:20+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>feldercarb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4354</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:44:07+00:00</created-at>
      <creator-id type="integer">33287</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4354</number>
      <permalink>unable-to-create-has_one-association-within-after_initialize-of-nested-belongs_to-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;rails associations after_initialize belongs_to&quot;</tag>
      <title>Unable to create has_one association within after_initialize  of nested belongs_to association </title>
      <updated-at type="datetime">2011-02-02T17:52:01+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>feldercarb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4354</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>812cfb872aa7b7581c727f31586766a08e607352</code>
      <content-type>application/x-compressed-tar</content-type>
      <created-at type="datetime">2010-04-09T06:52:20+01:00</created-at>
      <filename>belongstoafterinitializefailure.tgz</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">476779</id>
      <size type="integer">84006</size>
      <uploader-id type="integer">33287</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/476779/belongstoafterinitializefailure.tgz</url>
    </attachment>
    <attachment type="Attachment">
      <code>8f5487ceb2d99b61c6e0e47394dc237fd203d1cf</code>
      <content-type>application/x-compressed-tar</content-type>
      <created-at type="datetime">2010-04-09T15:56:00+01:00</created-at>
      <filename>belongstoafterinitializefailureworking.tgz</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">477227</id>
      <size type="integer">83981</size>
      <uploader-id type="integer">33287</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/477227/belongstoafterinitializefailureworking.tgz</url>
    </attachment>
  </attachments>
</ticket>
