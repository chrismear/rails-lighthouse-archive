From ea12b3d486d1ad3f048bd7874643f97855f9f579 Mon Sep 17 00:00:00 2001
From: Seth Fitzsimmons <seth@mojodna.net>
Date: Sun, 14 Dec 2008 10:48:04 -0800
Subject: [PATCH] use Mime::JS in place of explicit 'text/javascript'

---
 actionpack/lib/action_controller/integration.rb    |    2 +-
 actionpack/lib/action_controller/test_process.rb   |    2 +-
 actionpack/test/controller/integration_test.rb     |   10 ++--
 actionpack/test/controller/mime_responds_test.rb   |   20 +++---
 actionpack/test/controller/render_test.rb          |    6 +-
 actionpack/test/template/asset_tag_helper_test.rb  |   60 ++++++++++----------
 actionpack/test/template/javascript_helper_test.rb |    8 +-
 actionpack/test/template/prototype_helper_test.rb  |   18 +++---
 .../test/template/scriptaculous_helper_test.rb     |   22 ++++----
 actionpack/test/template/url_helper_test.rb        |    8 +-
 10 files changed, 78 insertions(+), 78 deletions(-)

diff --git a/actionpack/lib/action_controller/integration.rb b/actionpack/lib/action_controller/integration.rb
index 0f0db03..acc4d3a 100644
--- a/actionpack/lib/action_controller/integration.rb
+++ b/actionpack/lib/action_controller/integration.rb
@@ -227,7 +227,7 @@ module ActionController
       def xml_http_request(request_method, path, parameters = nil, headers = nil)
         headers ||= {}
         headers['X-Requested-With'] = 'XMLHttpRequest'
-        headers['Accept'] ||= 'text/javascript, text/html, application/xml, ' +
+        headers['Accept'] ||= "#{Mime::JS}, text/html, application/xml, " +
                               'text/xml, */*'
 
         process(request_method, path, parameters, headers)
diff --git a/actionpack/lib/action_controller/test_process.rb b/actionpack/lib/action_controller/test_process.rb
index 78dc382..1d5b6f0 100644
--- a/actionpack/lib/action_controller/test_process.rb
+++ b/actionpack/lib/action_controller/test_process.rb
@@ -413,7 +413,7 @@ module ActionController #:nodoc:
 
     def xml_http_request(request_method, action, parameters = nil, session = nil, flash = nil)
       @request.env['HTTP_X_REQUESTED_WITH'] = 'XMLHttpRequest'
-      @request.env['HTTP_ACCEPT'] = 'text/javascript, text/html, application/xml, text/xml, */*'
+      @request.env['HTTP_ACCEPT'] = "#{Mime::JS}, text/html, application/xml, text/xml, */*"
       returning __send__(request_method, action, parameters, session, flash) do
         @request.env.delete 'HTTP_X_REQUESTED_WITH'
         @request.env.delete 'HTTP_ACCEPT'
diff --git a/actionpack/test/controller/integration_test.rb b/actionpack/test/controller/integration_test.rb
index 6a793c8..bbc6e2b 100644
--- a/actionpack/test/controller/integration_test.rb
+++ b/actionpack/test/controller/integration_test.rb
@@ -136,7 +136,7 @@ class SessionTest < Test::Unit::TestCase
     path = "/index"; params = "blah"; headers = {:location => 'blah'}
     headers_after_xhr = headers.merge(
       "X-Requested-With" => "XMLHttpRequest",
-      "Accept"           => "text/javascript, text/html, application/xml, text/xml, */*"
+      "Accept"           => "#{Mime::JS}, text/html, application/xml, text/xml, */*"
     )
     @session.expects(:process).with(:get,path,params,headers_after_xhr)
     @session.xml_http_request(:get,path,params,headers)
@@ -146,7 +146,7 @@ class SessionTest < Test::Unit::TestCase
     path = "/index"; params = "blah"; headers = {:location => 'blah'}
     headers_after_xhr = headers.merge(
       "X-Requested-With" => "XMLHttpRequest",
-      "Accept"           => "text/javascript, text/html, application/xml, text/xml, */*"
+      "Accept"           => "#{Mime::JS}, text/html, application/xml, text/xml, */*"
     )
     @session.expects(:process).with(:post,path,params,headers_after_xhr)
     @session.xml_http_request(:post,path,params,headers)
@@ -156,7 +156,7 @@ class SessionTest < Test::Unit::TestCase
     path = "/index"; params = "blah"; headers = {:location => 'blah'}
     headers_after_xhr = headers.merge(
       "X-Requested-With" => "XMLHttpRequest",
-      "Accept"           => "text/javascript, text/html, application/xml, text/xml, */*"
+      "Accept"           => "#{Mime::JS}, text/html, application/xml, text/xml, */*"
     )
     @session.expects(:process).with(:put,path,params,headers_after_xhr)
     @session.xml_http_request(:put,path,params,headers)
@@ -166,7 +166,7 @@ class SessionTest < Test::Unit::TestCase
     path = "/index"; params = "blah"; headers = {:location => 'blah'}
     headers_after_xhr = headers.merge(
       "X-Requested-With" => "XMLHttpRequest",
-      "Accept"           => "text/javascript, text/html, application/xml, text/xml, */*"
+      "Accept"           => "#{Mime::JS}, text/html, application/xml, text/xml, */*"
     )
     @session.expects(:process).with(:delete,path,params,headers_after_xhr)
     @session.xml_http_request(:delete,path,params,headers)
@@ -176,7 +176,7 @@ class SessionTest < Test::Unit::TestCase
     path = "/index"; params = "blah"; headers = {:location => 'blah'}
     headers_after_xhr = headers.merge(
       "X-Requested-With" => "XMLHttpRequest",
-      "Accept"           => "text/javascript, text/html, application/xml, text/xml, */*"
+      "Accept"           => "#{Mime::JS}, text/html, application/xml, text/xml, */*"
     )
     @session.expects(:process).with(:head,path,params,headers_after_xhr)
     @session.xml_http_request(:head,path,params,headers)
diff --git a/actionpack/test/controller/mime_responds_test.rb b/actionpack/test/controller/mime_responds_test.rb
index dc59180..a4b8339 100644
--- a/actionpack/test/controller/mime_responds_test.rb
+++ b/actionpack/test/controller/mime_responds_test.rb
@@ -205,7 +205,7 @@ class MimeControllerTest < ActionController::TestCase
   end
 
   def test_js_or_html
-    @request.accept = "text/javascript, text/html"
+    @request.accept = "#{Mime::JS}, text/html"
     get :js_or_html
     assert_equal 'JS', @response.body
 
@@ -238,7 +238,7 @@ class MimeControllerTest < ActionController::TestCase
   end
 
   def test_js_or_anything
-    @request.accept = "text/javascript, */*"
+    @request.accept = "#{Mime::JS}, */*"
     get :js_or_html
     assert_equal 'JS', @response.body
 
@@ -255,9 +255,9 @@ class MimeControllerTest < ActionController::TestCase
     assert_equal "text/html", @response.content_type
     assert_equal 'Hello world!', @response.body
 
-    @request.accept = "text/javascript"
+    @request.accept = Mime::JS
     get :using_defaults
-    assert_equal "text/javascript", @response.content_type
+    assert_equal Mime::JS, @response.content_type
     assert_equal '$("body").visualEffect("highlight");', @response.body
 
     @request.accept = "application/xml"
@@ -272,9 +272,9 @@ class MimeControllerTest < ActionController::TestCase
     assert_equal "text/html", @response.content_type
     assert_equal 'Hello world!', @response.body
 
-    @request.accept = "text/javascript"
+    @request.accept = Mime::JS
     get :using_defaults_with_type_list
-    assert_equal "text/javascript", @response.content_type
+    assert_equal Mime::JS, @response.content_type
     assert_equal '$("body").visualEffect("highlight");', @response.body
 
     @request.accept = "application/xml"
@@ -296,7 +296,7 @@ class MimeControllerTest < ActionController::TestCase
   end
 
   def test_synonyms
-    @request.accept = "application/javascript"
+    @request.accept = "text/javascript"
     get :js_or_html
     assert_equal 'JS', @response.body
 
@@ -334,7 +334,7 @@ class MimeControllerTest < ActionController::TestCase
     get :handle_any
     assert_equal 'HTML', @response.body
 
-    @request.accept = "text/javascript"
+    @request.accept = Mime::JS
     get :handle_any
     assert_equal 'Either JS or XML', @response.body
 
@@ -361,7 +361,7 @@ class MimeControllerTest < ActionController::TestCase
   end
 
   def test_handle_any_any_javascript
-    @request.accept = "text/javascript"
+    @request.accept = Mime::JS
     get :handle_any_any
     assert_equal 'Whatever you ask for, I got it', @response.body
   end
@@ -373,7 +373,7 @@ class MimeControllerTest < ActionController::TestCase
   end
 
   def test_rjs_type_skips_layout
-    @request.accept = "text/javascript"
+    @request.accept = Mime::JS
     get :all_types_with_layout
     assert_equal 'RJS for all_types_with_layout', @response.body
   end
diff --git a/actionpack/test/controller/render_test.rb b/actionpack/test/controller/render_test.rb
index 87733c2..4e6c56d 100644
--- a/actionpack/test/controller/render_test.rb
+++ b/actionpack/test/controller/render_test.rb
@@ -147,7 +147,7 @@ class TestController < ActionController::Base
   end
 
   def render_json_with_custom_content_type
-    render :json => {:hello => 'world'}.to_json, :content_type => 'text/javascript'
+    render :json => {:hello => 'world'}.to_json, :content_type => Mime::JS
   end
 
   def render_symbol_json
@@ -780,7 +780,7 @@ class RenderTest < ActionController::TestCase
   def test_render_json_with_custom_content_type
     get :render_json_with_custom_content_type
     assert_equal '{"hello": "world"}', @response.body
-    assert_equal 'text/javascript', @response.content_type
+    assert_equal Mime::JS, @response.content_type
   end
 
   def test_render_symbol_json
@@ -860,7 +860,7 @@ class RenderTest < ActionController::TestCase
   def test_render_vanilla_js
     get :render_vanilla_js_hello
     assert_equal "alert('hello')", @response.body
-    assert_equal "text/javascript", @response.content_type
+    assert_equal Mime::JS, @response.content_type
   end
 
   def test_render_xml
diff --git a/actionpack/test/template/asset_tag_helper_test.rb b/actionpack/test/template/asset_tag_helper_test.rb
index 7597927..4c6df21 100644
--- a/actionpack/test/template/asset_tag_helper_test.rb
+++ b/actionpack/test/template/asset_tag_helper_test.rb
@@ -76,15 +76,15 @@ class AssetTagHelperTest < ActionView::TestCase
   }
 
   JavascriptIncludeToTag = {
-    %(javascript_include_tag("xmlhr")) => %(<script src="/javascripts/xmlhr.js" type="text/javascript"></script>),
-    %(javascript_include_tag("xmlhr.js")) => %(<script src="/javascripts/xmlhr.js" type="text/javascript"></script>),
-    %(javascript_include_tag("xmlhr", :lang => "vbscript")) => %(<script lang="vbscript" src="/javascripts/xmlhr.js" type="text/javascript"></script>),
-    %(javascript_include_tag("common.javascript", "/elsewhere/cools")) => %(<script src="/javascripts/common.javascript" type="text/javascript"></script>\n<script src="/elsewhere/cools.js" type="text/javascript"></script>),
-    %(javascript_include_tag(:defaults)) => %(<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>),
-    %(javascript_include_tag(:all)) => %(<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>\n<script src="/javascripts/bank.js" type="text/javascript"></script>\n<script src="/javascripts/robber.js" type="text/javascript"></script>\n<script src="/javascripts/version.1.0.js" type="text/javascript"></script>),
-    %(javascript_include_tag(:all, :recursive => true)) => %(<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>\n<script src="/javascripts/bank.js" type="text/javascript"></script>\n<script src="/javascripts/robber.js" type="text/javascript"></script>\n<script src="/javascripts/subdir/subdir.js" type="text/javascript"></script>\n<script src="/javascripts/version.1.0.js" type="text/javascript"></script>),
-    %(javascript_include_tag(:defaults, "test")) => %(<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/test.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>),
-    %(javascript_include_tag("test", :defaults)) => %(<script src="/javascripts/test.js" type="text/javascript"></script>\n<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>)
+    %(javascript_include_tag("xmlhr")) => %(<script src="/javascripts/xmlhr.js" type="#{Mime::JS}"></script>),
+    %(javascript_include_tag("xmlhr.js")) => %(<script src="/javascripts/xmlhr.js" type="#{Mime::JS}"></script>),
+    %(javascript_include_tag("xmlhr", :lang => "vbscript")) => %(<script lang="vbscript" src="/javascripts/xmlhr.js" type="#{Mime::JS}"></script>),
+    %(javascript_include_tag("common.javascript", "/elsewhere/cools")) => %(<script src="/javascripts/common.javascript" type="#{Mime::JS}"></script>\n<script src="/elsewhere/cools.js" type="#{Mime::JS}"></script>),
+    %(javascript_include_tag(:defaults)) => %(<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>),
+    %(javascript_include_tag(:all)) => %(<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/bank.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/robber.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/version.1.0.js" type="#{Mime::JS}"></script>),
+    %(javascript_include_tag(:all, :recursive => true)) => %(<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/bank.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/robber.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/subdir/subdir.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/version.1.0.js" type="#{Mime::JS}"></script>),
+    %(javascript_include_tag(:defaults, "test")) => %(<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/test.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>),
+    %(javascript_include_tag("test", :defaults)) => %(<script src="/javascripts/test.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>)
   }
 
   StylePathToTag = {
@@ -163,31 +163,31 @@ class AssetTagHelperTest < ActionView::TestCase
 
   def test_javascript_include_tag_with_given_asset_id
     ENV["RAILS_ASSET_ID"] = "1"
-    assert_dom_equal(%(<script src="/javascripts/prototype.js?1" type="text/javascript"></script>\n<script src="/javascripts/effects.js?1" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js?1" type="text/javascript"></script>\n<script src="/javascripts/controls.js?1" type="text/javascript"></script>\n<script src="/javascripts/application.js?1" type="text/javascript"></script>), javascript_include_tag(:defaults))
+    assert_dom_equal(%(<script src="/javascripts/prototype.js?1" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js?1" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js?1" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js?1" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js?1" type="#{Mime::JS}"></script>), javascript_include_tag(:defaults))
   end
 
   def test_register_javascript_include_default
     ENV["RAILS_ASSET_ID"] = ""
     ActionView::Helpers::AssetTagHelper::register_javascript_include_default 'slider'
-    assert_dom_equal  %(<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/slider.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>), javascript_include_tag(:defaults)
+    assert_dom_equal  %(<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/slider.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>), javascript_include_tag(:defaults)
   end
 
   def test_register_javascript_include_default_mixed_defaults
     ENV["RAILS_ASSET_ID"] = ""
     ActionView::Helpers::AssetTagHelper::register_javascript_include_default 'slider'
     ActionView::Helpers::AssetTagHelper::register_javascript_include_default 'lib1', '/elsewhere/blub/lib2'
-    assert_dom_equal  %(<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/slider.js" type="text/javascript"></script>\n<script src="/javascripts/lib1.js" type="text/javascript"></script>\n<script src="/elsewhere/blub/lib2.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>), javascript_include_tag(:defaults)
+    assert_dom_equal  %(<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/slider.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/lib1.js" type="#{Mime::JS}"></script>\n<script src="/elsewhere/blub/lib2.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>), javascript_include_tag(:defaults)
   end
 
   def test_custom_javascript_expansions
     ActionView::Helpers::AssetTagHelper::register_javascript_expansion :monkey => ["head", "body", "tail"]
-    assert_dom_equal  %(<script src="/javascripts/first.js" type="text/javascript"></script>\n<script src="/javascripts/head.js" type="text/javascript"></script>\n<script src="/javascripts/body.js" type="text/javascript"></script>\n<script src="/javascripts/tail.js" type="text/javascript"></script>\n<script src="/javascripts/last.js" type="text/javascript"></script>), javascript_include_tag('first', :monkey, 'last')
+    assert_dom_equal  %(<script src="/javascripts/first.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/head.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/body.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/tail.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/last.js" type="#{Mime::JS}"></script>), javascript_include_tag('first', :monkey, 'last')
   end
 
   def test_custom_javascript_expansions_and_defaults_puts_application_js_at_the_end
     ENV["RAILS_ASSET_ID"] = ""
     ActionView::Helpers::AssetTagHelper::register_javascript_expansion :monkey => ["head", "body", "tail"]
-    assert_dom_equal  %(<script src="/javascripts/first.js" type="text/javascript"></script>\n<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/head.js" type="text/javascript"></script>\n<script src="/javascripts/body.js" type="text/javascript"></script>\n<script src="/javascripts/tail.js" type="text/javascript"></script>\n<script src="/javascripts/last.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>), javascript_include_tag('first', :defaults, :monkey, 'last')
+    assert_dom_equal  %(<script src="/javascripts/first.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/head.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/body.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/tail.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/last.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>), javascript_include_tag('first', :defaults, :monkey, 'last')
   end
 
   def test_custom_javascript_expansions_with_undefined_symbol
@@ -287,14 +287,14 @@ class AssetTagHelperTest < ActionView::TestCase
     ActionController::Base.perform_caching = true
 
     assert_dom_equal(
-      %(<script src="http://a0.example.com/javascripts/all.js" type="text/javascript"></script>),
+      %(<script src="http://a0.example.com/javascripts/all.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => true)
     )
 
     assert File.exist?(File.join(ActionView::Helpers::AssetTagHelper::JAVASCRIPTS_DIR, 'all.js'))
 
     assert_dom_equal(
-      %(<script src="http://a0.example.com/javascripts/money.js" type="text/javascript"></script>),
+      %(<script src="http://a0.example.com/javascripts/money.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => "money")
     )
 
@@ -312,7 +312,7 @@ class AssetTagHelperTest < ActionView::TestCase
 
     assert_equal '/javascripts/scripts.js'.length, 23
     assert_dom_equal(
-      %(<script src="http://a23.example.com/javascripts/scripts.js" type="text/javascript"></script>),
+      %(<script src="http://a23.example.com/javascripts/scripts.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => 'scripts')
     )
 
@@ -335,7 +335,7 @@ class AssetTagHelperTest < ActionView::TestCase
 
     assert_equal '/javascripts/vanilla.js'.length, 23
     assert_dom_equal(
-      %(<script src="http://assets23.example.com/javascripts/vanilla.js" type="text/javascript"></script>),
+      %(<script src="http://assets23.example.com/javascripts/vanilla.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => 'vanilla')
     )
 
@@ -348,7 +348,7 @@ class AssetTagHelperTest < ActionView::TestCase
 
     assert_equal '/javascripts/secure.js'.length, 22
     assert_dom_equal(
-      %(<script src="https://localhost/javascripts/secure.js" type="text/javascript"></script>),
+      %(<script src="https://localhost/javascripts/secure.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => 'secure')
     )
 
@@ -375,7 +375,7 @@ class AssetTagHelperTest < ActionView::TestCase
 
     assert_equal '/javascripts/vanilla.js'.length, 23
     assert_dom_equal(
-      %(<script src="http://assets23.example.com/javascripts/vanilla.js" type="text/javascript"></script>),
+      %(<script src="http://assets23.example.com/javascripts/vanilla.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => 'vanilla')
     )
 
@@ -388,7 +388,7 @@ class AssetTagHelperTest < ActionView::TestCase
 
     assert_equal '/javascripts/secure.js'.length, 22
     assert_dom_equal(
-      %(<script src="https://localhost/javascripts/secure.js" type="text/javascript"></script>),
+      %(<script src="https://localhost/javascripts/secure.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => 'secure')
     )
 
@@ -406,7 +406,7 @@ class AssetTagHelperTest < ActionView::TestCase
 
     hash = '/javascripts/cache/money.js'.hash % 4
     assert_dom_equal(
-      %(<script src="http://a#{hash}.example.com/javascripts/cache/money.js" type="text/javascript"></script>),
+      %(<script src="http://a#{hash}.example.com/javascripts/cache/money.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => "cache/money")
     )
 
@@ -421,7 +421,7 @@ class AssetTagHelperTest < ActionView::TestCase
     ActionController::Base.perform_caching = true
 
     assert_dom_equal(
-      %(<script src="http://a0.example.com/javascripts/combined.js" type="text/javascript"></script>),
+      %(<script src="http://a0.example.com/javascripts/combined.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => "combined", :recursive => true)
     )
 
@@ -442,7 +442,7 @@ class AssetTagHelperTest < ActionView::TestCase
     ActionController::Base.perform_caching = true
 
     assert_dom_equal(
-      %(<script src="http://a0.example.com/javascripts/combined.js" type="text/javascript"></script>),
+      %(<script src="http://a0.example.com/javascripts/combined.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => "combined")
     )
 
@@ -463,14 +463,14 @@ class AssetTagHelperTest < ActionView::TestCase
     ActionController::Base.perform_caching = true
 
     assert_dom_equal(
-      %(<script src="/collaboration/hieraki/javascripts/all.js" type="text/javascript"></script>),
+      %(<script src="/collaboration/hieraki/javascripts/all.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => true)
     )
 
     assert File.exist?(File.join(ActionView::Helpers::AssetTagHelper::JAVASCRIPTS_DIR, 'all.js'))
 
     assert_dom_equal(
-      %(<script src="/collaboration/hieraki/javascripts/money.js" type="text/javascript"></script>),
+      %(<script src="/collaboration/hieraki/javascripts/money.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => "money")
     )
 
@@ -487,24 +487,24 @@ class AssetTagHelperTest < ActionView::TestCase
     ActionController::Base.perform_caching = false
 
     assert_dom_equal(
-      %(<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>\n<script src="/javascripts/bank.js" type="text/javascript"></script>\n<script src="/javascripts/robber.js" type="text/javascript"></script>\n<script src="/javascripts/version.1.0.js" type="text/javascript"></script>),
+      %(<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/bank.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/robber.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/version.1.0.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => true)
     )
 
     assert_dom_equal(
-      %(<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>\n<script src="/javascripts/bank.js" type="text/javascript"></script>\n<script src="/javascripts/robber.js" type="text/javascript"></script>\n<script src="/javascripts/subdir/subdir.js" type="text/javascript"></script>\n<script src="/javascripts/version.1.0.js" type="text/javascript"></script>),
+      %(<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/bank.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/robber.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/subdir/subdir.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/version.1.0.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => true, :recursive => true)
     )
 
     assert !File.exist?(File.join(ActionView::Helpers::AssetTagHelper::JAVASCRIPTS_DIR, 'all.js'))
 
     assert_dom_equal(
-      %(<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>\n<script src="/javascripts/bank.js" type="text/javascript"></script>\n<script src="/javascripts/robber.js" type="text/javascript"></script>\n<script src="/javascripts/version.1.0.js" type="text/javascript"></script>),
+      %(<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/bank.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/robber.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/version.1.0.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => "money")
     )
 
     assert_dom_equal(
-      %(<script src="/javascripts/prototype.js" type="text/javascript"></script>\n<script src="/javascripts/effects.js" type="text/javascript"></script>\n<script src="/javascripts/dragdrop.js" type="text/javascript"></script>\n<script src="/javascripts/controls.js" type="text/javascript"></script>\n<script src="/javascripts/application.js" type="text/javascript"></script>\n<script src="/javascripts/bank.js" type="text/javascript"></script>\n<script src="/javascripts/robber.js" type="text/javascript"></script>\n<script src="/javascripts/subdir/subdir.js" type="text/javascript"></script>\n<script src="/javascripts/version.1.0.js" type="text/javascript"></script>),
+      %(<script src="/javascripts/prototype.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/effects.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/dragdrop.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/controls.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/application.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/bank.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/robber.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/subdir/subdir.js" type="#{Mime::JS}"></script>\n<script src="/javascripts/version.1.0.js" type="#{Mime::JS}"></script>),
       javascript_include_tag(:all, :cache => "money", :recursive => true)
     )
 
diff --git a/actionpack/test/template/javascript_helper_test.rb b/actionpack/test/template/javascript_helper_test.rb
index d411111..471a093 100644
--- a/actionpack/test/template/javascript_helper_test.rb
+++ b/actionpack/test/template/javascript_helper_test.rb
@@ -82,27 +82,27 @@ class JavaScriptHelperTest < ActionView::TestCase
   def test_javascript_tag
     self.output_buffer = 'foo'
 
-    assert_dom_equal "<script type=\"text/javascript\">\n//<![CDATA[\nalert('hello')\n//]]>\n</script>",
+    assert_dom_equal "<script type=\"#{Mime::JS}\">\n//<![CDATA[\nalert('hello')\n//]]>\n</script>",
       javascript_tag("alert('hello')")
 
     assert_equal 'foo', output_buffer, 'javascript_tag without a block should not concat to output_buffer'
   end
 
   def test_javascript_tag_with_options
-    assert_dom_equal "<script id=\"the_js_tag\" type=\"text/javascript\">\n//<![CDATA[\nalert('hello')\n//]]>\n</script>",
+    assert_dom_equal "<script id=\"the_js_tag\" type=\"#{Mime::JS}\">\n//<![CDATA[\nalert('hello')\n//]]>\n</script>",
       javascript_tag("alert('hello')", :id => "the_js_tag")
   end
 
   def test_javascript_tag_with_block_in_erb
     __in_erb_template = ''
     javascript_tag { concat "alert('hello')" }
-    assert_dom_equal "<script type=\"text/javascript\">\n//<![CDATA[\nalert('hello')\n//]]>\n</script>", output_buffer
+    assert_dom_equal "<script type=\"#{Mime::JS}\">\n//<![CDATA[\nalert('hello')\n//]]>\n</script>", output_buffer
   end
 
   def test_javascript_tag_with_block_and_options_in_erb
     __in_erb_template = ''
     javascript_tag(:id => "the_js_tag") { concat "alert('hello')" }
-    assert_dom_equal "<script id=\"the_js_tag\" type=\"text/javascript\">\n//<![CDATA[\nalert('hello')\n//]]>\n</script>", output_buffer
+    assert_dom_equal "<script id=\"the_js_tag\" type=\"#{Mime::JS}\">\n//<![CDATA[\nalert('hello')\n//]]>\n</script>", output_buffer
   end
 
   def test_javascript_cdata_section
diff --git a/actionpack/test/template/prototype_helper_test.rb b/actionpack/test/template/prototype_helper_test.rb
index d6b86a3..fb23e10 100644
--- a/actionpack/test/template/prototype_helper_test.rb
+++ b/actionpack/test/template/prototype_helper_test.rb
@@ -107,13 +107,13 @@ class PrototypeHelperTest < PrototypeHelperBaseTest
   end
 
   def test_periodically_call_remote
-    assert_dom_equal %(<script type="text/javascript">\n//<![CDATA[\nnew PeriodicalExecuter(function() {new Ajax.Updater('schremser_bier', 'http://www.example.com/mehr_bier', {asynchronous:true, evalScripts:true})}, 10)\n//]]>\n</script>),
+    assert_dom_equal %(<script type="#{Mime::JS}">\n//<![CDATA[\nnew PeriodicalExecuter(function() {new Ajax.Updater('schremser_bier', 'http://www.example.com/mehr_bier', {asynchronous:true, evalScripts:true})}, 10)\n//]]>\n</script>),
       periodically_call_remote(:update => "schremser_bier", :url => { :action => "mehr_bier" })
   end
 
   def test_periodically_call_remote_with_frequency
     assert_dom_equal(
-      "<script type=\"text/javascript\">\n//<![CDATA[\nnew PeriodicalExecuter(function() {new Ajax.Request('http://www.example.com/', {asynchronous:true, evalScripts:true})}, 2)\n//]]>\n</script>",
+      "<script type=\"#{Mime::JS}\">\n//<![CDATA[\nnew PeriodicalExecuter(function() {new Ajax.Request('http://www.example.com/', {asynchronous:true, evalScripts:true})}, 2)\n//]]>\n</script>",
       periodically_call_remote(:frequency => 2)
     )
   end
@@ -224,38 +224,38 @@ class PrototypeHelperTest < PrototypeHelperBaseTest
   end
 
   def test_observe_field
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nnew Form.Element.Observer('glass', 300, function(element, value) {new Ajax.Request('http://www.example.com/reorder_if_empty', {asynchronous:true, evalScripts:true, parameters:value})})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nnew Form.Element.Observer('glass', 300, function(element, value) {new Ajax.Request('http://www.example.com/reorder_if_empty', {asynchronous:true, evalScripts:true, parameters:value})})\n//]]>\n</script>),
       observe_field("glass", :frequency => 5.minutes, :url => { :action => "reorder_if_empty" })
   end
 
   def test_observe_field_using_with_option
-    expected = %(<script type=\"text/javascript\">\n//<![CDATA[\nnew Form.Element.Observer('glass', 300, function(element, value) {new Ajax.Request('http://www.example.com/check_value', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(value)})})\n//]]>\n</script>)
+    expected = %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nnew Form.Element.Observer('glass', 300, function(element, value) {new Ajax.Request('http://www.example.com/check_value', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(value)})})\n//]]>\n</script>)
     assert_dom_equal expected, observe_field("glass", :frequency => 5.minutes, :url => { :action => "check_value" }, :with => 'id')
     assert_dom_equal expected, observe_field("glass", :frequency => 5.minutes, :url => { :action => "check_value" }, :with => "'id=' + encodeURIComponent(value)")
   end
 
   def test_observe_field_using_json_in_with_option
-    expected = %(<script type=\"text/javascript\">\n//<![CDATA[\nnew Form.Element.Observer('glass', 300, function(element, value) {new Ajax.Request('http://www.example.com/check_value', {asynchronous:true, evalScripts:true, parameters:{'id':value}})})\n//]]>\n</script>)
+    expected = %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nnew Form.Element.Observer('glass', 300, function(element, value) {new Ajax.Request('http://www.example.com/check_value', {asynchronous:true, evalScripts:true, parameters:{'id':value}})})\n//]]>\n</script>)
     assert_dom_equal expected, observe_field("glass", :frequency => 5.minutes, :url => { :action => "check_value" }, :with => "{'id':value}")
   end
 
   def test_observe_field_using_function_for_callback
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nnew Form.Element.Observer('glass', 300, function(element, value) {alert('Element changed')})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nnew Form.Element.Observer('glass', 300, function(element, value) {alert('Element changed')})\n//]]>\n</script>),
       observe_field("glass", :frequency => 5.minutes, :function => "alert('Element changed')")
   end
 
   def test_observe_form
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nnew Form.Observer('cart', 2, function(element, value) {new Ajax.Request('http://www.example.com/cart_changed', {asynchronous:true, evalScripts:true, parameters:value})})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nnew Form.Observer('cart', 2, function(element, value) {new Ajax.Request('http://www.example.com/cart_changed', {asynchronous:true, evalScripts:true, parameters:value})})\n//]]>\n</script>),
       observe_form("cart", :frequency => 2, :url => { :action => "cart_changed" })
   end
 
   def test_observe_form_using_function_for_callback
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nnew Form.Observer('cart', 2, function(element, value) {alert('Form changed')})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nnew Form.Observer('cart', 2, function(element, value) {alert('Form changed')})\n//]]>\n</script>),
       observe_form("cart", :frequency => 2, :function => "alert('Form changed')")
   end
 
   def test_observe_field_without_frequency
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nnew Form.Element.EventObserver('glass', function(element, value) {new Ajax.Request('http://www.example.com/', {asynchronous:true, evalScripts:true, parameters:value})})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nnew Form.Element.EventObserver('glass', function(element, value) {new Ajax.Request('http://www.example.com/', {asynchronous:true, evalScripts:true, parameters:value})})\n//]]>\n</script>),
       observe_field("glass")
   end
 
diff --git a/actionpack/test/template/scriptaculous_helper_test.rb b/actionpack/test/template/scriptaculous_helper_test.rb
index 690a775..1e35346 100644
--- a/actionpack/test/template/scriptaculous_helper_test.rb
+++ b/actionpack/test/template/scriptaculous_helper_test.rb
@@ -54,33 +54,33 @@ class ScriptaculousHelperTest < ActionView::TestCase
   
 
   def test_sortable_element
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nSortable.create(\"mylist\", {onUpdate:function(){new Ajax.Request('http://www.example.com/order', {asynchronous:true, evalScripts:true, parameters:Sortable.serialize(\"mylist\")})}})\n//]]>\n</script>), 
+    assert_dom_equal %(<script type=\"#{Mime::JS}">\n//<![CDATA[\nSortable.create(\"mylist\", {onUpdate:function(){new Ajax.Request('http://www.example.com/order', {asynchronous:true, evalScripts:true, parameters:Sortable.serialize(\"mylist\")})}})\n//]]>\n</script>), 
       sortable_element("mylist", :url => { :action => "order" })
-    assert_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nSortable.create(\"mylist\", {constraint:'horizontal', onUpdate:function(){new Ajax.Request('http://www.example.com/order', {asynchronous:true, evalScripts:true, parameters:Sortable.serialize(\"mylist\")})}, tag:'div'})\n//]]>\n</script>), 
+    assert_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nSortable.create(\"mylist\", {constraint:'horizontal', onUpdate:function(){new Ajax.Request('http://www.example.com/order', {asynchronous:true, evalScripts:true, parameters:Sortable.serialize(\"mylist\")})}, tag:'div'})\n//]]>\n</script>), 
       sortable_element("mylist", :tag => "div", :constraint => "horizontal", :url => { :action => "order" })
-    assert_dom_equal %|<script type=\"text/javascript\">\n//<![CDATA[\nSortable.create(\"mylist\", {constraint:'horizontal', containment:['list1','list2'], onUpdate:function(){new Ajax.Request('http://www.example.com/order', {asynchronous:true, evalScripts:true, parameters:Sortable.serialize(\"mylist\")})}})\n//]]>\n</script>|, 
+    assert_dom_equal %|<script type=\"#{Mime::JS}\">\n//<![CDATA[\nSortable.create(\"mylist\", {constraint:'horizontal', containment:['list1','list2'], onUpdate:function(){new Ajax.Request('http://www.example.com/order', {asynchronous:true, evalScripts:true, parameters:Sortable.serialize(\"mylist\")})}})\n//]]>\n</script>|, 
       sortable_element("mylist", :containment => ['list1','list2'], :constraint => "horizontal", :url => { :action => "order" })
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nSortable.create(\"mylist\", {constraint:'horizontal', containment:'list1', onUpdate:function(){new Ajax.Request('http://www.example.com/order', {asynchronous:true, evalScripts:true, parameters:Sortable.serialize(\"mylist\")})}})\n//]]>\n</script>), 
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nSortable.create(\"mylist\", {constraint:'horizontal', containment:'list1', onUpdate:function(){new Ajax.Request('http://www.example.com/order', {asynchronous:true, evalScripts:true, parameters:Sortable.serialize(\"mylist\")})}})\n//]]>\n</script>), 
       sortable_element("mylist", :containment => 'list1', :constraint => "horizontal", :url => { :action => "order" })
   end
   
   def test_draggable_element
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nnew Draggable(\"product_13\", {})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nnew Draggable(\"product_13\", {})\n//]]>\n</script>),
       draggable_element("product_13")
-    assert_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nnew Draggable(\"product_13\", {revert:true})\n//]]>\n</script>),
+    assert_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nnew Draggable(\"product_13\", {revert:true})\n//]]>\n</script>),
       draggable_element("product_13", :revert => true)
   end
   
   def test_drop_receiving_element
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nDroppables.add(\"droptarget1\", {onDrop:function(element){new Ajax.Request('http://www.example.com/', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(element.id)})}})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nDroppables.add(\"droptarget1\", {onDrop:function(element){new Ajax.Request('http://www.example.com/', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(element.id)})}})\n//]]>\n</script>),
       drop_receiving_element("droptarget1")
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nDroppables.add(\"droptarget1\", {accept:'products', onDrop:function(element){new Ajax.Request('http://www.example.com/', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(element.id)})}})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nDroppables.add(\"droptarget1\", {accept:'products', onDrop:function(element){new Ajax.Request('http://www.example.com/', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(element.id)})}})\n//]]>\n</script>),
       drop_receiving_element("droptarget1", :accept => 'products')
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nDroppables.add(\"droptarget1\", {accept:'products', onDrop:function(element){new Ajax.Updater('infobox', 'http://www.example.com/', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(element.id)})}})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nDroppables.add(\"droptarget1\", {accept:'products', onDrop:function(element){new Ajax.Updater('infobox', 'http://www.example.com/', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(element.id)})}})\n//]]>\n</script>),
       drop_receiving_element("droptarget1", :accept => 'products', :update => 'infobox')
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nDroppables.add(\"droptarget1\", {accept:['tshirts','mugs'], onDrop:function(element){new Ajax.Updater('infobox', 'http://www.example.com/', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(element.id)})}})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nDroppables.add(\"droptarget1\", {accept:['tshirts','mugs'], onDrop:function(element){new Ajax.Updater('infobox', 'http://www.example.com/', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(element.id)})}})\n//]]>\n</script>),
       drop_receiving_element("droptarget1", :accept => ['tshirts','mugs'], :update => 'infobox')
-    assert_dom_equal %(<script type=\"text/javascript\">\n//<![CDATA[\nDroppables.add("droptarget1", {hoverclass:'dropready', onDrop:function(element){if (confirm('Are you sure?')) { new Ajax.Request('http://www.example.com/update_drop', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(element.id)}); }}})\n//]]>\n</script>),
+    assert_dom_equal %(<script type=\"#{Mime::JS}\">\n//<![CDATA[\nDroppables.add("droptarget1", {hoverclass:'dropready', onDrop:function(element){if (confirm('Are you sure?')) { new Ajax.Request('http://www.example.com/update_drop', {asynchronous:true, evalScripts:true, parameters:'id=' + encodeURIComponent(element.id)}); }}})\n//]]>\n</script>),
     drop_receiving_element('droptarget1', :hoverclass=>'dropready', :url=>{:action=>'update_drop'}, :confirm => 'Are you sure?')
 
   end
diff --git a/actionpack/test/template/url_helper_test.rb b/actionpack/test/template/url_helper_test.rb
index 2f6fa13..0de3cc8 100644
--- a/actionpack/test/template/url_helper_test.rb
+++ b/actionpack/test/template/url_helper_test.rb
@@ -288,11 +288,11 @@ class UrlHelperTest < ActionView::TestCase
   end
 
   def test_mail_to_with_javascript
-    assert_dom_equal "<script type=\"text/javascript\">eval(decodeURIComponent('%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%27%3c%61%20%68%72%65%66%3d%22%6d%61%69%6c%74%6f%3a%6d%65%40%64%6f%6d%61%69%6e%2e%63%6f%6d%22%3e%4d%79%20%65%6d%61%69%6c%3c%2f%61%3e%27%29%3b'))</script>", mail_to("me@domain.com", "My email", :encode => "javascript")
+    assert_dom_equal "<script type=\"#{Mime::JS}\">eval(decodeURIComponent('%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%27%3c%61%20%68%72%65%66%3d%22%6d%61%69%6c%74%6f%3a%6d%65%40%64%6f%6d%61%69%6e%2e%63%6f%6d%22%3e%4d%79%20%65%6d%61%69%6c%3c%2f%61%3e%27%29%3b'))</script>", mail_to("me@domain.com", "My email", :encode => "javascript")
   end
 
   def test_mail_to_with_javascript_unicode
-    assert_dom_equal "<script type=\"text/javascript\">eval(decodeURIComponent('%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%27%3c%61%20%68%72%65%66%3d%22%6d%61%69%6c%74%6f%3a%75%6e%69%63%6f%64%65%40%65%78%61%6d%70%6c%65%2e%63%6f%6d%22%3e%c3%ba%6e%69%63%6f%64%65%3c%2f%61%3e%27%29%3b'))</script>", mail_to("unicode@example.com", "únicode", :encode => "javascript")
+    assert_dom_equal "<script type=\"#{Mime::JS}\">eval(decodeURIComponent('%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%27%3c%61%20%68%72%65%66%3d%22%6d%61%69%6c%74%6f%3a%75%6e%69%63%6f%64%65%40%65%78%61%6d%70%6c%65%2e%63%6f%6d%22%3e%c3%ba%6e%69%63%6f%64%65%3c%2f%61%3e%27%29%3b'))</script>", mail_to("unicode@example.com", "únicode", :encode => "javascript")
   end
 
   def test_mail_with_options
@@ -316,8 +316,8 @@ class UrlHelperTest < ActionView::TestCase
     assert_dom_equal "<a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;%6d%65@%64%6f%6d%61%69%6e.%63%6f%6d\">&#109;&#101;&#40;&#97;&#116;&#41;&#100;&#111;&#109;&#97;&#105;&#110;&#46;&#99;&#111;&#109;</a>", mail_to("me@domain.com", nil, :encode => "hex", :replace_at => "(at)")
     assert_dom_equal "<a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;%6d%65@%64%6f%6d%61%69%6e.%63%6f%6d\">My email</a>", mail_to("me@domain.com", "My email", :encode => "hex", :replace_at => "(at)")
     assert_dom_equal "<a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;%6d%65@%64%6f%6d%61%69%6e.%63%6f%6d\">&#109;&#101;&#40;&#97;&#116;&#41;&#100;&#111;&#109;&#97;&#105;&#110;&#40;&#100;&#111;&#116;&#41;&#99;&#111;&#109;</a>", mail_to("me@domain.com", nil, :encode => "hex", :replace_at => "(at)", :replace_dot => "(dot)")
-    assert_dom_equal "<script type=\"text/javascript\">eval(decodeURIComponent('%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%27%3c%61%20%68%72%65%66%3d%22%6d%61%69%6c%74%6f%3a%6d%65%40%64%6f%6d%61%69%6e%2e%63%6f%6d%22%3e%4d%79%20%65%6d%61%69%6c%3c%2f%61%3e%27%29%3b'))</script>", mail_to("me@domain.com", "My email", :encode => "javascript", :replace_at => "(at)", :replace_dot => "(dot)")
-    assert_dom_equal "<script type=\"text/javascript\">eval(decodeURIComponent('%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%27%3c%61%20%68%72%65%66%3d%22%6d%61%69%6c%74%6f%3a%6d%65%40%64%6f%6d%61%69%6e%2e%63%6f%6d%22%3e%6d%65%28%61%74%29%64%6f%6d%61%69%6e%28%64%6f%74%29%63%6f%6d%3c%2f%61%3e%27%29%3b'))</script>", mail_to("me@domain.com", nil, :encode => "javascript", :replace_at => "(at)", :replace_dot => "(dot)")
+    assert_dom_equal "<script type=\"#{Mime::JS}\">eval(decodeURIComponent('%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%27%3c%61%20%68%72%65%66%3d%22%6d%61%69%6c%74%6f%3a%6d%65%40%64%6f%6d%61%69%6e%2e%63%6f%6d%22%3e%4d%79%20%65%6d%61%69%6c%3c%2f%61%3e%27%29%3b'))</script>", mail_to("me@domain.com", "My email", :encode => "javascript", :replace_at => "(at)", :replace_dot => "(dot)")
+    assert_dom_equal "<script type=\"#{Mime::JS}\">eval(decodeURIComponent('%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%27%3c%61%20%68%72%65%66%3d%22%6d%61%69%6c%74%6f%3a%6d%65%40%64%6f%6d%61%69%6e%2e%63%6f%6d%22%3e%6d%65%28%61%74%29%64%6f%6d%61%69%6e%28%64%6f%74%29%63%6f%6d%3c%2f%61%3e%27%29%3b'))</script>", mail_to("me@domain.com", nil, :encode => "javascript", :replace_at => "(at)", :replace_dot => "(dot)")
   end
 
   def protect_against_forgery?
-- 
1.6.0.4

