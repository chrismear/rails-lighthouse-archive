<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-14T11:49:57+01:00</created-at>
  <creator-id type="integer">20574</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">826</number>
  <permalink>delete-in-a-relation-doesn-t-call-sweeper</permalink>
  <priority type="integer">283</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>2.1 activerecord</tag>
  <title>delete in a relation doesn't call sweeper</title>
  <updated-at type="datetime">2010-04-11T02:03:19+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">5</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Guillermo &#193;lvarez</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/826</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Summary
-------
* @users_friend.user.friends.delete(@users_friend.friend) # Dont call the sweeper observer
* @users_friend.destroy # Call the sweeper
* @users_friend.user.friends &lt;&lt; @users_friend.friend # Call the sweeper

In these situation, destroy and destroy2 do similary things.
* One do:       @users_friend.user.friends.delete(@users_friend.friend)
* And the other: @users_friend.destroy

Only the second one call the observer. I can understand these, and imagine why happens. But if these doesn't execute as expected, something like:

    @users_friend.user.friends &lt;&lt; @users_friend.friend

Must don't run too.


I put the important code here, and add a sample app as attachment.

    class User &lt; ActiveRecord::Base
      has_many :users_friends
      has_many :friends, :through =&gt; :users_friends
    end

    class UsersFriend &lt; ActiveRecord::Base
      belongs_to :user
      belongs_to :friend, :class_name =&gt; &quot;User&quot;, :foreign_key =&gt; &quot;friend_id&quot;
    end

    class UsersFriendSweeper &lt; ActionController::Caching::Sweeper
      observe UsersFriend
      def after_destroy(record)
        puts &quot;after_destroy&quot;
        debugger
      end
      def before_destroy(record)
        puts &quot;before_destroy&quot;
        debugger
      end
    end

    class UsersFriendsController &lt; ApplicationController
      cache_sweeper :users_friend_sweeper
...
      # POST /users_friends
      # POST /users_friends.xml
      def create
        @users_friend = UsersFriend.new(params[:users_friend])

        @users_friend.user.friends &lt;&lt; @users_friend.friend #These call the sweeper before_save
        respond_to do |format|
            flash[:notice] = 'UsersFriend was successfully created.'
            format.html { redirect_to(@users_friend.user) }
            format.xml  { render :xml =&gt; @users_friend, :status =&gt; :created, :location =&gt; @users_friend }
            format.js
        end
      end

      def destroy
        @users_friend = UsersFriend.find(params[:id])
        @users_friend.user.friends.delete(@users_friend.friend) #Dont call the sweeper

        respond_to do |format|
          format.html { redirect_to(users_friends_url) }
          format.xml  { head :ok }
          format.js   { render :action =&gt; &quot;create&quot;}
        end
      end

      def destroy2
        @users_friend = UsersFriend.find(params[:id])
        @users_friend.destroy #These call the sweeper before_destroy

        respond_to do |format|
          format.html { redirect_to(users_friends_url) }
          format.xml  { head :ok }
          format.js   { render :action =&gt; &quot;create&quot;}
        end
      end
    ...
    end</original-body>
  <latest-body>Summary
-------
* @users_friend.user.friends.delete(@users_friend.friend) # Dont call the sweeper observer
* @users_friend.destroy # Call the sweeper
* @users_friend.user.friends &lt;&lt; @users_friend.friend # Call the sweeper

In these situation, destroy and destroy2 do similary things.
* One do:       @users_friend.user.friends.delete(@users_friend.friend)
* And the other: @users_friend.destroy

Only the second one call the observer. I can understand these, and imagine why happens. But if these doesn't execute as expected, something like:

    @users_friend.user.friends &lt;&lt; @users_friend.friend

Must don't run too.


I put the important code here, and add a sample app as attachment.

    class User &lt; ActiveRecord::Base
      has_many :users_friends
      has_many :friends, :through =&gt; :users_friends
    end

    class UsersFriend &lt; ActiveRecord::Base
      belongs_to :user
      belongs_to :friend, :class_name =&gt; &quot;User&quot;, :foreign_key =&gt; &quot;friend_id&quot;
    end

    class UsersFriendSweeper &lt; ActionController::Caching::Sweeper
      observe UsersFriend
      def after_destroy(record)
        puts &quot;after_destroy&quot;
        debugger
      end
      def before_destroy(record)
        puts &quot;before_destroy&quot;
        debugger
      end
    end

    class UsersFriendsController &lt; ApplicationController
      cache_sweeper :users_friend_sweeper
...
      # POST /users_friends
      # POST /users_friends.xml
      def create
        @users_friend = UsersFriend.new(params[:users_friend])

        @users_friend.user.friends &lt;&lt; @users_friend.friend #These call the sweeper before_save
        respond_to do |format|
            flash[:notice] = 'UsersFriend was successfully created.'
            format.html { redirect_to(@users_friend.user) }
            format.xml  { render :xml =&gt; @users_friend, :status =&gt; :created, :location =&gt; @users_friend }
            format.js
        end
      end

      def destroy
        @users_friend = UsersFriend.find(params[:id])
        @users_friend.user.friends.delete(@users_friend.friend) #Dont call the sweeper

        respond_to do |format|
          format.html { redirect_to(users_friends_url) }
          format.xml  { head :ok }
          format.js   { render :action =&gt; &quot;create&quot;}
        end
      end

      def destroy2
        @users_friend = UsersFriend.find(params[:id])
        @users_friend.destroy #These call the sweeper before_destroy

        respond_to do |format|
          format.html { redirect_to(users_friends_url) }
          format.xml  { head :ok }
          format.js   { render :action =&gt; &quot;create&quot;}
        end
      end
    ...
    end</latest-body>
  <original-body-html>&lt;div&gt;&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;@users_friend.user.friends.delete(@users_friend.friend) # Dont
call the sweeper observer&lt;/li&gt;
&lt;li&gt;@users_friend.destroy # Call the sweeper&lt;/li&gt;
&lt;li&gt;@users_friend.user.friends &amp;lt;&amp;lt; @users_friend.friend # Call
the sweeper&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In these situation, destroy and destroy2 do similary things.&lt;br&gt;
* One do: @users_friend.user.friends.delete(@users_friend.friend) *
And the other: @users_friend.destroy&lt;/p&gt;
&lt;p&gt;Only the second one call the observer. I can understand these,
and imagine why happens. But if these doesn't execute as expected,
something like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@users_friend.user.friends &amp;lt;&amp;lt; @users_friend.friend&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Must don't run too.&lt;/p&gt;
&lt;p&gt;I put the important code here, and add a sample app as
attachment.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class User &amp;lt; ActiveRecord::Base
  has_many :users_friends
  has_many :friends, :through =&amp;gt; :users_friends
end

class UsersFriend &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :friend, :class_name =&amp;gt; &quot;User&quot;, :foreign_key =&amp;gt; &quot;friend_id&quot;
end

class UsersFriendSweeper &amp;lt; ActionController::Caching::Sweeper
  observe UsersFriend
  def after_destroy(record)
    puts &quot;after_destroy&quot;
    debugger
  end
  def before_destroy(record)
    puts &quot;before_destroy&quot;
    debugger
  end
end

class UsersFriendsController &amp;lt; ApplicationController
  cache_sweeper :users_friend_sweeper&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  # POST /users_friends
  # POST /users_friends.xml
  def create
    @users_friend = UsersFriend.new(params[:users_friend])

    @users_friend.user.friends &amp;lt;&amp;lt; @users_friend.friend #These call the sweeper before_save
    respond_to do |format|
        flash[:notice] = 'UsersFriend was successfully created.'
        format.html { redirect_to(@users_friend.user) }
        format.xml  { render :xml =&amp;gt; @users_friend, :status =&amp;gt; :created, :location =&amp;gt; @users_friend }
        format.js
    end
  end

  def destroy
    @users_friend = UsersFriend.find(params[:id])
    @users_friend.user.friends.delete(@users_friend.friend) #Dont call the sweeper

    respond_to do |format|
      format.html { redirect_to(users_friends_url) }
      format.xml  { head :ok }
      format.js   { render :action =&amp;gt; &quot;create&quot;}
    end
  end

  def destroy2
    @users_friend = UsersFriend.find(params[:id])
    @users_friend.destroy #These call the sweeper before_destroy

    respond_to do |format|
      format.html { redirect_to(users_friends_url) }
      format.xml  { head :ok }
      format.js   { render :action =&amp;gt; &quot;create&quot;}
    end
  end
...
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Summary
-------
* @users_friend.user.friends.delete(@users_friend.friend) # Dont call the sweeper observer
* @users_friend.destroy # Call the sweeper
* @users_friend.user.friends &lt;&lt; @users_friend.friend # Call the sweeper

In these situation, destroy and destroy2 do similary things.
* One do:       @users_friend.user.friends.delete(@users_friend.friend)
* And the other: @users_friend.destroy

Only the second one call the observer. I can understand these, and imagine why happens. But if these doesn't execute as expected, something like:

    @users_friend.user.friends &lt;&lt; @users_friend.friend

Must don't run too.


I put the important code here, and add a sample app as attachment.

    class User &lt; ActiveRecord::Base
      has_many :users_friends
      has_many :friends, :through =&gt; :users_friends
    end

    class UsersFriend &lt; ActiveRecord::Base
      belongs_to :user
      belongs_to :friend, :class_name =&gt; &quot;User&quot;, :foreign_key =&gt; &quot;friend_id&quot;
    end

    class UsersFriendSweeper &lt; ActionController::Caching::Sweeper
      observe UsersFriend
      def after_destroy(record)
        puts &quot;after_destroy&quot;
        debugger
      end
      def before_destroy(record)
        puts &quot;before_destroy&quot;
        debugger
      end
    end

    class UsersFriendsController &lt; ApplicationController
      cache_sweeper :users_friend_sweeper
...
      # POST /users_friends
      # POST /users_friends.xml
      def create
        @users_friend = UsersFriend.new(params[:users_friend])

        @users_friend.user.friends &lt;&lt; @users_friend.friend #These call the sweeper before_save
        respond_to do |format|
            flash[:notice] = 'UsersFriend was successfully created.'
            format.html { redirect_to(@users_friend.user) }
            format.xml  { render :xml =&gt; @users_friend, :status =&gt; :created, :location =&gt; @users_friend }
            format.js
        end
      end

      def destroy
        @users_friend = UsersFriend.find(params[:id])
        @users_friend.user.friends.delete(@users_friend.friend) #Dont call the sweeper

        respond_to do |format|
          format.html { redirect_to(users_friends_url) }
          format.xml  { head :ok }
          format.js   { render :action =&gt; &quot;create&quot;}
        end
      end

      def destroy2
        @users_friend = UsersFriend.find(params[:id])
        @users_friend.destroy #These call the sweeper before_destroy

        respond_to do |format|
          format.html { redirect_to(users_friends_url) }
          format.xml  { head :ok }
          format.js   { render :action =&gt; &quot;create&quot;}
        end
      end
    ...
    end</body>
      <body-html>&lt;div&gt;&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;@users_friend.user.friends.delete(@users_friend.friend) # Dont
call the sweeper observer&lt;/li&gt;
&lt;li&gt;@users_friend.destroy # Call the sweeper&lt;/li&gt;
&lt;li&gt;@users_friend.user.friends &amp;lt;&amp;lt; @users_friend.friend # Call
the sweeper&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In these situation, destroy and destroy2 do similary things.&lt;br&gt;
* One do: @users_friend.user.friends.delete(@users_friend.friend) *
And the other: @users_friend.destroy&lt;/p&gt;
&lt;p&gt;Only the second one call the observer. I can understand these,
and imagine why happens. But if these doesn't execute as expected,
something like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@users_friend.user.friends &amp;lt;&amp;lt; @users_friend.friend&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Must don't run too.&lt;/p&gt;
&lt;p&gt;I put the important code here, and add a sample app as
attachment.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class User &amp;lt; ActiveRecord::Base
  has_many :users_friends
  has_many :friends, :through =&amp;gt; :users_friends
end

class UsersFriend &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :friend, :class_name =&amp;gt; &quot;User&quot;, :foreign_key =&amp;gt; &quot;friend_id&quot;
end

class UsersFriendSweeper &amp;lt; ActionController::Caching::Sweeper
  observe UsersFriend
  def after_destroy(record)
    puts &quot;after_destroy&quot;
    debugger
  end
  def before_destroy(record)
    puts &quot;before_destroy&quot;
    debugger
  end
end

class UsersFriendsController &amp;lt; ApplicationController
  cache_sweeper :users_friend_sweeper&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  # POST /users_friends
  # POST /users_friends.xml
  def create
    @users_friend = UsersFriend.new(params[:users_friend])

    @users_friend.user.friends &amp;lt;&amp;lt; @users_friend.friend #These call the sweeper before_save
    respond_to do |format|
        flash[:notice] = 'UsersFriend was successfully created.'
        format.html { redirect_to(@users_friend.user) }
        format.xml  { render :xml =&amp;gt; @users_friend, :status =&amp;gt; :created, :location =&amp;gt; @users_friend }
        format.js
    end
  end

  def destroy
    @users_friend = UsersFriend.find(params[:id])
    @users_friend.user.friends.delete(@users_friend.friend) #Dont call the sweeper

    respond_to do |format|
      format.html { redirect_to(users_friends_url) }
      format.xml  { head :ok }
      format.js   { render :action =&amp;gt; &quot;create&quot;}
    end
  end

  def destroy2
    @users_friend = UsersFriend.find(params[:id])
    @users_friend.destroy #These call the sweeper before_destroy

    respond_to do |format|
      format.html { redirect_to(users_friends_url) }
      format.xml  { head :ok }
      format.js   { render :action =&amp;gt; &quot;create&quot;}
    end
  end
...
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-14T11:51:47+01:00</created-at>
      <creator-id type="integer">20574</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">826</number>
      <permalink>delete-in-a-relation-doesn-t-call-sweeper</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord</tag>
      <title>delete in a relation doesn't call sweeper</title>
      <updated-at type="datetime">2010-04-11T02:01:28+01:00</updated-at>
      <user-id type="integer">20574</user-id>
      <version type="integer">1</version>
      <user-name>Guillermo &#193;lvarez</user-name>
      <creator-name>Guillermo &#193;lvarez</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/826</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm having the same problem.  The workaround is simple but it seems dangerous to have observers not listening to such things.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm having the same problem. The workaround is simple but it
seems dangerous to have observers not listening to such things.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-19T01:52:55+01:00</created-at>
      <creator-id type="integer">20574</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1 activerecord
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">826</number>
      <permalink>delete-in-a-relation-doesn-t-call-sweeper</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord</tag>
      <title>delete in a relation doesn't call sweeper</title>
      <updated-at type="datetime">2008-09-19T01:52:59+01:00</updated-at>
      <user-id type="integer">21754</user-id>
      <version type="integer">2</version>
      <user-name>legolin</user-name>
      <creator-name>Guillermo &#193;lvarez</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/826</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Could you please upload a patch/failing test - http://rails.lighthouseapp.com/projects/8994/sending-patches ?

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Could you please upload a patch/failing test - &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/sending-patches&quot;&gt;http://rails.lighthouseapp.com/p...&lt;/a&gt;
?&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-20T19:15:13+00:00</created-at>
      <creator-id type="integer">20574</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">826</number>
      <permalink>delete-in-a-relation-doesn-t-call-sweeper</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>2.1 activerecord</tag>
      <title>delete in a relation doesn't call sweeper</title>
      <updated-at type="datetime">2008-12-20T19:15:14+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>Guillermo &#193;lvarez</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/826</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Please submit a patch if you wish to see this fixed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please submit a patch if you wish to see this fixed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-11T01:53:34+01:00</created-at>
      <creator-id type="integer">20574</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">826</number>
      <permalink>delete-in-a-relation-doesn-t-call-sweeper</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.1 activerecord</tag>
      <title>delete in a relation doesn't call sweeper</title>
      <updated-at type="datetime">2010-04-11T01:53:36+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">4</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Guillermo &#193;lvarez</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/826</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>destroy sweepers should only work for destroys. The idea of using delete is that it runs like destroy, but without the callbacks. Use destroy rather than delete.</body>
      <body-html>&lt;div&gt;&lt;p&gt;destroy sweepers should only work for destroys. The idea of
using delete is that it runs like destroy, but without the
callbacks. Use destroy rather than delete.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-11T02:03:18+01:00</created-at>
      <creator-id type="integer">20574</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">826</number>
      <permalink>delete-in-a-relation-doesn-t-call-sweeper</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.1 activerecord</tag>
      <title>delete in a relation doesn't call sweeper</title>
      <updated-at type="datetime">2010-04-11T02:03:19+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">5</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Guillermo &#193;lvarez</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/826</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>91a52c17c87a6f8e7363197780139e3d7f246eef</code>
      <content-type>application/x-bzip</content-type>
      <created-at type="datetime">2008-08-14T11:49:57+01:00</created-at>
      <filename>users_friend_sweeper.tar.bz2</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">39188</id>
      <size type="integer">97793</size>
      <uploader-id type="integer">20574</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/39188/users_friend_sweeper.tar.bz2</url>
    </attachment>
  </attachments>
</ticket>
