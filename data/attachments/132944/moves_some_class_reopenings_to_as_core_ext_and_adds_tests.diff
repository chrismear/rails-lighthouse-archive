From d6269c2a2fcad3b85aede82e2f7896034d7767ff Mon Sep 17 00:00:00 2001
From: Xavier Noria <fxn@hashref.com>
Date: Sat, 13 Jun 2009 12:46:09 +0200
Subject: [PATCH] moves reopening of core classes to add generic stuff from Action Pack to AS/core_ext and adds tests

---
 .../lib/action_controller/routing/routing_ext.rb   |   53 ++------------------
 .../lib/active_support/core_ext/boolean.rb         |    1 +
 .../active_support/core_ext/boolean/conversions.rb |   11 ++++
 activesupport/lib/active_support/core_ext/nil.rb   |    1 +
 .../lib/active_support/core_ext/nil/conversions.rb |    5 ++
 .../lib/active_support/core_ext/regexp.rb          |   25 +++++++++
 activesupport/test/core_ext/boolean_ext_test.rb    |    9 +++
 activesupport/test/core_ext/nil_ext_test.rb        |    5 ++
 activesupport/test/core_ext/object_ext_test.rb     |    6 ++
 activesupport/test/core_ext/regexp_ext_test.rb     |   26 ++++++++++
 10 files changed, 93 insertions(+), 49 deletions(-)
 create mode 100644 activesupport/lib/active_support/core_ext/boolean.rb
 create mode 100644 activesupport/lib/active_support/core_ext/boolean/conversions.rb
 create mode 100644 activesupport/lib/active_support/core_ext/nil.rb
 create mode 100644 activesupport/lib/active_support/core_ext/nil/conversions.rb
 create mode 100644 activesupport/lib/active_support/core_ext/regexp.rb
 create mode 100644 activesupport/test/core_ext/boolean_ext_test.rb
 create mode 100644 activesupport/test/core_ext/nil_ext_test.rb
 create mode 100644 activesupport/test/core_ext/regexp_ext_test.rb

diff --git a/actionpack/lib/action_controller/routing/routing_ext.rb b/actionpack/lib/action_controller/routing/routing_ext.rb
index 4a82b2a..5e5b22b 100644
--- a/actionpack/lib/action_controller/routing/routing_ext.rb
+++ b/actionpack/lib/action_controller/routing/routing_ext.rb
@@ -1,49 +1,4 @@
-class Object
-  def to_param
-    to_s
-  end
-end
-
-class TrueClass
-  def to_param
-    self
-  end
-end
-
-class FalseClass
-  def to_param
-    self
-  end
-end
-
-class NilClass
-  def to_param
-    self
-  end
-end
-
-class Regexp #:nodoc:
-  def number_of_captures
-    Regexp.new("|#{source}").match('').captures.length
-  end
-
-  def multiline?
-    options & MULTILINE == MULTILINE
-  end
-
-  class << self
-    def optionalize(pattern)
-      case unoptionalize(pattern)
-        when /\A(.|\(.*\))\Z/ then "#{pattern}?"
-        else "(?:#{pattern})?"
-      end
-    end
-
-    def unoptionalize(pattern)
-      [/\A\(\?:(.*)\)\?\Z/, /\A(.|\(.*\))\?\Z/].each do |regexp|
-        return $1 if regexp =~ pattern
-      end
-      return pattern
-    end
-  end
-end
+require 'active_support/core_ext/object/conversions'
+require 'active_support/core_ext/boolean/conversions'
+require 'active_support/core_ext/nil/conversions'
+require 'active_support/core_ext/regexp'
diff --git a/activesupport/lib/active_support/core_ext/boolean.rb b/activesupport/lib/active_support/core_ext/boolean.rb
new file mode 100644
index 0000000..be83428
--- /dev/null
+++ b/activesupport/lib/active_support/core_ext/boolean.rb
@@ -0,0 +1 @@
+require 'active_support/core_ext/boolean/conversions'
\ No newline at end of file
diff --git a/activesupport/lib/active_support/core_ext/boolean/conversions.rb b/activesupport/lib/active_support/core_ext/boolean/conversions.rb
new file mode 100644
index 0000000..534ebb7
--- /dev/null
+++ b/activesupport/lib/active_support/core_ext/boolean/conversions.rb
@@ -0,0 +1,11 @@
+class TrueClass
+  def to_param
+    self
+  end
+end
+
+class FalseClass
+  def to_param
+    self
+  end
+end
diff --git a/activesupport/lib/active_support/core_ext/nil.rb b/activesupport/lib/active_support/core_ext/nil.rb
new file mode 100644
index 0000000..e9f63c4
--- /dev/null
+++ b/activesupport/lib/active_support/core_ext/nil.rb
@@ -0,0 +1 @@
+require 'active_support/core_ext/nil/conversions'
\ No newline at end of file
diff --git a/activesupport/lib/active_support/core_ext/nil/conversions.rb b/activesupport/lib/active_support/core_ext/nil/conversions.rb
new file mode 100644
index 0000000..6ceb500
--- /dev/null
+++ b/activesupport/lib/active_support/core_ext/nil/conversions.rb
@@ -0,0 +1,5 @@
+class NilClass
+  def to_param
+    self
+  end
+end
diff --git a/activesupport/lib/active_support/core_ext/regexp.rb b/activesupport/lib/active_support/core_ext/regexp.rb
new file mode 100644
index 0000000..1a04c70
--- /dev/null
+++ b/activesupport/lib/active_support/core_ext/regexp.rb
@@ -0,0 +1,25 @@
+class Regexp #:nodoc:
+  def number_of_captures
+    Regexp.new("|#{source}").match('').captures.length
+  end
+
+  def multiline?
+    options & MULTILINE == MULTILINE
+  end
+
+  class << self
+    def optionalize(pattern)
+      case unoptionalize(pattern)
+        when /\A(.|\(.*\))\Z/ then "#{pattern}?"
+        else "(?:#{pattern})?"
+      end
+    end
+
+    def unoptionalize(pattern)
+      [/\A\(\?:(.*)\)\?\Z/, /\A(.|\(.*\))\?\Z/].each do |regexp|
+        return $1 if regexp =~ pattern
+      end
+      return pattern
+    end
+  end
+end
diff --git a/activesupport/test/core_ext/boolean_ext_test.rb b/activesupport/test/core_ext/boolean_ext_test.rb
new file mode 100644
index 0000000..751f703
--- /dev/null
+++ b/activesupport/test/core_ext/boolean_ext_test.rb
@@ -0,0 +1,9 @@
+class BooleanExtAccessTests < Test::Unit::TestCase
+  def test_to_param_on_true
+    assert_equal true, true.to_param
+  end
+
+  def test_to_param_on_false
+    assert_equal false, false.to_param
+  end
+end
\ No newline at end of file
diff --git a/activesupport/test/core_ext/nil_ext_test.rb b/activesupport/test/core_ext/nil_ext_test.rb
new file mode 100644
index 0000000..945d3af
--- /dev/null
+++ b/activesupport/test/core_ext/nil_ext_test.rb
@@ -0,0 +1,5 @@
+class NilExtAccessTests < Test::Unit::TestCase
+  def test_to_param
+    assert_nil nil.to_param
+  end
+end
\ No newline at end of file
diff --git a/activesupport/test/core_ext/object_ext_test.rb b/activesupport/test/core_ext/object_ext_test.rb
index a413d33..72e3bff 100644
--- a/activesupport/test/core_ext/object_ext_test.rb
+++ b/activesupport/test/core_ext/object_ext_test.rb
@@ -5,4 +5,10 @@ class ObjectExtTest < Test::Unit::TestCase
     foo = Object.new
     assert_equal foo, foo.tap { |x| assert_equal foo, x; :bar }
   end
+
+  def test_to_param
+    foo = Object.new
+    foo.class_eval("def to_s; 'foo'; end")
+    assert_equal 'foo', foo.to_param
+  end
 end
diff --git a/activesupport/test/core_ext/regexp_ext_test.rb b/activesupport/test/core_ext/regexp_ext_test.rb
new file mode 100644
index 0000000..f710998
--- /dev/null
+++ b/activesupport/test/core_ext/regexp_ext_test.rb
@@ -0,0 +1,26 @@
+class RegexpExtAccessTests < Test::Unit::TestCase
+  def test_number_of_captures
+    assert_equal 0, //.number_of_captures
+    assert_equal 1, /.(.)./.number_of_captures
+    assert_equal 2, /.(.).(?:.).(.)/.number_of_captures
+    assert_equal 3, /.((.).(?:.).(.))/.number_of_captures
+  end
+
+  def test_multiline
+    assert   //m.multiline?
+    assert ! //.multiline?
+    assert ! /(?m:)/.multiline?
+  end
+
+  def test_optionalize
+    assert "a?", Regexp.optionalize("a")
+    assert "(?:foo)?", Regexp.optionalize("foo")
+    assert "", Regexp.optionalize("")
+  end
+
+  def test_unoptionalize
+    assert "a", Regexp.unoptionalize("a?")
+    assert "foo", Regexp.unoptionalize("(?:foo)")
+    assert "", Regexp.unoptionalize("")
+  end
+end
\ No newline at end of file
-- 
1.6.1.2

