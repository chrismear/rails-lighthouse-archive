From 0a4180323a810227cb175877f40a1dd1115195c1 Mon Sep 17 00:00:00 2001
From: Don Wilson <robert.don.wilson@gmail.com>
Date: Tue, 2 Nov 2010 08:38:40 -0600
Subject: [PATCH] Added :negative_format option to number_to_currency function

---
 .../lib/action_view/helpers/number_helper.rb       |   23 +++++++++++++------
 .../test/template/number_helper_i18n_test.rb       |    5 +++-
 actionpack/test/template/number_helper_test.rb     |    4 +++
 3 files changed, 24 insertions(+), 8 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/number_helper.rb b/actionpack/lib/action_view/helpers/number_helper.rb
index 1488e72..42e2100 100644
--- a/actionpack/lib/action_view/helpers/number_helper.rb
+++ b/actionpack/lib/action_view/helpers/number_helper.rb
@@ -15,7 +15,7 @@ module ActionView
     # unchanged if can't be converted into a valid number.
     module NumberHelper
 
-      DEFAULT_CURRENCY_VALUES = { :format => "%u%n", :unit => "$", :separator => ".", :delimiter => ",",
+      DEFAULT_CURRENCY_VALUES = { :format => "%u%n", :negative_format => "-%u%n", :unit => "$", :separator => ".", :delimiter => ",",
                                   :precision => 2, :significant => false, :strip_insignificant_zeros => false }
 
       # Raised when argument +number+ param given to the helpers is invalid and
@@ -81,12 +81,13 @@ module ActionView
       # in the +options+ hash.
       #
       # ==== Options
-      # * <tt>:locale</tt>     -  Sets the locale to be used for formatting (defaults to current locale).
-      # * <tt>:precision</tt>  -  Sets the level of precision (defaults to 2).
-      # * <tt>:unit</tt>       - Sets the denomination of the currency (defaults to "$").
-      # * <tt>:separator</tt>  - Sets the separator between the units (defaults to ".").
-      # * <tt>:delimiter</tt>  - Sets the thousands delimiter (defaults to ",").
-      # * <tt>:format</tt>     - Sets the format of the output string (defaults to "%u%n"). The field types are:
+      # * <tt>:locale</tt>           - Sets the locale to be used for formatting (defaults to current locale).
+      # * <tt>:precision</tt>        - Sets the level of precision (defaults to 2).
+      # * <tt>:unit</tt>             - Sets the denomination of the currency (defaults to "$").
+      # * <tt>:separator</tt>        - Sets the separator between the units (defaults to ".").
+      # * <tt>:delimiter</tt>        - Sets the thousands delimiter (defaults to ",").
+      # * <tt>:format</tt>           - Sets the format of the output string (defaults to "%u%n").
+      # * <tt>:negative_format</tt>  - Sets the format of the output string (defaults to "-" + :format). The field types are:
       #
       #     %u  The currency unit
       #     %n  The number
@@ -97,6 +98,8 @@ module ActionView
       #  number_to_currency(1234567890.506, :precision => 3)  # => $1,234,567,890.506
       #  number_to_currency(1234567890.506, :locale => :fr)   # => 1 234 567 890,506 â‚¬
       #
+      #  number_to_currency(1234567890.50, :negative_format => "(%u%n)")
+      #  # => ($1,234,567,890.51)
       #  number_to_currency(1234567890.50, :unit => "&pound;", :separator => ",", :delimiter => "")
       #  # => &pound;1234567890,50
       #  number_to_currency(1234567890.50, :unit => "&pound;", :separator => ",", :delimiter => "", :format => "%n %u")
@@ -110,11 +113,17 @@ module ActionView
         currency  = I18n.translate(:'number.currency.format', :locale => options[:locale], :default => {})
 
         defaults  = DEFAULT_CURRENCY_VALUES.merge(defaults).merge!(currency)
+        defaults[:negative_format] = "-" + options[:format] if options[:format]
         options   = defaults.merge!(options)
 
         unit      = options.delete(:unit)
         format    = options.delete(:format)
 
+        if number.to_f < 0
+          format = options.delete(:negative_format)
+          number = number.respond_to?("abs") ? number.abs : number.sub(/^-/, '')
+        end
+
         begin
           value = number_with_precision(number, options.merge(:raise => true))
           format.gsub(/%n/, value).gsub(/%u/, unit).html_safe
diff --git a/actionpack/test/template/number_helper_i18n_test.rb b/actionpack/test/template/number_helper_i18n_test.rb
index c82ead6..5df09b4 100644
--- a/actionpack/test/template/number_helper_i18n_test.rb
+++ b/actionpack/test/template/number_helper_i18n_test.rb
@@ -7,7 +7,7 @@ class NumberHelperTest < ActionView::TestCase
     I18n.backend.store_translations 'ts',
       :number => {
         :format => { :precision => 3, :delimiter => ',', :separator => '.', :significant => false, :strip_insignificant_zeros => false },
-        :currency => { :format => { :unit => '&$', :format => '%u - %n', :precision => 2 } },
+        :currency => { :format => { :unit => '&$', :format => '%u - %n', :negative_format => '(%u - %n)', :precision => 2 } },
         :human => {
           :format => {
             :precision => 2,
@@ -43,11 +43,14 @@ class NumberHelperTest < ActionView::TestCase
 
   def test_number_to_i18n_currency
     assert_equal("&$ - 10.00", number_to_currency(10, :locale => 'ts'))
+    assert_equal("(&$ - 10.00)", number_to_currency(-10, :locale => 'ts'))
+    assert_equal("-10.00 - &$", number_to_currency(-10, :locale => 'ts', :format => "%n - %u"))
   end
 
   def test_number_to_currency_with_clean_i18n_settings
     clean_i18n do
       assert_equal("$10.00", number_to_currency(10))
+      assert_equal("-$10.00", number_to_currency(-10))
     end
   end
 
diff --git a/actionpack/test/template/number_helper_test.rb b/actionpack/test/template/number_helper_test.rb
index dcdf28d..ab12752 100644
--- a/actionpack/test/template/number_helper_test.rb
+++ b/actionpack/test/template/number_helper_test.rb
@@ -45,11 +45,15 @@ class NumberHelperTest < ActionView::TestCase
   def test_number_to_currency
     assert_equal("$1,234,567,890.50", number_to_currency(1234567890.50))
     assert_equal("$1,234,567,890.51", number_to_currency(1234567890.506))
+    assert_equal("-$1,234,567,890.50", number_to_currency(-1234567890.50))
+    assert_equal("-$ 1,234,567,890.50", number_to_currency(-1234567890.50, {:format => "%u %n"}))
+    assert_equal("($1,234,567,890.50)", number_to_currency(-1234567890.50, {:negative_format => "(%u%n)"}))
     assert_equal("$1,234,567,892", number_to_currency(1234567891.50, {:precision => 0}))
     assert_equal("$1,234,567,890.5", number_to_currency(1234567890.50, {:precision => 1}))
     assert_equal("&pound;1234567890,50", number_to_currency(1234567890.50, {:unit => "&pound;", :separator => ",", :delimiter => ""}))
     assert_equal("$1,234,567,890.50", number_to_currency("1234567890.50"))
     assert_equal("1,234,567,890.50 K&#269;", number_to_currency("1234567890.50", {:unit => "K&#269;", :format => "%n %u"}))
+    assert_equal("1,234,567,890.50 - K&#269;", number_to_currency("-1234567890.50", {:unit => "K&#269;", :format => "%n %u", :negative_format => "%n - %u"}))
   end
 
   def test_number_to_percentage
-- 
1.7.3.1.msysgit.0

