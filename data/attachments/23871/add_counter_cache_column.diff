From de70f8c89bcf3d611f43281c551efe7cfb0a01b9 Mon Sep 17 00:00:00 2001
From: Damian Janowski <damian.janowski@gmail.com>
Date: Tue, 20 May 2008 17:11:04 -0300
Subject: [PATCH] Adding add_counter_cache_column to ActiveRecord migrations.

---
 .../abstract/schema_statements.rb                  |   18 ++++++++++++++++++
 activerecord/test/cases/migration_test.rb          |   11 ++++++++++-
 2 files changed, 28 insertions(+), 1 deletions(-)

diff --git a/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb b/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb
index b57d0a3..3a81bea 100644
--- a/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb
@@ -412,6 +412,24 @@ module ActiveRecord
         remove_column table_name, :created_at
       end
 
+      # Adds a column to +table_name+ to be used together with the +:counter_cache+
+      # option on the model's association.
+      # ==== Examples
+      #  add_counter_cache_column :posts, :comments
+      def add_counter_cache_column(table_name, association_name)
+        association_name = association_name.to_s.sub(/_counter$/, '')
+        counter_name = "#{association_name}_count"
+        klass = table_name.to_s.classify.constantize
+
+        add_column table_name, counter_name, :integer, :default => 0
+
+        klass.reset_column_information
+
+        klass.find(:all).each do |o|
+          klass.update_counters o.id, counter_name => o.send(association_name).count
+        end
+      end
+
       protected
         def options_include_default?(options)
           options.include?(:default) && !(options[:null] == false && options[:default].nil?)
diff --git a/activerecord/test/cases/migration_test.rb b/activerecord/test/cases/migration_test.rb
index 527856b..93c065a 100644
--- a/activerecord/test/cases/migration_test.rb
+++ b/activerecord/test/cases/migration_test.rb
@@ -3,6 +3,7 @@ require 'bigdecimal/util'
 
 require 'models/person'
 require 'models/topic'
+require 'models/reference'
 
 require MIGRATIONS_ROOT + "/valid/1_people_have_last_names"
 require MIGRATIONS_ROOT + "/valid/2_we_need_reminders"
@@ -44,7 +45,7 @@ if ActiveRecord::Base.connection.supports_migrations?
       Reminder.reset_column_information
 
       %w(last_name key bio age height wealth birthday favorite_day
-         moment_of_truth male administrator funny).each do |column|
+         moment_of_truth male administrator funny references_count).each do |column|
         Person.connection.remove_column('people', column) rescue nil
       end
       Person.connection.remove_column("people", "first_name") rescue nil
@@ -324,6 +325,14 @@ if ActiveRecord::Base.connection.supports_migrations?
       assert_equal 9, wealth_column.precision
       assert_equal 7, wealth_column.scale
     end
+
+    def test_add_counter_cache_column
+      Person.connection.add_counter_cache_column :people, :references
+      Person.reset_column_information
+
+      assert Person.columns_hash.include?('references_count')
+      assert_equal 2, people(:michael).references.size
+    end
     
     def test_native_types
       Person.delete_all
-- 
1.5.4.5

