<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-04T04:17:52+00:00</created-at>
  <creator-id type="integer">52996</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4498</number>
  <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>235 activerecord bugmash patch postgresql timestamp</tag>
  <title>Rails loses precision when deserializing timestamps from Postgresql</title>
  <updated-at type="datetime">2011-03-05T00:02:43+00:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">13</version>
  <user-name>rails</user-name>
  <creator-name>Logan Bowers</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
  <priority-name nil="true"></priority-name>
  <original-body>When a timestamp is serialized/deserialized out of/into PostgreSQL, sometimes they do not match.  The following code will reproduce the issue after no more than ~100 iterations.  

Repro:
1. Get a rails project connected to a Postgres DB
2. Create a table in Postgres called 'tmps'.  From psql console:

CREATE TABLE tmps (id bigserial, atime timestamp with time zone );

3. Open the Rails console, run the following code: 

class Tmp &lt; ActiveRecord::Base

end
t = Tmp.create(:atime =&gt; Time.now)
conn = Tmp.connection
10000.times do 
  conn.select_one &quot;UPDATE tmps SET atime = NOW()&quot;
  ret_time = Tmp.find(t.id).atime
  result = conn.select_one(&quot;SELECT atime = #{conn.quote(ret_time)} AS tst, atime FROM tmps WHERE id = #{t.id}&quot;)
  
  formatted = ret_time.strftime(&quot;%a %b %d %H:%M:%S.#{ret_time.usec} %Z %Y&quot;)
  if(result['tst'] != 't')
    raise &quot;oops! Rails value '#{formatted}' not the same as SQL value '#{result['atime']}'&quot;
  else
    STDERR.puts(&quot;Rails time '#{formatted}' matches SQL time '#{result['atime']}'&quot;)
  end
end

After some iterations, the exception will raise.  This was observed against Rails 2.3.5.</original-body>
  <latest-body>When a timestamp is serialized/deserialized out of/into PostgreSQL, sometimes they do not match.  The following code will reproduce the issue after no more than ~100 iterations.  

Repro:
1. Get a rails project connected to a Postgres DB
2. Create a table in Postgres called 'tmps'.  From psql console:

CREATE TABLE tmps (id bigserial, atime timestamp with time zone );

3. Open the Rails console, run the following code: 

class Tmp &lt; ActiveRecord::Base

end
t = Tmp.create(:atime =&gt; Time.now)
conn = Tmp.connection
10000.times do 
  conn.select_one &quot;UPDATE tmps SET atime = NOW()&quot;
  ret_time = Tmp.find(t.id).atime
  result = conn.select_one(&quot;SELECT atime = #{conn.quote(ret_time)} AS tst, atime FROM tmps WHERE id = #{t.id}&quot;)
  
  formatted = ret_time.strftime(&quot;%a %b %d %H:%M:%S.#{ret_time.usec} %Z %Y&quot;)
  if(result['tst'] != 't')
    raise &quot;oops! Rails value '#{formatted}' not the same as SQL value '#{result['atime']}'&quot;
  else
    STDERR.puts(&quot;Rails time '#{formatted}' matches SQL time '#{result['atime']}'&quot;)
  end
end

After some iterations, the exception will raise.  This was observed against Rails 2.3.5.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When a timestamp is serialized/deserialized out of/into
PostgreSQL, sometimes they do not match. The following code will
reproduce the issue after no more than ~100 iterations.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Repro:&lt;br&gt;
1. Get a rails project connected to a Postgres DB&lt;br&gt;
2. Create a table in Postgres called 'tmps'. From psql console:&lt;/p&gt;
&lt;p&gt;CREATE TABLE tmps (id bigserial, atime timestamp with time zone
);&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the Rails console, run the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;class Tmp &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;p&gt;end&lt;br&gt;
t = Tmp.create(:atime =&amp;gt; Time.now)&lt;br&gt;
conn = Tmp.connection&lt;br&gt;
10000.times do&lt;br&gt;
conn.select_one &quot;UPDATE tmps SET atime = NOW()&quot; ret_time =
Tmp.find(t.id).atime result = conn.select_one(&quot;SELECT atime =
#{conn.quote(ret_time)} AS tst, atime FROM tmps WHERE id =
#{t.id}&quot;)&lt;/p&gt;
&lt;p&gt;formatted = ret_time.strftime(&quot;%a %b %d
%H:%M:%S.#{ret_time.usec} %Z %Y&quot;) if(result['tst'] != 't')&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;raise &quot;oops! Rails value '#{formatted}' not the same as SQL value '#{result['atime']}'&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;STDERR.puts(&quot;Rails time '#{formatted}' matches SQL time '#{result['atime']}'&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;After some iterations, the exception will raise. This was
observed against Rails 2.3.5.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When a timestamp is serialized/deserialized out of/into PostgreSQL, sometimes they do not match.  The following code will reproduce the issue after no more than ~100 iterations.  

Repro:
1. Get a rails project connected to a Postgres DB
2. Create a table in Postgres called 'tmps'.  From psql console:

CREATE TABLE tmps (id bigserial, atime timestamp with time zone );

3. Open the Rails console, run the following code: 

class Tmp &lt; ActiveRecord::Base

end
t = Tmp.create(:atime =&gt; Time.now)
conn = Tmp.connection
10000.times do 
  conn.select_one &quot;UPDATE tmps SET atime = NOW()&quot;
  ret_time = Tmp.find(t.id).atime
  result = conn.select_one(&quot;SELECT atime = #{conn.quote(ret_time)} AS tst, atime FROM tmps WHERE id = #{t.id}&quot;)
  
  formatted = ret_time.strftime(&quot;%a %b %d %H:%M:%S.#{ret_time.usec} %Z %Y&quot;)
  if(result['tst'] != 't')
    raise &quot;oops! Rails value '#{formatted}' not the same as SQL value '#{result['atime']}'&quot;
  else
    STDERR.puts(&quot;Rails time '#{formatted}' matches SQL time '#{result['atime']}'&quot;)
  end
end

After some iterations, the exception will raise.  This was observed against Rails 2.3.5.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When a timestamp is serialized/deserialized out of/into
PostgreSQL, sometimes they do not match. The following code will
reproduce the issue after no more than ~100 iterations.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Repro:&lt;br&gt;
1. Get a rails project connected to a Postgres DB&lt;br&gt;
2. Create a table in Postgres called 'tmps'. From psql console:&lt;/p&gt;
&lt;p&gt;CREATE TABLE tmps (id bigserial, atime timestamp with time zone
);&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the Rails console, run the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;class Tmp &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;p&gt;end&lt;br&gt;
t = Tmp.create(:atime =&amp;gt; Time.now)&lt;br&gt;
conn = Tmp.connection&lt;br&gt;
10000.times do&lt;br&gt;
conn.select_one &quot;UPDATE tmps SET atime = NOW()&quot; ret_time =
Tmp.find(t.id).atime result = conn.select_one(&quot;SELECT atime =
#{conn.quote(ret_time)} AS tst, atime FROM tmps WHERE id =
#{t.id}&quot;)&lt;/p&gt;
&lt;p&gt;formatted = ret_time.strftime(&quot;%a %b %d
%H:%M:%S.#{ret_time.usec} %Z %Y&quot;) if(result['tst'] != 't')&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;raise &quot;oops! Rails value '#{formatted}' not the same as SQL value '#{result['atime']}'&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;STDERR.puts(&quot;Rails time '#{formatted}' matches SQL time '#{result['atime']}'&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;After some iterations, the exception will raise. This was
observed against Rails 2.3.5.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-29T02:19:58+01:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-04-29T02:19:59+01:00</updated-at>
      <user-id type="integer">52996</user-id>
      <version type="integer">1</version>
      <user-name>Logan Bowers</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Let me try adding that Ruby code again: 

@@@ ruby
class Tmp &lt; ActiveRecord::Base

end
t = Tmp.create(:atime =&gt; Time.now)
conn = Tmp.connection
10000.times do 
  conn.select_one &quot;UPDATE tmps SET atime = NOW()&quot;
  ret_time = Tmp.find(t.id).atime
  result = conn.select_one(&quot;SELECT atime = #{conn.quote(ret_time)} AS tst, atime FROM tmps WHERE id = #{t.id}&quot;)
  
  formatted = ret_time.strftime(&quot;%a %b %d %H:%M:%S.#{ret_time.usec} %Z %Y&quot;)
  if(result['tst'] != 't')
    raise &quot;oops! Rails value '#{formatted}' not the same as SQL value '#{result['atime']}'&quot;
  else
    STDERR.puts(&quot;Rails time '#{formatted}' matches SQL time '#{result['atime']}'&quot;)
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Let me try adding that Ruby code again:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Tmp &amp;lt; ActiveRecord::Base

end
t = Tmp.create(:atime =&amp;gt; Time.now)
conn = Tmp.connection
10000.times do 
  conn.select_one &quot;UPDATE tmps SET atime = NOW()&quot;
  ret_time = Tmp.find(t.id).atime
  result = conn.select_one(&quot;SELECT atime = #{conn.quote(ret_time)} AS tst, atime FROM tmps WHERE id = #{t.id}&quot;)
  
  formatted = ret_time.strftime(&quot;%a %b %d %H:%M:%S.#{ret_time.usec} %Z %Y&quot;)
  if(result['tst'] != 't')
    raise &quot;oops! Rails value '#{formatted}' not the same as SQL value '#{result['atime']}'&quot;
  else
    STDERR.puts(&quot;Rails time '#{formatted}' matches SQL time '#{result['atime']}'&quot;)
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-29T02:22:09+01:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-04-29T02:22:10+01:00</updated-at>
      <user-id type="integer">52996</user-id>
      <version type="integer">2</version>
      <user-name>Logan Bowers</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Adding a patch that fixes the issue in 2-3-stable.  ActiveRecord::ConnectionAdapters::Column#microseconds did an unnecessary conversion to from Rational to float when calculating the integer number of microseconds.  Some terminating decimal numbers in base10 are repeating decimal numbers in base2 (the format of float), and occasionally this causes a rounding error.  

I will add a patch for Rails 3 if the problem still exists.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Adding a patch that fixes the issue in 2-3-stable.
ActiveRecord::ConnectionAdapters::Column#microseconds did an
unnecessary conversion to from Rational to float when calculating
the integer number of microseconds. Some terminating decimal
numbers in base10 are repeating decimal numbers in base2 (the
format of float), and occasionally this causes a rounding
error.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I will add a patch for Rails 3 if the problem still exists.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-29T19:32:13+01:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-04-29T19:32:17+01:00</updated-at>
      <user-id type="integer">52996</user-id>
      <version type="integer">3</version>
      <user-name>Logan Bowers</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The problem does exist in master (as of f4d174b211effd4cd510c1578bdc391852f4d375), this patch should also apply with minimal fuzzing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The problem does exist in master (as of
f4d174b211effd4cd510c1578bdc391852f4d375), this patch should also
apply with minimal fuzzing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-29T19:35:01+01:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-04-29T19:35:05+01:00</updated-at>
      <user-id type="integer">52996</user-id>
      <version type="integer">4</version>
      <user-name>Logan Bowers</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-29T19:35:45+01:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.5 activerecord postgresql timestamp
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord patch postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-04-29T19:35:51+01:00</updated-at>
      <user-id type="integer">52996</user-id>
      <version type="integer">5</version>
      <user-name>Logan Bowers</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@@@ patch
diff --git a/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb b/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb
index 520f3c8..2a2e38a 100644
--- a/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb
@@ -170,7 +170,7 @@ module ActiveRecord
           # '0.123456' -&gt; 123456
           # '1.123456' -&gt; 123456
           def microseconds(time)
-            ((time[:sec_fraction].to_f % 1) * 1_000_000).to_i
+            time[:sec_fraction] ? (time[:sec_fraction] * 1_000_000).to_i : 0
           end
 
           def new_date(year, mon, mday)
-- 
1.6.6.1
@@@

Here's an updated patch.  time[:sec_fraction] is nil when there are no microseconds and nil.to_f is 0.0.  Thus, there needs to be a nil-check before attempting the multiplication.</body>
      <body-html>&lt;div&gt;&lt;pre&gt;
&lt;code class=
&quot;patch&quot;&gt;diff --git a/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb b/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb
index 520f3c8..2a2e38a 100644
--- a/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb
@@ -170,7 +170,7 @@ module ActiveRecord
           # '0.123456' -&amp;gt; 123456
           # '1.123456' -&amp;gt; 123456
           def microseconds(time)
-            ((time[:sec_fraction].to_f % 1) * 1_000_000).to_i
+            time[:sec_fraction] ? (time[:sec_fraction] * 1_000_000).to_i : 0
           end
 
           def new_date(year, mon, mday)
-- 
1.6.6.1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here's an updated patch. time[:sec_fraction] is nil when there
are no microseconds and nil.to_f is 0.0. Thus, there needs to be a
nil-check before attempting the multiplication.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-06T22:56:31+01:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord patch postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-05-06T22:56:35+01:00</updated-at>
      <user-id type="integer">52996</user-id>
      <version type="integer">6</version>
      <user-name>Logan Bowers</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-09T19:25:50+01:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.5 activerecord patch postgresql timestamp
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord bugmash patch postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-05-09T19:25:53+01:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">7</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm sort of confused by your test case.

After updating all the records to now(), why would you expect them to match an earlier time?  

If you're not inside a transaction, now() will change each time you call it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm sort of confused by your test case.&lt;/p&gt;
&lt;p&gt;After updating all the records to now(), why would you expect
them to match an earlier time?&lt;br&gt;&lt;/p&gt;
&lt;p&gt;If you're not inside a transaction, now() will change each time
you call it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-23T21:36:24+00:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord bugmash patch postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-11-23T21:36:27+00:00</updated-at>
      <user-id type="integer">395</user-id>
      <version type="integer">8</version>
      <user-name>Joe Van Dyk</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Each time through the loop a single row is updated to an arbitrary time.  Then that row is retrieved and the time is converted to a Ruby object.  The Ruby object is converted back to a string and compared to the original value in the SQL row.  Occasionally Ruby will encounter a rounding error and be off by one microsecond.  When this happens, the SQL dates are no longer equal and the SQL SELECT statement returns 'f' (false).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Each time through the loop a single row is updated to an
arbitrary time. Then that row is retrieved and the time is
converted to a Ruby object. The Ruby object is converted back to a
string and compared to the original value in the SQL row.
Occasionally Ruby will encounter a rounding error and be off by one
microsecond. When this happens, the SQL dates are no longer equal
and the SQL SELECT statement returns 'f' (false).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-02T21:55:48+00:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord bugmash patch postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-12-02T21:55:52+00:00</updated-at>
      <user-id type="integer">52996</user-id>
      <version type="integer">9</version>
      <user-name>Logan Bowers</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The loop is just because it will happen eventually.  I could have run this code to find an exact fail case and substituted the NOW() call with the exact timestamp that fails.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The loop is just because it will happen eventually. I could have
run this code to find an exact fail case and substituted the NOW()
call with the exact timestamp that fails.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-02T21:57:07+00:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord bugmash patch postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-12-02T21:57:13+00:00</updated-at>
      <user-id type="integer">52996</user-id>
      <version type="integer">10</version>
      <user-name>Logan Bowers</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Soon &lt;a href=&quot;http://www.guccishoeshandbags.com/louis-vuitton-shoes-c-23_34.html&quot;&gt;louis vuitton shoes for men&lt;/a&gt;  after Mr Chavez &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-wallets-c-35_53.html&quot;&gt;gucci wallets for women&lt;/a&gt;  &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-dress-shoes-c-23_32.html&quot;&gt;gucci dress shoes&lt;/a&gt;  &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-sneakers-c-23_26.html&quot;&gt;gucci sneakers for men&lt;/a&gt;  refused &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-slippers-c-23_59.html&quot;&gt;gucci slipper for men&lt;/a&gt;  &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-hoodies-c-23_49.html&quot;&gt;gucci clothing&lt;/a&gt;  to send a warning &lt;a href=&quot;http://www.guccishoeshandbags.com/louis-vuitton-belts-c-35_44.html&quot;&gt;cheap louis vuitton belt&lt;/a&gt;  from the &lt;a href=&quot;http://www.guccishoeshandbags.com&quot;&gt;gucci shoes for men&lt;/a&gt;  Secretary &lt;a href=&quot;http://www.guccishoeshandbags.com/&quot;&gt;gucci shoes for cheap&lt;/a&gt;  of tanks &lt;a href=&quot;http://www.guccishoeshandbags.com&quot;&gt;cheap gucci sneakers&lt;/a&gt;  Hillary &lt;a href=&quot;http://www.guccishoeshandbags.com/louis-vuitton-sneakers-c-24_41.html&quot;&gt;women louis vuitton sneakers&lt;/a&gt;  &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-sandals-c-24_40.html&quot;&gt;gucci sandal&lt;/a&gt;  Clinton &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-boots-c-24_51.html&quot;&gt;gucci boots for women&lt;/a&gt;  on Friday &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-sneakers-c-24_29.html&quot;&gt;women gucci shoes&lt;/a&gt;  to think &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-pumps-c-24_39.html&quot;&gt;women gucci pumps&lt;/a&gt;  that Latin &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-loafers-c-23_30.html&quot;&gt;gucci loafers&lt;/a&gt;  America, &lt;a href=&quot;http://www.guccishoeshandbags.com/prada-sneakers-c-23_33.html&quot;&gt;prada sneakers for men&lt;/a&gt;  twice &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-slippers-c-23_59.html&quot;&gt;mens gucci slipper&lt;/a&gt;  needed to &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-high-tops-c-23_27.html&quot;&gt;gucci high tops&lt;/a&gt;  promote &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-belts-c-35_43.html&quot;&gt;gucci belts&lt;/a&gt;  &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-slippers-c-23_59.html&quot;&gt;cheap gucci slipper&lt;/a&gt;  relations &lt;a href=&quot;http://www.guccishoeshandbags.com/gucci-jeans-c-23_48.html&quot;&gt;cheap gucci jeans&lt;/a&gt;  with Iran. Iranian President Mahmoud Ahmadinejad last month to visit Brazil, Venezuela and Bolivia, support the right of Iran has expressed a nuclear program.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Soon &lt;a href=
&quot;http://www.guccishoeshandbags.com/louis-vuitton-shoes-c-23_34.html&quot;&gt;
louis vuitton shoes for men&lt;/a&gt; after Mr Chavez &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-wallets-c-35_53.html&quot;&gt;gucci
wallets for women&lt;/a&gt; &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-dress-shoes-c-23_32.html&quot;&gt;gucci
dress shoes&lt;/a&gt; &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-sneakers-c-23_26.html&quot;&gt;gucci
sneakers for men&lt;/a&gt; refused &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-slippers-c-23_59.html&quot;&gt;gucci
slipper for men&lt;/a&gt; &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-hoodies-c-23_49.html&quot;&gt;gucci
clothing&lt;/a&gt; to send a warning &lt;a href=
&quot;http://www.guccishoeshandbags.com/louis-vuitton-belts-c-35_44.html&quot;&gt;
cheap louis vuitton belt&lt;/a&gt; from the &lt;a href=
&quot;http://www.guccishoeshandbags.com&quot;&gt;gucci shoes for men&lt;/a&gt;
Secretary &lt;a href=&quot;http://www.guccishoeshandbags.com/&quot;&gt;gucci shoes
for cheap&lt;/a&gt; of tanks &lt;a href=
&quot;http://www.guccishoeshandbags.com&quot;&gt;cheap gucci sneakers&lt;/a&gt;
Hillary &lt;a href=
&quot;http://www.guccishoeshandbags.com/louis-vuitton-sneakers-c-24_41.html&quot;&gt;
women louis vuitton sneakers&lt;/a&gt; &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-sandals-c-24_40.html&quot;&gt;gucci
sandal&lt;/a&gt; Clinton &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-boots-c-24_51.html&quot;&gt;gucci
boots for women&lt;/a&gt; on Friday &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-sneakers-c-24_29.html&quot;&gt;women
gucci shoes&lt;/a&gt; to think &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-pumps-c-24_39.html&quot;&gt;women
gucci pumps&lt;/a&gt; that Latin &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-loafers-c-23_30.html&quot;&gt;gucci
loafers&lt;/a&gt; America, &lt;a href=
&quot;http://www.guccishoeshandbags.com/prada-sneakers-c-23_33.html&quot;&gt;prada
sneakers for men&lt;/a&gt; twice &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-slippers-c-23_59.html&quot;&gt;mens
gucci slipper&lt;/a&gt; needed to &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-high-tops-c-23_27.html&quot;&gt;gucci
high tops&lt;/a&gt; promote &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-belts-c-35_43.html&quot;&gt;gucci
belts&lt;/a&gt; &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-slippers-c-23_59.html&quot;&gt;cheap
gucci slipper&lt;/a&gt; relations &lt;a href=
&quot;http://www.guccishoeshandbags.com/gucci-jeans-c-23_48.html&quot;&gt;cheap
gucci jeans&lt;/a&gt; with Iran. Iranian President Mahmoud Ahmadinejad
last month to visit Brazil, Venezuela and Bolivia, support the
right of Iran has expressed a nuclear program.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-03T01:44:42+00:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 activerecord bugmash patch postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2010-12-04T04:17:52+00:00</updated-at>
      <user-id type="integer">127648</user-id>
      <version type="integer">11</version>
      <user-name>cheap gucci shoes</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-05T00:00:15+00:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.5 activerecord bugmash patch postgresql timestamp
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>235 activerecord bugmash patch postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2011-03-05T00:01:33+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">12</version>
      <user-name>rails</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-05T00:00:15+00:00</created-at>
      <creator-id type="integer">52996</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4498</number>
      <permalink>rails-loses-precision-when-deserializing-timestamps-from-postgresql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>235 activerecord bugmash patch postgresql timestamp</tag>
      <title>Rails loses precision when deserializing timestamps from Postgresql</title>
      <updated-at type="datetime">2011-03-05T00:02:43+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">13</version>
      <user-name>rails</user-name>
      <creator-name>Logan Bowers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4498</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>1452212bf37ea540a84f431b97c5dc4afe908a4a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-29T19:32:13+01:00</created-at>
      <filename>0001-fix-an-precision-issue-when-parsing-timestamps-4498.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">504087</id>
      <size type="integer">1055</size>
      <uploader-id type="integer">52996</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/504087/0001-fix-an-precision-issue-when-parsing-timestamps-4498.patch</url>
    </attachment>
  </attachments>
</ticket>
