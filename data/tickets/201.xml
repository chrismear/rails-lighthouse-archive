<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-14T23:07:00+01:00</created-at>
  <creator-id type="integer">11063</creator-id>
  <milestone-due-on type="datetime">2009-03-18T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">9901</milestone-id>
  <number type="integer">201</number>
  <permalink>process-schema_migrations-inserts-individually-during-rake-db-test-clone_structure</permalink>
  <priority type="integer">12777</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord migrations patch tiny</tag>
  <title>Process schema_migrations inserts individually during rake db:test:clone_structure.</title>
  <updated-at type="datetime">2008-05-17T07:51:02+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">6</version>
  <user-name>Repository</user-name>
  <creator-name>Rick DeNatale</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/201</url>
  <milestone-title>2.1.1</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I've spent a few hours today trying to move our rails app to 2.1RC1.

Our company has a significant number of migrations most of which were done using the enhanced_migrations plugin.

Rails 2.1 is using a similar idea of timestamping rather than sequencing migrations, but has some slight differences in the timestamps and the table used to store the migration info. enhanced_migrations uses a table named migrations_info, while 2.1 uses schema_migrations.

So our test rake task tried to re-run all of the migrations, since they didn't appear in the schema_migrations table.

Noticing that the new timestamps are human readable, e.g. yyyymmddhhmmss and the enhanced_migration timestamps are a 10-digit number so there should be an overlap.  So we wrote a migration numbered 1 so that it would run first, which inserted each id column from the migrations_info table to a string and inserted the result as a row in the schema_migrations table. 

This got us past the point where rake test was trying to re-run the migrations.  However, and this is the real point of this note, when rake db:test:clone_structure got run, it failed because of a &quot;SQL error&quot; on INSERT schema_migrations (version) VALUES ('0');  which is valid SQL.  After much head scratching, I figured out that it must actually because it was trying to run a long series of these inserts as on SQL query.  I then tracked down where these inserts were coming from, which was development_structure.sql  The db:test:clone structure basically reads this file, splits it into chunks delimited by empty lines, and plays each chunk against the test database.  Most of these chunks are individual table definitions.  But the last chunk is this set of inserts.

I tracked down the source of these lines in development_structure.sql to /activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb Suspecting that this was a problem with an overly long query I made a slight change (See attached patch) to insert an empty line between each insert statement.  This does seem to have been the problem since with this change the rake db:test:clone_structure task succeeds.

I'm not sure where the limit is. In our case we have on the order of 500 migrations so on the order of 500 insert sql statements in the file.</original-body>
  <latest-body>I've spent a few hours today trying to move our rails app to 2.1RC1.

Our company has a significant number of migrations most of which were done using the enhanced_migrations plugin.

Rails 2.1 is using a similar idea of timestamping rather than sequencing migrations, but has some slight differences in the timestamps and the table used to store the migration info. enhanced_migrations uses a table named migrations_info, while 2.1 uses schema_migrations.

So our test rake task tried to re-run all of the migrations, since they didn't appear in the schema_migrations table.

Noticing that the new timestamps are human readable, e.g. yyyymmddhhmmss and the enhanced_migration timestamps are a 10-digit number so there should be an overlap.  So we wrote a migration numbered 1 so that it would run first, which inserted each id column from the migrations_info table to a string and inserted the result as a row in the schema_migrations table. 

This got us past the point where rake test was trying to re-run the migrations.  However, and this is the real point of this note, when rake db:test:clone_structure got run, it failed because of a &quot;SQL error&quot; on INSERT schema_migrations (version) VALUES ('0');  which is valid SQL.  After much head scratching, I figured out that it must actually because it was trying to run a long series of these inserts as on SQL query.  I then tracked down where these inserts were coming from, which was development_structure.sql  The db:test:clone structure basically reads this file, splits it into chunks delimited by empty lines, and plays each chunk against the test database.  Most of these chunks are individual table definitions.  But the last chunk is this set of inserts.

I tracked down the source of these lines in development_structure.sql to /activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb Suspecting that this was a problem with an overly long query I made a slight change (See attached patch) to insert an empty line between each insert statement.  This does seem to have been the problem since with this change the rake db:test:clone_structure task succeeds.

I'm not sure where the limit is. In our case we have on the order of 500 migrations so on the order of 500 insert sql statements in the file.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
I've spent a few hours today trying to move our rails app to 2.1RC1.
&lt;/p&gt;&lt;p&gt;
Our company has a significant number of migrations most of which were done using the enhanced_migrations plugin.
&lt;/p&gt;&lt;p&gt;
Rails 2.1 is using a similar idea of timestamping rather than sequencing migrations, but has some slight differences in the timestamps and the table used to store the migration info. enhanced_migrations uses a table named migrations_info, while 2.1 uses schema_migrations.
&lt;/p&gt;&lt;p&gt;
So our test rake task tried to re-run all of the migrations, since they didn't appear in the schema_migrations table.
&lt;/p&gt;&lt;p&gt;
Noticing that the new timestamps are human readable, e.g. yyyymmddhhmmss and the enhanced_migration timestamps are a 10-digit number so there should be an overlap.  So we wrote a migration numbered 1 so that it would run first, which inserted each id column from the migrations_info table to a string and inserted the result as a row in the schema_migrations table.
&lt;/p&gt;&lt;p&gt;
This got us past the point where rake test was trying to re-run the migrations.  However, and this is the real point of this note, when rake db:test:clone_structure got run, it failed because of a &quot;SQL error&quot; on INSERT schema_migrations (version) VALUES ('0');  which is valid SQL.  After much head scratching, I figured out that it must actually because it was trying to run a long series of these inserts as on SQL query.  I then tracked down where these inserts were coming from, which was development_structure.sql  The db:test:clone structure basically reads this file, splits it into chunks delimited by empty lines, and plays each chunk against the test database.  Most of these chunks are individual table definitions.  But the last chunk is this set of inserts.
&lt;/p&gt;&lt;p&gt;
I tracked down the source of these lines in development_structure.sql to /activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb Suspecting that this was a problem with an overly long query I made a slight change (See attached patch) to insert an empty line between each insert statement.  This does seem to have been the problem since with this change the rake db:test:clone_structure task succeeds.
&lt;/p&gt;&lt;p&gt;
I'm not sure where the limit is. In our case we have on the order of 500 migrations so on the order of 500 insert sql statements in the file.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've spent a few hours today trying to move our rails app to 2.1RC1.

Our company has a significant number of migrations most of which were done using the enhanced_migrations plugin.

Rails 2.1 is using a similar idea of timestamping rather than sequencing migrations, but has some slight differences in the timestamps and the table used to store the migration info. enhanced_migrations uses a table named migrations_info, while 2.1 uses schema_migrations.

So our test rake task tried to re-run all of the migrations, since they didn't appear in the schema_migrations table.

Noticing that the new timestamps are human readable, e.g. yyyymmddhhmmss and the enhanced_migration timestamps are a 10-digit number so there should be an overlap.  So we wrote a migration numbered 1 so that it would run first, which inserted each id column from the migrations_info table to a string and inserted the result as a row in the schema_migrations table. 

This got us past the point where rake test was trying to re-run the migrations.  However, and this is the real point of this note, when rake db:test:clone_structure got run, it failed because of a &quot;SQL error&quot; on INSERT schema_migrations (version) VALUES ('0');  which is valid SQL.  After much head scratching, I figured out that it must actually because it was trying to run a long series of these inserts as on SQL query.  I then tracked down where these inserts were coming from, which was development_structure.sql  The db:test:clone structure basically reads this file, splits it into chunks delimited by empty lines, and plays each chunk against the test database.  Most of these chunks are individual table definitions.  But the last chunk is this set of inserts.

I tracked down the source of these lines in development_structure.sql to /activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb Suspecting that this was a problem with an overly long query I made a slight change (See attached patch) to insert an empty line between each insert statement.  This does seem to have been the problem since with this change the rake db:test:clone_structure task succeeds.

I'm not sure where the limit is. In our case we have on the order of 500 migrations so on the order of 500 insert sql statements in the file.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I've spent a few hours today trying to move our rails app to 2.1RC1.
&lt;/p&gt;&lt;p&gt;
Our company has a significant number of migrations most of which were done using the enhanced_migrations plugin.
&lt;/p&gt;&lt;p&gt;
Rails 2.1 is using a similar idea of timestamping rather than sequencing migrations, but has some slight differences in the timestamps and the table used to store the migration info. enhanced_migrations uses a table named migrations_info, while 2.1 uses schema_migrations.
&lt;/p&gt;&lt;p&gt;
So our test rake task tried to re-run all of the migrations, since they didn't appear in the schema_migrations table.
&lt;/p&gt;&lt;p&gt;
Noticing that the new timestamps are human readable, e.g. yyyymmddhhmmss and the enhanced_migration timestamps are a 10-digit number so there should be an overlap.  So we wrote a migration numbered 1 so that it would run first, which inserted each id column from the migrations_info table to a string and inserted the result as a row in the schema_migrations table.
&lt;/p&gt;&lt;p&gt;
This got us past the point where rake test was trying to re-run the migrations.  However, and this is the real point of this note, when rake db:test:clone_structure got run, it failed because of a &quot;SQL error&quot; on INSERT schema_migrations (version) VALUES ('0');  which is valid SQL.  After much head scratching, I figured out that it must actually because it was trying to run a long series of these inserts as on SQL query.  I then tracked down where these inserts were coming from, which was development_structure.sql  The db:test:clone structure basically reads this file, splits it into chunks delimited by empty lines, and plays each chunk against the test database.  Most of these chunks are individual table definitions.  But the last chunk is this set of inserts.
&lt;/p&gt;&lt;p&gt;
I tracked down the source of these lines in development_structure.sql to /activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb Suspecting that this was a problem with an overly long query I made a slight change (See attached patch) to insert an empty line between each insert statement.  This does seem to have been the problem since with this change the rake db:test:clone_structure task succeeds.
&lt;/p&gt;&lt;p&gt;
I'm not sure where the limit is. In our case we have on the order of 500 migrations so on the order of 500 insert sql statements in the file.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-14T23:07:00+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">201</number>
      <permalink>process-schema_migrations-inserts-individually-during-rake-db-test-clone_structure</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Process schema_migrations inserts individually during rake db:test:clone_structure.</title>
      <updated-at type="datetime">2008-05-14T23:07:00+01:00</updated-at>
      <user-id type="integer">11063</user-id>
      <version type="integer">1</version>
      <user-name>Rick DeNatale</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/201</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Actually, it might not just be a case of the chunk being too big, but that the execute method expects a single sql statement, which makes this a bit more critical.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Actually, it might not just be a case of the chunk being too big, but that the execute method expects a single sql statement, which makes this a bit more critical.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-15T20:23:37+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">201</number>
      <permalink>process-schema_migrations-inserts-individually-during-rake-db-test-clone_structure</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Process schema_migrations inserts individually during rake db:test:clone_structure.</title>
      <updated-at type="datetime">2008-05-15T20:23:37+01:00</updated-at>
      <user-id type="integer">11063</user-id>
      <version type="integer">2</version>
      <user-name>Rick DeNatale</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/201</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I have the same problem and independently came up with the same patch. +1, please commit.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I have the same problem and independently came up with the same patch. +1, please commit.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-16T23:43:32+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">201</number>
      <permalink>process-schema_migrations-inserts-individually-during-rake-db-test-clone_structure</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Process schema_migrations inserts individually during rake db:test:clone_structure.</title>
      <updated-at type="datetime">2008-05-16T23:43:32+01:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">3</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/201</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Could you reattach with git-format-patch output so we get the authorship etc correct.  Also, in the commit message could you mention *why* this seemingly trivial thing makes a difference.  This could easily get reverted if someone gets worried about the visual appearance of the dump</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Could you reattach with git-format-patch output so we get the authorship etc correct.  Also, in the commit message could you mention &lt;strong&gt;why&lt;/strong&gt; this seemingly trivial thing makes a difference.  This could easily get reverted if someone gets worried about the visual appearance of the dump
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-17T01:31:48+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">201</number>
      <permalink>process-schema_migrations-inserts-individually-during-rake-db-test-clone_structure</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Process schema_migrations inserts individually during rake db:test:clone_structure.</title>
      <updated-at type="datetime">2008-05-17T01:31:48+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">4</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/201</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It makes a difference because SchemaStatements#dump_schema_information is inconsistent with db:clone_structure in databases.rake, and will create sql that db:clone_structure cannot load.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It makes a difference because SchemaStatements#dump_schema_information is inconsistent with db:clone_structure in databases.rake, and will create sql that db:clone_structure cannot load.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-17T06:48:46+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">201</number>
      <permalink>process-schema_migrations-inserts-individually-during-rake-db-test-clone_structure</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Process schema_migrations inserts individually during rake db:test:clone_structure.</title>
      <updated-at type="datetime">2008-05-17T06:48:46+01:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">5</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/201</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [2183c220ada046993274ccdc6f1f86e9e8a3a5c6]) Make sure clone_structure can load the results of dump_schema_information

SchemaStatements#dump_schema_information joins inserts with a single \n, but is later split on \n\n, and fails when trying to execute all the inserts as a single sql statement.

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;

[#201 state:resolved]
http://github.com/rails/rails/commit/2183c220ada046993274ccdc6f1f86e9e8a3a5c6</body>
      <body-html>&lt;div&gt;&lt;p&gt;
(from [2183c220ada046993274ccdc6f1f86e9e8a3a5c6]) Make sure clone_structure can load the results of dump_schema_information
&lt;/p&gt;&lt;p&gt;
SchemaStatements#dump_schema_information joins inserts with a single \n, but is later split on \n\n, and fails when trying to execute all the inserts as a single sql statement.
&lt;/p&gt;&lt;p&gt;
Signed-off-by: Michael Koziarski 
&lt;/p&gt;&lt;p&gt;
[#201 state:resolved]
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/2183c220ada046993274ccdc6f1f86e9e8a3a5c6&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-17T07:51:02+01:00</created-at>
      <creator-id type="integer">11063</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">201</number>
      <permalink>process-schema_migrations-inserts-individually-during-rake-db-test-clone_structure</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Process schema_migrations inserts individually during rake db:test:clone_structure.</title>
      <updated-at type="datetime">2008-05-17T07:51:02+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">6</version>
      <user-name>Repository</user-name>
      <creator-name>Rick DeNatale</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/201</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>0aff05851de3b22977e4e4a3871da58fd7ba8c16</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-14T23:07:00+01:00</created-at>
      <filename>schema_dump_patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">22985</id>
      <size type="integer">888</size>
      <uploader-id type="integer">11063</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/22985/schema_dump_patch.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>ad44d296f86e570263d36ebce4a091c2d678b21f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-17T06:48:46+01:00</created-at>
      <filename>0001-SchemaStatements-dump_schema_information-joins-inser.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">23350</id>
      <size type="integer">1376</size>
      <uploader-id type="integer">17345</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/23350/0001-SchemaStatements-dump_schema_information-joins-inser.patch</url>
    </attachment>
  </attachments>
</ticket>
