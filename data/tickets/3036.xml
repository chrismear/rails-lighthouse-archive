<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-08-11T17:34:59+01:00</created-at>
  <creator-id type="integer">9088</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3036</number>
  <permalink>performance-regression-caused-by-connection-pool</permalink>
  <priority type="integer">131129</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Performance regression caused by connection pool</title>
  <updated-at type="datetime">2010-10-06T06:47:05+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">2</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>theflow</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3036</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hi,

after upgrading an app from Rails 2.1 to 2.3 our test suite now runs ~ 50% slower. Curiously, the average response time on production got a bit faster (~ 10%). So it's either something specific to the test environment or some other improvements made up for the regression on production.

I tracked the performance regression down to the introduction of connection pooling:

http://github.com/rails/rails/commit/6f932b4790371e548c0df9033da96b2cf8f51dcc

I played around with the pooling code a little bit and did some profiling but couldn't come up with an obvious fix to solve this, so I would appreciate some help tracking this down as I guess this also should affect others?

I've attached two KCacheGrind call trees (one on 2.1, one on 2.2) and if I read them correctly

ConnectionHandler#retrieve_connection_pool
AbstractAdapter#verify!

have some performance impact.

Can anyone with more profiling experience please take a look at this?


thanks,
Florian</original-body>
  <latest-body>Hi,

after upgrading an app from Rails 2.1 to 2.3 our test suite now runs ~ 50% slower. Curiously, the average response time on production got a bit faster (~ 10%). So it's either something specific to the test environment or some other improvements made up for the regression on production.

I tracked the performance regression down to the introduction of connection pooling:

http://github.com/rails/rails/commit/6f932b4790371e548c0df9033da96b2cf8f51dcc

I played around with the pooling code a little bit and did some profiling but couldn't come up with an obvious fix to solve this, so I would appreciate some help tracking this down as I guess this also should affect others?

I've attached two KCacheGrind call trees (one on 2.1, one on 2.2) and if I read them correctly

ConnectionHandler#retrieve_connection_pool
AbstractAdapter#verify!

have some performance impact.

Can anyone with more profiling experience please take a look at this?


thanks,
Florian</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;after upgrading an app from Rails 2.1 to 2.3 our test suite now
runs ~ 50% slower. Curiously, the average response time on
production got a bit faster (~ 10%). So it's either something
specific to the test environment or some other improvements made up
for the regression on production.&lt;/p&gt;
&lt;p&gt;I tracked the performance regression down to the introduction of
connection pooling:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/rails/rails/commit/6f932b4790371e548c0df9033da96b2cf8f51dcc&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I played around with the pooling code a little bit and did some
profiling but couldn't come up with an obvious fix to solve this,
so I would appreciate some help tracking this down as I guess this
also should affect others?&lt;/p&gt;
&lt;p&gt;I've attached two KCacheGrind call trees (one on 2.1, one on
2.2) and if I read them correctly&lt;/p&gt;
&lt;p&gt;ConnectionHandler#retrieve_connection_pool
AbstractAdapter#verify!&lt;/p&gt;
&lt;p&gt;have some performance impact.&lt;/p&gt;
&lt;p&gt;Can anyone with more profiling experience please take a look at
this?&lt;/p&gt;
&lt;p&gt;thanks, Florian&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

after upgrading an app from Rails 2.1 to 2.3 our test suite now runs ~ 50% slower. Curiously, the average response time on production got a bit faster (~ 10%). So it's either something specific to the test environment or some other improvements made up for the regression on production.

I tracked the performance regression down to the introduction of connection pooling:

http://github.com/rails/rails/commit/6f932b4790371e548c0df9033da96b2cf8f51dcc

I played around with the pooling code a little bit and did some profiling but couldn't come up with an obvious fix to solve this, so I would appreciate some help tracking this down as I guess this also should affect others?

I've attached two KCacheGrind call trees (one on 2.1, one on 2.2) and if I read them correctly

ConnectionHandler#retrieve_connection_pool
AbstractAdapter#verify!

have some performance impact.

Can anyone with more profiling experience please take a look at this?


thanks,
Florian</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;after upgrading an app from Rails 2.1 to 2.3 our test suite now
runs ~ 50% slower. Curiously, the average response time on
production got a bit faster (~ 10%). So it's either something
specific to the test environment or some other improvements made up
for the regression on production.&lt;/p&gt;
&lt;p&gt;I tracked the performance regression down to the introduction of
connection pooling:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/rails/commit/6f932b4790371e548c0df9033da96b2cf8f51dcc&quot;&gt;
http://github.com/rails/rails/commit/6f932b4790371e548c0df9033da96b...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I played around with the pooling code a little bit and did some
profiling but couldn't come up with an obvious fix to solve this,
so I would appreciate some help tracking this down as I guess this
also should affect others?&lt;/p&gt;
&lt;p&gt;I've attached two KCacheGrind call trees (one on 2.1, one on
2.2) and if I read them correctly&lt;/p&gt;
&lt;p&gt;ConnectionHandler#retrieve_connection_pool&lt;br&gt;
AbstractAdapter#verify!&lt;/p&gt;
&lt;p&gt;have some performance impact.&lt;/p&gt;
&lt;p&gt;Can anyone with more profiling experience please take a look at
this?&lt;/p&gt;
&lt;p&gt;thanks,&lt;br&gt;
Florian&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-11T17:34:59+01:00</created-at>
      <creator-id type="integer">9088</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3036</number>
      <permalink>performance-regression-caused-by-connection-pool</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Performance regression caused by connection pool</title>
      <updated-at type="datetime">2009-08-11T17:35:06+01:00</updated-at>
      <user-id type="integer">9088</user-id>
      <version type="integer">1</version>
      <user-name>theflow</user-name>
      <creator-name>theflow</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3036</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:47:01+01:00</created-at>
      <creator-id type="integer">9088</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3036</number>
      <permalink>performance-regression-caused-by-connection-pool</permalink>
      <priority type="integer">131129</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Performance regression caused by connection pool</title>
      <updated-at type="datetime">2010-10-06T06:47:05+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>theflow</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3036</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>b8603e378c5c2b7ac4272ffe1488bc59e62f224c</code>
      <content-type>application/octet-stream</content-type>
      <created-at type="datetime">2009-08-11T17:35:01+01:00</created-at>
      <filename>calltree_rails21.cachegrind</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">241023</id>
      <size type="integer">1992185</size>
      <uploader-id type="integer">9088</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/241023/calltree_rails21.cachegrind</url>
    </attachment>
    <attachment type="Attachment">
      <code>8d69f8c18529e174e8e84b641f945d2bc24a70a0</code>
      <content-type>application/octet-stream</content-type>
      <created-at type="datetime">2009-08-11T17:35:02+01:00</created-at>
      <filename>calltree_rails22.cachegrind</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">241024</id>
      <size type="integer">1871685</size>
      <uploader-id type="integer">9088</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/241024/calltree_rails22.cachegrind</url>
    </attachment>
  </attachments>
</ticket>
