<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-05T03:06:47+01:00</created-at>
  <creator-id type="integer">26148</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6671</number>
  <permalink>bufferedlogger-threading-issues</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>logging patch</tag>
  <title>BufferedLogger threading issues</title>
  <updated-at type="datetime">2011-04-05T03:21:15+01:00</updated-at>
  <user-id type="integer">26148</user-id>
  <version type="integer">2</version>
  <user-name>Brian Durand</user-name>
  <creator-name>Brian Durand</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6671</url>
  <priority-name nil="true"></priority-name>
  <original-body>There are a couple of threading issues with ActiveSupport::BufferedLogger.

1. If a thread is spawned and logs messages but does not flush the log, the messages will never be written and will remain in the buffer forever.

threads = []
urls.each do |url
  threads &lt;&lt; Thread.new do
    logger.info(&quot;fetching #{url}&quot;)
    fetch(url)
    logger.info(&quot;#{url} retrieved&quot;)
  end
end
threads.each{|t| t.join}

2. Silencing a logger for a block in one thread will silence it will silence it for all other threads as well. This means in a multi-threaded Rails application, log messages can be lost.</original-body>
  <latest-body>There are a couple of threading issues with ActiveSupport::BufferedLogger.

1. If a thread is spawned and logs messages but does not flush the log, the messages will never be written and will remain in the buffer forever.

threads = []
urls.each do |url
  threads &lt;&lt; Thread.new do
    logger.info(&quot;fetching #{url}&quot;)
    fetch(url)
    logger.info(&quot;#{url} retrieved&quot;)
  end
end
threads.each{|t| t.join}

2. Silencing a logger for a block in one thread will silence it will silence it for all other threads as well. This means in a multi-threaded Rails application, log messages can be lost.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;There are a couple of threading issues with
ActiveSupport::BufferedLogger.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If a thread is spawned and logs messages but does not flush the
log, the messages will never be written and will remain in the
buffer forever.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;threads = []&lt;br&gt;
urls.each do |url&lt;br&gt;
threads &amp;lt;&amp;lt; Thread.new do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;logger.info(&quot;fetching #{url}&quot;)
fetch(url)
logger.info(&quot;#{url} retrieved&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;br&gt;
threads.each{|t| t.join}&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Silencing a logger for a block in one thread will silence it
will silence it for all other threads as well. This means in a
multi-threaded Rails application, log messages can be lost.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There are a couple of threading issues with ActiveSupport::BufferedLogger.

1. If a thread is spawned and logs messages but does not flush the log, the messages will never be written and will remain in the buffer forever.

threads = []
urls.each do |url
  threads &lt;&lt; Thread.new do
    logger.info(&quot;fetching #{url}&quot;)
    fetch(url)
    logger.info(&quot;#{url} retrieved&quot;)
  end
end
threads.each{|t| t.join}

2. Silencing a logger for a block in one thread will silence it will silence it for all other threads as well. This means in a multi-threaded Rails application, log messages can be lost.</body>
      <body-html>&lt;div&gt;&lt;p&gt;There are a couple of threading issues with
ActiveSupport::BufferedLogger.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If a thread is spawned and logs messages but does not flush the
log, the messages will never be written and will remain in the
buffer forever.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;threads = []&lt;br&gt;
urls.each do |url&lt;br&gt;
threads &amp;lt;&amp;lt; Thread.new do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;logger.info(&quot;fetching #{url}&quot;)
fetch(url)
logger.info(&quot;#{url} retrieved&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;br&gt;
threads.each{|t| t.join}&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Silencing a logger for a block in one thread will silence it
will silence it for all other threads as well. This means in a
multi-threaded Rails application, log messages can be lost.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-05T03:06:47+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6671</number>
      <permalink>bufferedlogger-threading-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>BufferedLogger threading issues</title>
      <updated-at type="datetime">2011-04-05T03:06:48+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">1</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6671</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-05T03:21:13+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6671</number>
      <permalink>bufferedlogger-threading-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>logging patch</tag>
      <title>BufferedLogger threading issues</title>
      <updated-at type="datetime">2011-04-05T03:21:15+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">2</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6671</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>02bc0fbd4a8e4e7408287816f916f73a7affab8a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-04-05T03:21:13+01:00</created-at>
      <filename>buffered_logger_threading_fixes.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">994713</id>
      <size type="integer">5345</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/994713/buffered_logger_threading_fixes.diff</url>
    </attachment>
  </attachments>
</ticket>
