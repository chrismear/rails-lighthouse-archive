<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-09-18T05:59:29+01:00</created-at>
  <creator-id type="integer">21958</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3230</number>
  <permalink>zero-arity-conditional-validation-procs-broken-by-asnewcallbacks</permalink>
  <priority type="integer">146924</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activemodel activerecord activesupport</tag>
  <title>Zero-arity conditional validation procs broken by AS::NewCallbacks</title>
  <updated-at type="datetime">2010-01-21T09:30:23+00:00</updated-at>
  <user-id type="integer">65556</user-id>
  <version type="integer">7</version>
  <user-name>Rizwan Reza</user-name>
  <creator-name>Sam Pohlenz</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3230</url>
  <priority-name nil="true"></priority-name>
  <original-body>Using a zero-arity proc/lambda as an :if or :unless option for validations, breaks with the new callback code. This potentially affects a lot of legacy code.

Consider the following code:

@@@ ruby
class User
  include ActiveModel::Validations
  attr_accessor :name
  validates_presence_of :name, :if =&gt; Proc.new { true }
end

&gt;&gt; User.new.valid?
ArgumentError: tried to create Proc object without a block
	from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activesupport/lib/active_support/new_callbacks.rb:396:in `new'
	from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activesupport/lib/active_support/new_callbacks.rb:396:in `_run_validate_callbacks'
	from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activemodel/lib/active_model/validations.rb:94:in `valid?'
	from (irb):2
@@@

In AS::NewCallbacks::_compile_filter, replacing

@@@ ruby
method_name &lt;&lt; (filter.arity == 1 ? &quot;(self)&quot; : &quot; self, Proc.new &quot;)
@@@

with:

@@@ ruby
method_name &lt;&lt; (filter.arity == 1 ? &quot;(self)&quot; : &quot; self, Proc.new {} &quot;)
@@@

appears to fix the problem and passes all tests, but I'm not sure what exactly the second proc argument does there.

The attached patch includes failing tests for ActiveModel.</original-body>
  <latest-body>Using a zero-arity proc/lambda as an :if or :unless option for validations, breaks with the new callback code. This potentially affects a lot of legacy code.

Consider the following code:

@@@ ruby
class User
  include ActiveModel::Validations
  attr_accessor :name
  validates_presence_of :name, :if =&gt; Proc.new { true }
end

&gt;&gt; User.new.valid?
ArgumentError: tried to create Proc object without a block
	from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activesupport/lib/active_support/new_callbacks.rb:396:in `new'
	from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activesupport/lib/active_support/new_callbacks.rb:396:in `_run_validate_callbacks'
	from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activemodel/lib/active_model/validations.rb:94:in `valid?'
	from (irb):2
@@@

In AS::NewCallbacks::_compile_filter, replacing

@@@ ruby
method_name &lt;&lt; (filter.arity == 1 ? &quot;(self)&quot; : &quot; self, Proc.new &quot;)
@@@

with:

@@@ ruby
method_name &lt;&lt; (filter.arity == 1 ? &quot;(self)&quot; : &quot; self, Proc.new {} &quot;)
@@@

appears to fix the problem and passes all tests, but I'm not sure what exactly the second proc argument does there.

The attached patch includes failing tests for ActiveModel.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Using a zero-arity proc/lambda as an :if or :unless option for
validations, breaks with the new callback code. This potentially
affects a lot of legacy code.&lt;/p&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User
  include ActiveModel::Validations
  attr_accessor :name
  validates_presence_of :name, :if =&amp;gt; Proc.new { true }
end

&amp;gt;&amp;gt; User.new.valid?
ArgumentError: tried to create Proc object without a block
    from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activesupport/lib/active_support/new_callbacks.rb:396:in `new'
    from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activesupport/lib/active_support/new_callbacks.rb:396:in `_run_validate_callbacks'
    from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activemodel/lib/active_model/validations.rb:94:in `valid?'
    from (irb):2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In AS::NewCallbacks::_compile_filter, replacing&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;method_name &amp;lt;&amp;lt; (filter.arity == 1 ? &quot;(self)&quot; : &quot; self, Proc.new &quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;method_name &amp;lt;&amp;lt; (filter.arity == 1 ? &quot;(self)&quot; : &quot; self, Proc.new {} &quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;appears to fix the problem and passes all tests, but I'm not
sure what exactly the second proc argument does there.&lt;/p&gt;
&lt;p&gt;The attached patch includes failing tests for ActiveModel.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Using a zero-arity proc/lambda as an :if or :unless option for validations, breaks with the new callback code. This potentially affects a lot of legacy code.

Consider the following code:

@@@ ruby
class User
  include ActiveModel::Validations
  attr_accessor :name
  validates_presence_of :name, :if =&gt; Proc.new { true }
end

&gt;&gt; User.new.valid?
ArgumentError: tried to create Proc object without a block
	from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activesupport/lib/active_support/new_callbacks.rb:396:in `new'
	from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activesupport/lib/active_support/new_callbacks.rb:396:in `_run_validate_callbacks'
	from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activemodel/lib/active_model/validations.rb:94:in `valid?'
	from (irb):2
@@@

In AS::NewCallbacks::_compile_filter, replacing

@@@ ruby
method_name &lt;&lt; (filter.arity == 1 ? &quot;(self)&quot; : &quot; self, Proc.new &quot;)
@@@

with:

@@@ ruby
method_name &lt;&lt; (filter.arity == 1 ? &quot;(self)&quot; : &quot; self, Proc.new {} &quot;)
@@@

appears to fix the problem and passes all tests, but I'm not sure what exactly the second proc argument does there.

The attached patch includes failing tests for ActiveModel.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Using a zero-arity proc/lambda as an :if or :unless option for
validations, breaks with the new callback code. This potentially
affects a lot of legacy code.&lt;/p&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User
  include ActiveModel::Validations
  attr_accessor :name
  validates_presence_of :name, :if =&amp;gt; Proc.new { true }
end

&amp;gt;&amp;gt; User.new.valid?
ArgumentError: tried to create Proc object without a block
    from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activesupport/lib/active_support/new_callbacks.rb:396:in `new'
    from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activesupport/lib/active_support/new_callbacks.rb:396:in `_run_validate_callbacks'
    from /Users/sam/new-rails-2/vendor/rails/activeresource/lib/../../activemodel/lib/active_model/validations.rb:94:in `valid?'
    from (irb):2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In AS::NewCallbacks::_compile_filter, replacing&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;method_name &amp;lt;&amp;lt; (filter.arity == 1 ? &quot;(self)&quot; : &quot; self, Proc.new &quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;method_name &amp;lt;&amp;lt; (filter.arity == 1 ? &quot;(self)&quot; : &quot; self, Proc.new {} &quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;appears to fix the problem and passes all tests, but I'm not
sure what exactly the second proc argument does there.&lt;/p&gt;
&lt;p&gt;The attached patch includes failing tests for ActiveModel.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-18T05:59:29+01:00</created-at>
      <creator-id type="integer">21958</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3230</number>
      <permalink>zero-arity-conditional-validation-procs-broken-by-asnewcallbacks</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel activerecord activesupport patch</tag>
      <title>Zero-arity conditional validation procs broken by AS::NewCallbacks</title>
      <updated-at type="datetime">2009-09-18T05:59:39+01:00</updated-at>
      <user-id type="integer">21958</user-id>
      <version type="integer">1</version>
      <user-name>Sam Pohlenz</user-name>
      <creator-name>Sam Pohlenz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3230</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>After some more digging, it seems the problem is due to a variation between Ruby 1.8 and 1.9.

In 1.8.6 and 1.8.7, Proc.new {}.arity == -1, whereas in 1.9, Proc.new {}.arity == 0.

A possible fix for this then, is to replace in ActiveSupport::NewCallbacks::_compile_filter:

@@@ ruby
          return method_name if filter.arity == 0
@@@

with

@@@ ruby
          return method_name if filter.arity &lt;= 0
@@@

however this will break support for splatted proc arguments.

Whilst the problem lies in ActiveSupport::NewCallbacks, I have not yet been able to create a test case that isolates the problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;After some more digging, it seems the problem is due to a
variation between Ruby 1.8 and 1.9.&lt;/p&gt;
&lt;p&gt;In 1.8.6 and 1.8.7, Proc.new {}.arity == -1, whereas in 1.9,
Proc.new {}.arity == 0.&lt;/p&gt;
&lt;p&gt;A possible fix for this then, is to replace in
ActiveSupport::NewCallbacks::_compile_filter:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;          return method_name if filter.arity == 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;          return method_name if filter.arity &amp;lt;= 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;however this will break support for splatted proc arguments.&lt;/p&gt;
&lt;p&gt;Whilst the problem lies in ActiveSupport::NewCallbacks, I have
not yet been able to create a test case that isolates the
problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-21T02:01:52+01:00</created-at>
      <creator-id type="integer">21958</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3230</number>
      <permalink>zero-arity-conditional-validation-procs-broken-by-asnewcallbacks</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel activerecord activesupport patch</tag>
      <title>Zero-arity conditional validation procs broken by AS::NewCallbacks</title>
      <updated-at type="datetime">2009-09-21T02:01:56+01:00</updated-at>
      <user-id type="integer">21958</user-id>
      <version type="integer">2</version>
      <user-name>Sam Pohlenz</user-name>
      <creator-name>Sam Pohlenz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3230</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-25T12:00:32+01:00</created-at>
      <creator-id type="integer">21958</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activemodel activerecord activesupport patch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3230</number>
      <permalink>zero-arity-conditional-validation-procs-broken-by-asnewcallbacks</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel activerecord activesupport bugmash patch</tag>
      <title>Zero-arity conditional validation procs broken by AS::NewCallbacks</title>
      <updated-at type="datetime">2009-09-25T12:47:49+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Sam Pohlenz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3230</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Were you able to get to the problem Sam? Is this still applicable?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Were you able to get to the problem Sam? Is this still
applicable?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-21T06:56:26+00:00</created-at>
      <creator-id type="integer">21958</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:tag: activemodel activerecord activesupport bugmash patch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3230</number>
      <permalink>zero-arity-conditional-validation-procs-broken-by-asnewcallbacks</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activemodel activerecord activesupport</tag>
      <title>Zero-arity conditional validation procs broken by AS::NewCallbacks</title>
      <updated-at type="datetime">2010-01-21T06:56:27+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">4</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Sam Pohlenz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3230</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This appears to now be fixed. Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This appears to now be fixed. Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-21T09:28:40+00:00</created-at>
      <creator-id type="integer">21958</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3230</number>
      <permalink>zero-arity-conditional-validation-procs-broken-by-asnewcallbacks</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activemodel activerecord activesupport</tag>
      <title>Zero-arity conditional validation procs broken by AS::NewCallbacks</title>
      <updated-at type="datetime">2010-01-21T09:28:43+00:00</updated-at>
      <user-id type="integer">21958</user-id>
      <version type="integer">5</version>
      <user-name>Sam Pohlenz</user-name>
      <creator-name>Sam Pohlenz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3230</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-21T09:30:22+00:00</created-at>
      <creator-id type="integer">21958</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3230</number>
      <permalink>zero-arity-conditional-validation-procs-broken-by-asnewcallbacks</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activemodel activerecord activesupport</tag>
      <title>Zero-arity conditional validation procs broken by AS::NewCallbacks</title>
      <updated-at type="datetime">2010-01-21T09:30:22+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">6</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Sam Pohlenz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3230</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-21T09:30:22+00:00</created-at>
      <creator-id type="integer">21958</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3230</number>
      <permalink>zero-arity-conditional-validation-procs-broken-by-asnewcallbacks</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activemodel activerecord activesupport</tag>
      <title>Zero-arity conditional validation procs broken by AS::NewCallbacks</title>
      <updated-at type="datetime">2010-01-21T09:30:23+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">7</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Sam Pohlenz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3230</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>131fb9a868d7fe1e4309c4fd93333fde75904ef1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-18T05:59:31+01:00</created-at>
      <filename>failing-tests-for-zero-arity-validation-procs.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">272361</id>
      <size type="integer">2484</size>
      <uploader-id type="integer">21958</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/272361/failing-tests-for-zero-arity-validation-procs.diff</url>
    </attachment>
  </attachments>
</ticket>
