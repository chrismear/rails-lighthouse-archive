<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">4</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2008-12-08T19:28:34+00:00</created-at>
  <creator-id type="integer">23062</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">1533</number>
  <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
  <priority type="integer">892</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>activerecord associations bugmash ora-01795 oracle patch preload preload_associaitons sql</tag>
  <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
  <updated-at type="datetime">2011-03-02T14:50:25+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">34</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Ed Lebert</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Rails often uses &quot;in&quot; sql clauses when preloading associations.  Oracle has a 1000 term restriction on such clauses, so that you cannot say something like &quot;WHERE parent_id IN (1,2,3,4 ... 1001)&quot;.  One possible solution is to break it up like this:

&quot;WHERE (parent_id IN (1,2,3,4,...) OR parent_id IN (1001,1002,...)&quot;.

It has been proposed that the adapters can supply their &quot;in clause limit&quot;, and the abstract adapter can just default to return nil if it has no limit.  But the oracle adapter can return 1000.

I searched to make sure this isn't a duplicate ticket first.  Sorry if it is.  This is my first rails bug.</original-body>
  <latest-body>Rails often uses &quot;in&quot; sql clauses when preloading associations.  Oracle has a 1000 term restriction on such clauses, so that you cannot say something like &quot;WHERE parent_id IN (1,2,3,4 ... 1001)&quot;.  One possible solution is to break it up like this:

&quot;WHERE (parent_id IN (1,2,3,4,...) OR parent_id IN (1001,1002,...)&quot;.

It has been proposed that the adapters can supply their &quot;in clause limit&quot;, and the abstract adapter can just default to return nil if it has no limit.  But the oracle adapter can return 1000.

I searched to make sure this isn't a duplicate ticket first.  Sorry if it is.  This is my first rails bug.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Rails often uses &quot;in&quot; sql clauses when preloading associations.
Oracle has a 1000 term restriction on such clauses, so that you
cannot say something like &quot;WHERE parent_id IN (1,2,3,4 ... 1001)&quot;.
One possible solution is to break it up like this:&lt;/p&gt;
&lt;p&gt;&quot;WHERE (parent_id IN (1,2,3,4,...) OR parent_id IN
(1001,1002,...)&quot;.&lt;/p&gt;
&lt;p&gt;It has been proposed that the adapters can supply their &quot;in
clause limit&quot;, and the abstract adapter can just default to return
nil if it has no limit. But the oracle adapter can return 1000.&lt;/p&gt;
&lt;p&gt;I searched to make sure this isn't a duplicate ticket first.
Sorry if it is. This is my first rails bug.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails often uses &quot;in&quot; sql clauses when preloading associations.  Oracle has a 1000 term restriction on such clauses, so that you cannot say something like &quot;WHERE parent_id IN (1,2,3,4 ... 1001)&quot;.  One possible solution is to break it up like this:

&quot;WHERE (parent_id IN (1,2,3,4,...) OR parent_id IN (1001,1002,...)&quot;.

It has been proposed that the adapters can supply their &quot;in clause limit&quot;, and the abstract adapter can just default to return nil if it has no limit.  But the oracle adapter can return 1000.

I searched to make sure this isn't a duplicate ticket first.  Sorry if it is.  This is my first rails bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails often uses &quot;in&quot; sql clauses when preloading associations.
Oracle has a 1000 term restriction on such clauses, so that you
cannot say something like &quot;WHERE parent_id IN (1,2,3,4 ... 1001)&quot;.
One possible solution is to break it up like this:&lt;/p&gt;
&lt;p&gt;&quot;WHERE (parent_id IN (1,2,3,4,...) OR parent_id IN
(1001,1002,...)&quot;.&lt;/p&gt;
&lt;p&gt;It has been proposed that the adapters can supply their &quot;in
clause limit&quot;, and the abstract adapter can just default to return
nil if it has no limit. But the oracle adapter can return 1000.&lt;/p&gt;
&lt;p&gt;I searched to make sure this isn't a duplicate ticket first.
Sorry if it is. This is my first rails bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-08T19:28:34+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2008-12-08T19:28:40+00:00</updated-at>
      <user-id type="integer">23062</user-id>
      <version type="integer">1</version>
      <user-name>Ed Lebert</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I vaguely recall someone having the same issue, although I can't remember whether it was here or a post on one of the various mailing lists. This does seem reasonable, I suppose the only question I would ask would be is it preferable to do

@@@ sql
Select * from foos where id in ( ... ) or id in ( ... )
@@@

or to do two queries, one for each chunk. I can't imagine that either would be very hard to do</body>
      <body-html>&lt;div&gt;&lt;p&gt;I vaguely recall someone having the same issue, although I can't
remember whether it was here or a post on one of the various
mailing lists. This does seem reasonable, I suppose the only
question I would ask would be is it preferable to do&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
Select * from foos where id in ( ... ) or id in ( ... )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or to do two queries, one for each chunk. I can't imagine that
either would be very hard to do&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-08T20:19:02+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2008-12-08T20:19:05+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">2</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think the first option is best, but you're the expert.

I used to just monkey patch ActiveRecord::AssociationPreload::ClassMethods::Find_assicoated_records.  But another place where this popped up was a habtm relationship where activerecord performed a join query.  I'm sure you know where this is in the code better than I do.

However, another question is how far reaching will you make this fix?  It seems like a lot of work to make this fix complete, as you'd have to at least put it anywhere in activerecord where there's an 'in' clause.  Yikes.  Also, what about when a user does a condition on @@@:conditions =&gt; ['column_name IN (?)', ids]@@@ 

I hate oracle.  But this is for a big corporate application the only database they allow is oracle.  Unfortunately that is a reality for a lot of web developers.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think the first option is best, but you're the expert.&lt;/p&gt;
&lt;p&gt;I used to just monkey patch
ActiveRecord::AssociationPreload::ClassMethods::Find_assicoated_records.
But another place where this popped up was a habtm relationship
where activerecord performed a join query. I'm sure you know where
this is in the code better than I do.&lt;/p&gt;
&lt;p&gt;However, another question is how far reaching will you make this
fix? It seems like a lot of work to make this fix complete, as
you'd have to at least put it anywhere in activerecord where
there's an 'in' clause. Yikes. Also, what about when a user does a
condition on @@@:conditions =&amp;gt; ['column_name IN (?)',
ids]@@@&lt;/p&gt;
&lt;p&gt;I hate oracle. But this is for a big corporate application the
only database they allow is oracle. Unfortunately that is a reality
for a lot of web developers.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-08T20:28:43+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2008-12-08T20:28:48+00:00</updated-at>
      <user-id type="integer">23062</user-id>
      <version type="integer">3</version>
      <user-name>Ed Lebert</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have this problem with Oracle too. 

Here I found a discussion about it:
http://www.ruby-forum.com/topic/164681

The solution proposed there seems not to work in my case, however.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have this problem with Oracle too.&lt;/p&gt;
&lt;p&gt;Here I found a discussion about it: &lt;a href=&quot;http://www.ruby-forum.com/topic/164681&quot;&gt;http://www.ruby-forum.com/topic/...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The solution proposed there seems not to work in my case,
however.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-17T11:57:09+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2008-12-17T11:57:13+00:00</updated-at>
      <user-id type="integer">34129</user-id>
      <version type="integer">4</version>
      <user-name>Giorgio Gonnella</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Personally I wouldn't worry about the case when the user does :conditions =&gt; {:foos =&gt; list_of_ids}. Users can work their way round that, whereas with the associations stuff you'd be stuck. I suspect that in the case with a big number of records you'd be better off triggering a fallback to the older joins based include</body>
      <body-html>&lt;div&gt;&lt;p&gt;Personally I wouldn't worry about the case when the user does
:conditions =&amp;gt; {:foos =&amp;gt; list_of_ids}. Users can work their
way round that, whereas with the associations stuff you'd be stuck.
I suspect that in the case with a big number of records you'd be
better off triggering a fallback to the older joins based
include&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-17T12:53:08+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2008-12-17T12:53:12+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">5</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>OK. The solution in the ruby-forum is of course incomplete, as patches only find_associated_records and not e.g. preload_belongs_to_association. (which is why is not working for me)</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK. The solution in the ruby-forum is of course incomplete, as
patches only find_associated_records and not e.g.
preload_belongs_to_association. (which is why is not working for
me)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-17T13:11:42+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2008-12-17T13:11:46+00:00</updated-at>
      <user-id type="integer">34129</user-id>
      <version type="integer">6</version>
      <user-name>Giorgio Gonnella</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I &quot;quick&quot;-fixed it as in the following diff:</body>
      <body-html>&lt;div&gt;&lt;p&gt;I &quot;quick&quot;-fixed it as in the following diff:&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-17T14:48:04+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2008-12-17T14:48:05+00:00</updated-at>
      <user-id type="integer">34129</user-id>
      <version type="integer">7</version>
      <user-name>Giorgio Gonnella</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here is a patch (based on the rails-2.2 branch, can be easily adapted for the master branch)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is a patch (based on the rails-2.2 branch, can be easily
adapted for the master branch)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-02T17:08:33+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2009-03-02T17:08:38+00:00</updated-at>
      <user-id type="integer">34129</user-id>
      <version type="integer">8</version>
      <user-name>Giorgio Gonnella</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-02T17:10:20+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2009-03-02T17:10:22+00:00</updated-at>
      <user-id type="integer">34129</user-id>
      <version type="integer">9</version>
      <user-name>Giorgio Gonnella</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>2 things:

it looks to me like you are missing some parentheses in your sql - it will generate stuff that looks like

id in (...) or id in (...) AND other conditions

instead of

(id in (...) or id in (...)) AND other conditions

secondly, no tests :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;2 things:&lt;/p&gt;
&lt;p&gt;it looks to me like you are missing some parentheses in your sql
- it will generate stuff that looks like&lt;/p&gt;
&lt;p&gt;id in (...) or id in (...) AND other conditions&lt;/p&gt;
&lt;p&gt;instead of&lt;/p&gt;
&lt;p&gt;(id in (...) or id in (...)) AND other conditions&lt;/p&gt;
&lt;p&gt;secondly, no tests :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-02T17:50:12+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2009-03-02T17:50:17+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">10</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Frederick, thank you for reviewing it. 

Reply to your objections: 

- missing parenthesis: of course a couple of parenthesis more around it can only be good, you're right, I will correct it

- no tests: I should definitely prepare them. I probably have still too less experience in testing ActiveRecord features, but I will have a look on the tests suite you guys provide</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Frederick, thank you for reviewing it.&lt;/p&gt;
&lt;p&gt;Reply to your objections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;missing parenthesis: of course a couple of parenthesis more
around it can only be good, you're right, I will correct it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no tests: I should definitely prepare them. I probably have
still too less experience in testing ActiveRecord features, but I
will have a look on the tests suite you guys provide&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-02T20:56:37+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2009-03-02T20:56:40+00:00</updated-at>
      <user-id type="integer">34129</user-id>
      <version type="integer">11</version>
      <user-name>Giorgio Gonnella</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-05T14:20:00+01:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord associations oracle preload preload_associaitons sql
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations bugmash oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2009-08-05T14:20:05+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">12</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>-1 Not sure it's the right way to patch it, someone considered the performance issues with such a select? it's one of those things that are better left for the DBA to solve (that limit is configurable if i recall correctly).

anyway, should not be patched in ActiveRecord, but rather on the OracleAdapter.</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1 Not sure it's the right way to patch it, someone considered
the performance issues with such a select? it's one of those things
that are better left for the DBA to solve (that limit is
configurable if i recall correctly).&lt;/p&gt;
&lt;p&gt;anyway, should not be patched in ActiveRecord, but rather on the
OracleAdapter.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T22:45:04+01:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations bugmash oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2009-08-09T22:45:10+01:00</updated-at>
      <user-id type="integer">10379</user-id>
      <version type="integer">13</version>
      <user-name>Elad Meidar</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 verified on a sample app and a none-configured Oracle database with limit on.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 verified on a sample app and a none-configured Oracle
database with limit on.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T22:45:48+01:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations bugmash oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2009-08-09T22:45:52+01:00</updated-at>
      <user-id type="integer">10379</user-id>
      <version type="integer">14</version>
      <user-name>Elad Meidar</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>From what I can tell, it's not possible to change this limit within Oracle. I also don't think that it's possible for the oracle adapter to cleanly fix this problem since it's Rails that generates all of this raw SQL. This means that any query that happens to be including more than 1000 associated records fails with this error: &quot;OCIError: ORA-01795: maximum number of expressions in a list is 1000&quot;.

The earlier patch fixes this problem, but I'm also unsure if there might be performance implications of constructing the query that way for all other databases. Although, personally, for queries loading 1000s of associations, I'm more concerned with getting actual results than performance.

I'm also attaching an simpler monkey patch that surely has worse performance. The only real benefit is that you can drop this into config/initializers and it only overrides one method to fix things, and it's only triggered if there are more than 1000 items. The earlier patch is a better solution, but I didn't want to maintain fully patched copies of the various methods involved.</body>
      <body-html>&lt;div&gt;&lt;p&gt;From what I can tell, it's not possible to change this limit
within Oracle. I also don't think that it's possible for the oracle
adapter to cleanly fix this problem since it's Rails that generates
all of this raw SQL. This means that any query that happens to be
including more than 1000 associated records fails with this error:
&quot;OCIError: ORA-01795: maximum number of expressions in a list is
1000&quot;.&lt;/p&gt;
&lt;p&gt;The earlier patch fixes this problem, but I'm also unsure if
there might be performance implications of constructing the query
that way for all other databases. Although, personally, for queries
loading 1000s of associations, I'm more concerned with getting
actual results than performance.&lt;/p&gt;
&lt;p&gt;I'm also attaching an simpler monkey patch that surely has worse
performance. The only real benefit is that you can drop this into
config/initializers and it only overrides one method to fix things,
and it's only triggered if there are more than 1000 items. The
earlier patch is a better solution, but I didn't want to maintain
fully patched copies of the various methods involved.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-15T21:20:09+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord associations bugmash oracle preload preload_associaitons sql
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations bugmash ora-01795 oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-01-15T21:20:14+00:00</updated-at>
      <user-id type="integer">53345</user-id>
      <version type="integer">15</version>
      <user-name>Nick M</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Oops, here's the simpler monkey patch that can be dropped in config/initializers</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oops, here's the simpler monkey patch that can be dropped in
config/initializers&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-15T21:24:19+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations bugmash ora-01795 oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-01-15T21:24:21+00:00</updated-at>
      <user-id type="integer">53345</user-id>
      <version type="integer">16</version>
      <user-name>Nick M</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Hi Giorgio, 
    I have the same issue and tried your solution and this is not working for me. 
Can you please upload your file /vendor/rails/activerecord/lib/active_record/association_preload.rb ?
btw, I'm using rails 2.2

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Giorgio,&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;I have the same issue and tried your solution and this is not working for me.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Can you please upload your file
/vendor/rails/activerecord/lib/active_record/association_preload.rb
?&lt;br&gt;
btw, I'm using rails 2.2&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-20T17:14:12+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations bugmash ora-01795 oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-01-20T17:14:14+00:00</updated-at>
      <user-id type="integer">83366</user-id>
      <version type="integer">17</version>
      <user-name>Steve</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/13645)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/13645&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-12T12:46:13+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord associations bugmash ora-01795 oracle preload preload_associaitons sql
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations ora-01795 oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-02-12T12:46:13+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">18</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I've done a bit of checking.  It seems that the database adapters are not shy about opening ActiveRecord::Base to make changes.  (See, for instance vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, and gems/activerecord-oracle-adapter-1.0.0.9250/lib/active_record/connection_adapters/oracle_adapter.rb).

This indicates that the fix should probably be in the oracle adapter.

Also, while it has been commented that the user should take care of :conditions =&gt; {:foos =&gt; list_of_ids} themselves, I have problems with this.  If someone is using a plugin, the plugin might well generate the list.  So they have to hack someone else's code.  Furthermore, it is not a fix, but fixes that we need, as every instance would need to be corrected.

Note that ActiveRecord::Base#quote_bound_value does not go through in_or_equals_for_ids, so the wrapper proposed is incomplete.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've done a bit of checking. It seems that the database adapters
are not shy about opening ActiveRecord::Base to make changes. (See,
for instance
vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb,
and
gems/activerecord-oracle-adapter-1.0.0.9250/lib/active_record/connection_adapters/oracle_adapter.rb).&lt;/p&gt;
&lt;p&gt;This indicates that the fix should probably be in the oracle
adapter.&lt;/p&gt;
&lt;p&gt;Also, while it has been commented that the user should take care
of :conditions =&amp;gt; {:foos =&amp;gt; list_of_ids} themselves, I have
problems with this. If someone is using a plugin, the plugin might
well generate the list. So they have to hack someone else's code.
Furthermore, it is not a fix, but fixes that we need, as every
instance would need to be corrected.&lt;/p&gt;
&lt;p&gt;Note that ActiveRecord::Base#quote_bound_value does not go
through in_or_equals_for_ids, so the wrapper proposed is
incomplete.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-04T15:42:55+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations ora-01795 oracle preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-03-04T15:43:01+00:00</updated-at>
      <user-id type="integer">38323</user-id>
      <version type="integer">19</version>
      <user-name>Student</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Well, ... I lied.  I have a fix which should cover all issues.  The best solution, it would seem to me, is to adjust ActiveRecord::Base just a little to support the fix in the Oracle adapter:

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index cd67490..68dec91 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -1639,13 +1639,17 @@ module ActiveRecord #:nodoc:
             if value.respond_to?(:empty?) &amp;&amp; value.empty?
               connection.quote(nil)
             else
-              value.map { |v| connection.quote(v) }.join(',')
+              join_quoted_values_for_condition(value.map{|v| connection.quote(v)})
             end
           else
             connection.quote(value)
           end
         end
 
+        def join_quoted_values_for_condition(values) #:nodoc:
+          values * ','
+        end
+
         def raise_if_bind_arity_mismatch(statement, expected, provided) #:nodoc:
           unless expected == provided
             raise PreparedStatementInvalid, &quot;wrong number of bind variables (#{provided} for #{expected}) in: #{statement}&quot;
-- 
1.6.0.4


This allows a clean fix to the oracle adapter (enhanced)
diff --git a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb b/lib/active_record/connection_adapters/oracle_enhance
index e01b07d..f92167a 100644
--- a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
+++ b/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
@@ -107,6 +107,10 @@ module ActiveRecord
     end
     private :enhanced_write_lobs
     
+    def join_quoted_values_for_condition(values) #:nodoc:
+      values * ','
+    end
+
     class &lt;&lt; self
       # patch ORDER BY to work with LOBs
       def add_order_with_lobs!(sql, order, scope = :auto)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well, ... I lied. I have a fix which should cover all issues.
The best solution, it would seem to me, is to adjust
ActiveRecord::Base just a little to support the fix in the Oracle
adapter:&lt;/p&gt;
&lt;p&gt;diff --git a/activerecord/lib/active_record/base.rb
b/activerecord/lib/active_record/base.rb&lt;br&gt;
index cd67490..68dec91 100755&lt;br&gt;
--- a/activerecord/lib/active_record/base.rb +++
b/activerecord/lib/active_record/base.rb @@ -1639,13 +1639,17 @@
module ActiveRecord #:nodoc:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;         if value.respond_to?(:empty?) &amp;amp;&amp;amp; value.empty?
           connection.quote(nil)
         else&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;       value.map { |v| connection.quote(v) }.join(',')&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;       join_quoted_values_for_condition(value.map{|v| connection.quote(v)})
     end
   else
     connection.quote(value)
   end
 end&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; def join_quoted_values_for_condition(values) #:nodoc:&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   values * ','&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; end&lt;/code&gt;
&lt;/pre&gt;
+
&lt;pre&gt;
&lt;code&gt; def raise_if_bind_arity_mismatch(statement, expected, provided) #:nodoc:
   unless expected == provided
     raise PreparedStatementInvalid, &quot;wrong number of bind variables (#{provided} for #{expected}) in: #{statement}&quot;&lt;/code&gt;
&lt;/pre&gt;
-- 1.6.0.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This allows a clean fix to the oracle adapter (enhanced)&lt;br&gt;
diff --git
a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
b/lib/active_record/connection_adapters/oracle_enhance&lt;br&gt;
index e01b07d..f92167a 100644&lt;br&gt;
---
a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
+++
b/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
@@ -107,6 +107,10 @@ module ActiveRecord&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; end
 private :enhanced_write_lobs&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;def join_quoted_values_for_condition(values) #:nodoc:&lt;/li&gt;
&lt;li&gt;values * ','&lt;/li&gt;
&lt;li&gt;end + class &amp;lt;&amp;lt; self # patch ORDER BY to work with LOBs
def add_order_with_lobs!(sql, order, scope = :auto)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-04T23:25:02+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord associations ora-01795 oracle preload preload_associaitons sql
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-03-04T23:25:12+00:00</updated-at>
      <user-id type="integer">38323</user-id>
      <version type="integer">20</version>
      <user-name>Student</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Uggh.  Formatting problems AND I grabbed the wrong changes...  (The patch above should be good)

@@@ diff
---
activerecord/lib/active_record/base.rb |    6 +++++-
1 files changed, 5 insertions(+), 1 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index cd67490..68dec91 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -1639,13 +1639,17 @@ module ActiveRecord #:nodoc:
            if value.respond_to?(:empty?) &amp;&amp; value.empty?
              connection.quote(nil)
            else
-              value.map { |v| connection.quote(v) }.join(',')
+              join_quoted_values_for_condition(value.map{|v| connection.quote(v)})
            end
          else
            connection.quote(value)
          end
        end

+        def join_quoted_values_for_condition(values) #:nodoc:
+          values * ','
+        end
+
        def raise_if_bind_arity_mismatch(statement, expected, provided) #:nodoc:
          unless expected == provided
            raise PreparedStatementInvalid, &quot;wrong number of bind variables (#{provided} for #{expected}) in: #{statement}&quot;
-- 
1.6.0.4
@@@

This supports the fix in the oracle adapter:

@@@ patch
---
 .../connection_adapters/oracle_enhanced_adapter.rb |   14 ++++++++++++++
 1 files changed, 14 insertions(+), 0 deletions(-)

diff --git a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb b/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
index e01b07d..5f62266 100644
--- a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
+++ b/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
@@ -107,6 +107,20 @@ module ActiveRecord
     end
     private :enhanced_write_lobs
     
+    ORACLE_IN_LIMIT = 1000
+
+    def join_quoted_values_for_condition(values)
+      return values * ',' unless values.length &gt; ORACLE_IN_LIMIT
+
+      values.uniq!
+      return values * ',' unless values.length &gt; ORACLE_IN_LIMIT
+
+      quoted_chunks = values.in_groups_of(ORACLE_IN_LIMIT) do |chunk|
+        &quot;(SELECT * FROM TABLE(sys.odcinumberlist(#{chunk * ','})))&quot;
+      end
+      quoted_chunks * &quot; UNION &quot;
+    end
+
     class &lt;&lt; self
       # patch ORDER BY to work with LOBs
       def add_order_with_lobs!(sql, order, scope = :auto)
-- 
1.6.0.4
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Uggh. Formatting problems AND I grabbed the wrong changes...
(The patch above should be good)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;diff&quot;&gt;---
activerecord/lib/active_record/base.rb |    6 +++++-
1 files changed, 5 insertions(+), 1 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index cd67490..68dec91 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -1639,13 +1639,17 @@ module ActiveRecord #:nodoc:
            if value.respond_to?(:empty?) &amp;amp;&amp;amp; value.empty?
              connection.quote(nil)
            else
-              value.map { |v| connection.quote(v) }.join(',')
+              join_quoted_values_for_condition(value.map{|v| connection.quote(v)})
            end
          else
            connection.quote(value)
          end
        end

+        def join_quoted_values_for_condition(values) #:nodoc:
+          values * ','
+        end
+
        def raise_if_bind_arity_mismatch(statement, expected, provided) #:nodoc:
          unless expected == provided
            raise PreparedStatementInvalid, &quot;wrong number of bind variables (#{provided} for #{expected}) in: #{statement}&quot;
-- 
1.6.0.4&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This supports the fix in the oracle adapter:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;patch&quot;&gt;---
 .../connection_adapters/oracle_enhanced_adapter.rb |   14 ++++++++++++++
 1 files changed, 14 insertions(+), 0 deletions(-)

diff --git a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb b/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
index e01b07d..5f62266 100644
--- a/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
+++ b/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb
@@ -107,6 +107,20 @@ module ActiveRecord
     end
     private :enhanced_write_lobs
     
+    ORACLE_IN_LIMIT = 1000
+
+    def join_quoted_values_for_condition(values)
+      return values * ',' unless values.length &amp;gt; ORACLE_IN_LIMIT
+
+      values.uniq!
+      return values * ',' unless values.length &amp;gt; ORACLE_IN_LIMIT
+
+      quoted_chunks = values.in_groups_of(ORACLE_IN_LIMIT) do |chunk|
+        &quot;(SELECT * FROM TABLE(sys.odcinumberlist(#{chunk * ','})))&quot;
+      end
+      quoted_chunks * &quot; UNION &quot;
+    end
+
     class &amp;lt;&amp;lt; self
       # patch ORDER BY to work with LOBs
       def add_order_with_lobs!(sql, order, scope = :auto)
-- 
1.6.0.4&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-05T00:43:51+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-03-05T00:43:57+00:00</updated-at>
      <user-id type="integer">38323</user-id>
      <version type="integer">21</version>
      <user-name>Student</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Well..  I found another place that needs to be touched...

@@@ patch
---
 activerecord/lib/active_record/base.rb |    8 ++++++--
 1 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index cd67490..563a645 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -695,7 +695,7 @@ module ActiveRecord #:nodoc:
         }.join(&quot;, &quot;)
 
         if id.is_a?(Array)
-          ids_list = id.map {|i| quote_value(i)}.join(', ')
+          ids_list = join_quoted_values_for_condition(id.map{|i| quote_value(i)})
           condition = &quot;IN  (#{ids_list})&quot;
         else
           condition = &quot;= #{quote_value(id)}&quot;
@@ -1639,13 +1639,17 @@ module ActiveRecord #:nodoc:
             if value.respond_to?(:empty?) &amp;&amp; value.empty?
               connection.quote(nil)
             else
-              value.map { |v| connection.quote(v) }.join(',')
+              join_quoted_values_for_condition(value.map{|v| connection.quote(v)})
             end
           else
             connection.quote(value)
           end
         end
 
+        def join_quoted_values_for_condition(values) #:nodoc:
+          values * ','
+        end
+
         def raise_if_bind_arity_mismatch(statement, expected, provided) #:nodoc:
           unless expected == provided
             raise PreparedStatementInvalid, &quot;wrong number of bind variables (#{provided} for #{expected}) in: #{statement}&quot;
-- 
1.6.0.4
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well.. I found another place that needs to be touched...&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;patch&quot;&gt;---
 activerecord/lib/active_record/base.rb |    8 ++++++--
 1 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index cd67490..563a645 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -695,7 +695,7 @@ module ActiveRecord #:nodoc:
         }.join(&quot;, &quot;)
 
         if id.is_a?(Array)
-          ids_list = id.map {|i| quote_value(i)}.join(', ')
+          ids_list = join_quoted_values_for_condition(id.map{|i| quote_value(i)})
           condition = &quot;IN  (#{ids_list})&quot;
         else
           condition = &quot;= #{quote_value(id)}&quot;
@@ -1639,13 +1639,17 @@ module ActiveRecord #:nodoc:
             if value.respond_to?(:empty?) &amp;amp;&amp;amp; value.empty?
               connection.quote(nil)
             else
-              value.map { |v| connection.quote(v) }.join(',')
+              join_quoted_values_for_condition(value.map{|v| connection.quote(v)})
             end
           else
             connection.quote(value)
           end
         end
 
+        def join_quoted_values_for_condition(values) #:nodoc:
+          values * ','
+        end
+
         def raise_if_bind_arity_mismatch(statement, expected, provided) #:nodoc:
           unless expected == provided
             raise PreparedStatementInvalid, &quot;wrong number of bind variables (#{provided} for #{expected}) in: #{statement}&quot;
-- 
1.6.0.4&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-05T14:46:05+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-03-05T14:46:08+00:00</updated-at>
      <user-id type="integer">38323</user-id>
      <version type="integer">22</version>
      <user-name>Student</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Needs a test case as well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Needs a test case as well.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-05T16:32:58+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-03-05T16:33:03+00:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">23</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>This patch is a nop for the rails core.  Its purpose is to provide a hook that the Oracle adapter can use.  Or do we need a test for join_quoted_values_for_condition ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch is a nop for the rails core. Its purpose is to
provide a hook that the Oracle adapter can use. Or do we need a
test for join_quoted_values_for_condition ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-05T17:11:14+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-03-05T17:11:16+00:00</updated-at>
      <user-id type="integer">38323</user-id>
      <version type="integer">24</version>
      <user-name>Student</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Ah, right. No test needed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ah, right. No test needed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-05T18:38:52+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-03-05T18:38:55+00:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">25</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/20088)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/20088&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-16T02:41:08+01:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord associations ora-01795 oracle patch preload preload_associaitons sql
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations bugmash ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-05-16T02:41:08+01:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">26</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/20606)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/20606&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-23T17:54:42+01:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 50064
</diffable-attributes>
      <milestone-id type="integer">73241</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations bugmash ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-05-23T17:54:42+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">27</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.7</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/20631)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/20631&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-24T09:40:50+01:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 73241
</diffable-attributes>
      <milestone-id type="integer">73273</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations bugmash ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-05-24T09:40:50+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">28</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.8</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/20816)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/20816&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-25T23:45:37+01:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 73273
</diffable-attributes>
      <milestone-id type="integer">73534</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations bugmash ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-05-25T23:45:37+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">29</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.9</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/27613)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/27613&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-30T02:28:48+01:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 73534
</diffable-attributes>
      <milestone-id type="integer">82855</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">892</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations bugmash ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2010-08-30T02:28:48+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">30</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.10</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:33:07+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">82855</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">892</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations bugmash ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2011-02-02T16:59:56+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">31</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.10</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:33:09+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">82855</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">892</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord associations bugmash ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2011-02-02T17:00:37+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">32</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.10</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>[state:open]
This is still an issue in 3.0.4.  For example, assuming User has_many :posts and Post has_one :content... this:
@@@ ruby
  User.where(:username=&gt;'somebody').includes(:posts)
@@@
works fine, but this:
@@@ ruby
  User.where(:username=&gt;'somebody').includes(:posts =&gt; :content)
@@@
will give us &quot;ORA-01795: maximum number of expressions in a list is 1000&quot; when the user has more than 1000 posts.

The SQL generated looks like this:
@@@ sql
  SELECT &quot;contents&quot;.* FROM &quot;contents&quot;
    WHERE (&quot;contents&quot;.&quot;post_id&quot; IN (ginormous list))
@@@
which is extremely non-performant in Oracle.  Ed's original suggestion of splitting the list of IDs should generate SQL which works in Oracle, but will be even worse performance-wise.

If possible, we're much better off if the Content eager-load generates SQL using JOINs rather than &quot;where ID in (x,y,z,...)&quot;:

@@@ sql
  SELECT contents.* FROM contents
    INNER JOIN posts ON posts.id=contents.post_id
    INNER JOIN users ON users.id=posts.user_id
    WHERE users.nid=1
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;[state:open] This is still an issue in 3.0.4. For example,
assuming User has_many :posts and Post has_one :content...
this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  User.where(:username=&amp;gt;'somebody').includes(:posts)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;works fine, but this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  User.where(:username=&amp;gt;'somebody').includes(:posts =&amp;gt; :content)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;will give us &quot;ORA-01795: maximum number of expressions in a list
is 1000&quot; when the user has more than 1000 posts.&lt;/p&gt;
&lt;p&gt;The SQL generated looks like this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql&quot;&gt;  SELECT &quot;contents&quot;.* FROM &quot;contents&quot;
    WHERE (&quot;contents&quot;.&quot;post_id&quot; IN (ginormous list))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;which is extremely non-performant in Oracle. Ed's original
suggestion of splitting the list of IDs should generate SQL which
works in Oracle, but will be even worse performance-wise.&lt;/p&gt;
&lt;p&gt;If possible, we're much better off if the Content eager-load
generates SQL using JOINs rather than &quot;where ID in
(x,y,z,...)&quot;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql&quot;&gt;  SELECT contents.* FROM contents
    INNER JOIN posts ON posts.id=contents.post_id
    INNER JOIN users ON users.id=posts.user_id
    WHERE users.nid=1&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-01T22:58:24+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer">82855</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">892</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations bugmash ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2011-03-01T22:58:44+00:00</updated-at>
      <user-id type="integer">139388</user-id>
      <version type="integer">33</version>
      <user-name>Robert Tarrall</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>2.3.10</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-02T14:50:02+00:00</created-at>
      <creator-id type="integer">23062</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 82855
:assigned_user: 17477
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1533</number>
      <permalink>preloading-more-than-1000-associated-records-causes-activerecordstatementinvalid-when-using-oracle</permalink>
      <priority type="integer">892</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations bugmash ora-01795 oracle patch preload preload_associaitons sql</tag>
      <title>Preloading more than 1000 associated records causes ActiveRecord::StatementInvalid when using Oracle</title>
      <updated-at type="datetime">2011-03-02T14:50:25+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">34</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Ed Lebert</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1533</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4c00ab476b0b12863db4d09bf092eb0e002b9dfd</code>
      <content-type>application/octet-stream</content-type>
      <created-at type="datetime">2009-03-02T17:08:34+00:00</created-at>
      <filename>commit-3e79b5f</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">94822</id>
      <size type="integer">3037</size>
      <uploader-id type="integer">34129</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/94822/commit-3e79b5f</url>
    </attachment>
    <attachment type="Attachment">
      <code>52a02c2e53ec8d583a919e0a608ec39c27805560</code>
      <content-type>text/x-ruby-script</content-type>
      <created-at type="datetime">2010-01-15T21:24:19+00:00</created-at>
      <filename>oracle_association_limit_bug.rb</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">379885</id>
      <size type="integer">1482</size>
      <uploader-id type="integer">53345</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/379885/oracle_association_limit_bug.rb</url>
    </attachment>
    <attachment type="Attachment">
      <code>9978367eb9cd174c640c617f571552182dab30e4</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-03-04T23:25:02+00:00</created-at>
      <filename>0001-broke-out-joining-the-quoted-values-in-activerecord.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">435190</id>
      <size type="integer">1360</size>
      <uploader-id type="integer">38323</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/435190/0001-broke-out-joining-the-quoted-values-in-activerecord.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>59779e173adfcec5b64c3074dd46899e58c29539</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-03-05T14:46:05+00:00</created-at>
      <filename>0001-broke-out-joining-the-quoted-values-in-activerecord.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">435817</id>
      <size type="integer">1710</size>
      <uploader-id type="integer">38323</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/435817/0001-broke-out-joining-the-quoted-values-in-activerecord.patch</url>
    </attachment>
  </attachments>
</ticket>
