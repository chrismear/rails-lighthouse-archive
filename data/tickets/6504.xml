<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-02T09:41:28+00:00</created-at>
  <creator-id type="integer">32604</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6504</number>
  <permalink>make-associations-respect-store_full_sti_class</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>association_preload patch polymorphic polymorphic_association store_full_sti_class</tag>
  <title>Make associations respect store_full_sti_class</title>
  <updated-at type="datetime">2011-03-11T16:42:57+00:00</updated-at>
  <user-id type="integer">32604</user-id>
  <version type="integer">2</version>
  <user-name>Joseph Palermo</user-name>
  <creator-name>Joseph Palermo</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6504</url>
  <priority-name nil="true"></priority-name>
  <original-body>Currently when doing an association preload, it will respect store_full_sti_class and use sti_name for the class it is loading.

However, all of the association code that actually sets the value of these columns uses base_class.name rather than sti_name.

This means association preloading won't work on polymorphic associations if you have store_full_sti_class disabled.

This patch creates a polymorphic_name class method that just calls base_class.sti_name and then uses that in both the association preload code, as well as when the _type column gets set in the association code.

Test is included.</original-body>
  <latest-body>Currently when doing an association preload, it will respect store_full_sti_class and use sti_name for the class it is loading.

However, all of the association code that actually sets the value of these columns uses base_class.name rather than sti_name.

This means association preloading won't work on polymorphic associations if you have store_full_sti_class disabled.

This patch creates a polymorphic_name class method that just calls base_class.sti_name and then uses that in both the association preload code, as well as when the _type column gets set in the association code.

Test is included.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Currently when doing an association preload, it will respect
store_full_sti_class and use sti_name for the class it is
loading.&lt;/p&gt;
&lt;p&gt;However, all of the association code that actually sets the
value of these columns uses base_class.name rather than
sti_name.&lt;/p&gt;
&lt;p&gt;This means association preloading won't work on polymorphic
associations if you have store_full_sti_class disabled.&lt;/p&gt;
&lt;p&gt;This patch creates a polymorphic_name class method that just
calls base_class.sti_name and then uses that in both the
association preload code, as well as when the _type column gets set
in the association code.&lt;/p&gt;
&lt;p&gt;Test is included.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Currently when doing an association preload, it will respect store_full_sti_class and use sti_name for the class it is loading.

However, all of the association code that actually sets the value of these columns uses base_class.name rather than sti_name.

This means association preloading won't work on polymorphic associations if you have store_full_sti_class disabled.

This patch creates a polymorphic_name class method that just calls base_class.sti_name and then uses that in both the association preload code, as well as when the _type column gets set in the association code.

Test is included.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Currently when doing an association preload, it will respect
store_full_sti_class and use sti_name for the class it is
loading.&lt;/p&gt;
&lt;p&gt;However, all of the association code that actually sets the
value of these columns uses base_class.name rather than
sti_name.&lt;/p&gt;
&lt;p&gt;This means association preloading won't work on polymorphic
associations if you have store_full_sti_class disabled.&lt;/p&gt;
&lt;p&gt;This patch creates a polymorphic_name class method that just
calls base_class.sti_name and then uses that in both the
association preload code, as well as when the _type column gets set
in the association code.&lt;/p&gt;
&lt;p&gt;Test is included.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-02T09:41:28+00:00</created-at>
      <creator-id type="integer">32604</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6504</number>
      <permalink>make-associations-respect-store_full_sti_class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>association_preload patch polymorphic polymorphic_association store_full_sti_class</tag>
      <title>Make associations respect store_full_sti_class</title>
      <updated-at type="datetime">2011-03-02T09:41:42+00:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">1</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>Joseph Palermo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6504</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Looking closer, I see a lot of calls to &quot;constantize&quot; in the associations, rather than looking up the sti_class_name.  Is store_full_sti_class supposed to apply to polymorphic type columns, or just to sti type columns?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looking closer, I see a lot of calls to &quot;constantize&quot; in the
associations, rather than looking up the sti_class_name. Is
store_full_sti_class supposed to apply to polymorphic type columns,
or just to sti type columns?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T16:42:55+00:00</created-at>
      <creator-id type="integer">32604</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6504</number>
      <permalink>make-associations-respect-store_full_sti_class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>association_preload patch polymorphic polymorphic_association store_full_sti_class</tag>
      <title>Make associations respect store_full_sti_class</title>
      <updated-at type="datetime">2011-03-11T16:42:57+00:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">2</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>Joseph Palermo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6504</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ec4faab50eb6d52f00b361345418465c4b03146b</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-02T09:41:29+00:00</created-at>
      <filename>associations_respect_store_full_sti_class.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">937760</id>
      <size type="integer">6446</size>
      <uploader-id type="integer">32604</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/937760/associations_respect_store_full_sti_class.diff</url>
    </attachment>
  </attachments>
</ticket>
