<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-09T05:26:58+00:00</created-at>
  <creator-id type="integer">53345</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6392</number>
  <permalink>patch-activeresource-doesnt-support-file-uploadsattachments</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>activeresource multipart patch</tag>
  <title>[patch] ActiveResource doesn't support file uploads/attachments</title>
  <updated-at type="datetime">2011-02-09T05:27:00+00:00</updated-at>
  <user-id type="integer">53345</user-id>
  <version type="integer">1</version>
  <user-name>Nick M</user-name>
  <creator-name>Nick M</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6392</url>
  <priority-name nil="true"></priority-name>
  <original-body>### Problem ###

ActiveResource doesn't currently support file objects within an instance. If you try and save an ActiveResource instance that contains a file attachment, the file object's attributes get serialized, but not the file itself. For example, this is what ActiveResource currently sends when trying to create a new object that contains an uploaded file:

@@@ xml
    &lt;user&gt;
      &lt;first-name&gt;Tom&lt;/first-name&gt;
      &lt;last-name&gt;Jones&lt;/last-name&gt;
      &lt;address&gt;1234 Test Rd&lt;/address&gt;
      &lt;avatar type=&quot;yaml&quot;&gt;--- !ruby/object:ActionDispatch::Http::UploadedFile 
    content_type: image/png
    headers: |
      Content-Disposition: form-data; name=&quot;user[avatar]&quot;; filename=&quot;Picture 4.png&quot;
      Content-Type: image/png

    original_filename: Picture 4.png
    tempfile: !ruby/object:File {}
    &lt;/avatar&gt;
    &lt;/user&gt;
@@@

That serialized `&lt;avatar&gt;` content obviously won't work on the remote server since it doesn't actually contain the file data. You can try to base64 encode your file content inside the XML or JSON data being sent to the remote server, but that is cumbersome, slow, and requires individual changes to both your client and server code.

### Patch ###
I've attached a patch with tests (for both master and the 3-0-stable branch) that gives you the option to send and encode your ActiveResource POST and PUT request data as `application/x-www-form-urlencoded` or, when file attachments are present, `multipart/form-data`. Since Net::HTTP doesn't natively handle mutlipart attachments, I introduced a dependency on the `Payload` class from [rest-client](http://rubygems.org/gems/rest-client).

To enable this new encoding option, I added a new class attribute, `ActiveRecord::Base.payload_encoding`. It works similar to how the `format` option works (it can be set globally or on a per-class basis). `payload_encoding` defaults to `:serialized` for compatibility (data will continue to be posted as serialized JSON or XML). Or `payload_encoding` can be set to `:form` to encode the attributes as form elements/multipart data for attachments.

This feature also seems handy to have for remote web services that expect data encoded this way (and not as JSON or XML).

Finally, regarding compatibility, it's disabled by default so it shouldn't interfere, but if you're targeting a Rails-based backend service, I believe enabling it should be mostly seamless. Since a Rails backend will automatically decode the XML and JSON data sent to into form parameters anyway, this simply negates the need for that step.

### Example ###

@@@ ruby
    class Image &lt; ActiveResource::Base
      self.site = &quot;http://localhost:3001/&quot;
      self.format = :json
      self.payload_encoding = :form
    end
@@@

`Image.find` and others will continue to fetch the data using JSON. However, `Image.create` and other save methods will post the data as form attributes, allowing multipart attachments to also work.</original-body>
  <latest-body>### Problem ###

ActiveResource doesn't currently support file objects within an instance. If you try and save an ActiveResource instance that contains a file attachment, the file object's attributes get serialized, but not the file itself. For example, this is what ActiveResource currently sends when trying to create a new object that contains an uploaded file:

@@@ xml
    &lt;user&gt;
      &lt;first-name&gt;Tom&lt;/first-name&gt;
      &lt;last-name&gt;Jones&lt;/last-name&gt;
      &lt;address&gt;1234 Test Rd&lt;/address&gt;
      &lt;avatar type=&quot;yaml&quot;&gt;--- !ruby/object:ActionDispatch::Http::UploadedFile 
    content_type: image/png
    headers: |
      Content-Disposition: form-data; name=&quot;user[avatar]&quot;; filename=&quot;Picture 4.png&quot;
      Content-Type: image/png

    original_filename: Picture 4.png
    tempfile: !ruby/object:File {}
    &lt;/avatar&gt;
    &lt;/user&gt;
@@@

That serialized `&lt;avatar&gt;` content obviously won't work on the remote server since it doesn't actually contain the file data. You can try to base64 encode your file content inside the XML or JSON data being sent to the remote server, but that is cumbersome, slow, and requires individual changes to both your client and server code.

### Patch ###
I've attached a patch with tests (for both master and the 3-0-stable branch) that gives you the option to send and encode your ActiveResource POST and PUT request data as `application/x-www-form-urlencoded` or, when file attachments are present, `multipart/form-data`. Since Net::HTTP doesn't natively handle mutlipart attachments, I introduced a dependency on the `Payload` class from [rest-client](http://rubygems.org/gems/rest-client).

To enable this new encoding option, I added a new class attribute, `ActiveRecord::Base.payload_encoding`. It works similar to how the `format` option works (it can be set globally or on a per-class basis). `payload_encoding` defaults to `:serialized` for compatibility (data will continue to be posted as serialized JSON or XML). Or `payload_encoding` can be set to `:form` to encode the attributes as form elements/multipart data for attachments.

This feature also seems handy to have for remote web services that expect data encoded this way (and not as JSON or XML).

Finally, regarding compatibility, it's disabled by default so it shouldn't interfere, but if you're targeting a Rails-based backend service, I believe enabling it should be mostly seamless. Since a Rails backend will automatically decode the XML and JSON data sent to into form parameters anyway, this simply negates the need for that step.

### Example ###

@@@ ruby
    class Image &lt; ActiveResource::Base
      self.site = &quot;http://localhost:3001/&quot;
      self.format = :json
      self.payload_encoding = :form
    end
@@@

`Image.find` and others will continue to fetch the data using JSON. However, `Image.create` and other save methods will post the data as form attributes, allowing multipart attachments to also work.</latest-body>
  <original-body-html>&lt;div&gt;&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;ActiveResource doesn't currently support file objects within an
instance. If you try and save an ActiveResource instance that
contains a file attachment, the file object's attributes get
serialized, but not the file itself. For example, this is what
ActiveResource currently sends when trying to create a new object
that contains an uploaded file:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;    &amp;lt;user&amp;gt;
      &amp;lt;first-name&amp;gt;Tom&amp;lt;/first-name&amp;gt;
      &amp;lt;last-name&amp;gt;Jones&amp;lt;/last-name&amp;gt;
      &amp;lt;address&amp;gt;1234 Test Rd&amp;lt;/address&amp;gt;
      &amp;lt;avatar type=&quot;yaml&quot;&amp;gt;--- !ruby/object:ActionDispatch::Http::UploadedFile 
    content_type: image/png
    headers: |
      Content-Disposition: form-data; name=&quot;user[avatar]&quot;; filename=&quot;Picture 4.png&quot;
      Content-Type: image/png

    original_filename: Picture 4.png
    tempfile: !ruby/object:File {}
    &amp;lt;/avatar&amp;gt;
    &amp;lt;/user&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That serialized &lt;code&gt;&amp;lt;avatar&amp;gt;&lt;/code&gt; content obviously
won't work on the remote server since it doesn't actually contain
the file data. You can try to base64 encode your file content
inside the XML or JSON data being sent to the remote server, but
that is cumbersome, slow, and requires individual changes to both
your client and server code.&lt;/p&gt;
&lt;h3&gt;Patch&lt;/h3&gt;
&lt;p&gt;I've attached a patch with tests (for both master and the
3-0-stable branch) that gives you the option to send and encode
your ActiveResource POST and PUT request data as
&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or, when file
attachments are present, &lt;code&gt;multipart/form-data&lt;/code&gt;. Since
Net::HTTP doesn't natively handle mutlipart attachments, I
introduced a dependency on the &lt;code&gt;Payload&lt;/code&gt; class from
&lt;a href=&quot;http://rubygems.org/gems/rest-client&quot;&gt;rest-client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable this new encoding option, I added a new class
attribute, &lt;code&gt;ActiveRecord::Base.payload_encoding&lt;/code&gt;. It
works similar to how the &lt;code&gt;format&lt;/code&gt; option works (it can
be set globally or on a per-class basis).
&lt;code&gt;payload_encoding&lt;/code&gt; defaults to &lt;code&gt;:serialized&lt;/code&gt;
for compatibility (data will continue to be posted as serialized
JSON or XML). Or &lt;code&gt;payload_encoding&lt;/code&gt; can be set to
&lt;code&gt;:form&lt;/code&gt; to encode the attributes as form
elements/multipart data for attachments.&lt;/p&gt;
&lt;p&gt;This feature also seems handy to have for remote web services
that expect data encoded this way (and not as JSON or XML).&lt;/p&gt;
&lt;p&gt;Finally, regarding compatibility, it's disabled by default so it
shouldn't interfere, but if you're targeting a Rails-based backend
service, I believe enabling it should be mostly seamless. Since a
Rails backend will automatically decode the XML and JSON data sent
to into form parameters anyway, this simply negates the need for
that step.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    class Image &amp;lt; ActiveResource::Base
      self.site = &quot;http://localhost:3001/&quot;
      self.format = :json
      self.payload_encoding = :form
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Image.find&lt;/code&gt; and others will continue to fetch the
data using JSON. However, &lt;code&gt;Image.create&lt;/code&gt; and other save
methods will post the data as form attributes, allowing multipart
attachments to also work.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>### Problem ###

ActiveResource doesn't currently support file objects within an instance. If you try and save an ActiveResource instance that contains a file attachment, the file object's attributes get serialized, but not the file itself. For example, this is what ActiveResource currently sends when trying to create a new object that contains an uploaded file:

@@@ xml
    &lt;user&gt;
      &lt;first-name&gt;Tom&lt;/first-name&gt;
      &lt;last-name&gt;Jones&lt;/last-name&gt;
      &lt;address&gt;1234 Test Rd&lt;/address&gt;
      &lt;avatar type=&quot;yaml&quot;&gt;--- !ruby/object:ActionDispatch::Http::UploadedFile 
    content_type: image/png
    headers: |
      Content-Disposition: form-data; name=&quot;user[avatar]&quot;; filename=&quot;Picture 4.png&quot;
      Content-Type: image/png

    original_filename: Picture 4.png
    tempfile: !ruby/object:File {}
    &lt;/avatar&gt;
    &lt;/user&gt;
@@@

That serialized `&lt;avatar&gt;` content obviously won't work on the remote server since it doesn't actually contain the file data. You can try to base64 encode your file content inside the XML or JSON data being sent to the remote server, but that is cumbersome, slow, and requires individual changes to both your client and server code.

### Patch ###
I've attached a patch with tests (for both master and the 3-0-stable branch) that gives you the option to send and encode your ActiveResource POST and PUT request data as `application/x-www-form-urlencoded` or, when file attachments are present, `multipart/form-data`. Since Net::HTTP doesn't natively handle mutlipart attachments, I introduced a dependency on the `Payload` class from [rest-client](http://rubygems.org/gems/rest-client).

To enable this new encoding option, I added a new class attribute, `ActiveRecord::Base.payload_encoding`. It works similar to how the `format` option works (it can be set globally or on a per-class basis). `payload_encoding` defaults to `:serialized` for compatibility (data will continue to be posted as serialized JSON or XML). Or `payload_encoding` can be set to `:form` to encode the attributes as form elements/multipart data for attachments.

This feature also seems handy to have for remote web services that expect data encoded this way (and not as JSON or XML).

Finally, regarding compatibility, it's disabled by default so it shouldn't interfere, but if you're targeting a Rails-based backend service, I believe enabling it should be mostly seamless. Since a Rails backend will automatically decode the XML and JSON data sent to into form parameters anyway, this simply negates the need for that step.

### Example ###

@@@ ruby
    class Image &lt; ActiveResource::Base
      self.site = &quot;http://localhost:3001/&quot;
      self.format = :json
      self.payload_encoding = :form
    end
@@@

`Image.find` and others will continue to fetch the data using JSON. However, `Image.create` and other save methods will post the data as form attributes, allowing multipart attachments to also work.</body>
      <body-html>&lt;div&gt;&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;ActiveResource doesn't currently support file objects within an
instance. If you try and save an ActiveResource instance that
contains a file attachment, the file object's attributes get
serialized, but not the file itself. For example, this is what
ActiveResource currently sends when trying to create a new object
that contains an uploaded file:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;    &amp;lt;user&amp;gt;
      &amp;lt;first-name&amp;gt;Tom&amp;lt;/first-name&amp;gt;
      &amp;lt;last-name&amp;gt;Jones&amp;lt;/last-name&amp;gt;
      &amp;lt;address&amp;gt;1234 Test Rd&amp;lt;/address&amp;gt;
      &amp;lt;avatar type=&quot;yaml&quot;&amp;gt;--- !ruby/object:ActionDispatch::Http::UploadedFile 
    content_type: image/png
    headers: |
      Content-Disposition: form-data; name=&quot;user[avatar]&quot;; filename=&quot;Picture 4.png&quot;
      Content-Type: image/png

    original_filename: Picture 4.png
    tempfile: !ruby/object:File {}
    &amp;lt;/avatar&amp;gt;
    &amp;lt;/user&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That serialized &lt;code&gt;&amp;lt;avatar&amp;gt;&lt;/code&gt; content obviously
won't work on the remote server since it doesn't actually contain
the file data. You can try to base64 encode your file content
inside the XML or JSON data being sent to the remote server, but
that is cumbersome, slow, and requires individual changes to both
your client and server code.&lt;/p&gt;
&lt;h3&gt;Patch&lt;/h3&gt;
&lt;p&gt;I've attached a patch with tests (for both master and the
3-0-stable branch) that gives you the option to send and encode
your ActiveResource POST and PUT request data as
&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or, when file
attachments are present, &lt;code&gt;multipart/form-data&lt;/code&gt;. Since
Net::HTTP doesn't natively handle mutlipart attachments, I
introduced a dependency on the &lt;code&gt;Payload&lt;/code&gt; class from
&lt;a href=&quot;http://rubygems.org/gems/rest-client&quot;&gt;rest-client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable this new encoding option, I added a new class
attribute, &lt;code&gt;ActiveRecord::Base.payload_encoding&lt;/code&gt;. It
works similar to how the &lt;code&gt;format&lt;/code&gt; option works (it can
be set globally or on a per-class basis).
&lt;code&gt;payload_encoding&lt;/code&gt; defaults to &lt;code&gt;:serialized&lt;/code&gt;
for compatibility (data will continue to be posted as serialized
JSON or XML). Or &lt;code&gt;payload_encoding&lt;/code&gt; can be set to
&lt;code&gt;:form&lt;/code&gt; to encode the attributes as form
elements/multipart data for attachments.&lt;/p&gt;
&lt;p&gt;This feature also seems handy to have for remote web services
that expect data encoded this way (and not as JSON or XML).&lt;/p&gt;
&lt;p&gt;Finally, regarding compatibility, it's disabled by default so it
shouldn't interfere, but if you're targeting a Rails-based backend
service, I believe enabling it should be mostly seamless. Since a
Rails backend will automatically decode the XML and JSON data sent
to into form parameters anyway, this simply negates the need for
that step.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    class Image &amp;lt; ActiveResource::Base
      self.site = &quot;http://localhost:3001/&quot;
      self.format = :json
      self.payload_encoding = :form
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Image.find&lt;/code&gt; and others will continue to fetch the
data using JSON. However, &lt;code&gt;Image.create&lt;/code&gt; and other save
methods will post the data as form attributes, allowing multipart
attachments to also work.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-09T05:26:58+00:00</created-at>
      <creator-id type="integer">53345</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6392</number>
      <permalink>patch-activeresource-doesnt-support-file-uploadsattachments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activeresource multipart patch</tag>
      <title>[patch] ActiveResource doesn't support file uploads/attachments</title>
      <updated-at type="datetime">2011-02-09T05:27:00+00:00</updated-at>
      <user-id type="integer">53345</user-id>
      <version type="integer">1</version>
      <user-name>Nick M</user-name>
      <creator-name>Nick M</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6392</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>59430b467f9adb24abaeeb8555c58dea44c0a423</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-09T05:26:59+00:00</created-at>
      <filename>multipart_payload_master.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">903237</id>
      <size type="integer">26484</size>
      <uploader-id type="integer">53345</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/903237/multipart_payload_master.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>ecb4e46634413d61cdc4b266f0c6d2b302c8a646</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-09T05:26:59+00:00</created-at>
      <filename>multipart_payload_3-0-stable.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">903238</id>
      <size type="integer">26966</size>
      <uploader-id type="integer">53345</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/903238/multipart_payload_3-0-stable.diff</url>
    </attachment>
  </attachments>
</ticket>
