<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-01-04T16:24:37+00:00</created-at>
  <creator-id type="integer">17373</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1500</number>
  <permalink>named-scopes-should-implement-many-so-theyll-use-count</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>associations enumerable named_scope patch</tag>
  <title>Named scopes should implement #many? so they'll use COUNT(*)</title>
  <updated-at type="datetime">2011-01-04T16:24:37+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">8</version>
  <user-name>Repository</user-name>
  <creator-name>Chris Kampmeier</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1500</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>`Enumerable#many?` went in recently, and it's nice to have. However, many `Enumerable` methods have corresponding implementations in the `ActiveRecord::NamedScope::Scope` class, so that named scopes will do the right thing w/ SQL instead of just loading an entire collection and then sending the `Enumerable` method.

Currently:

@@@ ruby
class User &lt; ActiveRecord::Base
  named_scope :first_half, :conditions =&gt; [&quot;name &lt; ?&quot;, &quot;N&quot;]
end

&gt;&gt; User.first_half.many?
#  User Load (0.6ms)   SELECT * FROM &quot;users&quot; WHERE (name &lt; 'N')
=&gt; true
@@@

With this patch:

@@@ ruby
&gt;&gt; User.first_half.many?
#  SQL (0.1ms)   SELECT count(*) AS count_all FROM &quot;users&quot; WHERE (name &lt; 'N')
=&gt; true
@@@

Much better!

Just like `#any?`, it'll load the collection instead of using `COUNT(*)` when you use a block:

@@@ ruby
&gt;&gt; User.first_half.many? { |user| user.name.starts_with?('A') }
#  User Load (0.4ms)   SELECT * FROM &quot;users&quot; WHERE (name &lt; 'N')
=&gt; false
@@@

That's about it, let me know what you think.</original-body>
  <latest-body>`Enumerable#many?` went in recently, and it's nice to have. However, many `Enumerable` methods have corresponding implementations in the `ActiveRecord::NamedScope::Scope` class, so that named scopes will do the right thing w/ SQL instead of just loading an entire collection and then sending the `Enumerable` method.

Currently:

@@@ ruby
class User &lt; ActiveRecord::Base
  named_scope :first_half, :conditions =&gt; [&quot;name &lt; ?&quot;, &quot;N&quot;]
end

&gt;&gt; User.first_half.many?
#  User Load (0.6ms)   SELECT * FROM &quot;users&quot; WHERE (name &lt; 'N')
=&gt; true
@@@

With this patch:

@@@ ruby
&gt;&gt; User.first_half.many?
#  SQL (0.1ms)   SELECT count(*) AS count_all FROM &quot;users&quot; WHERE (name &lt; 'N')
=&gt; true
@@@

Much better!

Just like `#any?`, it'll load the collection instead of using `COUNT(*)` when you use a block:

@@@ ruby
&gt;&gt; User.first_half.many? { |user| user.name.starts_with?('A') }
#  User Load (0.4ms)   SELECT * FROM &quot;users&quot; WHERE (name &lt; 'N')
=&gt; false
@@@

That's about it, let me know what you think.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;&lt;code&gt;Enumerable#many?&lt;/code&gt; went in recently, and it's nice to
have. However, many &lt;code&gt;Enumerable&lt;/code&gt; methods have
corresponding implementations in the
&lt;code&gt;ActiveRecord::NamedScope::Scope&lt;/code&gt; class, so that named
scopes will do the right thing w/ SQL instead of just loading an
entire collection and then sending the &lt;code&gt;Enumerable&lt;/code&gt;
method.&lt;/p&gt;
&lt;p&gt;Currently:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; ActiveRecord::Base
  named_scope :first_half, :conditions =&amp;gt; [&amp;quot;name &amp;lt; ?&amp;quot;, &amp;quot;N&amp;quot;]
end

&amp;gt;&amp;gt; User.first_half.many?
#  User Load (0.6ms)   SELECT * FROM &amp;quot;users&amp;quot; WHERE (name &amp;lt; 'N')
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this patch:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;gt;&amp;gt; User.first_half.many?
#  SQL (0.1ms)   SELECT count(*) AS count_all FROM &amp;quot;users&amp;quot; WHERE (name &amp;lt; 'N')
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much better!&lt;/p&gt;
&lt;p&gt;Just like &lt;code&gt;#any?&lt;/code&gt;, it'll load the collection instead
of using &lt;code&gt;COUNT(*)&lt;/code&gt; when you use a block:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;gt;&amp;gt; User.first_half.many? { |user| user.name.starts_with?('A') }
#  User Load (0.4ms)   SELECT * FROM &amp;quot;users&amp;quot; WHERE (name &amp;lt; 'N')
=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's about it, let me know what you think.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>`Enumerable#many?` went in recently, and it's nice to have. However, many `Enumerable` methods have corresponding implementations in the `ActiveRecord::NamedScope::Scope` class, so that named scopes will do the right thing w/ SQL instead of just loading an entire collection and then sending the `Enumerable` method.

Currently:

@@@ ruby
class User &lt; ActiveRecord::Base
  named_scope :first_half, :conditions =&gt; [&quot;name &lt; ?&quot;, &quot;N&quot;]
end

&gt;&gt; User.first_half.many?
#  User Load (0.6ms)   SELECT * FROM &quot;users&quot; WHERE (name &lt; 'N')
=&gt; true
@@@

With this patch:

@@@ ruby
&gt;&gt; User.first_half.many?
#  SQL (0.1ms)   SELECT count(*) AS count_all FROM &quot;users&quot; WHERE (name &lt; 'N')
=&gt; true
@@@

Much better!

Just like `#any?`, it'll load the collection instead of using `COUNT(*)` when you use a block:

@@@ ruby
&gt;&gt; User.first_half.many? { |user| user.name.starts_with?('A') }
#  User Load (0.4ms)   SELECT * FROM &quot;users&quot; WHERE (name &lt; 'N')
=&gt; false
@@@

That's about it, let me know what you think.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;code&gt;Enumerable#many?&lt;/code&gt; went in recently, and it's nice to
have. However, many &lt;code&gt;Enumerable&lt;/code&gt; methods have
corresponding implementations in the
&lt;code&gt;ActiveRecord::NamedScope::Scope&lt;/code&gt; class, so that named
scopes will do the right thing w/ SQL instead of just loading an
entire collection and then sending the &lt;code&gt;Enumerable&lt;/code&gt;
method.&lt;/p&gt;
&lt;p&gt;Currently:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; ActiveRecord::Base
  named_scope :first_half, :conditions =&amp;gt; [&amp;quot;name &amp;lt; ?&amp;quot;, &amp;quot;N&amp;quot;]
end

&amp;gt;&amp;gt; User.first_half.many?
#  User Load (0.6ms)   SELECT * FROM &amp;quot;users&amp;quot; WHERE (name &amp;lt; 'N')
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this patch:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;gt;&amp;gt; User.first_half.many?
#  SQL (0.1ms)   SELECT count(*) AS count_all FROM &amp;quot;users&amp;quot; WHERE (name &amp;lt; 'N')
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much better!&lt;/p&gt;
&lt;p&gt;Just like &lt;code&gt;#any?&lt;/code&gt;, it'll load the collection instead
of using &lt;code&gt;COUNT(*)&lt;/code&gt; when you use a block:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;gt;&amp;gt; User.first_half.many? { |user| user.name.starts_with?('A') }
#  User Load (0.4ms)   SELECT * FROM &amp;quot;users&amp;quot; WHERE (name &amp;lt; 'N')
=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's about it, let me know what you think.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-01T06:15:41+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1500</number>
      <permalink>named-scopes-should-implement-many-so-theyll-use-count</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable named_scope patch</tag>
      <title>Named scopes should implement #many? so they'll use COUNT(*)</title>
      <updated-at type="datetime">2008-12-01T06:15:45+00:00</updated-at>
      <user-id type="integer">17373</user-id>
      <version type="integer">1</version>
      <user-name>Chris Kampmeier</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1500</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-02T10:45:27+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1500</number>
      <permalink>named-scopes-should-implement-many-so-theyll-use-count</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable named_scope patch</tag>
      <title>Named scopes should implement #many? so they'll use COUNT(*)</title>
      <updated-at type="datetime">2008-12-02T10:45:30+00:00</updated-at>
      <user-id type="integer">11785</user-id>
      <version type="integer">2</version>
      <user-name>Pawe&#322; Kondzior</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1500</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Looks good. Why only named scope though ? It should be implemented for AssocitionCollections too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks good. Why only named scope though ? It should be
implemented for AssocitionCollections too.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-22T03:55:06+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1500</number>
      <permalink>named-scopes-should-implement-many-so-theyll-use-count</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>enumerable named_scope patch</tag>
      <title>Named scopes should implement #many? so they'll use COUNT(*)</title>
      <updated-at type="datetime">2008-12-22T03:55:08+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1500</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>OK, here's an updated patch that implements `#many?` for AssociationCollections, too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, here's an updated patch that implements &lt;code&gt;#many?&lt;/code&gt;
for AssociationCollections, too.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-16T13:14:31+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: enumerable named_scope patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1500</number>
      <permalink>named-scopes-should-implement-many-so-theyll-use-count</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>associations enumerable named_scope patch</tag>
      <title>Named scopes should implement #many? so they'll use COUNT(*)</title>
      <updated-at type="datetime">2009-03-16T13:14:35+00:00</updated-at>
      <user-id type="integer">17373</user-id>
      <version type="integer">4</version>
      <user-name>Chris Kampmeier</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1500</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-16T13:17:10+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1500</number>
      <permalink>named-scopes-should-implement-many-so-theyll-use-count</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>associations enumerable named_scope patch</tag>
      <title>Named scopes should implement #many? so they'll use COUNT(*)</title>
      <updated-at type="datetime">2009-03-16T13:17:15+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">5</version>
      <user-name>Pratik</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1500</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Wouldn't it be better to only fetch the primary keys for two records instead of counting them all just to find out if there is more than one?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Wouldn't it be better to only fetch the primary keys for two
records instead of counting them all just to find out if there is
more than one?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-11T09:29:52+01:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1500</number>
      <permalink>named-scopes-should-implement-many-so-theyll-use-count</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>associations enumerable named_scope patch</tag>
      <title>Named scopes should implement #many? so they'll use COUNT(*)</title>
      <updated-at type="datetime">2009-05-11T09:29:54+01:00</updated-at>
      <user-id type="integer">14890</user-id>
      <version type="integer">6</version>
      <user-name>Tarmo T&#228;nav</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1500</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Are you suggesting something like `SELECT [primary_key] FROM [table] ... LIMIT 2`?

I'm not sure whether that would be better or worse -- it seems like a speed difference would be dependent on how the database's `COUNT` works. It would definitely make the implementation more complicated, though: you'd have to branch in the code for when the collection is already loaded, etc.

This patch just adds an analog of `#empty?` and `#any?` for `#many?`, which probably shouldn't have been delegated to `Enumerable` in the first place.

If using `LIMIT 2` and such is an improvement, that would be great -- but for that kind of refactoring, I'd say a separate patch that affects all three would be more appropriate.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Are you suggesting something like &lt;code&gt;SELECT [primary_key]
FROM [table] ... LIMIT 2&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I'm not sure whether that would be better or worse -- it seems
like a speed difference would be dependent on how the database's
&lt;code&gt;COUNT&lt;/code&gt; works. It would definitely make the
implementation more complicated, though: you'd have to branch in
the code for when the collection is already loaded, etc.&lt;/p&gt;
&lt;p&gt;This patch just adds an analog of &lt;code&gt;#empty?&lt;/code&gt; and
&lt;code&gt;#any?&lt;/code&gt; for &lt;code&gt;#many?&lt;/code&gt;, which probably
shouldn't have been delegated to &lt;code&gt;Enumerable&lt;/code&gt; in the
first place.&lt;/p&gt;
&lt;p&gt;If using &lt;code&gt;LIMIT 2&lt;/code&gt; and such is an improvement, that
would be great -- but for that kind of refactoring, I'd say a
separate patch that affects all three would be more
appropriate.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-11T17:06:03+01:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1500</number>
      <permalink>named-scopes-should-implement-many-so-theyll-use-count</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>associations enumerable named_scope patch</tag>
      <title>Named scopes should implement #many? so they'll use COUNT(*)</title>
      <updated-at type="datetime">2009-05-11T17:06:05+01:00</updated-at>
      <user-id type="integer">42923</user-id>
      <version type="integer">7</version>
      <user-name>Chris Kampmeier</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1500</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [4e8c36a7417e5d447c9b15d5c61df0c014ee6d3b]) Implement #many? for NamedScope and AssociationCollection using #size [#1500 state:resolved]

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/4e8c36a7417e5d447c9b15d5c61df0c014ee6d3b</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/4e8c36a7417e5d447c9b15d5c61df0c014ee6d3b&quot;
title=
&quot;Changeset [4e8c36a7417e5d447c9b15d5c61df0c014ee6d3b]&quot;&gt;[4e8c36a7417e5d447c9b15d5c61df0c014ee6d3b]&lt;/a&gt;)
Implement #many? for NamedScope and AssociationCollection using
#size [&lt;a href=&quot;/projects/8994/tickets/1500&quot; title=
&quot;Ticket #1500&quot;&gt;#1500&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Pratik Naik &lt;a&gt;pratiknaik@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/4e8c36a7417e5d447c9b15d5c61df0c014ee6d3b&quot;&gt;
http://github.com/rails/rails/commit/4e8c36a7417e5d447c9b15d5c61df0...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-17T17:56:30+01:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1500</number>
      <permalink>named-scopes-should-implement-many-so-theyll-use-count</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>associations enumerable named_scope patch</tag>
      <title>Named scopes should implement #many? so they'll use COUNT(*)</title>
      <updated-at type="datetime">2009-05-17T17:56:32+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1500</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Do you what kinds of the match is the most interesting and exciting? You may be surely to say it is &lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;cheap nfl jerseys&lt;/a&gt; match. NFL, which is named National Football League, has 32 teams. As the most famous professional NFL American Football League, it has the most fans in America. Nowadays football has become the world famous sport item. There are a lot of football fans all over the world.&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;wholesale authentic nfl jerseys&lt;/a&gt; Whether the match or the fans are all crazy, they are cheer for the excellent and splendid match. We can learn more from the team.In order to meet the fans&#8217; demand,&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;nfl throwback jerseys&lt;/a&gt; our shop provides different kinds of the authentic &lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;wholesale nfl jerseys&lt;/a&gt;. From here, you can choose any kinds of the jerseys. We also provide different sizes and colors to satisfy you. Watching the match is wonderful but adding the NFL jerseys is more interesting. You can image you are play with the teams in the match. In all, it is hard to use the word to express our joy. Only you take part in it, you can know that feeling. Moreover, the high quality of the &lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;authentic nfl jerseys&lt;/a&gt; we provide for you.Our main advantage: superior quality and no Mini order. With rich experience in dealing with all kinds of NFL jerseys, most of our products have no minimum order requirements: both large and small orders are welcome, so you can retail products at wholesale prices!&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;discount nfl jerseys&lt;/a&gt; We are the professional wholesale NFL Jerseys. However, if wholesalers purchase bigger, then can enjoy even larger discounts! Browse our websites &lt;a href=&quot; http://www.wholesale-nflshop.com/&quot;&gt;wholesale nfl jerseys&lt;/a&gt;, a huge range of products with cheap price but high quality are waiting for you!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Do you what kinds of the match is the most interesting and
exciting? You may be surely to say it is &lt;a href=
&quot;http://www.wholesalenflstore.com/&quot;&gt;cheap nfl jerseys&lt;/a&gt; match.
NFL, which is named National Football League, has 32 teams. As the
most famous professional NFL American Football League, it has the
most fans in America. Nowadays football has become the world famous
sport item. There are a lot of football fans all over the
world.&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;wholesale
authentic nfl jerseys&lt;/a&gt; Whether the match or the fans are all
crazy, they are cheer for the excellent and splendid match. We can
learn more from the team.In order to meet the fans&amp;#8217;
demand,&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;nfl throwback
jerseys&lt;/a&gt; our shop provides different kinds of the authentic
&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;wholesale nfl
jerseys&lt;/a&gt;. From here, you can choose any kinds of the jerseys. We
also provide different sizes and colors to satisfy you. Watching
the match is wonderful but adding the NFL jerseys is more
interesting. You can image you are play with the teams in the
match. In all, it is hard to use the word to express our joy. Only
you take part in it, you can know that feeling. Moreover, the high
quality of the &lt;a href=
&quot;http://www.wholesalenflstore.com/&quot;&gt;authentic nfl jerseys&lt;/a&gt; we
provide for you.Our main advantage: superior quality and no Mini
order. With rich experience in dealing with all kinds of NFL
jerseys, most of our products have no minimum order requirements:
both large and small orders are welcome, so you can retail products
at wholesale prices!&lt;a href=
&quot;http://www.wholesalenflstore.com/&quot;&gt;discount nfl jerseys&lt;/a&gt; We are
the professional wholesale NFL Jerseys. However, if wholesalers
purchase bigger, then can enjoy even larger discounts! Browse our
websites &lt;a&gt;wholesale nfl jerseys&lt;/a&gt;, a huge range of products
with cheap price but high quality are waiting for you!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-04T05:57:51+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1500</number>
      <permalink>named-scopes-should-implement-many-so-theyll-use-count</permalink>
      <priority type="integer">863</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>associations enumerable named_scope patch</tag>
      <title>Named scopes should implement #many? so they'll use COUNT(*)</title>
      <updated-at type="datetime">2011-01-04T16:24:37+00:00</updated-at>
      <user-id type="integer">131088</user-id>
      <version type="integer">9</version>
      <user-name>icooky</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1500</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>bc48aba4eeedde166ce6bacc9d354bc665929f3d</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-12-01T06:15:41+00:00</created-at>
      <filename>add_scope_many.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">66541</id>
      <size type="integer">3325</size>
      <uploader-id type="integer">17373</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/66541/add_scope_many.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>467caecb6ac67a354be3e4fc32d2abb607cb6e32</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-16T13:14:31+00:00</created-at>
      <filename>add-many-for-scope-and-association-collections.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">100133</id>
      <size type="integer">5619</size>
      <uploader-id type="integer">17373</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/100133/add-many-for-scope-and-association-collections.diff</url>
    </attachment>
  </attachments>
</ticket>
