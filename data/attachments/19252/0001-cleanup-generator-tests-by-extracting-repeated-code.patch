From ca14a55dc5d61a4dd46fb1ab1fb38f51455f1a26 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Mislav=20Marohni=C4=87?= <mislav.marohnic@gmail.com>
Date: Fri, 18 Apr 2008 23:28:23 +0200
Subject: [PATCH] cleanup generator tests by extracting repeated code into generator_test_helper. add test for mailer generator

---
 .../components/mailer/mailer_generator.rb          |    8 +-
 railties/test/generators/generator_test_helper.rb  |  159 ++++++++++----
 .../test/generators/rails_mailer_generator_test.rb |   26 ++
 .../test/generators/rails_model_generator_test.rb  |   80 +-------
 .../generators/rails_resource_generator_test.rb    |   78 +-------
 .../generators/rails_scaffold_generator_test.rb    |  240 +++++++-------------
 6 files changed, 227 insertions(+), 364 deletions(-)
 delete mode 100644 railties/lib/rails_generator/generators/components/mailer/templates/fixture.rhtml
 delete mode 100644 railties/lib/rails_generator/generators/components/mailer/templates/view.rhtml
 create mode 100644 railties/test/generators/rails_mailer_generator_test.rb

diff --git a/railties/lib/rails_generator/generators/components/mailer/mailer_generator.rb b/railties/lib/rails_generator/generators/components/mailer/mailer_generator.rb
index 3ff4f03..dc1202d 100644
--- a/railties/lib/rails_generator/generators/components/mailer/mailer_generator.rb
+++ b/railties/lib/rails_generator/generators/components/mailer/mailer_generator.rb
@@ -11,12 +11,8 @@ class MailerGenerator < Rails::Generator::NamedBase
       m.directory File.join('test/fixtures', file_path)
 
       # Mailer class and unit test.
-      m.template "mailer.rb",    File.join('app/models',
-                                           class_path,
-                                           "#{file_name}.rb")
-      m.template "unit_test.rb", File.join('test/unit',
-                                           class_path,
-                                           "#{file_name}_test.rb")
+      m.template "mailer.rb",    File.join('app/models', class_path, "#{file_name}.rb")
+      m.template "unit_test.rb", File.join('test/unit', class_path, "#{file_name}_test.rb")
 
       # View template and fixture for each action.
       actions.each do |action|
diff --git a/railties/lib/rails_generator/generators/components/mailer/templates/fixture.rhtml b/railties/lib/rails_generator/generators/components/mailer/templates/fixture.rhtml
deleted file mode 100644
index e69de29..0000000
diff --git a/railties/lib/rails_generator/generators/components/mailer/templates/view.rhtml b/railties/lib/rails_generator/generators/components/mailer/templates/view.rhtml
deleted file mode 100644
index e69de29..0000000
diff --git a/railties/test/generators/generator_test_helper.rb b/railties/test/generators/generator_test_helper.rb
index 4007cf1..190bc91 100644
--- a/railties/test/generators/generator_test_helper.rb
+++ b/railties/test/generators/generator_test_helper.rb
@@ -1,3 +1,51 @@
+require 'test/unit'
+require 'fileutils'
+
+# Mock out what we need from AR::Base
+module ActiveRecord
+  class Base
+    class << self
+      attr_accessor :pluralize_table_names
+    end
+    self.pluralize_table_names = true
+  end
+
+  module ConnectionAdapters
+    class Column
+      attr_reader :name, :default, :type, :limit, :null, :sql_type, :precision, :scale
+      
+      def initialize(name, default, sql_type = nil)
+        @name = name
+        @default = default
+        @type = @sql_type = sql_type
+      end
+
+      def human_name
+        @name.humanize
+      end
+    end
+  end
+end
+
+# Mock up necessities from ActionView
+module ActionView
+  module Helpers
+    module ActionRecordHelper; end
+    class InstanceTag; end
+  end
+end
+
+# Set RAILS_ROOT appropriately fixture generation
+tmp_dir = "#{File.dirname(__FILE__)}/../fixtures/tmp"
+
+if defined? RAILS_ROOT
+  RAILS_ROOT.replace tmp_dir
+else
+  RAILS_ROOT = tmp_dir
+end
+FileUtils.mkdir_p RAILS_ROOT
+
+$LOAD_PATH.unshift "#{File.dirname(__FILE__)}/../../lib"
 require 'initializer'
 
 # Mocks out the configuration
@@ -9,35 +57,62 @@ end
 
 require 'rails_generator'
 
+class GeneratorTestCase < Test::Unit::TestCase
+  include FileUtils
+  
+  def setup
+    ActiveRecord::Base.pluralize_table_names = true
+    
+    mkdir_p "#{RAILS_ROOT}/app/views/layouts"
+    mkdir_p "#{RAILS_ROOT}/config"
+    mkdir_p "#{RAILS_ROOT}/db"
+    mkdir_p "#{RAILS_ROOT}/test/fixtures"
+    mkdir_p "#{RAILS_ROOT}/public/stylesheets"
+    
+    File.open("#{RAILS_ROOT}/config/routes.rb", 'w') do |f|
+      f << "ActionController::Routing::Routes.draw do |map|\n\nend"
+    end
+  end
 
-module GeneratorTestHelper
+  def teardown
+    rm_rf "#{RAILS_ROOT}/app"
+    rm_rf "#{RAILS_ROOT}/test"
+    rm_rf "#{RAILS_ROOT}/config"
+    rm_rf "#{RAILS_ROOT}/db"
+    rm_rf "#{RAILS_ROOT}/public"
+  end
+
+  def test_truth
+    # don't complain, test/unit
+  end
+  
   # Instantiates the Generator
-  def build_generator(name,params)
-    Rails::Generator::Base.instance(name,params)
+  def build_generator(name, params)
+    Rails::Generator::Base.instance(name, params)
   end
 
   # Runs the create command (like the command line does)
-  def run_generator(name,params)
+  def run_generator(name, params)
     silence_generator do
-      build_generator(name,params).command(:create).invoke!
+      build_generator(name, params).command(:create).invoke!
     end
   end
 
   # Silences the logger temporarily and returns the output as a String
   def silence_generator
-    logger_original=Rails::Generator::Base.logger
-    myout=StringIO.new
-    Rails::Generator::Base.logger=Rails::Generator::SimpleLogger.new(myout)
+    logger_original = Rails::Generator::Base.logger
+    myout = StringIO.new
+    Rails::Generator::Base.logger = Rails::Generator::SimpleLogger.new(myout)
     yield if block_given?
-    Rails::Generator::Base.logger=logger_original
+    Rails::Generator::Base.logger = logger_original
     myout.string
   end
 
   # asserts that the given controller was generated.
   # It takes a name or symbol without the <tt>_controller</tt> part and an optional super class.
   # The contents of the class source file is passed to a block.
-  def assert_generated_controller_for(name,parent="ApplicationController")
-    assert_generated_class "app/controllers/#{name.to_s.underscore}_controller",parent do |body|
+  def assert_generated_controller_for(name, parent = "ApplicationController")
+    assert_generated_class "app/controllers/#{name.to_s.underscore}_controller", parent do |body|
       yield body if block_given?
     end
   end
@@ -45,8 +120,8 @@ module GeneratorTestHelper
   # asserts that the given model was generated.
   # It takes a name or symbol and an optional super class.
   # the contents of the class source file is passed to a block.
-  def assert_generated_model_for(name,parent="ActiveRecord::Base")
-    assert_generated_class "app/models/#{name.to_s.underscore}",parent do |body|
+  def assert_generated_model_for(name, parent = "ActiveRecord::Base")
+    assert_generated_class "app/models/#{name.to_s.underscore}", parent do |body|
       yield body if block_given?
     end
   end
@@ -63,7 +138,7 @@ module GeneratorTestHelper
   # asserts that the given functional test was generated.
   # It takes a name or symbol without the <tt>_controller_test</tt> part and an optional super class.
   # the contents of the class source file is passed to a block.
-  def assert_generated_functional_test_for(name,parent="ActionController::TestCase")
+  def assert_generated_functional_test_for(name, parent = "ActionController::TestCase")
     assert_generated_class "test/functional/#{name.to_s.underscore}_controller_test",parent do |body|
       yield body if block_given?
     end
@@ -72,8 +147,8 @@ module GeneratorTestHelper
   # asserts that the given unit test was generated.
   # It takes a name or symbol without the <tt>_test</tt> part and an optional super class.
   # the contents of the class source file is passed to a block.
-  def assert_generated_unit_test_for(name,parent="ActiveSupport::TestCase")
-    assert_generated_class "test/unit/#{name.to_s.underscore}_test",parent do |body|
+  def assert_generated_unit_test_for(name, parent = "ActiveSupport::TestCase")
+    assert_generated_class "test/unit/#{name.to_s.underscore}_test", parent do |body|
       yield body if block_given?
     end
   end
@@ -89,17 +164,18 @@ module GeneratorTestHelper
 
   # asserts that the given file exists
   def assert_file_exists(path)
-    assert File.exist?("#{RAILS_ROOT}/#{path}"),"The file '#{RAILS_ROOT}/#{path}' should exist"
+    assert File.exist?("#{RAILS_ROOT}/#{path}"),
+      "The file '#{RAILS_ROOT}/#{path}' should exist"
   end
 
   # asserts that the given class source file was generated.
   # It takes a path without the <tt>.rb</tt> part and an optional super class.
   # the contents of the class source file is passed to a block.
-  def assert_generated_class(path,parent=nil)
-    path=~/\/?(\d+_)?(\w+)$/
-    class_name=$2.camelize
+  def assert_generated_class(path, parent=nil)
+    path =~ /\/?(\d+_)?(\w+)$/
+    class_name = $2.camelize
     assert_generated_file("#{path}.rb") do |body|
-      assert body=~/class #{class_name}#{parent.nil? ? '':" < #{parent}"}/,"the file '#{path}.rb' should be a class"
+      assert_match /class #{class_name}#{parent.nil? ? '':" < #{parent}"}/, body, "the file '#{path}.rb' should be a class"
       yield body if block_given?
     end
   end
@@ -108,10 +184,10 @@ module GeneratorTestHelper
   # It takes a path without the <tt>.rb</tt> part.
   # the contents of the class source file is passed to a block.
   def assert_generated_module(path)
-    path=~/\/?(\w+)$/
-    module_name=$1.camelize
+    path =~ /\/?(\w+)$/
+    module_name = $1.camelize
     assert_generated_file("#{path}.rb") do |body|
-      assert body=~/module #{module_name}/,"the file '#{path}.rb' should be a module"
+      assert_match /module #{module_name}/, body, "the file '#{path}.rb' should be a module"
       yield body if block_given?
     end
   end
@@ -130,7 +206,8 @@ module GeneratorTestHelper
   # the parsed yaml tree is passed to a block.
   def assert_generated_yaml(path)
     assert_generated_file("#{path}.yml") do |body|
-      assert yaml=YAML.load(body)
+      yaml = YAML.load(body)
+      assert yaml, 'YAML data missing'
       yield yaml if block_given?
     end
   end
@@ -147,23 +224,22 @@ module GeneratorTestHelper
   # asserts that the given views were generated.
   # It takes a controller name and a list of views (including extensions).
   # The body of each view is passed to a block
-  def assert_generated_views_for(name,*actions)
+  def assert_generated_views_for(name, *actions)
     actions.each do |action|
-      assert_generated_file("app/views/#{name.to_s.underscore}/#{action.to_s}") do |body|
+      assert_generated_file("app/views/#{name.to_s.underscore}/#{action}") do |body|
         yield body if block_given?
       end
     end
   end
 
-  def assert_generated_migration(name,parent="ActiveRecord::Migration")
-      file =
-   Dir.glob("#{RAILS_ROOT}/db/migrate/*_#{name.to_s.underscore}.rb").first
-      file = file.match(/db\/migrate\/[0-9]+_#{name.to_s.underscore}/).to_s
-      assert_generated_class file,parent do |body|
-        assert body=~/timestamps/, "should have timestamps defined"
-        yield body if block_given?
-      end
+  def assert_generated_migration(name, parent = "ActiveRecord::Migration")
+    file = Dir.glob("#{RAILS_ROOT}/db/migrate/*_#{name.to_s.underscore}.rb").first
+    file = file.match(/db\/migrate\/[0-9]+_\w+/).to_s
+    assert_generated_class file, parent do |body|
+      assert_match /timestamps/, body, "should have timestamps defined"
+      yield body if block_given?
     end
+  end
 
   # Asserts that the given migration file was not generated.
   # It takes the name of the migration as a parameter.
@@ -175,22 +251,23 @@ module GeneratorTestHelper
   # asserts that the given resource was added to the routes.
   def assert_added_route_for(name)
     assert_generated_file("config/routes.rb") do |body|
-      assert body=~/map.resources :#{name.to_s.underscore}/,"should add route for :#{name.to_s.underscore}"
+      assert_match /map.resources :#{name.to_s.underscore}/, body,
+        "should add route for :#{name.to_s.underscore}"
     end
   end
 
   # asserts that the given methods are defined in the body.
   # This does assume standard rails code conventions with regards to the source code.
   # The body of each individual method is passed to a block.
-  def assert_has_method(body,*methods)
+  def assert_has_method(body, *methods)
     methods.each do |name|
-      assert body=~/^  def #{name.to_s}\n((\n|   .*\n)*)  end/,"should have method #{name.to_s}"
-      yield( name, $1 ) if block_given?
+      assert body =~ /^  def #{name}(\(.+\))?\n((\n|   .*\n)*)  end/, "should have method #{name}"
+      yield(name, $2) if block_given?
     end
   end
 
   # asserts that the given column is defined in the migration
-  def assert_generated_column(body,name,type)
-      assert body=~/t\.#{type.to_s} :#{name.to_s}/, "should have column #{name.to_s} defined"
+  def assert_generated_column(body, name, type)
+    assert_match /t\.#{type.to_s} :#{name.to_s}/, body, "should have column #{name.to_s} defined"
   end
 end
diff --git a/railties/test/generators/rails_mailer_generator_test.rb b/railties/test/generators/rails_mailer_generator_test.rb
new file mode 100644
index 0000000..9b5debb
--- /dev/null
+++ b/railties/test/generators/rails_mailer_generator_test.rb
@@ -0,0 +1,26 @@
+require 'generators/generator_test_helper'
+
+class RailsMailerGeneratorTest < GeneratorTestCase
+
+  def test_generates_mailer
+    run_generator('mailer', %w(Notifier reset_password))
+
+    assert_generated_model_for :notifier, 'ActionMailer::Base' do |model|
+      assert_has_method model, :reset_password do |name, body|
+        assert_equal [
+            "@subject    = 'Notifier#reset_password'",
+            "@body       = {}",
+            "@recipients = ''",
+            "@from       = ''",
+            "@sent_on    = sent_at",
+            "@headers    = {}"
+          ],
+          body.split("\n").map{|line| line.sub(' '*4, '') }
+      end
+    end
+    
+    assert_generated_views_for :notifier, 'reset_password.erb'
+    assert_generated_unit_test_for :notifier, 'ActionMailer::TestCase'
+    assert_generated_file "test/fixtures/notifier/reset_password"
+  end
+end
diff --git a/railties/test/generators/rails_model_generator_test.rb b/railties/test/generators/rails_model_generator_test.rb
index 86ad9c4..0bfc338 100644
--- a/railties/test/generators/rails_model_generator_test.rb
+++ b/railties/test/generators/rails_model_generator_test.rb
@@ -1,84 +1,6 @@
-require 'test/unit'
-
-# Optionally load RubyGems
-begin
-  require 'rubygems'
-rescue LoadError
-end
-
-# Mock out what we need from AR::Base
-module ActiveRecord
-  class Base
-    class << self
-      attr_accessor :pluralize_table_names
-    end
-    self.pluralize_table_names = true
-  end
-
-  module ConnectionAdapters
-    class Column
-      attr_reader :name, :default, :type, :limit, :null, :sql_type, :precision, :scale
-      def initialize(name, default, sql_type=nil)
-        @namename
-        @default=default
-        @type=@sql_type=sql_type
-      end
-
-      def human_name
-        @name.humanize
-      end
-    end
-  end
-end
-
-# Mock up necessities from ActionView
-module ActionView
-  module Helpers
-    module ActionRecordHelper; end
-    class InstanceTag; end
-  end
-end
-
-# Set RAILS_ROOT appropriately fixture generation
-tmp_dir="#{File.dirname(__FILE__)}/../fixtures/tmp"
-if defined?(RAILS_ROOT)
-  RAILS_ROOT.replace(tmp_dir)
-else
-  RAILS_ROOT=tmp_dir
-end
-Dir.mkdir(RAILS_ROOT) unless File.exist?(RAILS_ROOT)
-
-
-$LOAD_PATH.unshift "#{File.dirname(__FILE__)}/../../lib"
-
 require 'generators/generator_test_helper'
 
-class RailsModelGeneratorTest < Test::Unit::TestCase
-  include GeneratorTestHelper
-
-  def setup
-    ActiveRecord::Base.pluralize_table_names = true
-    Dir.mkdir("#{RAILS_ROOT}/app") unless File.exist?("#{RAILS_ROOT}/app")
-    Dir.mkdir("#{RAILS_ROOT}/app/views") unless File.exist?("#{RAILS_ROOT}/app/views")
-    Dir.mkdir("#{RAILS_ROOT}/app/views/layouts") unless File.exist?("#{RAILS_ROOT}/app/views/layouts")
-    Dir.mkdir("#{RAILS_ROOT}/config") unless File.exist?("#{RAILS_ROOT}/config")
-    Dir.mkdir("#{RAILS_ROOT}/db") unless File.exist?("#{RAILS_ROOT}/db")
-    Dir.mkdir("#{RAILS_ROOT}/test") unless File.exist?("#{RAILS_ROOT}/test")
-    Dir.mkdir("#{RAILS_ROOT}/test/fixtures") unless File.exist?("#{RAILS_ROOT}/test/fixtures")
-    Dir.mkdir("#{RAILS_ROOT}/public") unless File.exist?("#{RAILS_ROOT}/public")
-    Dir.mkdir("#{RAILS_ROOT}/public/stylesheets") unless File.exist?("#{RAILS_ROOT}/public/stylesheets")
-    File.open("#{RAILS_ROOT}/config/routes.rb", 'w') do |f|
-      f<<"ActionController::Routing::Routes.draw do |map|\n\nend\n"
-    end
-  end
-
-    def teardown
-    FileUtils.rm_rf "#{RAILS_ROOT}/app"
-    FileUtils.rm_rf "#{RAILS_ROOT}/test"
-    FileUtils.rm_rf "#{RAILS_ROOT}/config"
-    FileUtils.rm_rf "#{RAILS_ROOT}/db"
-    FileUtils.rm_rf "#{RAILS_ROOT}/public"
-  end
+class RailsModelGeneratorTest < GeneratorTestCase
 
   def test_model_generates_resources
     run_generator('model', %w(Product name:string))
diff --git a/railties/test/generators/rails_resource_generator_test.rb b/railties/test/generators/rails_resource_generator_test.rb
index 511f105..45e4850 100644
--- a/railties/test/generators/rails_resource_generator_test.rb
+++ b/railties/test/generators/rails_resource_generator_test.rb
@@ -1,82 +1,6 @@
-require 'test/unit'
-
-# Optionally load RubyGems
-begin
-  require 'rubygems'
-rescue LoadError
-end
-
-# Mock out what we need from AR::Base
-module ActiveRecord
-  class Base
-    class << self
-      attr_accessor :pluralize_table_names
-    end
-    self.pluralize_table_names = true
-  end
-
-  module ConnectionAdapters
-    class Column
-      attr_reader :name, :default, :type, :limit, :null, :sql_type, :precision, :scale
-      def initialize(name, default, sql_type=nil)
-        @namename
-        @default=default
-        @type=@sql_type=sql_type
-      end
-
-      def human_name
-        @name.humanize
-      end
-    end
-  end
-end
-
-# Mock up necessities from ActionView
-module ActionView
-  module Helpers
-    module ActionRecordHelper; end
-    class InstanceTag; end
-  end
-end
-
-# Set RAILS_ROOT appropriately fixture generation
-tmp_dir="#{File.dirname(__FILE__)}/../fixtures/tmp"
-if defined?(RAILS_ROOT)
-  RAILS_ROOT.replace(tmp_dir)
-else
-  RAILS_ROOT=tmp_dir
-end
-Dir.mkdir(RAILS_ROOT) unless File.exist?(RAILS_ROOT)
-
-$LOAD_PATH.unshift "#{File.dirname(__FILE__)}/../../lib"
 require 'generators/generator_test_helper'
 
-class RailsResourceGeneratorTest < Test::Unit::TestCase
-  include GeneratorTestHelper
-
-  def setup
-    ActiveRecord::Base.pluralize_table_names = true
-    Dir.mkdir("#{RAILS_ROOT}/app") unless File.exist?("#{RAILS_ROOT}/app")
-    Dir.mkdir("#{RAILS_ROOT}/app/views") unless File.exist?("#{RAILS_ROOT}/app/views")
-    Dir.mkdir("#{RAILS_ROOT}/app/views/layouts") unless File.exist?("#{RAILS_ROOT}/app/views/layouts")
-    Dir.mkdir("#{RAILS_ROOT}/config") unless File.exist?("#{RAILS_ROOT}/config")
-    Dir.mkdir("#{RAILS_ROOT}/db") unless File.exist?("#{RAILS_ROOT}/db")
-    Dir.mkdir("#{RAILS_ROOT}/test") unless File.exist?("#{RAILS_ROOT}/test")
-    Dir.mkdir("#{RAILS_ROOT}/test/fixtures") unless File.exist?("#{RAILS_ROOT}/test/fixtures")
-    Dir.mkdir("#{RAILS_ROOT}/public") unless File.exist?("#{RAILS_ROOT}/public")
-    Dir.mkdir("#{RAILS_ROOT}/public/stylesheets") unless File.exist?("#{RAILS_ROOT}/public/stylesheets")
-    File.open("#{RAILS_ROOT}/config/routes.rb", 'w') do |f|
-      f<<"ActionController::Routing::Routes.draw do |map|\n\nend\n"
-    end
-  end
-
-  def teardown
-    FileUtils.rm_rf "#{RAILS_ROOT}/app"
-    FileUtils.rm_rf "#{RAILS_ROOT}/test"
-    FileUtils.rm_rf "#{RAILS_ROOT}/config"
-    FileUtils.rm_rf "#{RAILS_ROOT}/db"
-    FileUtils.rm_rf "#{RAILS_ROOT}/public"
-  end
+class RailsResourceGeneratorTest < GeneratorTestCase
 
   def test_resource_generates_resources
     run_generator('resource', %w(Product name:string))
diff --git a/railties/test/generators/rails_scaffold_generator_test.rb b/railties/test/generators/rails_scaffold_generator_test.rb
index 34a1ad2..220f9e3 100644
--- a/railties/test/generators/rails_scaffold_generator_test.rb
+++ b/railties/test/generators/rails_scaffold_generator_test.rb
@@ -1,189 +1,107 @@
-require 'abstract_unit'
-
-# Optionally load RubyGems.
-begin
-  require 'rubygems'
-rescue LoadError
-end
-
-# Mock out what we need from AR::Base.
-module ActiveRecord
-  class Base
-    class << self
-      attr_accessor :pluralize_table_names
-    end
-    self.pluralize_table_names = true
-  end
-
-  module ConnectionAdapters
-    class Column
-      attr_reader :name, :default, :type, :limit, :null, :sql_type, :precision, :scale
-
-      def initialize(name, default, sql_type = nil)
-        @name=name
-        @default=default
-        @type=@sql_type=sql_type
-      end
-
-      def human_name
-        @name.humanize
-      end
-    end
-  end
-end
+require 'generators/generator_test_helper'
 
-# And what we need from ActionView
-module ActionView
-  module Helpers
-    module ActiveRecordHelper; end
-    class InstanceTag; end
+class RailsScaffoldGeneratorTest < GeneratorTestCase
+  
+  def test_scaffolded_names
+    g = Rails::Generator::Base.instance('scaffold', %w(ProductLine))
+    assert_equal "ProductLines", g.controller_name
+    assert_equal "ProductLines", g.controller_class_name
+    assert_equal "ProductLine", g.controller_singular_name
+    assert_equal "product_lines", g.controller_plural_name
+    assert_equal "product_lines", g.controller_file_name
+    assert_equal "product_lines", g.controller_table_name
   end
-end
 
+  def test_scaffold_generates_resources
 
-# Must set before requiring generator libs.
-tmp_dir="#{File.dirname(__FILE__)}/../fixtures/tmp"
-if defined?(RAILS_ROOT)
-  RAILS_ROOT.replace(tmp_dir)
-else
-  RAILS_ROOT=tmp_dir
-end
-Dir.mkdir(RAILS_ROOT) unless File.exist?(RAILS_ROOT)
-
-$LOAD_PATH.unshift "#{File.dirname(__FILE__)}/../../lib"
+    run_generator('scaffold', %w(Product name:string))
 
-require 'generators/generator_test_helper'
+    assert_generated_controller_for :products do |f|
 
-uses_mocha "Scaffold Generator Tests" do
-  class RailsScaffoldGeneratorTest < Test::Unit::TestCase
-
-    include GeneratorTestHelper
-
-    def setup
-      ActiveRecord::Base.pluralize_table_names = true
-      Dir.mkdir("#{RAILS_ROOT}/app") unless File.exist?("#{RAILS_ROOT}/app")
-      Dir.mkdir("#{RAILS_ROOT}/app/views") unless File.exist?("#{RAILS_ROOT}/app/views")
-      Dir.mkdir("#{RAILS_ROOT}/app/views/layouts") unless File.exist?("#{RAILS_ROOT}/app/views/layouts")
-      Dir.mkdir("#{RAILS_ROOT}/config") unless File.exist?("#{RAILS_ROOT}/config")
-      Dir.mkdir("#{RAILS_ROOT}/db") unless File.exist?("#{RAILS_ROOT}/db")
-      Dir.mkdir("#{RAILS_ROOT}/test") unless File.exist?("#{RAILS_ROOT}/test")
-      Dir.mkdir("#{RAILS_ROOT}/test/fixtures") unless File.exist?("#{RAILS_ROOT}/test/fixtures")
-      Dir.mkdir("#{RAILS_ROOT}/public") unless File.exist?("#{RAILS_ROOT}/public")
-      Dir.mkdir("#{RAILS_ROOT}/public/stylesheets") unless File.exist?("#{RAILS_ROOT}/public/stylesheets")
-      File.open("#{RAILS_ROOT}/config/routes.rb", 'w') do |f|
-        f<<"ActionController::Routing::Routes.draw do |map|\n\nend\n"
+      assert_has_method f, :index do |name, m|
+        assert_match /@products = Product\.find\(:all\)/, m, "#{name} should query products table"
       end
-    end
-
-    def teardown
-      FileUtils.rm_rf "#{RAILS_ROOT}/app"
-      FileUtils.rm_rf "#{RAILS_ROOT}/test"
-      FileUtils.rm_rf "#{RAILS_ROOT}/config"
-      FileUtils.rm_rf "#{RAILS_ROOT}/db"
-      FileUtils.rm_rf "#{RAILS_ROOT}/public"
-    end
-
-    def test_scaffolded_names
-      g = Rails::Generator::Base.instance('scaffold', %w(ProductLine))
-      assert_equal "ProductLines", g.controller_name
-      assert_equal "ProductLines", g.controller_class_name
-      assert_equal "ProductLine", g.controller_singular_name
-      assert_equal "product_lines", g.controller_plural_name
-      assert_equal "product_lines", g.controller_file_name
-      assert_equal "product_lines", g.controller_table_name
-    end
-
-    def test_scaffold_generates_resources
-
-      run_generator('scaffold', %w(Product name:string))
 
-      assert_generated_controller_for :products do |f|
-
-        assert_has_method f, :index do |name, m|
-          assert_match /@products = Product\.find\(:all\)/, m, "#{name} should query products table"
-        end
-
-        assert_has_method f, :show, :edit, :update, :destroy do |name, m|
-          assert_match /@product = Product\.find\(params\[:id\]\)/, m, "#{name.to_s} should query products table"
-        end
-
-        assert_has_method f, :new do |name, m|
-          assert_match /@product = Product\.new/, m, "#{name.to_s} should instantiate a product"
-        end
-
-        assert_has_method f, :create do |name, m|
-          assert_match /@product = Product\.new\(params\[:product\]\)/, m, "#{name.to_s} should instantiate a product"
-          assert_match /format.xml  \{ render :xml => @product.errors, :status => :unprocessable_entity \}/, m, "#{name.to_s} should set status to :unprocessable_entity code for xml"
-        end
+      assert_has_method f, :show, :edit, :update, :destroy do |name, m|
+        assert_match /@product = Product\.find\(params\[:id\]\)/, m, "#{name.to_s} should query products table"
+      end
 
+      assert_has_method f, :new do |name, m|
+        assert_match /@product = Product\.new/, m, "#{name.to_s} should instantiate a product"
       end
 
-      assert_generated_model_for :product
-      assert_generated_functional_test_for :products
-      assert_generated_unit_test_for :product
-      assert_generated_fixtures_for :products
-      assert_generated_helper_for :products
-      assert_generated_stylesheet :scaffold
-      assert_generated_views_for :products, "index.html.erb", "new.html.erb", "edit.html.erb", "show.html.erb"
+      assert_has_method f, :create do |name, m|
+        assert_match /@product = Product\.new\(params\[:product\]\)/, m, "#{name.to_s} should instantiate a product"
+        assert_match /format.xml  \{ render :xml => @product.errors, :status => :unprocessable_entity \}/, m, "#{name.to_s} should set status to :unprocessable_entity code for xml"
+      end
 
-      assert_generated_migration :create_products
-      assert_added_route_for :products
     end
 
-    def test_scaffold_skip_migration_skips_migration
-      run_generator('scaffold', %w(Product name:string --skip-migration))
-
-      assert_generated_model_for :product
-      assert_generated_functional_test_for :products
-      assert_generated_unit_test_for :product
-      assert_generated_fixtures_for :products
-      assert_generated_helper_for :products
-      assert_generated_stylesheet :scaffold
-      assert_generated_views_for :products, "index.html.erb","new.html.erb","edit.html.erb","show.html.erb"
-      assert_skipped_migration :create_products
-      assert_added_route_for :products
-    end
+    assert_generated_model_for :product
+    assert_generated_functional_test_for :products
+    assert_generated_unit_test_for :product
+    assert_generated_fixtures_for :products
+    assert_generated_helper_for :products
+    assert_generated_stylesheet :scaffold
+    assert_generated_views_for :products, "index.html.erb", "new.html.erb", "edit.html.erb", "show.html.erb"
 
-    def test_scaffold_generates_resources_with_attributes
-      run_generator('scaffold', %w(Product name:string supplier_id:integer created_at:timestamp))
+    assert_generated_migration :create_products
+    assert_added_route_for :products
+  end
 
-      assert_generated_controller_for :products do |f|
+  def test_scaffold_skip_migration_skips_migration
+    run_generator('scaffold', %w(Product name:string --skip-migration))
+
+    assert_generated_model_for :product
+    assert_generated_functional_test_for :products
+    assert_generated_unit_test_for :product
+    assert_generated_fixtures_for :products
+    assert_generated_helper_for :products
+    assert_generated_stylesheet :scaffold
+    assert_generated_views_for :products, "index.html.erb","new.html.erb","edit.html.erb","show.html.erb"
+    assert_skipped_migration :create_products
+    assert_added_route_for :products
+  end
 
-        assert_has_method f, :index do |name, m|
-          assert_match /@products = Product\.find\(:all\)/, m, "#{name} should query products table"
-        end
+  def test_scaffold_generates_resources_with_attributes
+    run_generator('scaffold', %w(Product name:string supplier_id:integer created_at:timestamp))
 
-        assert_has_method f, :show, :edit, :update, :destroy do |name, m|
-          assert_match /@product = Product\.find\(params\[:id\]\)/, m, "#{name.to_s} should query products table"
-        end
+    assert_generated_controller_for :products do |f|
 
-        assert_has_method f, :new do |name, m|
-          assert_match /@product = Product\.new/, m, "#{name.to_s} should instantiate a product"
-        end
+      assert_has_method f, :index do |name, m|
+        assert_match /@products = Product\.find\(:all\)/, m, "#{name} should query products table"
+      end
 
-        assert_has_method f, :create do |name, m|
-          assert_match /@product = Product\.new\(params\[:product\]\)/, m, "#{name.to_s} should instantiate a product"
-          assert_match /format.xml  \{ render :xml => @product.errors, :status => :unprocessable_entity \}/, m, "#{name.to_s} should set status to :unprocessable_entity code for xml"
-        end
+      assert_has_method f, :show, :edit, :update, :destroy do |name, m|
+        assert_match /@product = Product\.find\(params\[:id\]\)/, m, "#{name.to_s} should query products table"
+      end
 
+      assert_has_method f, :new do |name, m|
+        assert_match /@product = Product\.new/, m, "#{name.to_s} should instantiate a product"
       end
 
-      assert_generated_model_for :product
-      assert_generated_functional_test_for :products
-      assert_generated_unit_test_for :product
-      assert_generated_fixtures_for :products
-      assert_generated_helper_for :products
-      assert_generated_stylesheet :scaffold
-      assert_generated_views_for :products, "index.html.erb", "new.html.erb", "edit.html.erb", "show.html.erb"
-
-      assert_generated_migration :create_products do |t|
-        assert_generated_column t, :name, :string
-        assert_generated_column t, :supplier_id, :integer
-        assert_generated_column t, :created_at, :timestamp
+      assert_has_method f, :create do |name, m|
+        assert_match /@product = Product\.new\(params\[:product\]\)/, m, "#{name.to_s} should instantiate a product"
+        assert_match /format.xml  \{ render :xml => @product.errors, :status => :unprocessable_entity \}/, m, "#{name.to_s} should set status to :unprocessable_entity code for xml"
       end
 
-      assert_added_route_for :products
     end
 
+    assert_generated_model_for :product
+    assert_generated_functional_test_for :products
+    assert_generated_unit_test_for :product
+    assert_generated_fixtures_for :products
+    assert_generated_helper_for :products
+    assert_generated_stylesheet :scaffold
+    assert_generated_views_for :products, "index.html.erb", "new.html.erb", "edit.html.erb", "show.html.erb"
+
+    assert_generated_migration :create_products do |t|
+      assert_generated_column t, :name, :string
+      assert_generated_column t, :supplier_id, :integer
+      assert_generated_column t, :created_at, :timestamp
+    end
+
+    assert_added_route_for :products
   end
-end
\ No newline at end of file
+
+end
-- 
1.5.3.5

