<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">13</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-22T06:48:03+01:00</created-at>
  <creator-id type="integer">30933</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3486</number>
  <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
  <priority type="integer">177150</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag nil="true"></tag>
  <title>Alternative to validates_uniqueness_of using db constraints</title>
  <updated-at type="datetime">2011-04-22T06:48:03+01:00</updated-at>
  <user-id type="integer">27572</user-id>
  <version type="integer">22</version>
  <user-name>Arfon Smith</user-name>
  <creator-name>Jordan Brough</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
  <priority-name nil="true"></priority-name>
  <original-body>This is a patch to enable ActiveRecord to identify db-generated errors for unique constraint violations.  For example, it makes the following work *without* declaring a validates_uniqueness_of:

@@@
create_table &quot;users&quot;, :force =&gt; true do |t|
  t.string   &quot;email&quot;,   :null =&gt; false
end
add_index &quot;users&quot;, [&quot;email&quot;], :unique =&gt; true
@@@

@@@
class User &lt; ActiveRecord::Base
end
@@@

@@@
User.create!(:email =&gt; 'asdf@asdf.com')
u = User.create(:email =&gt; 'asdf@asdf.com')
u.errors[:email]
=&gt; &quot;has already been taken&quot;
@@@

The benefits are speed, ease of use, and completeness --

## Speed

With this approach you don't need to do a db lookup to check for uniqueness when saving (which can sometimes be quite slow when the index is missed -- https://rails.lighthouseapp.com/projects/8994/tickets/2503-validates_uniqueness_of-is-horribly-inefficient-in-mysql).  If you really care about validating uniqueness you're going to have to use database constraints anyway so the database will validate uniqueness no matter what and this approach removes an extra query.

## Ease of use

Given that you have to have db constraints for true uniqueness anyway, this approach will let everything just happen automatically once the db constraints are in place.  You can still use validates_uniqueness_of if you want to.

## Completeness

validates_uniqueness_of has always been a bit of a hack -- it can't handle race conditions properly and results in exceptions that must be handled using somewhat redundant error handling logic.  (See &quot;Concurrency and integrity&quot; section in http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html)

Some things to consider with this approach are:

1. u.valid? returns true before `save` is called since the save must be attempted for the error to be caught.  However, you can still use validates_uniqueness_of in combination with this approach to keep `valid?` working (as far as it can work).
2. In order to extract the field names of the unique constraint that was violated I am doing a DB lookup after the `save` fails (to query the DB indexes).  If this is a 'bad thing' we could also investigate pre-caching the indexes so that the DB lookup isn't necessary.
3. It could be (I have no data on this) that applications with high levels of unique-conflicts might see a performance hit by using this approach instead of validates_uniqueness_of, depending on how the DB handles rolling back from a failed update/insert.  However, this patch improves the common case and and anyone with a high percentage of rollbacks that does see a performance hit can just add the validates_uniquenes_of constraint.


I've implemented handling for mysql (tested on 5.0 &amp; 5.1), sqlite (tested on 3.6.11) &amp; postgres (tested on 8.3.6) with graceful failover if the db error message can't be parsed or for other dbs that don't handlers written for them. (Outputs a generic error message in that case).

I added handling for composite unique indexes as follows:

@@@
# composite unique index on [:field1, :field2, :field3]
u1 = User.create!(:field1 =&gt; 'a', :field2 =&gt; 'a', :field3 =&gt; 'a')
u2 = User.create(:field1 =&gt; 'a', :field2 =&gt; 'a', :field3 =&gt; 'a')
u2.errors[:field1]
=&gt; [&quot;has already been taken for field2/field3&quot;]
@@@

Patches attached for master and 2-3-stable attached including tests.  Thoughts?

NOTE:  The 2-3-stable patch depends on applying the following patches from ticket #2419 (which seems like a good idea to me anyway, given that they apply cleanly).  Do the follwing before trying to apply to 2-3-stable:

@@@
git co 2-3-stable
git cherry-pick 4d614ec0429ce40c4784162c45ed06e125c0d7de
git cherry-pick 605acee71391729ae82ba9012bc37f2f1716fb80
git cherry-pick 9b39032925b68a724bd75174db642bc3d2f891fb
# now apply 2-3-stable patch
@@@</original-body>
  <latest-body>This is a patch to enable ActiveRecord to identify db-generated errors for unique constraint violations.  For example, it makes the following work *without* declaring a validates_uniqueness_of:

@@@
create_table &quot;users&quot;, :force =&gt; true do |t|
  t.string   &quot;email&quot;,   :null =&gt; false
end
add_index &quot;users&quot;, [&quot;email&quot;], :unique =&gt; true
@@@

@@@
class User &lt; ActiveRecord::Base
end
@@@

@@@
User.create!(:email =&gt; 'asdf@asdf.com')
u = User.create(:email =&gt; 'asdf@asdf.com')
u.errors[:email]
=&gt; &quot;has already been taken&quot;
@@@

The benefits are speed, ease of use, and completeness --

## Speed

With this approach you don't need to do a db lookup to check for uniqueness when saving (which can sometimes be quite slow when the index is missed -- https://rails.lighthouseapp.com/projects/8994/tickets/2503-validates_uniqueness_of-is-horribly-inefficient-in-mysql).  If you really care about validating uniqueness you're going to have to use database constraints anyway so the database will validate uniqueness no matter what and this approach removes an extra query.

## Ease of use

Given that you have to have db constraints for true uniqueness anyway, this approach will let everything just happen automatically once the db constraints are in place.  You can still use validates_uniqueness_of if you want to.

## Completeness

validates_uniqueness_of has always been a bit of a hack -- it can't handle race conditions properly and results in exceptions that must be handled using somewhat redundant error handling logic.  (See &quot;Concurrency and integrity&quot; section in http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html)

Some things to consider with this approach are:

1. u.valid? returns true before `save` is called since the save must be attempted for the error to be caught.  However, you can still use validates_uniqueness_of in combination with this approach to keep `valid?` working (as far as it can work).
2. In order to extract the field names of the unique constraint that was violated I am doing a DB lookup after the `save` fails (to query the DB indexes).  If this is a 'bad thing' we could also investigate pre-caching the indexes so that the DB lookup isn't necessary.
3. It could be (I have no data on this) that applications with high levels of unique-conflicts might see a performance hit by using this approach instead of validates_uniqueness_of, depending on how the DB handles rolling back from a failed update/insert.  However, this patch improves the common case and and anyone with a high percentage of rollbacks that does see a performance hit can just add the validates_uniquenes_of constraint.


I've implemented handling for mysql (tested on 5.0 &amp; 5.1), sqlite (tested on 3.6.11) &amp; postgres (tested on 8.3.6) with graceful failover if the db error message can't be parsed or for other dbs that don't handlers written for them. (Outputs a generic error message in that case).

I added handling for composite unique indexes as follows:

@@@
# composite unique index on [:field1, :field2, :field3]
u1 = User.create!(:field1 =&gt; 'a', :field2 =&gt; 'a', :field3 =&gt; 'a')
u2 = User.create(:field1 =&gt; 'a', :field2 =&gt; 'a', :field3 =&gt; 'a')
u2.errors[:field1]
=&gt; [&quot;has already been taken for field2/field3&quot;]
@@@

Patches attached for master and 2-3-stable attached including tests.  Thoughts?

NOTE:  The 2-3-stable patch depends on applying the following patches from ticket #2419 (which seems like a good idea to me anyway, given that they apply cleanly).  Do the follwing before trying to apply to 2-3-stable:

@@@
git co 2-3-stable
git cherry-pick 4d614ec0429ce40c4784162c45ed06e125c0d7de
git cherry-pick 605acee71391729ae82ba9012bc37f2f1716fb80
git cherry-pick 9b39032925b68a724bd75174db642bc3d2f891fb
# now apply 2-3-stable patch
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is a patch to enable ActiveRecord to identify db-generated
errors for unique constraint violations. For example, it makes the
following work &lt;em&gt;without&lt;/em&gt; declaring a
validates_uniqueness_of:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create_table &quot;users&quot;, :force =&amp;gt; true do |t|
  t.string   &quot;email&quot;,   :null =&amp;gt; false
end
add_index &quot;users&quot;, [&quot;email&quot;], :unique =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;class User &amp;lt; ActiveRecord::Base
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;User.create!(:email =&amp;gt; 'asdf@asdf.com')
u = User.create(:email =&amp;gt; 'asdf@asdf.com')
u.errors[:email]
=&amp;gt; &quot;has already been taken&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The benefits are speed, ease of use, and completeness --&lt;/p&gt;
&lt;h2&gt;Speed&lt;/h2&gt;
&lt;p&gt;With this approach you don't need to do a db lookup to check for
uniqueness when saving (which can sometimes be quite slow when the
index is missed -- &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/2503-validates_uniqueness_of-is-horribly-inefficient-in-mysql)&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/2503-validate...&lt;/a&gt;.
If you really care about validating uniqueness you're going to have
to use database constraints anyway so the database will validate
uniqueness no matter what and this approach removes an extra
query.&lt;/p&gt;
&lt;h2&gt;Ease of use&lt;/h2&gt;
&lt;p&gt;Given that you have to have db constraints for true uniqueness
anyway, this approach will let everything just happen automatically
once the db constraints are in place. You can still use
validates_uniqueness_of if you want to.&lt;/p&gt;
&lt;h2&gt;Completeness&lt;/h2&gt;
&lt;p&gt;validates_uniqueness_of has always been a bit of a hack -- it
can't handle race conditions properly and results in exceptions
that must be handled using somewhat redundant error handling logic.
(See &quot;Concurrency and integrity&quot; section in &lt;a href=
&quot;http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html&quot;&gt;
http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMe...&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Some things to consider with this approach are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;u.valid? returns true before &lt;code&gt;save&lt;/code&gt; is called since
the save must be attempted for the error to be caught. However, you
can still use validates_uniqueness_of in combination with this
approach to keep &lt;code&gt;valid?&lt;/code&gt; working (as far as it can
work).&lt;br&gt;&lt;/li&gt;
&lt;li&gt;In order to extract the field names of the unique constraint
that was violated I am doing a DB lookup after the
&lt;code&gt;save&lt;/code&gt; fails (to query the DB indexes). If this is a
'bad thing' we could also investigate pre-caching the indexes so
that the DB lookup isn't necessary.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;It could be (I have no data on this) that applications with
high levels of unique-conflicts might see a performance hit by
using this approach instead of validates_uniqueness_of, depending
on how the DB handles rolling back from a failed update/insert.
However, this patch improves the common case and and anyone with a
high percentage of rollbacks that does see a performance hit can
just add the validates_uniquenes_of constraint.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've implemented handling for mysql (tested on 5.0 &amp;amp; 5.1),
sqlite (tested on 3.6.11) &amp;amp; postgres (tested on 8.3.6) with
graceful failover if the db error message can't be parsed or for
other dbs that don't handlers written for them. (Outputs a generic
error message in that case).&lt;/p&gt;
&lt;p&gt;I added handling for composite unique indexes as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# composite unique index on [:field1, :field2, :field3]
u1 = User.create!(:field1 =&amp;gt; 'a', :field2 =&amp;gt; 'a', :field3 =&amp;gt; 'a')
u2 = User.create(:field1 =&amp;gt; 'a', :field2 =&amp;gt; 'a', :field3 =&amp;gt; 'a')
u2.errors[:field1]
=&amp;gt; [&quot;has already been taken for field2/field3&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Patches attached for master and 2-3-stable attached including
tests. Thoughts?&lt;/p&gt;
&lt;p&gt;NOTE: The 2-3-stable patch depends on applying the following
patches from ticket &lt;a href=&quot;/projects/8994/tickets/2419&quot; title=
&quot;Ticket #2419&quot;&gt;#2419&lt;/a&gt; (which seems like a good idea to me
anyway, given that they apply cleanly). Do the follwing before
trying to apply to 2-3-stable:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git co 2-3-stable
git cherry-pick 4d614ec0429ce40c4784162c45ed06e125c0d7de
git cherry-pick 605acee71391729ae82ba9012bc37f2f1716fb80
git cherry-pick 9b39032925b68a724bd75174db642bc3d2f891fb
# now apply 2-3-stable patch&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is a patch to enable ActiveRecord to identify db-generated errors for unique constraint violations.  For example, it makes the following work *without* declaring a validates_uniqueness_of:

@@@
create_table &quot;users&quot; do |t|
  t.string   &quot;email&quot;,   :null =&gt; false
end
add_index &quot;users&quot;, [&quot;email&quot;], :unique =&gt; true
@@@

@@@
class User &lt; ActiveRecord::Base
end
@@@

@@@
User.create!(:email =&gt; 'asdf@asdf.com')
u = User.create(:email =&gt; 'asdf@asdf.com')
u.errors[:email]
=&gt; &quot;has already been taken&quot;
@@@

The benefits are speed, ease of use, and completeness --

## Speed

With this approach you don't need to do a db lookup to check for uniqueness when saving (which can sometimes be quite slow when the index is missed -- https://rails.lighthouseapp.com/projects/8994/tickets/2503-validates_uniqueness_of-is-horribly-inefficient-in-mysql ).  If you really care about validating uniqueness you're going to have to use database constraints anyway so the database will validate uniqueness no matter what and this approach removes an extra query.  Checking the index twice isn't a problem for the DB (it's cached the 2nd time around), but saving a DB round-trip from the application is a big win.

## Ease of use

Given that you have to have db constraints for true uniqueness anyway, this approach will let everything just happen automatically once the db constraints are in place.  You can still use validates_uniqueness_of if you want to.

## Completeness

validates_uniqueness_of has always been a bit of a hack -- it can't handle race conditions properly and results in exceptions that must be handled using somewhat redundant error handling logic.  (See &quot;Concurrency and integrity&quot; section in http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html)

Some things to consider with this approach are:

1. u.valid? returns true before `save` is called since the save must be attempted for the error to be caught.  However, you can still use validates_uniqueness_of in combination with this approach to keep `valid?` working (as far as it can work).
2. In order to extract the field names of the unique constraint that was violated I am doing a DB lookup after the `save` fails (to query the DB indexes).  If this is a 'bad thing' we could also investigate pre-caching the indexes so that the DB lookup isn't necessary.
3. It could be (I have no data on this) that applications with high levels of unique-conflicts might see a performance hit by using this approach instead of validates_uniqueness_of, depending on how the DB handles rolling back from a failed update/insert.  However, this patch improves the common case and and anyone with a high percentage of rollbacks that does see a performance hit can just add the validates_uniquenes_of constraint.


I've implemented handling for mysql (tested on 5.0 &amp; 5.1), sqlite (tested on 3.6.11) &amp; postgres (tested on 8.3.6) with graceful failover if the db error message can't be parsed or for other dbs that don't handlers written for them. (Outputs a generic error message in that case).

I added handling for composite unique indexes as follows:

@@@
# composite unique index on [:field1, :field2, :field3]
u1 = User.create!(:field1 =&gt; 'a', :field2 =&gt; 'a', :field3 =&gt; 'a')
u2 = User.create(:field1 =&gt; 'a', :field2 =&gt; 'a', :field3 =&gt; 'a')
u2.errors[:field1]
=&gt; [&quot;has already been taken for field2/field3&quot;]
@@@

Patches attached for master and 2-3-stable including tests.  Thoughts?

NOTE:  The 2-3-stable patch depends on applying the following patches from ticket #2419 (which seems like a good idea to me anyway, given that they apply cleanly).  Do the follwing before trying to apply to 2-3-stable:

@@@
git co 2-3-stable
git cherry-pick 4d614ec0429ce40c4784162c45ed06e125c0d7de
git cherry-pick 605acee71391729ae82ba9012bc37f2f1716fb80
git cherry-pick 9b39032925b68a724bd75174db642bc3d2f891fb
# now apply 2-3-stable patch
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is a patch to enable ActiveRecord to identify db-generated
errors for unique constraint violations. For example, it makes the
following work &lt;em&gt;without&lt;/em&gt; declaring a
validates_uniqueness_of:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create_table &quot;users&quot; do |t|
  t.string   &quot;email&quot;,   :null =&amp;gt; false
end
add_index &quot;users&quot;, [&quot;email&quot;], :unique =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;class User &amp;lt; ActiveRecord::Base
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;User.create!(:email =&amp;gt; 'asdf@asdf.com')
u = User.create(:email =&amp;gt; 'asdf@asdf.com')
u.errors[:email]
=&amp;gt; &quot;has already been taken&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The benefits are speed, ease of use, and completeness --&lt;/p&gt;
&lt;h2&gt;Speed&lt;/h2&gt;
&lt;p&gt;With this approach you don't need to do a db lookup to check for
uniqueness when saving (which can sometimes be quite slow when the
index is missed -- &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/2503-validates_uniqueness_of-is-horribly-inefficient-in-mysql&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/2503-validate...&lt;/a&gt;
). If you really care about validating uniqueness you're going to
have to use database constraints anyway so the database will
validate uniqueness no matter what and this approach removes an
extra query. Checking the index twice isn't a problem for the DB
(it's cached the 2nd time around), but saving a DB round-trip from
the application is a big win.&lt;/p&gt;
&lt;h2&gt;Ease of use&lt;/h2&gt;
&lt;p&gt;Given that you have to have db constraints for true uniqueness
anyway, this approach will let everything just happen automatically
once the db constraints are in place. You can still use
validates_uniqueness_of if you want to.&lt;/p&gt;
&lt;h2&gt;Completeness&lt;/h2&gt;
&lt;p&gt;validates_uniqueness_of has always been a bit of a hack -- it
can't handle race conditions properly and results in exceptions
that must be handled using somewhat redundant error handling logic.
(See &quot;Concurrency and integrity&quot; section in &lt;a href=
&quot;http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html&quot;&gt;
http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMe...&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Some things to consider with this approach are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;u.valid? returns true before &lt;code&gt;save&lt;/code&gt; is called since
the save must be attempted for the error to be caught. However, you
can still use validates_uniqueness_of in combination with this
approach to keep &lt;code&gt;valid?&lt;/code&gt; working (as far as it can
work).&lt;br&gt;&lt;/li&gt;
&lt;li&gt;In order to extract the field names of the unique constraint
that was violated I am doing a DB lookup after the
&lt;code&gt;save&lt;/code&gt; fails (to query the DB indexes). If this is a
'bad thing' we could also investigate pre-caching the indexes so
that the DB lookup isn't necessary.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;It could be (I have no data on this) that applications with
high levels of unique-conflicts might see a performance hit by
using this approach instead of validates_uniqueness_of, depending
on how the DB handles rolling back from a failed update/insert.
However, this patch improves the common case and and anyone with a
high percentage of rollbacks that does see a performance hit can
just add the validates_uniquenes_of constraint.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've implemented handling for mysql (tested on 5.0 &amp;amp; 5.1),
sqlite (tested on 3.6.11) &amp;amp; postgres (tested on 8.3.6) with
graceful failover if the db error message can't be parsed or for
other dbs that don't handlers written for them. (Outputs a generic
error message in that case).&lt;/p&gt;
&lt;p&gt;I added handling for composite unique indexes as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# composite unique index on [:field1, :field2, :field3]
u1 = User.create!(:field1 =&amp;gt; 'a', :field2 =&amp;gt; 'a', :field3 =&amp;gt; 'a')
u2 = User.create(:field1 =&amp;gt; 'a', :field2 =&amp;gt; 'a', :field3 =&amp;gt; 'a')
u2.errors[:field1]
=&amp;gt; [&quot;has already been taken for field2/field3&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Patches attached for master and 2-3-stable including tests.
Thoughts?&lt;/p&gt;
&lt;p&gt;NOTE: The 2-3-stable patch depends on applying the following
patches from ticket &lt;a href=&quot;/projects/8994/tickets/2419&quot; title=
&quot;Ticket #2419&quot;&gt;#2419&lt;/a&gt; (which seems like a good idea to me
anyway, given that they apply cleanly). Do the follwing before
trying to apply to 2-3-stable:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git co 2-3-stable
git cherry-pick 4d614ec0429ce40c4784162c45ed06e125c0d7de
git cherry-pick 605acee71391729ae82ba9012bc37f2f1716fb80
git cherry-pick 9b39032925b68a724bd75174db642bc3d2f891fb
# now apply 2-3-stable patch&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-12T22:14:22+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord constraint patch uniqueness</tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2009-11-12T22:25:57+00:00</updated-at>
      <user-id type="integer">30933</user-id>
      <version type="integer">1</version>
      <user-name>Jordan Brough</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>That looks really nice.  I don't have time to test it right now, but +1 on a read-through.</body>
      <body-html>&lt;div&gt;&lt;p&gt;That looks really nice. I don't have time to test it right now,
but +1 on a read-through.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-19T18:21:41+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord constraint patch uniqueness
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2009-11-19T18:21:42+00:00</updated-at>
      <user-id type="integer">47655</user-id>
      <version type="integer">2</version>
      <user-name>JasonKing</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>...although, the core behavior should be consistent - ie. throw an exception on any DB error.  The Rails user should have to do _something_ in order to get the special behavior in your patch.

Maybe you could rewrite so that the special handling of the constraint exception only happens if the user specifies vuo in their model?</body>
      <body-html>&lt;div&gt;&lt;p&gt;...although, the core behavior should be consistent - ie. throw
an exception on any DB error. The Rails user should have to do
&lt;em&gt;something&lt;/em&gt; in order to get the special behavior in your
patch.&lt;/p&gt;
&lt;p&gt;Maybe you could rewrite so that the special handling of the
constraint exception only happens if the user specifies vuo in
their model?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-19T18:30:02+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2009-11-19T18:30:06+00:00</updated-at>
      <user-id type="integer">47655</user-id>
      <version type="integer">3</version>
      <user-name>JasonKing</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1, this feature looks great! If save! and such which should throw an exception if there is an error do with this patch, then I'm fine using it by default. It's not important to me as a user whether the error was raised in a validator or by the DB itself, as long as the DB is not changed either way.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1, this feature looks great! If save! and such which should
throw an exception if there is an error do with this patch, then
I'm fine using it by default. It's not important to me as a user
whether the error was raised in a validator or by the DB itself, as
long as the DB is not changed either way.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-02T22:42:21+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2009-12-02T22:42:22+00:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">4</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Great patch. Could you rebase against latest master + 2-3-stable?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Great patch. Could you rebase against latest master +
2-3-stable?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-22T07:21:57+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2009-12-22T07:21:59+00:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sure thing, attached.  2-3-stable patch now has pre-req patches rolled into it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sure thing, attached. 2-3-stable patch now has pre-req patches
rolled into it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-22T16:12:09+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2009-12-22T16:12:15+00:00</updated-at>
      <user-id type="integer">30933</user-id>
      <version type="integer">6</version>
      <user-name>Jordan Brough</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>+1! Super excited to see this patch! It would be nice to populate the AR error messages for save! before raising the exception as well, to be consistent with standard validation functionality. Those who make heavy use of save!/rescue RecordInvalid will miss out.

Since this looks wrapped up, I pulled some changes from my [similar 2.3 gem](http://github.com/blythedunham/rails_devs_for_data_integrity), and logged a separate ticket #3614 to resolve this and some of the other inconsistencies mentioned above. It add hooks to `validates_uniqueness_of` so developers can explicitly declare intent to use this alternative, provide custom error messages, and raises RecordInvalid instead of RecordNotUnique errors consistent with AR validation functionality.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1! Super excited to see this patch! It would be nice to
populate the AR error messages for save! before raising the
exception as well, to be consistent with standard validation
functionality. Those who make heavy use of save!/rescue
RecordInvalid will miss out.&lt;/p&gt;
&lt;p&gt;Since this looks wrapped up, I pulled some changes from my
&lt;a href=
&quot;http://github.com/blythedunham/rails_devs_for_data_integrity&quot;&gt;similar
2.3 gem&lt;/a&gt;, and logged a separate ticket &lt;a href=
&quot;/projects/8994/tickets/3614&quot; title=&quot;Ticket #3614&quot;&gt;#3614&lt;/a&gt; to
resolve this and some of the other inconsistencies mentioned above.
It add hooks to &lt;code&gt;validates_uniqueness_of&lt;/code&gt; so developers
can explicitly declare intent to use this alternative, provide
custom error messages, and raises RecordInvalid instead of
RecordNotUnique errors consistent with AR validation
functionality.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-25T05:00:11+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2009-12-25T05:00:15+00:00</updated-at>
      <user-id type="integer">47289</user-id>
      <version type="integer">7</version>
      <user-name>blythe</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Attaching updated patches rebased against latest master + 2-3-stable.  Re-ran activerecord tests successfully on mysql (5.0.41, 5.1.40), sqlite (3.6.11) &amp; postgres (8.3.6).

I've included an extra patch in each to add bang method handling.  (thanks to blythe for pointing that out!).

I don't agree with trying to squeeze `validates_uniqueness_of` into use here.  The model can't configure or enable/disable the DB constraint and I think it's confusing to pretend that it does.  The exception will happen regardless of model settings so Rails ought to just handle it automatically as gracefully as possible.  Custom error messages can already be configured via config/locales files. e.g., adding this:

@@@
en:
  activerecord:
    errors:
      models:
        user:
          attributes:
            email:
              taken: &quot;has already been taken - custom&quot;
              taken_multiple: &quot;has already been taken for {{context}} - custom&quot;
              taken_generic: &quot;Unique requirement not met - custom&quot;
@@@

to config/locales/en.yml.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attaching updated patches rebased against latest master +
2-3-stable. Re-ran activerecord tests successfully on mysql
(5.0.41, 5.1.40), sqlite (3.6.11) &amp;amp; postgres (8.3.6).&lt;/p&gt;
&lt;p&gt;I've included an extra patch in each to add bang method
handling. (thanks to blythe for pointing that out!).&lt;/p&gt;
&lt;p&gt;I don't agree with trying to squeeze
&lt;code&gt;validates_uniqueness_of&lt;/code&gt; into use here. The model can't
configure or enable/disable the DB constraint and I think it's
confusing to pretend that it does. The exception will happen
regardless of model settings so Rails ought to just handle it
automatically as gracefully as possible. Custom error messages can
already be configured via config/locales files. e.g., adding
this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;en:
  activerecord:
    errors:
      models:
        user:
          attributes:
            email:
              taken: &quot;has already been taken - custom&quot;
              taken_multiple: &quot;has already been taken for {{context}} - custom&quot;
              taken_generic: &quot;Unique requirement not met - custom&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;to config/locales/en.yml.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-16T03:51:15+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-01-16T03:51:21+00:00</updated-at>
      <user-id type="integer">30933</user-id>
      <version type="integer">8</version>
      <user-name>Jordan Brough</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>Oops, had a small typo in one of the test assertion messages.  updates attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oops, had a small typo in one of the test assertion messages.
updates attached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-16T04:00:01+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-01-16T04:00:03+00:00</updated-at>
      <user-id type="integer">30933</user-id>
      <version type="integer">9</version>
      <user-name>Jordan Brough</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">8</attachments-count>
      <body>Jeremy - attached updated patch rebased against latest master.  Still interested in the patch?  Any chance of getting it into Rails 3 betas?

Ran the tests against postgres 8.3.6, mysql 5.1.40 &amp; 5.0.41, and sqlite3 3.6.11 on both master and on 2-3-stable.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jeremy - attached updated patch rebased against latest master.
Still interested in the patch? Any chance of getting it into Rails
3 betas?&lt;/p&gt;
&lt;p&gt;Ran the tests against postgres 8.3.6, mysql 5.1.40 &amp;amp; 5.0.41,
and sqlite3 3.6.11 on both master and on 2-3-stable.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-09T21:25:33+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-02-09T21:25:44+00:00</updated-at>
      <user-id type="integer">30933</user-id>
      <version type="integer">10</version>
      <user-name>Jordan Brough</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">9</attachments-count>
      <body>+1! I could use this (today).</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1! I could use this (today).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-11T20:13:39+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-02-11T20:13:43+00:00</updated-at>
      <user-id type="integer">14178</user-id>
      <version type="integer">11</version>
      <user-name>J.D. Hollis</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">9</attachments-count>
      <body>I would happily +1 if the following caveat was addressed.

Jordan - at least for MySQL using the NDB (cluster) engine , UNIQUE indexes can throw another error message:

     ERROR 1169 (23000): Can't write, because of unique constraint, to table &lt;table&gt;

See here: http://bugs.mysql.com/bug.php?id=21881

I've also come across this error in the MySQL list of error messages, but I am not sure it applies to unique indexes.

     Error: 1291 SQLSTATE: HY000 (ER_DUPLICATED_VALUE_IN_TYPE)

(list of MySQL errors: http://dev.mysql.com/doc/refman/5.1/en/error-messages-server.html)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I would happily +1 if the following caveat was addressed.&lt;/p&gt;
&lt;p&gt;Jordan - at least for MySQL using the NDB (cluster) engine ,
UNIQUE indexes can throw another error message:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; ERROR 1169 (23000): Can't write, because of unique constraint, to table &amp;lt;table&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;See here: &lt;a href=
&quot;http://bugs.mysql.com/bug.php?id=21881&quot;&gt;http://bugs.mysql.com/bug.php?id=21881&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've also come across this error in the MySQL list of error
messages, but I am not sure it applies to unique indexes.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; Error: 1291 SQLSTATE: HY000 (ER_DUPLICATED_VALUE_IN_TYPE)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(list of MySQL errors: &lt;a href=
&quot;http://dev.mysql.com/doc/refman/5.1/en/error-messages-server.html&quot;&gt;
http://dev.mysql.com/doc/refman/5.1/en/error-messages-server.html&lt;/a&gt;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-11T21:44:53+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-02-11T21:44:56+00:00</updated-at>
      <user-id type="integer">794</user-id>
      <version type="integer">12</version>
      <user-name>Christos Zisopoulos</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">9</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-24T19:25:31+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-02-24T19:25:34+00:00</updated-at>
      <user-id type="integer">55442</user-id>
      <version type="integer">13</version>
      <user-name>Jarl Friis</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">9</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-02T21:09:24+01:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-04-02T21:09:29+01:00</updated-at>
      <user-id type="integer">47647</user-id>
      <version type="integer">14</version>
      <user-name>Kyle J. Ginavan</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">9</attachments-count>
      <body>+1 on the idea, not for the implementation as is. I don't believe these constraint errors are always presented in English Instead of checking for English words like 'unique constraint', 'Duplicate entry', etc. I think it'd be better to check for the error codes. So e.g. for Oracle you'd check for &quot;ORA-00001:&quot;, for mysql you'd check for ER_DUP_KEYNAME, ER_DUP_UNIQUE and ER_DUPLICATED_VALUE_IN_TYPE, etc.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 on the idea, not for the implementation as is. I don't
believe these constraint errors are always presented in English
Instead of checking for English words like 'unique constraint',
'Duplicate entry', etc. I think it'd be better to check for the
error codes. So e.g. for Oracle you'd check for &quot;ORA-00001:&quot;, for
mysql you'd check for ER_DUP_KEYNAME, ER_DUP_UNIQUE and
ER_DUPLICATED_VALUE_IN_TYPE, etc.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-30T08:17:51+01:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-04-30T08:17:55+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">15</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">9</attachments-count>
      <body>This would require more changes to the AR API, to expose those error numbers before these exceptions are thrown.

Generally, I think this would be a really good idea.  I'm really not that familiar with the other Ruby ORMs, but exposing things like the error numbers, seems like a robust and mature step for AR to take.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This would require more changes to the AR API, to expose those
error numbers before these exceptions are thrown.&lt;/p&gt;
&lt;p&gt;Generally, I think this would be a really good idea. I'm really
not that familiar with the other Ruby ORMs, but exposing things
like the error numbers, seems like a robust and mature step for AR
to take.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-30T18:07:25+01:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-04-30T18:07:27+01:00</updated-at>
      <user-id type="integer">47655</user-id>
      <version type="integer">16</version>
      <user-name>JasonKing</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">9</attachments-count>
      <body>Updated patches rebased onto latest master &amp; 2-3-stable.

Lawrence - your complaint is about detecting unique constraint violations, which is something that's already in Rails 3 (see http://github.com/rails/rails/commit/53a3eaa8 and note that error codes [are being used](http://github.com/rails/rails/blob/a0621c1086165e4b3cff71b54f08a190851b6314/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb#L614-618) in some cases.)  Whether to improve that is probably a good item for a separate ticket.  This ticket is about using the db (for the reasons above) to enforce uniqueness while making it fit into the standard AR model as nicely as possible.  Figuring out which columns caused the unique constraint violation is something that db's *can't* provide via error numbers.  I see your point about the parsing failing in non-english, but this patch was designed to fail gracefully in that case to a generic uniqueness message while still bringing normal AR error handling.  Patches that build on this one to add multi-language support seem like a great idea to me.

Christos - the issue you brings up spans both the earlier commit I mentioned as well as mine.  Sounds like a great add-on patch (to address it on both levels) after we get this committed.  In any case, this patch won't make the situation any worse for NDB.  As I don't have NDB, if you could help out on figuring out an additional patch for NDB handling it'd be much appreciated.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Updated patches rebased onto latest master &amp;amp; 2-3-stable.&lt;/p&gt;
&lt;p&gt;Lawrence - your complaint is about detecting unique constraint
violations, which is something that's already in Rails 3 (see
&lt;a href=
&quot;http://github.com/rails/rails/commit/53a3eaa8&quot;&gt;http://github.com/rails/rails/commit/53a3eaa8&lt;/a&gt;
and note that error codes &lt;a href=
&quot;http://github.com/rails/rails/blob/a0621c1086165e4b3cff71b54f08a190851b6314/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb#L614-618&quot;&gt;
are being used&lt;/a&gt; in some cases.) Whether to improve that is
probably a good item for a separate ticket. This ticket is about
using the db (for the reasons above) to enforce uniqueness while
making it fit into the standard AR model as nicely as possible.
Figuring out which columns caused the unique constraint violation
is something that db's &lt;em&gt;can't&lt;/em&gt; provide via error numbers. I
see your point about the parsing failing in non-english, but this
patch was designed to fail gracefully in that case to a generic
uniqueness message while still bringing normal AR error handling.
Patches that build on this one to add multi-language support seem
like a great idea to me.&lt;/p&gt;
&lt;p&gt;Christos - the issue you brings up spans both the earlier commit
I mentioned as well as mine. Sounds like a great add-on patch (to
address it on both levels) after we get this committed. In any
case, this patch won't make the situation any worse for NDB. As I
don't have NDB, if you could help out on figuring out an additional
patch for NDB handling it'd be much appreciated.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-14T20:53:28+01:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-05-14T20:53:30+01:00</updated-at>
      <user-id type="integer">30933</user-id>
      <version type="integer">17</version>
      <user-name>Jordan Brough</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">11</attachments-count>
      <body>Did this ever make it into 2.3.X ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Did this ever make it into 2.3.X ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-24T23:06:37+01:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">177150</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-10-24T23:06:44+01:00</updated-at>
      <user-id type="integer">27572</user-id>
      <version type="integer">18</version>
      <user-name>Arfon Smith</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">11</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:23:50+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">177150</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2011-02-02T16:30:46+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">19</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">11</attachments-count>
      <body>I'm attaching updated patches rebased on top of latest master and 2-3-stable.

Fwiw, we've been using this in production at animoto.com with Rails 2.3 for over a year now.  This patch makes it easy to have reliable and fast uniqueness in a way that plays nicely with Rails.  The most common cases are covered well and the less common cases have sensible fallbacks, or at least don't make things worse than they were before.

I'd love to get feedback from the Rails team on whether they think this is something they would consider adding.  Jeremy commented initially that it sounded like a good idea and I've continued to rebase and attach patches (and use them at Animoto) but would love to hear some feedback.  Any thoughts?

All tests pass for me with MySQL 5.1.50, PostgreSQL 8.4.6 and SQLite 3.7.0.1.

[state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm attaching updated patches rebased on top of latest master
and 2-3-stable.&lt;/p&gt;
&lt;p&gt;Fwiw, we've been using this in production at animoto.com with
Rails 2.3 for over a year now. This patch makes it easy to have
reliable and fast uniqueness in a way that plays nicely with Rails.
The most common cases are covered well and the less common cases
have sensible fallbacks, or at least don't make things worse than
they were before.&lt;/p&gt;
&lt;p&gt;I'd love to get feedback from the Rails team on whether they
think this is something they would consider adding. Jeremy
commented initially that it sounded like a good idea and I've
continued to rebase and attach patches (and use them at Animoto)
but would love to hear some feedback. Any thoughts?&lt;/p&gt;
&lt;p&gt;All tests pass for me with MySQL 5.1.50, PostgreSQL 8.4.6 and
SQLite 3.7.0.1.&lt;/p&gt;
&lt;p&gt;[state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-05T06:46:50+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">177150</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2011-02-05T06:47:21+00:00</updated-at>
      <user-id type="integer">30933</user-id>
      <version type="integer">20</version>
      <user-name>Jordan Brough</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">11</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-05T06:49:23+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">177150</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2011-02-05T06:49:57+00:00</updated-at>
      <user-id type="integer">30933</user-id>
      <version type="integer">21</version>
      <user-name>Jordan Brough</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">13</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-05T20:49:06+00:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">177150</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2011-02-05T20:49:40+00:00</updated-at>
      <user-id type="integer">27572</user-id>
      <version type="integer">22</version>
      <user-name>Arfon Smith</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">13</attachments-count>
      <body>PDF to JPG Converter is a more efficient pdf to jpg conversion software
&lt;a href=&quot;http://www.oxpdf.com/pdf-creator.html&quot;&gt;PDF Creator&lt;/a&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-jpg-converter.html&quot;&gt;pdf to jpg converter&lt;/a&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-image-converter.html&quot;&gt;pdf to image converter&lt;/a&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-tiff-converter.html&quot;&gt;pdf to tiff converter&lt;/a&gt;
which is able to convert pdf to jpg format with original output quality and fast conversion speed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;PDF to JPG Converter is a more efficient pdf to jpg conversion
software&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-creator.html&quot;&gt;PDF Creator&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-jpg-converter.html&quot;&gt;pdf to jpg
converter&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-image-converter.html&quot;&gt;pdf to
image converter&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-tiff-converter.html&quot;&gt;pdf to
tiff converter&lt;/a&gt;&lt;br&gt;
which is able to convert pdf to jpg format with original output
quality and fast conversion speed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-22T04:47:40+01:00</created-at>
      <creator-id type="integer">30933</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3486</number>
      <permalink>alternative-to-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">177150</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Alternative to validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2011-04-22T06:48:03+01:00</updated-at>
      <user-id type="integer">146598</user-id>
      <version type="integer">23</version>
      <user-name>machen</user-name>
      <creator-name>Jordan Brough</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3486</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f2473ae56d001a2df2e0acaeaf1c3489bf197389</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-11-12T22:14:25+00:00</created-at>
      <filename>master-unique-constraints.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">319093</id>
      <size type="integer">12912</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/319093/master-unique-constraints.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>e52f96efa4dff21363902fe439810d84a0e11626</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-11-12T22:14:26+00:00</created-at>
      <filename>2-3-stable-unique-constraints.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">319094</id>
      <size type="integer">12927</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/319094/2-3-stable-unique-constraints.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>f80f1a4e1a524910ea634aa98a5ab3054912e90e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-12-22T16:12:10+00:00</created-at>
      <filename>unique-patch-master.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">360168</id>
      <size type="integer">12745</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/360168/unique-patch-master.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>19563bd359f02964cfdbe9c90ffbb63213b9d3a5</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-12-22T16:12:11+00:00</created-at>
      <filename>unique-patch-2-3-stable.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">360169</id>
      <size type="integer">25624</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/360169/unique-patch-2-3-stable.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>1d765e4b9eda3c133a583ef073950a899978db37</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-16T03:51:15+00:00</created-at>
      <filename>unique-patch-master.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">380015</id>
      <size type="integer">17397</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/380015/unique-patch-master.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>0780c61398abf8c657ed909c5fb73cf826da74e4</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-16T03:51:17+00:00</created-at>
      <filename>unique-patch-2-3-stable.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">380016</id>
      <size type="integer">30595</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/380016/unique-patch-2-3-stable.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>61904d7fee85d56016868c705b15dfe4258b08c9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-16T04:00:01+00:00</created-at>
      <filename>unique-patch-master.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">380019</id>
      <size type="integer">17395</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/380019/unique-patch-master.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>6858bb961787a5fe1ada37df1336d6def4b9d3cb</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-16T04:00:01+00:00</created-at>
      <filename>unique-patch-2-3-stable.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">380020</id>
      <size type="integer">30593</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/380020/unique-patch-2-3-stable.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>8a847086337befc2ef897bae06f747f273bcbfd9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-02-09T21:25:33+00:00</created-at>
      <filename>unique-patch-master.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">405714</id>
      <size type="integer">17169</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/405714/unique-patch-master.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>4cdc67d320d91f4079b426440b076e9174a7cd85</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-05-14T20:53:28+01:00</created-at>
      <filename>unique-patch-master.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">522103</id>
      <size type="integer">17446</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/522103/unique-patch-master.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>99e962c32307180e1f734be1369ff60bb3a7e353</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-05-14T20:53:29+01:00</created-at>
      <filename>unique-patch-2-3-stable.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">522104</id>
      <size type="integer">30641</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/522104/unique-patch-2-3-stable.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>f3b1e41571b6c7c7030d2cca6eed1e8e4979fc95</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-05T06:49:23+00:00</created-at>
      <filename>unique-patch-master.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">897550</id>
      <size type="integer">19286</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/897550/unique-patch-master.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>e2007a5b57ceb580ae868b2dfb42903fc891c130</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-05T06:49:23+00:00</created-at>
      <filename>unique-patch-2-3-stable.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">897551</id>
      <size type="integer">31233</size>
      <uploader-id type="integer">30933</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/897551/unique-patch-2-3-stable.patch</url>
    </attachment>
  </attachments>
</ticket>
