<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-19T17:52:53+01:00</created-at>
  <creator-id type="integer">120363</creator-id>
  <milestone-due-on type="datetime">2011-03-27T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">103410</milestone-id>
  <number type="integer">5829</number>
  <permalink>activerecordrelationempty-fails-for-grouped-relations-as-orderedhash-is-missing-zero</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>&quot;activerecord  calculation&quot; activesupport orderedhash rails3</tag>
  <title>ActiveRecord::Relation#empty? fails for grouped relations, as OrderedHash is missing #zero?</title>
  <updated-at type="datetime">2011-03-12T22:48:17+00:00</updated-at>
  <user-id type="integer">135748</user-id>
  <version type="integer">8</version>
  <user-name>Chris Oliver</user-name>
  <creator-name>JonnieCache</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5829</url>
  <milestone-title>3.0.6</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>An activerecord relation with a `GROUP BY` statement returns an `OrderedHash` when its `calculate` method is called, as documented at http://ar.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html

When the query returns no results, calling `count` on it returns an empty `OrderedHash`. However `ActiveRecord::Relation#empty?` calls `count.zero?`, expecting a `Number`. It in fact gets the `OrderedHash` producing

`NoMethodError: undefined method `zero?' for #\&lt;OrderedHash {}\&gt;`

Simplest thing would be to change the `empty?` method to be a bit more smart and check for an empty hash before calling `zero?`. A wider solution would be to implement `zero?` for OrderedHash.

My workaround right now is to call `count.empty?` on the relation object but this is ugly. It also only works if you *know* that the relation object is definitely representing a query that uses GROUP BY, if you dont know that for sure then you have to put ugly conditional statements in because if `count` returns an integer, `#empty?` will obviously not be present. Goodbye model-agnostic partials.</original-body>
  <latest-body>An activerecord relation with a `GROUP BY` statement returns an `OrderedHash` when its `calculate` method is called, as documented at http://ar.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html

When the query returns no results, calling `count` on it returns an empty `OrderedHash`. However `ActiveRecord::Relation#empty?` calls `count.zero?`, expecting a `Number`. It in fact gets the `OrderedHash` producing

`NoMethodError: undefined method `zero?' for #\&lt;OrderedHash {}\&gt;`

Simplest thing would be to change the `empty?` method to be a bit more smart and check for an empty hash before calling `zero?`. A wider solution would be to implement `zero?` for OrderedHash.

My workaround right now is to call `count.empty?` on the relation object but this is ugly. It also only works if you *know* that the relation object is definitely representing a query that uses GROUP BY, if you dont know that for sure then you have to put ugly conditional statements in because if `count` returns an integer, `#empty?` will obviously not be present. Goodbye model-agnostic partials.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;An activerecord relation with a &lt;code&gt;GROUP BY&lt;/code&gt; statement
returns an &lt;code&gt;OrderedHash&lt;/code&gt; when its &lt;code&gt;calculate&lt;/code&gt;
method is called, as documented at &lt;a href=
&quot;http://ar.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html&quot;&gt;
http://ar.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMe...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When the query returns no results, calling &lt;code&gt;count&lt;/code&gt; on
it returns an empty &lt;code&gt;OrderedHash&lt;/code&gt;. However
&lt;code&gt;ActiveRecord::Relation#empty?&lt;/code&gt; calls
&lt;code&gt;count.zero?&lt;/code&gt;, expecting a &lt;code&gt;Number&lt;/code&gt;. It in
fact gets the &lt;code&gt;OrderedHash&lt;/code&gt; producing&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NoMethodError: undefined method&lt;/code&gt;zero?' for
#&amp;lt;OrderedHash {}&amp;gt;&lt;/p&gt;
&lt;p&gt;Simplest thing would be to change the &lt;code&gt;empty?&lt;/code&gt; method
to be a bit more smart and check for an empty hash before calling
&lt;code&gt;zero?&lt;/code&gt;. A wider solution would be to implement
&lt;code&gt;zero?&lt;/code&gt; for OrderedHash.&lt;/p&gt;
&lt;p&gt;My workaround right now is to call &lt;code&gt;count.empty?&lt;/code&gt; on
the relation object but this is ugly. It also only works if you
&lt;em&gt;know&lt;/em&gt; that the relation object is definitely representing a
query that uses GROUP BY, if you dont know that for sure then you
have to put ugly conditional statements in because if
&lt;code&gt;count&lt;/code&gt; returns an integer, &lt;code&gt;#empty?&lt;/code&gt; will
obviously not be present. Goodbye model-agnostic partials.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>An activerecord relation with a `GROUP BY` statement returns an `OrderedHash` when its `calculate` method is called, as documented at http://ar.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html

When the query returns no results, calling `count` on it returns an empty `OrderedHash`. However `ActiveRecord::Relation#empty?` calls `count.zero?`, expecting a `Number`. It in fact gets the `OrderedHash` producing

`NoMethodError: undefined method `zero?' for #\&lt;OrderedHash {}\&gt;`

Simplest thing would be to change the `empty?` method to be a bit more smart and check for an empty hash before calling `zero?`. A wider solution would be to implement `zero?` for OrderedHash.

My workaround right now is to call `count.empty?` on the relation object but this is ugly. It also only works if you *know* that the relation object is definitely representing a query that uses GROUP BY, if you dont know that for sure then you have to put ugly conditional statements in because if `count` returns an integer, `#empty?` will obviously not be present. Goodbye model-agnostic partials.</body>
      <body-html>&lt;div&gt;&lt;p&gt;An activerecord relation with a &lt;code&gt;GROUP BY&lt;/code&gt; statement
returns an &lt;code&gt;OrderedHash&lt;/code&gt; when its &lt;code&gt;calculate&lt;/code&gt;
method is called, as documented at &lt;a href=
&quot;http://ar.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html&quot;&gt;
http://ar.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMe...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When the query returns no results, calling &lt;code&gt;count&lt;/code&gt; on
it returns an empty &lt;code&gt;OrderedHash&lt;/code&gt;. However
&lt;code&gt;ActiveRecord::Relation#empty?&lt;/code&gt; calls
&lt;code&gt;count.zero?&lt;/code&gt;, expecting a &lt;code&gt;Number&lt;/code&gt;. It in
fact gets the &lt;code&gt;OrderedHash&lt;/code&gt; producing&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NoMethodError: undefined method&lt;/code&gt;zero?' for
#&amp;lt;OrderedHash {}&amp;gt;&lt;/p&gt;
&lt;p&gt;Simplest thing would be to change the &lt;code&gt;empty?&lt;/code&gt; method
to be a bit more smart and check for an empty hash before calling
&lt;code&gt;zero?&lt;/code&gt;. A wider solution would be to implement
&lt;code&gt;zero?&lt;/code&gt; for OrderedHash.&lt;/p&gt;
&lt;p&gt;My workaround right now is to call &lt;code&gt;count.empty?&lt;/code&gt; on
the relation object but this is ugly. It also only works if you
&lt;em&gt;know&lt;/em&gt; that the relation object is definitely representing a
query that uses GROUP BY, if you dont know that for sure then you
have to put ugly conditional statements in because if
&lt;code&gt;count&lt;/code&gt; returns an integer, &lt;code&gt;#empty?&lt;/code&gt; will
obviously not be present. Goodbye model-agnostic partials.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-17T16:32:10+01:00</created-at>
      <creator-id type="integer">120363</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5829</number>
      <permalink>activerecordrelationempty-fails-for-grouped-relations-as-orderedhash-is-missing-zero</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord  calculation&quot; activesupport orderedhash rails3</tag>
      <title>ActiveRecord::Relation#empty? fails for grouped relations, as OrderedHash is missing #zero?</title>
      <updated-at type="datetime">2010-10-17T16:32:12+01:00</updated-at>
      <user-id type="integer">120363</user-id>
      <version type="integer">1</version>
      <user-name>JonnieCache</user-name>
      <creator-name>JonnieCache</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5829</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Simplest thing would be to change the empty? method to be a bit more smart and check for an empty hash before calling &lt;a href=&quot;http://www.weddinginthebox.com/blog/lace-mermaid-wedding-dress.html&quot;&gt;Lace mermaid wedding dresses&lt;/a&gt;?. A wider solution would be to implement zero? for OrderedHash.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Simplest thing would be to change the empty? method to be a bit
more smart and check for an empty hash before calling &lt;a href=
&quot;http://www.weddinginthebox.com/blog/lace-mermaid-wedding-dress.html&quot;&gt;
Lace mermaid wedding dresses&lt;/a&gt;?. A wider solution would be to
implement zero? for OrderedHash.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-19T06:21:08+01:00</created-at>
      <creator-id type="integer">120363</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5829</number>
      <permalink>activerecordrelationempty-fails-for-grouped-relations-as-orderedhash-is-missing-zero</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord  calculation&quot; activesupport orderedhash rails3</tag>
      <title>ActiveRecord::Relation#empty? fails for grouped relations, as OrderedHash is missing #zero?</title>
      <updated-at type="datetime">2010-10-19T17:52:53+01:00</updated-at>
      <user-id type="integer">120610</user-id>
      <version type="integer">2</version>
      <user-name>koukou</user-name>
      <creator-name>JonnieCache</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5829</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Today i came over this error too...
Using Rails 3.0.3, Ruby 1.8.7 Enterprise Edition

@@@ ruby
# Showing /var/www/truhlari/app/views/articles/_detail.html.haml where line #103 raised:
# undefined method `zero?' for #&lt;OrderedHash {&quot;570&quot;=&gt;1, &quot;683&quot;=&gt;1, &quot;551&quot;=&gt;1, &quot;553&quot;=&gt;1}&gt;

# causing line in view:
if article.more_articles.active.published.any?

# model:
def more_articles
 ids = self.categories.collect(&amp;:id).compact
 return self.class.scoped.joins(&quot;join e3_assocs on `item2_id` = `e3_models`.`id`&quot;).where(&quot;`item1_id` IN (#{ids.compact.join(',')})&quot;).group('`e3_models`.`id`')
end
@@@

Calling .empty? instead of .any? does the same...

It seems to be solved for my case by using .select(&quot;DISTINCT()...&quot;)

But it would not be so easy-solvable for different code cases .. :/</body>
      <body-html>&lt;div&gt;&lt;p&gt;Today i came over this error too...&lt;br&gt;
Using Rails 3.0.3, Ruby 1.8.7 Enterprise Edition&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;# Showing /var/www/truhlari/app/views/articles/_detail.html.haml where line #103 raised:
# undefined method `zero?' for #&amp;lt;OrderedHash {&quot;570&quot;=&amp;gt;1, &quot;683&quot;=&amp;gt;1, &quot;551&quot;=&amp;gt;1, &quot;553&quot;=&amp;gt;1}&amp;gt;

# causing line in view:
if article.more_articles.active.published.any?

# model:
def more_articles
 ids = self.categories.collect(&amp;amp;:id).compact
 return self.class.scoped.joins(&quot;join e3_assocs on `item2_id` = `e3_models`.`id`&quot;).where(&quot;`item1_id` IN (#{ids.compact.join(',')})&quot;).group('`e3_models`.`id`')
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Calling .empty? instead of .any? does the same...&lt;/p&gt;
&lt;p&gt;It seems to be solved for my case by using
.select(&quot;DISTINCT()...&quot;)&lt;/p&gt;
&lt;p&gt;But it would not be so easy-solvable for different code cases ..
:/&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-08T13:44:15+00:00</created-at>
      <creator-id type="integer">120363</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5829</number>
      <permalink>activerecordrelationempty-fails-for-grouped-relations-as-orderedhash-is-missing-zero</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord  calculation&quot; activesupport orderedhash rails3</tag>
      <title>ActiveRecord::Relation#empty? fails for grouped relations, as OrderedHash is missing #zero?</title>
      <updated-at type="datetime">2011-01-08T13:44:22+00:00</updated-at>
      <user-id type="integer">116089</user-id>
      <version type="integer">3</version>
      <user-name>Dalibor Filus</user-name>
      <creator-name>JonnieCache</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5829</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is quite annoying. But since most results are iterated over anyway, you could just use .to_a.empty? or .all.empty?:
(of course this is only sensible when limit() is involved)
@@@
@articles = Article.published.group(&quot;publisher_id&quot;).limit(10).to_a.empty?
@@@

Not to speak of other problems with using count() on your ActiveRecord::Relation when limit() or offset() is involved.
You just cannot use a count/size on a scope and rely on the result.
for example see: https://rails.lighthouseapp.com/projects/8994/tickets/4882-activerelation-bug-size-returning-incorrect-value-with-limit</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is quite annoying. But since most results are iterated over
anyway, you could just use .to_a.empty? or .all.empty?:&lt;br&gt;
(of course this is only sensible when limit() is involved)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@articles = Article.published.group(&quot;publisher_id&quot;).limit(10).to_a.empty?&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Not to speak of other problems with using count() on your
ActiveRecord::Relation when limit() or offset() is involved.&lt;br&gt;
You just cannot use a count/size on a scope and rely on the
result.&lt;br&gt;
for example see: &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/4882-activerelation-bug-size-returning-incorrect-value-with-limit&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/4882-activere...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-07T16:37:14+00:00</created-at>
      <creator-id type="integer">120363</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5829</number>
      <permalink>activerecordrelationempty-fails-for-grouped-relations-as-orderedhash-is-missing-zero</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord  calculation&quot; activesupport orderedhash rails3</tag>
      <title>ActiveRecord::Relation#empty? fails for grouped relations, as OrderedHash is missing #zero?</title>
      <updated-at type="datetime">2011-02-07T16:37:20+00:00</updated-at>
      <user-id type="integer">58766</user-id>
      <version type="integer">4</version>
      <user-name>mixr</user-name>
      <creator-name>JonnieCache</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5829</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Same issue for me with the following scope:
@@@ ruby
  scope :quantity_for_bs, lambda {|bs_id|{
      :joins =&gt; :shipment,
      :select =&gt;  '*, SUM (quantity) as total_quantity',
      :group =&gt; :item_variant_id,
      :conditions =&gt; {:shipments =&gt; {:dest_site_id =&gt; bs_id}}
  }}
@@@
Then if I do
@@@
  shi  = ShippingItem.transiting.quantity_for_bs(@business_site.id)
  shi.empty? # &lt;- raises undefined method `zero?' for {}:ActiveSupport::OrderedHash
@@@
Interestingly, if I do shi.inspect in between the statements, then .empty? resolves correctly...</body>
      <body-html>&lt;div&gt;&lt;p&gt;Same issue for me with the following scope:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  scope :quantity_for_bs, lambda {|bs_id|{
      :joins =&amp;gt; :shipment,
      :select =&amp;gt;  '*, SUM (quantity) as total_quantity',
      :group =&amp;gt; :item_variant_id,
      :conditions =&amp;gt; {:shipments =&amp;gt; {:dest_site_id =&amp;gt; bs_id}}
  }}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then if I do&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  shi  = ShippingItem.transiting.quantity_for_bs(@business_site.id)
  shi.empty? # &amp;lt;- raises undefined method `zero?' for {}:ActiveSupport::OrderedHash&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Interestingly, if I do shi.inspect in between the statements,
then .empty? resolves correctly...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-06T06:54:31+00:00</created-at>
      <creator-id type="integer">120363</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5829</number>
      <permalink>activerecordrelationempty-fails-for-grouped-relations-as-orderedhash-is-missing-zero</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord  calculation&quot; activesupport orderedhash rails3</tag>
      <title>ActiveRecord::Relation#empty? fails for grouped relations, as OrderedHash is missing #zero?</title>
      <updated-at type="datetime">2011-03-06T06:54:39+00:00</updated-at>
      <user-id type="integer">96967</user-id>
      <version type="integer">5</version>
      <user-name>gamov</user-name>
      <creator-name>JonnieCache</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5829</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Chris Oliver has created a pull request that can help to resolve this issue: https://github.com/rails/rails/pull/218</body>
      <body-html>&lt;div&gt;&lt;p&gt;Chris Oliver has created a pull request that can help to resolve
this issue: &lt;a href=
&quot;https://github.com/rails/rails/pull/218&quot;&gt;https://github.com/rails/rails/pull/218&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-12T17:01:53+00:00</created-at>
      <creator-id type="integer">120363</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">103410</milestone-id>
      <number type="integer">5829</number>
      <permalink>activerecordrelationempty-fails-for-grouped-relations-as-orderedhash-is-missing-zero</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord  calculation&quot; activesupport orderedhash rails3</tag>
      <title>ActiveRecord::Relation#empty? fails for grouped relations, as OrderedHash is missing #zero?</title>
      <updated-at type="datetime">2011-03-12T17:02:06+00:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">6</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>JonnieCache</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5829</url>
      <milestone-title>3.0.6</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [3a22e744162ce4d29f228e76d3e3ff355c93b88f]) Fixed a bug when empty? was called on a grouped Relation that wasn't loaded

[#5829 state:resolved]
https://github.com/rails/rails/commit/3a22e744162ce4d29f228e76d3e3ff355c93b88f</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/3a22e744162ce4d29f228e76d3e3ff355c93b88f&quot;
title=
&quot;Changeset [3a22e744162ce4d29f228e76d3e3ff355c93b88f]&quot;&gt;[3a22e744162ce4d29f228e76d3e3ff355c93b88f]&lt;/a&gt;)
Fixed a bug when empty? was called on a grouped Relation that
wasn't loaded&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/5829&quot; title=
&quot;Ticket #5829&quot;&gt;#5829&lt;/a&gt; state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/3a22e744162ce4d29f228e76d3e3ff355c93b88f&quot;&gt;
https://github.com/rails/rails/commit/3a22e744162ce4d29f228e76d3e3f...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-12T22:47:48+00:00</created-at>
      <creator-id type="integer">120363</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">103410</milestone-id>
      <number type="integer">5829</number>
      <permalink>activerecordrelationempty-fails-for-grouped-relations-as-orderedhash-is-missing-zero</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord  calculation&quot; activesupport orderedhash rails3</tag>
      <title>ActiveRecord::Relation#empty? fails for grouped relations, as OrderedHash is missing #zero?</title>
      <updated-at type="datetime">2011-03-12T22:48:04+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">7</version>
      <user-name>Repository</user-name>
      <creator-name>JonnieCache</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5829</url>
      <milestone-title>3.0.6</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [015192560b7e81639430d7e46c410bf6a3cd9223]) Fixed a bug when empty? was called on a grouped Relation that wasn't loaded

[#5829 state:resolved]

Signed-off-by: Andrew White &lt;andyw@pixeltrix.co.uk&gt;
https://github.com/rails/rails/commit/015192560b7e81639430d7e46c410bf6a3cd9223</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/015192560b7e81639430d7e46c410bf6a3cd9223&quot;
title=
&quot;Changeset [015192560b7e81639430d7e46c410bf6a3cd9223]&quot;&gt;[015192560b7e81639430d7e46c410bf6a3cd9223]&lt;/a&gt;)
Fixed a bug when empty? was called on a grouped Relation that
wasn't loaded&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/5829&quot; title=
&quot;Ticket #5829&quot;&gt;#5829&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Andrew White &lt;a&gt;andyw@pixeltrix.co.uk&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/commit/015192560b7e81639430d7e46c410bf6a3cd9223&quot;&gt;
https://github.com/rails/rails/commit/015192560b7e81639430d7e46c410...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-12T22:48:04+00:00</created-at>
      <creator-id type="integer">120363</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">103410</milestone-id>
      <number type="integer">5829</number>
      <permalink>activerecordrelationempty-fails-for-grouped-relations-as-orderedhash-is-missing-zero</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;activerecord  calculation&quot; activesupport orderedhash rails3</tag>
      <title>ActiveRecord::Relation#empty? fails for grouped relations, as OrderedHash is missing #zero?</title>
      <updated-at type="datetime">2011-03-12T22:48:17+00:00</updated-at>
      <user-id type="integer">135748</user-id>
      <version type="integer">8</version>
      <user-name>Chris Oliver</user-name>
      <creator-name>JonnieCache</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5829</url>
      <milestone-title>3.0.6</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
