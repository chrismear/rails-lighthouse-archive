<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-04-24T22:10:02+01:00</created-at>
  <creator-id type="integer">44530</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1788</number>
  <permalink>telling-activerecordconnectionadaptersschemastatementscreate_table-to-not-create-a-primary-key-isnt-effective-if-you-manually-create-an-id-column</permalink>
  <priority type="integer">1087</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>2.2.2 activerecord rails</tag>
  <title>Telling ActiveRecord::ConnectionAdapters::SchemaStatements#create_table to not create a primary key isn't effective if you manually create an id column</title>
  <updated-at type="datetime">2010-04-24T22:10:39+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">4</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Luke Burton</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1788</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The situation
========

I want an &quot;id&quot; column, but I don't want it to be a primary key, and I want full control over its population.

Steps to reproduce
============

create_table :people, :id =&gt; false do |t|
      t.integer :id
      t.timestamps
end

&gt;&gt; Person.primary_key
=&gt; &quot;id&quot;

Problem #1 - Person should not have any primary key, clearly, from the schema dump:

CREATE TABLE &quot;people&quot; (&quot;id&quot; integer, &quot;created_at&quot; datetime, &quot;updated_at&quot; datetime);

That leads to Problem #2:

&gt;&gt; Person.create(:id =&gt; 123)
=&gt; #&lt;Person id: 1, created_at: &quot;2009-01-22 06:31:43&quot;, updated_at: &quot;2009-01-22 06:31:43&quot;&gt;

Using constructor syntax #create or #new, #attributes_from_column_definition is used and the &quot;id&quot; column is filtered out because it's thought of (incorrectly) as the primary key.

If you use the block creation syntax like:

person = Person.new do |p|
p.id = 123
end
person.save

Then you get id correctly set to 123. So the behavior is inconsistent.

Conclusion
=======

If possible, ActiveRecord should not consider a column as being a primary key unless the DB layer says so. Currently it falls back on the string &quot;id&quot;.

I'm not sure if you can &quot;set_primary_key null&quot; in the ActiveRecord model, but that might be a valid workaround if we can't rely on the DB layer. In the case of a workaround, it should be documented alongside AR::CA::SS#create_table to let people know they should explicitly set the primary key to null (or whatever) if they expect to use a column called &quot;id&quot;.</original-body>
  <latest-body>The situation
========

I want an &quot;id&quot; column, but I don't want it to be a primary key, and I want full control over its population.

Steps to reproduce
============

create_table :people, :id =&gt; false do |t|
      t.integer :id
      t.timestamps
end

&gt;&gt; Person.primary_key
=&gt; &quot;id&quot;

Problem #1 - Person should not have any primary key, clearly, from the schema dump:

CREATE TABLE &quot;people&quot; (&quot;id&quot; integer, &quot;created_at&quot; datetime, &quot;updated_at&quot; datetime);

That leads to Problem #2:

&gt;&gt; Person.create(:id =&gt; 123)
=&gt; #&lt;Person id: 1, created_at: &quot;2009-01-22 06:31:43&quot;, updated_at: &quot;2009-01-22 06:31:43&quot;&gt;

Using constructor syntax #create or #new, #attributes_from_column_definition is used and the &quot;id&quot; column is filtered out because it's thought of (incorrectly) as the primary key.

If you use the block creation syntax like:

person = Person.new do |p|
p.id = 123
end
person.save

Then you get id correctly set to 123. So the behavior is inconsistent.

Conclusion
=======

If possible, ActiveRecord should not consider a column as being a primary key unless the DB layer says so. Currently it falls back on the string &quot;id&quot;.

I'm not sure if you can &quot;set_primary_key null&quot; in the ActiveRecord model, but that might be a valid workaround if we can't rely on the DB layer. In the case of a workaround, it should be documented alongside AR::CA::SS#create_table to let people know they should explicitly set the primary key to null (or whatever) if they expect to use a column called &quot;id&quot;.</latest-body>
  <original-body-html>&lt;div&gt;&lt;h1&gt;The situation&lt;/h1&gt;
&lt;p&gt;I want an &quot;id&quot; column, but I don't want it to be a primary key,
and I want full control over its population.&lt;/p&gt;
&lt;h1&gt;Steps to reproduce&lt;/h1&gt;
&lt;p&gt;create_table :people, :id =&amp;gt; false do |t|&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  t.integer :id
  t.timestamps
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Person.primary_key =&amp;gt; &quot;id&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Problem &lt;a href=&quot;/projects/8994/tickets/1&quot; title=&quot;Ticket #1&quot;&gt;#1&lt;/a&gt; - Person should not have any primary key,
clearly, from the schema dump:&lt;/p&gt;
&lt;p&gt;CREATE TABLE &quot;people&quot; (&quot;id&quot; integer, &quot;created_at&quot; datetime,
&quot;updated_at&quot; datetime);&lt;/p&gt;
&lt;p&gt;That leads to Problem &lt;a href=&quot;/projects/8994/tickets/2&quot; title=&quot;Ticket #2&quot;&gt;#2&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Person.create(:id =&amp;gt; 123) =&amp;gt; #&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using constructor syntax #create or #new,
#attributes_from_column_definition is used and the &quot;id&quot; column is
filtered out because it's thought of (incorrectly) as the primary
key.&lt;/p&gt;
&lt;p&gt;If you use the block creation syntax like:&lt;/p&gt;
&lt;p&gt;person = Person.new do |p| p.id = 123 end person.save&lt;/p&gt;
&lt;p&gt;Then you get id correctly set to 123. So the behavior is
inconsistent.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;If possible, ActiveRecord should not consider a column as being
a primary key unless the DB layer says so. Currently it falls back
on the string &quot;id&quot;.&lt;/p&gt;
&lt;p&gt;I'm not sure if you can &quot;set_primary_key null&quot; in the
ActiveRecord model, but that might be a valid workaround if we
can't rely on the DB layer. In the case of a workaround, it should
be documented alongside AR::CA::SS#create_table to let people know
they should explicitly set the primary key to null (or whatever) if
they expect to use a column called &quot;id&quot;.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The situation
========

I want an &quot;id&quot; column, but I don't want it to be a primary key, and I want full control over its population.

Steps to reproduce
============
@@@
create_table :people, :id =&gt; false do |t|
      t.integer :id
      t.timestamps
end
@@@

@@@
&gt;&gt; Person.primary_key
=&gt; &quot;id&quot;
@@@

Problem #1 - Person should not have any primary key, clearly, from the schema dump:

CREATE TABLE &quot;people&quot; (&quot;id&quot; integer, &quot;created_at&quot; datetime, &quot;updated_at&quot; datetime);

That leads to Problem #2:
@@@
&gt;&gt; Person.create(:id =&gt; 123)
=&gt; #&lt;Person id: 1, created_at: &quot;2009-01-22 06:31:43&quot;, updated_at: &quot;2009-01-22 06:31:43&quot;&gt;
@@@
Using constructor syntax #create or #new, #attributes_from_column_definition is used and the &quot;id&quot; column is filtered out because it's thought of (incorrectly) as the primary key.

If you use the block creation syntax like:
@@@
person = Person.new do |p|
p.id = 123
end
person.save
@@@
Then you get id correctly set to 123. So the behavior is inconsistent.

Conclusion
=======

If possible, ActiveRecord should not consider a column as being a primary key unless the DB layer says so. Currently it falls back on the string &quot;id&quot;.

I'm not sure if you can &quot;set_primary_key null&quot; in the ActiveRecord model, but that might be a valid workaround if we can't rely on the DB layer. In the case of a workaround, it should be documented alongside AR::CA::SS#create_table to let people know they should explicitly set the primary key to null (or whatever) if they expect to use a column called &quot;id&quot;.</body>
      <body-html>&lt;div&gt;&lt;h1&gt;The situation&lt;/h1&gt;
&lt;p&gt;I want an &quot;id&quot; column, but I don't want it to be a primary key,
and I want full control over its population.&lt;/p&gt;
&lt;h1&gt;Steps to reproduce&lt;/h1&gt;


&lt;pre&gt;&lt;code&gt;
create_table :people, :id =&amp;gt; false do |t|
      t.integer :id
      t.timestamps
end
&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt; Person.primary_key
=&amp;gt; &amp;quot;id&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Problem &lt;a href=&quot;/projects/8994/tickets/1&quot; title=&quot;Ticket #1&quot;&gt;#1&lt;/a&gt; - Person should not have any primary key,
clearly, from the schema dump:&lt;/p&gt;
&lt;p&gt;CREATE TABLE &quot;people&quot; (&quot;id&quot; integer, &quot;created_at&quot; datetime,
&quot;updated_at&quot; datetime);&lt;/p&gt;
&lt;p&gt;That leads to Problem &lt;a href=&quot;/projects/8994/tickets/2&quot; title=&quot;Ticket #2&quot;&gt;#2&lt;/a&gt;:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt; Person.create(:id =&amp;gt; 123)
=&amp;gt; #&amp;lt;Person id: 1, created_at: &amp;quot;2009-01-22 06:31:43&amp;quot;, updated_at: &amp;quot;2009-01-22 06:31:43&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using constructor syntax #create or #new,
#attributes_from_column_definition is used and the &quot;id&quot; column is
filtered out because it's thought of (incorrectly) as the primary
key.&lt;/p&gt;
&lt;p&gt;If you use the block creation syntax like:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
person = Person.new do |p|
p.id = 123
end
person.save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you get id correctly set to 123. So the behavior is
inconsistent.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;If possible, ActiveRecord should not consider a column as being
a primary key unless the DB layer says so. Currently it falls back
on the string &quot;id&quot;.&lt;/p&gt;
&lt;p&gt;I'm not sure if you can &quot;set_primary_key null&quot; in the
ActiveRecord model, but that might be a valid workaround if we
can't rely on the DB layer. In the case of a workaround, it should
be documented alongside AR::CA::SS#create_table to let people know
they should explicitly set the primary key to null (or whatever) if
they expect to use a column called &quot;id&quot;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-22T06:42:25+00:00</created-at>
      <creator-id type="integer">44530</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1788</number>
      <permalink>telling-activerecordconnectionadaptersschemastatementscreate_table-to-not-create-a-primary-key-isnt-effective-if-you-manually-create-an-id-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord rails</tag>
      <title>Telling ActiveRecord::ConnectionAdapters::SchemaStatements#create_table to not create a primary key isn't effective if you manually create an id column</title>
      <updated-at type="datetime">2009-01-22T06:43:28+00:00</updated-at>
      <user-id type="integer">44530</user-id>
      <version type="integer">1</version>
      <user-name>Luke Burton</user-name>
      <creator-name>Luke Burton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1788</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails has many conventions and I think that this is one of these. You can't use the id column if it isn't a primary key, but you can setup a distinct primary through the set_primary_key class method. In my opinion if there is and id column and it isn't a primary key it's a problem with the table design.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails has many conventions and I think that this is one of
these. You can't use the id column if it isn't a primary key, but
you can setup a distinct primary through the set_primary_key class
method. In my opinion if there is and id column and it isn't a
primary key it's a problem with the table design.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-18T22:05:41+01:00</created-at>
      <creator-id type="integer">44530</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1788</number>
      <permalink>telling-activerecordconnectionadaptersschemastatementscreate_table-to-not-create-a-primary-key-isnt-effective-if-you-manually-create-an-id-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord rails</tag>
      <title>Telling ActiveRecord::ConnectionAdapters::SchemaStatements#create_table to not create a primary key isn't effective if you manually create an id column</title>
      <updated-at type="datetime">2010-04-18T22:05:45+01:00</updated-at>
      <user-id type="integer">31882</user-id>
      <version type="integer">2</version>
      <user-name>rdavila</user-name>
      <creator-name>Luke Burton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1788</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>may be the problem is in less number of specialists with &lt;a href=&quot;http://buy-custom-essay.org/custom-essay.php&quot;&gt;custom essay writing&lt;/a&gt; skills. The increasing may help a lot</body>
      <body-html>&lt;div&gt;&lt;p&gt;may be the problem is in less number of specialists with
&lt;a href=&quot;http://buy-custom-essay.org/custom-essay.php&quot;&gt;custom essay
writing&lt;/a&gt; skills. The increasing may help a lot&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-19T03:03:56+01:00</created-at>
      <creator-id type="integer">44530</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1788</number>
      <permalink>telling-activerecordconnectionadaptersschemastatementscreate_table-to-not-create-a-primary-key-isnt-effective-if-you-manually-create-an-id-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord rails</tag>
      <title>Telling ActiveRecord::ConnectionAdapters::SchemaStatements#create_table to not create a primary key isn't effective if you manually create an id column</title>
      <updated-at type="datetime">2010-04-24T22:10:02+01:00</updated-at>
      <user-id type="integer">95507</user-id>
      <version type="integer">3</version>
      <user-name>newcomer</user-name>
      <creator-name>Luke Burton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1788</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-24T22:10:38+01:00</created-at>
      <creator-id type="integer">44530</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1788</number>
      <permalink>telling-activerecordconnectionadaptersschemastatementscreate_table-to-not-create-a-primary-key-isnt-effective-if-you-manually-create-an-id-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.2.2 activerecord rails</tag>
      <title>Telling ActiveRecord::ConnectionAdapters::SchemaStatements#create_table to not create a primary key isn't effective if you manually create an id column</title>
      <updated-at type="datetime">2010-04-24T22:10:39+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Luke Burton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1788</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
