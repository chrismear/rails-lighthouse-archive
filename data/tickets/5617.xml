<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">11330</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-22T06:48:01+01:00</created-at>
  <creator-id type="integer">44528</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5617</number>
  <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>&quot;sql sti polymorphism join-model&quot;</tag>
  <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
  <updated-at type="datetime">2011-04-22T06:48:01+01:00</updated-at>
  <user-id type="integer">142823</user-id>
  <version type="integer">32</version>
  <user-name>bingbing</user-name>
  <creator-name>viatropos</creator-name>
  <assigned-user-name>Jon Leighton</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
  <priority-name>Low</priority-name>
  <original-body>When you create something like below, the join model does not pay attention to the STI in the models it `belongs_to`.  Check this out:

@@@ ruby
# join model
class Relationship &lt; ActiveRecord::Base
  belongs_to :parent, :polymorphic =&gt; true
  belongs_to :child, :polymorphic =&gt; true
end

# child model
class Image &lt; ActiveRecord::Base
  has_many :relationships, :as =&gt; :child
  has_many :parents, :through =&gt; :relationships, :source =&gt; :parent, :source_type =&gt; &quot;Post&quot;
end

# parent model
class Post &lt; ActiveRecord::Base
  has_many :relationships, :as =&gt; :parent
  has_many :children, :through =&gt; :relationships, :source =&gt; :child, :source_type =&gt; &quot;Image&quot;
end

# subclass
class BlogPost &lt; Post

end

blog_post = BlogPost.create!
image     = Image.create!

blog_post.children &lt;&lt; image

puts Relationship.all.inspect
  #=&gt; [#&lt;Relationship id: 1, parent_id: 1, parent_type: &quot;Post&quot;, child_id: 1, child_type: &quot;Image&quot;&gt;]
@@@

The result we want is this:

@@@ ruby
puts Relationship.all.inspect
  #=&gt; [#&lt;Relationship id: 1, parent_id: 1, parent_type: &quot;BlogPost&quot;, child_id: 1, child_type: &quot;Image&quot;&gt;]
@@@

All it takes is a simple patch to these two classes:

@@@ ruby
ActiveRecord::Associations::HasManyAssocation#construct_sql
ActiveRecord::Associations::HasManyThroughAssocation#construct_conditions
@@@

1. Find/replace `@owner.class.base_class` with `@owner.class`.
2. Make it so the constructed SQL in those two methods are changed into the following...

from this:

@@@ ruby
(&quot;relationships&quot;.parent_type = 'Post')
@@@

to this:

@@@ ruby
(&quot;relationships&quot;.parent_type = 'BlogPost' OR &quot;relationships&quot;.parent_type = 'Post')
@@@

## All ActiveRecord Tests Pass with the following change:

@@@ ruby
def construct_conditions
  table_name = @reflection.through_reflection.quoted_table_name
  conditions = construct_quoted_owner_attributes(@reflection.through_reflection).map do |attr, value|
    if attr =~ /_type$/
      condition = []
      ancestors = @owner.class.ancestors.reverse
      while ancestor = ancestors.pop
        break if ancestor == @owner.class.base_class.superclass
        condition &lt;&lt; &quot;#{table_name}.#{attr} = '#{ancestor.name}'&quot;
      end
      condition.join(&quot; OR &quot;)
    else
      &quot;#{table_name}.#{attr} = #{value}&quot;
    end
  end
  conditions &lt;&lt; sql_conditions if sql_conditions

  &quot;(&quot; + conditions.join(') AND (') + &quot;)&quot;
end
@@@

and

@@@ ruby
def construct_sql
  # ...
  when @reflection.options[:as]
    @finder_sql = 
      &quot;(#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_id = #{owner_quoted_id}) AND &quot;
    condition = []
    ancestors = @owner.class.ancestors.reverse
    while ancestor = ancestors.pop
      break if ancestor == @owner.class.base_class.superclass
      condition &lt;&lt; &quot;#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_type = #{@owner.class.quote_value(ancestor.name)}&quot;
    end
    @finder_sql &lt;&lt; &quot;(#{condition.join(&quot; OR &quot;)})&quot;
    @finder_sql &lt;&lt; &quot; AND (#{conditions})&quot; if conditions
  else
    @finder_sql = &quot;#{@reflection.quoted_table_name}.#{@reflection.primary_key_name} = #{owner_quoted_id}&quot;
    @finder_sql &lt;&lt; &quot; AND (#{conditions})&quot; if conditions
  end
  # ...
end
@@@

Does this seem like it could be applied as a patch (of course, refactoring that while loop)?</original-body>
  <latest-body>When you create something like below, the join model does not pay attention to the STI in the models it `belongs_to`.  Check this out:

@@@ ruby
# join model
class Relationship &lt; ActiveRecord::Base
  belongs_to :parent, :polymorphic =&gt; true
  belongs_to :child, :polymorphic =&gt; true
end

# child model
class Image &lt; ActiveRecord::Base
  has_many :relationships, :as =&gt; :child
  has_many :parents, :through =&gt; :relationships, :source =&gt; :parent, :source_type =&gt; &quot;Post&quot;
end

# parent model
class Post &lt; ActiveRecord::Base
  has_many :relationships, :as =&gt; :parent
  has_many :children, :through =&gt; :relationships, :source =&gt; :child, :source_type =&gt; &quot;Image&quot;
end

# subclass
class BlogPost &lt; Post

end

blog_post = BlogPost.create!
image     = Image.create!

blog_post.children &lt;&lt; image

puts Relationship.all.inspect
  #=&gt; [#&lt;Relationship id: 1, parent_id: 1, parent_type: &quot;Post&quot;, child_id: 1, child_type: &quot;Image&quot;&gt;]
@@@

The result we want is this:

@@@ ruby
puts Relationship.all.inspect
  #=&gt; [#&lt;Relationship id: 1, parent_id: 1, parent_type: &quot;BlogPost&quot;, child_id: 1, child_type: &quot;Image&quot;&gt;]
@@@

All it takes is a simple patch to these two classes:

@@@ ruby
ActiveRecord::Associations::HasManyAssocation#construct_sql
ActiveRecord::Associations::HasManyThroughAssocation#construct_conditions
@@@

1. Find/replace `@owner.class.base_class` with `@owner.class`.
2. Make it so the constructed SQL in those two methods are changed into the following...

from this:

@@@ ruby
(&quot;relationships&quot;.parent_type = 'Post')
@@@

to this:

@@@ ruby
(&quot;relationships&quot;.parent_type = 'BlogPost' OR &quot;relationships&quot;.parent_type = 'Post')
@@@

## All ActiveRecord Tests Pass with the following change:

@@@ ruby
def construct_conditions
  table_name = @reflection.through_reflection.quoted_table_name
  conditions = construct_quoted_owner_attributes(@reflection.through_reflection).map do |attr, value|
    if attr =~ /_type$/
      condition = []
      ancestors = @owner.class.ancestors.reverse
      while ancestor = ancestors.pop
        break if ancestor == @owner.class.base_class.superclass
        condition &lt;&lt; &quot;#{table_name}.#{attr} = '#{ancestor.name}'&quot;
      end
      condition.join(&quot; OR &quot;)
    else
      &quot;#{table_name}.#{attr} = #{value}&quot;
    end
  end
  conditions &lt;&lt; sql_conditions if sql_conditions

  &quot;(&quot; + conditions.join(') AND (') + &quot;)&quot;
end
@@@

and

@@@ ruby
def construct_sql
  # ...
  when @reflection.options[:as]
    @finder_sql = 
      &quot;(#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_id = #{owner_quoted_id}) AND &quot;
    condition = []
    ancestors = @owner.class.ancestors.reverse
    while ancestor = ancestors.pop
      break if ancestor == @owner.class.base_class.superclass
      condition &lt;&lt; &quot;#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_type = #{@owner.class.quote_value(ancestor.name)}&quot;
    end
    @finder_sql &lt;&lt; &quot;(#{condition.join(&quot; OR &quot;)})&quot;
    @finder_sql &lt;&lt; &quot; AND (#{conditions})&quot; if conditions
  else
    @finder_sql = &quot;#{@reflection.quoted_table_name}.#{@reflection.primary_key_name} = #{owner_quoted_id}&quot;
    @finder_sql &lt;&lt; &quot; AND (#{conditions})&quot; if conditions
  end
  # ...
end
@@@

Does this seem like it could be applied as a patch (of course, refactoring that while loop)?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When you create something like below, the join model does not
pay attention to the STI in the models it &lt;code&gt;belongs_to&lt;/code&gt;.
Check this out:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# join model
class Relationship &amp;lt; ActiveRecord::Base
  belongs_to :parent, :polymorphic =&amp;gt; true
  belongs_to :child, :polymorphic =&amp;gt; true
end

# child model
class Image &amp;lt; ActiveRecord::Base
  has_many :relationships, :as =&amp;gt; :child
  has_many :parents, :through =&amp;gt; :relationships, :source =&amp;gt; :parent, :source_type =&amp;gt; &quot;Post&quot;
end

# parent model
class Post &amp;lt; ActiveRecord::Base
  has_many :relationships, :as =&amp;gt; :parent
  has_many :children, :through =&amp;gt; :relationships, :source =&amp;gt; :child, :source_type =&amp;gt; &quot;Image&quot;
end

# subclass
class BlogPost &amp;lt; Post

end

blog_post = BlogPost.create!
image     = Image.create!

blog_post.children &amp;lt;&amp;lt; image

puts Relationship.all.inspect
  #=&amp;gt; [#&amp;lt;Relationship id: 1, parent_id: 1, parent_type: &quot;Post&quot;, child_id: 1, child_type: &quot;Image&quot;&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The result we want is this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;puts Relationship.all.inspect
  #=&amp;gt; [#&amp;lt;Relationship id: 1, parent_id: 1, parent_type: &quot;BlogPost&quot;, child_id: 1, child_type: &quot;Image&quot;&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;All it takes is a simple patch to these two classes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;ActiveRecord::Associations::HasManyAssocation#construct_sql
ActiveRecord::Associations::HasManyThroughAssocation#construct_conditions&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Find/replace &lt;code&gt;@owner.class.base_class&lt;/code&gt; with
&lt;code&gt;@owner.class&lt;/code&gt;.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Make it so the constructed SQL in those two methods are changed
into the following...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;from this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;(&quot;relationships&quot;.parent_type = 'Post')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;(&quot;relationships&quot;.parent_type = 'BlogPost' OR &quot;relationships&quot;.parent_type = 'Post')&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;All ActiveRecord Tests Pass with the following change:&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def construct_conditions
  table_name = @reflection.through_reflection.quoted_table_name
  conditions = construct_quoted_owner_attributes(@reflection.through_reflection).map do |attr, value|
    if attr =~ /_type$/
      condition = []
      ancestors = @owner.class.ancestors.reverse
      while ancestor = ancestors.pop
        break if ancestor == @owner.class.base_class.superclass
        condition &amp;lt;&amp;lt; &quot;#{table_name}.#{attr} = '#{ancestor.name}'&quot;
      end
      condition.join(&quot; OR &quot;)
    else
      &quot;#{table_name}.#{attr} = #{value}&quot;
    end
  end
  conditions &amp;lt;&amp;lt; sql_conditions if sql_conditions

  &quot;(&quot; + conditions.join(') AND (') + &quot;)&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def construct_sql
  # ...
  when @reflection.options[:as]
    @finder_sql = 
      &quot;(#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_id = #{owner_quoted_id}) AND &quot;
    condition = []
    ancestors = @owner.class.ancestors.reverse
    while ancestor = ancestors.pop
      break if ancestor == @owner.class.base_class.superclass
      condition &amp;lt;&amp;lt; &quot;#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_type = #{@owner.class.quote_value(ancestor.name)}&quot;
    end
    @finder_sql &amp;lt;&amp;lt; &quot;(#{condition.join(&quot; OR &quot;)})&quot;
    @finder_sql &amp;lt;&amp;lt; &quot; AND (#{conditions})&quot; if conditions
  else
    @finder_sql = &quot;#{@reflection.quoted_table_name}.#{@reflection.primary_key_name} = #{owner_quoted_id}&quot;
    @finder_sql &amp;lt;&amp;lt; &quot; AND (#{conditions})&quot; if conditions
  end
  # ...
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Does this seem like it could be applied as a patch (of course,
refactoring that while loop)?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When you create something like below, the join model does not pay attention to the STI in the models it `belongs_to`.  Check this out:

@@@ ruby
# join model
class Relationship &lt; ActiveRecord::Base
  belongs_to :parent, :polymorphic =&gt; true
  belongs_to :child, :polymorphic =&gt; true
end

# child model
class Image &lt; ActiveRecord::Base
  has_many :relationships, :as =&gt; :child
  has_many :parents, :through =&gt; :relationships, :source =&gt; :parent, :source_type =&gt; &quot;Post&quot;
end

# parent model
class Post &lt; ActiveRecord::Base
  has_many :relationships, :as =&gt; :parent
  has_many :children, :through =&gt; :relationships, :source =&gt; :child, :source_type =&gt; &quot;Image&quot;
end

# subclass
class BlogPost &lt; Post

end

blog_post = BlogPost.create!
image     = Image.create!

blog_post.children &lt;&lt; image

puts Relationship.all.inspect
  #=&gt; [#&lt;Relationship id: 1, parent_id: 1, parent_type: &quot;Post&quot;, child_id: 1, child_type: &quot;Image&quot;&gt;]
@@@

The result we want is this:

@@@ ruby
puts Relationship.all.inspect
  #=&gt; [#&lt;Relationship id: 1, parent_id: 1, parent_type: &quot;BlogPost&quot;, child_id: 1, child_type: &quot;Image&quot;&gt;]
@@@

All it takes is a simple patch to these two classes:

@@@ ruby
ActiveRecord::Associations::HasManyAssocation#construct_sql
ActiveRecord::Associations::HasManyThroughAssocation#construct_conditions
@@@

1. Find/replace `@owner.class.base_class` with `@owner.class`.
2. Make it so the constructed SQL in those two methods are changed into the following...

from this:

@@@ ruby
(&quot;relationships&quot;.parent_type = 'Post')
@@@

to this:

@@@ ruby
(&quot;relationships&quot;.parent_type = 'BlogPost' OR &quot;relationships&quot;.parent_type = 'Post')
@@@

## All ActiveRecord Tests Pass with the following change:

@@@ ruby
def construct_conditions
  table_name = @reflection.through_reflection.quoted_table_name
  conditions = construct_quoted_owner_attributes(@reflection.through_reflection).map do |attr, value|
    if attr =~ /_type$/
      condition = []
      ancestors = @owner.class.ancestors.reverse
      while ancestor = ancestors.pop
        break if ancestor == @owner.class.base_class.superclass
        condition &lt;&lt; &quot;#{table_name}.#{attr} = '#{ancestor.name}'&quot;
      end
      condition.join(&quot; OR &quot;)
    else
      &quot;#{table_name}.#{attr} = #{value}&quot;
    end
  end
  conditions &lt;&lt; sql_conditions if sql_conditions

  &quot;(&quot; + conditions.join(') AND (') + &quot;)&quot;
end
@@@

and

@@@ ruby
def construct_sql
  # ...
  when @reflection.options[:as]
    @finder_sql = 
      &quot;(#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_id = #{owner_quoted_id}) AND &quot;
    condition = []
    ancestors = @owner.class.ancestors.reverse
    while ancestor = ancestors.pop
      break if ancestor == @owner.class.base_class.superclass
      condition &lt;&lt; &quot;#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_type = #{@owner.class.quote_value(ancestor.name)}&quot;
    end
    @finder_sql &lt;&lt; &quot;(#{condition.join(&quot; OR &quot;)})&quot;
    @finder_sql &lt;&lt; &quot; AND (#{conditions})&quot; if conditions
  else
    @finder_sql = &quot;#{@reflection.quoted_table_name}.#{@reflection.primary_key_name} = #{owner_quoted_id}&quot;
    @finder_sql &lt;&lt; &quot; AND (#{conditions})&quot; if conditions
  end
  # ...
end
@@@

Does this seem like it could be applied as a patch (of course, refactoring that while loop)?</body>
      <body-html>&lt;div&gt;&lt;p&gt;When you create something like below, the join model does not
pay attention to the STI in the models it &lt;code&gt;belongs_to&lt;/code&gt;.
Check this out:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# join model
class Relationship &amp;lt; ActiveRecord::Base
  belongs_to :parent, :polymorphic =&amp;gt; true
  belongs_to :child, :polymorphic =&amp;gt; true
end

# child model
class Image &amp;lt; ActiveRecord::Base
  has_many :relationships, :as =&amp;gt; :child
  has_many :parents, :through =&amp;gt; :relationships, :source =&amp;gt; :parent, :source_type =&amp;gt; &quot;Post&quot;
end

# parent model
class Post &amp;lt; ActiveRecord::Base
  has_many :relationships, :as =&amp;gt; :parent
  has_many :children, :through =&amp;gt; :relationships, :source =&amp;gt; :child, :source_type =&amp;gt; &quot;Image&quot;
end

# subclass
class BlogPost &amp;lt; Post

end

blog_post = BlogPost.create!
image     = Image.create!

blog_post.children &amp;lt;&amp;lt; image

puts Relationship.all.inspect
  #=&amp;gt; [#&amp;lt;Relationship id: 1, parent_id: 1, parent_type: &quot;Post&quot;, child_id: 1, child_type: &quot;Image&quot;&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The result we want is this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;puts Relationship.all.inspect
  #=&amp;gt; [#&amp;lt;Relationship id: 1, parent_id: 1, parent_type: &quot;BlogPost&quot;, child_id: 1, child_type: &quot;Image&quot;&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;All it takes is a simple patch to these two classes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;ActiveRecord::Associations::HasManyAssocation#construct_sql
ActiveRecord::Associations::HasManyThroughAssocation#construct_conditions&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Find/replace &lt;code&gt;@owner.class.base_class&lt;/code&gt; with
&lt;code&gt;@owner.class&lt;/code&gt;.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Make it so the constructed SQL in those two methods are changed
into the following...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;from this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;(&quot;relationships&quot;.parent_type = 'Post')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;(&quot;relationships&quot;.parent_type = 'BlogPost' OR &quot;relationships&quot;.parent_type = 'Post')&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;All ActiveRecord Tests Pass with the following change:&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def construct_conditions
  table_name = @reflection.through_reflection.quoted_table_name
  conditions = construct_quoted_owner_attributes(@reflection.through_reflection).map do |attr, value|
    if attr =~ /_type$/
      condition = []
      ancestors = @owner.class.ancestors.reverse
      while ancestor = ancestors.pop
        break if ancestor == @owner.class.base_class.superclass
        condition &amp;lt;&amp;lt; &quot;#{table_name}.#{attr} = '#{ancestor.name}'&quot;
      end
      condition.join(&quot; OR &quot;)
    else
      &quot;#{table_name}.#{attr} = #{value}&quot;
    end
  end
  conditions &amp;lt;&amp;lt; sql_conditions if sql_conditions

  &quot;(&quot; + conditions.join(') AND (') + &quot;)&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def construct_sql
  # ...
  when @reflection.options[:as]
    @finder_sql = 
      &quot;(#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_id = #{owner_quoted_id}) AND &quot;
    condition = []
    ancestors = @owner.class.ancestors.reverse
    while ancestor = ancestors.pop
      break if ancestor == @owner.class.base_class.superclass
      condition &amp;lt;&amp;lt; &quot;#{@reflection.quoted_table_name}.#{@reflection.options[:as]}_type = #{@owner.class.quote_value(ancestor.name)}&quot;
    end
    @finder_sql &amp;lt;&amp;lt; &quot;(#{condition.join(&quot; OR &quot;)})&quot;
    @finder_sql &amp;lt;&amp;lt; &quot; AND (#{conditions})&quot; if conditions
  else
    @finder_sql = &quot;#{@reflection.quoted_table_name}.#{@reflection.primary_key_name} = #{owner_quoted_id}&quot;
    @finder_sql &amp;lt;&amp;lt; &quot; AND (#{conditions})&quot; if conditions
  end
  # ...
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Does this seem like it could be applied as a patch (of course,
refactoring that while loop)?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-11T23:18:45+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-09-11T23:23:40+01:00</updated-at>
      <user-id type="integer">44528</user-id>
      <version type="integer">1</version>
      <user-name>viatropos</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-11T23:24:30+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-09-11T23:24:32+01:00</updated-at>
      <user-id type="integer">44528</user-id>
      <version type="integer">2</version>
      <user-name>viatropos</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Did you load all the subclasses. In development mode subclasses are not loaded until called and it affects STI. T

Or try replicating the issue in production mode.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Did you load all the subclasses. In development mode subclasses
are not loaded until called and it affects STI. T&lt;/p&gt;
&lt;p&gt;Or try replicating the issue in production mode.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-12T00:47:46+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-09-12T00:47:48+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">3</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Did you take the following into account?

In STI it is possible to change the class of the object.
This is the reason why the the type-column of the polymorhpic belongs_to stores the base_class, so if a object changes its sti_class, the associated objects doesnt have to be updated.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Did you take the following into account?&lt;/p&gt;
&lt;p&gt;In STI it is possible to change the class of the object.&lt;br&gt;
This is the reason why the the type-column of the polymorhpic
belongs_to stores the base_class, so if a object changes its
sti_class, the associated objects doesnt have to be updated.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-12T01:26:25+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-09-12T01:26:29+01:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">4</version>
      <user-name>Kane</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Neeraj

I ran this in 2 ways: as a single file, and as a gem, so this isn't a Rails specific problem.

@Kane

So you're saying that polymorphic belongs_to stores the base_class instead of the subclass, in case the user sometime later decides to change the subclass and would otherwise have to worry about updating the associated model because of the class name?  I think that's a convenience that's preventing this case from being possible.  Without being able to store the specific subclass in the database, it's impossible to do what I have outlined above.  I have run into this problem dozens of times, and several other people have as well (polymorphic sti problem in rails on google).

Right now, if I were to do something like this, &lt;code&gt;Relationship.first.parent&lt;/code&gt;, it would return a &lt;code&gt;#&lt;Post title=...&gt;&lt;/code&gt;, but it's supposed to be BlogPost.  There's a lot of other problems that arise from this.

What was most surprising is by removing `base_class` from the HasManyThroughAssociation and HasManyAssociation classes, and adding that &lt;code&gt;OR&lt;/code&gt; to the SQL, none of the activerecord tests broke.  So, for the following reasons, I think this should be integrated:

1. Polymorphic Join Model in ActiveRecord currently does not support STI
2. Which means your object will be improperly typed when retrieved from the database
3. And the fix is an easy fix

Are there any reasons this should not be changed?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Neeraj&lt;/p&gt;
&lt;p&gt;I ran this in 2 ways: as a single file, and as a gem, so this
isn't a Rails specific problem.&lt;/p&gt;
&lt;p&gt;@Kane&lt;/p&gt;
&lt;p&gt;So you're saying that polymorphic belongs_to stores the
base_class instead of the subclass, in case the user sometime later
decides to change the subclass and would otherwise have to worry
about updating the associated model because of the class name? I
think that's a convenience that's preventing this case from being
possible. Without being able to store the specific subclass in the
database, it's impossible to do what I have outlined above. I have
run into this problem dozens of times, and several other people
have as well (polymorphic sti problem in rails on google).&lt;/p&gt;
&lt;p&gt;Right now, if I were to do something like this,
&lt;code&gt;Relationship.first.parent&lt;/code&gt;, it would return a
&lt;code&gt;#&lt;/code&gt;, but it's supposed to be BlogPost. There's a lot of
other problems that arise from this.&lt;/p&gt;
&lt;p&gt;What was most surprising is by removing &lt;code&gt;base_class&lt;/code&gt;
from the HasManyThroughAssociation and HasManyAssociation classes,
and adding that &lt;code&gt;OR&lt;/code&gt; to the SQL, none of the
activerecord tests broke. So, for the following reasons, I think
this should be integrated:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Polymorphic Join Model in ActiveRecord currently does not
support STI&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Which means your object will be improperly typed when retrieved
from the database&lt;br&gt;&lt;/li&gt;
&lt;li&gt;And the fix is an easy fix&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Are there any reasons this should not be changed?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-12T15:17:27+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 12714
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-09-12T15:17:29+01:00</updated-at>
      <user-id type="integer">44528</user-id>
      <version type="integer">5</version>
      <user-name>viatropos</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This works: http://gist.github.com/576172</body>
      <body-html>&lt;div&gt;&lt;p&gt;This works: &lt;a href=
&quot;http://gist.github.com/576172&quot;&gt;http://gist.github.com/576172&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-12T16:06:24+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-09-12T16:06:28+01:00</updated-at>
      <user-id type="integer">44528</user-id>
      <version type="integer">6</version>
      <user-name>viatropos</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>http://github.com/viatropos/acts-as-joinable/blob/master/lib/acts_as_joinable/active_record_patch.rb</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;http://github.com/viatropos/acts-as-joinable/blob/master/lib/acts_as_joinable/active_record_patch.rb&quot;&gt;
http://github.com/viatropos/acts-as-joinable/blob/master/lib/acts_a...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-12T20:08:42+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-09-12T20:08:45+01:00</updated-at>
      <user-id type="integer">44528</user-id>
      <version type="integer">7</version>
      <user-name>viatropos</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@viatropos Your arguments make sense to me.  Would you mind turning this in to a patch so I can mess around with it?  Also, do you think it would be possible to formulate tests for this situation?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@viatropos Your arguments make sense to me. Would you mind
turning this in to a patch so I can mess around with it? Also, do
you think it would be possible to formulate tests for this
situation?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-28T18:17:10+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-09-28T18:17:12+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">8</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>FWIW, I work on a Rails application where we needed to change the STI behaviour to store the sti_class rather than the base_class.  A major impact that I don't think is considered so far is that we had to change every place that SQL conditions are generated for the _type column (e.g. associations.rb) instead of
_type = base_class.name
we changed it to
_type IN (self_and_sub_classes)
where self_and_subclasses is a helper that returns self and its descendent classes.

This approach does have a major advantage though: we are aiming soon to being able to specify the subset of classes that a polymorphic association can refer to.  This will in turn allow us to
1) include across a polymorphic association as long as all of the possible referenced classes resolve to the same table
2) include across a polymorphic association when all of the possible referenced classes do not resolve to the same table, because at least we'll now know what tables it needs to be joined to.

Both of these can lead to a major performance increase by avoiding n+1 queries.</body>
      <body-html>&lt;div&gt;&lt;p&gt;FWIW, I work on a Rails application where we needed to change
the STI behaviour to store the sti_class rather than the
base_class. A major impact that I don't think is considered so far
is that we had to change every place that SQL conditions are
generated for the &lt;em&gt;type column (e.g. associations.rb) instead
of&lt;br&gt;&lt;/em&gt;type = base_class.name&lt;br&gt;
we changed it to&lt;br&gt;
_type IN (self_and_sub_classes)&lt;br&gt;
where self_and_subclasses is a helper that returns self and its
descendent classes.&lt;/p&gt;
&lt;p&gt;This approach does have a major advantage though: we are aiming
soon to being able to specify the subset of classes that a
polymorphic association can refer to. This will in turn allow us
to&lt;br&gt;
1) include across a polymorphic association as long as all of the
possible referenced classes resolve to the same table&lt;br&gt;
2) include across a polymorphic association when all of the
possible referenced classes do not resolve to the same table,
because at least we'll now know what tables it needs to be joined
to.&lt;/p&gt;
&lt;p&gt;Both of these can lead to a major performance increase by
avoiding n+1 queries.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-29T13:07:11+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-09-29T13:07:14+01:00</updated-at>
      <user-id type="integer">51960</user-id>
      <version type="integer">9</version>
      <user-name>Jonathan Monahan</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-11T18:42:10+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>needs-more-info</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-10-11T18:42:13+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">10</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have been playing with this today. Here's a half-written patch: https://github.com/jonleighton/rails/tree/5617_polymorphism_with_sti

The problem with this is it changes the way that the `polymorphic_type` field is used. This will break compatibility with existing databases.

Also, I have tried out something similar to the example where `Relationship.first.parent` returns a `Post` rather than a `BlogPost`. In my experimentation, the correct class was used. It is possible to get the correct class from the 'type' column of the 'posts' table.

If anyone can provide other concrete examples of why using the base class in the `polymorphic_type` field causes problems (other than being wrong from a theoretical perspective) then please say so and we can consider it, but for now the cost of breaking compatibility is too high I think.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have been playing with this today. Here's a half-written
patch: &lt;a href=
&quot;https://github.com/jonleighton/rails/tree/5617_polymorphism_with_sti&quot;&gt;
https://github.com/jonleighton/rails/tree/5617_polymorphism_with_sti&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The problem with this is it changes the way that the
&lt;code&gt;polymorphic_type&lt;/code&gt; field is used. This will break
compatibility with existing databases.&lt;/p&gt;
&lt;p&gt;Also, I have tried out something similar to the example where
&lt;code&gt;Relationship.first.parent&lt;/code&gt; returns a &lt;code&gt;Post&lt;/code&gt;
rather than a &lt;code&gt;BlogPost&lt;/code&gt;. In my experimentation, the
correct class was used. It is possible to get the correct class
from the 'type' column of the 'posts' table.&lt;/p&gt;
&lt;p&gt;If anyone can provide other concrete examples of why using the
base class in the &lt;code&gt;polymorphic_type&lt;/code&gt; field causes
problems (other than being wrong from a theoretical perspective)
then please say so and we can consider it, but for now the cost of
breaking compatibility is too high I think.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-21T18:21:15+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- 
:state: needs-more-info
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-12-21T18:21:36+00:00</updated-at>
      <user-id type="integer">11330</user-id>
      <version type="integer">11</version>
      <user-name>Jon Leighton</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, this is a breaking change for existing schemas that use polymorphism and STI together, but then I expect so was the change that provided the `store_full_sti_class` configuration.  This functionality could be wrapped similarly in a configuration option.

I have tripped over this problem in so many guises that I gave up and changed our entire schema over to always store the precise STI class in all cases, both for the inheritance column and for polymorphic associations.

As for the argument that storing the base class allows the record to change class - I think that is a very esoteric application.  Assuming you treat database records as objects (you are using an ORM!) then in an OO world an object doesn't just change class!  I suspect that ActiveRecord was written that way originally because it was easiest, however in the long run it has caused me more pain.

I guess that not many people worry about it because it doesn't cause much pain until you start building complex schemas with many polymorphic joins and plenty of STI.

I'm afraid all of my concrete examples are just too complicated, or so simplistic that they would not help.

If anyone is interested, I will gladly spend some time to show the changes I made.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, this is a breaking change for existing schemas that use
polymorphism and STI together, but then I expect so was the change
that provided the &lt;code&gt;store_full_sti_class&lt;/code&gt; configuration.
This functionality could be wrapped similarly in a configuration
option.&lt;/p&gt;
&lt;p&gt;I have tripped over this problem in so many guises that I gave
up and changed our entire schema over to always store the precise
STI class in all cases, both for the inheritance column and for
polymorphic associations.&lt;/p&gt;
&lt;p&gt;As for the argument that storing the base class allows the
record to change class - I think that is a very esoteric
application. Assuming you treat database records as objects (you
are using an ORM!) then in an OO world an object doesn't just
change class! I suspect that ActiveRecord was written that way
originally because it was easiest, however in the long run it has
caused me more pain.&lt;/p&gt;
&lt;p&gt;I guess that not many people worry about it because it doesn't
cause much pain until you start building complex schemas with many
polymorphic joins and plenty of STI.&lt;/p&gt;
&lt;p&gt;I'm afraid all of my concrete examples are just too complicated,
or so simplistic that they would not help.&lt;/p&gt;
&lt;p&gt;If anyone is interested, I will gladly spend some time to show
the changes I made.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-28T00:39:45+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-12-28T00:40:05+00:00</updated-at>
      <user-id type="integer">51960</user-id>
      <version type="integer">12</version>
      <user-name>Jonathan Monahan</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Actually, I can think of an example, but it's a pretty obvious one.  Given the schema proposed above by @viatropos, you cannot query the database to find all `Relationships` that belong to a particular class.  You can query for all `Relationships` where the `child` is an `Image`, but you cannot find `Relationships` whose `parent` is a `BlogPost`.  To do that you'd have to load each and every `Post` that is referred to as a `parent` and then check that it becomes a `BlogPost` in memory.

That's not very orthogonal, and terribly inefficient, especially if all you wanted to do was count the `Relationships`!

Sure you could do it more efficiently in SQL, but then why use an ORM?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Actually, I can think of an example, but it's a pretty obvious
one. Given the schema proposed above by @viatropos, you cannot
query the database to find all &lt;code&gt;Relationships&lt;/code&gt; that
belong to a particular class. You can query for all
&lt;code&gt;Relationships&lt;/code&gt; where the &lt;code&gt;child&lt;/code&gt; is an
&lt;code&gt;Image&lt;/code&gt;, but you cannot find &lt;code&gt;Relationships&lt;/code&gt;
whose &lt;code&gt;parent&lt;/code&gt; is a &lt;code&gt;BlogPost&lt;/code&gt;. To do that
you'd have to load each and every &lt;code&gt;Post&lt;/code&gt; that is
referred to as a &lt;code&gt;parent&lt;/code&gt; and then check that it becomes
a &lt;code&gt;BlogPost&lt;/code&gt; in memory.&lt;/p&gt;
&lt;p&gt;That's not very orthogonal, and terribly inefficient, especially
if all you wanted to do was count the
&lt;code&gt;Relationships&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Sure you could do it more efficiently in SQL, but then why use
an ORM?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-28T00:52:16+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Patch: STI + Join Model + Polymorphic Associations works now</title>
      <updated-at type="datetime">2010-12-28T00:52:35+00:00</updated-at>
      <user-id type="integer">51960</user-id>
      <version type="integer">13</version>
      <user-name>Jonathan Monahan</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

That's a good point, maybe I was too quick to wontfix this. It would be theoretically possible to JOIN the relevant table conditional on its `type` column, but you're right that this is a nasty solution and it's made less straightforward by the polymorphism (how to decide what to JOIN?)

I'm up for fixing this and I have some thoughts about how to make it a smooth transition, so I'm going to open it back up for now. When I have an opportunity (probably not for a while as I'm working on other stuff atm) I'll send some thoughts around the rails-core list.

Jon</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;That's a good point, maybe I was too quick to wontfix this. It
would be theoretically possible to JOIN the relevant table
conditional on its &lt;code&gt;type&lt;/code&gt; column, but you're right that
this is a nasty solution and it's made less straightforward by the
polymorphism (how to decide what to JOIN?)&lt;/p&gt;
&lt;p&gt;I'm up for fixing this and I have some thoughts about how to
make it a smooth transition, so I'm going to open it back up for
now. When I have an opportunity (probably not for a while as I'm
working on other stuff atm) I'll send some thoughts around the
rails-core list.&lt;/p&gt;
&lt;p&gt;Jon&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-01T17:33:05+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- 
:state: wontfix
:title: &quot;Patch: STI + Join Model + Polymorphic Associations works now&quot;
:assigned_user: 15316
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-01-01T17:33:22+00:00</updated-at>
      <user-id type="integer">11330</user-id>
      <version type="integer">14</version>
      <user-name>Jon Leighton</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It is true that &lt;a href=&quot;http://www.monclergo.com/&quot;&gt;monlcer online store&lt;/a&gt; we have been leading  a difficult &lt;a href=&quot;http://www.monclergo.com/&quot;&gt;moncler&lt;/a&gt; life, for we need  not only to be &lt;a href=&quot;http://www.monclergo.com/&quot;&gt;discount moncler jackets&lt;/a&gt; under various external pressures, but also to be in the &lt;a href=&quot;http://www.monclergo.com/&quot;&gt;moncler sale&lt;/a&gt; face of internal perplexities. Even a mere &lt;a href=&quot;http://www.monclergo.com/&quot;&gt;moncler jackets&lt;/a&gt; glance would make &lt;a href=&quot;http://www.monclergo.com/&quot;&gt;http://www.monclergo.com/&lt;/a&gt; you moved and  inpired.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It is true that &lt;a href=&quot;http://www.monclergo.com/&quot;&gt;monlcer
online store&lt;/a&gt; we have been leading a difficult &lt;a href=
&quot;http://www.monclergo.com/&quot;&gt;moncler&lt;/a&gt; life, for we need not only
to be &lt;a href=&quot;http://www.monclergo.com/&quot;&gt;discount moncler
jackets&lt;/a&gt; under various external pressures, but also to be in the
&lt;a href=&quot;http://www.monclergo.com/&quot;&gt;moncler sale&lt;/a&gt; face of
internal perplexities. Even a mere &lt;a href=
&quot;http://www.monclergo.com/&quot;&gt;moncler jackets&lt;/a&gt; glance would make
&lt;a href=&quot;http://www.monclergo.com/&quot;&gt;http://www.monclergo.com/&lt;/a&gt;
you moved and inpired.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-03T06:10:06+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-01-03T06:50:07+00:00</updated-at>
      <user-id type="integer">130939</user-id>
      <version type="integer">15</version>
      <user-name>afra99</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A true love &lt;a href=&quot;http://www.monclerus.com/&quot;&gt;moncler clothing&lt;/a&gt; is what doesn&#8216;t strive for busyness, for extravagance, for luxury, and &lt;a href=&quot;http://www.monclerus.com/&quot;&gt;moncler outewear&lt;/a&gt; moreover for hokum.There is someone that &lt;a href=&quot;http://www.monclerus.com/&quot;&gt;moncler coats&lt;/a&gt; is coming or passing away in your &lt;a href=&quot;http://www.monclerus.com/&quot;&gt;moncler&lt;/a&gt; life around the clock, so you may lose sight of those &lt;a href=&quot;http://www.monclerus.com/&quot;&gt;moncler jackets&lt;/a&gt; seen, and forget those &lt;a href=&quot;http://www.monclerus.com/&quot;&gt;http://www.monclerus.com/&lt;/a&gt; remembered.</body>
      <body-html>&lt;div&gt;&lt;p&gt;A true love &lt;a href=&quot;http://www.monclerus.com/&quot;&gt;moncler
clothing&lt;/a&gt; is what doesn&amp;#8216;t strive for busyness, for
extravagance, for luxury, and &lt;a href=
&quot;http://www.monclerus.com/&quot;&gt;moncler outewear&lt;/a&gt; moreover for
hokum.There is someone that &lt;a href=
&quot;http://www.monclerus.com/&quot;&gt;moncler coats&lt;/a&gt; is coming or passing
away in your &lt;a href=&quot;http://www.monclerus.com/&quot;&gt;moncler&lt;/a&gt; life
around the clock, so you may lose sight of those &lt;a href=
&quot;http://www.monclerus.com/&quot;&gt;moncler jackets&lt;/a&gt; seen, and forget
those &lt;a href=
&quot;http://www.monclerus.com/&quot;&gt;http://www.monclerus.com/&lt;/a&gt;
remembered.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-03T06:11:05+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-01-03T06:50:08+00:00</updated-at>
      <user-id type="integer">130939</user-id>
      <version type="integer">16</version>
      <user-name>afra99</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Some may be wicked, and some may be &lt;a href=&quot;http://www.goodfurboots.com/&quot;&gt;ugg boots sale&lt;/a&gt; despicable. Only when I put myself &lt;a href=&quot;http://www.goodfurboots.com/&quot;&gt;ugg boots&lt;/a&gt; in their position did I know they are more &lt;a href=&quot;http://www.goodfurboots.com/&quot;&gt;cheap ugg boots&lt;/a&gt; miserable than I. So forgive all that you have met &lt;a href=&quot;http://www.goodfurboots.com/&quot;&gt;discount ugg boots&lt;/a&gt; , no matter what kind of &lt;a href=&quot;http://www.goodfurboots.com/&quot;&gt;cheap ugg boots sale&lt;/a&gt; persons they are. From that you would get angry with your &lt;a href=&quot;http://www.goodfurboots.com/&quot;&gt;http://www.goodfurboots.com/&lt;/a&gt; friends, we can conclude you sitll care about the friendship between you.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Some may be wicked, and some may be &lt;a href=
&quot;http://www.goodfurboots.com/&quot;&gt;ugg boots sale&lt;/a&gt; despicable. Only
when I put myself &lt;a href=&quot;http://www.goodfurboots.com/&quot;&gt;ugg
boots&lt;/a&gt; in their position did I know they are more &lt;a href=
&quot;http://www.goodfurboots.com/&quot;&gt;cheap ugg boots&lt;/a&gt; miserable than
I. So forgive all that you have met &lt;a href=
&quot;http://www.goodfurboots.com/&quot;&gt;discount ugg boots&lt;/a&gt; , no matter
what kind of &lt;a href=&quot;http://www.goodfurboots.com/&quot;&gt;cheap ugg boots
sale&lt;/a&gt; persons they are. From that you would get angry with your
&lt;a href=
&quot;http://www.goodfurboots.com/&quot;&gt;http://www.goodfurboots.com/&lt;/a&gt;
friends, we can conclude you sitll care about the friendship
between you.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-03T06:11:51+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-01-03T06:50:09+00:00</updated-at>
      <user-id type="integer">130939</user-id>
      <version type="integer">17</version>
      <user-name>afra99</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Happiness is accompanied by &lt;a href=&quot;http://www.topuggworld.com/&quot;&gt;ugg boots sale&lt;/a&gt; sorrow, and it would turn &lt;a href=&quot;http://www.topuggworld.com/&quot;&gt;discount ugg boots&lt;/a&gt; sunny after rain as well. If rain remains after rain and sorrow &lt;a href=&quot;http://www.topuggworld.com/&quot;&gt;ugg boots&lt;/a&gt; remains after sorrow, please take those &lt;a href=&quot;http://www.topuggworld.com/&quot;&gt;ugg australia boots&lt;/a&gt; farewells easy, and turn to smilingly look for yourself who is never to appear &lt;a href=&quot;http://www.topuggworld.com/&quot;&gt;http://www.topuggworld.com/&lt;/a&gt; .</body>
      <body-html>&lt;div&gt;&lt;p&gt;Happiness is accompanied by &lt;a href=
&quot;http://www.topuggworld.com/&quot;&gt;ugg boots sale&lt;/a&gt; sorrow, and it
would turn &lt;a href=&quot;http://www.topuggworld.com/&quot;&gt;discount ugg
boots&lt;/a&gt; sunny after rain as well. If rain remains after rain and
sorrow &lt;a href=&quot;http://www.topuggworld.com/&quot;&gt;ugg boots&lt;/a&gt; remains
after sorrow, please take those &lt;a href=
&quot;http://www.topuggworld.com/&quot;&gt;ugg australia boots&lt;/a&gt; farewells
easy, and turn to smilingly look for yourself who is never to
appear &lt;a href=
&quot;http://www.topuggworld.com/&quot;&gt;http://www.topuggworld.com/&lt;/a&gt; .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-03T06:12:42+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-01-03T06:50:09+00:00</updated-at>
      <user-id type="integer">130939</user-id>
      <version type="integer">18</version>
      <user-name>afra99</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Happiness &lt;a href=&quot;http://www.christianlouboutinshoestore.com/&quot;&gt;christian louboutin sale&lt;/a&gt; is like a pebble dropped into  a &lt;a href=&quot;http://www.christianlouboutinshoestore.com/&quot;&gt;christian louboutin&lt;/a&gt; pool to set in motion an  ever-widening circle of &lt;a href=&quot;http://www.christianlouboutinshoestore.com/&quot;&gt;christian  louboutin shoes&lt;/a&gt; ripples.  As Stevenson has said &lt;a href=&quot;http://www.christianlouboutinshoestore.com/productlist-two-43.html&quot;&gt;christian  louboutin boots&lt;/a&gt;, being happy is a &lt;a href=&quot;http://www.christianlouboutinshoestore.com/productlist-one-21.html&quot;&gt;tory  borch shoes&lt;/a&gt; duty. There is no exact definition of the &lt;a href=&quot;http://www.christianlouboutinshoestore.com/&quot;&gt;http://www.christianlouboutinshoestore.com/ &lt;/a&gt; word happiness.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Happiness &lt;a href=
&quot;http://www.christianlouboutinshoestore.com/&quot;&gt;christian louboutin
sale&lt;/a&gt; is like a pebble dropped into a &lt;a href=
&quot;http://www.christianlouboutinshoestore.com/&quot;&gt;christian
louboutin&lt;/a&gt; pool to set in motion an ever-widening circle of
&lt;a href=&quot;http://www.christianlouboutinshoestore.com/&quot;&gt;christian
louboutin shoes&lt;/a&gt; ripples. As Stevenson has said &lt;a href=
&quot;http://www.christianlouboutinshoestore.com/productlist-two-43.html&quot;&gt;
christian louboutin boots&lt;/a&gt;, being happy is a &lt;a href=
&quot;http://www.christianlouboutinshoestore.com/productlist-one-21.html&quot;&gt;
tory borch shoes&lt;/a&gt; duty. There is no exact definition of the
&lt;a href=
&quot;http://www.christianlouboutinshoestore.com/&quot;&gt;http://www.christianlouboutinshoestore.com/&lt;/a&gt;
word happiness.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-03T06:13:31+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-01-03T06:50:10+00:00</updated-at>
      <user-id type="integer">130939</user-id>
      <version type="integer">19</version>
      <user-name>afra99</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Maybe God wants us to meet &lt;a href=&quot;http://www.edhardy-buy.com/&quot;&gt;cheap ed hardy clothing sale&lt;/a&gt; a few wrong people before meeting the right &lt;a href=&quot;http://www.edhardy-buy.com/&quot;&gt;womens ed hardy clothing&lt;/a&gt; one, so that when we finally meet the &lt;a href=&quot;http://www.edhardy-buy.com/&quot;&gt;ed hardy online shop&lt;/a&gt; person, we will know how to be grateful &lt;a href=&quot;http://www.edhardy-buy.com/&quot;&gt;ed hardy clothing&lt;/a&gt; .Do not cry because it is &lt;a href=&quot;http://www.edhardy-buy.com/mens-moncler-jackets-c-173.html&quot;&gt;mens  moncler jackets&lt;/a&gt; over, smile because it happened &lt;a href=&quot;http://www.edhardy-buy.com/&quot;&gt;http://www.edhardy-buy.com/&lt;/a&gt;  .</body>
      <body-html>&lt;div&gt;&lt;p&gt;Maybe God wants us to meet &lt;a href=
&quot;http://www.edhardy-buy.com/&quot;&gt;cheap ed hardy clothing sale&lt;/a&gt; a
few wrong people before meeting the right &lt;a href=
&quot;http://www.edhardy-buy.com/&quot;&gt;womens ed hardy clothing&lt;/a&gt; one, so
that when we finally meet the &lt;a href=
&quot;http://www.edhardy-buy.com/&quot;&gt;ed hardy online shop&lt;/a&gt; person, we
will know how to be grateful &lt;a href=
&quot;http://www.edhardy-buy.com/&quot;&gt;ed hardy clothing&lt;/a&gt; .Do not cry
because it is &lt;a href=
&quot;http://www.edhardy-buy.com/mens-moncler-jackets-c-173.html&quot;&gt;mens
moncler jackets&lt;/a&gt; over, smile because it happened &lt;a href=
&quot;http://www.edhardy-buy.com/&quot;&gt;http://www.edhardy-buy.com/&lt;/a&gt; .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-03T06:14:24+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-01-03T06:50:11+00:00</updated-at>
      <user-id type="integer">130939</user-id>
      <version type="integer">20</version>
      <user-name>afra99</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I would not care success &lt;a href=&quot;http://www.louboutinszone.com/&quot;&gt;christian louboutin shoes&lt;/a&gt; or failure, for I will only struggle &lt;a href=&quot;http://www.louboutinszone.com/&quot;&gt;louboutin sale&lt;/a&gt;  ahead as long as I   have been destined to the &lt;a href=&quot;http://www.louboutinszone.com/&quot;&gt;discount christian louboutin  shoes&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;distance. I would not care the &lt;a href=&quot;http://www.louboutinszone.com/Christian-Louboutin-Booties-s37/&quot;&gt;christian  louboutin booties&lt;/a&gt; difficulties around, for   what I can leave on the &lt;a href=&quot;http://www.louboutinszone.com/Christian-Louboutin-Boots-s38/&quot;&gt;christian  louboutin boots&lt;/a&gt; earth is only their view of my back since I have been   marching toward the &lt;a href=&quot;http://www.louboutinszone.com/&quot;&gt;http://www.louboutinszone.com/&lt;/a&gt;  horizontal.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I would not care success &lt;a href=
&quot;http://www.louboutinszone.com/&quot;&gt;christian louboutin shoes&lt;/a&gt; or
failure, for I will only struggle &lt;a href=
&quot;http://www.louboutinszone.com/&quot;&gt;louboutin sale&lt;/a&gt; ahead as long
as I have been destined to the &lt;a href=
&quot;http://www.louboutinszone.com/&quot;&gt;discount christian louboutin
shoes&lt;/a&gt; distance. I would not care the &lt;a href=
&quot;http://www.louboutinszone.com/Christian-Louboutin-Booties-s37/&quot;&gt;christian
louboutin booties&lt;/a&gt; difficulties around, for what I can leave on
the &lt;a href=
&quot;http://www.louboutinszone.com/Christian-Louboutin-Boots-s38/&quot;&gt;christian
louboutin boots&lt;/a&gt; earth is only their view of my back since I
have been marching toward the &lt;a href=
&quot;http://www.louboutinszone.com/&quot;&gt;http://www.louboutinszone.com/&lt;/a&gt;
horizontal.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-03T06:15:25+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-01-03T06:50:12+00:00</updated-at>
      <user-id type="integer">130939</user-id>
      <version type="integer">21</version>
      <user-name>afra99</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The tragedy of &lt;a href=&quot;http://www.louboutinsonline.com/&quot;&gt;louboutin shoes&lt;/a&gt; life is not so much what men suffer, but what &lt;a href=&quot;http://www.louboutinsonline.com/&quot;&gt;christian louboutin sale&lt;/a&gt; they miss. I find life an exciting &lt;a href=&quot;http://www.louboutinsonline.com/&quot;&gt;christian louboutin shoes&lt;/a&gt; business and most exciting when it is lived for &lt;a href=&quot;http://www.louboutinsonline.com/&quot;&gt;discount christian louboutin&lt;/a&gt; others. Young men make great mistakes in &lt;a href=&quot;http://www.louboutinsonline.com/Discount-Christian-Louboutin-Pumps/&quot;&gt;christian louboutin pumps&lt;/a&gt; life for one thing, they idealize love &lt;a href=&quot;http://www.louboutinsonline.com/&quot;&gt;http://www.louboutinsonline.com/&lt;/a&gt; too much.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The tragedy of &lt;a href=
&quot;http://www.louboutinsonline.com/&quot;&gt;louboutin shoes&lt;/a&gt; life is not
so much what men suffer, but what &lt;a href=
&quot;http://www.louboutinsonline.com/&quot;&gt;christian louboutin sale&lt;/a&gt;
they miss. I find life an exciting &lt;a href=
&quot;http://www.louboutinsonline.com/&quot;&gt;christian louboutin shoes&lt;/a&gt;
business and most exciting when it is lived for &lt;a href=
&quot;http://www.louboutinsonline.com/&quot;&gt;discount christian louboutin&lt;/a&gt;
others. Young men make great mistakes in &lt;a href=
&quot;http://www.louboutinsonline.com/Discount-Christian-Louboutin-Pumps/&quot;&gt;
christian louboutin pumps&lt;/a&gt; life for one thing, they idealize
love &lt;a href=
&quot;http://www.louboutinsonline.com/&quot;&gt;http://www.louboutinsonline.com/&lt;/a&gt;
too much.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-03T06:16:20+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-01-03T06:50:13+00:00</updated-at>
      <user-id type="integer">130939</user-id>
      <version type="integer">22</version>
      <user-name>afra99</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Shopping for Mens &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Big Yellow,These matter can be found in many sources. Department supplies may keep them as well as operation shoe locations. Different operation shoed chains will tender a few different shoes from each category of shoe fray. They may hold a line of soccer &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt;, operation abrasion and basketball styles. This ideal is a form right shoe that looks great with casual pants. &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt;sale Mens Puma Speed Cat Big Yellow Shoes hot sale in Ottawa will give somebody the gamble to attire something that is classy and lively. The panache on the leather and the influence will bestow somebody with an excellent looking &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt;. This entry could be tattered with shorts, pants and jeans. Small ankle socks in red or colorless may help to produce a balanced look. A purchaser may find this sort in a footwear store or through an online retailer. In the sell for an open evaluate of the Mens Puma Speed Cat Big Gold Black Shoes? Get the absolute inside scrape and attrition now in our manual to the great puma eminent cat lo.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Shopping for Mens &lt;a href=&quot;http:&quot;&gt;puma speed cat Big
Yellow,These matter can be found in many sources. Department
supplies may keep them as well as operation shoe locations.
Different operation shoed chains will tender a few different shoes
from each category of shoe fray. They may hold a line of soccer
&lt;a href=&quot;http:&quot;&gt;Puma shoes, operation abrasion and basketball
styles. This ideal is a form right shoe that looks great with
casual pants. &lt;a href=&quot;http:&quot;&gt;Puma shoes onlinesale Mens Puma Speed
Cat Big Yellow Shoes hot sale in Ottawa will give somebody the
gamble to attire something that is classy and lively. The panache
on the leather and the influence will bestow somebody with an
excellent looking &lt;a href=&quot;http:&quot;&gt;Puma shoes. This entry could be
tattered with shorts, pants and jeans. Small ankle socks in red or
colorless may help to produce a balanced look. A purchaser may find
this sort in a footwear store or through an online retailer. In the
sell for an open evaluate of the Mens Puma Speed Cat Big Gold Black
Shoes? Get the absolute inside scrape and attrition now in our
manual to the great puma eminent cat lo.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-13T01:51:04+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-01-13T01:53:41+00:00</updated-at>
      <user-id type="integer">132366</user-id>
      <version type="integer">23</version>
      <user-name>yanzi</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm also one looking for this functionality to be in Rails as my projects depend on it. It looks like I'll need to roll up my sleeves and make it happen.

I've started with Jon's [patch](https://github.com/jonleighton/rails/tree/5617_polymorphism_with_sti) and just played around with it for a while to see what's going on down there. I have all the tests passing now. 

I'm gonna package it up as a patch for master and 3.0.x. I'll introduce a configuration flag, say, store_sti_base_class which default to true to handle backwards compatibility.

Stay tuned.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm also one looking for this functionality to be in Rails as my
projects depend on it. It looks like I'll need to roll up my
sleeves and make it happen.&lt;/p&gt;
&lt;p&gt;I've started with Jon's &lt;a href=
&quot;https://github.com/jonleighton/rails/tree/5617_polymorphism_with_sti&quot;&gt;
patch&lt;/a&gt; and just played around with it for a while to see what's
going on down there. I have all the tests passing now.&lt;/p&gt;
&lt;p&gt;I'm gonna package it up as a patch for master and 3.0.x. I'll
introduce a configuration flag, say, store_sti_base_class which
default to true to handle backwards compatibility.&lt;/p&gt;
&lt;p&gt;Stay tuned.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-13T18:00:06+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-02-13T18:00:25+00:00</updated-at>
      <user-id type="integer">129732</user-id>
      <version type="integer">24</version>
      <user-name>Paul K</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-14T03:24:44+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-02-14T05:42:02+00:00</updated-at>
      <user-id type="integer">136860</user-id>
      <version type="integer">25</version>
      <user-name>xixi</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Alright, I got something for Rails 3.0.4 on [github](https://github.com/pkmiec/rails/commit/6f4da9151e39283c14aaceec98ff605a746309d1). Rails 3.1 requires similar but different changes (as much of its internals are now Arel). I'm planning on doing those later in the week.

I've added ActiveRecord::Base.store_base_sti_class (defaults to true) for backwards compatibility. I've added join_model_store_actual_sti_class_test.rb to test all the relevant cases I could find when store_base_sti_class is false.

I've ran all the activerecord tests using native mysql.

Gonna test this out with my apps tomorrow as my wife would not be happy if I did it tonight ;).

Take a look and let me know what you think.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Alright, I got something for Rails 3.0.4 on &lt;a href=
&quot;https://github.com/pkmiec/rails/commit/6f4da9151e39283c14aaceec98ff605a746309d1&quot;&gt;
github&lt;/a&gt;. Rails 3.1 requires similar but different changes (as
much of its internals are now Arel). I'm planning on doing those
later in the week.&lt;/p&gt;
&lt;p&gt;I've added ActiveRecord::Base.store_base_sti_class (defaults to
true) for backwards compatibility. I've added
join_model_store_actual_sti_class_test.rb to test all the relevant
cases I could find when store_base_sti_class is false.&lt;/p&gt;
&lt;p&gt;I've ran all the activerecord tests using native mysql.&lt;/p&gt;
&lt;p&gt;Gonna test this out with my apps tomorrow as my wife would not
be happy if I did it tonight ;).&lt;/p&gt;
&lt;p&gt;Take a look and let me know what you think.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-15T01:47:39+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-02-15T01:47:56+00:00</updated-at>
      <user-id type="integer">129732</user-id>
      <version type="integer">26</version>
      <user-name>Paul K</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi PaulK,

Great job!  I've had a look at the diffs and they are what I would expect.  I'm still on Rails 2.2.2 (with patches), so I am unable to try it, but I've made very similar changes to our installation and they have been in production for 9 months plus with no ill effects.

Further to my post in September, we have indeed rolled out another enhancement which validates polymorphic associations are only assigned objects that are in a subset of types.  Which application really needs a polymorphic association to be able to refer to *every* table?  :-)

Thanks for your efforts Paul - you may well have saved me a massive task when we finally get around to moving up to Rails 3.

Cheers,
   Jonathan.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi PaulK,&lt;/p&gt;
&lt;p&gt;Great job! I've had a look at the diffs and they are what I
would expect. I'm still on Rails 2.2.2 (with patches), so I am
unable to try it, but I've made very similar changes to our
installation and they have been in production for 9 months plus
with no ill effects.&lt;/p&gt;
&lt;p&gt;Further to my post in September, we have indeed rolled out
another enhancement which validates polymorphic associations are
only assigned objects that are in a subset of types. Which
application really needs a polymorphic association to be able to
refer to &lt;em&gt;every&lt;/em&gt; table? :-)&lt;/p&gt;
&lt;p&gt;Thanks for your efforts Paul - you may well have saved me a
massive task when we finally get around to moving up to Rails
3.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br&gt;
Jonathan.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-15T09:12:54+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-02-15T09:13:13+00:00</updated-at>
      <user-id type="integer">51960</user-id>
      <version type="integer">27</version>
      <user-name>Jonathan Monahan</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've extracted the patch into a [gem](https://github.com/pkmiec/store_base_sti_class_for_3_0), so that I can include it into my applications which include Rails via Gemfile. So now the functionality can be added to any project by adding store_base_sti_class_for_3_0 to Gemfile.

Let me know if you have any problems. Hopefully, this feature can be sucked into Rails itself.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've extracted the patch into a &lt;a href=
&quot;https://github.com/pkmiec/store_base_sti_class_for_3_0&quot;&gt;gem&lt;/a&gt;,
so that I can include it into my applications which include Rails
via Gemfile. So now the functionality can be added to any project
by adding store_base_sti_class_for_3_0 to Gemfile.&lt;/p&gt;
&lt;p&gt;Let me know if you have any problems. Hopefully, this feature
can be sucked into Rails itself.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-16T06:16:51+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-02-16T06:17:08+00:00</updated-at>
      <user-id type="integer">129732</user-id>
      <version type="integer">28</version>
      <user-name>Paul K</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Today, kids as babyish as Ashcan School or nine name-conscious and trend-alert, puma ducati buying at for solid garments rather than just throwing on what&#8217;s pure. Here are just some of the brands and trends your children hungered over 2011. The 80&#8242;s Are Back. You may have noticed a trend this year for evisu jeans, supra shoes, leggings petticoats, oversized tees, and big &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; shoes. This is a look that appeals to babies girls-it&#8217;s quirky and yet smart at the same time.
&lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; with success sets the charm for manner, lifestyle and gambols. This has been believed to serve for an ideal cross flight simulator. This has been fine-looking by most jocks and the Speed Cat is an old name for the industriousness which made &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; gain millions with this business. With many people converting more wellness conscious in time, a lot wants also to commit on a good pair of cross trainers. These are very indestructible and forward-looking just like the real carrying out of a real &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt;. It consumes been systematically on the forefront of design and carrying out when it pertains comfort and style commingled.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Today, kids as babyish as Ashcan School or nine name-conscious
and trend-alert, puma ducati buying at for solid garments rather
than just throwing on what&amp;#8217;s pure. Here are just some of the
brands and trends your children hungered over 2011. The 80&amp;#8242;s
Are Back. You may have noticed a trend this year for evisu jeans,
supra shoes, leggings petticoats, oversized tees, and big &lt;a href=
&quot;http:&quot;&gt;puma speed cat shoes. This is a look that appeals to babies
girls-it&amp;#8217;s quirky and yet smart at the same time.&lt;br&gt;
&lt;a href=&quot;http:&quot;&gt;Puma future cat with success sets the charm for
manner, lifestyle and gambols. This has been believed to serve for
an ideal cross flight simulator. This has been fine-looking by most
jocks and the Speed Cat is an old name for the industriousness
which made &lt;a href=&quot;http:&quot;&gt;Puma shoes gain millions with this
business. With many people converting more wellness conscious in
time, a lot wants also to commit on a good pair of cross trainers.
These are very indestructible and forward-looking just like the
real carrying out of a real &lt;a href=&quot;http:&quot;&gt;Puma future cat. It
consumes been systematically on the forefront of design and
carrying out when it pertains comfort and style commingled.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-17T07:22:22+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-02-17T07:38:05+00:00</updated-at>
      <user-id type="integer">137451</user-id>
      <version type="integer">29</version>
      <user-name>fghgghjg</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Today, kids as babyish as Ashcan School or nine name-conscious and trend-alert, puma ducati buying at for solid garments rather than just throwing on what&#8217;s pure. Here are just some of the brands and trends your children hungered over 2011. The 80&#8242;s Are Back. You may have noticed a trend this year for evisu jeans, supra shoes, leggings petticoats, oversized tees, and big &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; shoes. This is a look that appeals to babies girls-it&#8217;s quirky and yet smart at the same time.
&lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; with success sets the charm for manner, lifestyle and gambols. This has been believed to serve for an ideal cross flight simulator. This has been fine-looking by most jocks and the Speed Cat is an old name for the industriousness which made &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; gain millions with this business. With many people converting more wellness conscious in time, a lot wants also to commit on a good pair of cross trainers. These are very indestructible and forward-looking just like the real carrying out of a real &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt;. It consumes been systematically on the forefront of design and carrying out when it pertains comfort and style commingled.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Today, kids as babyish as Ashcan School or nine name-conscious
and trend-alert, puma ducati buying at for solid garments rather
than just throwing on what&amp;#8217;s pure. Here are just some of the
brands and trends your children hungered over 2011. The 80&amp;#8242;s
Are Back. You may have noticed a trend this year for evisu jeans,
supra shoes, leggings petticoats, oversized tees, and big &lt;a href=
&quot;http:&quot;&gt;puma speed cat shoes. This is a look that appeals to babies
girls-it&amp;#8217;s quirky and yet smart at the same time.&lt;br&gt;
&lt;a href=&quot;http:&quot;&gt;Puma future cat with success sets the charm for
manner, lifestyle and gambols. This has been believed to serve for
an ideal cross flight simulator. This has been fine-looking by most
jocks and the Speed Cat is an old name for the industriousness
which made &lt;a href=&quot;http:&quot;&gt;Puma shoes gain millions with this
business. With many people converting more wellness conscious in
time, a lot wants also to commit on a good pair of cross trainers.
These are very indestructible and forward-looking just like the
real carrying out of a real &lt;a href=&quot;http:&quot;&gt;Puma future cat. It
consumes been systematically on the forefront of design and
carrying out when it pertains comfort and style commingled.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-19T01:12:23+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-02-19T09:28:16+00:00</updated-at>
      <user-id type="integer">137759</user-id>
      <version type="integer">30</version>
      <user-name>mklo</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci sneakers&lt;/a&gt; gucci sneakers
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci shoes&lt;/a&gt; gucci shoes
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci outlet&lt;/a&gt; gucci outlet&lt;
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci shoes for sale&lt;/a&gt; gucci shoes for sale</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci sneakers&lt;/a&gt;
gucci sneakers&lt;br&gt;
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci shoes&lt;/a&gt; gucci
shoes&lt;br&gt;
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci outlet&lt;/a&gt; gucci
outlet&amp;lt;&lt;br&gt;
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci shoes for sale&lt;/a&gt;
gucci shoes for sale&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-03T08:04:04+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-03-03T09:20:20+00:00</updated-at>
      <user-id type="integer">139624</user-id>
      <version type="integer">31</version>
      <user-name>cheap coach bags</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton
watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-26T02:06:19+00:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-03-26T02:28:06+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">32</version>
      <user-name>bingbing</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11330</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>PDF to JPG Converter is a more efficient pdf to jpg conversion software
&lt;a href=&quot;http://www.oxpdf.com/pdf-creator.html&quot;&gt;PDF Creator&lt;/a&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-jpg-converter.html&quot;&gt;pdf to jpg converter&lt;/a&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-image-converter.html&quot;&gt;pdf to image converter&lt;/a&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-tiff-converter.html&quot;&gt;pdf to tiff converter&lt;/a&gt;
which is able to convert pdf to jpg format with original output quality and fast conversion speed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;PDF to JPG Converter is a more efficient pdf to jpg conversion
software&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-creator.html&quot;&gt;PDF Creator&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-jpg-converter.html&quot;&gt;pdf to jpg
converter&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-image-converter.html&quot;&gt;pdf to
image converter&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.oxpdf.com/pdf-to-tiff-converter.html&quot;&gt;pdf to
tiff converter&lt;/a&gt;&lt;br&gt;
which is able to convert pdf to jpg format with original output
quality and fast conversion speed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-22T04:41:55+01:00</created-at>
      <creator-id type="integer">44528</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5617</number>
      <permalink>patch-sti-join-model-polymorphic-associations-works-now</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;sql sti polymorphism join-model&quot;</tag>
      <title>Polymorphic type field stores the base_class of the associated object, not its actual class (STI + polymorphism)</title>
      <updated-at type="datetime">2011-04-22T06:48:01+01:00</updated-at>
      <user-id type="integer">146598</user-id>
      <version type="integer">33</version>
      <user-name>machen</user-name>
      <creator-name>viatropos</creator-name>
      <assigned-user-name>Jon Leighton</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5617</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
