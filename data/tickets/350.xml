<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-06T00:48:21+01:00</created-at>
  <creator-id type="integer">18806</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">350</number>
  <permalink>allow-calls-to-instantiate_record-in-activeresource-for-custom-actions</permalink>
  <priority type="integer">15677</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activeresource enhancement</tag>
  <title>Allow calls to instantiate_record in ActiveResource for Custom Actions</title>
  <updated-at type="datetime">2008-10-28T16:30:16+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">3</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Matthew Moore</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/350</url>
  <priority-name nil="true"></priority-name>
  <original-body>Right now, to consume custom actions, you have to call .get(:custom_action).  This returns a hash, as opposed to a record like .find does.

For my purposes, I need to instantiate the resulting hash into a record.  However, there's no way for me to do that because instantiate_record is private.  Same goes for instantiate_collection.

Is there a way we could let MyActiveResource call the instantiate methods, by making them protected, for example?

My current workaround is creating my own get_record method to replace .get.  However, it doesn't have a lot of the goodness that instantiate_record has, and is a pretty brittle solution all around

      def get_record(path)
        MyActiveResource.new(get(path))
      end</original-body>
  <latest-body>Right now, to consume custom actions, you have to call .get(:custom_action).  This returns a hash, as opposed to a record like .find does.

For my purposes, I need to instantiate the resulting hash into a record.  However, there's no way for me to do that because instantiate_record is private.  Same goes for instantiate_collection.

Is there a way we could let MyActiveResource call the instantiate methods, by making them protected, for example?

My current workaround is creating my own get_record method to replace .get.  However, it doesn't have a lot of the goodness that instantiate_record has, and is a pretty brittle solution all around

      def get_record(path)
        MyActiveResource.new(get(path))
      end</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Right now, to consume custom actions, you have to call .get(:custom_action).  This returns a hash, as opposed to a record like .find does.
&lt;/p&gt;&lt;p&gt;
For my purposes, I need to instantiate the resulting hash into a record.  However, there's no way for me to do that because instantiate_record is private.  Same goes for instantiate_collection.
&lt;/p&gt;&lt;p&gt;
Is there a way we could let MyActiveResource call the instantiate methods, by making them protected, for example?
&lt;/p&gt;&lt;p&gt;
My current workaround is creating my own get_record method to replace .get.  However, it doesn't have a lot of the goodness that instantiate_record has, and is a pretty brittle solution all around
&lt;/p&gt;&lt;p&gt;
def get_record(path)
&lt;/p&gt;&lt;p&gt;
MyActiveResource.new(get(path))
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Right now, to consume custom actions, you have to call .get(:custom_action).  This returns a hash, as opposed to a record like .find does.

For my purposes, I need to instantiate the resulting hash into a record.  However, there's no way for me to do that because instantiate_record is private.  Same goes for instantiate_collection.

Is there a way we could let MyActiveResource call the instantiate methods, by making them protected, for example?

My current workaround is creating my own get_record method to replace .get.  However, it doesn't have a lot of the goodness that instantiate_record has, and is a pretty brittle solution all around

      def get_record(path)
        MyActiveResource.new(get(path))
      end</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Right now, to consume custom actions, you have to call .get(:custom_action).  This returns a hash, as opposed to a record like .find does.
&lt;/p&gt;&lt;p&gt;
For my purposes, I need to instantiate the resulting hash into a record.  However, there's no way for me to do that because instantiate_record is private.  Same goes for instantiate_collection.
&lt;/p&gt;&lt;p&gt;
Is there a way we could let MyActiveResource call the instantiate methods, by making them protected, for example?
&lt;/p&gt;&lt;p&gt;
My current workaround is creating my own get_record method to replace .get.  However, it doesn't have a lot of the goodness that instantiate_record has, and is a pretty brittle solution all around
&lt;/p&gt;&lt;p&gt;
def get_record(path)
&lt;/p&gt;&lt;p&gt;
MyActiveResource.new(get(path))
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-06T00:48:21+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">350</number>
      <permalink>allow-calls-to-instantiate_record-in-activeresource-for-custom-actions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Allow calls to instantiate_record in ActiveResource for Custom Actions</title>
      <updated-at type="datetime">2008-06-06T00:48:21+01:00</updated-at>
      <user-id type="integer">18806</user-id>
      <version type="integer">1</version>
      <user-name>Matthew Moore</user-name>
      <creator-name>Matthew Moore</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/350</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have searched a lot to solve this problem too but in fact there is no problem :) 

You just have to write something like 

@songs = Song.find(:all, :from =&gt; :list_by_artist, :params =&gt; {:artist_id =&gt; 2})

and you'll get your records instantiated.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I have searched a lot to solve this problem too but in fact there is no problem :)
&lt;/p&gt;&lt;p&gt;
You just have to write something like
&lt;/p&gt;&lt;p&gt;
@songs = Song.find(:all, :from =&gt; :list_by_artist, :params =&gt; {:artist_id =&gt; 2})
&lt;/p&gt;&lt;p&gt;
and you'll get your records instantiated.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-22T00:13:55+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">350</number>
      <permalink>allow-calls-to-instantiate_record-in-activeresource-for-custom-actions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activeresource enhancement</tag>
      <title>Allow calls to instantiate_record in ActiveResource for Custom Actions</title>
      <updated-at type="datetime">2008-07-22T00:13:55+01:00</updated-at>
      <user-id type="integer">26724</user-id>
      <version type="integer">2</version>
      <user-name>jblanche</user-name>
      <creator-name>Matthew Moore</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/350</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Staling out, please reopen if this is still a problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Staling out, please reopen if this is still a problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-28T16:30:11+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">350</number>
      <permalink>allow-calls-to-instantiate_record-in-activeresource-for-custom-actions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activeresource enhancement</tag>
      <title>Allow calls to instantiate_record in ActiveResource for Custom Actions</title>
      <updated-at type="datetime">2008-10-28T16:30:16+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">3</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Matthew Moore</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/350</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
