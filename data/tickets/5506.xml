<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-31T05:12:48+01:00</created-at>
  <creator-id type="integer">18818</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5506</number>
  <permalink>actionview-cache-helper-is-inefficient</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>actionview cache performance_test perform_caching view_helpers</tag>
  <title>ActionView cache helper is inefficient</title>
  <updated-at type="datetime">2011-02-02T18:08:48+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">5</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Stephen Eley</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5506</url>
  <priority-name>Low</priority-name>
  <original-body>I have a simple app that displays the schedule and session details for a large conference.  With potentially hundreds of partials displayed on a single page, it was a natural candidate for fragment caching.  The caching works fine, but I noticed this redundancy in the logs:

@@@
Started GET &quot;/sessions?type=full&amp;scope=am&quot; for 127.0.0.1 at 2010-08-30 23:36:51 -0400
  Processing by SessionsController#index as HTML
  Parameters: {&quot;type&quot;=&gt;&quot;full&quot;, &quot;scope&quot;=&gt;&quot;am&quot;}
Read fragment views/localhost:3000/sessions?type=full&amp;scope=am (0.8ms)
Rendered sessions/_header.haml (2.7ms)
Rendered sessions/_search.haml (171.8ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f0609c843161000001 (0.9ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f0609c843161000001 (1.5ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f3609c843161000003 (0.8ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f3609c843161000003 (0.7ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f6609c843161000005 (0.7ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f6609c843161000005 (0.6ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f7609c843161000006 (0.9ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f7609c843161000006 (1.1ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f9609c843161000007 (0.8ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f9609c843161000007 (0.7ms)
@@@

...And so forth.  My observation is that on a cache hit, the `ActionView::Helpers::CacheHelper#cache` method has two steps (underneath various layers of abstraction) of approximately equal duration:

1. Call the underlying cache store's `#exist?` method
2. Perform a `#read` to get the content

However, this is redundant because the `#exist?` method calls the same lower-level `#read_entry` method that `#read` does!  We're retrieving the exact same value from the cache store _twice._  The first time we return a true or false and throw the value away; the second time, we keep the value.

This is an obvious candidate for refactoring.  Every cache store has consistent behavior on `#read` that returns nil in the event of a cache miss.  It'd be very easy to skip the existence test and simply call the execute-and-write code if the read doesn't return a value.

I'll submit a patch for this presently.  I just wanted to register the issue first.  For complex pages with many fragment hits, this has the potential to nearly double rendering performance.</original-body>
  <latest-body>I have a simple app that displays the schedule and session details for a large conference.  With potentially hundreds of partials displayed on a single page, it was a natural candidate for fragment caching.  The caching works fine, but I noticed this redundancy in the logs:

@@@
Started GET &quot;/sessions?type=full&amp;scope=am&quot; for 127.0.0.1 at 2010-08-30 23:36:51 -0400
  Processing by SessionsController#index as HTML
  Parameters: {&quot;type&quot;=&gt;&quot;full&quot;, &quot;scope&quot;=&gt;&quot;am&quot;}
Read fragment views/localhost:3000/sessions?type=full&amp;scope=am (0.8ms)
Rendered sessions/_header.haml (2.7ms)
Rendered sessions/_search.haml (171.8ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f0609c843161000001 (0.9ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f0609c843161000001 (1.5ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f3609c843161000003 (0.8ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f3609c843161000003 (0.7ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f6609c843161000005 (0.7ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f6609c843161000005 (0.6ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f7609c843161000006 (0.9ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f7609c843161000006 (1.1ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f9609c843161000007 (0.8ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f9609c843161000007 (0.7ms)
@@@

...And so forth.  My observation is that on a cache hit, the `ActionView::Helpers::CacheHelper#cache` method has two steps (underneath various layers of abstraction) of approximately equal duration:

1. Call the underlying cache store's `#exist?` method
2. Perform a `#read` to get the content

However, this is redundant because the `#exist?` method calls the same lower-level `#read_entry` method that `#read` does!  We're retrieving the exact same value from the cache store _twice._  The first time we return a true or false and throw the value away; the second time, we keep the value.

This is an obvious candidate for refactoring.  Every cache store has consistent behavior on `#read` that returns nil in the event of a cache miss.  It'd be very easy to skip the existence test and simply call the execute-and-write code if the read doesn't return a value.

I'll submit a patch for this presently.  I just wanted to register the issue first.  For complex pages with many fragment hits, this has the potential to nearly double rendering performance.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have a simple app that displays the schedule and session
details for a large conference. With potentially hundreds of
partials displayed on a single page, it was a natural candidate for
fragment caching. The caching works fine, but I noticed this
redundancy in the logs:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Started GET &quot;/sessions?type=full&amp;amp;scope=am&quot; for 127.0.0.1 at 2010-08-30 23:36:51 -0400
  Processing by SessionsController#index as HTML
  Parameters: {&quot;type&quot;=&amp;gt;&quot;full&quot;, &quot;scope&quot;=&amp;gt;&quot;am&quot;}
Read fragment views/localhost:3000/sessions?type=full&amp;amp;scope=am (0.8ms)
Rendered sessions/_header.haml (2.7ms)
Rendered sessions/_search.haml (171.8ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f0609c843161000001 (0.9ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f0609c843161000001 (1.5ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f3609c843161000003 (0.8ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f3609c843161000003 (0.7ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f6609c843161000005 (0.7ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f6609c843161000005 (0.6ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f7609c843161000006 (0.9ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f7609c843161000006 (1.1ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f9609c843161000007 (0.8ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f9609c843161000007 (0.7ms)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;...And so forth. My observation is that on a cache hit, the
&lt;code&gt;ActionView::Helpers::CacheHelper#cache&lt;/code&gt; method has two
steps (underneath various layers of abstraction) of approximately
equal duration:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call the underlying cache store's &lt;code&gt;#exist?&lt;/code&gt;
method&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Perform a &lt;code&gt;#read&lt;/code&gt; to get the content&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, this is redundant because the &lt;code&gt;#exist?&lt;/code&gt;
method calls the same lower-level &lt;code&gt;#read_entry&lt;/code&gt; method
that &lt;code&gt;#read&lt;/code&gt; does! We're retrieving the exact same value
from the cache store &lt;em&gt;twice.&lt;/em&gt; The first time we return a
true or false and throw the value away; the second time, we keep
the value.&lt;/p&gt;
&lt;p&gt;This is an obvious candidate for refactoring. Every cache store
has consistent behavior on &lt;code&gt;#read&lt;/code&gt; that returns nil in
the event of a cache miss. It'd be very easy to skip the existence
test and simply call the execute-and-write code if the read doesn't
return a value.&lt;/p&gt;
&lt;p&gt;I'll submit a patch for this presently. I just wanted to
register the issue first. For complex pages with many fragment
hits, this has the potential to nearly double rendering
performance.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have a simple app that displays the schedule and session details for a large conference.  With potentially hundreds of partials displayed on a single page, it was a natural candidate for fragment caching.  The caching works fine, but I noticed this redundancy in the logs:

@@@
Started GET &quot;/sessions?type=full&amp;scope=am&quot; for 127.0.0.1 at 2010-08-30 23:36:51 -0400
  Processing by SessionsController#index as HTML
  Parameters: {&quot;type&quot;=&gt;&quot;full&quot;, &quot;scope&quot;=&gt;&quot;am&quot;}
Read fragment views/localhost:3000/sessions?type=full&amp;scope=am (0.8ms)
Rendered sessions/_header.haml (2.7ms)
Rendered sessions/_search.haml (171.8ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f0609c843161000001 (0.9ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f0609c843161000001 (1.5ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f3609c843161000003 (0.8ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f3609c843161000003 (0.7ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f6609c843161000005 (0.7ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f6609c843161000005 (0.6ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f7609c843161000006 (0.9ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f7609c843161000006 (1.1ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f9609c843161000007 (0.8ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f9609c843161000007 (0.7ms)
@@@

...And so forth.  My observation is that on a cache hit, the `ActionView::Helpers::CacheHelper#cache` method has two steps (underneath various layers of abstraction) of approximately equal duration:

1. Call the underlying cache store's `#exist?` method
2. Perform a `#read` to get the content

However, this is redundant because the `#exist?` method calls the same lower-level `#read_entry` method that `#read` does!  We're retrieving the exact same value from the cache store _twice._  The first time we return a true or false and throw the value away; the second time, we keep the value.

This is an obvious candidate for refactoring.  Every cache store has consistent behavior on `#read` that returns nil in the event of a cache miss.  It'd be very easy to skip the existence test and simply call the execute-and-write code if the read doesn't return a value.

I'll submit a patch for this presently.  I just wanted to register the issue first.  For complex pages with many fragment hits, this has the potential to nearly double rendering performance.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have a simple app that displays the schedule and session
details for a large conference. With potentially hundreds of
partials displayed on a single page, it was a natural candidate for
fragment caching. The caching works fine, but I noticed this
redundancy in the logs:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Started GET &quot;/sessions?type=full&amp;amp;scope=am&quot; for 127.0.0.1 at 2010-08-30 23:36:51 -0400
  Processing by SessionsController#index as HTML
  Parameters: {&quot;type&quot;=&amp;gt;&quot;full&quot;, &quot;scope&quot;=&amp;gt;&quot;am&quot;}
Read fragment views/localhost:3000/sessions?type=full&amp;amp;scope=am (0.8ms)
Rendered sessions/_header.haml (2.7ms)
Rendered sessions/_search.haml (171.8ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f0609c843161000001 (0.9ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f0609c843161000001 (1.5ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f3609c843161000003 (0.8ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f3609c843161000003 (0.7ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f6609c843161000005 (0.7ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f6609c843161000005 (0.6ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f7609c843161000006 (0.9ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f7609c843161000006 (1.1ms)
Exist fragment? views/localhost:3000/sessions?id=4c5c40f9609c843161000007 (0.8ms)
Read fragment views/localhost:3000/sessions?id=4c5c40f9609c843161000007 (0.7ms)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;...And so forth. My observation is that on a cache hit, the
&lt;code&gt;ActionView::Helpers::CacheHelper#cache&lt;/code&gt; method has two
steps (underneath various layers of abstraction) of approximately
equal duration:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call the underlying cache store's &lt;code&gt;#exist?&lt;/code&gt;
method&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Perform a &lt;code&gt;#read&lt;/code&gt; to get the content&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, this is redundant because the &lt;code&gt;#exist?&lt;/code&gt;
method calls the same lower-level &lt;code&gt;#read_entry&lt;/code&gt; method
that &lt;code&gt;#read&lt;/code&gt; does! We're retrieving the exact same value
from the cache store &lt;em&gt;twice.&lt;/em&gt; The first time we return a
true or false and throw the value away; the second time, we keep
the value.&lt;/p&gt;
&lt;p&gt;This is an obvious candidate for refactoring. Every cache store
has consistent behavior on &lt;code&gt;#read&lt;/code&gt; that returns nil in
the event of a cache miss. It'd be very easy to skip the existence
test and simply call the execute-and-write code if the read doesn't
return a value.&lt;/p&gt;
&lt;p&gt;I'll submit a patch for this presently. I just wanted to
register the issue first. For complex pages with many fragment
hits, this has the potential to nearly double rendering
performance.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-31T05:12:48+01:00</created-at>
      <creator-id type="integer">18818</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5506</number>
      <permalink>actionview-cache-helper-is-inefficient</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionview cache performance_test perform_caching view_helpers</tag>
      <title>ActionView cache helper is inefficient</title>
      <updated-at type="datetime">2010-08-31T05:12:52+01:00</updated-at>
      <user-id type="integer">18818</user-id>
      <version type="integer">1</version>
      <user-name>Stephen Eley</user-name>
      <creator-name>Stephen Eley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5506</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Patch please!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Patch please!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-01T23:29:23+01:00</created-at>
      <creator-id type="integer">18818</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5506</number>
      <permalink>actionview-cache-helper-is-inefficient</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionview cache performance_test perform_caching view_helpers</tag>
      <title>ActionView cache helper is inefficient</title>
      <updated-at type="datetime">2010-09-01T23:29:25+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">2</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Stephen Eley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5506</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Stephen : nice catch.

@@@ ruby
      # Return true if the cache contains an entry for the given key.
      #
      # Options are passed to the underlying cache implementation.
      def exist?(name, options = nil)
        options = merged_options(options)
        instrument(:exist?, name) do |payload|
          entry = read_entry(namespaced_key(name, options), options)
          puts entry.inspect
          if entry &amp;&amp; !entry.expired?
            true
          else
            false
          end
        end
      end

@@@

Above method which is declared in AS cache.rb does get hold of the entire cached payload. 

However there is one thing to notice. This is an API for these storage types.

@@@ ruby
#   config.action_controller.cache_store = :memory_store
#   config.action_controller.cache_store = :file_store, &quot;/path/to/cache/directory&quot;
#   config.action_controller.cache_store = :drb_store, &quot;druby://localhost:9192&quot;
#   config.action_controller.cache_store = :mem_cache_store, &quot;localhost&quot;
#   config.action_controller.cache_store = :mem_cache_store, Memcached::Rails.new(&quot;localhost:11211&quot;)
#   config.action_controller.cache_store = MyOwnStore.new(&quot;parameter&quot;)
@@@

If you change the code in cache.rb to return the payload instead of true if there is content and use that value going forward then there is a possibility that a custom implementation of cache storage might be overriding 'def exist?' and might be returning true or false. In that case be using 'true' as the payload. 

I guess this fix is very much needed. However we should publish this change in API so that custom impelementation of cache is not caught off guard.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Stephen : nice catch.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;      # Return true if the cache contains an entry for the given key.
      #
      # Options are passed to the underlying cache implementation.
      def exist?(name, options = nil)
        options = merged_options(options)
        instrument(:exist?, name) do |payload|
          entry = read_entry(namespaced_key(name, options), options)
          puts entry.inspect
          if entry &amp;amp;&amp;amp; !entry.expired?
            true
          else
            false
          end
        end
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Above method which is declared in AS cache.rb does get hold of
the entire cached payload.&lt;/p&gt;
&lt;p&gt;However there is one thing to notice. This is an API for these
storage types.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;#   config.action_controller.cache_store = :memory_store
#   config.action_controller.cache_store = :file_store, &quot;/path/to/cache/directory&quot;
#   config.action_controller.cache_store = :drb_store, &quot;druby://localhost:9192&quot;
#   config.action_controller.cache_store = :mem_cache_store, &quot;localhost&quot;
#   config.action_controller.cache_store = :mem_cache_store, Memcached::Rails.new(&quot;localhost:11211&quot;)
#   config.action_controller.cache_store = MyOwnStore.new(&quot;parameter&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you change the code in cache.rb to return the payload instead
of true if there is content and use that value going forward then
there is a possibility that a custom implementation of cache
storage might be overriding 'def exist?' and might be returning
true or false. In that case be using 'true' as the payload.&lt;/p&gt;
&lt;p&gt;I guess this fix is very much needed. However we should publish
this change in API so that custom impelementation of cache is not
caught off guard.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-02T04:48:56+01:00</created-at>
      <creator-id type="integer">18818</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5506</number>
      <permalink>actionview-cache-helper-is-inefficient</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>actionview cache performance_test perform_caching view_helpers</tag>
      <title>ActionView cache helper is inefficient</title>
      <updated-at type="datetime">2010-09-02T04:49:00+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">3</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Stephen Eley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5506</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:49:09+00:00</created-at>
      <creator-id type="integer">18818</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5506</number>
      <permalink>actionview-cache-helper-is-inefficient</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>actionview cache performance_test perform_caching view_helpers</tag>
      <title>ActionView cache helper is inefficient</title>
      <updated-at type="datetime">2011-02-02T18:08:34+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Stephen Eley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5506</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:49:11+00:00</created-at>
      <creator-id type="integer">18818</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5506</number>
      <permalink>actionview-cache-helper-is-inefficient</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>actionview cache performance_test perform_caching view_helpers</tag>
      <title>ActionView cache helper is inefficient</title>
      <updated-at type="datetime">2011-02-02T18:08:48+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Stephen Eley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5506</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
