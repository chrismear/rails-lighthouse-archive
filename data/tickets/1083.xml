<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">6</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-21T01:13:21+01:00</created-at>
  <creator-id type="integer">29892</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">1083</number>
  <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
  <priority type="integer">10</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord patch tested</tag>
  <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
  <updated-at type="datetime">2009-01-25T02:28:05+00:00</updated-at>
  <user-id type="integer">141</user-id>
  <version type="integer">23</version>
  <user-name>Michael Koziarski</user-name>
  <creator-name>Adam Milligan</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
  <priority-name nil="true"></priority-name>
  <original-body>From core discussion thread http://groups.google.com/group/rubyonrails-core/browse_thread/thread/1b1b1a9fbe420e85?hl=en

The problem in a nutshell:

class Fork &lt; ActiveRecord::Base
  has_many :tines

  private
  def stab_stab_stab
    ...
  end
end

class Tine &lt; ActiveRecord::Base
  belongs_to :fork
end

fork.stab_stab_stab # NoMethodError
tine.fork.stab_stab_stab # no exception

With this patch, calls to private methods will act consistently when called on association proxies (including when called with #send).

Tests included.</original-body>
  <latest-body>From core discussion thread http://groups.google.com/group/rubyonrails-core/browse_thread/thread/1b1b1a9fbe420e85?hl=en

The problem in a nutshell:

class Fork &lt; ActiveRecord::Base
  has_many :tines

  private
  def stab_stab_stab
    ...
  end
end

class Tine &lt; ActiveRecord::Base
  belongs_to :fork
end

fork.stab_stab_stab # NoMethodError
tine.fork.stab_stab_stab # no exception

With this patch, calls to private methods will act consistently when called on association proxies (including when called with #send).

Tests included.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;From core discussion thread &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/1b1b1a9fbe420e85?hl=en&quot;&gt;
http://groups.google.com/group/r...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The problem in a nutshell:&lt;/p&gt;
&lt;p&gt;class Fork &amp;lt; ActiveRecord::Base has_many :tines&lt;/p&gt;
&lt;p&gt;private def stab_stab_stab&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;class Tine &amp;lt; ActiveRecord::Base belongs_to :fork end&lt;/p&gt;
&lt;p&gt;fork.stab_stab_stab # NoMethodError tine.fork.stab_stab_stab #
no exception&lt;/p&gt;
&lt;p&gt;With this patch, calls to private methods will act consistently
when called on association proxies (including when called with
#send).&lt;/p&gt;
&lt;p&gt;Tests included.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>From core discussion thread http://groups.google.com/group/rubyonrails-core/browse_thread/thread/1b1b1a9fbe420e85?hl=en

The problem in a nutshell:

class Fork &lt; ActiveRecord::Base
  has_many :tines

  private
  def stab_stab_stab
    ...
  end
end

class Tine &lt; ActiveRecord::Base
  belongs_to :fork
end

fork.stab_stab_stab # NoMethodError
tine.fork.stab_stab_stab # no exception

With this patch, calls to private methods will act consistently when called on association proxies (including when called with #send).

Tests included.</body>
      <body-html>&lt;div&gt;&lt;p&gt;From core discussion thread &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/1b1b1a9fbe420e85?hl=en&quot;&gt;
http://groups.google.com/group/r...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The problem in a nutshell:&lt;/p&gt;
&lt;p&gt;class Fork &amp;lt; ActiveRecord::Base has_many :tines&lt;/p&gt;
&lt;p&gt;private def stab_stab_stab&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;class Tine &amp;lt; ActiveRecord::Base belongs_to :fork end&lt;/p&gt;
&lt;p&gt;fork.stab_stab_stab # NoMethodError tine.fork.stab_stab_stab #
no exception&lt;/p&gt;
&lt;p&gt;With this patch, calls to private methods will act consistently
when called on association proxies (including when called with
#send).&lt;/p&gt;
&lt;p&gt;Tests included.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-21T01:13:21+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-09-21T01:13:26+01:00</updated-at>
      <user-id type="integer">29892</user-id>
      <version type="integer">1</version>
      <user-name>Adam Milligan</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@@@ ruby
private_methods.include?(method.to_s)
@@@

is likely to fail on ruby 1.9 due to method name arrays containing symbols there.</body>
      <body-html>&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
private_methods.include?(method.to_s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is likely to fail on ruby 1.9 due to method name arrays
containing symbols there.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-21T05:52:37+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-09-21T05:52:41+01:00</updated-at>
      <user-id type="integer">14890</user-id>
      <version type="integer">2</version>
      <user-name>Tarmo T&#228;nav</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here is a new patch with some documentation for the somewhat non-obvious decoration of #send in AssociationProxy, and some unnecessary white space removed.  I also rebased to the current master commit.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is a new patch with some documentation for the somewhat
non-obvious decoration of #send in AssociationProxy, and some
unnecessary white space removed. I also rebased to the current
master commit.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-26T07:11:00+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-09-26T07:11:04+01:00</updated-at>
      <user-id type="integer">29892</user-id>
      <version type="integer">3</version>
      <user-name>Adam Milligan</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Can you squash this down to a single changeset please?  Also, perhaps you can just define the private method in the fixture model files themselves rather than the test cases.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can you squash this down to a single changeset please? Also,
perhaps you can just define the private method in the fixture model
files themselves rather than the test cases.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-29T16:45:32+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-09-29T16:45:37+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">4</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sorry for the delay on this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry for the delay on this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-05T00:13:25+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-05T00:13:27+01:00</updated-at>
      <user-id type="integer">29892</user-id>
      <version type="integer">5</version>
      <user-name>Adam Milligan</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I don't quite follow why you need to use alias_method_chain there?

Also:

@@@
-            quote_value(@owner.send(@reflection.options[:primary_key]))
+            @owner.class.quote_value(@owner.send(@reflection.options[:primary_key]))
@@@

That change seems unrelated?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't quite follow why you need to use alias_method_chain
there?&lt;/p&gt;
&lt;p&gt;Also:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
-            quote_value(@owner.send(@reflection.options[:primary_key]))
+            @owner.class.quote_value(@owner.send(@reflection.options[:primary_key]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That change seems unrelated?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-07T21:22:30+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-07T21:22:32+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">6</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Please review this new patch. Will apply tomorrow if no one objects by then.

@Koz quote_value was triggering method_missing, hence that change.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please review this new patch. Will apply tomorrow if no one
objects by then.&lt;/p&gt;
&lt;p&gt;@Koz quote_value was triggering method_missing, hence that
change.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-08T00:07:01+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-08T00:07:03+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">7</version>
      <user-name>Pratik</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>(from [691aa20280456c332bfaaf69b58adc86fd86a2b8]) Ensure methods called on association proxies respect access control. [#1083 state:resolved] [Adam Milligan, Pratik]
http://github.com/rails/rails/commit/691aa20280456c332bfaaf69b58adc86fd86a2b8</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [691aa20280456c332bfaaf69b58adc86fd86a2b8]) Ensure methods
called on association proxies respect access control. [&lt;a href=&quot;/projects/8994/tickets/1083&quot; title=&quot;Ticket #1083&quot;&gt;#1083&lt;/a&gt;
state:resolved] [Adam Milligan, Pratik] &lt;a href=&quot;http://github.com/rails/rails/commit/691aa20280456c332bfaaf69b58adc86fd86a2b8&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-13T18:04:54+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-13T18:04:57+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>This has had the following unfortunate effect

(using the example in comments above)

@@@
  fork.tines.new  # =&gt; fine, builds a tine in fork scope

  fork.tines.send(:new)

  NoMethodError: undefined method `new' for []:Array
@@@

In practical terms, this means that it's now difficult to simply proxy to an association proxy (I do this in the resources_controller where resource_service is a proxy for a class, association_proxy, or something else)</body>
      <body-html>&lt;div&gt;&lt;p&gt;This has had the following unfortunate effect&lt;/p&gt;
&lt;p&gt;(using the example in comments above)&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
  fork.tines.new  # =&amp;gt; fine, builds a tine in fork scope

  fork.tines.send(:new)

  NoMethodError: undefined method `new' for []:Array
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In practical terms, this means that it's now difficult to simply
proxy to an association proxy (I do this in the
resources_controller where resource_service is a proxy for a class,
association_proxy, or something else)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-14T00:01:23+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-14T00:01:25+01:00</updated-at>
      <user-id type="integer">1023</user-id>
      <version type="integer">9</version>
      <user-name>Ian White</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>@Ian : Ouch. Can you think of any way to fix that ? If not, I might as well revert this for 2.2.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Ian : Ouch. Can you think of any way to fix that ? If not, I
might as well revert this for 2.2.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-14T08:54:06+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 141
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-14T08:54:07+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">10</version>
      <user-name>Pratik</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>The new implementation of send forwards to the @target when the proxy doesn't respond to the method.

This is a problem if the proxy itself uses method_missing to do stuff (like construct scopes and forward the method to the association class - the problem I noted above).

I've attached a fix for this, with a test for the above problem.  Caveat: I haven't looked at performance, or other issues - just fixed the problem introduced in the changset. If you want to revert the entire changeset, that's fine by me.

Cheers,
Ian</body>
      <body-html>&lt;div&gt;&lt;p&gt;The new implementation of send forwards to the @target when the
proxy doesn't respond to the method.&lt;/p&gt;
&lt;p&gt;This is a problem if the proxy itself uses method_missing to do
stuff (like construct scopes and forward the method to the
association class - the problem I noted above).&lt;/p&gt;
&lt;p&gt;I've attached a fix for this, with a test for the above problem.
Caveat: I haven't looked at performance, or other issues - just
fixed the problem introduced in the changset. If you want to revert
the entire changeset, that's fine by me.&lt;/p&gt;
&lt;p&gt;Cheers, Ian&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-16T01:43:23+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-16T01:43:26+01:00</updated-at>
      <user-id type="integer">1023</user-id>
      <version type="integer">11</version>
      <user-name>Ian White</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>I just realised that a smarter fix would be to make AssociationCollection#proxy_respond_to? do the work, and leave send untouched.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just realised that a smarter fix would be to make
AssociationCollection#proxy_respond_to? do the work, and leave send
untouched.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-16T01:53:36+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-16T01:53:40+01:00</updated-at>
      <user-id type="integer">1023</user-id>
      <version type="integer">12</version>
      <user-name>Ian White</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>Here's a better patch, with the same test, but the fix outlined in the above comment.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here's a better patch, with the same test, but the fix outlined
in the above comment.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-16T02:03:04+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-16T02:03:08+01:00</updated-at>
      <user-id type="integer">1023</user-id>
      <version type="integer">13</version>
      <user-name>Ian White</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>(from [517bc500ed95a84fd2aadff34fdc14cb7965bc6b]) Allow class methods to be sent (via #send) to association proxy (fix for bug introduced by 691aa20) [#1083]

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/517bc500ed95a84fd2aadff34fdc14cb7965bc6b</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [517bc500ed95a84fd2aadff34fdc14cb7965bc6b]) Allow class
methods to be sent (via #send) to association proxy (fix for bug
introduced by 691aa20) [&lt;a href=&quot;/projects/8994/tickets/1083&quot; title=&quot;Ticket #1083&quot;&gt;#1083&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Pratik Naik &lt;a href=&quot;mailto:pratiknaik@gmail.com&quot;&gt;pratiknaik@gmail.com&lt;/a&gt; &lt;a href=&quot;http://github.com/rails/rails/commit/517bc500ed95a84fd2aadff34fdc14cb7965bc6b&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-16T09:43:16+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-16T09:43:20+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">14</version>
      <user-name>Repository</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-16T10:26:37+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-16T10:26:43+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">15</version>
      <user-name>Pratik</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>(from [95c609357e78106e9673931d3f60d8ff3cc0a0cd]) Ensure association proxy responds to private class methods defined in associated class. [#1083]
http://github.com/rails/rails/commit/95c609357e78106e9673931d3f60d8ff3cc0a0cd</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [95c609357e78106e9673931d3f60d8ff3cc0a0cd]) Ensure
association proxy responds to private class methods defined in
associated class. [&lt;a href=&quot;/projects/8994/tickets/1083&quot; title=&quot;Ticket #1083&quot;&gt;#1083&lt;/a&gt;] &lt;a href=&quot;http://github.com/rails/rails/commit/95c609357e78106e9673931d3f60d8ff3cc0a0cd&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-16T22:24:27+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-10-16T22:24:31+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">16</version>
      <user-name>Repository</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>We just ran into a problem with this, since you are relying on responds_to? anything that is done using method missing on the proxy_target is no longer directly callable through the proxy.</body>
      <body-html>&lt;div&gt;&lt;p&gt;We just ran into a problem with this, since you are relying on
responds_to? anything that is done using method missing on the
proxy_target is no longer directly callable through the proxy.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-22T19:06:23+00:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-12-22T19:06:28+00:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">17</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>I am running into the same problem as Joseph.  I can't access any of my method_missing functionality through the proxy.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am running into the same problem as Joseph. I can't access any
of my method_missing functionality through the proxy.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-28T22:05:37+00:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-12-28T22:05:39+00:00</updated-at>
      <user-id type="integer">25655</user-id>
      <version type="integer">18</version>
      <user-name>Christopher J. Bottaro</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>If you override method_missing in ruby, it's good practise for you to
override respond_to? also.  If you fix that, everything will continue
working.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you override method_missing in ruby, it's good practise for
you to override respond_to? also. If you fix that, everything will
continue working.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-28T22:14:29+00:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-12-28T22:14:30+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">19</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>I've submitted a fix for this problem in [this ticket](http://rails.lighthouseapp.com/projects/8994/tickets/1643-association-proxies-should-correctly-respond-to-method-defined-via-method_missing).  However, upon reflection, I think I like Koz's suggestions better.  The target object should respond correctly when interrogated about its capabilities.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've submitted a fix for this problem in &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/1643-association-proxies-should-correctly-respond-to-method-defined-via-method_missing&quot;&gt;
this ticket&lt;/a&gt;. However, upon reflection, I think I like Koz's
suggestions better. The target object should respond correctly when
interrogated about its capabilities.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-28T23:02:59+00:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-12-28T23:03:02+00:00</updated-at>
      <user-id type="integer">29892</user-id>
      <version type="integer">20</version>
      <user-name>Adam Milligan</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>I agree in the ideal world that if you override method_missing, you should override respond_to?, but that doesn't really help with the plugins that I'm using that don't do this.  Now I have a bunch of &quot;object&quot;.&quot;association&quot;.proxy_target.&quot;method_missing_method&quot; in my code.  It's either that or I start monkey patching code.

I'm in favor of Adam's patch.  It'd be nice if there were a way to use Adam's patch, but also throw a warning if method_missing implements something not found in respond_to?, but I can't really see a way of doing that without throwing false warnings when you really call a method that doesn't exist on accident.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree in the ideal world that if you override method_missing,
you should override respond_to?, but that doesn't really help with
the plugins that I'm using that don't do this. Now I have a bunch
of &quot;object&quot;.&quot;association&quot;.proxy_target.&quot;method_missing_method&quot; in
my code. It's either that or I start monkey patching code.&lt;/p&gt;
&lt;p&gt;I'm in favor of Adam's patch. It'd be nice if there were a way
to use Adam's patch, but also throw a warning if method_missing
implements something not found in respond_to?, but I can't really
see a way of doing that without throwing false warnings when you
really call a method that doesn't exist on accident.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-30T07:24:13+00:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2008-12-30T07:24:17+00:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">21</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>Koz, I was pulling my hair out until I came across this ticket.  I definitely agree, if you implement method_missing, you should likewise implement respond_to.

However, I think there should be a strong caveat about this in the documentation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Koz, I was pulling my hair out until I came across this ticket.
I definitely agree, if you implement method_missing, you should
likewise implement respond_to.&lt;/p&gt;
&lt;p&gt;However, I think there should be a strong caveat about this in
the documentation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-24T23:50:15+00:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2009-01-24T23:50:16+00:00</updated-at>
      <user-id type="integer">23078</user-id>
      <version type="integer">22</version>
      <user-name>Pete P.</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>Pete,

If you'd like to have a go at a patch for the documentation, I'll take
a look.  someone who was bitten by this is the right person to write
the warning :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Pete,&lt;/p&gt;
&lt;p&gt;If you'd like to have a go at a patch for the documentation,
I'll take a look. someone who was bitten by this is the right
person to write the warning :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-25T02:28:04+00:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1083</number>
      <permalink>calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord patch tested</tag>
      <title>Calls to private methods via association proxies should act consistently with Ruby method dispatch</title>
      <updated-at type="datetime">2009-01-25T02:28:05+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">23</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1083</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>cca23bebb65948e5092c88105eec99677c5c2c72</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-21T01:13:22+01:00</created-at>
      <filename>proxy_privates.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">47434</id>
      <size type="integer">9257</size>
      <uploader-id type="integer">29892</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/47434/proxy_privates.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>d527347f0ad1007c4d83d6344c204e3b026ede25</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-26T07:11:00+01:00</created-at>
      <filename>proxy_privates.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">48831</id>
      <size type="integer">14503</size>
      <uploader-id type="integer">29892</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/48831/proxy_privates.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>de7df511d98d95f0a39efef45aca2cda55465f0e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-05T00:13:25+01:00</created-at>
      <filename>proxy_privates.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">51378</id>
      <size type="integer">7339</size>
      <uploader-id type="integer">29892</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/51378/proxy_privates.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>d6630afe6c1b54fbfab01b27e2ef5907f60e5487</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-08T00:07:01+01:00</created-at>
      <filename>private_proxy_methods.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">52224</id>
      <size type="integer">5689</size>
      <uploader-id type="integer">1366</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/52224/private_proxy_methods.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>19146a1a93616520e7d103d4b512bbe1745bf049</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-16T01:43:24+01:00</created-at>
      <filename>Allow-singleton-methods-sent-to-association-proxy.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">54464</id>
      <size type="integer">1750</size>
      <uploader-id type="integer">1023</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/54464/Allow-singleton-methods-sent-to-association-proxy.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>d9bbb79e1f5ce2fa356915b5093e032ebac8a173</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-16T02:03:04+01:00</created-at>
      <filename>Allow-class-methods-to-be-sent-to-assoc-proxy.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">54467</id>
      <size type="integer">1756</size>
      <uploader-id type="integer">1023</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/54467/Allow-class-methods-to-be-sent-to-assoc-proxy.patch</url>
    </attachment>
  </attachments>
</ticket>
