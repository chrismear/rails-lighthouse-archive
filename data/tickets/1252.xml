<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-22T23:36:55+01:00</created-at>
  <creator-id type="integer">28420</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1252</number>
  <permalink>bad-self-referential-habtm-associations-should-fail-fast</permalink>
  <priority type="integer">657</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord enhancement has_and_belongs_to_many patch</tag>
  <title>Bad self referential HABTM associations should fail fast.</title>
  <updated-at type="datetime">2009-03-06T18:28:17+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">6</version>
  <user-name>Repository</user-name>
  <creator-name>Tom Lea</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1252</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Self referential HABTM associations should not be allowed to be created unless the association_foreign_key has been manually assigned.

If this is not prevented, we end up with an join table which has only one column, which is referenced twice... causing odd and confusing results (which caused me a headache!).

This patch causes trying to do this to fail fast, saving on debug time.


Rough Example:

@@ruby

class Person &lt; AR::Base
	habtm :friends, :join_table =&gt; :person_friend_pairings
end

alice = Person.create! :name =&gt; &quot;Alice&quot;  # id =&gt; 1
bob = Person.create! :name =&gt; &quot;Bob&quot;		 # id =&gt; 2
alice.friends &lt;&lt; bob

alice.reload
alice.friends.to_a # SELECT * FROM person_friend_pairings where person_id = 1 and person_id = 2

@@

Tagged as an enhancement, but could be a bug... feel free to change it.</original-body>
  <latest-body>Self referential HABTM associations should not be allowed to be created unless the association_foreign_key has been manually assigned.

If this is not prevented, we end up with an join table which has only one column, which is referenced twice... causing odd and confusing results (which caused me a headache!).

This patch causes trying to do this to fail fast, saving on debug time.


Rough Example:

@@ruby

class Person &lt; AR::Base
	habtm :friends, :join_table =&gt; :person_friend_pairings
end

alice = Person.create! :name =&gt; &quot;Alice&quot;  # id =&gt; 1
bob = Person.create! :name =&gt; &quot;Bob&quot;		 # id =&gt; 2
alice.friends &lt;&lt; bob

alice.reload
alice.friends.to_a # SELECT * FROM person_friend_pairings where person_id = 1 and person_id = 2

@@

Tagged as an enhancement, but could be a bug... feel free to change it.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Self referential HABTM associations should not be allowed to be
created unless the association_foreign_key has been manually
assigned.&lt;/p&gt;
&lt;p&gt;If this is not prevented, we end up with an join table which has
only one column, which is referenced twice... causing odd and
confusing results (which caused me a headache!).&lt;/p&gt;
&lt;p&gt;This patch causes trying to do this to fail fast, saving on
debug time.&lt;/p&gt;
&lt;p&gt;Rough Example:&lt;/p&gt;
&lt;p&gt;@@ruby&lt;/p&gt;
&lt;p&gt;class Person &amp;lt; AR::Base&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;habtm :friends, :join_table =&amp;gt; :person_friend_pairings
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;alice = Person.create! :name =&amp;gt; &quot;Alice&quot; # id =&amp;gt; 1 bob =
Person.create! :name =&amp;gt; &quot;Bob&quot; # id =&amp;gt; 2 alice.friends
&amp;lt;&amp;lt; bob&lt;/p&gt;
&lt;p&gt;alice.reload alice.friends.to_a # SELECT * FROM
person_friend_pairings where person_id = 1 and person_id = 2&lt;/p&gt;
&lt;p&gt;@@&lt;/p&gt;
&lt;p&gt;Tagged as an enhancement, but could be a bug... feel free to
change it.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Self referential HABTM associations should not be allowed to be created unless the association_foreign_key has been manually assigned.

If this is not prevented, we end up with an join table which has only one column, which is referenced twice... causing odd and confusing results (which caused me a headache!).

This patch causes trying to do this to fail fast, saving on debug time.

Rough Example:
@@@ ruby
class Person &lt; AR::Base
	habtm :friends, :join_table =&gt; :person_friend_pairings
end

alice = Person.create! :name =&gt; &quot;Alice&quot;  # id =&gt; 1
bob = Person.create! :name =&gt; &quot;Bob&quot;		 # id =&gt; 2
alice.friends &lt;&lt; bob

alice.reload
alice.friends.to_a # SELECT * FROM person_friend_pairings where person_id = 2
@@@

Tagged as an enhancement, but could be a bug... feel free to change it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Self referential HABTM associations should not be allowed to be
created unless the association_foreign_key has been manually
assigned.&lt;/p&gt;
&lt;p&gt;If this is not prevented, we end up with an join table which has
only one column, which is referenced twice... causing odd and
confusing results (which caused me a headache!).&lt;/p&gt;
&lt;p&gt;This patch causes trying to do this to fail fast, saving on
debug time.&lt;/p&gt;
&lt;p&gt;Rough Example:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Person &amp;lt; AR::Base
	habtm :friends, :join_table =&amp;gt; :person_friend_pairings
end

alice = Person.create! :name =&amp;gt; &amp;quot;Alice&amp;quot;  # id =&amp;gt; 1
bob = Person.create! :name =&amp;gt; &amp;quot;Bob&amp;quot;		 # id =&amp;gt; 2
alice.friends &amp;lt;&amp;lt; bob

alice.reload
alice.friends.to_a # SELECT * FROM person_friend_pairings where person_id = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tagged as an enhancement, but could be a bug... feel free to
change it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-22T23:36:55+01:00</created-at>
      <creator-id type="integer">28420</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1252</number>
      <permalink>bad-self-referential-habtm-associations-should-fail-fast</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement has_and_belongs_to_many patch</tag>
      <title>Bad self referential HABTM associations should fail fast.</title>
      <updated-at type="datetime">2008-10-27T19:16:22+00:00</updated-at>
      <user-id type="integer">28420</user-id>
      <version type="integer">1</version>
      <user-name>Tom Lea</user-name>
      <creator-name>Tom Lea</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1252</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>isn't this because the habtm isn't set up properly? don't you need to identify the names of the foreign_key and association_foreign_key ?

Sounds invalid to me.</body>
      <body-html>&lt;div&gt;&lt;p&gt;isn't this because the habtm isn't set up properly? don't you
need to identify the names of the foreign_key and
association_foreign_key ?&lt;/p&gt;
&lt;p&gt;Sounds invalid to me.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-27T17:16:20+00:00</created-at>
      <creator-id type="integer">28420</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1252</number>
      <permalink>bad-self-referential-habtm-associations-should-fail-fast</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement has_and_belongs_to_many patch</tag>
      <title>Bad self referential HABTM associations should fail fast.</title>
      <updated-at type="datetime">2008-10-27T17:16:23+00:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">2</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Tom Lea</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1252</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Indeed it is... but the fact that it pretends to work is the issue.

The whole thing seems to work just fine, we were several unit tests in before it started behaving oddly. Anyone who tests less thoroughly than we do here could well be cough out.

The patch makes it fail fast, not start magically guessing things.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Indeed it is... but the fact that it pretends to work is the
issue.&lt;/p&gt;
&lt;p&gt;The whole thing seems to work just fine, we were several unit
tests in before it started behaving oddly. Anyone who tests less
thoroughly than we do here could well be cough out.&lt;/p&gt;
&lt;p&gt;The patch makes it fail fast, not start magically guessing
things.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-27T17:48:06+00:00</created-at>
      <creator-id type="integer">28420</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1252</number>
      <permalink>bad-self-referential-habtm-associations-should-fail-fast</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement has_and_belongs_to_many patch</tag>
      <title>Bad self referential HABTM associations should fail fast.</title>
      <updated-at type="datetime">2008-10-27T17:48:09+00:00</updated-at>
      <user-id type="integer">28420</user-id>
      <version type="integer">3</version>
      <user-name>Tom Lea</user-name>
      <creator-name>Tom Lea</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1252</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Ahh.

code looks clean, 
fail early, fail often.  +1</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ahh.&lt;/p&gt;
&lt;p&gt;code looks clean, fail early, fail often. +1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-27T20:20:26+00:00</created-at>
      <creator-id type="integer">28420</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1252</number>
      <permalink>bad-self-referential-habtm-associations-should-fail-fast</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement has_and_belongs_to_many patch</tag>
      <title>Bad self referential HABTM associations should fail fast.</title>
      <updated-at type="datetime">2008-10-27T20:20:29+00:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">4</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Tom Lea</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1252</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>New patch, error message was not as expected. Copied through relationship exception format by accident... oops.

Also rebased against HEAD while I was at it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;New patch, error message was not as expected. Copied through
relationship exception format by accident... oops.&lt;/p&gt;
&lt;p&gt;Also rebased against HEAD while I was at it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-28T00:41:48+00:00</created-at>
      <creator-id type="integer">28420</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1252</number>
      <permalink>bad-self-referential-habtm-associations-should-fail-fast</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement has_and_belongs_to_many patch</tag>
      <title>Bad self referential HABTM associations should fail fast.</title>
      <updated-at type="datetime">2008-10-28T00:41:52+00:00</updated-at>
      <user-id type="integer">28420</user-id>
      <version type="integer">5</version>
      <user-name>Tom Lea</user-name>
      <creator-name>Tom Lea</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1252</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [c896d56c6e5520346c260477f7d7f8bf951e72cc]) Ensure self referential HABTM associations raise an exception if association_foreign_key is missing. [#1252 state:resolved]

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/c896d56c6e5520346c260477f7d7f8bf951e72cc</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [c896d56c6e5520346c260477f7d7f8bf951e72cc]) Ensure self
referential HABTM associations raise an exception if
association_foreign_key is missing. [&lt;a href=&quot;/projects/8994/tickets/1252&quot; title=&quot;Ticket #1252&quot;&gt;#1252&lt;/a&gt;
state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Pratik Naik &lt;a href=&quot;mailto:pratiknaik@gmail.com&quot;&gt;pratiknaik@gmail.com&lt;/a&gt; &lt;a href=&quot;http://github.com/rails/rails/commit/c896d56c6e5520346c260477f7d7f8bf951e72cc&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-06T18:28:16+00:00</created-at>
      <creator-id type="integer">28420</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1252</number>
      <permalink>bad-self-referential-habtm-associations-should-fail-fast</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord enhancement has_and_belongs_to_many patch</tag>
      <title>Bad self referential HABTM associations should fail fast.</title>
      <updated-at type="datetime">2009-03-06T18:28:17+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">6</version>
      <user-name>Repository</user-name>
      <creator-name>Tom Lea</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1252</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>b3c7489f7222e76be9206fb68dab42e52fc6bb3b</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-22T23:36:55+01:00</created-at>
      <filename>0001-Self-referential-HABTM-associations-should-not-be-al.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">56302</id>
      <size type="integer">3262</size>
      <uploader-id type="integer">28420</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/56302/0001-Self-referential-HABTM-associations-should-not-be-al.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>5448476c94226832e1f7e019c460153b4da96396</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-28T00:41:48+00:00</created-at>
      <filename>0002-Self-referential-HABTM-associations-should-not-be-al.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">57441</id>
      <size type="integer">3226</size>
      <uploader-id type="integer">28420</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/57441/0002-Self-referential-HABTM-associations-should-not-be-al.patch</url>
    </attachment>
  </attachments>
</ticket>
