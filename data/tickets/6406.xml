<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-10T18:05:01+00:00</created-at>
  <creator-id type="integer">120702</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6406</number>
  <permalink>activerecordxmlserializer-fails-with-has_one-types</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>&quot;3.x 2.3.10 bug patch&quot;</tag>
  <title>ActiveRecord::XmlSerializer fails with has_one types</title>
  <updated-at type="datetime">2011-02-10T18:05:05+00:00</updated-at>
  <user-id type="integer">120702</user-id>
  <version type="integer">1</version>
  <user-name>Christopher Thompson</user-name>
  <creator-name>Christopher Thompson</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6406</url>
  <priority-name nil="true"></priority-name>
  <original-body>This problem exists in Rails 2.3.10. Code inspection in 3-0-stable shows the problem also exists there, but I have not verified this. Below, I am discussing Rails 2.3.10.

ActiveRecord::XmlSerializer#add_associations does not properly deal with :has_one relationships. It fails to add the type of the associated data. Worse, if the container object uses STI, the :has_one associated data will claim to be the type of the container object.

Consider for example:

@@@
class Container &lt; ActiveRecord::Base
  has_many :sti_outer_objs
  
  def dump
    to_xml({:include=&gt;{:sti_outer_objs=&gt;{:include=&gt;{:sti_inner_obj=&gt;{}}}}})
  end
end

class StiOuterObj &lt; ActiveRecord::Base
  belongs_to :container
  has_one :sti_inner_obj
end

class StiOuterDerivedObj &lt; StiOuterObj
end

class StiInnerObj &lt; ActiveRecord::Base
  belongs_to :sti_outer_obj
end

class StiInnerDerivedObj &lt; StiInnerObj
end
@@@

Now, use the following hierarchy:

@@@
container -&gt; [sti_outer_derived] -&gt; sti_inner_derived
@@@

Calling container.dump will show that the generated XML claims that sti_inner_derived's type is &quot;StiOuterDerived&quot;.

The fix is simple and straightforward; we have to calculate the type of the :has_one data. Attached is a patch against Rails-2.3.10 which accomplishes this and solves the problem.

The patch does not apply against Rails 3.x, but I believe the modification is trivial.

I am happy to provide any additional information required.</original-body>
  <latest-body>This problem exists in Rails 2.3.10. Code inspection in 3-0-stable shows the problem also exists there, but I have not verified this. Below, I am discussing Rails 2.3.10.

ActiveRecord::XmlSerializer#add_associations does not properly deal with :has_one relationships. It fails to add the type of the associated data. Worse, if the container object uses STI, the :has_one associated data will claim to be the type of the container object.

Consider for example:

@@@
class Container &lt; ActiveRecord::Base
  has_many :sti_outer_objs
  
  def dump
    to_xml({:include=&gt;{:sti_outer_objs=&gt;{:include=&gt;{:sti_inner_obj=&gt;{}}}}})
  end
end

class StiOuterObj &lt; ActiveRecord::Base
  belongs_to :container
  has_one :sti_inner_obj
end

class StiOuterDerivedObj &lt; StiOuterObj
end

class StiInnerObj &lt; ActiveRecord::Base
  belongs_to :sti_outer_obj
end

class StiInnerDerivedObj &lt; StiInnerObj
end
@@@

Now, use the following hierarchy:

@@@
container -&gt; [sti_outer_derived] -&gt; sti_inner_derived
@@@

Calling container.dump will show that the generated XML claims that sti_inner_derived's type is &quot;StiOuterDerived&quot;.

The fix is simple and straightforward; we have to calculate the type of the :has_one data. Attached is a patch against Rails-2.3.10 which accomplishes this and solves the problem.

The patch does not apply against Rails 3.x, but I believe the modification is trivial.

I am happy to provide any additional information required.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This problem exists in Rails 2.3.10. Code inspection in
3-0-stable shows the problem also exists there, but I have not
verified this. Below, I am discussing Rails 2.3.10.&lt;/p&gt;
&lt;p&gt;ActiveRecord::XmlSerializer#add_associations does not properly
deal with :has_one relationships. It fails to add the type of the
associated data. Worse, if the container object uses STI, the
:has_one associated data will claim to be the type of the container
object.&lt;/p&gt;
&lt;p&gt;Consider for example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Container &amp;lt; ActiveRecord::Base
  has_many :sti_outer_objs
  
  def dump
    to_xml({:include=&amp;gt;{:sti_outer_objs=&amp;gt;{:include=&amp;gt;{:sti_inner_obj=&amp;gt;{}}}}})
  end
end

class StiOuterObj &amp;lt; ActiveRecord::Base
  belongs_to :container
  has_one :sti_inner_obj
end

class StiOuterDerivedObj &amp;lt; StiOuterObj
end

class StiInnerObj &amp;lt; ActiveRecord::Base
  belongs_to :sti_outer_obj
end

class StiInnerDerivedObj &amp;lt; StiInnerObj
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, use the following hierarchy:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;container -&amp;gt; [sti_outer_derived] -&amp;gt; sti_inner_derived&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Calling container.dump will show that the generated XML claims
that sti_inner_derived's type is &quot;StiOuterDerived&quot;.&lt;/p&gt;
&lt;p&gt;The fix is simple and straightforward; we have to calculate the
type of the :has_one data. Attached is a patch against Rails-2.3.10
which accomplishes this and solves the problem.&lt;/p&gt;
&lt;p&gt;The patch does not apply against Rails 3.x, but I believe the
modification is trivial.&lt;/p&gt;
&lt;p&gt;I am happy to provide any additional information required.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This problem exists in Rails 2.3.10. Code inspection in 3-0-stable shows the problem also exists there, but I have not verified this. Below, I am discussing Rails 2.3.10.

ActiveRecord::XmlSerializer#add_associations does not properly deal with :has_one relationships. It fails to add the type of the associated data. Worse, if the container object uses STI, the :has_one associated data will claim to be the type of the container object.

Consider for example:

@@@
class Container &lt; ActiveRecord::Base
  has_many :sti_outer_objs
  
  def dump
    to_xml({:include=&gt;{:sti_outer_objs=&gt;{:include=&gt;{:sti_inner_obj=&gt;{}}}}})
  end
end

class StiOuterObj &lt; ActiveRecord::Base
  belongs_to :container
  has_one :sti_inner_obj
end

class StiOuterDerivedObj &lt; StiOuterObj
end

class StiInnerObj &lt; ActiveRecord::Base
  belongs_to :sti_outer_obj
end

class StiInnerDerivedObj &lt; StiInnerObj
end
@@@

Now, use the following hierarchy:

@@@
container -&gt; [sti_outer_derived] -&gt; sti_inner_derived
@@@

Calling container.dump will show that the generated XML claims that sti_inner_derived's type is &quot;StiOuterDerived&quot;.

The fix is simple and straightforward; we have to calculate the type of the :has_one data. Attached is a patch against Rails-2.3.10 which accomplishes this and solves the problem.

The patch does not apply against Rails 3.x, but I believe the modification is trivial.

I am happy to provide any additional information required.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This problem exists in Rails 2.3.10. Code inspection in
3-0-stable shows the problem also exists there, but I have not
verified this. Below, I am discussing Rails 2.3.10.&lt;/p&gt;
&lt;p&gt;ActiveRecord::XmlSerializer#add_associations does not properly
deal with :has_one relationships. It fails to add the type of the
associated data. Worse, if the container object uses STI, the
:has_one associated data will claim to be the type of the container
object.&lt;/p&gt;
&lt;p&gt;Consider for example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Container &amp;lt; ActiveRecord::Base
  has_many :sti_outer_objs
  
  def dump
    to_xml({:include=&amp;gt;{:sti_outer_objs=&amp;gt;{:include=&amp;gt;{:sti_inner_obj=&amp;gt;{}}}}})
  end
end

class StiOuterObj &amp;lt; ActiveRecord::Base
  belongs_to :container
  has_one :sti_inner_obj
end

class StiOuterDerivedObj &amp;lt; StiOuterObj
end

class StiInnerObj &amp;lt; ActiveRecord::Base
  belongs_to :sti_outer_obj
end

class StiInnerDerivedObj &amp;lt; StiInnerObj
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, use the following hierarchy:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;container -&amp;gt; [sti_outer_derived] -&amp;gt; sti_inner_derived&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Calling container.dump will show that the generated XML claims
that sti_inner_derived's type is &quot;StiOuterDerived&quot;.&lt;/p&gt;
&lt;p&gt;The fix is simple and straightforward; we have to calculate the
type of the :has_one data. Attached is a patch against Rails-2.3.10
which accomplishes this and solves the problem.&lt;/p&gt;
&lt;p&gt;The patch does not apply against Rails 3.x, but I believe the
modification is trivial.&lt;/p&gt;
&lt;p&gt;I am happy to provide any additional information required.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-10T18:05:01+00:00</created-at>
      <creator-id type="integer">120702</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6406</number>
      <permalink>activerecordxmlserializer-fails-with-has_one-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;3.x 2.3.10 bug patch&quot;</tag>
      <title>ActiveRecord::XmlSerializer fails with has_one types</title>
      <updated-at type="datetime">2011-02-10T18:05:05+00:00</updated-at>
      <user-id type="integer">120702</user-id>
      <version type="integer">1</version>
      <user-name>Christopher Thompson</user-name>
      <creator-name>Christopher Thompson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6406</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>7d49b61a1bbf9546921a01e45a133106387ea3f2</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-10T18:05:01+00:00</created-at>
      <filename>xml_serializer.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">906511</id>
      <size type="integer">758</size>
      <uploader-id type="integer">120702</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/906511/xml_serializer.patch</url>
    </attachment>
  </attachments>
</ticket>
