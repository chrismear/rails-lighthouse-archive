From 6403436eb9f27142d718b54f66f0e5ee9d7ca4b9 Mon Sep 17 00:00:00 2001
From: Bart ten Brinke <info@retrosync.com>
Date: Wed, 25 Feb 2009 14:12:59 +0100
Subject: [PATCH] Added deflate, gzip support to active resource

---
 activeresource/lib/active_resource/connection.rb |    5 ++++
 activeresource/test/connection_test.rb           |   23 ++++++++++++++++++++-
 2 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/activeresource/lib/active_resource/connection.rb b/activeresource/lib/active_resource/connection.rb
index 85103b5..a087c96 100644
--- a/activeresource/lib/active_resource/connection.rb
+++ b/activeresource/lib/active_resource/connection.rb
@@ -142,6 +142,7 @@ module ActiveResource
 
 
     private
+
       # Makes request to remote service.
       def request(method, path, *arguments)
         logger.info "#{method.to_s.upcase} #{site.scheme}://#{site.host}:#{site.port}#{path}" if logger
@@ -155,6 +156,10 @@ module ActiveResource
 
       # Handles response and error codes from remote service.
       def handle_response(response)
+        if response.respond_to?(:header) && ["deflate", "gzip"].include?(response.header["content-encoding"])
+          response.instance_variable_set('@body', Zlib::Inflate.inflate(response.body))
+        end
+        
         case response.code.to_i
           when 301,302
             raise(Redirection.new(response))
diff --git a/activeresource/test/connection_test.rb b/activeresource/test/connection_test.rb
index 831fbc4..9e54c42 100644
--- a/activeresource/test/connection_test.rb
+++ b/activeresource/test/connection_test.rb
@@ -73,6 +73,25 @@ class ConnectionTest < Test::Unit::TestCase
     [199, 600].each do |code|
       assert_response_raises ActiveResource::ConnectionError, code
     end
+    
+  end
+  
+  def test_handle_response_gzipped
+    begin
+      require 'zlib'
+      test_string = '<chunky>bacon!</chunky>'
+    
+      mock_response = mock('Net::HTTPResponse')
+      mock_response.expects(:header).returns("content-encoding" => "deflate")
+      mock_response.instance_variable_set('@body', Zlib::Deflate.deflate(test_string))
+      mock_response.stubs(  :code => '200', :message => "OK",
+                            :content_type => "text/html",
+                            :body => Zlib::Deflate.deflate(test_string))
+
+      assert_equal test_string, handle_response(mock_response).instance_variable_get('@body')
+    rescue MissingSourceFile => e
+      puts "Skipping zlib test as Zlib library is missing"
+    end
   end
 
   ResponseHeaderStub = Struct.new(:code, :message, 'Allow')
@@ -181,8 +200,8 @@ class ConnectionTest < Test::Unit::TestCase
     path = '/people/1.xml'
     @http.expects(:get).with(path,  {'Accept' => 'application/xhtml+xml'}).returns(ActiveResource::Response.new(@matz, 200, {'Content-Type' => 'text/xhtml'}))
     assert_nothing_raised(Mocha::ExpectationError) { @conn.get(path, {'Accept' => 'application/xhtml+xml'}) }
-  end
-
+  end  
+  
   protected
     def assert_response_raises(klass, code)
       assert_raise(klass, "Expected response code #{code} to raise #{klass}") do
-- 
1.6.0.6

