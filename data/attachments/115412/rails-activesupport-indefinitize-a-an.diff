From ba114d14b338cb785972f43b01dc6dad59d779f1 Mon Sep 17 00:00:00 2001
From: Troy Davis <troy@sevenscale.com>
Date: Sun, 26 Apr 2009 12:26:01 -0700
Subject: [PATCH] Add indefininitize() to prepend 'a' or 'an' (indefinite article)
 No more "an listing" or "a Article".

---
 .../active_support/core_ext/string/inflections.rb  |   11 +++++++++++
 activesupport/lib/active_support/inflector.rb      |   11 +++++++++++
 activesupport/test/core_ext/string_ext_test.rb     |    8 ++++++++
 activesupport/test/inflector_test.rb               |    8 ++++++++
 activesupport/test/inflector_test_cases.rb         |    8 ++++++++
 5 files changed, 46 insertions(+), 0 deletions(-)

diff --git a/activesupport/lib/active_support/core_ext/string/inflections.rb b/activesupport/lib/active_support/core_ext/string/inflections.rb
index ea4ed61..865b12d 100644
--- a/activesupport/lib/active_support/core_ext/string/inflections.rb
+++ b/activesupport/lib/active_support/core_ext/string/inflections.rb
@@ -135,6 +135,17 @@ class String
     ActiveSupport::Inflector.humanize(self)
   end
 
+  # Prepends the correct indefinite article based on first letter (vowel or
+  # consonant).  Defaults to 'a' or 'an'.
+  #
+  #   "goat"            # => "a goat"
+  #   "original sin"    # => "an original sin"
+  #   "Bentley"         # => "a Bentley"
+  #   "e-mail"          # => "an e-mail"
+  def indefinitize(consonant = 'a', vowel = 'an')
+    ActiveSupport::Inflector.indefinitize(self, consonant, vowel)
+  end
+
   # Creates a foreign key name from a class name.
   # +separate_class_name_and_id_with_underscore+ sets whether
   # the method should put '_' between the name and 'id'.
diff --git a/activesupport/lib/active_support/inflector.rb b/activesupport/lib/active_support/inflector.rb
index ff70d6d..fbcac43 100644
--- a/activesupport/lib/active_support/inflector.rb
+++ b/activesupport/lib/active_support/inflector.rb
@@ -236,6 +236,17 @@ module ActiveSupport
       result.gsub(/_id$/, "").gsub(/_/, " ").capitalize
     end
 
+    # Prepends the correct indefinite article based on first letter (vowel or
+    # consonant).  Defaults to 'a' or 'an'.
+    #
+    # Examples:
+    #   "goat"            # => "a goat"
+    #   "original sin"    # => "an original sin"
+    def indefinitize(word, consonant = 'a', vowel = 'an')
+      result = word.to_s.dup
+      result.match(/^([aeiou])/i) ? "#{vowel} #{result}" : "#{consonant} #{result}"
+    end
+
     # Removes the module part from the expression in the string.
     #
     # Examples:
diff --git a/activesupport/test/core_ext/string_ext_test.rb b/activesupport/test/core_ext/string_ext_test.rb
index 237a843..fcef704 100644
--- a/activesupport/test/core_ext/string_ext_test.rb
+++ b/activesupport/test/core_ext/string_ext_test.rb
@@ -104,6 +104,14 @@ class StringInflectionsTest < Test::Unit::TestCase
     end
   end
 
+  def test_indefinitize
+    StringToIndefinitize.each do |before, indefinitized|
+      assert_equal(indefinitized, before.indefinitize)
+    end
+    assert_equal 'c conjoined twin', 'conjoined twin'.indefinitize('c', 'v')
+    assert_equal 'v elephant', 'elephant'.indefinitize('c', 'v')
+  end
+
   def test_ord
     assert_equal 97, 'a'.ord
     assert_equal 97, 'abc'.ord
diff --git a/activesupport/test/inflector_test.rb b/activesupport/test/inflector_test.rb
index 8c4d831..4cefab3 100644
--- a/activesupport/test/inflector_test.rb
+++ b/activesupport/test/inflector_test.rb
@@ -164,6 +164,14 @@ class InflectorTest < Test::Unit::TestCase
     assert_equal("Col rpted bugs", ActiveSupport::Inflector.humanize("COL_rpted_bugs"))
   end
 
+  def test_indefinitize
+    StringToIndefinitize.each do |before, indefinitized|
+      assert_equal(indefinitized, ActiveSupport::Inflector.indefinitize(before))
+    end
+    assert_equal 'c conjoined twin', ActiveSupport::Inflector.indefinitize('conjoined twin', 'c', 'v')
+    assert_equal 'v elephant', ActiveSupport::Inflector.indefinitize('elephant', 'c', 'v')
+  end
+
   def test_constantize
     assert_nothing_raised { assert_equal Ace::Base::Case, ActiveSupport::Inflector.constantize("Ace::Base::Case") }
     assert_nothing_raised { assert_equal Ace::Base::Case, ActiveSupport::Inflector.constantize("::Ace::Base::Case") }
diff --git a/activesupport/test/inflector_test_cases.rb b/activesupport/test/inflector_test_cases.rb
index 584cbff..77307fd 100644
--- a/activesupport/test/inflector_test_cases.rb
+++ b/activesupport/test/inflector_test_cases.rb
@@ -189,6 +189,14 @@ module InflectorTestCases
     "underground"     => "Underground"
   }
 
+  StringToIndefinitize = {
+    "goat"         => "a goat",
+    "original sin" => "an original sin",
+    "Bentley"      => "a Bentley",
+    "e-mail"       => "an e-mail",
+    "yeti"         => "a yeti"
+  }
+
   MixtureToTitleCase = {
     'active_record'       => 'Active Record',
     'ActiveRecord'        => 'Active Record',
-- 
1.5.4.1

