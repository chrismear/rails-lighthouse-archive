From 33797ee9559e3593fd321f19cf2e4a5e5689ed72 Mon Sep 17 00:00:00 2001
From: Don Wilson <robert.don.wilson@gmail.com>
Date: Fri, 17 Dec 2010 09:56:03 -0700
Subject: [PATCH] Fixed number_with_precision rounding error

---
 .../lib/action_view/helpers/number_helper.rb       |    5 +++--
 actionpack/test/template/number_helper_test.rb     |    5 +++++
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/number_helper.rb b/actionpack/lib/action_view/helpers/number_helper.rb
index a9400c3..26f8dce 100644
--- a/actionpack/lib/action_view/helpers/number_helper.rb
+++ b/actionpack/lib/action_view/helpers/number_helper.rb
@@ -270,12 +270,13 @@ module ActionView
             digits, rounded_number = 1, 0
           else
             digits = (Math.log10(number.abs) + 1).floor
-            rounded_number = BigDecimal.new((number / 10 ** (digits - precision)).to_s).round.to_f * 10 ** (digits - precision)
+            rounded_number = (BigDecimal.new(number.to_s) / BigDecimal.new((10 ** (digits - precision)).to_f.to_s)).round.to_f * 10 ** (digits - precision)
+            digits = (Math.log10(rounded_number.abs) + 1).floor # After rounding, the number of digits may have changed
           end
           precision -= digits
           precision = precision > 0 ? precision : 0  #don't let it be negative
         else
-          rounded_number = BigDecimal.new((number * (10 ** precision)).to_s).round.to_f / 10 ** precision
+          rounded_number = BigDecimal.new(number.to_s).round(precision).to_f
         end
         formatted_number = number_with_delimiter("%01.#{precision}f" % rounded_number, options)
         if strip_insignificant_zeros
diff --git a/actionpack/test/template/number_helper_test.rb b/actionpack/test/template/number_helper_test.rb
index ab12752..156b7cb 100644
--- a/actionpack/test/template/number_helper_test.rb
+++ b/actionpack/test/template/number_helper_test.rb
@@ -100,6 +100,8 @@ class NumberHelperTest < ActionView::TestCase
     assert_equal("0", number_with_precision(0, :precision => 0))
     assert_equal("0.00100", number_with_precision(0.001, :precision => 5))
     assert_equal("0.001", number_with_precision(0.00111, :precision => 3))
+    assert_equal("10.00", number_with_precision(9.995, :precision => 2))
+    assert_equal("11.00", number_with_precision(10.995, :precision => 2))
   end
 
   def test_number_with_precision_with_custom_delimiter_and_separator
@@ -125,6 +127,9 @@ class NumberHelperTest < ActionView::TestCase
     assert_equal "0.0001", number_with_precision(0.0001, :precision => 1, :significant => true )
     assert_equal "0.000100", number_with_precision(0.0001, :precision => 3, :significant => true )
     assert_equal "0.0001", number_with_precision(0.0001111, :precision => 1, :significant => true )
+    assert_equal "10.0", number_with_precision(9.995, :precision => 3, :significant => true)
+    assert_equal "9.99", number_with_precision(9.994, :precision => 3, :significant => true)
+    assert_equal "11.0", number_with_precision(10.995, :precision => 3, :significant => true)
   end
 
   def test_number_with_precision_with_strip_insignificant_zeros
-- 
1.7.3.1.msysgit.0

