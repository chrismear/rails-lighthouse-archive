<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-21T12:26:42+01:00</created-at>
  <creator-id type="integer">133355</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6693</number>
  <permalink>arel-union-does-not-support-order-or-limit</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Arel Union does not support #order or #limit</title>
  <updated-at type="datetime">2011-04-26T07:48:42+01:00</updated-at>
  <user-id type="integer">28077</user-id>
  <version type="integer">3</version>
  <user-name>Duke</user-name>
  <creator-name>Steve Schwartz</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6693</url>
  <priority-name nil="true"></priority-name>
  <original-body>If we take two `ActiveRecord::Relations` and join them via `union`:

@@@ ruby
    rel_a = ActiveRecord::Relation.new(MyModel).where(:id =&gt; 3)
    rel_b = ActiveRecord::Relation.new(MyModel).where(:id =&gt; 5)
    new_rel = rel_a.union(rel_b) 
    new_rel.to_s   #=&gt; &quot;#&lt;Arel::Nodes::Union:0x3da6260&gt;&quot;
    new_rel.to_sql #=&gt; &quot;( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) UNION SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) )&quot;
@@@

Ideally, we'd be able to sort and limit the resulting `UNION` results in the SQL. According to [the MySQL docs for the UNION operator](http://dev.mysql.com/doc/refman/5.0/en/union.html), this should be possible (at least in MySQL). We'd call it like this:

@@@ ruby
    new_rel.order(:created_at).limit(5)
    new_rel.to_sql #=&gt; &quot;( ( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) ) UNION ( SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) ) ORDER BY `created_at` ASC LIMIT 5 )&quot;
@@@

Currently, two things prevent this from being possible:

1. The `Arel::Nodes:Union` node inherits from `Arel::Nodes::Binary`, with no additional methods, and as such, does not support `order` or `limit` methods.

2. The `Arel::Nodes::Union.to_sql` method should be wrapping both the `:left` and the `:right` Relation SQL strings in parentheses, so that the `order` and `limit` clauses may work on the `UNION` itself, according to the MySQL docs.</original-body>
  <latest-body>If we take two `ActiveRecord::Relations` and join them via `union`:

@@@ ruby
    rel_a = ActiveRecord::Relation.new(MyModel).where(:id =&gt; 3)
    rel_b = ActiveRecord::Relation.new(MyModel).where(:id =&gt; 5)
    new_rel = rel_a.union(rel_b) 
    new_rel.to_s   #=&gt; &quot;#&lt;Arel::Nodes::Union:0x3da6260&gt;&quot;
    new_rel.to_sql #=&gt; &quot;( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) UNION SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) )&quot;
@@@

Ideally, we'd be able to sort and limit the resulting `UNION` results in the SQL. According to [the MySQL docs for the UNION operator](http://dev.mysql.com/doc/refman/5.0/en/union.html), this should be possible (at least in MySQL). We'd call it like this:

@@@ ruby
    new_rel.order(:created_at).limit(5)
    new_rel.to_sql #=&gt; &quot;( ( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) ) UNION ( SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) ) ORDER BY `created_at` ASC LIMIT 5 )&quot;
@@@

Currently, two things prevent this from being possible:

1. The `Arel::Nodes:Union` node inherits from `Arel::Nodes::Binary`, with no additional methods, and as such, does not support `order` or `limit` methods.

2. The `Arel::Nodes::Union.to_sql` method should be wrapping both the `:left` and the `:right` Relation SQL strings in parentheses, so that the `order` and `limit` clauses may work on the `UNION` itself, according to the MySQL docs.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If we take two &lt;code&gt;ActiveRecord::Relations&lt;/code&gt; and join
them via &lt;code&gt;union&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    rel_a = ActiveRecord::Relation.new(MyModel).where(:id =&amp;gt; 3)
    rel_b = ActiveRecord::Relation.new(MyModel).where(:id =&amp;gt; 5)
    new_rel = rel_a.union(rel_b) 
    new_rel.to_s   #=&amp;gt; &quot;#&amp;lt;Arel::Nodes::Union:0x3da6260&amp;gt;&quot;
    new_rel.to_sql #=&amp;gt; &quot;( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) UNION SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) )&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Ideally, we'd be able to sort and limit the resulting
&lt;code&gt;UNION&lt;/code&gt; results in the SQL. According to &lt;a href=
&quot;http://dev.mysql.com/doc/refman/5.0/en/union.html&quot;&gt;the MySQL docs
for the UNION operator&lt;/a&gt;, this should be possible (at least in
MySQL). We'd call it like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    new_rel.order(:created_at).limit(5)
    new_rel.to_sql #=&amp;gt; &quot;( ( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) ) UNION ( SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) ) ORDER BY `created_at` ASC LIMIT 5 )&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Currently, two things prevent this from being possible:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Arel::Nodes:Union&lt;/code&gt; node inherits from
&lt;code&gt;Arel::Nodes::Binary&lt;/code&gt;, with no additional methods, and
as such, does not support &lt;code&gt;order&lt;/code&gt; or &lt;code&gt;limit&lt;/code&gt;
methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Arel::Nodes::Union.to_sql&lt;/code&gt; method should be
wrapping both the &lt;code&gt;:left&lt;/code&gt; and the &lt;code&gt;:right&lt;/code&gt;
Relation SQL strings in parentheses, so that the &lt;code&gt;order&lt;/code&gt;
and &lt;code&gt;limit&lt;/code&gt; clauses may work on the &lt;code&gt;UNION&lt;/code&gt;
itself, according to the MySQL docs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If we take two `ActiveRecord::Relations` and join them via `union`:

@@@ ruby
    rel_a = ActiveRecord::Relation.new(MyModel).where(:id =&gt; 3)
    rel_b = ActiveRecord::Relation.new(MyModel).where(:id =&gt; 5)
    new_rel = rel_a.union(rel_b) 
    new_rel.to_s   #=&gt; &quot;#&lt;Arel::Nodes::Union:0x3da6260&gt;&quot;
    new_rel.to_sql #=&gt; &quot;( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) UNION SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) )&quot;
@@@

Ideally, we'd be able to sort and limit the resulting `UNION` results in the SQL. According to [the MySQL docs for the UNION operator](http://dev.mysql.com/doc/refman/5.0/en/union.html), this should be possible (at least in MySQL). We'd call it like this:

@@@ ruby
    new_rel.order(:created_at).limit(5)
    new_rel.to_sql #=&gt; &quot;( ( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) ) UNION ( SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) ) ORDER BY `created_at` ASC LIMIT 5 )&quot;
@@@

Currently, two things prevent this from being possible:

1. The `Arel::Nodes:Union` node inherits from `Arel::Nodes::Binary`, with no additional methods, and as such, does not support `order` or `limit` methods.

2. The `Arel::Nodes::Union.to_sql` method should be wrapping both the `:left` and the `:right` Relation SQL strings in parentheses, so that the `order` and `limit` clauses may work on the `UNION` itself, according to the MySQL docs.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If we take two &lt;code&gt;ActiveRecord::Relations&lt;/code&gt; and join
them via &lt;code&gt;union&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    rel_a = ActiveRecord::Relation.new(MyModel).where(:id =&amp;gt; 3)
    rel_b = ActiveRecord::Relation.new(MyModel).where(:id =&amp;gt; 5)
    new_rel = rel_a.union(rel_b) 
    new_rel.to_s   #=&amp;gt; &quot;#&amp;lt;Arel::Nodes::Union:0x3da6260&amp;gt;&quot;
    new_rel.to_sql #=&amp;gt; &quot;( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) UNION SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) )&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Ideally, we'd be able to sort and limit the resulting
&lt;code&gt;UNION&lt;/code&gt; results in the SQL. According to &lt;a href=
&quot;http://dev.mysql.com/doc/refman/5.0/en/union.html&quot;&gt;the MySQL docs
for the UNION operator&lt;/a&gt;, this should be possible (at least in
MySQL). We'd call it like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    new_rel.order(:created_at).limit(5)
    new_rel.to_sql #=&amp;gt; &quot;( ( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) ) UNION ( SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) ) ORDER BY `created_at` ASC LIMIT 5 )&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Currently, two things prevent this from being possible:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Arel::Nodes:Union&lt;/code&gt; node inherits from
&lt;code&gt;Arel::Nodes::Binary&lt;/code&gt;, with no additional methods, and
as such, does not support &lt;code&gt;order&lt;/code&gt; or &lt;code&gt;limit&lt;/code&gt;
methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Arel::Nodes::Union.to_sql&lt;/code&gt; method should be
wrapping both the &lt;code&gt;:left&lt;/code&gt; and the &lt;code&gt;:right&lt;/code&gt;
Relation SQL strings in parentheses, so that the &lt;code&gt;order&lt;/code&gt;
and &lt;code&gt;limit&lt;/code&gt; clauses may work on the &lt;code&gt;UNION&lt;/code&gt;
itself, according to the MySQL docs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-10T20:18:37+01:00</created-at>
      <creator-id type="integer">133355</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6693</number>
      <permalink>arel-union-does-not-support-order-or-limit</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Arel Union does not support #order or #limit</title>
      <updated-at type="datetime">2011-04-10T20:18:40+01:00</updated-at>
      <user-id type="integer">133355</user-id>
      <version type="integer">1</version>
      <user-name>Steve Schwartz</user-name>
      <creator-name>Steve Schwartz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6693</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;a href=&quot;http://www.rolexreplicascollection.net/&quot;&gt;rolex watches&lt;/a&gt; are very common in our &lt;a href=&quot;http://www.rolexreplicascollection.net/audemars-piguet-watches-c-114.html&quot;&gt;Audemars Piguet Replicas&lt;/a&gt;  lifes, there are quite several well known &lt;a href=&quot;http://www.freereplicawatches.com&quot;&gt;wrist watches&lt;/a&gt;  brands, the majority &lt;a href=&quot;http://www.rolexreplicascollection.net/gucci-watches-c-117.html&quot;&gt;Gucci Replicas&lt;/a&gt;  of them are Swiss bands,  &lt;a href=&quot;http://www.rolexreplicascollection.net/panerai-watches-c-118.html&quot;&gt;Panerai Replicas&lt;/a&gt; ,and it is &lt;a href=&quot;http://www.rolexreplicascollection.net/omega-watches-c-127.html&quot;&gt;Omega Replicas&lt;/a&gt; unlikely, unless the &lt;a href=&quot;http://www.replica-watches-uk.net/&quot;&gt;replica watches&lt;/a&gt; 's owner is filthy rich and equally careless &lt;a href=&quot;http://www.replicawatches.uk.net/breitling-watches-c-11.html&quot;&gt;replica breitling&lt;/a&gt; with his, Even the highest quality, Some &lt;a href=&quot;http://www.replicawatches.uk.net/omega-watches-c-27.html&quot;&gt;replica omega&lt;/a&gt; are believed to be to acquire luxury wrist that are &lt;a href=&quot;http://www.replica-watches-uk.net/&quot;&gt;Replica Concord&lt;/a&gt; founded of gold or platinum or other high priced materials. placing on these wrist &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;fake rolex&lt;/a&gt; certainly will make us stand out from other &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;Swiss Replica Watch&lt;/a&gt; people.Does everyone can afford these genuine, &lt;a href=&quot;http://www.replicawatches.uk.net/tag-heuer-watches-c-35.html&quot;&gt;replica tag heuer&lt;/a&gt; Taking your or &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch&lt;/a&gt; ? When should expensive &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch uk&lt;/a&gt; , before you take your precious?</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.rolexreplicascollection.net/&quot;&gt;rolex
watches&lt;/a&gt; are very common in our &lt;a href=
&quot;http://www.rolexreplicascollection.net/audemars-piguet-watches-c-114.html&quot;&gt;
Audemars Piguet Replicas&lt;/a&gt; lifes, there are quite several well
known &lt;a href=&quot;http://www.freereplicawatches.com&quot;&gt;wrist watches&lt;/a&gt;
brands, the majority &lt;a href=
&quot;http://www.rolexreplicascollection.net/gucci-watches-c-117.html&quot;&gt;Gucci
Replicas&lt;/a&gt; of them are Swiss bands, &lt;a href=
&quot;http://www.rolexreplicascollection.net/panerai-watches-c-118.html&quot;&gt;
Panerai Replicas&lt;/a&gt; ,and it is &lt;a href=
&quot;http://www.rolexreplicascollection.net/omega-watches-c-127.html&quot;&gt;Omega
Replicas&lt;/a&gt; unlikely, unless the &lt;a href=
&quot;http://www.replica-watches-uk.net/&quot;&gt;replica watches&lt;/a&gt; 's owner
is filthy rich and equally careless &lt;a href=
&quot;http://www.replicawatches.uk.net/breitling-watches-c-11.html&quot;&gt;replica
breitling&lt;/a&gt; with his, Even the highest quality, Some &lt;a href=
&quot;http://www.replicawatches.uk.net/omega-watches-c-27.html&quot;&gt;replica
omega&lt;/a&gt; are believed to be to acquire luxury wrist that are
&lt;a href=&quot;http://www.replica-watches-uk.net/&quot;&gt;Replica Concord&lt;/a&gt;
founded of gold or platinum or other high priced materials. placing
on these wrist &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;fake
rolex&lt;/a&gt; certainly will make us stand out from other &lt;a href=
&quot;http://www.replicawatches.uk.net/&quot;&gt;Swiss Replica Watch&lt;/a&gt;
people.Does everyone can afford these genuine, &lt;a href=
&quot;http://www.replicawatches.uk.net/tag-heuer-watches-c-35.html&quot;&gt;replica
tag heuer&lt;/a&gt; Taking your or &lt;a href=
&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch&lt;/a&gt; ? When should
expensive &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch
uk&lt;/a&gt; , before you take your precious?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-16T03:10:26+01:00</created-at>
      <creator-id type="integer">133355</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6693</number>
      <permalink>arel-union-does-not-support-order-or-limit</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Arel Union does not support #order or #limit</title>
      <updated-at type="datetime">2011-04-21T12:26:42+01:00</updated-at>
      <user-id type="integer">114903</user-id>
      <version type="integer">2</version>
      <user-name>laptopbatteries</user-name>
      <creator-name>Steve Schwartz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6693</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I need this also.  Interleaving ordering by post date and last commented date.  I must do an ordered union.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I need this also. Interleaving ordering by post date and last
commented date. I must do an ordered union.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-26T07:48:36+01:00</created-at>
      <creator-id type="integer">133355</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6693</number>
      <permalink>arel-union-does-not-support-order-or-limit</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Arel Union does not support #order or #limit</title>
      <updated-at type="datetime">2011-04-26T07:48:42+01:00</updated-at>
      <user-id type="integer">28077</user-id>
      <version type="integer">3</version>
      <user-name>Duke</user-name>
      <creator-name>Steve Schwartz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6693</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
