From 871aefeb3e5e66dc2b7d86600644da8f6762bc47 Mon Sep 17 00:00:00 2001
From: Tom Lea <commit@tomlea.co.uk>
Date: Fri, 1 May 2009 00:26:07 +0100
Subject: [PATCH] Fix accidental caching of proc objects instead of the content it represents.

Streaming content will return a proc that rack handles just fine, but
cache_page expects a string. Now cache_page calls procs, and allow them
to write their content to the cache file.
---
 actionpack/lib/action_controller/caching/pages.rb |    8 +++++++-
 actionpack/test/controller/caching_test.rb        |   17 ++++++++++++++++-
 actionpack/test/fixtures/example_file.txt         |    1 +
 3 files changed, 24 insertions(+), 2 deletions(-)
 create mode 100644 actionpack/test/fixtures/example_file.txt

diff --git a/actionpack/lib/action_controller/caching/pages.rb b/actionpack/lib/action_controller/caching/pages.rb
index bd3b5a5..2272395 100644
--- a/actionpack/lib/action_controller/caching/pages.rb
+++ b/actionpack/lib/action_controller/caching/pages.rb
@@ -75,7 +75,13 @@ module ActionController #:nodoc:
 
           benchmark "Cached page: #{page_cache_file(path)}" do
             FileUtils.makedirs(File.dirname(page_cache_path(path)))
-            File.open(page_cache_path(path), "wb+") { |f| f.write(content) }
+            File.open(page_cache_path(path), "wb+") do |f|
+              if content.respond_to? :call
+                content.call(nil, f)
+              else
+                f.write(content)
+              end
+            end
           end
         end
 
diff --git a/actionpack/test/controller/caching_test.rb b/actionpack/test/controller/caching_test.rb
index 86dafd9..4fb30cd 100644
--- a/actionpack/test/controller/caching_test.rb
+++ b/actionpack/test/controller/caching_test.rb
@@ -7,9 +7,12 @@ FILE_STORE_PATH = File.join(File.dirname(__FILE__), '/../temp/', CACHE_DIR)
 ActionController::Base.page_cache_directory = FILE_STORE_PATH
 ActionController::Base.cache_store = :file_store, FILE_STORE_PATH
 
+EXAMPLE_FILE_PATH = File.join(File.dirname(__FILE__), "..", "fixtures", "example_file.txt")
+EXAMPLE_FILE_CONETENTS = "example file content"
+
 class PageCachingTestController < ActionController::Base
   caches_page :ok, :no_content, :if => Proc.new { |c| !c.request.format.json? }
-  caches_page :found, :not_found
+  caches_page :found, :not_found, :send_file_action
 
   def ok
     head :ok
@@ -40,6 +43,10 @@ class PageCachingTestController < ActionController::Base
   def trailing_slash
     render :text => "Sneak attack"
   end
+
+  def send_file_action
+    send_file EXAMPLE_FILE_PATH, :stream => true, :x_sendfile => false
+  end
 end
 
 class PageCachingTest < ActionController::TestCase
@@ -115,6 +122,14 @@ class PageCachingTest < ActionController::TestCase
     assert File.exist?("#{FILE_STORE_PATH}/index.html")
   end
 
+  def test_should_cache_streaming_content_correctly
+    @request.stubs(:path).returns("/send_file_action.txt")
+    get :send_file_action
+    assert_response :ok
+    assert File.exist?("#{FILE_STORE_PATH}/send_file_action.txt")
+    assert_equal EXAMPLE_FILE_CONETENTS, File.read("#{FILE_STORE_PATH}/send_file_action.txt")
+  end
+
   [:ok, :no_content, :found, :not_found].each do |status|
     [:get, :post, :put, :delete].each do |method|
       unless method == :get and status == :ok
diff --git a/actionpack/test/fixtures/example_file.txt b/actionpack/test/fixtures/example_file.txt
new file mode 100644
index 0000000..f3f4c72
--- /dev/null
+++ b/actionpack/test/fixtures/example_file.txt
@@ -0,0 +1 @@
+example file content
\ No newline at end of file
-- 
1.6.1.3

