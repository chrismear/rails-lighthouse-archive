<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2010-03-14T18:49:20+00:00</created-at>
  <creator-id type="integer">73743</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4176</number>
  <permalink>make-change_table-execute-changes-in-batch</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>activerecord change_table migrations mysql tables</tag>
  <title>Make change_table execute changes in batch</title>
  <updated-at type="datetime">2011-03-08T16:54:38+00:00</updated-at>
  <user-id type="integer">120128</user-id>
  <version type="integer">4</version>
  <user-name>Kenn Ejima</user-name>
  <creator-name>Sai Emrys</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4176</url>
  <priority-name nil="true"></priority-name>
  <original-body>Currently, change_table executes every change as an ALTER TABLE in sequence.

This is extremely inefficient if making multiple changes, especially for a large table. (E.g. right now I'm adding ~25 columns to a table with ~1M rows.) Instead of just e.g. reallocating the table space for the full new size, it reallocates it for every single increment. That's lame.

Instead, change_table should batch together the operations requested (if compatible) and execute them as a single ALTER TABLE command, which would allow the database to optimize its operation.

cf. http://dev.mysql.com/doc/refman/5.1/en/alter-table.html for the mysql version; this is probably true of all other vendors also.

Thanks!</original-body>
  <latest-body>Currently, change_table executes every change as an ALTER TABLE in sequence.

This is extremely inefficient if making multiple changes, especially for a large table. (E.g. right now I'm adding ~25 columns to a table with ~1M rows.) Instead of just e.g. reallocating the table space for the full new size, it reallocates it for every single increment. That's lame.

Instead, change_table should batch together the operations requested (if compatible) and execute them as a single ALTER TABLE command, which would allow the database to optimize its operation.

cf. http://dev.mysql.com/doc/refman/5.1/en/alter-table.html for the mysql version; this is probably true of all other vendors also.

Thanks!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Currently, change_table executes every change as an ALTER TABLE
in sequence.&lt;/p&gt;
&lt;p&gt;This is extremely inefficient if making multiple changes,
especially for a large table. (E.g. right now I'm adding ~25
columns to a table with ~1M rows.) Instead of just e.g.
reallocating the table space for the full new size, it reallocates
it for every single increment. That's lame.&lt;/p&gt;
&lt;p&gt;Instead, change_table should batch together the operations
requested (if compatible) and execute them as a single ALTER TABLE
command, which would allow the database to optimize its
operation.&lt;/p&gt;
&lt;p&gt;cf. &lt;a href=
&quot;http://dev.mysql.com/doc/refman/5.1/en/alter-table.html&quot;&gt;http://dev.mysql.com/doc/refman/5.1/en/alter-table.html&lt;/a&gt;
for the mysql version; this is probably true of all other vendors
also.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Currently, change_table executes every change as an ALTER TABLE in sequence.

This is extremely inefficient if making multiple changes, especially for a large table. (E.g. right now I'm adding ~25 columns to a table with ~1M rows.) Instead of just e.g. reallocating the table space for the full new size, it reallocates it for every single increment. That's lame.

Instead, change_table should batch together the operations requested (if compatible) and execute them as a single ALTER TABLE command, which would allow the database to optimize its operation.

cf. http://dev.mysql.com/doc/refman/5.1/en/alter-table.html for the mysql version; this is probably true of all other vendors also.

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Currently, change_table executes every change as an ALTER TABLE
in sequence.&lt;/p&gt;
&lt;p&gt;This is extremely inefficient if making multiple changes,
especially for a large table. (E.g. right now I'm adding ~25
columns to a table with ~1M rows.) Instead of just e.g.
reallocating the table space for the full new size, it reallocates
it for every single increment. That's lame.&lt;/p&gt;
&lt;p&gt;Instead, change_table should batch together the operations
requested (if compatible) and execute them as a single ALTER TABLE
command, which would allow the database to optimize its
operation.&lt;/p&gt;
&lt;p&gt;cf. &lt;a href=
&quot;http://dev.mysql.com/doc/refman/5.1/en/alter-table.html&quot;&gt;http://dev.mysql.com/doc/refman/5.1/en/alter-table.html&lt;/a&gt;
for the mysql version; this is probably true of all other vendors
also.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-14T18:49:20+00:00</created-at>
      <creator-id type="integer">73743</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4176</number>
      <permalink>make-change_table-execute-changes-in-batch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord change_table migrations mysql tables</tag>
      <title>Make change_table execute changes in batch</title>
      <updated-at type="datetime">2010-03-14T18:49:22+00:00</updated-at>
      <user-id type="integer">73743</user-id>
      <version type="integer">1</version>
      <user-name>Sai Emrys</user-name>
      <creator-name>Sai Emrys</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4176</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1

As our tables have grown to 10M+ rows, almost all significant migrations have raw ALTER TABLE statements in it due to this exact problem. It would be awesome if change_table runs as a single ALTER TABLE statement.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;As our tables have grown to 10M+ rows, almost all significant
migrations have raw ALTER TABLE statements in it due to this exact
problem. It would be awesome if change_table runs as a single ALTER
TABLE statement.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-19T07:03:53+00:00</created-at>
      <creator-id type="integer">73743</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4176</number>
      <permalink>make-change_table-execute-changes-in-batch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord change_table migrations mysql tables</tag>
      <title>Make change_table execute changes in batch</title>
      <updated-at type="datetime">2011-01-19T07:03:57+00:00</updated-at>
      <user-id type="integer">120128</user-id>
      <version type="integer">2</version>
      <user-name>Kenn Ejima</user-name>
      <creator-name>Sai Emrys</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4176</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>http://m.onkey.org/bulk-alter-table-with-rails-3-and-mysql</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;http://m.onkey.org/bulk-alter-table-with-rails-3-and-mysql&quot;&gt;http://m.onkey.org/bulk-alter-table-with-rails-3-and-mysql&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-28T17:41:41+00:00</created-at>
      <creator-id type="integer">73743</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4176</number>
      <permalink>make-change_table-execute-changes-in-batch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord change_table migrations mysql tables</tag>
      <title>Make change_table execute changes in batch</title>
      <updated-at type="datetime">2011-02-28T17:42:44+00:00</updated-at>
      <user-id type="integer">63298</user-id>
      <version type="integer">3</version>
      <user-name>Morgan Christiansson</user-name>
      <creator-name>Sai Emrys</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4176</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Awesome - IMHO :bulk =&gt; true should be the default behavior for MySQL, once it's battle-tested in the wild.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Awesome - IMHO :bulk =&amp;gt; true should be the default behavior
for MySQL, once it's battle-tested in the wild.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-08T16:54:32+00:00</created-at>
      <creator-id type="integer">73743</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4176</number>
      <permalink>make-change_table-execute-changes-in-batch</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord change_table migrations mysql tables</tag>
      <title>Make change_table execute changes in batch</title>
      <updated-at type="datetime">2011-03-08T16:54:38+00:00</updated-at>
      <user-id type="integer">120128</user-id>
      <version type="integer">4</version>
      <user-name>Kenn Ejima</user-name>
      <creator-name>Sai Emrys</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4176</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
