<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-02T10:59:55+01:00</created-at>
  <creator-id type="integer">35764</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2558</number>
  <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
  <priority type="integer">1700</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>2.3.2 :joins active_record patch update_all</tag>
  <title>Support for :joins in ActiveRecord::Base#update_all</title>
  <updated-at type="datetime">2010-11-12T18:43:32+00:00</updated-at>
  <user-id type="integer">36417</user-id>
  <version type="integer">13</version>
  <user-name>eydaimon</user-name>
  <creator-name>Jacob Kjeldahl</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I needed to update records based on data in another table so I added support for :joins in ActiveRecord::Base#update_all.

Example usage: (from rdoc)

@@@ ruby
Book.update_all &quot;rating = 'high'&quot;, &quot;title LIKE '%Rails%' and authors.name = 'David'&quot;, :joins =&gt; :authors
@@@

It also works on named_scopes:

@@@ ruby
Book.by_author('David').update_all(&quot;rating = 'high'&quot;)
@@@

where 

@@@ ruby
class Book &lt; ActiveRecord::Base
  belongs_to :author
  named_scope :by_author lambda{|name|
    {:conditions =&gt; {:author =&gt; {:name =&gt; name}}, :joins =&gt; :author}
  }
@@@

There is also a fork on github at http://github.com/kjeldahl/rails_support_for_joins_in_update_all/tree/master</original-body>
  <latest-body>I needed to update records based on data in another table so I added support for :joins in ActiveRecord::Base#update_all.

Example usage: (from rdoc)

@@@ ruby
Book.update_all &quot;rating = 'high'&quot;, &quot;title LIKE '%Rails%' and authors.name = 'David'&quot;, :joins =&gt; :authors
@@@

It also works on named_scopes:

@@@ ruby
Book.by_author('David').update_all(&quot;rating = 'high'&quot;)
@@@

where 

@@@ ruby
class Book &lt; ActiveRecord::Base
  belongs_to :author
  named_scope :by_author lambda{|name|
    {:conditions =&gt; {:author =&gt; {:name =&gt; name}}, :joins =&gt; :author}
  }
@@@

There is also a fork on github at http://github.com/kjeldahl/rails_support_for_joins_in_update_all/tree/master</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I needed to update records based on data in another table so I
added support for :joins in ActiveRecord::Base#update_all.&lt;/p&gt;
&lt;p&gt;Example usage: (from rdoc)&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Book.update_all &amp;quot;rating = 'high'&amp;quot;, &amp;quot;title LIKE '%Rails%' and authors.name = 'David'&amp;quot;, :joins =&amp;gt; :authors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It also works on named_scopes:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Book.by_author('David').update_all(&amp;quot;rating = 'high'&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Book &amp;lt; ActiveRecord::Base
  belongs_to :author
  named_scope :by_author lambda{|name|
    {:conditions =&amp;gt; {:author =&amp;gt; {:name =&amp;gt; name}}, :joins =&amp;gt; :author}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is also a fork on github at &lt;a href=&quot;http://github.com/kjeldahl/rails_support_for_joins_in_update_all/tree/master&quot;&gt;
http://github.com/kjeldahl/rails...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I needed to update records based on data in another table so I added support for :joins in ActiveRecord::Base#update_all.

Example usage: (from rdoc)

@@@ ruby
Book.update_all &quot;rating = 'high'&quot;, &quot;title LIKE '%Rails%' and authors.name = 'David'&quot;, :joins =&gt; :authors
@@@

It also works on named_scopes:

@@@ ruby
Book.by_author('David').update_all(&quot;rating = 'high'&quot;)
@@@

where 

@@@ ruby
class Book &lt; ActiveRecord::Base
  belongs_to :author
  named_scope :by_author lambda{|name|
    {:conditions =&gt; {:author =&gt; {:name =&gt; name}}, :joins =&gt; :author}
  }
@@@

There is also a fork on github at http://github.com/kjeldahl/rails_support_for_joins_in_update_all/tree/master</body>
      <body-html>&lt;div&gt;&lt;p&gt;I needed to update records based on data in another table so I
added support for :joins in ActiveRecord::Base#update_all.&lt;/p&gt;
&lt;p&gt;Example usage: (from rdoc)&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Book.update_all &amp;quot;rating = 'high'&amp;quot;, &amp;quot;title LIKE '%Rails%' and authors.name = 'David'&amp;quot;, :joins =&amp;gt; :authors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It also works on named_scopes:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Book.by_author('David').update_all(&amp;quot;rating = 'high'&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Book &amp;lt; ActiveRecord::Base
  belongs_to :author
  named_scope :by_author lambda{|name|
    {:conditions =&amp;gt; {:author =&amp;gt; {:name =&amp;gt; name}}, :joins =&amp;gt; :author}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is also a fork on github at &lt;a href=&quot;http://github.com/kjeldahl/rails_support_for_joins_in_update_all/tree/master&quot;&gt;
http://github.com/kjeldahl/rails...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-24T14:14:13+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 :joins active_record patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2009-04-24T14:14:17+01:00</updated-at>
      <user-id type="integer">35764</user-id>
      <version type="integer">1</version>
      <user-name>Jacob Kjeldahl</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-06T14:12:43+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.2 :joins active_record patch update_all
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 :joins active_record bugmash patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2009-08-06T14:12:47+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">2</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is the patch file</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is the patch file&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-07T09:50:05+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 :joins active_record bugmash patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2009-08-07T09:50:14+01:00</updated-at>
      <user-id type="integer">35764</user-id>
      <version type="integer">3</version>
      <user-name>Jacob Kjeldahl</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The idea makes sense, but the patch doesn't apply:

Patch does not have a valid e-mail address.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The idea makes sense, but the patch doesn't apply:&lt;/p&gt;
&lt;p&gt;Patch does not have a valid e-mail address.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-08T03:33:45+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 :joins active_record bugmash patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2009-08-08T03:33:50+01:00</updated-at>
      <user-id type="integer">20273</user-id>
      <version type="integer">4</version>
      <user-name>Josh Sharpe</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 on the idea.  i have revised the patch so that it will apply cleanly (unfortunately it has my commit info and not Jacob's).

The patch, however, causes 3 sqlite test failures.  It seems to me that sqlite does not support the &quot;UPDATE tbl INNER JOIN tbl2 ON tbl.id = tbl2.tbl_id&quot; syntax.  How do we go about solving this?  Do we add a method to each of the adapters (:supports_updates_with_joins?) to check before applying any :joins options?  If so, do we fail or simply ignore when :joins is passed in when being used with sqlite (or any other db that doesn't support the syntax)?</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 on the idea. i have revised the patch so that it will apply
cleanly (unfortunately it has my commit info and not Jacob's).&lt;/p&gt;
&lt;p&gt;The patch, however, causes 3 sqlite test failures. It seems to
me that sqlite does not support the &quot;UPDATE tbl INNER JOIN tbl2 ON
tbl.id = tbl2.tbl_id&quot; syntax. How do we go about solving this? Do
we add a method to each of the adapters
(:supports_updates_with_joins?) to check before applying any :joins
options? If so, do we fail or simply ignore when :joins is passed
in when being used with sqlite (or any other db that doesn't
support the syntax)?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T18:09:06+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 :joins active_record bugmash patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2009-08-09T18:09:10+01:00</updated-at>
      <user-id type="integer">24346</user-id>
      <version type="integer">5</version>
      <user-name>John Trupiano</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>verified

+1 The patch works only on 2-3-stable. All tests pass.</body>
      <body-html>&lt;div&gt;&lt;p&gt;verified&lt;/p&gt;
&lt;p&gt;+1 The patch works only on 2-3-stable. All tests pass.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T18:12:57+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 :joins active_record bugmash patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2009-08-09T18:13:01+01:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">6</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>The patch looks interesting, but I don't think it's a good idea: it seems likely that update_all is limited for a good reason. Encouraging people to, essentially, bypass ActiveRecord goes against the intention of the framework.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The patch looks interesting, but I don't think it's a good idea:
it seems likely that update_all is limited for a good reason.
Encouraging people to, essentially, bypass ActiveRecord goes
against the intention of the framework.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T18:22:32+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 :joins active_record bugmash patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2009-08-09T18:22:36+01:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">7</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1 Verified, -1 Patch
i agree with Matt, seems like it's a better approach to leave #update_all limited and not encourage AR workarounds that will probably lead to unexpected issues.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 Verified, -1 Patch i agree with Matt, seems like it's a
better approach to leave #update_all limited and not encourage AR
workarounds that will probably lead to unexpected issues.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T18:51:41+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 :joins active_record bugmash patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2009-08-09T18:51:47+01:00</updated-at>
      <user-id type="integer">10379</user-id>
      <version type="integer">8</version>
      <user-name>Elad Meidar</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>-1
verified the patch


Agreed w/ Elad, if you're going to do something like this, might as well just write the plain sql.</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1 verified the patch&lt;/p&gt;
&lt;p&gt;Agreed w/ Elad, if you're going to do something like this, might
as well just write the plain sql.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T21:03:46+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 :joins active_record bugmash patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2009-08-09T21:03:48+01:00</updated-at>
      <user-id type="integer">65586</user-id>
      <version type="integer">9</version>
      <user-name>Derander</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Agree that dropping to SQL is clearer.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Agree that dropping to SQL is clearer.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-10T06:50:03+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.2 :joins active_record bugmash patch update_all
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.3.2 :joins active_record patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2009-08-10T06:50:06+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">10</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This is not true and prevents one from clean separation between objects:

@@@ rails
class Parent &lt; AR::Base
  has_many :children
  has_many :grandchildren, :through =&gt; :children, :dependent =&gt; :nullify

  def before_update
    self.grandchildren.delete_all  # this and &quot;.clear&quot; does NOT WORK, thus:
    self.grandchildren.disconnect_disliked_ones # see below
  end
end

class Child &lt; AR::Base
  has_many :grandchildren
end

class Grandchild &lt; AR::Base
  def self.disconnect_disliked_ones
    self.update_all(&quot;child_id = NULL&quot;, &quot;brave IS FALSE&quot;)
  end
end
@@@

The idea is that I put the intricacies of the &quot;disconnect&quot; operation where the implementation is, i.e. in the grandchild. Also, the type of connection between grandchild and parent is not restricted per se.

However, if called from within a Parent instance with ID=42, this will result in an invalid SQL query like

@@@
UPDATE &quot;grandchildren&quot; 
  SET grandchildren.child_id = NULL
  WHERE (grandchildren.brave IS FALSE) 
    AND (children.parent_id = 42)
@@@

which will result in an error, because I cannot specify a JOIN clause.

Of course, I can use Parent.find_by_sql and specify the whole UPDATE operation verbatim, however, then the separation between Parent and Grandchild internal structure is violated.

Is it not possible to put the JOIN patch into the source and leave it to the user whether to use it or not?

Thanks,

Jens</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is not true and prevents one from clean separation between
objects:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;class Parent &amp;lt; AR::Base
  has_many :children
  has_many :grandchildren, :through =&amp;gt; :children, :dependent =&amp;gt; :nullify

  def before_update
    self.grandchildren.delete_all  # this and &quot;.clear&quot; does NOT WORK, thus:
    self.grandchildren.disconnect_disliked_ones # see below
  end
end

class Child &amp;lt; AR::Base
  has_many :grandchildren
end

class Grandchild &amp;lt; AR::Base
  def self.disconnect_disliked_ones
    self.update_all(&quot;child_id = NULL&quot;, &quot;brave IS FALSE&quot;)
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The idea is that I put the intricacies of the &quot;disconnect&quot;
operation where the implementation is, i.e. in the grandchild.
Also, the type of connection between grandchild and parent is not
restricted per se.&lt;/p&gt;
&lt;p&gt;However, if called from within a Parent instance with ID=42,
this will result in an invalid SQL query like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;UPDATE &quot;grandchildren&quot; 
  SET grandchildren.child_id = NULL
  WHERE (grandchildren.brave IS FALSE) 
    AND (children.parent_id = 42)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;which will result in an error, because I cannot specify a JOIN
clause.&lt;/p&gt;
&lt;p&gt;Of course, I can use Parent.find_by_sql and specify the whole
UPDATE operation verbatim, however, then the separation between
Parent and Grandchild internal structure is violated.&lt;/p&gt;
&lt;p&gt;Is it not possible to put the JOIN patch into the source and
leave it to the user whether to use it or not?&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Jens&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-19T17:10:56+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">1700</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.3.2 :joins active_record patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2010-07-19T17:11:01+01:00</updated-at>
      <user-id type="integer">81520</user-id>
      <version type="integer">11</version>
      <user-name>Jens</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I agree on having this functionality in core.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree on having this functionality in core.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-01T15:30:44+01:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">1700</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.3.2 :joins active_record patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2010-10-01T15:30:47+01:00</updated-at>
      <user-id type="integer">1075</user-id>
      <version type="integer">12</version>
      <user-name>Claudio Poli</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1 on supporting this.

I'd want to be able to do:

    User.find(30).tasks.update_all completed: true</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 on supporting this.&lt;/p&gt;
&lt;p&gt;I'd want to be able to do:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;User.find(30).tasks.update_all completed: true&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-12T18:43:27+00:00</created-at>
      <creator-id type="integer">35764</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2558</number>
      <permalink>support-for-joins-in-activerecordbaseupdate_all</permalink>
      <priority type="integer">1700</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.3.2 :joins active_record patch update_all</tag>
      <title>Support for :joins in ActiveRecord::Base#update_all</title>
      <updated-at type="datetime">2010-11-12T18:43:32+00:00</updated-at>
      <user-id type="integer">36417</user-id>
      <version type="integer">13</version>
      <user-name>eydaimon</user-name>
      <creator-name>Jacob Kjeldahl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2558</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>0674007a8c4a3fd6209bc202e7463394e8773261</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-08-07T09:50:06+01:00</created-at>
      <filename>joins_in_update_all.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">238254</id>
      <size type="integer">3364</size>
      <uploader-id type="integer">35764</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/238254/joins_in_update_all.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>efad7fcd3c7c62a02dd04a7010a494150fc515b1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-08-09T18:09:06+01:00</created-at>
      <filename>2558-joins-in-update-all.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">239379</id>
      <size type="integer">3990</size>
      <uploader-id type="integer">24346</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/239379/2558-joins-in-update-all.diff</url>
    </attachment>
  </attachments>
</ticket>
