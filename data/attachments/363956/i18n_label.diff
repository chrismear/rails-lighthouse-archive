From c8177eb92952278569c01ee0ecf697c038d906f0 Mon Sep 17 00:00:00 2001
From: Carsten Gehling <cg@cg-laptop.(none)>
Date: Tue, 29 Dec 2009 13:06:19 +0100
Subject: [PATCH] I18n label helper

---
 actionpack/lib/action_view/helpers/form_helper.rb |   39 ++++++++++++++++++--
 actionpack/test/lib/controller/fake_models.rb     |    1 +
 actionpack/test/template/form_helper_test.rb      |   40 +++++++++++++++++++++
 3 files changed, 77 insertions(+), 3 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/form_helper.rb b/actionpack/lib/action_view/helpers/form_helper.rb
index d0c66ed..9baa9f1 100644
--- a/actionpack/lib/action_view/helpers/form_helper.rb
+++ b/actionpack/lib/action_view/helpers/form_helper.rb
@@ -504,8 +504,9 @@ module ActionView
       end
 
       # Returns a label tag tailored for labelling an input field for a specified attribute (identified by +method+) on an object
-      # assigned to the template (identified by +object+). The text of label will default to the attribute name unless you specify
-      # it explicitly. Additional options on the label tag can be passed as a hash with +options+. These options will be tagged
+      # assigned to the template (identified by +object+). The text of label will default to the attribute name unless a translation
+      # is found in the current I18n locale (through views.labels.<modelname>.<attribute>) or you specify it explicitly. 
+      # Additional options on the label tag can be passed as a hash with +options+. These options will be tagged
       # onto the HTML as an HTML element attribute as in the example shown, except for the <tt>:value</tt> option, which is designed to
       # target labels for radio_button tags (where the value is used in the ID of the input tag).
       #
@@ -513,6 +514,29 @@ module ActionView
       #   label(:post, :title)
       #   # => <label for="post_title">Title</label>
       #
+      #   You can localize your labels based on model and attribute names.
+      #   For example you can define the following in your locale (e.g. en.yml)
+      #
+      #   views:
+      #     labels:
+      #       post:
+      #         body: "Write your entire text here"
+      #
+      #   Which then will result in
+      #
+      #   label(:post, :body)
+      #   # => <label for="post_body">Write your entire text here</label>
+      #
+      #   Localization can also be based purely on the translation of the attribute-name like this:
+      #
+      #   activemodel:
+      #     attribute:
+      #       post:
+      #         cost: "Total cost"
+      #
+      #   label(:post, :cost)
+      #   # => <label for="post_cost">Total cost</label>
+      #
       #   label(:post, :title, "A short title")
       #   # => <label for="post_title">A short title</label>
       #
@@ -751,7 +775,16 @@ module ActionView
         add_default_name_and_id_for_value(tag_value, name_and_id)
         options.delete("index")
         options["for"] ||= name_and_id["id"]
-        content = (text.blank? ? nil : text.to_s) || method_name.humanize
+
+        content = if text.blank?
+          i18n_label = I18n.t("views.labels.#{object_name}.#{method_name}", :default => "")
+          i18n_label if i18n_label.present?
+        else
+          text.to_s
+        end
+        content ||= object.class.human_attribute_name(method_name) if object
+        content ||= method_name.humanize
+
         label_tag(name_and_id["id"], content, options)
       end
 
diff --git a/actionpack/test/lib/controller/fake_models.rb b/actionpack/test/lib/controller/fake_models.rb
index 823de8b..b0e5d7a 100644
--- a/actionpack/test/lib/controller/fake_models.rb
+++ b/actionpack/test/lib/controller/fake_models.rb
@@ -54,6 +54,7 @@ end
 class Post < Struct.new(:title, :author_name, :body, :secret, :written_on, :cost)
   extend ActiveModel::Naming
   include ActiveModel::Conversion
+  extend ActiveModel::Translation
 
   alias_method :secret?, :secret
 
diff --git a/actionpack/test/template/form_helper_test.rb b/actionpack/test/template/form_helper_test.rb
index 44734ab..b1e9fe9 100644
--- a/actionpack/test/template/form_helper_test.rb
+++ b/actionpack/test/template/form_helper_test.rb
@@ -6,6 +6,25 @@ class FormHelperTest < ActionView::TestCase
 
   def setup
     super
+
+    # Create "label" locale for testing I18n label helpers
+    I18n.backend.store_translations 'label', {
+      :activemodel => {
+        :attributes => {
+          :post => {
+            :cost => "Total cost"
+          }
+        }
+      },
+      :views => {
+        :labels => {
+          :post => {
+            :body => "Write entire text here"
+          }
+        }
+      }
+    }
+
     @post = Post.new
     @comment = Comment.new
     def @post.errors()
@@ -51,6 +70,27 @@ class FormHelperTest < ActionView::TestCase
     assert_dom_equal('<label for="post_secret">Secret?</label>', label(:post, :secret?))
   end
 
+  def test_label_with_locales_strings
+    old_locale, I18n.locale = I18n.locale, :label
+    assert_dom_equal('<label for="post_body">Write entire text here</label>', label("post", "body"))
+  ensure
+    I18n.locale = old_locale
+  end
+
+  def test_label_with_human_attribute_name
+    old_locale, I18n.locale = I18n.locale, :label
+    assert_dom_equal('<label for="post_cost">Total cost</label>', label(:post, :cost))
+  ensure
+    I18n.locale = old_locale
+  end
+
+  def test_label_with_locales_symbols
+    old_locale, I18n.locale = I18n.locale, :label
+    assert_dom_equal('<label for="post_body">Write entire text here</label>', label(:post, :body))
+  ensure
+    I18n.locale = old_locale
+  end
+
   def test_label_with_for_attribute_as_symbol
     assert_dom_equal('<label for="my_for">Title</label>', label(:post, :title, nil, :for => "my_for"))
   end
-- 
1.6.3.3

