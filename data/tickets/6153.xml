<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-11T23:51:57+00:00</created-at>
  <creator-id type="integer">67454</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6153</number>
  <permalink>accessing-associations-via-x_ids-no-longer-uses-association-conditions</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>associations bug has_many_through &quot;rails 3.0.3&quot;</tag>
  <title>Accessing associations via x_ids no longer uses association conditions</title>
  <updated-at type="datetime">2010-12-23T23:21:49+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">7</version>
  <user-name>Repository</user-name>
  <creator-name>Yuval Kordov</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6153</url>
  <priority-name>Low</priority-name>
  <original-body>I'm upgrading my Rails app from 2.3.5 to 3.0.3 and have found the following:

user.rb
has_many :relationships
has_many :contacts, :through =&gt; :relationships, :conditions =&gt; {:relationships =&gt; {:status =&gt; &quot;1&quot;}}

In Rails 2.3.5, I could call user.contact_ids and it would run through the entire condition:

user.contact_ids =&gt;
SELECT `users`.id FROM `users` INNER JOIN `relationships` ON `users`.id = `relationships`.contact_id WHERE ((`relationships`.user_id = 2) AND ((`relationships`.`status` = 1)))


In Rails 3.0.3, it seems to be ignoring the parameters altogether.

user.contact_ids =&gt;
SELECT DISTINCT `relationships`.contact_id FROM `relationships` WHERE (`relationships`.user_id = 2)

Hopefully I'm missing something obvious here, but this change has put a serious wrench in my code, where I was using _ids associations for efficiency when I only ever needed IDs.</original-body>
  <latest-body>I'm upgrading my Rails app from 2.3.5 to 3.0.3 and have found the following:

user.rb
has_many :relationships
has_many :contacts, :through =&gt; :relationships, :conditions =&gt; {:relationships =&gt; {:status =&gt; &quot;1&quot;}}

In Rails 2.3.5, I could call user.contact_ids and it would run through the entire condition:

user.contact_ids =&gt;
SELECT `users`.id FROM `users` INNER JOIN `relationships` ON `users`.id = `relationships`.contact_id WHERE ((`relationships`.user_id = 2) AND ((`relationships`.`status` = 1)))


In Rails 3.0.3, it seems to be ignoring the parameters altogether.

user.contact_ids =&gt;
SELECT DISTINCT `relationships`.contact_id FROM `relationships` WHERE (`relationships`.user_id = 2)

Hopefully I'm missing something obvious here, but this change has put a serious wrench in my code, where I was using _ids associations for efficiency when I only ever needed IDs.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm upgrading my Rails app from 2.3.5 to 3.0.3 and have found
the following:&lt;/p&gt;
&lt;p&gt;user.rb&lt;br&gt;
has_many :relationships&lt;br&gt;
has_many :contacts, :through =&amp;gt; :relationships, :conditions
=&amp;gt; {:relationships =&amp;gt; {:status =&amp;gt; &quot;1&quot;}}&lt;/p&gt;
&lt;p&gt;In Rails 2.3.5, I could call user.contact_ids and it would run
through the entire condition:&lt;/p&gt;
&lt;p&gt;user.contact_ids =&amp;gt;&lt;br&gt;
SELECT &lt;code&gt;users&lt;/code&gt;.id FROM &lt;code&gt;users&lt;/code&gt; INNER JOIN
&lt;code&gt;relationships&lt;/code&gt; ON &lt;code&gt;users&lt;/code&gt;.id =
&lt;code&gt;relationships&lt;/code&gt;.contact_id WHERE
((&lt;code&gt;relationships&lt;/code&gt;.user_id = 2) AND
((&lt;code&gt;relationships&lt;/code&gt;.&lt;code&gt;status&lt;/code&gt; = 1)))&lt;/p&gt;
&lt;p&gt;In Rails 3.0.3, it seems to be ignoring the parameters
altogether.&lt;/p&gt;
&lt;p&gt;user.contact_ids =&amp;gt;&lt;br&gt;
SELECT DISTINCT &lt;code&gt;relationships&lt;/code&gt;.contact_id FROM
&lt;code&gt;relationships&lt;/code&gt; WHERE
(&lt;code&gt;relationships&lt;/code&gt;.user_id = 2)&lt;/p&gt;
&lt;p&gt;Hopefully I'm missing something obvious here, but this change
has put a serious wrench in my code, where I was using _ids
associations for efficiency when I only ever needed IDs.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm upgrading my Rails app from 2.3.5 to 3.0.3 and have found the following:

user.rb
has_many :relationships
has_many :contacts, :through =&gt; :relationships, :conditions =&gt; {:relationships =&gt; {:status =&gt; &quot;1&quot;}}

In Rails 2.3.5, I could call user.contact_ids and it would run through the entire condition:

user.contact_ids =&gt;
SELECT `users`.id FROM `users` INNER JOIN `relationships` ON `users`.id = `relationships`.contact_id WHERE ((`relationships`.user_id = 2) AND ((`relationships`.`status` = 1)))


In Rails 3.0.3, it seems to be ignoring the parameters altogether.

user.contact_ids =&gt;
SELECT DISTINCT `relationships`.contact_id FROM `relationships` WHERE (`relationships`.user_id = 2)

Hopefully I'm missing something obvious here, but this change has put a serious wrench in my code, where I was using _ids associations for efficiency when I only ever needed IDs.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm upgrading my Rails app from 2.3.5 to 3.0.3 and have found
the following:&lt;/p&gt;
&lt;p&gt;user.rb&lt;br&gt;
has_many :relationships&lt;br&gt;
has_many :contacts, :through =&amp;gt; :relationships, :conditions
=&amp;gt; {:relationships =&amp;gt; {:status =&amp;gt; &quot;1&quot;}}&lt;/p&gt;
&lt;p&gt;In Rails 2.3.5, I could call user.contact_ids and it would run
through the entire condition:&lt;/p&gt;
&lt;p&gt;user.contact_ids =&amp;gt;&lt;br&gt;
SELECT &lt;code&gt;users&lt;/code&gt;.id FROM &lt;code&gt;users&lt;/code&gt; INNER JOIN
&lt;code&gt;relationships&lt;/code&gt; ON &lt;code&gt;users&lt;/code&gt;.id =
&lt;code&gt;relationships&lt;/code&gt;.contact_id WHERE
((&lt;code&gt;relationships&lt;/code&gt;.user_id = 2) AND
((&lt;code&gt;relationships&lt;/code&gt;.&lt;code&gt;status&lt;/code&gt; = 1)))&lt;/p&gt;
&lt;p&gt;In Rails 3.0.3, it seems to be ignoring the parameters
altogether.&lt;/p&gt;
&lt;p&gt;user.contact_ids =&amp;gt;&lt;br&gt;
SELECT DISTINCT &lt;code&gt;relationships&lt;/code&gt;.contact_id FROM
&lt;code&gt;relationships&lt;/code&gt; WHERE
(&lt;code&gt;relationships&lt;/code&gt;.user_id = 2)&lt;/p&gt;
&lt;p&gt;Hopefully I'm missing something obvious here, but this change
has put a serious wrench in my code, where I was using _ids
associations for efficiency when I only ever needed IDs.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-11T23:51:57+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6153</number>
      <permalink>accessing-associations-via-x_ids-no-longer-uses-association-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many &quot;rails 3.0.3&quot;</tag>
      <title>Accessing associations via x_ids no longer uses association conditions</title>
      <updated-at type="datetime">2010-12-11T23:52:00+00:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">1</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6153</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Forgot to add that this is using Ruby 1.9.2 and the mysql2 gem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Forgot to add that this is using Ruby 1.9.2 and the mysql2
gem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-12T22:58:58+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6153</number>
      <permalink>accessing-associations-via-x_ids-no-longer-uses-association-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many &quot;rails 3.0.3&quot;</tag>
      <title>Accessing associations via x_ids no longer uses association conditions</title>
      <updated-at type="datetime">2010-12-12T22:59:05+00:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">2</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6153</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Confirmed with 1.8.7.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Confirmed with 1.8.7.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-13T04:31:39+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6153</number>
      <permalink>accessing-associations-via-x_ids-no-longer-uses-association-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many &quot;rails 3.0.3&quot;</tag>
      <title>Accessing associations via x_ids no longer uses association conditions</title>
      <updated-at type="datetime">2010-12-13T04:31:42+00:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">3</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6153</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Have the same bug in edge. It works correct for has_many but incorrect for has_many :through</body>
      <body-html>&lt;div&gt;&lt;p&gt;Have the same bug in edge. It works correct for has_many but
incorrect for has_many :through&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-19T14:59:48+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: associations has_many &quot;rails 3.0.3&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6153</number>
      <permalink>accessing-associations-via-x_ids-no-longer-uses-association-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations bug has_many_through &quot;rails 3.0.3&quot;</tag>
      <title>Accessing associations via x_ids no longer uses association conditions</title>
      <updated-at type="datetime">2010-12-19T14:59:53+00:00</updated-at>
      <user-id type="integer">65953</user-id>
      <version type="integer">4</version>
      <user-name>2kan</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6153</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This problem was introduced by this optimisation: https://github.com/rails/rails/commit/373b053dc8b99dac1abc3879a17a2bf8c30302b5

The optimisation could still work, but we'd need to be very cautious about when it's applied. For example, it could never be applied when there are `:conditions` or `:order` options on the reflection, through_reflection, or source_reflection.

My preference is to just revert the optimisation, I don't think it's worth muddying the code to tests for all these conditions to apply a small optimisation in a very specific case.

I've attached a patch with 1) a test which fails on master and 2) a commit which reverts the above, causing the test to pass again.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This problem was introduced by this optimisation: &lt;a href=
&quot;https://github.com/rails/rails/commit/373b053dc8b99dac1abc3879a17a2bf8c30302b5&quot;&gt;
https://github.com/rails/rails/commit/373b053dc8b99dac1abc3879a17a2...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The optimisation could still work, but we'd need to be very
cautious about when it's applied. For example, it could never be
applied when there are &lt;code&gt;:conditions&lt;/code&gt; or
&lt;code&gt;:order&lt;/code&gt; options on the reflection, through_reflection,
or source_reflection.&lt;/p&gt;
&lt;p&gt;My preference is to just revert the optimisation, I don't think
it's worth muddying the code to tests for all these conditions to
apply a small optimisation in a very specific case.&lt;/p&gt;
&lt;p&gt;I've attached a patch with 1) a test which fails on master and
2) a commit which reverts the above, causing the test to pass
again.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-22T10:37:06+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6153</number>
      <permalink>accessing-associations-via-x_ids-no-longer-uses-association-conditions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>associations bug has_many_through &quot;rails 3.0.3&quot;</tag>
      <title>Accessing associations via x_ids no longer uses association conditions</title>
      <updated-at type="datetime">2010-12-22T10:37:21+00:00</updated-at>
      <user-id type="integer">11330</user-id>
      <version type="integer">5</version>
      <user-name>Jon Leighton</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6153</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-22T10:38:38+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6153</number>
      <permalink>accessing-associations-via-x_ids-no-longer-uses-association-conditions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>associations bug has_many_through &quot;rails 3.0.3&quot;</tag>
      <title>Accessing associations via x_ids no longer uses association conditions</title>
      <updated-at type="datetime">2010-12-22T10:38:53+00:00</updated-at>
      <user-id type="integer">11330</user-id>
      <version type="integer">6</version>
      <user-name>Jon Leighton</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6153</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [1619c2435b2b9c821b2b0dcab9624dbb6b23eaaa]) Revert &quot;Optimize &lt;association&gt;_ids for hm:t with belongs_to source&quot;. The optimisation has too many edge cases, such as when the reflection, source reflection, or through reflection has conditions, orders, etc. [#6153 state:resolved]

This reverts commit 373b053dc8b99dac1abc3879a17a2bf8c30302b5.

Conflicts:

	activerecord/lib/active_record/associations.rb
https://github.com/rails/rails/commit/1619c2435b2b9c821b2b0dcab9624dbb6b23eaaa</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/1619c2435b2b9c821b2b0dcab9624dbb6b23eaaa&quot;
title=
&quot;Changeset [1619c2435b2b9c821b2b0dcab9624dbb6b23eaaa]&quot;&gt;[1619c2435b2b9c821b2b0dcab9624dbb6b23eaaa]&lt;/a&gt;)
Revert &quot;Optimize _ids for hm:t with belongs_to source&quot;. The
optimisation has too many edge cases, such as when the reflection,
source reflection, or through reflection has conditions, orders,
etc. [&lt;a href=&quot;/projects/8994/tickets/6153&quot; title=
&quot;Ticket #6153&quot;&gt;#6153&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;This reverts commit
373b053dc8b99dac1abc3879a17a2bf8c30302b5.&lt;/p&gt;
&lt;p&gt;Conflicts:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;activerecord/lib/active_record/associations.rb&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/commit/1619c2435b2b9c821b2b0dcab9624dbb6b23eaaa&quot;&gt;
https://github.com/rails/rails/commit/1619c2435b2b9c821b2b0dcab9624...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-23T23:21:30+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6153</number>
      <permalink>accessing-associations-via-x_ids-no-longer-uses-association-conditions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>associations bug has_many_through &quot;rails 3.0.3&quot;</tag>
      <title>Accessing associations via x_ids no longer uses association conditions</title>
      <updated-at type="datetime">2010-12-23T23:21:49+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">7</version>
      <user-name>Repository</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6153</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>a1123b027a661cf233436c53a3e59bc4229f0639</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-12-22T10:38:38+00:00</created-at>
      <filename>6153_association_ids_with_conditions.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">831130</id>
      <size type="integer">4517</size>
      <uploader-id type="integer">11330</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/831130/6153_association_ids_with_conditions.diff</url>
    </attachment>
  </attachments>
</ticket>
