<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-09-16T11:31:29+01:00</created-at>
  <creator-id type="integer">71795</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3693</number>
  <permalink>patch-activerecord-timestamp-conversions-fail-for-some-cases</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>2.3.5 patch timestamp</tag>
  <title>[PATCH]  ActiveRecord timestamp conversions fail for some cases</title>
  <updated-at type="datetime">2010-10-16T23:57:07+01:00</updated-at>
  <user-id type="integer">81551</user-id>
  <version type="integer">6</version>
  <user-name>Andrea Campi</user-name>
  <creator-name>Jacob Lauem&#248;ller</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3693</url>
  <priority-name nil="true"></priority-name>
  <original-body>The microsecond handling in ActiveRecord::ConnectionAdapters::Column#fast_string_to_time and ActiveRecord::ConnectionAdapters::Column#microseconds fail for some values.

In slightly more than 1% of all possible 6-digit cases, writing a timestamp to a database column and then reading it back in results in a different value being returned to the program.

So, for instance, saving the timestamp 

	2010-01-12 12:34:56.125014

and then loading it again from the database yields

	2010-01-12 12:34:56.125013

The problem occurs when the value read is converted from string form to a Ruby timestamp, so it is largely database independent (the exception being drivers that override the methods or databases that don't support timestamps at all).

The underlying problem is the use of to_i to convert from floats to ints inside the affected methods. As you know, to_i simply truncates the result and in some cases this causes rounding errors introduced by inherent inaccuracies in the multiplication operations and decimal representation to bubble up and affect the least significant digit. 

Here's a simple test that illustrates the problem:

   	converted = ActiveRecord::ConnectionAdapters::Column.send('fast_string_to_time', &quot;2010-01-12 12:34:56.125014&quot;)
    	assert_equal 125014, converted.usec

This test case (and a similar one for #microseconds) fail on plain vanilla Rails 2.3.5.

I guess the best solution would be to change the ISO_DATETIME regex used to extract the microsecond-part from timestamps to not include the decimal point at all and then avoid the to_f and subsequent floating point multiplication completely inside the failing methods. However, these regexes are defined as constants on ActiveRecord::ConnectionAdapters::Column::Format and therefore publicly available, so the impact of changing these is difficult to ascertain. 

A simpler solution is to use round() instead of to_i to convert from the intermediate floating point result to int. This works (I have verified that the precision is sufficient for all possible 6-digit cases) but is about 15% slower than the current method. A small price to pay for correctness, in my opinion.

I have attached a tiny patch (against 2.3.5) that switches the code to using round() and a test case that verifies that the method works for a few problematic cases that fail without the patch.</original-body>
  <latest-body>The microsecond handling in ActiveRecord::ConnectionAdapters::Column#fast_string_to_time and ActiveRecord::ConnectionAdapters::Column#microseconds fail for some values.

In slightly more than 1% of all possible 6-digit cases, writing a timestamp to a database column and then reading it back in results in a different value being returned to the program.

So, for instance, saving the timestamp 

	2010-01-12 12:34:56.125014

and then loading it again from the database yields

	2010-01-12 12:34:56.125013

The problem occurs when the value read is converted from string form to a Ruby timestamp, so it is largely database independent (the exception being drivers that override the methods or databases that don't support timestamps at all).

The underlying problem is the use of to_i to convert from floats to ints inside the affected methods. As you know, to_i simply truncates the result and in some cases this causes rounding errors introduced by inherent inaccuracies in the multiplication operations and decimal representation to bubble up and affect the least significant digit. 

Here's a simple test that illustrates the problem:

   	converted = ActiveRecord::ConnectionAdapters::Column.send('fast_string_to_time', &quot;2010-01-12 12:34:56.125014&quot;)
    	assert_equal 125014, converted.usec

This test case (and a similar one for #microseconds) fail on plain vanilla Rails 2.3.5.

I guess the best solution would be to change the ISO_DATETIME regex used to extract the microsecond-part from timestamps to not include the decimal point at all and then avoid the to_f and subsequent floating point multiplication completely inside the failing methods. However, these regexes are defined as constants on ActiveRecord::ConnectionAdapters::Column::Format and therefore publicly available, so the impact of changing these is difficult to ascertain. 

A simpler solution is to use round() instead of to_i to convert from the intermediate floating point result to int. This works (I have verified that the precision is sufficient for all possible 6-digit cases) but is about 15% slower than the current method. A small price to pay for correctness, in my opinion.

I have attached a tiny patch (against 2.3.5) that switches the code to using round() and a test case that verifies that the method works for a few problematic cases that fail without the patch.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The microsecond handling in
ActiveRecord::ConnectionAdapters::Column#fast_string_to_time and
ActiveRecord::ConnectionAdapters::Column#microseconds fail for some
values.&lt;/p&gt;
&lt;p&gt;In slightly more than 1% of all possible 6-digit cases, writing
a timestamp to a database column and then reading it back in
results in a different value being returned to the program.&lt;/p&gt;
&lt;p&gt;So, for instance, saving the timestamp&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2010-01-12 12:34:56.125014&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and then loading it again from the database yields&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2010-01-12 12:34:56.125013&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem occurs when the value read is converted from string
form to a Ruby timestamp, so it is largely database independent
(the exception being drivers that override the methods or databases
that don't support timestamps at all).&lt;/p&gt;
&lt;p&gt;The underlying problem is the use of to_i to convert from floats
to ints inside the affected methods. As you know, to_i simply
truncates the result and in some cases this causes rounding errors
introduced by inherent inaccuracies in the multiplication
operations and decimal representation to bubble up and affect the
least significant digit.&lt;/p&gt;
&lt;p&gt;Here's a simple test that illustrates the problem:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;converted = ActiveRecord::ConnectionAdapters::Column.send('fast_string_to_time', &quot;2010-01-12 12:34:56.125014&quot;)
    assert_equal 125014, converted.usec&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This test case (and a similar one for #microseconds) fail on
plain vanilla Rails 2.3.5.&lt;/p&gt;
&lt;p&gt;I guess the best solution would be to change the ISO_DATETIME
regex used to extract the microsecond-part from timestamps to not
include the decimal point at all and then avoid the to_f and
subsequent floating point multiplication completely inside the
failing methods. However, these regexes are defined as constants on
ActiveRecord::ConnectionAdapters::Column::Format and therefore
publicly available, so the impact of changing these is difficult to
ascertain.&lt;/p&gt;
&lt;p&gt;A simpler solution is to use round() instead of to_i to convert
from the intermediate floating point result to int. This works (I
have verified that the precision is sufficient for all possible
6-digit cases) but is about 15% slower than the current method. A
small price to pay for correctness, in my opinion.&lt;/p&gt;
&lt;p&gt;I have attached a tiny patch (against 2.3.5) that switches the
code to using round() and a test case that verifies that the method
works for a few problematic cases that fail without the patch.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The microsecond handling in ActiveRecord::ConnectionAdapters::Column#fast_string_to_time and ActiveRecord::ConnectionAdapters::Column#microseconds fail for some values.

In slightly more than 1% of all possible 6-digit cases, writing a timestamp to a database column and then reading it back in results in a different value being returned to the program.

So, for instance, saving the timestamp 

	2010-01-12 12:34:56.125014

and then loading it again from the database yields

	2010-01-12 12:34:56.125013

The problem occurs when the value read is converted from string form to a Ruby timestamp, so it is largely database independent (the exception being drivers that override the methods or databases that don't support timestamps at all).

The underlying problem is the use of to_i to convert from floats to ints inside the affected methods. As you know, to_i simply truncates the result and in some cases this causes rounding errors introduced by inherent inaccuracies in the multiplication operations and decimal representation to bubble up and affect the least significant digit. 

Here's a simple test that illustrates the problem:

   	converted = ActiveRecord::ConnectionAdapters::Column.send('fast_string_to_time', &quot;2010-01-12 12:34:56.125014&quot;)
    	assert_equal 125014, converted.usec

This test case (and a similar one for #microseconds) fail on plain vanilla Rails 2.3.5.

I guess the best solution would be to change the ISO_DATETIME regex used to extract the microsecond-part from timestamps to not include the decimal point at all and then avoid the to_f and subsequent floating point multiplication completely inside the failing methods. However, these regexes are defined as constants on ActiveRecord::ConnectionAdapters::Column::Format and therefore publicly available, so the impact of changing these is difficult to ascertain. 

A simpler solution is to use round() instead of to_i to convert from the intermediate floating point result to int. This works (I have verified that the precision is sufficient for all possible 6-digit cases) but is about 15% slower than the current method. A small price to pay for correctness, in my opinion.

I have attached a tiny patch (against 2.3.5) that switches the code to using round() and a test case that verifies that the method works for a few problematic cases that fail without the patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The microsecond handling in
ActiveRecord::ConnectionAdapters::Column#fast_string_to_time and
ActiveRecord::ConnectionAdapters::Column#microseconds fail for some
values.&lt;/p&gt;
&lt;p&gt;In slightly more than 1% of all possible 6-digit cases, writing
a timestamp to a database column and then reading it back in
results in a different value being returned to the program.&lt;/p&gt;
&lt;p&gt;So, for instance, saving the timestamp&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2010-01-12 12:34:56.125014&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and then loading it again from the database yields&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2010-01-12 12:34:56.125013&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem occurs when the value read is converted from string
form to a Ruby timestamp, so it is largely database independent
(the exception being drivers that override the methods or databases
that don't support timestamps at all).&lt;/p&gt;
&lt;p&gt;The underlying problem is the use of to_i to convert from floats
to ints inside the affected methods. As you know, to_i simply
truncates the result and in some cases this causes rounding errors
introduced by inherent inaccuracies in the multiplication
operations and decimal representation to bubble up and affect the
least significant digit.&lt;/p&gt;
&lt;p&gt;Here's a simple test that illustrates the problem:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;converted = ActiveRecord::ConnectionAdapters::Column.send('fast_string_to_time', &quot;2010-01-12 12:34:56.125014&quot;)
    assert_equal 125014, converted.usec&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This test case (and a similar one for #microseconds) fail on
plain vanilla Rails 2.3.5.&lt;/p&gt;
&lt;p&gt;I guess the best solution would be to change the ISO_DATETIME
regex used to extract the microsecond-part from timestamps to not
include the decimal point at all and then avoid the to_f and
subsequent floating point multiplication completely inside the
failing methods. However, these regexes are defined as constants on
ActiveRecord::ConnectionAdapters::Column::Format and therefore
publicly available, so the impact of changing these is difficult to
ascertain.&lt;/p&gt;
&lt;p&gt;A simpler solution is to use round() instead of to_i to convert
from the intermediate floating point result to int. This works (I
have verified that the precision is sufficient for all possible
6-digit cases) but is about 15% slower than the current method. A
small price to pay for correctness, in my opinion.&lt;/p&gt;
&lt;p&gt;I have attached a tiny patch (against 2.3.5) that switches the
code to using round() and a test case that verifies that the method
works for a few problematic cases that fail without the patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-14T15:16:35+00:00</created-at>
      <creator-id type="integer">71795</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3693</number>
      <permalink>patch-activerecord-timestamp-conversions-fail-for-some-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 2.3.5 timestamp bug patch&quot;</tag>
      <title>[PATCH]  ActiveRecord timestamp conversions fail for some cases</title>
      <updated-at type="datetime">2010-01-14T15:16:39+00:00</updated-at>
      <user-id type="integer">71795</user-id>
      <version type="integer">1</version>
      <user-name>Jacob Lauem&#248;ller</user-name>
      <creator-name>Jacob Lauem&#248;ller</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3693</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I spent an entirely inappropriate amount of time digging into this issue...

Here are some observations:

The #microseconds method LOOKS clumsy, but it's actually quite optimized.  Turns out the the sec_fraction component is a Rational less than one.  So.... converting as quickly as possible to something other than Rational (Float, in this case) is actually the right thing to do.  I tried dozens of alternatives and benchmarked them all and could not beat the current implementation -even after changing the #to_i to #round.  Arguably, the modulo division step is superfluous -but only if you always pass in rationals less than one.

On the other hand, The regex parsing of time strings in #fast_string_to_time is both clunky and incorrect for some values (as noted and fixed by Jacob).  I've taken the first approach hinted at by Jacob and used a more direct regex to return only integers.  The result is a method that is faster (roughly 5%), accurate (no more truncation issues) and arguably cleaner (no more double conversion).  It should be completely backwards compatible as well -I've defined a new constant.

The benchmarks are here: http://gist.github.com/278185

I've attached a new patch with extensive tests.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I spent an entirely inappropriate amount of time digging into
this issue...&lt;/p&gt;
&lt;p&gt;Here are some observations:&lt;/p&gt;
&lt;p&gt;The #microseconds method LOOKS clumsy, but it's actually quite
optimized. Turns out the the sec_fraction component is a Rational
less than one. So.... converting as quickly as possible to
something other than Rational (Float, in this case) is actually the
right thing to do. I tried dozens of alternatives and benchmarked
them all and could not beat the current implementation -even after
changing the #to_i to #round. Arguably, the modulo division step is
superfluous -but only if you always pass in rationals less than
one.&lt;/p&gt;
&lt;p&gt;On the other hand, The regex parsing of time strings in
#fast_string_to_time is both clunky and incorrect for some values
(as noted and fixed by Jacob). I've taken the first approach hinted
at by Jacob and used a more direct regex to return only integers.
The result is a method that is faster (roughly 5%), accurate (no
more truncation issues) and arguably cleaner (no more double
conversion). It should be completely backwards compatible as well
-I've defined a new constant.&lt;/p&gt;
&lt;p&gt;The benchmarks are here: &lt;a href=
&quot;http://gist.github.com/278185&quot;&gt;http://gist.github.com/278185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've attached a new patch with extensive tests.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-15T23:53:11+00:00</created-at>
      <creator-id type="integer">71795</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3693</number>
      <permalink>patch-activerecord-timestamp-conversions-fail-for-some-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 2.3.5 timestamp bug patch&quot;</tag>
      <title>[PATCH]  ActiveRecord timestamp conversions fail for some cases</title>
      <updated-at type="datetime">2010-01-15T23:53:22+00:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">2</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Jacob Lauem&#248;ller</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3693</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Applied to master in 717a294</body>
      <body-html>&lt;div&gt;&lt;p&gt;Applied to master in 717a294&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-16T02:23:50+00:00</created-at>
      <creator-id type="integer">71795</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3693</number>
      <permalink>patch-activerecord-timestamp-conversions-fail-for-some-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>&quot;rails 2.3.5 timestamp bug patch&quot;</tag>
      <title>[PATCH]  ActiveRecord timestamp conversions fail for some cases</title>
      <updated-at type="datetime">2010-01-16T02:23:54+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">3</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Jacob Lauem&#248;ller</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3693</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Pratik seemed to have reverted this commit with 0ab3063 so I guess the issue still stands in 2.3.x and 3.x


@@@
commit 0ab30637dd5bc7536c5accd66b45ce0263134a14
Author: Pratik Naik &lt;pratiknaik@gmail.com&gt;
Date:   Sun Jan 17 03:04:11 2010 +0530

    Revert &quot;Fix #microseconds conversion and #fast_string_to_time&quot;
    
    This reverts commit 717a2941e15b32d07cc456bb0d81742ecfc5b4a3. Bunch of failures when running postgresql tests.
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Pratik seemed to have reverted this commit with 0ab3063 so I
guess the issue still stands in 2.3.x and 3.x&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;commit 0ab30637dd5bc7536c5accd66b45ce0263134a14
Author: Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt;
Date:   Sun Jan 17 03:04:11 2010 +0530

    Revert &quot;Fix #microseconds conversion and #fast_string_to_time&quot;
    
    This reverts commit 717a2941e15b32d07cc456bb0d81742ecfc5b4a3. Bunch of failures when running postgresql tests.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-13T13:30:29+01:00</created-at>
      <creator-id type="integer">71795</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3693</number>
      <permalink>patch-activerecord-timestamp-conversions-fail-for-some-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>&quot;rails 2.3.5 timestamp bug patch&quot;</tag>
      <title>[PATCH]  ActiveRecord timestamp conversions fail for some cases</title>
      <updated-at type="datetime">2010-09-13T13:30:31+01:00</updated-at>
      <user-id type="integer">844</user-id>
      <version type="integer">4</version>
      <user-name>Levent</user-name>
      <creator-name>Jacob Lauem&#248;ller</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3693</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Pratik, do you have any insight as to why this failed on postgresql?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Pratik, do you have any insight as to why this failed on
postgresql?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-11T18:16:06+01:00</created-at>
      <creator-id type="integer">71795</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3693</number>
      <permalink>patch-activerecord-timestamp-conversions-fail-for-some-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>&quot;rails 2.3.5 timestamp bug patch&quot;</tag>
      <title>[PATCH]  ActiveRecord timestamp conversions fail for some cases</title>
      <updated-at type="datetime">2010-10-11T18:16:08+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">5</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Jacob Lauem&#248;ller</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3693</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-16T23:57:04+01:00</created-at>
      <creator-id type="integer">71795</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;rails 2.3.5 timestamp bug patch\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3693</number>
      <permalink>patch-activerecord-timestamp-conversions-fail-for-some-cases</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2.3.5 patch timestamp</tag>
      <title>[PATCH]  ActiveRecord timestamp conversions fail for some cases</title>
      <updated-at type="datetime">2010-10-16T23:57:07+01:00</updated-at>
      <user-id type="integer">81551</user-id>
      <version type="integer">6</version>
      <user-name>Andrea Campi</user-name>
      <creator-name>Jacob Lauem&#248;ller</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3693</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>34dc864db30a8a8053a9abfc6bbbd427676d7998</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-14T15:16:35+00:00</created-at>
      <filename>fix_microsecond_conversion.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">376671</id>
      <size type="integer">2996</size>
      <uploader-id type="integer">71795</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/376671/fix_microsecond_conversion.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>54772d47c9b343b1bc8091fd27958f5a3d245b4a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-15T23:53:11+00:00</created-at>
      <filename>3693_microseconds.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">379966</id>
      <size type="integer">4621</size>
      <uploader-id type="integer">17461</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/379966/3693_microseconds.diff</url>
    </attachment>
  </attachments>
</ticket>
