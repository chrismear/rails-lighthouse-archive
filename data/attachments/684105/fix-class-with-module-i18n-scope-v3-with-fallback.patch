diff -r a/activemodel/lib/active_model/errors.rb b/activemodel/lib/active_model/errors.rb
268,270c268,276
<       defaults = @base.class.lookup_ancestors.map do |klass|
<         [ :"#{@base.class.i18n_scope}.errors.models.#{klass.model_name.underscore}.attributes.#{attribute}.#{type}",
<           :"#{@base.class.i18n_scope}.errors.models.#{klass.model_name.underscore}.#{type}" ]
---
>       default_attribute_types = []
>       default_types = []
>       @base.class.lookup_ancestors.each do |klass|
>         key_parts = klass.model_name.i18n_key.to_s.split('.')
>         while key_parts.size > 0
>           default_attribute_types << :"#{@base.class.i18n_scope}.errors.models.#{key_parts * '.'}.attributes.#{attribute}.#{type}"
>           default_types << :"#{@base.class.i18n_scope}.errors.models.#{key_parts * '.'}.#{type}"
>           key_parts.pop
>         end
271a278
>       defaults = default_attribute_types + default_types
diff -r a/activemodel/lib/active_model/naming.rb b/activemodel/lib/active_model/naming.rb
34c34
<         klass.model_name.underscore.to_sym
---
>         klass.model_name.i18n_key
43a44,48
>     # Returns an i18n key symbol for module.
>     def i18n_key
>       @_i18n_key ||= ActiveSupport::Inflector.underscore(self).tr('/', '.').to_sym
>     end
> 
62a68,70
>   #   BookCover.model_name.i18n_key              # => "book_cover"
>   #   BookModule::BookCover.model_name.i18n_key  # => "book_module.book_cover"
>   #
diff -r a/activemodel/lib/active_model/translation.rb b/activemodel/lib/active_model/translation.rb
46,47c46,52
<       defaults = lookup_ancestors.map do |klass|
<         :"#{self.i18n_scope}.attributes.#{klass.model_name.underscore}.#{attribute}"
---
>       defaults = []
>       lookup_ancestors.each do |klass|
>         key_parts = klass.model_name.i18n_key.to_s.split('.')
>         while key_parts.size > 0
>           defaults << :"#{self.i18n_scope}.attributes.#{key_parts * '.'}.#{attribute}"
>           key_parts.pop
>         end
diff -r a/activemodel/test/cases/translation_test.rb b/activemodel/test/cases/translation_test.rb
33a34,43
>   
>   def test_transalted_model_attributes_with_module_fallback
>     I18n.backend.store_translations 'en', :activemodel => {:attributes => {:person_module => {:title => 'title attribute for module'} } }
>     assert_equal 'title attribute for module', PersonModule::Person.human_attribute_name('title')
>   end
> 
>   def test_transalted_model_attributes_with_module
>     I18n.backend.store_translations 'en', :activemodel => {:attributes => {:person_module => { :person => {:title => 'title attribute for person'} } } }
>     assert_equal 'title attribute for person', PersonModule::Person.human_attribute_name('title')
>   end
48a59,63
>   
>   def test_translated_model_names_with_module
>     I18n.backend.store_translations 'en', :activemodel => {:models => {:person_module => {:person => 'person model in module'} } }
>     assert_equal 'person model in module', PersonModule::Person.model_name.human
>   end  
diff -r a/activemodel/test/cases/validations/i18n_validation_test.rb b/activemodel/test/cases/validations/i18n_validation_test.rb
57a58,65
>   def test_errors_full_messages_translates_human_attribute_name_for_model_in_module_attributes
>     I18n.backend.store_translations('en', :activemodel => {:attributes => {:person_module => {:person => {:name => "Person in Module's name"}}}})
>     person = PersonModule::Person.new
>     person.errors.add(:name, 'not found')
>     PersonModule::Person.expects(:human_attribute_name).with(:name, :default => 'Name').returns("Person in Module's name")
>     assert_equal ["Person in Module's name not found"], person.errors.full_messages
>   end
> 
365a374,391
>   # test class i18n scope with Module
> 
>   def test_model_with_module_i18n_scope
>       I18n.backend.store_translations 'en', :activemodel => {:errors => {:models => {:person_module => {:blank => 'generic blank from module'}}}}
>       PersonModule::Person.validates_presence_of :title
>       person = PersonModule::Person.new
>       person.title = nil
>       person.valid?
>       assert_equal ['generic blank from module'], person.errors[:title]
>       
>       I18n.backend.store_translations 'en', :activemodel => {:errors => {:models => {:person_module => {:person => {:blank => 'generic blank'}}}}}
>       person.valid?
>       assert_equal ['generic blank'], person.errors[:title]
> 
>       I18n.backend.store_translations 'en', :activemodel => {:errors => {:models => {:person_module => {:person => {:attributes => {:title => {:blank => 'title cannot be blank'}}}}}}}
>       person.valid?
>       assert_equal ['title cannot be blank'], person.errors[:title]
>   end
diff -r a/activemodel/test/models/person.rb b/activemodel/test/models/person.rb
13a14,18
> 
> module PersonModule
>   class Person < ::Person
>   end
> end
