<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-28T21:35:28+00:00</created-at>
  <creator-id type="integer">30753</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3628</number>
  <permalink>infinite-loop-when-using-has_many-through-with-nonstandard-keys</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord has_many_through patch</tag>
  <title>Infinite loop when using has_many :through with nonstandard keys</title>
  <updated-at type="datetime">2010-10-09T03:16:31+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">2</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>aubrey</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3628</url>
  <priority-name>Low</priority-name>
  <original-body>If you attempt the create a has_many :through association that uses a has_many association with nonstandard primary and foreign keys, you will get an infinite loop when trying to use the association.

This happens because the association calls owner_quoted_id in construct_quoted_owner_attributes, and owner_quoted_id calls quote_value. The problem is that quote_value is not defined on the association itself and needs to be called through method_missing. The method_missing implementation in association_collection tries to send the method through to the reflection's class, but only after calling construct_scope, and that method ends up calling owner_quoted_id again, creating an infinite loop. The attached patch against 2-3-stable implements the quote_value method on AssociationCollection to send the call directly to the reflection's class without going through method_missing.

Here is a code example: 

@@@ ruby
class MailingList &lt; ActiveRecord::Base
  has_many :subscriptions
end

class Subscription &lt; ActiveRecord::Base
  belongs_to :mailing_list
  belongs_to :user, :primary_key =&gt; :email, :foreign_key =&gt; :email
end

class User &lt; ActiveRecord::Base
  has_many :subscriptions, :primary_key =&gt; :email, :foreign_key =&gt; :email, :dependent =&gt; :destroy
  has_many :mailing_lists, :through =&gt; :subscriptions, :primary_key =&gt; :email, :foreign_key =&gt; :email
end

User.first.mailing_lists =&gt; # infinite loop
@@@</original-body>
  <latest-body>If you attempt the create a has_many :through association that uses a has_many association with nonstandard primary and foreign keys, you will get an infinite loop when trying to use the association.

This happens because the association calls owner_quoted_id in construct_quoted_owner_attributes, and owner_quoted_id calls quote_value. The problem is that quote_value is not defined on the association itself and needs to be called through method_missing. The method_missing implementation in association_collection tries to send the method through to the reflection's class, but only after calling construct_scope, and that method ends up calling owner_quoted_id again, creating an infinite loop. The attached patch against 2-3-stable implements the quote_value method on AssociationCollection to send the call directly to the reflection's class without going through method_missing.

Here is a code example: 

@@@ ruby
class MailingList &lt; ActiveRecord::Base
  has_many :subscriptions
end

class Subscription &lt; ActiveRecord::Base
  belongs_to :mailing_list
  belongs_to :user, :primary_key =&gt; :email, :foreign_key =&gt; :email
end

class User &lt; ActiveRecord::Base
  has_many :subscriptions, :primary_key =&gt; :email, :foreign_key =&gt; :email, :dependent =&gt; :destroy
  has_many :mailing_lists, :through =&gt; :subscriptions, :primary_key =&gt; :email, :foreign_key =&gt; :email
end

User.first.mailing_lists =&gt; # infinite loop
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If you attempt the create a has_many :through association that
uses a has_many association with nonstandard primary and foreign
keys, you will get an infinite loop when trying to use the
association.&lt;/p&gt;
&lt;p&gt;This happens because the association calls owner_quoted_id in
construct_quoted_owner_attributes, and owner_quoted_id calls
quote_value. The problem is that quote_value is not defined on the
association itself and needs to be called through method_missing.
The method_missing implementation in association_collection tries
to send the method through to the reflection's class, but only
after calling construct_scope, and that method ends up calling
owner_quoted_id again, creating an infinite loop. The attached
patch against 2-3-stable implements the quote_value method on
AssociationCollection to send the call directly to the reflection's
class without going through method_missing.&lt;/p&gt;
&lt;p&gt;Here is a code example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class MailingList &amp;lt; ActiveRecord::Base
  has_many :subscriptions
end

class Subscription &amp;lt; ActiveRecord::Base
  belongs_to :mailing_list
  belongs_to :user, :primary_key =&amp;gt; :email, :foreign_key =&amp;gt; :email
end

class User &amp;lt; ActiveRecord::Base
  has_many :subscriptions, :primary_key =&amp;gt; :email, :foreign_key =&amp;gt; :email, :dependent =&amp;gt; :destroy
  has_many :mailing_lists, :through =&amp;gt; :subscriptions, :primary_key =&amp;gt; :email, :foreign_key =&amp;gt; :email
end

User.first.mailing_lists =&amp;gt; # infinite loop&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you attempt the create a has_many :through association that uses a has_many association with nonstandard primary and foreign keys, you will get an infinite loop when trying to use the association.

This happens because the association calls owner_quoted_id in construct_quoted_owner_attributes, and owner_quoted_id calls quote_value. The problem is that quote_value is not defined on the association itself and needs to be called through method_missing. The method_missing implementation in association_collection tries to send the method through to the reflection's class, but only after calling construct_scope, and that method ends up calling owner_quoted_id again, creating an infinite loop. The attached patch against 2-3-stable implements the quote_value method on AssociationCollection to send the call directly to the reflection's class without going through method_missing.

Here is a code example: 

@@@ ruby
class MailingList &lt; ActiveRecord::Base
  has_many :subscriptions
end

class Subscription &lt; ActiveRecord::Base
  belongs_to :mailing_list
  belongs_to :user, :primary_key =&gt; :email, :foreign_key =&gt; :email
end

class User &lt; ActiveRecord::Base
  has_many :subscriptions, :primary_key =&gt; :email, :foreign_key =&gt; :email, :dependent =&gt; :destroy
  has_many :mailing_lists, :through =&gt; :subscriptions, :primary_key =&gt; :email, :foreign_key =&gt; :email
end

User.first.mailing_lists =&gt; # infinite loop
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you attempt the create a has_many :through association that
uses a has_many association with nonstandard primary and foreign
keys, you will get an infinite loop when trying to use the
association.&lt;/p&gt;
&lt;p&gt;This happens because the association calls owner_quoted_id in
construct_quoted_owner_attributes, and owner_quoted_id calls
quote_value. The problem is that quote_value is not defined on the
association itself and needs to be called through method_missing.
The method_missing implementation in association_collection tries
to send the method through to the reflection's class, but only
after calling construct_scope, and that method ends up calling
owner_quoted_id again, creating an infinite loop. The attached
patch against 2-3-stable implements the quote_value method on
AssociationCollection to send the call directly to the reflection's
class without going through method_missing.&lt;/p&gt;
&lt;p&gt;Here is a code example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class MailingList &amp;lt; ActiveRecord::Base
  has_many :subscriptions
end

class Subscription &amp;lt; ActiveRecord::Base
  belongs_to :mailing_list
  belongs_to :user, :primary_key =&amp;gt; :email, :foreign_key =&amp;gt; :email
end

class User &amp;lt; ActiveRecord::Base
  has_many :subscriptions, :primary_key =&amp;gt; :email, :foreign_key =&amp;gt; :email, :dependent =&amp;gt; :destroy
  has_many :mailing_lists, :through =&amp;gt; :subscriptions, :primary_key =&amp;gt; :email, :foreign_key =&amp;gt; :email
end

User.first.mailing_lists =&amp;gt; # infinite loop&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-28T21:35:28+00:00</created-at>
      <creator-id type="integer">30753</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3628</number>
      <permalink>infinite-loop-when-using-has_many-through-with-nonstandard-keys</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord has_many_through patch</tag>
      <title>Infinite loop when using has_many :through with nonstandard keys</title>
      <updated-at type="datetime">2009-12-28T21:35:32+00:00</updated-at>
      <user-id type="integer">30753</user-id>
      <version type="integer">1</version>
      <user-name>aubrey</user-name>
      <creator-name>aubrey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3628</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-09T03:16:29+01:00</created-at>
      <creator-id type="integer">30753</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3628</number>
      <permalink>infinite-loop-when-using-has_many-through-with-nonstandard-keys</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord has_many_through patch</tag>
      <title>Infinite loop when using has_many :through with nonstandard keys</title>
      <updated-at type="datetime">2010-10-09T03:16:31+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>aubrey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3628</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>d8e3a2f8c35bdd958021e3bc0b0989b14ae97a63</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-12-28T21:35:28+00:00</created-at>
      <filename>0001-there-is-currently-a-bug-in-activerecord-where-you-w.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">363785</id>
      <size type="integer">4862</size>
      <uploader-id type="integer">30753</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/363785/0001-there-is-currently-a-bug-in-activerecord-where-you-w.patch</url>
    </attachment>
  </attachments>
</ticket>
