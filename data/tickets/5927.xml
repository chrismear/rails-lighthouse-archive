<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">40272</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-21T14:04:55+00:00</created-at>
  <creator-id type="integer">7315</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5927</number>
  <permalink>activerecord-should-favor-activemodel-api</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag nil="true"></tag>
  <title>ActiveRecord should favor ActiveModel API</title>
  <updated-at type="datetime">2011-02-21T14:04:55+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">9</version>
  <user-name>Repository</user-name>
  <creator-name>David Chelimsky</creator-name>
  <assigned-user-name>Santiago Pastorino</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
  <priority-name>Low</priority-name>
  <original-body>ActiveModel introduced the `persisted?` method (inverse of `new_record?`), but ActiveRecord still uses `new_record?` internally and across associations. This means that extension libraries sometimes have to be aware of whether they're dealing with ActiveRecord or not.

Fixed in https://github.com/dchelimsky/rails/commit/e84cd8a2533c9581d76eca55fded3cf7095dd226

NOTES:

* patched against master as of c43d909ee28484c5e7d7d84b1228e10212d20737
* there was one failing test before this commit, which is still failing:

    test/cases/associations/cascaded_eager_loading_test.rb:128&lt;br/&gt;
    test_eager_association_loading_with_has_many_sti_and_subclasses

* there is one new failing test, but I question its validity. It
  specifies that to_key should return a non-nil value after destroy is
  called on a model. This seems like the opposite of what we would want,
  and this is the only new test failure (so no other code seems to rely on
  this behavior).

    test/cases/primary_keys_test.rb&lt;br/&gt;
    test_to_key_with_primary_key_after_destroy</original-body>
  <latest-body>ActiveModel introduced the `persisted?` method (inverse of `new_record?`), but ActiveRecord still uses `new_record?` internally and across associations. This means that extension libraries sometimes have to be aware of whether they're dealing with ActiveRecord or not.

Fixed in https://github.com/dchelimsky/rails/commit/e84cd8a2533c9581d76eca55fded3cf7095dd226

NOTES:

* patched against master as of c43d909ee28484c5e7d7d84b1228e10212d20737
* there was one failing test before this commit, which is still failing:

    test/cases/associations/cascaded_eager_loading_test.rb:128&lt;br/&gt;
    test_eager_association_loading_with_has_many_sti_and_subclasses

* there is one new failing test, but I question its validity. It
  specifies that to_key should return a non-nil value after destroy is
  called on a model. This seems like the opposite of what we would want,
  and this is the only new test failure (so no other code seems to rely on
  this behavior).

    test/cases/primary_keys_test.rb&lt;br/&gt;
    test_to_key_with_primary_key_after_destroy</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActiveModel introduced the &lt;code&gt;persisted?&lt;/code&gt; method
(inverse of &lt;code&gt;new_record?&lt;/code&gt;), but ActiveRecord still uses
&lt;code&gt;new_record?&lt;/code&gt; internally and across associations. This
means that extension libraries sometimes have to be aware of
whether they're dealing with ActiveRecord or not.&lt;/p&gt;
&lt;p&gt;Fixed in &lt;a href=
&quot;https://github.com/dchelimsky/rails/commit/e84cd8a2533c9581d76eca55fded3cf7095dd226&quot;&gt;
https://github.com/dchelimsky/rails/commit/e84cd8a2533c9581d76eca55...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NOTES:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;patched against master as of
c43d909ee28484c5e7d7d84b1228e10212d20737&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there was one failing test before this commit, which is still
failing:&lt;/p&gt;
&lt;p&gt;test/cases/associations/cascaded_eager_loading_test.rb:128&lt;br&gt;
test_eager_association_loading_with_has_many_sti_and_subclasses&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there is one new failing test, but I question its validity. It
specifies that to_key should return a non-nil value after destroy
is called on a model. This seems like the opposite of what we would
want, and this is the only new test failure (so no other code seems
to rely on this behavior).&lt;/p&gt;
&lt;p&gt;test/cases/primary_keys_test.rb&lt;br&gt;
test_to_key_with_primary_key_after_destroy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveModel introduced the `persisted?` method (inverse of `new_record?`), but ActiveRecord still uses `new_record?` internally and across associations. This means that extension libraries sometimes have to be aware of whether they're dealing with ActiveRecord or not.

Fixed in https://github.com/dchelimsky/rails/commit/e84cd8a2533c9581d76eca55fded3cf7095dd226

NOTES:

* patched against master as of c43d909ee28484c5e7d7d84b1228e10212d20737
* there was one failing test before this commit, which is still failing:

    test/cases/associations/cascaded_eager_loading_test.rb:128&lt;br/&gt;
    test_eager_association_loading_with_has_many_sti_and_subclasses

* there is one new failing test, but I question its validity. It
  specifies that to_key should return a non-nil value after destroy is
  called on a model. This seems like the opposite of what we would want,
  and this is the only new test failure (so no other code seems to rely on
  this behavior).

    test/cases/primary_keys_test.rb&lt;br/&gt;
    test_to_key_with_primary_key_after_destroy</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveModel introduced the &lt;code&gt;persisted?&lt;/code&gt; method
(inverse of &lt;code&gt;new_record?&lt;/code&gt;), but ActiveRecord still uses
&lt;code&gt;new_record?&lt;/code&gt; internally and across associations. This
means that extension libraries sometimes have to be aware of
whether they're dealing with ActiveRecord or not.&lt;/p&gt;
&lt;p&gt;Fixed in &lt;a href=
&quot;https://github.com/dchelimsky/rails/commit/e84cd8a2533c9581d76eca55fded3cf7095dd226&quot;&gt;
https://github.com/dchelimsky/rails/commit/e84cd8a2533c9581d76eca55...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NOTES:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;patched against master as of
c43d909ee28484c5e7d7d84b1228e10212d20737&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there was one failing test before this commit, which is still
failing:&lt;/p&gt;
&lt;p&gt;test/cases/associations/cascaded_eager_loading_test.rb:128&lt;br&gt;
test_eager_association_loading_with_has_many_sti_and_subclasses&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there is one new failing test, but I question its validity. It
specifies that to_key should return a non-nil value after destroy
is called on a model. This seems like the opposite of what we would
want, and this is the only new test failure (so no other code seems
to rely on this behavior).&lt;/p&gt;
&lt;p&gt;test/cases/primary_keys_test.rb&lt;br&gt;
test_to_key_with_primary_key_after_destroy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-07T14:20:52+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5927</number>
      <permalink>activerecord-should-favor-activemodel-api</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord should favor ActiveModel API</title>
      <updated-at type="datetime">2010-11-07T14:20:53+00:00</updated-at>
      <user-id type="integer">7315</user-id>
      <version type="integer">1</version>
      <user-name>David Chelimsky</user-name>
      <creator-name>David Chelimsky</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Note that `new_record?` is not removed by this change (that would not be so good for the myriad extensions rely on it). The change is that ActiveRecord uses `persisted?` internally and `new_record?` depends on the state of `persisted?`, rather than the other way 'round.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Note that &lt;code&gt;new_record?&lt;/code&gt; is not removed by this change
(that would not be so good for the myriad extensions rely on it).
The change is that ActiveRecord uses &lt;code&gt;persisted?&lt;/code&gt;
internally and &lt;code&gt;new_record?&lt;/code&gt; depends on the state of
&lt;code&gt;persisted?&lt;/code&gt;, rather than the other way 'round.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-07T14:24:39+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5927</number>
      <permalink>activerecord-should-favor-activemodel-api</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord should favor ActiveModel API</title>
      <updated-at type="datetime">2010-11-07T14:24:42+00:00</updated-at>
      <user-id type="integer">7315</user-id>
      <version type="integer">2</version>
      <user-name>David Chelimsky</user-name>
      <creator-name>David Chelimsky</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>David, I was the person who added the mentioned failing test and the reason is here (after some git blame):

https://rails.lighthouseapp.com/projects/8994/tickets/4296

Notice though that #to_key implementation does not care if the record was persisted or not:

https://github.com/rails/rails/blob/master/activemodel/lib/active_model/conversion.rb#L36

That said, the test is valid but we could probably change the current to_key implementation in AR to the following:

@@@ ruby
def to_key
  key = send(self.class.primary_key)
  [key] if key
end
@@@

So what do you think?</body>
      <body-html>&lt;div&gt;&lt;p&gt;David, I was the person who added the mentioned failing test and
the reason is here (after some git blame):&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/4296&quot;&gt;https://rails.lighthouseapp.com/projects/8994/tickets/4296&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notice though that #to_key implementation does not care if the
record was persisted or not:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/blob/master/activemodel/lib/active_model/conversion.rb#L36&quot;&gt;
https://github.com/rails/rails/blob/master/activemodel/lib/active_m...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That said, the test is valid but we could probably change the
current to_key implementation in AR to the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def to_key
  key = send(self.class.primary_key)
  [key] if key
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So what do you think?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-07T19:12:48+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5927</number>
      <permalink>activerecord-should-favor-activemodel-api</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord should favor ActiveModel API</title>
      <updated-at type="datetime">2010-11-07T19:13:02+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">3</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>David Chelimsky</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That seems fine to me, as long as `persisted?` returns false if it's been destroyed. Do you want me to make that change in my patch? Or merge what I've got and update it after?</body>
      <body-html>&lt;div&gt;&lt;p&gt;That seems fine to me, as long as &lt;code&gt;persisted?&lt;/code&gt;
returns false if it's been destroyed. Do you want me to make that
change in my patch? Or merge what I've got and update it after?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-09T01:31:31+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5927</number>
      <permalink>activerecord-should-favor-activemodel-api</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord should favor ActiveModel API</title>
      <updated-at type="datetime">2010-11-09T01:31:32+00:00</updated-at>
      <user-id type="integer">7315</user-id>
      <version type="integer">4</version>
      <user-name>David Chelimsky</user-name>
      <creator-name>David Chelimsky</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Updated patch: https://github.com/dchelimsky/rails/commit/787407c40db54d6ea87308e2872b7214dd22e501</body>
      <body-html>&lt;div&gt;&lt;p&gt;Updated patch: &lt;a href=
&quot;https://github.com/dchelimsky/rails/commit/787407c40db54d6ea87308e2872b7214dd22e501&quot;&gt;
https://github.com/dchelimsky/rails/commit/787407c40db54d6ea87308e2...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-09T01:47:17+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5927</number>
      <permalink>activerecord-should-favor-activemodel-api</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord should favor ActiveModel API</title>
      <updated-at type="datetime">2010-11-09T01:47:22+00:00</updated-at>
      <user-id type="integer">7315</user-id>
      <version type="integer">5</version>
      <user-name>David Chelimsky</user-name>
      <creator-name>David Chelimsky</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>FYI - the updated patch is rebased off a more recent master. Everything is passing now for me.</body>
      <body-html>&lt;div&gt;&lt;p&gt;FYI - the updated patch is rebased off a more recent master.
Everything is passing now for me.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-09T01:47:59+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5927</number>
      <permalink>activerecord-should-favor-activemodel-api</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord should favor ActiveModel API</title>
      <updated-at type="datetime">2010-11-09T01:48:02+00:00</updated-at>
      <user-id type="integer">7315</user-id>
      <version type="integer">6</version>
      <user-name>David Chelimsky</user-name>
      <creator-name>David Chelimsky</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, persisted? should return false if the object is destroyed. After a quick glance, the patch looks fine to me!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, persisted? should return false if the object is destroyed.
After a quick glance, the patch looks fine to me!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-09T10:13:54+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5927</number>
      <permalink>activerecord-should-favor-activemodel-api</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord should favor ActiveModel API</title>
      <updated-at type="datetime">2010-11-09T10:13:55+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">7</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>David Chelimsky</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [1f06652a57e727700c3a673dc1f86e3b1e07ce1f]) use persisted? instead of new_record? wherever possible

- persisted? is the API defined in ActiveModel
- makes it easier for extension libraries to conform to ActiveModel APIs
  without concern for whether the extended object is specifically
  ActiveRecord

[#5927 state:committed]

Signed-off-by: Santiago Pastorino &lt;santiago@wyeworks.com&gt;
https://github.com/rails/rails/commit/1f06652a57e727700c3a673dc1f86e3b1e07ce1f</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/1f06652a57e727700c3a673dc1f86e3b1e07ce1f&quot;
title=
&quot;Changeset [1f06652a57e727700c3a673dc1f86e3b1e07ce1f]&quot;&gt;[1f06652a57e727700c3a673dc1f86e3b1e07ce1f]&lt;/a&gt;)
use persisted? instead of new_record? wherever possible&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;persisted? is the API defined in ActiveModel&lt;/li&gt;
&lt;li&gt;makes it easier for extension libraries to conform to
ActiveModel APIs without concern for whether the extended object is
specifically ActiveRecord&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/5927&quot; title=
&quot;Ticket #5927&quot;&gt;#5927&lt;/a&gt; state:committed]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Santiago Pastorino
&lt;a&gt;santiago@wyeworks.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/commit/1f06652a57e727700c3a673dc1f86e3b1e07ce1f&quot;&gt;
https://github.com/rails/rails/commit/1f06652a57e727700c3a673dc1f86...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-09T18:54:16+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5927</number>
      <permalink>activerecord-should-favor-activemodel-api</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag nil="true"></tag>
      <title>ActiveRecord should favor ActiveModel API</title>
      <updated-at type="datetime">2010-11-09T18:54:17+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>David Chelimsky</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [f1c13b0dd7b22b5f6289ca1a09f1d7a8c7c8584b]) use persisted? instead of new_record? wherever possible

- persisted? is the API defined in ActiveModel
- makes it easier for extension libraries to conform to ActiveModel
  APIs
  without concern for whether the extended object is specifically
  ActiveRecord

[#5927 state:committed]

Signed-off-by: Santiago Pastorino &lt;santiago@wyeworks.com&gt;
https://github.com/rails/rails/commit/f1c13b0dd7b22b5f6289ca1a09f1d7a8c7c8584b</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/f1c13b0dd7b22b5f6289ca1a09f1d7a8c7c8584b&quot;
title=
&quot;Changeset [f1c13b0dd7b22b5f6289ca1a09f1d7a8c7c8584b]&quot;&gt;[f1c13b0dd7b22b5f6289ca1a09f1d7a8c7c8584b]&lt;/a&gt;)
use persisted? instead of new_record? wherever possible&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;persisted? is the API defined in ActiveModel&lt;/li&gt;
&lt;li&gt;makes it easier for extension libraries to conform to
ActiveModel APIs without concern for whether the extended object is
specifically ActiveRecord&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/5927&quot; title=
&quot;Ticket #5927&quot;&gt;#5927&lt;/a&gt; state:committed]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Santiago Pastorino &lt;a href=
&quot;mailto:santiago@wyeworks.com&quot;&gt;santiago@wyeworks.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/commit/f1c13b0dd7b22b5f6289ca1a09f1d7a8c7c8584b&quot;&gt;
https://github.com/rails/rails/commit/f1c13b0dd7b22b5f6289ca1a09f1d...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-09T19:28:47+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5927</number>
      <permalink>activerecord-should-favor-activemodel-api</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag nil="true"></tag>
      <title>ActiveRecord should favor ActiveModel API</title>
      <updated-at type="datetime">2010-11-09T19:28:49+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">9</version>
      <user-name>Repository</user-name>
      <creator-name>David Chelimsky</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Replica Tag Watches sell at low prices. Buy Tag Heuer Replica Watches, Fake TAG Heuer Watches please come to our &lt;a href=&quot;http://www.replicawatchesi.com/tag-heuer-watches&quot;&gt;Replica Tag Heuer watches&lt;/a&gt;.Look no further for &lt;a href=&quot;http://www.replicawatchesi.com/&quot;&gt;replica watches&lt;/a&gt;, &lt;a href=&quot;http://www.replicawatchesi.com/&quot;&gt;replica rolex&lt;/a&gt;, &lt;a href=&quot;http://www.replicawatchesi.com/&quot;&gt;replica watches uk&lt;/a&gt;, &lt;a href=&quot;http://www.replicawatchesi.com/breitling-watches&quot;&gt;Replica Breitling watches&lt;/a&gt;, Swiss Replica Rolex, fake watch, and swiss replica watch.Buy Omega Watch, Omega Replicas, Alpha Omega Watches, Ladies Omega Replica Watches from our &lt;a href=&quot;http://www.replicawatchesi.com/omega-watches&quot;&gt;Replica Omega watches&lt;/a&gt; store.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Replica Tag Watches sell at low prices. Buy Tag Heuer Replica
Watches, Fake TAG Heuer Watches please come to our &lt;a href=
&quot;http://www.replicawatchesi.com/tag-heuer-watches&quot;&gt;Replica Tag
Heuer watches&lt;/a&gt;.Look no further for &lt;a href=
&quot;http://www.replicawatchesi.com/&quot;&gt;replica watches&lt;/a&gt;, &lt;a href=
&quot;http://www.replicawatchesi.com/&quot;&gt;replica rolex&lt;/a&gt;, &lt;a href=
&quot;http://www.replicawatchesi.com/&quot;&gt;replica watches uk&lt;/a&gt;, &lt;a href=
&quot;http://www.replicawatchesi.com/breitling-watches&quot;&gt;Replica
Breitling watches&lt;/a&gt;, Swiss Replica Rolex, fake watch, and swiss
replica watch.Buy Omega Watch, Omega Replicas, Alpha Omega Watches,
Ladies Omega Replica Watches from our &lt;a href=
&quot;http://www.replicawatchesi.com/omega-watches&quot;&gt;Replica Omega
watches&lt;/a&gt; store.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-21T13:56:57+00:00</created-at>
      <creator-id type="integer">7315</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5927</number>
      <permalink>activerecord-should-favor-activemodel-api</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag nil="true"></tag>
      <title>ActiveRecord should favor ActiveModel API</title>
      <updated-at type="datetime">2011-02-21T14:04:55+00:00</updated-at>
      <user-id type="integer">138022</user-id>
      <version type="integer">10</version>
      <user-name>benben</user-name>
      <creator-name>David Chelimsky</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5927</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
