<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-03T23:35:04+01:00</created-at>
  <creator-id type="integer">12596</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">967</number>
  <permalink>fix-for-migrations-when-query_cache-is-turned-on</permalink>
  <priority type="integer">410</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord migrations patch</tag>
  <title>Fix for migrations when query_cache is turned on.</title>
  <updated-at type="datetime">2008-12-20T17:01:14+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Rene Androsch</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/967</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When I use this in my initializers on Rails 2.1.0 with sqlite3 on MacOSX:
ActiveRecord::Base.connection.query_cache_enabled = true
I can't run migrations at all.

Here's the output:
MacBook:migration_cache_problem art$ rake db:migrate --trace
(in /Users/art/development/projects/rails/_mine/testbed/migration_cache_problem)
** Invoke db:migrate (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute db:migrate
rake aborted!
You have a nil object when you didn't expect it!
The error occurred while evaluating nil.has_key?
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:91:in `cache_sql'
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:74:in `select_all'
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:13:in `select_one'


Attached a fix, that ensures, that query_cache is not nil.</original-body>
  <latest-body>When I use this in my initializers on Rails 2.1.0 with sqlite3 on MacOSX:
ActiveRecord::Base.connection.query_cache_enabled = true
I can't run migrations at all.

Here's the output:
MacBook:migration_cache_problem art$ rake db:migrate --trace
(in /Users/art/development/projects/rails/_mine/testbed/migration_cache_problem)
** Invoke db:migrate (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute db:migrate
rake aborted!
You have a nil object when you didn't expect it!
The error occurred while evaluating nil.has_key?
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:91:in `cache_sql'
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:74:in `select_all'
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:13:in `select_one'


Attached a fix, that ensures, that query_cache is not nil.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When I use this in my initializers on Rails 2.1.0 with sqlite3
on MacOSX: ActiveRecord::Base.connection.query_cache_enabled = true
I can't run migrations at all.&lt;/p&gt;
&lt;p&gt;Here's the output: MacBook:migration_cache_problem art$ rake
db:migrate --trace (in
/Users/art/development/projects/rails/&lt;em&gt;mine/testbed/migration_cache_problem)
&lt;strong&gt;Invoke db:migrate (first_time)&lt;/strong&gt; Invoke environment
(first_time) &lt;strong&gt;Execute environment&lt;/strong&gt; Execute
db:migrate rake aborted! You have a nil object when you didn't
expect it! The error occurred while evaluating nil.has_key?
/Users/art/development/projects/rails/&lt;/em&gt;mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:91:in
&lt;code&gt;cache_sql'
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:74:in&lt;/code&gt;select_all'
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:13:in
&lt;code&gt;select_one'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Attached a fix, that ensures, that query_cache is not nil.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When I use this in my initializers on Rails 2.1.0 with sqlite3 on MacOSX:
ActiveRecord::Base.connection.query_cache_enabled = true
I can't run migrations at all.

Here's the output:
MacBook:migration_cache_problem art$ rake db:migrate --trace
(in /Users/art/development/projects/rails/_mine/testbed/migration_cache_problem)
** Invoke db:migrate (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute db:migrate
rake aborted!
You have a nil object when you didn't expect it!
The error occurred while evaluating nil.has_key?
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:91:in `cache_sql'
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:74:in `select_all'
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:13:in `select_one'


Attached a fix, that ensures, that query_cache is not nil.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When I use this in my initializers on Rails 2.1.0 with sqlite3
on MacOSX: ActiveRecord::Base.connection.query_cache_enabled = true
I can't run migrations at all.&lt;/p&gt;
&lt;p&gt;Here's the output: MacBook:migration_cache_problem art$ rake
db:migrate --trace (in
/Users/art/development/projects/rails/&lt;em&gt;mine/testbed/migration_cache_problem)
&lt;strong&gt;Invoke db:migrate (first_time)&lt;/strong&gt; Invoke environment
(first_time) &lt;strong&gt;Execute environment&lt;/strong&gt; Execute
db:migrate rake aborted! You have a nil object when you didn't
expect it! The error occurred while evaluating nil.has_key?
/Users/art/development/projects/rails/&lt;/em&gt;mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:91:in
&lt;code&gt;cache_sql'
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:74:in&lt;/code&gt;select_all'
/Users/art/development/projects/rails/_mine/testbed/migration_cache_problem/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:13:in
&lt;code&gt;select_one'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Attached a fix, that ensures, that query_cache is not nil.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-03T23:35:06+01:00</created-at>
      <creator-id type="integer">12596</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">967</number>
      <permalink>fix-for-migrations-when-query_cache-is-turned-on</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord migrations patch</tag>
      <title>Fix for migrations when query_cache is turned on.</title>
      <updated-at type="datetime">2008-09-03T23:35:06+01:00</updated-at>
      <user-id type="integer">12596</user-id>
      <version type="integer">1</version>
      <user-name>Rene Androsch</user-name>
      <creator-name>Rene Androsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/967</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>ActiveRecord::Base.connection.query_cache_enabled is an attr_reader and you shouldn't need to turn it on as it's always on.

If you still face the issue, please upload a failing test case.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveRecord::Base.connection.query_cache_enabled is an
attr_reader and you shouldn't need to turn it on as it's always
on.&lt;/p&gt;
&lt;p&gt;If you still face the issue, please upload a failing test
case.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-20T17:01:12+00:00</created-at>
      <creator-id type="integer">12596</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">967</number>
      <permalink>fix-for-migrations-when-query_cache-is-turned-on</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord migrations patch</tag>
      <title>Fix for migrations when query_cache is turned on.</title>
      <updated-at type="datetime">2008-12-20T17:01:14+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Rene Androsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/967</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4b26655e6b3435ab6f33d587c77acc45988e3d0e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-03T23:35:06+01:00</created-at>
      <filename>fix_for_migrations_with_query_cache_turned_on.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">43607</id>
      <size type="integer">915</size>
      <uploader-id type="integer">12596</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/43607/fix_for_migrations_with_query_cache_turned_on.diff</url>
    </attachment>
  </attachments>
</ticket>
