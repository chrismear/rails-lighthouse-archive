<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-20T21:52:32+01:00</created-at>
  <creator-id type="integer">24075</creator-id>
  <milestone-due-on type="datetime">2009-03-18T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">9901</milestone-id>
  <number type="integer">463</number>
  <permalink>integer-size-being-set-inconsistently-by-mysql_adapter-rb</permalink>
  <priority type="integer">11946</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>mysql</tag>
  <title>:integer size being set inconsistently by mysql_adapter.rb</title>
  <updated-at type="datetime">2008-06-24T22:17:53+01:00</updated-at>
  <user-id type="integer">24075</user-id>
  <version type="integer">8</version>
  <user-name>Rob Sterner</user-name>
  <creator-name>Rob Sterner</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/463</url>
  <milestone-title>2.1.1</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The best way to describe the bug that we've run in to is to walk through the steps which lead to its discovery.

When a database (acme_development) schema is loaded from migrations, a typical table definition:

@@@ ruby
create_table :foo do |t|
t.references :bar
end
@@@

causes a column, bar_id, to be created with a MySQL data type of int(11).  Also, :primary_keys are hard-coded to be of type int(11).

Starting (I believe) with Rails 2.1, when invoking a rake task that would (re)generate schema.rb the code examines the MySQL columns (in acme_development) to determine the :limit.  If no default :limit was provided in the original migration, this will result in schema.rb being populated with the current acme_development size - 11, for all :integer columns.

When acme_test is populated via schema.rb, the table definition becomes:

@@@ ruby
create_table :foo do |t|
t.integer :bar, :limit =&gt; 11
end
@@@

Specifying :limit =&gt; 11 to the column (the *same* limit as the default size hard-coded in mysql_adapter.rb) causes a _different_ data type to be used: bigint(11).  This is the root of the problem - specifying a :limit whose size is identical to Rails' default for :integer causes a different data type to be created when the database is loaded.

We only stumbled across this when foreign keys were being inserted into our test database - MySQL can't create foreign keys across columns with different data types (int != bigint), so it fails.

We'll be working on a patch, will update in a few days if we can't come up with an acceptable, generic solution.</original-body>
  <latest-body>The best way to describe the bug that we've run in to is to walk through the steps which lead to its discovery.

When a database (acme_development) schema is loaded from migrations, a typical table definition:

@@@ ruby
create_table :foo do |t|
t.references :bar
end
@@@

causes a column, bar_id, to be created with a MySQL data type of int(11).  Also, :primary_keys are hard-coded to be of type int(11).

Starting (I believe) with Rails 2.1, when invoking a rake task that would (re)generate schema.rb the code examines the MySQL columns (in acme_development) to determine the :limit.  If no default :limit was provided in the original migration, this will result in schema.rb being populated with the current acme_development size - 11, for all :integer columns.

When acme_test is populated via schema.rb, the table definition becomes:

@@@ ruby
create_table :foo do |t|
t.integer :bar, :limit =&gt; 11
end
@@@

Specifying :limit =&gt; 11 to the column (the *same* limit as the default size hard-coded in mysql_adapter.rb) causes a _different_ data type to be used: bigint(11).  This is the root of the problem - specifying a :limit whose size is identical to Rails' default for :integer causes a different data type to be created when the database is loaded.

We only stumbled across this when foreign keys were being inserted into our test database - MySQL can't create foreign keys across columns with different data types (int != bigint), so it fails.

We'll be working on a patch, will update in a few days if we can't come up with an acceptable, generic solution.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
The best way to describe the bug that we've run in to is to walk through the steps which lead to its discovery.
&lt;/p&gt;&lt;p&gt;
When a database (acme_development) schema is loaded from migrations, a typical table definition:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;create_table :foo do |t|
t.references :bar
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
causes a column, bar_id, to be created with a MySQL data type of int(11).  Also, :primary_keys are hard-coded to be of type int(11).
&lt;/p&gt;&lt;p&gt;
Starting (I believe) with Rails 2.1, when invoking a rake task that would (re)generate schema.rb the code examines the MySQL columns (in acme_development) to determine the :limit.  If no default :limit was provided in the original migration, this will result in schema.rb being populated with the current acme_development size - 11, for all :integer columns.
&lt;/p&gt;&lt;p&gt;
When acme_test is populated via schema.rb, the table definition becomes:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;create_table :foo do |t|
t.integer :bar, :limit =&amp;gt; 11
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Specifying :limit =&gt; 11 to the column (the &lt;strong&gt;same&lt;/strong&gt; limit as the default size hard-coded in mysql_adapter.rb) causes a &lt;em&gt;different&lt;/em&gt; data type to be used: bigint(11).  This is the root of the problem - specifying a :limit whose size is identical to Rails' default for :integer causes a different data type to be created when the database is loaded.
&lt;/p&gt;&lt;p&gt;
We only stumbled across this when foreign keys were being inserted into our test database - MySQL can't create foreign keys across columns with different data types (int != bigint), so it fails.
&lt;/p&gt;&lt;p&gt;
We'll be working on a patch, will update in a few days if we can't come up with an acceptable, generic solution.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-20T22:23:13+01:00</created-at>
      <creator-id type="integer">24075</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">463</number>
      <permalink>integer-size-being-set-inconsistently-by-mysql_adapter-rb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>:integer size being set inconsistently by mysql_adapter.rb</title>
      <updated-at type="datetime">2008-06-20T22:23:13+01:00</updated-at>
      <user-id type="integer">24075</user-id>
      <version type="integer">1</version>
      <user-name>Rob Sterner</user-name>
      <creator-name>Rob Sterner</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/463</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The best way to describe the bug that we've run in to is to walk through the steps which lead to its discovery.

When a database (acme_development) schema is loaded from migrations, a typical table definition:

@@@ ruby
create_table :foo do |t|
  t.references :bar
end
@@@

causes a column, bar_id, to be created with a MySQL data type of int(11).  Also, :primary_keys are hard-coded to be of type int(11).

Starting (I believe) with Rails 2.1, when invoking a rake task that would (re)generate schema.rb the code examines the MySQL columns (in acme_development) to determine the :limit.  If no default :limit was provided in the original migration, this will result in schema.rb being populated with the current acme_development size - 11, for all :integer columns.

When acme_test is populated via schema.rb, the table definition becomes:

@@@ ruby
create_table :foo do |t|
  t.integer :bar, :limit =&gt; 11
end
@@@

Specifying :limit =&gt; 11 to the column (the *same* limit as the default size hard-coded in mysql_adapter.rb) causes a _different_ data type to be used: bigint(11).  This is the root of the problem - specifying a :limit whose size is identical to Rails' default for :integer causes a different data type to be created when the database is loaded.

We only stumbled across this when foreign keys were being inserted into our test database - MySQL can't create foreign keys across columns with different data types (int != bigint), so it fails.

We'll be working on a patch, will update in a few days if we can't come up with an acceptable, generic solution.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The best way to describe the bug that we've run in to is to walk through the steps which lead to its discovery.
&lt;/p&gt;&lt;p&gt;
When a database (acme_development) schema is loaded from migrations, a typical table definition:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;create_table :foo do |t|
  t.references :bar
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
causes a column, bar_id, to be created with a MySQL data type of int(11).  Also, :primary_keys are hard-coded to be of type int(11).
&lt;/p&gt;&lt;p&gt;
Starting (I believe) with Rails 2.1, when invoking a rake task that would (re)generate schema.rb the code examines the MySQL columns (in acme_development) to determine the :limit.  If no default :limit was provided in the original migration, this will result in schema.rb being populated with the current acme_development size - 11, for all :integer columns.
&lt;/p&gt;&lt;p&gt;
When acme_test is populated via schema.rb, the table definition becomes:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;create_table :foo do |t|
  t.integer :bar, :limit =&amp;gt; 11
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Specifying :limit =&gt; 11 to the column (the &lt;strong&gt;same&lt;/strong&gt; limit as the default size hard-coded in mysql_adapter.rb) causes a &lt;em&gt;different&lt;/em&gt; data type to be used: bigint(11).  This is the root of the problem - specifying a :limit whose size is identical to Rails' default for :integer causes a different data type to be created when the database is loaded.
&lt;/p&gt;&lt;p&gt;
We only stumbled across this when foreign keys were being inserted into our test database - MySQL can't create foreign keys across columns with different data types (int != bigint), so it fails.
&lt;/p&gt;&lt;p&gt;
We'll be working on a patch, will update in a few days if we can't come up with an acceptable, generic solution.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-20T22:23:42+01:00</created-at>
      <creator-id type="integer">24075</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">463</number>
      <permalink>integer-size-being-set-inconsistently-by-mysql_adapter-rb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>:integer size being set inconsistently by mysql_adapter.rb</title>
      <updated-at type="datetime">2008-06-20T22:23:42+01:00</updated-at>
      <user-id type="integer">24075</user-id>
      <version type="integer">2</version>
      <user-name>Rob Sterner</user-name>
      <creator-name>Rob Sterner</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/463</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rob, any progress here?  I was just about to start a patch....but if you're close to done or already done, I'd just wait it out.

I think it should be fairly trivial.  I'm looking into it as I type....I'm sitting in #rails-contrib (jtrupiano), so get in touch with me if you're in the middle of this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Rob, any progress here?  I was just about to start a patch....but if you're close to done or already done, I'd just wait it out.
&lt;/p&gt;&lt;p&gt;
I think it should be fairly trivial.  I'm looking into it as I type....I'm sitting in #rails-contrib (jtrupiano), so get in touch with me if you're in the middle of this.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-24T17:29:18+01:00</created-at>
      <creator-id type="integer">24075</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">463</number>
      <permalink>integer-size-being-set-inconsistently-by-mysql_adapter-rb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>:integer size being set inconsistently by mysql_adapter.rb</title>
      <updated-at type="datetime">2008-06-24T17:29:18+01:00</updated-at>
      <user-id type="integer">24346</user-id>
      <version type="integer">3</version>
      <user-name>John Trupiano</user-name>
      <creator-name>Rob Sterner</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/463</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>mysql integer limit should be ignored since it's really display width. Limit should be set as byte length according to tinyint/smallint/mediumint/int/bigint.

Please do submit a patch + tests!</body>
      <body-html>&lt;div&gt;&lt;p&gt;
mysql integer limit should be ignored since it's really display width. Limit should be set as byte length according to tinyint/smallint/mediumint/int/bigint.
&lt;/p&gt;&lt;p&gt;
Please do submit a patch + tests!
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-24T21:29:51+01:00</created-at>
      <creator-id type="integer">24075</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">463</number>
      <permalink>integer-size-being-set-inconsistently-by-mysql_adapter-rb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>:integer size being set inconsistently by mysql_adapter.rb</title>
      <updated-at type="datetime">2008-06-24T21:29:51+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Rob Sterner</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/463</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey Jeremy,

Just looked for you on IRC to talk about this.  I was preparing my patch (patched against 2.1.0) when I ran it against edge (master) Rails, seems like your commits over the last 24 hours have fixed the issue.

Now the only outstanding thing that I think the source/docs would benefit from is documentation explaining that the fundamental concept of what a :limit is has changed w/r/t Rails :-D</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hey Jeremy,
&lt;/p&gt;&lt;p&gt;
Just looked for you on IRC to talk about this.  I was preparing my patch (patched against 2.1.0) when I ran it against edge (master) Rails, seems like your commits over the last 24 hours have fixed the issue.
&lt;/p&gt;&lt;p&gt;
Now the only outstanding thing that I think the source/docs would benefit from is documentation explaining that the fundamental concept of what a :limit is has changed w/r/t Rails :-D
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-24T21:36:17+01:00</created-at>
      <creator-id type="integer">24075</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">463</number>
      <permalink>integer-size-being-set-inconsistently-by-mysql_adapter-rb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>:integer size being set inconsistently by mysql_adapter.rb</title>
      <updated-at type="datetime">2008-06-24T21:36:17+01:00</updated-at>
      <user-id type="integer">24075</user-id>
      <version type="integer">5</version>
      <user-name>Rob Sterner</user-name>
      <creator-name>Rob Sterner</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/463</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yeah, should document that. There was no real concept before, just dumped it on the database's lap which led to odd results.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Yeah, should document that. There was no real concept before, just dumped it on the database's lap which led to odd results.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-24T21:51:37+01:00</created-at>
      <creator-id type="integer">24075</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">463</number>
      <permalink>integer-size-being-set-inconsistently-by-mysql_adapter-rb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>:integer size being set inconsistently by mysql_adapter.rb</title>
      <updated-at type="datetime">2008-06-24T21:51:37+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">6</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Rob Sterner</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/463</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey Rob, Jeremy, other interested parties, I blogged about this whole saga here: http://blog.smartlogicsolutions.com/2008/06/24/rails-21-broke-my-mysql-foreign-keys/

Jeremy, it does include a two-line patch for the 2.1 release.  Not sure if that's useful at all...

Thanks for working on this with me Rob.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hey Rob, Jeremy, other interested parties, I blogged about this whole saga here: &lt;a href=&quot;http://blog.smartlogicsolutions.com/2008/06/24/rails-21-broke-my-mysql-foreign-keys/&quot;&gt;http://blog.smartlogicsolutions....&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
Jeremy, it does include a two-line patch for the 2.1 release.  Not sure if that's useful at all...
&lt;/p&gt;&lt;p&gt;
Thanks for working on this with me Rob.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-24T22:05:48+01:00</created-at>
      <creator-id type="integer">24075</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">463</number>
      <permalink>integer-size-being-set-inconsistently-by-mysql_adapter-rb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>:integer size being set inconsistently by mysql_adapter.rb</title>
      <updated-at type="datetime">2008-06-24T22:05:48+01:00</updated-at>
      <user-id type="integer">24346</user-id>
      <version type="integer">7</version>
      <user-name>John Trupiano</user-name>
      <creator-name>Rob Sterner</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/463</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I figured that docs were TBD as this is a subtle but important change.  Thanks Jeremy! Thanks again John, was fun trying to figure this out!</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I figured that docs were TBD as this is a subtle but important change.  Thanks Jeremy! Thanks again John, was fun trying to figure this out!
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-24T22:17:52+01:00</created-at>
      <creator-id type="integer">24075</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">463</number>
      <permalink>integer-size-being-set-inconsistently-by-mysql_adapter-rb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>:integer size being set inconsistently by mysql_adapter.rb</title>
      <updated-at type="datetime">2008-06-24T22:17:52+01:00</updated-at>
      <user-id type="integer">24075</user-id>
      <version type="integer">8</version>
      <user-name>Rob Sterner</user-name>
      <creator-name>Rob Sterner</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/463</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
