From bb65b0caa8a88ce81d633fea13c685cd3d59e603 Mon Sep 17 00:00:00 2001
From: Yaroslav Markin <yaroslav@markin.net>
Date: Sun, 23 Nov 2008 17:30:59 +0300
Subject: [PATCH] Add i18n for number_to_human_size() helper storage units. Translation key is number.human.storage_units.

---
 .../lib/action_view/helpers/number_helper.rb       |    7 +++----
 actionpack/lib/action_view/locale/en.yml           |    1 +
 .../test/template/number_helper_i18n_test.rb       |    3 +++
 3 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/number_helper.rb b/actionpack/lib/action_view/helpers/number_helper.rb
index 77f19b3..3e734cc 100644
--- a/actionpack/lib/action_view/helpers/number_helper.rb
+++ b/actionpack/lib/action_view/helpers/number_helper.rb
@@ -220,8 +220,6 @@ module ActionView
         end
       end
 
-      STORAGE_UNITS = %w( Bytes KB MB GB TB ).freeze
-
       # Formats the bytes in +size+ into a more understandable representation
       # (e.g., giving it 1500 yields 1.5 KB). This method is useful for
       # reporting file sizes to users. This method returns nil if
@@ -257,6 +255,7 @@ module ActionView
         defaults = I18n.translate(:'number.format', :locale => options[:locale], :raise => true) rescue {}
         human    = I18n.translate(:'number.human.format', :locale => options[:locale], :raise => true) rescue {}
         defaults = defaults.merge(human)
+        storage_units = I18n.translate(:'number.human.storage_units', :locale => options[:locale], :raise => true)
 
         unless args.empty?
           ActiveSupport::Deprecation.warn('number_to_human_size takes an option hash ' +
@@ -268,12 +267,12 @@ module ActionView
         separator ||= (options[:separator] || defaults[:separator])
         delimiter ||= (options[:delimiter] || defaults[:delimiter])
 
-        max_exp  = STORAGE_UNITS.size - 1
+        max_exp  = storage_units.size - 1
         number   = Float(number)
         exponent = (Math.log(number) / Math.log(1024)).to_i # Convert to base 1024
         exponent = max_exp if exponent > max_exp # we need this to avoid overflow for the highest unit
         number  /= 1024 ** exponent
-        unit     = STORAGE_UNITS[exponent]
+        unit     = storage_units[exponent]
 
         begin
           escaped_separator = Regexp.escape(separator)
diff --git a/actionpack/lib/action_view/locale/en.yml b/actionpack/lib/action_view/locale/en.yml
index 002226f..9542b03 100644
--- a/actionpack/lib/action_view/locale/en.yml
+++ b/actionpack/lib/action_view/locale/en.yml
@@ -44,6 +44,7 @@
         # separator: 
         delimiter: ""
         precision: 1
+      storage_units: [Bytes, KB, MB, GB, TB]
 
   # Used in distance_of_time_in_words(), distance_of_time_in_words_to_now(), time_ago_in_words()
   datetime:
diff --git a/actionpack/test/template/number_helper_i18n_test.rb b/actionpack/test/template/number_helper_i18n_test.rb
index 67c61a5..2528bea 100644
--- a/actionpack/test/template/number_helper_i18n_test.rb
+++ b/actionpack/test/template/number_helper_i18n_test.rb
@@ -10,6 +10,7 @@ class NumberHelperI18nTests < Test::Unit::TestCase
       @number_defaults = { :precision => 3, :delimiter => ',', :separator => '.' }
       @currency_defaults = { :unit => '$', :format => '%u%n', :precision => 2 }
       @human_defaults = { :precision => 1 }
+      @human_storage_units_defaults = %w(Bytes KB MB GB TB)
       @percentage_defaults = { :delimiter => '' }
       @precision_defaults = { :delimiter => '' }
 
@@ -47,6 +48,8 @@ class NumberHelperI18nTests < Test::Unit::TestCase
       I18n.expects(:translate).with(:'number.format', :locale => 'en', :raise => true).returns(@number_defaults)
       I18n.expects(:translate).with(:'number.human.format', :locale => 'en',
                                     :raise => true).returns(@human_defaults)
+      I18n.expects(:translate).with(:'number.human.storage_units', :locale => 'en',
+                                    :raise => true).returns(@human_storage_units_defaults)
       # can't be called with 1 because this directly returns without calling I18n.translate
       number_to_human_size(1025, :locale => 'en')
     end
-- 
1.6.0.2

