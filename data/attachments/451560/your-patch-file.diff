From 56f502f2f0e847597a325d2a606fb65988b4d8a6 Mon Sep 17 00:00:00 2001
From: Aaron Patterson <aaron.patterson@gmail.com>
Date: Thu, 18 Mar 2010 12:16:54 -0700
Subject: [PATCH] avoiding a few closure references by evaling. [#4223 state:resolved]

---
 activerecord/lib/active_record/associations.rb |   30 ++++++++++++++---------
 1 files changed, 18 insertions(+), 12 deletions(-)

diff --git a/activerecord/lib/active_record/associations.rb b/activerecord/lib/active_record/associations.rb
index a517903..62c74c2 100755
--- a/activerecord/lib/active_record/associations.rb
+++ b/activerecord/lib/active_record/associations.rb
@@ -1545,15 +1545,19 @@ module ActiveRecord
 
             case name
               when :destroy, :delete
-                define_method(method_name) do
-                  association = send(reflection.name)
-                  association.send(name) if association
-                end
+                class_eval <<-eoruby, __FILE__, __LINE__ + 1
+                  def #{method_name}
+                    association = #{reflection.name}
+                    association.#{name} if association
+                  end
+                eoruby
               when :nullify
-                define_method(method_name) do
-                  association = send(reflection.name)
-                  association.update_attribute(reflection.primary_key_name, nil) if association
-                end
+                class_eval <<-eoruby, __FILE__, __LINE__ + 1
+                  def #{method_name}
+                    association = #{reflection.name}
+                    association.update_attribute(#{reflection.primary_key_name.inspect}, nil) if association
+                  end
+                eoruby
               else
                 raise ArgumentError, "The :dependent option expects either :destroy, :delete or :nullify (#{reflection.options[:dependent].inspect})"
             end
@@ -1571,10 +1575,12 @@ module ActiveRecord
             end
 
             method_name = :"belongs_to_dependent_#{name}_for_#{reflection.name}"
-            define_method(method_name) do
-              association = send(reflection.name)
-              association.send(name) if association
-            end
+            class_eval <<-eoruby, __FILE__, __LINE__ + 1
+              def #{method_name}
+                association = #{reflection.name}
+                association.#{name} if association
+              end
+            eoruby
             after_destroy method_name
           end
         end
-- 
1.6.6

