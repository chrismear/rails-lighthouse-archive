<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-18T17:28:17+01:00</created-at>
  <creator-id type="integer">93488</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5404</number>
  <permalink>save-silently-fails</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord</tag>
  <title>save! silently fails</title>
  <updated-at type="datetime">2011-02-02T18:52:19+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>fearless_fool</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5404</url>
  <priority-name nil="true"></priority-name>
  <original-body>I'm undecided if this is a bug in ActiveRecord or a hole in the documentation, but I'm certain that it **is** one or the other.  Consider:


@@@ ruby
irb(main):059:0&gt; obs = Observation.get_observations() ; obs.size
=&gt; 320
irb(main):060:0&gt; obs[0].save!
=&gt; true
irb(main):061:0&gt; Observation.count
=&gt; 0
@@@

Note that save! returns without writing anything to the observations table and without any error or warning.  Before you conclude that this is an ActiveRecord bug, you should know that get_observations() is a wrapper for find_by_sql():

@@@ ruby
def Observation.get_observations()
  Observation.find_by_sql(@massive_sql_query_string)
end
@@@

Though the AR documentation offers caveats for records generated by find_by_sql(), it makes no mention of this (mis)behavior.

Whether or not you believe this is an AR bug, &quot;save! silently fails&quot; is unexpected and can't be anticipated by reading the documentation alone.  I'd suggest that either the code get changed, or the documentation be augmented to warn users about this unexpected consequence of using find_by_sql().

Environment:
@@@
bash$ rake about
(in /Users/ff/Developer/dev)
About your application's environment
Ruby version              1.9.2 (x86_64-darwin10.4.0)
RubyGems version          1.3.7
Rack version              1.2
Rails version             3.0.0.rc
Active Record version     3.0.0.rc
Action Pack version       3.0.0.rc
Active Resource version   3.0.0.rc
Action Mailer version     3.0.0.rc
Active Support version    3.0.0.rc
Application root          /Users/ff/Developer/bd
Environment               development
@@@</original-body>
  <latest-body>I'm undecided if this is a bug in ActiveRecord or a hole in the documentation, but I'm certain that it **is** one or the other.  Consider:


@@@ ruby
irb(main):059:0&gt; obs = Observation.get_observations() ; obs.size
=&gt; 320
irb(main):060:0&gt; obs[0].save!
=&gt; true
irb(main):061:0&gt; Observation.count
=&gt; 0
@@@

Note that save! returns without writing anything to the observations table and without any error or warning.  Before you conclude that this is an ActiveRecord bug, you should know that get_observations() is a wrapper for find_by_sql():

@@@ ruby
def Observation.get_observations()
  Observation.find_by_sql(@massive_sql_query_string)
end
@@@

Though the AR documentation offers caveats for records generated by find_by_sql(), it makes no mention of this (mis)behavior.

Whether or not you believe this is an AR bug, &quot;save! silently fails&quot; is unexpected and can't be anticipated by reading the documentation alone.  I'd suggest that either the code get changed, or the documentation be augmented to warn users about this unexpected consequence of using find_by_sql().

Environment:
@@@
bash$ rake about
(in /Users/ff/Developer/dev)
About your application's environment
Ruby version              1.9.2 (x86_64-darwin10.4.0)
RubyGems version          1.3.7
Rack version              1.2
Rails version             3.0.0.rc
Active Record version     3.0.0.rc
Action Pack version       3.0.0.rc
Active Resource version   3.0.0.rc
Action Mailer version     3.0.0.rc
Active Support version    3.0.0.rc
Application root          /Users/ff/Developer/bd
Environment               development
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm undecided if this is a bug in ActiveRecord or a hole in the
documentation, but I'm certain that it &lt;strong&gt;is&lt;/strong&gt; one or
the other. Consider:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;irb(main):059:0&amp;gt; obs = Observation.get_observations() ; obs.size
=&amp;gt; 320
irb(main):060:0&amp;gt; obs[0].save!
=&amp;gt; true
irb(main):061:0&amp;gt; Observation.count
=&amp;gt; 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that save! returns without writing anything to the
observations table and without any error or warning. Before you
conclude that this is an ActiveRecord bug, you should know that
get_observations() is a wrapper for find_by_sql():&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def Observation.get_observations()
  Observation.find_by_sql(@massive_sql_query_string)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Though the AR documentation offers caveats for records generated
by find_by_sql(), it makes no mention of this (mis)behavior.&lt;/p&gt;
&lt;p&gt;Whether or not you believe this is an AR bug, &quot;save! silently
fails&quot; is unexpected and can't be anticipated by reading the
documentation alone. I'd suggest that either the code get changed,
or the documentation be augmented to warn users about this
unexpected consequence of using find_by_sql().&lt;/p&gt;
&lt;p&gt;Environment:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bash$ rake about
(in /Users/ff/Developer/dev)
About your application's environment
Ruby version              1.9.2 (x86_64-darwin10.4.0)
RubyGems version          1.3.7
Rack version              1.2
Rails version             3.0.0.rc
Active Record version     3.0.0.rc
Action Pack version       3.0.0.rc
Active Resource version   3.0.0.rc
Action Mailer version     3.0.0.rc
Active Support version    3.0.0.rc
Application root          /Users/ff/Developer/bd
Environment               development&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm undecided if this is a bug in ActiveRecord or a hole in the documentation, but I'm certain that it **is** one or the other.  Consider:


@@@ ruby
irb(main):059:0&gt; obs = Observation.get_observations() ; obs.size
=&gt; 320
irb(main):060:0&gt; obs[0].save!
=&gt; true
irb(main):061:0&gt; Observation.count
=&gt; 0
@@@

Note that save! returns without writing anything to the observations table and without any error or warning.  Before you conclude that this is an ActiveRecord bug, you should know that get_observations() is a wrapper for find_by_sql():

@@@ ruby
def Observation.get_observations()
  Observation.find_by_sql(@massive_sql_query_string)
end
@@@

Though the AR documentation offers caveats for records generated by find_by_sql(), it makes no mention of this (mis)behavior.

Whether or not you believe this is an AR bug, &quot;save! silently fails&quot; is unexpected and can't be anticipated by reading the documentation alone.  I'd suggest that either the code get changed, or the documentation be augmented to warn users about this unexpected consequence of using find_by_sql().

Environment:
@@@
bash$ rake about
(in /Users/ff/Developer/dev)
About your application's environment
Ruby version              1.9.2 (x86_64-darwin10.4.0)
RubyGems version          1.3.7
Rack version              1.2
Rails version             3.0.0.rc
Active Record version     3.0.0.rc
Action Pack version       3.0.0.rc
Active Resource version   3.0.0.rc
Action Mailer version     3.0.0.rc
Active Support version    3.0.0.rc
Application root          /Users/ff/Developer/bd
Environment               development
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm undecided if this is a bug in ActiveRecord or a hole in the
documentation, but I'm certain that it &lt;strong&gt;is&lt;/strong&gt; one or
the other. Consider:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;irb(main):059:0&amp;gt; obs = Observation.get_observations() ; obs.size
=&amp;gt; 320
irb(main):060:0&amp;gt; obs[0].save!
=&amp;gt; true
irb(main):061:0&amp;gt; Observation.count
=&amp;gt; 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that save! returns without writing anything to the
observations table and without any error or warning. Before you
conclude that this is an ActiveRecord bug, you should know that
get_observations() is a wrapper for find_by_sql():&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def Observation.get_observations()
  Observation.find_by_sql(@massive_sql_query_string)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Though the AR documentation offers caveats for records generated
by find_by_sql(), it makes no mention of this (mis)behavior.&lt;/p&gt;
&lt;p&gt;Whether or not you believe this is an AR bug, &quot;save! silently
fails&quot; is unexpected and can't be anticipated by reading the
documentation alone. I'd suggest that either the code get changed,
or the documentation be augmented to warn users about this
unexpected consequence of using find_by_sql().&lt;/p&gt;
&lt;p&gt;Environment:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bash$ rake about
(in /Users/ff/Developer/dev)
About your application's environment
Ruby version              1.9.2 (x86_64-darwin10.4.0)
RubyGems version          1.3.7
Rack version              1.2
Rails version             3.0.0.rc
Active Record version     3.0.0.rc
Action Pack version       3.0.0.rc
Active Resource version   3.0.0.rc
Action Mailer version     3.0.0.rc
Active Support version    3.0.0.rc
Application root          /Users/ff/Developer/bd
Environment               development&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-18T17:28:17+01:00</created-at>
      <creator-id type="integer">93488</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5404</number>
      <permalink>save-silently-fails</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>save! silently fails</title>
      <updated-at type="datetime">2010-08-18T17:28:22+01:00</updated-at>
      <user-id type="integer">93488</user-id>
      <version type="integer">1</version>
      <user-name>fearless_fool</user-name>
      <creator-name>fearless_fool</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:59:57+00:00</created-at>
      <creator-id type="integer">93488</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5404</number>
      <permalink>save-silently-fails</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord</tag>
      <title>save! silently fails</title>
      <updated-at type="datetime">2011-02-02T18:51:37+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>fearless_fool</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5404</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:59:59+00:00</created-at>
      <creator-id type="integer">93488</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5404</number>
      <permalink>save-silently-fails</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord</tag>
      <title>save! silently fails</title>
      <updated-at type="datetime">2011-02-02T18:52:19+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>fearless_fool</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5404</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
