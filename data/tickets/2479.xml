<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15783</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-10T20:39:13+01:00</created-at>
  <creator-id type="integer">22224</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">2479</number>
  <permalink>inconsistant-time-zone-handling</permalink>
  <priority type="integer">2</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>2.3.2 time timewithzone timezone to_time</tag>
  <title>Inconsistant time zone handling</title>
  <updated-at type="datetime">2010-10-15T23:01:31+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">9</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>JackC</creator-name>
  <assigned-user-name>Geoff Buesing</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2479</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Medium</priority-name>
  <original-body>I'm storing datetimes in MySQL in UTC. I want to retrieve them based on date.

Here's the problem. Time objects ignore the time zone in to_s(:db).

&gt;&gt; Time.local( 2009,1,1, 0,0,0 )
=&gt; Thu Jan 01 00:00:00 -0600 2009
&gt;&gt; Time.local( 2009,1,1, 0,0,0 ).to_s(:db)
=&gt; &quot;2009-01-01 00:00:00&quot;


TimeWithZone objects preserve the time zone in to_s(:db).


&gt;&gt; Time.zone.local( 2009,1,1, 0,0,0 )
=&gt; Thu, 01 Jan 2009 00:00:00 CST -06:00
&gt;&gt; Time.zone.local( 2009,1,1, 0,0,0 ).to_s(:db)
=&gt; &quot;2009-01-01 06:00:00&quot;


All the to_time helpers return Time objects which have their time zone thrown away when used in an ActiveRecord query. This leads to problems when using to_time

Example:

&gt;&gt; Date.today.beginning_of_day
=&gt; Fri Apr 10 00:00:00 -0500 2009
&gt;&gt; Time.zone.now.beginning_of_day
=&gt; Fri, 10 Apr 2009 00:00:00 CDT -05:00
&gt;&gt; Date.today.beginning_of_day == Time.zone.now.beginning_of_day
=&gt; true

&gt;&gt; Person.all :conditions =&gt; [ &quot;created_at &gt; ?&quot;, Date.today.beginning_of_day ]
Generated SQL =&gt; SELECT * FROM &quot;people&quot; WHERE (created_at &gt; '2009-04-10 00:00:00')

Person.all :conditions =&gt; [ &quot;created_at &gt; ?&quot;, Time.zone.now.beginning_of_day ]
Generated SQL =&gt; SELECT * FROM &quot;people&quot; WHERE (created_at &gt; '2009-04-10 05:00:00')


It would seem to me that Time#to_s(:db) should convert the time zone and/or to_time should return a TimeWithZone.</original-body>
  <latest-body>I'm storing datetimes in MySQL in UTC. I want to retrieve them based on date.

Here's the problem. Time objects ignore the time zone in to_s(:db).

&gt;&gt; Time.local( 2009,1,1, 0,0,0 )
=&gt; Thu Jan 01 00:00:00 -0600 2009
&gt;&gt; Time.local( 2009,1,1, 0,0,0 ).to_s(:db)
=&gt; &quot;2009-01-01 00:00:00&quot;


TimeWithZone objects preserve the time zone in to_s(:db).


&gt;&gt; Time.zone.local( 2009,1,1, 0,0,0 )
=&gt; Thu, 01 Jan 2009 00:00:00 CST -06:00
&gt;&gt; Time.zone.local( 2009,1,1, 0,0,0 ).to_s(:db)
=&gt; &quot;2009-01-01 06:00:00&quot;


All the to_time helpers return Time objects which have their time zone thrown away when used in an ActiveRecord query. This leads to problems when using to_time

Example:

&gt;&gt; Date.today.beginning_of_day
=&gt; Fri Apr 10 00:00:00 -0500 2009
&gt;&gt; Time.zone.now.beginning_of_day
=&gt; Fri, 10 Apr 2009 00:00:00 CDT -05:00
&gt;&gt; Date.today.beginning_of_day == Time.zone.now.beginning_of_day
=&gt; true

&gt;&gt; Person.all :conditions =&gt; [ &quot;created_at &gt; ?&quot;, Date.today.beginning_of_day ]
Generated SQL =&gt; SELECT * FROM &quot;people&quot; WHERE (created_at &gt; '2009-04-10 00:00:00')

Person.all :conditions =&gt; [ &quot;created_at &gt; ?&quot;, Time.zone.now.beginning_of_day ]
Generated SQL =&gt; SELECT * FROM &quot;people&quot; WHERE (created_at &gt; '2009-04-10 05:00:00')


It would seem to me that Time#to_s(:db) should convert the time zone and/or to_time should return a TimeWithZone.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm storing datetimes in MySQL in UTC. I want to retrieve them
based on date.&lt;/p&gt;
&lt;p&gt;Here's the problem. Time objects ignore the time zone in
to_s(:db).&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Time.local( 2009,1,1, 0,0,0 ) =&amp;gt; Thu Jan 01 00:00:00 -0600
2009 Time.local( 2009,1,1, 0,0,0 ).to_s(:db) =&amp;gt; &quot;2009-01-01
00:00:00&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;TimeWithZone objects preserve the time zone in to_s(:db).&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Time.zone.local( 2009,1,1, 0,0,0 ) =&amp;gt; Thu, 01 Jan 2009
00:00:00 CST -06:00 Time.zone.local( 2009,1,1, 0,0,0 ).to_s(:db)
=&amp;gt; &quot;2009-01-01 06:00:00&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;All the to_time helpers return Time objects which have their
time zone thrown away when used in an ActiveRecord query. This
leads to problems when using to_time&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Date.today.beginning_of_day =&amp;gt; Fri Apr 10 00:00:00 -0500 2009
Time.zone.now.beginning_of_day =&amp;gt; Fri, 10 Apr 2009 00:00:00 CDT
-05:00 Date.today.beginning_of_day ==
Time.zone.now.beginning_of_day =&amp;gt; true&lt;/p&gt;
&lt;p&gt;Person.all :conditions =&amp;gt; [ &quot;created_at &amp;gt; ?&quot;,
Date.today.beginning_of_day ] Generated SQL =&amp;gt; SELECT * FROM
&quot;people&quot; WHERE (created_at &amp;gt; '2009-04-10 00:00:00')&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Person.all :conditions =&amp;gt; [ &quot;created_at &amp;gt; ?&quot;,
Time.zone.now.beginning_of_day ] Generated SQL =&amp;gt; SELECT * FROM
&quot;people&quot; WHERE (created_at &amp;gt; '2009-04-10 05:00:00')&lt;/p&gt;
&lt;p&gt;It would seem to me that Time#to_s(:db) should convert the time
zone and/or to_time should return a TimeWithZone.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm storing datetimes in MySQL in UTC. I want to retrieve them based on date.

Here's the problem. Time objects ignore the time zone in to_s(:db).

@@@
&gt;&gt; Time.local( 2009,1,1, 0,0,0 )
=&gt; Thu Jan 01 00:00:00 -0600 2009
&gt;&gt; Time.local( 2009,1,1, 0,0,0 ).to_s(:db)
=&gt; &quot;2009-01-01 00:00:00&quot;
@@@

TimeWithZone objects preserve the time zone in to_s(:db).

@@@
&gt;&gt; Time.zone.local( 2009,1,1, 0,0,0 )
=&gt; Thu, 01 Jan 2009 00:00:00 CST -06:00
&gt;&gt; Time.zone.local( 2009,1,1, 0,0,0 ).to_s(:db)
=&gt; &quot;2009-01-01 06:00:00&quot;
@@@

All the to_time helpers return Time objects which have their time zone thrown away when used in an ActiveRecord query. This leads to problems when using to_time

Example:

@@@
&gt;&gt; Date.today.beginning_of_day
=&gt; Fri Apr 10 00:00:00 -0500 2009
&gt;&gt; Time.zone.now.beginning_of_day
=&gt; Fri, 10 Apr 2009 00:00:00 CDT -05:00
&gt;&gt; Date.today.beginning_of_day == Time.zone.now.beginning_of_day
=&gt; true

&gt;&gt; Person.all :conditions =&gt; [ &quot;created_at &gt; ?&quot;, Date.today.beginning_of_day ]
Generated SQL =&gt; SELECT * FROM &quot;people&quot; WHERE (created_at &gt; '2009-04-10 00:00:00')

Person.all :conditions =&gt; [ &quot;created_at &gt; ?&quot;, Time.zone.now.beginning_of_day ]
Generated SQL =&gt; SELECT * FROM &quot;people&quot; WHERE (created_at &gt; '2009-04-10 05:00:00')
@@@

It would seem to me that Time#to_s(:db) should convert the time zone and/or to_time should return a TimeWithZone.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm storing datetimes in MySQL in UTC. I want to retrieve them
based on date.&lt;/p&gt;
&lt;p&gt;Here's the problem. Time objects ignore the time zone in
to_s(:db).&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt; Time.local( 2009,1,1, 0,0,0 )
=&amp;gt; Thu Jan 01 00:00:00 -0600 2009
&amp;gt;&amp;gt; Time.local( 2009,1,1, 0,0,0 ).to_s(:db)
=&amp;gt; &amp;quot;2009-01-01 00:00:00&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TimeWithZone objects preserve the time zone in to_s(:db).&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt; Time.zone.local( 2009,1,1, 0,0,0 )
=&amp;gt; Thu, 01 Jan 2009 00:00:00 CST -06:00
&amp;gt;&amp;gt; Time.zone.local( 2009,1,1, 0,0,0 ).to_s(:db)
=&amp;gt; &amp;quot;2009-01-01 06:00:00&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All the to_time helpers return Time objects which have their
time zone thrown away when used in an ActiveRecord query. This
leads to problems when using to_time&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt; Date.today.beginning_of_day
=&amp;gt; Fri Apr 10 00:00:00 -0500 2009
&amp;gt;&amp;gt; Time.zone.now.beginning_of_day
=&amp;gt; Fri, 10 Apr 2009 00:00:00 CDT -05:00
&amp;gt;&amp;gt; Date.today.beginning_of_day == Time.zone.now.beginning_of_day
=&amp;gt; true

&amp;gt;&amp;gt; Person.all :conditions =&amp;gt; [ &amp;quot;created_at &amp;gt; ?&amp;quot;, Date.today.beginning_of_day ]
Generated SQL =&amp;gt; SELECT * FROM &amp;quot;people&amp;quot; WHERE (created_at &amp;gt; '2009-04-10 00:00:00')

Person.all :conditions =&amp;gt; [ &amp;quot;created_at &amp;gt; ?&amp;quot;, Time.zone.now.beginning_of_day ]
Generated SQL =&amp;gt; SELECT * FROM &amp;quot;people&amp;quot; WHERE (created_at &amp;gt; '2009-04-10 05:00:00')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would seem to me that Time#to_s(:db) should convert the time
zone and/or to_time should return a TimeWithZone.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-10T20:39:13+01:00</created-at>
      <creator-id type="integer">22224</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2479</number>
      <permalink>inconsistant-time-zone-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 time timewithzone timezone to_time</tag>
      <title>Inconsistant time zone handling</title>
      <updated-at type="datetime">2009-04-10T20:40:35+01:00</updated-at>
      <user-id type="integer">22224</user-id>
      <version type="integer">1</version>
      <user-name>JackC</user-name>
      <creator-name>JackC</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2479</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I agree this is inconsistent -- TimeWithZone and Time.utc instances report themselves to the database as UTC, whereas Time.local instances report themselves in system local time.

Ideally, all of these objects would intelligently report themselves to the database either as UTC or system local time, depending upon the ActiveRecord::Base.default_timezone setting.

to_time isn't the place to add this kind of logic, given that it's used in contexts other than database serialization -- #to_s(:db) would be a better choice. 

Another possibility -- maybe the cleanest choice -- would be to add logic to quoted_date to coerce the time object to utc or local _before_ the #to_s(:db) call.

Of course, this kind of change *could* break some apps, if the app, say, uses Time.local instances as container objects to send utc values to the db -- kind of wonky, but there's nothing stopping you from doing this now.

Interested in hearing thoughts on this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree this is inconsistent -- TimeWithZone and Time.utc
instances report themselves to the database as UTC, whereas
Time.local instances report themselves in system local time.&lt;/p&gt;
&lt;p&gt;Ideally, all of these objects would intelligently report
themselves to the database either as UTC or system local time,
depending upon the ActiveRecord::Base.default_timezone setting.&lt;/p&gt;
&lt;p&gt;to_time isn't the place to add this kind of logic, given that
it's used in contexts other than database serialization --
#to_s(:db) would be a better choice.&lt;/p&gt;
&lt;p&gt;Another possibility -- maybe the cleanest choice -- would be to
add logic to quoted_date to coerce the time object to utc or local
&lt;em&gt;before&lt;/em&gt; the #to_s(:db) call.&lt;/p&gt;
&lt;p&gt;Of course, this kind of change &lt;em&gt;could&lt;/em&gt; break some apps,
if the app, say, uses Time.local instances as container objects to
send utc values to the db -- kind of wonky, but there's nothing
stopping you from doing this now.&lt;/p&gt;
&lt;p&gt;Interested in hearing thoughts on this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-11T14:27:23+01:00</created-at>
      <creator-id type="integer">22224</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 9903
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2479</number>
      <permalink>inconsistant-time-zone-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 time timewithzone timezone to_time</tag>
      <title>Inconsistant time zone handling</title>
      <updated-at type="datetime">2009-04-11T14:27:36+01:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">2</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>JackC</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2479</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I added this line in an initializer and it seems to solve the problem.

@@@
ActiveSupport::CoreExtensions::Time::Conversions::DATE_FORMATS[:db] = lambda { |time| time.utc.strftime( &quot;%Y-%m-%d %H:%M:%S&quot; ) }
@@@

This gives Time and TimeWithZone the same behavior and the behavior exists in to_s(:db) for both of them.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I added this line in an initializer and it seems to solve the
problem.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
ActiveSupport::CoreExtensions::Time::Conversions::DATE_FORMATS[:db] = lambda { |time| time.utc.strftime( &amp;quot;%Y-%m-%d %H:%M:%S&amp;quot; ) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives Time and TimeWithZone the same behavior and the
behavior exists in to_s(:db) for both of them.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-13T16:28:39+01:00</created-at>
      <creator-id type="integer">22224</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2479</number>
      <permalink>inconsistant-time-zone-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 time timewithzone timezone to_time</tag>
      <title>Inconsistant time zone handling</title>
      <updated-at type="datetime">2009-04-13T16:28:40+01:00</updated-at>
      <user-id type="integer">22224</user-id>
      <version type="integer">3</version>
      <user-name>JackC</user-name>
      <creator-name>JackC</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2479</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That would work. Though you should use the non-destructive #getutc instead of #utc, otherwise you might get some unexpected behavior.</body>
      <body-html>&lt;div&gt;&lt;p&gt;That would work. Though you should use the non-destructive
#getutc instead of #utc, otherwise you might get some unexpected
behavior.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-14T00:32:14+01:00</created-at>
      <creator-id type="integer">22224</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2479</number>
      <permalink>inconsistant-time-zone-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 time timewithzone timezone to_time</tag>
      <title>Inconsistant time zone handling</title>
      <updated-at type="datetime">2009-04-14T00:32:19+01:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">4</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>JackC</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2479</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've been running this code with the change to #getutc for the last month in production without any issues. Any chance of getting this made the default?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've been running this code with the change to #getutc for the
last month in production without any issues. Any chance of getting
this made the default?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-22T14:43:28+01:00</created-at>
      <creator-id type="integer">22224</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2479</number>
      <permalink>inconsistant-time-zone-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 time timewithzone timezone to_time</tag>
      <title>Inconsistant time zone handling</title>
      <updated-at type="datetime">2009-05-22T14:43:33+01:00</updated-at>
      <user-id type="integer">22224</user-id>
      <version type="integer">5</version>
      <user-name>JackC</user-name>
      <creator-name>JackC</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2479</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The @JackC fix doesn't work for me.

I had to define a new time_format:

@@@ ruby
Time::DATE_FORMATS[:m] = &quot;%Y-%m-%d %H:%M:%S&quot;
@@@

And use it on my views</body>
      <body-html>&lt;div&gt;&lt;p&gt;The @JackC fix doesn't work for me.&lt;/p&gt;
&lt;p&gt;I had to define a new time_format:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Time::DATE_FORMATS[:m] = &quot;%Y-%m-%d %H:%M:%S&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And use it on my views&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-31T12:02:28+01:00</created-at>
      <creator-id type="integer">22224</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2479</number>
      <permalink>inconsistant-time-zone-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 time timewithzone timezone to_time</tag>
      <title>Inconsistant time zone handling</title>
      <updated-at type="datetime">2009-07-31T12:02:30+01:00</updated-at>
      <user-id type="integer">23794</user-id>
      <version type="integer">6</version>
      <user-name>Fernando Guillen</user-name>
      <creator-name>JackC</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2479</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't see how just a format string would would also change a local time to UTC time.

Anyway this is the code I'm loading in an initializer and it is definitely sending UTC to the database.

@@@
ActiveSupport::CoreExtensions::Time::Conversions::DATE_FORMATS[:db] = lambda { |time| time.getutc.strftime( &quot;%Y-%m-%d %H:%M:%S&quot; ) }
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't see how just a format string would would also change a
local time to UTC time.&lt;/p&gt;
&lt;p&gt;Anyway this is the code I'm loading in an initializer and it is
definitely sending UTC to the database.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActiveSupport::CoreExtensions::Time::Conversions::DATE_FORMATS[:db] = lambda { |time| time.getutc.strftime( &quot;%Y-%m-%d %H:%M:%S&quot; ) }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-31T14:07:02+01:00</created-at>
      <creator-id type="integer">22224</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2479</number>
      <permalink>inconsistant-time-zone-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 time timewithzone timezone to_time</tag>
      <title>Inconsistant time zone handling</title>
      <updated-at type="datetime">2009-07-31T14:07:05+01:00</updated-at>
      <user-id type="integer">22224</user-id>
      <version type="integer">7</version>
      <user-name>JackC</user-name>
      <creator-name>JackC</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2479</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We're going to go forward with a different approach: quoted_date will do the conversion, instead of TimwWithZone#to_s(:db), see https://rails.lighthouseapp.com/projects/8994/tickets/2946-quoted_date-converts-time-objects-to-default_timezone</body>
      <body-html>&lt;div&gt;&lt;p&gt;We're going to go forward with a different approach: quoted_date
will do the conversion, instead of TimwWithZone#to_s(:db), see
&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/2946-quoted_date-converts-time-objects-to-default_timezone&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/2946-quoted_d...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-31T14:34:47+01:00</created-at>
      <creator-id type="integer">22224</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2479</number>
      <permalink>inconsistant-time-zone-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.3.2 time timewithzone timezone to_time</tag>
      <title>Inconsistant time zone handling</title>
      <updated-at type="datetime">2009-07-31T14:34:50+01:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">8</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>JackC</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2479</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:31+01:00</created-at>
      <creator-id type="integer">22224</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">2479</number>
      <permalink>inconsistant-time-zone-handling</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.3.2 time timewithzone timezone to_time</tag>
      <title>Inconsistant time zone handling</title>
      <updated-at type="datetime">2010-10-15T23:01:31+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">9</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>JackC</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2479</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
  </versions>
</ticket>
