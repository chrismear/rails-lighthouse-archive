<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-03T12:51:30+00:00</created-at>
  <creator-id type="integer">127690</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6110</number>
  <permalink>rails-respond_to-processes-xml-but-caches-html</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>Rails respond_to processes XML but caches HTML</title>
  <updated-at type="datetime">2010-12-09T15:18:29+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">8</version>
  <user-name>Repository</user-name>
  <creator-name>Stephen</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6110</url>
  <priority-name>Low</priority-name>
  <original-body>The 'root' page of my site is rendered by the posts#index action.  To support rss and html, I have a respond_to block that looks like:

     respond_to do |wants|
      wants.html 
      wants.xml {
        render :layout =&gt; false;
        response.headers[&quot;Content-Type&quot;] = &quot;application/xml; charset=utf-8&quot;
      }
    end

I also have a 'caches_page' set on the index page.

If someone comes to the site in a browser and just requests &quot;/&quot;, then they get served the html version of the page, and Rails also writes a cached page for index.html

There isn't really any way to request &quot;/&quot; with a format of XML, but if I hit &quot;/posts.xml&quot; it renders XML and caches posts.xml (similarly if I hit &quot;/posts&quot; or &quot;/posts.html&quot; it will cache posts.html).  That all works just fine.

Now for the tricky bit.  If something requests &quot;/&quot; but has an accept header like:

    Accept: text/xml

Then Rails will *process* it as XML (probably correct), but *CACHES* it as html, destroying my cache.  The next visitor to the site will be forever server an html file that actually contains XML.  Here is the Rails log message proving this is happening:

    Started GET &quot;/&quot; for 127.0.0.1 at 2010-11-30 20:47:27 +0000
      Processing by PostsController#index as XML
      Post Load (1.4ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE ...
    Rendered posts/index.xml.rxml (243.8ms)
    Write page /..../index.html (0.6ms)
    Completed 200 OK in 423ms (Views: 244.8ms | ActiveRecord: 1.4ms)

Is this a bug?  I browsed some of the code, and the 'page caching' code doesn't consider the processing format of the request - it just parses the URL to see if there is a :format extension. If no extension is found, it use the defaul (html). This problem occured on my live site - I suspect it was a robot that came in with the text/xml header, but anything that does this can break a sites cache pretty easily.</original-body>
  <latest-body>The 'root' page of my site is rendered by the posts#index action.  To support rss and html, I have a respond_to block that looks like:

     respond_to do |wants|
      wants.html 
      wants.xml {
        render :layout =&gt; false;
        response.headers[&quot;Content-Type&quot;] = &quot;application/xml; charset=utf-8&quot;
      }
    end

I also have a 'caches_page' set on the index page.

If someone comes to the site in a browser and just requests &quot;/&quot;, then they get served the html version of the page, and Rails also writes a cached page for index.html

There isn't really any way to request &quot;/&quot; with a format of XML, but if I hit &quot;/posts.xml&quot; it renders XML and caches posts.xml (similarly if I hit &quot;/posts&quot; or &quot;/posts.html&quot; it will cache posts.html).  That all works just fine.

Now for the tricky bit.  If something requests &quot;/&quot; but has an accept header like:

    Accept: text/xml

Then Rails will *process* it as XML (probably correct), but *CACHES* it as html, destroying my cache.  The next visitor to the site will be forever server an html file that actually contains XML.  Here is the Rails log message proving this is happening:

    Started GET &quot;/&quot; for 127.0.0.1 at 2010-11-30 20:47:27 +0000
      Processing by PostsController#index as XML
      Post Load (1.4ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE ...
    Rendered posts/index.xml.rxml (243.8ms)
    Write page /..../index.html (0.6ms)
    Completed 200 OK in 423ms (Views: 244.8ms | ActiveRecord: 1.4ms)

Is this a bug?  I browsed some of the code, and the 'page caching' code doesn't consider the processing format of the request - it just parses the URL to see if there is a :format extension. If no extension is found, it use the defaul (html). This problem occured on my live site - I suspect it was a robot that came in with the text/xml header, but anything that does this can break a sites cache pretty easily.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The 'root' page of my site is rendered by the posts#index
action. To support rss and html, I have a respond_to block that
looks like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; respond_to do |wants|
  wants.html 
  wants.xml {
    render :layout =&amp;gt; false;
    response.headers[&quot;Content-Type&quot;] = &quot;application/xml; charset=utf-8&quot;
  }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I also have a 'caches_page' set on the index page.&lt;/p&gt;
&lt;p&gt;If someone comes to the site in a browser and just requests &quot;/&quot;,
then they get served the html version of the page, and Rails also
writes a cached page for index.html&lt;/p&gt;
&lt;p&gt;There isn't really any way to request &quot;/&quot; with a format of XML,
but if I hit &quot;/posts.xml&quot; it renders XML and caches posts.xml
(similarly if I hit &quot;/posts&quot; or &quot;/posts.html&quot; it will cache
posts.html). That all works just fine.&lt;/p&gt;
&lt;p&gt;Now for the tricky bit. If something requests &quot;/&quot; but has an
accept header like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Accept: text/xml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then Rails will &lt;em&gt;process&lt;/em&gt; it as XML (probably correct),
but &lt;em&gt;CACHES&lt;/em&gt; it as html, destroying my cache. The next
visitor to the site will be forever server an html file that
actually contains XML. Here is the Rails log message proving this
is happening:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Started GET &quot;/&quot; for 127.0.0.1 at 2010-11-30 20:47:27 +0000
  Processing by PostsController#index as XML
  Post Load (1.4ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE ...
Rendered posts/index.xml.rxml (243.8ms)
Write page /..../index.html (0.6ms)
Completed 200 OK in 423ms (Views: 244.8ms | ActiveRecord: 1.4ms)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Is this a bug? I browsed some of the code, and the 'page
caching' code doesn't consider the processing format of the request
- it just parses the URL to see if there is a :format extension. If
no extension is found, it use the defaul (html). This problem
occured on my live site - I suspect it was a robot that came in
with the text/xml header, but anything that does this can break a
sites cache pretty easily.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The 'root' page of my site is rendered by the posts#index action.  To support rss and html, I have a respond_to block that looks like:

     respond_to do |wants|
      wants.html 
      wants.xml {
        render :layout =&gt; false;
        response.headers[&quot;Content-Type&quot;] = &quot;application/xml; charset=utf-8&quot;
      }
    end

I also have a 'caches_page' set on the index page.

If someone comes to the site in a browser and just requests &quot;/&quot;, then they get served the html version of the page, and Rails also writes a cached page for index.html

There isn't really any way to request &quot;/&quot; with a format of XML, but if I hit &quot;/posts.xml&quot; it renders XML and caches posts.xml (similarly if I hit &quot;/posts&quot; or &quot;/posts.html&quot; it will cache posts.html).  That all works just fine.

Now for the tricky bit.  If something requests &quot;/&quot; but has an accept header like:

    Accept: text/xml

Then Rails will *process* it as XML (probably correct), but *CACHES* it as html, destroying my cache.  The next visitor to the site will be forever server an html file that actually contains XML.  Here is the Rails log message proving this is happening:

    Started GET &quot;/&quot; for 127.0.0.1 at 2010-11-30 20:47:27 +0000
      Processing by PostsController#index as XML
      Post Load (1.4ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE ...
    Rendered posts/index.xml.rxml (243.8ms)
    Write page /..../index.html (0.6ms)
    Completed 200 OK in 423ms (Views: 244.8ms | ActiveRecord: 1.4ms)

Is this a bug?  I browsed some of the code, and the 'page caching' code doesn't consider the processing format of the request - it just parses the URL to see if there is a :format extension. If no extension is found, it use the defaul (html). This problem occured on my live site - I suspect it was a robot that came in with the text/xml header, but anything that does this can break a sites cache pretty easily.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The 'root' page of my site is rendered by the posts#index
action. To support rss and html, I have a respond_to block that
looks like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; respond_to do |wants|
  wants.html 
  wants.xml {
    render :layout =&amp;gt; false;
    response.headers[&quot;Content-Type&quot;] = &quot;application/xml; charset=utf-8&quot;
  }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I also have a 'caches_page' set on the index page.&lt;/p&gt;
&lt;p&gt;If someone comes to the site in a browser and just requests &quot;/&quot;,
then they get served the html version of the page, and Rails also
writes a cached page for index.html&lt;/p&gt;
&lt;p&gt;There isn't really any way to request &quot;/&quot; with a format of XML,
but if I hit &quot;/posts.xml&quot; it renders XML and caches posts.xml
(similarly if I hit &quot;/posts&quot; or &quot;/posts.html&quot; it will cache
posts.html). That all works just fine.&lt;/p&gt;
&lt;p&gt;Now for the tricky bit. If something requests &quot;/&quot; but has an
accept header like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Accept: text/xml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then Rails will &lt;em&gt;process&lt;/em&gt; it as XML (probably correct),
but &lt;em&gt;CACHES&lt;/em&gt; it as html, destroying my cache. The next
visitor to the site will be forever server an html file that
actually contains XML. Here is the Rails log message proving this
is happening:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Started GET &quot;/&quot; for 127.0.0.1 at 2010-11-30 20:47:27 +0000
  Processing by PostsController#index as XML
  Post Load (1.4ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE ...
Rendered posts/index.xml.rxml (243.8ms)
Write page /..../index.html (0.6ms)
Completed 200 OK in 423ms (Views: 244.8ms | ActiveRecord: 1.4ms)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Is this a bug? I browsed some of the code, and the 'page
caching' code doesn't consider the processing format of the request
- it just parses the URL to see if there is a :format extension. If
no extension is found, it use the defaul (html). This problem
occured on my live site - I suspect it was a robot that came in
with the text/xml header, but anything that does this can break a
sites cache pretty easily.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-03T12:51:30+00:00</created-at>
      <creator-id type="integer">127690</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6110</number>
      <permalink>rails-respond_to-processes-xml-but-caches-html</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails respond_to processes XML but caches HTML</title>
      <updated-at type="datetime">2010-12-03T12:51:32+00:00</updated-at>
      <user-id type="integer">127690</user-id>
      <version type="integer">1</version>
      <user-name>Stephen</user-name>
      <creator-name>Stephen</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6110</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40263</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-04T03:04:28+00:00</created-at>
      <creator-id type="integer">127690</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6110</number>
      <permalink>rails-respond_to-processes-xml-but-caches-html</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails respond_to processes XML but caches HTML</title>
      <updated-at type="datetime">2010-12-04T03:04:34+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Stephen</creator-name>
      <assigned-user-name>Neeraj Singh</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6110</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40263</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If the request has an extension like .xml, .js or .html then the cached page will have the extension that was supplied from the request.

If the request does not have extension then a default .html extension is used as per https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/caching/pages.rb#L55 

The HTTP_ACCEPT header value is totally being ignored.

I will try to find more information about the above mentioned code from rails core team.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If the request has an extension like .xml, .js or .html then the
cached page will have the extension that was supplied from the
request.&lt;/p&gt;
&lt;p&gt;If the request does not have extension then a default .html
extension is used as per &lt;a href=
&quot;https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/caching/pages.rb#L55&quot;&gt;
https://github.com/rails/rails/blob/master/actionpack/lib/action_co...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The HTTP_ACCEPT header value is totally being ignored.&lt;/p&gt;
&lt;p&gt;I will try to find more information about the above mentioned
code from rails core team.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-04T03:45:42+00:00</created-at>
      <creator-id type="integer">127690</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6110</number>
      <permalink>rails-respond_to-processes-xml-but-caches-html</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails respond_to processes XML but caches HTML</title>
      <updated-at type="datetime">2010-12-04T03:45:48+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">3</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Stephen</creator-name>
      <assigned-user-name>Neeraj Singh</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6110</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40263</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yea I had a browse of that code in pages.rb.

It's almost as if the pages.rb code needs to know the value in the respond_to method to correctly work out the extension it should use.

I don't know enough about the internals to know if it the relevant objects are accessible inside pages.rb I'm afraid.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yea I had a browse of that code in pages.rb.&lt;/p&gt;
&lt;p&gt;It's almost as if the pages.rb code needs to know the value in
the respond_to method to correctly work out the extension it should
use.&lt;/p&gt;
&lt;p&gt;I don't know enough about the internals to know if it the
relevant objects are accessible inside pages.rb I'm afraid.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-05T21:55:27+00:00</created-at>
      <creator-id type="integer">127690</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6110</number>
      <permalink>rails-respond_to-processes-xml-but-caches-html</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails respond_to processes XML but caches HTML</title>
      <updated-at type="datetime">2010-12-05T21:55:35+00:00</updated-at>
      <user-id type="integer">127690</user-id>
      <version type="integer">4</version>
      <user-name>Stephen</user-name>
      <creator-name>Stephen</creator-name>
      <assigned-user-name>Neeraj Singh</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6110</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40263</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have a fix that is working. Trying to write a test. Will update when fix is ready.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have a fix that is working. Trying to write a test. Will
update when fix is ready.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-05T22:07:12+00:00</created-at>
      <creator-id type="integer">127690</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6110</number>
      <permalink>rails-respond_to-processes-xml-but-caches-html</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails respond_to processes XML but caches HTML</title>
      <updated-at type="datetime">2010-12-05T22:07:19+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">5</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Stephen</creator-name>
      <assigned-user-name>Neeraj Singh</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6110</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Fix along with test is here.

https://github.com/neerajdotname/rails/commit/a5054cc5e2a98685d0d6f1154583bb582b4990a2</body>
      <body-html>&lt;div&gt;&lt;p&gt;Fix along with test is here.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/neerajdotname/rails/commit/a5054cc5e2a98685d0d6f1154583bb582b4990a2&quot;&gt;
https://github.com/neerajdotname/rails/commit/a5054cc5e2a98685d0d6f...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-06T10:56:34+00:00</created-at>
      <creator-id type="integer">127690</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 40263
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6110</number>
      <permalink>rails-respond_to-processes-xml-but-caches-html</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails respond_to processes XML but caches HTML</title>
      <updated-at type="datetime">2010-12-06T10:56:41+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Stephen</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6110</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>For reference adding that ticket #1244  is about the same issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;For reference adding that ticket &lt;a href=
&quot;/projects/8994/tickets/1244&quot; title=&quot;Ticket #1244&quot;&gt;#1244&lt;/a&gt; is
about the same issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-06T21:34:23+00:00</created-at>
      <creator-id type="integer">127690</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6110</number>
      <permalink>rails-respond_to-processes-xml-but-caches-html</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails respond_to processes XML but caches HTML</title>
      <updated-at type="datetime">2010-12-06T21:34:32+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">7</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Stephen</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6110</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [0027b654215cd6310d0d17daeaafec8ebbfb38d4]) Ensure that while caching a page rails takes into
account the resolved mime type for the request

[#6110 state:resolved]

Signed-off-by: Jos&#233; Valim &lt;jose.valim@gmail.com&gt;
https://github.com/rails/rails/commit/0027b654215cd6310d0d17daeaafec8ebbfb38d4</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/0027b654215cd6310d0d17daeaafec8ebbfb38d4&quot;
title=
&quot;Changeset [0027b654215cd6310d0d17daeaafec8ebbfb38d4]&quot;&gt;[0027b654215cd6310d0d17daeaafec8ebbfb38d4]&lt;/a&gt;)
Ensure that while caching a page rails takes into account the
resolved mime type for the request&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/6110&quot; title=
&quot;Ticket #6110&quot;&gt;#6110&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jos&amp;eacute; Valim &lt;a href=
&quot;mailto:jose.valim@gmail.com&quot;&gt;jose.valim@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/commit/0027b654215cd6310d0d17daeaafec8ebbfb38d4&quot;&gt;
https://github.com/rails/rails/commit/0027b654215cd6310d0d17daeaafe...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-09T15:18:18+00:00</created-at>
      <creator-id type="integer">127690</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6110</number>
      <permalink>rails-respond_to-processes-xml-but-caches-html</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Rails respond_to processes XML but caches HTML</title>
      <updated-at type="datetime">2010-12-09T15:18:29+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>Stephen</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6110</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
