<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-05-13T20:08:52+01:00</created-at>
  <creator-id type="integer">56876</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2642</number>
  <permalink>dbmigratereset-should-not-drop-all-tables</permalink>
  <priority type="integer">1772</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>db:migrate:reset should not drop all tables</title>
  <updated-at type="datetime">2010-04-19T22:13:17+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">6</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Mathieu Jobin</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2642</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>with the old migration system you could simply do

rake migrate VERSION=0 &amp;&amp; rake migrate

wish would call all the down() methods and then restore everything.

now, with db:migrate:reset it kills everything. while I wish it would simply revert my migration and applies them again

thanks</original-body>
  <latest-body>with the old migration system you could simply do

rake migrate VERSION=0 &amp;&amp; rake migrate

wish would call all the down() methods and then restore everything.

now, with db:migrate:reset it kills everything. while I wish it would simply revert my migration and applies them again

thanks</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;with the old migration system you could simply do&lt;/p&gt;
&lt;p&gt;rake migrate VERSION=0 &amp;amp;&amp;amp; rake migrate&lt;/p&gt;
&lt;p&gt;wish would call all the down() methods and then restore
everything.&lt;/p&gt;
&lt;p&gt;now, with db:migrate:reset it kills everything. while I wish it
would simply revert my migration and applies them again&lt;/p&gt;
&lt;p&gt;thanks&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>with the old migration system you could simply do

rake migrate VERSION=0 &amp;&amp; rake migrate

wish would call all the down() methods and then restore everything.

now, with db:migrate:reset it kills everything. while I wish it would simply revert my migration and applies them again

thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;with the old migration system you could simply do&lt;/p&gt;
&lt;p&gt;rake migrate VERSION=0 &amp;amp;&amp;amp; rake migrate&lt;/p&gt;
&lt;p&gt;wish would call all the down() methods and then restore
everything.&lt;/p&gt;
&lt;p&gt;now, with db:migrate:reset it kills everything. while I wish it
would simply revert my migration and applies them again&lt;/p&gt;
&lt;p&gt;thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-13T20:08:52+01:00</created-at>
      <creator-id type="integer">56876</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2642</number>
      <permalink>dbmigratereset-should-not-drop-all-tables</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>db:migrate:reset should not drop all tables</title>
      <updated-at type="datetime">2009-05-13T20:08:56+01:00</updated-at>
      <user-id type="integer">56876</user-id>
      <version type="integer">1</version>
      <user-name>Mathieu Jobin</user-name>
      <creator-name>Mathieu Jobin</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2642</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can you provide a bit more detail as to what your trying to accomplish? db:migrate:reset works as expected perhaps what your looking for is db:migrate:redo or db:migrate:rollback, not sure why it matters dropping all the tables if your starting over.

can be marked as invalid or incomplete</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can you provide a bit more detail as to what your trying to
accomplish? db:migrate:reset works as expected perhaps what your
looking for is db:migrate:redo or db:migrate:rollback, not sure why
it matters dropping all the tables if your starting over.&lt;/p&gt;
&lt;p&gt;can be marked as invalid or incomplete&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-16T01:23:40+01:00</created-at>
      <creator-id type="integer">56876</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2642</number>
      <permalink>dbmigratereset-should-not-drop-all-tables</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>db:migrate:reset should not drop all tables</title>
      <updated-at type="datetime">2010-04-16T01:23:44+01:00</updated-at>
      <user-id type="integer">65576</user-id>
      <version type="integer">2</version>
      <user-name>Steve St. Martin</user-name>
      <creator-name>Mathieu Jobin</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2642</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-16T01:23:54+01:00</created-at>
      <creator-id type="integer">56876</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2642</number>
      <permalink>dbmigratereset-should-not-drop-all-tables</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>db:migrate:reset should not drop all tables</title>
      <updated-at type="datetime">2010-04-16T01:23:56+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">3</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Mathieu Jobin</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2642</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>db:migrate:reset is definitely useful as well.
but I'd like something that would just revert all migration calling all the down() methods one by one from the last to the first.</body>
      <body-html>&lt;div&gt;&lt;p&gt;db:migrate:reset is definitely useful as well.&lt;br&gt;
but I'd like something that would just revert all migration calling
all the down() methods one by one from the last to the first.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-16T04:08:44+01:00</created-at>
      <creator-id type="integer">56876</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2642</number>
      <permalink>dbmigratereset-should-not-drop-all-tables</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>db:migrate:reset should not drop all tables</title>
      <updated-at type="datetime">2010-04-16T04:08:47+01:00</updated-at>
      <user-id type="integer">56876</user-id>
      <version type="integer">4</version>
      <user-name>Mathieu Jobin</user-name>
      <creator-name>Mathieu Jobin</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2642</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If I understand correctly, you're trying to roll back every migration my calling `down()` (like Mathieu said) On 2.3.5, `rake db:migrate VERSION=0` just seems to work:

@@@
~/rails$ rails -v
Rails 2.3.5
~/rails$ rails migrate_reset
      ...
~/rails$ cd migrate_reset/
~/rails/migrate_reset$ script/generate model user name:string
      ...
~/rails/migrate_reset$ script/generate model book title:string
      ...
~/rails/migrate_reset$ rake db:migrate
(in /Users/jeff/rails/migrate_reset)
==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -&gt; 0.0015s
==  CreateUsers: migrated (0.0017s) ===========================================

==  CreateBooks: migrating ====================================================
-- create_table(:books)
   -&gt; 0.0012s
==  CreateBooks: migrated (0.0013s) ===========================================

~/rails/migrate_reset$ rake db:migrate VERSION=0
(in /Users/jeff/rails/migrate_reset)
==  CreateBooks: reverting ====================================================
-- drop_table(:books)
   -&gt; 0.0026s
==  CreateBooks: reverted (0.0027s) ===========================================

==  CreateUsers: reverting ====================================================
-- drop_table(:users)
   -&gt; 0.0019s
==  CreateUsers: reverted (0.0021s) ===========================================

~/rails/migrate_reset$ 
@@@

I've also tried this on edge. Same results. I think this one can be marked as invalid.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If I understand correctly, you're trying to roll back every
migration my calling &lt;code&gt;down()&lt;/code&gt; (like Mathieu said) On
2.3.5, &lt;code&gt;rake db:migrate VERSION=0&lt;/code&gt; just seems to
work:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;~/rails$ rails -v
Rails 2.3.5
~/rails$ rails migrate_reset
      ...
~/rails$ cd migrate_reset/
~/rails/migrate_reset$ script/generate model user name:string
      ...
~/rails/migrate_reset$ script/generate model book title:string
      ...
~/rails/migrate_reset$ rake db:migrate
(in /Users/jeff/rails/migrate_reset)
==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -&amp;gt; 0.0015s
==  CreateUsers: migrated (0.0017s) ===========================================

==  CreateBooks: migrating ====================================================
-- create_table(:books)
   -&amp;gt; 0.0012s
==  CreateBooks: migrated (0.0013s) ===========================================

~/rails/migrate_reset$ rake db:migrate VERSION=0
(in /Users/jeff/rails/migrate_reset)
==  CreateBooks: reverting ====================================================
-- drop_table(:books)
   -&amp;gt; 0.0026s
==  CreateBooks: reverted (0.0027s) ===========================================

==  CreateUsers: reverting ====================================================
-- drop_table(:users)
   -&amp;gt; 0.0019s
==  CreateUsers: reverted (0.0021s) ===========================================

~/rails/migrate_reset$&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've also tried this on edge. Same results. I think this one can
be marked as invalid.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-16T09:46:38+01:00</created-at>
      <creator-id type="integer">56876</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2642</number>
      <permalink>dbmigratereset-should-not-drop-all-tables</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>db:migrate:reset should not drop all tables</title>
      <updated-at type="datetime">2010-04-16T09:46:40+01:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">5</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>Mathieu Jobin</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2642</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-19T22:13:13+01:00</created-at>
      <creator-id type="integer">56876</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2642</number>
      <permalink>dbmigratereset-should-not-drop-all-tables</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>db:migrate:reset should not drop all tables</title>
      <updated-at type="datetime">2010-04-19T22:13:17+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">6</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Mathieu Jobin</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2642</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
