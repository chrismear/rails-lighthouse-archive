From 08fb6c6d1abd9671e834efdc0cc36df3a3d4a202 Mon Sep 17 00:00:00 2001
From: Neeraj Singh <neerajdotname@gmail.com>
Date: Wed, 10 Nov 2010 15:29:49 -0500
Subject: [PATCH] If a nested_attribute is being marked for destruction and at the
 same time an attr_accessor value is being assigned then the value
 being assigned is being ignored. This patch is a fix for that issue.

[#5939 state:resovled]
---
 .../lib/active_record/nested_attributes.rb         |    7 ++-----
 activerecord/test/cases/nested_attributes_test.rb  |   12 +++++++++++-
 activerecord/test/models/pet.rb                    |    8 ++++++++
 3 files changed, 21 insertions(+), 6 deletions(-)

diff --git a/activerecord/lib/active_record/nested_attributes.rb b/activerecord/lib/active_record/nested_attributes.rb
index 65434fb..1e8bc49 100644
--- a/activerecord/lib/active_record/nested_attributes.rb
+++ b/activerecord/lib/active_record/nested_attributes.rb
@@ -368,11 +368,8 @@ module ActiveRecord
     # Updates a record with the +attributes+ or marks it for destruction if
     # +allow_destroy+ is +true+ and has_destroy_flag? returns +true+.
     def assign_to_or_mark_for_destruction(record, attributes, allow_destroy)
-      if has_destroy_flag?(attributes) && allow_destroy
-        record.mark_for_destruction
-      else
-        record.attributes = attributes.except(*UNASSIGNABLE_KEYS)
-      end
+      record.attributes = attributes.except(*UNASSIGNABLE_KEYS)
+      record.mark_for_destruction if has_destroy_flag?(attributes) && allow_destroy
     end
 
     # Determines if a hash contains a truthy _destroy key.
diff --git a/activerecord/test/cases/nested_attributes_test.rb b/activerecord/test/cases/nested_attributes_test.rb
index 3adcc88..541a37c 100644
--- a/activerecord/test/cases/nested_attributes_test.rb
+++ b/activerecord/test/cases/nested_attributes_test.rb
@@ -741,7 +741,7 @@ class TestNestedAttributesWithNonStandardPrimaryKeys < ActiveRecord::TestCase
   fixtures :owners, :pets
 
   def setup
-    Owner.accepts_nested_attributes_for :pets
+    Owner.accepts_nested_attributes_for :pets, :allow_destroy => true
 
     @owner = owners(:ashley)
     @pet1, @pet2 = pets(:chew), pets(:mochi)
@@ -758,6 +758,16 @@ class TestNestedAttributesWithNonStandardPrimaryKeys < ActiveRecord::TestCase
     @owner.update_attributes(@params)
     assert_equal ['Foo', 'Bar'], @owner.pets.map(&:name)
   end
+
+  def test_attr_accessor_of_child_should_be_value_provided_during_update_attributes
+    @owner = owners(:ashley)
+    @pet1 = pets(:chew)
+    assert_equal nil, $current_user
+    attributes = {:pets_attributes=>{"1"=>{ :id => @pet1.id, :name => "Foo2", :current_user => "John", :_destroy=>true }}}
+    @owner.update_attributes(attributes)
+    assert_equal 'John', $after_destroy_callback_output
+  end
+
 end
 
 class TestHasOneAutosaveAssoictaionWhichItselfHasAutosaveAssociations < ActiveRecord::TestCase
diff --git a/activerecord/test/models/pet.rb b/activerecord/test/models/pet.rb
index a8bf94d..5e03983 100644
--- a/activerecord/test/models/pet.rb
+++ b/activerecord/test/models/pet.rb
@@ -1,5 +1,13 @@
 class Pet < ActiveRecord::Base
+  
+  attr_accessor :current_user
+
   set_primary_key :pet_id
   belongs_to :owner, :touch => true
   has_many :toys
+
+  after_destroy do |record|
+    $after_destroy_callback_output = record.current_user
+  end
+
 end
-- 
1.7.2

