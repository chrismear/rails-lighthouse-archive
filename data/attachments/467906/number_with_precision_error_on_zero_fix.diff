From 146a688b9c256c8db9cc46ccd1031d15e7585d59 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernardo=20de=20P=C3=A1dua?= <berpasan@gmail.com>
Date: Thu, 1 Apr 2010 01:19:09 -0300
Subject: [PATCH] Fix error in number_with_precision with :significant option and zero value [#4306 state:resolved]

---
 .../lib/action_view/helpers/number_helper.rb       |    8 ++++++--
 actionpack/test/template/number_helper_test.rb     |    9 +++++++++
 2 files changed, 15 insertions(+), 2 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/number_helper.rb b/actionpack/lib/action_view/helpers/number_helper.rb
index 605e5d5..01fecc0 100644
--- a/actionpack/lib/action_view/helpers/number_helper.rb
+++ b/actionpack/lib/action_view/helpers/number_helper.rb
@@ -273,8 +273,12 @@ module ActionView
         strip_insignificant_zeros = options.delete :strip_insignificant_zeros
 
         if significant and precision > 0
-          digits = (Math.log10(number) + 1).floor
-          rounded_number = BigDecimal.new((number / 10 ** (digits - precision)).to_s).round.to_f * 10 ** (digits - precision)
+          if number == 0
+            digits, rounded_number = 1, 0
+          else
+            digits = (Math.log10(number) + 1).floor
+            rounded_number = BigDecimal.new((number / 10 ** (digits - precision)).to_s).round.to_f * 10 ** (digits - precision)
+          end
           precision = precision - digits
           precision = precision > 0 ? precision : 0  #don't let it be negative
         else
diff --git a/actionpack/test/template/number_helper_test.rb b/actionpack/test/template/number_helper_test.rb
index 50c57a5..eb149a5 100644
--- a/actionpack/test/template/number_helper_test.rb
+++ b/actionpack/test/template/number_helper_test.rb
@@ -102,6 +102,9 @@ class NumberHelperTest < ActionView::TestCase
     assert_equal("3268", number_with_precision((32.6751 * 100.00), :precision => 0))
     assert_equal("112", number_with_precision(111.50, :precision => 0))
     assert_equal("1234567892", number_with_precision(1234567891.50, :precision => 0))
+    assert_equal("0", number_with_precision(0, :precision => 0))
+    assert_equal("0.00100", number_with_precision(0.001, :precision => 5))
+    assert_equal("0.001", number_with_precision(0.00111, :precision => 3))
   end
 
   def test_number_with_precision_with_custom_delimiter_and_separator
@@ -122,11 +125,17 @@ class NumberHelperTest < ActionView::TestCase
     assert_equal "53", number_with_precision(52.7923, :precision => 2, :significant => true )
     assert_equal "9775.00", number_with_precision(9775, :precision => 6, :significant => true )
     assert_equal "5.392900", number_with_precision(5.3929, :precision => 7, :significant => true )
+    assert_equal "0.0", number_with_precision(0, :precision => 2, :significant => true )
+    assert_equal "0", number_with_precision(0, :precision => 1, :significant => true )    
+    assert_equal "0.0001", number_with_precision(0.0001, :precision => 1, :significant => true )    
+    assert_equal "0.000100", number_with_precision(0.0001, :precision => 3, :significant => true )    
+    assert_equal "0.0001", number_with_precision(0.0001111, :precision => 1, :significant => true )    
   end
 
   def test_number_with_precision_with_strip_insignificant_zeros
     assert_equal "9775.43", number_with_precision(9775.43, :precision => 4, :strip_insignificant_zeros => true )
     assert_equal "9775.2", number_with_precision(9775.2, :precision => 6, :significant => true, :strip_insignificant_zeros => true )
+    assert_equal "0", number_with_precision(0, :precision => 6, :significant => true, :strip_insignificant_zeros => true )
   end
 
   def test_number_with_precision_with_significant_true_and_zero_precision
-- 
1.7.0.2

