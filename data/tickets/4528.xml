<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-05-04T01:06:06+01:00</created-at>
  <creator-id type="integer">97703</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4528</number>
  <permalink>sqliteadapterselect_rows-misses-columns-when-column-names-are-ambiguous</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>rails3 rails303 sqlite_adapter</tag>
  <title>SQLiteAdapter::select_rows misses columns when column names are ambiguous</title>
  <updated-at type="datetime">2011-05-07T01:00:24+01:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">9</version>
  <user-name>rails</user-name>
  <creator-name>Richard Bunch</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4528</url>
  <priority-name nil="true"></priority-name>
  <original-body>When select_rows is used on a SQLite database and the selected columns include some with the same name in different tables, the last of the columns selected (not necessarily the ambiguous ones) will not appear in the result rows. The bug can be worked around by giving unambiguous aliases to the columns selected. I was using ruby 1.8.7 and rails 2.3.5.

An example follows.

config/schema.rb
    ActiveRecord::Schema.define(:version =&gt; 20100503193703) do
      create_table &quot;dogs&quot;, :force =&gt; true do |t|
        t.string   &quot;name&quot;
        t.string   &quot;color&quot;
        t.integer  &quot;owner_id&quot;
        t.datetime &quot;created_at&quot;
        t.datetime &quot;updated_at&quot;
      end

      create_table &quot;people&quot;, :force =&gt; true do |t|
        t.string   &quot;name&quot;
        t.datetime &quot;created_at&quot;
        t.datetime &quot;updated_at&quot;
      end
    end

app/models/dog.rb
    class Dog &lt; ActiveRecord::Base
      belongs_to :person
    end

app/models/person.rb
    class Person &lt; ActiveRecord::Base
      has_many :dog
    end

db/seeds.rb
    bob = Person.create(:name =&gt; 'Bob')
    Dog.create(:name =&gt; 'Fido', :owner_id =&gt; bob.id, :color =&gt; 'brown')

app/controllers/home_controller.rb
    require 'pp'
    class HomeController &lt; ApplicationController
      def index
        @dog_show = ActiveRecord::Base::connection.select_rows 'SELECT people.name, dogs.name, dogs.color FROM people INNER JOIN dogs ON dogs.owner_id = people.id'
        pp @dog_show #=&gt; [[&quot;Bob&quot;, &quot;Fido&quot;]]

        @dog_show = ActiveRecord::Base::connection.select_rows 'SELECT people.name, dogs.name as dogname, dogs.color FROM people INNER JOIN dogs ON dogs.owner_id = people.id'
        pp @dog_show #=&gt; [[&quot;Bob&quot;, &quot;Fido&quot;, &quot;brown&quot;]]
      end
    end

The bug appears to be due to the implementation of select_rows in activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb

    def select_rows(sql, name = nil)
      execute(sql, name).map do |row|
        (0...(row.size / 2)).map { |i| row[i] }
      end
    end

With the ambiguous column names in the example, the value returned by execute is:
    [{&quot;name&quot;=&gt;&quot;Fido&quot;, 0=&gt;&quot;Bob&quot;, 1=&gt;&quot;Fido&quot;, 2=&gt;&quot;brown&quot;, &quot;color&quot;=&gt;&quot;brown&quot;}]

Due to the ambiguity, there is no &quot;name&quot;=&gt;&quot;Bob&quot; pair, so the number of columns is not row.size/2 as is assumed.

The following monkey patch seemed to fix the problem, but I have not tested it properly and it seems that the code could be more &quot;rubyish&quot;.
    module ActiveRecord
      module ConnectionAdapters
        class SQLiteAdapter
            def select_rows(sql, name = nil)
              rows = execute(sql, name)
              pp rows
              rows.map do |row|
                (0...(row.size / 2)).map { |i| row[i] }
              end
            end
        end
      end
    end


I have not tested the bug with other databases, but their code for select_rows looks totally different.</original-body>
  <latest-body>When select_rows is used on a SQLite database and the selected columns include some with the same name in different tables, the last of the columns selected (not necessarily the ambiguous ones) will not appear in the result rows. The bug can be worked around by giving unambiguous aliases to the columns selected. I was using ruby 1.8.7 and rails 2.3.5.

An example follows.

config/schema.rb
    ActiveRecord::Schema.define(:version =&gt; 20100503193703) do
      create_table &quot;dogs&quot;, :force =&gt; true do |t|
        t.string   &quot;name&quot;
        t.string   &quot;color&quot;
        t.integer  &quot;owner_id&quot;
        t.datetime &quot;created_at&quot;
        t.datetime &quot;updated_at&quot;
      end

      create_table &quot;people&quot;, :force =&gt; true do |t|
        t.string   &quot;name&quot;
        t.datetime &quot;created_at&quot;
        t.datetime &quot;updated_at&quot;
      end
    end

app/models/dog.rb
    class Dog &lt; ActiveRecord::Base
      belongs_to :person
    end

app/models/person.rb
    class Person &lt; ActiveRecord::Base
      has_many :dog
    end

db/seeds.rb
    bob = Person.create(:name =&gt; 'Bob')
    Dog.create(:name =&gt; 'Fido', :owner_id =&gt; bob.id, :color =&gt; 'brown')

app/controllers/home_controller.rb
    require 'pp'
    class HomeController &lt; ApplicationController
      def index
        @dog_show = ActiveRecord::Base::connection.select_rows 'SELECT people.name, dogs.name, dogs.color FROM people INNER JOIN dogs ON dogs.owner_id = people.id'
        pp @dog_show #=&gt; [[&quot;Bob&quot;, &quot;Fido&quot;]]

        @dog_show = ActiveRecord::Base::connection.select_rows 'SELECT people.name, dogs.name as dogname, dogs.color FROM people INNER JOIN dogs ON dogs.owner_id = people.id'
        pp @dog_show #=&gt; [[&quot;Bob&quot;, &quot;Fido&quot;, &quot;brown&quot;]]
      end
    end

The bug appears to be due to the implementation of select_rows in activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb

    def select_rows(sql, name = nil)
      execute(sql, name).map do |row|
        (0...(row.size / 2)).map { |i| row[i] }
      end
    end

With the ambiguous column names in the example, the value returned by execute is:
    [{&quot;name&quot;=&gt;&quot;Fido&quot;, 0=&gt;&quot;Bob&quot;, 1=&gt;&quot;Fido&quot;, 2=&gt;&quot;brown&quot;, &quot;color&quot;=&gt;&quot;brown&quot;}]

Due to the ambiguity, there is no &quot;name&quot;=&gt;&quot;Bob&quot; pair, so the number of columns is not row.size/2 as is assumed.

The following monkey patch seemed to fix the problem, but I have not tested it properly and it seems that the code could be more &quot;rubyish&quot;.
    module ActiveRecord
      module ConnectionAdapters
        class SQLiteAdapter
            def select_rows(sql, name = nil)
              rows = execute(sql, name)
              pp rows
              rows.map do |row|
                (0...(row.size / 2)).map { |i| row[i] }
              end
            end
        end
      end
    end


I have not tested the bug with other databases, but their code for select_rows looks totally different.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When select_rows is used on a SQLite database and the selected
columns include some with the same name in different tables, the
last of the columns selected (not necessarily the ambiguous ones)
will not appear in the result rows. The bug can be worked around by
giving unambiguous aliases to the columns selected. I was using
ruby 1.8.7 and rails 2.3.5.&lt;/p&gt;
&lt;p&gt;An example follows.&lt;/p&gt;
&lt;p&gt;config/schema.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActiveRecord::Schema.define(:version =&amp;gt; 20100503193703) do
  create_table &quot;dogs&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;name&quot;
    t.string   &quot;color&quot;
    t.integer  &quot;owner_id&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

  create_table &quot;people&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;name&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;app/models/dog.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Dog &amp;lt; ActiveRecord::Base
  belongs_to :person
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;app/models/person.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person &amp;lt; ActiveRecord::Base
  has_many :dog
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;db/seeds.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bob = Person.create(:name =&amp;gt; 'Bob')
Dog.create(:name =&amp;gt; 'Fido', :owner_id =&amp;gt; bob.id, :color =&amp;gt; 'brown')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;app/controllers/home_controller.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'pp'
class HomeController &amp;lt; ApplicationController
  def index
    @dog_show = ActiveRecord::Base::connection.select_rows 'SELECT people.name, dogs.name, dogs.color FROM people INNER JOIN dogs ON dogs.owner_id = people.id'
    pp @dog_show #=&amp;gt; [[&quot;Bob&quot;, &quot;Fido&quot;]]

    @dog_show = ActiveRecord::Base::connection.select_rows 'SELECT people.name, dogs.name as dogname, dogs.color FROM people INNER JOIN dogs ON dogs.owner_id = people.id'
    pp @dog_show #=&amp;gt; [[&quot;Bob&quot;, &quot;Fido&quot;, &quot;brown&quot;]]
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The bug appears to be due to the implementation of select_rows
in
activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def select_rows(sql, name = nil)
  execute(sql, name).map do |row|
    (0...(row.size / 2)).map { |i| row[i] }
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With the ambiguous column names in the example, the value
returned by execute is:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[{&quot;name&quot;=&amp;gt;&quot;Fido&quot;, 0=&amp;gt;&quot;Bob&quot;, 1=&amp;gt;&quot;Fido&quot;, 2=&amp;gt;&quot;brown&quot;, &quot;color&quot;=&amp;gt;&quot;brown&quot;}]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Due to the ambiguity, there is no &quot;name&quot;=&amp;gt;&quot;Bob&quot; pair, so the
number of columns is not row.size/2 as is assumed.&lt;/p&gt;
&lt;p&gt;The following monkey patch seemed to fix the problem, but I have
not tested it properly and it seems that the code could be more
&quot;rubyish&quot;.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;module ActiveRecord
  module ConnectionAdapters
    class SQLiteAdapter
        def select_rows(sql, name = nil)
          rows = execute(sql, name)
          pp rows
          rows.map do |row|
            (0...(row.size / 2)).map { |i| row[i] }
          end
        end
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I have not tested the bug with other databases, but their code
for select_rows looks totally different.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When select_rows is used on a SQLite database and the selected columns include some with the same name in different tables, the last of the columns selected (not necessarily the ambiguous ones) will not appear in the result rows. The bug can be worked around by giving unambiguous aliases to the columns selected. I was using ruby 1.8.7 and rails 2.3.5.

An example follows.

config/schema.rb
    ActiveRecord::Schema.define(:version =&gt; 20100503193703) do
      create_table &quot;dogs&quot;, :force =&gt; true do |t|
        t.string   &quot;name&quot;
        t.string   &quot;color&quot;
        t.integer  &quot;owner_id&quot;
        t.datetime &quot;created_at&quot;
        t.datetime &quot;updated_at&quot;
      end

      create_table &quot;people&quot;, :force =&gt; true do |t|
        t.string   &quot;name&quot;
        t.datetime &quot;created_at&quot;
        t.datetime &quot;updated_at&quot;
      end
    end

app/models/dog.rb
    class Dog &lt; ActiveRecord::Base
      belongs_to :person
    end

app/models/person.rb
    class Person &lt; ActiveRecord::Base
      has_many :dog
    end

db/seeds.rb
    bob = Person.create(:name =&gt; 'Bob')
    Dog.create(:name =&gt; 'Fido', :owner_id =&gt; bob.id, :color =&gt; 'brown')

app/controllers/home_controller.rb
    require 'pp'
    class HomeController &lt; ApplicationController
      def index
        @dog_show = ActiveRecord::Base::connection.select_rows 'SELECT people.name, dogs.name, dogs.color FROM people INNER JOIN dogs ON dogs.owner_id = people.id'
        pp @dog_show #=&gt; [[&quot;Bob&quot;, &quot;Fido&quot;]]

        @dog_show = ActiveRecord::Base::connection.select_rows 'SELECT people.name, dogs.name as dogname, dogs.color FROM people INNER JOIN dogs ON dogs.owner_id = people.id'
        pp @dog_show #=&gt; [[&quot;Bob&quot;, &quot;Fido&quot;, &quot;brown&quot;]]
      end
    end

The bug appears to be due to the implementation of select_rows in activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb

    def select_rows(sql, name = nil)
      execute(sql, name).map do |row|
        (0...(row.size / 2)).map { |i| row[i] }
      end
    end

With the ambiguous column names in the example, the value returned by execute is:
    [{&quot;name&quot;=&gt;&quot;Fido&quot;, 0=&gt;&quot;Bob&quot;, 1=&gt;&quot;Fido&quot;, 2=&gt;&quot;brown&quot;, &quot;color&quot;=&gt;&quot;brown&quot;}]

Due to the ambiguity, there is no &quot;name&quot;=&gt;&quot;Bob&quot; pair, so the number of columns is not row.size/2 as is assumed.

The following monkey patch seemed to fix the problem, but I have not tested it properly and it seems that the code could be more &quot;rubyish&quot;.
    module ActiveRecord
      module ConnectionAdapters
        class SQLiteAdapter
            def select_rows(sql, name = nil)
              rows = execute(sql, name)
              pp rows
              rows.map do |row|
                (0...(row.size / 2)).map { |i| row[i] }
              end
            end
        end
      end
    end


I have not tested the bug with other databases, but their code for select_rows looks totally different.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When select_rows is used on a SQLite database and the selected
columns include some with the same name in different tables, the
last of the columns selected (not necessarily the ambiguous ones)
will not appear in the result rows. The bug can be worked around by
giving unambiguous aliases to the columns selected. I was using
ruby 1.8.7 and rails 2.3.5.&lt;/p&gt;
&lt;p&gt;An example follows.&lt;/p&gt;
&lt;p&gt;config/schema.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActiveRecord::Schema.define(:version =&amp;gt; 20100503193703) do
  create_table &quot;dogs&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;name&quot;
    t.string   &quot;color&quot;
    t.integer  &quot;owner_id&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

  create_table &quot;people&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;name&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;app/models/dog.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Dog &amp;lt; ActiveRecord::Base
  belongs_to :person
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;app/models/person.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Person &amp;lt; ActiveRecord::Base
  has_many :dog
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;db/seeds.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bob = Person.create(:name =&amp;gt; 'Bob')
Dog.create(:name =&amp;gt; 'Fido', :owner_id =&amp;gt; bob.id, :color =&amp;gt; 'brown')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;app/controllers/home_controller.rb&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'pp'
class HomeController &amp;lt; ApplicationController
  def index
    @dog_show = ActiveRecord::Base::connection.select_rows 'SELECT people.name, dogs.name, dogs.color FROM people INNER JOIN dogs ON dogs.owner_id = people.id'
    pp @dog_show #=&amp;gt; [[&quot;Bob&quot;, &quot;Fido&quot;]]

    @dog_show = ActiveRecord::Base::connection.select_rows 'SELECT people.name, dogs.name as dogname, dogs.color FROM people INNER JOIN dogs ON dogs.owner_id = people.id'
    pp @dog_show #=&amp;gt; [[&quot;Bob&quot;, &quot;Fido&quot;, &quot;brown&quot;]]
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The bug appears to be due to the implementation of select_rows
in
activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def select_rows(sql, name = nil)
  execute(sql, name).map do |row|
    (0...(row.size / 2)).map { |i| row[i] }
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With the ambiguous column names in the example, the value
returned by execute is:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[{&quot;name&quot;=&amp;gt;&quot;Fido&quot;, 0=&amp;gt;&quot;Bob&quot;, 1=&amp;gt;&quot;Fido&quot;, 2=&amp;gt;&quot;brown&quot;, &quot;color&quot;=&amp;gt;&quot;brown&quot;}]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Due to the ambiguity, there is no &quot;name&quot;=&amp;gt;&quot;Bob&quot; pair, so the
number of columns is not row.size/2 as is assumed.&lt;/p&gt;
&lt;p&gt;The following monkey patch seemed to fix the problem, but I have
not tested it properly and it seems that the code could be more
&quot;rubyish&quot;.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;module ActiveRecord
  module ConnectionAdapters
    class SQLiteAdapter
        def select_rows(sql, name = nil)
          rows = execute(sql, name)
          pp rows
          rows.map do |row|
            (0...(row.size / 2)).map { |i| row[i] }
          end
        end
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I have not tested the bug with other databases, but their code
for select_rows looks totally different.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T01:06:06+01:00</created-at>
      <creator-id type="integer">97703</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4528</number>
      <permalink>sqliteadapterselect_rows-misses-columns-when-column-names-are-ambiguous</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>SQLiteAdapter::select_rows misses columns when column names are ambiguous</title>
      <updated-at type="datetime">2010-05-04T01:06:08+01:00</updated-at>
      <user-id type="integer">97703</user-id>
      <version type="integer">1</version>
      <user-name>Richard Bunch</user-name>
      <creator-name>Richard Bunch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4528</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have confirmed that it is indeed an issue with SQLite database. It works fine with MySQL.

Will be looking into the difference between how MySQL handles it and how SQLite handles the query.

I did my check on rails3 edge.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have confirmed that it is indeed an issue with SQLite
database. It works fine with MySQL.&lt;/p&gt;
&lt;p&gt;Will be looking into the difference between how MySQL handles it
and how SQLite handles the query.&lt;/p&gt;
&lt;p&gt;I did my check on rails3 edge.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T15:50:30+01:00</created-at>
      <creator-id type="integer">97703</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4528</number>
      <permalink>sqliteadapterselect_rows-misses-columns-when-column-names-are-ambiguous</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>rails3 sqlite</tag>
      <title>SQLiteAdapter::select_rows misses columns when column names are ambiguous</title>
      <updated-at type="datetime">2010-05-04T15:51:15+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Richard Bunch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4528</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:43:00+00:00</created-at>
      <creator-id type="integer">97703</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4528</number>
      <permalink>sqliteadapterselect_rows-misses-columns-when-column-names-are-ambiguous</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>rails3 sqlite</tag>
      <title>SQLiteAdapter::select_rows misses columns when column names are ambiguous</title>
      <updated-at type="datetime">2011-02-02T17:46:52+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Richard Bunch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4528</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:43:02+00:00</created-at>
      <creator-id type="integer">97703</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4528</number>
      <permalink>sqliteadapterselect_rows-misses-columns-when-column-names-are-ambiguous</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>rails3 sqlite</tag>
      <title>SQLiteAdapter::select_rows misses columns when column names are ambiguous</title>
      <updated-at type="datetime">2011-02-02T17:46:56+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Richard Bunch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4528</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have tested and this bug is still present with rails 3.0.3, ruby-1.9.2-p136, sqlite 3.7.5, Windows XP. Looking at the latest code on the git browser, it looks like the bug is still in there.

I notice my &quot;monkey patch&quot; is nothing but a copy of the original code with debug printing. I clearly copied the wrong code. It should be:
@@@
module ActiveRecord
  module ConnectionAdapters
    class SQLiteAdapter
      def select_rows(sql, name = nil)
        execute(sql, name).map do |row|
          new_row = []
          for i in (0...row.size)
            if row[i] then new_row &lt;&lt; row[i] else break end
          end
          new_row
        end
      end
    end

  end
end
@@@

I think making this change in the original sqlite_adapter.rb should solve the problem. I will try to make a patch, if I have time.

[state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have tested and this bug is still present with rails 3.0.3,
ruby-1.9.2-p136, sqlite 3.7.5, Windows XP. Looking at the latest
code on the git browser, it looks like the bug is still in
there.&lt;/p&gt;
&lt;p&gt;I notice my &quot;monkey patch&quot; is nothing but a copy of the original
code with debug printing. I clearly copied the wrong code. It
should be:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;module ActiveRecord
  module ConnectionAdapters&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&lt;code&gt;class SQLiteAdapter
  def select_rows(sql, name = nil)
    execute(sql, name).map do |row|
      new_row = []
      for i in (0...row.size)
        if row[i] then new_row &amp;amp;lt;&amp;amp;lt; row[i] else break end
      end
      new_row
    end
  end
end&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
  end
end
&lt;/pre&gt;
&lt;p&gt;I think making this change in the original sqlite_adapter.rb
should solve the problem. I will try to make a patch, if I have
time.&lt;/p&gt;
&lt;p&gt;[state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-06T21:34:47+00:00</created-at>
      <creator-id type="integer">97703</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: rails3 sqlite
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4528</number>
      <permalink>sqliteadapterselect_rows-misses-columns-when-column-names-are-ambiguous</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;bug sqlite&quot;</tag>
      <title>SQLiteAdapter::select_rows misses columns when column names are ambiguous</title>
      <updated-at type="datetime">2011-02-06T21:34:52+00:00</updated-at>
      <user-id type="integer">97703</user-id>
      <version type="integer">5</version>
      <user-name>Richard Bunch</user-name>
      <creator-name>Richard Bunch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4528</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-06T21:35:32+00:00</created-at>
      <creator-id type="integer">97703</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;bug sqlite\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4528</number>
      <permalink>sqliteadapterselect_rows-misses-columns-when-column-names-are-ambiguous</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;rails3 sqlite bug&quot;</tag>
      <title>SQLiteAdapter::select_rows misses columns when column names are ambiguous</title>
      <updated-at type="datetime">2011-02-06T21:35:36+00:00</updated-at>
      <user-id type="integer">97703</user-id>
      <version type="integer">6</version>
      <user-name>Richard Bunch</user-name>
      <creator-name>Richard Bunch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4528</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry, my script blocker messed up the tags.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry, my script blocker messed up the tags.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-06T21:38:52+00:00</created-at>
      <creator-id type="integer">97703</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;rails3 sqlite bug\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4528</number>
      <permalink>sqliteadapterselect_rows-misses-columns-when-column-names-are-ambiguous</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>rails3 rails3.0.3 sqlite_adapter</tag>
      <title>SQLiteAdapter::select_rows misses columns when column names are ambiguous</title>
      <updated-at type="datetime">2011-02-06T21:38:56+00:00</updated-at>
      <user-id type="integer">97703</user-id>
      <version type="integer">7</version>
      <user-name>Richard Bunch</user-name>
      <creator-name>Richard Bunch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4528</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-05-07T01:00:07+01:00</created-at>
      <creator-id type="integer">97703</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: rails3 rails3.0.3 sqlite_adapter
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4528</number>
      <permalink>sqliteadapterselect_rows-misses-columns-when-column-names-are-ambiguous</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>rails3 rails303 sqlite_adapter</tag>
      <title>SQLiteAdapter::select_rows misses columns when column names are ambiguous</title>
      <updated-at type="datetime">2011-05-07T01:00:24+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">8</version>
      <user-name>rails</user-name>
      <creator-name>Richard Bunch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4528</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-05-07T01:00:07+01:00</created-at>
      <creator-id type="integer">97703</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4528</number>
      <permalink>sqliteadapterselect_rows-misses-columns-when-column-names-are-ambiguous</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>rails3 rails303 sqlite_adapter</tag>
      <title>SQLiteAdapter::select_rows misses columns when column names are ambiguous</title>
      <updated-at type="datetime">2011-05-07T01:00:13+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">9</version>
      <user-name>rails</user-name>
      <creator-name>Richard Bunch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4528</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
