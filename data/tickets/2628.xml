<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-05-09T20:45:46+01:00</created-at>
  <creator-id type="integer">22608</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2628</number>
  <permalink>ruby-19-and-activesupport</permalink>
  <priority type="integer">1759</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>2-3-stable activesupport rails3 ruby1.9 ruby19</tag>
  <title>Ruby 1.9 and ActiveSupport</title>
  <updated-at type="datetime">2011-01-11T13:20:49+00:00</updated-at>
  <user-id type="integer">120472</user-id>
  <version type="integer">8</version>
  <user-name>pederbl (at jobstar)</user-name>
  <creator-name>Dimitrij Denissenko</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2628</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Hi!

I came across the following error in ActiveSupport (in combination with Ruby 1.9)

@@@ $ irb1.9 -r activesupport
irb(main):001:0&gt; &quot;\xAA&quot;.blank?
ArgumentError: invalid byte sequence in UTF-8
	from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `=~'
	from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `!~'
	from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `blank?'
	from (irb):1
	from /usr/local/bin/irb1.9:12:in `&lt;main&gt;'

@@@

Some Background: in my case, my application fails in ActionController::Response:

@@@ module ActionController # :nodoc:
  class Response &lt; Rack::Response

    def etag=(etag)      
      if etag.blank?
        headers.delete('ETag')
      else
        headers['ETag'] = %(&quot;#{Digest::MD5.hexdigest(ActiveSupport::Cache.expand_cache_key(etag))}&quot;)
      end
    end
  end
end
@@@

The generated etag contains &quot;\xAA&quot; and fails on etag.blank?

Any clue how to deal with that? Any idea for a workaround?</original-body>
  <latest-body>Hi!

I came across the following error in ActiveSupport (in combination with Ruby 1.9)

@@@ $ irb1.9 -r activesupport
irb(main):001:0&gt; &quot;\xAA&quot;.blank?
ArgumentError: invalid byte sequence in UTF-8
	from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `=~'
	from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `!~'
	from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `blank?'
	from (irb):1
	from /usr/local/bin/irb1.9:12:in `&lt;main&gt;'

@@@

Some Background: in my case, my application fails in ActionController::Response:

@@@ module ActionController # :nodoc:
  class Response &lt; Rack::Response

    def etag=(etag)      
      if etag.blank?
        headers.delete('ETag')
      else
        headers['ETag'] = %(&quot;#{Digest::MD5.hexdigest(ActiveSupport::Cache.expand_cache_key(etag))}&quot;)
      end
    end
  end
end
@@@

The generated etag contains &quot;\xAA&quot; and fails on etag.blank?

Any clue how to deal with that? Any idea for a workaround?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi!&lt;/p&gt;
&lt;p&gt;I came across the following error in ActiveSupport (in
combination with Ruby 1.9)&lt;/p&gt;
&lt;p&gt;@@@ $ irb1.9 -r activesupport irb(main):001:0&amp;gt; &quot;\xAA&quot;.blank?
ArgumentError: invalid byte sequence in UTF-8&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `=~'
from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `!~'
from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `blank?'
from (irb):1
from /usr/local/bin/irb1.9:12:in `&amp;lt;main&amp;gt;'
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;

Some Background: in my case, my application fails in ActionController::Response:

@@@ module ActionController # :nodoc:
  class Response &amp;lt; Rack::Response

    def etag=(etag)      
      if etag.blank?
        headers.delete('ETag')
      else
        headers['ETag'] = %(&amp;quot;#{Digest::MD5.hexdigest(ActiveSupport::Cache.expand_cache_key(etag))}&amp;quot;)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generated etag contains &quot;\xAA&quot; and fails on etag.blank?&lt;/p&gt;
&lt;p&gt;Any clue how to deal with that? Any idea for a workaround?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi!

I came across the following error in ActiveSupport (in combination with Ruby 1.9)

@@@ $ irb1.9 -r activesupport
irb(main):001:0&gt; &quot;\xAA&quot;.blank?
ArgumentError: invalid byte sequence in UTF-8
	from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `=~'
	from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `!~'
	from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `blank?'
	from (irb):1
	from /usr/local/bin/irb1.9:12:in `&lt;main&gt;'

@@@

Some Background: in my case, my application fails in ActionController::Response:

@@@ module ActionController # :nodoc:
  class Response &lt; Rack::Response

    def etag=(etag)      
      if etag.blank?
        headers.delete('ETag')
      else
        headers['ETag'] = %(&quot;#{Digest::MD5.hexdigest(ActiveSupport::Cache.expand_cache_key(etag))}&quot;)
      end
    end
  end
end
@@@

The generated etag contains &quot;\xAA&quot; and fails on etag.blank?

Any clue how to deal with that? Any idea for a workaround?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi!&lt;/p&gt;
&lt;p&gt;I came across the following error in ActiveSupport (in
combination with Ruby 1.9)&lt;/p&gt;
&lt;p&gt;@@@ $ irb1.9 -r activesupport irb(main):001:0&amp;gt; &quot;\xAA&quot;.blank?
ArgumentError: invalid byte sequence in UTF-8&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `=~'
from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `!~'
from /usr/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-2.3.2/lib/active_support/core_ext/blank.rb:50:in `blank?'
from (irb):1
from /usr/local/bin/irb1.9:12:in `&amp;lt;main&amp;gt;'
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;

Some Background: in my case, my application fails in ActionController::Response:

@@@ module ActionController # :nodoc:
  class Response &amp;lt; Rack::Response

    def etag=(etag)      
      if etag.blank?
        headers.delete('ETag')
      else
        headers['ETag'] = %(&amp;quot;#{Digest::MD5.hexdigest(ActiveSupport::Cache.expand_cache_key(etag))}&amp;quot;)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generated etag contains &quot;\xAA&quot; and fails on etag.blank?&lt;/p&gt;
&lt;p&gt;Any clue how to deal with that? Any idea for a workaround?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-09T20:45:46+01:00</created-at>
      <creator-id type="integer">22608</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2628</number>
      <permalink>ruby-19-and-activesupport</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activesupport ruby1.9 ruby19</tag>
      <title>Ruby 1.9 and ActiveSupport</title>
      <updated-at type="datetime">2009-05-09T20:45:47+01:00</updated-at>
      <user-id type="integer">22608</user-id>
      <version type="integer">1</version>
      <user-name>Dimitrij Denissenko</user-name>
      <creator-name>Dimitrij Denissenko</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2628</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Dimitrij,

This issue just bit me on Ruby 1.9.1 as well.  For me, it occurred on an action involving a CSV data export.

For the time being, I just wrapped the method body in a begin / rescue block and called headers.delete('ETag') if the test failed.  As the Etag is not critical to the functionality of the application, it seemed a decent (if hasty) response.

Please keep me posted if you've found a better workaround, or if this issue has been resolved.

Thanks,

C. Scott Andreas
Developer, Sunago.org</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Dimitrij,&lt;/p&gt;
&lt;p&gt;This issue just bit me on Ruby 1.9.1 as well. For me, it
occurred on an action involving a CSV data export.&lt;/p&gt;
&lt;p&gt;For the time being, I just wrapped the method body in a begin /
rescue block and called headers.delete('ETag') if the test failed.
As the Etag is not critical to the functionality of the
application, it seemed a decent (if hasty) response.&lt;/p&gt;
&lt;p&gt;Please keep me posted if you've found a better workaround, or if
this issue has been resolved.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;C. Scott Andreas&lt;br&gt;
Developer, Sunago.org&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-14T03:03:03+01:00</created-at>
      <creator-id type="integer">22608</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2628</number>
      <permalink>ruby-19-and-activesupport</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activesupport ruby1.9 ruby19</tag>
      <title>Ruby 1.9 and ActiveSupport</title>
      <updated-at type="datetime">2009-07-14T03:03:09+01:00</updated-at>
      <user-id type="integer">62665</user-id>
      <version type="integer">2</version>
      <user-name>Scott</user-name>
      <creator-name>Dimitrij Denissenko</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2628</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello,

I've taken some time to better understand this behavior, patch the underlying issue, and prepare a test demonstrating the bug and verifying the resolution.

In my case, the application was also failing in ActionController::Response.  The data rendered in my action contained a non-UTF8 character that, in the rendering process, is coerced to UTF-8 (likely from ASCII_8BIT) - this behavior is tested in part in actionpack/test/new_base/render_test.rb:

@@@ ruby
    def test_render_utf8_template_with_magic_comment
      with_external_encoding Encoding::ASCII_8BIT do
        result = @view.render(:file =&gt; &quot;test/utf8_magic.html.erb&quot;, :layouts =&gt; &quot;layouts/yield&quot;)
        assert_equal &quot;&#1056;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081; &#1090;&#1077;&#1082;&#1089;&#1090;\nUTF-8\nUTF-8\nUTF-8\n&quot;, result
        assert_equal Encoding::UTF_8, result.encoding
      end
    end
@@@

However, in the event that non-UTF8 data is coerced into UTF-8 and String.blank? is called on it, an ArgumentError is raised because the current implementation (a regular expression) throws an exception when it receives a string with invalid encoding.  So when the rendered response is evaluated to prepare etags in ActionController::Response, the application breaks by attempting to test for blank-ness on the document body.  

Here are steps to reproduce the bug, both in a Rails 2.3.2 app on Ruby 1.9.1 in a console, and in IRB by requiring ActiveSupport:  http://gist.github.com/146722

See the backtrace here: http://u.phoreo.com/lu.html

While it is not surprising that an error could result at some level when working with data of multiple and perhaps invalid character encodings, the point at which affected applications fail (in ActionController::Response) is a problem.  Should an error occur due to character encoding, the request should at least not die deep inside ActionController. 

More specifically, the current behavior of String.blank? does not conform to the statement atop active_support/core_ext/object/blank.rb, which states:  *An object is blank if it's false, empty, or a whitespace string.*  This method should not throw an exception when called upon a String object, regardless of encoding.  The modified test included in this patch demonstrates the failure by supplying a string, converting it to UTF-8, and attempting to call .blank?.

The behavior of the patched version in Ruby 1.9 is as follows:  if a string of invalid encoding is supplied and a regex test would result in fireworks, the method falls back to String.strip.size to test for blankness.

This seems to be a faithful implementation of the method that is compatible with both 1.8.x and 1.9.x while remaining minimally-invasive.

Apologies in advance for writing so much about such a simple bug and a one-line patch!  Its obscurity seemed to warrant a little explanation.

I'd love to hear your feedback, and of any plans to include this or a similar patch in a future release.

Regards,

Scott Andreas (@cscotta)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I've taken some time to better understand this behavior, patch
the underlying issue, and prepare a test demonstrating the bug and
verifying the resolution.&lt;/p&gt;
&lt;p&gt;In my case, the application was also failing in
ActionController::Response. The data rendered in my action
contained a non-UTF8 character that, in the rendering process, is
coerced to UTF-8 (likely from ASCII_8BIT) - this behavior is tested
in part in actionpack/test/new_base/render_test.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    def test_render_utf8_template_with_magic_comment
      with_external_encoding Encoding::ASCII_8BIT do
        result = @view.render(:file =&amp;gt; &quot;test/utf8_magic.html.erb&quot;, :layouts =&amp;gt; &quot;layouts/yield&quot;)
        assert_equal &quot;&amp;#1056;&amp;#1091;&amp;#1089;&amp;#1089;&amp;#1082;&amp;#1080;&amp;#1081; &amp;#1090;&amp;#1077;&amp;#1082;&amp;#1089;&amp;#1090;\nUTF-8\nUTF-8\nUTF-8\n&quot;, result
        assert_equal Encoding::UTF_8, result.encoding
      end
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, in the event that non-UTF8 data is coerced into UTF-8
and String.blank? is called on it, an ArgumentError is raised
because the current implementation (a regular expression) throws an
exception when it receives a string with invalid encoding. So when
the rendered response is evaluated to prepare etags in
ActionController::Response, the application breaks by attempting to
test for blank-ness on the document body.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Here are steps to reproduce the bug, both in a Rails 2.3.2 app
on Ruby 1.9.1 in a console, and in IRB by requiring ActiveSupport:
&lt;a href=
&quot;http://gist.github.com/146722&quot;&gt;http://gist.github.com/146722&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See the backtrace here: &lt;a href=
&quot;http://u.phoreo.com/lu.html&quot;&gt;http://u.phoreo.com/lu.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While it is not surprising that an error could result at some
level when working with data of multiple and perhaps invalid
character encodings, the point at which affected applications fail
(in ActionController::Response) is a problem. Should an error occur
due to character encoding, the request should at least not die deep
inside ActionController.&lt;/p&gt;
&lt;p&gt;More specifically, the current behavior of String.blank? does
not conform to the statement atop
active_support/core_ext/object/blank.rb, which states: &lt;em&gt;An
object is blank if it's false, empty, or a whitespace string.&lt;/em&gt;
This method should not throw an exception when called upon a String
object, regardless of encoding. The modified test included in this
patch demonstrates the failure by supplying a string, converting it
to UTF-8, and attempting to call .blank?.&lt;/p&gt;
&lt;p&gt;The behavior of the patched version in Ruby 1.9 is as follows:
if a string of invalid encoding is supplied and a regex test would
result in fireworks, the method falls back to String.strip.size to
test for blankness.&lt;/p&gt;
&lt;p&gt;This seems to be a faithful implementation of the method that is
compatible with both 1.8.x and 1.9.x while remaining
minimally-invasive.&lt;/p&gt;
&lt;p&gt;Apologies in advance for writing so much about such a simple bug
and a one-line patch! Its obscurity seemed to warrant a little
explanation.&lt;/p&gt;
&lt;p&gt;I'd love to hear your feedback, and of any plans to include this
or a similar patch in a future release.&lt;/p&gt;
&lt;p&gt;Regards,&lt;/p&gt;
&lt;p&gt;Scott Andreas (@cscotta)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-14T08:01:00+01:00</created-at>
      <creator-id type="integer">22608</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2628</number>
      <permalink>ruby-19-and-activesupport</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activesupport ruby1.9 ruby19</tag>
      <title>Ruby 1.9 and ActiveSupport</title>
      <updated-at type="datetime">2009-07-14T08:01:08+01:00</updated-at>
      <user-id type="integer">62665</user-id>
      <version type="integer">3</version>
      <user-name>Scott</user-name>
      <creator-name>Dimitrij Denissenko</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2628</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Got an S3 error when attempting to download the patch attached to this ticket.

I've posted it here in case this doesn't fix itself: http://u.phoreo.com/01.diff</body>
      <body-html>&lt;div&gt;&lt;p&gt;Got an S3 error when attempting to download the patch attached
to this ticket.&lt;/p&gt;
&lt;p&gt;I've posted it here in case this doesn't fix itself: &lt;a href=
&quot;http://u.phoreo.com/01.diff&quot;&gt;http://u.phoreo.com/01.diff&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-14T08:05:11+01:00</created-at>
      <creator-id type="integer">22608</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2628</number>
      <permalink>ruby-19-and-activesupport</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activesupport ruby1.9 ruby19</tag>
      <title>Ruby 1.9 and ActiveSupport</title>
      <updated-at type="datetime">2009-07-14T08:05:14+01:00</updated-at>
      <user-id type="integer">62665</user-id>
      <version type="integer">4</version>
      <user-name>Scott</user-name>
      <creator-name>Dimitrij Denissenko</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2628</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Jeremy's the 1.9 guy</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jeremy's the 1.9 guy&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-15T00:48:02+01:00</created-at>
      <creator-id type="integer">22608</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2628</number>
      <permalink>ruby-19-and-activesupport</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activesupport ruby1.9 ruby19</tag>
      <title>Ruby 1.9 and ActiveSupport</title>
      <updated-at type="datetime">2009-07-15T00:48:05+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">5</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Dimitrij Denissenko</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2628</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 to this patch.

An alternative might be to output a warning to the log file if a template contains invalid UTF-8 bytes, then use iconv to strip the offending bytes out. That way the template will always be UTF-8 and will hopefully avoid other similar issues like this blank?() one.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 to this patch.&lt;/p&gt;
&lt;p&gt;An alternative might be to output a warning to the log file if a
template contains invalid UTF-8 bytes, then use iconv to strip the
offending bytes out. That way the template will always be UTF-8 and
will hopefully avoid other similar issues like this blank?()
one.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-19T13:22:27+01:00</created-at>
      <creator-id type="integer">22608</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2628</number>
      <permalink>ruby-19-and-activesupport</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activesupport ruby1.9 ruby19</tag>
      <title>Ruby 1.9 and ActiveSupport</title>
      <updated-at type="datetime">2009-07-19T13:22:34+01:00</updated-at>
      <user-id type="integer">18344</user-id>
      <version type="integer">6</version>
      <user-name>James Healy</user-name>
      <creator-name>Dimitrij Denissenko</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2628</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Changing blank? masks the underlying error instead of fixing the root cause. Why do you have a string with invalid encoding?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Changing blank? masks the underlying error instead of fixing the
root cause. Why do you have a string with invalid encoding?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-02T04:32:14+01:00</created-at>
      <creator-id type="integer">22608</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2628</number>
      <permalink>ruby-19-and-activesupport</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2-3-stable activesupport ruby1.9 ruby19</tag>
      <title>Ruby 1.9 and ActiveSupport</title>
      <updated-at type="datetime">2009-08-02T04:32:18+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">7</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Dimitrij Denissenko</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2628</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Strings with invalid encoding is supported by Ruby. So it seems natural that calling blank? on strings with invalid encoding should be supported by Rails. 

There is another way to figure out if strings are invalid, e.g. valid_encoding?

What is the benefit of making blank? fail on strings with invalid encoding?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Strings with invalid encoding is supported by Ruby. So it seems
natural that calling blank? on strings with invalid encoding should
be supported by Rails.&lt;/p&gt;
&lt;p&gt;There is another way to figure out if strings are invalid, e.g.
valid_encoding?&lt;/p&gt;
&lt;p&gt;What is the benefit of making blank? fail on strings with
invalid encoding?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-11T13:20:28+00:00</created-at>
      <creator-id type="integer">22608</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:tag: 2-3-stable activesupport ruby1.9 ruby19
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2628</number>
      <permalink>ruby-19-and-activesupport</permalink>
      <priority type="integer">1759</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2-3-stable activesupport rails3 ruby1.9 ruby19</tag>
      <title>Ruby 1.9 and ActiveSupport</title>
      <updated-at type="datetime">2011-01-11T13:20:49+00:00</updated-at>
      <user-id type="integer">120472</user-id>
      <version type="integer">8</version>
      <user-name>pederbl (at jobstar)</user-name>
      <creator-name>Dimitrij Denissenko</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2628</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f10425836dfa3d6e11c399e49c23322f57dc99d5</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-07-14T08:01:01+01:00</created-at>
      <filename>string_blank_patch_for_19.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">220498</id>
      <size type="integer">1755</size>
      <uploader-id type="integer">62665</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/220498/string_blank_patch_for_19.diff</url>
    </attachment>
  </attachments>
</ticket>
