<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-27T17:39:53+01:00</created-at>
  <creator-id type="integer">40263</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">5170</number>
  <permalink>remove-check-for-uniq-from-method-add_record_to_target_with_callbacks</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>&quot;nested attributes&quot; &quot;rails 3&quot;</tag>
  <title>remove check for uniq from method add_record_to_target_with_callbacks</title>
  <updated-at type="datetime">2010-07-27T17:39:53+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">8</version>
  <user-name>Repository</user-name>
  <creator-name>Neeraj Singh</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5170</url>
  <milestone-title>3.x</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>This ticket is continuation of discussion from ticket #5053. Please read that ticket to get a background.

As part of fix for #5053 I created a personal branch where some discussion took place. Here I am going to copy paste some of the discussions that took place. It will not contain all the discussions, just some of them which seem relevant.

After the fix the method add_record_to_target_with_callbacks look like this

@@@ ruby
def add_record_to_target_with_callbacks(record)
   callback(:before_add, record)
   yield(record) if block_given?
   @target ||= [] unless loaded?
   index = @target.index(record)
   unless @reflection.options[:uniq] &amp;&amp; index
     if index
       @target[index] = record
     else
      @target &lt;&lt; record
     end
   end
   callback(:after_add, record)
   set_inverse_instance(record, @owner)
   record
 end
@@@

**James Le Curiot:**

I understand the nature of the fix and I suppose it doesn't really do any harm but it might seem a little confusing if you decide to enable the :uniq option and suddenly find that the updates don't take affect any more.

I mean if the record for a particular id was already saved and present in the collection. Thinking about it, you shouldn't even check the :uniq option at all here because what you are doing already forces it to be unique anyway - a record with a matching id will replace any existing entry instead of being appended. It should therefore just look like this.

          @target ||= [] unless loaded?
          if index = @target.index(record)
            @target[index] = record
          else
            @target &lt;&lt; record
          end
          callback(:after_add, record)

I just ran the tests with this and they still passed. But I reserve the right to be confused. :)

**Neeraj Singh:**

I am with you on that one. We (myself and Subba) agreed that there is no need for uniq check. However  our reasoning was different. 

Although we are talking about a piece of code in association_collection, we are here because we came from nested_attributes call. Also note that we are here because association is not loaded and @target has elements. That is possible only through user.comments.create kind of call. When we do create we can't have two records with same id.

At this point of time I am leaning towards committing this ticket. We can refactor and will remove uniq check later if there is strong desire for it.


**James Le Curiot:**

You have to ask yourself, what is :uniq actually for? Given that primary keys have to be unique and the foreign key only signifies the presence of a record in the collection, not how times it is present, the records would normally be unique anyway. This would only change when using unusual joins that return rows more than once. But that only relates to fetching the collection. I don't think it makes sense to allow duplicates when adding to it, even when not using :uniq, because when the collection is reloaded, the duplicates simply disappear. Am I missing something here?

I think the check should be removed now, otherwise it won't be possible to replace the records when using :uniq. I can't think of any reason why this shouldn't be allowed, except that it will change the existing behaviour - but we're doing that already and this is for a new version of Rails. :)</original-body>
  <latest-body>This ticket is continuation of discussion from ticket #5053. Please read that ticket to get a background.

As part of fix for #5053 I created a personal branch where some discussion took place. Here I am going to copy paste some of the discussions that took place. It will not contain all the discussions, just some of them which seem relevant.

After the fix the method add_record_to_target_with_callbacks look like this

@@@ ruby
def add_record_to_target_with_callbacks(record)
   callback(:before_add, record)
   yield(record) if block_given?
   @target ||= [] unless loaded?
   index = @target.index(record)
   unless @reflection.options[:uniq] &amp;&amp; index
     if index
       @target[index] = record
     else
      @target &lt;&lt; record
     end
   end
   callback(:after_add, record)
   set_inverse_instance(record, @owner)
   record
 end
@@@

**James Le Curiot:**

I understand the nature of the fix and I suppose it doesn't really do any harm but it might seem a little confusing if you decide to enable the :uniq option and suddenly find that the updates don't take affect any more.

I mean if the record for a particular id was already saved and present in the collection. Thinking about it, you shouldn't even check the :uniq option at all here because what you are doing already forces it to be unique anyway - a record with a matching id will replace any existing entry instead of being appended. It should therefore just look like this.

          @target ||= [] unless loaded?
          if index = @target.index(record)
            @target[index] = record
          else
            @target &lt;&lt; record
          end
          callback(:after_add, record)

I just ran the tests with this and they still passed. But I reserve the right to be confused. :)

**Neeraj Singh:**

I am with you on that one. We (myself and Subba) agreed that there is no need for uniq check. However  our reasoning was different. 

Although we are talking about a piece of code in association_collection, we are here because we came from nested_attributes call. Also note that we are here because association is not loaded and @target has elements. That is possible only through user.comments.create kind of call. When we do create we can't have two records with same id.

At this point of time I am leaning towards committing this ticket. We can refactor and will remove uniq check later if there is strong desire for it.


**James Le Curiot:**

You have to ask yourself, what is :uniq actually for? Given that primary keys have to be unique and the foreign key only signifies the presence of a record in the collection, not how times it is present, the records would normally be unique anyway. This would only change when using unusual joins that return rows more than once. But that only relates to fetching the collection. I don't think it makes sense to allow duplicates when adding to it, even when not using :uniq, because when the collection is reloaded, the duplicates simply disappear. Am I missing something here?

I think the check should be removed now, otherwise it won't be possible to replace the records when using :uniq. I can't think of any reason why this shouldn't be allowed, except that it will change the existing behaviour - but we're doing that already and this is for a new version of Rails. :)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This ticket is continuation of discussion from ticket &lt;a href=
&quot;/projects/8994/tickets/5053&quot; title=&quot;Ticket #5053&quot;&gt;#5053&lt;/a&gt;.
Please read that ticket to get a background.&lt;/p&gt;
&lt;p&gt;As part of fix for &lt;a href=&quot;/projects/8994/tickets/5053&quot; title=
&quot;Ticket #5053&quot;&gt;#5053&lt;/a&gt; I created a personal branch where some
discussion took place. Here I am going to copy paste some of the
discussions that took place. It will not contain all the
discussions, just some of them which seem relevant.&lt;/p&gt;
&lt;p&gt;After the fix the method add_record_to_target_with_callbacks
look like this&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def add_record_to_target_with_callbacks(record)
   callback(:before_add, record)
   yield(record) if block_given?
   @target ||= [] unless loaded?
   index = @target.index(record)
   unless @reflection.options[:uniq] &amp;amp;&amp;amp; index
     if index
       @target[index] = record
     else
      @target &amp;lt;&amp;lt; record
     end
   end
   callback(:after_add, record)
   set_inverse_instance(record, @owner)
   record
 end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;James Le Curiot:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I understand the nature of the fix and I suppose it doesn't
really do any harm but it might seem a little confusing if you
decide to enable the :uniq option and suddenly find that the
updates don't take affect any more.&lt;/p&gt;
&lt;p&gt;I mean if the record for a particular id was already saved and
present in the collection. Thinking about it, you shouldn't even
check the :uniq option at all here because what you are doing
already forces it to be unique anyway - a record with a matching id
will replace any existing entry instead of being appended. It
should therefore just look like this.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      @target ||= [] unless loaded?
      if index = @target.index(record)
        @target[index] = record
      else
        @target &amp;lt;&amp;lt; record
      end
      callback(:after_add, record)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I just ran the tests with this and they still passed. But I
reserve the right to be confused. :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neeraj Singh:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am with you on that one. We (myself and Subba) agreed that
there is no need for uniq check. However our reasoning was
different.&lt;/p&gt;
&lt;p&gt;Although we are talking about a piece of code in
association_collection, we are here because we came from
nested_attributes call. Also note that we are here because
association is not loaded and @target has elements. That is
possible only through user.comments.create kind of call. When we do
create we can't have two records with same id.&lt;/p&gt;
&lt;p&gt;At this point of time I am leaning towards committing this
ticket. We can refactor and will remove uniq check later if there
is strong desire for it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;James Le Curiot:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You have to ask yourself, what is :uniq actually for? Given that
primary keys have to be unique and the foreign key only signifies
the presence of a record in the collection, not how times it is
present, the records would normally be unique anyway. This would
only change when using unusual joins that return rows more than
once. But that only relates to fetching the collection. I don't
think it makes sense to allow duplicates when adding to it, even
when not using :uniq, because when the collection is reloaded, the
duplicates simply disappear. Am I missing something here?&lt;/p&gt;
&lt;p&gt;I think the check should be removed now, otherwise it won't be
possible to replace the records when using :uniq. I can't think of
any reason why this shouldn't be allowed, except that it will
change the existing behaviour - but we're doing that already and
this is for a new version of Rails. :)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40263</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This ticket is continuation of discussion from ticket #5053. Please read that ticket to get a background.

As part of fix for #5053 I created a personal branch where some discussion took place. Here I am going to copy paste some of the discussions that took place. It will not contain all the discussions, just some of them which seem relevant.

After the fix the method add_record_to_target_with_callbacks look like this

@@@ ruby
def add_record_to_target_with_callbacks(record)
   callback(:before_add, record)
   yield(record) if block_given?
   @target ||= [] unless loaded?
   index = @target.index(record)
   unless @reflection.options[:uniq] &amp;&amp; index
     if index
       @target[index] = record
     else
      @target &lt;&lt; record
     end
   end
   callback(:after_add, record)
   set_inverse_instance(record, @owner)
   record
 end
@@@

**James Le Curiot:**

I understand the nature of the fix and I suppose it doesn't really do any harm but it might seem a little confusing if you decide to enable the :uniq option and suddenly find that the updates don't take affect any more.

I mean if the record for a particular id was already saved and present in the collection. Thinking about it, you shouldn't even check the :uniq option at all here because what you are doing already forces it to be unique anyway - a record with a matching id will replace any existing entry instead of being appended. It should therefore just look like this.

          @target ||= [] unless loaded?
          if index = @target.index(record)
            @target[index] = record
          else
            @target &lt;&lt; record
          end
          callback(:after_add, record)

I just ran the tests with this and they still passed. But I reserve the right to be confused. :)

**Neeraj Singh:**

I am with you on that one. We (myself and Subba) agreed that there is no need for uniq check. However  our reasoning was different. 

Although we are talking about a piece of code in association_collection, we are here because we came from nested_attributes call. Also note that we are here because association is not loaded and @target has elements. That is possible only through user.comments.create kind of call. When we do create we can't have two records with same id.

At this point of time I am leaning towards committing this ticket. We can refactor and will remove uniq check later if there is strong desire for it.


**James Le Curiot:**

You have to ask yourself, what is :uniq actually for? Given that primary keys have to be unique and the foreign key only signifies the presence of a record in the collection, not how times it is present, the records would normally be unique anyway. This would only change when using unusual joins that return rows more than once. But that only relates to fetching the collection. I don't think it makes sense to allow duplicates when adding to it, even when not using :uniq, because when the collection is reloaded, the duplicates simply disappear. Am I missing something here?

I think the check should be removed now, otherwise it won't be possible to replace the records when using :uniq. I can't think of any reason why this shouldn't be allowed, except that it will change the existing behaviour - but we're doing that already and this is for a new version of Rails. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;This ticket is continuation of discussion from ticket &lt;a href=
&quot;/projects/8994/tickets/5053&quot; title=&quot;Ticket #5053&quot;&gt;#5053&lt;/a&gt;.
Please read that ticket to get a background.&lt;/p&gt;
&lt;p&gt;As part of fix for &lt;a href=&quot;/projects/8994/tickets/5053&quot; title=
&quot;Ticket #5053&quot;&gt;#5053&lt;/a&gt; I created a personal branch where some
discussion took place. Here I am going to copy paste some of the
discussions that took place. It will not contain all the
discussions, just some of them which seem relevant.&lt;/p&gt;
&lt;p&gt;After the fix the method add_record_to_target_with_callbacks
look like this&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def add_record_to_target_with_callbacks(record)
   callback(:before_add, record)
   yield(record) if block_given?
   @target ||= [] unless loaded?
   index = @target.index(record)
   unless @reflection.options[:uniq] &amp;amp;&amp;amp; index
     if index
       @target[index] = record
     else
      @target &amp;lt;&amp;lt; record
     end
   end
   callback(:after_add, record)
   set_inverse_instance(record, @owner)
   record
 end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;James Le Curiot:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I understand the nature of the fix and I suppose it doesn't
really do any harm but it might seem a little confusing if you
decide to enable the :uniq option and suddenly find that the
updates don't take affect any more.&lt;/p&gt;
&lt;p&gt;I mean if the record for a particular id was already saved and
present in the collection. Thinking about it, you shouldn't even
check the :uniq option at all here because what you are doing
already forces it to be unique anyway - a record with a matching id
will replace any existing entry instead of being appended. It
should therefore just look like this.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      @target ||= [] unless loaded?
      if index = @target.index(record)
        @target[index] = record
      else
        @target &amp;lt;&amp;lt; record
      end
      callback(:after_add, record)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I just ran the tests with this and they still passed. But I
reserve the right to be confused. :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neeraj Singh:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am with you on that one. We (myself and Subba) agreed that
there is no need for uniq check. However our reasoning was
different.&lt;/p&gt;
&lt;p&gt;Although we are talking about a piece of code in
association_collection, we are here because we came from
nested_attributes call. Also note that we are here because
association is not loaded and @target has elements. That is
possible only through user.comments.create kind of call. When we do
create we can't have two records with same id.&lt;/p&gt;
&lt;p&gt;At this point of time I am leaning towards committing this
ticket. We can refactor and will remove uniq check later if there
is strong desire for it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;James Le Curiot:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You have to ask yourself, what is :uniq actually for? Given that
primary keys have to be unique and the foreign key only signifies
the presence of a record in the collection, not how times it is
present, the records would normally be unique anyway. This would
only change when using unusual joins that return rows more than
once. But that only relates to fetching the collection. I don't
think it makes sense to allow duplicates when adding to it, even
when not using :uniq, because when the collection is reloaded, the
duplicates simply disappear. Am I missing something here?&lt;/p&gt;
&lt;p&gt;I think the check should be removed now, otherwise it won't be
possible to replace the records when using :uniq. I can't think of
any reason why this shouldn't be allowed, except that it will
change the existing behaviour - but we're doing that already and
this is for a new version of Rails. :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-21T14:44:08+01:00</created-at>
      <creator-id type="integer">40263</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5170</number>
      <permalink>remove-check-for-uniq-from-method-add_record_to_target_with_callbacks</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;nested attributes&quot; &quot;rails 3&quot;</tag>
      <title>remove check for uniq from method add_record_to_target_with_callbacks</title>
      <updated-at type="datetime">2010-07-21T14:44:10+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">1</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Neeraj Singh</creator-name>
      <assigned-user-name>Neeraj Singh</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5170</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40263</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Attached is code patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attached is code patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-22T20:22:28+01:00</created-at>
      <creator-id type="integer">40263</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5170</number>
      <permalink>remove-check-for-uniq-from-method-add_record_to_target_with_callbacks</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;nested attributes&quot; &quot;rails 3&quot;</tag>
      <title>remove check for uniq from method add_record_to_target_with_callbacks</title>
      <updated-at type="datetime">2010-07-22T20:22:30+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Neeraj Singh</creator-name>
      <assigned-user-name>Neeraj Singh</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5170</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40263</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Simple enough. Looks good. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Simple enough. Looks good. :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-22T20:25:22+01:00</created-at>
      <creator-id type="integer">40263</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5170</number>
      <permalink>remove-check-for-uniq-from-method-add_record_to_target_with_callbacks</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;nested attributes&quot; &quot;rails 3&quot;</tag>
      <title>remove check for uniq from method add_record_to_target_with_callbacks</title>
      <updated-at type="datetime">2010-07-22T20:25:24+01:00</updated-at>
      <user-id type="integer">10014</user-id>
      <version type="integer">3</version>
      <user-name>James Le Cuirot</user-name>
      <creator-name>Neeraj Singh</creator-name>
      <assigned-user-name>Neeraj Singh</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5170</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-22T20:43:23+01:00</created-at>
      <creator-id type="integer">40263</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 40263
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5170</number>
      <permalink>remove-check-for-uniq-from-method-add_record_to_target_with_callbacks</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;nested attributes&quot; &quot;rails 3&quot;</tag>
      <title>remove check for uniq from method add_record_to_target_with_callbacks</title>
      <updated-at type="datetime">2010-07-22T20:43:25+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">4</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Neeraj Singh</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5170</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>According to James thoughts, setting :uniq =&gt; true will remove the possibility to update records. Should we have a test then, asserting that records can be updated even with :uniq =&gt; true (which I consider to be the purpose of this patch)?</body>
      <body-html>&lt;div&gt;&lt;p&gt;According to James thoughts, setting :uniq =&amp;gt; true will
remove the possibility to update records. Should we have a test
then, asserting that records can be updated even with :uniq =&amp;gt;
true (which I consider to be the purpose of this patch)?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T16:18:14+01:00</created-at>
      <creator-id type="integer">40263</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5170</number>
      <permalink>remove-check-for-uniq-from-method-add_record_to_target_with_callbacks</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;nested attributes&quot; &quot;rails 3&quot;</tag>
      <title>remove check for uniq from method add_record_to_target_with_callbacks</title>
      <updated-at type="datetime">2010-07-26T16:18:15+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">5</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Neeraj Singh</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5170</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;blockquote&gt;This would only change when using unusual joins that return rows more than once.&lt;/blockquote&gt;

If we need to support that case then all the duplicate records @target should be updated and not just the first one.

I agree with James when he says
&lt;blockquote&gt;I don't think it makes sense to allow duplicates when adding to it, even when not using :uniq, because when the collection is reloaded, the duplicates simply disappear. &lt;/blockquote&gt;



As far as testing is concerned, I can force a failure case by artificially populating @target with two identical records but that is just a force scenario.

James do you have any idea on how to further strengthen existing tests to take care of this case.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;This would only change when using unusual joins that
return rows more than once.&lt;/blockquote&gt;
&lt;p&gt;If we need to support that case then all the duplicate records
@target should be updated and not just the first one.&lt;/p&gt;
&lt;p&gt;I agree with James when he says&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;I don't think it makes sense to allow duplicates when
adding to it, even when not using :uniq, because when the
collection is reloaded, the duplicates simply
disappear.&lt;/blockquote&gt;
&lt;p&gt;As far as testing is concerned, I can force a failure case by
artificially populating @target with two identical records but that
is just a force scenario.&lt;/p&gt;
&lt;p&gt;James do you have any idea on how to further strengthen existing
tests to take care of this case.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T16:35:37+01:00</created-at>
      <creator-id type="integer">40263</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5170</number>
      <permalink>remove-check-for-uniq-from-method-add_record_to_target_with_callbacks</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;nested attributes&quot; &quot;rails 3&quot;</tag>
      <title>remove check for uniq from method add_record_to_target_with_callbacks</title>
      <updated-at type="datetime">2010-07-26T16:35:42+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Neeraj Singh</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5170</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Sounds good, patch applied!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sounds good, patch applied!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T16:41:31+01:00</created-at>
      <creator-id type="integer">40263</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5170</number>
      <permalink>remove-check-for-uniq-from-method-add_record_to_target_with_callbacks</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;nested attributes&quot; &quot;rails 3&quot;</tag>
      <title>remove check for uniq from method add_record_to_target_with_callbacks</title>
      <updated-at type="datetime">2010-07-26T16:41:32+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">7</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Neeraj Singh</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5170</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [a44652baed1d26a4f63380c406e05f7a2ddd4a12]) No need to check for :uniq

[#5170 state:resolved]

Signed-off-by: Jos&#233; Valim &lt;jose.valim@gmail.com&gt;
http://github.com/rails/rails/commit/a44652baed1d26a4f63380c406e05f7a2ddd4a12</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/a44652baed1d26a4f63380c406e05f7a2ddd4a12&quot;
title=
&quot;Changeset [a44652baed1d26a4f63380c406e05f7a2ddd4a12]&quot;&gt;[a44652baed1d26a4f63380c406e05f7a2ddd4a12]&lt;/a&gt;)
No need to check for :uniq&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/5170&quot; title=
&quot;Ticket #5170&quot;&gt;#5170&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jos&amp;eacute; Valim &lt;a&gt;jose.valim@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/a44652baed1d26a4f63380c406e05f7a2ddd4a12&quot;&gt;
http://github.com/rails/rails/commit/a44652baed1d26a4f63380c406e05f...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-26T16:50:17+01:00</created-at>
      <creator-id type="integer">40263</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5170</number>
      <permalink>remove-check-for-uniq-from-method-add_record_to_target_with_callbacks</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;nested attributes&quot; &quot;rails 3&quot;</tag>
      <title>remove check for uniq from method add_record_to_target_with_callbacks</title>
      <updated-at type="datetime">2010-07-26T16:50:20+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>Neeraj Singh</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5170</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Cheap balenciaga purses, &lt;a href='http://www.poboshop.com'&gt;balenciaga handbags&lt;/a&gt;, balenciaga wallets onsale, 
Luxuy handbags, purses, high quality at low price at poboshop.com.
&lt;a href='http://www.balenciagaonsale.com'&gt;balenciaga bags&lt;/a&gt;

The most cool online shoes shop where you can find the most fashion designers shoes, include
&lt;a href='http://www.fashionshoesmart.com'&gt;Manolo Blahnik Shoes&lt;/a&gt;, &lt;a href='http://www.fashionshoesmart.com'&gt;Jimmy Choo Shoes&lt;/a&gt;, Christian Louboutin shoes and more. 
we offer high quality highheels at low price.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Cheap balenciaga purses, &lt;a href=
&quot;http://www.poboshop.com&quot;&gt;balenciaga handbags&lt;/a&gt;, balenciaga
wallets onsale,&lt;br&gt;
Luxuy handbags, purses, high quality at low price at
poboshop.com.&lt;br&gt;
&lt;a href=&quot;http://www.balenciagaonsale.com&quot;&gt;balenciaga bags&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The most cool online shoes shop where you can find the most
fashion designers shoes, include&lt;br&gt;
&lt;a href=&quot;http://www.fashionshoesmart.com&quot;&gt;Manolo Blahnik Shoes&lt;/a&gt;,
&lt;a href=&quot;http://www.fashionshoesmart.com&quot;&gt;Jimmy Choo Shoes&lt;/a&gt;,
Christian Louboutin shoes and more.&lt;br&gt;
we offer high quality highheels at low price.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-27T15:16:11+01:00</created-at>
      <creator-id type="integer">40263</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5170</number>
      <permalink>remove-check-for-uniq-from-method-add_record_to_target_with_callbacks</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;nested attributes&quot; &quot;rails 3&quot;</tag>
      <title>remove check for uniq from method add_record_to_target_with_callbacks</title>
      <updated-at type="datetime">2010-07-27T17:39:53+01:00</updated-at>
      <user-id type="integer">109040</user-id>
      <version type="integer">9</version>
      <user-name>matin</user-name>
      <creator-name>Neeraj Singh</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5170</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2405a05e69b0ba8387dbdaf3aeef3ae9c9d8c42e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-22T20:22:28+01:00</created-at>
      <filename>5170_fix_for_edge.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">599739</id>
      <size type="integer">1284</size>
      <uploader-id type="integer">40263</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/599739/5170_fix_for_edge.diff</url>
    </attachment>
  </attachments>
</ticket>
