<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-20T17:12:55+01:00</created-at>
  <creator-id type="integer">60599</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2822</number>
  <permalink>relationships-defined-on-one-side</permalink>
  <priority type="integer">1917</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Relationships Defined on One Side</title>
  <updated-at type="datetime">2010-04-16T03:01:42+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">3</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Alex</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2822</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I'm not sure where to put feature requests, but I think it would be neat if relationships between models could be defined in only one of the models.

Strange as it may seem, it would be nice to decrease the coupling between models, so that say for example, User models could exist, without requiring Profile models.  But that if added, Profiles can &quot;enhance&quot; Users.

The difficulty obviously being that all models would have to be inspected, even if you're only using one.

Either way, it was a thought I had.</original-body>
  <latest-body>I'm not sure where to put feature requests, but I think it would be neat if relationships between models could be defined in only one of the models.

Strange as it may seem, it would be nice to decrease the coupling between models, so that say for example, User models could exist, without requiring Profile models.  But that if added, Profiles can &quot;enhance&quot; Users.

The difficulty obviously being that all models would have to be inspected, even if you're only using one.

Either way, it was a thought I had.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm not sure where to put feature requests, but I think it would
be neat if relationships between models could be defined in only
one of the models.&lt;/p&gt;
&lt;p&gt;Strange as it may seem, it would be nice to decrease the
coupling between models, so that say for example, User models could
exist, without requiring Profile models. But that if added,
Profiles can &quot;enhance&quot; Users.&lt;/p&gt;
&lt;p&gt;The difficulty obviously being that all models would have to be
inspected, even if you're only using one.&lt;/p&gt;
&lt;p&gt;Either way, it was a thought I had.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm not sure where to put feature requests, but I think it would be neat if relationships between models could be defined in only one of the models.

Strange as it may seem, it would be nice to decrease the coupling between models, so that say for example, User models could exist, without requiring Profile models.  But that if added, Profiles can &quot;enhance&quot; Users.

The difficulty obviously being that all models would have to be inspected, even if you're only using one.

Either way, it was a thought I had.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not sure where to put feature requests, but I think it would
be neat if relationships between models could be defined in only
one of the models.&lt;/p&gt;
&lt;p&gt;Strange as it may seem, it would be nice to decrease the
coupling between models, so that say for example, User models could
exist, without requiring Profile models. But that if added,
Profiles can &quot;enhance&quot; Users.&lt;/p&gt;
&lt;p&gt;The difficulty obviously being that all models would have to be
inspected, even if you're only using one.&lt;/p&gt;
&lt;p&gt;Either way, it was a thought I had.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-20T17:12:55+01:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2822</number>
      <permalink>relationships-defined-on-one-side</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Relationships Defined on One Side</title>
      <updated-at type="datetime">2009-06-20T17:13:01+01:00</updated-at>
      <user-id type="integer">60599</user-id>
      <version type="integer">1</version>
      <user-name>Alex</user-name>
      <creator-name>Alex</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2822</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This would probably be a great deal of work, and likely drastically increase startup time as all models would have to be reflected over to determine associations. I agree it would be nice, however by opening a model you would not be aware of the associations it contained as they might be on the opposite side. My vote is for readability. 

can probably be marked as wontfix until a patch is provided.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This would probably be a great deal of work, and likely
drastically increase startup time as all models would have to be
reflected over to determine associations. I agree it would be nice,
however by opening a model you would not be aware of the
associations it contained as they might be on the opposite side. My
vote is for readability.&lt;/p&gt;
&lt;p&gt;can probably be marked as wontfix until a patch is provided.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-16T01:40:01+01:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2822</number>
      <permalink>relationships-defined-on-one-side</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Relationships Defined on One Side</title>
      <updated-at type="datetime">2010-04-16T01:40:04+01:00</updated-at>
      <user-id type="integer">65576</user-id>
      <version type="integer">2</version>
      <user-name>Steve St. Martin</user-name>
      <creator-name>Alex</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2822</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I agree with Steve.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree with Steve.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-16T03:01:35+01:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2822</number>
      <permalink>relationships-defined-on-one-side</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Relationships Defined on One Side</title>
      <updated-at type="datetime">2010-04-16T03:01:42+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">3</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Alex</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2822</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
