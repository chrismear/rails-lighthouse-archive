From bba5fa8e4bf87b2fc99dd6804b10a3b6c71547b8 Mon Sep 17 00:00:00 2001
From: Hongli Lai (Phusion) <hongli@phusion.nl>
Date: Tue, 11 Aug 2009 13:39:48 +0200
Subject: [PATCH] Fix reloading of metal pieces: do not hold references to old metal classes.

---
 actionpack/lib/action_controller/dispatcher.rb |   15 ++++++++++++++-
 actionpack/test/controller/dispatcher_test.rb  |   19 +++++++++++++++++++
 2 files changed, 33 insertions(+), 1 deletions(-)

diff --git a/actionpack/lib/action_controller/dispatcher.rb b/actionpack/lib/action_controller/dispatcher.rb
index 07931e4..aca5cfd 100644
--- a/actionpack/lib/action_controller/dispatcher.rb
+++ b/actionpack/lib/action_controller/dispatcher.rb
@@ -2,8 +2,11 @@ module ActionController
   # Dispatches requests to the appropriate controller and takes care of
   # reloading the app after each request when Dependencies.load? is true.
   class Dispatcher
+    @@cache_classes = false
+    
     class << self
       def define_dispatcher_callbacks(cache_classes)
+        @@cache_classes = cache_classes
         unless cache_classes
           unless self.middleware.include?(Reloader)
             self.middleware.insert_after(Failsafe, Reloader)
@@ -79,7 +82,7 @@ module ActionController
     # DEPRECATE: Remove arguments, since they are only used by CGI
     def initialize(output = $stdout, request = nil, response = nil)
       @output = output
-      @app = @@middleware.build(lambda { |env| self.dup._call(env) })
+      build_middleware_stack if @@cache_classes
     end
 
     def dispatch
@@ -103,6 +106,11 @@ module ActionController
     end
 
     def call(env)
+      # When class reloading is turned on, we will want to rebuild the
+      # middleware stack every time we process a request. If we don't
+      # rebuild the middleware stack, then the stack may contain references
+      # to old classes metal classes, which will b0rk class reloading.
+      build_middleware_stack unless @@cache_classes
       @app.call(env)
     end
 
@@ -114,5 +122,10 @@ module ActionController
     def flush_logger
       Base.logger.flush
     end
+    
+    private
+      def build_middleware_stack
+        @app = @@middleware.build(lambda { |env| self.dup._call(env) })
+      end
   end
 end
diff --git a/actionpack/test/controller/dispatcher_test.rb b/actionpack/test/controller/dispatcher_test.rb
index 3aa5bf9..518015e 100644
--- a/actionpack/test/controller/dispatcher_test.rb
+++ b/actionpack/test/controller/dispatcher_test.rb
@@ -40,6 +40,25 @@ class DispatcherTest < Test::Unit::TestCase
 
     dispatch
   end
+  
+  def test_builds_middleware_stack_only_during_initialization_if_not_in_loading_mode
+    Dispatcher.define_dispatcher_callbacks(true)
+    dispatcher = Dispatcher.new
+    assert_not_nil dispatcher.instance_variable_get(:"@app")
+    dispatcher.instance_variable_set(:"@app", lambda {})
+    dispatcher.expects(:build_middleware_stack).never
+    dispatcher.call(nil)
+    dispatcher.call(nil)
+  end
+  
+  def test_rebuilds_middleware_stack_on_every_request_if_in_loading_mode
+    Dispatcher.define_dispatcher_callbacks(false)
+    dispatcher = Dispatcher.new
+    dispatcher.instance_variable_set(:"@app", lambda {})
+    dispatcher.expects(:build_middleware_stack).twice
+    dispatcher.call(nil)
+    dispatcher.call(nil)
+  end
 
   # Stub out dispatch error logger
   class << Dispatcher
-- 
1.6.0.5

