<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-09T09:29:37+00:00</created-at>
  <creator-id type="integer">73543</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6137</number>
  <permalink>routing-polymorphicsti-resources-seems-broken</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>polymorphic_url resources routing sti</tag>
  <title>routing polymorphic/sti resources seems broken</title>
  <updated-at type="datetime">2010-12-13T12:58:42+00:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">2</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>coffeeaddict_nl</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6137</url>
  <priority-name>Low</priority-name>
  <original-body>Hi,

I have an Order class which is the root of 2 other STI classes

@@@ ruby
class VirtualOrder &lt; Order; end

class ConcreteOrder &lt; Order; end
@@@

I also have a single OrdersController and want my Orders, VirtualOrders and ConcreteOrders to be handled by that controller. This is something that worked in Rails-2.x.x using old style routing like this:

@@@ ruby
  map.resources :orders, :member =&gt; { :cancel, :return }
  map.resources :virtual_orders,  :as =&gt; :orders
  map.resources :concrete_orders, :as =&gt; :orders
@@@

This allowed my to do a:
@@@ ruby
  link_to &quot;here&quot;, @polymorpic_order
@@@

Which is - imho - expected behaviour.

Now I am in the middle of migrating my project to Rails3 and my resources look like this:

@@@ ruby
  resources :orders do
    member do
      get :return, :cancel
    end
  end
  
  resources :virtual_orders,  :as =&gt; &quot;orders&quot;
  resources :concrete_orders, :as =&gt; &quot;orders&quot;
@@@

I fully expected to still be feeding duck-typed objects into link_to and get the link to work. Now that still is true, but;
@@@ ruby
  undefined method `concrete_order_path` for #&lt;#&lt;Class:0xe265be8&gt;:0xe25bae4&gt;

@@@

get's raised

Obviously making a helper for that fixes my problem real easily but that would only be KISS, not DRY (and I don't like wet kisses... ;-&gt;)

And now, to get down to it, is this a bug? Or was it a bug in Rails2?</original-body>
  <latest-body>Hi,

I have an Order class which is the root of 2 other STI classes

@@@ ruby
class VirtualOrder &lt; Order; end

class ConcreteOrder &lt; Order; end
@@@

I also have a single OrdersController and want my Orders, VirtualOrders and ConcreteOrders to be handled by that controller. This is something that worked in Rails-2.x.x using old style routing like this:

@@@ ruby
  map.resources :orders, :member =&gt; { :cancel, :return }
  map.resources :virtual_orders,  :as =&gt; :orders
  map.resources :concrete_orders, :as =&gt; :orders
@@@

This allowed my to do a:
@@@ ruby
  link_to &quot;here&quot;, @polymorpic_order
@@@

Which is - imho - expected behaviour.

Now I am in the middle of migrating my project to Rails3 and my resources look like this:

@@@ ruby
  resources :orders do
    member do
      get :return, :cancel
    end
  end
  
  resources :virtual_orders,  :as =&gt; &quot;orders&quot;
  resources :concrete_orders, :as =&gt; &quot;orders&quot;
@@@

I fully expected to still be feeding duck-typed objects into link_to and get the link to work. Now that still is true, but;
@@@ ruby
  undefined method `concrete_order_path` for #&lt;#&lt;Class:0xe265be8&gt;:0xe25bae4&gt;

@@@

get's raised

Obviously making a helper for that fixes my problem real easily but that would only be KISS, not DRY (and I don't like wet kisses... ;-&gt;)

And now, to get down to it, is this a bug? Or was it a bug in Rails2?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I have an Order class which is the root of 2 other STI
classes&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class VirtualOrder &amp;lt; Order; end

class ConcreteOrder &amp;lt; Order; end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I also have a single OrdersController and want my Orders,
VirtualOrders and ConcreteOrders to be handled by that controller.
This is something that worked in Rails-2.x.x using old style
routing like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  map.resources :orders, :member =&amp;gt; { :cancel, :return }
  map.resources :virtual_orders,  :as =&amp;gt; :orders
  map.resources :concrete_orders, :as =&amp;gt; :orders&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This allowed my to do a:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  link_to &quot;here&quot;, @polymorpic_order&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which is - imho - expected behaviour.&lt;/p&gt;
&lt;p&gt;Now I am in the middle of migrating my project to Rails3 and my
resources look like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  resources :orders do
    member do
      get :return, :cancel
    end
  end
  
  resources :virtual_orders,  :as =&amp;gt; &quot;orders&quot;
  resources :concrete_orders, :as =&amp;gt; &quot;orders&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I fully expected to still be feeding duck-typed objects into
link_to and get the link to work. Now that still is true,
but;&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  undefined method &lt;/code&gt;concrete_order_path for #&amp;lt;#&amp;lt;Class:0xe265be8&amp;gt;:0xe25bae4&amp;gt;
&lt;/pre&gt;
&lt;p&gt;get's raised&lt;/p&gt;
&lt;p&gt;Obviously making a helper for that fixes my problem real easily
but that would only be KISS, not DRY (and I don't like wet
kisses... ;-&amp;gt;)&lt;/p&gt;
&lt;p&gt;And now, to get down to it, is this a bug? Or was it a bug in
Rails2?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

I have an Order class which is the root of 2 other STI classes

@@@ ruby
class VirtualOrder &lt; Order; end

class ConcreteOrder &lt; Order; end
@@@

I also have a single OrdersController and want my Orders, VirtualOrders and ConcreteOrders to be handled by that controller. This is something that worked in Rails-2.x.x using old style routing like this:

@@@ ruby
  map.resources :orders, :member =&gt; { :cancel, :return }
  map.resources :virtual_orders,  :as =&gt; :orders
  map.resources :concrete_orders, :as =&gt; :orders
@@@

This allowed my to do a:
@@@ ruby
  link_to &quot;here&quot;, @polymorpic_order
@@@

Which is - imho - expected behaviour.

Now I am in the middle of migrating my project to Rails3 and my resources look like this:

@@@ ruby
  resources :orders do
    member do
      get :return, :cancel
    end
  end
  
  resources :virtual_orders,  :as =&gt; &quot;orders&quot;
  resources :concrete_orders, :as =&gt; &quot;orders&quot;
@@@

I fully expected to still be feeding duck-typed objects into link_to and get the link to work. Now that still is true, but;
@@@ ruby
  undefined method `concrete_order_path` for #&lt;#&lt;Class:0xe265be8&gt;:0xe25bae4&gt;

@@@

get's raised

Obviously making a helper for that fixes my problem real easily but that would only be KISS, not DRY (and I don't like wet kisses... ;-&gt;)

And now, to get down to it, is this a bug? Or was it a bug in Rails2?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I have an Order class which is the root of 2 other STI
classes&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class VirtualOrder &amp;lt; Order; end

class ConcreteOrder &amp;lt; Order; end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I also have a single OrdersController and want my Orders,
VirtualOrders and ConcreteOrders to be handled by that controller.
This is something that worked in Rails-2.x.x using old style
routing like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  map.resources :orders, :member =&amp;gt; { :cancel, :return }
  map.resources :virtual_orders,  :as =&amp;gt; :orders
  map.resources :concrete_orders, :as =&amp;gt; :orders&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This allowed my to do a:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  link_to &quot;here&quot;, @polymorpic_order&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which is - imho - expected behaviour.&lt;/p&gt;
&lt;p&gt;Now I am in the middle of migrating my project to Rails3 and my
resources look like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  resources :orders do
    member do
      get :return, :cancel
    end
  end
  
  resources :virtual_orders,  :as =&amp;gt; &quot;orders&quot;
  resources :concrete_orders, :as =&amp;gt; &quot;orders&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I fully expected to still be feeding duck-typed objects into
link_to and get the link to work. Now that still is true,
but;&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  undefined method &lt;/code&gt;concrete_order_path for #&amp;lt;#&amp;lt;Class:0xe265be8&amp;gt;:0xe25bae4&amp;gt;
&lt;/pre&gt;
&lt;p&gt;get's raised&lt;/p&gt;
&lt;p&gt;Obviously making a helper for that fixes my problem real easily
but that would only be KISS, not DRY (and I don't like wet
kisses... ;-&amp;gt;)&lt;/p&gt;
&lt;p&gt;And now, to get down to it, is this a bug? Or was it a bug in
Rails2?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-09T09:29:37+00:00</created-at>
      <creator-id type="integer">73543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6137</number>
      <permalink>routing-polymorphicsti-resources-seems-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>polymorphic_url resources routing sti</tag>
      <title>routing polymorphic/sti resources seems broken</title>
      <updated-at type="datetime">2010-12-09T09:29:41+00:00</updated-at>
      <user-id type="integer">73543</user-id>
      <version type="integer">1</version>
      <user-name>coffeeaddict_nl</user-name>
      <creator-name>coffeeaddict_nl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6137</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You should use `:controller` for this instead of `:as`.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You should use &lt;code&gt;:controller&lt;/code&gt; for this instead of
&lt;code&gt;:as&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-13T12:58:34+00:00</created-at>
      <creator-id type="integer">73543</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6137</number>
      <permalink>routing-polymorphicsti-resources-seems-broken</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>polymorphic_url resources routing sti</tag>
      <title>routing polymorphic/sti resources seems broken</title>
      <updated-at type="datetime">2010-12-13T12:58:42+00:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">2</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>coffeeaddict_nl</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6137</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
