<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-19T23:30:57+01:00</created-at>
  <creator-id type="integer">18096</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">863</number>
  <permalink>activerecord-base-refactoring</permalink>
  <priority type="integer">319</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord refactoring</tag>
  <title>ActiveRecord::Base refactoring</title>
  <updated-at type="datetime">2008-08-20T00:48:26+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Clemens Kofler</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/863</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>While checking out the terrain for another bigger fix, I stumbled across a little inconsistency in AR::Base.

In the SQL builder methods, add_joins!, add_limit! and add_lock! currently take the full options hash whereas their siblings, add_conditions!, add_order! and add_group! take only their relevant attribute. While I see why add_limit! needs to do that (it may take both, :limit and :offset), add_lock! and add_joins! only use their respective options and no other one.

I therefore propose the attached patch to always (and therefore consistently) pass in the full options hash. Although it's only an internally used, private method I think that consistency is still important.

All existing tests pass (apart from the two tests that seem to be failing anyways in the current Edge).</original-body>
  <latest-body>While checking out the terrain for another bigger fix, I stumbled across a little inconsistency in AR::Base.

In the SQL builder methods, add_joins!, add_limit! and add_lock! currently take the full options hash whereas their siblings, add_conditions!, add_order! and add_group! take only their relevant attribute. While I see why add_limit! needs to do that (it may take both, :limit and :offset), add_lock! and add_joins! only use their respective options and no other one.

I therefore propose the attached patch to always (and therefore consistently) pass in the full options hash. Although it's only an internally used, private method I think that consistency is still important.

All existing tests pass (apart from the two tests that seem to be failing anyways in the current Edge).</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;While checking out the terrain for another bigger fix, I stumbled across a little inconsistency in AR::Base.&lt;/p&gt;

&lt;p&gt;In the SQL builder methods, add_joins!, add_limit! and add_lock! currently take the full options hash whereas their siblings, add_conditions!, add_order! and add_group! take only their relevant attribute. While I see why add_limit! needs to do that (it may take both, :limit and :offset), add_lock! and add_joins! only use their respective options and no other one.&lt;/p&gt;

&lt;p&gt;I therefore propose the attached patch to always (and therefore consistently) pass in the full options hash. Although it's only an internally used, private method I think that consistency is still important.&lt;/p&gt;

&lt;p&gt;All existing tests pass (apart from the two tests that seem to be failing anyways in the current Edge).&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>While checking out the terrain for another bigger fix, I stumbled across a little inconsistency in AR::Base.

In the SQL builder methods, add_joins!, add_limit! and add_lock! currently take the full options hash whereas their siblings, add_conditions!, add_order! and add_group! take only their relevant attribute. While I see why add_limit! needs to do that (it may take both, :limit and :offset), add_lock! and add_joins! only use their respective options and no other one.

I therefore propose the attached patch to always (and therefore consistently) pass in the full options hash. Although it's only an internally used, private method I think that consistency is still important.

All existing tests pass (apart from the two tests that seem to be failing anyways in the current Edge).</body>
      <body-html>&lt;div&gt;&lt;p&gt;While checking out the terrain for another bigger fix, I stumbled across a little inconsistency in AR::Base.&lt;/p&gt;

&lt;p&gt;In the SQL builder methods, add_joins!, add_limit! and add_lock! currently take the full options hash whereas their siblings, add_conditions!, add_order! and add_group! take only their relevant attribute. While I see why add_limit! needs to do that (it may take both, :limit and :offset), add_lock! and add_joins! only use their respective options and no other one.&lt;/p&gt;

&lt;p&gt;I therefore propose the attached patch to always (and therefore consistently) pass in the full options hash. Although it's only an internally used, private method I think that consistency is still important.&lt;/p&gt;

&lt;p&gt;All existing tests pass (apart from the two tests that seem to be failing anyways in the current Edge).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-19T23:30:57+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">863</number>
      <permalink>activerecord-base-refactoring</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord refactoring</tag>
      <title>ActiveRecord::Base refactoring</title>
      <updated-at type="datetime">2008-08-19T23:30:57+01:00</updated-at>
      <user-id type="integer">18096</user-id>
      <version type="integer">1</version>
      <user-name>Clemens Kofler</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/863</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Don't really see any benefits of this. Maybe this could be done whenever those methods need to access other option values.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Don't really see any benefits of this. Maybe this could be done whenever those methods need to access other option values.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-20T00:48:26+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">863</number>
      <permalink>activerecord-base-refactoring</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord refactoring</tag>
      <title>ActiveRecord::Base refactoring</title>
      <updated-at type="datetime">2008-08-20T00:48:26+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/863</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>1824a74eca2ace77f8241ea0a739f2d9fde35354</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-19T23:30:57+01:00</created-at>
      <filename>activerecord_base_cleanup.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">40271</id>
      <size type="integer">6616</size>
      <uploader-id type="integer">18096</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/40271/activerecord_base_cleanup.diff</url>
    </attachment>
  </attachments>
</ticket>
