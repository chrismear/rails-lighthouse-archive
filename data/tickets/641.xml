<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-17T12:12:52+01:00</created-at>
  <creator-id type="integer">18096</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">641</number>
  <permalink>formhelper-fields_for-has-illogical-and-unused-option</permalink>
  <priority type="integer">123</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>actionpack helper patch tiny</tag>
  <title>FormHelper#fields_for has illogical (and unused) option</title>
  <updated-at type="datetime">2008-10-06T07:23:29+01:00</updated-at>
  <user-id type="integer">22990</user-id>
  <version type="integer">8</version>
  <user-name>Yong Bakos</user-name>
  <creator-name>Clemens Kofler</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/641</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I've just found an option in FormHelper#fields_for that seems to be both, illogical and (therefore) unused.

In the case statement, there's the following snippet:
@@@ruby
# ...
when Array
  object = record_or_name_or_array.last
  object_name = ActionController::RecordIdentifier.singular_class_name(object)
  apply_form_for_options!(record_or_name_or_array, options)
# ...
@@@

I was suspicious because this isn't documented and the apply_form_options! call doesn't make sense because it generates form-specific stuff like the action attribute and html options for the form itself and has nothing to do with fields_for that only generates a scope around a given entity. I think this may have been copied from form_for at the time that fields_for was introduced as a new feature. 

Using it inadvertedly produces routing errors. With nested resources (e.g. product has many prices and fields_for [:product, @price]) you get insufficient parameters and without nested resources (fields_for [:product, @price]) you get unknown named routes. It only works if you specify a :url parameter (fields_for [:product, @price], :url =&gt; 'whatever') and, of course, doesn't produce any sensible output (i.e. it acts like fields_for :product).

Since the functionality doesn't make sense, I tried removing it. It didn't break any tests so I guess this wasn't only undocumented but also unused.

Why does removing it make sense, apart from the fact that this is non-existent functionality? 
Firstly, it may give us slightly improved performance when passing in an actual object as its first parameter because it doesn't have one redundant check on the type of the parameter. 
Secondly, it may be worth removing it for now and later re-introducing it with sensible behavior with regards to a discussion on the Core list (http://groups.google.com/group/rubyonrails-core/browse_thread/thread/4049b4b313fa8be2). One could then pass in an array of symbols/objects and have it build a nested hash (similar to form_for building a nested route).

Patch is attached.</original-body>
  <latest-body>I've just found an option in FormHelper#fields_for that seems to be both, illogical and (therefore) unused.

In the case statement, there's the following snippet:
@@@ruby
# ...
when Array
  object = record_or_name_or_array.last
  object_name = ActionController::RecordIdentifier.singular_class_name(object)
  apply_form_for_options!(record_or_name_or_array, options)
# ...
@@@

I was suspicious because this isn't documented and the apply_form_options! call doesn't make sense because it generates form-specific stuff like the action attribute and html options for the form itself and has nothing to do with fields_for that only generates a scope around a given entity. I think this may have been copied from form_for at the time that fields_for was introduced as a new feature. 

Using it inadvertedly produces routing errors. With nested resources (e.g. product has many prices and fields_for [:product, @price]) you get insufficient parameters and without nested resources (fields_for [:product, @price]) you get unknown named routes. It only works if you specify a :url parameter (fields_for [:product, @price], :url =&gt; 'whatever') and, of course, doesn't produce any sensible output (i.e. it acts like fields_for :product).

Since the functionality doesn't make sense, I tried removing it. It didn't break any tests so I guess this wasn't only undocumented but also unused.

Why does removing it make sense, apart from the fact that this is non-existent functionality? 
Firstly, it may give us slightly improved performance when passing in an actual object as its first parameter because it doesn't have one redundant check on the type of the parameter. 
Secondly, it may be worth removing it for now and later re-introducing it with sensible behavior with regards to a discussion on the Core list (http://groups.google.com/group/rubyonrails-core/browse_thread/thread/4049b4b313fa8be2). One could then pass in an array of symbols/objects and have it build a nested hash (similar to form_for building a nested route).

Patch is attached.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
I've just found an option in FormHelper#fields_for that seems to be both, illogical and (therefore) unused.
&lt;/p&gt;&lt;p&gt;
In the case statement, there's the following snippet:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;# ...
when Array
  object = record_or_name_or_array.last
  object_name = ActionController::RecordIdentifier.singular_class_name(object)
  apply_form_for_options!(record_or_name_or_array, options)
# ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I was suspicious because this isn't documented and the apply_form_options! call doesn't make sense because it generates form-specific stuff like the action attribute and html options for the form itself and has nothing to do with fields_for that only generates a scope around a given entity. I think this may have been copied from form_for at the time that fields_for was introduced as a new feature.
&lt;/p&gt;&lt;p&gt;
Using it inadvertedly produces routing errors. With nested resources (e.g. product has many prices and fields_for [:product, @price]) you get insufficient parameters and without nested resources (fields_for [:product, @price]) you get unknown named routes. It only works if you specify a :url parameter (fields_for [:product, @price], :url =&gt; 'whatever') and, of course, doesn't produce any sensible output (i.e. it acts like fields_for :product).
&lt;/p&gt;&lt;p&gt;
Since the functionality doesn't make sense, I tried removing it. It didn't break any tests so I guess this wasn't only undocumented but also unused.
&lt;/p&gt;&lt;p&gt;
Why does removing it make sense, apart from the fact that this is non-existent functionality?
&lt;/p&gt;&lt;p&gt;
Firstly, it may give us slightly improved performance when passing in an actual object as its first parameter because it doesn't have one redundant check on the type of the parameter.
&lt;/p&gt;&lt;p&gt;
Secondly, it may be worth removing it for now and later re-introducing it with sensible behavior with regards to a discussion on the Core list (&lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/4049b4b313fa8be2)&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;. One could then pass in an array of symbols/objects and have it build a nested hash (similar to form_for building a nested route).
&lt;/p&gt;&lt;p&gt;
Patch is attached.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've just found an option in FormHelper#fields_for that seems to be both, illogical and (therefore) unused.

In the case statement, there's the following snippet:
@@@ruby
# ...
when Array
  object = record_or_name_or_array.last
  object_name = ActionController::RecordIdentifier.singular_class_name(object)
  apply_form_for_options!(record_or_name_or_array, options)
# ...
@@@

I was suspicious because this isn't documented and the apply_form_options! call doesn't make sense because it generates form-specific stuff like the action attribute and html options for the form itself and has nothing to do with fields_for that only generates a scope around a given entity. I think this may have been copied from form_for at the time that fields_for was introduced as a new feature. 

Using it inadvertedly produces routing errors. With nested resources (e.g. product has many prices and fields_for [:product, @price]) you get insufficient parameters and without nested resources (fields_for [:product, @price]) you get unknown named routes. It only works if you specify a :url parameter (fields_for [:product, @price], :url =&gt; 'whatever') and, of course, doesn't produce any sensible output (i.e. it acts like fields_for :product).

Since the functionality doesn't make sense, I tried removing it. It didn't break any tests so I guess this wasn't only undocumented but also unused.

Why does removing it make sense, apart from the fact that this is non-existent functionality? 
Firstly, it may give us slightly improved performance when passing in an actual object as its first parameter because it doesn't have one redundant check on the type of the parameter. 
Secondly, it may be worth removing it for now and later re-introducing it with sensible behavior with regards to a discussion on the Core list (http://groups.google.com/group/rubyonrails-core/browse_thread/thread/4049b4b313fa8be2). One could then pass in an array of symbols/objects and have it build a nested hash (similar to form_for building a nested route).

Patch is attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I've just found an option in FormHelper#fields_for that seems to be both, illogical and (therefore) unused.
&lt;/p&gt;&lt;p&gt;
In the case statement, there's the following snippet:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;# ...
when Array
  object = record_or_name_or_array.last
  object_name = ActionController::RecordIdentifier.singular_class_name(object)
  apply_form_for_options!(record_or_name_or_array, options)
# ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I was suspicious because this isn't documented and the apply_form_options! call doesn't make sense because it generates form-specific stuff like the action attribute and html options for the form itself and has nothing to do with fields_for that only generates a scope around a given entity. I think this may have been copied from form_for at the time that fields_for was introduced as a new feature.
&lt;/p&gt;&lt;p&gt;
Using it inadvertedly produces routing errors. With nested resources (e.g. product has many prices and fields_for [:product, @price]) you get insufficient parameters and without nested resources (fields_for [:product, @price]) you get unknown named routes. It only works if you specify a :url parameter (fields_for [:product, @price], :url =&gt; 'whatever') and, of course, doesn't produce any sensible output (i.e. it acts like fields_for :product).
&lt;/p&gt;&lt;p&gt;
Since the functionality doesn't make sense, I tried removing it. It didn't break any tests so I guess this wasn't only undocumented but also unused.
&lt;/p&gt;&lt;p&gt;
Why does removing it make sense, apart from the fact that this is non-existent functionality?
&lt;/p&gt;&lt;p&gt;
Firstly, it may give us slightly improved performance when passing in an actual object as its first parameter because it doesn't have one redundant check on the type of the parameter.
&lt;/p&gt;&lt;p&gt;
Secondly, it may be worth removing it for now and later re-introducing it with sensible behavior with regards to a discussion on the Core list (&lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/4049b4b313fa8be2)&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;. One could then pass in an array of symbols/objects and have it build a nested hash (similar to form_for building a nested route).
&lt;/p&gt;&lt;p&gt;
Patch is attached.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T12:12:53+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">641</number>
      <permalink>formhelper-fields_for-has-illogical-and-unused-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack helper patch tiny</tag>
      <title>FormHelper#fields_for has illogical (and unused) option</title>
      <updated-at type="datetime">2008-07-17T12:12:53+01:00</updated-at>
      <user-id type="integer">18096</user-id>
      <version type="integer">1</version>
      <user-name>Clemens Kofler</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/641</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I think you need this in fields_for because form_for actually uses fields_for internally.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I think you need this in fields_for because form_for actually uses fields_for internally.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T13:26:38+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">641</number>
      <permalink>formhelper-fields_for-has-illogical-and-unused-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack helper patch tiny</tag>
      <title>FormHelper#fields_for has illogical (and unused) option</title>
      <updated-at type="datetime">2008-07-17T13:26:38+01:00</updated-at>
      <user-id type="integer">9830</user-id>
      <version type="integer">2</version>
      <user-name>RSL</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/641</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>RSL: Good catch but that's not exactly true.
As I said, all tests pass which means it doesn't break any existing functionality. Moreover, form_for only uses fields_for internally to create the scope so you can say f.text_field :name and get product[name] instead of just name.
If you look at the exact call in form_for, it looks like this:
@@@ruby
fields_for(object_name, *(args &lt;&lt; options), &amp;proc)
@@@
So form_for passes in the object name (e.g. product), followed by the args (and it pushes the options hash it extracted before back in the array) and the given block. The options that apply_form_for_options! uses are tag-related and fields_for does never produce an actual tag - so the call is, as far as I see it, redundant.

Thanks for the comment, though! :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
RSL: Good catch but that's not exactly true.
&lt;/p&gt;&lt;p&gt;
As I said, all tests pass which means it doesn't break any existing functionality. Moreover, form_for only uses fields_for internally to create the scope so you can say f.text_field :name and get product[name] instead of just name.
&lt;/p&gt;&lt;p&gt;
If you look at the exact call in form_for, it looks like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;fields_for(object_name, *(args &amp;lt;&amp;lt; options), &amp;amp;proc)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
So form_for passes in the object name (e.g. product), followed by the args (and it pushes the options hash it extracted before back in the array) and the given block. The options that apply_form_for_options! uses are tag-related and fields_for does never produce an actual tag - so the call is, as far as I see it, redundant.
&lt;/p&gt;&lt;p&gt;
Thanks for the comment, though! :)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T13:34:37+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">641</number>
      <permalink>formhelper-fields_for-has-illogical-and-unused-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack helper patch tiny</tag>
      <title>FormHelper#fields_for has illogical (and unused) option</title>
      <updated-at type="datetime">2008-07-17T13:34:37+01:00</updated-at>
      <user-id type="integer">18096</user-id>
      <version type="integer">3</version>
      <user-name>Clemens Kofler</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/641</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yeah. I read this in passing and just opened Rails source to verify and saw the same thing. I knew I remembered it using fields_for internally, just not the extent. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Yeah. I read this in passing and just opened Rails source to verify and saw the same thing. I knew I remembered it using fields_for internally, just not the extent. :)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T13:45:34+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">641</number>
      <permalink>formhelper-fields_for-has-illogical-and-unused-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack helper patch tiny</tag>
      <title>FormHelper#fields_for has illogical (and unused) option</title>
      <updated-at type="datetime">2008-07-17T13:45:34+01:00</updated-at>
      <user-id type="integer">9830</user-id>
      <version type="integer">4</version>
      <user-name>RSL</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/641</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1, I have some ideas on how passing an array to form_for can work (which probably deserves its own ticket) and getting this existing, odd behavior removed is a good first step.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
+1, I have some ideas on how passing an array to form_for can work (which probably deserves its own ticket) and getting this existing, odd behavior removed is a good first step.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-18T18:59:23+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">641</number>
      <permalink>formhelper-fields_for-has-illogical-and-unused-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack helper patch tiny</tag>
      <title>FormHelper#fields_for has illogical (and unused) option</title>
      <updated-at type="datetime">2008-07-18T18:59:23+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">5</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/641</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-19T16:36:49+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">641</number>
      <permalink>formhelper-fields_for-has-illogical-and-unused-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack helper patch tiny</tag>
      <title>FormHelper#fields_for has illogical (and unused) option</title>
      <updated-at type="datetime">2008-07-19T16:36:49+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">6</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/641</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [938caf4e6b2448b45939d36824794ea0aa5e1804]) Removed unused option from FormHelper#fields_for [#641 state:resolved]

Signed-off-by: Joshua Peek &lt;josh@joshpeek.com&gt;
http://github.com/rails/rails/commit/938caf4e6b2448b45939d36824794ea0aa5e1804</body>
      <body-html>&lt;div&gt;&lt;p&gt;
(from [938caf4e6b2448b45939d36824794ea0aa5e1804]) Removed unused option from FormHelper#fields_for [#641 state:resolved]
&lt;/p&gt;&lt;p&gt;
Signed-off-by: Joshua Peek 
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/938caf4e6b2448b45939d36824794ea0aa5e1804&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-19T18:37:29+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">641</number>
      <permalink>formhelper-fields_for-has-illogical-and-unused-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>actionpack helper patch tiny</tag>
      <title>FormHelper#fields_for has illogical (and unused) option</title>
      <updated-at type="datetime">2008-07-19T18:37:29+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">7</version>
      <user-name>Repository</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/641</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'd like to chime in on this, with a recommendation on future behavior.

It sho would be nice if fields_for, when fed an array, would build field names with numbers.

For example, imagine an Order that has_many LineItems, and each LineItem belongs_to a Product.

@@@
fields_for @order.line_items do |lif|
# field rendering &lt;input name=&quot;line_items[1][quantity] /&gt;
end
@@@

Maybe the bottom of [this thread] (http://railsforum.com/viewtopic.php?pid=76902 &quot;this thread&quot;) can help illustrate.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'd like to chime in on this, with a recommendation on future
behavior.&lt;/p&gt;
&lt;p&gt;It sho would be nice if fields_for, when fed an array, would
build field names with numbers.&lt;/p&gt;
&lt;p&gt;For example, imagine an Order that has_many LineItems, and each
LineItem belongs_to a Product.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
fields_for @order.line_items do |lif|
# field rendering &amp;lt;input name=&amp;quot;line_items[1][quantity] /&amp;gt;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe the bottom of &lt;a href=&quot;http://railsforum.com/viewtopic.php?pid=76902&quot; title=&quot;this thread&quot;&gt;this thread&lt;/a&gt; can help illustrate.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-06T07:23:28+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">641</number>
      <permalink>formhelper-fields_for-has-illogical-and-unused-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>actionpack helper patch tiny</tag>
      <title>FormHelper#fields_for has illogical (and unused) option</title>
      <updated-at type="datetime">2008-10-06T07:23:29+01:00</updated-at>
      <user-id type="integer">22990</user-id>
      <version type="integer">8</version>
      <user-name>Yong Bakos</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/641</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4237d7f00e3b150be8a5b0105d78e2078095310e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-07-17T12:12:52+01:00</created-at>
      <filename>form_helper_fields_for.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">33220</id>
      <size type="integer">1126</size>
      <uploader-id type="integer">18096</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/33220/form_helper_fields_for.diff</url>
    </attachment>
  </attachments>
</ticket>
