From 281cc1fea3543a7ad5d4bcfddd247e65063cdf94 Mon Sep 17 00:00:00 2001
From: thedarkone <nobody>
Date: Wed, 11 Feb 2009 00:31:40 +0100
Subject: [PATCH] Add reloadable templates.

---
 actionpack/lib/action_controller/rescue.rb         |    2 +-
 actionpack/lib/action_view.rb                      |    1 +
 actionpack/lib/action_view/base.rb                 |   11 ++-
 actionpack/lib/action_view/partials.rb             |    1 +
 actionpack/lib/action_view/paths.rb                |   23 +++--
 actionpack/lib/action_view/reloadable_template.rb  |  124 ++++++++++++++++++++
 actionpack/lib/action_view/renderable.rb           |   30 +-----
 actionpack/lib/action_view/template.rb             |   85 ++++++--------
 actionpack/test/abstract_unit.rb                   |    1 +
 .../test/template/compiled_templates_test.rb       |   28 ++---
 actionpack/test/template/render_test.rb            |    2 +-
 railties/environments/test.rb                      |    1 +
 railties/lib/initializer.rb                        |   18 +++-
 13 files changed, 218 insertions(+), 109 deletions(-)
 create mode 100644 actionpack/lib/action_view/reloadable_template.rb

diff --git a/actionpack/lib/action_controller/rescue.rb b/actionpack/lib/action_controller/rescue.rb
index 40aa7cd..242c8da 100644
--- a/actionpack/lib/action_controller/rescue.rb
+++ b/actionpack/lib/action_controller/rescue.rb
@@ -38,7 +38,7 @@ module ActionController #:nodoc:
       'ActionView::TemplateError'         => 'template_error'
     }
 
-    RESCUES_TEMPLATE_PATH = ActionView::Template::Path.new(
+    RESCUES_TEMPLATE_PATH = ActionView::Template::EagerPath.new_and_loaded(
       File.join(File.dirname(__FILE__), "templates"))
 
     def self.included(base) #:nodoc:
diff --git a/actionpack/lib/action_view.rb b/actionpack/lib/action_view.rb
index 0b710bd..1f1ff9d 100644
--- a/actionpack/lib/action_view.rb
+++ b/actionpack/lib/action_view.rb
@@ -44,6 +44,7 @@ module ActionView
   autoload :Renderable, 'action_view/renderable'
   autoload :RenderablePartial, 'action_view/renderable_partial'
   autoload :Template, 'action_view/template'
+  autoload :ReloadableTemplate, 'action_view/reloadable_template'
   autoload :TemplateError, 'action_view/template_error'
   autoload :TemplateHandler, 'action_view/template_handler'
   autoload :TemplateHandlers, 'action_view/template_handlers'
diff --git a/actionpack/lib/action_view/base.rb b/actionpack/lib/action_view/base.rb
index 3134807..f83be72 100644
--- a/actionpack/lib/action_view/base.rb
+++ b/actionpack/lib/action_view/base.rb
@@ -182,10 +182,15 @@ module ActionView #:nodoc:
     # that alert()s the caught exception (and then re-raises it).
     cattr_accessor :debug_rjs
 
-    # Specify whether to check whether modified templates are recompiled without a restart
+    # Specify whether templates should be cached. Otherwise the file we be read everytime it is accessed.
+    # Automaticaly reloading templates are not thread safe and should only be used in development mode.
     @@cache_template_loading = false
     cattr_accessor :cache_template_loading
 
+    def self.cache_template_loading?
+      ActionController::Base.allow_concurrency || cache_template_loading
+    end
+
     attr_internal :request
 
     delegate :request_forgery_protection_token, :template, :params, :session, :cookies, :response, :headers,
@@ -247,8 +252,8 @@ module ActionView #:nodoc:
         if options[:layout]
           _render_with_layout(options, local_assigns, &block)
         elsif options[:file]
-          template = self.view_paths.find_template(options[:file], template_format)
-          template.render_template(self, options[:locals])
+          tempalte = self.view_paths.find_template(options[:file], template_format)
+          tempalte.render_template(self, options[:locals])
         elsif options[:partial]
           render_partial(options)
         elsif options[:inline]
diff --git a/actionpack/lib/action_view/partials.rb b/actionpack/lib/action_view/partials.rb
index 6fe4dbf..9e5e0f7 100644
--- a/actionpack/lib/action_view/partials.rb
+++ b/actionpack/lib/action_view/partials.rb
@@ -235,5 +235,6 @@ module ActionView
 
         self.view_paths.find_template(path, self.template_format)
       end
+      memoize :_pick_partial_template
   end
 end
diff --git a/actionpack/lib/action_view/paths.rb b/actionpack/lib/action_view/paths.rb
index e14b212..41f9f48 100644
--- a/actionpack/lib/action_view/paths.rb
+++ b/actionpack/lib/action_view/paths.rb
@@ -2,12 +2,16 @@ module ActionView #:nodoc:
   class PathSet < Array #:nodoc:
     def self.type_cast(obj)
       if obj.is_a?(String)
-        Template::Path.new(obj)
+        if Base.cache_template_loading?
+          Template::EagerPath.new(obj.to_s)
+        else
+          ReloadableTemplate::ReloadablePath.new(obj.to_s)
+        end
       else
         obj
       end
     end
-
+    
     def initialize(*args)
       super(*args).map! { |obj| self.class.type_cast(obj) }
     end
@@ -31,9 +35,14 @@ module ActionView #:nodoc:
     def unshift(*objs)
       super(*objs.map { |obj| self.class.type_cast(obj) })
     end
+    
+    def load!
+      each(&:load!)
+    end
 
-    def find_template(template_path, format = nil)
-      return template_path if template_path.respond_to?(:render)
+    def find_template(original_template_path, format = nil)
+      return original_template_path if original_template_path.respond_to?(:render)
+      template_path = original_template_path.sub(/^\//, '')
 
       each do |load_path|
         if format && (template = load_path["#{template_path}.#{I18n.locale}.#{format}"])
@@ -52,11 +61,9 @@ module ActionView #:nodoc:
         end
       end
 
-      if File.exist?(template_path)
-        return Template.new(template_path, template_path[0] == 47 ? "" : ".")
-      end
+      return Template.new(original_template_path, original_template_path =~ /\A\// ? "" : ".") if File.file?(original_template_path)
 
-      raise MissingTemplate.new(self, template_path, format)
+      raise MissingTemplate.new(self, original_template_path, format)
     end
   end
 end
diff --git a/actionpack/lib/action_view/reloadable_template.rb b/actionpack/lib/action_view/reloadable_template.rb
new file mode 100644
index 0000000..3a3f405
--- /dev/null
+++ b/actionpack/lib/action_view/reloadable_template.rb
@@ -0,0 +1,124 @@
+module ActionView #:nodoc:
+  class ReloadableTemplate < Template
+
+    class TemplateDeleted < ActionView::ActionViewError
+    end
+
+    class ReloadablePath < Template::Path
+
+      def initialize(path)
+        super
+        @paths = {}
+        new_request!
+      end
+
+      def new_request!
+        @disk_cache = {}
+      end
+
+      def [](path)
+        if found_template = @paths[path]
+          begin
+            found_template.reset_cache_if_stale!
+          rescue TemplateDeleted
+            unregister_template(found_template)
+            self[path]
+          end
+        else
+          load_all_templates_from_dir(templates_dir_from_path(path))
+          @paths[path]
+        end
+      end
+
+      def register_template_from_file(template_file_path)
+        if !@paths[template_relative_path = template_file_path.split("#{@path}/").last] && File.file?(template_file_path)
+          register_template(ReloadableTemplate.new(template_relative_path, self))
+        end
+      end
+
+      def register_template(template)
+        template.accessible_paths.each do |path|
+          @paths[path] = template
+        end
+      end
+
+      # remove (probably deleted) template from cache
+      def unregister_template(template)
+        template.accessible_paths.each do |template_path|
+          @paths.delete(template_path) if @paths[template_path] == template
+        end
+        # fill in any newly created gaps
+        @paths.values.uniq.each do |template|
+          template.accessible_paths.each {|path| @paths[path] ||= template}
+        end
+      end
+
+      # load all templates from the directory of the requested template
+      def load_all_templates_from_dir(dir)
+        # hit disk only once per template-dir/request
+        @disk_cache[dir] ||= template_files_from_dir(dir).each {|template_file| register_template_from_file(template_file)}
+      end
+
+      def templates_dir_from_path(path)
+        File.join(@path, File.dirname(path))
+      end
+
+      # get all the template filenames from the dir
+      def template_files_from_dir(dir)
+        Dir.glob("#{dir}/*")
+      end
+
+    end
+
+    module Unfreezable
+      def freeze; self; end
+    end
+
+    def initialize(*args)
+      super
+      @compiled_methods = []
+      
+      # we don't ever want to get frozen
+      extend Unfreezable
+    end
+
+    def mtime
+      File.mtime(filename)
+    end
+
+    attr_accessor :previously_last_modified
+
+    def stale?
+      previously_last_modified.nil? || previously_last_modified < mtime
+    rescue Errno::ENOENT => e
+      undef_my_compiled_methods!
+      raise TemplateDeleted
+    end
+
+    def reset_cache_if_stale!
+      if stale?
+        flush_cache 'source', 'compiled_source'
+        undef_my_compiled_methods!
+        @previously_last_modified = mtime
+      end
+      self
+    end
+
+    def undef_my_compiled_methods!
+      @compiled_methods.each {|comp_method| ActionView::Base::CompiledTemplates.send :remove_method, comp_method}
+      @compiled_methods.clear
+    end
+
+    def compile!(render_symbol, local_assigns)
+      super
+      @compiled_methods << render_symbol
+    end
+
+    def self.is_used_by(base)
+      ActionController::Dispatcher.to_prepare do
+        base.view_paths.each{|view_path| view_path.new_request! if view_path.respond_to?(:new_request!)}
+      end
+    end
+
+  end
+end
diff --git a/actionpack/lib/action_view/renderable.rb b/actionpack/lib/action_view/renderable.rb
index 16cdd01..41080ed 100644
--- a/actionpack/lib/action_view/renderable.rb
+++ b/actionpack/lib/action_view/renderable.rb
@@ -16,18 +16,8 @@ module ActionView
     memoize :handler
 
     def compiled_source
-      @compiled_at = Time.now
       handler.call(self)
     end
-    memoize :compiled_source
-
-    def compiled_at
-      @compiled_at
-    end
-
-    def defined_at
-      @defined_at ||= {}
-    end
 
     def method_name_without_locals
       ['_run', extension, method_segment].compact.join('_')
@@ -71,12 +61,8 @@ module ActionView
       def compile(local_assigns)
         render_symbol = method_name(local_assigns)
 
-        if self.is_a?(InlineTemplate)
+        if !Base::CompiledTemplates.method_defined?(render_symbol) || recompile?
           compile!(render_symbol, local_assigns)
-        else
-          if !Base::CompiledTemplates.method_defined?(render_symbol) || recompile?(render_symbol)
-            recompile!(render_symbol, local_assigns)
-          end
         end
       end
 
@@ -93,7 +79,6 @@ module ActionView
 
         begin
           ActionView::Base::CompiledTemplates.module_eval(source, filename, 0)
-          defined_at[render_symbol] = Time.now if respond_to?(:reloadable?) && reloadable?
         rescue Errno::ENOENT => e
           raise e # Missing template file, re-raise for Base to rescue
         rescue Exception => e # errors from template code
@@ -107,17 +92,8 @@ module ActionView
         end
       end
 
-      def recompile?(render_symbol)
-        !cached? || redefine?(render_symbol) || stale?
-      end
-
-      def recompile!(render_symbol, local_assigns)
-        compiled_source(:reload) if compiled_at.nil? || compiled_at < mtime
-        compile!(render_symbol, local_assigns)
-      end
-
-      def redefine?(render_symbol)
-        compiled_at && defined_at[render_symbol] && compiled_at > defined_at[render_symbol]
+      def recompile?
+        false
       end
   end
 end
diff --git a/actionpack/lib/action_view/template.rb b/actionpack/lib/action_view/template.rb
index f2d3998..6e6ab44 100644
--- a/actionpack/lib/action_view/template.rb
+++ b/actionpack/lib/action_view/template.rb
@@ -9,13 +9,6 @@ module ActionView #:nodoc:
         @path = path.freeze
       end
 
-      def load!
-        @paths = {}
-        templates_in_path do |template|
-          load_template(template)
-        end
-      end
-
       def to_s
         if defined?(RAILS_ROOT)
           path.to_s.sub(/^#{Regexp.escape(File.expand_path(RAILS_ROOT))}\//, '')
@@ -46,43 +39,51 @@ module ActionView #:nodoc:
       # etc. A format must be supplied to match a formated file. +hello/index+
       # will never match +hello/index.html.erb+.
       def [](path)
-        load! if @paths.nil?
-        @paths[path] || find_template(path)
       end
-
-      private
-        def templates_in_path
-          (Dir.glob("#{@path}/**/*/**") | Dir.glob("#{@path}/**")).each do |file|
-            yield create_template(file) unless File.directory?(file)
-          end
+      
+      def load!
+      end
+      
+      def self.new_and_loaded(path)
+        returning new(path) do |path|
+          path.load!
         end
+      end
+    end
 
-        def create_template(file)
-          Template.new(file.split("#{self}/").last, self)
-        end
+    class EagerPath < Path
+      def initialize(path)
+        super
+      end
 
-        def load_template(template)
+      def load!
+        return if @loaded
+        
+        @paths = {}
+        templates_in_path do |template|
           template.load!
           template.accessible_paths.each do |path|
             @paths[path] = template
           end
         end
+        @paths.freeze
+        @loaded = true
+      end
 
-        def matching_templates(template_path)
-          Dir.glob("#{@path}/#{template_path}.*").each do |file|
+      def [](path)
+        load! unless @loaded
+        @paths[path]
+      end
+      
+      private
+        def templates_in_path
+          (Dir.glob("#{@path}/**/*/**") | Dir.glob("#{@path}/**")).each do |file|
             yield create_template(file) unless File.directory?(file)
           end
         end
 
-        def find_template(path)
-          return nil if Base.cache_template_loading || ActionController::Base.allow_concurrency
-          matching_templates(path) do |template|
-            if template.accessible_paths.include?(path)
-              load_template(template)
-              return template
-            end
-          end
-          nil
+        def create_template(file)
+          Template.new(file.split("#{self}/").last, self)
         end
     end
 
@@ -171,14 +172,10 @@ module ActionView #:nodoc:
       @@exempt_from_layout.any? { |exempted| path =~ exempted }
     end
 
-    def mtime
-      File.mtime(filename)
-    end
-    memoize :mtime
-
     def source
       File.read(filename)
     end
+    memoize :source
 
     def method_segment
       relative_path.to_s.gsub(/([^a-zA-Z0-9_])/) { $1.ord }
@@ -192,27 +189,13 @@ module ActionView #:nodoc:
       if TemplateError === e
         e.sub_template_of(self)
         raise e
-      elsif Errno::ENOENT === e
-        raise MissingTemplate.new(view.view_paths, filename.sub("#{RAILS_ROOT}/#{load_path}/", ""))
       else
         raise TemplateError.new(self, view.assigns, e)
       end
     end
 
-    def stale?
-      reloadable? && (mtime < mtime(:reload))
-    end
-
     def load!
-      reloadable? ? memoize_all : freeze
-    end
-
-    def reloadable?
-      !(Base.cache_template_loading || ActionController::Base.allow_concurrency)
-    end
-
-    def cached?
-      ActionController::Base.perform_caching || !reloadable?
+      freeze
     end
 
     private
@@ -262,5 +245,5 @@ module ActionView #:nodoc:
 
         [base_path, name, locale, format, extension]
       end
- end
+  end
 end
diff --git a/actionpack/test/abstract_unit.rb b/actionpack/test/abstract_unit.rb
index 07bd7ba..6144d4a 100644
--- a/actionpack/test/abstract_unit.rb
+++ b/actionpack/test/abstract_unit.rb
@@ -38,4 +38,5 @@ I18n.backend.store_translations 'pt-BR', {}
 ORIGINAL_LOCALES = I18n.available_locales.map(&:to_s).sort
 
 FIXTURE_LOAD_PATH = File.join(File.dirname(__FILE__), 'fixtures')
+ActionView::Base.cache_template_loading = true
 ActionController::Base.view_paths = FIXTURE_LOAD_PATH
diff --git a/actionpack/test/template/compiled_templates_test.rb b/actionpack/test/template/compiled_templates_test.rb
index 55fa346..7505101 100644
--- a/actionpack/test/template/compiled_templates_test.rb
+++ b/actionpack/test/template/compiled_templates_test.rb
@@ -2,7 +2,10 @@ require 'abstract_unit'
 require 'controller/fake_models'
 
 class CompiledTemplatesTest < Test::Unit::TestCase
+  
   def setup
+    # store cached views paths, to avoid expensive reloading
+    @cached_view_paths = ActionController::Base.view_paths
     @compiled_templates = ActionView::Base::CompiledTemplates
     @compiled_templates.instance_methods.each do |m|
       @compiled_templates.send(:remove_method, m) if m =~ /^_run_/
@@ -35,17 +38,6 @@ class CompiledTemplatesTest < Test::Unit::TestCase
     end
   end
 
-  def test_compiled_template_will_always_be_recompiled_when_template_is_not_cached
-    with_caching(false) do
-      ActionView::Template.any_instance.expects(:recompile?).times(3).returns(true)
-      assert_equal 0, @compiled_templates.instance_methods.size
-      assert_equal "Hello world!", render(:file => "#{FIXTURE_LOAD_PATH}/test/hello_world.erb")
-      ActionView::Template.any_instance.expects(:compile!).times(3)
-      3.times { assert_equal "Hello world!", render(:file => "#{FIXTURE_LOAD_PATH}/test/hello_world.erb") }
-      assert_equal 1, @compiled_templates.instance_methods.size
-    end
-  end
-
   def test_template_changes_are_not_reflected_with_cached_template_loading
     with_caching(true) do
       with_reloading(false) do
@@ -63,8 +55,9 @@ class CompiledTemplatesTest < Test::Unit::TestCase
       with_reloading(true) do
         assert_equal "Hello world!", render(:file => "test/hello_world.erb")
         modify_template "test/hello_world.erb", "Goodbye world!" do
+          ActionController::Base.view_paths.find_template('test/hello_world.erb').previously_last_modified = 10.seconds.ago
           assert_equal "Goodbye world!", render(:file => "test/hello_world.erb")
-          sleep(1) # Need to sleep so that the timestamp actually changes
+          ActionController::Base.view_paths.find_template('test/hello_world.erb').previously_last_modified = 10.seconds.ago
         end
         assert_equal "Hello world!", render(:file => "test/hello_world.erb")
       end
@@ -74,7 +67,6 @@ class CompiledTemplatesTest < Test::Unit::TestCase
   private
     def render(*args)
       view_paths = ActionController::Base.view_paths
-      assert_equal ActionView::Template::Path, view_paths.first.class
       ActionView::Base.new(view_paths, {}).render(*args)
     end
 
@@ -100,12 +92,18 @@ class CompiledTemplatesTest < Test::Unit::TestCase
     end
 
     def with_reloading(reload_templates)
-      old_cache_template_loading = ActionView::Base.cache_template_loading
+      old_view_paths, old_cache_templates = ActionController::Base.view_paths, ActionView::Base.cache_template_loading
       begin
         ActionView::Base.cache_template_loading = !reload_templates
+        ActionController::Base.view_paths = view_paths_for(reload_templates)
         yield
       ensure
-        ActionView::Base.cache_template_loading = old_cache_template_loading
+        ActionController::Base.view_paths, ActionView::Base.cache_template_loading = old_view_paths, old_cache_templates
       end
     end
+    
+    def view_paths_for(reload_templates)
+      # reloadable paths are cheap to create
+      reload_templates ? ActionView::PathSet.new(@cached_view_paths.map(&:to_s)) : @cached_view_paths
+    end
 end
diff --git a/actionpack/test/template/render_test.rb b/actionpack/test/template/render_test.rb
index 34e7e82..f5e6242 100644
--- a/actionpack/test/template/render_test.rb
+++ b/actionpack/test/template/render_test.rb
@@ -249,7 +249,7 @@ class CachedRenderTest < Test::Unit::TestCase
   # Ensure view path cache is primed
   def setup
     view_paths = ActionController::Base.view_paths
-    assert_equal ActionView::Template::Path, view_paths.first.class
+    assert_equal ActionView::Template::EagerPath, view_paths.first.class
     setup_view(view_paths)
   end
 end
diff --git a/railties/environments/test.rb b/railties/environments/test.rb
index 496eb95..d6f80a4 100644
--- a/railties/environments/test.rb
+++ b/railties/environments/test.rb
@@ -12,6 +12,7 @@ config.whiny_nils = true
 # Show full error reports and disable caching
 config.action_controller.consider_all_requests_local = true
 config.action_controller.perform_caching             = false
+config.action_view.cache_template_loading            = true
 
 # Disable request forgery protection in test environment
 config.action_controller.allow_forgery_protection    = false
diff --git a/railties/lib/initializer.rb b/railties/lib/initializer.rb
index c4c55a9..9999da7 100644
--- a/railties/lib/initializer.rb
+++ b/railties/lib/initializer.rb
@@ -174,6 +174,9 @@ module Rails
 
       # Prepare dispatcher callbacks and run 'prepare' callbacks
       prepare_dispatcher
+      
+      # Setup reloadable templates if they are enabled
+      setup_reloadable_templates
 
       # Routing must be initialized after plugins to allow the former to extend the routes
       initialize_routing
@@ -369,8 +372,8 @@ Run `rake gems:install` to install the missing gems.
 
     def load_view_paths
       if configuration.frameworks.include?(:action_view)
-        ActionController::Base.view_paths.each { |path| path.load! } if configuration.frameworks.include?(:action_controller)
-        ActionMailer::Base.template_root.load! if configuration.frameworks.include?(:action_mailer)
+        ActionController::Base.view_paths.load! if configuration.frameworks.include?(:action_controller)
+        ActionMailer::Base.view_paths.load! if configuration.frameworks.include?(:action_mailer)
       end
     end
 
@@ -478,7 +481,7 @@ Run `rake gems:install` to install the missing gems.
     # set to use Configuration#view_path.
     def initialize_framework_views
       if configuration.frameworks.include?(:action_view)
-        view_path = ActionView::Template::Path.new(configuration.view_path)
+        view_path = ActionView::PathSet.type_cast(configuration.view_path)
         ActionMailer::Base.template_root ||= view_path if configuration.frameworks.include?(:action_mailer)
         ActionController::Base.view_paths = view_path if configuration.frameworks.include?(:action_controller) && ActionController::Base.view_paths.empty?
       end
@@ -586,6 +589,15 @@ Run `rake gems:install` to install the missing gems.
       Dispatcher.new(Rails.logger).send :run_callbacks, :prepare_dispatch
     end
 
+    def setup_reloadable_templates
+      if configuration.frameworks.include?(:action_view)
+        unless ActionView::Base.cache_template_loading?
+          ActionView::ReloadableTemplate.is_used_by(ActionMailer::Base) if configuration.frameworks.include?(:action_mailer)
+          ActionView::ReloadableTemplate.is_used_by(ActionController::Base) if configuration.frameworks.include?(:action_controller)
+        end
+      end
+    end
+
     def disable_dependency_loading
       if configuration.cache_classes && !configuration.dependency_loading
         ActiveSupport::Dependencies.unhook!
-- 
1.6.0.1

