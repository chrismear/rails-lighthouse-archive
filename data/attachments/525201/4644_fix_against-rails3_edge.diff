From a88920ec27fe0d2de62bcfec6e053f152e2e266d Mon Sep 17 00:00:00 2001
From: Neeraj Singh <neerajdotname@gmail.com>
Date: Tue, 18 May 2010 12:25:25 -0400
Subject: [PATCH] Use assert_respond_to because it has better error messaging

[#4644 state:resolved]
---
 actionmailer/test/base_test.rb                     |    4 +-
 actionmailer/test/old_base/mail_service_test.rb    |    6 ++--
 activemodel/test/cases/attribute_methods_test.rb   |    2 +-
 activemodel/test/cases/callbacks_test.rb           |    2 +-
 .../associations/inverse_associations_test.rb      |   18 ++++++++--------
 .../test/cases/autosave_association_test.rb        |    8 +++---
 activerecord/test/cases/base_test.rb               |   22 ++++++++++----------
 activerecord/test/cases/finder_respond_to_test.rb  |   22 ++++++++++----------
 8 files changed, 42 insertions(+), 42 deletions(-)

diff --git a/actionmailer/test/base_test.rb b/actionmailer/test/base_test.rb
index 5506d62..54bf3de 100644
--- a/actionmailer/test/base_test.rb
+++ b/actionmailer/test/base_test.rb
@@ -491,8 +491,8 @@ class BaseTest < ActiveSupport::TestCase
 
   # Class level API with method missing
   test "should respond to action methods" do
-    assert BaseMailer.respond_to?(:welcome)
-    assert BaseMailer.respond_to?(:implicit_multipart)
+    assert_respond_to BaseMailer, :welcome
+    assert_respond_to BaseMailer, :implicit_multipart
     assert !BaseMailer.respond_to?(:mail)
     assert !BaseMailer.respond_to?(:headers)
   end
diff --git a/actionmailer/test/old_base/mail_service_test.rb b/actionmailer/test/old_base/mail_service_test.rb
index f91e7f8..e5a67cf 100644
--- a/actionmailer/test/old_base/mail_service_test.rb
+++ b/actionmailer/test/old_base/mail_service_test.rb
@@ -1150,15 +1150,15 @@ class RespondToTest < Test::Unit::TestCase
   end
 
   def test_should_respond_to_new
-    assert RespondToMailer.respond_to?(:new)
+    assert_respond_to RespondToMailer, :new
   end
 
   def test_should_respond_to_create_with_template_suffix
-    assert RespondToMailer.respond_to?(:create_any_old_template)
+    assert_respond_to RespondToMailer, :create_any_old_template
   end
 
   def test_should_respond_to_deliver_with_template_suffix
-    assert RespondToMailer.respond_to?(:deliver_any_old_template)
+    assert_respond_to RespondToMailer, :deliver_any_old_template
   end
 
   def test_should_not_respond_to_new_with_template_suffix
diff --git a/activemodel/test/cases/attribute_methods_test.rb b/activemodel/test/cases/attribute_methods_test.rb
index 5659dcb..c60caf9 100644
--- a/activemodel/test/cases/attribute_methods_test.rb
+++ b/activemodel/test/cases/attribute_methods_test.rb
@@ -31,7 +31,7 @@ class AttributeMethodsTest < ActiveModel::TestCase
     ModelWithAttributes.define_attribute_methods([:foo])
 
     assert ModelWithAttributes.attribute_methods_generated?
-    assert ModelWithAttributes.new.respond_to?(:foo)
+    assert_respond_to ModelWithAttributes.new, :foo
     assert_equal "value of foo", ModelWithAttributes.new.foo
   end
 
diff --git a/activemodel/test/cases/callbacks_test.rb b/activemodel/test/cases/callbacks_test.rb
index b996f51..9675b5d 100644
--- a/activemodel/test/cases/callbacks_test.rb
+++ b/activemodel/test/cases/callbacks_test.rb
@@ -65,6 +65,6 @@ class CallbacksTest < ActiveModel::TestCase
   test "only selects which types of callbacks should be created" do
     assert !ModelCallbacks.respond_to?(:before_initialize)
     assert !ModelCallbacks.respond_to?(:around_initialize)
-    assert ModelCallbacks.respond_to?(:after_initialize)
+    assert_respond_to ModelCallbacks, :after_initialize
   end
 end
diff --git a/activerecord/test/cases/associations/inverse_associations_test.rb b/activerecord/test/cases/associations/inverse_associations_test.rb
index 1d7604f..34d24a2 100644
--- a/activerecord/test/cases/associations/inverse_associations_test.rb
+++ b/activerecord/test/cases/associations/inverse_associations_test.rb
@@ -23,39 +23,39 @@ class InverseAssociationTests < ActiveRecord::TestCase
 
   def test_should_be_able_to_ask_a_reflection_if_it_has_an_inverse
     has_one_with_inverse_ref = Man.reflect_on_association(:face)
-    assert has_one_with_inverse_ref.respond_to?(:has_inverse?)
+    assert_respond_to has_one_with_inverse_ref, :has_inverse?
     assert has_one_with_inverse_ref.has_inverse?
 
     has_many_with_inverse_ref = Man.reflect_on_association(:interests)
-    assert has_many_with_inverse_ref.respond_to?(:has_inverse?)
+    assert_respond_to has_many_with_inverse_ref, :has_inverse?
     assert has_many_with_inverse_ref.has_inverse?
 
     belongs_to_with_inverse_ref = Face.reflect_on_association(:man)
-    assert belongs_to_with_inverse_ref.respond_to?(:has_inverse?)
+    assert_respond_to belongs_to_with_inverse_ref, :has_inverse?
     assert belongs_to_with_inverse_ref.has_inverse?
 
     has_one_without_inverse_ref = Club.reflect_on_association(:sponsor)
-    assert has_one_without_inverse_ref.respond_to?(:has_inverse?)
+    assert_respond_to has_one_without_inverse_ref, :has_inverse?
     assert !has_one_without_inverse_ref.has_inverse?
 
     has_many_without_inverse_ref = Club.reflect_on_association(:memberships)
-    assert has_many_without_inverse_ref.respond_to?(:has_inverse?)
+    assert_respond_to has_many_without_inverse_ref, :has_inverse?
     assert !has_many_without_inverse_ref.has_inverse?
 
     belongs_to_without_inverse_ref = Sponsor.reflect_on_association(:sponsor_club)
-    assert belongs_to_without_inverse_ref.respond_to?(:has_inverse?)
+    assert_respond_to belongs_to_without_inverse_ref, :has_inverse?
     assert !belongs_to_without_inverse_ref.has_inverse?
   end
 
   def test_should_be_able_to_ask_a_reflection_what_it_is_the_inverse_of
     has_one_ref = Man.reflect_on_association(:face)
-    assert has_one_ref.respond_to?(:inverse_of)
+    assert_respond_to has_one_ref, :inverse_of
 
     has_many_ref = Man.reflect_on_association(:interests)
-    assert has_many_ref.respond_to?(:inverse_of)
+    assert_respond_to has_many_ref, :inverse_of
 
     belongs_to_ref = Face.reflect_on_association(:man)
-    assert belongs_to_ref.respond_to?(:inverse_of)
+    assert_respond_to belongs_to_ref, :inverse_of
   end
 
   def test_inverse_of_method_should_supply_the_actual_reflection_instance_it_is_the_inverse_of
diff --git a/activerecord/test/cases/autosave_association_test.rb b/activerecord/test/cases/autosave_association_test.rb
index 5cc5dff..063f0f0 100644
--- a/activerecord/test/cases/autosave_association_test.rb
+++ b/activerecord/test/cases/autosave_association_test.rb
@@ -1236,11 +1236,11 @@ class TestAutosaveAssociationValidationMethodsGeneration < ActiveRecord::TestCas
   end
 
   test "should generate validation methods for has_many associations" do
-    assert @pirate.respond_to?(:validate_associated_records_for_birds)
+    assert_respond_to @pirate, :validate_associated_records_for_birds
   end
 
   test "should generate validation methods for has_one associations with :validate => true" do
-    assert @pirate.respond_to?(:validate_associated_records_for_ship)
+    assert_respond_to @pirate, :validate_associated_records_for_ship
   end
 
   test "should not generate validation methods for has_one associations without :validate => true" do
@@ -1248,7 +1248,7 @@ class TestAutosaveAssociationValidationMethodsGeneration < ActiveRecord::TestCas
   end
 
   test "should generate validation methods for belongs_to associations with :validate => true" do
-    assert @pirate.respond_to?(:validate_associated_records_for_parrot)
+    assert_respond_to @pirate, :validate_associated_records_for_parrot
   end
 
   test "should not generate validation methods for belongs_to associations without :validate => true" do
@@ -1256,7 +1256,7 @@ class TestAutosaveAssociationValidationMethodsGeneration < ActiveRecord::TestCas
   end
 
   test "should generate validation methods for HABTM associations with :validate => true" do
-    assert @pirate.respond_to?(:validate_associated_records_for_parrots)
+    assert_respond_to @pirate, :validate_associated_records_for_parrots
   end
 
   test "should not generate validation methods for HABTM associations without :validate => true" do
diff --git a/activerecord/test/cases/base_test.rb b/activerecord/test/cases/base_test.rb
index 7c4d92f..960a837 100755
--- a/activerecord/test/cases/base_test.rb
+++ b/activerecord/test/cases/base_test.rb
@@ -111,14 +111,14 @@ class BasicsTest < ActiveRecord::TestCase
 
   def test_respond_to?
     topic = Topic.find(1)
-    assert topic.respond_to?("title")
-    assert topic.respond_to?("title?")
-    assert topic.respond_to?("title=")
-    assert topic.respond_to?(:title)
-    assert topic.respond_to?(:title?)
-    assert topic.respond_to?(:title=)
-    assert topic.respond_to?("author_name")
-    assert topic.respond_to?("attribute_names")
+    assert_respond_to topic, "title"
+    assert_respond_to topic, "title?"
+    assert_respond_to topic, "title="
+    assert_respond_to topic, :title
+    assert_respond_to topic, :title?
+    assert_respond_to topic, :title=
+    assert_respond_to topic, "author_name"
+    assert_respond_to topic, "attribute_names"
     assert !topic.respond_to?("nothingness")
     assert !topic.respond_to?(:nothingness)
   end
@@ -1038,9 +1038,9 @@ class BasicsTest < ActiveRecord::TestCase
   def test_mass_assignment_protection_against_class_attribute_writers
     [:logger, :configurations, :primary_key_prefix_type, :table_name_prefix, :table_name_suffix, :pluralize_table_names,
       :default_timezone, :schema_format, :lock_optimistically, :record_timestamps].each do |method|
-      assert  Task.respond_to?(method)
-      assert  Task.respond_to?("#{method}=")
-      assert  Task.new.respond_to?(method)
+      assert_respond_to  Task, method
+      assert_respond_to  Task, "#{method}="
+      assert_respond_to  Task.new, method
       assert !Task.new.respond_to?("#{method}=")
     end
   end
diff --git a/activerecord/test/cases/finder_respond_to_test.rb b/activerecord/test/cases/finder_respond_to_test.rb
index 4e6fecf..235805a 100644
--- a/activerecord/test/cases/finder_respond_to_test.rb
+++ b/activerecord/test/cases/finder_respond_to_test.rb
@@ -7,53 +7,53 @@ class FinderRespondToTest < ActiveRecord::TestCase
 
   def test_should_preserve_normal_respond_to_behaviour_and_respond_to_newly_added_method
     class << Topic; self; end.send(:define_method, :method_added_for_finder_respond_to_test) { }
-    assert Topic.respond_to?(:method_added_for_finder_respond_to_test)
+    assert_respond_to Topic, :method_added_for_finder_respond_to_test
   ensure
     class << Topic; self; end.send(:remove_method, :method_added_for_finder_respond_to_test)
   end
 
   def test_should_preserve_normal_respond_to_behaviour_and_respond_to_standard_object_method
-    assert Topic.respond_to?(:to_s)
+    assert_respond_to Topic, :to_s
   end
 
   def test_should_respond_to_find_by_one_attribute_before_caching
     ensure_topic_method_is_not_cached(:find_by_title)
-    assert Topic.respond_to?(:find_by_title)
+    assert_respond_to Topic, :find_by_title
   end
 
   def test_should_respond_to_find_all_by_one_attribute
     ensure_topic_method_is_not_cached(:find_all_by_title)
-    assert Topic.respond_to?(:find_all_by_title)
+    assert_respond_to Topic, :find_all_by_title
   end
 
   def test_should_respond_to_find_all_by_two_attributes
     ensure_topic_method_is_not_cached(:find_all_by_title_and_author_name)
-    assert Topic.respond_to?(:find_all_by_title_and_author_name)
+    assert_respond_to Topic, :find_all_by_title_and_author_name
   end
 
   def test_should_respond_to_find_by_two_attributes
     ensure_topic_method_is_not_cached(:find_by_title_and_author_name)
-    assert Topic.respond_to?(:find_by_title_and_author_name)
+    assert_respond_to Topic, :find_by_title_and_author_name
   end
 
   def test_should_respond_to_find_or_initialize_from_one_attribute
     ensure_topic_method_is_not_cached(:find_or_initialize_by_title)
-    assert Topic.respond_to?(:find_or_initialize_by_title)
+    assert_respond_to Topic, :find_or_initialize_by_title
   end
 
   def test_should_respond_to_find_or_initialize_from_two_attributes
     ensure_topic_method_is_not_cached(:find_or_initialize_by_title_and_author_name)
-    assert Topic.respond_to?(:find_or_initialize_by_title_and_author_name)
+    assert_respond_to Topic, :find_or_initialize_by_title_and_author_name
   end
 
   def test_should_respond_to_find_or_create_from_one_attribute
     ensure_topic_method_is_not_cached(:find_or_create_by_title)
-    assert Topic.respond_to?(:find_or_create_by_title)
+    assert_respond_to Topic, :find_or_create_by_title
   end
 
   def test_should_respond_to_find_or_create_from_two_attributes
     ensure_topic_method_is_not_cached(:find_or_create_by_title_and_author_name)
-    assert Topic.respond_to?(:find_or_create_by_title_and_author_name)
+    assert_respond_to Topic, :find_or_create_by_title_and_author_name
   end
 
   def test_should_not_respond_to_find_by_one_missing_attribute
@@ -73,4 +73,4 @@ class FinderRespondToTest < ActiveRecord::TestCase
     class << Topic; self; end.send(:remove_method, method_id) if Topic.public_methods.any? { |m| m.to_s == method_id.to_s }
   end
 
-end
\ No newline at end of file
+end
-- 
1.6.5.2

