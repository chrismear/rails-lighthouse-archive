From 3b79ef8ea2ca710360b7b0b5eba5965f52542d46 Mon Sep 17 00:00:00 2001
From: Matt Powell <fauxparse@gmail.com>
Date: Fri, 22 May 2009 13:56:40 +1200
Subject: [PATCH] patch #resources and friends to allow requirements on :id to filter through to nested resources

---
 .../lib/action_controller/routing/resources.rb     |   27 +++++++++++++++++---
 actionpack/test/controller/resources_test.rb       |   12 +++++++++
 2 files changed, 35 insertions(+), 4 deletions(-)

diff --git a/actionpack/lib/action_controller/routing/resources.rb b/actionpack/lib/action_controller/routing/resources.rb
index 86abb7b..e6a0f08 100644
--- a/actionpack/lib/action_controller/routing/resources.rb
+++ b/actionpack/lib/action_controller/routing/resources.rb
@@ -294,6 +294,12 @@ module ActionController
     #       map.resource :profile, :path_prefix => ':name', :requirements => { :name => /[a-zA-Z]+/, :extra => 'value' }
     #
     #     will only match if the first part is alphabetic, and will pass the parameter :extra to the controller.
+    #     Any requirements on <tt>:id</tt> will be passed down to nested resources. For example:
+    #
+    #       map.resource :profile, :requirements => { :id => /\w+/ } do |profile|
+    #         profile.resources :avatars # acts as if :requirements => { :profile_id => /\w+/ } had been specified.
+    #       end
+    #
     # * <tt>:conditions</tt> - Specify custom routing recognition conditions.  \Resources sets the <tt>:method</tt> value for the method-specific routes.
     # * <tt>:as</tt> - Specify a different \resource name to use in the URL path. For example:
     #     # products_path == '/productos'
@@ -523,6 +529,7 @@ module ActionController
     private
       def map_resource(entities, options = {}, &block)
         resource = Resource.new(entities, options)
+        options_for_block = get_options_for_block(entities, options)
 
         with_options :controller => resource.controller do |map|
           map_collection_actions(map, resource)
@@ -533,13 +540,14 @@ module ActionController
           map_associations(resource, options)
 
           if block_given?
-            with_options(options.slice(*INHERITABLE_OPTIONS).merge(:path_prefix => resource.nesting_path_prefix, :name_prefix => resource.nesting_name_prefix), &block)
+            with_options(options_for_block.merge(:path_prefix => resource.nesting_path_prefix, :name_prefix => resource.nesting_name_prefix), &block)
           end
         end
       end
 
       def map_singleton_resource(entities, options = {}, &block)
         resource = SingletonResource.new(entities, options)
+        options_for_block = get_options_for_block(entities, options)
 
         with_options :controller => resource.controller do |map|
           map_collection_actions(map, resource)
@@ -550,7 +558,18 @@ module ActionController
           map_associations(resource, options)
 
           if block_given?
-            with_options(options.slice(*INHERITABLE_OPTIONS).merge(:path_prefix => resource.nesting_path_prefix, :name_prefix => resource.nesting_name_prefix), &block)
+            with_options(options_for_block.merge(:path_prefix => resource.nesting_path_prefix, :name_prefix => resource.nesting_name_prefix), &block)
+          end
+        end
+      end
+      
+      def get_options_for_block(entities, options)
+        returning options.slice(*INHERITABLE_OPTIONS) do |options_for_block|
+          if (requirements = options[:requirements] && options[:requirements].dup)
+            options_for_block[:requirements] = {}
+            Array(entities).each do |entity|
+              options_for_block[:requirements][:"#{entity.to_s.singularize}_id"] = requirements[:id] unless requirements[:id].blank?
+            end
           end
         end
       end
@@ -562,7 +581,7 @@ module ActionController
         name_prefix = "#{options.delete(:name_prefix)}#{resource.nesting_name_prefix}"
 
         Array(options[:has_one]).each do |association|
-          resource(association, options.slice(*INHERITABLE_OPTIONS).merge(:path_prefix => path_prefix, :name_prefix => name_prefix))
+          resource(association, get_options_for_block(resource.plural, options).merge(:path_prefix => path_prefix, :name_prefix => name_prefix))
         end
       end
 
@@ -577,7 +596,7 @@ module ActionController
             map_has_many_associations(resource, association, options)
           end
         when Symbol, String
-          resources(associations, options.slice(*INHERITABLE_OPTIONS).merge(:path_prefix => resource.nesting_path_prefix, :name_prefix => resource.nesting_name_prefix, :has_many => options[:has_many]))
+          resources(associations, get_options_for_block(resource.plural, options).merge(:path_prefix => resource.nesting_path_prefix, :name_prefix => resource.nesting_name_prefix, :has_many => options[:has_many]))
         else
         end
       end
diff --git a/actionpack/test/controller/resources_test.rb b/actionpack/test/controller/resources_test.rb
index 30ab110..94d5fdc 100644
--- a/actionpack/test/controller/resources_test.rb
+++ b/actionpack/test/controller/resources_test.rb
@@ -847,6 +847,18 @@ class ResourcesTest < ActionController::TestCase
       assert_recognizes(expected_options, :path => 'thread/1.1.1/comments/1', :method => :get)
     end
   end
+  
+  def test_id_requirements_passed_to_nested_resources
+    with_routing do |set|
+      set.draw do |map|
+        map.resources :products, :requirements => { :id => /\w+\.[0-9]+/ } do |product|
+          product.resources :images
+        end
+      end
+      
+      assert_recognizes({ :controller => "images", :action => "show", :product_id => "ABC.123", :id => "1" }, :path => "products/ABC.123/images/1", :method => :get)
+    end
+  end
 
   def test_resource_has_only_show_action
     with_routing do |set|
-- 
1.6.0

