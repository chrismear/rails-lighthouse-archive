<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-01T00:08:34+00:00</created-at>
  <creator-id type="integer">8819</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2105</number>
  <permalink>scripts-in-script-dir-only-run-with-ruby-command-in-path</permalink>
  <priority type="integer">1328</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Scripts in script dir only run with &quot;ruby&quot; command in path</title>
  <updated-at type="datetime">2009-03-01T00:46:17+00:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">2</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Charles Oliver Nutter</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2105</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>All the scripts in the script dir have a shebang line of #!/usr/bin/env ruby which prevents running them directly when the &quot;ruby&quot; command on a system is not &quot;ruby&quot;. For example, JRuby's command is &quot;jruby&quot; and I also have ruby1.9 installed as &quot;ruby1.9&quot;.

If these scripts were generated, based on the actual name of the Ruby command being run, then they could be directly executed no matter what implementation or executable name the user was using.

I do not have a patch for this because I'm not yet familiar enough with the generators.</original-body>
  <latest-body>All the scripts in the script dir have a shebang line of #!/usr/bin/env ruby which prevents running them directly when the &quot;ruby&quot; command on a system is not &quot;ruby&quot;. For example, JRuby's command is &quot;jruby&quot; and I also have ruby1.9 installed as &quot;ruby1.9&quot;.

If these scripts were generated, based on the actual name of the Ruby command being run, then they could be directly executed no matter what implementation or executable name the user was using.

I do not have a patch for this because I'm not yet familiar enough with the generators.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;All the scripts in the script dir have a shebang line of
#!/usr/bin/env ruby which prevents running them directly when the
&quot;ruby&quot; command on a system is not &quot;ruby&quot;. For example, JRuby's
command is &quot;jruby&quot; and I also have ruby1.9 installed as
&quot;ruby1.9&quot;.&lt;/p&gt;
&lt;p&gt;If these scripts were generated, based on the actual name of the
Ruby command being run, then they could be directly executed no
matter what implementation or executable name the user was
using.&lt;/p&gt;
&lt;p&gt;I do not have a patch for this because I'm not yet familiar
enough with the generators.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>All the scripts in the script dir have a shebang line of #!/usr/bin/env ruby which prevents running them directly when the &quot;ruby&quot; command on a system is not &quot;ruby&quot;. For example, JRuby's command is &quot;jruby&quot; and I also have ruby1.9 installed as &quot;ruby1.9&quot;.

If these scripts were generated, based on the actual name of the Ruby command being run, then they could be directly executed no matter what implementation or executable name the user was using.

I do not have a patch for this because I'm not yet familiar enough with the generators.</body>
      <body-html>&lt;div&gt;&lt;p&gt;All the scripts in the script dir have a shebang line of
#!/usr/bin/env ruby which prevents running them directly when the
&quot;ruby&quot; command on a system is not &quot;ruby&quot;. For example, JRuby's
command is &quot;jruby&quot; and I also have ruby1.9 installed as
&quot;ruby1.9&quot;.&lt;/p&gt;
&lt;p&gt;If these scripts were generated, based on the actual name of the
Ruby command being run, then they could be directly executed no
matter what implementation or executable name the user was
using.&lt;/p&gt;
&lt;p&gt;I do not have a patch for this because I'm not yet familiar
enough with the generators.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-01T00:08:34+00:00</created-at>
      <creator-id type="integer">8819</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2105</number>
      <permalink>scripts-in-script-dir-only-run-with-ruby-command-in-path</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Scripts in script dir only run with &quot;ruby&quot; command in path</title>
      <updated-at type="datetime">2009-03-01T00:08:38+00:00</updated-at>
      <user-id type="integer">8819</user-id>
      <version type="integer">1</version>
      <user-name>Charles Oliver Nutter</user-name>
      <creator-name>Charles Oliver Nutter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2105</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>/usr/bin/env ruby means the app is portable to other environments. You can still invoke the scripts using the ruby of your choice.</body>
      <body-html>&lt;div&gt;&lt;p&gt;/usr/bin/env ruby means the app is portable to other
environments. You can still invoke the scripts using the ruby of
your choice.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-01T00:46:16+00:00</created-at>
      <creator-id type="integer">8819</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2105</number>
      <permalink>scripts-in-script-dir-only-run-with-ruby-command-in-path</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Scripts in script dir only run with &quot;ruby&quot; command in path</title>
      <updated-at type="datetime">2009-03-01T00:46:17+00:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Charles Oliver Nutter</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2105</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
