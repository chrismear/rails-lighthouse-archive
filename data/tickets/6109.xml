<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-03T10:44:41+00:00</created-at>
  <creator-id type="integer">127683</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6109</number>
  <permalink>activerecord-serialization-throws-serializationtypemismatch-if-i-try-to-serialize-a-ar-object</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>&quot;workaround yaml serialize 3.0.3 issue&quot;</tag>
  <title>ActiveRecord serialization throws SerializationTypeMismatch if I try to serialize a AR object</title>
  <updated-at type="datetime">2011-01-11T17:15:59+00:00</updated-at>
  <user-id type="integer">95171</user-id>
  <version type="integer">7</version>
  <user-name>Bob Lail</user-name>
  <creator-name>rmehner</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6109</url>
  <priority-name>Low</priority-name>
  <original-body>Hi there,

I have an issue with the ActiveRecord serialization in Rails 3.0.3 (Ruby 1.8.7 and 1.9.2):

Given two ActiveRecord models:

@@@ ruby
class User &lt; ActiveRecord::Base
  # has one string column 'name'
end

class Invoice &lt; ActiveRecord::Base
  serialize :user, User
end
@@@

When I run the following code it throws an exception

@@@ ruby
User.create! :name =&gt; 'Foo Bar'
Invoice.create! :user =&gt; User.last

Invoice.last
# throws:
# 'ActiveRecord::SerializationTypeMismatch: user was supposed to be a User, but was a String'
@@@

I'm not sure if this just an understanding issue from my side (serializing arbitrary non-AR classes works fine), or if this really a bug. Is it not possible to serialize AR classes? Currently I'm working with a workaround, that rebuilds the object from a serialized attributes hash, but I thought that serialize would do this already.

Any help to clarify this is really appreciated and thank you in advance for your effort.</original-body>
  <latest-body>Hi there,

I have an issue with the ActiveRecord serialization in Rails 3.0.3 (Ruby 1.8.7 and 1.9.2):

Given two ActiveRecord models:

@@@ ruby
class User &lt; ActiveRecord::Base
  # has one string column 'name'
end

class Invoice &lt; ActiveRecord::Base
  serialize :user, User
end
@@@

When I run the following code it throws an exception

@@@ ruby
User.create! :name =&gt; 'Foo Bar'
Invoice.create! :user =&gt; User.last

Invoice.last
# throws:
# 'ActiveRecord::SerializationTypeMismatch: user was supposed to be a User, but was a String'
@@@

I'm not sure if this just an understanding issue from my side (serializing arbitrary non-AR classes works fine), or if this really a bug. Is it not possible to serialize AR classes? Currently I'm working with a workaround, that rebuilds the object from a serialized attributes hash, but I thought that serialize would do this already.

Any help to clarify this is really appreciated and thank you in advance for your effort.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi there,&lt;/p&gt;
&lt;p&gt;I have an issue with the ActiveRecord serialization in Rails
3.0.3 (Ruby 1.8.7 and 1.9.2):&lt;/p&gt;
&lt;p&gt;Given two ActiveRecord models:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  # has one string column 'name'
end

class Invoice &amp;lt; ActiveRecord::Base
  serialize :user, User
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When I run the following code it throws an exception&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;User.create! :name =&amp;gt; 'Foo Bar'
Invoice.create! :user =&amp;gt; User.last

Invoice.last
# throws:
# 'ActiveRecord::SerializationTypeMismatch: user was supposed to be a User, but was a String'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm not sure if this just an understanding issue from my side
(serializing arbitrary non-AR classes works fine), or if this
really a bug. Is it not possible to serialize AR classes? Currently
I'm working with a workaround, that rebuilds the object from a
serialized attributes hash, but I thought that serialize would do
this already.&lt;/p&gt;
&lt;p&gt;Any help to clarify this is really appreciated and thank you in
advance for your effort.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi there,

I have an issue with the ActiveRecord serialization in Rails 3.0.3 (Ruby 1.8.7 and 1.9.2):

Given two ActiveRecord models:

@@@ ruby
class User &lt; ActiveRecord::Base
  # has one string column 'name'
end

class Invoice &lt; ActiveRecord::Base
  serialize :user, User
end
@@@

When I run the following code it throws an exception

@@@ ruby
User.create! :name =&gt; 'Foo Bar'
Invoice.create! :user =&gt; User.last

Invoice.last
# throws:
# 'ActiveRecord::SerializationTypeMismatch: user was supposed to be a User, but was a String'
@@@

I'm not sure if this just an understanding issue from my side (serializing arbitrary non-AR classes works fine), or if this really a bug. Is it not possible to serialize AR classes? Currently I'm working with a workaround, that rebuilds the object from a serialized attributes hash, but I thought that serialize would do this already.

Any help to clarify this is really appreciated and thank you in advance for your effort.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi there,&lt;/p&gt;
&lt;p&gt;I have an issue with the ActiveRecord serialization in Rails
3.0.3 (Ruby 1.8.7 and 1.9.2):&lt;/p&gt;
&lt;p&gt;Given two ActiveRecord models:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  # has one string column 'name'
end

class Invoice &amp;lt; ActiveRecord::Base
  serialize :user, User
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When I run the following code it throws an exception&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;User.create! :name =&amp;gt; 'Foo Bar'
Invoice.create! :user =&amp;gt; User.last

Invoice.last
# throws:
# 'ActiveRecord::SerializationTypeMismatch: user was supposed to be a User, but was a String'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm not sure if this just an understanding issue from my side
(serializing arbitrary non-AR classes works fine), or if this
really a bug. Is it not possible to serialize AR classes? Currently
I'm working with a workaround, that rebuilds the object from a
serialized attributes hash, but I thought that serialize would do
this already.&lt;/p&gt;
&lt;p&gt;Any help to clarify this is really appreciated and thank you in
advance for your effort.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-03T10:44:41+00:00</created-at>
      <creator-id type="integer">127683</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6109</number>
      <permalink>activerecord-serialization-throws-serializationtypemismatch-if-i-try-to-serialize-a-ar-object</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord serialization throws SerializationTypeMismatch if I try to serialize a AR object</title>
      <updated-at type="datetime">2010-12-03T10:45:19+00:00</updated-at>
      <user-id type="integer">127683</user-id>
      <version type="integer">1</version>
      <user-name>rmehner</user-name>
      <creator-name>rmehner</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6109</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am not able to reproduce this problem in Rails edge.

@@@ ruby
class Brake &lt; ActiveRecord::Base

  serialize :car, Car

end

ree-1.8.7-2010.02 &gt; Car.create! :name =&gt; 'honda'
   (0.2ms)   SELECT name
 FROM sqlite_master
 WHERE type = 'table' AND NOT name = 'sqlite_sequence'

  AREL (0.3ms)  INSERT INTO &quot;cars&quot; (&quot;name&quot;) VALUES ('honda')
 =&gt; #&lt;Car id: 1, name: &quot;honda&quot;&gt; 
ree-1.8.7-2010.02 &gt; Brake.create! :car =&gt; Car.last
  Car Load (0.3ms)  SELECT &quot;cars&quot;.* FROM &quot;cars&quot; ORDER BY cars.id DESC LIMIT 1
  AREL (0.5ms)  INSERT INTO &quot;brakes&quot; (&quot;car&quot;) VALUES ('--- !ruby/object:Car 
attributes: 
 name: honda
 id: 1
attributes_cache: {}

changed_attributes: {}

destroyed: false
marked_for_destruction: false
new_record: false
previously_changed: {}

readonly: false
')
 =&gt; #&lt;Brake id: 1, car: #&lt;Car id: 1, name: &quot;honda&quot;&gt;&gt; 
ree-1.8.7-2010.02 &gt; Brake.last
  Brake Load (0.4ms)  SELECT &quot;brakes&quot;.* FROM &quot;brakes&quot; ORDER BY brakes.id DESC LIMIT 1
 =&gt; #&lt;Brake id: 1, car: #&lt;Car id: 1, name: &quot;honda&quot;&gt;&gt; 
ree-1.8.7-2010.02 &gt; 

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am not able to reproduce this problem in Rails edge.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Brake &amp;lt; ActiveRecord::Base

  serialize :car, Car

end

ree-1.8.7-2010.02 &amp;gt; Car.create! :name =&amp;gt; 'honda'
   (0.2ms)   SELECT name
 FROM sqlite_master
 WHERE type = 'table' AND NOT name = 'sqlite_sequence'

  AREL (0.3ms)  INSERT INTO &quot;cars&quot; (&quot;name&quot;) VALUES ('honda')
 =&amp;gt; #&amp;lt;Car id: 1, name: &quot;honda&quot;&amp;gt; 
ree-1.8.7-2010.02 &amp;gt; Brake.create! :car =&amp;gt; Car.last
  Car Load (0.3ms)  SELECT &quot;cars&quot;.* FROM &quot;cars&quot; ORDER BY cars.id DESC LIMIT 1
  AREL (0.5ms)  INSERT INTO &quot;brakes&quot; (&quot;car&quot;) VALUES ('--- !ruby/object:Car 
attributes: 
 name: honda
 id: 1
attributes_cache: {}

changed_attributes: {}

destroyed: false
marked_for_destruction: false
new_record: false
previously_changed: {}

readonly: false
')
 =&amp;gt; #&amp;lt;Brake id: 1, car: #&amp;lt;Car id: 1, name: &quot;honda&quot;&amp;gt;&amp;gt; 
ree-1.8.7-2010.02 &amp;gt; Brake.last
  Brake Load (0.4ms)  SELECT &quot;brakes&quot;.* FROM &quot;brakes&quot; ORDER BY brakes.id DESC LIMIT 1
 =&amp;gt; #&amp;lt;Brake id: 1, car: #&amp;lt;Car id: 1, name: &quot;honda&quot;&amp;gt;&amp;gt; 
ree-1.8.7-2010.02 &amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-04T09:25:02+00:00</created-at>
      <creator-id type="integer">127683</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6109</number>
      <permalink>activerecord-serialization-throws-serializationtypemismatch-if-i-try-to-serialize-a-ar-object</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord serialization throws SerializationTypeMismatch if I try to serialize a AR object</title>
      <updated-at type="datetime">2010-12-04T09:25:09+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>rmehner</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6109</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;a href=&quot;http://www.newpowerbiz.com/productlist.asp?id=n125&quot;&gt;replica ed hardy long sleeve t shirts for men&lt;/a&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;http://www.newpowerbiz.com/productlist.asp?id=n125&quot;&gt;replica ed
hardy long sleeve t shirts for men&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-04T12:57:49+00:00</created-at>
      <creator-id type="integer">127683</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6109</number>
      <permalink>activerecord-serialization-throws-serializationtypemismatch-if-i-try-to-serialize-a-ar-object</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord serialization throws SerializationTypeMismatch if I try to serialize a AR object</title>
      <updated-at type="datetime">2010-12-04T12:57:57+00:00</updated-at>
      <user-id type="integer">127797</user-id>
      <version type="integer">3</version>
      <user-name>newpowerbiz</user-name>
      <creator-name>rmehner</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6109</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thank you Neeraj,

it's indeed fixed in Edge Rails. Unfortunately not in the stable releases.

Thank you for pointing me to the right direction and for your effort.

Greetings,
- Robin</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thank you Neeraj,&lt;/p&gt;
&lt;p&gt;it's indeed fixed in Edge Rails. Unfortunately not in the stable
releases.&lt;/p&gt;
&lt;p&gt;Thank you for pointing me to the right direction and for your
effort.&lt;/p&gt;
&lt;p&gt;Greetings,&lt;br&gt;
- Robin&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-04T17:52:59+00:00</created-at>
      <creator-id type="integer">127683</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6109</number>
      <permalink>activerecord-serialization-throws-serializationtypemismatch-if-i-try-to-serialize-a-ar-object</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord serialization throws SerializationTypeMismatch if I try to serialize a AR object</title>
      <updated-at type="datetime">2010-12-04T17:53:05+00:00</updated-at>
      <user-id type="integer">127683</user-id>
      <version type="integer">4</version>
      <user-name>rmehner</user-name>
      <creator-name>rmehner</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6109</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-04T17:59:05+00:00</created-at>
      <creator-id type="integer">127683</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6109</number>
      <permalink>activerecord-serialization-throws-serializationtypemismatch-if-i-try-to-serialize-a-ar-object</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>ActiveRecord serialization throws SerializationTypeMismatch if I try to serialize a AR object</title>
      <updated-at type="datetime">2010-12-04T17:59:14+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">5</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>rmehner</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6109</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>### A workaround for Rails 3.0.3:

I spent a while scanning through commit between July 28 and December 4 and could not find a patch that atomically fixed this.

If you need to stay on the stable brach for the time being, this can serve as a workaround. Change this:

      def []=(key, value)
        @keys &lt;&lt; key unless has_key?(key)
        super
      end

to this:

      def []=(key, value)
        (@keys||=[]) &lt;&lt; key unless has_key?(key)
        super
      end

in `active_support/ordered_hash.rb`. I know it's kind of ugly, but it's the smallest change that resolves the issue.</body>
      <body-html>&lt;div&gt;&lt;h3&gt;A workaround for Rails 3.0.3:&lt;/h3&gt;
&lt;p&gt;I spent a while scanning through commit between July 28 and
December 4 and could not find a patch that atomically fixed
this.&lt;/p&gt;
&lt;p&gt;If you need to stay on the stable brach for the time being, this
can serve as a workaround. Change this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def []=(key, value)
    @keys &amp;lt;&amp;lt; key unless has_key?(key)
    super
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def []=(key, value)
    (@keys||=[]) &amp;lt;&amp;lt; key unless has_key?(key)
    super
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;in &lt;code&gt;active_support/ordered_hash.rb&lt;/code&gt;. I know it's kind
of ugly, but it's the smallest change that resolves the issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-11T17:11:51+00:00</created-at>
      <creator-id type="integer">127683</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6109</number>
      <permalink>activerecord-serialization-throws-serializationtypemismatch-if-i-try-to-serialize-a-ar-object</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;workaround yaml serialize 3.0.3 issue&quot;</tag>
      <title>ActiveRecord serialization throws SerializationTypeMismatch if I try to serialize a AR object</title>
      <updated-at type="datetime">2011-01-11T17:12:08+00:00</updated-at>
      <user-id type="integer">95171</user-id>
      <version type="integer">6</version>
      <user-name>Bob Lail</user-name>
      <creator-name>rmehner</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6109</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>BTW, a short test for the problem is:

`YAML.load &quot;--- \n- &amp;id001 !ruby/object:MonthlyOccurrence \n  errors: !ruby/object:ActiveModel::Errors\n    base: *id001\n    hash: {}\n\n  kind: day\n  ordinal: 1&quot;`

This works on Rails 2.3.9 and fails on Rails 3.0.3. (You don't need to have a `MonthlyOccurrence` class defined in your project for YAML.load to work.) The stack trace shows there to be an issue deserializing OrderedHash, which is superclass of ActiveModel::Errors.</body>
      <body-html>&lt;div&gt;&lt;p&gt;BTW, a short test for the problem is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;YAML.load &quot;--- \n- &amp;amp;id001
!ruby/object:MonthlyOccurrence \n errors:
!ruby/object:ActiveModel::Errors\n base: *id001\n hash: {}\n\n
kind: day\n ordinal: 1&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This works on Rails 2.3.9 and fails on Rails 3.0.3. (You don't
need to have a &lt;code&gt;MonthlyOccurrence&lt;/code&gt; class defined in your
project for YAML.load to work.) The stack trace shows there to be
an issue deserializing OrderedHash, which is superclass of
ActiveModel::Errors.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-11T17:15:50+00:00</created-at>
      <creator-id type="integer">127683</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6109</number>
      <permalink>activerecord-serialization-throws-serializationtypemismatch-if-i-try-to-serialize-a-ar-object</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>&quot;workaround yaml serialize 3.0.3 issue&quot;</tag>
      <title>ActiveRecord serialization throws SerializationTypeMismatch if I try to serialize a AR object</title>
      <updated-at type="datetime">2011-01-11T17:15:59+00:00</updated-at>
      <user-id type="integer">95171</user-id>
      <version type="integer">7</version>
      <user-name>Bob Lail</user-name>
      <creator-name>rmehner</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6109</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
