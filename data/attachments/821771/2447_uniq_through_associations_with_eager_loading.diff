From c46fc71af6c6c603df30af8b6b7a975b78681aba Mon Sep 17 00:00:00 2001
From: Jon Leighton <j@jonathanleighton.com>
Date: Thu, 16 Dec 2010 00:40:03 +0000
Subject: [PATCH] Fix problem with duplicated records when a :uniq :through association is preloaded [#2447 state:resolved]

---
 .../lib/active_record/association_preload.rb       |    1 +
 activerecord/test/cases/associations/eager_test.rb |    9 ++++++++-
 .../has_many_through_associations_test.rb          |    8 +++++++-
 3 files changed, 16 insertions(+), 2 deletions(-)

diff --git a/activerecord/lib/active_record/association_preload.rb b/activerecord/lib/active_record/association_preload.rb
index 5eb1071..f209428 100644
--- a/activerecord/lib/active_record/association_preload.rb
+++ b/activerecord/lib/active_record/association_preload.rb
@@ -251,6 +251,7 @@ module ActiveRecord
               through_record_id = through_record[reflection.through_reflection_primary_key].to_s
               add_preloaded_records_to_collection(id_to_record_map[through_record_id], reflection.name, through_record.send(source))
             end
+            records.each { |record| record.send(reflection.name).target.uniq! } if options[:uniq]
           end
 
         else
diff --git a/activerecord/test/cases/associations/eager_test.rb b/activerecord/test/cases/associations/eager_test.rb
index 34a1cde..d5262b1 100644
--- a/activerecord/test/cases/associations/eager_test.rb
+++ b/activerecord/test/cases/associations/eager_test.rb
@@ -20,10 +20,11 @@ require 'models/project'
 require 'models/member'
 require 'models/membership'
 require 'models/club'
+require 'models/categorization'
 
 class EagerAssociationTest < ActiveRecord::TestCase
   fixtures :posts, :comments, :authors, :author_addresses, :categories, :categories_posts,
-            :companies, :accounts, :tags, :taggings, :people, :readers,
+            :companies, :accounts, :tags, :taggings, :people, :readers, :categorizations,
             :owners, :pets, :author_favorites, :jobs, :references, :subscribers, :subscriptions, :books,
             :developers, :projects, :developers_projects, :members, :memberships, :clubs
 
@@ -910,4 +911,10 @@ class EagerAssociationTest < ActiveRecord::TestCase
     assert_queries(2) { @tagging = Tagging.preload(:taggable).find(t.id) }
     assert_no_queries { assert ! @tagging.taggable }
   end
+
+  def test_preloading_has_many_through_with_uniq
+    mary = Author.includes(:unique_categorized_posts).where(:id => authors(:mary).id).first
+    assert_equal 1, mary.unique_categorized_posts.length
+    assert_equal 1, mary.unique_categorized_post_ids.length
+  end
 end
diff --git a/activerecord/test/cases/associations/has_many_through_associations_test.rb b/activerecord/test/cases/associations/has_many_through_associations_test.rb
index 44ff01d..77bc369 100644
--- a/activerecord/test/cases/associations/has_many_through_associations_test.rb
+++ b/activerecord/test/cases/associations/has_many_through_associations_test.rb
@@ -23,7 +23,7 @@ require 'models/category'
 class HasManyThroughAssociationsTest < ActiveRecord::TestCase
   fixtures :posts, :readers, :people, :comments, :authors,
            :owners, :pets, :toys, :jobs, :references, :companies,
-           :subscribers, :books, :subscriptions, :developers
+           :subscribers, :books, :subscriptions, :developers, :categorizations
 
   # Dummies to force column loads so query counts are clean.
   def setup
@@ -473,4 +473,10 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase
     category = authors(:david).special_categories.create(:name => "Foo")
     assert_equal 1, category.categorizations.where(:special => true).count
   end
+
+  def test_joining_has_many_through_with_uniq
+    mary = Author.joins(:unique_categorized_posts).where(:id => authors(:mary).id).first
+    assert_equal 1, mary.unique_categorized_posts.length
+    assert_equal 1, mary.unique_categorized_post_ids.length
+  end
 end
-- 
1.7.1

