<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-31T22:47:01+01:00</created-at>
  <creator-id type="integer">16155</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">946</number>
  <permalink>pass-blocks-to-beforeafter-filter-methods-using-with-option</permalink>
  <priority type="integer">392</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>actionpack controller enhancement patch tested</tag>
  <title>Pass blocks to before/after filter methods using :with option</title>
  <updated-at type="datetime">2008-09-10T05:50:32+01:00</updated-at>
  <user-id type="integer">83</user-id>
  <version type="integer">3</version>
  <user-name>DHH</user-name>
  <creator-name>Brennan Dunn</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/946</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I recently found a need to have an application-wide before_filter perform differently from certain controllers. I thought it could be useful to do something like:

@@@ ruby
class ApplicationController &lt; ActionController::Base
  protected
    def redirect_unless_logged_in
      block_given? ? yield(self) : redirect_to(login_path)
    end
end

class SpecialController
  before_filter :redirect_unless_logged_in, :with =&gt; proc { |c| c.redirect_to special_login_path }
end
@@@

Obviously, this wouldn't work for an around filter.</original-body>
  <latest-body>I recently found a need to have an application-wide before_filter perform differently from certain controllers. I thought it could be useful to do something like:

@@@ ruby
class ApplicationController &lt; ActionController::Base
  protected
    def redirect_unless_logged_in
      block_given? ? yield(self) : redirect_to(login_path)
    end
end

class SpecialController
  before_filter :redirect_unless_logged_in, :with =&gt; proc { |c| c.redirect_to special_login_path }
end
@@@

Obviously, this wouldn't work for an around filter.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I recently found a need to have an application-wide
before_filter perform differently from certain controllers. I
thought it could be useful to do something like:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class ApplicationController &amp;lt; ActionController::Base
  protected
    def redirect_unless_logged_in
      block_given? ? yield(self) : redirect_to(login_path)
    end
end

class SpecialController
  before_filter :redirect_unless_logged_in, :with =&amp;gt; proc { |c| c.redirect_to special_login_path }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, this wouldn't work for an around filter.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I recently found a need to have an application-wide before_filter perform differently from certain controllers. I thought it could be useful to do something like:

@@@ ruby
class ApplicationController &lt; ActionController::Base
  protected
    def redirect_unless_logged_in
      block_given? ? yield(self) : redirect_to(login_path)
    end
end

class SpecialController
  before_filter :redirect_unless_logged_in, :with =&gt; proc { |c| c.redirect_to special_login_path }
end
@@@

Obviously, this wouldn't work for an around filter.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I recently found a need to have an application-wide
before_filter perform differently from certain controllers. I
thought it could be useful to do something like:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class ApplicationController &amp;lt; ActionController::Base
  protected
    def redirect_unless_logged_in
      block_given? ? yield(self) : redirect_to(login_path)
    end
end

class SpecialController
  before_filter :redirect_unless_logged_in, :with =&amp;gt; proc { |c| c.redirect_to special_login_path }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, this wouldn't work for an around filter.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-31T22:47:03+01:00</created-at>
      <creator-id type="integer">16155</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">946</number>
      <permalink>pass-blocks-to-beforeafter-filter-methods-using-with-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack controller enhancement patch tested</tag>
      <title>Pass blocks to before/after filter methods using :with option</title>
      <updated-at type="datetime">2008-08-31T22:47:03+01:00</updated-at>
      <user-id type="integer">16155</user-id>
      <version type="integer">1</version>
      <user-name>Brennan Dunn</user-name>
      <creator-name>Brennan Dunn</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/946</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Typo in documentation. SpecialController should extend ApplicationController (applies to ticket example, also).

Revised patch attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Typo in documentation. SpecialController should extend
ApplicationController (applies to ticket example, also).&lt;/p&gt;
&lt;p&gt;Revised patch attached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-31T22:48:57+01:00</created-at>
      <creator-id type="integer">16155</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">946</number>
      <permalink>pass-blocks-to-beforeafter-filter-methods-using-with-option-2</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack controller enhancement patch tested</tag>
      <title>Pass blocks to before/after filter methods using :with option</title>
      <updated-at type="datetime">2008-08-31T22:48:57+01:00</updated-at>
      <user-id type="integer">16155</user-id>
      <version type="integer">2</version>
      <user-name>Brennan Dunn</user-name>
      <creator-name>Brennan Dunn</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/946</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>When you want something special, you can just overwrite redirect_unless_logged_in in the SpecialController. It'll work by inheritance.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When you want something special, you can just overwrite
redirect_unless_logged_in in the SpecialController. It'll work by
inheritance.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-09-10T05:50:02+01:00</created-at>
      <creator-id type="integer">16155</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">946</number>
      <permalink>pass-blocks-to-beforeafter-filter-methods-using-with-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>actionpack controller enhancement patch tested</tag>
      <title>Pass blocks to before/after filter methods using :with option</title>
      <updated-at type="datetime">2008-09-10T05:50:32+01:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">3</version>
      <user-name>DHH</user-name>
      <creator-name>Brennan Dunn</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/946</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>6e5b82bfe62f9f6bb51769c6b94ee6fc8eec2a07</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-31T22:48:57+01:00</created-at>
      <filename>blocks_to_filter_methods.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">42839</id>
      <size type="integer">4146</size>
      <uploader-id type="integer">16155</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/42839/blocks_to_filter_methods.patch</url>
    </attachment>
  </attachments>
</ticket>
