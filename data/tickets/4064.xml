<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-14T07:28:43+00:00</created-at>
  <creator-id type="integer">11310</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4064</number>
  <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord default_scope validates_uniqueness_of</tag>
  <title>validates_uniqueness_of should honor default_scope (or not)</title>
  <updated-at type="datetime">2011-02-14T07:28:43+00:00</updated-at>
  <user-id type="integer">121188</user-id>
  <version type="integer">17</version>
  <user-name>lichtamberg</user-name>
  <creator-name>Andreas Korth</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
  <priority-name>Low</priority-name>
  <original-body>A model that has a default_scope with :conditions will not use this scope in uniqueness validations. I consider this the wrong behavior, but maybe I just fail to see the rationale behind it. Since default_scope is so fundamental and applies to all database operations I'd expect it to be honored in uniqueness validations as well.

I'll be happy to provide a patch if there is agreement upon this being the desired behavior.</original-body>
  <latest-body>A model that has a default_scope with :conditions will not use this scope in uniqueness validations. I consider this the wrong behavior, but maybe I just fail to see the rationale behind it. Since default_scope is so fundamental and applies to all database operations I'd expect it to be honored in uniqueness validations as well.

I'll be happy to provide a patch if there is agreement upon this being the desired behavior.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;A model that has a default_scope with :conditions will not use
this scope in uniqueness validations. I consider this the wrong
behavior, but maybe I just fail to see the rationale behind it.
Since default_scope is so fundamental and applies to all database
operations I'd expect it to be honored in uniqueness validations as
well.&lt;/p&gt;
&lt;p&gt;I'll be happy to provide a patch if there is agreement upon this
being the desired behavior.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A model that has a default_scope with :conditions will not use this scope in uniqueness validations. I consider this the wrong behavior, but maybe I just fail to see the rationale behind it. Since default_scope is so fundamental and applies to all database operations I'd expect it to be honored in uniqueness validations as well.

I'll be happy to provide a patch if there is agreement upon this being the desired behavior.</body>
      <body-html>&lt;div&gt;&lt;p&gt;A model that has a default_scope with :conditions will not use
this scope in uniqueness validations. I consider this the wrong
behavior, but maybe I just fail to see the rationale behind it.
Since default_scope is so fundamental and applies to all database
operations I'd expect it to be honored in uniqueness validations as
well.&lt;/p&gt;
&lt;p&gt;I'll be happy to provide a patch if there is agreement upon this
being the desired behavior.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-26T14:25:24+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-02-26T14:25:26+00:00</updated-at>
      <user-id type="integer">11310</user-id>
      <version type="integer">1</version>
      <user-name>Andreas Korth</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1

This is killing me right now!</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;This is killing me right now!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-27T05:58:19+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-27T05:58:23+00:00</updated-at>
      <user-id type="integer">19750</user-id>
      <version type="integer">2</version>
      <user-name>David Jones</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think it should not use the default scope. You have to explicitly give it to validate_uniqueness_of. If we make it a default, it will be hard to opt-out, so I prefer explicit opt-in.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think it should not use the default scope. You have to
explicitly give it to validate_uniqueness_of. If we make it a
default, it will be hard to opt-out, so I prefer explicit
opt-in.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-27T12:06:44+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-27T12:06:45+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">3</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-27T12:07:56+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-27T12:08:02+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">4</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Imagine this case:

@@@ ruby
class Post &lt; ActiveRecord::Base
  default_scope :public =&gt; true
  validates_uniqueness_of :name
end

Post.create(:name =&gt; &quot;wycats&quot;, :public =&gt; false)
Post.create(:name =&gt; &quot;wycats&quot;)
@@@

With this proposal, the second post would be created, because the constraint is implicitly on :public =&gt; true, and there is no &quot;wycats&quot; with :public =&gt; true yet. This seems bad, no?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Imagine this case:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Post &amp;lt; ActiveRecord::Base
  default_scope :public =&amp;gt; true
  validates_uniqueness_of :name
end

Post.create(:name =&amp;gt; &quot;wycats&quot;, :public =&amp;gt; false)
Post.create(:name =&amp;gt; &quot;wycats&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With this proposal, the second post would be created, because
the constraint is implicitly on :public =&amp;gt; true, and there is no
&quot;wycats&quot; with :public =&amp;gt; true yet. This seems bad, no?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-27T12:14:17+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-27T12:14:18+00:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">5</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Jos&#233;: Don't you think your decision is arbitrary? By the same token, I could argue that the default scope should not be honored in delete operations since opting-in on something destructive is clearly better.

So my argument still stands (inconsistent bahavior) and I would love to hear a rationale (rather than merely an opinion) on why this behavior should be kept.

@Yehuda: Thanks for the example.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Jos&amp;eacute;: Don't you think your decision is arbitrary? By the
same token, I could argue that the default scope should not be
honored in delete operations since opting-in on something
destructive is clearly better.&lt;/p&gt;
&lt;p&gt;So my argument still stands (inconsistent bahavior) and I would
love to hear a rationale (rather than merely an opinion) on why
this behavior should be kept.&lt;/p&gt;
&lt;p&gt;@Yehuda: Thanks for the example.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-27T15:02:07+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-27T15:02:09+00:00</updated-at>
      <user-id type="integer">11310</user-id>
      <version type="integer">6</version>
      <user-name>Andreas Korth</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yehuda's example is exactly why I think it should not be used by default. Most of cases, like public above, it would surprise me. It should be opt-in, and not automatic.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yehuda's example is exactly why I think it should not be used by
default. Most of cases, like public above, it would surprise me. It
should be opt-in, and not automatic.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-27T15:06:02+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-27T15:06:04+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">7</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Don't get me wrong, I can definitely see some cases where the behavior would be positive, like using it in single table inheritance, as Pratik tells us here:

http://m.onkey.org/2009/3/24/default-scopes-and-inheritance-to-the-rescue

But I can see in other bunch of cases, like public above, where it's really a bad idea. Besides, if we change it, a lot of business logic will break in several applications which relies in the current behavior.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Don't get me wrong, I can definitely see some cases where the
behavior would be positive, like using it in single table
inheritance, as Pratik tells us here:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://m.onkey.org/2009/3/24/default-scopes-and-inheritance-to-the-rescue&quot;&gt;
http://m.onkey.org/2009/3/24/default-scopes-and-inheritance-to-the-...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But I can see in other bunch of cases, like public above, where
it's really a bad idea. Besides, if we change it, a lot of business
logic will break in several applications which relies in the
current behavior.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-27T15:34:29+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-27T15:34:30+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">8</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&quot;if we change it, a lot of business logic will break in several applications which relies in the current behavior.&quot;

Oh, the Microsoft argument! Don't you think we should keep that attitude away from Rails as long as possible ;-)

Seriously, every other database operation and validation in Rails _does_ honor the default_scope. Why does validates_uniqueness_of get a different treatment? (purely rhetorical question)

So we have one contrived example vs. two real world scenarios in which it is not the desired behavior. Your call.

As a side note: after looking at the code for validates_uniqueness_of I realized that it is broken to begin with and I decided to bake my own uniqueness validation that actually works. As soon as time permits I'm going to pluginize and put it on GitHub and post it here. So Rails can go with the existing behavior and those who want to have it the other way can use the plugin.

Thanks for your thoughts, guys!</body>
      <body-html>&lt;div&gt;&lt;p&gt;&quot;if we change it, a lot of business logic will break in several
applications which relies in the current behavior.&quot;&lt;/p&gt;
&lt;p&gt;Oh, the Microsoft argument! Don't you think we should keep that
attitude away from Rails as long as possible ;-)&lt;/p&gt;
&lt;p&gt;Seriously, every other database operation and validation in
Rails &lt;em&gt;does&lt;/em&gt; honor the default_scope. Why does
validates_uniqueness_of get a different treatment? (purely
rhetorical question)&lt;/p&gt;
&lt;p&gt;So we have one contrived example vs. two real world scenarios in
which it is not the desired behavior. Your call.&lt;/p&gt;
&lt;p&gt;As a side note: after looking at the code for
validates_uniqueness_of I realized that it is broken to begin with
and I decided to bake my own uniqueness validation that actually
works. As soon as time permits I'm going to pluginize and put it on
GitHub and post it here. So Rails can go with the existing behavior
and those who want to have it the other way can use the plugin.&lt;/p&gt;
&lt;p&gt;Thanks for your thoughts, guys!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-29T01:05:39+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-29T01:05:44+01:00</updated-at>
      <user-id type="integer">11310</user-id>
      <version type="integer">9</version>
      <user-name>Andreas Korth</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I just looked at three applications that I developed in the last six months and all three wouldn't benefit from this change, because they have a use case like :public (one of them is also using :published). So why are they contrived examples? Because they do not support your patch? (don't worry, rhetorical question)

&quot;Seriously, every other database operation and validation in Rails does honor the default_scope. Why does validates_uniqueness_of get a different treatment?&quot;

Btw, no other validations uses the default_scope. A patch where you could say :use_default_scope to validates_uniqueness_of would be ok, but I'm still -1 making it the default.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just looked at three applications that I developed in the last
six months and all three wouldn't benefit from this change, because
they have a use case like :public (one of them is also using
:published). So why are they contrived examples? Because they do
not support your patch? (don't worry, rhetorical question)&lt;/p&gt;
&lt;p&gt;&quot;Seriously, every other database operation and validation in
Rails does honor the default_scope. Why does
validates_uniqueness_of get a different treatment?&quot;&lt;/p&gt;
&lt;p&gt;Btw, no other validations uses the default_scope. A patch where
you could say :use_default_scope to validates_uniqueness_of would
be ok, but I'm still -1 making it the default.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-29T09:10:34+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-29T09:46:19+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">10</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, sarcastic tones aside, yes, I still think that I have the stronger argument. The &quot;public&quot; example above would be a good candidate for a named_scope but _not_ default_scope. Consider this:

    Post.all(:conditions =&gt; {:public =&gt; false})

Will this return all non-public post? It certainly won't since the default scope kicks in adding another condition for public posts and you end up with no posts at all. So default_scope is not really a _default_ scope. It's an _ultimate_ scope that you cannot get around using the public interface of a model. It is as fundamental as set_table_name.

That's why I was calling Yehuda's example contrived. Using default_scope in this manner would quickly turn out to be impractical in a real application, because at some point you would want to access non-public posts as well. I wonder how you do this with your &quot;unpublished&quot; things in the example you gave.

As to Pratik's example, let's just say it's a creative use of inheritance but it is only marginally related to the topic we're discussing here.

Maybe I have a different understanding of default_scope than the rest of the world and that's why I chose to write my own uniqueness validation that is compatible with my interpretation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, sarcastic tones aside, yes, I still think that I have the
stronger argument. The &quot;public&quot; example above would be a good
candidate for a named_scope but &lt;em&gt;not&lt;/em&gt; default_scope.
Consider this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Post.all(:conditions =&amp;gt; {:public =&amp;gt; false})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Will this return all non-public post? It certainly won't since
the default scope kicks in adding another condition for public
posts and you end up with no posts at all. So default_scope is not
really a &lt;em&gt;default&lt;/em&gt; scope. It's an &lt;em&gt;ultimate&lt;/em&gt; scope
that you cannot get around using the public interface of a model.
It is as fundamental as set_table_name.&lt;/p&gt;
&lt;p&gt;That's why I was calling Yehuda's example contrived. Using
default_scope in this manner would quickly turn out to be
impractical in a real application, because at some point you would
want to access non-public posts as well. I wonder how you do this
with your &quot;unpublished&quot; things in the example you gave.&lt;/p&gt;
&lt;p&gt;As to Pratik's example, let's just say it's a creative use of
inheritance but it is only marginally related to the topic we're
discussing here.&lt;/p&gt;
&lt;p&gt;Maybe I have a different understanding of default_scope than the
rest of the world and that's why I chose to write my own uniqueness
validation that is compatible with my interpretation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-29T13:04:59+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-29T13:05:02+01:00</updated-at>
      <user-id type="integer">11310</user-id>
      <version type="integer">11</version>
      <user-name>Andreas Korth</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you have 10 places where you need **public** or **published** tasks and just one place where you need all tasks, I do use **default_scope**. If I want to get rid of the **public** scope, I use **unscoped** on Rails 3 or **with_exclusive_scope** on Rails 2.3.

    class Task &lt; ActiveRecord::Base
      default_scope where(:public =&gt; true)
    end

    Task.unscoped.all #=&gt; brings all tasks

And this is actually a good pattern. If I want to show private tasks it requires me to do it explicitly, becoming harder to expose them accidentally.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you have 10 places where you need &lt;strong&gt;public&lt;/strong&gt; or
&lt;strong&gt;published&lt;/strong&gt; tasks and just one place where you need
all tasks, I do use &lt;strong&gt;default_scope&lt;/strong&gt;. If I want to
get rid of the &lt;strong&gt;public&lt;/strong&gt; scope, I use
&lt;strong&gt;unscoped&lt;/strong&gt; on Rails 3 or
&lt;strong&gt;with_exclusive_scope&lt;/strong&gt; on Rails 2.3.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Task &amp;lt; ActiveRecord::Base
  default_scope where(:public =&amp;gt; true)
end

Task.unscoped.all #=&amp;gt; brings all tasks&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And this is actually a good pattern. If I want to show private
tasks it requires me to do it explicitly, becoming harder to expose
them accidentally.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-29T13:18:07+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-29T13:26:41+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">12</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>FYI

    Task.with_exlusive_scope.all

doesn't work in 2.3 - it's a protected method. 

If it's actually a good pattern to pull authorization from the controller layer, where it belongs into the model layer remains controversial. My preferred approach to make sure I don't expose anything accidentially is to have an appropriate test in place. YMMV.

Still not convinced, but let's just leave it at that, ok?</body>
      <body-html>&lt;div&gt;&lt;p&gt;FYI&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Task.with_exlusive_scope.all&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;doesn't work in 2.3 - it's a protected method.&lt;/p&gt;
&lt;p&gt;If it's actually a good pattern to pull authorization from the
controller layer, where it belongs into the model layer remains
controversial. My preferred approach to make sure I don't expose
anything accidentially is to have an appropriate test in place.
YMMV.&lt;/p&gt;
&lt;p&gt;Still not convinced, but let's just leave it at that, ok?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-29T16:48:48+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-29T16:48:52+01:00</updated-at>
      <user-id type="integer">11310</user-id>
      <version type="integer">13</version>
      <user-name>Andreas Korth</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>My bad! I have the habit to make the method public, we even had a patch to make it public on the Rails repo, have to check if it was applied.

Better to leave at it, otherwise we would discuss how setting a default scope is pushing all the authorization layer to the model. ;) I still prefer to avoid writing Task.public all over the place.</body>
      <body-html>&lt;div&gt;&lt;p&gt;My bad! I have the habit to make the method public, we even had
a patch to make it public on the Rails repo, have to check if it
was applied.&lt;/p&gt;
&lt;p&gt;Better to leave at it, otherwise we would discuss how setting a
default scope is pushing all the authorization layer to the model.
;) I still prefer to avoid writing Task.public all over the
place.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-29T17:45:42+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-29T17:46:27+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">14</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Totally unrelated, but +1 for making *with_exlusive_scope* public by default :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Totally unrelated, but +1 for making
&lt;em&gt;with_exlusive_scope&lt;/em&gt; public by default :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-29T17:49:55+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-03-29T17:49:58+01:00</updated-at>
      <user-id type="integer">11310</user-id>
      <version type="integer">15</version>
      <user-name>Andreas Korth</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Could you tell me how to tell validates_uniqueness_of to use the default_scope?
I'm using authlogic and rails3_acts_as_paranoid... 
And I can't get authlogic to work with the case when a user deletes his account and registers new with the same login - validates_uniqueness_of :login validates the uniqueness without ignoring the deleted records - and the default_scope is :active =&gt; true...

Could you help me?

See also: http://stackoverflow.com/questions/3990644/authlogic-rails3-acts-as-paranoid-and-validates-uniqueness-of-login-default-s</body>
      <body-html>&lt;div&gt;&lt;p&gt;Could you tell me how to tell validates_uniqueness_of to use the
default_scope?&lt;br&gt;
I'm using authlogic and rails3_acts_as_paranoid...&lt;br&gt;
And I can't get authlogic to work with the case when a user deletes
his account and registers new with the same login -
validates_uniqueness_of :login validates the uniqueness without
ignoring the deleted records - and the default_scope is :active
=&amp;gt; true...&lt;/p&gt;
&lt;p&gt;Could you help me?&lt;/p&gt;
&lt;p&gt;See also: &lt;a href=
&quot;http://stackoverflow.com/questions/3990644/authlogic-rails3-acts-as-paranoid-and-validates-uniqueness-of-login-default-s&quot;&gt;
http://stackoverflow.com/questions/3990644/authlogic-rails3-acts-as...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-21T19:39:27+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-10-21T19:39:30+01:00</updated-at>
      <user-id type="integer">121188</user-id>
      <version type="integer">16</version>
      <user-name>lichtamberg</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Beside my question, i like Andreas Korth mentioned behaviour more...</body>
      <body-html>&lt;div&gt;&lt;p&gt;Beside my question, i like Andreas Korth mentioned behaviour
more...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-21T19:44:14+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2010-10-21T19:44:15+01:00</updated-at>
      <user-id type="integer">121188</user-id>
      <version type="integer">17</version>
      <user-name>lichtamberg</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>thank you very much......&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/&quot;&gt;&#1605;&#1606;&#1578;&#1583;&#1610;&#1575;&#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f86.html&quot;&gt;&#1605;&#1603;&#1610;&#1575;&#1580;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&#1575;&#1586;&#1610;&#1575;&#1569;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&#1601;&#1587;&#1575;&#1578;&#1610;&#1606;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f17.html&quot;&gt;&#1585;&#1587;&#1575;&#1574;&#1604; 
- &#1605;&#1587;&#1580;&#1575;&#1578; - &#1608;&#1587;&#1575;&#1574;&#1591;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f18.html&quot;&gt;&#1578;&#1608;&#1576;&#1610;&#1603;&#1575;&#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;&#1608;&#1592;&#1575;&#1574;&#1601;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;jobs&lt;/a&gt; &lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;&#1576;&#1585;&#1608;&#1603;&#1587;&#1610;&lt;/a&gt; &lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;proxy&lt;/a&gt; &lt;a href=&quot;http://forum.line-sport.tv/&quot;&gt;&#1604;&#1575;&#1610;&#1606; &#1587;&#1576;&#1608;&#1585;&#1578;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;thank you very much......&lt;span class=
&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=
&quot;http://www.tran33m.com/vb/&quot;&gt;&amp;#1605;&amp;#1606;&amp;#1578;&amp;#1583;&amp;#1610;&amp;#1575;&amp;#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f86.html&quot;&gt;&amp;#1605;&amp;#1603;&amp;#1610;&amp;#1575;&amp;#1580;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&amp;#1575;&amp;#1586;&amp;#1610;&amp;#1575;&amp;#1569;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&amp;#1601;&amp;#1587;&amp;#1575;&amp;#1578;&amp;#1610;&amp;#1606;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f17.html&quot;&gt;&amp;#1585;&amp;#1587;&amp;#1575;&amp;#1574;&amp;#1604;&lt;br&gt;
- &amp;#1605;&amp;#1587;&amp;#1580;&amp;#1575;&amp;#1578; -
&amp;#1608;&amp;#1587;&amp;#1575;&amp;#1574;&amp;#1591;&lt;/a&gt;&lt;span class=
&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=
&quot;http://www.tran33m.com/vb/f18.html&quot;&gt;&amp;#1578;&amp;#1608;&amp;#1576;&amp;#1610;&amp;#1603;&amp;#1575;&amp;#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;&amp;#1608;&amp;#1592;&amp;#1575;&amp;#1574;&amp;#1601;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;jobs&lt;/a&gt;
&lt;a href=
&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;&amp;#1576;&amp;#1585;&amp;#1608;&amp;#1603;&amp;#1587;&amp;#1610;&lt;/a&gt;
&lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;proxy&lt;/a&gt; &lt;a href=
&quot;http://forum.line-sport.tv/&quot;&gt;&amp;#1604;&amp;#1575;&amp;#1610;&amp;#1606;
&amp;#1587;&amp;#1576;&amp;#1608;&amp;#1585;&amp;#1578;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-08T11:28:50+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2011-02-08T12:16:12+00:00</updated-at>
      <user-id type="integer">136126</user-id>
      <version type="integer">18</version>
      <user-name>alasiri1</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;You possibly can buy beauty drops you can aquire with many different patterns similar to the triangular as well as rectangle-shaped varieties.&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-bracelets-c-3.html&quot;&gt;&lt;em&gt;Pandoras Bracelets&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; To help while recognize touch available practically expression along with damaged in almost any necklace around your neck.&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-charms-c-9.html&quot;&gt;&lt;em&gt;Pandora&#160;Charms&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; Just in case alphabets will never get that promotion using a man, &lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;pandora ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;use those who obtain out of all kinds of other communities as an example food including cakes,&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; crops and so forth</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;You
possibly can buy beauty drops you can aquire with many different
patterns similar to the triangular as well as rectangle-shaped
varieties.&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/pandora-bracelets-c-3.html&quot;&gt;&lt;em&gt;Pandoras
Bracelets&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; To help while recognize touch available
practically expression along with damaged in almost any necklace
around your neck.&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/pandora-charms-c-9.html&quot;&gt;&lt;em&gt;Pandora&amp;nbsp;Charms&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;
Just in case alphabets will never get that promotion using a man,
&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;pandora
ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;use those who obtain out of all kinds of
other communities as an example food including
cakes,&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora
NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; crops and so forth&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-14T06:15:08+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4064</number>
      <permalink>validates_uniqueness_of-should-honor-default_scope-or-not</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord default_scope validates_uniqueness_of</tag>
      <title>validates_uniqueness_of should honor default_scope (or not)</title>
      <updated-at type="datetime">2011-02-14T07:28:43+00:00</updated-at>
      <user-id type="integer">136876</user-id>
      <version type="integer">19</version>
      <user-name>pandora jewellry</user-name>
      <creator-name>Andreas Korth</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4064</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
