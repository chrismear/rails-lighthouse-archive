<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-07T22:43:20+00:00</created-at>
  <creator-id type="integer">129922</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6542</number>
  <permalink>rails-is-not-a-rack-application-script_name-vs-relative_url_root</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Rails is not a Rack Application (SCRIPT_NAME vs. relative_url_root ?)</title>
  <updated-at type="datetime">2011-03-07T22:43:23+00:00</updated-at>
  <user-id type="integer">129922</user-id>
  <version type="integer">1</version>
  <user-name>Thomas Fritzsche</user-name>
  <creator-name>Thomas Fritzsche</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6542</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hello Rails-Hackers,

I'm just in process creating some rack-middleware where I try to adjust env[&quot;SCRIPT_NAME&quot;] before Rails get's called in order to influence the way links are generated.
SCRIPT_NAME is defined by Rack as:
&quot;SCRIPT_NAME:	The initial portion of the request URL&#8217;s &#8220;path&#8221; that corresponds to the application object, so that the application knows its virtual &#8220;location&#8221;. This may be an empty string, if the application corresponds to the &#8220;root&#8221; of the server.&quot;

So if my app is in www.host.com/my_rails_webapp/ SCRIPT_SERVER it's &quot;/my_rails_webapp&quot;.

I assume if I overwrite this value in my rack middleware than rails should respect this during link-generation.
However this does not work for me as I expected. I'm just hobby rails programer so by Rails debugging scrills are limited, but it looks like Rails is not using SCRIPT_NAME, but instead is using &quot;config.relative_url_root&quot; in Application Controller's.

I try to make a sense out of the rails source greb'ing after string SCRIPT_NAME, but I just come up with actionpack/lib/action_controller/metal/compatibility.rb  that has:

---
      # ROUTES TODO: This should be handled by a middleware and route generation
      # should be able to handle SCRIPT_NAME
      self.config.relative_url_root = ENV['RAILS_RELATIVE_URL_ROOT']
---

Well.... I can just agree with the author: I think this should use SCRIPT_NAME. Sorry when my rails's skills are not good enough to provide a patch for this TODO or if I have overlooked something.

Thanks a lot!
Thomas</original-body>
  <latest-body>Hello Rails-Hackers,

I'm just in process creating some rack-middleware where I try to adjust env[&quot;SCRIPT_NAME&quot;] before Rails get's called in order to influence the way links are generated.
SCRIPT_NAME is defined by Rack as:
&quot;SCRIPT_NAME:	The initial portion of the request URL&#8217;s &#8220;path&#8221; that corresponds to the application object, so that the application knows its virtual &#8220;location&#8221;. This may be an empty string, if the application corresponds to the &#8220;root&#8221; of the server.&quot;

So if my app is in www.host.com/my_rails_webapp/ SCRIPT_SERVER it's &quot;/my_rails_webapp&quot;.

I assume if I overwrite this value in my rack middleware than rails should respect this during link-generation.
However this does not work for me as I expected. I'm just hobby rails programer so by Rails debugging scrills are limited, but it looks like Rails is not using SCRIPT_NAME, but instead is using &quot;config.relative_url_root&quot; in Application Controller's.

I try to make a sense out of the rails source greb'ing after string SCRIPT_NAME, but I just come up with actionpack/lib/action_controller/metal/compatibility.rb  that has:

---
      # ROUTES TODO: This should be handled by a middleware and route generation
      # should be able to handle SCRIPT_NAME
      self.config.relative_url_root = ENV['RAILS_RELATIVE_URL_ROOT']
---

Well.... I can just agree with the author: I think this should use SCRIPT_NAME. Sorry when my rails's skills are not good enough to provide a patch for this TODO or if I have overlooked something.

Thanks a lot!
Thomas</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hello Rails-Hackers,&lt;/p&gt;
&lt;p&gt;I'm just in process creating some rack-middleware where I try to
adjust env[&quot;SCRIPT_NAME&quot;] before Rails get's called in order to
influence the way links are generated.&lt;br&gt;
SCRIPT_NAME is defined by Rack as:&lt;br&gt;
&quot;SCRIPT_NAME: The initial portion of the request URL&amp;#8217;s
&amp;#8220;path&amp;#8221; that corresponds to the application object, so
that the application knows its virtual &amp;#8220;location&amp;#8221;. This
may be an empty string, if the application corresponds to the
&amp;#8220;root&amp;#8221; of the server.&quot;&lt;/p&gt;
&lt;p&gt;So if my app is in &lt;a href=
&quot;http://www.host.com/my_rails_webapp/&quot;&gt;www.host.com/my_rails_webapp/&lt;/a&gt;
SCRIPT_SERVER it's &quot;/my_rails_webapp&quot;.&lt;/p&gt;
&lt;p&gt;I assume if I overwrite this value in my rack middleware than
rails should respect this during link-generation.&lt;br&gt;
However this does not work for me as I expected. I'm just hobby
rails programer so by Rails debugging scrills are limited, but it
looks like Rails is not using SCRIPT_NAME, but instead is using
&quot;config.relative_url_root&quot; in Application Controller's.&lt;/p&gt;
&lt;p&gt;I try to make a sense out of the rails source greb'ing after
string SCRIPT_NAME, but I just come up with
actionpack/lib/action_controller/metal/compatibility.rb that
has:&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;
&lt;code&gt;  # ROUTES TODO: This should be handled by a middleware and route generation
  # should be able to handle SCRIPT_NAME
  self.config.relative_url_root = ENV['RAILS_RELATIVE_URL_ROOT']&lt;/code&gt;
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Well.... I can just agree with the author: I think this should
use SCRIPT_NAME. Sorry when my rails's skills are not good enough
to provide a patch for this TODO or if I have overlooked
something.&lt;/p&gt;
&lt;p&gt;Thanks a lot!&lt;br&gt;
Thomas&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello Rails-Hackers,

I'm just in process creating some rack-middleware where I try to adjust env[&quot;SCRIPT_NAME&quot;] before Rails get's called in order to influence the way links are generated.
SCRIPT_NAME is defined by Rack as:
&quot;SCRIPT_NAME:	The initial portion of the request URL&#8217;s &#8220;path&#8221; that corresponds to the application object, so that the application knows its virtual &#8220;location&#8221;. This may be an empty string, if the application corresponds to the &#8220;root&#8221; of the server.&quot;

So if my app is in www.host.com/my_rails_webapp/ SCRIPT_SERVER it's &quot;/my_rails_webapp&quot;.

I assume if I overwrite this value in my rack middleware than rails should respect this during link-generation.
However this does not work for me as I expected. I'm just hobby rails programer so by Rails debugging scrills are limited, but it looks like Rails is not using SCRIPT_NAME, but instead is using &quot;config.relative_url_root&quot; in Application Controller's.

I try to make a sense out of the rails source greb'ing after string SCRIPT_NAME, but I just come up with actionpack/lib/action_controller/metal/compatibility.rb  that has:

---
      # ROUTES TODO: This should be handled by a middleware and route generation
      # should be able to handle SCRIPT_NAME
      self.config.relative_url_root = ENV['RAILS_RELATIVE_URL_ROOT']
---

Well.... I can just agree with the author: I think this should use SCRIPT_NAME. Sorry when my rails's skills are not good enough to provide a patch for this TODO or if I have overlooked something.

Thanks a lot!
Thomas</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello Rails-Hackers,&lt;/p&gt;
&lt;p&gt;I'm just in process creating some rack-middleware where I try to
adjust env[&quot;SCRIPT_NAME&quot;] before Rails get's called in order to
influence the way links are generated.&lt;br&gt;
SCRIPT_NAME is defined by Rack as:&lt;br&gt;
&quot;SCRIPT_NAME: The initial portion of the request URL&amp;#8217;s
&amp;#8220;path&amp;#8221; that corresponds to the application object, so
that the application knows its virtual &amp;#8220;location&amp;#8221;. This
may be an empty string, if the application corresponds to the
&amp;#8220;root&amp;#8221; of the server.&quot;&lt;/p&gt;
&lt;p&gt;So if my app is in &lt;a href=
&quot;http://www.host.com/my_rails_webapp/&quot;&gt;www.host.com/my_rails_webapp/&lt;/a&gt;
SCRIPT_SERVER it's &quot;/my_rails_webapp&quot;.&lt;/p&gt;
&lt;p&gt;I assume if I overwrite this value in my rack middleware than
rails should respect this during link-generation.&lt;br&gt;
However this does not work for me as I expected. I'm just hobby
rails programer so by Rails debugging scrills are limited, but it
looks like Rails is not using SCRIPT_NAME, but instead is using
&quot;config.relative_url_root&quot; in Application Controller's.&lt;/p&gt;
&lt;p&gt;I try to make a sense out of the rails source greb'ing after
string SCRIPT_NAME, but I just come up with
actionpack/lib/action_controller/metal/compatibility.rb that
has:&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;
&lt;code&gt;  # ROUTES TODO: This should be handled by a middleware and route generation
  # should be able to handle SCRIPT_NAME
  self.config.relative_url_root = ENV['RAILS_RELATIVE_URL_ROOT']&lt;/code&gt;
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Well.... I can just agree with the author: I think this should
use SCRIPT_NAME. Sorry when my rails's skills are not good enough
to provide a patch for this TODO or if I have overlooked
something.&lt;/p&gt;
&lt;p&gt;Thanks a lot!&lt;br&gt;
Thomas&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-07T22:43:20+00:00</created-at>
      <creator-id type="integer">129922</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6542</number>
      <permalink>rails-is-not-a-rack-application-script_name-vs-relative_url_root</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails is not a Rack Application (SCRIPT_NAME vs. relative_url_root ?)</title>
      <updated-at type="datetime">2011-03-07T22:43:23+00:00</updated-at>
      <user-id type="integer">129922</user-id>
      <version type="integer">1</version>
      <user-name>Thomas Fritzsche</user-name>
      <creator-name>Thomas Fritzsche</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6542</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
