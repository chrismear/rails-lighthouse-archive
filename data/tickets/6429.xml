<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-14T09:04:23+00:00</created-at>
  <creator-id type="integer">136883</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6429</number>
  <permalink>limit-is-ignored-with-has_and_belongs_to_many-and-count</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>activerecord</tag>
  <title>limit is ignored with has_and_belongs_to_many and count</title>
  <updated-at type="datetime">2011-02-15T23:57:42+00:00</updated-at>
  <user-id type="integer">123417</user-id>
  <version type="integer">5</version>
  <user-name>x37v</user-name>
  <creator-name>ReggieB</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6429</url>
  <priority-name>Low</priority-name>
  <original-body>It's easiest to use an example to explain the problem:

@@@ 
class Articles
  has_and_belongs_to_many categories
end

class Category
  has_and_belongs_to_many articles
end

c = Category.first

c.articles.count
=&gt; 8   # Correct

c.articles.limit(3).count
=&gt; 8   # Incorrect

c.articles.find(:all, :limit =&gt; '3').count
=&gt; 3   # Correct
@@@

The problem is that &quot;LIMIT 3&quot; is appended to the end of the SQL statement joining the two tables in the SQL generated by count:

@@@
SELECT COUNT(*) AS count_id FROM `articles` INNER JOIN
`articles_categories` ON `articles`.id =
`articles_categories`.article_id WHERE
(`articles_categories`.category_id = 9 ) LIMIT 3
@@@

As an example of a possible solution, this returns the correct count:
@@@
SELECT count(*) FROM (
  SELECT  *
  FROM `articles`
  INNER JOIN `articles_categories` ON `articles`.id =
`articles_categories`.article_id
  WHERE (`articles_categories`.category_id = 9 )
  LIMIT 6, 4) inner_table
@@@

My system is Windows 7 with a MySQL 5.1 database</original-body>
  <latest-body>It's easiest to use an example to explain the problem:

@@@ 
class Articles
  has_and_belongs_to_many categories
end

class Category
  has_and_belongs_to_many articles
end

c = Category.first

c.articles.count
=&gt; 8   # Correct

c.articles.limit(3).count
=&gt; 8   # Incorrect

c.articles.find(:all, :limit =&gt; '3').count
=&gt; 3   # Correct
@@@

The problem is that &quot;LIMIT 3&quot; is appended to the end of the SQL statement joining the two tables in the SQL generated by count:

@@@
SELECT COUNT(*) AS count_id FROM `articles` INNER JOIN
`articles_categories` ON `articles`.id =
`articles_categories`.article_id WHERE
(`articles_categories`.category_id = 9 ) LIMIT 3
@@@

As an example of a possible solution, this returns the correct count:
@@@
SELECT count(*) FROM (
  SELECT  *
  FROM `articles`
  INNER JOIN `articles_categories` ON `articles`.id =
`articles_categories`.article_id
  WHERE (`articles_categories`.category_id = 9 )
  LIMIT 6, 4) inner_table
@@@

My system is Windows 7 with a MySQL 5.1 database</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;It's easiest to use an example to explain the problem:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Articles
  has_and_belongs_to_many categories
end

class Category
  has_and_belongs_to_many articles
end

c = Category.first

c.articles.count
=&amp;gt; 8   # Correct

c.articles.limit(3).count
=&amp;gt; 8   # Incorrect

c.articles.find(:all, :limit =&amp;gt; '3').count
=&amp;gt; 3   # Correct&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is that &quot;LIMIT 3&quot; is appended to the end of the SQL
statement joining the two tables in the SQL generated by count:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT COUNT(*) AS count_id FROM `articles` INNER JOIN
`articles_categories` ON `articles`.id =
`articles_categories`.article_id WHERE
(`articles_categories`.category_id = 9 ) LIMIT 3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As an example of a possible solution, this returns the correct
count:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT count(&lt;em&gt;) FROM (
  SELECT  &lt;/em&gt;
  FROM &lt;/code&gt;articles
  INNER JOIN &lt;code&gt;articles_categories&lt;/code&gt; ON &lt;code&gt;articles&lt;/code&gt;.id =
&lt;code&gt;articles_categories&lt;/code&gt;.article_id
  WHERE (&lt;code&gt;articles_categories&lt;/code&gt;.category_id = 9 )
  LIMIT 6, 4) inner_table
&lt;/pre&gt;
&lt;p&gt;My system is Windows 7 with a MySQL 5.1 database&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It's easiest to use an example to explain the problem:

@@@ 
class Articles
  has_and_belongs_to_many categories
end

class Category
  has_and_belongs_to_many articles
end

c = Category.first

c.articles.count
=&gt; 8   # Correct

c.articles.limit(3).count
=&gt; 8   # Incorrect

c.articles.find(:all, :limit =&gt; '3').count
=&gt; 3   # Correct
@@@

The problem is that &quot;LIMIT 3&quot; is appended to the end of the SQL statement joining the two tables in the SQL generated by count:

@@@
SELECT COUNT(*) AS count_id FROM `articles` INNER JOIN
`articles_categories` ON `articles`.id =
`articles_categories`.article_id WHERE
(`articles_categories`.category_id = 9 ) LIMIT 3
@@@

As an example of a possible solution, this returns the correct count:
@@@
SELECT count(*) FROM (
  SELECT  *
  FROM `articles`
  INNER JOIN `articles_categories` ON `articles`.id =
`articles_categories`.article_id
  WHERE (`articles_categories`.category_id = 9 )
  LIMIT 6, 4) inner_table
@@@

My system is Windows 7 with a MySQL 5.1 database</body>
      <body-html>&lt;div&gt;&lt;p&gt;It's easiest to use an example to explain the problem:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Articles
  has_and_belongs_to_many categories
end

class Category
  has_and_belongs_to_many articles
end

c = Category.first

c.articles.count
=&amp;gt; 8   # Correct

c.articles.limit(3).count
=&amp;gt; 8   # Incorrect

c.articles.find(:all, :limit =&amp;gt; '3').count
=&amp;gt; 3   # Correct&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is that &quot;LIMIT 3&quot; is appended to the end of the SQL
statement joining the two tables in the SQL generated by count:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT COUNT(*) AS count_id FROM `articles` INNER JOIN
`articles_categories` ON `articles`.id =
`articles_categories`.article_id WHERE
(`articles_categories`.category_id = 9 ) LIMIT 3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As an example of a possible solution, this returns the correct
count:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT count(&lt;em&gt;) FROM (
  SELECT  &lt;/em&gt;
  FROM &lt;/code&gt;articles
  INNER JOIN &lt;code&gt;articles_categories&lt;/code&gt; ON &lt;code&gt;articles&lt;/code&gt;.id =
&lt;code&gt;articles_categories&lt;/code&gt;.article_id
  WHERE (&lt;code&gt;articles_categories&lt;/code&gt;.category_id = 9 )
  LIMIT 6, 4) inner_table
&lt;/pre&gt;
&lt;p&gt;My system is Windows 7 with a MySQL 5.1 database&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-14T09:04:23+00:00</created-at>
      <creator-id type="integer">136883</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6429</number>
      <permalink>limit-is-ignored-with-has_and_belongs_to_many-and-count</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>limit is ignored with has_and_belongs_to_many and count</title>
      <updated-at type="datetime">2011-02-14T09:10:38+00:00</updated-at>
      <user-id type="integer">136883</user-id>
      <version type="integer">1</version>
      <user-name>ReggieB</user-name>
      <creator-name>ReggieB</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6429</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The last SQL is:

@@@

SELECT count(*) FROM (
  SELECT  *
  FROM `articles`
  INNER JOIN `articles_categories` ON `articles`.id =
`articles_categories`.article_id
  WHERE (`articles_categories`.category_id = 9 )
  LIMIT 6, 4) inner_table

@@@

For some reason the two * in the first two lines aren't appearing above</body>
      <body-html>&lt;div&gt;&lt;p&gt;The last SQL is:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
SELECT count(*) FROM (
  SELECT  *
  FROM `articles`
  INNER JOIN `articles_categories` ON `articles`.id =
`articles_categories`.article_id
  WHERE (`articles_categories`.category_id = 9 )
  LIMIT 6, 4) inner_table&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For some reason the two * in the first two lines aren't
appearing above&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-14T09:11:36+00:00</created-at>
      <creator-id type="integer">136883</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6429</number>
      <permalink>limit-is-ignored-with-has_and_belongs_to_many-and-count</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>limit is ignored with has_and_belongs_to_many and count</title>
      <updated-at type="datetime">2011-02-14T09:11:38+00:00</updated-at>
      <user-id type="integer">136883</user-id>
      <version type="integer">2</version>
      <user-name>ReggieB</user-name>
      <creator-name>ReggieB</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6429</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This doesn't seem like a Rails problem, this is MySQL behavior:

@@@

mysql&gt; select count(*) from categories;
+----------+
| count(*) |
+----------+
|       13 | 
+----------+
1 row in set (0.00 sec)

mysql&gt; select count(*) from categories limit 3;
+----------+
| count(*) |
+----------+
|       13 | 
+----------+
1 row in set (0.00 sec)
@@@

I don't think Rails should try to &quot;fix&quot; this by doing creepy sub query stuff like this, but I'm wondering what the rest thinks. Maybe we can find a nicer solution?


Thanks for reporting, Reggie. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;This doesn't seem like a Rails problem, this is MySQL
behavior:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
mysql&amp;gt; select count(*) from categories;
+----------+
| count(*) |
+----------+
|       13 | 
+----------+
1 row in set (0.00 sec)

mysql&amp;gt; select count(*) from categories limit 3;
+----------+
| count(*) |
+----------+
|       13 | 
+----------+
1 row in set (0.00 sec)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I don't think Rails should try to &quot;fix&quot; this by doing creepy sub
query stuff like this, but I'm wondering what the rest thinks.
Maybe we can find a nicer solution?&lt;/p&gt;
&lt;p&gt;Thanks for reporting, Reggie. :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-14T18:18:32+00:00</created-at>
      <creator-id type="integer">136883</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6429</number>
      <permalink>limit-is-ignored-with-has_and_belongs_to_many-and-count</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>limit is ignored with has_and_belongs_to_many and count</title>
      <updated-at type="datetime">2011-02-14T18:18:41+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">3</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>ReggieB</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6429</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Jeff,

The problem does occur within a simpler SQL query. However, it only seems to become an ActiveRecord issue if there is a join involved. For example
@@@
Article.count
=&gt; 10 # Correct

Article.limit(3).count
=&gt; 3  # Also correct.
@@@

The SQL generated by this statement is:

@@@
SELECT COUNT(*) AS count_id FROM (SELECT 1 FROM `categories` LIMIT 3) AS subquery
@@@

So Rails is already using the sub-query technique for simpler relationships.

The LIMIT clause acts to limit the number of lines being output. As a simple count only has one output line, LIMIT appears to have no effect. However, compare the output from these three statements:

@@@
  SELECT count(*) FROM categories LIMIT 3 

  SELECT count(*) FROM categories GROUP BY id

  SELECT count(*) FROM categories GROUP BY id LIMIT 3
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jeff,&lt;/p&gt;
&lt;p&gt;The problem does occur within a simpler SQL query. However, it
only seems to become an ActiveRecord issue if there is a join
involved. For example&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Article.count
=&amp;gt; 10 # Correct&lt;br&gt;
&lt;br&gt;


&lt;br&gt;
Article.limit(3).count
=&amp;gt; 3  # Also correct.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The SQL generated by this statement is:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT COUNT(*) AS count_id FROM (SELECT 1 FROM `categories` LIMIT 3) AS subquery&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So Rails is already using the sub-query technique for simpler
relationships.&lt;/p&gt;
&lt;p&gt;The LIMIT clause acts to limit the number of lines being output.
As a simple count only has one output line, LIMIT appears to have
no effect. However, compare the output from these three
statements:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  SELECT count(*) FROM categories LIMIT 3 

  SELECT count(*) FROM categories GROUP BY id

  SELECT count(*) FROM categories GROUP BY id LIMIT 3&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-15T11:26:08+00:00</created-at>
      <creator-id type="integer">136883</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6429</number>
      <permalink>limit-is-ignored-with-has_and_belongs_to_many-and-count</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>limit is ignored with has_and_belongs_to_many and count</title>
      <updated-at type="datetime">2011-02-15T11:26:17+00:00</updated-at>
      <user-id type="integer">136883</user-id>
      <version type="integer">4</version>
      <user-name>ReggieB</user-name>
      <creator-name>ReggieB</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6429</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've attached a diff which contains a test i added to the active record tests.  This diff is from 3-0-stable

but basically:

X.join(:y).where(condition).limit(2).count != X.find_by_sql(X.join(:y).where(condition).limit(2).to_sql).count</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've attached a diff which contains a test i added to the active
record tests. This diff is from 3-0-stable&lt;/p&gt;
&lt;p&gt;but basically:&lt;/p&gt;
&lt;p&gt;X.join(:y).where(condition).limit(2).count !=
X.find_by_sql(X.join(:y).where(condition).limit(2).to_sql).count&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-15T23:57:33+00:00</created-at>
      <creator-id type="integer">136883</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6429</number>
      <permalink>limit-is-ignored-with-has_and_belongs_to_many-and-count</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>limit is ignored with has_and_belongs_to_many and count</title>
      <updated-at type="datetime">2011-02-15T23:57:42+00:00</updated-at>
      <user-id type="integer">123417</user-id>
      <version type="integer">5</version>
      <user-name>x37v</user-name>
      <creator-name>ReggieB</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6429</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ffdf800c24eceb327beba144a80084f9adbf0e37</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-15T23:57:33+00:00</created-at>
      <filename>limit_join_bug.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">914388</id>
      <size type="integer">1039</size>
      <uploader-id type="integer">123417</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/914388/limit_join_bug.diff</url>
    </attachment>
  </attachments>
</ticket>
