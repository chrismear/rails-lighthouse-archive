<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-16T00:54:19+00:00</created-at>
  <creator-id type="integer">47525</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1981</number>
  <permalink>activerecordbasechanged-returns-empty-when-attribute-set-during-after_create</permalink>
  <priority type="integer">1231</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>after_create save updated</tag>
  <title>ActiveRecord::Base#changed returns empty when attribute set during after_create</title>
  <updated-at type="datetime">2010-04-15T22:50:24+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">4</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Mike Emery</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1981</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This is an abstracted version of my actual problem, but it reproduces in the same way.

I have a model:

@@@
class MultiSave &lt; ActiveRecord::Base
	
	after_create :overwrite_id_dependant
	
	def overwrite_id_dependant
		write_attribute(:id_dependant, id * 5)
	end
	
	def name=(value)
		write_attribute :name, value
		write_attribute :name_dependant, value + &quot; rocks&quot;
	end
end

When I run it using script/server I get the following results

Loading development environment (Rails 2.2.2)
&gt;&gt; m = MultiSave.new(:name =&gt; 'slurm')
=&gt; #&lt;MultiSave id: nil, id_dependant: nil, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: nil, updated_at: nil&gt;
&gt;&gt; m
=&gt; #&lt;MultiSave id: nil, id_dependant: nil, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: nil, updated_at: nil&gt;
&gt;&gt; m.changed
=&gt; [&quot;name&quot;, &quot;name_dependant&quot;]
&gt;&gt; m.save!
=&gt; true
&gt;&gt; m
=&gt; #&lt;MultiSave id: 11, id_dependant: 55, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: &quot;2009-02-16 00:42:34&quot;, updated_at: &quot;2009-02-16 00:42:34&quot;&gt;
&gt;&gt; m.changed
=&gt; []
&gt;&gt; m.save!
=&gt; true
&gt;&gt; m2 = MultiSave.find(11)
=&gt; #&lt;MultiSave id: 11, id_dependant: nil, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: &quot;2009-02-16 00:42:34&quot;, updated_at: &quot;2009-02-16 00:42:34&quot;&gt;

I have attached the rails project to this bug.  It exhibits the save behavior if you change to model to use after_save.</original-body>
  <latest-body>This is an abstracted version of my actual problem, but it reproduces in the same way.

I have a model:

@@@
class MultiSave &lt; ActiveRecord::Base
	
	after_create :overwrite_id_dependant
	
	def overwrite_id_dependant
		write_attribute(:id_dependant, id * 5)
	end
	
	def name=(value)
		write_attribute :name, value
		write_attribute :name_dependant, value + &quot; rocks&quot;
	end
end

When I run it using script/server I get the following results

Loading development environment (Rails 2.2.2)
&gt;&gt; m = MultiSave.new(:name =&gt; 'slurm')
=&gt; #&lt;MultiSave id: nil, id_dependant: nil, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: nil, updated_at: nil&gt;
&gt;&gt; m
=&gt; #&lt;MultiSave id: nil, id_dependant: nil, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: nil, updated_at: nil&gt;
&gt;&gt; m.changed
=&gt; [&quot;name&quot;, &quot;name_dependant&quot;]
&gt;&gt; m.save!
=&gt; true
&gt;&gt; m
=&gt; #&lt;MultiSave id: 11, id_dependant: 55, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: &quot;2009-02-16 00:42:34&quot;, updated_at: &quot;2009-02-16 00:42:34&quot;&gt;
&gt;&gt; m.changed
=&gt; []
&gt;&gt; m.save!
=&gt; true
&gt;&gt; m2 = MultiSave.find(11)
=&gt; #&lt;MultiSave id: 11, id_dependant: nil, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: &quot;2009-02-16 00:42:34&quot;, updated_at: &quot;2009-02-16 00:42:34&quot;&gt;

I have attached the rails project to this bug.  It exhibits the save behavior if you change to model to use after_save.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is an abstracted version of my actual problem, but it
reproduces in the same way.&lt;/p&gt;
&lt;p&gt;I have a model:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class MultiSave &amp;lt; ActiveRecord::Base
	
	after_create :overwrite_id_dependant
	
	def overwrite_id_dependant
		write_attribute(:id_dependant, id * 5)
	end
	
	def name=(value)
		write_attribute :name, value
		write_attribute :name_dependant, value + &amp;quot; rocks&amp;quot;
	end
end

When I run it using script/server I get the following results

Loading development environment (Rails 2.2.2)
&amp;gt;&amp;gt; m = MultiSave.new(:name =&amp;gt; 'slurm')
=&amp;gt; #&amp;lt;MultiSave id: nil, id_dependant: nil, name: &amp;quot;slurm&amp;quot;, name_dependant: &amp;quot;slurm rocks&amp;quot;, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; m
=&amp;gt; #&amp;lt;MultiSave id: nil, id_dependant: nil, name: &amp;quot;slurm&amp;quot;, name_dependant: &amp;quot;slurm rocks&amp;quot;, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; m.changed
=&amp;gt; [&amp;quot;name&amp;quot;, &amp;quot;name_dependant&amp;quot;]
&amp;gt;&amp;gt; m.save!
=&amp;gt; true
&amp;gt;&amp;gt; m
=&amp;gt; #&amp;lt;MultiSave id: 11, id_dependant: 55, name: &amp;quot;slurm&amp;quot;, name_dependant: &amp;quot;slurm rocks&amp;quot;, created_at: &amp;quot;2009-02-16 00:42:34&amp;quot;, updated_at: &amp;quot;2009-02-16 00:42:34&amp;quot;&amp;gt;
&amp;gt;&amp;gt; m.changed
=&amp;gt; []
&amp;gt;&amp;gt; m.save!
=&amp;gt; true
&amp;gt;&amp;gt; m2 = MultiSave.find(11)
=&amp;gt; #&amp;lt;MultiSave id: 11, id_dependant: nil, name: &amp;quot;slurm&amp;quot;, name_dependant: &amp;quot;slurm rocks&amp;quot;, created_at: &amp;quot;2009-02-16 00:42:34&amp;quot;, updated_at: &amp;quot;2009-02-16 00:42:34&amp;quot;&amp;gt;

I have attached the rails project to this bug.  It exhibits the save behavior if you change to model to use after_save.@@@
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is an abstracted version of my actual problem, but it reproduces in the same way.

I have a model:

@@@
class MultiSave &lt; ActiveRecord::Base
	
	after_create :overwrite_id_dependant
	
	def overwrite_id_dependant
		write_attribute(:id_dependant, id * 5)
	end
	
	def name=(value)
		write_attribute :name, value
		write_attribute :name_dependant, value + &quot; rocks&quot;
	end
end

When I run it using script/server I get the following results

Loading development environment (Rails 2.2.2)
&gt;&gt; m = MultiSave.new(:name =&gt; 'slurm')
=&gt; #&lt;MultiSave id: nil, id_dependant: nil, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: nil, updated_at: nil&gt;
&gt;&gt; m
=&gt; #&lt;MultiSave id: nil, id_dependant: nil, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: nil, updated_at: nil&gt;
&gt;&gt; m.changed
=&gt; [&quot;name&quot;, &quot;name_dependant&quot;]
&gt;&gt; m.save!
=&gt; true
&gt;&gt; m
=&gt; #&lt;MultiSave id: 11, id_dependant: 55, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: &quot;2009-02-16 00:42:34&quot;, updated_at: &quot;2009-02-16 00:42:34&quot;&gt;
&gt;&gt; m.changed
=&gt; []
&gt;&gt; m.save!
=&gt; true
&gt;&gt; m2 = MultiSave.find(11)
=&gt; #&lt;MultiSave id: 11, id_dependant: nil, name: &quot;slurm&quot;, name_dependant: &quot;slurm rocks&quot;, created_at: &quot;2009-02-16 00:42:34&quot;, updated_at: &quot;2009-02-16 00:42:34&quot;&gt;

I have attached the rails project to this bug.  It exhibits the save behavior if you change to model to use after_save.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is an abstracted version of my actual problem, but it
reproduces in the same way.&lt;/p&gt;
&lt;p&gt;I have a model:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class MultiSave &amp;lt; ActiveRecord::Base
	
	after_create :overwrite_id_dependant
	
	def overwrite_id_dependant
		write_attribute(:id_dependant, id * 5)
	end
	
	def name=(value)
		write_attribute :name, value
		write_attribute :name_dependant, value + &amp;quot; rocks&amp;quot;
	end
end

When I run it using script/server I get the following results

Loading development environment (Rails 2.2.2)
&amp;gt;&amp;gt; m = MultiSave.new(:name =&amp;gt; 'slurm')
=&amp;gt; #&amp;lt;MultiSave id: nil, id_dependant: nil, name: &amp;quot;slurm&amp;quot;, name_dependant: &amp;quot;slurm rocks&amp;quot;, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; m
=&amp;gt; #&amp;lt;MultiSave id: nil, id_dependant: nil, name: &amp;quot;slurm&amp;quot;, name_dependant: &amp;quot;slurm rocks&amp;quot;, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; m.changed
=&amp;gt; [&amp;quot;name&amp;quot;, &amp;quot;name_dependant&amp;quot;]
&amp;gt;&amp;gt; m.save!
=&amp;gt; true
&amp;gt;&amp;gt; m
=&amp;gt; #&amp;lt;MultiSave id: 11, id_dependant: 55, name: &amp;quot;slurm&amp;quot;, name_dependant: &amp;quot;slurm rocks&amp;quot;, created_at: &amp;quot;2009-02-16 00:42:34&amp;quot;, updated_at: &amp;quot;2009-02-16 00:42:34&amp;quot;&amp;gt;
&amp;gt;&amp;gt; m.changed
=&amp;gt; []
&amp;gt;&amp;gt; m.save!
=&amp;gt; true
&amp;gt;&amp;gt; m2 = MultiSave.find(11)
=&amp;gt; #&amp;lt;MultiSave id: 11, id_dependant: nil, name: &amp;quot;slurm&amp;quot;, name_dependant: &amp;quot;slurm rocks&amp;quot;, created_at: &amp;quot;2009-02-16 00:42:34&amp;quot;, updated_at: &amp;quot;2009-02-16 00:42:34&amp;quot;&amp;gt;

I have attached the rails project to this bug.  It exhibits the save behavior if you change to model to use after_save.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-16T00:54:20+00:00</created-at>
      <creator-id type="integer">47525</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1981</number>
      <permalink>activerecordbasechanged-returns-empty-when-attribute-set-during-after_create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>after_create save updated</tag>
      <title>ActiveRecord::Base#changed returns empty when attribute set during after_create</title>
      <updated-at type="datetime">2009-02-16T00:54:26+00:00</updated-at>
      <user-id type="integer">47525</user-id>
      <version type="integer">1</version>
      <user-name>Mike Emery</user-name>
      <creator-name>Mike Emery</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1981</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm not sure that this is a bug - the possible uses seem very limited. The problem is arising from the partial update / dirty checking code in dirty.rb; the list of changed fields is cleared after a save is completed.
That, combined with partial updates, means that the changes in overwrite_id_dependant don't get written out.

The short, quick solution to this is to use update_attribute rather than write_attribute; this will save the field immediately to the DB. Is there a reason why this won't work in your app, Mike?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not sure that this is a bug - the possible uses seem very
limited. The problem is arising from the partial update / dirty
checking code in dirty.rb; the list of changed fields is cleared
after a save is completed. That, combined with partial updates,
means that the changes in overwrite_id_dependant don't get written
out.&lt;/p&gt;
&lt;p&gt;The short, quick solution to this is to use update_attribute
rather than write_attribute; this will save the field immediately
to the DB. Is there a reason why this won't work in your app,
Mike?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-16T01:35:46+00:00</created-at>
      <creator-id type="integer">47525</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1981</number>
      <permalink>activerecordbasechanged-returns-empty-when-attribute-set-during-after_create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>after_create save updated</tag>
      <title>ActiveRecord::Base#changed returns empty when attribute set during after_create</title>
      <updated-at type="datetime">2009-02-16T01:35:52+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">2</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Mike Emery</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1981</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>agreed, not really a bug. author never responded should be marked as invalid or needs-more-info</body>
      <body-html>&lt;div&gt;&lt;p&gt;agreed, not really a bug. author never responded should be
marked as invalid or needs-more-info&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-15T20:46:02+01:00</created-at>
      <creator-id type="integer">47525</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1981</number>
      <permalink>activerecordbasechanged-returns-empty-when-attribute-set-during-after_create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>after_create save updated</tag>
      <title>ActiveRecord::Base#changed returns empty when attribute set during after_create</title>
      <updated-at type="datetime">2010-04-15T20:46:04+01:00</updated-at>
      <user-id type="integer">94811</user-id>
      <version type="integer">3</version>
      <user-name>Steve St. Martin</user-name>
      <creator-name>Mike Emery</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1981</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Matt Jones' solution seems worthwhile.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Matt Jones' solution seems worthwhile.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-15T22:50:14+01:00</created-at>
      <creator-id type="integer">47525</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1981</number>
      <permalink>activerecordbasechanged-returns-empty-when-attribute-set-during-after_create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>after_create save updated</tag>
      <title>ActiveRecord::Base#changed returns empty when attribute set during after_create</title>
      <updated-at type="datetime">2010-04-15T22:50:24+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">4</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Mike Emery</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1981</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>84e29cff685c1b0d876b459eae4347d293993977</code>
      <content-type>application/x-gzip</content-type>
      <created-at type="datetime">2009-02-16T00:54:20+00:00</created-at>
      <filename>rails-sandbox.tar.gz</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">89054</id>
      <size type="integer">84590</size>
      <uploader-id type="integer">47525</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/89054/rails-sandbox.tar.gz</url>
    </attachment>
  </attachments>
</ticket>
