From 9f85118c1cbe9d625a116917a0dc8fd67ea2aae4 Mon Sep 17 00:00:00 2001
From: Paco Guzman <fjguzman@aspgems.com>
Date: Sat, 27 Mar 2010 16:16:57 +0100
Subject: [PATCH] html_tag option to wrap error_message_on text

---
 .../lib/action_view/helpers/active_model_helper.rb |   21 +++++++++++--------
 .../test/template/active_model_helper_test.rb      |    4 +++
 2 files changed, 16 insertions(+), 9 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/active_model_helper.rb b/actionpack/lib/action_view/helpers/active_model_helper.rb
index f0358b5..618ab6a 100644
--- a/actionpack/lib/action_view/helpers/active_model_helper.rb
+++ b/actionpack/lib/action_view/helpers/active_model_helper.rb
@@ -96,10 +96,10 @@ module ActionView
       end
 
       # Returns a string containing the error message attached to the +method+ on the +object+ if one exists.
-      # This error message is wrapped in a <tt>DIV</tt> tag, which can be extended to include a <tt>:prepend_text</tt>
-      # and/or <tt>:append_text</tt> (to properly explain the error), and a <tt>:css_class</tt> to style it
-      # accordingly. +object+ should either be the name of an instance variable or the actual object. The method can be
-      # passed in either as a string or a symbol.
+      # This error message is wrapped in a <tt>DIV</tt> tag by default or with <tt>:html_tag</tt> if specified,
+      # which can be extended to include a <tt>:prepend_text</tt> and/or <tt>:append_text</tt> (to properly explain
+      # the error), and a <tt>:css_class</tt> to style it accordingly. +object+ should either be the name of an
+      # instance variable or the actual object. The method can be passed in either as a string or a symbol.
       # As an example, let's say you have a model <tt>@post</tt> that has an error message on the +title+ attribute:
       #
       #   <%= error_message_on "post", "title" %>
@@ -111,25 +111,28 @@ module ActionView
       #   <%= error_message_on "post", "title",
       #       :prepend_text => "Title simply ",
       #       :append_text => " (or it won't work).",
+      #       :html_tag => "span",
       #       :css_class => "inputError" %>
+      #   # => <span class="inputError">Title simply can't be empty (or it won't work).</span>
       def error_message_on(object, method, *args)
         options = args.extract_options!
         unless args.empty?
           ActiveSupport::Deprecation.warn('error_message_on takes an option hash instead of separate ' +
-            'prepend_text, append_text, and css_class arguments', caller)
+            'prepend_text, append_text, html_tag, and css_class arguments', caller)
 
           options[:prepend_text] = args[0] || ''
           options[:append_text] = args[1] || ''
-          options[:css_class] = args[2] || 'formError'
+          options[:html_tag] = args[2] || 'div'
+          options[:css_class] = args[3] || 'formError'
         end
-        options.reverse_merge!(:prepend_text => '', :append_text => '', :css_class => 'formError')
+        options.reverse_merge!(:prepend_text => '', :append_text => '', :html_tag => 'div', :css_class => 'formError')
 
         object = convert_to_model(object)
 
         if (obj = (object.respond_to?(:errors) ? object : instance_variable_get("@#{object}"))) &&
           (errors = obj.errors[method]).presence
-          content_tag("div",
-            "#{options[:prepend_text]}#{ERB::Util.h(errors.first)}#{options[:append_text]}".html_safe,
+          content_tag(options[:html_tag],
+            (options[:prepend_text].html_safe << errors.first).safe_concat(options[:append_text]),
             :class => options[:css_class]
           )
         else
diff --git a/actionpack/test/template/active_model_helper_test.rb b/actionpack/test/template/active_model_helper_test.rb
index 7a665b0..1a5316a 100644
--- a/actionpack/test/template/active_model_helper_test.rb
+++ b/actionpack/test/template/active_model_helper_test.rb
@@ -266,6 +266,10 @@ class ActiveModelHelperTest < ActionView::TestCase
     assert_dom_equal "<div class=\"differentError\">beforecan't be emptyafter</div>", error_message_on(:post, :author_name, :css_class => 'differentError', :prepend_text => 'before', :append_text => 'after')
   end
 
+  def test_error_message_on_with_tag_option_in_options_hash
+    assert_dom_equal "<span class=\"differentError\">beforecan't be emptyafter</span>", error_message_on(:post, :author_name, :html_tag => "span", :css_class => 'differentError', :prepend_text => 'before', :append_text => 'after')
+  end
+
   def test_error_message_on_handles_empty_errors
     assert_equal "", error_message_on(@post, :tag)
   end
-- 
1.6.3.3

