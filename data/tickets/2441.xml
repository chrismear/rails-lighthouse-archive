<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-07T15:34:41+01:00</created-at>
  <creator-id type="integer">19437</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2441</number>
  <permalink>activerecordsessionstore-breaks-with-custom-model</permalink>
  <priority type="integer">1591</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>active_record_store session</tag>
  <title>ActiveRecord::SessionStore breaks with custom model</title>
  <updated-at type="datetime">2011-02-02T17:33:17+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">5</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Adam Sindelar</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2441</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When using ActiveRecord::SessionStore for session management with a custom model class (set using ActiveRecord::SessionStore.session_class=), the custom model fails to work if it inherits from ActiveRecord::Base (which is the usual case).

The concrete problem seems to be caused by the fact that some class variables of ActiveRecord::Base are inexplicably set to nil sometime after the class is assigned to SessionStore.session_class. The two cases where I know for certain that this happens are Base.skip_time_zone_conversion_for_attributes and Base.default_scoping.

I have isolated the issue to how Rails handles application classes between requests in development environment, and I believe the process, in which things break is roughly this:

1. Server boots
2. Application classes are loaded
3. initializers/session_store.rb is loaded and a model class is assigned into ActiveRecord's class variable
4. Rails throws out application classes after a request is completed (because of config.cache_classes = false); meanwhile, ActiveRecord still maintains reference to a class that's no longer supposed to exist, and was crippled by the unloading mechanism. Somehow, in this stage, that model's class variables are set to nil for some reason.
5. Application classes are reloaded, but the new class objects are different from the one retained in ActiveRecord.

Based on my hypothesis, I devised a quick fix for this:

&lt;code&gt;
class ApplicationController &lt; ActionController::Base
before_filter {|c| ActiveRecord::SessionStore.session_class = UserSession}
&lt;/code&gt;

...which seems to work. I'm not familiar with the unloading mechanism in Rails, and so I'm not sure how to fix this, but I would say it's relatively critical, since it basically makes the ActiveRecord store useless for all but the simplest cases.</original-body>
  <latest-body>When using ActiveRecord::SessionStore for session management with a custom model class (set using ActiveRecord::SessionStore.session_class=), the custom model fails to work if it inherits from ActiveRecord::Base (which is the usual case).

The concrete problem seems to be caused by the fact that some class variables of ActiveRecord::Base are inexplicably set to nil sometime after the class is assigned to SessionStore.session_class. The two cases where I know for certain that this happens are Base.skip_time_zone_conversion_for_attributes and Base.default_scoping.

I have isolated the issue to how Rails handles application classes between requests in development environment, and I believe the process, in which things break is roughly this:

1. Server boots
2. Application classes are loaded
3. initializers/session_store.rb is loaded and a model class is assigned into ActiveRecord's class variable
4. Rails throws out application classes after a request is completed (because of config.cache_classes = false); meanwhile, ActiveRecord still maintains reference to a class that's no longer supposed to exist, and was crippled by the unloading mechanism. Somehow, in this stage, that model's class variables are set to nil for some reason.
5. Application classes are reloaded, but the new class objects are different from the one retained in ActiveRecord.

Based on my hypothesis, I devised a quick fix for this:

&lt;code&gt;
class ApplicationController &lt; ActionController::Base
before_filter {|c| ActiveRecord::SessionStore.session_class = UserSession}
&lt;/code&gt;

...which seems to work. I'm not familiar with the unloading mechanism in Rails, and so I'm not sure how to fix this, but I would say it's relatively critical, since it basically makes the ActiveRecord store useless for all but the simplest cases.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When using ActiveRecord::SessionStore for session management
with a custom model class (set using
ActiveRecord::SessionStore.session_class=), the custom model fails
to work if it inherits from ActiveRecord::Base (which is the usual
case).&lt;/p&gt;
&lt;p&gt;The concrete problem seems to be caused by the fact that some
class variables of ActiveRecord::Base are inexplicably set to nil
sometime after the class is assigned to SessionStore.session_class.
The two cases where I know for certain that this happens are
Base.skip_time_zone_conversion_for_attributes and
Base.default_scoping.&lt;/p&gt;
&lt;p&gt;I have isolated the issue to how Rails handles application
classes between requests in development environment, and I believe
the process, in which things break is roughly this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Server boots&lt;/li&gt;
&lt;li&gt;Application classes are loaded&lt;/li&gt;
&lt;li&gt;initializers/session_store.rb is loaded and a model class is
assigned into ActiveRecord's class variable&lt;/li&gt;
&lt;li&gt;Rails throws out application classes after a request is
completed (because of config.cache_classes = false); meanwhile,
ActiveRecord still maintains reference to a class that's no longer
supposed to exist, and was crippled by the unloading mechanism.
Somehow, in this stage, that model's class variables are set to nil
for some reason.&lt;/li&gt;
&lt;li&gt;Application classes are reloaded, but the new class objects are
different from the one retained in ActiveRecord.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on my hypothesis, I devised a quick fix for this:&lt;/p&gt;
&lt;p&gt;class ApplicationController &amp;lt; ActionController::Base
before_filter {|c| ActiveRecord::SessionStore.session_class =
UserSession}&lt;/p&gt;
&lt;p&gt;...which seems to work. I'm not familiar with the unloading
mechanism in Rails, and so I'm not sure how to fix this, but I
would say it's relatively critical, since it basically makes the
ActiveRecord store useless for all but the simplest cases.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When using ActiveRecord::SessionStore for session management with a custom model class (set using ActiveRecord::SessionStore.session_class=), the custom model fails to work if it inherits from ActiveRecord::Base (which is the usual case).

The concrete problem seems to be caused by the fact that some class variables of ActiveRecord::Base are inexplicably set to nil sometime after the class is assigned to SessionStore.session_class. The two cases where I know for certain that this happens are Base.skip_time_zone_conversion_for_attributes and Base.default_scoping.

I have isolated the issue to how Rails handles application classes between requests in development environment, and I believe the process, in which things break is roughly this:

1. Server boots
2. Application classes are loaded
3. initializers/session_store.rb is loaded and a model class is assigned into ActiveRecord's class variable
4. Rails throws out application classes after a request is completed (because of config.cache_classes = false); meanwhile, ActiveRecord still maintains reference to a class that's no longer supposed to exist, and was crippled by the unloading mechanism. Somehow, in this stage, that model's class variables are set to nil for some reason.
5. Application classes are reloaded, but the new class objects are different from the one retained in ActiveRecord.

Based on my hypothesis, I devised a quick fix for this:

&lt;code&gt;
class ApplicationController &lt; ActionController::Base
before_filter {|c| ActiveRecord::SessionStore.session_class = UserSession}
&lt;/code&gt;

...which seems to work. I'm not familiar with the unloading mechanism in Rails, and so I'm not sure how to fix this, but I would say it's relatively critical, since it basically makes the ActiveRecord store useless for all but the simplest cases.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When using ActiveRecord::SessionStore for session management
with a custom model class (set using
ActiveRecord::SessionStore.session_class=), the custom model fails
to work if it inherits from ActiveRecord::Base (which is the usual
case).&lt;/p&gt;
&lt;p&gt;The concrete problem seems to be caused by the fact that some
class variables of ActiveRecord::Base are inexplicably set to nil
sometime after the class is assigned to SessionStore.session_class.
The two cases where I know for certain that this happens are
Base.skip_time_zone_conversion_for_attributes and
Base.default_scoping.&lt;/p&gt;
&lt;p&gt;I have isolated the issue to how Rails handles application
classes between requests in development environment, and I believe
the process, in which things break is roughly this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Server boots&lt;/li&gt;
&lt;li&gt;Application classes are loaded&lt;/li&gt;
&lt;li&gt;initializers/session_store.rb is loaded and a model class is
assigned into ActiveRecord's class variable&lt;/li&gt;
&lt;li&gt;Rails throws out application classes after a request is
completed (because of config.cache_classes = false); meanwhile,
ActiveRecord still maintains reference to a class that's no longer
supposed to exist, and was crippled by the unloading mechanism.
Somehow, in this stage, that model's class variables are set to nil
for some reason.&lt;/li&gt;
&lt;li&gt;Application classes are reloaded, but the new class objects are
different from the one retained in ActiveRecord.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on my hypothesis, I devised a quick fix for this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class ApplicationController &amp;lt; ActionController::Base
before_filter {|c| ActiveRecord::SessionStore.session_class =
UserSession}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;...which seems to work. I'm not familiar with the unloading
mechanism in Rails, and so I'm not sure how to fix this, but I
would say it's relatively critical, since it basically makes the
ActiveRecord store useless for all but the simplest cases.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T15:34:41+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2441</number>
      <permalink>activerecordsessionstore-breaks-with-custom-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record_store session</tag>
      <title>ActiveRecord::SessionStore breaks with custom model</title>
      <updated-at type="datetime">2009-04-07T15:34:43+01:00</updated-at>
      <user-id type="integer">19437</user-id>
      <version type="integer">1</version>
      <user-name>Adam Sindelar</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2441</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I had the same error, and the same fix. I was previously setting session_class= in my session_store_keys initializer, right after the :active_record_store declaration, which worked fine.

This occurred when upgrading Rails from 2.3.2 to 2.3.4; my suspicion is that it has to do with 2.3.3.

After the upgrade, the first load worked fine and the second punted the &quot;can't dup NilClass&quot; error.

The &quot;unloadable&quot; trick mentioned in http://strd6.com/?p=250 did NOT work to resolve this issue, nor was it affected by development vs production mode; the above before_filter DID.

I'm curious however whether this fix comes at a performance cost... is it incurring extra class reloading penalty that would otherwise only be had on first load?

If yes, that kinda sucks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I had the same error, and the same fix. I was previously setting
session_class= in my session_store_keys initializer, right after
the :active_record_store declaration, which worked fine.&lt;/p&gt;
&lt;p&gt;This occurred when upgrading Rails from 2.3.2 to 2.3.4; my
suspicion is that it has to do with 2.3.3.&lt;/p&gt;
&lt;p&gt;After the upgrade, the first load worked fine and the second
punted the &quot;can't dup NilClass&quot; error.&lt;/p&gt;
&lt;p&gt;The &quot;unloadable&quot; trick mentioned in &lt;a href=
&quot;http://strd6.com/?p=250&quot;&gt;http://strd6.com/?p=250&lt;/a&gt; did NOT work
to resolve this issue, nor was it affected by development vs
production mode; the above before_filter DID.&lt;/p&gt;
&lt;p&gt;I'm curious however whether this fix comes at a performance
cost... is it incurring extra class reloading penalty that would
otherwise only be had on first load?&lt;/p&gt;
&lt;p&gt;If yes, that kinda sucks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-20T10:19:00+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2441</number>
      <permalink>activerecordsessionstore-breaks-with-custom-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record_store session</tag>
      <title>ActiveRecord::SessionStore breaks with custom model</title>
      <updated-at type="datetime">2009-10-20T10:19:03+01:00</updated-at>
      <user-id type="integer">73743</user-id>
      <version type="integer">2</version>
      <user-name>Sai Emrys</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2441</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:45+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2441</number>
      <permalink>activerecordsessionstore-breaks-with-custom-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record_store session</tag>
      <title>ActiveRecord::SessionStore breaks with custom model</title>
      <updated-at type="datetime">2010-05-04T18:48:45+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2441</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:39:57+00:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2441</number>
      <permalink>activerecordsessionstore-breaks-with-custom-model</permalink>
      <priority type="integer">1591</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>active_record_store session</tag>
      <title>ActiveRecord::SessionStore breaks with custom model</title>
      <updated-at type="datetime">2011-02-02T17:33:17+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2441</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:39:59+00:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2441</number>
      <permalink>activerecordsessionstore-breaks-with-custom-model</permalink>
      <priority type="integer">1591</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>active_record_store session</tag>
      <title>ActiveRecord::SessionStore breaks with custom model</title>
      <updated-at type="datetime">2011-02-02T17:33:09+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2441</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
