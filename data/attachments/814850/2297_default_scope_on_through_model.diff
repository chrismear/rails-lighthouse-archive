From 80b9b31538a7d83a95124821a446cb1dccbe772f Mon Sep 17 00:00:00 2001
From: Jon Leighton <j@jonathanleighton.com>
Date: Sun, 12 Dec 2010 16:35:27 +0000
Subject: [PATCH 1/2] Respect the default_scope on a join model when reading a through association

---
 .../associations/has_many_through_association.rb   |    2 +-
 .../associations/has_one_through_association.rb    |    2 +-
 .../associations/through_association_scope.rb      |    7 +++++++
 .../has_many_through_associations_test.rb          |    4 ++++
 .../has_one_through_associations_test.rb           |   10 +++++++++-
 activerecord/test/models/author.rb                 |    4 ++++
 activerecord/test/models/contract.rb               |    2 +-
 activerecord/test/models/post.rb                   |    7 +++++++
 8 files changed, 34 insertions(+), 4 deletions(-)

diff --git a/activerecord/lib/active_record/associations/has_many_through_association.rb b/activerecord/lib/active_record/associations/has_many_through_association.rb
index d0c8af1..2398fa8 100644
--- a/activerecord/lib/active_record/associations/has_many_through_association.rb
+++ b/activerecord/lib/active_record/associations/has_many_through_association.rb
@@ -81,7 +81,7 @@ module ActiveRecord
 
         def find_target
           return [] unless target_reflection_has_associated_record?
-          with_scope(@scope) { @reflection.klass.find(:all) }
+          scoped.all
         end
 
         def has_cached_counter?
diff --git a/activerecord/lib/active_record/associations/has_one_through_association.rb b/activerecord/lib/active_record/associations/has_one_through_association.rb
index 7f28abf..e8cf739 100644
--- a/activerecord/lib/active_record/associations/has_one_through_association.rb
+++ b/activerecord/lib/active_record/associations/has_one_through_association.rb
@@ -33,7 +33,7 @@ module ActiveRecord
 
     private
       def find_target
-        with_scope(@scope) { @reflection.klass.find(:first) }
+        scoped.first
       end
     end
   end
diff --git a/activerecord/lib/active_record/associations/through_association_scope.rb b/activerecord/lib/active_record/associations/through_association_scope.rb
index acddfda..8fde868 100644
--- a/activerecord/lib/active_record/associations/through_association_scope.rb
+++ b/activerecord/lib/active_record/associations/through_association_scope.rb
@@ -3,6 +3,13 @@ module ActiveRecord
   module Associations
     module ThroughAssociationScope
 
+      def scoped
+        with_scope(@scope) do
+          @reflection.klass.scoped &
+          @reflection.through_reflection.klass.scoped
+        end
+      end
+
       protected
 
       def construct_find_scope
diff --git a/activerecord/test/cases/associations/has_many_through_associations_test.rb b/activerecord/test/cases/associations/has_many_through_associations_test.rb
index 52432b0..27f4d20 100644
--- a/activerecord/test/cases/associations/has_many_through_associations_test.rb
+++ b/activerecord/test/cases/associations/has_many_through_associations_test.rb
@@ -455,4 +455,8 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase
     post.people << people(:michael)
     assert_equal readers + 1, post.readers.size
   end
+
+  def test_has_many_through_with_default_scope_on_join_model
+    assert_equal posts(:welcome).comments, authors(:david).comments_on_first_posts
+  end
 end
diff --git a/activerecord/test/cases/associations/has_one_through_associations_test.rb b/activerecord/test/cases/associations/has_one_through_associations_test.rb
index ac43e57..93a4f49 100644
--- a/activerecord/test/cases/associations/has_one_through_associations_test.rb
+++ b/activerecord/test/cases/associations/has_one_through_associations_test.rb
@@ -9,9 +9,13 @@ require 'models/member_detail'
 require 'models/minivan'
 require 'models/dashboard'
 require 'models/speedometer'
+require 'models/author'
+require 'models/post'
+require 'models/comment'
 
 class HasOneThroughAssociationsTest < ActiveRecord::TestCase
-  fixtures :member_types, :members, :clubs, :memberships, :sponsors, :organizations, :minivans, :dashboards, :speedometers
+  fixtures :member_types, :members, :clubs, :memberships, :sponsors, :organizations, :minivans,
+           :dashboards, :speedometers, :authors, :posts, :comments
 
   def setup
     @member = members(:groucho)
@@ -229,4 +233,8 @@ class HasOneThroughAssociationsTest < ActiveRecord::TestCase
       minivan.dashboard
     end
   end
+
+  def test_has_one_through_with_default_scope_on_join_model
+    assert_equal posts(:welcome).comments.first, authors(:david).comment_on_first_posts
+  end
 end
diff --git a/activerecord/test/models/author.rb b/activerecord/test/models/author.rb
index 34bfd2d..29ee50e 100644
--- a/activerecord/test/models/author.rb
+++ b/activerecord/test/models/author.rb
@@ -26,6 +26,10 @@ class Author < ActiveRecord::Base
   has_many :comments_with_order_and_conditions, :through => :posts, :source => :comments, :order => 'comments.body', :conditions => "comments.body like 'Thank%'"
   has_many :comments_with_include, :through => :posts, :source => :comments, :include => :post
 
+  has_many :first_posts
+  has_many :comments_on_first_posts, :through => :first_posts, :source => :comments, :order => 'posts.id desc, comments.id asc'
+  has_one  :comment_on_first_posts,  :through => :first_posts, :source => :comments, :order => 'posts.id desc, comments.id asc'
+
   has_many :thinking_posts, :class_name => 'Post', :conditions => { :title => 'So I was thinking' }, :dependent => :delete_all
   has_many :welcome_posts,  :class_name => 'Post', :conditions => { :title => 'Welcome to the weblog' }
 
diff --git a/activerecord/test/models/contract.rb b/activerecord/test/models/contract.rb
index 606c99c..94fd48e 100644
--- a/activerecord/test/models/contract.rb
+++ b/activerecord/test/models/contract.rb
@@ -1,4 +1,4 @@
 class Contract < ActiveRecord::Base
   belongs_to :company
   belongs_to :developer
-end
\ No newline at end of file
+end
diff --git a/activerecord/test/models/post.rb b/activerecord/test/models/post.rb
index 61e782f..164b499 100644
--- a/activerecord/test/models/post.rb
+++ b/activerecord/test/models/post.rb
@@ -119,3 +119,10 @@ class PostForAuthor < ActiveRecord::Base
   cattr_accessor :selected_author
   default_scope lambda { where(:author_id => PostForAuthor.selected_author) }
 end
+
+class FirstPost < ActiveRecord::Base
+  self.table_name = 'posts'
+  default_scope where(:id => 1)
+  has_many :comments, :foreign_key => :post_id
+  has_one  :comment,  :foreign_key => :post_id
+end
-- 
1.7.1


From c2242da5f28949433a2a4fac2eb3942392d0c308 Mon Sep 17 00:00:00 2001
From: Jon Leighton <j@jonathanleighton.com>
Date: Sun, 12 Dec 2010 17:03:41 +0000
Subject: [PATCH 2/2] Verify that creating a has_many through record where there is a default_scope on the join model works correctly (creates the join record with the default scope applied)

---
 .../has_many_through_associations_test.rb          |    7 +++++++
 activerecord/test/models/author.rb                 |    4 ++++
 activerecord/test/models/categorization.rb         |   11 ++++++++++-
 activerecord/test/schema/schema.rb                 |    1 +
 4 files changed, 22 insertions(+), 1 deletions(-)

diff --git a/activerecord/test/cases/associations/has_many_through_associations_test.rb b/activerecord/test/cases/associations/has_many_through_associations_test.rb
index 27f4d20..560aafa 100644
--- a/activerecord/test/cases/associations/has_many_through_associations_test.rb
+++ b/activerecord/test/cases/associations/has_many_through_associations_test.rb
@@ -17,6 +17,8 @@ require 'models/developer'
 require 'models/subscriber'
 require 'models/book'
 require 'models/subscription'
+require 'models/categorization'
+require 'models/category'
 
 class HasManyThroughAssociationsTest < ActiveRecord::TestCase
   fixtures :posts, :readers, :people, :comments, :authors,
@@ -459,4 +461,9 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase
   def test_has_many_through_with_default_scope_on_join_model
     assert_equal posts(:welcome).comments, authors(:david).comments_on_first_posts
   end
+
+  def test_create_has_many_through_with_default_scope_on_join_model
+    category = authors(:david).special_categories.create(:name => "Foo")
+    assert_equal 1, category.categorizations.where(:special => true).count
+  end
 end
diff --git a/activerecord/test/models/author.rb b/activerecord/test/models/author.rb
index 29ee50e..fd6d2b3 100644
--- a/activerecord/test/models/author.rb
+++ b/activerecord/test/models/author.rb
@@ -77,6 +77,10 @@ class Author < ActiveRecord::Base
   has_many :categorizations
   has_many :categories, :through => :categorizations
 
+  has_many :special_categorizations
+  has_many :special_categories, :through => :special_categorizations, :source => :category
+  has_one  :special_category,   :through => :special_categorizations, :source => :category
+
   has_many :categories_like_general, :through => :categorizations, :source => :category, :class_name => 'Category', :conditions => { :name => 'General' }
 
   has_many :categorized_posts, :through => :categorizations, :source => :post
diff --git a/activerecord/test/models/categorization.rb b/activerecord/test/models/categorization.rb
index 1059432..b3fc29f 100644
--- a/activerecord/test/models/categorization.rb
+++ b/activerecord/test/models/categorization.rb
@@ -2,4 +2,13 @@ class Categorization < ActiveRecord::Base
   belongs_to :post
   belongs_to :category
   belongs_to :author
-end
\ No newline at end of file
+end
+
+class SpecialCategorization < ActiveRecord::Base
+  self.table_name = 'categorizations'
+
+  default_scope where(:special => true)
+
+  belongs_to :author
+  belongs_to :category
+end
diff --git a/activerecord/test/schema/schema.rb b/activerecord/test/schema/schema.rb
index d4eb56c..177045a 100644
--- a/activerecord/test/schema/schema.rb
+++ b/activerecord/test/schema/schema.rb
@@ -112,6 +112,7 @@ ActiveRecord::Schema.define do
     t.column :category_id, :integer
     t.column :post_id, :integer
     t.column :author_id, :integer
+    t.column :special, :boolean
   end
 
   create_table :citations, :force => true do |t|
-- 
1.7.1

