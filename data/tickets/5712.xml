<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-09-27T02:42:30+01:00</created-at>
  <creator-id type="integer">14510</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5712</number>
  <permalink>activerecord-connection-established-event</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>activerecord connection established event</title>
  <updated-at type="datetime">2011-02-02T16:39:52+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Zach Dennis</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5712</url>
  <priority-name>Low</priority-name>
  <original-body>As a plugin author for enhanced ActiveRecord functionality it would be nice if establishing a database connection would fire an event. This would allow the plugin to know that an adapter has been loaded and for any adapter-specific functionality to be loaded.

Today, I updated activerecord-import to do just this because I can't load the functionality before the adapters load (and they are loaded as determined by Rails initialization or the user). This failed when using a Rails 3 app and keeping the auto-loading of Bundler dependencies in config/application.rb. 

Another alternative is to have the user specifically load the adapter specific files after initialization. This is what I used to have users do, but it seems like an unnecessary step.

In the spirit of the load_hooks in Rails 3 I am currently wrapping the ActiveRecord::Base.establish_connection method so it calls fires a active_record_connection_established event via #run_load_hooks after a connection has been made. This allows me to pass the connection in. In my library's code all I have to do is listen for active_record_connection_established and then I can load library for the specific database adapter in use.

Here's a gist of the basic idea that I'm using in activerecord-import: http://gist.github.com/598480

I'm looking for some feedback before submitting a patch.</original-body>
  <latest-body>As a plugin author for enhanced ActiveRecord functionality it would be nice if establishing a database connection would fire an event. This would allow the plugin to know that an adapter has been loaded and for any adapter-specific functionality to be loaded.

Today, I updated activerecord-import to do just this because I can't load the functionality before the adapters load (and they are loaded as determined by Rails initialization or the user). This failed when using a Rails 3 app and keeping the auto-loading of Bundler dependencies in config/application.rb. 

Another alternative is to have the user specifically load the adapter specific files after initialization. This is what I used to have users do, but it seems like an unnecessary step.

In the spirit of the load_hooks in Rails 3 I am currently wrapping the ActiveRecord::Base.establish_connection method so it calls fires a active_record_connection_established event via #run_load_hooks after a connection has been made. This allows me to pass the connection in. In my library's code all I have to do is listen for active_record_connection_established and then I can load library for the specific database adapter in use.

Here's a gist of the basic idea that I'm using in activerecord-import: http://gist.github.com/598480

I'm looking for some feedback before submitting a patch.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;As a plugin author for enhanced ActiveRecord functionality it
would be nice if establishing a database connection would fire an
event. This would allow the plugin to know that an adapter has been
loaded and for any adapter-specific functionality to be loaded.&lt;/p&gt;
&lt;p&gt;Today, I updated activerecord-import to do just this because I
can't load the functionality before the adapters load (and they are
loaded as determined by Rails initialization or the user). This
failed when using a Rails 3 app and keeping the auto-loading of
Bundler dependencies in config/application.rb.&lt;/p&gt;
&lt;p&gt;Another alternative is to have the user specifically load the
adapter specific files after initialization. This is what I used to
have users do, but it seems like an unnecessary step.&lt;/p&gt;
&lt;p&gt;In the spirit of the load_hooks in Rails 3 I am currently
wrapping the ActiveRecord::Base.establish_connection method so it
calls fires a active_record_connection_established event via
#run_load_hooks after a connection has been made. This allows me to
pass the connection in. In my library's code all I have to do is
listen for active_record_connection_established and then I can load
library for the specific database adapter in use.&lt;/p&gt;
&lt;p&gt;Here's a gist of the basic idea that I'm using in
activerecord-import: &lt;a href=
&quot;http://gist.github.com/598480&quot;&gt;http://gist.github.com/598480&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm looking for some feedback before submitting a patch.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>As a plugin author for enhanced ActiveRecord functionality it would be nice if establishing a database connection would fire an event. This would allow the plugin to know that an adapter has been loaded and for any adapter-specific functionality to be loaded.

Today, I updated activerecord-import to do just this because I can't load the functionality before the adapters load (and they are loaded as determined by Rails initialization or the user). This failed when using a Rails 3 app and keeping the auto-loading of Bundler dependencies in config/application.rb. 

Another alternative is to have the user specifically load the adapter specific files after initialization. This is what I used to have users do, but it seems like an unnecessary step.

In the spirit of the load_hooks in Rails 3 I am currently wrapping the ActiveRecord::Base.establish_connection method so it calls fires a active_record_connection_established event via #run_load_hooks after a connection has been made. This allows me to pass the connection in. In my library's code all I have to do is listen for active_record_connection_established and then I can load library for the specific database adapter in use.

Here's a gist of the basic idea that I'm using in activerecord-import: http://gist.github.com/598480

I'm looking for some feedback before submitting a patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As a plugin author for enhanced ActiveRecord functionality it
would be nice if establishing a database connection would fire an
event. This would allow the plugin to know that an adapter has been
loaded and for any adapter-specific functionality to be loaded.&lt;/p&gt;
&lt;p&gt;Today, I updated activerecord-import to do just this because I
can't load the functionality before the adapters load (and they are
loaded as determined by Rails initialization or the user). This
failed when using a Rails 3 app and keeping the auto-loading of
Bundler dependencies in config/application.rb.&lt;/p&gt;
&lt;p&gt;Another alternative is to have the user specifically load the
adapter specific files after initialization. This is what I used to
have users do, but it seems like an unnecessary step.&lt;/p&gt;
&lt;p&gt;In the spirit of the load_hooks in Rails 3 I am currently
wrapping the ActiveRecord::Base.establish_connection method so it
calls fires a active_record_connection_established event via
#run_load_hooks after a connection has been made. This allows me to
pass the connection in. In my library's code all I have to do is
listen for active_record_connection_established and then I can load
library for the specific database adapter in use.&lt;/p&gt;
&lt;p&gt;Here's a gist of the basic idea that I'm using in
activerecord-import: &lt;a href=
&quot;http://gist.github.com/598480&quot;&gt;http://gist.github.com/598480&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm looking for some feedback before submitting a patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-27T02:42:30+01:00</created-at>
      <creator-id type="integer">14510</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5712</number>
      <permalink>activerecord-connection-established-event</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;active record&quot; active_record featurerequest</tag>
      <title>activerecord connection established event</title>
      <updated-at type="datetime">2010-09-27T02:42:32+01:00</updated-at>
      <user-id type="integer">14510</user-id>
      <version type="integer">1</version>
      <user-name>Zach Dennis</user-name>
      <creator-name>Zach Dennis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5712</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Mark VanHolstyn suggested today that having this a :before_connection_established event would better (or at least to have in addition to) what I requested above. I tend to agree. The :before_connection_established would fire off the event and allow plugins to modify the adapter before an adapter is established. This opens itself up for more possibilities of functionality since it provides a plugin library the ability to modify the connection adapter as needed in order to establish a connection.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Mark VanHolstyn suggested today that having this a
:before_connection_established event would better (or at least to
have in addition to) what I requested above. I tend to agree. The
:before_connection_established would fire off the event and allow
plugins to modify the adapter before an adapter is established.
This opens itself up for more possibilities of functionality since
it provides a plugin library the ability to modify the connection
adapter as needed in order to establish a connection.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-28T03:47:40+01:00</created-at>
      <creator-id type="integer">14510</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5712</number>
      <permalink>activerecord-connection-established-event</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;active record&quot; active_record featurerequest</tag>
      <title>activerecord connection established event</title>
      <updated-at type="datetime">2010-09-28T03:47:41+01:00</updated-at>
      <user-id type="integer">14510</user-id>
      <version type="integer">2</version>
      <user-name>Zach Dennis</user-name>
      <creator-name>Zach Dennis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5712</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1

Though I'd suggest it to be done through the new `ActiveSupport::Notifications` system.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;Though I'd suggest it to be done through the new
&lt;code&gt;ActiveSupport::Notifications&lt;/code&gt; system.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-10T18:16:44+01:00</created-at>
      <creator-id type="integer">14510</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5712</number>
      <permalink>activerecord-connection-established-event</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;active record&quot; active_record featurerequest</tag>
      <title>activerecord connection established event</title>
      <updated-at type="datetime">2010-10-10T18:16:48+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">3</version>
      <user-name>David Trasbo</user-name>
      <creator-name>Zach Dennis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5712</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-19T08:23:46+01:00</created-at>
      <creator-id type="integer">14510</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;active record\&quot; active_record featurerequest&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5712</number>
      <permalink>activerecord-connection-established-event</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>activerecord connection established event</title>
      <updated-at type="datetime">2010-10-19T08:23:48+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">5</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Zach Dennis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5712</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:29:41+00:00</created-at>
      <creator-id type="integer">14510</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5712</number>
      <permalink>activerecord-connection-established-event</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>activerecord connection established event</title>
      <updated-at type="datetime">2011-02-02T16:39:52+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Zach Dennis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5712</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:29:43+00:00</created-at>
      <creator-id type="integer">14510</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5712</number>
      <permalink>activerecord-connection-established-event</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>activerecord connection established event</title>
      <updated-at type="datetime">2011-02-02T16:39:41+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Zach Dennis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5712</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
