<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-19T09:28:12+00:00</created-at>
  <creator-id type="integer">37704</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5738</number>
  <permalink>associationcollectionload_target-triggers-massassignmentsecurity-warning</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>activerecord associations bug &quot;mass-assignment security&quot;</tag>
  <title>AssociationCollection#load_target triggers MassAssignmentSecurity warning</title>
  <updated-at type="datetime">2011-03-15T23:15:22+00:00</updated-at>
  <user-id type="integer">29122</user-id>
  <version type="integer">9</version>
  <user-name>Steve F</user-name>
  <creator-name>Emmanuel Gomez</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5738</url>
  <priority-name nil="true"></priority-name>
  <original-body>On a project I'm working on, we've been using a monkey-patch that raises on mass assignment security errors (used to be in AR::Base#log_protected_attribute_removal). This helps us prevent silent failure. 

I'm in the process of porting our app to Rails 3, and spent some time today reimplementing this monkey-patch on WhiteList and BlackList. 

Upon doing so, I discovered an unexpected failure when accessing an association after building instances on the association. It turns out that AssociationCollection#load_target performs mass-assignment calls (#attributes=) to update non-dirty, non-id fields on the in-memory instances.

I'm pretty sure that this call to #attributes= should bypass mass-assignment protection, since it's assigning values from the database to in-memory instances. I'm proposing to change:

@@@ ruby
@target.delete_at(i).tap do |t|
  keys = [&quot;id&quot;] + t.changes.keys + (f.attribute_names - t.attribute_names)
  t.attributes = f.attributes.except(*keys)
end
@@@

to:

@@@ ruby
@target.delete_at(i).tap do |t|
  keys = [&quot;id&quot;] + t.changes.keys + (f.attribute_names - t.attribute_names)
  t.send(:attributes=, f.attributes.except(*keys), false)
end
@@@

I'm pretty sure this should be an uncontroversial change, and I'd love to see it patched in ActiveRecord. Should I submit a patch for this change?</original-body>
  <latest-body>On a project I'm working on, we've been using a monkey-patch that raises on mass assignment security errors (used to be in AR::Base#log_protected_attribute_removal). This helps us prevent silent failure. 

I'm in the process of porting our app to Rails 3, and spent some time today reimplementing this monkey-patch on WhiteList and BlackList. 

Upon doing so, I discovered an unexpected failure when accessing an association after building instances on the association. It turns out that AssociationCollection#load_target performs mass-assignment calls (#attributes=) to update non-dirty, non-id fields on the in-memory instances.

I'm pretty sure that this call to #attributes= should bypass mass-assignment protection, since it's assigning values from the database to in-memory instances. I'm proposing to change:

@@@ ruby
@target.delete_at(i).tap do |t|
  keys = [&quot;id&quot;] + t.changes.keys + (f.attribute_names - t.attribute_names)
  t.attributes = f.attributes.except(*keys)
end
@@@

to:

@@@ ruby
@target.delete_at(i).tap do |t|
  keys = [&quot;id&quot;] + t.changes.keys + (f.attribute_names - t.attribute_names)
  t.send(:attributes=, f.attributes.except(*keys), false)
end
@@@

I'm pretty sure this should be an uncontroversial change, and I'd love to see it patched in ActiveRecord. Should I submit a patch for this change?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;On a project I'm working on, we've been using a monkey-patch
that raises on mass assignment security errors (used to be in
AR::Base#log_protected_attribute_removal). This helps us prevent
silent failure.&lt;/p&gt;
&lt;p&gt;I'm in the process of porting our app to Rails 3, and spent some
time today reimplementing this monkey-patch on WhiteList and
BlackList.&lt;/p&gt;
&lt;p&gt;Upon doing so, I discovered an unexpected failure when accessing
an association after building instances on the association. It
turns out that AssociationCollection#load_target performs
mass-assignment calls (#attributes=) to update non-dirty, non-id
fields on the in-memory instances.&lt;/p&gt;
&lt;p&gt;I'm pretty sure that this call to #attributes= should bypass
mass-assignment protection, since it's assigning values from the
database to in-memory instances. I'm proposing to change:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;@target.delete_at(i).tap do |t|
  keys = [&quot;id&quot;] + t.changes.keys + (f.attribute_names - t.attribute_names)
  t.attributes = f.attributes.except(*keys)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;@target.delete_at(i).tap do |t|
  keys = [&quot;id&quot;] + t.changes.keys + (f.attribute_names - t.attribute_names)
  t.send(:attributes=, f.attributes.except(*keys), false)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm pretty sure this should be an uncontroversial change, and
I'd love to see it patched in ActiveRecord. Should I submit a patch
for this change?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>On a project I'm working on, we've been using a monkey-patch that raises on mass assignment security errors (used to be in AR::Base#log_protected_attribute_removal). This helps us prevent silent failure. 

I'm in the process of porting our app to Rails 3, and spent some time today reimplementing this monkey-patch on WhiteList and BlackList. 

Upon doing so, I discovered an unexpected failure when accessing an association after building instances on the association. It turns out that AssociationCollection#load_target performs mass-assignment calls (#attributes=) to update non-dirty, non-id fields on the in-memory instances.

I'm pretty sure that this call to #attributes= should bypass mass-assignment protection, since it's assigning values from the database to in-memory instances. I'm proposing to change:

@@@ ruby
@target.delete_at(i).tap do |t|
  keys = [&quot;id&quot;] + t.changes.keys + (f.attribute_names - t.attribute_names)
  t.attributes = f.attributes.except(*keys)
end
@@@

to:

@@@ ruby
@target.delete_at(i).tap do |t|
  keys = [&quot;id&quot;] + t.changes.keys + (f.attribute_names - t.attribute_names)
  t.send(:attributes=, f.attributes.except(*keys), false)
end
@@@

I'm pretty sure this should be an uncontroversial change, and I'd love to see it patched in ActiveRecord. Should I submit a patch for this change?</body>
      <body-html>&lt;div&gt;&lt;p&gt;On a project I'm working on, we've been using a monkey-patch
that raises on mass assignment security errors (used to be in
AR::Base#log_protected_attribute_removal). This helps us prevent
silent failure.&lt;/p&gt;
&lt;p&gt;I'm in the process of porting our app to Rails 3, and spent some
time today reimplementing this monkey-patch on WhiteList and
BlackList.&lt;/p&gt;
&lt;p&gt;Upon doing so, I discovered an unexpected failure when accessing
an association after building instances on the association. It
turns out that AssociationCollection#load_target performs
mass-assignment calls (#attributes=) to update non-dirty, non-id
fields on the in-memory instances.&lt;/p&gt;
&lt;p&gt;I'm pretty sure that this call to #attributes= should bypass
mass-assignment protection, since it's assigning values from the
database to in-memory instances. I'm proposing to change:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;@target.delete_at(i).tap do |t|
  keys = [&quot;id&quot;] + t.changes.keys + (f.attribute_names - t.attribute_names)
  t.attributes = f.attributes.except(*keys)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;@target.delete_at(i).tap do |t|
  keys = [&quot;id&quot;] + t.changes.keys + (f.attribute_names - t.attribute_names)
  t.send(:attributes=, f.attributes.except(*keys), false)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm pretty sure this should be an uncontroversial change, and
I'd love to see it patched in ActiveRecord. Should I submit a patch
for this change?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-29T22:56:32+01:00</created-at>
      <creator-id type="integer">37704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5738</number>
      <permalink>associationcollectionload_target-triggers-massassignmentsecurity-warning</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord associations&quot; &quot;mass-assignment security&quot;</tag>
      <title>AssociationCollection#load_target triggers MassAssignmentSecurity warning</title>
      <updated-at type="datetime">2010-09-29T22:56:34+01:00</updated-at>
      <user-id type="integer">37704</user-id>
      <version type="integer">1</version>
      <user-name>Emmanuel Gomez</user-name>
      <creator-name>Emmanuel Gomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5738</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-30T22:38:20+01:00</created-at>
      <creator-id type="integer">37704</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord associations\&quot; \&quot;mass-assignment security\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5738</number>
      <permalink>associationcollectionload_target-triggers-massassignmentsecurity-warning</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord associations&quot; bug &quot;mass-assignment security&quot;</tag>
      <title>AssociationCollection#load_target triggers MassAssignmentSecurity warning</title>
      <updated-at type="datetime">2010-09-30T22:38:25+01:00</updated-at>
      <user-id type="integer">37704</user-id>
      <version type="integer">2</version>
      <user-name>Emmanuel Gomez</user-name>
      <creator-name>Emmanuel Gomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5738</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've been meaning to learn how to properly produce a patch for Rails, so I went ahead and did it. 

The attached patch doesn't include tests, because I'm not sure how to test this without changing the behavior of MassAssignmentSecurity::Sanitizer. I'll come up with something and add some test coverage shortly.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've been meaning to learn how to properly produce a patch for
Rails, so I went ahead and did it.&lt;/p&gt;
&lt;p&gt;The attached patch doesn't include tests, because I'm not sure
how to test this without changing the behavior of
MassAssignmentSecurity::Sanitizer. I'll come up with something and
add some test coverage shortly.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-30T23:52:43+01:00</created-at>
      <creator-id type="integer">37704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5738</number>
      <permalink>associationcollectionload_target-triggers-massassignmentsecurity-warning</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord associations&quot; bug &quot;mass-assignment security&quot;</tag>
      <title>AssociationCollection#load_target triggers MassAssignmentSecurity warning</title>
      <updated-at type="datetime">2010-09-30T23:52:48+01:00</updated-at>
      <user-id type="integer">37704</user-id>
      <version type="integer">3</version>
      <user-name>Emmanuel Gomez</user-name>
      <creator-name>Emmanuel Gomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5738</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/30788)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/30788&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-07T05:19:38+01:00</created-at>
      <creator-id type="integer">37704</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord associations\&quot; bug \&quot;mass-assignment security\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5738</number>
      <permalink>associationcollectionload_target-triggers-massassignmentsecurity-warning</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations bug &quot;mass-assignment security&quot;</tag>
      <title>AssociationCollection#load_target triggers MassAssignmentSecurity warning</title>
      <updated-at type="datetime">2010-10-07T05:19:38+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">4</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Emmanuel Gomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5738</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/30789)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/30789&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-07T05:21:21+01:00</created-at>
      <creator-id type="integer">37704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5738</number>
      <permalink>associationcollectionload_target-triggers-massassignmentsecurity-warning</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations bug &quot;mass-assignment security&quot;</tag>
      <title>AssociationCollection#load_target triggers MassAssignmentSecurity warning</title>
      <updated-at type="datetime">2010-10-07T05:21:21+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">5</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Emmanuel Gomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5738</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:58:41+00:00</created-at>
      <creator-id type="integer">37704</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5738</number>
      <permalink>associationcollectionload_target-triggers-massassignmentsecurity-warning</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations bug &quot;mass-assignment security&quot;</tag>
      <title>AssociationCollection#load_target triggers MassAssignmentSecurity warning</title>
      <updated-at type="datetime">2011-02-02T18:45:08+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Emmanuel Gomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5738</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:58:42+00:00</created-at>
      <creator-id type="integer">37704</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5738</number>
      <permalink>associationcollectionload_target-triggers-massassignmentsecurity-warning</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord associations bug &quot;mass-assignment security&quot;</tag>
      <title>AssociationCollection#load_target triggers MassAssignmentSecurity warning</title>
      <updated-at type="datetime">2011-02-02T18:45:56+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Emmanuel Gomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5738</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T00:27:34+00:00</created-at>
      <creator-id type="integer">37704</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5738</number>
      <permalink>associationcollectionload_target-triggers-massassignmentsecurity-warning</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord associations bug &quot;mass-assignment security&quot;</tag>
      <title>AssociationCollection#load_target triggers MassAssignmentSecurity warning</title>
      <updated-at type="datetime">2011-02-19T09:28:12+00:00</updated-at>
      <user-id type="integer">137759</user-id>
      <version type="integer">8</version>
      <user-name>mklo</user-name>
      <creator-name>Emmanuel Gomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5738</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I have verified this is still an issue with tests in patch below.  There is a concurrency issue that is exposed by the same problem.  I have explained it in the patch as well [state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have verified this is still an issue with tests in patch
below. There is a concurrency issue that is exposed by the same
problem. I have explained it in the patch as well [state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-15T23:15:17+00:00</created-at>
      <creator-id type="integer">37704</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5738</number>
      <permalink>associationcollectionload_target-triggers-massassignmentsecurity-warning</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations bug &quot;mass-assignment security&quot;</tag>
      <title>AssociationCollection#load_target triggers MassAssignmentSecurity warning</title>
      <updated-at type="datetime">2011-03-15T23:15:22+00:00</updated-at>
      <user-id type="integer">29122</user-id>
      <version type="integer">9</version>
      <user-name>Steve F</user-name>
      <creator-name>Emmanuel Gomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5738</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>fcf91b3ee2caf78a4eab2d38649d198bfefdcb91</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-09-30T23:52:43+01:00</created-at>
      <filename>bug_5738.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">699839</id>
      <size type="integer">1303</size>
      <uploader-id type="integer">37704</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/699839/bug_5738.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>915910ae387bd2f937696fb5bb8ff267bc34e035</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-15T23:15:17+00:00</created-at>
      <filename>5738.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">960775</id>
      <size type="integer">3621</size>
      <uploader-id type="integer">29122</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/960775/5738.diff</url>
    </attachment>
  </attachments>
</ticket>
