<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-08T23:12:12+00:00</created-at>
  <creator-id type="integer">23080</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">391</number>
  <permalink>dirty-tracking-doesn-t-catch-in-place-changes-to-field-values</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>2.1 activerecord dirty</tag>
  <title>Dirty tracking doesn't catch in-place changes to field values</title>
  <updated-at type="datetime">2010-11-08T23:12:13+00:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">4</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>fhwang</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/391</url>
  <priority-name nil="true"></priority-name>
  <original-body>It appears that the dirty field functionality can miss field changes if they're done without outright object re-assignment. For example, this code:

user = User.find_by_login 'francis'
user.login &lt;&lt; '_the_king'
user.save

won't actually save the user record, because ActiveRecord isn't able to intercept String#&lt;&lt; . This code will also fail to save:

user = User.find_by_login 'francis'
user.login.replace 'francis_is_the_best'
user.save

for the same reason.

I suspect this is a duplicate of Andre Foeken's bug #360.

It is possible, of course, to workaround in specific cases by doing things like

user.login_changed!

but that seems pretty broken IMHO. If my ORM layer isn't letting me fully use my object-oriented language without having to worry about silent failures that can take forever to track down, I'm not sure what the &quot;O&quot; is there for.

Maybe the solution would be to turn this off by default, communicate to Rails developers the tricky side-effects of this feature, and then give them the ability to selectively turn the feature on in specific models?</original-body>
  <latest-body>It appears that the dirty field functionality can miss field changes if they're done without outright object re-assignment. For example, this code:

user = User.find_by_login 'francis'
user.login &lt;&lt; '_the_king'
user.save

won't actually save the user record, because ActiveRecord isn't able to intercept String#&lt;&lt; . This code will also fail to save:

user = User.find_by_login 'francis'
user.login.replace 'francis_is_the_best'
user.save

for the same reason.

I suspect this is a duplicate of Andre Foeken's bug #360.

It is possible, of course, to workaround in specific cases by doing things like

user.login_changed!

but that seems pretty broken IMHO. If my ORM layer isn't letting me fully use my object-oriented language without having to worry about silent failures that can take forever to track down, I'm not sure what the &quot;O&quot; is there for.

Maybe the solution would be to turn this off by default, communicate to Rails developers the tricky side-effects of this feature, and then give them the ability to selectively turn the feature on in specific models?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
It appears that the dirty field functionality can miss field changes if they're done without outright object re-assignment. For example, this code:
&lt;/p&gt;&lt;p&gt;
user = User.find_by_login 'francis'
&lt;/p&gt;&lt;p&gt;
user.login &amp;lt;&amp;lt; '_the_king'
&lt;/p&gt;&lt;p&gt;
user.save
&lt;/p&gt;&lt;p&gt;
won't actually save the user record, because ActiveRecord isn't able to intercept String#&amp;lt;&amp;lt; . This code will also fail to save:
&lt;/p&gt;&lt;p&gt;
user = User.find_by_login 'francis'
&lt;/p&gt;&lt;p&gt;
user.login.replace 'francis_is_the_best'
&lt;/p&gt;&lt;p&gt;
user.save
&lt;/p&gt;&lt;p&gt;
for the same reason.
&lt;/p&gt;&lt;p&gt;
I suspect this is a duplicate of Andre Foeken's bug &lt;a href=&quot;/projects/8994/tickets/360&quot; title=&quot;Ticket #360&quot;&gt;#360&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
It is possible, of course, to workaround in specific cases by doing things like
&lt;/p&gt;&lt;p&gt;
user.login_changed!
&lt;/p&gt;&lt;p&gt;
but that seems pretty broken IMHO. If my ORM layer isn't letting me fully use my object-oriented language without having to worry about silent failures that can take forever to track down, I'm not sure what the &quot;O&quot; is there for.
&lt;/p&gt;&lt;p&gt;
Maybe the solution would be to turn this off by default, communicate to Rails developers the tricky side-effects of this feature, and then give them the ability to selectively turn the feature on in specific models?
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It appears that the dirty field functionality can miss field changes if they're done without outright object re-assignment. For example, this code:

user = User.find_by_login 'francis'
user.login &lt;&lt; '_the_king'
user.save

won't actually save the user record, because ActiveRecord isn't able to intercept String#&lt;&lt; . This code will also fail to save:

user = User.find_by_login 'francis'
user.login.replace 'francis_is_the_best'
user.save

for the same reason.

I suspect this is a duplicate of Andre Foeken's bug #360.

It is possible, of course, to workaround in specific cases by doing things like

user.login_changed!

but that seems pretty broken IMHO. If my ORM layer isn't letting me fully use my object-oriented language without having to worry about silent failures that can take forever to track down, I'm not sure what the &quot;O&quot; is there for.

Maybe the solution would be to turn this off by default, communicate to Rails developers the tricky side-effects of this feature, and then give them the ability to selectively turn the feature on in specific models?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It appears that the dirty field functionality can miss field changes if they're done without outright object re-assignment. For example, this code:
&lt;/p&gt;&lt;p&gt;
user = User.find_by_login 'francis'
&lt;/p&gt;&lt;p&gt;
user.login &amp;lt;&amp;lt; '_the_king'
&lt;/p&gt;&lt;p&gt;
user.save
&lt;/p&gt;&lt;p&gt;
won't actually save the user record, because ActiveRecord isn't able to intercept String#&amp;lt;&amp;lt; . This code will also fail to save:
&lt;/p&gt;&lt;p&gt;
user = User.find_by_login 'francis'
&lt;/p&gt;&lt;p&gt;
user.login.replace 'francis_is_the_best'
&lt;/p&gt;&lt;p&gt;
user.save
&lt;/p&gt;&lt;p&gt;
for the same reason.
&lt;/p&gt;&lt;p&gt;
I suspect this is a duplicate of Andre Foeken's bug &lt;a href=&quot;/projects/8994/tickets/360&quot; title=&quot;Ticket #360&quot;&gt;#360&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
It is possible, of course, to workaround in specific cases by doing things like
&lt;/p&gt;&lt;p&gt;
user.login_changed!
&lt;/p&gt;&lt;p&gt;
but that seems pretty broken IMHO. If my ORM layer isn't letting me fully use my object-oriented language without having to worry about silent failures that can take forever to track down, I'm not sure what the &quot;O&quot; is there for.
&lt;/p&gt;&lt;p&gt;
Maybe the solution would be to turn this off by default, communicate to Rails developers the tricky side-effects of this feature, and then give them the ability to selectively turn the feature on in specific models?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-11T18:29:06+01:00</created-at>
      <creator-id type="integer">23080</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">391</number>
      <permalink>dirty-tracking-doesn-t-catch-in-place-changes-to-field-values</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Dirty tracking doesn't catch in-place changes to field values</title>
      <updated-at type="datetime">2008-06-11T18:29:06+01:00</updated-at>
      <user-id type="integer">23080</user-id>
      <version type="integer">1</version>
      <user-name>fhwang</user-name>
      <creator-name>fhwang</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/391</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is intentional and well-documented.

The dirty plugin froze attributes, treating the database values as immutable. This is a big change, though, so when I merged with Rails I kept attributes mutable and introduced user.login_will_change! instead.

I plan to make attributes frozen in Rails 2.2, though. In 2.1 I'll catch common mutators, typically on strings, and give a deprecation warning to give plenty of heads-up time before making the change.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This is intentional and well-documented.
&lt;/p&gt;&lt;p&gt;
The dirty plugin froze attributes, treating the database values as immutable. This is a big change, though, so when I merged with Rails I kept attributes mutable and introduced user.login_will_change! instead.
&lt;/p&gt;&lt;p&gt;
I plan to make attributes frozen in Rails 2.2, though. In 2.1 I'll catch common mutators, typically on strings, and give a deprecation warning to give plenty of heads-up time before making the change.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-11T20:09:13+01:00</created-at>
      <creator-id type="integer">23080</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">391</number>
      <permalink>dirty-tracking-doesn-t-catch-in-place-changes-to-field-values</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Dirty tracking doesn't catch in-place changes to field values</title>
      <updated-at type="datetime">2008-06-11T20:09:13+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>fhwang</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/391</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Is there one single place where this functionality -- as it exists now in Rails 2.1, and plans for the future -- is being documented? A pointer would be appreciated.

And perhaps this is already answered there, but: Is it possible to turn off dirty tracking for one model, or for all of them? I can appreciate the functionality that comes with model dirtying but I would also hope that the design of ActiveRecord can accommodate those who think that the tradeoffs aren't worth it for them.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Is there one single place where this functionality -- as it exists now in Rails 2.1, and plans for the future -- is being documented? A pointer would be appreciated.
&lt;/p&gt;&lt;p&gt;
And perhaps this is already answered there, but: Is it possible to turn off dirty tracking for one model, or for all of them? I can appreciate the functionality that comes with model dirtying but I would also hope that the design of ActiveRecord can accommodate those who think that the tradeoffs aren't worth it for them.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-11T20:27:42+01:00</created-at>
      <creator-id type="integer">23080</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">391</number>
      <permalink>dirty-tracking-doesn-t-catch-in-place-changes-to-field-values</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Dirty tracking doesn't catch in-place changes to field values</title>
      <updated-at type="datetime">2008-06-11T20:27:42+01:00</updated-at>
      <user-id type="integer">23080</user-id>
      <version type="integer">3</version>
      <user-name>fhwang</user-name>
      <creator-name>fhwang</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/391</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There is no tradeoff. Simply do not use the tracking methods if you do not wish to. You can turn off partial updates, which use dirty tracking, with ActiveRecord::Base.partial_updates = false. It's a global switch.

This feature and its ramifications are documented in ActiveRecord::Dirty.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
There is no tradeoff. Simply do not use the tracking methods if you do not wish to. You can turn off partial updates, which use dirty tracking, with ActiveRecord::Base.partial_updates = false. It's a global switch.
&lt;/p&gt;&lt;p&gt;
This feature and its ramifications are documented in ActiveRecord::Dirty.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-11T20:44:09+01:00</created-at>
      <creator-id type="integer">23080</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">391</number>
      <permalink>dirty-tracking-doesn-t-catch-in-place-changes-to-field-values</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Dirty tracking doesn't catch in-place changes to field values</title>
      <updated-at type="datetime">2008-06-11T20:44:09+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>fhwang</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/391</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;p&gt;When Coach began as Manhattan Leather Bags in 1941, they were inspired by   baseball glove design and they created discount handbags with similar qualities.&lt;strong&gt;&lt;a href=&quot;http://www.uk-supra.com&quot;&gt;supra shoes&lt;/a&gt;&lt;/strong&gt; didn't come along until years later. The original handbag collection   had twelve designs, and they were made from supple, tan, top-quality leathers,   and showed the same excellent craftsmanship and stitching that we still expect   today.&lt;/p&gt;
&lt;p&gt;Coach hired a woman named Bonnie Cashin in 1962, and she brought new looks to   Coach bags. She used many new fabrics and organic materials like jersey and   wool. She created the brass hardware that is symbolic of &lt;strong&gt;&lt;a href=&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland boots&lt;/a&gt;&lt;/strong&gt;. When   Lew Frankfort came aboard in 1979, he brought Coach to the next level, and they   became a name known the world over. Affordable luxury was not a concept that   many people knew, but now they would. Soon after Frankfort joined Coach, they   came out with a catalog, and opened their flagship store in New York City.&lt;/p&gt;
&lt;p&gt;In the 1980's, Coach expanded and made innovations that brought its brand   relevance and strength. They designed watches starting in 1988, and also   expanded their company to Tokyo. Japan still counts among the leading purchasers   of &lt;strong&gt;&lt;a href=&quot;http://www.allofcoach.com&quot;&gt;coach purses&lt;/a&gt;&lt;/strong&gt; and Coach heels. The manufacture of Coach shoes began in the mid   90's, and Reed Krakoff, the lead designer, loaned his talents to help put Coach   heels and &lt;a href=&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;louis vuitton bags outlet&lt;/strong&gt;&lt;/a&gt; on the map. Their shoes aren't as popular as their   handbags, but they are well worth the money invested in their purchase.&lt;/p&gt;
&lt;p&gt;Women love heels, but at times you may want to wear shoes that don't have   this height. &lt;strong&gt;&lt;a href=&quot;http://www.truereligionjeans-outlet.com&quot;&gt;true religion jeans outlet&lt;/a&gt;&lt;/strong&gt; are as dedicated to comfort as they are to style and   pizzazz. Coach platforms come in many styles, from gold loafers to slingbacks   with open toes. You may be able to find Coach shoes at discount prices online,   but be sure that you are buying genuine Coach products.&lt;/p&gt;
&lt;p&gt;If you're looking for &lt;a href=&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler jackets&lt;/strong&gt;&lt;/a&gt; that will make you feel and look glamorous, Coach   shoes and &lt;a href=&quot;http://www.chanelpursesbags.com&quot;&gt;&lt;strong&gt;chanel purses&lt;/strong&gt;&lt;/a&gt; can do that well. Coach sneakers and heels will make you   feel sporty, too. When selecting pumps or sandals to wear, you'll be happy to   count on the long-standing quality and service of the Coach company. They have   many styles to choose from, including chic and glamorous Coach boots and Coach   heels. Whether you are looking for sports shoes like Coach sneakers or sexy   shoes like Coach boots, the Coach name will never let you down.&lt;/p&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;When Coach began as Manhattan Leather Bags in 1941, they were
inspired by baseball glove design and they created discount
handbags with similar qualities.&lt;strong&gt;&lt;a href=
&quot;http://www.uk-supra.com&quot;&gt;supra shoes&lt;/a&gt;&lt;/strong&gt; didn't come
along until years later. The original handbag collection had twelve
designs, and they were made from supple, tan, top-quality leathers,
and showed the same excellent craftsmanship and stitching that we
still expect today.&lt;/p&gt;
&lt;p&gt;Coach hired a woman named Bonnie Cashin in 1962, and she brought
new looks to Coach bags. She used many new fabrics and organic
materials like jersey and wool. She created the brass hardware that
is symbolic of &lt;strong&gt;&lt;a href=
&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland boots&lt;/a&gt;&lt;/strong&gt;.
When Lew Frankfort came aboard in 1979, he brought Coach to the
next level, and they became a name known the world over. Affordable
luxury was not a concept that many people knew, but now they would.
Soon after Frankfort joined Coach, they came out with a catalog,
and opened their flagship store in New York City.&lt;/p&gt;
&lt;p&gt;In the 1980's, Coach expanded and made innovations that brought
its brand relevance and strength. They designed watches starting in
1988, and also expanded their company to Tokyo. Japan still counts
among the leading purchasers of &lt;strong&gt;&lt;a href=
&quot;http://www.allofcoach.com&quot;&gt;coach purses&lt;/a&gt;&lt;/strong&gt; and Coach
heels. The manufacture of Coach shoes began in the mid 90's, and
Reed Krakoff, the lead designer, loaned his talents to help put
Coach heels and &lt;a href=
&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;louis vuitton bags
outlet&lt;/strong&gt;&lt;/a&gt; on the map. Their shoes aren't as popular as
their handbags, but they are well worth the money invested in their
purchase.&lt;/p&gt;
&lt;p&gt;Women love heels, but at times you may want to wear shoes that
don't have this height. &lt;strong&gt;&lt;a href=
&quot;http://www.truereligionjeans-outlet.com&quot;&gt;true religion jeans
outlet&lt;/a&gt;&lt;/strong&gt; are as dedicated to comfort as they are to
style and pizzazz. Coach platforms come in many styles, from gold
loafers to slingbacks with open toes. You may be able to find Coach
shoes at discount prices online, but be sure that you are buying
genuine Coach products.&lt;/p&gt;
&lt;p&gt;If you're looking for &lt;a href=
&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler
jackets&lt;/strong&gt;&lt;/a&gt; that will make you feel and look glamorous,
Coach shoes and &lt;a href=
&quot;http://www.chanelpursesbags.com&quot;&gt;&lt;strong&gt;chanel
purses&lt;/strong&gt;&lt;/a&gt; can do that well. Coach sneakers and heels will
make you feel sporty, too. When selecting pumps or sandals to wear,
you'll be happy to count on the long-standing quality and service
of the Coach company. They have many styles to choose from,
including chic and glamorous Coach boots and Coach heels. Whether
you are looking for sports shoes like Coach sneakers or sexy shoes
like Coach boots, the Coach name will never let you down.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-08T01:31:28+00:00</created-at>
      <creator-id type="integer">23080</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">391</number>
      <permalink>dirty-tracking-doesn-t-catch-in-place-changes-to-field-values</permalink>
      <priority type="integer">18316</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.1 activerecord dirty</tag>
      <title>Dirty tracking doesn't catch in-place changes to field values</title>
      <updated-at type="datetime">2010-11-08T23:12:12+00:00</updated-at>
      <user-id type="integer">123546</user-id>
      <version type="integer">5</version>
      <user-name>jim123456</user-name>
      <creator-name>fhwang</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/391</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
