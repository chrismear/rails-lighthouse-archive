<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-25T04:39:51+00:00</created-at>
  <creator-id type="integer">47289</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3614</number>
  <permalink>customization-options-and-validation-consistency-for-validates_uniqueness_of-using-db-constraints</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>validates_uniqueness_of</tag>
  <title>Customization options and validation consistency for validates_uniqueness_of using db constraints</title>
  <updated-at type="datetime">2010-10-08T12:31:54+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">3</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>blythe</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3614</url>
  <priority-name>Low</priority-name>
  <original-body>This patch extends [#3486](https://rails.lighthouseapp.com/projects/8994/tickets/3486) to be consistent with standard AR validations and support customized error message. #3486 patches ActiveRecord to convert db-generated errors for unique constraint violations into active record error messages. 

This patch addresses some of those concerns and extends that functionality to:
1. Add hooks through validates_uniqueness_of to support customized error messages
    # These two are equivalent functions: lazy option skips standard proactive validation query
    validates_uniqueness_of     :name, :message =&gt; 'already used!&quot;, :lazy =&gt; true
    handle_unique_key_violation :name, :message =&gt; 'already used!&quot;

    # Extend the functionality to all AR objects
    ActiveRecord::Base.handle_unique_key_violations

2. Keep save! consistent with standard validation functionality 
The current implementation does not add errors for save! and raises RecordNotUnique instead of RecordInvalid exceptions.

* Add error messages to the AR instance as with standard validations. The following functionality would no longer work since no error messages are populated

   begin
     record.save!
   rescue =&gt; e
     flash[:error] = record.errors.full_messages.first
     redirect_to :blah_url
   end

* Raise a RecordInvalid subclassed exception for explicitly declared validations. Convenient for rescues_from functionality that looks for RecordInvalid


The patch always adds error messages for save and save!, but only raises RecordInvalid when validates_uniqueness_of is explicitly declared. Conversion of RecordNotUnique to AR errors is exposed in add_record_not_unique_errors to support for further customization (when explicitly handling RecordNotUnique).


The attached patches are based on current (and include #3486)</original-body>
  <latest-body>This patch extends [#3486](https://rails.lighthouseapp.com/projects/8994/tickets/3486) to be consistent with standard AR validations and support customized error message. #3486 patches ActiveRecord to convert db-generated errors for unique constraint violations into active record error messages. 

This patch addresses some of those concerns and extends that functionality to:
1. Add hooks through validates_uniqueness_of to support customized error messages
    # These two are equivalent functions: lazy option skips standard proactive validation query
    validates_uniqueness_of     :name, :message =&gt; 'already used!&quot;, :lazy =&gt; true
    handle_unique_key_violation :name, :message =&gt; 'already used!&quot;

    # Extend the functionality to all AR objects
    ActiveRecord::Base.handle_unique_key_violations

2. Keep save! consistent with standard validation functionality 
The current implementation does not add errors for save! and raises RecordNotUnique instead of RecordInvalid exceptions.

* Add error messages to the AR instance as with standard validations. The following functionality would no longer work since no error messages are populated

   begin
     record.save!
   rescue =&gt; e
     flash[:error] = record.errors.full_messages.first
     redirect_to :blah_url
   end

* Raise a RecordInvalid subclassed exception for explicitly declared validations. Convenient for rescues_from functionality that looks for RecordInvalid


The patch always adds error messages for save and save!, but only raises RecordInvalid when validates_uniqueness_of is explicitly declared. Conversion of RecordNotUnique to AR errors is exposed in add_record_not_unique_errors to support for further customization (when explicitly handling RecordNotUnique).


The attached patches are based on current (and include #3486)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch extends &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/3486&quot;&gt;#3486&lt;/a&gt;
to be consistent with standard AR validations and support
customized error message. &lt;a href=&quot;/projects/8994/tickets/3486&quot;
title=&quot;Ticket #3486&quot;&gt;#3486&lt;/a&gt; patches ActiveRecord to convert
db-generated errors for unique constraint violations into active
record error messages.&lt;/p&gt;
&lt;p&gt;This patch addresses some of those concerns and extends that
functionality to:&lt;br&gt;
1. Add hooks through validates_uniqueness_of to support customized
error messages&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# These two are equivalent functions: lazy option skips standard proactive validation query
validates_uniqueness_of     :name, :message =&amp;gt; 'already used!&quot;, :lazy =&amp;gt; true
handle_unique_key_violation :name, :message =&amp;gt; 'already used!&quot;

# Extend the functionality to all AR objects
ActiveRecord::Base.handle_unique_key_violations&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Keep save! consistent with standard validation
functionality&lt;br&gt;
The current implementation does not add errors for save! and raises
RecordNotUnique instead of RecordInvalid exceptions.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Add error messages to the AR instance as with standard
validations. The following functionality would no longer work since
no error messages are populated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;begin&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; record.save!&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;rescue =&amp;gt; e&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; flash[:error] = record.errors.full_messages.first
 redirect_to :blah_url&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raise a RecordInvalid subclassed exception for explicitly
declared validations. Convenient for rescues_from functionality
that looks for RecordInvalid&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The patch always adds error messages for save and save!, but
only raises RecordInvalid when validates_uniqueness_of is
explicitly declared. Conversion of RecordNotUnique to AR errors is
exposed in add_record_not_unique_errors to support for further
customization (when explicitly handling RecordNotUnique).&lt;/p&gt;
&lt;p&gt;The attached patches are based on current (and include &lt;a href=
&quot;/projects/8994/tickets/3486&quot; title=&quot;Ticket #3486&quot;&gt;#3486&lt;/a&gt;)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch extends [#3486](https://rails.lighthouseapp.com/projects/8994/tickets/3486) to be consistent with standard AR validations and support customized error message. #3486 patches ActiveRecord to convert db-generated errors for unique constraint violations into active record error messages. 

This patch addresses some of those concerns and extends that functionality to:
1. Add hooks through validates_uniqueness_of to support customized error messages
    # These two are equivalent functions: lazy option skips standard proactive validation query
    validates_uniqueness_of     :name, :message =&gt; 'already used!&quot;, :lazy =&gt; true
    handle_unique_key_violation :name, :message =&gt; 'already used!&quot;

    # Extend the functionality to all AR objects
    ActiveRecord::Base.handle_unique_key_violations

2. Keep save! consistent with standard validation functionality 
The current implementation does not add errors for save! and raises RecordNotUnique instead of RecordInvalid exceptions.

* Add error messages to the AR instance as with standard validations. The following functionality would no longer work since no error messages are populated

   begin
     record.save!
   rescue =&gt; e
     flash[:error] = record.errors.full_messages.first
     redirect_to :blah_url
   end

* Raise a RecordInvalid subclassed exception for explicitly declared validations. Convenient for rescues_from functionality that looks for RecordInvalid


The patch always adds error messages for save and save!, but only raises RecordInvalid when validates_uniqueness_of is explicitly declared. Conversion of RecordNotUnique to AR errors is exposed in add_record_not_unique_errors to support for further customization (when explicitly handling RecordNotUnique).


The attached patches are based on current (and include #3486)</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch extends &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/3486&quot;&gt;#3486&lt;/a&gt;
to be consistent with standard AR validations and support
customized error message. &lt;a href=&quot;/projects/8994/tickets/3486&quot;
title=&quot;Ticket #3486&quot;&gt;#3486&lt;/a&gt; patches ActiveRecord to convert
db-generated errors for unique constraint violations into active
record error messages.&lt;/p&gt;
&lt;p&gt;This patch addresses some of those concerns and extends that
functionality to:&lt;br&gt;
1. Add hooks through validates_uniqueness_of to support customized
error messages&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# These two are equivalent functions: lazy option skips standard proactive validation query
validates_uniqueness_of     :name, :message =&amp;gt; 'already used!&quot;, :lazy =&amp;gt; true
handle_unique_key_violation :name, :message =&amp;gt; 'already used!&quot;

# Extend the functionality to all AR objects
ActiveRecord::Base.handle_unique_key_violations&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Keep save! consistent with standard validation
functionality&lt;br&gt;
The current implementation does not add errors for save! and raises
RecordNotUnique instead of RecordInvalid exceptions.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Add error messages to the AR instance as with standard
validations. The following functionality would no longer work since
no error messages are populated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;begin&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; record.save!&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;rescue =&amp;gt; e&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; flash[:error] = record.errors.full_messages.first
 redirect_to :blah_url&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raise a RecordInvalid subclassed exception for explicitly
declared validations. Convenient for rescues_from functionality
that looks for RecordInvalid&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The patch always adds error messages for save and save!, but
only raises RecordInvalid when validates_uniqueness_of is
explicitly declared. Conversion of RecordNotUnique to AR errors is
exposed in add_record_not_unique_errors to support for further
customization (when explicitly handling RecordNotUnique).&lt;/p&gt;
&lt;p&gt;The attached patches are based on current (and include &lt;a href=
&quot;/projects/8994/tickets/3486&quot; title=&quot;Ticket #3486&quot;&gt;#3486&lt;/a&gt;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-25T04:39:51+00:00</created-at>
      <creator-id type="integer">47289</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3614</number>
      <permalink>customization-options-and-validation-consistency-for-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_uniqueness_of</tag>
      <title>Customization options and validation consistency for validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2009-12-25T04:39:58+00:00</updated-at>
      <user-id type="integer">47289</user-id>
      <version type="integer">1</version>
      <user-name>blythe</user-name>
      <creator-name>blythe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3614</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-08T12:31:51+01:00</created-at>
      <creator-id type="integer">47289</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3614</number>
      <permalink>customization-options-and-validation-consistency-for-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>validates_uniqueness_of</tag>
      <title>Customization options and validation consistency for validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-10-08T12:31:53+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>blythe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3614</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-08T12:31:51+01:00</created-at>
      <creator-id type="integer">47289</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3614</number>
      <permalink>customization-options-and-validation-consistency-for-validates_uniqueness_of-using-db-constraints</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>validates_uniqueness_of</tag>
      <title>Customization options and validation consistency for validates_uniqueness_of using db constraints</title>
      <updated-at type="datetime">2010-10-08T12:31:54+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">3</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>blythe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3614</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>3b9430c382126158db87744b9969f151886a6fc5</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-12-25T04:39:51+00:00</created-at>
      <filename>full_stable_2_3.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">361563</id>
      <size type="integer">30882</size>
      <uploader-id type="integer">47289</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/361563/full_stable_2_3.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>6f7ce3e58d732b06aa5906281bfc4ac1ad5113e3</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-12-25T04:39:55+00:00</created-at>
      <filename>master.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">361564</id>
      <size type="integer">35102</size>
      <uploader-id type="integer">47289</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/361564/master.patch</url>
    </attachment>
  </attachments>
</ticket>
