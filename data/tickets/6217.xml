<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2010-12-23T11:10:27+00:00</created-at>
  <creator-id type="integer">42916</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6217</number>
  <permalink>has_many-through-associations-are-created-with-create-even-if-the-parent-is-created-with-create</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>activerecord has_many_through validation</tag>
  <title>has_many :through associations are created with .create! even if the parent is created with .create</title>
  <updated-at type="datetime">2011-03-29T04:52:41+01:00</updated-at>
  <user-id type="integer">20306</user-id>
  <version type="integer">6</version>
  <user-name>Erik Michaels-Ober</user-name>
  <creator-name>Greg Hazel</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6217</url>
  <priority-name nil="true"></priority-name>
  <original-body>When saving a model with a has_many :through association using .create, a validation exception can be raised when none is expected.

@@@ ruby
class Address &lt; ActiveRecord::Base
  belongs_to :user

  def validate
    errors.add :user, &quot;This is a test.&quot;
  end
end

class User &lt; ActiveRecord::Base
  has_many :addresses, :validate =&gt; true
  has_many :admins, :through =&gt; :addresses, :source =&gt; :user
end

# (BUG) this raises a ActiveRecord::RecordInvalid (and I did not expect it to since I used .create)
User.create(:admins =&gt; [User.find(1)])

# (OK) this raises a ActiveRecord::RecordInvalid (and I expect it to since I used .create!)
User.create!(:addresses =&gt; [Address.find(1)])

# (OK) this does not raise anything (and I did not expect it to since I used .create)
User.create(:addresses =&gt; [Address.find(1)])
@@@

I'm using Rails 2.3.10, but I believe the same applies to Rails 3.</original-body>
  <latest-body>When saving a model with a has_many :through association using .create, a validation exception can be raised when none is expected.

@@@ ruby
class Address &lt; ActiveRecord::Base
  belongs_to :user

  def validate
    errors.add :user, &quot;This is a test.&quot;
  end
end

class User &lt; ActiveRecord::Base
  has_many :addresses, :validate =&gt; true
  has_many :admins, :through =&gt; :addresses, :source =&gt; :user
end

# (BUG) this raises a ActiveRecord::RecordInvalid (and I did not expect it to since I used .create)
User.create(:admins =&gt; [User.find(1)])

# (OK) this raises a ActiveRecord::RecordInvalid (and I expect it to since I used .create!)
User.create!(:addresses =&gt; [Address.find(1)])

# (OK) this does not raise anything (and I did not expect it to since I used .create)
User.create(:addresses =&gt; [Address.find(1)])
@@@

I'm using Rails 2.3.10, but I believe the same applies to Rails 3.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When saving a model with a has_many :through association using
.create, a validation exception can be raised when none is
expected.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Address &amp;lt; ActiveRecord::Base
  belongs_to :user

  def validate
    errors.add :user, &quot;This is a test.&quot;
  end
end

class User &amp;lt; ActiveRecord::Base
  has_many :addresses, :validate =&amp;gt; true
  has_many :admins, :through =&amp;gt; :addresses, :source =&amp;gt; :user
end

# (BUG) this raises a ActiveRecord::RecordInvalid (and I did not expect it to since I used .create)
User.create(:admins =&amp;gt; [User.find(1)])

# (OK) this raises a ActiveRecord::RecordInvalid (and I expect it to since I used .create!)
User.create!(:addresses =&amp;gt; [Address.find(1)])

# (OK) this does not raise anything (and I did not expect it to since I used .create)
User.create(:addresses =&amp;gt; [Address.find(1)])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm using Rails 2.3.10, but I believe the same applies to Rails
3.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When saving a model with a has_many :through association using .create, a validation exception can be raised when none is expected.

@@@ ruby
class Address &lt; ActiveRecord::Base
  belongs_to :user

  def validate
    errors.add :user, &quot;This is a test.&quot;
  end
end

class User &lt; ActiveRecord::Base
  has_many :addresses, :validate =&gt; true
  has_many :admins, :through =&gt; :addresses, :source =&gt; :user
end

# (BUG) this raises a ActiveRecord::RecordInvalid (and I did not expect it to since I used .create)
User.create(:admins =&gt; [User.find(1)])

# (OK) this raises a ActiveRecord::RecordInvalid (and I expect it to since I used .create!)
User.create!(:addresses =&gt; [Address.find(1)])

# (OK) this does not raise anything (and I did not expect it to since I used .create)
User.create(:addresses =&gt; [Address.find(1)])
@@@

I'm using Rails 2.3.10, but I believe the same applies to Rails 3.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When saving a model with a has_many :through association using
.create, a validation exception can be raised when none is
expected.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Address &amp;lt; ActiveRecord::Base
  belongs_to :user

  def validate
    errors.add :user, &quot;This is a test.&quot;
  end
end

class User &amp;lt; ActiveRecord::Base
  has_many :addresses, :validate =&amp;gt; true
  has_many :admins, :through =&amp;gt; :addresses, :source =&amp;gt; :user
end

# (BUG) this raises a ActiveRecord::RecordInvalid (and I did not expect it to since I used .create)
User.create(:admins =&amp;gt; [User.find(1)])

# (OK) this raises a ActiveRecord::RecordInvalid (and I expect it to since I used .create!)
User.create!(:addresses =&amp;gt; [Address.find(1)])

# (OK) this does not raise anything (and I did not expect it to since I used .create)
User.create(:addresses =&amp;gt; [Address.find(1)])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm using Rails 2.3.10, but I believe the same applies to Rails
3.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-23T11:10:27+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6217</number>
      <permalink>has_many-through-associations-are-created-with-create-even-if-the-parent-is-created-with-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord has_many_through validation</tag>
      <title>has_many :through associations are created with .create! even if the parent is created with .create</title>
      <updated-at type="datetime">2010-12-23T11:25:15+00:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">1</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6217</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-24T00:00:10+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6217</number>
      <permalink>has_many-through-associations-are-created-with-create-even-if-the-parent-is-created-with-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord has_many_through validation</tag>
      <title>has_many :through associations are created with .create! even if the parent is created with .create</title>
      <updated-at type="datetime">2011-03-24T00:00:36+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">2</version>
      <user-name>rails</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6217</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-24T00:00:10+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6217</number>
      <permalink>has_many-through-associations-are-created-with-create-even-if-the-parent-is-created-with-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord has_many_through validation</tag>
      <title>has_many :through associations are created with .create! even if the parent is created with .create</title>
      <updated-at type="datetime">2011-03-24T00:00:23+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6217</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This bug still exists. [state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;This bug still exists. [state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-24T00:01:53+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6217</number>
      <permalink>has_many-through-associations-are-created-with-create-even-if-the-parent-is-created-with-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord has_many_through validation</tag>
      <title>has_many :through associations are created with .create! even if the parent is created with .create</title>
      <updated-at type="datetime">2011-03-24T00:02:19+00:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">4</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6217</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 this problem also exists when using the &lt;&lt; method.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 this problem also exists when using the &amp;lt;&amp;lt; method.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-29T02:20:48+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6217</number>
      <permalink>has_many-through-associations-are-created-with-create-even-if-the-parent-is-created-with-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord has_many_through validation</tag>
      <title>has_many :through associations are created with .create! even if the parent is created with .create</title>
      <updated-at type="datetime">2011-03-29T02:20:55+01:00</updated-at>
      <user-id type="integer">23439</user-id>
      <version type="integer">5</version>
      <user-name>Alex</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6217</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1

This is causing [an issue](https://github.com/sferik/rails_admin/issues/281) in RailsAdmin.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;This is causing &lt;a href=
&quot;https://github.com/sferik/rails_admin/issues/281&quot;&gt;an issue&lt;/a&gt; in
RailsAdmin.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-29T04:52:33+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6217</number>
      <permalink>has_many-through-associations-are-created-with-create-even-if-the-parent-is-created-with-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord has_many_through validation</tag>
      <title>has_many :through associations are created with .create! even if the parent is created with .create</title>
      <updated-at type="datetime">2011-03-29T04:52:41+01:00</updated-at>
      <user-id type="integer">20306</user-id>
      <version type="integer">6</version>
      <user-name>Erik Michaels-Ober</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6217</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
