<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-27T00:42:58+01:00</created-at>
  <creator-id type="integer">30112</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">911</number>
  <permalink>field_changed-should-check-also-string-columns-for-changes-from-nil-to</permalink>
  <priority type="integer">363</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>2.1 activerecord dirty</tag>
  <title>field_changed? should check also string columns for changes from nil to ''</title>
  <updated-at type="datetime">2008-11-27T03:17:43+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Edgars Beigarts</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/911</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>An empty string is treated as a null value in Oracle.
So why not add &quot; || column.type == :string&quot; ?

@@@
def field_changed?(attr, old, value)
  if column = column_for_attribute(attr)
    if (column.type == :integer || column.type == :string) &amp;&amp; column.null &amp;&amp; (old.nil? || old == 0)
      # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.
      # Hence we don't record it as a change if the value changes from nil to ''.
      # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll
      # be typecast back to 0 (''.to_i =&gt; 0)
      value = nil if value.blank?
    else
      value = column.type_cast(value)
    end
  end

  old != value
end
@@@</original-body>
  <latest-body>An empty string is treated as a null value in Oracle.
So why not add &quot; || column.type == :string&quot; ?

@@@
def field_changed?(attr, old, value)
  if column = column_for_attribute(attr)
    if (column.type == :integer || column.type == :string) &amp;&amp; column.null &amp;&amp; (old.nil? || old == 0)
      # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.
      # Hence we don't record it as a change if the value changes from nil to ''.
      # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll
      # be typecast back to 0 (''.to_i =&gt; 0)
      value = nil if value.blank?
    else
      value = column.type_cast(value)
    end
  end

  old != value
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;An empty string is treated as a null value in Oracle.
So why not add &quot; || column.type == :string&quot; ?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
def field_changed?(attr, old, value)
  if column = column_for_attribute(attr)
    if (column.type == :integer || column.type == :string) &amp;amp;&amp;amp; column.null &amp;amp;&amp;amp; (old.nil? || old == 0)
      # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.
      # Hence we don't record it as a change if the value changes from nil to ''.
      # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll
      # be typecast back to 0 (''.to_i =&amp;gt; 0)
      value = nil if value.blank?
    else
      value = column.type_cast(value)
    end
  end

  old != value
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>An empty string is treated as a null value in Oracle.
So why not add &quot; || column.type == :string&quot; ?

@@@
def field_changed?(attr, old, value)
  if column = column_for_attribute(attr)
    if (column.type == :integer || column.type == :string) &amp;&amp; column.null &amp;&amp; (old.nil? || old == 0)
      # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.
      # Hence we don't record it as a change if the value changes from nil to ''.
      # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll
      # be typecast back to 0 (''.to_i =&gt; 0)
      value = nil if value.blank?
    else
      value = column.type_cast(value)
    end
  end

  old != value
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;An empty string is treated as a null value in Oracle.
So why not add &quot; || column.type == :string&quot; ?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
def field_changed?(attr, old, value)
  if column = column_for_attribute(attr)
    if (column.type == :integer || column.type == :string) &amp;amp;&amp;amp; column.null &amp;amp;&amp;amp; (old.nil? || old == 0)
      # For nullable integer columns, NULL gets stored in database for blank (i.e. '') values.
      # Hence we don't record it as a change if the value changes from nil to ''.
      # If an old value of 0 is set to '' we want this to get changed to nil as otherwise it'll
      # be typecast back to 0 (''.to_i =&amp;gt; 0)
      value = nil if value.blank?
    else
      value = column.type_cast(value)
    end
  end

  old != value
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-27T00:42:59+01:00</created-at>
      <creator-id type="integer">30112</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">911</number>
      <permalink>field_changed-should-check-also-string-columns-for-changes-from-nil-to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord dirty</tag>
      <title>field_changed? should check also string columns for changes from nil to ''</title>
      <updated-at type="datetime">2008-08-27T00:42:59+01:00</updated-at>
      <user-id type="integer">30112</user-id>
      <version type="integer">1</version>
      <user-name>Edgars Beigarts</user-name>
      <creator-name>Edgars Beigarts</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/911</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-27T03:17:37+00:00</created-at>
      <creator-id type="integer">30112</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">911</number>
      <permalink>field_changed-should-check-also-string-columns-for-changes-from-nil-to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.1 activerecord dirty</tag>
      <title>field_changed? should check also string columns for changes from nil to ''</title>
      <updated-at type="datetime">2008-11-27T03:17:43+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Edgars Beigarts</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/911</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
