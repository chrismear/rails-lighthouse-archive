<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-10T17:08:27+00:00</created-at>
  <creator-id type="integer">137</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1351</number>
  <permalink>pluralize-doesnt-handle-uncountable-words-in-a-sentence</permalink>
  <priority type="integer">752</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>inflector patch pluralize uncountable</tag>
  <title>Pluralize doesn't handle uncountable words in a sentence</title>
  <updated-at type="datetime">2008-11-16T20:28:43+00:00</updated-at>
  <user-id type="integer">83</user-id>
  <version type="integer">8</version>
  <user-name>DHH</user-name>
  <creator-name>James Adam</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1351</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Pluralise seems to be slightly broken. Given the following rules:

@@@ruby
Inflector.inflections do |inflect|
  inflect.uncountable 'equipment'
end
@@@

I would expect `&quot;sports equipment&quot;.pluralize` to return `&quot;sports equipment&quot;`, but instead it returns `&quot;sports equipments&quot;`. This is because the `pluralize` method only checks for uncountable terms where the whole string is flagged as uncountable.

Here's an alternative implementation - I'll try and work up a patch with tests soon:

@@@ruby
module Inflector
  def pluralize(word)
   sentence = word.to_s.dup.split(&quot; &quot;)
   result = sentence.pop
   
   if inflections.uncountables.include?(result.downcase)
     (sentence &lt;&lt; result).join(&quot; &quot;)
   else
     inflections.plurals.each { |(rule, replacement)| break if result.gsub!(rule, replacement) }
     (sentence &lt;&lt; result).join(&quot; &quot;)
   end
  end
end
@@@</original-body>
  <latest-body>Pluralise seems to be slightly broken. Given the following rules:

@@@ruby
Inflector.inflections do |inflect|
  inflect.uncountable 'equipment'
end
@@@

I would expect `&quot;sports equipment&quot;.pluralize` to return `&quot;sports equipment&quot;`, but instead it returns `&quot;sports equipments&quot;`. This is because the `pluralize` method only checks for uncountable terms where the whole string is flagged as uncountable.

Here's an alternative implementation - I'll try and work up a patch with tests soon:

@@@ruby
module Inflector
  def pluralize(word)
   sentence = word.to_s.dup.split(&quot; &quot;)
   result = sentence.pop
   
   if inflections.uncountables.include?(result.downcase)
     (sentence &lt;&lt; result).join(&quot; &quot;)
   else
     inflections.plurals.each { |(rule, replacement)| break if result.gsub!(rule, replacement) }
     (sentence &lt;&lt; result).join(&quot; &quot;)
   end
  end
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Pluralise seems to be slightly broken. Given the following
rules:&lt;/p&gt;
&lt;p&gt;@@@ruby Inflector.inflections do |inflect| inflect.uncountable
'equipment' end&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;

I would expect `&amp;quot;sports equipment&amp;quot;.pluralize` to return `&amp;quot;sports equipment&amp;quot;`, but instead it returns `&amp;quot;sports equipments&amp;quot;`. This is because the `pluralize` method only checks for uncountable terms where the whole string is flagged as uncountable.

Here's an alternative implementation - I'll try and work up a patch with tests soon:

@@@ruby
module Inflector
  def pluralize(word)
   sentence = word.to_s.dup.split(&amp;quot; &amp;quot;)
   result = sentence.pop

   if inflections.uncountables.include?(result.downcase)
     (sentence &amp;lt;&amp;lt; result).join(&amp;quot; &amp;quot;)
   else
     inflections.plurals.each { |(rule, replacement)| break if result.gsub!(rule, replacement) }
     (sentence &amp;lt;&amp;lt; result).join(&amp;quot; &amp;quot;)
   end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Given the following rules:

@@@ ruby
Inflector.inflections do |inflect|
  inflect.uncountable 'equipment'
end
@@@

I would expect `&quot;sports equipment&quot;.pluralize` to return `&quot;sports equipment&quot;`, but instead it returns `&quot;sports equipments&quot;`. This is because the `pluralize` method only checks for uncountable terms where the whole string is flagged as uncountable.

Patch with test attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Given the following rules:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Inflector.inflections do |inflect|
  inflect.uncountable 'equipment'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would expect &lt;code&gt;&quot;sports equipment&quot;.pluralize&lt;/code&gt; to
return &lt;code&gt;&quot;sports equipment&quot;&lt;/code&gt;, but instead it returns
&lt;code&gt;&quot;sports equipments&quot;&lt;/code&gt;. This is because the
&lt;code&gt;pluralize&lt;/code&gt; method only checks for uncountable terms
where the whole string is flagged as uncountable.&lt;/p&gt;
&lt;p&gt;Patch with test attached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-10T17:08:27+00:00</created-at>
      <creator-id type="integer">137</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1351</number>
      <permalink>pluralize-doesnt-handle-uncountable-words-in-a-sentence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>inflector pluralize uncountable</tag>
      <title>Pluralize doesn't handle uncountable words in a sentence</title>
      <updated-at type="datetime">2008-11-10T17:21:23+00:00</updated-at>
      <user-id type="integer">137</user-id>
      <version type="integer">1</version>
      <user-name>James Adam</user-name>
      <creator-name>James Adam</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1351</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>When you write words = phrase.to_s.dup.split(&quot; &quot;), it seems that dup is redundant, and adds an unnecessary extra memory consumption. split is not destructive, and can safely be called on phrase.to_s.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When you write words = phrase.to_s.dup.split(&quot; &quot;), it seems that
dup is redundant, and adds an unnecessary extra memory consumption.
split is not destructive, and can safely be called on
phrase.to_s.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-14T13:36:27+00:00</created-at>
      <creator-id type="integer">137</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: inflector pluralize uncountable
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1351</number>
      <permalink>pluralize-doesnt-handle-uncountable-words-in-a-sentence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>inflector patch pluralize uncountable</tag>
      <title>Pluralize doesn't handle uncountable words in a sentence</title>
      <updated-at type="datetime">2008-11-14T13:36:31+00:00</updated-at>
      <user-id type="integer">17949</user-id>
      <version type="integer">2</version>
      <user-name>Daniel Schierbeck</user-name>
      <creator-name>James Adam</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1351</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Updated patch to avoid using `dup`</body>
      <body-html>&lt;div&gt;&lt;p&gt;Updated patch to avoid using &lt;code&gt;dup&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-14T13:43:50+00:00</created-at>
      <creator-id type="integer">137</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1351</number>
      <permalink>pluralize-doesnt-handle-uncountable-words-in-a-sentence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>inflector patch pluralize uncountable</tag>
      <title>Pluralize doesn't handle uncountable words in a sentence</title>
      <updated-at type="datetime">2008-11-14T13:43:54+00:00</updated-at>
      <user-id type="integer">137</user-id>
      <version type="integer">3</version>
      <user-name>James Adam</user-name>
      <creator-name>James Adam</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1351</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Great point Daniel

I think the dup was only there as a hold-over from the previous  
implementation. I'll amend the patch now.

Thanks again,

James

On 14 Nov 2008, at 13:36, Lighthouse wrote:</body>
      <body-html>&lt;div&gt;&lt;p&gt;Great point Daniel&lt;/p&gt;
&lt;p&gt;I think the dup was only there as a hold-over from the previous
implementation. I'll amend the patch now.&lt;/p&gt;
&lt;p&gt;Thanks again,&lt;/p&gt;
&lt;p&gt;James&lt;/p&gt;
&lt;p&gt;On 14 Nov 2008, at 13:36, Lighthouse wrote:&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-14T13:45:06+00:00</created-at>
      <creator-id type="integer">137</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1351</number>
      <permalink>pluralize-doesnt-handle-uncountable-words-in-a-sentence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>inflector patch pluralize uncountable</tag>
      <title>Pluralize doesn't handle uncountable words in a sentence</title>
      <updated-at type="datetime">2008-11-14T13:45:10+00:00</updated-at>
      <user-id type="integer">137</user-id>
      <version type="integer">4</version>
      <user-name>James Adam</user-name>
      <creator-name>James Adam</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1351</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1, with the latest change, this looks like an elegant solution.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1, with the latest change, this looks like an elegant
solution.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-14T14:20:06+00:00</created-at>
      <creator-id type="integer">137</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1351</number>
      <permalink>pluralize-doesnt-handle-uncountable-words-in-a-sentence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>inflector patch pluralize uncountable</tag>
      <title>Pluralize doesn't handle uncountable words in a sentence</title>
      <updated-at type="datetime">2008-11-14T14:20:07+00:00</updated-at>
      <user-id type="integer">17949</user-id>
      <version type="integer">5</version>
      <user-name>Daniel Schierbeck</user-name>
      <creator-name>James Adam</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1351</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hmm, pluralize(word) intends to me that it's about pluralizing a word, not a phrase. If this was to pass, all the inflectors should be handling phrases. Which I think perhaps is a bit much to promise?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hmm, pluralize(word) intends to me that it's about pluralizing a
word, not a phrase. If this was to pass, all the inflectors should
be handling phrases. Which I think perhaps is a bit much to
promise?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-16T15:13:48+00:00</created-at>
      <creator-id type="integer">137</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1351</number>
      <permalink>pluralize-doesnt-handle-uncountable-words-in-a-sentence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>inflector patch pluralize uncountable</tag>
      <title>Pluralize doesn't handle uncountable words in a sentence</title>
      <updated-at type="datetime">2008-11-16T15:13:53+00:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">6</version>
      <user-name>DHH</user-name>
      <creator-name>James Adam</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1351</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>That could be a fair point; part of the motivation behind the patch is that, by the examples in the RDoc above it, I do expect `pluralize` to work on phrases:

@@@ ruby
&quot;the blue mailman&quot;.pluralize # =&gt; &quot;the blue mailmen&quot;
@@@

If that example were to be removed, I wouldn't have so readily expected `pluralise` to work on my phrase (&quot;sports equipment&quot;), and would've created a wrapper for pluralize in my own app.

I'm not sure *all* the inflectors would need to know/care about phrases - probably only pluralize and singularize. As a rough sketch:

@@@ ruby
def with_last_word(phrase, &amp;block)
  words = phrase.split(&quot; &quot;)
  last_word = words.pop
  words.push(yield(last_word))
  words.join(&quot; &quot;)
end

def pluralize(phrase)
  with_last_word(phrase) { |w| w + 's' }
end

def singularize(phrase)
  with_last_word(phrase) { |w| w.gsub(/s$/, '') }
end

pluralize(&quot;the dancing fool&quot;) # =&gt; &quot;the dancing fools&quot;
singularize(&quot;prancing idiots&quot;) # =&gt; &quot;prancing idiot&quot;
@@@

If you feel this is worthwhile, I'll work up a proper patch for both methods. Otherwise, I feel that the 'blue mailmen' example should be removed, as it's misleading and encourages the broken behaviour.</body>
      <body-html>&lt;div&gt;&lt;p&gt;That could be a fair point; part of the motivation behind the
patch is that, by the examples in the RDoc above it, I do expect
&lt;code&gt;pluralize&lt;/code&gt; to work on phrases:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;quot;the blue mailman&amp;quot;.pluralize # =&amp;gt; &amp;quot;the blue mailmen&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If that example were to be removed, I wouldn't have so readily
expected &lt;code&gt;pluralise&lt;/code&gt; to work on my phrase (&quot;sports
equipment&quot;), and would've created a wrapper for pluralize in my own
app.&lt;/p&gt;
&lt;p&gt;I'm not sure &lt;em&gt;all&lt;/em&gt; the inflectors would need to know/care
about phrases - probably only pluralize and singularize. As a rough
sketch:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
def with_last_word(phrase, &amp;amp;block)
  words = phrase.split(&amp;quot; &amp;quot;)
  last_word = words.pop
  words.push(yield(last_word))
  words.join(&amp;quot; &amp;quot;)
end

def pluralize(phrase)
  with_last_word(phrase) { |w| w + 's' }
end

def singularize(phrase)
  with_last_word(phrase) { |w| w.gsub(/s$/, '') }
end

pluralize(&amp;quot;the dancing fool&amp;quot;) # =&amp;gt; &amp;quot;the dancing fools&amp;quot;
singularize(&amp;quot;prancing idiots&amp;quot;) # =&amp;gt; &amp;quot;prancing idiot&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you feel this is worthwhile, I'll work up a proper patch for
both methods. Otherwise, I feel that the 'blue mailmen' example
should be removed, as it's misleading and encourages the broken
behaviour.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-16T19:54:16+00:00</created-at>
      <creator-id type="integer">137</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1351</number>
      <permalink>pluralize-doesnt-handle-uncountable-words-in-a-sentence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>inflector patch pluralize uncountable</tag>
      <title>Pluralize doesn't handle uncountable words in a sentence</title>
      <updated-at type="datetime">2008-11-16T19:54:18+00:00</updated-at>
      <user-id type="integer">137</user-id>
      <version type="integer">7</version>
      <user-name>James Adam</user-name>
      <creator-name>James Adam</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1351</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree. I think it's cleaner to keep pluralize/singularize to words as all the other inflectors do that too. I'll remove blue mailmen. Don't know how that snuck in there.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree. I think it's cleaner to keep pluralize/singularize to
words as all the other inflectors do that too. I'll remove blue
mailmen. Don't know how that snuck in there.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-16T20:28:41+00:00</created-at>
      <creator-id type="integer">137</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1351</number>
      <permalink>pluralize-doesnt-handle-uncountable-words-in-a-sentence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>inflector patch pluralize uncountable</tag>
      <title>Pluralize doesn't handle uncountable words in a sentence</title>
      <updated-at type="datetime">2008-11-16T20:28:43+00:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">8</version>
      <user-name>DHH</user-name>
      <creator-name>James Adam</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1351</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>d4e88e741c7cada7339a2872db777f1ec86520bb</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-11-14T13:43:50+00:00</created-at>
      <filename>fix_pluralize.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">62279</id>
      <size type="integer">2182</size>
      <uploader-id type="integer">137</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/62279/fix_pluralize.patch</url>
    </attachment>
  </attachments>
</ticket>
