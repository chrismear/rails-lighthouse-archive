From 48bdc3de7d3934dc7d3af0d33c196eba4b0ff69c Mon Sep 17 00:00:00 2001
From: Prem Sichanugrist <s@sikachu.com>
Date: Fri, 10 Sep 2010 22:43:02 +0700
Subject: [PATCH] Use `Time.current` to maintain consistency with AS::Duration

In [32b82e4c6f5523cdf5ee78c3022c50b46e018351], the committer has switch
methods in AS::Duration to use `Time.current` to return the correct
duration based on the `Time.default_zone` instead of using `Time.now`.
---
 .../lib/active_support/core_ext/numeric/time.rb    |    4 +-
 activesupport/test/core_ext/numeric_ext_test.rb    |   38 ++++++++++++++++++++
 2 files changed, 40 insertions(+), 2 deletions(-)

diff --git a/activesupport/lib/active_support/core_ext/numeric/time.rb b/activesupport/lib/active_support/core_ext/numeric/time.rb
index bc7f180..4921e15 100644
--- a/activesupport/lib/active_support/core_ext/numeric/time.rb
+++ b/activesupport/lib/active_support/core_ext/numeric/time.rb
@@ -61,7 +61,7 @@ module ActiveSupport #:nodoc:
         alias :fortnight :fortnights
         
         # Reads best without arguments:  10.minutes.ago
-        def ago(time = ::Time.now)
+        def ago(time = ::Time.current)
           time - self
         end
 
@@ -69,7 +69,7 @@ module ActiveSupport #:nodoc:
         alias :until :ago
 
         # Reads best with argument:  10.minutes.since(time)
-        def since(time = ::Time.now)
+        def since(time = ::Time.current)
           time + self
         end
 
diff --git a/activesupport/test/core_ext/numeric_ext_test.rb b/activesupport/test/core_ext/numeric_ext_test.rb
index 0c877cf..4ba7be2 100644
--- a/activesupport/test/core_ext/numeric_ext_test.rb
+++ b/activesupport/test/core_ext/numeric_ext_test.rb
@@ -85,6 +85,44 @@ class NumericExtTimeAndDateTimeTest < Test::Unit::TestCase
     assert_equal Time.utc(2005,2,28,15,15,10), Time.utc(2004,2,29,15,15,10) + 1.year
     assert_equal DateTime.civil(2005,2,28,15,15,10), DateTime.civil(2004,2,29,15,15,10) + 1.year
   end
+
+  def test_since_and_ago_anchored_to_time_now_when_time_zone_default_not_set
+    Time.zone_default = nil
+    with_env_tz 'US/Eastern' do
+      Time.stubs(:now).returns Time.local(2000)
+      # since
+      assert_equal false, 5.since.is_a?(ActiveSupport::TimeWithZone)
+      assert_equal Time.local(2000,1,1,0,0,5), 5.since
+      # ago
+      assert_equal false, 5.ago.is_a?(ActiveSupport::TimeWithZone)
+      assert_equal Time.local(1999,12,31,23,59,55), 5.ago
+    end
+  end
+
+  def test_since_and_ago_anchored_to_time_zone_now_when_time_zone_default_set
+    Time.zone_default = ActiveSupport::TimeZone['Eastern Time (US & Canada)']
+    with_env_tz 'US/Eastern' do
+      Time.stubs(:now).returns Time.local(2000)
+      # since
+      assert_equal true, 5.since.is_a?(ActiveSupport::TimeWithZone)
+      assert_equal Time.utc(2000,1,1,0,0,5), 5.since.time
+      assert_equal 'Eastern Time (US & Canada)', 5.since.time_zone.name
+      # ago
+      assert_equal true, 5.ago.is_a?(ActiveSupport::TimeWithZone)
+      assert_equal Time.utc(1999,12,31,23,59,55), 5.ago.time
+      assert_equal 'Eastern Time (US & Canada)', 5.ago.time_zone.name
+    end
+  ensure
+    Time.zone_default = nil
+  end
+
+  protected
+    def with_env_tz(new_tz = 'US/Eastern')
+      old_tz, ENV['TZ'] = ENV['TZ'], new_tz
+      yield
+    ensure
+      old_tz ? ENV['TZ'] = old_tz : ENV.delete('TZ')
+    end
 end
 
 class NumericExtDateTest < Test::Unit::TestCase
-- 
1.7.2.3

