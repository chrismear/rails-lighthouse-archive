From 99e48976f168cb36c65e2e206c96707c67d64436 Mon Sep 17 00:00:00 2001
From: Raphael <raphael@joindiaspora.com>
Date: Tue, 24 Aug 2010 20:42:09 -0700
Subject: [PATCH 1/2] Changing 'octopus' to 'cactus' in tests and comments.

---
 .../abstract/schema_statements.rb                  |    2 +-
 .../associations/eager_singularization_test.rb     |   10 ++--
 activerecord/test/cases/migration_test.rb          |   40 ++++++++++----------
 .../active_support/core_ext/string/inflections.rb  |    8 ++--
 .../lib/active_support/inflector/inflections.rb    |   14 +++---
 activesupport/test/inflector_test_cases.rb         |    2 +-
 6 files changed, 38 insertions(+), 38 deletions(-)

diff --git a/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb b/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb
index 0245e63..657e3e1 100644
--- a/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb
@@ -230,7 +230,7 @@ module ActiveRecord
 
       # Renames a table.
       # ===== Example
-      #  rename_table('octopuses', 'octopi')
+      #  rename_table('cactuses', 'cacti')
       def rename_table(table_name, new_name)
         raise NotImplementedError, "rename_table is not implemented"
       end
diff --git a/activerecord/test/cases/associations/eager_singularization_test.rb b/activerecord/test/cases/associations/eager_singularization_test.rb
index 07d0b24..ee67f6a 100644
--- a/activerecord/test/cases/associations/eager_singularization_test.rb
+++ b/activerecord/test/cases/associations/eager_singularization_test.rb
@@ -1,7 +1,7 @@
 require "cases/helper"
 
 class Virus < ActiveRecord::Base
-  belongs_to :octopus
+  belongs_to :cactus
 end
 class Octopus < ActiveRecord::Base
   has_one :virus
@@ -44,10 +44,10 @@ class EagerSingularizationTest < ActiveRecord::TestCase
   def setup
     if ActiveRecord::Base.connection.supports_migrations?
       ActiveRecord::Base.connection.create_table :viri do |t|
-        t.column :octopus_id, :integer
+        t.column :cactus_id, :integer
         t.column :species, :string
       end
-      ActiveRecord::Base.connection.create_table :octopi do |t|
+      ActiveRecord::Base.connection.create_table :cacti do |t|
         t.column :species, :string
       end
       ActiveRecord::Base.connection.create_table :passes do |t|
@@ -88,7 +88,7 @@ class EagerSingularizationTest < ActiveRecord::TestCase
 
   def teardown
     ActiveRecord::Base.connection.drop_table :viri
-    ActiveRecord::Base.connection.drop_table :octopi
+    ActiveRecord::Base.connection.drop_table :cacti
     ActiveRecord::Base.connection.drop_table :passes
     ActiveRecord::Base.connection.drop_table :buses
     ActiveRecord::Base.connection.drop_table :crises_messes
@@ -103,7 +103,7 @@ class EagerSingularizationTest < ActiveRecord::TestCase
   def test_eager_no_extra_singularization_belongs_to
     return unless @have_tables
     assert_nothing_raised do
-      Virus.find(:all, :include => :octopus)
+      Virus.find(:all, :include => :cactus)
     end
   end
 
diff --git a/activerecord/test/cases/migration_test.rb b/activerecord/test/cases/migration_test.rb
index 96b97fd..286f2bd 100644
--- a/activerecord/test/cases/migration_test.rb
+++ b/activerecord/test/cases/migration_test.rb
@@ -818,12 +818,12 @@ if ActiveRecord::Base.connection.supports_migrations?
         begin
           assert_nothing_raised do
             ActiveRecord::Base.connection.rename_table :references, :old_references
-            ActiveRecord::Base.connection.create_table :octopuses do |t|
+            ActiveRecord::Base.connection.create_table :cactuses do |t|
               t.column :url, :string
             end
           end
 
-          assert_nothing_raised { ActiveRecord::Base.connection.rename_table :octopuses, :references }
+          assert_nothing_raised { ActiveRecord::Base.connection.rename_table :cactuses, :references }
 
           # Using explicit id in insert for compatibility across all databases
           con = ActiveRecord::Base.connection
@@ -841,22 +841,22 @@ if ActiveRecord::Base.connection.supports_migrations?
 
     def test_rename_table
       begin
-        ActiveRecord::Base.connection.create_table :octopuses do |t|
+        ActiveRecord::Base.connection.create_table :cactuses do |t|
           t.column :url, :string
         end
-        ActiveRecord::Base.connection.rename_table :octopuses, :octopi
+        ActiveRecord::Base.connection.rename_table :cactuses, :cacti
 
         # Using explicit id in insert for compatibility across all databases
         con = ActiveRecord::Base.connection
-        con.enable_identity_insert("octopi", true) if current_adapter?(:SybaseAdapter)
-        assert_nothing_raised { con.execute "INSERT INTO octopi (#{con.quote_column_name('id')}, #{con.quote_column_name('url')}) VALUES (1, 'http://www.foreverflying.com/octopus-black7.jpg')" }
-        con.enable_identity_insert("octopi", false) if current_adapter?(:SybaseAdapter)
+        con.enable_identity_insert("cacti", true) if current_adapter?(:SybaseAdapter)
+        assert_nothing_raised { con.execute "INSERT INTO cacti (#{con.quote_column_name('id')}, #{con.quote_column_name('url')}) VALUES (1, 'http://www.foreverflying.com/cactus-black7.jpg')" }
+        con.enable_identity_insert("cacti", false) if current_adapter?(:SybaseAdapter)
 
-        assert_equal 'http://www.foreverflying.com/octopus-black7.jpg', ActiveRecord::Base.connection.select_value("SELECT url FROM octopi WHERE id=1")
+        assert_equal 'http://www.foreverflying.com/cactus-black7.jpg', ActiveRecord::Base.connection.select_value("SELECT url FROM cacti WHERE id=1")
 
       ensure
-        ActiveRecord::Base.connection.drop_table :octopuses rescue nil
-        ActiveRecord::Base.connection.drop_table :octopi rescue nil
+        ActiveRecord::Base.connection.drop_table :cactuses rescue nil
+        ActiveRecord::Base.connection.drop_table :cacti rescue nil
       end
     end
 
@@ -875,24 +875,24 @@ if ActiveRecord::Base.connection.supports_migrations?
 
     def test_rename_table_with_an_index
       begin
-        ActiveRecord::Base.connection.create_table :octopuses do |t|
+        ActiveRecord::Base.connection.create_table :cactuses do |t|
           t.column :url, :string
         end
-        ActiveRecord::Base.connection.add_index :octopuses, :url
+        ActiveRecord::Base.connection.add_index :cactuses, :url
 
-        ActiveRecord::Base.connection.rename_table :octopuses, :octopi
+        ActiveRecord::Base.connection.rename_table :cactuses, :cacti
 
         # Using explicit id in insert for compatibility across all databases
         con = ActiveRecord::Base.connection
-        con.enable_identity_insert("octopi", true) if current_adapter?(:SybaseAdapter)
-        assert_nothing_raised { con.execute "INSERT INTO octopi (#{con.quote_column_name('id')}, #{con.quote_column_name('url')}) VALUES (1, 'http://www.foreverflying.com/octopus-black7.jpg')" }
-        con.enable_identity_insert("octopi", false) if current_adapter?(:SybaseAdapter)
+        con.enable_identity_insert("cacti", true) if current_adapter?(:SybaseAdapter)
+        assert_nothing_raised { con.execute "INSERT INTO cacti (#{con.quote_column_name('id')}, #{con.quote_column_name('url')}) VALUES (1, 'http://www.foreverflying.com/cactus-black7.jpg')" }
+        con.enable_identity_insert("cacti", false) if current_adapter?(:SybaseAdapter)
 
-        assert_equal 'http://www.foreverflying.com/octopus-black7.jpg', ActiveRecord::Base.connection.select_value("SELECT url FROM octopi WHERE id=1")
-        assert ActiveRecord::Base.connection.indexes(:octopi).first.columns.include?("url")
+        assert_equal 'http://www.foreverflying.com/cactus-black7.jpg', ActiveRecord::Base.connection.select_value("SELECT url FROM cacti WHERE id=1")
+        assert ActiveRecord::Base.connection.indexes(:cacti).first.columns.include?("url")
       ensure
-        ActiveRecord::Base.connection.drop_table :octopuses rescue nil
-        ActiveRecord::Base.connection.drop_table :octopi rescue nil
+        ActiveRecord::Base.connection.drop_table :cactuses rescue nil
+        ActiveRecord::Base.connection.drop_table :cacti rescue nil
       end
     end
 
diff --git a/activesupport/lib/active_support/core_ext/string/inflections.rb b/activesupport/lib/active_support/core_ext/string/inflections.rb
index 9a4e636..4bc52cc 100644
--- a/activesupport/lib/active_support/core_ext/string/inflections.rb
+++ b/activesupport/lib/active_support/core_ext/string/inflections.rb
@@ -9,11 +9,11 @@ class String
   # Returns the plural form of the word in the string.
   #
   #   "post".pluralize             # => "posts"
-  #   "octopus".pluralize          # => "octopi"
+  #   "cactus".pluralize          # => "cacti"
   #   "sheep".pluralize            # => "sheep"
   #   "words".pluralize            # => "words"
   #   "the blue mailman".pluralize # => "the blue mailmen"
-  #   "CamelOctopus".pluralize     # => "CamelOctopi"
+  #   "CamelCactus".pluralize     # => "CamelCacti"
   def pluralize
     ActiveSupport::Inflector.pluralize(self)
   end
@@ -21,11 +21,11 @@ class String
   # The reverse of +pluralize+, returns the singular form of a word in a string.
   #
   #   "posts".singularize            # => "post"
-  #   "octopi".singularize           # => "octopus"
+  #   "cacti".singularize           # => "cactus"
   #   "sheep".singularize            # => "sheep"
   #   "word".singularize             # => "word"
   #   "the blue mailmen".singularize # => "the blue mailman"
-  #   "CamelOctopi".singularize      # => "CamelOctopus"
+  #   "CamelCacti".singularize      # => "CamelCactus"
   def singularize
     ActiveSupport::Inflector.singularize(self)
   end
diff --git a/activesupport/lib/active_support/inflector/inflections.rb b/activesupport/lib/active_support/inflector/inflections.rb
index 3caf78b..3acba0c 100644
--- a/activesupport/lib/active_support/inflector/inflections.rb
+++ b/activesupport/lib/active_support/inflector/inflections.rb
@@ -7,12 +7,12 @@ module ActiveSupport
     #     inflect.plural /^(ox)$/i, '\1\2en'
     #     inflect.singular /^(ox)en/i, '\1'
     #
-    #     inflect.irregular 'octopus', 'octopi'
+    #     inflect.irregular 'cactus', 'cacti'
     #
     #     inflect.uncountable "equipment"
     #   end
     #
-    # New rules are added at the top. So in the example above, the irregular rule for octopus will now be the first of the
+    # New rules are added at the top. So in the example above, the irregular rule for cactus will now be the first of the
     # pluralization and singularization rules that is runs. This guarantees that your rules run before any of the rules that may
     # already have been loaded.
     class Inflections
@@ -46,7 +46,7 @@ module ActiveSupport
       # for strings, not regular expressions. You simply pass the irregular in singular and plural form.
       #
       # Examples:
-      #   irregular 'octopus', 'octopi'
+      #   irregular 'cactus', 'cacti'
       #   irregular 'person', 'people'
       def irregular(singular, plural)
         @uncountables.delete(singular)
@@ -122,10 +122,10 @@ module ActiveSupport
     #
     # Examples:
     #   "post".pluralize             # => "posts"
-    #   "octopus".pluralize          # => "octopi"
+    #   "cactus".pluralize          # => "cacti"
     #   "sheep".pluralize            # => "sheep"
     #   "words".pluralize            # => "words"
-    #   "CamelOctopus".pluralize     # => "CamelOctopi"
+    #   "CamelCactus".pluralize     # => "CamelCacti"
     def pluralize(word)
       result = word.to_s.dup
 
@@ -141,10 +141,10 @@ module ActiveSupport
     #
     # Examples:
     #   "posts".singularize            # => "post"
-    #   "octopi".singularize           # => "octopus"
+    #   "cacti".singularize           # => "cactus"
     #   "sheep".singularize            # => "sheep"
     #   "word".singularize             # => "word"
-    #   "CamelOctopi".singularize      # => "CamelOctopus"
+    #   "CamelCacti".singularize      # => "CamelCactus"
     def singularize(word)
       result = word.to_s.dup
 
diff --git a/activesupport/test/inflector_test_cases.rb b/activesupport/test/inflector_test_cases.rb
index 59515da..90fc364 100644
--- a/activesupport/test/inflector_test_cases.rb
+++ b/activesupport/test/inflector_test_cases.rb
@@ -81,7 +81,7 @@ module InflectorTestCases
 
     "louse"       => "lice",
     "house"       => "houses",
-    "octopus"     => "octopi",
+    "cactus"      => "cacti",
     "virus"       => "viri",
     "alias"       => "aliases",
     "portfolio"   => "portfolios",
-- 
1.7.0.4


From 8ed7fb6b2f32c99c1240ba1796a5060cbbe134cc Mon Sep 17 00:00:00 2001
From: Raphael <raphael@joindiaspora.com>
Date: Wed, 25 Aug 2010 09:35:59 -0700
Subject: [PATCH 2/2] Changing octopus to cactus in the inflections file.

---
 activesupport/lib/active_support/inflections.rb |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/activesupport/lib/active_support/inflections.rb b/activesupport/lib/active_support/inflections.rb
index e7b5387..1fb6e4f 100644
--- a/activesupport/lib/active_support/inflections.rb
+++ b/activesupport/lib/active_support/inflections.rb
@@ -3,7 +3,7 @@ module ActiveSupport
     inflect.plural(/$/, 's')
     inflect.plural(/s$/i, 's')
     inflect.plural(/(ax|test)is$/i, '\1es')
-    inflect.plural(/(octop|vir)us$/i, '\1i')
+    inflect.plural(/(cact|vir)us$/i, '\1i')
     inflect.plural(/(alias|status)$/i, '\1es')
     inflect.plural(/(bu)s$/i, '\1ses')
     inflect.plural(/(buffal|tomat)o$/i, '\1oes')
@@ -36,7 +36,7 @@ module ActiveSupport
     inflect.singular(/(o)es$/i, '\1')
     inflect.singular(/(shoe)s$/i, '\1')
     inflect.singular(/(cris|ax|test)es$/i, '\1is')
-    inflect.singular(/(octop|vir)i$/i, '\1us')
+    inflect.singular(/(cact|vir)i$/i, '\1us')
     inflect.singular(/(alias|status)es$/i, '\1')
     inflect.singular(/^(ox)en/i, '\1')
     inflect.singular(/(vert|ind)ices$/i, '\1ex')
-- 
1.7.0.4

