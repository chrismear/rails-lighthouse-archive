From d18a8c96a097bb44f93b1a2189746e6d22fac564 Mon Sep 17 00:00:00 2001
From: John Paul Ashenfelter <johnpaul@transitionpoint.com>
Date: Tue, 30 Nov 2010 13:48:25 -0500
Subject: [PATCH] Added a word boundary to uncountable inflection regex for #singularize so short inflections like ors do not affect larger words like sponsors [#6093 state:resolved]

---
 .../lib/active_support/inflector/inflections.rb    |    2 +-
 activesupport/test/inflector_test.rb               |   27 ++++++++++++++++++++
 2 files changed, 28 insertions(+), 1 deletions(-)

diff --git a/activesupport/lib/active_support/inflector/inflections.rb b/activesupport/lib/active_support/inflector/inflections.rb
index 3caf78b..e136e4c 100644
--- a/activesupport/lib/active_support/inflector/inflections.rb
+++ b/activesupport/lib/active_support/inflector/inflections.rb
@@ -148,7 +148,7 @@ module ActiveSupport
     def singularize(word)
       result = word.to_s.dup
 
-      if inflections.uncountables.any? { |inflection| result =~ /#{inflection}\Z/i }
+      if inflections.uncountables.any? { |inflection| result =~ /\b(#{inflection})\Z/i }
         result
       else
         inflections.singulars.each { |(rule, replacement)| break if result.gsub!(rule, replacement) }
diff --git a/activesupport/test/inflector_test.rb b/activesupport/test/inflector_test.rb
index 2990177..e8fe635 100644
--- a/activesupport/test/inflector_test.rb
+++ b/activesupport/test/inflector_test.rb
@@ -21,6 +21,33 @@ class InflectorTest < Test::Unit::TestCase
   def test_pluralize_empty_string
     assert_equal "", ActiveSupport::Inflector.pluralize("")
   end
+  
+  ActiveSupport::Inflector.inflections.uncountable.each do |word|
+    define_method "test_uncountability_of_#{word}" do
+      assert_equal word, ActiveSupport::Inflector.singularize(word)
+      assert_equal word, ActiveSupport::Inflector.pluralize(word)
+      assert_equal ActiveSupport::Inflector.pluralize(word), ActiveSupport::Inflector.singularize(word)
+    end
+  end
+  
+  def test_uncountable_word_is_not_greedy
+    uncountable_word = "ors"
+    countable_word = "sponsor"
+    
+    cached_uncountables = ActiveSupport::Inflector.inflections.uncountables
+    
+    ActiveSupport::Inflector.inflections.uncountable << uncountable_word
+
+    assert_equal uncountable_word, ActiveSupport::Inflector.singularize(uncountable_word)
+    assert_equal uncountable_word, ActiveSupport::Inflector.pluralize(uncountable_word)
+    assert_equal ActiveSupport::Inflector.pluralize(uncountable_word), ActiveSupport::Inflector.singularize(uncountable_word)
+
+    assert_equal "sponsor", ActiveSupport::Inflector.singularize(countable_word)
+    assert_equal "sponsors", ActiveSupport::Inflector.pluralize(countable_word)
+    assert_equal "sponsor", ActiveSupport::Inflector.singularize(ActiveSupport::Inflector.pluralize(countable_word))
+    
+    ActiveSupport::Inflector.inflections.instance_variable_set :@uncountables, cached_uncountables
+  end
 
   SingularToPlural.each do |singular, plural|
     define_method "test_pluralize_#{singular}" do
-- 
1.7.3.2

