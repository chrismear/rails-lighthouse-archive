<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-02-19T11:14:18+00:00</created-at>
  <creator-id type="integer">87199</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4001</number>
  <permalink>nestedattributes-for-has_one-and-has_many-association-has-different-saving-sequence</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>nested_attributes_for</tag>
  <title>nestedattributes for has_one and has_many association has different saving sequence</title>
  <updated-at type="datetime">2011-02-02T18:36:00+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>szetobo</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4001</url>
  <priority-name>Low</priority-name>
  <original-body>The models schema and its association is like this :-

@@@ ruby
ActiveRecord::Schema.define(:version =&gt; 20100219043257) do
  create_table &quot;policies&quot;, :force =&gt; true do |t|
    t.string   &quot;policy_no&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

  create_table &quot;policy_items&quot;, :force =&gt; true do |t|
    t.integer  &quot;policy_id&quot;
    t.string   &quot;item_type&quot;
    t.decimal  &quot;premium&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end
end

class Policy &lt; ActiveRecord::Base
  has_one :basic_plan, :class_name =&gt; &quot;PolicyItem&quot;
  has_many :topups, :class_name =&gt; &quot;PolicyItem&quot;

  accepts_nested_attributes_for :basic_plan, :allow_destroy =&gt; true
  accepts_nested_attributes_for :topups, :allow_destroy =&gt; true
end

class PolicyItem &lt; ActiveRecord::Base
  belongs_to :policy, :foreign_key =&gt; &quot;policy_id&quot;
end
@@@

Then i add debug statement on every callback to verify the sequence between the parent and nested object and the result is :-

* Policy before_validation callback
* Policy validate callback
* PolicyItem Topup before_validation callback
* PolicyItem Topup validate callback
* PolicyItem Topup after_validation callback
* PolicyItem BasicPlan before_validation callback
* PolicyItem BasicPlan validate callback
* PolicyItem BasicPlan after_validation callback
* Policy after_validation callback
* Policy before_save callback
* PolicyItem Topup before_save callback
* PolicyItem Topup after_save callback
* Policy after_save callback
* PolicyItem BasicPlan before_save callback
* PolicyItem BasicPlan after_save callback

As the result shown, the validation callback sequence is fine but the save callback sequence is a bit strange. The parent object's after_save callback has been invoked before the child's callback with has_one association. Child with has_many association seems behave normally as expected. Not sure it is by design or just a bug.</original-body>
  <latest-body>The models schema and its association is like this :-

@@@ ruby
ActiveRecord::Schema.define(:version =&gt; 20100219043257) do
  create_table &quot;policies&quot;, :force =&gt; true do |t|
    t.string   &quot;policy_no&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

  create_table &quot;policy_items&quot;, :force =&gt; true do |t|
    t.integer  &quot;policy_id&quot;
    t.string   &quot;item_type&quot;
    t.decimal  &quot;premium&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end
end

class Policy &lt; ActiveRecord::Base
  has_one :basic_plan, :class_name =&gt; &quot;PolicyItem&quot;
  has_many :topups, :class_name =&gt; &quot;PolicyItem&quot;

  accepts_nested_attributes_for :basic_plan, :allow_destroy =&gt; true
  accepts_nested_attributes_for :topups, :allow_destroy =&gt; true
end

class PolicyItem &lt; ActiveRecord::Base
  belongs_to :policy, :foreign_key =&gt; &quot;policy_id&quot;
end
@@@

Then i add debug statement on every callback to verify the sequence between the parent and nested object and the result is :-

* Policy before_validation callback
* Policy validate callback
* PolicyItem Topup before_validation callback
* PolicyItem Topup validate callback
* PolicyItem Topup after_validation callback
* PolicyItem BasicPlan before_validation callback
* PolicyItem BasicPlan validate callback
* PolicyItem BasicPlan after_validation callback
* Policy after_validation callback
* Policy before_save callback
* PolicyItem Topup before_save callback
* PolicyItem Topup after_save callback
* Policy after_save callback
* PolicyItem BasicPlan before_save callback
* PolicyItem BasicPlan after_save callback

As the result shown, the validation callback sequence is fine but the save callback sequence is a bit strange. The parent object's after_save callback has been invoked before the child's callback with has_one association. Child with has_many association seems behave normally as expected. Not sure it is by design or just a bug.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The models schema and its association is like this :-&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;ActiveRecord::Schema.define(:version =&amp;gt; 20100219043257) do
  create_table &quot;policies&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;policy_no&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

  create_table &quot;policy_items&quot;, :force =&amp;gt; true do |t|
    t.integer  &quot;policy_id&quot;
    t.string   &quot;item_type&quot;
    t.decimal  &quot;premium&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end
end

class Policy &amp;lt; ActiveRecord::Base
  has_one :basic_plan, :class_name =&amp;gt; &quot;PolicyItem&quot;
  has_many :topups, :class_name =&amp;gt; &quot;PolicyItem&quot;

  accepts_nested_attributes_for :basic_plan, :allow_destroy =&amp;gt; true
  accepts_nested_attributes_for :topups, :allow_destroy =&amp;gt; true
end

class PolicyItem &amp;lt; ActiveRecord::Base
  belongs_to :policy, :foreign_key =&amp;gt; &quot;policy_id&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then i add debug statement on every callback to verify the
sequence between the parent and nested object and the result is
:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Policy before_validation callback&lt;/li&gt;
&lt;li&gt;Policy validate callback&lt;/li&gt;
&lt;li&gt;PolicyItem Topup before_validation callback&lt;/li&gt;
&lt;li&gt;PolicyItem Topup validate callback&lt;/li&gt;
&lt;li&gt;PolicyItem Topup after_validation callback&lt;/li&gt;
&lt;li&gt;PolicyItem BasicPlan before_validation callback&lt;/li&gt;
&lt;li&gt;PolicyItem BasicPlan validate callback&lt;/li&gt;
&lt;li&gt;PolicyItem BasicPlan after_validation callback&lt;/li&gt;
&lt;li&gt;Policy after_validation callback&lt;/li&gt;
&lt;li&gt;Policy before_save callback&lt;/li&gt;
&lt;li&gt;PolicyItem Topup before_save callback&lt;/li&gt;
&lt;li&gt;PolicyItem Topup after_save callback&lt;/li&gt;
&lt;li&gt;Policy after_save callback&lt;/li&gt;
&lt;li&gt;PolicyItem BasicPlan before_save callback&lt;/li&gt;
&lt;li&gt;PolicyItem BasicPlan after_save callback&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the result shown, the validation callback sequence is fine
but the save callback sequence is a bit strange. The parent
object's after_save callback has been invoked before the child's
callback with has_one association. Child with has_many association
seems behave normally as expected. Not sure it is by design or just
a bug.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The models schema and its association is like this :-

@@@ ruby
ActiveRecord::Schema.define(:version =&gt; 20100219043257) do
  create_table &quot;policies&quot;, :force =&gt; true do |t|
    t.string   &quot;policy_no&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

  create_table &quot;policy_items&quot;, :force =&gt; true do |t|
    t.integer  &quot;policy_id&quot;
    t.string   &quot;item_type&quot;
    t.decimal  &quot;premium&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end
end

class Policy &lt; ActiveRecord::Base
  has_one :basic_plan, :class_name =&gt; &quot;PolicyItem&quot;
  has_many :topups, :class_name =&gt; &quot;PolicyItem&quot;

  accepts_nested_attributes_for :basic_plan, :allow_destroy =&gt; true
  accepts_nested_attributes_for :topups, :allow_destroy =&gt; true
end

class PolicyItem &lt; ActiveRecord::Base
  belongs_to :policy, :foreign_key =&gt; &quot;policy_id&quot;
end
@@@

Then i add debug statement on every callback to verify the sequence between the parent and nested object and the result is :-

* Policy before_validation callback
* Policy validate callback
* PolicyItem Topup before_validation callback
* PolicyItem Topup validate callback
* PolicyItem Topup after_validation callback
* PolicyItem BasicPlan before_validation callback
* PolicyItem BasicPlan validate callback
* PolicyItem BasicPlan after_validation callback
* Policy after_validation callback
* Policy before_save callback
* PolicyItem Topup before_save callback
* PolicyItem Topup after_save callback
* Policy after_save callback
* PolicyItem BasicPlan before_save callback
* PolicyItem BasicPlan after_save callback

As the result shown, the validation callback sequence is fine but the save callback sequence is a bit strange. The parent object's after_save callback has been invoked before the child's callback with has_one association. Child with has_many association seems behave normally as expected. Not sure it is by design or just a bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The models schema and its association is like this :-&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;ActiveRecord::Schema.define(:version =&amp;gt; 20100219043257) do
  create_table &quot;policies&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;policy_no&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

  create_table &quot;policy_items&quot;, :force =&amp;gt; true do |t|
    t.integer  &quot;policy_id&quot;
    t.string   &quot;item_type&quot;
    t.decimal  &quot;premium&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end
end

class Policy &amp;lt; ActiveRecord::Base
  has_one :basic_plan, :class_name =&amp;gt; &quot;PolicyItem&quot;
  has_many :topups, :class_name =&amp;gt; &quot;PolicyItem&quot;

  accepts_nested_attributes_for :basic_plan, :allow_destroy =&amp;gt; true
  accepts_nested_attributes_for :topups, :allow_destroy =&amp;gt; true
end

class PolicyItem &amp;lt; ActiveRecord::Base
  belongs_to :policy, :foreign_key =&amp;gt; &quot;policy_id&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then i add debug statement on every callback to verify the
sequence between the parent and nested object and the result is
:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Policy before_validation callback&lt;/li&gt;
&lt;li&gt;Policy validate callback&lt;/li&gt;
&lt;li&gt;PolicyItem Topup before_validation callback&lt;/li&gt;
&lt;li&gt;PolicyItem Topup validate callback&lt;/li&gt;
&lt;li&gt;PolicyItem Topup after_validation callback&lt;/li&gt;
&lt;li&gt;PolicyItem BasicPlan before_validation callback&lt;/li&gt;
&lt;li&gt;PolicyItem BasicPlan validate callback&lt;/li&gt;
&lt;li&gt;PolicyItem BasicPlan after_validation callback&lt;/li&gt;
&lt;li&gt;Policy after_validation callback&lt;/li&gt;
&lt;li&gt;Policy before_save callback&lt;/li&gt;
&lt;li&gt;PolicyItem Topup before_save callback&lt;/li&gt;
&lt;li&gt;PolicyItem Topup after_save callback&lt;/li&gt;
&lt;li&gt;Policy after_save callback&lt;/li&gt;
&lt;li&gt;PolicyItem BasicPlan before_save callback&lt;/li&gt;
&lt;li&gt;PolicyItem BasicPlan after_save callback&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the result shown, the validation callback sequence is fine
but the save callback sequence is a bit strange. The parent
object's after_save callback has been invoked before the child's
callback with has_one association. Child with has_many association
seems behave normally as expected. Not sure it is by design or just
a bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-19T11:14:18+00:00</created-at>
      <creator-id type="integer">87199</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4001</number>
      <permalink>nestedattributes-for-has_one-and-has_many-association-has-different-saving-sequence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>nested_attributes_for</tag>
      <title>nestedattributes for has_one and has_many association has different saving sequence</title>
      <updated-at type="datetime">2010-02-19T11:35:09+00:00</updated-at>
      <user-id type="integer">87199</user-id>
      <version type="integer">1</version>
      <user-name>szetobo</user-name>
      <creator-name>szetobo</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4001</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Eloy, could you please tell us if this is per design or not? Thanks mate!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Eloy, could you please tell us if this is per design or not?
Thanks mate!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-23T21:35:32+00:00</created-at>
      <creator-id type="integer">87199</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4001</number>
      <permalink>nestedattributes-for-has_one-and-has_many-association-has-different-saving-sequence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>nested_attributes_for</tag>
      <title>nestedattributes for has_one and has_many association has different saving sequence</title>
      <updated-at type="datetime">2010-02-23T21:35:34+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">2</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>szetobo</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4001</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I talked with Eloy. The current behavior is inherited from previous Rails versions and we could change it. However, we need a valid reason to do that, so what is your use case? And feel free to try out a patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I talked with Eloy. The current behavior is inherited from
previous Rails versions and we could change it. However, we need a
valid reason to do that, so what is your use case? And feel free to
try out a patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-24T10:56:30+00:00</created-at>
      <creator-id type="integer">87199</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 8406
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4001</number>
      <permalink>nestedattributes-for-has_one-and-has_many-association-has-different-saving-sequence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>nested_attributes_for</tag>
      <title>nestedattributes for has_one and has_many association has different saving sequence</title>
      <updated-at type="datetime">2010-02-24T10:56:35+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">3</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>szetobo</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4001</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I use Policy as a centralize model to preform all the validation and saving logic to ensure the integrity of the whole policy. Initially I put all related models creation logic under the after_save callback of Policy and trigger it depends on certain event, like status change to certain stage etc. But then I discover that BasicPlan not yet save during after_save invocation of Policy.

Now I have to move some of the logic into PolicyItem and build the association inside Policy's after_save callback. The reason I didn't want to put the logic under PolicyItem is because the related model creation logic is trigger by status change of Policy.

Anyway, I agree that it can be solve without any changes in the Rails framework, although it is not that consistent and doesn't follow principle of least surprise.

I'd very much like to contribute back but due to my experience on ruby and rails, I'm a bit loss after browsing through the source code. I will keep on trying that. Any good hacking guide or reference on rails framework would be helpful for newbie as me. Thanks anyway for the prompt response.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I use Policy as a centralize model to preform all the validation
and saving logic to ensure the integrity of the whole policy.
Initially I put all related models creation logic under the
after_save callback of Policy and trigger it depends on certain
event, like status change to certain stage etc. But then I discover
that BasicPlan not yet save during after_save invocation of
Policy.&lt;/p&gt;
&lt;p&gt;Now I have to move some of the logic into PolicyItem and build
the association inside Policy's after_save callback. The reason I
didn't want to put the logic under PolicyItem is because the
related model creation logic is trigger by status change of
Policy.&lt;/p&gt;
&lt;p&gt;Anyway, I agree that it can be solve without any changes in the
Rails framework, although it is not that consistent and doesn't
follow principle of least surprise.&lt;/p&gt;
&lt;p&gt;I'd very much like to contribute back but due to my experience
on ruby and rails, I'm a bit loss after browsing through the source
code. I will keep on trying that. Any good hacking guide or
reference on rails framework would be helpful for newbie as me.
Thanks anyway for the prompt response.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-25T02:19:59+00:00</created-at>
      <creator-id type="integer">87199</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4001</number>
      <permalink>nestedattributes-for-has_one-and-has_many-association-has-different-saving-sequence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>nested_attributes_for</tag>
      <title>nestedattributes for has_one and has_many association has different saving sequence</title>
      <updated-at type="datetime">2010-02-25T02:20:01+00:00</updated-at>
      <user-id type="integer">87199</user-id>
      <version type="integer">4</version>
      <user-name>szetobo</user-name>
      <creator-name>szetobo</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4001</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey mate. Any news? Can I help somehow?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey mate. Any news? Can I help somehow?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-12T20:36:25+00:00</created-at>
      <creator-id type="integer">87199</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4001</number>
      <permalink>nestedattributes-for-has_one-and-has_many-association-has-different-saving-sequence</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>nested_attributes_for</tag>
      <title>nestedattributes for has_one and has_many association has different saving sequence</title>
      <updated-at type="datetime">2010-03-12T20:36:27+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">5</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>szetobo</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4001</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:54:23+00:00</created-at>
      <creator-id type="integer">87199</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4001</number>
      <permalink>nestedattributes-for-has_one-and-has_many-association-has-different-saving-sequence</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>nested_attributes_for</tag>
      <title>nestedattributes for has_one and has_many association has different saving sequence</title>
      <updated-at type="datetime">2011-02-02T18:35:34+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>szetobo</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4001</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:54:25+00:00</created-at>
      <creator-id type="integer">87199</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4001</number>
      <permalink>nestedattributes-for-has_one-and-has_many-association-has-different-saving-sequence</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>nested_attributes_for</tag>
      <title>nestedattributes for has_one and has_many association has different saving sequence</title>
      <updated-at type="datetime">2011-02-02T18:36:00+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>szetobo</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4001</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
