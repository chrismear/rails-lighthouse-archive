<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-17T19:22:47+00:00</created-at>
  <creator-id type="integer">10095</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6591</number>
  <permalink>activerecord-union-left-out</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>active_record active_relation arel</tag>
  <title>ActiveRecord UNION left out</title>
  <updated-at type="datetime">2011-03-17T22:13:13+00:00</updated-at>
  <user-id type="integer">10095</user-id>
  <version type="integer">2</version>
  <user-name>clyfe</user-name>
  <creator-name>clyfe</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6591</url>
  <priority-name nil="true"></priority-name>
  <original-body>ActiveRecord returns &lt;Arel::Nodes::Union&gt; when I call model.union(active_relation), but it should return an ActiveRelation


1. What steps will reproduce the problem:

    class User &lt;&lt; AR::Base; end  
    User.where(:a =&gt; 1).union(User.where(:a =&gt; 2))  

2. What is the wrong result:

    The result is an instance of Arel::Nodes::Union

3. What is the result that should happen instead:

    The computation should return an instance of ActiveRelation

### THE GOOD

The resulting Arel::Nodes::Union object can be transformed to_sql and then we can use User.find_by_sql(sql)

    a = User.where(:a =&gt; 1).union(User.where(:a =&gt; 2))
    sql = a.to_sql # ( SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;a&quot; = 1 UNION SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;a&quot; = 2 )&quot;
    User.find_by_sql(sql)

### THE ISSUE

The issue is obtaining an ActiveRelation object that we can further chain.
Caling a method (select, where, includes) on this (ActiveRelation unioned) object would have the behavior of further calling that method on each of the ActiveRelation objects involved in the UNION
________________________________________

All tough in general a UNION query can be avoided, there are some cases where the corect active relation #union functionality is needed.

For example this wold allow fixing issue #213 of CanCan https://github.com/ryanb/cancan/issues/213

I would be glad to work in this issue, with a little help.</original-body>
  <latest-body>ActiveRecord returns &lt;Arel::Nodes::Union&gt; when I call model.union(active_relation), but it should return an ActiveRelation


1. What steps will reproduce the problem:

    class User &lt;&lt; AR::Base; end  
    User.where(:a =&gt; 1).union(User.where(:a =&gt; 2))  

2. What is the wrong result:

    The result is an instance of Arel::Nodes::Union

3. What is the result that should happen instead:

    The computation should return an instance of ActiveRelation

### THE GOOD

The resulting Arel::Nodes::Union object can be transformed to_sql and then we can use User.find_by_sql(sql)

    a = User.where(:a =&gt; 1).union(User.where(:a =&gt; 2))
    sql = a.to_sql # ( SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;a&quot; = 1 UNION SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;a&quot; = 2 )&quot;
    User.find_by_sql(sql)

### THE ISSUE

The issue is obtaining an ActiveRelation object that we can further chain.
Caling a method (select, where, includes) on this (ActiveRelation unioned) object would have the behavior of further calling that method on each of the ActiveRelation objects involved in the UNION
________________________________________

All tough in general a UNION query can be avoided, there are some cases where the corect active relation #union functionality is needed.

For example this wold allow fixing issue #213 of CanCan https://github.com/ryanb/cancan/issues/213

I would be glad to work in this issue, with a little help.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActiveRecord returns &amp;lt;Arel::Nodes::Union&amp;gt; when I call
model.union(active_relation), but it should return an
ActiveRelation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What steps will reproduce the problem:&lt;/p&gt;
&lt;p&gt;class User &amp;lt;&amp;lt; AR::Base; end&lt;br&gt;
User.where(:a =&amp;gt; 1).union(User.where(:a =&amp;gt; 2))&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the wrong result:&lt;/p&gt;
&lt;p&gt;The result is an instance of Arel::Nodes::Union&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the result that should happen instead:&lt;/p&gt;
&lt;p&gt;The computation should return an instance of ActiveRelation&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;THE GOOD&lt;/h3&gt;
&lt;p&gt;The resulting Arel::Nodes::Union object can be transformed
to_sql and then we can use User.find_by_sql(sql)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a = User.where(:a =&amp;gt; 1).union(User.where(:a =&amp;gt; 2))
sql = a.to_sql # ( SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;a&quot; = 1 UNION SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;a&quot; = 2 )&quot;
User.find_by_sql(sql)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;THE ISSUE&lt;/h3&gt;
&lt;p&gt;The issue is obtaining an ActiveRelation object that we can
further chain.&lt;br&gt;
Caling a method (select, where, includes) on this (ActiveRelation
unioned) object would have the behavior of further calling that
method on each of the ActiveRelation objects involved in the
UNION&lt;br&gt;
________________________________________&lt;/p&gt;
&lt;p&gt;All tough in general a UNION query can be avoided, there are
some cases where the corect active relation #union functionality is
needed.&lt;/p&gt;
&lt;p&gt;For example this wold allow fixing issue &lt;a href=
&quot;/projects/8994/tickets/213&quot; title=&quot;Ticket #213&quot;&gt;#213&lt;/a&gt; of CanCan
&lt;a href=
&quot;https://github.com/ryanb/cancan/issues/213&quot;&gt;https://github.com/ryanb/cancan/issues/213&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would be glad to work in this issue, with a little help.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveRecord returns &lt;Arel::Nodes::Union&gt; when I call model.union(active_relation), but it should return an ActiveRelation


1. What steps will reproduce the problem:

    class User &lt;&lt; AR::Base; end  
    User.where(:a =&gt; 1).union(User.where(:a =&gt; 2))  

2. What is the wrong result:

    The result is an instance of Arel::Nodes::Union

3. What is the result that should happen instead:

    The computation should return an instance of ActiveRelation

### THE GOOD

The resulting Arel::Nodes::Union object can be transformed to_sql and then we can use User.find_by_sql(sql)

    a = User.where(:a =&gt; 1).union(User.where(:a =&gt; 2))
    sql = a.to_sql # ( SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;a&quot; = 1 UNION SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;a&quot; = 2 )&quot;
    User.find_by_sql(sql)

### THE ISSUE

The issue is obtaining an ActiveRelation object that we can further chain.
Caling a method (select, where, includes) on this (ActiveRelation unioned) object would have the behavior of further calling that method on each of the ActiveRelation objects involved in the UNION
________________________________________

All tough in general a UNION query can be avoided, there are some cases where the corect active relation #union functionality is needed.

For example this wold allow fixing issue #213 of CanCan https://github.com/ryanb/cancan/issues/213

I would be glad to work in this issue, with a little help.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveRecord returns &amp;lt;Arel::Nodes::Union&amp;gt; when I call
model.union(active_relation), but it should return an
ActiveRelation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What steps will reproduce the problem:&lt;/p&gt;
&lt;p&gt;class User &amp;lt;&amp;lt; AR::Base; end&lt;br&gt;
User.where(:a =&amp;gt; 1).union(User.where(:a =&amp;gt; 2))&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the wrong result:&lt;/p&gt;
&lt;p&gt;The result is an instance of Arel::Nodes::Union&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the result that should happen instead:&lt;/p&gt;
&lt;p&gt;The computation should return an instance of ActiveRelation&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;THE GOOD&lt;/h3&gt;
&lt;p&gt;The resulting Arel::Nodes::Union object can be transformed
to_sql and then we can use User.find_by_sql(sql)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a = User.where(:a =&amp;gt; 1).union(User.where(:a =&amp;gt; 2))
sql = a.to_sql # ( SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;a&quot; = 1 UNION SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;a&quot; = 2 )&quot;
User.find_by_sql(sql)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;THE ISSUE&lt;/h3&gt;
&lt;p&gt;The issue is obtaining an ActiveRelation object that we can
further chain.&lt;br&gt;
Caling a method (select, where, includes) on this (ActiveRelation
unioned) object would have the behavior of further calling that
method on each of the ActiveRelation objects involved in the
UNION&lt;br&gt;
________________________________________&lt;/p&gt;
&lt;p&gt;All tough in general a UNION query can be avoided, there are
some cases where the corect active relation #union functionality is
needed.&lt;/p&gt;
&lt;p&gt;For example this wold allow fixing issue &lt;a href=
&quot;/projects/8994/tickets/213&quot; title=&quot;Ticket #213&quot;&gt;#213&lt;/a&gt; of CanCan
&lt;a href=
&quot;https://github.com/ryanb/cancan/issues/213&quot;&gt;https://github.com/ryanb/cancan/issues/213&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would be glad to work in this issue, with a little help.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-17T19:22:47+00:00</created-at>
      <creator-id type="integer">10095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6591</number>
      <permalink>activerecord-union-left-out</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record active_relation arel</tag>
      <title>ActiveRecord UNION left out</title>
      <updated-at type="datetime">2011-03-17T22:13:13+00:00</updated-at>
      <user-id type="integer">10095</user-id>
      <version type="integer">1</version>
      <user-name>clyfe</user-name>
      <creator-name>clyfe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6591</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-17T19:23:28+00:00</created-at>
      <creator-id type="integer">10095</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6591</number>
      <permalink>activerecord-union-left-out</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record active_relation arel</tag>
      <title>ActiveRecord UNION left out</title>
      <updated-at type="datetime">2011-03-17T19:23:29+00:00</updated-at>
      <user-id type="integer">10095</user-id>
      <version type="integer">2</version>
      <user-name>clyfe</user-name>
      <creator-name>clyfe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6591</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
