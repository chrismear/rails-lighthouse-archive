<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-18T17:21:40+00:00</created-at>
  <creator-id type="integer">13675</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1404</number>
  <permalink>conditions_tables-doesnt-understand-condition-hashes</permalink>
  <priority type="integer">795</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.1 2.1.2 activerecord conditions patch</tag>
  <title>conditions_tables doesn't understand :condition hashes</title>
  <updated-at type="datetime">2008-11-26T14:39:23+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">3</version>
  <user-name>Repository</user-name>
  <creator-name>Paul Cantrell</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1404</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Finder methods fail when:

    (1) there is a :limit, and
    (2) there are :includes, and
    (3) the conditions clause is a hash, and
    (4) the conditions reference the :included association.

For example, the following query fails:

   Widget.find :all,
     :conditions =&gt; {&quot;users.state&quot; =&gt; &quot;active&quot;, &quot;tags.name&quot; =&gt; &quot;fun&quot;},
     :include =&gt; [:creator, :tags],
     :limit =&gt; 20

  Mysql::Error: Unknown column 'users.state' in 'where clause': SELECT DISTINCT `widgets`.id FROM `widgets`     WHERE (`users`.`state` = 'active' AND `tags`.`name` = 'new')  LIMIT 20

The problem is in ActiveRecord::Associations::ClassMethods::conditions_tables, associations.rb, line 1513ff:

        def conditions_tables(options)
          # look in both sets of conditions
          conditions = [scope(:find, :conditions), options[:conditions]].inject([]) do |all, cond|
            case cond
              when nil   then all
              when Array then all &lt;&lt; cond.first
              else            all &lt;&lt; cond
            end
          end
          conditions.join(' ').scan(/([\.a-zA-Z_]+).?\./).flatten
        end

The case statement is failing for hashes. It needs an extra &quot;when&quot; to handle them:

              when Hash  then all &lt;&lt; cond.keys

Here is the patch in context:

        def conditions_tables(options)
          # look in both sets of conditions
          conditions = [scope(:find, :conditions), options[:conditions]].inject([]) do |all, cond|
            case cond
              when nil   then all
              when Array then all &lt;&lt; cond.first
              when Hash  then all &lt;&lt; cond.keys  # &lt;--- PATCH
              else            all &lt;&lt; cond
            end
          end
          conditions.join(' ').scan(/([\.a-zA-Z_]+).?\./).flatten
        end</original-body>
  <latest-body>Finder methods fail when:

    (1) there is a :limit, and
    (2) there are :includes, and
    (3) the conditions clause is a hash, and
    (4) the conditions reference the :included association.

For example, the following query fails:

   Widget.find :all,
     :conditions =&gt; {&quot;users.state&quot; =&gt; &quot;active&quot;, &quot;tags.name&quot; =&gt; &quot;fun&quot;},
     :include =&gt; [:creator, :tags],
     :limit =&gt; 20

  Mysql::Error: Unknown column 'users.state' in 'where clause': SELECT DISTINCT `widgets`.id FROM `widgets`     WHERE (`users`.`state` = 'active' AND `tags`.`name` = 'new')  LIMIT 20

The problem is in ActiveRecord::Associations::ClassMethods::conditions_tables, associations.rb, line 1513ff:

        def conditions_tables(options)
          # look in both sets of conditions
          conditions = [scope(:find, :conditions), options[:conditions]].inject([]) do |all, cond|
            case cond
              when nil   then all
              when Array then all &lt;&lt; cond.first
              else            all &lt;&lt; cond
            end
          end
          conditions.join(' ').scan(/([\.a-zA-Z_]+).?\./).flatten
        end

The case statement is failing for hashes. It needs an extra &quot;when&quot; to handle them:

              when Hash  then all &lt;&lt; cond.keys

Here is the patch in context:

        def conditions_tables(options)
          # look in both sets of conditions
          conditions = [scope(:find, :conditions), options[:conditions]].inject([]) do |all, cond|
            case cond
              when nil   then all
              when Array then all &lt;&lt; cond.first
              when Hash  then all &lt;&lt; cond.keys  # &lt;--- PATCH
              else            all &lt;&lt; cond
            end
          end
          conditions.join(' ').scan(/([\.a-zA-Z_]+).?\./).flatten
        end</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Finder methods fail when:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(1) there is a :limit, and
(2) there are :includes, and
(3) the conditions clause is a hash, and
(4) the conditions reference the :included association.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For example, the following query fails:&lt;/p&gt;
&lt;p&gt;Widget.find :all,&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; :conditions =&amp;gt; {&quot;users.state&quot; =&amp;gt; &quot;active&quot;, &quot;tags.name&quot; =&amp;gt; &quot;fun&quot;},
 :include =&amp;gt; [:creator, :tags],
 :limit =&amp;gt; 20
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Mysql::Error: Unknown column 'users.state' in 'where clause':
SELECT DISTINCT &lt;code&gt;widgets&lt;/code&gt;.id FROM &lt;code&gt;widgets&lt;/code&gt;
WHERE (&lt;code&gt;users&lt;/code&gt;.&lt;code&gt;state&lt;/code&gt; = 'active' AND
&lt;code&gt;tags&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; = 'new') LIMIT 20&lt;/p&gt;
&lt;p&gt;The problem is in
ActiveRecord::Associations::ClassMethods::conditions_tables,
associations.rb, line 1513ff:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    def conditions_tables(options)
      # look in both sets of conditions
      conditions = [scope(:find, :conditions), options[:conditions]].inject([]) do |all, cond|
        case cond
          when nil   then all
          when Array then all &amp;lt;&amp;lt; cond.first
          else            all &amp;lt;&amp;lt; cond
        end
      end
      conditions.join(' ').scan(/([\.a-zA-Z_]+).?\./).flatten
    end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The case statement is failing for hashes. It needs an extra
&quot;when&quot; to handle them:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;          when Hash  then all &amp;lt;&amp;lt; cond.keys
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here is the patch in context:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    def conditions_tables(options)
      # look in both sets of conditions
      conditions = [scope(:find, :conditions), options[:conditions]].inject([]) do |all, cond|
        case cond
          when nil   then all
          when Array then all &amp;lt;&amp;lt; cond.first
          when Hash  then all &amp;lt;&amp;lt; cond.keys  # &amp;lt;--- PATCH
          else            all &amp;lt;&amp;lt; cond
        end
      end
      conditions.join(' ').scan(/([\.a-zA-Z_]+).?\./).flatten
    end
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Finder methods fail when:

    (1) there is a :limit, and
    (2) there are :includes, and
    (3) the conditions clause is a hash, and
    (4) the conditions reference the :included association.

For example, the following query fails:

   Widget.find :all,
     :conditions =&gt; {&quot;users.state&quot; =&gt; &quot;active&quot;, &quot;tags.name&quot; =&gt; &quot;fun&quot;},
     :include =&gt; [:creator, :tags],
     :limit =&gt; 20

  Mysql::Error: Unknown column 'users.state' in 'where clause': SELECT DISTINCT `widgets`.id FROM `widgets`     WHERE (`users`.`state` = 'active' AND `tags`.`name` = 'new')  LIMIT 20

The problem is in ActiveRecord::Associations::ClassMethods::conditions_tables, associations.rb, line 1513ff:

        def conditions_tables(options)
          # look in both sets of conditions
          conditions = [scope(:find, :conditions), options[:conditions]].inject([]) do |all, cond|
            case cond
              when nil   then all
              when Array then all &lt;&lt; cond.first
              else            all &lt;&lt; cond
            end
          end
          conditions.join(' ').scan(/([\.a-zA-Z_]+).?\./).flatten
        end

The case statement is failing for hashes. It needs an extra &quot;when&quot; to handle them:

              when Hash  then all &lt;&lt; cond.keys

Here is the patch in context:

        def conditions_tables(options)
          # look in both sets of conditions
          conditions = [scope(:find, :conditions), options[:conditions]].inject([]) do |all, cond|
            case cond
              when nil   then all
              when Array then all &lt;&lt; cond.first
              when Hash  then all &lt;&lt; cond.keys  # &lt;--- PATCH
              else            all &lt;&lt; cond
            end
          end
          conditions.join(' ').scan(/([\.a-zA-Z_]+).?\./).flatten
        end</body>
      <body-html>&lt;div&gt;&lt;p&gt;Finder methods fail when:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(1) there is a :limit, and
(2) there are :includes, and
(3) the conditions clause is a hash, and
(4) the conditions reference the :included association.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For example, the following query fails:&lt;/p&gt;
&lt;p&gt;Widget.find :all,&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; :conditions =&amp;gt; {&quot;users.state&quot; =&amp;gt; &quot;active&quot;, &quot;tags.name&quot; =&amp;gt; &quot;fun&quot;},
 :include =&amp;gt; [:creator, :tags],
 :limit =&amp;gt; 20
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Mysql::Error: Unknown column 'users.state' in 'where clause':
SELECT DISTINCT &lt;code&gt;widgets&lt;/code&gt;.id FROM &lt;code&gt;widgets&lt;/code&gt;
WHERE (&lt;code&gt;users&lt;/code&gt;.&lt;code&gt;state&lt;/code&gt; = 'active' AND
&lt;code&gt;tags&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; = 'new') LIMIT 20&lt;/p&gt;
&lt;p&gt;The problem is in
ActiveRecord::Associations::ClassMethods::conditions_tables,
associations.rb, line 1513ff:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    def conditions_tables(options)
      # look in both sets of conditions
      conditions = [scope(:find, :conditions), options[:conditions]].inject([]) do |all, cond|
        case cond
          when nil   then all
          when Array then all &amp;lt;&amp;lt; cond.first
          else            all &amp;lt;&amp;lt; cond
        end
      end
      conditions.join(' ').scan(/([\.a-zA-Z_]+).?\./).flatten
    end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The case statement is failing for hashes. It needs an extra
&quot;when&quot; to handle them:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;          when Hash  then all &amp;lt;&amp;lt; cond.keys
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here is the patch in context:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    def conditions_tables(options)
      # look in both sets of conditions
      conditions = [scope(:find, :conditions), options[:conditions]].inject([]) do |all, cond|
        case cond
          when nil   then all
          when Array then all &amp;lt;&amp;lt; cond.first
          when Hash  then all &amp;lt;&amp;lt; cond.keys  # &amp;lt;--- PATCH
          else            all &amp;lt;&amp;lt; cond
        end
      end
      conditions.join(' ').scan(/([\.a-zA-Z_]+).?\./).flatten
    end
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-18T17:21:40+00:00</created-at>
      <creator-id type="integer">13675</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1404</number>
      <permalink>conditions_tables-doesnt-understand-condition-hashes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 2.1.2 activerecord conditions</tag>
      <title>conditions_tables doesn't understand :condition hashes</title>
      <updated-at type="datetime">2008-11-18T17:21:41+00:00</updated-at>
      <user-id type="integer">13675</user-id>
      <version type="integer">1</version>
      <user-name>Paul Cantrell</user-name>
      <creator-name>Paul Cantrell</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1404</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Patch attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Patch attached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-18T20:10:17+00:00</created-at>
      <creator-id type="integer">13675</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1 2.1.2 activerecord conditions
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1404</number>
      <permalink>conditions_tables-doesnt-understand-condition-hashes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 2.1.2 activerecord conditions patch</tag>
      <title>conditions_tables doesn't understand :condition hashes</title>
      <updated-at type="datetime">2008-11-18T20:10:22+00:00</updated-at>
      <user-id type="integer">13675</user-id>
      <version type="integer">2</version>
      <user-name>Paul Cantrell</user-name>
      <creator-name>Paul Cantrell</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1404</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [9a4d557713acb0fc8e80f61af18094034aca029a]) Ensure hash conditions on referenced tables are considered when eager loading with limit/offset. [#1404 state:resolved]

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/9a4d557713acb0fc8e80f61af18094034aca029a</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [9a4d557713acb0fc8e80f61af18094034aca029a]) Ensure hash
conditions on referenced tables are considered when eager loading
with limit/offset. [&lt;a href=&quot;/projects/8994/tickets/1404&quot; title=&quot;Ticket #1404&quot;&gt;#1404&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Pratik Naik &lt;a href=&quot;mailto:pratiknaik@gmail.com&quot;&gt;pratiknaik@gmail.com&lt;/a&gt; &lt;a href=&quot;http://github.com/rails/rails/commit/9a4d557713acb0fc8e80f61af18094034aca029a&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-26T14:39:22+00:00</created-at>
      <creator-id type="integer">13675</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1404</number>
      <permalink>conditions_tables-doesnt-understand-condition-hashes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.1 2.1.2 activerecord conditions patch</tag>
      <title>conditions_tables doesn't understand :condition hashes</title>
      <updated-at type="datetime">2008-11-26T14:39:23+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">3</version>
      <user-name>Repository</user-name>
      <creator-name>Paul Cantrell</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1404</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>c330980eda0f37ff43789309de121007b9ae3a91</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-11-18T20:10:17+00:00</created-at>
      <filename>fix-1404.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">63405</id>
      <size type="integer">3552</size>
      <uploader-id type="integer">13675</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/63405/fix-1404.diff</url>
    </attachment>
  </attachments>
</ticket>
