<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-31T11:04:23+00:00</created-at>
  <creator-id type="integer">20779</creator-id>
  <milestone-due-on type="datetime">2010-01-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">50064</milestone-id>
  <number type="integer">3641</number>
  <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>activesupport backend libxml nokogiri patch xmlmini</tag>
  <title>[PATCH] XmlMini - Fixed bugs and improved speed of LibXML and Nokogiri backend</title>
  <updated-at type="datetime">2010-01-02T06:47:43+00:00</updated-at>
  <user-id type="integer">8875</user-id>
  <version type="integer">11</version>
  <user-name>Stephen Bannasch</user-name>
  <creator-name>Willem van Bergen</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
  <milestone-title>2.3.6</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>While I was at it, I decided to fix the bugs in the LibXML backend of XmlMini as well, because it still is the fastest option available. This implementation fixes the following bugs, compared to the REXML backend.

### Parsing CDATA elements works. 

The previous version simply ignored all CDATA blocks, e.g.:

@@@ xml
&lt;tag&gt;&lt;![CDATA[foo &quot;bar&quot; &amp; &lt;baz&gt;]]&gt;&lt;/tag
@@@

### Content that is mixed with tags is also parsed correctly. 

@@@ xml
&lt;tag&gt; text &lt;other-tag /&gt; more text &lt;/tag&gt;
@@@

Now, Rails's testsuite runs fine with this backend set as default, and all equality tests also run correctly (see http://github.com/stepheneb/rails_hash_from_xml). Moreover, the code is more readable (IMHO), and I added specific tests for the issues the old version of the backend had.

## Performance benchmark result 

Still the fastest backend. See http://github.com/stepheneb/rails_hash_from_xml for the benchmark tool.

@@@
Rehearsal ---------------------------------------------
rexml      24.300000   0.110000  24.410000 ( 24.408301)
libxml      0.970000   0.020000   0.990000 (  0.981194)
nokogiri   10.740000   0.060000  10.800000 ( 10.805523)
----------------------------------- total: 37.290000sec

                user     system      total        real
rexml      23.430000   0.050000  23.480000 ( 23.468661)
libxml      0.490000   0.000000   0.490000 (  0.490357)
nokogiri   10.710000   0.020000  10.730000 ( 10.734065)
@@@</original-body>
  <latest-body>While I was at it, I decided to fix the bugs in the LibXML backend of XmlMini as well, because it still is the fastest option available. This implementation fixes the following bugs, compared to the REXML backend.

### Parsing CDATA elements works. 

The previous version simply ignored all CDATA blocks, e.g.:

@@@ xml
&lt;tag&gt;&lt;![CDATA[foo &quot;bar&quot; &amp; &lt;baz&gt;]]&gt;&lt;/tag
@@@

### Content that is mixed with tags is also parsed correctly. 

@@@ xml
&lt;tag&gt; text &lt;other-tag /&gt; more text &lt;/tag&gt;
@@@

Now, Rails's testsuite runs fine with this backend set as default, and all equality tests also run correctly (see http://github.com/stepheneb/rails_hash_from_xml). Moreover, the code is more readable (IMHO), and I added specific tests for the issues the old version of the backend had.

## Performance benchmark result 

Still the fastest backend. See http://github.com/stepheneb/rails_hash_from_xml for the benchmark tool.

@@@
Rehearsal ---------------------------------------------
rexml      24.300000   0.110000  24.410000 ( 24.408301)
libxml      0.970000   0.020000   0.990000 (  0.981194)
nokogiri   10.740000   0.060000  10.800000 ( 10.805523)
----------------------------------- total: 37.290000sec

                user     system      total        real
rexml      23.430000   0.050000  23.480000 ( 23.468661)
libxml      0.490000   0.000000   0.490000 (  0.490357)
nokogiri   10.710000   0.020000  10.730000 ( 10.734065)
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;While I was at it, I decided to fix the bugs in the LibXML
backend of XmlMini as well, because it still is the fastest option
available. This implementation fixes the following bugs, compared
to the REXML backend.&lt;/p&gt;
&lt;h3&gt;Parsing CDATA elements works.&lt;/h3&gt;
&lt;p&gt;The previous version simply ignored all CDATA blocks, e.g.:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;xml&quot;&gt;&amp;lt;tag&amp;gt;&amp;lt;![CDATA[foo &quot;bar&quot; &amp;amp; &amp;lt;baz&amp;gt;]]&amp;gt;&amp;lt;/tag&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Content that is mixed with tags is also parsed correctly.&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=
&quot;xml&quot;&gt;&amp;lt;tag&amp;gt; text &amp;lt;other-tag /&amp;gt; more text &amp;lt;/tag&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, Rails's testsuite runs fine with this backend set as
default, and all equality tests also run correctly (see &lt;a href=
&quot;http://github.com/stepheneb/rails_hash_from_xml)&quot;&gt;http://github.com/stepheneb/rails_hash_from_xml)&lt;/a&gt;.
Moreover, the code is more readable (IMHO), and I added specific
tests for the issues the old version of the backend had.&lt;/p&gt;
&lt;h2&gt;Performance benchmark result&lt;/h2&gt;
&lt;p&gt;Still the fastest backend. See &lt;a href=
&quot;http://github.com/stepheneb/rails_hash_from_xml&quot;&gt;http://github.com/stepheneb/rails_hash_from_xml&lt;/a&gt;
for the benchmark tool.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rehearsal ---------------------------------------------
rexml      24.300000   0.110000  24.410000 ( 24.408301)
libxml      0.970000   0.020000   0.990000 (  0.981194)
nokogiri   10.740000   0.060000  10.800000 ( 10.805523)
----------------------------------- total: 37.290000sec

                user     system      total        real
rexml      23.430000   0.050000  23.480000 ( 23.468661)
libxml      0.490000   0.000000   0.490000 (  0.490357)
nokogiri   10.710000   0.020000  10.730000 ( 10.734065)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>While I was at it, I decided to fix the bugs in the LibXML backend of XmlMini as well, because it still is the fastest option available. This implementation fixes the following bugs, compared to the REXML backend.

### Parsing CDATA elements works. 

The previous version simply ignored all CDATA blocks, e.g.:

@@@ xml
&lt;tag&gt;&lt;![CDATA[foo &quot;bar&quot; &amp; &lt;baz&gt;]]&gt;&lt;/tag
@@@

### Content that is mixed with tags is also parsed correctly. 

@@@ xml
&lt;tag&gt; text &lt;other-tag /&gt; more text &lt;/tag&gt;
@@@

Now, Rails's testsuite runs fine with this backend set as default, and all equality tests also run correctly (see http://github.com/stepheneb/rails_hash_from_xml). Moreover, the code is more readable (IMHO), and I added specific tests for the issues the old version of the backend had.

## Performance benchmark result 

Still the fastest backend. See http://github.com/stepheneb/rails_hash_from_xml for the benchmark tool.

@@@
Rehearsal ---------------------------------------------
rexml      24.300000   0.110000  24.410000 ( 24.408301)
libxml      0.970000   0.020000   0.990000 (  0.981194)
nokogiri   10.740000   0.060000  10.800000 ( 10.805523)
----------------------------------- total: 37.290000sec

                user     system      total        real
rexml      23.430000   0.050000  23.480000 ( 23.468661)
libxml      0.490000   0.000000   0.490000 (  0.490357)
nokogiri   10.710000   0.020000  10.730000 ( 10.734065)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;While I was at it, I decided to fix the bugs in the LibXML
backend of XmlMini as well, because it still is the fastest option
available. This implementation fixes the following bugs, compared
to the REXML backend.&lt;/p&gt;
&lt;h3&gt;Parsing CDATA elements works.&lt;/h3&gt;
&lt;p&gt;The previous version simply ignored all CDATA blocks, e.g.:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;xml&quot;&gt;&amp;lt;tag&amp;gt;&amp;lt;![CDATA[foo &quot;bar&quot; &amp;amp; &amp;lt;baz&amp;gt;]]&amp;gt;&amp;lt;/tag&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Content that is mixed with tags is also parsed correctly.&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=
&quot;xml&quot;&gt;&amp;lt;tag&amp;gt; text &amp;lt;other-tag /&amp;gt; more text &amp;lt;/tag&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, Rails's testsuite runs fine with this backend set as
default, and all equality tests also run correctly (see &lt;a href=
&quot;http://github.com/stepheneb/rails_hash_from_xml)&quot;&gt;http://github.com/stepheneb/rails_hash_from_xml)&lt;/a&gt;.
Moreover, the code is more readable (IMHO), and I added specific
tests for the issues the old version of the backend had.&lt;/p&gt;
&lt;h2&gt;Performance benchmark result&lt;/h2&gt;
&lt;p&gt;Still the fastest backend. See &lt;a href=
&quot;http://github.com/stepheneb/rails_hash_from_xml&quot;&gt;http://github.com/stepheneb/rails_hash_from_xml&lt;/a&gt;
for the benchmark tool.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rehearsal ---------------------------------------------
rexml      24.300000   0.110000  24.410000 ( 24.408301)
libxml      0.970000   0.020000   0.990000 (  0.981194)
nokogiri   10.740000   0.060000  10.800000 ( 10.805523)
----------------------------------- total: 37.290000sec

                user     system      total        real
rexml      23.430000   0.050000  23.480000 ( 23.468661)
libxml      0.490000   0.000000   0.490000 (  0.490357)
nokogiri   10.710000   0.020000  10.730000 ( 10.734065)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-31T11:04:23+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport backend libxml patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed LibXML backend issues</title>
      <updated-at type="datetime">2009-12-31T11:04:30+00:00</updated-at>
      <user-id type="integer">20779</user-id>
      <version type="integer">1</version>
      <user-name>Willem van Bergen</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Nice work. This pulls the implementation out of sync with master, however. Could you patch master instead and backport to 2-3-stable?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Nice work. This pulls the implementation out of sync with
master, however. Could you patch master instead and backport to
2-3-stable?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-31T20:18:33+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport backend libxml patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed LibXML backend issues</title>
      <updated-at type="datetime">2009-12-31T20:18:37+00:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>When I finally set up a working Rails 3 environment, I found out that most of these bugs have already been fixed in Rails 3. However, these fixes have reduced the performance of the backend quite a bit. Moreover, I did find a new incompatibility with the REXML backend: Whitespace in the content of a tag is not preserved correctly when the tag has attributes, e.g.:

@@@ xml
&lt;product type=&quot;file&quot;&gt;    &lt;/product&gt;
@@@

I found that the Nokogiri backend has the same issue. I have attached a new patch, which fixes this issue in both backends. It actually is pretty much a rewrite of both backends. Except for some small API differences between LibXML and Nokogiri, both backends now use the exact same code to build the hash. This makes it easier to fix future bugs in both backends at the same time. Moreover, in both cases, the code is cleaner than the previous versions, and for both backends the performance is significantly improved.

### Performance ###

Running the performance tests on the master branch:
@@@
               user     system      total        real
REXML     17.200000   0.080000  17.280000 ( 17.327603)
LibXML     2.100000   0.110000   2.210000 (  2.218409)
Nokogiri   5.290000   0.030000   5.320000 (  5.343453)
@@@

Now, with my patch applied:
@@@
                user     system      total        real
rexml      24.170000   0.110000  24.280000 ( 24.334927)
libxml      0.670000   0.000000   0.670000 (  0.674913)
nokogiri    2.390000   0.020000   2.410000 (  2.417661)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;When I finally set up a working Rails 3 environment, I found out
that most of these bugs have already been fixed in Rails 3.
However, these fixes have reduced the performance of the backend
quite a bit. Moreover, I did find a new incompatibility with the
REXML backend: Whitespace in the content of a tag is not preserved
correctly when the tag has attributes, e.g.:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;xml&quot;&gt;&amp;lt;product type=&quot;file&quot;&amp;gt;    &amp;lt;/product&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I found that the Nokogiri backend has the same issue. I have
attached a new patch, which fixes this issue in both backends. It
actually is pretty much a rewrite of both backends. Except for some
small API differences between LibXML and Nokogiri, both backends
now use the exact same code to build the hash. This makes it easier
to fix future bugs in both backends at the same time. Moreover, in
both cases, the code is cleaner than the previous versions, and for
both backends the performance is significantly improved.&lt;/p&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;Running the performance tests on the master branch:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;               user     system      total        real
REXML     17.200000   0.080000  17.280000 ( 17.327603)
LibXML     2.100000   0.110000   2.210000 (  2.218409)
Nokogiri   5.290000   0.030000   5.320000 (  5.343453)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, with my patch applied:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;                user     system      total        real
rexml      24.170000   0.110000  24.280000 ( 24.334927)
libxml      0.670000   0.000000   0.670000 (  0.674913)
nokogiri    2.390000   0.020000   2.410000 (  2.417661)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-01T11:26:40+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport backend libxml patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed LibXML backend issues</title>
      <updated-at type="datetime">2010-01-01T11:26:48+00:00</updated-at>
      <user-id type="integer">20779</user-id>
      <version type="integer">3</version>
      <user-name>Willem van Bergen</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>The last patch was for the master branch. I backported the changes to the 2-3-stable branch, basically by copy pasting the relevant bits of the code and tests. See the attachment. Can this be done smarter with git?</body>
      <body-html>&lt;div&gt;&lt;p&gt;The last patch was for the master branch. I backported the
changes to the 2-3-stable branch, basically by copy pasting the
relevant bits of the code and tests. See the attachment. Can this
be done smarter with git?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-01T11:28:53+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activesupport backend libxml patch xmlmini
:title: &quot;[PATCH] XmlMini - Fixed LibXML backend issues&quot;
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport backend libxml nokogiri patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed bugs and improved speed of LibXML and Nokogiri backend</title>
      <updated-at type="datetime">2010-01-01T11:28:54+00:00</updated-at>
      <user-id type="integer">20779</user-id>
      <version type="integer">4</version>
      <user-name>Willem van Bergen</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Note that I also wrote a SAX-based backend using Nokogiri, which is even faster. See my other ticket at https://rails.lighthouseapp.com/projects/8994/tickets/3636. But let's first fix the current backends before adding new ones :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Note that I also wrote a SAX-based backend using Nokogiri, which
is even faster. See my other ticket at &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/3636&quot;&gt;https://rails.lighthouseapp.com/projects/8994/tickets/3636&lt;/a&gt;.
But let's first fix the current backends before adding new ones
:-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-01T11:35:03+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport backend libxml nokogiri patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed bugs and improved speed of LibXML and Nokogiri backend</title>
      <updated-at type="datetime">2010-01-01T11:35:05+00:00</updated-at>
      <user-id type="integer">20779</user-id>
      <version type="integer">5</version>
      <user-name>Willem van Bergen</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I see I ran the benchmark with my patch applied on my less powerful notebook (see the difference in REXML performance). So the performance is even more impressive with the patch applied, compared to the master branch :-)

@@@
               user     system      total        real
REXML     17.420000   0.080000  17.500000 ( 17.617890)
LibXML     0.520000   0.000000   0.520000 (  0.535704)
Nokogiri   1.840000   0.020000   1.860000 (  1.871491)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I see I ran the benchmark with my patch applied on my less
powerful notebook (see the difference in REXML performance). So the
performance is even more impressive with the patch applied,
compared to the master branch :-)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;               user     system      total        real
REXML     17.420000   0.080000  17.500000 ( 17.617890)
LibXML     0.520000   0.000000   0.520000 (  0.535704)
Nokogiri   1.840000   0.020000   1.860000 (  1.871491)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-01T13:13:57+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport backend libxml nokogiri patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed bugs and improved speed of LibXML and Nokogiri backend</title>
      <updated-at type="datetime">2010-01-01T13:14:00+00:00</updated-at>
      <user-id type="integer">20779</user-id>
      <version type="integer">6</version>
      <user-name>Willem van Bergen</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Awesome.  Plus One</body>
      <body-html>&lt;div&gt;&lt;p&gt;Awesome. Plus One&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-01T20:40:18+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport backend libxml nokogiri patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed bugs and improved speed of LibXML and Nokogiri backend</title>
      <updated-at type="datetime">2010-01-01T20:40:19+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">7</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Thanks Willem! To backport quickly, you can checkout 2-3-stable then cherry-pick the revision you made to master.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks Willem! To backport quickly, you can checkout 2-3-stable
then cherry-pick the revision you made to master.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-01T21:15:07+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport backend libxml nokogiri patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed bugs and improved speed of LibXML and Nokogiri backend</title>
      <updated-at type="datetime">2010-01-01T21:15:12+00:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">8</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [12f6fd0f2687f083bc23ad63fdc82c7e65cb8984]) Bugfixes, speed improvements and code cleanup for Nokogiri's and LibXML's XmlMini backend

[#3641]

Signed-off-by: Jeremy Kemper &lt;jeremy@bitsweat.net&gt;
http://github.com/rails/rails/commit/12f6fd0f2687f083bc23ad63fdc82c7e65cb8984</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/12f6fd0f2687f083bc23ad63fdc82c7e65cb8984&quot;
title=
&quot;Changeset [12f6fd0f2687f083bc23ad63fdc82c7e65cb8984]&quot;&gt;[12f6fd0f2687f083bc23ad63fdc82c7e65cb8984]&lt;/a&gt;)
Bugfixes, speed improvements and code cleanup for Nokogiri's and
LibXML's XmlMini backend&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/3641&quot; title=
&quot;Ticket #3641&quot;&gt;#3641&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jeremy Kemper &lt;a&gt;jeremy@bitsweat.net&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/12f6fd0f2687f083bc23ad63fdc82c7e65cb8984&quot;&gt;
http://github.com/rails/rails/commit/12f6fd0f2687f083bc23ad63fdc82c...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-01T21:19:38+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport backend libxml nokogiri patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed bugs and improved speed of LibXML and Nokogiri backend</title>
      <updated-at type="datetime">2010-01-01T21:19:39+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">9</version>
      <user-name>Repository</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [34b03cebf9c9f2ce2a53511a4b2160485e270f12]) Code cleanup, bugfixes and speed improvements for the Nokogiri and LibXML XmlMini backends

[#3641 state:committed]

Signed-off-by: Jeremy Kemper &lt;jeremy@bitsweat.net&gt;
http://github.com/rails/rails/commit/34b03cebf9c9f2ce2a53511a4b2160485e270f12</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/34b03cebf9c9f2ce2a53511a4b2160485e270f12&quot;
title=
&quot;Changeset [34b03cebf9c9f2ce2a53511a4b2160485e270f12]&quot;&gt;[34b03cebf9c9f2ce2a53511a4b2160485e270f12]&lt;/a&gt;)
Code cleanup, bugfixes and speed improvements for the Nokogiri and
LibXML XmlMini backends&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/3641&quot; title=
&quot;Ticket #3641&quot;&gt;#3641&lt;/a&gt; state:committed]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jeremy Kemper &lt;a&gt;jeremy@bitsweat.net&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/34b03cebf9c9f2ce2a53511a4b2160485e270f12&quot;&gt;
http://github.com/rails/rails/commit/34b03cebf9c9f2ce2a53511a4b2160...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-01T21:19:40+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activesupport backend libxml nokogiri patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed bugs and improved speed of LibXML and Nokogiri backend</title>
      <updated-at type="datetime">2010-01-01T21:19:40+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">10</version>
      <user-name>Repository</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I updated my benchmark and testing suite here for Rails 3 master: http://github.com/stepheneb/rails_hash_from_xml.  

All my tests comparing REXML equality pass on both the Rails 3 master and 2-3-stable branches.

Running in MRI I compare Nokogiri and libxml-ruby to REXML.

In JRuby I compare the JDOM implementation to REXML.

I also tested the FFI version of Nokogiri in JRuby but all of the tests fail.

It's very nice to see the Nokogiri speedups on MRI. Here are my results:

    # Ruby 1.8.6 (2008-08-11 rev 287), platform: universal-darwin9.0
    
    $ ruby -I$RAILS_SOURCE/activesupport/lib bench_hash_from_xml.rb
    
                  user     system      total        real
    REXML     10.960000   0.270000  11.230000 ( 11.464308)
    Nokogiri   1.230000   0.020000   1.250000 (  1.256476)
    LibXML     0.430000   0.000000   0.430000 (  0.434689)

There are some nice speedups in JRuby also for both REXML and JDOM -- Nokogiri (FFI) is quite slow however (one reason is that Nokogiri in JRuby requires objectspace to be turned on).

    $ jruby --server -I$RAILS_SOURCE/activesupport/lib bench_hash_from_xml.rb 2

    # OpenJDK Server VM 1.7.0-internal:

                   user     system      total        real
    REXML      3.448000   0.000000   3.448000 (  3.448000)
    JDOM       0.761000   0.000000   0.761000 (  0.761000)
    Nokogiri   6.083000   0.000000   6.083000 (  6.082000)

For more details see: http://github.com/stepheneb/rails_hash_from_xml/blob/master/readme.txt</body>
      <body-html>&lt;div&gt;&lt;p&gt;I updated my benchmark and testing suite here for Rails 3
master: &lt;a href=
&quot;http://github.com/stepheneb/rails_hash_from_xml&quot;&gt;http://github.com/stepheneb/rails_hash_from_xml&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;All my tests comparing REXML equality pass on both the Rails 3
master and 2-3-stable branches.&lt;/p&gt;
&lt;p&gt;Running in MRI I compare Nokogiri and libxml-ruby to REXML.&lt;/p&gt;
&lt;p&gt;In JRuby I compare the JDOM implementation to REXML.&lt;/p&gt;
&lt;p&gt;I also tested the FFI version of Nokogiri in JRuby but all of
the tests fail.&lt;/p&gt;
&lt;p&gt;It's very nice to see the Nokogiri speedups on MRI. Here are my
results:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Ruby 1.8.6 (2008-08-11 rev 287), platform: universal-darwin9.0

$ ruby -I$RAILS_SOURCE/activesupport/lib bench_hash_from_xml.rb

              user     system      total        real
REXML     10.960000   0.270000  11.230000 ( 11.464308)
Nokogiri   1.230000   0.020000   1.250000 (  1.256476)
LibXML     0.430000   0.000000   0.430000 (  0.434689)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There are some nice speedups in JRuby also for both REXML and
JDOM -- Nokogiri (FFI) is quite slow however (one reason is that
Nokogiri in JRuby requires objectspace to be turned on).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ jruby --server -I$RAILS_SOURCE/activesupport/lib bench_hash_from_xml.rb 2

# OpenJDK Server VM 1.7.0-internal:

               user     system      total        real
REXML      3.448000   0.000000   3.448000 (  3.448000)
JDOM       0.761000   0.000000   0.761000 (  0.761000)
Nokogiri   6.083000   0.000000   6.083000 (  6.082000)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For more details see: &lt;a href=
&quot;http://github.com/stepheneb/rails_hash_from_xml/blob/master/readme.txt&quot;&gt;
http://github.com/stepheneb/rails_hash_from_xml/blob/master/readme.txt&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-02T06:47:40+00:00</created-at>
      <creator-id type="integer">20779</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3641</number>
      <permalink>patch-xmlmini-fixed-libxml-backend-issues</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activesupport backend libxml nokogiri patch xmlmini</tag>
      <title>[PATCH] XmlMini - Fixed bugs and improved speed of LibXML and Nokogiri backend</title>
      <updated-at type="datetime">2010-01-02T06:47:43+00:00</updated-at>
      <user-id type="integer">8875</user-id>
      <version type="integer">11</version>
      <user-name>Stephen Bannasch</user-name>
      <creator-name>Willem van Bergen</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3641</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>b5aeb435d23d17215519e257aaaebbef65c6bdb7</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-01T11:26:40+00:00</created-at>
      <filename>xmlmini_backend_fixes_rails3.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">365487</id>
      <size type="integer">9575</size>
      <uploader-id type="integer">20779</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/365487/xmlmini_backend_fixes_rails3.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>8709015245f3d2c61969bf45843aa40be69813ac</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-01T11:28:53+00:00</created-at>
      <filename>xmlmini_backend_fixes_rails23.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">365488</id>
      <size type="integer">13621</size>
      <uploader-id type="integer">20779</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/365488/xmlmini_backend_fixes_rails23.diff</url>
    </attachment>
  </attachments>
</ticket>
