<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-02T19:14:45+01:00</created-at>
  <creator-id type="integer">25138</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">538</number>
  <permalink>has_many-through-generates-bad-sql-during-include</permalink>
  <priority type="integer">34</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>has_many :through generates bad SQL during include?</title>
  <updated-at type="datetime">2008-09-18T07:45:45+01:00</updated-at>
  <user-id type="integer">14890</user-id>
  <version type="integer">3</version>
  <user-name>Tarmo T&#228;nav</user-name>
  <creator-name>...Paul</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/538</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>If I have a class that has_many of another class :through a join table, I find I get a SQL error from the .include?(obj) method.  This *doesn't* happen if the related data is already loaded.

class Channel &lt; ActiveRecord::Base
  has_many :users, :through =&gt; :subscriptions
end

&gt; u = User.find(:first)
&lt;User Record found&gt;
&gt; c = Channel.find(:first)
&lt;Channel Record found&gt;
&gt; c.users.include?(u)
Mysql::Error: Column 'id' in where clause is ambiguous:  SELECT `users`.id FROM `users1` INNER JOIN subscriptions ON users.id = subscriptions.user_id WHERE (id = 19) AND ((`subscriptions`.channel_id = 54)) LIMIT 1

&gt;c.users
&lt;Array of users found&gt;
&gt;c.users.include?(u)
true

This code worked fine before upgrading to 2.1.  I can't seem to find where this bare &quot;id&quot; in the WHERE clause could be coming from...</original-body>
  <latest-body>If I have a class that has_many of another class :through a join table, I find I get a SQL error from the .include?(obj) method.  This *doesn't* happen if the related data is already loaded.

class Channel &lt; ActiveRecord::Base
  has_many :users, :through =&gt; :subscriptions
end

&gt; u = User.find(:first)
&lt;User Record found&gt;
&gt; c = Channel.find(:first)
&lt;Channel Record found&gt;
&gt; c.users.include?(u)
Mysql::Error: Column 'id' in where clause is ambiguous:  SELECT `users`.id FROM `users1` INNER JOIN subscriptions ON users.id = subscriptions.user_id WHERE (id = 19) AND ((`subscriptions`.channel_id = 54)) LIMIT 1

&gt;c.users
&lt;Array of users found&gt;
&gt;c.users.include?(u)
true

This code worked fine before upgrading to 2.1.  I can't seem to find where this bare &quot;id&quot; in the WHERE clause could be coming from...</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
If I have a class that has_many of another class :through a join table, I find I get a SQL error from the .include?(obj) method.  This &lt;strong&gt;doesn't&lt;/strong&gt; happen if the related data is already loaded.
&lt;/p&gt;&lt;p&gt;
class Channel &amp;lt; ActiveRecord::Base
&lt;/p&gt;&lt;p&gt;
has_many :users, :through =&gt; :subscriptions
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
u = User.find(:first)
&lt;/p&gt;&lt;p&gt;
c = Channel.find(:first)
&lt;/p&gt;&lt;p&gt;
c.users.include?(u)
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;
Mysql::Error: Column 'id' in where clause is ambiguous:  SELECT `users`.id FROM `users1` INNER JOIN subscriptions ON users.id = subscriptions.user_id WHERE (id = 19) AND ((`subscriptions`.channel_id = 54)) LIMIT 1
&lt;/p&gt;&lt;p&gt;
&gt;c.users
&lt;/p&gt;&lt;p&gt;
&gt;c.users.include?(u)
&lt;/p&gt;&lt;p&gt;
true
&lt;/p&gt;&lt;p&gt;
This code worked fine before upgrading to 2.1.  I can't seem to find where this bare &quot;id&quot; in the WHERE clause could be coming from...
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If I have a class that has_many of another class :through a join table, I find I get a SQL error from the .include?(obj) method.  This *doesn't* happen if the related data is already loaded.

class Channel &lt; ActiveRecord::Base
  has_many :users, :through =&gt; :subscriptions
end

&gt; u = User.find(:first)
&lt;User Record found&gt;
&gt; c = Channel.find(:first)
&lt;Channel Record found&gt;
&gt; c.users.include?(u)
Mysql::Error: Column 'id' in where clause is ambiguous:  SELECT `users`.id FROM `users1` INNER JOIN subscriptions ON users.id = subscriptions.user_id WHERE (id = 19) AND ((`subscriptions`.channel_id = 54)) LIMIT 1

&gt;c.users
&lt;Array of users found&gt;
&gt;c.users.include?(u)
true

This code worked fine before upgrading to 2.1.  I can't seem to find where this bare &quot;id&quot; in the WHERE clause could be coming from...</body>
      <body-html>&lt;div&gt;&lt;p&gt;
If I have a class that has_many of another class :through a join table, I find I get a SQL error from the .include?(obj) method.  This &lt;strong&gt;doesn't&lt;/strong&gt; happen if the related data is already loaded.
&lt;/p&gt;&lt;p&gt;
class Channel &amp;lt; ActiveRecord::Base
&lt;/p&gt;&lt;p&gt;
has_many :users, :through =&gt; :subscriptions
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
u = User.find(:first)
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
c = Channel.find(:first)
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
c.users.include?(u)
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;
Mysql::Error: Column 'id' in where clause is ambiguous:  SELECT `users`.id FROM `users1` INNER JOIN subscriptions ON users.id = subscriptions.user_id WHERE (id = 19) AND ((`subscriptions`.channel_id = 54)) LIMIT 1
&lt;/p&gt;&lt;p&gt;
&gt;c.users
&lt;/p&gt;&lt;p&gt;

&lt;/p&gt;&lt;p&gt;
&gt;c.users.include?(u)
&lt;/p&gt;&lt;p&gt;
true
&lt;/p&gt;&lt;p&gt;
This code worked fine before upgrading to 2.1.  I can't seem to find where this bare &quot;id&quot; in the WHERE clause could be coming from...
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T19:14:46+01:00</created-at>
      <creator-id type="integer">25138</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">538</number>
      <permalink>has_many-through-generates-bad-sql-during-include</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :through generates bad SQL during include?</title>
      <updated-at type="datetime">2008-07-02T19:14:46+01:00</updated-at>
      <user-id type="integer">25138</user-id>
      <version type="integer">1</version>
      <user-name>...Paul</user-name>
      <creator-name>...Paul</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/538</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The problem exists somewhere in the heirarchy of the &quot;exists?&quot; method in active_record/base.rb (or, in active_record/associations/association_collection.rb, where exists? is called from the include? method, passing only the record to be searched for).

I found if I kludged the include? method so the exists call looked like this:

exists?([&quot;#{quoted_table_name}.#{primary_key} = ?&quot;, record.id])

Things worked for me, at least in this case.  I'm fairly certain that's not a really a good patch, but it confirmed my suspicions that something in that heirarchy isn't properly using the table name space in the query.  :P</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The problem exists somewhere in the heirarchy of the &quot;exists?&quot; method in active_record/base.rb (or, in active_record/associations/association_collection.rb, where exists? is called from the include? method, passing only the record to be searched for).
&lt;/p&gt;&lt;p&gt;
I found if I kludged the include? method so the exists call looked like this:
&lt;/p&gt;&lt;p&gt;
exists?([&quot;#{quoted_table_name}.#{primary_key} = ?&quot;, record.id])
&lt;/p&gt;&lt;p&gt;
Things worked for me, at least in this case.  I'm fairly certain that's not a really a good patch, but it confirmed my suspicions that something in that heirarchy isn't properly using the table name space in the query.  :P
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T19:41:17+01:00</created-at>
      <creator-id type="integer">25138</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">538</number>
      <permalink>has_many-through-generates-bad-sql-during-include</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :through generates bad SQL during include?</title>
      <updated-at type="datetime">2008-07-02T19:41:17+01:00</updated-at>
      <user-id type="integer">25138</user-id>
      <version type="integer">2</version>
      <user-name>...Paul</user-name>
      <creator-name>...Paul</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/538</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm unable to reproduce it, looking at sanitize_sql_hash_for_conditions() which exists?() calls indirectly through expand_id_conditions() it seems that everything should get properly prefixed with a table name.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm unable to reproduce it, looking at
sanitize_sql_hash_for_conditions() which exists?() calls indirectly
through expand_id_conditions() it seems that everything should get
properly prefixed with a table name.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-09-18T07:45:42+01:00</created-at>
      <creator-id type="integer">25138</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">538</number>
      <permalink>has_many-through-generates-bad-sql-during-include</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>has_many :through generates bad SQL during include?</title>
      <updated-at type="datetime">2008-09-18T07:45:45+01:00</updated-at>
      <user-id type="integer">14890</user-id>
      <version type="integer">3</version>
      <user-name>Tarmo T&#228;nav</user-name>
      <creator-name>...Paul</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/538</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
