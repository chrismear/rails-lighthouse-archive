From ac35ceb9ea065b4b85a0107cda68421855fdb2c4 Mon Sep 17 00:00:00 2001
From: Emilio Tagua <miloops@gmail.com>
Date: Mon, 18 May 2009 20:17:35 -0300
Subject: [PATCH] Add missing models and fixtures to ActiveRecord tests

---
 .../has_many_through_associations_test.rb          |   46 ++++++++++----------
 .../test/cases/autosave_association_test.rb        |    7 +++-
 activerecord/test/cases/named_scope_test.rb        |    4 +-
 3 files changed, 32 insertions(+), 25 deletions(-)

diff --git a/activerecord/test/cases/associations/has_many_through_associations_test.rb b/activerecord/test/cases/associations/has_many_through_associations_test.rb
index 51c70b9..4254bad 100644
--- a/activerecord/test/cases/associations/has_many_through_associations_test.rb
+++ b/activerecord/test/cases/associations/has_many_through_associations_test.rb
@@ -13,7 +13,7 @@ require 'models/pet'
 require 'models/toy'
 
 class HasManyThroughAssociationsTest < ActiveRecord::TestCase
-  fixtures :posts, :readers, :people, :comments, :authors, :owners, :pets, :toys
+  fixtures :posts, :readers, :people, :comments, :authors, :owners, :pets, :toys, :jobs, :references
 
   def test_associate_existing
     assert_queries(2) { posts(:thinking);people(:david) }
@@ -23,49 +23,49 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase
     assert_queries(1) do
       posts(:thinking).people << people(:david)
     end
-    
+
     assert_queries(1) do
       assert posts(:thinking).people.include?(people(:david))
     end
-    
+
     assert posts(:thinking).reload.people(true).include?(people(:david))
   end
 
   def test_associating_new
     assert_queries(1) { posts(:thinking) }
     new_person = nil # so block binding catches it
-    
+
     assert_queries(0) do
       new_person = Person.new :first_name => 'bob'
     end
-    
+
     # Associating new records always saves them
     # Thus, 1 query for the new person record, 1 query for the new join table record
     assert_queries(2) do
       posts(:thinking).people << new_person
     end
-    
+
     assert_queries(1) do
       assert posts(:thinking).people.include?(new_person)
     end
-    
+
     assert posts(:thinking).reload.people(true).include?(new_person)
   end
 
   def test_associate_new_by_building
     assert_queries(1) { posts(:thinking) }
-    
+
     assert_queries(0) do
       posts(:thinking).people.build(:first_name=>"Bob")
       posts(:thinking).people.new(:first_name=>"Ted")
     end
-    
+
     # Should only need to load the association once
     assert_queries(1) do
       assert posts(:thinking).people.collect(&:first_name).include?("Bob")
       assert posts(:thinking).people.collect(&:first_name).include?("Ted")
     end
-    
+
     # 2 queries for each new record (1 to save the record itself, 1 for the join model)
     #    * 2 new records = 4
     # + 1 query to save the actual post = 5
@@ -73,22 +73,22 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase
       posts(:thinking).body += '-changed'
       posts(:thinking).save
     end
-    
+
     assert posts(:thinking).reload.people(true).collect(&:first_name).include?("Bob")
     assert posts(:thinking).reload.people(true).collect(&:first_name).include?("Ted")
   end
 
   def test_delete_association
     assert_queries(2){posts(:welcome);people(:michael); }
-    
+
     assert_queries(1) do
       posts(:welcome).people.delete(people(:michael))
     end
-    
+
     assert_queries(1) do
       assert posts(:welcome).people.empty?
     end
-    
+
     assert posts(:welcome).reload.people(true).empty?
   end
 
@@ -118,36 +118,36 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase
 
   def test_replace_association
     assert_queries(4){posts(:welcome);people(:david);people(:michael); posts(:welcome).people(true)}
-    
+
     # 1 query to delete the existing reader (michael)
     # 1 query to associate the new reader (david)
     assert_queries(2) do
       posts(:welcome).people = [people(:david)]
     end
-    
+
     assert_queries(0){
       assert posts(:welcome).people.include?(people(:david))
       assert !posts(:welcome).people.include?(people(:michael))
     }
-    
+
     assert posts(:welcome).reload.people(true).include?(people(:david))
     assert !posts(:welcome).reload.people(true).include?(people(:michael))
   end
 
   def test_associate_with_create
     assert_queries(1) { posts(:thinking) }
-    
+
     # 1 query for the new record, 1 for the join table record
     # No need to update the actual collection yet!
     assert_queries(2) do
       posts(:thinking).people.create(:first_name=>"Jeb")
     end
-    
+
     # *Now* we actually need the collection so it's loaded
     assert_queries(1) do
       assert posts(:thinking).people.collect(&:first_name).include?("Jeb")
     end
-    
+
     assert posts(:thinking).reload.people(true).collect(&:first_name).include?("Jeb")
   end
 
@@ -165,15 +165,15 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase
 
   def test_clear_associations
     assert_queries(2) { posts(:welcome);posts(:welcome).people(true) }
-    
+
     assert_queries(1) do
       posts(:welcome).people.clear
     end
-    
+
     assert_queries(0) do
       assert posts(:welcome).people.empty?
     end
-    
+
     assert posts(:welcome).reload.people(true).empty?
   end
 
diff --git a/activerecord/test/cases/autosave_association_test.rb b/activerecord/test/cases/autosave_association_test.rb
index 919b6f8..f95b2c0 100644
--- a/activerecord/test/cases/autosave_association_test.rb
+++ b/activerecord/test/cases/autosave_association_test.rb
@@ -12,6 +12,7 @@ require 'models/reader'
 require 'models/ship'
 require 'models/ship_part'
 require 'models/treasure'
+require 'models/company'
 
 class TestAutosaveAssociationsInGeneral < ActiveRecord::TestCase
   def test_autosave_should_be_a_valid_option_for_has_one
@@ -38,6 +39,8 @@ class TestAutosaveAssociationsInGeneral < ActiveRecord::TestCase
 end
 
 class TestDefaultAutosaveAssociationOnAHasOneAssociation < ActiveRecord::TestCase
+  fixtures :companies, :accounts
+
   def test_should_save_parent_but_not_invalid_child
     firm = Firm.new(:name => 'GlobalMegaCorp')
     assert firm.valid?
@@ -137,6 +140,8 @@ class TestDefaultAutosaveAssociationOnAHasOneAssociation < ActiveRecord::TestCas
 end
 
 class TestDefaultAutosaveAssociationOnABelongsToAssociation < ActiveRecord::TestCase
+  fixtures :companies
+
   def test_should_save_parent_but_not_invalid_child
     client = Client.new(:name => 'Joe (the Plumber)')
     assert client.valid?
@@ -920,4 +925,4 @@ class TestAutosaveAssociationOnAHasAndBelongsToManyAssociation < ActiveRecord::T
   end
 
   include AutosaveAssociationOnACollectionAssociationTests
-end
\ No newline at end of file
+end
diff --git a/activerecord/test/cases/named_scope_test.rb b/activerecord/test/cases/named_scope_test.rb
index 69d01d5..92fe48c 100644
--- a/activerecord/test/cases/named_scope_test.rb
+++ b/activerecord/test/cases/named_scope_test.rb
@@ -373,7 +373,7 @@ class NamedScopeTest < ActiveRecord::TestCase
   end
 end
 
-class DynamicScopeMatchTest < ActiveRecord::TestCase  
+class DynamicScopeMatchTest < ActiveRecord::TestCase
   def test_scoped_by_no_match
     assert_nil ActiveRecord::DynamicScopeMatch.match("not_scoped_at_all")
   end
@@ -387,6 +387,8 @@ class DynamicScopeMatchTest < ActiveRecord::TestCase
 end
 
 class DynamicScopeTest < ActiveRecord::TestCase
+  fixtures :posts
+
   def test_dynamic_scope
     assert_equal Post.scoped_by_author_id(1).find(1), Post.find(1)
     assert_equal Post.scoped_by_author_id_and_title(1, "Welcome to the weblog").first, Post.find(:first, :conditions => { :author_id => 1, :title => "Welcome to the weblog"})
-- 
1.5.5.1

