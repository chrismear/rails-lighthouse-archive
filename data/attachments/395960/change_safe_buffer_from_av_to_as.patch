From 8f289c82e6dfde27b8b5e8c0226e42ef8cc100a8 Mon Sep 17 00:00:00 2001
From: Santiago Pastorino <santiago@wyeworks.com>
Date: Mon, 1 Feb 2010 04:12:01 -0200
Subject: [PATCH] Deleted all references to ActionView::SafeBuffer in favor of ActiveSupport::SafeBuffer

---
 actionpack/lib/action_view.rb                      |    2 -
 .../lib/action_view/helpers/capture_helper.rb      |    2 +-
 .../lib/action_view/template/handlers/erb.rb       |    2 +-
 actionpack/test/template/safe_buffer_test.rb       |   41 --------------------
 activesupport/test/safe_buffer_test.rb             |   41 ++++++++++++++++++++
 5 files changed, 43 insertions(+), 45 deletions(-)
 delete mode 100644 actionpack/test/template/safe_buffer_test.rb
 create mode 100644 activesupport/test/safe_buffer_test.rb

diff --git a/actionpack/lib/action_view.rb b/actionpack/lib/action_view.rb
index 325338d..483be47 100644
--- a/actionpack/lib/action_view.rb
+++ b/actionpack/lib/action_view.rb
@@ -58,6 +58,4 @@ end
 require 'active_support/core_ext/string/output_safety'
 require 'action_view/base'
 
-ActionView::SafeBuffer = ActiveSupport::SafeBuffer
-
 I18n.load_path << "#{File.dirname(__FILE__)}/action_view/locale/en.yml"
diff --git a/actionpack/lib/action_view/helpers/capture_helper.rb b/actionpack/lib/action_view/helpers/capture_helper.rb
index b62df75..8c48300 100644
--- a/actionpack/lib/action_view/helpers/capture_helper.rb
+++ b/actionpack/lib/action_view/helpers/capture_helper.rb
@@ -143,7 +143,7 @@ module ActionView
       # Defaults to a new empty string.
       def with_output_buffer(buf = nil) #:nodoc:
         unless buf
-          buf = ActionView::SafeBuffer.new
+          buf = ActiveSupport::SafeBuffer.new
           buf.force_encoding(output_buffer.encoding) if buf.respond_to?(:force_encoding)
         end
         self.output_buffer, old_buffer = buf, output_buffer
diff --git a/actionpack/lib/action_view/template/handlers/erb.rb b/actionpack/lib/action_view/template/handlers/erb.rb
index 93a4315..51753aa 100644
--- a/actionpack/lib/action_view/template/handlers/erb.rb
+++ b/actionpack/lib/action_view/template/handlers/erb.rb
@@ -6,7 +6,7 @@ module ActionView
   module Template::Handlers
     class Erubis < ::Erubis::Eruby
       def add_preamble(src)
-        src << "@output_buffer = ActionView::SafeBuffer.new;"
+        src << "@output_buffer = ActiveSupport::SafeBuffer.new;"
       end
 
       def add_text(src, text)
diff --git a/actionpack/test/template/safe_buffer_test.rb b/actionpack/test/template/safe_buffer_test.rb
deleted file mode 100644
index 41a95e0..0000000
--- a/actionpack/test/template/safe_buffer_test.rb
+++ /dev/null
@@ -1,41 +0,0 @@
-require 'abstract_unit'
-
-class SafeBufferTest < ActionView::TestCase
-  def setup
-    @buffer = ActionView::SafeBuffer.new
-  end
-
-  test "Should look like a string" do
-    assert @buffer.is_a?(String)
-    assert_equal "", @buffer
-  end
-
-  test "Should escape a raw string which is passed to them" do
-    @buffer << "<script>"
-    assert_equal "&lt;script&gt;", @buffer
-  end
-
-  test "Should NOT escape a safe value passed to it" do
-    @buffer << "<script>".html_safe
-    assert_equal "<script>", @buffer
-  end
-
-  test "Should not mess with an innocuous string" do
-    @buffer << "Hello"
-    assert_equal "Hello", @buffer
-  end
-
-  test "Should not mess with a previously escape test" do
-    @buffer << ERB::Util.html_escape("<script>")
-    assert_equal "&lt;script&gt;", @buffer
-  end
-
-  test "Should be considered safe" do
-    assert @buffer.html_safe?
-  end
-
-  test "Should return a safe buffer when calling to_s" do
-    new_buffer = @buffer.to_s
-    assert_equal ActionView::SafeBuffer, new_buffer.class
-  end
-end
diff --git a/activesupport/test/safe_buffer_test.rb b/activesupport/test/safe_buffer_test.rb
new file mode 100644
index 0000000..bf61f9e
--- /dev/null
+++ b/activesupport/test/safe_buffer_test.rb
@@ -0,0 +1,41 @@
+require 'abstract_unit'
+
+class SafeBufferTest < ActiveSupport::TestCase
+  def setup
+    @buffer = ActiveSupport::SafeBuffer.new
+  end
+
+  test "Should look like a string" do
+    assert @buffer.is_a?(String)
+    assert_equal "", @buffer
+  end
+
+  test "Should escape a raw string which is passed to them" do
+    @buffer << "<script>"
+    assert_equal "&lt;script&gt;", @buffer
+  end
+
+  test "Should NOT escape a safe value passed to it" do
+    @buffer << "<script>".html_safe
+    assert_equal "<script>", @buffer
+  end
+
+  test "Should not mess with an innocuous string" do
+    @buffer << "Hello"
+    assert_equal "Hello", @buffer
+  end
+
+  test "Should not mess with a previously escape test" do
+    @buffer << ERB::Util.html_escape("<script>")
+    assert_equal "&lt;script&gt;", @buffer
+  end
+
+  test "Should be considered safe" do
+    assert @buffer.html_safe?
+  end
+
+  test "Should return a safe buffer when calling to_s" do
+    new_buffer = @buffer.to_s
+    assert_equal ActiveSupport::SafeBuffer, new_buffer.class
+  end
+end
-- 
1.6.5

