From 6ac5c800322f7ba58df7e033d770893beab2ae28 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Guillermo=20=C3=81lvarez?= <guillermo@cientifico.net>
Date: Mon, 12 Jan 2009 13:57:27 +0100
Subject: [PATCH] Now explicit serializated objects retuns new objects when nil

class Topic < AR::Base
  serialize :content
  serialize :preferences, Hash
  serialize :properties, OpenStruct
end

t = Topic.new
t.content.nil? => #true
t.preferences[:sex] = true
t.properties.rails = 3
---
 .../lib/active_record/attribute_methods.rb         |    1 +
 activerecord/test/cases/base_test.rb               |   15 +++++++++++++++
 2 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/activerecord/lib/active_record/attribute_methods.rb b/activerecord/lib/active_record/attribute_methods.rb
index 177d156..d0a018c 100644
--- a/activerecord/lib/active_record/attribute_methods.rb
+++ b/activerecord/lib/active_record/attribute_methods.rb
@@ -292,6 +292,7 @@ module ActiveRecord
     # Returns the unserialized object of the attribute.
     def unserialize_attribute(attr_name)
       unserialized_object = object_from_yaml(@attributes[attr_name])
+      unserialized_object ||= self.class.serialized_attributes[attr_name].new unless self.class.serialized_attributes[attr_name]==Object
 
       if unserialized_object.is_a?(self.class.serialized_attributes[attr_name]) || unserialized_object.nil?
         @attributes.frozen? ? unserialized_object : @attributes[attr_name] = unserialized_object
diff --git a/activerecord/test/cases/base_test.rb b/activerecord/test/cases/base_test.rb
index 0f03dae..f7ea39a 100755
--- a/activerecord/test/cases/base_test.rb
+++ b/activerecord/test/cases/base_test.rb
@@ -1464,7 +1464,22 @@ class BasicsTest < ActiveRecord::TestCase
   ensure
     Topic.serialize(:content)
   end
+  
+  def test_serialized_default_class
+    Topic.serialize(:content, Hash)
+    topic = Topic.new
+    assert topic.save
+    assert_equal(Topic.new.content.class, Hash)
+  ensure
+    Topic.serialize(:content)
+  end
 
+  def test_serialized_no_default_class_for_object
+    topic = Topic.new
+    assert topic.save
+    assert_nil topic.content
+  end
+  
   def test_quote
     author_name = "\\ \001 ' \n \\n \""
     topic = Topic.create('author_name' => author_name)
-- 
1.6.0.2

