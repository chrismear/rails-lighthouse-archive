<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-19T09:28:13+00:00</created-at>
  <creator-id type="integer">22106</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5470</number>
  <permalink>inconsistent-order-of-columns-in-sql-where-clause-in-dynamic-finders-and-scopes</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>300rc2 activerecord</tag>
  <title>Inconsistent order of columns in SQL WHERE clause in dynamic finders and scopes</title>
  <updated-at type="datetime">2011-02-19T09:28:13+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">8</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Szymon Nowak</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5470</url>
  <priority-name>Low</priority-name>
  <original-body>There's a minor problem with the way SQL is generated.

@@@ ruby
Venue.find_all_by_city_id_and_category_id(1, 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;category_id&quot; = 1) AND (&quot;venues&quot;.&quot;city_id&quot; = 1)

Venue.where(:city_id =&gt; 1, :category_id =&gt; 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;category_id&quot; = 1) AND (&quot;venues&quot;.&quot;city_id&quot; = 1)

Venue.where(:city_id =&gt; 1).where(:category_id =&gt; 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;city_id&quot; = 1) AND (&quot;venues&quot;.&quot;category_id&quot; = 1)
@@@

I think it should always keep the order of the columns in the generated SQL, otherwise it becomes tricky to properly setup multicolumn database indexes.

BTW. Not sure if it matters, but I'm using PostgreSQL.</original-body>
  <latest-body>There's a minor problem with the way SQL is generated.

@@@ ruby
Venue.find_all_by_city_id_and_category_id(1, 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;category_id&quot; = 1) AND (&quot;venues&quot;.&quot;city_id&quot; = 1)

Venue.where(:city_id =&gt; 1, :category_id =&gt; 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;category_id&quot; = 1) AND (&quot;venues&quot;.&quot;city_id&quot; = 1)

Venue.where(:city_id =&gt; 1).where(:category_id =&gt; 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;city_id&quot; = 1) AND (&quot;venues&quot;.&quot;category_id&quot; = 1)
@@@

I think it should always keep the order of the columns in the generated SQL, otherwise it becomes tricky to properly setup multicolumn database indexes.

BTW. Not sure if it matters, but I'm using PostgreSQL.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;There's a minor problem with the way SQL is generated.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;Venue.find_all_by_city_id_and_category_id(1, 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;category_id&quot; = 1) AND (&quot;venues&quot;.&quot;city_id&quot; = 1)

Venue.where(:city_id =&amp;gt; 1, :category_id =&amp;gt; 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;category_id&quot; = 1) AND (&quot;venues&quot;.&quot;city_id&quot; = 1)

Venue.where(:city_id =&amp;gt; 1).where(:category_id =&amp;gt; 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;city_id&quot; = 1) AND (&quot;venues&quot;.&quot;category_id&quot; = 1)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think it should always keep the order of the columns in the
generated SQL, otherwise it becomes tricky to properly setup
multicolumn database indexes.&lt;/p&gt;
&lt;p&gt;BTW. Not sure if it matters, but I'm using PostgreSQL.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There's a minor problem with the way SQL is generated.

@@@ ruby
Venue.find_all_by_city_id_and_category_id(1, 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;category_id&quot; = 1) AND (&quot;venues&quot;.&quot;city_id&quot; = 1)

Venue.where(:city_id =&gt; 1, :category_id =&gt; 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;category_id&quot; = 1) AND (&quot;venues&quot;.&quot;city_id&quot; = 1)

Venue.where(:city_id =&gt; 1).where(:category_id =&gt; 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;city_id&quot; = 1) AND (&quot;venues&quot;.&quot;category_id&quot; = 1)
@@@

I think it should always keep the order of the columns in the generated SQL, otherwise it becomes tricky to properly setup multicolumn database indexes.

BTW. Not sure if it matters, but I'm using PostgreSQL.</body>
      <body-html>&lt;div&gt;&lt;p&gt;There's a minor problem with the way SQL is generated.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;Venue.find_all_by_city_id_and_category_id(1, 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;category_id&quot; = 1) AND (&quot;venues&quot;.&quot;city_id&quot; = 1)

Venue.where(:city_id =&amp;gt; 1, :category_id =&amp;gt; 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;category_id&quot; = 1) AND (&quot;venues&quot;.&quot;city_id&quot; = 1)

Venue.where(:city_id =&amp;gt; 1).where(:category_id =&amp;gt; 1)
SELECT &quot;venues&quot;.* FROM &quot;venues&quot; WHERE (&quot;venues&quot;.&quot;city_id&quot; = 1) AND (&quot;venues&quot;.&quot;category_id&quot; = 1)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think it should always keep the order of the columns in the
generated SQL, otherwise it becomes tricky to properly setup
multicolumn database indexes.&lt;/p&gt;
&lt;p&gt;BTW. Not sure if it matters, but I'm using PostgreSQL.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T08:17:51+01:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5470</number>
      <permalink>inconsistent-order-of-columns-in-sql-where-clause-in-dynamic-finders-and-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0.0.rc2 activerecord</tag>
      <title>Inconsistent order of columns in SQL WHERE clause in dynamic finders and scopes</title>
      <updated-at type="datetime">2010-08-27T08:19:08+01:00</updated-at>
      <user-id type="integer">22106</user-id>
      <version type="integer">1</version>
      <user-name>Szymon Nowak</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5470</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If the last example were to change to category_id and city_id I'd consider that a bug - I don't want ActiveRecord reordering the sequence of where that I've applied.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If the last example were to change to category_id and city_id
I'd consider that a bug - I don't want ActiveRecord reordering the
sequence of where that I've applied.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T09:20:34+01:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5470</number>
      <permalink>inconsistent-order-of-columns-in-sql-where-clause-in-dynamic-finders-and-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0.0.rc2 activerecord</tag>
      <title>Inconsistent order of columns in SQL WHERE clause in dynamic finders and scopes</title>
      <updated-at type="datetime">2010-08-27T09:20:38+01:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5470</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Me too. I think that the first 2 examples should generate SQL as in the last one.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Me too. I think that the first 2 examples should generate SQL as
in the last one.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T09:25:54+01:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5470</number>
      <permalink>inconsistent-order-of-columns-in-sql-where-clause-in-dynamic-finders-and-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0.0.rc2 activerecord</tag>
      <title>Inconsistent order of columns in SQL WHERE clause in dynamic finders and scopes</title>
      <updated-at type="datetime">2010-08-27T09:25:57+01:00</updated-at>
      <user-id type="integer">22106</user-id>
      <version type="integer">3</version>
      <user-name>Szymon Nowak</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5470</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The middle one is impossible to fix since you're passing a hash which by definition is unordered. This best that can be done in this case is to sort predictably, which it appears to do alphabetically. The first one is essentially the same as the second one since that is what it called eventually after the name has been split up into the constituent parts.

You could fix the first one by changing find_by_attributes in ActiveRecord::FinderMethods to chain calls to where rather building a hash and then calling where but there may be a performance impact so that'd need to be checked.

Why not just create a named scope and exclusively use that?

@@@
  scope :find_by_city_then_category, lambda { |city, category| where(:city_id =&gt; city).where(:category_id =&gt; category) }
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;The middle one is impossible to fix since you're passing a hash
which by definition is unordered. This best that can be done in
this case is to sort predictably, which it appears to do
alphabetically. The first one is essentially the same as the second
one since that is what it called eventually after the name has been
split up into the constituent parts.&lt;/p&gt;
&lt;p&gt;You could fix the first one by changing find_by_attributes in
ActiveRecord::FinderMethods to chain calls to where rather building
a hash and then calling where but there may be a performance impact
so that'd need to be checked.&lt;/p&gt;
&lt;p&gt;Why not just create a named scope and exclusively use that?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  scope :find_by_city_then_category, lambda { |city, category| where(:city_id =&amp;gt; city).where(:category_id =&amp;gt; category) }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T09:48:01+01:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5470</number>
      <permalink>inconsistent-order-of-columns-in-sql-where-clause-in-dynamic-finders-and-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0.0.rc2 activerecord</tag>
      <title>Inconsistent order of columns in SQL WHERE clause in dynamic finders and scopes</title>
      <updated-at type="datetime">2010-08-27T09:48:04+01:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">4</version>
      <user-name>Andrew White</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5470</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It turns out that all methods generate the same query on Ruby 1.9 where hashes are ordered. I'm using 1.8.7 and that's why it generates different queries.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It turns out that all methods generate the same query on Ruby
1.9 where hashes are ordered. I'm using 1.8.7 and that's why it
generates different queries.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T10:12:18+01:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5470</number>
      <permalink>inconsistent-order-of-columns-in-sql-where-clause-in-dynamic-finders-and-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0.0.rc2 activerecord</tag>
      <title>Inconsistent order of columns in SQL WHERE clause in dynamic finders and scopes</title>
      <updated-at type="datetime">2010-08-27T10:12:21+01:00</updated-at>
      <user-id type="integer">22106</user-id>
      <version type="integer">5</version>
      <user-name>Szymon Nowak</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5470</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Instead of 

@@@ ruby
Venue.find_all_by_city_id_and_category_id(1, 1)
@@@

you can also do

@@@ ruby
Venue.scoped_by_city_id_and_category_id(1, 1)
@@@

The advantage is that scoped_by creates a method after each time it is called. So next time method_missing will not be called and performance will be better. find_by does not do anything like that and would continue to hit method_missing every single time.

Not directly related to this ticket but just wanted to let people know about it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Instead of&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Venue.find_all_by_city_id_and_category_id(1, 1)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;you can also do&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Venue.scoped_by_city_id_and_category_id(1, 1)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The advantage is that scoped_by creates a method after each time
it is called. So next time method_missing will not be called and
performance will be better. find_by does not do anything like that
and would continue to hit method_missing every single time.&lt;/p&gt;
&lt;p&gt;Not directly related to this ticket but just wanted to let
people know about it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-27T14:50:25+01:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5470</number>
      <permalink>inconsistent-order-of-columns-in-sql-where-clause-in-dynamic-finders-and-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0.0.rc2 activerecord</tag>
      <title>Inconsistent order of columns in SQL WHERE clause in dynamic finders and scopes</title>
      <updated-at type="datetime">2010-08-27T14:50:26+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5470</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:33:18+00:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 3.0.0.rc2 activerecord
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5470</number>
      <permalink>inconsistent-order-of-columns-in-sql-where-clause-in-dynamic-finders-and-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>300rc2 activerecord</tag>
      <title>Inconsistent order of columns in SQL WHERE clause in dynamic finders and scopes</title>
      <updated-at type="datetime">2011-02-02T17:01:17+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5470</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:33:19+00:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5470</number>
      <permalink>inconsistent-order-of-columns-in-sql-where-clause-in-dynamic-finders-and-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>300rc2 activerecord</tag>
      <title>Inconsistent order of columns in SQL WHERE clause in dynamic finders and scopes</title>
      <updated-at type="datetime">2011-02-02T17:01:53+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">8</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5470</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T00:31:56+00:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5470</number>
      <permalink>inconsistent-order-of-columns-in-sql-where-clause-in-dynamic-finders-and-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>300rc2 activerecord</tag>
      <title>Inconsistent order of columns in SQL WHERE clause in dynamic finders and scopes</title>
      <updated-at type="datetime">2011-02-19T09:28:13+00:00</updated-at>
      <user-id type="integer">137759</user-id>
      <version type="integer">9</version>
      <user-name>mklo</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5470</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
