<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-17T00:58:10+00:00</created-at>
  <creator-id type="integer">19965</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2262</number>
  <permalink>associations-are-picking-the-wrong-class</permalink>
  <priority type="integer">1440</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord associations patch small tests</tag>
  <title>Associations are picking the wrong class</title>
  <updated-at type="datetime">2009-05-08T00:11:46+01:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">17</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>Jos&#233; Valim</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This is being discussed on the mailing list:

http://groups.google.com/group/rubyonrails-core/browse_thread/thread/37e25977536c65a2

### Problem ###

@@@ ruby
  class User &lt; ActiveRecord::Base
  end

  class Admin::User &lt; ActiveRecord::Base
  end

  class Account &lt; ActiveRecord::Base
    belongs_to :user
  end
@@@

When I was calling Account.new.build_user, it was trying to create a
new Admin::User because the default class_name is just &quot;User&quot;.

### Where? ###

Rails 2.3.2

### Why this is a problem? ###

Let's suppose I'm building an application (without using namespaced models at all) and then I install a plugin that has Plugin::User. My associations will start to pick Plugin::User, and this is really hard to track down.

### Solution? ###

I propose a solution where all associations :class_name is, by default, namespaced. So:

@@@ ruby
  # have default class_name of ::User
  class Account &lt; ActiveRecord::Base; belongs_to :user; end

  # have default class_name of ::Admin::User
  class Admin::Account &lt; ActiveRecord::Base; belongs_to :user; end
@@@

### Compatibility? ###

It will break apps that are relying in this wrong behavior. The good point is that the error will be raised when the application starts (can't find association error). The way it's now, takes quite sometime for you to discover that Account was trying to build a Admin::User instead of User.</original-body>
  <latest-body>This is being discussed on the mailing list:

http://groups.google.com/group/rubyonrails-core/browse_thread/thread/37e25977536c65a2

### Problem ###

@@@ ruby
  class User &lt; ActiveRecord::Base
  end

  class Admin::User &lt; ActiveRecord::Base
  end

  class Account &lt; ActiveRecord::Base
    belongs_to :user
  end
@@@

When I was calling Account.new.build_user, it was trying to create a
new Admin::User because the default class_name is just &quot;User&quot;.

### Where? ###

Rails 2.3.2

### Why this is a problem? ###

Let's suppose I'm building an application (without using namespaced models at all) and then I install a plugin that has Plugin::User. My associations will start to pick Plugin::User, and this is really hard to track down.

### Solution? ###

I propose a solution where all associations :class_name is, by default, namespaced. So:

@@@ ruby
  # have default class_name of ::User
  class Account &lt; ActiveRecord::Base; belongs_to :user; end

  # have default class_name of ::Admin::User
  class Admin::Account &lt; ActiveRecord::Base; belongs_to :user; end
@@@

### Compatibility? ###

It will break apps that are relying in this wrong behavior. The good point is that the error will be raised when the application starts (can't find association error). The way it's now, takes quite sometime for you to discover that Account was trying to build a Admin::User instead of User.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is being discussed on the mailing list:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/37e25977536c65a2&quot;&gt;
http://groups.google.com/group/r...&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Problem&lt;/h3&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  class User &amp;lt; ActiveRecord::Base
  end

  class Admin::User &amp;lt; ActiveRecord::Base
  end

  class Account &amp;lt; ActiveRecord::Base
    belongs_to :user
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I was calling Account.new.build_user, it was trying to
create a new Admin::User because the default class_name is just
&quot;User&quot;.&lt;/p&gt;
&lt;h3&gt;Where?&lt;/h3&gt;
&lt;p&gt;Rails 2.3.2&lt;/p&gt;
&lt;h3&gt;Why this is a problem?&lt;/h3&gt;
&lt;p&gt;Let's suppose I'm building an application (without using
namespaced models at all) and then I install a plugin that has
Plugin::User. My associations will start to pick Plugin::User, and
this is really hard to track down.&lt;/p&gt;
&lt;h3&gt;Solution?&lt;/h3&gt;
&lt;p&gt;I propose a solution where all associations :class_name is, by
default, namespaced. So:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  # have default class_name of ::User
  class Account &amp;lt; ActiveRecord::Base; belongs_to :user; end

  # have default class_name of ::Admin::User
  class Admin::Account &amp;lt; ActiveRecord::Base; belongs_to :user; end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Compatibility?&lt;/h3&gt;
&lt;p&gt;It will break apps that are relying in this wrong behavior. The
good point is that the error will be raised when the application
starts (can't find association error). The way it's now, takes
quite sometime for you to discover that Account was trying to build
a Admin::User instead of User.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>### UPDATE ###

After long discussion, this ticket is no longer valid. Some one from core just mark it as invalid please.

This is being discussed on the mailing list:

http://groups.google.com/group/rubyonrails-core/browse_thread/thread/37e25977536c65a2

### Problem ###

@@@ ruby
  class User &lt; ActiveRecord::Base
  end

  class Admin::User &lt; ActiveRecord::Base
  end

  class Account &lt; ActiveRecord::Base
    belongs_to :user
  end
@@@

When I was calling Account.new.build_user, it was trying to create a
new Admin::User and not an ::User, since the default class_name is just &quot;User&quot;.

### Where? ###

Rails 2.3.2

### Why this is a problem? ###

Let's suppose I'm building an application (without using namespaced models at all) and then I install a plugin that has Plugin::User. My associations will start to pick Plugin::User, and this is really hard to track down.

### Solution? ###

I propose a solution where all associations :class_name is, by default, namespaced. So:

@@@ ruby
  # have default class_name of ::User
  class Account &lt; ActiveRecord::Base; belongs_to :user; end

  # have default class_name of ::Admin::User
  class Admin::Account &lt; ActiveRecord::Base; belongs_to :user; end
@@@

### Compatibility? ###

It will break apps that are relying in this wrong behavior. The good point is that the error will be raised when the application starts (can't find association error). The way it's now, takes quite sometime for you to discover that Account was trying to build a Admin::User instead of User.</body>
      <body-html>&lt;div&gt;&lt;h3&gt;UPDATE&lt;/h3&gt;
&lt;p&gt;After long discussion, this ticket is no longer valid. Some one
from core just mark it as invalid please.&lt;/p&gt;
&lt;p&gt;This is being discussed on the mailing list:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/37e25977536c65a2&quot;&gt;
http://groups.google.com/group/r...&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Problem&lt;/h3&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  class User &amp;lt; ActiveRecord::Base
  end

  class Admin::User &amp;lt; ActiveRecord::Base
  end

  class Account &amp;lt; ActiveRecord::Base
    belongs_to :user
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I was calling Account.new.build_user, it was trying to
create a new Admin::User and not an ::User, since the default
class_name is just &quot;User&quot;.&lt;/p&gt;
&lt;h3&gt;Where?&lt;/h3&gt;
&lt;p&gt;Rails 2.3.2&lt;/p&gt;
&lt;h3&gt;Why this is a problem?&lt;/h3&gt;
&lt;p&gt;Let's suppose I'm building an application (without using
namespaced models at all) and then I install a plugin that has
Plugin::User. My associations will start to pick Plugin::User, and
this is really hard to track down.&lt;/p&gt;
&lt;h3&gt;Solution?&lt;/h3&gt;
&lt;p&gt;I propose a solution where all associations :class_name is, by
default, namespaced. So:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  # have default class_name of ::User
  class Account &amp;lt; ActiveRecord::Base; belongs_to :user; end

  # have default class_name of ::Admin::User
  class Admin::Account &amp;lt; ActiveRecord::Base; belongs_to :user; end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Compatibility?&lt;/h3&gt;
&lt;p&gt;It will break apps that are relying in this wrong behavior. The
good point is that the error will be raised when the application
starts (can't find association error). The way it's now, takes
quite sometime for you to discover that Account was trying to build
a Admin::User instead of User.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T00:58:10+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title> Associations are picking the wrong class </title>
      <updated-at type="datetime">2009-03-18T13:15:39+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">1</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T03:14:11+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title> Associations are picking the wrong class </title>
      <updated-at type="datetime">2009-03-17T03:14:16+00:00</updated-at>
      <user-id type="integer">19985</user-id>
      <version type="integer">2</version>
      <user-name>Hugo Barauna</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I can't replicate this in a new 2.3.2 application even if I create the `Admin::User` model in a plugin. I can nearly replicate the opposite with `Admin::Account`, but what happens is also depends on the `store_full_sti_class` setting along with the loaded states of the `User` and `Admin::User` models.

Historically STI models were stored with a demodulized class name in the type column and the `compute_type` method was used to restore the namespace when loading the constant. This had the side-effect of making namespaced associated models working as well. However now that the STI class is stored in full the `type_name_with_module` method just returns the default class name unmodified and reverts to the standard Rails constant loading mechanism.

So what happens here is that when `store_full_sti_class` is false the `type_name_with_module` method prefixes the name with `Admin` and `Admin::User` is found successfully. If `store_full_sti_class` is true and neither model is loaded then an `Admin::User` instance is returned. If the `Admin::User` model is loaded beforehand then either an exception is raised if the `User` model is not loaded or an instance of `User` is returned if it is loaded.

The patch does fix this specific problem but I think the real bug is actually in `AS::Dependencies.load_missing_constant`. Rather than raising the exception it should just return the already defined constant as the test name for it seems to indicate that it's there to prevent double loading of constants. Changing that only breaks one test and that's checking to see if the exception is raised.

Attached is a patch that makes this change.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can't replicate this in a new 2.3.2 application even if I
create the &lt;code&gt;Admin::User&lt;/code&gt; model in a plugin. I can nearly
replicate the opposite with &lt;code&gt;Admin::Account&lt;/code&gt;, but what
happens is also depends on the &lt;code&gt;store_full_sti_class&lt;/code&gt;
setting along with the loaded states of the &lt;code&gt;User&lt;/code&gt; and
&lt;code&gt;Admin::User&lt;/code&gt; models.&lt;/p&gt;
&lt;p&gt;Historically STI models were stored with a demodulized class
name in the type column and the &lt;code&gt;compute_type&lt;/code&gt; method
was used to restore the namespace when loading the constant. This
had the side-effect of making namespaced associated models working
as well. However now that the STI class is stored in full the
&lt;code&gt;type_name_with_module&lt;/code&gt; method just returns the default
class name unmodified and reverts to the standard Rails constant
loading mechanism.&lt;/p&gt;
&lt;p&gt;So what happens here is that when
&lt;code&gt;store_full_sti_class&lt;/code&gt; is false the
&lt;code&gt;type_name_with_module&lt;/code&gt; method prefixes the name with
&lt;code&gt;Admin&lt;/code&gt; and &lt;code&gt;Admin::User&lt;/code&gt; is found
successfully. If &lt;code&gt;store_full_sti_class&lt;/code&gt; is true and
neither model is loaded then an &lt;code&gt;Admin::User&lt;/code&gt; instance
is returned. If the &lt;code&gt;Admin::User&lt;/code&gt; model is loaded
beforehand then either an exception is raised if the
&lt;code&gt;User&lt;/code&gt; model is not loaded or an instance of
&lt;code&gt;User&lt;/code&gt; is returned if it is loaded.&lt;/p&gt;
&lt;p&gt;The patch does fix this specific problem but I think the real
bug is actually in
&lt;code&gt;AS::Dependencies.load_missing_constant&lt;/code&gt;. Rather than
raising the exception it should just return the already defined
constant as the test name for it seems to indicate that it's there
to prevent double loading of constants. Changing that only breaks
one test and that's checking to see if the exception is raised.&lt;/p&gt;
&lt;p&gt;Attached is a patch that makes this change.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T15:10:48+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- 
:title: &quot; Associations are picking the wrong class &quot;
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-17T15:10:50+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">3</version>
      <user-name>Andrew White</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Andrew, I understand your problem but you're solving the other way: why Admin::Account is loading &quot;Admin::User&quot; instead of &quot;User&quot;.

My problem is Account loading &quot;Admin::User&quot; instead of &quot;User&quot;. I've just tried your patch here and it hasn't fixed it.

Who is returning the wrong class is *class_eval*. The backtrace would be: reflections call *compute_type* with &quot;User&quot;, *compute_type* calls *type_name_with_module* with &quot;User&quot; and returns &quot;User&quot;, and then *class_eval* is called and picks up &quot;Admin::User&quot; instead of &quot;User&quot;.

I think this problem is strictly related with namespaces because both &quot;Admin::User&quot; and &quot;User&quot; are loaded before the error occurs (so can I discard this an AS::Dependencies bug?).

&quot;I can't replicate this in a new 2.3.2 application even if I create the Admin::User model in a plugin.&quot;

I don't think this is an easy bug to reproduce, as you said depends who is loaded and who is not, but it's an easy one to understand why. If we say to ruby that I want ::User, it will load the right one.

However, your discussion just pointed me that we could solve the problem making *type_name_with_module* always returns &quot;::User&quot; or &quot;::Admin::User&quot;.

But it doesn't change the fact that associations should default to a namespaced class, and thus, I think the patch I propose is still needed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Andrew, I understand your problem but you're solving the other
way: why Admin::Account is loading &quot;Admin::User&quot; instead of
&quot;User&quot;.&lt;/p&gt;
&lt;p&gt;My problem is Account loading &quot;Admin::User&quot; instead of &quot;User&quot;.
I've just tried your patch here and it hasn't fixed it.&lt;/p&gt;
&lt;p&gt;Who is returning the wrong class is &lt;em&gt;class_eval&lt;/em&gt;. The
backtrace would be: reflections call &lt;em&gt;compute_type&lt;/em&gt; with
&quot;User&quot;, &lt;em&gt;compute_type&lt;/em&gt; calls &lt;em&gt;type_name_with_module&lt;/em&gt;
with &quot;User&quot; and returns &quot;User&quot;, and then &lt;em&gt;class_eval&lt;/em&gt; is
called and picks up &quot;Admin::User&quot; instead of &quot;User&quot;.&lt;/p&gt;
&lt;p&gt;I think this problem is strictly related with namespaces because
both &quot;Admin::User&quot; and &quot;User&quot; are loaded before the error occurs
(so can I discard this an AS::Dependencies bug?).&lt;/p&gt;
&lt;p&gt;&quot;I can't replicate this in a new 2.3.2 application even if I
create the Admin::User model in a plugin.&quot;&lt;/p&gt;
&lt;p&gt;I don't think this is an easy bug to reproduce, as you said
depends who is loaded and who is not, but it's an easy one to
understand why. If we say to ruby that I want ::User, it will load
the right one.&lt;/p&gt;
&lt;p&gt;However, your discussion just pointed me that we could solve the
problem making &lt;em&gt;type_name_with_module&lt;/em&gt; always returns
&quot;::User&quot; or &quot;::Admin::User&quot;.&lt;/p&gt;
&lt;p&gt;But it doesn't change the fact that associations should default
to a namespaced class, and thus, I think the patch I propose is
still needed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T15:57:22+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-17T15:57:25+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">4</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Jos&#233;, I just don't why it should be getting Admin::User instead of User as the constant lookup should Account::User and then Object::User - why would it go looking in the Admin namespace?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jos&amp;eacute;, I just don't why it should be getting Admin::User
instead of User as the constant lookup should Account::User and
then Object::User - why would it go looking in the Admin
namespace?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T16:37:06+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-17T16:37:10+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">5</version>
      <user-name>Andrew White</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>There is one way I can reproduce it and that's by defining the User constant within Account, e.g:

@@@ ruby
class Account &lt; ActiveRecord::Base
  User = Admin::User
  belongs_to :user
end
@@@

Is it possible that something similar is happening in your code?</body>
      <body-html>&lt;div&gt;&lt;p&gt;There is one way I can reproduce it and that's by defining the
User constant within Account, e.g:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Account &amp;lt; ActiveRecord::Base
  User = Admin::User
  belongs_to :user
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is it possible that something similar is happening in your
code?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T16:53:40+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-17T16:53:45+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">6</version>
      <user-name>Andrew White</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I don't have a clue, debuggers don't go inside class_eval. :) But I agree that it's totally strange.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't have a clue, debuggers don't go inside class_eval. :)
But I agree that it's totally strange.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T16:54:39+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-17T16:54:44+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">7</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Nops.
@@@ ruby
User == Admin::User #=&gt; false
@@@
Have you tried with Admin::User being a module?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Nops.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
User == Admin::User #=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Have you tried with Admin::User being a module?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T17:23:12+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-17T17:23:15+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">8</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I just cannot reproduce - I've tried Admin being both a AR model and just a module. I've tried both methods in a plugin and in the main application. I've also tried Admin::User as a module but that didn't make any difference either.

What happens if you tweak the class_eval to be parent.class_eval in compute_type? Also what's the value of `store_full_sti_class`</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just cannot reproduce - I've tried Admin being both a AR model
and just a module. I've tried both methods in a plugin and in the
main application. I've also tried Admin::User as a module but that
didn't make any difference either.&lt;/p&gt;
&lt;p&gt;What happens if you tweak the class_eval to be parent.class_eval
in compute_type? Also what's the value of
&lt;code&gt;store_full_sti_class&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T17:37:37+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-17T17:37:42+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">9</version>
      <user-name>Andrew White</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I'm afraid this can't be easily reproduced. The plugin I'm using that showed me this conflict is Typus (http://github.com/fesplugas/typus).

In this case, Typus::User is a module and it's included in ActiveRecord::Base:

@@@ ruby
  module Typus
    module User
    end
  end

  ActiveRecord::Base.send :include, Typus::User
@@@

However I've cut down their code in order to have just the lines above, and the problem couldn't be reproduced.

Anyway, with this bug or not, **association are still wrong**. It should have a default class name of ::Admin::User if I'm declaring it inside ::Admin::Account, and default class name of ::User if I'm declaring it on ::Account.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm afraid this can't be easily reproduced. The plugin I'm using
that showed me this conflict is Typus (&lt;a href=&quot;http://github.com/fesplugas/typus).%3C/p&quot;&gt;http://github.com/fesplugas/typu...&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;In this case, Typus::User is a module and it's included in
ActiveRecord::Base:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  module Typus
    module User
    end
  end

  ActiveRecord::Base.send :include, Typus::User
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However I've cut down their code in order to have just the lines
above, and the problem couldn't be reproduced.&lt;/p&gt;
&lt;p&gt;Anyway, with this bug or not, &lt;strong&gt;association are still
wrong&lt;/strong&gt;. It should have a default class name of
::Admin::User if I'm declaring it inside ::Admin::Account, and
default class name of ::User if I'm declaring it on ::Account.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T17:42:11+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-17T17:42:13+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">10</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>store_full_sti_class is true. Calling parent.class_eval in **compute_type** works, but in my case the parent is **Object**.

However, I cannot supply a patch with parent.class_eval because this would make namespaces break, since we would be calling Admin.class_eval(Admin::User).

On the other hand, a possible solution could be calling Object.class_eval(User), which is the same as class_eval(::User). This is likely to don't break anything because type_name_with_module is already responsible to return a namespaced class.

So I propose: Object.class_eval in **compute_type** AND make associations namespaced by default, but without '::' at the beginning, which looks strange.

Andrew, your patch is still needed?</body>
      <body-html>&lt;div&gt;&lt;p&gt;store_full_sti_class is true. Calling parent.class_eval in
&lt;strong&gt;compute_type&lt;/strong&gt; works, but in my case the parent is
&lt;strong&gt;Object&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;However, I cannot supply a patch with parent.class_eval because
this would make namespaces break, since we would be calling
Admin.class_eval(Admin::User).&lt;/p&gt;
&lt;p&gt;On the other hand, a possible solution could be calling
Object.class_eval(User), which is the same as class_eval(::User).
This is likely to don't break anything because
type_name_with_module is already responsible to return a namespaced
class.&lt;/p&gt;
&lt;p&gt;So I propose: Object.class_eval in &lt;strong&gt;compute_type&lt;/strong&gt;
AND make associations namespaced by default, but without '::' at
the beginning, which looks strange.&lt;/p&gt;
&lt;p&gt;Andrew, your patch is still needed?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T18:00:12+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-17T18:00:16+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">11</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Jos&#233;, I've tracked down your problem with Typus. Typus includes Typus::User in AR::Base so all AR models have a constant User, e.g: Account::User and even User::User is defined. This is what compute_type is finding.

Your patch works around the problem by starting the search one level up, avoiding the match with Account::User. Unfortunately your patch would break one of my apps where I have the following:

@@@ ruby
class DeliveryMethod &lt; ActiveRecord::Base
  class PriceBand &lt; ActiveRecord::Base; end

  has_many :price_bands
end
@@@

If you modify your patch so that the search starts at the same level then you'll still get the same problem with Account::User matching. The solution lies with Typus having a less common name for its User module - should be a simple fix.

As for my patch - I think it probably does still need to be applied but I'll open a new ticket.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jos&amp;eacute;, I've tracked down your problem with Typus. Typus
includes Typus::User in AR::Base so all AR models have a constant
User, e.g: Account::User and even User::User is defined. This is
what compute_type is finding.&lt;/p&gt;
&lt;p&gt;Your patch works around the problem by starting the search one
level up, avoiding the match with Account::User. Unfortunately your
patch would break one of my apps where I have the following:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class DeliveryMethod &amp;lt; ActiveRecord::Base
  class PriceBand &amp;lt; ActiveRecord::Base; end

  has_many :price_bands
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you modify your patch so that the search starts at the same
level then you'll still get the same problem with Account::User
matching. The solution lies with Typus having a less common name
for its User module - should be a simple fix.&lt;/p&gt;
&lt;p&gt;As for my patch - I think it probably does still need to be
applied but I'll open a new ticket.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-18T08:14:17+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-18T08:14:20+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">12</version>
      <user-name>Andrew White</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Andrew, I see you case.

However, I still think that a simple patch should be applied.

At least one that makes Admin::Account when belongs_to User have a default class name of Admin::User (without the '::'). This wouldn't break your application, it wouldn't fix my problem, but I think it's needed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Andrew, I see you case.&lt;/p&gt;
&lt;p&gt;However, I still think that a simple patch should be
applied.&lt;/p&gt;
&lt;p&gt;At least one that makes Admin::Account when belongs_to User have
a default class name of Admin::User (without the '::'). This
wouldn't break your application, it wouldn't fix my problem, but I
think it's needed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-18T08:43:13+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-18T08:43:15+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">13</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Jos&#233;, that's essentially what happens at the moment - the string &quot;User&quot; is evaluated within the Admin class scope so that if Admin::User is defined it will find it first before looking elsewhere.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jos&amp;eacute;, that's essentially what happens at the moment - the
string &quot;User&quot; is evaluated within the Admin class scope so that if
Admin::User is defined it will find it first before looking
elsewhere.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-18T09:47:24+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-18T09:47:27+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">14</version>
      <user-name>Andrew White</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sorry, slightly wrong on the last comment. What actually happens is the following lookup:

1. Admin::Account::User
2. Admin::User
3. User

What causes this to fail at the moment is the fact that load_missing_constant is called after not finding Admin::Account::User and the exception is raised if the Admin::User has been previously loaded. This is what my patch fixes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry, slightly wrong on the last comment. What actually happens
is the following lookup:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Admin::Account::User&lt;/li&gt;
&lt;li&gt;Admin::User&lt;/li&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What causes this to fail at the moment is the fact that
load_missing_constant is called after not finding
Admin::Account::User and the exception is raised if the Admin::User
has been previously loaded. This is what my patch fixes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-18T09:53:08+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-18T09:53:11+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">15</version>
      <user-name>Andrew White</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I just updated the ticket. Someone from core might close this one soon.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just updated the ticket. Someone from core might close this
one soon.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-18T13:17:16+00:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-03-18T13:17:22+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">16</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-08T00:11:40+01:00</created-at>
      <creator-id type="integer">19965</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2262</number>
      <permalink>associations-are-picking-the-wrong-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord associations patch small tests</tag>
      <title>Associations are picking the wrong class</title>
      <updated-at type="datetime">2009-05-08T00:11:46+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">17</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Jos&#233; Valim</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2262</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>8888a084555b32e6af8d4a7d88633d285f28ad53</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-17T00:58:10+00:00</created-at>
      <filename>namespaced_associations.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">100515</id>
      <size type="integer">2876</size>
      <uploader-id type="integer">19965</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/100515/namespaced_associations.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>91fc7857ba1389e9f0d5821172aef19d16b42396</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-17T15:10:48+00:00</created-at>
      <filename>0001-load_missing_constant_fix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">100731</id>
      <size type="integer">1905</size>
      <uploader-id type="integer">7697</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/100731/0001-load_missing_constant_fix.diff</url>
    </attachment>
  </attachments>
</ticket>
