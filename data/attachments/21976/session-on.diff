From 27a8652f9deae00ea95da5ba04bb96bf35ef1b2b Mon Sep 17 00:00:00 2001
From: Peter Jones <pjones@pmade.com>
Date: Wed, 7 May 2008 13:09:52 -0600
Subject: [PATCH] Allow session(:on)

If sessions were disabled using session(:off) in the application
controller, but you need sessions in another controller, session(:on)
seems intuitive as opposed to session(:disable => false).

This patch implements session(:on) with documentation and tests.
---
 .../lib/action_controller/session_management.rb    |    5 ++++
 .../test/controller/session_management_test.rb     |   22 ++++++++++++++++++++
 2 files changed, 27 insertions(+), 0 deletions(-)

diff --git a/actionpack/lib/action_controller/session_management.rb b/actionpack/lib/action_controller/session_management.rb
index 8680104..80a3ddd 100644
--- a/actionpack/lib/action_controller/session_management.rb
+++ b/actionpack/lib/action_controller/session_management.rb
@@ -69,11 +69,16 @@ module ActionController #:nodoc:
       #   session :off, 
       #     :if => Proc.new { |req| !(req.format.html? || req.format.js?) }
       #
+      #   # turn the session back on, useful when it was turned off in the
+      #   # application controller, and you need it on in another controller
+      #   session :on
+      #
       # All session options described for ActionController::Base.process_cgi
       # are valid arguments.
       def session(*args)
         options = args.extract_options!
 
+        options[:disabled] = false if args.delete(:on)
         options[:disabled] = true if !args.empty?
         options[:only] = [*options[:only]].map { |o| o.to_s } if options[:only]
         options[:except] = [*options[:except]].map { |o| o.to_s } if options[:except]
diff --git a/actionpack/test/controller/session_management_test.rb b/actionpack/test/controller/session_management_test.rb
index 495a915..592b0b5 100644
--- a/actionpack/test/controller/session_management_test.rb
+++ b/actionpack/test/controller/session_management_test.rb
@@ -13,6 +13,19 @@ class SessionManagementTest < Test::Unit::TestCase
     end
   end
 
+  class SessionOffOnController < ActionController::Base
+    session :off
+    session :on, :only => :tell
+
+    def show
+      render :text => "done"
+    end
+
+    def tell
+      render :text => "done"
+    end
+  end
+
   class TestController < ActionController::Base
     session :off, :only => :show
     session :session_secure => true, :except => :show
@@ -100,6 +113,15 @@ class SessionManagementTest < Test::Unit::TestCase
     assert_equal false, @request.session_options
   end
 
+  def test_session_off_then_on_globally
+    @controller = SessionOffOnController.new
+    get :show
+    assert_equal false, @request.session_options
+    get :tell
+    assert_instance_of Hash, @request.session_options
+    assert_equal false, @request.session_options[:disabled]
+  end
+  
   def test_session_off_conditionally
     @controller = TestController.new
     get :show
-- 
1.5.3.7

