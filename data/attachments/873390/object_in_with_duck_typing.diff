From 655a1d3aab6e886456a2de43497a514db8646337 Mon Sep 17 00:00:00 2001
From: Brian Morearty <github2@morearty.org>
Date: Fri, 21 Jan 2011 09:50:52 -0800
Subject: [PATCH] Add Object.in? and Object.not_in? methods.

These methods let you say:

  x.in?([1,2])

instead of the slightly more awkward

  [1,2].include?(x)

The parameter can be any type that implements include?, including Array, Hash, String, Range, Set, Module.
---
 .../lib/active_support/core_ext/object.rb          |    1 +
 .../lib/active_support/core_ext/object/in.rb       |   62 ++++++++++++++++++
 activesupport/test/core_ext/object/in_test.rb      |   66 ++++++++++++++++++++
 3 files changed, 129 insertions(+), 0 deletions(-)
 create mode 100644 activesupport/lib/active_support/core_ext/object/in.rb
 create mode 100644 activesupport/test/core_ext/object/in_test.rb

diff --git a/activesupport/lib/active_support/core_ext/object.rb b/activesupport/lib/active_support/core_ext/object.rb
index 790a26f..a76815f 100644
--- a/activesupport/lib/active_support/core_ext/object.rb
+++ b/activesupport/lib/active_support/core_ext/object.rb
@@ -2,6 +2,7 @@ require 'active_support/core_ext/object/acts_like'
 require 'active_support/core_ext/object/blank'
 require 'active_support/core_ext/object/duplicable'
 require 'active_support/core_ext/object/try'
+require 'active_support/core_ext/object/in'
 
 require 'active_support/core_ext/object/conversions'
 require 'active_support/core_ext/object/instance_variables'
diff --git a/activesupport/lib/active_support/core_ext/object/in.rb b/activesupport/lib/active_support/core_ext/object/in.rb
new file mode 100644
index 0000000..cd316a6
--- /dev/null
+++ b/activesupport/lib/active_support/core_ext/object/in.rb
@@ -0,0 +1,62 @@
+class Object
+  # +in?+ tells you whether self is included in the method arguments.
+  # +not_in?+ is the opposite.
+  #
+  # This simplifies:
+  #
+  #   [1,2,3].include?(x)
+  #
+  # ...to:
+  #
+  #    x.in?([1,2,3])
+  #
+  # which is a bit less awkward (at least in English).
+  #
+  # Thanks to duck typing this works with any type that has an 'include?' method, such as:
+  #
+  #   # Array
+  #   a = [1,2,3]
+  #   3.in?(a)             # => true
+  #   4.in?(a)             # => false
+  #
+  #   # Hash
+  #   h = { "a" => 100, "b" => 200 }
+  #   "a".in?(h)           # => true
+  #   "z".in?(h)           # => false
+  #
+  #   # String
+  #   "lo".in?("hello")    # => true
+  #   "ol".in?("hello")    # => false
+  #   ?h.in?("hello")      # => true
+  #
+  #   # Range
+  #   25.in?(1..50)        # => true
+  #   75.in?(1..50)        # => false
+  #
+  #   # Set
+  #   require 'set'
+  #   s = Set.new([1,2])
+  #   1.in?(s)             # => true
+  #   3.in?(s)             # => false
+  #
+  #   # Even Module
+  #   module A
+  #   end
+  #   class B
+  #     include A
+  #   end
+  #   class C < B
+  #   end
+  #   A.in?(B)             # => true
+  #   A.in?(C)             # => true
+  #   A.in?(A)             # => false
+  #
+  def in?(arg)
+    arg.include?(self)
+  end
+
+  def not_in?(*args)
+    !in?(*args)
+  end
+end
+
diff --git a/activesupport/test/core_ext/object/in_test.rb b/activesupport/test/core_ext/object/in_test.rb
new file mode 100644
index 0000000..d84a552
--- /dev/null
+++ b/activesupport/test/core_ext/object/in_test.rb
@@ -0,0 +1,66 @@
+require 'active_support/core_ext/object/in'
+
+class ObjectInTests < Test::Unit::TestCase
+  def test_array_1_2_should_include_1_but_not_3
+    assert 1.in?([1,2])
+    assert !3.in?([1,2])
+
+    assert !1.not_in?([1,2])
+    assert 3.not_in?([1,2])
+  end
+
+  def test_hash_a_b_should_include_a_but_not_z
+    h = { "a" => 100, "b" => 200 }
+    assert "a".in?(h)
+    assert !"z".in?(h)
+
+    assert !"a".not_in?(h)
+    assert "z".not_in?(h)
+  end
+
+  def test_string_hello_should_include_lo_and_h_but_not_ol
+    assert "lo".in?("hello")
+    assert !"ol".in?("hello")
+    assert ?h.in?("hello")
+
+    assert !"lo".not_in?("hello")
+    assert "ol".not_in?("hello")
+    assert !?h.not_in?("hello")
+  end
+
+  def test_range_1_50_should_include_25_but_not_75
+    assert 25.in?(1..50)
+    assert !75.in?(1..50)
+
+    assert !25.not_in?(1..50)
+    assert 75.not_in?(1..50)
+  end
+
+  def test_set_1_2_should_include_1_but_not_3
+    s = Set.new([1,2])
+    assert 1.in?(s)
+    assert !3.in?(s)
+
+    assert !1.not_in?(s)
+    assert 3.not_in?(s)
+  end
+
+  module A
+  end
+  class B
+    include A
+  end
+  class C < B
+  end
+
+  def test_module_a_included_in_b_which_has_subclass_c_should_be_in_b_and_c_but_not_in_itself
+    assert A.in?(B)
+    assert A.in?(C)
+    assert !A.in?(A)
+
+    assert !A.not_in?(B)
+    assert !A.not_in?(C)
+    assert A.not_in?(A)
+  end
+end
+
-- 
1.6.2.2

