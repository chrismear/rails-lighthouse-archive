From d8beafb426904a52ca0aeddd67d8d55ec4264e3b Mon Sep 17 00:00:00 2001
From: David Lowenfels <david@internautdesign.com>
Date: Sat, 14 Jun 2008 20:50:05 -0700
Subject: [PATCH] fixing bug involving unexpected behavior with HashWithIndifferentAcess#reverse_merge!

---
 .../core_ext/hash/indifferent_access.rb            |    6 ++++++
 activesupport/test/core_ext/hash_ext_test.rb       |    7 +++++++
 2 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb b/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb
index c96c516..096d670 100644
--- a/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb
+++ b/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb
@@ -91,6 +91,12 @@ class HashWithIndifferentAccess < Hash
     self.dup.update(hash)
   end
 
+  # Performs the opposite of merge, with the keys and values from the first hash taking precedence over the second.
+  # This overloaded definition prevents returning a regular hash, if reverse_merge is called on a HashWithDifferentAccess.
+  def reverse_merge(other_hash)
+    self.class.new( other_hash.merge(self) )
+  end
+
   # Removes a specified key from the hash.
   def delete(key)
     super(convert_key(key))
diff --git a/activesupport/test/core_ext/hash_ext_test.rb b/activesupport/test/core_ext/hash_ext_test.rb
index 69028a1..7ba9a00 100644
--- a/activesupport/test/core_ext/hash_ext_test.rb
+++ b/activesupport/test/core_ext/hash_ext_test.rb
@@ -173,6 +173,13 @@ class HashExtTest < Test::Unit::TestCase
     assert_equal 2, hash['b']
   end
 
+  def test_indifferent_reverse_merging
+    hash = HashWithIndifferentAccess.new( 'some' => 'value' )
+    hash.reverse_merge!( :some => 'noclobber', :another => 'clobber' )
+    assert_equal 'value'  , hash[:some] 
+    assert_equal 'clobber', hash[:another]    
+  end
+  
   def test_indifferent_deleting
     get_hash = proc{ { :a => 'foo' }.with_indifferent_access }
     hash = get_hash.call
-- 
1.5.3.6

