<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-16T10:44:05+01:00</created-at>
  <creator-id type="integer">19000</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">427</number>
  <permalink>bind-lambdas-in-conditions</permalink>
  <priority type="integer">18710</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord patch verified</tag>
  <title>Bind Lambdas in :conditions</title>
  <updated-at type="datetime">2008-08-03T14:59:17+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">6</version>
  <user-name>Pratik</user-name>
  <creator-name>Ben Sandofsky</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/427</url>
  <priority-name nil="true"></priority-name>
  <original-body>Let's say you want to find records based on the current time.

@@@ ruby
def find_within_last_week(*args)
  with_scope(:find =&gt; {:conditions =&gt; ['assignments.created_at &gt; ?', 7.days.ago.to_s(:db)} do
    find(*args)
  end
end
@@@

Except, that time statement will be evaluated when the class is first loaded, which quickly makes it useless. The less-than-documented solution used to be

@@@ ruby
['assignments.created_at &gt; ?', '#{7.days.ago.to_s(:db)']
@@@

But that's just silly when ruby has lambdas. With this patch, you can write:

@@@ ruby
def find_within_last_week(*args)
  with_scope(:find =&gt; {:conditions =&gt; ['assignments.created_at &gt; ?', lambda {7.days.ago.to_s(:db)}} do
    find(*args)
  end
end
@@@</original-body>
  <latest-body>Let's say you want to find records based on the current time.

@@@ ruby
def find_within_last_week(*args)
  with_scope(:find =&gt; {:conditions =&gt; ['assignments.created_at &gt; ?', 7.days.ago.to_s(:db)} do
    find(*args)
  end
end
@@@

Except, that time statement will be evaluated when the class is first loaded, which quickly makes it useless. The less-than-documented solution used to be

@@@ ruby
['assignments.created_at &gt; ?', '#{7.days.ago.to_s(:db)']
@@@

But that's just silly when ruby has lambdas. With this patch, you can write:

@@@ ruby
def find_within_last_week(*args)
  with_scope(:find =&gt; {:conditions =&gt; ['assignments.created_at &gt; ?', lambda {7.days.ago.to_s(:db)}} do
    find(*args)
  end
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Let's say you want to find records based on the current time.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def find_within_last_week(*args)
  with_scope(:find =&amp;gt; {:conditions =&amp;gt; ['assignments.created_at &amp;gt; ?', 7.days.ago.to_s(:db)} do
    find(*args)
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Except, that time statement will be evaluated when the class is first loaded, which quickly makes it useless. The less-than-documented solution used to be
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;['assignments.created_at &amp;gt; ?', '#{7.days.ago.to_s(:db)']&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
But that's just silly when ruby has lambdas. With this patch, you can write:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def find_within_last_week(*args)
  with_scope(:find =&amp;gt; {:conditions =&amp;gt; ['assignments.created_at &amp;gt; ?', lambda {7.days.ago.to_s(:db)}} do
    find(*args)
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Let's say you want to find records based on the current time.

@@@ ruby
def find_within_last_week(*args)
  with_scope(:find =&gt; {:conditions =&gt; ['assignments.created_at &gt; ?', 7.days.ago.to_s(:db)} do
    find(*args)
  end
end
@@@

Except, that time statement will be evaluated when the class is first loaded, which quickly makes it useless. The less-than-documented solution used to be

@@@ ruby
['assignments.created_at &gt; ?', '#{7.days.ago.to_s(:db)']
@@@

But that's just silly when ruby has lambdas. With this patch, you can write:

@@@ ruby
def find_within_last_week(*args)
  with_scope(:find =&gt; {:conditions =&gt; ['assignments.created_at &gt; ?', lambda {7.days.ago.to_s(:db)}} do
    find(*args)
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Let's say you want to find records based on the current time.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def find_within_last_week(*args)
  with_scope(:find =&amp;gt; {:conditions =&amp;gt; ['assignments.created_at &amp;gt; ?', 7.days.ago.to_s(:db)} do
    find(*args)
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Except, that time statement will be evaluated when the class is first loaded, which quickly makes it useless. The less-than-documented solution used to be
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;['assignments.created_at &amp;gt; ?', '#{7.days.ago.to_s(:db)']&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
But that's just silly when ruby has lambdas. With this patch, you can write:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def find_within_last_week(*args)
  with_scope(:find =&amp;gt; {:conditions =&amp;gt; ['assignments.created_at &amp;gt; ?', lambda {7.days.ago.to_s(:db)}} do
    find(*args)
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-16T10:44:06+01:00</created-at>
      <creator-id type="integer">19000</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">427</number>
      <permalink>bind-lambdas-in-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Bind Lambdas in :conditions</title>
      <updated-at type="datetime">2008-06-16T10:44:06+01:00</updated-at>
      <user-id type="integer">19000</user-id>
      <version type="integer">1</version>
      <user-name>Ben Sandofsky</user-name>
      <creator-name>Ben Sandofsky</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/427</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>At the moment you can do:
named_scope :last_week, lambda { ({:conditions =&gt; ['assignments.created_at &gt; ?', 7.days.ago.to_s(:db)]}) }

I agree, the normal find should have the same functionality

+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;
At the moment you can do:
&lt;/p&gt;&lt;p&gt;
named_scope :last_week, lambda { ({:conditions =&gt; ['assignments.created_at &gt; ?', 7.days.ago.to_s(:db)]}) }
&lt;/p&gt;&lt;p&gt;
I agree, the normal find should have the same functionality
&lt;/p&gt;&lt;p&gt;
+1
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-16T11:42:57+01:00</created-at>
      <creator-id type="integer">19000</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">427</number>
      <permalink>bind-lambdas-in-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Bind Lambdas in :conditions</title>
      <updated-at type="datetime">2008-06-16T11:42:57+01:00</updated-at>
      <user-id type="integer">2171</user-id>
      <version type="integer">2</version>
      <user-name>Alex MacCaw</user-name>
      <creator-name>Ben Sandofsky</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/427</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I am SO +1 on this. As Alex mentioned, named_scope already has this.

Probably it will be possible to merge this stuff on the way to 3.0</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I am SO +1 on this. As Alex mentioned, named_scope already has this.
&lt;/p&gt;&lt;p&gt;
Probably it will be possible to merge this stuff on the way to 3.0
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-16T13:45:43+01:00</created-at>
      <creator-id type="integer">19000</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">427</number>
      <permalink>bind-lambdas-in-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Bind Lambdas in :conditions</title>
      <updated-at type="datetime">2008-06-16T13:45:43+01:00</updated-at>
      <user-id type="integer">11102</user-id>
      <version type="integer">3</version>
      <user-name>Yaroslav Markin</user-name>
      <creator-name>Ben Sandofsky</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/427</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;
+1
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-16T14:25:15+01:00</created-at>
      <creator-id type="integer">19000</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">427</number>
      <permalink>bind-lambdas-in-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Bind Lambdas in :conditions</title>
      <updated-at type="datetime">2008-06-16T14:25:15+01:00</updated-at>
      <user-id type="integer">18266</user-id>
      <version type="integer">4</version>
      <user-name>Neeraj</user-name>
      <creator-name>Ben Sandofsky</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/427</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Can you please add a test case which will fail for non-lambda version. I tried changing test included in the patch to use &quot;with_scope(:find =&gt; {:conditions =&gt; ['companies.id = ?', @@count = @@count + 1]})&quot; and the tests passed.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Can you please add a test case which will fail for non-lambda version. I tried changing test included in the patch to use &quot;with_scope(:find =&gt; {:conditions =&gt; ['companies.id = ?', @@count = @@count + 1]})&quot; and the tests passed.
&lt;/p&gt;&lt;p&gt;
Thanks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T02:40:01+01:00</created-at>
      <creator-id type="integer">19000</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">427</number>
      <permalink>bind-lambdas-in-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord patch verified</tag>
      <title>Bind Lambdas in :conditions</title>
      <updated-at type="datetime">2008-07-02T02:40:01+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">5</version>
      <user-name>Pratik</user-name>
      <creator-name>Ben Sandofsky</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/427</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Closing till further progress.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Closing till further progress.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-03T14:59:17+01:00</created-at>
      <creator-id type="integer">19000</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">427</number>
      <permalink>bind-lambdas-in-conditions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch verified</tag>
      <title>Bind Lambdas in :conditions</title>
      <updated-at type="datetime">2008-08-03T14:59:17+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">6</version>
      <user-name>Pratik</user-name>
      <creator-name>Ben Sandofsky</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/427</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>356fcf8a8b59e0a9bf40358ef79f8a31f3ff4367</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-06-16T10:44:06+01:00</created-at>
      <filename>bind_lambdas.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">27573</id>
      <size type="integer">2457</size>
      <uploader-id type="integer">19000</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/27573/bind_lambdas.diff</url>
    </attachment>
  </attachments>
</ticket>
