<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2008-07-13T05:50:26+01:00</created-at>
  <creator-id type="integer">26028</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">610</number>
  <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
  <priority type="integer">97</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>activerecord bug to_json</tag>
  <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
  <updated-at type="datetime">2011-05-05T02:55:47+01:00</updated-at>
  <user-id type="integer">148049</user-id>
  <version type="integer">28</version>
  <user-name>af001</user-name>
  <creator-name>David Burger</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When using ActiveRecord's to_json with the parameter :include =&gt; associations to include associations, the association's to_json method is not invoked to create the json for that association.  This prevents the ability to override the to_json method of a class and have it used appropriately when it is serialized as part of an :include.  This patch corrects this so that the to_json method of a class will be used to produce the json for that class when the class is used in an :include =&gt;.</original-body>
  <latest-body>When using ActiveRecord's to_json with the parameter :include =&gt; associations to include associations, the association's to_json method is not invoked to create the json for that association.  This prevents the ability to override the to_json method of a class and have it used appropriately when it is serialized as part of an :include.  This patch corrects this so that the to_json method of a class will be used to produce the json for that class when the class is used in an :include =&gt;.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
When using ActiveRecord's to_json with the parameter :include =&gt; associations to include associations, the association's to_json method is not invoked to create the json for that association.  This prevents the ability to override the to_json method of a class and have it used appropriately when it is serialized as part of an :include.  This patch corrects this so that the to_json method of a class will be used to produce the json for that class when the class is used in an :include =&gt;.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>When using ActiveRecord's to_json with the parameter :include =&gt; associations to include associations, the association's to_json method is not invoked to create the json for that association.  This prevents the ability to override the to_json method of a class and have it used appropriately when it is serialized as part of an :include.  This patch corrects this so that the to_json method of a class will be used to produce the json for that class when the class is used in an :include =&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
When using ActiveRecord's to_json with the parameter :include =&gt; associations to include associations, the association's to_json method is not invoked to create the json for that association.  This prevents the ability to override the to_json method of a class and have it used appropriately when it is serialized as part of an :include.  This patch corrects this so that the to_json method of a class will be used to produce the json for that class when the class is used in an :include =&gt;.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-13T05:50:27+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch tested</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2008-07-13T05:50:27+01:00</updated-at>
      <user-id type="integer">26028</user-id>
      <version type="integer">1</version>
      <user-name>David Burger</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Staling out, please reopen if this is still a problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Staling out, please reopen if this is still a problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-28T16:25:14+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord patch tested</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2008-10-28T16:25:18+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This is still an open issue for our team. Please consider re-opening.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is still an open issue for our team. Please consider
re-opening.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-19T04:02:32+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord patch tested</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-02-19T04:02:37+00:00</updated-at>
      <user-id type="integer">14031</user-id>
      <version type="integer">3</version>
      <user-name>bentlegen</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Joshua / or anyone else listening,

this still -is- a problem (in Rails 2.2.2). Basically I have the following:

My 'User' model has an explicit 'def to_json' declaration that hides a couple of the model's attributes and also adds a couple methods to the output. All working fine when e.g. doing a @user_instance.to_json

However, e.g. my photo model belongs_to an user. now when doing a @photo_instance.to_json(:include =&gt; [:user]), all my user-class's def to_json get ignored and the full user model is serialized, ignoring my :except and :methods declarations in the user's to_json method.


So basically yep, the to_json method of included ':include =&gt;[:abc, :def]'s still don't get called.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Joshua / or anyone else listening,&lt;/p&gt;
&lt;p&gt;this still -is- a problem (in Rails 2.2.2). Basically I have the
following:&lt;/p&gt;
&lt;p&gt;My 'User' model has an explicit 'def to_json' declaration that
hides a couple of the model's attributes and also adds a couple
methods to the output. All working fine when e.g. doing a
@user_instance.to_json&lt;/p&gt;
&lt;p&gt;However, e.g. my photo model belongs_to an user. now when doing
a @photo_instance.to_json(:include =&amp;gt; [:user]), all my
user-class's def to_json get ignored and the full user model is
serialized, ignoring my :except and :methods declarations in the
user's to_json method.&lt;/p&gt;
&lt;p&gt;So basically yep, the to_json method of included ':include
=&amp;gt;[:abc, :def]'s still don't get called.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-23T00:43:32+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord patch tested</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-02-23T00:43:34+00:00</updated-at>
      <user-id type="integer">838</user-id>
      <version type="integer">4</version>
      <user-name>J&#246;rg Battermann</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This is still an issue.  I'd like to re-open, but I don't think normal users can.

Please reopen.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is still an issue. I'd like to re-open, but I don't think
normal users can.&lt;/p&gt;
&lt;p&gt;Please reopen.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-27T20:12:38+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord patch tested</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-02-27T20:12:42+00:00</updated-at>
      <user-id type="integer">20594</user-id>
      <version type="integer">5</version>
      <user-name>Seth Ladd</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@Seth - reopening at your request. I took a look at this, and it
does appear that the problem still exists.

At a quick glance, the fix is going to require changes to:
(around line 80, active_record/serialization.rb)
@@@ ruby
if records.is_a?(Enumerable)
  serializable_record[association] = records.collect { |r| self.class.new(r, opts).serializable_record }
else
  serializable_record[association] = self.class.new(records, opts).serializable_record
end
@@@

Ideally, it would seem nice to have a hash equivalent to to_json that would return the desired hash without flattening it to a string first.

Alternatively, one could borrow much of the implementation in xml_serializer.rb, but that's really just a sign that the abstract implementation of add_associations needs to be tweaked.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Seth - reopening at your request. I took a look at this, and it
does appear that the problem still exists.&lt;/p&gt;
&lt;p&gt;At a quick glance, the fix is going to require changes to:
(around line 80, active_record/serialization.rb)&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
if records.is_a?(Enumerable)
  serializable_record[association] = records.collect { |r| self.class.new(r, opts).serializable_record }
else
  serializable_record[association] = self.class.new(records, opts).serializable_record
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally, it would seem nice to have a hash equivalent to to_json
that would return the desired hash without flattening it to a
string first.&lt;/p&gt;
&lt;p&gt;Alternatively, one could borrow much of the implementation in
xml_serializer.rb, but that's really just a sign that the abstract
implementation of add_associations needs to be tweaked.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-27T21:46:25+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
:tag: activerecord patch tested
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-02-27T21:46:30+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">6</version>
      <user-name>Matt Jones</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I just had the same issue. I've got a model tree and I just defined to_json(options={}) in each model that add :only defaults and their own :include options. I was hoping that I could go all the way back up the chain at the end of this and just call #to_json on the parent object and was disappointed to some very very odd behavior.

I also noticed that if I use :only on the top level, it applies it to all levels of :include. I'm searching for other tickets that address this but will try this patch too and let you know.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just had the same issue. I've got a model tree and I just
defined to_json(options={}) in each model that add :only defaults
and their own :include options. I was hoping that I could go all
the way back up the chain at the end of this and just call #to_json
on the parent object and was disappointed to some very very odd
behavior.&lt;/p&gt;
&lt;p&gt;I also noticed that if I use :only on the top level, it applies
it to all levels of :include. I'm searching for other tickets that
address this but will try this patch too and let you know.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-19T02:13:17+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-07-19T02:13:23+01:00</updated-at>
      <user-id type="integer">15346</user-id>
      <version type="integer">7</version>
      <user-name>Ken Collins</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>OK, I did some poking around in master this weekend and this is what I found. First, this patch seems outdated with the new plugable JSON backends. Second, giving the new use of how #to_json is really calling #as_json as being the best way to remain JSON agnostic, this ticket may be moot for 3.0. Here is some model examples. So using #as_json in rails 3 does what I would hope and expect.

@@@ruby


class Foo
  JSON_ATTRS = [:id,:created_at]
  has_many :bars
  def as_json(options=nil)
    attributes.slice(*JSON_ATTRS).merge(:bars =&gt; bars)
  end
end

class Bar
  JSON_ATTRS = [:id,:owner_id,:owner_type,:etc]
  has_many :bats
  def as_json(options=nil)
    attributes.slice(*JSON_ATTRS).merge(:bats =&gt; bats)
  end
end

class Bat
  JSON_ATTRS = [:not_this,:or_that]
  def as_json(options=nil)
    attributes.except(*JSON_ATTRS)
  end
end


Foo.first.to_json # =&gt; Will include all associations defined by model.

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, I did some poking around in master this weekend and this is
what I found. First, this patch seems outdated with the new
plugable JSON backends. Second, giving the new use of how #to_json
is really calling #as_json as being the best way to remain JSON
agnostic, this ticket may be moot for 3.0. Here is some model
examples. So using #as_json in rails 3 does what I would hope and
expect.&lt;/p&gt;
&lt;p&gt;@@@ruby&lt;/p&gt;
&lt;p&gt;class Foo&lt;br&gt;
JSON_ATTRS = [:id,:created_at] has_many :bars def
as_json(options=nil)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;attributes.slice(*JSON_ATTRS).merge(:bars =&amp;gt; bars)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;class Bar&lt;br&gt;
JSON_ATTRS = [:id,:owner_id,:owner_type,:etc] has_many :bats def
as_json(options=nil)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;attributes.slice(*JSON_ATTRS).merge(:bats =&amp;gt; bats)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;class Bat&lt;br&gt;
JSON_ATTRS = [:not_this,:or_that] def as_json(options=nil)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;attributes.except(*JSON_ATTRS)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;Foo.first.to_json # =&amp;gt; Will include all associations defined
by model.&lt;/p&gt;
&lt;pre&gt;

&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-20T14:36:50+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-07-20T14:36:55+01:00</updated-at>
      <user-id type="integer">15346</user-id>
      <version type="integer">8</version>
      <user-name>Ken Collins</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Better attempt at code formatting

@@@ ruby


class Foo
  JSON_ATTRS = [:id,:created_at]
  has_many :bars
  def as_json(options=nil)
    attributes.slice(*JSON_ATTRS).merge(:bars =&gt; bars)
  end
end

class Bar
  JSON_ATTRS = [:id,:owner_id,:owner_type,:etc]
  has_many :bats
  def as_json(options=nil)
    attributes.slice(*JSON_ATTRS).merge(:bats =&gt; bats)
  end
end

class Bat
  JSON_ATTRS = [:not_this,:or_that]
  def as_json(options=nil)
    attributes.except(*JSON_ATTRS)
  end
end


Foo.first.to_json # =&gt; Will include all associations defined by model.

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Better attempt at code formatting&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;

class Foo
  JSON_ATTRS = [:id,:created_at]
  has_many :bars
  def as_json(options=nil)
    attributes.slice(*JSON_ATTRS).merge(:bars =&amp;gt; bars)
  end
end

class Bar
  JSON_ATTRS = [:id,:owner_id,:owner_type,:etc]
  has_many :bats
  def as_json(options=nil)
    attributes.slice(*JSON_ATTRS).merge(:bats =&amp;gt; bats)
  end
end

class Bat
  JSON_ATTRS = [:not_this,:or_that]
  def as_json(options=nil)
    attributes.except(*JSON_ATTRS)
  end
end


Foo.first.to_json # =&amp;gt; Will include all associations defined by model.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-20T14:39:41+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-07-20T14:39:44+01:00</updated-at>
      <user-id type="integer">15346</user-id>
      <version type="integer">9</version>
      <user-name>Ken Collins</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It appears that in Rails 2.3.3 the as_json method is not called on ActiveRecord Objects when to_json is called.  Is the code example in the previous post only planned to work in Rails 3?  I'm wondering what the reasoning is behind not having to_json invoke as_json in active_record/serializers/json_serializer.rb

I would expect it to work like this:
@@@ ruby

    def to_json(options = {})
      return ActiveSupport::JSON.encode(as_json) if respond_to?(:as_json)
      hash = Serializer.new(self, options).serializable_record
      hash = { self.class.model_name.element =&gt; hash } if include_root_in_json
      ActiveSupport::JSON.encode(hash)
    end
    
    # Remove this implement in subclasses as desired
    # def as_json(options = nil) self end #:nodoc:

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;It appears that in Rails 2.3.3 the as_json method is not called
on ActiveRecord Objects when to_json is called. Is the code example
in the previous post only planned to work in Rails 3? I'm wondering
what the reasoning is behind not having to_json invoke as_json in
active_record/serializers/json_serializer.rb&lt;/p&gt;
&lt;p&gt;I would expect it to work like this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&lt;code&gt;def to_json(options = {})
  return ActiveSupport::JSON.encode(as_json) if respond_to?(:as_json)
  hash = Serializer.new(self, options).serializable_record
  hash = { self.class.model_name.element =&amp;amp;gt; hash } if include_root_in_json
  ActiveSupport::JSON.encode(hash)
end

# Remove this implement in subclasses as desired
# def as_json(options = nil) self end #:nodoc:&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;

&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-07T21:10:06+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-08-07T21:10:09+01:00</updated-at>
      <user-id type="integer">3972</user-id>
      <version type="integer">10</version>
      <user-name>will bailey</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1, although the original patch is apparently outdated.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1, although the original patch is apparently outdated.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-07T10:35:56+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-10-07T10:47:11+01:00</updated-at>
      <user-id type="integer">3117</user-id>
      <version type="integer">11</version>
      <user-name>Bart Zonneveld</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>While this is clearly something that wasn't thought hard about (before 2.3.3 and after 2.3.3, irregardless of the new as_json functionality), I came up a simple solution to achieve the same effect until there is a better (more integrated) solution.  In fact, this &quot;magic method&quot; solution I came up with could easily be an ActiveRecord::Base class method (much like &quot;serialize&quot; or &quot;attr_protected&quot;, etc.) to define a list of attributes that are deemed serializable.

First I overrode the &quot;serializable_attribute_names&quot; method in ActiveRecord::Serialization::Serializer class:

@@@ ruby
module ActiveRecord
  module Serialization
    class Serializer
      def serializable_attribute_names
        attribute_names = @record.respond_to?(:serializable_attributes) ? @record.serializable_attributes : @record.attribute_names

        if options[:only]
          options.delete(:except)
          attribute_names = attribute_names &amp; Array(options[:only]).collect { |n| n.to_s }
        else
          options[:except] = Array(options[:except]) | Array(@record.class.inheritance_column)
          attribute_names = attribute_names - options[:except].collect { |n| n.to_s }
        end

        attribute_names
      end
    end # class Serializer
  end # module Serialization
end # module ActiveRecord
@@@

Notice the change in the first line of the method, where I check to see if an ActiveRecord responds to &quot;serializable_attributes&quot;.  If it does, I take the resulting array of attributes from that rather than the &quot;attribute_names&quot; method.  This can be the method we implement in our models:

@@@ ruby
class User &lt; ActiveRecord::Base
  def serializable_attributes
    # return array of attributes names we deem are safe to serialize
    attribute_names - [&quot;secret_key&quot;]
  end
end
@@@

And Viola!, the net effect we wanted from overriding as_json...only now we are also compatible with XML serialization.</body>
      <body-html>&lt;div&gt;&lt;p&gt;While this is clearly something that wasn't thought hard about
(before 2.3.3 and after 2.3.3, irregardless of the new as_json
functionality), I came up a simple solution to achieve the same
effect until there is a better (more integrated) solution. In fact,
this &quot;magic method&quot; solution I came up with could easily be an
ActiveRecord::Base class method (much like &quot;serialize&quot; or
&quot;attr_protected&quot;, etc.) to define a list of attributes that are
deemed serializable.&lt;/p&gt;
&lt;p&gt;First I overrode the &quot;serializable_attribute_names&quot; method in
ActiveRecord::Serialization::Serializer class:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module ActiveRecord
  module Serialization
    class Serializer
      def serializable_attribute_names
        attribute_names = @record.respond_to?(:serializable_attributes) ? @record.serializable_attributes : @record.attribute_names

        if options[:only]
          options.delete(:except)
          attribute_names = attribute_names &amp;amp; Array(options[:only]).collect { |n| n.to_s }
        else
          options[:except] = Array(options[:except]) | Array(@record.class.inheritance_column)
          attribute_names = attribute_names - options[:except].collect { |n| n.to_s }
        end

        attribute_names
      end
    end # class Serializer
  end # module Serialization
end # module ActiveRecord&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice the change in the first line of the method, where I check
to see if an ActiveRecord responds to &quot;serializable_attributes&quot;. If
it does, I take the resulting array of attributes from that rather
than the &quot;attribute_names&quot; method. This can be the method we
implement in our models:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  def serializable_attributes
    # return array of attributes names we deem are safe to serialize
    attribute_names - [&quot;secret_key&quot;]
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And Viola!, the net effect we wanted from overriding
as_json...only now we are also compatible with XML
serialization.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-07T23:05:25+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-10-07T23:05:32+01:00</updated-at>
      <user-id type="integer">69749</user-id>
      <version type="integer">12</version>
      <user-name>Jarred Nicholls</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>FWIW this is still a problem in Rails 2.3.4.  I've created a sample app, with tests, that illustrates this problem.

http://github.com/sethladd/to_json_busted</body>
      <body-html>&lt;div&gt;&lt;p&gt;FWIW this is still a problem in Rails 2.3.4. I've created a
sample app, with tests, that illustrates this problem.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/sethladd/to_json_busted&quot;&gt;http://github.com/sethladd/to_json_busted&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-13T06:24:17+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-10-13T06:24:21+01:00</updated-at>
      <user-id type="integer">20594</user-id>
      <version type="integer">13</version>
      <user-name>Seth Ladd</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yep it is.  My code above will make it work as expected if the &quot;expected method&quot; is used, as opposed to overriding as_json.  The net effect is the same as what was expected from overriding as_json, as well as working for XML serialization at the same time.  I looked into the serialization code and it's not as easy to fix as_json as one would think, without adding JSON serialization logic directly into the Serializer class, which is suppose to be agnostic to the serialization format.

Hope that helps.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yep it is. My code above will make it work as expected if the
&quot;expected method&quot; is used, as opposed to overriding as_json. The
net effect is the same as what was expected from overriding
as_json, as well as working for XML serialization at the same time.
I looked into the serialization code and it's not as easy to fix
as_json as one would think, without adding JSON serialization logic
directly into the Serializer class, which is suppose to be agnostic
to the serialization format.&lt;/p&gt;
&lt;p&gt;Hope that helps.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-13T15:22:42+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-10-13T15:22:46+01:00</updated-at>
      <user-id type="integer">69749</user-id>
      <version type="integer">14</version>
      <user-name>Jarred Nicholls</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I made the following patch to Rails 2.2.2 which fixed the problem for JSON serialization.

@@@ ruby

class ActiveRecord::Base

  def to_json_options(options={})
    options.symbolize_keys!
  end        

end

class ActiveRecord::Serialization::JsonSerializer

  def initialize(record, options = {})
    super
    @options = @record.to_json_options(@options)
  end
  
end

class Submission &lt; ActiveRecord::Base

  def to_json_options(options={})
    returning(super) do |opts|
      opts[:methods] ||= []
      opts[:methods] = opts[:methods] | ['type', 'photo_urls']
    end
  end
	
end

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I made the following patch to Rails 2.2.2 which fixed the
problem for JSON serialization.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class ActiveRecord::Base

  def to_json_options(options={})
    options.symbolize_keys!
  end        

end

class ActiveRecord::Serialization::JsonSerializer

  def initialize(record, options = {})
    super
    @options = @record.to_json_options(@options)
  end
  
end

class Submission &amp;lt; ActiveRecord::Base

  def to_json_options(options={})
    returning(super) do |opts|
      opts[:methods] ||= []
      opts[:methods] = opts[:methods] | ['type', 'photo_urls']
    end
  end
    
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-22T19:44:22+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-10-22T19:44:27+01:00</updated-at>
      <user-id type="integer">74116</user-id>
      <version type="integer">15</version>
      <user-name>wdlindmeier</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Does anyone know if the next Rails release will address this? It seems like really unexpected behavior for includes to just dump all of the children's attributes willy nilly.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Does anyone know if the next Rails release will address this? It
seems like really unexpected behavior for includes to just dump all
of the children's attributes willy nilly.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-11T06:58:04+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-12-11T06:58:10+00:00</updated-at>
      <user-id type="integer">24615</user-id>
      <version type="integer">16</version>
      <user-name>Aaron Gibralter</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Well I have 2.3.5 and this was not addressed.  See my solution above - I just overwrote the function that determines what attributes are serializable in ActiveSupport::Serialization::Serializer, and you can add a public method to your models that can return an array of (String) attribute names that can be serialized.  This is a fix for both JSON and XML serialization.  Of course, this solution doesn't allow for ad hoc decisions on what attributes to serialize when using &quot;include&quot;, but it at least makes sure &quot;private&quot; attributes aren't ever included in serialization.

My suggestion (until &quot;include&quot; will accept attributes to include/exclude for child attributes) is to include a method rather than your ActiveRecord relationship that returns particular attributes of your relationship, and can in turn nest deep into the AR relationship tree.  It's not a good solution, it's just a workable solution.  The moment you have 3 or more &quot;special methods&quot; because you want different attributes in 3 different situations, you will start to taste vomit in your mouth (I know I would).  Until there is an elegant/incorporated solution (which we can certainly roll ourselves and submit as a patch), I've given the above solution to at least be able to exclude secret or unnecessary attributes from our models during serialization (at any level of the &quot;include&quot; hierarchy), and have just learned to live with possibly having too much information in my serialized data.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well I have 2.3.5 and this was not addressed. See my solution
above - I just overwrote the function that determines what
attributes are serializable in
ActiveSupport::Serialization::Serializer, and you can add a public
method to your models that can return an array of (String)
attribute names that can be serialized. This is a fix for both JSON
and XML serialization. Of course, this solution doesn't allow for
ad hoc decisions on what attributes to serialize when using
&quot;include&quot;, but it at least makes sure &quot;private&quot; attributes aren't
ever included in serialization.&lt;/p&gt;
&lt;p&gt;My suggestion (until &quot;include&quot; will accept attributes to
include/exclude for child attributes) is to include a method rather
than your ActiveRecord relationship that returns particular
attributes of your relationship, and can in turn nest deep into the
AR relationship tree. It's not a good solution, it's just a
workable solution. The moment you have 3 or more &quot;special methods&quot;
because you want different attributes in 3 different situations,
you will start to taste vomit in your mouth (I know I would). Until
there is an elegant/incorporated solution (which we can certainly
roll ourselves and submit as a patch), I've given the above
solution to at least be able to exclude secret or unnecessary
attributes from our models during serialization (at any level of
the &quot;include&quot; hierarchy), and have just learned to live with
possibly having too much information in my serialized data.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-11T13:37:00+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-12-11T13:37:04+00:00</updated-at>
      <user-id type="integer">69749</user-id>
      <version type="integer">17</version>
      <user-name>Jarred Nicholls</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Ah -- true that works -- I also found this plugin, http://github.com/vigetlabs/serialize_with_options, that seems to preserve the options of included associations; that is, if you use serialize_with_options { } for all your models in the includes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ah -- true that works -- I also found this plugin, &lt;a href=
&quot;http://github.com/vigetlabs/serialize_with_options&quot;&gt;http://github.com/vigetlabs/serialize_with_options&lt;/a&gt;,
that seems to preserve the options of included associations; that
is, if you use serialize_with_options { } for all your models in
the includes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-11T19:09:29+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2009-12-11T19:09:32+00:00</updated-at>
      <user-id type="integer">23550</user-id>
      <version type="integer">18</version>
      <user-name>Aaron Gibralter</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:33+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2010-05-04T18:48:33+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">19</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Also having this problem in Rails 3.0.3.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Also having this problem in Rails 3.0.3.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-22T17:38:47+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">97</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2010-11-22T17:38:52+00:00</updated-at>
      <user-id type="integer">27824</user-id>
      <version type="integer">20</version>
      <user-name>kendall (at kendagriff)</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Building a json api is a bit of a headache because of this bug.

I tried to override as_json in each object class, but this only works when as_json/to_json is called directly on an object, not when it is included in another.

@posts.as_json(:include =&gt; :author)

includes default author properties instead of using the as_json method.

I ended up creating a static property on my objects and using that wherever necessary, which is in some ways a better solution anyway, since not every serialization will require the same attributes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Building a json api is a bit of a headache because of this
bug.&lt;/p&gt;
&lt;p&gt;I tried to override as_json in each object class, but this only
works when as_json/to_json is called directly on an object, not
when it is included in another.&lt;/p&gt;
&lt;p&gt;@posts.as_json(:include =&amp;gt; :author)&lt;/p&gt;
&lt;p&gt;includes default author properties instead of using the as_json
method.&lt;/p&gt;
&lt;p&gt;I ended up creating a static property on my objects and using
that wherever necessary, which is in some ways a better solution
anyway, since not every serialization will require the same
attributes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-16T07:31:01+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">97</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2010-12-16T07:31:41+00:00</updated-at>
      <user-id type="integer">129201</user-id>
      <version type="integer">21</version>
      <user-name>Alex Neth</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-17T00:00:12+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">97</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2011-03-17T00:01:26+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">22</version>
      <user-name>rails</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-17T00:00:12+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">97</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2011-03-17T00:02:46+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">23</version>
      <user-name>rails</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Tested with rails 3.0.5 and still broken [state:open].

in to_json model:
@@@
  def as_json(options = {})
    options = {
      :include =&gt; [:a, :b, :c],
      :except =&gt; :a_id
    }
    super options
  end
@@@

a: belongs_to
b: has_many :through
c: has_many :through

for a, b, c:
@@@
  JSON_OPTIONS = {:only =&gt;  [:id, :a] }

  def as_json(options = {})
    super JSON_OPTIONS
  end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Tested with rails 3.0.5 and still broken [state:open].&lt;/p&gt;
&lt;p&gt;in to_json model:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def as_json(options = {})
    options = {
      :include =&amp;gt; [:a, :b, :c],
      :except =&amp;gt; :a_id
    }
    super options
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;a: belongs_to&lt;br&gt;
b: has_many :through&lt;br&gt;
c: has_many :through&lt;/p&gt;
&lt;p&gt;for a, b, c:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  JSON_OPTIONS = {:only =&amp;gt;  [:id, :a] }

  def as_json(options = {})
    super JSON_OPTIONS
  end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-17T08:00:12+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">97</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2011-03-17T08:00:53+00:00</updated-at>
      <user-id type="integer">39661</user-id>
      <version type="integer">24</version>
      <user-name>Betelgeuse</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[state: open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[state: open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-17T08:00:53+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">97</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2011-03-17T08:01:36+00:00</updated-at>
      <user-id type="integer">39661</user-id>
      <version type="integer">25</version>
      <user-name>Betelgeuse</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Still broken in 2.3.11 as well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Still broken in 2.3.11 as well.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-18T13:25:09+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">97</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2011-03-18T13:25:58+00:00</updated-at>
      <user-id type="integer">112458</user-id>
      <version type="integer">26</version>
      <user-name>Daniel</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-18T13:28:13+00:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">97</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2011-03-18T13:28:52+00:00</updated-at>
      <user-id type="integer">112458</user-id>
      <version type="integer">27</version>
      <user-name>Daniel</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&#31169;&#12398;&#20013;&#12391;&#12289;&#32207;&#21512;&#35413;&#20385;&#12398;&#12392;&#12387;&#12390;&#12418;&#20302;&#12356;&#12450;&#12496;&lt;a href=&quot;http://www.abakuro.co.jp/&quot; rel=&quot;dofollow&quot;&gt;&lt;b&gt;&#12450;&#12496;&#12463;&#12525;&#12507;&#12522;&#12473;&#12479;&#12540;&lt;/b&gt;&lt;/a&gt;&#12463;&#12525;&#37504;&#24231;&#24215;&#12290;&#12450;&#12496;&#12463;&#12525;&#12399;&#22823;&#22909;&#12365;&#12394;&#12435;&#12391;&#12377;&#12369;&#12393;&#12397;&#12290;&#19968;&#26152;&#26085;&#12398;&#26481;&#20140;&#39365;&#20184;&#36817;&#12391;&#12398;&#25171;&#12385;&#21512;&#12431;&#12379;&#12398;&#24460;&#12289;&#25955;&#27497;&#12364;&#12390;&#12425;&#20037;&#12293;&#12395;&#34892;&#12387;&#12390;&#12365;&#12414;&#12375;&#12383;&#12290;&#12381;&#12375;&#12383;&#12425;&#12499;&#12483;&#12463;&#12522;&#65281;&#30456;&#22793;&#12431;&#12425;&lt;a href=&quot;http://www.abakuro.co.jp/&quot; rel=&quot;dofollow&quot;&gt;&lt;b&gt;&#12450;&#12496;&#12463;&#12525;&lt;/b&gt;&lt;/a&gt;&#12378;&#12289;&#36362;&#12387;&#12390;&#12356;&#12427;&#12384;&#12369;&#12398;&#24215;&#21729;&#12373;&#12435;&#12392;&#12363;&#12418;&#12356;&#12414;&#12375;&#12383;&#12364;&#12289;</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&amp;#31169;&amp;#12398;&amp;#20013;&amp;#12391;&amp;#12289;&amp;#32207;&amp;#21512;&amp;#35413;&amp;#20385;&amp;#12398;&amp;#12392;&amp;#12387;&amp;#12390;&amp;#12418;&amp;#20302;&amp;#12356;&amp;#12450;&amp;#12496;&lt;a href=&quot;http://www.abakuro.co.jp/&quot;&gt;&lt;b&gt;&amp;#12450;&amp;#12496;&amp;#12463;&amp;#12525;&amp;#12507;&amp;#12522;&amp;#12473;&amp;#12479;&amp;#12540;&lt;/b&gt;&lt;/a&gt;&amp;#12463;&amp;#12525;&amp;#37504;&amp;#24231;&amp;#24215;&amp;#12290;&amp;#12450;&amp;#12496;&amp;#12463;&amp;#12525;&amp;#12399;&amp;#22823;&amp;#22909;&amp;#12365;&amp;#12394;&amp;#12435;&amp;#12391;&amp;#12377;&amp;#12369;&amp;#12393;&amp;#12397;&amp;#12290;&amp;#19968;&amp;#26152;&amp;#26085;&amp;#12398;&amp;#26481;&amp;#20140;&amp;#39365;&amp;#20184;&amp;#36817;&amp;#12391;&amp;#12398;&amp;#25171;&amp;#12385;&amp;#21512;&amp;#12431;&amp;#12379;&amp;#12398;&amp;#24460;&amp;#12289;&amp;#25955;&amp;#27497;&amp;#12364;&amp;#12390;&amp;#12425;&amp;#20037;&amp;#12293;&amp;#12395;&amp;#34892;&amp;#12387;&amp;#12390;&amp;#12365;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12381;&amp;#12375;&amp;#12383;&amp;#12425;&amp;#12499;&amp;#12483;&amp;#12463;&amp;#12522;&amp;#65281;&amp;#30456;&amp;#22793;&amp;#12431;&amp;#12425;&lt;a href=&quot;http://www.abakuro.co.jp/&quot;&gt;&lt;b&gt;&amp;#12450;&amp;#12496;&amp;#12463;&amp;#12525;&lt;/b&gt;&lt;/a&gt;&amp;#12378;&amp;#12289;&amp;#36362;&amp;#12387;&amp;#12390;&amp;#12356;&amp;#12427;&amp;#12384;&amp;#12369;&amp;#12398;&amp;#24215;&amp;#21729;&amp;#12373;&amp;#12435;&amp;#12392;&amp;#12363;&amp;#12418;&amp;#12356;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12364;&amp;#12289;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-05-05T02:54:51+01:00</created-at>
      <creator-id type="integer">26028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">610</number>
      <permalink>activerecord-to_json-doesn-t-invoke-include-s-to_json</permalink>
      <priority type="integer">97</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug to_json</tag>
      <title>ActiveRecord to_json doesn't invoke :include's to_json</title>
      <updated-at type="datetime">2011-05-05T02:55:47+01:00</updated-at>
      <user-id type="integer">148049</user-id>
      <version type="integer">28</version>
      <user-name>af001</user-name>
      <creator-name>David Burger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/610</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>b26461487f671cac330a4b64eaa3915af47aab64</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-07-13T05:50:27+01:00</created-at>
      <filename>to_json_fix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">32267</id>
      <size type="integer">2548</size>
      <uploader-id type="integer">26028</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/32267/to_json_fix.diff</url>
    </attachment>
  </attachments>
</ticket>
