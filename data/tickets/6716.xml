<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-18T20:32:29+01:00</created-at>
  <creator-id type="integer">26148</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6716</number>
  <permalink>activeresource-custom-class-namespace-bug</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>activeresource patch</tag>
  <title>ActiveResource custom class namespace bug</title>
  <updated-at type="datetime">2011-04-18T20:36:05+01:00</updated-at>
  <user-id type="integer">26148</user-id>
  <version type="integer">2</version>
  <user-name>Brian Durand</user-name>
  <creator-name>Brian Durand</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6716</url>
  <priority-name nil="true"></priority-name>
  <original-body>ActiveResource has a bug finding custom defined classes for attributes in the same namespace as the current model. For some reason when it looks for pre-defined classes, it won't look in the current namespace, but that is where it will define a new model if the class does not exist.

If my resource comes back as:

@@@ xml
&lt;person&gt;
  &lt;first-name&gt;John&lt;/first-name&gt;
  &lt;last-name&gt;Doe&lt;/last-name&gt;
  &lt;address&gt;
    &lt;street&gt;123 Park Avenue&lt;/street&gt;
    &lt;city&gt;New York&lt;/city&gt;
    &lt;state&gt;NY&lt;/state&gt;
  &lt;address&gt;
&lt;/person&gt;
@@@

This works and will dynamically create a new class Person::Address &lt; ActiveResource::Base for person.address:

@@@ ruby
class Person &lt; ActiveRecord::Base
end
@@@

This code also works and person.address will use the Address class and address will not be treated as a resource:

@@@ ruby
class Person &lt; ActiveRecord::Base
end

class Address
  attr_reader :attributes
  def initialize(attributes = {})
    @attributes = attributes
  end
end
@@@

However, this code will not work. ActiveResource will try to use the Person::Address class, but it will treat it as a resource resulting in method missing errors when it tries to call prefix= and site= on it:

@@@ ruby
class Person &lt; ActiveRecord::Base
  class Address
    attr_reader :attributes
    def initialize(attributes = {})
      @attributes = attributes
    end
  end
end
@@@</original-body>
  <latest-body>ActiveResource has a bug finding custom defined classes for attributes in the same namespace as the current model. For some reason when it looks for pre-defined classes, it won't look in the current namespace, but that is where it will define a new model if the class does not exist.

If my resource comes back as:

@@@ xml
&lt;person&gt;
  &lt;first-name&gt;John&lt;/first-name&gt;
  &lt;last-name&gt;Doe&lt;/last-name&gt;
  &lt;address&gt;
    &lt;street&gt;123 Park Avenue&lt;/street&gt;
    &lt;city&gt;New York&lt;/city&gt;
    &lt;state&gt;NY&lt;/state&gt;
  &lt;address&gt;
&lt;/person&gt;
@@@

This works and will dynamically create a new class Person::Address &lt; ActiveResource::Base for person.address:

@@@ ruby
class Person &lt; ActiveRecord::Base
end
@@@

This code also works and person.address will use the Address class and address will not be treated as a resource:

@@@ ruby
class Person &lt; ActiveRecord::Base
end

class Address
  attr_reader :attributes
  def initialize(attributes = {})
    @attributes = attributes
  end
end
@@@

However, this code will not work. ActiveResource will try to use the Person::Address class, but it will treat it as a resource resulting in method missing errors when it tries to call prefix= and site= on it:

@@@ ruby
class Person &lt; ActiveRecord::Base
  class Address
    attr_reader :attributes
    def initialize(attributes = {})
      @attributes = attributes
    end
  end
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActiveResource has a bug finding custom defined classes for
attributes in the same namespace as the current model. For some
reason when it looks for pre-defined classes, it won't look in the
current namespace, but that is where it will define a new model if
the class does not exist.&lt;/p&gt;
&lt;p&gt;If my resource comes back as:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;&amp;lt;person&amp;gt;
  &amp;lt;first-name&amp;gt;John&amp;lt;/first-name&amp;gt;
  &amp;lt;last-name&amp;gt;Doe&amp;lt;/last-name&amp;gt;
  &amp;lt;address&amp;gt;
    &amp;lt;street&amp;gt;123 Park Avenue&amp;lt;/street&amp;gt;
    &amp;lt;city&amp;gt;New York&amp;lt;/city&amp;gt;
    &amp;lt;state&amp;gt;NY&amp;lt;/state&amp;gt;
  &amp;lt;address&amp;gt;
&amp;lt;/person&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This works and will dynamically create a new class
Person::Address &amp;lt; ActiveResource::Base for person.address:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Person &amp;lt; ActiveRecord::Base
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This code also works and person.address will use the Address
class and address will not be treated as a resource:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Person &amp;lt; ActiveRecord::Base
end

class Address
  attr_reader :attributes
  def initialize(attributes = {})
    @attributes = attributes
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, this code will not work. ActiveResource will try to use
the Person::Address class, but it will treat it as a resource
resulting in method missing errors when it tries to call prefix=
and site= on it:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Person &amp;lt; ActiveRecord::Base
  class Address
    attr_reader :attributes
    def initialize(attributes = {})
      @attributes = attributes
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveResource has a bug finding custom defined classes for attributes in the same namespace as the current model. For some reason when it looks for pre-defined classes, it won't look in the current namespace, but that is where it will define a new model if the class does not exist.

If my resource comes back as:

@@@ xml
&lt;person&gt;
  &lt;first-name&gt;John&lt;/first-name&gt;
  &lt;last-name&gt;Doe&lt;/last-name&gt;
  &lt;address&gt;
    &lt;street&gt;123 Park Avenue&lt;/street&gt;
    &lt;city&gt;New York&lt;/city&gt;
    &lt;state&gt;NY&lt;/state&gt;
  &lt;address&gt;
&lt;/person&gt;
@@@

This works and will dynamically create a new class Person::Address &lt; ActiveResource::Base for person.address:

@@@ ruby
class Person &lt; ActiveRecord::Base
end
@@@

This code also works and person.address will use the Address class and address will not be treated as a resource:

@@@ ruby
class Person &lt; ActiveRecord::Base
end

class Address
  attr_reader :attributes
  def initialize(attributes = {})
    @attributes = attributes
  end
end
@@@

However, this code will not work. ActiveResource will try to use the Person::Address class, but it will treat it as a resource resulting in method missing errors when it tries to call prefix= and site= on it:

@@@ ruby
class Person &lt; ActiveRecord::Base
  class Address
    attr_reader :attributes
    def initialize(attributes = {})
      @attributes = attributes
    end
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveResource has a bug finding custom defined classes for
attributes in the same namespace as the current model. For some
reason when it looks for pre-defined classes, it won't look in the
current namespace, but that is where it will define a new model if
the class does not exist.&lt;/p&gt;
&lt;p&gt;If my resource comes back as:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;&amp;lt;person&amp;gt;
  &amp;lt;first-name&amp;gt;John&amp;lt;/first-name&amp;gt;
  &amp;lt;last-name&amp;gt;Doe&amp;lt;/last-name&amp;gt;
  &amp;lt;address&amp;gt;
    &amp;lt;street&amp;gt;123 Park Avenue&amp;lt;/street&amp;gt;
    &amp;lt;city&amp;gt;New York&amp;lt;/city&amp;gt;
    &amp;lt;state&amp;gt;NY&amp;lt;/state&amp;gt;
  &amp;lt;address&amp;gt;
&amp;lt;/person&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This works and will dynamically create a new class
Person::Address &amp;lt; ActiveResource::Base for person.address:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Person &amp;lt; ActiveRecord::Base
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This code also works and person.address will use the Address
class and address will not be treated as a resource:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Person &amp;lt; ActiveRecord::Base
end

class Address
  attr_reader :attributes
  def initialize(attributes = {})
    @attributes = attributes
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, this code will not work. ActiveResource will try to use
the Person::Address class, but it will treat it as a resource
resulting in method missing errors when it tries to call prefix=
and site= on it:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Person &amp;lt; ActiveRecord::Base
  class Address
    attr_reader :attributes
    def initialize(attributes = {})
      @attributes = attributes
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-18T20:32:29+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6716</number>
      <permalink>activeresource-custom-class-namespace-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveResource custom class namespace bug</title>
      <updated-at type="datetime">2011-04-18T20:32:32+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">1</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6716</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-18T20:36:04+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6716</number>
      <permalink>activeresource-custom-class-namespace-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activeresource patch</tag>
      <title>ActiveResource custom class namespace bug</title>
      <updated-at type="datetime">2011-04-18T20:36:05+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">2</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6716</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>95f1e7eb7d6f59b4c94866f0f5abddf2d186cbbf</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-04-18T20:36:04+01:00</created-at>
      <filename>active_resource_class_loading.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">1020813</id>
      <size type="integer">2479</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/1020813/active_resource_class_loading.diff</url>
    </attachment>
  </attachments>
</ticket>
