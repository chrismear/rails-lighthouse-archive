From 7d66141b30fac9342287e4417b010c4bee1c75fa Mon Sep 17 00:00:00 2001
From: Akira Matsuda <ronnie@dio.jp>
Date: Sat, 25 Dec 2010 23:54:34 +0900
Subject: [PATCH 1/2] Accept String value for render_partial :as option

---
 actionpack/lib/action_view/partials.rb             |    8 ++++----
 .../lib/action_view/renderer/partial_renderer.rb   |    4 ++--
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/actionpack/lib/action_view/partials.rb b/actionpack/lib/action_view/partials.rb
index cd3f130..88812b7 100644
--- a/actionpack/lib/action_view/partials.rb
+++ b/actionpack/lib/action_view/partials.rb
@@ -40,13 +40,13 @@ module ActionView
   # With the <tt>:as</tt> option we can specify a different name for said local variable. For example, if we
   # wanted it to be +agreement+ instead of +contract+ we'd do:
   #
-  #   <%= render :partial => "contract", :as => :agreement %>
+  #   <%= render :partial => "contract", :as => 'agreement' %>
   #
   # The <tt>:object</tt> option can be used to directly specify which object is rendered into the partial;
   # useful when the template's object is elsewhere, in a different ivar or in a local variable for instance.
-  # 
+  #
   # Revisiting a previous example we could have written this code:
-  # 
+  #
   #   <%= render :partial => "account", :object => @buyer %>
   #
   #   <% for ad in @advertisements %>
@@ -69,7 +69,7 @@ module ActionView
   # +partial_name_counter+. In the case of the example above, the template would be fed +ad_counter+.
   #
   # The <tt>:as</tt> option may be used when rendering partials.
-  # 
+  #
   # You can specify a partial to be rendered between elements via the <tt>:spacer_template</tt> option.
   # The following example will render <tt>advertiser/_ad_divider.html.erb</tt> between each ad partial:
   #
diff --git a/actionpack/lib/action_view/renderer/partial_renderer.rb b/actionpack/lib/action_view/renderer/partial_renderer.rb
index 317479a..6a851dd 100644
--- a/actionpack/lib/action_view/renderer/partial_renderer.rb
+++ b/actionpack/lib/action_view/renderer/partial_renderer.rb
@@ -108,7 +108,7 @@ module ActionView
         locals << @variable_counter if @collection
         find_template(path, locals)
       end
-    end 
+    end
 
     def find_template(path=@path, locals=@locals.keys)
       prefix = @view.controller_prefix unless path.include?(?/)
@@ -159,7 +159,7 @@ module ActionView
     end
 
     def retrieve_variable(path)
-      variable = @options[:as] || path[%r'_?(\w+)(\.\w+)*$', 1].to_sym
+      variable = @options[:as].try(:to_sym) || path[%r'_?(\w+)(\.\w+)*$', 1].to_sym
       variable_counter = :"#{variable}_counter" if @collection
       [variable, variable_counter]
     end
-- 
1.7.3.4


From abb1c42959ad32c6363ba5ccba40662b97fc6723 Mon Sep 17 00:00:00 2001
From: Akira Matsuda <ronnie@dio.jp>
Date: Sun, 26 Dec 2010 00:08:29 +0900
Subject: [PATCH 2/2] Add test for render_partial :as by String

---
 actionpack/test/template/render_test.rb |    7 ++++++-
 1 files changed, 6 insertions(+), 1 deletions(-)

diff --git a/actionpack/test/template/render_test.rb b/actionpack/test/template/render_test.rb
index 38bedd2..e02d692 100644
--- a/actionpack/test/template/render_test.rb
+++ b/actionpack/test/template/render_test.rb
@@ -146,7 +146,12 @@ module RenderTestCases
     assert_equal "Hello: davidHello: mary", @view.render(:partial => "test/customer", :collection => [ Customer.new("david"), Customer.new("mary") ])
   end
 
-  def test_render_partial_collection_as
+  def test_render_partial_collection_as_by_string
+    assert_equal "david david davidmary mary mary",
+      @view.render(:partial => "test/customer_with_var", :collection => [ Customer.new("david"), Customer.new("mary") ], :as => 'customer')
+  end
+
+  def test_render_partial_collection_as_by_symbol
     assert_equal "david david davidmary mary mary",
       @view.render(:partial => "test/customer_with_var", :collection => [ Customer.new("david"), Customer.new("mary") ], :as => :customer)
   end
-- 
1.7.3.4

