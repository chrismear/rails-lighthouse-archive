<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-30T02:18:14+01:00</created-at>
  <creator-id type="integer">52142</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2374</number>
  <permalink>patch-postgresql-socket-detection-and-help</permalink>
  <priority type="integer">1534</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>databaseyml generators libpq patch postgresql railties</tag>
  <title>patch: postgresql socket detection and help</title>
  <updated-at type="datetime">2011-02-02T17:33:57+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">5</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Cezary Baginski</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2374</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The patch: generates normal database.yml with a small additonal note about pgsql domain sockets, unless a socket is detected in /tmp or /var/run/postgresql. In that case, working host and port params are set to make this work out of the box. 

Good news is this could also save the user from configuring authentication in pgsql, since by default ident is used for domain sockets.

Remaining problems:

* I have no ideas for how to write a simple test for this that wouldn't be messy - but I don't feel good about not having tests for this
* The problem is actually on the distro - maintainer's side (libpq-dev) and may be specific to a distro/version (e.g.libpqdev=psql=8.3.6-0ubuntu8.10)
* Only two folders are checked - I have no informatin about other possible distro/path combinations ( like the long mysql socked path list)
* It would be nice to detect pgsql domain socket connection problems and give a hint to the user along with the standard socket error - but I cannot think of a clean way to do this using pg.
* I tested this only with pg

There is a hairy problem with postgresql domain socket support that boils down to:

* people are having socket connection errors with posgresql and have no clue other than using tcp with localhost
* the socket paths are compiled into bo the server and client (libpq), and there isn't and won't be a API for getting this path (other than strace ;) )
* the socket path can be passed through the host parameter, which nobody on the internet seems to know about (mysql OTOH actually has a working :socket option)
* none of my stock Ubuntu setups ever worked AFAIR  - the server and client used different socket paths. I have no idea how this is possible, since a since #define is used for both packages - I'll file a bug in Launchpad as soon as I test the latest versions of postgres and libpq-dev.
* a workaround is to configure the server to use the same path as the client (libpq) - which is what I did until I dug through libpq code and found the host workaround.</original-body>
  <latest-body>The patch: generates normal database.yml with a small additonal note about pgsql domain sockets, unless a socket is detected in /tmp or /var/run/postgresql. In that case, working host and port params are set to make this work out of the box. 

Good news is this could also save the user from configuring authentication in pgsql, since by default ident is used for domain sockets.

Remaining problems:

* I have no ideas for how to write a simple test for this that wouldn't be messy - but I don't feel good about not having tests for this
* The problem is actually on the distro - maintainer's side (libpq-dev) and may be specific to a distro/version (e.g.libpqdev=psql=8.3.6-0ubuntu8.10)
* Only two folders are checked - I have no informatin about other possible distro/path combinations ( like the long mysql socked path list)
* It would be nice to detect pgsql domain socket connection problems and give a hint to the user along with the standard socket error - but I cannot think of a clean way to do this using pg.
* I tested this only with pg

There is a hairy problem with postgresql domain socket support that boils down to:

* people are having socket connection errors with posgresql and have no clue other than using tcp with localhost
* the socket paths are compiled into bo the server and client (libpq), and there isn't and won't be a API for getting this path (other than strace ;) )
* the socket path can be passed through the host parameter, which nobody on the internet seems to know about (mysql OTOH actually has a working :socket option)
* none of my stock Ubuntu setups ever worked AFAIR  - the server and client used different socket paths. I have no idea how this is possible, since a since #define is used for both packages - I'll file a bug in Launchpad as soon as I test the latest versions of postgres and libpq-dev.
* a workaround is to configure the server to use the same path as the client (libpq) - which is what I did until I dug through libpq code and found the host workaround.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The patch: generates normal database.yml with a small additonal
note about pgsql domain sockets, unless a socket is detected in
/tmp or /var/run/postgresql. In that case, working host and port
params are set to make this work out of the box.&lt;/p&gt;
&lt;p&gt;Good news is this could also save the user from configuring
authentication in pgsql, since by default ident is used for domain
sockets.&lt;/p&gt;
&lt;p&gt;Remaining problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have no ideas for how to write a simple test for this that
wouldn't be messy - but I don't feel good about not having tests
for this&lt;/li&gt;
&lt;li&gt;The problem is actually on the distro - maintainer's side
(libpq-dev) and may be specific to a distro/version
(e.g.libpqdev=psql=8.3.6-0ubuntu8.10)&lt;/li&gt;
&lt;li&gt;Only two folders are checked - I have no informatin about other
possible distro/path combinations ( like the long mysql socked path
list)&lt;/li&gt;
&lt;li&gt;It would be nice to detect pgsql domain socket connection
problems and give a hint to the user along with the standard socket
error - but I cannot think of a clean way to do this using pg.&lt;/li&gt;
&lt;li&gt;I tested this only with pg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a hairy problem with postgresql domain socket support
that boils down to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;people are having socket connection errors with posgresql and
have no clue other than using tcp with localhost&lt;/li&gt;
&lt;li&gt;the socket paths are compiled into bo the server and client
(libpq), and there isn't and won't be a API for getting this path
(other than strace ;) )&lt;/li&gt;
&lt;li&gt;the socket path can be passed through the host parameter, which
nobody on the internet seems to know about (mysql OTOH actually has
a working :socket option)&lt;/li&gt;
&lt;li&gt;none of my stock Ubuntu setups ever worked AFAIR - the server
and client used different socket paths. I have no idea how this is
possible, since a since #define is used for both packages - I'll
file a bug in Launchpad as soon as I test the latest versions of
postgres and libpq-dev.&lt;/li&gt;
&lt;li&gt;a workaround is to configure the server to use the same path as
the client (libpq) - which is what I did until I dug through libpq
code and found the host workaround.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The patch: generates normal database.yml with a small additonal note about pgsql domain sockets, unless a socket is detected in /tmp or /var/run/postgresql. In that case, working host and port params are set to make this work out of the box. 

Good news is this could also save the user from configuring authentication in pgsql, since by default ident is used for domain sockets.

Remaining problems:

* I have no ideas for how to write a simple test for this that wouldn't be messy - but I don't feel good about not having tests for this
* The problem is actually on the distro - maintainer's side (libpq-dev) and may be specific to a distro/version (e.g.libpqdev=psql=8.3.6-0ubuntu8.10)
* Only two folders are checked - I have no informatin about other possible distro/path combinations ( like the long mysql socked path list)
* It would be nice to detect pgsql domain socket connection problems and give a hint to the user along with the standard socket error - but I cannot think of a clean way to do this using pg.
* I tested this only with pg

There is a hairy problem with postgresql domain socket support that boils down to:

* people are having socket connection errors with posgresql and have no clue other than using tcp with localhost
* the socket paths are compiled into bo the server and client (libpq), and there isn't and won't be a API for getting this path (other than strace ;) )
* the socket path can be passed through the host parameter, which nobody on the internet seems to know about (mysql OTOH actually has a working :socket option)
* none of my stock Ubuntu setups ever worked AFAIR  - the server and client used different socket paths. I have no idea how this is possible, since a since #define is used for both packages - I'll file a bug in Launchpad as soon as I test the latest versions of postgres and libpq-dev.
* a workaround is to configure the server to use the same path as the client (libpq) - which is what I did until I dug through libpq code and found the host workaround.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The patch: generates normal database.yml with a small additonal
note about pgsql domain sockets, unless a socket is detected in
/tmp or /var/run/postgresql. In that case, working host and port
params are set to make this work out of the box.&lt;/p&gt;
&lt;p&gt;Good news is this could also save the user from configuring
authentication in pgsql, since by default ident is used for domain
sockets.&lt;/p&gt;
&lt;p&gt;Remaining problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have no ideas for how to write a simple test for this that
wouldn't be messy - but I don't feel good about not having tests
for this&lt;/li&gt;
&lt;li&gt;The problem is actually on the distro - maintainer's side
(libpq-dev) and may be specific to a distro/version
(e.g.libpqdev=psql=8.3.6-0ubuntu8.10)&lt;/li&gt;
&lt;li&gt;Only two folders are checked - I have no informatin about other
possible distro/path combinations ( like the long mysql socked path
list)&lt;/li&gt;
&lt;li&gt;It would be nice to detect pgsql domain socket connection
problems and give a hint to the user along with the standard socket
error - but I cannot think of a clean way to do this using pg.&lt;/li&gt;
&lt;li&gt;I tested this only with pg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a hairy problem with postgresql domain socket support
that boils down to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;people are having socket connection errors with posgresql and
have no clue other than using tcp with localhost&lt;/li&gt;
&lt;li&gt;the socket paths are compiled into bo the server and client
(libpq), and there isn't and won't be a API for getting this path
(other than strace ;) )&lt;/li&gt;
&lt;li&gt;the socket path can be passed through the host parameter, which
nobody on the internet seems to know about (mysql OTOH actually has
a working :socket option)&lt;/li&gt;
&lt;li&gt;none of my stock Ubuntu setups ever worked AFAIR - the server
and client used different socket paths. I have no idea how this is
possible, since a since #define is used for both packages - I'll
file a bug in Launchpad as soon as I test the latest versions of
postgres and libpq-dev.&lt;/li&gt;
&lt;li&gt;a workaround is to configure the server to use the same path as
the client (libpq) - which is what I did until I dug through libpq
code and found the host workaround.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-30T02:18:14+01:00</created-at>
      <creator-id type="integer">52142</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2374</number>
      <permalink>patch-postgresql-socket-detection-and-help</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>database.yml generators libpq patch postgresql railties</tag>
      <title>patch: postgresql socket detection and help</title>
      <updated-at type="datetime">2009-03-30T02:18:18+01:00</updated-at>
      <user-id type="integer">52142</user-id>
      <version type="integer">1</version>
      <user-name>Cezary Baginski</user-name>
      <creator-name>Cezary Baginski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2374</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Probable cause: long ago one version of postgres created the system config file upon installation with the socket dir set to /tmp. At one point, the system default changed to /var/run/postgres/. But the config file was never updated, which never stopped the server or psql client from working with the socket in /tmp.

But... libpq doesn't read the config file, so it failed trying to connect to the compiled-in default, /var/run/postgres.

So, anyone who has a fresh Ubuntu installation without /tmp in the config, should have everything working out of the box.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Probable cause: long ago one version of postgres created the
system config file upon installation with the socket dir set to
/tmp. At one point, the system default changed to
/var/run/postgres/. But the config file was never updated, which
never stopped the server or psql client from working with the
socket in /tmp.&lt;/p&gt;
&lt;p&gt;But... libpq doesn't read the config file, so it failed trying
to connect to the compiled-in default, /var/run/postgres.&lt;/p&gt;
&lt;p&gt;So, anyone who has a fresh Ubuntu installation without /tmp in
the config, should have everything working out of the box.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-30T02:48:14+01:00</created-at>
      <creator-id type="integer">52142</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2374</number>
      <permalink>patch-postgresql-socket-detection-and-help</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>database.yml generators libpq patch postgresql railties</tag>
      <title>patch: postgresql socket detection and help</title>
      <updated-at type="datetime">2009-03-30T02:48:16+01:00</updated-at>
      <user-id type="integer">52142</user-id>
      <version type="integer">2</version>
      <user-name>Cezary Baginski</user-name>
      <creator-name>Cezary Baginski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2374</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:44+01:00</created-at>
      <creator-id type="integer">52142</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2374</number>
      <permalink>patch-postgresql-socket-detection-and-help</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>database.yml generators libpq patch postgresql railties</tag>
      <title>patch: postgresql socket detection and help</title>
      <updated-at type="datetime">2010-05-04T18:48:44+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Cezary Baginski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2374</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:40:14+00:00</created-at>
      <creator-id type="integer">52142</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: database.yml generators libpq patch postgresql railties
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2374</number>
      <permalink>patch-postgresql-socket-detection-and-help</permalink>
      <priority type="integer">1534</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>databaseyml generators libpq patch postgresql railties</tag>
      <title>patch: postgresql socket detection and help</title>
      <updated-at type="datetime">2011-02-02T17:33:54+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Cezary Baginski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2374</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:40:15+00:00</created-at>
      <creator-id type="integer">52142</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2374</number>
      <permalink>patch-postgresql-socket-detection-and-help</permalink>
      <priority type="integer">1534</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>databaseyml generators libpq patch postgresql railties</tag>
      <title>patch: postgresql socket detection and help</title>
      <updated-at type="datetime">2011-02-02T17:33:57+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Cezary Baginski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2374</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>d8b5ba1e949fbbd59992b626fa2926688c945a5c</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-30T02:18:14+01:00</created-at>
      <filename>postgresql_socket_detection.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">105485</id>
      <size type="integer">3549</size>
      <uploader-id type="integer">52142</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/105485/postgresql_socket_detection.diff</url>
    </attachment>
  </attachments>
</ticket>
