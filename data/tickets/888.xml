<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-23T15:37:39+01:00</created-at>
  <creator-id type="integer">19437</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">888</number>
  <permalink>add-sql-methods-to-models</permalink>
  <priority type="integer">341</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord enhancement patch</tag>
  <title>Add SQL methods to models</title>
  <updated-at type="datetime">2008-08-24T00:33:20+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">6</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Adam Sindelar</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/888</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Hello,

as stated on http://groups.google.com/group/rubyonrails-core/browse_thread/thread/9cc61668656b4e24, I'm submitting the first of what could be many minor enhancements made to ActiveRecord done as part of a government grant project for the Czech Technical University.

This patch adds support for using sql methods directly from ActiveRecord models. The simplest use scenario looks something like this:

class MyModel &lt; ActiveRecord::Base
  sql_method :compute_something # call SQL function my_model_compute_something
end

The most common reason why someone may want to do something like this is when they want to load a complex data structure from the database that may be impossible or expensive to load in a single step. The SQL/plpgsql function may do this easily, and return a complete set of results that the ruby end only has to convert to their correct types.

I had to extract this functionality directly from our SVN repository, and even though I was careful to include all functionality that's required for the feature to work properly, this patch is most likely not up to high standards. That said, if you can give me a list of things to improve or fix, my employer is willing to let me work on it during business hours.

I hope you'll find this worthwhile.

Thanks,
Adam

Note: A reference to the object on which the method is called is currently not passed to the SQL function. There's no specific reason for this inconsistency, and I plan to fix it as soon as there's time to work on it.</original-body>
  <latest-body>Hello,

as stated on http://groups.google.com/group/rubyonrails-core/browse_thread/thread/9cc61668656b4e24, I'm submitting the first of what could be many minor enhancements made to ActiveRecord done as part of a government grant project for the Czech Technical University.

This patch adds support for using sql methods directly from ActiveRecord models. The simplest use scenario looks something like this:

class MyModel &lt; ActiveRecord::Base
  sql_method :compute_something # call SQL function my_model_compute_something
end

The most common reason why someone may want to do something like this is when they want to load a complex data structure from the database that may be impossible or expensive to load in a single step. The SQL/plpgsql function may do this easily, and return a complete set of results that the ruby end only has to convert to their correct types.

I had to extract this functionality directly from our SVN repository, and even though I was careful to include all functionality that's required for the feature to work properly, this patch is most likely not up to high standards. That said, if you can give me a list of things to improve or fix, my employer is willing to let me work on it during business hours.

I hope you'll find this worthwhile.

Thanks,
Adam

Note: A reference to the object on which the method is called is currently not passed to the SQL function. There's no specific reason for this inconsistency, and I plan to fix it as soon as there's time to work on it.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;as stated on &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/9cc61668656b4e24&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;, I'm submitting the first of what could be many minor enhancements made to ActiveRecord done as part of a government grant project for the Czech Technical University.&lt;/p&gt;

&lt;p&gt;This patch adds support for using sql methods directly from ActiveRecord models. The simplest use scenario looks something like this:&lt;/p&gt;

&lt;p&gt;class MyModel &amp;lt; ActiveRecord::Base
  sql_method :compute_something # call SQL function my_model_compute_something
end&lt;/p&gt;

&lt;p&gt;The most common reason why someone may want to do something like this is when they want to load a complex data structure from the database that may be impossible or expensive to load in a single step. The SQL/plpgsql function may do this easily, and return a complete set of results that the ruby end only has to convert to their correct types.&lt;/p&gt;

&lt;p&gt;I had to extract this functionality directly from our SVN repository, and even though I was careful to include all functionality that's required for the feature to work properly, this patch is most likely not up to high standards. That said, if you can give me a list of things to improve or fix, my employer is willing to let me work on it during business hours.&lt;/p&gt;

&lt;p&gt;I hope you'll find this worthwhile.&lt;/p&gt;

&lt;p&gt;Thanks,
Adam&lt;/p&gt;

&lt;p&gt;Note: A reference to the object on which the method is called is currently not passed to the SQL function. There's no specific reason for this inconsistency, and I plan to fix it as soon as there's time to work on it.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hello,

as stated on http://groups.google.com/group/rubyonrails-core/browse_thread/thread/9cc61668656b4e24, I'm submitting the first of what could be many minor enhancements made to ActiveRecord done as part of a government grant project for the Czech Technical University.

This patch adds support for using sql methods directly from ActiveRecord models. The simplest use scenario looks something like this:

class MyModel &lt; ActiveRecord::Base
  sql_method :compute_something # call SQL function my_model_compute_something
end

The most common reason why someone may want to do something like this is when they want to load a complex data structure from the database that may be impossible or expensive to load in a single step. The SQL/plpgsql function may do this easily, and return a complete set of results that the ruby end only has to convert to their correct types.

I had to extract this functionality directly from our SVN repository, and even though I was careful to include all functionality that's required for the feature to work properly, this patch is most likely not up to high standards. That said, if you can give me a list of things to improve or fix, my employer is willing to let me work on it during business hours.

I hope you'll find this worthwhile.

Thanks,
Adam

Note: A reference to the object on which the method is called is currently not passed to the SQL function. There's no specific reason for this inconsistency, and I plan to fix it as soon as there's time to work on it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;as stated on &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/9cc61668656b4e24&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;, I'm submitting the first of what could be many minor enhancements made to ActiveRecord done as part of a government grant project for the Czech Technical University.&lt;/p&gt;

&lt;p&gt;This patch adds support for using sql methods directly from ActiveRecord models. The simplest use scenario looks something like this:&lt;/p&gt;

&lt;p&gt;class MyModel &amp;lt; ActiveRecord::Base
  sql_method :compute_something # call SQL function my_model_compute_something
end&lt;/p&gt;

&lt;p&gt;The most common reason why someone may want to do something like this is when they want to load a complex data structure from the database that may be impossible or expensive to load in a single step. The SQL/plpgsql function may do this easily, and return a complete set of results that the ruby end only has to convert to their correct types.&lt;/p&gt;

&lt;p&gt;I had to extract this functionality directly from our SVN repository, and even though I was careful to include all functionality that's required for the feature to work properly, this patch is most likely not up to high standards. That said, if you can give me a list of things to improve or fix, my employer is willing to let me work on it during business hours.&lt;/p&gt;

&lt;p&gt;I hope you'll find this worthwhile.&lt;/p&gt;

&lt;p&gt;Thanks,
Adam&lt;/p&gt;

&lt;p&gt;Note: A reference to the object on which the method is called is currently not passed to the SQL function. There's no specific reason for this inconsistency, and I plan to fix it as soon as there's time to work on it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-23T15:37:40+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">888</number>
      <permalink>add-sql-methods-to-models</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch</tag>
      <title>Add SQL methods to models</title>
      <updated-at type="datetime">2008-08-23T15:37:40+01:00</updated-at>
      <user-id type="integer">19437</user-id>
      <version type="integer">1</version>
      <user-name>Adam Sindelar</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/888</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It's not exactly 'Rails way' to use stored procedures. Having said that, Rails should make it simple to write such plugins nevertheless. So my suggestion is to release this feature as a plugin, and you could submit refactoring to Rails ( if needed ) to make such plugins less brittle and less hackish.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It's not exactly 'Rails way' to use stored procedures. Having said that, Rails should make it simple to write such plugins nevertheless. So my suggestion is to release this feature as a plugin, and you could submit refactoring to Rails ( if needed ) to make such plugins less brittle and less hackish.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-23T21:44:56+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">888</number>
      <permalink>add-sql-methods-to-models</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord enhancement patch</tag>
      <title>Add SQL methods to models</title>
      <updated-at type="datetime">2008-08-23T21:44:56+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/888</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Agreed. Great patch, but this is a non-core feature.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Agreed. Great patch, but this is a non-core feature.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-23T21:48:26+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- 
:state: wontfix
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">888</number>
      <permalink>add-sql-methods-to-models</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch</tag>
      <title>Add SQL methods to models</title>
      <updated-at type="datetime">2008-08-23T21:48:26+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/888</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-23T21:48:38+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">888</number>
      <permalink>add-sql-methods-to-models</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord enhancement patch</tag>
      <title>Add SQL methods to models</title>
      <updated-at type="datetime">2008-08-23T21:48:38+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/888</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>All right then, I'll make this into a plugin. However, in order to this to function properly, PostgreSQLAdapter needs to be aware of the possible schema in the name of a relation (table, function... anything...).

In Rails 2.0 ActiveRecord didn't attempt to quote table names (at least not in PostgreSQL), and everything sort of worked, but table-name-quoting introduced in ActiveRecord 2.1 broke that compatibility - so, would a patch that makes ActiveRecord aware of the schema part of a fully qualified name of a database relation be acceptable instead? It would involve changes to only several methods and would not affect any existing functionality.

Current behavior is that if we call...

set_table_table 'schema.table'

..we later get:
SELECT [...] FROM &quot;schema.table&quot;

...which the database doesn't understand. Instead we should have:
SELECT [...] FROM &quot;schema&quot;.&quot;table&quot;

The obvious question is, why would someone want to use more than one schema per database in Rails. There are a number of reasons, but the most important are:

- many database-clustering solutions work on per-schema basis; having separate schemata allows us to control which parts of the DB get synced, how often, and which are local only

- some databases (like PostgreSQL) let the admin define different sets of permissions for each schema

- sometimes, the database structure can get very large, and keeping tables logically sorted into several schemata helps not only navigating the structure, but also improves the ability to drop and load different parts of the database quickly</body>
      <body-html>&lt;div&gt;&lt;p&gt;All right then, I'll make this into a plugin. However, in order to this to function properly, PostgreSQLAdapter needs to be aware of the possible schema in the name of a relation (table, function... anything...).&lt;/p&gt;

&lt;p&gt;In Rails 2.0 ActiveRecord didn't attempt to quote table names (at least not in PostgreSQL), and everything sort of worked, but table-name-quoting introduced in ActiveRecord 2.1 broke that compatibility - so, would a patch that makes ActiveRecord aware of the schema part of a fully qualified name of a database relation be acceptable instead? It would involve changes to only several methods and would not affect any existing functionality.&lt;/p&gt;

&lt;p&gt;Current behavior is that if we call...&lt;/p&gt;

&lt;p&gt;set_table_table 'schema.table'&lt;/p&gt;

&lt;p&gt;..we later get:
SELECT [...] FROM &quot;schema.table&quot;&lt;/p&gt;

&lt;p&gt;...which the database doesn't understand. Instead we should have:
SELECT [...] FROM &quot;schema&quot;.&quot;table&quot;&lt;/p&gt;

&lt;p&gt;The obvious question is, why would someone want to use more than one schema per database in Rails. There are a number of reasons, but the most important are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;many database-clustering solutions work on per-schema basis; having separate schemata allows us to control which parts of the DB get synced, how often, and which are local only&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;some databases (like PostgreSQL) let the admin define different sets of permissions for each schema&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sometimes, the database structure can get very large, and keeping tables logically sorted into several schemata helps not only navigating the structure, but also improves the ability to drop and load different parts of the database quickly&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-23T23:23:30+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">888</number>
      <permalink>add-sql-methods-to-models</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord enhancement patch</tag>
      <title>Add SQL methods to models</title>
      <updated-at type="datetime">2008-08-23T23:23:30+01:00</updated-at>
      <user-id type="integer">19437</user-id>
      <version type="integer">5</version>
      <user-name>Adam Sindelar</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/888</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yes, that's reasonable. The MySQL adapter already does.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, that's reasonable. The MySQL adapter already does.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-24T00:33:20+01:00</created-at>
      <creator-id type="integer">19437</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">888</number>
      <permalink>add-sql-methods-to-models</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord enhancement patch</tag>
      <title>Add SQL methods to models</title>
      <updated-at type="datetime">2008-08-24T00:33:20+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">6</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Adam Sindelar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/888</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>78bea401bd1143166cf63c6054fd23ff23d918b0</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-23T15:37:39+01:00</created-at>
      <filename>rails_patch_sql_methods.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">41080</id>
      <size type="integer">9925</size>
      <uploader-id type="integer">19437</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/41080/rails_patch_sql_methods.diff</url>
    </attachment>
  </attachments>
</ticket>
