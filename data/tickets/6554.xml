<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19117</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-10T10:06:24+00:00</created-at>
  <creator-id type="integer">31422</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6554</number>
  <permalink>round-with-precission-should-be-available-to-all-numeric-objects</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>activesupport improvement round ruby18</tag>
  <title>round with precission should be available to all Numeric objects</title>
  <updated-at type="datetime">2011-03-10T12:07:21+00:00</updated-at>
  <user-id type="integer">31422</user-id>
  <version type="integer">4</version>
  <user-name>Wojciech Wn&#281;trzak</user-name>
  <creator-name>Wojciech Wn&#281;trzak</creator-name>
  <assigned-user-name>Josh Kalderimis</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6554</url>
  <priority-name>Low</priority-name>
  <original-body>To be consistent with Ruby 1.9 where we can call round with precision argument on any Numeric object, rounding extension from activesupport should be available to all Numeric subclasses, not only in Float.

After this commit: https://github.com/rails/rails/commit/532b77077fc97211cb9f8d047116a72b8cd286a7 this is done only for ruby versions less than 1.9.
Calling round with precision on Fixnum is useful with negative precision:
@@@ ruby
 #=&gt; 22.round(-1)
 #=&gt; 20
@@@

I tried to move this extension from float to numeric, but it doesn't work since all subclasses of Numeric has own implementation of round method.
Solution can be to extend all classes directly: Fixnum, Float, Bignum, etc, but I'm not sure if this is right.
Any suggestions?</original-body>
  <latest-body>To be consistent with Ruby 1.9 where we can call round with precision argument on any Numeric object, rounding extension from activesupport should be available to all Numeric subclasses, not only in Float.

After this commit: https://github.com/rails/rails/commit/532b77077fc97211cb9f8d047116a72b8cd286a7 this is done only for ruby versions less than 1.9.
Calling round with precision on Fixnum is useful with negative precision:
@@@ ruby
 #=&gt; 22.round(-1)
 #=&gt; 20
@@@

I tried to move this extension from float to numeric, but it doesn't work since all subclasses of Numeric has own implementation of round method.
Solution can be to extend all classes directly: Fixnum, Float, Bignum, etc, but I'm not sure if this is right.
Any suggestions?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;To be consistent with Ruby 1.9 where we can call round with
precision argument on any Numeric object, rounding extension from
activesupport should be available to all Numeric subclasses, not
only in Float.&lt;/p&gt;
&lt;p&gt;After this commit: &lt;a href=
&quot;https://github.com/rails/rails/commit/532b77077fc97211cb9f8d047116a72b8cd286a7&quot;&gt;
https://github.com/rails/rails/commit/532b77077fc97211cb9f8d047116a...&lt;/a&gt;
this is done only for ruby versions less than 1.9.&lt;br&gt;
Calling round with precision on Fixnum is useful with negative
precision:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt; #=&amp;gt; 22.round(-1)
 #=&amp;gt; 20&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I tried to move this extension from float to numeric, but it
doesn't work since all subclasses of Numeric has own implementation
of round method.&lt;br&gt;
Solution can be to extend all classes directly: Fixnum, Float,
Bignum, etc, but I'm not sure if this is right.&lt;br&gt;
Any suggestions?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>To be consistent with Ruby 1.9 where we can call round with precision argument on any Numeric object, rounding extension from activesupport should be available to all Numeric subclasses, not only in Float.

After this commit: https://github.com/rails/rails/commit/532b77077fc97211cb9f8d047116a72b8cd286a7 this is done only for ruby versions less than 1.9.
Calling round with precision on Fixnum is useful with negative precision:
@@@ ruby
 #=&gt; 22.round(-1)
 #=&gt; 20
@@@

I tried to move this extension from float to numeric, but it doesn't work since all subclasses of Numeric has own implementation of round method.
Solution can be to extend all classes directly: Fixnum, Float, Bignum, etc, but I'm not sure if this is right.
Any suggestions?</body>
      <body-html>&lt;div&gt;&lt;p&gt;To be consistent with Ruby 1.9 where we can call round with
precision argument on any Numeric object, rounding extension from
activesupport should be available to all Numeric subclasses, not
only in Float.&lt;/p&gt;
&lt;p&gt;After this commit: &lt;a href=
&quot;https://github.com/rails/rails/commit/532b77077fc97211cb9f8d047116a72b8cd286a7&quot;&gt;
https://github.com/rails/rails/commit/532b77077fc97211cb9f8d047116a...&lt;/a&gt;
this is done only for ruby versions less than 1.9.&lt;br&gt;
Calling round with precision on Fixnum is useful with negative
precision:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt; #=&amp;gt; 22.round(-1)
 #=&amp;gt; 20&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I tried to move this extension from float to numeric, but it
doesn't work since all subclasses of Numeric has own implementation
of round method.&lt;br&gt;
Solution can be to extend all classes directly: Fixnum, Float,
Bignum, etc, but I'm not sure if this is right.&lt;br&gt;
Any suggestions?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-10T10:06:24+00:00</created-at>
      <creator-id type="integer">31422</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6554</number>
      <permalink>round-with-precission-should-be-available-to-all-numeric-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport improvement round ruby18</tag>
      <title>round with precission should be available to all Numeric objects</title>
      <updated-at type="datetime">2011-03-10T10:06:26+00:00</updated-at>
      <user-id type="integer">31422</user-id>
      <version type="integer">1</version>
      <user-name>Wojciech Wn&#281;trzak</user-name>
      <creator-name>Wojciech Wn&#281;trzak</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6554</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19117</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Wojciech,

I think this patch has merit. The first step is to create some failing test cases, and then to take a stab at some code. 

Have a look at the present extensions as the implementation is different for each class type.

If you have any questions just ping me. 

Josh</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Wojciech,&lt;/p&gt;
&lt;p&gt;I think this patch has merit. The first step is to create some
failing test cases, and then to take a stab at some code.&lt;/p&gt;
&lt;p&gt;Have a look at the present extensions as the implementation is
different for each class type.&lt;/p&gt;
&lt;p&gt;If you have any questions just ping me.&lt;/p&gt;
&lt;p&gt;Josh&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-10T10:54:13+00:00</created-at>
      <creator-id type="integer">31422</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6554</number>
      <permalink>round-with-precission-should-be-available-to-all-numeric-objects</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport improvement round ruby18</tag>
      <title>round with precission should be available to all Numeric objects</title>
      <updated-at type="datetime">2011-03-10T10:54:23+00:00</updated-at>
      <user-id type="integer">19117</user-id>
      <version type="integer">2</version>
      <user-name>Josh Kalderimis</user-name>
      <creator-name>Wojciech Wn&#281;trzak</creator-name>
      <assigned-user-name>Josh Kalderimis</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6554</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19117</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There are only Integer and Float as Numeric subclasses (Bignum and Fixnum are subclasses of Integer), so adding rounding extension to Integer should be enough.
However after playing a while with ruby 1.9.2, there are strange results:
@@@ ruby
ruby-1.9.2-p180 :034 &gt; (66**10).class
 =&gt; Fixnum 
ruby-1.9.2-p180 :035 &gt; 66**10
 =&gt; 1568336880910795776 
ruby-1.9.2-p180 :036 &gt; (66**10).round(2)
 =&gt; 1568336880910795800.0 
ruby-1.9.2-p180 :037 &gt; (77**10).class
 =&gt; Bignum 
ruby-1.9.2-p180 :038 &gt; 77**10
 =&gt; 7326680472586200649 
ruby-1.9.2-p180 :039 &gt; (77**10).round(2)
 =&gt; 7326680472586201000.0
@@@

After extending ruby 1.8.7 Integer class with round method (same as for Float):
@@@ ruby
ree-1.8.7-2011.03 :020 &gt; (66**10).class
 =&gt; Fixnum 
ree-1.8.7-2011.03 :021 &gt; 66**10
 =&gt; 1568336880910795776 
ree-1.8.7-2011.03 :022 &gt; (66**10).round(2)
 =&gt; 1.5683368809108e+18 
ree-1.8.7-2011.03 :023 &gt; (77**10).class
 =&gt; Bignum 
ree-1.8.7-2011.03 :024 &gt; 77**10
 =&gt; 7326680472586200649 
ree-1.8.7-2011.03 :025 &gt; (77**10).round(2)
 =&gt; 7.3266804725862e+18
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;There are only Integer and Float as Numeric subclasses (Bignum
and Fixnum are subclasses of Integer), so adding rounding extension
to Integer should be enough.&lt;br&gt;
However after playing a while with ruby 1.9.2, there are strange
results:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;ruby-1.9.2-p180 :034 &amp;gt; (66**10).class
 =&amp;gt; Fixnum 
ruby-1.9.2-p180 :035 &amp;gt; 66**10
 =&amp;gt; 1568336880910795776 
ruby-1.9.2-p180 :036 &amp;gt; (66**10).round(2)
 =&amp;gt; 1568336880910795800.0 
ruby-1.9.2-p180 :037 &amp;gt; (77**10).class
 =&amp;gt; Bignum 
ruby-1.9.2-p180 :038 &amp;gt; 77**10
 =&amp;gt; 7326680472586200649 
ruby-1.9.2-p180 :039 &amp;gt; (77**10).round(2)
 =&amp;gt; 7326680472586201000.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After extending ruby 1.8.7 Integer class with round method (same
as for Float):&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;ree-1.8.7-2011.03 :020 &amp;gt; (66**10).class
 =&amp;gt; Fixnum 
ree-1.8.7-2011.03 :021 &amp;gt; 66**10
 =&amp;gt; 1568336880910795776 
ree-1.8.7-2011.03 :022 &amp;gt; (66**10).round(2)
 =&amp;gt; 1.5683368809108e+18 
ree-1.8.7-2011.03 :023 &amp;gt; (77**10).class
 =&amp;gt; Bignum 
ree-1.8.7-2011.03 :024 &amp;gt; 77**10
 =&amp;gt; 7326680472586200649 
ree-1.8.7-2011.03 :025 &amp;gt; (77**10).round(2)
 =&amp;gt; 7.3266804725862e+18&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-10T11:29:32+00:00</created-at>
      <creator-id type="integer">31422</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6554</number>
      <permalink>round-with-precission-should-be-available-to-all-numeric-objects</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport improvement round ruby18</tag>
      <title>round with precission should be available to all Numeric objects</title>
      <updated-at type="datetime">2011-03-10T11:29:40+00:00</updated-at>
      <user-id type="integer">31422</user-id>
      <version type="integer">3</version>
      <user-name>Wojciech Wn&#281;trzak</user-name>
      <creator-name>Wojciech Wn&#281;trzak</creator-name>
      <assigned-user-name>Josh Kalderimis</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6554</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19117</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm adding a patch with rounding extension to Integer.
There is a little difference to Float extension - at the end I'm calling `to_i` to be sure that Float is not returned (in Ruby 1.9 class is not changed after calling round).</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm adding a patch with rounding extension to Integer.&lt;br&gt;
There is a little difference to Float extension - at the end I'm
calling &lt;code&gt;to_i&lt;/code&gt; to be sure that Float is not returned (in
Ruby 1.9 class is not changed after calling round).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-10T12:07:14+00:00</created-at>
      <creator-id type="integer">31422</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6554</number>
      <permalink>round-with-precission-should-be-available-to-all-numeric-objects</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport improvement round ruby18</tag>
      <title>round with precission should be available to all Numeric objects</title>
      <updated-at type="datetime">2011-03-10T12:07:21+00:00</updated-at>
      <user-id type="integer">31422</user-id>
      <version type="integer">4</version>
      <user-name>Wojciech Wn&#281;trzak</user-name>
      <creator-name>Wojciech Wn&#281;trzak</creator-name>
      <assigned-user-name>Josh Kalderimis</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6554</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>449e580ca8ecc820f78c50b140b0dd535c0a2877</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-10T12:07:14+00:00</created-at>
      <filename>add_rounding_extension_to_integ.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">952114</id>
      <size type="integer">2902</size>
      <uploader-id type="integer">31422</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/952114/add_rounding_extension_to_integ.diff</url>
    </attachment>
  </attachments>
</ticket>
