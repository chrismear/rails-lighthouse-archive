<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-05-30T17:40:20+01:00</created-at>
  <creator-id type="integer">100395</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4733</number>
  <permalink>dangerous-association-modifications-on-cloned-activerecord-objects</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>activerecord &quot;activerecord rails3&quot; associations clone rails3</tag>
  <title>Dangerous association modifications on cloned ActiveRecord objects.</title>
  <updated-at type="datetime">2010-06-22T20:32:07+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">2</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Craig S Walker</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4733</url>
  <priority-name>Low</priority-name>
  <original-body>When you clone an ActiveRecord object, the association arrays for the original and cloned objects are inextricably linked. Modifications to one impact the other, and I cannot find any means to prevent this.

Say we have two models, Foo and Bar. Foo has_many Bar. If I have foo1 and clone it to make foo2, changes to foo1.bar are reflected in foo2.bar. Assigning a new instance of Array to Foo.bar does not change this.

    foo1 = Foo.new
    bar = Bar.new
    foo1.bars &lt;&lt; bar
    foo2 = foo1.clone
    foo2.bars.includes? bar    # true
    foo1.bars.clear
    foo2.bars.includes? bar    # now false

    foo1.bars &lt;&lt; bar
    foo2.bars.includes? bar    # true
    foo2.bars = []
    foo2.bars.includes? b    # now false
    foo1.bars.includes? b    # now also false

Also, while I was investigating this, I noticed that `foo1.bars.equal? foo2.bars` returns false, but `foo1.bars.object_id == foo2.bars.object_id` returns true. Since the two associations certainly behave like they're the same object, this suggests that .equal? is returning an incorrect value.



I originally posted this issue to &lt;a href=&quot;http://stackoverflow.com/questions/2937533/modifying-association-arrays-on-cloned-activerecord-objects&quot;&gt;Stack Overflow&lt;/a&gt;. On there I got a &lt;a href=&quot;http://stackoverflow.com/questions/2937533/modifying-association-arrays-on-cloned-activerecord-objects/2937615#2937615&quot;&gt;response from another user&lt;/a&gt; that suggests that this is a Rails 3-specific problem. I'm using Rails 3 Beta 2 on MRI 1.8.7.</original-body>
  <latest-body>When you clone an ActiveRecord object, the association arrays for the original and cloned objects are inextricably linked. Modifications to one impact the other, and I cannot find any means to prevent this.

Say we have two models, Foo and Bar. Foo has_many Bar. If I have foo1 and clone it to make foo2, changes to foo1.bar are reflected in foo2.bar. Assigning a new instance of Array to Foo.bar does not change this.

    foo1 = Foo.new
    bar = Bar.new
    foo1.bars &lt;&lt; bar
    foo2 = foo1.clone
    foo2.bars.includes? bar    # true
    foo1.bars.clear
    foo2.bars.includes? bar    # now false

    foo1.bars &lt;&lt; bar
    foo2.bars.includes? bar    # true
    foo2.bars = []
    foo2.bars.includes? b    # now false
    foo1.bars.includes? b    # now also false

Also, while I was investigating this, I noticed that `foo1.bars.equal? foo2.bars` returns false, but `foo1.bars.object_id == foo2.bars.object_id` returns true. Since the two associations certainly behave like they're the same object, this suggests that .equal? is returning an incorrect value.



I originally posted this issue to &lt;a href=&quot;http://stackoverflow.com/questions/2937533/modifying-association-arrays-on-cloned-activerecord-objects&quot;&gt;Stack Overflow&lt;/a&gt;. On there I got a &lt;a href=&quot;http://stackoverflow.com/questions/2937533/modifying-association-arrays-on-cloned-activerecord-objects/2937615#2937615&quot;&gt;response from another user&lt;/a&gt; that suggests that this is a Rails 3-specific problem. I'm using Rails 3 Beta 2 on MRI 1.8.7.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When you clone an ActiveRecord object, the association arrays
for the original and cloned objects are inextricably linked.
Modifications to one impact the other, and I cannot find any means
to prevent this.&lt;/p&gt;
&lt;p&gt;Say we have two models, Foo and Bar. Foo has_many Bar. If I have
foo1 and clone it to make foo2, changes to foo1.bar are reflected
in foo2.bar. Assigning a new instance of Array to Foo.bar does not
change this.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;foo1 = Foo.new
bar = Bar.new
foo1.bars &amp;lt;&amp;lt; bar
foo2 = foo1.clone
foo2.bars.includes? bar    # true
foo1.bars.clear
foo2.bars.includes? bar    # now false

foo1.bars &amp;lt;&amp;lt; bar
foo2.bars.includes? bar    # true
foo2.bars = []
foo2.bars.includes? b    # now false
foo1.bars.includes? b    # now also false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Also, while I was investigating this, I noticed that
&lt;code&gt;foo1.bars.equal? foo2.bars&lt;/code&gt; returns false, but
&lt;code&gt;foo1.bars.object_id == foo2.bars.object_id&lt;/code&gt; returns
true. Since the two associations certainly behave like they're the
same object, this suggests that .equal? is returning an incorrect
value.&lt;/p&gt;
&lt;p&gt;I originally posted this issue to &lt;a href=
&quot;http://stackoverflow.com/questions/2937533/modifying-association-arrays-on-cloned-activerecord-objects&quot;&gt;
Stack Overflow&lt;/a&gt;. On there I got a &lt;a href=
&quot;http://stackoverflow.com/questions/2937533/modifying-association-arrays-on-cloned-activerecord-objects/2937615#2937615&quot;&gt;
response from another user&lt;/a&gt; that suggests that this is a Rails
3-specific problem. I'm using Rails 3 Beta 2 on MRI 1.8.7.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When you clone an ActiveRecord object, the association arrays for the original and cloned objects are inextricably linked. Modifications to one impact the other, and I cannot find any means to prevent this.

Say we have two models, Foo and Bar. Foo has_many Bar. If I have foo1 and clone it to make foo2, changes to foo1.bar are reflected in foo2.bar. Assigning a new instance of Array to Foo.bar does not change this.

    foo1 = Foo.new
    bar = Bar.new
    foo1.bars &lt;&lt; bar
    foo2 = foo1.clone
    foo2.bars.includes? bar    # true
    foo1.bars.clear
    foo2.bars.includes? bar    # now false

    foo1.bars &lt;&lt; bar
    foo2.bars.includes? bar    # true
    foo2.bars = []
    foo2.bars.includes? b    # now false
    foo1.bars.includes? b    # now also false

Also, while I was investigating this, I noticed that `foo1.bars.equal? foo2.bars` returns false, but `foo1.bars.object_id == foo2.bars.object_id` returns true. Since the two associations certainly behave like they're the same object, this suggests that .equal? is returning an incorrect value.



I originally posted this issue to &lt;a href=&quot;http://stackoverflow.com/questions/2937533/modifying-association-arrays-on-cloned-activerecord-objects&quot;&gt;Stack Overflow&lt;/a&gt;. On there I got a &lt;a href=&quot;http://stackoverflow.com/questions/2937533/modifying-association-arrays-on-cloned-activerecord-objects/2937615#2937615&quot;&gt;response from another user&lt;/a&gt; that suggests that this is a Rails 3-specific problem. I'm using Rails 3 Beta 2 on MRI 1.8.7.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When you clone an ActiveRecord object, the association arrays
for the original and cloned objects are inextricably linked.
Modifications to one impact the other, and I cannot find any means
to prevent this.&lt;/p&gt;
&lt;p&gt;Say we have two models, Foo and Bar. Foo has_many Bar. If I have
foo1 and clone it to make foo2, changes to foo1.bar are reflected
in foo2.bar. Assigning a new instance of Array to Foo.bar does not
change this.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;foo1 = Foo.new
bar = Bar.new
foo1.bars &amp;lt;&amp;lt; bar
foo2 = foo1.clone
foo2.bars.includes? bar    # true
foo1.bars.clear
foo2.bars.includes? bar    # now false

foo1.bars &amp;lt;&amp;lt; bar
foo2.bars.includes? bar    # true
foo2.bars = []
foo2.bars.includes? b    # now false
foo1.bars.includes? b    # now also false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Also, while I was investigating this, I noticed that
&lt;code&gt;foo1.bars.equal? foo2.bars&lt;/code&gt; returns false, but
&lt;code&gt;foo1.bars.object_id == foo2.bars.object_id&lt;/code&gt; returns
true. Since the two associations certainly behave like they're the
same object, this suggests that .equal? is returning an incorrect
value.&lt;/p&gt;
&lt;p&gt;I originally posted this issue to &lt;a href=
&quot;http://stackoverflow.com/questions/2937533/modifying-association-arrays-on-cloned-activerecord-objects&quot;&gt;
Stack Overflow&lt;/a&gt;. On there I got a &lt;a href=
&quot;http://stackoverflow.com/questions/2937533/modifying-association-arrays-on-cloned-activerecord-objects/2937615#2937615&quot;&gt;
response from another user&lt;/a&gt; that suggests that this is a Rails
3-specific problem. I'm using Rails 3 Beta 2 on MRI 1.8.7.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-30T17:40:20+01:00</created-at>
      <creator-id type="integer">100395</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4733</number>
      <permalink>dangerous-association-modifications-on-cloned-activerecord-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord &quot;activerecord rails3&quot; associations clone rails3</tag>
      <title>Dangerous association modifications on cloned ActiveRecord objects.</title>
      <updated-at type="datetime">2010-05-30T17:40:22+01:00</updated-at>
      <user-id type="integer">100395</user-id>
      <version type="integer">1</version>
      <user-name>Craig S Walker</user-name>
      <creator-name>Craig S Walker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4733</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>#4894</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;/projects/8994/tickets/4894&quot; title=
&quot;Ticket #4894&quot;&gt;#4894&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-22T20:32:03+01:00</created-at>
      <creator-id type="integer">100395</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4733</number>
      <permalink>dangerous-association-modifications-on-cloned-activerecord-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>activerecord &quot;activerecord rails3&quot; associations clone rails3</tag>
      <title>Dangerous association modifications on cloned ActiveRecord objects.</title>
      <updated-at type="datetime">2010-06-22T20:32:07+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Craig S Walker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4733</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
