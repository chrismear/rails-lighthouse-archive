<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-10T10:35:41+00:00</created-at>
  <creator-id type="integer">36216</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1349</number>
  <permalink>named-scope-with-group-by-bug</permalink>
  <priority type="integer">750</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord associations group has_many_through_association</tag>
  <title>named scope with group by bug?</title>
  <updated-at type="datetime">2011-04-13T15:09:19+01:00</updated-at>
  <user-id type="integer">17461</user-id>
  <version type="integer">16</version>
  <user-name>Chris Hapgood</user-name>
  <creator-name>JensC</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Hi all,

I have a many to many relation that uses named_scopes with a group option. Executing the named scope returns the correct results. Using the named_scope with count however ignores the group by part of the query.

Attached is an example that shows the effect. Hopefully this is a bug and not a feature I should know about.

Thanks again for the great work.
Cheers
Jens</original-body>
  <latest-body>Hi all,

I have a many to many relation that uses named_scopes with a group option. Executing the named scope returns the correct results. Using the named_scope with count however ignores the group by part of the query.

Attached is an example that shows the effect. Hopefully this is a bug and not a feature I should know about.

Thanks again for the great work.
Cheers
Jens</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;I have a many to many relation that uses named_scopes with a
group option. Executing the named scope returns the correct
results. Using the named_scope with count however ignores the group
by part of the query.&lt;/p&gt;
&lt;p&gt;Attached is an example that shows the effect. Hopefully this is
a bug and not a feature I should know about.&lt;/p&gt;
&lt;p&gt;Thanks again for the great work. Cheers Jens&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi all,

I have a many to many relation that uses named_scopes with a group option. Executing the named scope returns the correct results. Using the named_scope with count however ignores the group by part of the query.

Attached is an example that shows the effect. Hopefully this is a bug and not a feature I should know about.

Thanks again for the great work.
Cheers
Jens</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;I have a many to many relation that uses named_scopes with a
group option. Executing the named scope returns the correct
results. Using the named_scope with count however ignores the group
by part of the query.&lt;/p&gt;
&lt;p&gt;Attached is an example that shows the effect. Hopefully this is
a bug and not a feature I should know about.&lt;/p&gt;
&lt;p&gt;Thanks again for the great work. Cheers Jens&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-10T10:35:42+00:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2008-11-10T10:35:47+00:00</updated-at>
      <user-id type="integer">36216</user-id>
      <version type="integer">1</version>
      <user-name>JensC</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yes, I see this is happening also in 2.2 branch. 

Problem is that &quot;count&quot; method doesn't work properly with named scopes when &quot;group by&quot; clause is specified.

Another example easy to reproduce:

class Person &lt; ActiveRecord::Base
  has_many :properties
    named_scope :with_2_props, :include =&gt; [:properties], :conditions =&gt; [&quot;properties.name in ('admin', 'user')&quot;], :group =&gt; &quot;people.id having COUNT(properties.id) = 2&quot;
end

class Property &lt; ActiveRecord::Base
  belongs_to :person
end

people = Person.with_2_props

&gt; SELECT `people`.`id` AS t0_r0, `people`.`name` AS t0_r1, `people`.`created_at` AS t0_r2, `people`.`updated_at` AS t0_r3, `properties`.`id` AS t1_r0, `properties`.`person_id` AS t1_r1, `properties`.`name` AS t1_r2, `properties`.`created_at` AS t1_r3,`properties`.`updated_at` AS t1_r4 FROM `people` LEFT OUTER JOIN `properties` ON properties.person_id = people.id WHERE (properties.name in ('admin', 'user')) GROUP BY people.id having COUNT(properties.id) = 2

people.size # 2, proper answer

Person.with_2_props.count # 3, wrong answer
&gt; SELECT count(DISTINCT `people`.id) AS count_all FROM `people` LEFT OUTER JOIN `properties` ON properties.person_id = people.id WHERE (properties.name in ('admin', 'user'))

As you see, generated SQL query has lost it's GROUP BY clause.

I am thinking about solution, and I think that one of possible is to change AR count() method so that it wraps records around another select in case named scope was specified inside. Such result query would be for above example:

Person.with_2_props.count
&gt; select count(count_all) from (SELECT count(DISTINCT `people`.id) AS count_all FROM `people`LEFT OUTER JOIN `properties` ON properties.person_id = people.id WHERE (properties.name in ('admin', 'user')) group by people.id having count(properties.id) = 2 ) as virtual_table;

But I don't have an idea if this is acceptable and meets ActiveRecord standards.

I would be thankful if any of core devs could advise me here.

Best,
Hubert</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, I see this is happening also in 2.2 branch.&lt;/p&gt;
&lt;p&gt;Problem is that &quot;count&quot; method doesn't work properly with named
scopes when &quot;group by&quot; clause is specified.&lt;/p&gt;
&lt;p&gt;Another example easy to reproduce:&lt;/p&gt;
&lt;p&gt;class Person &amp;lt; ActiveRecord::Base has_many :properties&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;named_scope :with_2_props, :include =&amp;gt; [:properties], :conditions =&amp;gt; [&quot;properties.name in ('admin', 'user')&quot;], :group =&amp;gt; &quot;people.id having COUNT(properties.id) = 2&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;class Property &amp;lt; ActiveRecord::Base belongs_to :person
end&lt;/p&gt;
&lt;p&gt;people = Person.with_2_props&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SELECT &lt;code&gt;people&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; AS t0_r0,
&lt;code&gt;people&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; AS t0_r1,
&lt;code&gt;people&lt;/code&gt;.&lt;code&gt;created_at&lt;/code&gt; AS t0_r2,
&lt;code&gt;people&lt;/code&gt;.&lt;code&gt;updated_at&lt;/code&gt; AS t0_r3,
&lt;code&gt;properties&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; AS t1_r0,
&lt;code&gt;properties&lt;/code&gt;.&lt;code&gt;person_id&lt;/code&gt; AS t1_r1,
&lt;code&gt;properties&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; AS t1_r2,
&lt;code&gt;properties&lt;/code&gt;.&lt;code&gt;created_at&lt;/code&gt; AS
t1_r3,&lt;code&gt;properties&lt;/code&gt;.&lt;code&gt;updated_at&lt;/code&gt; AS t1_r4 FROM
&lt;code&gt;people&lt;/code&gt; LEFT OUTER JOIN &lt;code&gt;properties&lt;/code&gt; ON
properties.person_id = people.id WHERE (properties.name in
('admin', 'user')) GROUP BY people.id having COUNT(properties.id) =
2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;people.size # 2, proper answer&lt;/p&gt;
&lt;p&gt;Person.with_2_props.count # 3, wrong answer&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SELECT count(DISTINCT &lt;code&gt;people&lt;/code&gt;.id) AS count_all FROM
&lt;code&gt;people&lt;/code&gt; LEFT OUTER JOIN &lt;code&gt;properties&lt;/code&gt; ON
properties.person_id = people.id WHERE (properties.name in
('admin', 'user'))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you see, generated SQL query has lost it's GROUP BY
clause.&lt;/p&gt;
&lt;p&gt;I am thinking about solution, and I think that one of possible
is to change AR count() method so that it wraps records around
another select in case named scope was specified inside. Such
result query would be for above example:&lt;/p&gt;
&lt;p&gt;Person.with_2_props.count&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;select count(count_all) from (SELECT count(DISTINCT
&lt;code&gt;people&lt;/code&gt;.id) AS count_all FROM &lt;code&gt;people&lt;/code&gt;LEFT
OUTER JOIN &lt;code&gt;properties&lt;/code&gt; ON properties.person_id =
people.id WHERE (properties.name in ('admin', 'user')) group by
people.id having count(properties.id) = 2 ) as virtual_table;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But I don't have an idea if this is acceptable and meets
ActiveRecord standards.&lt;/p&gt;
&lt;p&gt;I would be thankful if any of core devs could advise me
here.&lt;/p&gt;
&lt;p&gt;Best, Hubert&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-12T11:11:48+00:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2008-11-12T11:11:49+00:00</updated-at>
      <user-id type="integer">37228</user-id>
      <version type="integer">2</version>
      <user-name>Hubert &#321;&#281;picki</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yes, I see this is happening also in 2.2 branch. 

Problem is that &quot;count&quot; method doesn't work properly with named scopes when &quot;group by&quot; clause is specified.

Another example easy to reproduce:

class Person &lt; ActiveRecord::Base
  has_many :properties
    named_scope :with_2_props, :include =&gt; [:properties], :conditions =&gt; [&quot;properties.name in ('admin', 'user')&quot;], :group =&gt; &quot;people.id having COUNT(properties.id) = 2&quot;
end

class Property &lt; ActiveRecord::Base
  belongs_to :person
end

people = Person.with_2_props

&gt; SELECT `people`.`id` AS t0_r0, `people`.`name` AS t0_r1, `people`.`created_at` AS t0_r2, `people`.`updated_at` AS t0_r3, `properties`.`id` AS t1_r0, `properties`.`person_id` AS t1_r1, `properties`.`name` AS t1_r2, `properties`.`created_at` AS t1_r3,`properties`.`updated_at` AS t1_r4 FROM `people` LEFT OUTER JOIN `properties` ON properties.person_id = people.id WHERE (properties.name in ('admin', 'user')) GROUP BY people.id having COUNT(properties.id) = 2

people.size # 2, proper answer

Person.with_2_props.count # 3, wrong answer
&gt; SELECT count(DISTINCT `people`.id) AS count_all FROM `people` LEFT OUTER JOIN `properties` ON properties.person_id = people.id WHERE (properties.name in ('admin', 'user'))

As you see, generated SQL query has lost it's GROUP BY clause.

I am thinking about solution, and I think that one of possible is to change AR count() method so that it wraps records around another select in case named scope was specified inside. Such result query would be for above example:

Person.with_2_props.count
&gt; select count(count_all) from (SELECT count(DISTINCT `people`.id) AS count_all FROM `people`LEFT OUTER JOIN `properties` ON properties.person_id = people.id WHERE (properties.name in ('admin', 'user')) group by people.id having count(properties.id) = 2 ) as virtual_table;

But I don't have an idea if this is acceptable and meets ActiveRecord standards.

I would be thankful if any of core devs could advise me here.


UPDATE: this issue appears to be related with possible fix (didn't test it) http://rails.lighthouseapp.com/projects/8994/tickets/1334-count-calculations-should-respect-scoped-selects

Best,
Hubert</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, I see this is happening also in 2.2 branch.&lt;/p&gt;
&lt;p&gt;Problem is that &quot;count&quot; method doesn't work properly with named
scopes when &quot;group by&quot; clause is specified.&lt;/p&gt;
&lt;p&gt;Another example easy to reproduce:&lt;/p&gt;
&lt;p&gt;class Person &amp;lt; ActiveRecord::Base has_many :properties&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;named_scope :with_2_props, :include =&amp;gt; [:properties], :conditions =&amp;gt; [&quot;properties.name in ('admin', 'user')&quot;], :group =&amp;gt; &quot;people.id having COUNT(properties.id) = 2&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;class Property &amp;lt; ActiveRecord::Base belongs_to :person
end&lt;/p&gt;
&lt;p&gt;people = Person.with_2_props&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SELECT &lt;code&gt;people&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; AS t0_r0,
&lt;code&gt;people&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; AS t0_r1,
&lt;code&gt;people&lt;/code&gt;.&lt;code&gt;created_at&lt;/code&gt; AS t0_r2,
&lt;code&gt;people&lt;/code&gt;.&lt;code&gt;updated_at&lt;/code&gt; AS t0_r3,
&lt;code&gt;properties&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; AS t1_r0,
&lt;code&gt;properties&lt;/code&gt;.&lt;code&gt;person_id&lt;/code&gt; AS t1_r1,
&lt;code&gt;properties&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt; AS t1_r2,
&lt;code&gt;properties&lt;/code&gt;.&lt;code&gt;created_at&lt;/code&gt; AS
t1_r3,&lt;code&gt;properties&lt;/code&gt;.&lt;code&gt;updated_at&lt;/code&gt; AS t1_r4 FROM
&lt;code&gt;people&lt;/code&gt; LEFT OUTER JOIN &lt;code&gt;properties&lt;/code&gt; ON
properties.person_id = people.id WHERE (properties.name in
('admin', 'user')) GROUP BY people.id having COUNT(properties.id) =
2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;people.size # 2, proper answer&lt;/p&gt;
&lt;p&gt;Person.with_2_props.count # 3, wrong answer&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SELECT count(DISTINCT &lt;code&gt;people&lt;/code&gt;.id) AS count_all FROM
&lt;code&gt;people&lt;/code&gt; LEFT OUTER JOIN &lt;code&gt;properties&lt;/code&gt; ON
properties.person_id = people.id WHERE (properties.name in
('admin', 'user'))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you see, generated SQL query has lost it's GROUP BY
clause.&lt;/p&gt;
&lt;p&gt;I am thinking about solution, and I think that one of possible
is to change AR count() method so that it wraps records around
another select in case named scope was specified inside. Such
result query would be for above example:&lt;/p&gt;
&lt;p&gt;Person.with_2_props.count&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;select count(count_all) from (SELECT count(DISTINCT
&lt;code&gt;people&lt;/code&gt;.id) AS count_all FROM &lt;code&gt;people&lt;/code&gt;LEFT
OUTER JOIN &lt;code&gt;properties&lt;/code&gt; ON properties.person_id =
people.id WHERE (properties.name in ('admin', 'user')) group by
people.id having count(properties.id) = 2 ) as virtual_table;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But I don't have an idea if this is acceptable and meets
ActiveRecord standards.&lt;/p&gt;
&lt;p&gt;I would be thankful if any of core devs could advise me
here.&lt;/p&gt;
&lt;p&gt;UPDATE: this issue appears to be related with possible fix
(didn't test it) &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/1334-count-calculations-should-respect-scoped-selects&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best, Hubert&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-12T11:20:07+00:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2008-11-12T11:20:13+00:00</updated-at>
      <user-id type="integer">37228</user-id>
      <version type="integer">3</version>
      <user-name>Hubert &#321;&#281;picki</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Hubert,

Yep, thats exactly the bug I have mentioned in my example and it exists in 2.1.2 too. It would be of course great to see this fixed in the 2.2 release. However, just in case, is there an easy way to ask the named scope what sql statement it produces? That would give me a handle to find a wrok-around.

Again thanx a lot
Jens</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Hubert,&lt;/p&gt;
&lt;p&gt;Yep, thats exactly the bug I have mentioned in my example and it
exists in 2.1.2 too. It would be of course great to see this fixed
in the 2.2 release. However, just in case, is there an easy way to
ask the named scope what sql statement it produces? That would give
me a handle to find a wrok-around.&lt;/p&gt;
&lt;p&gt;Again thanx a lot Jens&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-17T14:22:26+00:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2008-11-17T14:22:28+00:00</updated-at>
      <user-id type="integer">36216</user-id>
      <version type="integer">4</version>
      <user-name>JensC</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Jens,

You can easily see SQL queries generated in log files. I also think that if you operate from Rails console, and have server started in other window (like mongrel), you can see detailed output there too.

I have figured out that a bug is related to that AR's calculations.rb (whare for example count() is defined) file processes queries much differend than calling find() method - it has even additional params related to grouping, like :having =&gt; &quot;something&quot;. 

I don't feel like I know AR internals enough to change these, so I gave up for now.

Best,
H.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Jens,&lt;/p&gt;
&lt;p&gt;You can easily see SQL queries generated in log files. I also
think that if you operate from Rails console, and have server
started in other window (like mongrel), you can see detailed output
there too.&lt;/p&gt;
&lt;p&gt;I have figured out that a bug is related to that AR's
calculations.rb (whare for example count() is defined) file
processes queries much differend than calling find() method - it
has even additional params related to grouping, like :having =&amp;gt;
&quot;something&quot;.&lt;/p&gt;
&lt;p&gt;I don't feel like I know AR internals enough to change these, so
I gave up for now.&lt;/p&gt;
&lt;p&gt;Best, H.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-17T14:41:37+00:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2008-11-17T14:41:41+00:00</updated-at>
      <user-id type="integer">37228</user-id>
      <version type="integer">5</version>
      <user-name>Hubert &#321;&#281;picki</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Hubert,

Thanks for your very fast answer. True, I know that I can get the sql statement from the logs, but that's not what I meant (sorry not to clear before). 
I have a pretty complex search form with many options to choose. Dependent what the user has chosen, different named scopes are chained. With the buggy count the used will_paginate (plugin to show the search results page by page), shows the wrong number of of pages.
My idea of a workaround would be to ask AR what sql statement it created and use the sql/virtual_table (as you described above) to get the correct count. With the correct count I can convince will_paginate to show the correct number of pages.

Any ideas how to do this?

Thanks
Jens</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Hubert,&lt;/p&gt;
&lt;p&gt;Thanks for your very fast answer. True, I know that I can get
the sql statement from the logs, but that's not what I meant (sorry
not to clear before). I have a pretty complex search form with many
options to choose. Dependent what the user has chosen, different
named scopes are chained. With the buggy count the used
will_paginate (plugin to show the search results page by page),
shows the wrong number of of pages. My idea of a workaround would
be to ask AR what sql statement it created and use the
sql/virtual_table (as you described above) to get the correct
count. With the correct count I can convince will_paginate to show
the correct number of pages.&lt;/p&gt;
&lt;p&gt;Any ideas how to do this?&lt;/p&gt;
&lt;p&gt;Thanks Jens&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-17T15:10:20+00:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2008-11-17T15:10:22+00:00</updated-at>
      <user-id type="integer">36216</user-id>
      <version type="integer">6</version>
      <user-name>JensC</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Oh I don't know if such functionality exist. I guess you could hack on ActiveRecord and build it yourself quite easily, but it's got obvious disadvantages like need to update your hacks with newer versions of Rails...

Try asking some forums and newsgroups...

Good luck,
H.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oh I don't know if such functionality exist. I guess you could
hack on ActiveRecord and build it yourself quite easily, but it's
got obvious disadvantages like need to update your hacks with newer
versions of Rails...&lt;/p&gt;
&lt;p&gt;Try asking some forums and newsgroups...&lt;/p&gt;
&lt;p&gt;Good luck, H.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-17T15:50:45+00:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2008-11-17T15:50:47+00:00</updated-at>
      <user-id type="integer">37228</user-id>
      <version type="integer">7</version>
      <user-name>Hubert &#321;&#281;picki</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I just ran into this &quot;bug&quot; today and basically here's the issue. If you do a simple `COUNT(*)` when there is a &quot;`GROUP BY`&quot; portion to the SQL query, it will do a count for the number of rows in that group (or it does in MySQL). What you are looking for is something like a &quot;`SELECT COUNT(*) AS count_all FROM (scope-chained-sql-query) AS sub-query`&quot;, which returns the number of rows that would be returned by the SQL query. One way to do this is to just call `Model.scope1.scope2.length`, which should return what you are looking for. The other option is to call `Model.scope1.scope2.count(:group =&gt; 'GROUP').length`.

I would make a patch that uses the sub-query method when there is a group on one of the named scopes, but I'm pretty new to rails, so I'm not sure if it would have any negative effects on other plugins or existing code. In addition, I'm not sure how well supported sub-queries are across the databases that rails supports. If anyone can confirm that the patch as described would have a chance of being accepted into rails, I'll be happy to write it, but otherwise calling length instead of count is probably the best option.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just ran into this &quot;bug&quot; today and basically here's the issue.
If you do a simple &lt;code&gt;COUNT(*)&lt;/code&gt; when there is a
&quot;&lt;code&gt;GROUP BY&lt;/code&gt;&quot; portion to the SQL query, it will do a
count for the number of rows in that group (or it does in MySQL).
What you are looking for is something like a &quot;&lt;code&gt;SELECT COUNT(*)
AS count_all FROM (scope-chained-sql-query) AS sub-query&lt;/code&gt;&quot;,
which returns the number of rows that would be returned by the SQL
query. One way to do this is to just call
&lt;code&gt;Model.scope1.scope2.length&lt;/code&gt;, which should return what
you are looking for. The other option is to call
&lt;code&gt;Model.scope1.scope2.count(:group =&amp;gt;
'GROUP').length&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I would make a patch that uses the sub-query method when there
is a group on one of the named scopes, but I'm pretty new to rails,
so I'm not sure if it would have any negative effects on other
plugins or existing code. In addition, I'm not sure how well
supported sub-queries are across the databases that rails supports.
If anyone can confirm that the patch as described would have a
chance of being accepted into rails, I'll be happy to write it, but
otherwise calling length instead of count is probably the best
option.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-13T22:21:43+00:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2009-02-13T22:21:46+00:00</updated-at>
      <user-id type="integer">47383</user-id>
      <version type="integer">8</version>
      <user-name>Stephen Augenstein</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Check the patches in #2189, see if they address this case as well. Otherwise we need an actual patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Check the patches in &lt;a href=&quot;/projects/8994/tickets/2189&quot; title=&quot;Ticket #2189&quot;&gt;#2189&lt;/a&gt;, see if they address this case as
well. Otherwise we need an actual patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-22T22:28:37+01:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2009-04-22T22:28:42+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">9</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-06T14:08:52+01:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>bugmash</tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2009-08-06T14:08:56+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">10</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-20T10:51:44+00:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: bugmash
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2010-01-20T10:51:48+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">11</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I just ran into a similar bug :

Using : 

has_many :followers, :class_name=&gt;&quot;User&quot;, :through=&gt;:received_investments, :source=&gt;:wallet, :group=&gt;&quot;users.id&quot;

Model.followers runs a query : 

SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN &quot;wallet_transactions&quot; ON &quot;users&quot;.id = &quot;wallet_transactions&quot;.wallet_id WHERE ((&quot;wallet_transactions&quot;.investable_item_id = 1) AND ((&quot;wallet_transactions&quot;.&quot;kind&quot; = 'investment'))) GROUP BY users.id ;


Model.followers.count runs : 
Model.believers.count :  SELECT count(*) AS count_all FROM &quot;users&quot; INNER JOIN &quot;wallet_transactions&quot; ON &quot;users&quot;.id = &quot;wallet_transactions&quot;.wallet_id WHERE ((&quot;wallet_transactions&quot;.investable_item_id = 1) AND ((&quot;wallet_transactions&quot;.&quot;kind&quot; = 'investment'))) 

I noticed the ticket has gone Stale, Is there already a patch or a work around ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just ran into a similar bug :&lt;/p&gt;
&lt;p&gt;Using :&lt;/p&gt;
&lt;p&gt;has_many :followers, :class_name=&amp;gt;&quot;User&quot;,
:through=&amp;gt;:received_investments, :source=&amp;gt;:wallet,
:group=&amp;gt;&quot;users.id&quot;&lt;/p&gt;
&lt;p&gt;Model.followers runs a query :&lt;/p&gt;
&lt;p&gt;SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN &quot;wallet_transactions&quot;
ON &quot;users&quot;.id = &quot;wallet_transactions&quot;.wallet_id WHERE
((&quot;wallet_transactions&quot;.investable_item_id = 1) AND
((&quot;wallet_transactions&quot;.&quot;kind&quot; = 'investment'))) GROUP BY users.id
;&lt;/p&gt;
&lt;p&gt;Model.followers.count runs :&lt;br&gt;
Model.believers.count : SELECT count(*) AS count_all FROM &quot;users&quot;
INNER JOIN &quot;wallet_transactions&quot; ON &quot;users&quot;.id =
&quot;wallet_transactions&quot;.wallet_id WHERE
((&quot;wallet_transactions&quot;.investable_item_id = 1) AND
((&quot;wallet_transactions&quot;.&quot;kind&quot; = 'investment')))&lt;/p&gt;
&lt;p&gt;I noticed the ticket has gone Stale, Is there already a patch or
a work around ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-08T15:23:54+01:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">750</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;activerecord associations&quot; group has_many_through_association</tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2010-08-08T15:23:56+01:00</updated-at>
      <user-id type="integer">7644</user-id>
      <version type="integer">12</version>
      <user-name>Smeevil</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>My current &quot;workaround&quot; :
    has_many :followers, :class_name=&gt;&quot;User&quot;, :through=&gt;:received_investments, :source=&gt;:wallet, :group=&gt;&quot;users.id&quot;
    def followers 
      return self.followers_with_group_bug.to_a
    end 

This prevents followers.count to run an AR query because the result is an array so the count will be on the array items which is correct
The array items are still AR Proxy objects so you can still use for example : followers.first.wallet etc...

According to my specs everything still behaves as it should.</body>
      <body-html>&lt;div&gt;&lt;p&gt;My current &quot;workaround&quot; :&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;has_many :followers, :class_name=&amp;gt;&quot;User&quot;, :through=&amp;gt;:received_investments, :source=&amp;gt;:wallet, :group=&amp;gt;&quot;users.id&quot;
def followers 
  return self.followers_with_group_bug.to_a
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This prevents followers.count to run an AR query because the
result is an array so the count will be on the array items which is
correct&lt;br&gt;
The array items are still AR Proxy objects so you can still use for
example : followers.first.wallet etc...&lt;/p&gt;
&lt;p&gt;According to my specs everything still behaves as it should.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-08T15:45:15+01:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">750</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;activerecord associations&quot; group has_many_through_association</tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2010-08-08T15:45:19+01:00</updated-at>
      <user-id type="integer">7644</user-id>
      <version type="integer">13</version>
      <user-name>Smeevil</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/30789)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/30789&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-07T05:21:20+01:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord associations\&quot; group has_many_through_association&quot;
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">750</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord associations group has_many_through_association</tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2010-10-07T05:21:20+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">14</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The easiest workaround I've figured out is doing something like this:

@@@ ruby
  named_scope :grouped_scope, {:group =&gt; &quot;column1, column2&quot;} do
    def count
      self.to_a.size
    end
  end
@@@

Chaining scopes and using .count works as desired, using the grouped result.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The easiest workaround I've figured out is doing something like
this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  named_scope :grouped_scope, {:group =&amp;gt; &quot;column1, column2&quot;} do
    def count
      self.to_a.size
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Chaining scopes and using .count works as desired, using the
grouped result.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-07T23:20:13+00:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">750</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord associations group has_many_through_association</tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2010-12-07T23:20:29+00:00</updated-at>
      <user-id type="integer">62131</user-id>
      <version type="integer">15</version>
      <user-name>Jeff Keen</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Confirmed that this problem exists in 2.3.5 as well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Confirmed that this problem exists in 2.3.5 as well.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-13T15:09:00+01:00</created-at>
      <creator-id type="integer">36216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1349</number>
      <permalink>named-scope-with-group-by-bug</permalink>
      <priority type="integer">750</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord associations group has_many_through_association</tag>
      <title>named scope with group by bug?</title>
      <updated-at type="datetime">2011-04-13T15:09:19+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">16</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>JensC</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1349</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>605c859eea4e15112dbc2deda9f03bc827056c09</code>
      <content-type>application/x-sh</content-type>
      <created-at type="datetime">2008-11-10T10:35:42+00:00</created-at>
      <filename>rails-group-by.sh</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">60649</id>
      <size type="integer">2720</size>
      <uploader-id type="integer">36216</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/60649/rails-group-by.sh</url>
    </attachment>
  </attachments>
</ticket>
