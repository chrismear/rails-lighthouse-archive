<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-04-25T15:16:01+01:00</created-at>
  <creator-id type="integer">96700</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6743</number>
  <permalink>csrf-not-working-rails-307</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>critical csrf forgery request-forgery-protection</tag>
  <title>CSRF not working Rails 3.0.7</title>
  <updated-at type="datetime">2011-04-25T18:15:45+01:00</updated-at>
  <user-id type="integer">117427</user-id>
  <version type="integer">7</version>
  <user-name>Matthew Daubert</user-name>
  <creator-name>mrbrdo</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6743</url>
  <priority-name>Low</priority-name>
  <original-body>Example project: https://github.com/mrbrdo/csrf-test (its just rails new csrf_test, rails g scaffold post title:string)
CSRF is enabled in application controller.

Run (while rails server is running): curl -d &quot;post[title]=hacked&quot; http://localhost:3000/posts

It works (post is created), even though there is no CSRF token sent. Maybe I did something wrong here, but if not, this is a very serious bug.</original-body>
  <latest-body>Example project: https://github.com/mrbrdo/csrf-test (its just rails new csrf_test, rails g scaffold post title:string)
CSRF is enabled in application controller.

Run (while rails server is running): curl -d &quot;post[title]=hacked&quot; http://localhost:3000/posts

It works (post is created), even though there is no CSRF token sent. Maybe I did something wrong here, but if not, this is a very serious bug.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Example project: &lt;a href=
&quot;https://github.com/mrbrdo/csrf-test&quot;&gt;https://github.com/mrbrdo/csrf-test&lt;/a&gt;
(its just rails new csrf_test, rails g scaffold post
title:string)&lt;br&gt;
CSRF is enabled in application controller.&lt;/p&gt;
&lt;p&gt;Run (while rails server is running): curl -d
&quot;post[title]=hacked&quot; &lt;a href=
&quot;http://localhost:3000/posts&quot;&gt;http://localhost:3000/posts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It works (post is created), even though there is no CSRF token
sent. Maybe I did something wrong here, but if not, this is a very
serious bug.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Example project: https://github.com/mrbrdo/csrf-test (its just rails new csrf_test, rails g scaffold post title:string)
CSRF is enabled in application controller.

Run (while rails server is running): curl -d &quot;post[title]=hacked&quot; http://localhost:3000/posts

It works (post is created), even though there is no CSRF token sent. Maybe I did something wrong here, but if not, this is a very serious bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Example project: &lt;a href=
&quot;https://github.com/mrbrdo/csrf-test&quot;&gt;https://github.com/mrbrdo/csrf-test&lt;/a&gt;
(its just rails new csrf_test, rails g scaffold post
title:string)&lt;br&gt;
CSRF is enabled in application controller.&lt;/p&gt;
&lt;p&gt;Run (while rails server is running): curl -d
&quot;post[title]=hacked&quot; &lt;a href=
&quot;http://localhost:3000/posts&quot;&gt;http://localhost:3000/posts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It works (post is created), even though there is no CSRF token
sent. Maybe I did something wrong here, but if not, this is a very
serious bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-25T15:16:01+01:00</created-at>
      <creator-id type="integer">96700</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6743</number>
      <permalink>csrf-not-working-rails-307</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>critical csrf forgery request-forgery-protection</tag>
      <title>CSRF not working Rails 3.0.7</title>
      <updated-at type="datetime">2011-04-25T15:17:48+01:00</updated-at>
      <user-id type="integer">96700</user-id>
      <version type="integer">1</version>
      <user-name>mrbrdo</user-name>
      <creator-name>mrbrdo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6743</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The request_forgery_protection tests pass for me for both 3.0.7 and master branches but I also see the same behavior with your test app.  I wonder if the change below could have something to do with it?  This was where the InvalidAuthenticityToken exception used to be thrown.  I thought that Metal threw this exception and then Dispatch rescued it as an :unprocessable_entity.  Looks like this changed at some point to now call reset_session (if the application doesn't overload the handle_unverified_request method).

I'm not sure what's going on but if it's a real issue then there is also a problem with false positives in the test suite.

https://github.com/rails/rails/commit/66ce3843d32e9f2ac3b1da20067af53019bbb034#L0R88</body>
      <body-html>&lt;div&gt;&lt;p&gt;The request_forgery_protection tests pass for me for both 3.0.7
and master branches but I also see the same behavior with your test
app. I wonder if the change below could have something to do with
it? This was where the InvalidAuthenticityToken exception used to
be thrown. I thought that Metal threw this exception and then
Dispatch rescued it as an :unprocessable_entity. Looks like this
changed at some point to now call reset_session (if the application
doesn't overload the handle_unverified_request method).&lt;/p&gt;
&lt;p&gt;I'm not sure what's going on but if it's a real issue then there
is also a problem with false positives in the test suite.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/commit/66ce3843d32e9f2ac3b1da20067af53019bbb034#L0R88&quot;&gt;
https://github.com/rails/rails/commit/66ce3843d32e9f2ac3b1da20067af...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-25T16:39:20+01:00</created-at>
      <creator-id type="integer">96700</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6743</number>
      <permalink>csrf-not-working-rails-307</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>critical csrf forgery request-forgery-protection</tag>
      <title>CSRF not working Rails 3.0.7</title>
      <updated-at type="datetime">2011-04-25T16:39:23+01:00</updated-at>
      <user-id type="integer">117427</user-id>
      <version type="integer">2</version>
      <user-name>Matthew Daubert</user-name>
      <creator-name>mrbrdo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6743</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Looks like this is the expected behavior as of Rails 3.0.4:
http://jasoncodes.com/posts/rails-csrf-vulnerability

For the old functionality you can add this to your ApplicationController:

    def handle_unverified_request
      raise(ActionController::InvalidAuthenticityToken)
    end</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks like this is the expected behavior as of Rails 3.0.4:&lt;br&gt;
&lt;a href=
&quot;http://jasoncodes.com/posts/rails-csrf-vulnerability&quot;&gt;http://jasoncodes.com/posts/rails-csrf-vulnerability&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the old functionality you can add this to your
ApplicationController:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def handle_unverified_request
  raise(ActionController::InvalidAuthenticityToken)
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-25T16:49:53+01:00</created-at>
      <creator-id type="integer">96700</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6743</number>
      <permalink>csrf-not-working-rails-307</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>critical csrf forgery request-forgery-protection</tag>
      <title>CSRF not working Rails 3.0.7</title>
      <updated-at type="datetime">2011-04-25T16:50:01+01:00</updated-at>
      <user-id type="integer">117427</user-id>
      <version type="integer">3</version>
      <user-name>Matthew Daubert</user-name>
      <creator-name>mrbrdo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6743</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Please read http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails
Basically you won't get an exception anymore, a session reset will happen now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please read &lt;a href=
&quot;http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails&quot;&gt;
http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ru...&lt;/a&gt;&lt;br&gt;
Basically you won't get an exception anymore, a session reset will
happen now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-25T17:00:01+01:00</created-at>
      <creator-id type="integer">96700</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6743</number>
      <permalink>csrf-not-working-rails-307</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>critical csrf forgery request-forgery-protection</tag>
      <title>CSRF not working Rails 3.0.7</title>
      <updated-at type="datetime">2011-04-25T17:00:10+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>mrbrdo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6743</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I see. Can you explain why the exception is not raised anymore? Is there a security issue if you raise an exception as suggested by Matthew Daubert?

Thank you.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I see. Can you explain why the exception is not raised anymore?
Is there a security issue if you raise an exception as suggested by
Matthew Daubert?&lt;/p&gt;
&lt;p&gt;Thank you.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-25T17:38:42+01:00</created-at>
      <creator-id type="integer">96700</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6743</number>
      <permalink>csrf-not-working-rails-307</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>critical csrf forgery request-forgery-protection</tag>
      <title>CSRF not working Rails 3.0.7</title>
      <updated-at type="datetime">2011-04-25T17:38:52+01:00</updated-at>
      <user-id type="integer">96700</user-id>
      <version type="integer">5</version>
      <user-name>mrbrdo</user-name>
      <creator-name>mrbrdo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6743</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Because of API calls.
More info here http://groups.google.com/group/rubyonrails-core/browse_thread/thread/198a45d1d9290e9c/9fbb988c76b215e2?lnk=gst&amp;q=csrf#9fbb988c76b215e2</body>
      <body-html>&lt;div&gt;&lt;p&gt;Because of API calls.&lt;br&gt;
More info here &lt;a href=
&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/198a45d1d9290e9c/9fbb988c76b215e2?lnk=gst&amp;amp;q=csrf#9fbb988c76b215e2&quot;&gt;
http://groups.google.com/group/rubyonrails-core/browse_thread/threa...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-25T17:50:37+01:00</created-at>
      <creator-id type="integer">96700</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6743</number>
      <permalink>csrf-not-working-rails-307</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>critical csrf forgery request-forgery-protection</tag>
      <title>CSRF not working Rails 3.0.7</title>
      <updated-at type="datetime">2011-04-25T17:50:47+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>mrbrdo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6743</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>mrbrdo - keep in mind that CSRF protection is meant to prevent session hijacking and has nothing to do with authorizing actions within your application.  The Security Guide is a great resource but a bit out of date on this topic (I noticed that docrails/master was updated to reflect the change in 3.0.4 so I imagine the guides site will reflect this soon enough).</body>
      <body-html>&lt;div&gt;&lt;p&gt;mrbrdo - keep in mind that CSRF protection is meant to prevent
session hijacking and has nothing to do with authorizing actions
within your application. The Security Guide is a great resource but
a bit out of date on this topic (I noticed that docrails/master was
updated to reflect the change in 3.0.4 so I imagine the guides site
will reflect this soon enough).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-25T18:15:37+01:00</created-at>
      <creator-id type="integer">96700</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6743</number>
      <permalink>csrf-not-working-rails-307</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>critical csrf forgery request-forgery-protection</tag>
      <title>CSRF not working Rails 3.0.7</title>
      <updated-at type="datetime">2011-04-25T18:15:45+01:00</updated-at>
      <user-id type="integer">117427</user-id>
      <version type="integer">7</version>
      <user-name>Matthew Daubert</user-name>
      <creator-name>mrbrdo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6743</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
