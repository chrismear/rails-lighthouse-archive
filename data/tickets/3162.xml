<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-09-08T02:09:09+01:00</created-at>
  <creator-id type="integer">17913</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3162</number>
  <permalink>memoizable-doesnt-memoize-overriden-methods</permalink>
  <priority type="integer">139265</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activesupport memoizable patch</tag>
  <title>Memoizable doesn't memoize overriden methods</title>
  <updated-at type="datetime">2011-02-02T18:40:48+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Samuel Lebeau</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3162</url>
  <priority-name nil="true"></priority-name>
  <original-body>@@@ ruby
class Foo
  extend ActiveSupport::Memoizable
  def foo() end
  memoize :foo
end

class Bar &lt; Foo
  def foo() puts &quot;In Bar#foo&quot; end
  # memoize :foo
end

bar = Bar.new
bar.foo
bar.foo
@@@

The above snippet prints *In Bar#foo* twice, which means the overridden `foo` method isn't memoized.
Uncommenting the `memoize :foo` statement in `Bar` throws a *Already memoized foo* error so achieving memoization of an overriden method sounds impossible.

Unless it's the desired behavior, we could either memoize an overriden memoized method by default, or allow a second call to `memoize` in the subclass context.

Thanks for making web development awesome !</original-body>
  <latest-body>@@@ ruby
class Foo
  extend ActiveSupport::Memoizable
  def foo() end
  memoize :foo
end

class Bar &lt; Foo
  def foo() puts &quot;In Bar#foo&quot; end
  # memoize :foo
end

bar = Bar.new
bar.foo
bar.foo
@@@

The above snippet prints *In Bar#foo* twice, which means the overridden `foo` method isn't memoized.
Uncommenting the `memoize :foo` statement in `Bar` throws a *Already memoized foo* error so achieving memoization of an overriden method sounds impossible.

Unless it's the desired behavior, we could either memoize an overriden memoized method by default, or allow a second call to `memoize` in the subclass context.

Thanks for making web development awesome !</latest-body>
  <original-body-html>&lt;div&gt;&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Foo
  extend ActiveSupport::Memoizable
  def foo() end
  memoize :foo
end

class Bar &amp;lt; Foo
  def foo() puts &quot;In Bar#foo&quot; end
  # memoize :foo
end

bar = Bar.new
bar.foo
bar.foo&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above snippet prints &lt;em&gt;In Bar#foo&lt;/em&gt; twice, which means
the overridden &lt;code&gt;foo&lt;/code&gt; method isn't memoized.&lt;br&gt;
Uncommenting the &lt;code&gt;memoize :foo&lt;/code&gt; statement in
&lt;code&gt;Bar&lt;/code&gt; throws a &lt;em&gt;Already memoized foo&lt;/em&gt; error so
achieving memoization of an overriden method sounds impossible.&lt;/p&gt;
&lt;p&gt;Unless it's the desired behavior, we could either memoize an
overriden memoized method by default, or allow a second call to
&lt;code&gt;memoize&lt;/code&gt; in the subclass context.&lt;/p&gt;
&lt;p&gt;Thanks for making web development awesome !&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@@@ ruby
class Foo
  extend ActiveSupport::Memoizable
  def foo() end
  memoize :foo
end

class Bar &lt; Foo
  def foo() puts &quot;In Bar#foo&quot; end
  # memoize :foo
end

bar = Bar.new
bar.foo
bar.foo
@@@

The above snippet prints *In Bar#foo* twice, which means the overridden `foo` method isn't memoized.
Uncommenting the `memoize :foo` statement in `Bar` throws a *Already memoized foo* error so achieving memoization of an overriden method sounds impossible.

Unless it's the desired behavior, we could either memoize an overriden memoized method by default, or allow a second call to `memoize` in the subclass context.

Thanks for making web development awesome !</body>
      <body-html>&lt;div&gt;&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Foo
  extend ActiveSupport::Memoizable
  def foo() end
  memoize :foo
end

class Bar &amp;lt; Foo
  def foo() puts &quot;In Bar#foo&quot; end
  # memoize :foo
end

bar = Bar.new
bar.foo
bar.foo&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above snippet prints &lt;em&gt;In Bar#foo&lt;/em&gt; twice, which means
the overridden &lt;code&gt;foo&lt;/code&gt; method isn't memoized.&lt;br&gt;
Uncommenting the &lt;code&gt;memoize :foo&lt;/code&gt; statement in
&lt;code&gt;Bar&lt;/code&gt; throws a &lt;em&gt;Already memoized foo&lt;/em&gt; error so
achieving memoization of an overriden method sounds impossible.&lt;/p&gt;
&lt;p&gt;Unless it's the desired behavior, we could either memoize an
overriden memoized method by default, or allow a second call to
&lt;code&gt;memoize&lt;/code&gt; in the subclass context.&lt;/p&gt;
&lt;p&gt;Thanks for making web development awesome !&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-08T02:09:09+01:00</created-at>
      <creator-id type="integer">17913</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3162</number>
      <permalink>memoizable-doesnt-memoize-overriden-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Memoizable doesn't memoize overriden methods</title>
      <updated-at type="datetime">2009-09-08T02:09:15+01:00</updated-at>
      <user-id type="integer">17913</user-id>
      <version type="integer">1</version>
      <user-name>Samuel Lebeau</user-name>
      <creator-name>Samuel Lebeau</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3162</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-25T12:30:38+01:00</created-at>
      <creator-id type="integer">17913</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3162</number>
      <permalink>memoizable-doesnt-memoize-overriden-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash</tag>
      <title>Memoizable doesn't memoize overriden methods</title>
      <updated-at type="datetime">2009-09-25T12:49:28+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">2</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Samuel Lebeau</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3162</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1, verified.

In this case, memoization would only work if Bar#foo called super.

I've attached a patch with a failing test, applies on 2-3-stable and master.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1, verified.&lt;/p&gt;
&lt;p&gt;In this case, memoization would only work if Bar#foo called
super.&lt;/p&gt;
&lt;p&gt;I've attached a patch with a failing test, applies on 2-3-stable
and master.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-27T20:06:16+01:00</created-at>
      <creator-id type="integer">17913</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: bugmash
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3162</number>
      <permalink>memoizable-doesnt-memoize-overriden-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport bugmash memoizable</tag>
      <title>Memoizable doesn't memoize overriden methods</title>
      <updated-at type="datetime">2009-09-27T20:06:18+01:00</updated-at>
      <user-id type="integer">40414</user-id>
      <version type="integer">3</version>
      <user-name>Elomar Fran&#231;a</user-name>
      <creator-name>Samuel Lebeau</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3162</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've tried several approaches to allow this, notably functionality such as tracking memoized methods using an instance hash and method_added trickery to figure out when a method was overridden. Nothing appears to work across all cases well.

My attached patch for master adds an option hash to memoize. If :force =&gt; true is passed in this hash, memoize will not raise an error. This will allow a developer who encounters this edge case to work around it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've tried several approaches to allow this, notably
functionality such as tracking memoized methods using an instance
hash and method_added trickery to figure out when a method was
overridden. Nothing appears to work across all cases well.&lt;/p&gt;
&lt;p&gt;My attached patch for master adds an option hash to memoize. If
:force =&amp;gt; true is passed in this hash, memoize will not raise an
error. This will allow a developer who encounters this edge case to
work around it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T05:44:16+01:00</created-at>
      <creator-id type="integer">17913</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activesupport bugmash memoizable
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3162</number>
      <permalink>memoizable-doesnt-memoize-overriden-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport bugmash memoizable patch</tag>
      <title>Memoizable doesn't memoize overriden methods</title>
      <updated-at type="datetime">2009-09-28T05:44:23+01:00</updated-at>
      <user-id type="integer">64236</user-id>
      <version type="integer">4</version>
      <user-name>John Pignata</user-name>
      <creator-name>Samuel Lebeau</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3162</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/13645)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/13645&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-12T12:46:17+00:00</created-at>
      <creator-id type="integer">17913</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activesupport bugmash memoizable patch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3162</number>
      <permalink>memoizable-doesnt-memoize-overriden-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport memoizable patch</tag>
      <title>Memoizable doesn't memoize overriden methods</title>
      <updated-at type="datetime">2010-02-12T12:46:17+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">5</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Samuel Lebeau</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3162</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:55:29+00:00</created-at>
      <creator-id type="integer">17913</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3162</number>
      <permalink>memoizable-doesnt-memoize-overriden-methods</permalink>
      <priority type="integer">139265</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport memoizable patch</tag>
      <title>Memoizable doesn't memoize overriden methods</title>
      <updated-at type="datetime">2011-02-02T18:40:48+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Samuel Lebeau</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3162</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:55:30+00:00</created-at>
      <creator-id type="integer">17913</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3162</number>
      <permalink>memoizable-doesnt-memoize-overriden-methods</permalink>
      <priority type="integer">139265</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activesupport memoizable patch</tag>
      <title>Memoizable doesn't memoize overriden methods</title>
      <updated-at type="datetime">2011-02-02T18:40:40+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Samuel Lebeau</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3162</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>6b43ae624bd3dfb1c5cf347598f13d5f04fc444a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-27T20:06:16+01:00</created-at>
      <filename>memoizable_failing_test.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">279682</id>
      <size type="integer">1488</size>
      <uploader-id type="integer">40414</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/279682/memoizable_failing_test.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>2cbb06c57dd2fc83eb8276b3cf05372b2e9f6403</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-28T05:44:16+01:00</created-at>
      <filename>add_options_hash_to_memoize.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">279840</id>
      <size type="integer">3772</size>
      <uploader-id type="integer">64236</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/279840/add_options_hash_to_memoize.diff</url>
    </attachment>
  </attachments>
</ticket>
