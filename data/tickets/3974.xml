<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-02-16T23:01:17+00:00</created-at>
  <creator-id type="integer">3664</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3974</number>
  <permalink>having-both-activerecordbaseeach-and-find_each-possibly-unnecessary</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord enumerable find_in_batches</tag>
  <title>Having both ActiveRecord::Base#each and #find_each possibly unnecessary</title>
  <updated-at type="datetime">2011-05-04T01:01:26+01:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">9</version>
  <user-name>rails</user-name>
  <creator-name>Stephen Touset</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3974</url>
  <priority-name>Low</priority-name>
  <original-body>I was reading the ActiveRecord 3 query interface documentation, and there are two methods to enumerate over ActiveRecord models: #each, and #find_each, with the difference being that find_each is batched.

Why not ditch the #find_each method, and make #each batch by default with an optional batch size override? That way Enumerable methods like Model.map &quot;just work&quot;. Otherwise, you have to use an awkward combination of Model.find_each.map (assuming #find_each actually returns an Enumerator instead of just yielding).

If batching by default isn't desired, you could still do Model.each(10_000).map, which would at least be less awkward and more conventionally-named.

Is there any reason it's done the way it is currently? If not, I wouldn't mind submitting a patch to add that functionality directly to #each, while deprecating #find_each.</original-body>
  <latest-body>I was reading the ActiveRecord 3 query interface documentation, and there are two methods to enumerate over ActiveRecord models: #each, and #find_each, with the difference being that find_each is batched.

Why not ditch the #find_each method, and make #each batch by default with an optional batch size override? That way Enumerable methods like Model.map &quot;just work&quot;. Otherwise, you have to use an awkward combination of Model.find_each.map (assuming #find_each actually returns an Enumerator instead of just yielding).

If batching by default isn't desired, you could still do Model.each(10_000).map, which would at least be less awkward and more conventionally-named.

Is there any reason it's done the way it is currently? If not, I wouldn't mind submitting a patch to add that functionality directly to #each, while deprecating #find_each.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I was reading the ActiveRecord 3 query interface documentation,
and there are two methods to enumerate over ActiveRecord models:
#each, and #find_each, with the difference being that find_each is
batched.&lt;/p&gt;
&lt;p&gt;Why not ditch the #find_each method, and make #each batch by
default with an optional batch size override? That way Enumerable
methods like Model.map &quot;just work&quot;. Otherwise, you have to use an
awkward combination of Model.find_each.map (assuming #find_each
actually returns an Enumerator instead of just yielding).&lt;/p&gt;
&lt;p&gt;If batching by default isn't desired, you could still do
Model.each(10_000).map, which would at least be less awkward and
more conventionally-named.&lt;/p&gt;
&lt;p&gt;Is there any reason it's done the way it is currently? If not, I
wouldn't mind submitting a patch to add that functionality directly
to #each, while deprecating #find_each.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I was reading the ActiveRecord 3 query interface documentation, and there are two methods to enumerate over ActiveRecord models: #each, and #find_each, with the difference being that find_each is batched.

Why not ditch the #find_each method, and make #each batch by default with an optional batch size override? That way Enumerable methods like Model.map &quot;just work&quot;. Otherwise, you have to use an awkward combination of Model.find_each.map (assuming #find_each actually returns an Enumerator instead of just yielding).

If batching by default isn't desired, you could still do Model.each(10_000).map, which would at least be less awkward and more conventionally-named.

Is there any reason it's done the way it is currently? If not, I wouldn't mind submitting a patch to add that functionality directly to #each, while deprecating #find_each.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I was reading the ActiveRecord 3 query interface documentation,
and there are two methods to enumerate over ActiveRecord models:
#each, and #find_each, with the difference being that find_each is
batched.&lt;/p&gt;
&lt;p&gt;Why not ditch the #find_each method, and make #each batch by
default with an optional batch size override? That way Enumerable
methods like Model.map &quot;just work&quot;. Otherwise, you have to use an
awkward combination of Model.find_each.map (assuming #find_each
actually returns an Enumerator instead of just yielding).&lt;/p&gt;
&lt;p&gt;If batching by default isn't desired, you could still do
Model.each(10_000).map, which would at least be less awkward and
more conventionally-named.&lt;/p&gt;
&lt;p&gt;Is there any reason it's done the way it is currently? If not, I
wouldn't mind submitting a patch to add that functionality directly
to #each, while deprecating #find_each.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-16T23:01:17+00:00</created-at>
      <creator-id type="integer">3664</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3974</number>
      <permalink>having-both-activerecordbaseeach-and-find_each-possibly-unnecessary</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enumerable find_in_batches</tag>
      <title>Having both ActiveRecord::Base#each and #find_each possibly unnecessary</title>
      <updated-at type="datetime">2010-02-16T23:01:18+00:00</updated-at>
      <user-id type="integer">3664</user-id>
      <version type="integer">1</version>
      <user-name>Stephen Touset</user-name>
      <creator-name>Stephen Touset</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think the POLS could be applied here. If I do `Model.each`, I should be able to expect this to iterate over every single record in my model. I do agree with you however on the point of find_each.map, which is ugly, but I'm going to have to:

-1

this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think the POLS could be applied here. If I do
&lt;code&gt;Model.each&lt;/code&gt;, I should be able to expect this to iterate
over every single record in my model. I do agree with you however
on the point of find_each.map, which is ugly, but I'm going to have
to:&lt;/p&gt;
&lt;p&gt;-1&lt;/p&gt;
&lt;p&gt;this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-25T10:57:07+01:00</created-at>
      <creator-id type="integer">3664</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3974</number>
      <permalink>having-both-activerecordbaseeach-and-find_each-possibly-unnecessary</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enumerable find_in_batches</tag>
      <title>Having both ActiveRecord::Base#each and #find_each possibly unnecessary</title>
      <updated-at type="datetime">2010-05-25T10:57:12+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">2</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Stephen Touset</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveRecord::Base#find_each _does_ iterate over every single record in the model, with the same calling conventions as #each. The difference being that, behind the scenes, multiple records are fetched from the database at a time. I would argue that POLS points toward #each being doing this automatically, since it's very surprising when calling #each nukes database performance and takes forever.

As it stands, #each is practically useless and should never be called due to the load it places in the database. Just making it batch behind the scenes would make the method actually useful. Plus, this could be combined with standard Enumerator practice to composite enumeration methods.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveRecord::Base#find_each &lt;em&gt;does&lt;/em&gt; iterate over every
single record in the model, with the same calling conventions as
#each. The difference being that, behind the scenes, multiple
records are fetched from the database at a time. I would argue that
POLS points toward #each being doing this automatically, since it's
very surprising when calling #each nukes database performance and
takes forever.&lt;/p&gt;
&lt;p&gt;As it stands, #each is practically useless and should never be
called due to the load it places in the database. Just making it
batch behind the scenes would make the method actually useful.
Plus, this could be combined with standard Enumerator practice to
composite enumeration methods.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-25T14:56:42+01:00</created-at>
      <creator-id type="integer">3664</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3974</number>
      <permalink>having-both-activerecordbaseeach-and-find_each-possibly-unnecessary</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enumerable find_in_batches</tag>
      <title>Having both ActiveRecord::Base#each and #find_each possibly unnecessary</title>
      <updated-at type="datetime">2010-05-25T14:56:47+01:00</updated-at>
      <user-id type="integer">3664</user-id>
      <version type="integer">3</version>
      <user-name>Stephen Touset</user-name>
      <creator-name>Stephen Touset</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>For what it's worth, you may be confusing #find_each and #find_in_batches. The former obeys #each's calling convention (no required params, yields each object in succession), and the latter yields an Array of each batched set of objects.</body>
      <body-html>&lt;div&gt;&lt;p&gt;For what it's worth, you may be confusing #find_each and
#find_in_batches. The former obeys #each's calling convention (no
required params, yields each object in succession), and the latter
yields an Array of each batched set of objects.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-25T14:57:57+01:00</created-at>
      <creator-id type="integer">3664</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3974</number>
      <permalink>having-both-activerecordbaseeach-and-find_each-possibly-unnecessary</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enumerable find_in_batches</tag>
      <title>Having both ActiveRecord::Base#each and #find_each possibly unnecessary</title>
      <updated-at type="datetime">2010-05-25T14:58:02+01:00</updated-at>
      <user-id type="integer">3664</user-id>
      <version type="integer">4</version>
      <user-name>Stephen Touset</user-name>
      <creator-name>Stephen Touset</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:52:50+00:00</created-at>
      <creator-id type="integer">3664</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3974</number>
      <permalink>having-both-activerecordbaseeach-and-find_each-possibly-unnecessary</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enumerable find_in_batches</tag>
      <title>Having both ActiveRecord::Base#each and #find_each possibly unnecessary</title>
      <updated-at type="datetime">2011-02-02T18:27:14+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Stephen Touset</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3974</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:52:51+00:00</created-at>
      <creator-id type="integer">3664</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3974</number>
      <permalink>having-both-activerecordbaseeach-and-find_each-possibly-unnecessary</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord enumerable find_in_batches</tag>
      <title>Having both ActiveRecord::Base#each and #find_each possibly unnecessary</title>
      <updated-at type="datetime">2011-02-02T18:27:21+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Stephen Touset</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3974</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue is still alive and relevant. ActiveRecord::Base#each is effectively useless in its current state, and would be somewhat useful if it fetched records in batches behind the scenes.

[state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue is still alive and relevant. ActiveRecord::Base#each
is effectively useless in its current state, and would be somewhat
useful if it fetched records in batches behind the scenes.&lt;/p&gt;
&lt;p&gt;[state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-03T04:35:14+00:00</created-at>
      <creator-id type="integer">3664</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3974</number>
      <permalink>having-both-activerecordbaseeach-and-find_each-possibly-unnecessary</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enumerable find_in_batches</tag>
      <title>Having both ActiveRecord::Base#each and #find_each possibly unnecessary</title>
      <updated-at type="datetime">2011-02-03T04:35:19+00:00</updated-at>
      <user-id type="integer">3664</user-id>
      <version type="integer">7</version>
      <user-name>Stephen Touset</user-name>
      <creator-name>Stephen Touset</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3974</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-05-04T01:00:11+01:00</created-at>
      <creator-id type="integer">3664</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3974</number>
      <permalink>having-both-activerecordbaseeach-and-find_each-possibly-unnecessary</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord enumerable find_in_batches</tag>
      <title>Having both ActiveRecord::Base#each and #find_each possibly unnecessary</title>
      <updated-at type="datetime">2011-05-04T01:00:56+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">8</version>
      <user-name>rails</user-name>
      <creator-name>Stephen Touset</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3974</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-05-04T01:00:12+01:00</created-at>
      <creator-id type="integer">3664</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3974</number>
      <permalink>having-both-activerecordbaseeach-and-find_each-possibly-unnecessary</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord enumerable find_in_batches</tag>
      <title>Having both ActiveRecord::Base#each and #find_each possibly unnecessary</title>
      <updated-at type="datetime">2011-05-04T01:01:26+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">9</version>
      <user-name>rails</user-name>
      <creator-name>Stephen Touset</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3974</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
