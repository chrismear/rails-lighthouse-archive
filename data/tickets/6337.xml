<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-01-26T20:04:11+00:00</created-at>
  <creator-id type="integer">27546</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6337</number>
  <permalink>regression-mass-assignment-interaction-with-a-non-standard-primary-key-235-2310</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>2.3.10 2.3.5 &quot;:id primary_key&quot; &quot;active record&quot; &quot;mass-assignment security&quot; primarykey primary_key &quot;rails 2.3.10&quot; &quot;rails 2.3.5&quot;</tag>
  <title>Regression: mass assignment interaction with a non-standard primary key (2.3.5 -&gt; 2.3.10)</title>
  <updated-at type="datetime">2011-02-01T05:44:13+00:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">6</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>mat</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6337</url>
  <priority-name>Low</priority-name>
  <original-body>We had to patch a year old app today that was running happily on 2.3.5. As part of the work, we did a routine upgrade to 2.3.10 and found a weird bug when using non-standard primary keys.

You can replicate this way. Create a new Rails app with 2.3.10 and then add these two files:

@@@ rails
# app/models/country.rb
class Country &lt; ActiveRecord::Base
  set_primary_key :iso
end

# db/migrations/20110126_create_countries.db
class CreateCountries &lt; ActiveRecord::Migration
  def self.up
    create_table :countries, :id =&gt; false, :primary_key =&gt; :iso do |t|
      t.string :iso, :limit =&gt; 2, :null =&gt; false
      t.string :name
      t.integer :region_id

      t.timestamps
    end 

    execute &quot;ALTER TABLE countries ADD PRIMARY KEY (iso);&quot;
  end

  def self.down
    drop_table :countries
  end
end
@@@

Then create your database (you'll need to use MySQL or Postgres, not SQLite) and migrate it.

The following operations fail to set ID correctly:

@@@ rails
# Create
Country.create(:iso =&gt; &quot;AU&quot;, :name =&gt; &quot;Australia&quot;)

# New &amp; Save
c = Country.new(:iso =&gt; &quot;AU&quot;, :name =&gt; &quot;Australia&quot;)
c.save
@@@

This is the only way to set the iso column:

@@@ rails
# Working #1
c = Country.new(:name =&gt; &quot;Australia&quot;)
c.iso = &quot;AU&quot;
c.save
@@@

If you don't do this your primary key columns will be populated with the default value. Rails itself appears to be simply omitting the :iso column from the query:

@@@ sql
INSERT INTO `countries` (`name`, `created_at`, `updated_at`, `region_id`)
VALUES('Australia', '2011-01-26 19:47:57', '2011-01-26 19:47:57', NULL)
@@@

These migrations worked under 2.3.5.

I don't know enough about ActiveRecord to find the location in the code but it appears it's making an assumption that the primary key cannot be mass assigned, and this change was introduced at some point between 2.3.5 and 2.3.10.</original-body>
  <latest-body>We had to patch a year old app today that was running happily on 2.3.5. As part of the work, we did a routine upgrade to 2.3.10 and found a weird bug when using non-standard primary keys.

You can replicate this way. Create a new Rails app with 2.3.10 and then add these two files:

@@@ rails
# app/models/country.rb
class Country &lt; ActiveRecord::Base
  set_primary_key :iso
end

# db/migrations/20110126_create_countries.db
class CreateCountries &lt; ActiveRecord::Migration
  def self.up
    create_table :countries, :id =&gt; false, :primary_key =&gt; :iso do |t|
      t.string :iso, :limit =&gt; 2, :null =&gt; false
      t.string :name
      t.integer :region_id

      t.timestamps
    end 

    execute &quot;ALTER TABLE countries ADD PRIMARY KEY (iso);&quot;
  end

  def self.down
    drop_table :countries
  end
end
@@@

Then create your database (you'll need to use MySQL or Postgres, not SQLite) and migrate it.

The following operations fail to set ID correctly:

@@@ rails
# Create
Country.create(:iso =&gt; &quot;AU&quot;, :name =&gt; &quot;Australia&quot;)

# New &amp; Save
c = Country.new(:iso =&gt; &quot;AU&quot;, :name =&gt; &quot;Australia&quot;)
c.save
@@@

This is the only way to set the iso column:

@@@ rails
# Working #1
c = Country.new(:name =&gt; &quot;Australia&quot;)
c.iso = &quot;AU&quot;
c.save
@@@

If you don't do this your primary key columns will be populated with the default value. Rails itself appears to be simply omitting the :iso column from the query:

@@@ sql
INSERT INTO `countries` (`name`, `created_at`, `updated_at`, `region_id`)
VALUES('Australia', '2011-01-26 19:47:57', '2011-01-26 19:47:57', NULL)
@@@

These migrations worked under 2.3.5.

I don't know enough about ActiveRecord to find the location in the code but it appears it's making an assumption that the primary key cannot be mass assigned, and this change was introduced at some point between 2.3.5 and 2.3.10.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;We had to patch a year old app today that was running happily on
2.3.5. As part of the work, we did a routine upgrade to 2.3.10 and
found a weird bug when using non-standard primary keys.&lt;/p&gt;
&lt;p&gt;You can replicate this way. Create a new Rails app with 2.3.10
and then add these two files:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;# app/models/country.rb
class Country &amp;lt; ActiveRecord::Base
  set_primary_key :iso
end

# db/migrations/20110126_create_countries.db
class CreateCountries &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :countries, :id =&amp;gt; false, :primary_key =&amp;gt; :iso do |t|
      t.string :iso, :limit =&amp;gt; 2, :null =&amp;gt; false
      t.string :name
      t.integer :region_id

      t.timestamps
    end 

    execute &quot;ALTER TABLE countries ADD PRIMARY KEY (iso);&quot;
  end

  def self.down
    drop_table :countries
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then create your database (you'll need to use MySQL or Postgres,
not SQLite) and migrate it.&lt;/p&gt;
&lt;p&gt;The following operations fail to set ID correctly:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;# Create
Country.create(:iso =&amp;gt; &quot;AU&quot;, :name =&amp;gt; &quot;Australia&quot;)

# New &amp;amp; Save
c = Country.new(:iso =&amp;gt; &quot;AU&quot;, :name =&amp;gt; &quot;Australia&quot;)
c.save&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the only way to set the iso column:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;# Working #1
c = Country.new(:name =&amp;gt; &quot;Australia&quot;)
c.iso = &quot;AU&quot;
c.save&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you don't do this your primary key columns will be populated
with the default value. Rails itself appears to be simply omitting
the :iso column from the query:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;INSERT INTO `countries` (`name`, `created_at`, `updated_at`, `region_id`)
VALUES('Australia', '2011-01-26 19:47:57', '2011-01-26 19:47:57', NULL)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;These migrations worked under 2.3.5.&lt;/p&gt;
&lt;p&gt;I don't know enough about ActiveRecord to find the location in
the code but it appears it's making an assumption that the primary
key cannot be mass assigned, and this change was introduced at some
point between 2.3.5 and 2.3.10.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We had to patch a year old app today that was running happily on 2.3.5. As part of the work, we did a routine upgrade to 2.3.10 and found a weird bug when using non-standard primary keys.

You can replicate this way. Create a new Rails app with 2.3.10 and then add these two files:

@@@ rails
# app/models/country.rb
class Country &lt; ActiveRecord::Base
  set_primary_key :iso
end

# db/migrations/20110126_create_countries.db
class CreateCountries &lt; ActiveRecord::Migration
  def self.up
    create_table :countries, :id =&gt; false, :primary_key =&gt; :iso do |t|
      t.string :iso, :limit =&gt; 2, :null =&gt; false
      t.string :name
      t.integer :region_id

      t.timestamps
    end 

    execute &quot;ALTER TABLE countries ADD PRIMARY KEY (iso);&quot;
  end

  def self.down
    drop_table :countries
  end
end
@@@

Then create your database (you'll need to use MySQL or Postgres, not SQLite) and migrate it.

The following operations fail to set ID correctly:

@@@ rails
# Create
Country.create(:iso =&gt; &quot;AU&quot;, :name =&gt; &quot;Australia&quot;)

# New &amp; Save
c = Country.new(:iso =&gt; &quot;AU&quot;, :name =&gt; &quot;Australia&quot;)
c.save
@@@

This is the only way to set the iso column:

@@@ rails
# Working #1
c = Country.new(:name =&gt; &quot;Australia&quot;)
c.iso = &quot;AU&quot;
c.save
@@@

If you don't do this your primary key columns will be populated with the default value. Rails itself appears to be simply omitting the :iso column from the query:

@@@ sql
INSERT INTO `countries` (`name`, `created_at`, `updated_at`, `region_id`)
VALUES('Australia', '2011-01-26 19:47:57', '2011-01-26 19:47:57', NULL)
@@@

These migrations worked under 2.3.5.

I don't know enough about ActiveRecord to find the location in the code but it appears it's making an assumption that the primary key cannot be mass assigned, and this change was introduced at some point between 2.3.5 and 2.3.10.</body>
      <body-html>&lt;div&gt;&lt;p&gt;We had to patch a year old app today that was running happily on
2.3.5. As part of the work, we did a routine upgrade to 2.3.10 and
found a weird bug when using non-standard primary keys.&lt;/p&gt;
&lt;p&gt;You can replicate this way. Create a new Rails app with 2.3.10
and then add these two files:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;# app/models/country.rb
class Country &amp;lt; ActiveRecord::Base
  set_primary_key :iso
end

# db/migrations/20110126_create_countries.db
class CreateCountries &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :countries, :id =&amp;gt; false, :primary_key =&amp;gt; :iso do |t|
      t.string :iso, :limit =&amp;gt; 2, :null =&amp;gt; false
      t.string :name
      t.integer :region_id

      t.timestamps
    end 

    execute &quot;ALTER TABLE countries ADD PRIMARY KEY (iso);&quot;
  end

  def self.down
    drop_table :countries
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then create your database (you'll need to use MySQL or Postgres,
not SQLite) and migrate it.&lt;/p&gt;
&lt;p&gt;The following operations fail to set ID correctly:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;# Create
Country.create(:iso =&amp;gt; &quot;AU&quot;, :name =&amp;gt; &quot;Australia&quot;)

# New &amp;amp; Save
c = Country.new(:iso =&amp;gt; &quot;AU&quot;, :name =&amp;gt; &quot;Australia&quot;)
c.save&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the only way to set the iso column:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;# Working #1
c = Country.new(:name =&amp;gt; &quot;Australia&quot;)
c.iso = &quot;AU&quot;
c.save&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you don't do this your primary key columns will be populated
with the default value. Rails itself appears to be simply omitting
the :iso column from the query:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;INSERT INTO `countries` (`name`, `created_at`, `updated_at`, `region_id`)
VALUES('Australia', '2011-01-26 19:47:57', '2011-01-26 19:47:57', NULL)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;These migrations worked under 2.3.5.&lt;/p&gt;
&lt;p&gt;I don't know enough about ActiveRecord to find the location in
the code but it appears it's making an assumption that the primary
key cannot be mass assigned, and this change was introduced at some
point between 2.3.5 and 2.3.10.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-26T20:04:11+00:00</created-at>
      <creator-id type="integer">27546</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6337</number>
      <permalink>regression-mass-assignment-interaction-with-a-non-standard-primary-key-235-2310</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.10 2.3.5 &quot;:id primary_key&quot; &quot;active record&quot; &quot;mass-assignment security&quot; primarykey primary_key &quot;rails 2.3.10&quot; &quot;rails 2.3.5&quot;</tag>
      <title>Regression: mass assignment interaction with a non-standard primary key (2.3.5 -&gt; 2.3.10)</title>
      <updated-at type="datetime">2011-01-26T20:04:14+00:00</updated-at>
      <user-id type="integer">27546</user-id>
      <version type="integer">1</version>
      <user-name>mat</user-name>
      <creator-name>mat</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6337</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm afraid this is not a bug, and it can be reproduced on 2.3.5, 2.3.10 or 3.0.3.
Primary keys are marked as protected, this test case will not fail:

    class Subscriber &lt; AR::Base
      set_primary_key :nick
      attr_accessible :nick # Mark it available for mass-assignment
    end

    def test_customized_string_primary_key_set_with_create
      subscriber = Subscriber.create :nick =&gt; 'webster123'
      assert_equal 'webster123', subscriber.id
      assert_equal 'webster123', subscriber.nick
    end

Mass-assigning the key is just prevented unless you set it explicitly accessible.

Even on 2.3.5, if I remove the `attr_accessible` line, i'm getting this result for the same test:
    1) Error:
    test_customized_string_primary_key_set_with_create(PrimaryKeysTest):
    ActiveRecord::StatementInvalid: SQLite3::ConstraintException: subscribers.nick may not be NULL: INSERT INTO &quot;subscribers&quot; (&quot;name&quot;) VALUES(NULL)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm afraid this is not a bug, and it can be reproduced on 2.3.5,
2.3.10 or 3.0.3.&lt;br&gt;
Primary keys are marked as protected, this test case will not
fail:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Subscriber &amp;lt; AR::Base
  set_primary_key :nick
  attr_accessible :nick # Mark it available for mass-assignment
end

def test_customized_string_primary_key_set_with_create
  subscriber = Subscriber.create :nick =&amp;gt; 'webster123'
  assert_equal 'webster123', subscriber.id
  assert_equal 'webster123', subscriber.nick
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Mass-assigning the key is just prevented unless you set it
explicitly accessible.&lt;/p&gt;
&lt;p&gt;Even on 2.3.5, if I remove the &lt;code&gt;attr_accessible&lt;/code&gt;
line, i'm getting this result for the same test:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1) Error:
test_customized_string_primary_key_set_with_create(PrimaryKeysTest):
ActiveRecord::StatementInvalid: SQLite3::ConstraintException: subscribers.nick may not be NULL: INSERT INTO &quot;subscribers&quot; (&quot;name&quot;) VALUES(NULL)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-30T10:38:17+00:00</created-at>
      <creator-id type="integer">27546</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6337</number>
      <permalink>regression-mass-assignment-interaction-with-a-non-standard-primary-key-235-2310</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.10 2.3.5 &quot;:id primary_key&quot; &quot;active record&quot; &quot;mass-assignment security&quot; primarykey primary_key &quot;rails 2.3.10&quot; &quot;rails 2.3.5&quot;</tag>
      <title>Regression: mass assignment interaction with a non-standard primary key (2.3.5 -&gt; 2.3.10)</title>
      <updated-at type="datetime">2011-01-30T10:38:22+00:00</updated-at>
      <user-id type="integer">68889</user-id>
      <version type="integer">2</version>
      <user-name>Cesario</user-name>
      <creator-name>mat</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6337</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I get that primary keys are protected, I don't get how the migration ever worked a year ago. Something's changed somewhere.

I'll add the attr_accessible and we can all move on!

Thanks

M.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I get that primary keys are protected, I don't get how the
migration ever worked a year ago. Something's changed
somewhere.&lt;/p&gt;
&lt;p&gt;I'll add the attr_accessible and we can all move on!&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;
&lt;p&gt;M.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-30T21:56:46+00:00</created-at>
      <creator-id type="integer">27546</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6337</number>
      <permalink>regression-mass-assignment-interaction-with-a-non-standard-primary-key-235-2310</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.10 2.3.5 &quot;:id primary_key&quot; &quot;active record&quot; &quot;mass-assignment security&quot; primarykey primary_key &quot;rails 2.3.10&quot; &quot;rails 2.3.5&quot;</tag>
      <title>Regression: mass assignment interaction with a non-standard primary key (2.3.5 -&gt; 2.3.10)</title>
      <updated-at type="datetime">2011-01-30T21:56:53+00:00</updated-at>
      <user-id type="integer">27546</user-id>
      <version type="integer">3</version>
      <user-name>mat</user-name>
      <creator-name>mat</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6337</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I won't jump into the code right now, but you could check in 2.3.5, at runtime, if the `iso` column has been set automatically `attr_protected` when you ran `set_primary_key`.

In any case, I think we could close this ticket. I hope it helped :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I won't jump into the code right now, but you could check in
2.3.5, at runtime, if the &lt;code&gt;iso&lt;/code&gt; column has been set
automatically &lt;code&gt;attr_protected&lt;/code&gt; when you ran
&lt;code&gt;set_primary_key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In any case, I think we could close this ticket. I hope it
helped :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-30T22:06:08+00:00</created-at>
      <creator-id type="integer">27546</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6337</number>
      <permalink>regression-mass-assignment-interaction-with-a-non-standard-primary-key-235-2310</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.10 2.3.5 &quot;:id primary_key&quot; &quot;active record&quot; &quot;mass-assignment security&quot; primarykey primary_key &quot;rails 2.3.10&quot; &quot;rails 2.3.5&quot;</tag>
      <title>Regression: mass assignment interaction with a non-standard primary key (2.3.5 -&gt; 2.3.10)</title>
      <updated-at type="datetime">2011-01-30T22:06:12+00:00</updated-at>
      <user-id type="integer">68889</user-id>
      <version type="integer">4</version>
      <user-name>Cesario</user-name>
      <creator-name>mat</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6337</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, let's close it. Your explanation about why primary_keys are by default protected was very helpful and makes sense.

I wish there was somewhere we could document that you need to open up the primary key for mass assignment if the purpose is to set it yourself. All the examples I found were to use things like sequences in Postgres, etc.

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, let's close it. Your explanation about why primary_keys are
by default protected was very helpful and makes sense.&lt;/p&gt;
&lt;p&gt;I wish there was somewhere we could document that you need to
open up the primary key for mass assignment if the purpose is to
set it yourself. All the examples I found were to use things like
sequences in Postgres, etc.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-30T22:11:26+00:00</created-at>
      <creator-id type="integer">27546</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6337</number>
      <permalink>regression-mass-assignment-interaction-with-a-non-standard-primary-key-235-2310</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.10 2.3.5 &quot;:id primary_key&quot; &quot;active record&quot; &quot;mass-assignment security&quot; primarykey primary_key &quot;rails 2.3.10&quot; &quot;rails 2.3.5&quot;</tag>
      <title>Regression: mass assignment interaction with a non-standard primary key (2.3.5 -&gt; 2.3.10)</title>
      <updated-at type="datetime">2011-01-30T22:11:29+00:00</updated-at>
      <user-id type="integer">27546</user-id>
      <version type="integer">5</version>
      <user-name>mat</user-name>
      <creator-name>mat</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6337</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-01T05:44:03+00:00</created-at>
      <creator-id type="integer">27546</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6337</number>
      <permalink>regression-mass-assignment-interaction-with-a-non-standard-primary-key-235-2310</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.10 2.3.5 &quot;:id primary_key&quot; &quot;active record&quot; &quot;mass-assignment security&quot; primarykey primary_key &quot;rails 2.3.10&quot; &quot;rails 2.3.5&quot;</tag>
      <title>Regression: mass assignment interaction with a non-standard primary key (2.3.5 -&gt; 2.3.10)</title>
      <updated-at type="datetime">2011-02-01T05:44:13+00:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">6</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>mat</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6337</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
