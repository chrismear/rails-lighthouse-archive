<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">4</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-19T09:28:14+00:00</created-at>
  <creator-id type="integer">52995</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2430</number>
  <permalink>enumerableevery-functionality</permalink>
  <priority type="integer">1582</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Enumerable#every functionality</title>
  <updated-at type="datetime">2011-02-19T09:28:14+00:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">20</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>mynyml</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This patch adds the #every method to Enumerable. It is an alternative to using Symbol#to_proc in a common context, namely with #map. It enhences readability and elegance of the code.

This code started out as a [gem](http://github.com/mynyml/every &quot;every&quot;) and has recieved [positive](http://github.com/blog/383-github-rebase-17 &quot;GitHub Rebase #17&quot;) reactions from the community.

@@@ ruby
  enum = [1.4, 2.4 ,3.4]
  enum.map {|i| i.floor } #=&gt; [1, 2, 3]
  enum.map(&amp;:floor)       #=&gt; [1, 2, 3]
  enum.every.floor        #=&gt; [1, 2, 3]

  %w( axb dxf ).every.gsub(/x/,'y')     #=&gt; ['ayb', 'dyf']
  %w( axb dxf ).every.gsub(/x/) { 'y' } #=&gt; ['ayb', 'dyf']

  @company.clients.every.name
@@@

Note that the patch is general enough that it can easily be extended (for example to add the same type of functionality for #select and #reject).


[Patch on github](http://github.com/mynyml/rails/commit/6c131d452389890e4253d30256b2f46afd14ed3f &quot;Enumerable#every patch on github&quot;)
[Original gem](http://github.com/mynyml/every &quot;every gem github repository&quot;)
[Original blog post](http://mynyml.com/15-enumerableevery/ &quot;Original blog post&quot;)</original-body>
  <latest-body>This patch adds the #every method to Enumerable. It is an alternative to using Symbol#to_proc in a common context, namely with #map. It enhences readability and elegance of the code.

This code started out as a [gem](http://github.com/mynyml/every &quot;every&quot;) and has recieved [positive](http://github.com/blog/383-github-rebase-17 &quot;GitHub Rebase #17&quot;) reactions from the community.

@@@ ruby
  enum = [1.4, 2.4 ,3.4]
  enum.map {|i| i.floor } #=&gt; [1, 2, 3]
  enum.map(&amp;:floor)       #=&gt; [1, 2, 3]
  enum.every.floor        #=&gt; [1, 2, 3]

  %w( axb dxf ).every.gsub(/x/,'y')     #=&gt; ['ayb', 'dyf']
  %w( axb dxf ).every.gsub(/x/) { 'y' } #=&gt; ['ayb', 'dyf']

  @company.clients.every.name
@@@

Note that the patch is general enough that it can easily be extended (for example to add the same type of functionality for #select and #reject).


[Patch on github](http://github.com/mynyml/rails/commit/6c131d452389890e4253d30256b2f46afd14ed3f &quot;Enumerable#every patch on github&quot;)
[Original gem](http://github.com/mynyml/every &quot;every gem github repository&quot;)
[Original blog post](http://mynyml.com/15-enumerableevery/ &quot;Original blog post&quot;)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch adds the #every method to Enumerable. It is an
alternative to using Symbol#to_proc in a common context, namely
with #map. It enhences readability and elegance of the code.&lt;/p&gt;
&lt;p&gt;This code started out as a &lt;a href=&quot;http://github.com/mynyml/every&quot; title=&quot;every&quot;&gt;gem&lt;/a&gt; and has
recieved &lt;a href=&quot;http://github.com/blog/383-github-rebase-17&quot; title=&quot;GitHub Rebase [#17](/projects/8994/tickets/17 &amp;quot;Ticket #17&quot;&gt;positive&lt;/a&gt;&quot;)
reactions from the community.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  enum = [1.4, 2.4 ,3.4]
  enum.map {|i| i.floor } #=&amp;gt; [1, 2, 3]
  enum.map(&amp;amp;:floor)       #=&amp;gt; [1, 2, 3]
  enum.every.floor        #=&amp;gt; [1, 2, 3]

  %w( axb dxf ).every.gsub(/x/,'y')     #=&amp;gt; ['ayb', 'dyf']
  %w( axb dxf ).every.gsub(/x/) { 'y' } #=&amp;gt; ['ayb', 'dyf']

  @company.clients.every.name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the patch is general enough that it can easily be
extended (for example to add the same type of functionality for
#select and #reject).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/mynyml/rails/commit/6c131d452389890e4253d30256b2f46afd14ed3f&quot; title=&quot;Enumerable#every patch on github&quot;&gt;Patch on github&lt;/a&gt;
&lt;a href=&quot;http://github.com/mynyml/every&quot; title=&quot;every gem github repository&quot;&gt;Original gem&lt;/a&gt; &lt;a href=&quot;http://mynyml.com/15-enumerableevery/&quot; title=&quot;Original blog post&quot;&gt;Original blog post&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch adds the #every method to Enumerable. It is an alternative to using Symbol#to_proc in a common context, namely with #map. It enhences readability and elegance of the code.

This code started out as a [gem](http://github.com/mynyml/every &quot;every&quot;) and has recieved [positive](http://github.com/blog/383-github-rebase-17 &quot;GitHub Rebase 17&quot;) reactions from the community.
@@@ ruby
  enum = [1.4, 2.4 ,3.4]
  enum.map {|i| i.floor } #=&gt; [1, 2, 3]
  enum.map(&amp;:floor)       #=&gt; [1, 2, 3]
  enum.every.floor        #=&gt; [1, 2, 3]

  %w( axb dxf ).every.gsub(/x/,'y')     #=&gt; ['ayb', 'dyf']
  %w( axb dxf ).every.gsub(/x/) { 'y' } #=&gt; ['ayb', 'dyf']

  @company.clients.every.name
@@@

Note that the patch is general enough that it can easily be extended (for example to add the same type of functionality for #select and #reject).


[Patch on github](http://github.com/mynyml/rails/commit/6c131d452389890e4253d30256b2f46afd14ed3f &quot;Enumerable#every patch on github&quot;)
[Original gem](http://github.com/mynyml/every &quot;every gem github repository&quot;)
[Original blog post](http://mynyml.com/15-enumerableevery/ &quot;Original blog post&quot;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch adds the #every method to Enumerable. It is an
alternative to using Symbol#to_proc in a common context, namely
with #map. It enhences readability and elegance of the code.&lt;/p&gt;
&lt;p&gt;This code started out as a &lt;a href=&quot;http://github.com/mynyml/every&quot; title=&quot;every&quot;&gt;gem&lt;/a&gt; and has
recieved &lt;a href=&quot;http://github.com/blog/383-github-rebase-17&quot; title=&quot;GitHub Rebase 17&quot;&gt;positive&lt;/a&gt; reactions from the
community.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  enum = [1.4, 2.4 ,3.4]
  enum.map {|i| i.floor } #=&amp;gt; [1, 2, 3]
  enum.map(&amp;amp;:floor)       #=&amp;gt; [1, 2, 3]
  enum.every.floor        #=&amp;gt; [1, 2, 3]

  %w( axb dxf ).every.gsub(/x/,'y')     #=&amp;gt; ['ayb', 'dyf']
  %w( axb dxf ).every.gsub(/x/) { 'y' } #=&amp;gt; ['ayb', 'dyf']

  @company.clients.every.name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the patch is general enough that it can easily be
extended (for example to add the same type of functionality for
#select and #reject).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/mynyml/rails/commit/6c131d452389890e4253d30256b2f46afd14ed3f&quot; title=&quot;Enumerable#every patch on github&quot;&gt;Patch on github&lt;/a&gt;
&lt;a href=&quot;http://github.com/mynyml/every&quot; title=&quot;every gem github repository&quot;&gt;Original gem&lt;/a&gt; &lt;a href=&quot;http://mynyml.com/15-enumerableevery/&quot; title=&quot;Original blog post&quot;&gt;Original blog post&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-06T16:28:09+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-06T16:30:51+01:00</updated-at>
      <user-id type="integer">52995</user-id>
      <version type="integer">1</version>
      <user-name>mynyml</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1

to_proc w/ params, yay!</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;to_proc w/ params, yay!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-06T18:17:09+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-06T18:17:15+01:00</updated-at>
      <user-id type="integer">12305</user-id>
      <version type="integer">2</version>
      <user-name>macournoyer</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It looks pretty good, though I have found a few funny cases when you call every without any methods. The following is from irb.

@@@ ruby
&gt;&gt; enum = %w( axc dxf )
=&gt; [&quot;axc&quot;, &quot;dxf&quot;]
&gt;&gt; enum.every
=&gt;                      # Blank
&gt;&gt; puts enum.every
NoMethodError: undefined method `to_ary' for &quot;axc&quot;:String
	from ./active_support/core_ext/enumerable/proxy.rb:10:in `__send__'
	from ./active_support/core_ext/enumerable/proxy.rb:10:in `method_missing'
	from ./active_support/core_ext/enumerable/proxy.rb:10:in `map'
	from ./active_support/core_ext/enumerable/proxy.rb:10:in `__send__'
	from ./active_support/core_ext/enumerable/proxy.rb:10:in `method_missing'
	from (irb):13:in `puts'
	from (irb):13
@@@

I'm not sure why the first example is blank. But, in the second case puts tries to call to_ary on the proxy which in turn tries to call to_ary on the strings. It doesn't like that so much.

I know that people shouldn't just call &quot;every&quot; by itself, but it would be nice to make it behave a bit more gracefully there.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It looks pretty good, though I have found a few funny cases when
you call every without any methods. The following is from irb.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;gt;&amp;gt; enum = %w( axc dxf )
=&amp;gt; [&amp;quot;axc&amp;quot;, &amp;quot;dxf&amp;quot;]
&amp;gt;&amp;gt; enum.every
=&amp;gt;                      # Blank
&amp;gt;&amp;gt; puts enum.every
NoMethodError: undefined method `to_ary' for &amp;quot;axc&amp;quot;:String
	from ./active_support/core_ext/enumerable/proxy.rb:10:in `__send__'
	from ./active_support/core_ext/enumerable/proxy.rb:10:in `method_missing'
	from ./active_support/core_ext/enumerable/proxy.rb:10:in `map'
	from ./active_support/core_ext/enumerable/proxy.rb:10:in `__send__'
	from ./active_support/core_ext/enumerable/proxy.rb:10:in `method_missing'
	from (irb):13:in `puts'
	from (irb):13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'm not sure why the first example is blank. But, in the second
case puts tries to call to_ary on the proxy which in turn tries to
call to_ary on the strings. It doesn't like that so much.&lt;/p&gt;
&lt;p&gt;I know that people shouldn't just call &quot;every&quot; by itself, but it
would be nice to make it behave a bit more gracefully there.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T02:40:36+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: enumerable feature patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-07T02:40:37+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">3</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Looks like the blank was the fault of Wirble. Without Wirble I get:

@@@ ruby
irb(main):002:0&gt; [1,2,3].every
=&gt; 123
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks like the blank was the fault of Wirble. Without Wirble I
get:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
irb(main):002:0&amp;gt; [1,2,3].every
=&amp;gt; 123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T02:44:35+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-07T02:44:40+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">4</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This got me interested so I added a couple more methods.

The biggest change is the addition of a custom respond_to?
Previously the default behavior was to call respond_to? on each item of the enum and return an enum of booleans. However, methods that call respond_to? expect a single boolean, not an array. My new method returns true if all items in the enum respond to the method and false if any of them do not. This also fixes our puts bug.

@@@ ruby
['a', 1].every.respond_to?(:to_s) # =&gt; true
['a', 1].every.respond_to?(:upcase) # =&gt; false
@@@

proxy_target - just returns the enum it's operating on
proxy_method - method used to group return, usually :map

proxy_send - same as method_missing, allows you to call a method on the enum that is defined in the Proxy

@@@ ruby
['a', 1].every.proxy_send(:respond_to?, :upcase) #=&gt; [true, false]
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;This got me interested so I added a couple more methods.&lt;/p&gt;
&lt;p&gt;The biggest change is the addition of a custom respond_to?
Previously the default behavior was to call respond_to? on each
item of the enum and return an enum of booleans. However, methods
that call respond_to? expect a single boolean, not an array. My new
method returns true if all items in the enum respond to the method
and false if any of them do not. This also fixes our puts bug.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
['a', 1].every.respond_to?(:to_s) # =&amp;gt; true
['a', 1].every.respond_to?(:upcase) # =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;proxy_target - just returns the enum it's operating on
proxy_method - method used to group return, usually :map&lt;/p&gt;
&lt;p&gt;proxy_send - same as method_missing, allows you to call a method
on the enum that is defined in the Proxy&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
['a', 1].every.proxy_send(:respond_to?, :upcase) #=&amp;gt; [true, false]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T03:18:33+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-07T03:18:38+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">5</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Blah, stupid formatting.
proxy_target and proxy_method are two separate methods even though my descriptions of them ended up on one line.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Blah, stupid formatting. proxy_target and proxy_method are two
separate methods even though my descriptions of them ended up on
one line.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T03:22:15+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-07T03:22:16+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">6</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Fixed a mistake in tests.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Fixed a mistake in tests.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T03:34:35+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-07T03:34:40+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">7</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I really your proxy_* methods. They provide simple introspection and feel like AR's association_proxy.

As for #respond_to?, though, I feel it might be breaking expected behaviour; a few people I discussed with proposed adding the same type of behaviour for #nil?, #any?, etc, but I think those are simple/intuitive enough with the basic behaviour, using #all? and #any?:

  enum = ['foo', 'bar', '']
  enum.every.empty?.all?              #=&gt; false
  enum.every.empty?.any?              #=&gt; true
  enum.every.respond_to?(:to_s).all?  #=&gt; true
  enum.every.blank?.any?              #=&gt; true
  enum.every.nil?.any?                #=&gt; false
  # ...

The two first statements are included in the method's examples, so that the user has an idea of how to easily handle predicate methods.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I really your proxy_* methods. They provide simple introspection
and feel like AR's association_proxy.&lt;/p&gt;
&lt;p&gt;As for #respond_to?, though, I feel it might be breaking
expected behaviour; a few people I discussed with proposed adding
the same type of behaviour for #nil?, #any?, etc, but I think those
are simple/intuitive enough with the basic behaviour, using #all?
and #any?:&lt;/p&gt;
&lt;p&gt;enum = ['foo', 'bar', ''] enum.every.empty?.all? #=&amp;gt; false
enum.every.empty?.any? #=&amp;gt; true
enum.every.respond_to?(:to_s).all? #=&amp;gt; true
enum.every.blank?.any? #=&amp;gt; true enum.every.nil?.any? #=&amp;gt;
false # ...&lt;/p&gt;
&lt;p&gt;The two first statements are included in the method's examples,
so that the user has an idea of how to easily handle predicate
methods.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T13:25:56+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-07T13:25:58+01:00</updated-at>
      <user-id type="integer">52995</user-id>
      <version type="integer">8</version>
      <user-name>mynyml</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sorry about the formatting. That was:

@@@ ruby
  enum = ['foo', 'bar', '']
  enum.every.empty?.all?              #=&gt; false
  enum.every.empty?.any?              #=&gt; true
  enum.every.respond_to?(:to_s).all?  #=&gt; true
  enum.every.blank?.any?              #=&gt; true
  enum.every.nil?.any?                #=&gt; false
  # ...
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry about the formatting. That was:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  enum = ['foo', 'bar', '']
  enum.every.empty?.all?              #=&amp;gt; false
  enum.every.empty?.any?              #=&amp;gt; true
  enum.every.respond_to?(:to_s).all?  #=&amp;gt; true
  enum.every.blank?.any?              #=&amp;gt; true
  enum.every.nil?.any?                #=&amp;gt; false
  # ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T13:28:19+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-07T13:28:24+01:00</updated-at>
      <user-id type="integer">52995</user-id>
      <version type="integer">9</version>
      <user-name>mynyml</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>As for calling #every by itself, I agree it should be handled more gracefully; I'll work on an update this afternoon.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As for calling #every by itself, I agree it should be handled
more gracefully; I'll work on an update this afternoon.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T13:31:46+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-07T13:31:49+01:00</updated-at>
      <user-id type="integer">52995</user-id>
      <version type="integer">10</version>
      <user-name>mynyml</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>The thing that got me interested in the respond_to? method was that Ruby likes to call the respond_to? method internally. And, when it gets back an array, is sees that as equivalent to true. In the case of puts, it calls every.respond_to?(:to_ary). Even if this array is [false, false, false...] it thinks that every does indeed respond to :to_ary. It then proceeds to call every.to_ary which blows up when not all of the elements do indeed respond to :to_ary. I guess the question is how much do you tighten the flexibility of the Every proxy to give Ruby (and Rails) responses they expect. My inclination is that some tightening is good in the most widely used methods, especially in question methods. You can work around this with proxy_send where necessary. I do also like the idea of the all? and any? methods, but that doesn't fix the problem of internal Ruby calls.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The thing that got me interested in the respond_to? method was
that Ruby likes to call the respond_to? method internally. And,
when it gets back an array, is sees that as equivalent to true. In
the case of puts, it calls every.respond_to?(:to_ary). Even if this
array is [false, false, false...] it thinks that every does indeed
respond to :to_ary. It then proceeds to call every.to_ary which
blows up when not all of the elements do indeed respond to :to_ary.
I guess the question is how much do you tighten the flexibility of
the Every proxy to give Ruby (and Rails) responses they expect. My
inclination is that some tightening is good in the most widely used
methods, especially in question methods. You can work around this
with proxy_send where necessary. I do also like the idea of the
all? and any? methods, but that doesn't fix the problem of internal
Ruby calls.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T14:34:36+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-07T14:34:39+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">11</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I've been looking at how this can be improved, and it seems like there are two options:

1. Add special handling for #respond_to?, and warn the users in the method's documentation, letting them know they can use #proxy_send if they really want to use #respond_to? on #every.

2. Don't add special handling for #respond_to?, and caution the users in the method's documentation about using #every by itself.

I'm inclined to go with 2. for a number of reasons;

First, as I mentioned previously, it breaks consistency. There were personally a few occasions where I used every.respond_to? so I think it's relatively normal usage.

Also, the problem you describe above comes from a very specific context: #every called by itself, *and* as argument to a method (#puts).  Pretty much an edge case. And even then, it behaves consistently (NoMethodError: undefined method `to_ary' for &quot;axc&quot;:String), so it's obvious that #every is trying to call #to_ary on each object. In fact, I don't think it's necessary to mention it in the method's documentation.

Keeping the original behaviour removes the need for #proxy_send, so it avoids adding an extra two methods (along with #respond_to?) leaving the proxy simple, lean and clean.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've been looking at how this can be improved, and it seems like
there are two options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add special handling for #respond_to?, and warn the users in the
method's documentation, letting them know they can use #proxy_send
if they really want to use #respond_to? on #every.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't add special handling for #respond_to?, and caution the
users in the method's documentation about using #every by
itself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm inclined to go with 2. for a number of reasons;&lt;/p&gt;
&lt;p&gt;First, as I mentioned previously, it breaks consistency. There
were personally a few occasions where I used every.respond_to? so I
think it's relatively normal usage.&lt;/p&gt;
&lt;p&gt;Also, the problem you describe above comes from a very specific
context: #every called by itself, &lt;em&gt;and&lt;/em&gt; as argument to a
method (#puts). Pretty much an edge case. And even then, it behaves
consistently (NoMethodError: undefined method &lt;code&gt;to_ary' for
[axc](String)), so it's obvious that #every is trying to call
#to_ary on each object. In fact, I don't think it's necessary to
mention it in the method's documentation.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Keeping the original behaviour removes the need for #proxy_send,
so it avoids adding an extra two methods (along with #respond_to?)
leaving the proxy simple, lean and clean.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-09T02:18:19+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-09T02:18:20+01:00</updated-at>
      <user-id type="integer">52995</user-id>
      <version type="integer">12</version>
      <user-name>mynyml</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Add updated the original patch to contain Peter's #proxy_target and #proxy_method if someone happens to prefer this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Add updated the original patch to contain Peter's #proxy_target
and #proxy_method if someone happens to prefer this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-09T02:22:20+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-09T02:22:26+01:00</updated-at>
      <user-id type="integer">52995</user-id>
      <version type="integer">13</version>
      <user-name>mynyml</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I see your point about consistency. What was confusing to me was not why #to_ary was breaking, but that is was calling #to_ary at all. Which, as I've already explained was due to a behind the scenes call to #respond_to? and the fact that the returned array was interpreted as equivalent to true.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I see your point about consistency. What was confusing to me was
not why #to_ary was breaking, but that is was calling #to_ary at
all. Which, as I've already explained was due to a behind the
scenes call to #respond_to? and the fact that the returned array
was interpreted as equivalent to true.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-09T02:34:25+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-09T02:34:29+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">14</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Oops. wrote with typos, patched with fail.
Forgot to update the proxy methods whitelist.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oops. wrote with typos, patched with fail. Forgot to update the
proxy methods whitelist.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-09T02:34:34+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-09T02:34:40+01:00</updated-at>
      <user-id type="integer">52995</user-id>
      <version type="integer">15</version>
      <user-name>mynyml</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>-1.

I don't want this sort of method chaining in my environment.  I don't like Symbol#to_proc much either, though, so maybe I'm in the minority.

Is this for internal rails usage (to replace Symbol#to_proc in internal usage), or for a user of the library (active_record, etc)?

That question also goes for Symbol#to_proc.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't want this sort of method chaining in my environment. I
don't like Symbol#to_proc much either, though, so maybe I'm in the
minority.&lt;/p&gt;
&lt;p&gt;Is this for internal rails usage (to replace Symbol#to_proc in
internal usage), or for a user of the library (active_record,
etc)?&lt;/p&gt;
&lt;p&gt;That question also goes for Symbol#to_proc.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-11T00:51:02+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-11T00:51:07+01:00</updated-at>
      <user-id type="integer">13817</user-id>
      <version type="integer">16</version>
      <user-name>Scott Taylor</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Being pure ruby, #every is understandably slower than native c Enumerable#map, and slower than the Symbol#to_proc alternative (which is built into ruby since 1.8.7), so I'm not proposing it be used for rails internals, but simply as an alternative tool for the user.

Also, if you take a look at the implementation you will notice that the logic is very well contained; so if your comment about not wanting &quot;this sort of method chaining in my environment&quot; comes from a fear of seeing &quot;too much magic&quot; or hard to debug errors, I don't think it should be much of an issue. Of course you are free to avoid using Symbol#to_proc or Enumerable#every in your own code.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Being pure ruby, #every is understandably slower than native c
Enumerable#map, and slower than the Symbol#to_proc alternative
(which is built into ruby since 1.8.7), so I'm not proposing it be
used for rails internals, but simply as an alternative tool for the
user.&lt;/p&gt;
&lt;p&gt;Also, if you take a look at the implementation you will notice
that the logic is very well contained; so if your comment about not
wanting &quot;this sort of method chaining in my environment&quot; comes from
a fear of seeing &quot;too much magic&quot; or hard to debug errors, I don't
think it should be much of an issue. Of course you are free to
avoid using Symbol#to_proc or Enumerable#every in your own
code.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-11T17:07:39+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-04-11T17:07:42+01:00</updated-at>
      <user-id type="integer">52995</user-id>
      <version type="integer">17</version>
      <user-name>mynyml</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>I have mixed feelings about the patch. While it does make the code more readable, I'm not sure if the implementation complexity is worth it. Additionally, Sym#to_proc is a part of Ruby 1.9 already.

Closing as &quot;wontfix&quot; and assigning to Jeremy as he may have more to say.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have mixed feelings about the patch. While it does make the
code more readable, I'm not sure if the implementation complexity
is worth it. Additionally, Sym#to_proc is a part of Ruby 1.9
already.&lt;/p&gt;
&lt;p&gt;Closing as &quot;wontfix&quot; and assigning to Jeremy as he may have more
to say.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-17T15:21:11+01:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>enumerable feature patch tested verified</tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2009-05-17T15:21:16+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">18</version>
      <user-name>Pratik</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-08T01:51:35+00:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: enumerable feature patch tested verified
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">1582</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2010-11-08T01:51:42+00:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">20</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T00:48:57+00:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">1582</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2011-02-19T09:28:14+00:00</updated-at>
      <user-id type="integer">137759</user-id>
      <version type="integer">21</version>
      <user-name>mklo</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>I recognized &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;cheap louboutin shoes&lt;/a&gt; its social value. I saw its ordered happiness &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;louboutin discount&lt;/a&gt; , but a fever in my blood asked for a wilder &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;discount louboutin shoes&lt;/a&gt; course. There seemed to me something alarming in such &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;cheap christian louboutin shoes&lt;/a&gt; Store easy delights. In my heart was desire to live &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;discounted christian louboutin shoes On Sale&lt;/a&gt; more dangerously. I was not unprepared for jagged rocks and treacherous &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;http://www.christianlouboutinpumps2u.com/&lt;/a&gt; .</body>
      <body-html>&lt;div&gt;&lt;p&gt;I recognized &lt;a href=
&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;cheap louboutin
shoes&lt;/a&gt; its social value. I saw its ordered happiness &lt;a href=
&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;louboutin discount&lt;/a&gt;
, but a fever in my blood asked for a wilder &lt;a href=
&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;discount louboutin
shoes&lt;/a&gt; course. There seemed to me something alarming in such
&lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;cheap christian
louboutin shoes&lt;/a&gt; Store easy delights. In my heart was desire to
live &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;discounted
christian louboutin shoes On Sale&lt;/a&gt; more dangerously. I was not
unprepared for jagged rocks and treacherous &lt;a href=
&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;http://www.christianlouboutinpumps2u.com/&lt;/a&gt;
.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T01:09:44+00:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">1582</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2011-02-19T09:27:35+00:00</updated-at>
      <user-id type="integer">137764</user-id>
      <version type="integer">22</version>
      <user-name>afra89</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>The &lt;a href=&quot;http://www.christianlouboutins2u.com/&quot;&gt;discount christian  louboutin pumps&lt;/a&gt; happiest people don't necessarily have the best &lt;a href=&quot;http://www.christianlouboutins2u.com/&quot;&gt;christian louboutin shoes&lt;/a&gt; of everything. They just make the most of everything that comes along their &lt;a href=&quot;http://www.christianlouboutins2u.com/&quot;&gt;christian louboutin sale&lt;/a&gt; way. Happiness are for those who cry, those who have searched, and those who have tried because only &lt;a href=&quot;http://www.christianlouboutins2u.com/Christian-Louboutin-/Christian-Louboutin-Boots/&quot; title=&quot;Christian Louboutin Boots&quot;&gt;christian louboutin boots&lt;/a&gt; they can appreciate the importance of people who have touched their &lt;a href=&quot;http://www.christianlouboutins2u.com/&quot;&gt;http://www.christianlouboutins2u.com/&lt;/a&gt; lives.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The &lt;a href=&quot;http://www.christianlouboutins2u.com/&quot;&gt;discount
christian louboutin pumps&lt;/a&gt; happiest people don't necessarily
have the best &lt;a href=
&quot;http://www.christianlouboutins2u.com/&quot;&gt;christian louboutin
shoes&lt;/a&gt; of everything. They just make the most of everything that
comes along their &lt;a href=
&quot;http://www.christianlouboutins2u.com/&quot;&gt;christian louboutin
sale&lt;/a&gt; way. Happiness are for those who cry, those who have
searched, and those who have tried because only &lt;a href=
&quot;http://www.christianlouboutins2u.com/Christian-Louboutin-/Christian-Louboutin-Boots/&quot;
title=&quot;Christian Louboutin Boots&quot;&gt;christian louboutin boots&lt;/a&gt;
they can appreciate the importance of people who have touched their
&lt;a href=
&quot;http://www.christianlouboutins2u.com/&quot;&gt;http://www.christianlouboutins2u.com/&lt;/a&gt;
lives.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T01:10:49+00:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">1582</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2011-02-19T09:27:37+00:00</updated-at>
      <user-id type="integer">137764</user-id>
      <version type="integer">23</version>
      <user-name>afra89</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>I recognized &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;cheap louboutin shoes&lt;/a&gt; its social value. I saw its ordered happiness &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;louboutin discount&lt;/a&gt; , but a fever in my blood asked for a wilder &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;discount louboutin shoes&lt;/a&gt; course. There seemed to me something alarming in such &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;cheap christian louboutin shoes&lt;/a&gt; Store easy delights. In my heart was desire to live &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;discounted christian louboutin shoes On Sale&lt;/a&gt; more dangerously. I was not unprepared for jagged rocks and treacherous &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;http://www.christianlouboutinpumps2u.com/&lt;/a&gt; .</body>
      <body-html>&lt;div&gt;&lt;p&gt;I recognized &lt;a href=
&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;cheap louboutin
shoes&lt;/a&gt; its social value. I saw its ordered happiness &lt;a href=
&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;louboutin discount&lt;/a&gt;
, but a fever in my blood asked for a wilder &lt;a href=
&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;discount louboutin
shoes&lt;/a&gt; course. There seemed to me something alarming in such
&lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;cheap christian
louboutin shoes&lt;/a&gt; Store easy delights. In my heart was desire to
live &lt;a href=&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;discounted
christian louboutin shoes On Sale&lt;/a&gt; more dangerously. I was not
unprepared for jagged rocks and treacherous &lt;a href=
&quot;http://www.christianlouboutinpumps2u.com/&quot;&gt;http://www.christianlouboutinpumps2u.com/&lt;/a&gt;
.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T01:12:19+00:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">1582</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2011-02-19T09:27:37+00:00</updated-at>
      <user-id type="integer">137764</user-id>
      <version type="integer">24</version>
      <user-name>afra89</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>The &lt;a href=&quot;http://www.christianlouboutins2u.com/&quot;&gt;discount christian  louboutin pumps&lt;/a&gt; happiest people don't necessarily have the best &lt;a href=&quot;http://www.christianlouboutins2u.com/&quot;&gt;christian louboutin shoes&lt;/a&gt; of everything. They just make the most of everything that comes along their &lt;a href=&quot;http://www.christianlouboutins2u.com/&quot;&gt;christian louboutin sale&lt;/a&gt; way. Happiness are for those who cry, those who have searched, and those who have tried because only &lt;a href=&quot;http://www.christianlouboutins2u.com/Christian-Louboutin-/Christian-Louboutin-Boots/&quot; title=&quot;Christian Louboutin Boots&quot;&gt;christian louboutin boots&lt;/a&gt; they can appreciate the importance of people who have touched their &lt;a href=&quot;http://www.christianlouboutins2u.com/&quot;&gt;http://www.christianlouboutins2u.com/&lt;/a&gt; lives.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The &lt;a href=&quot;http://www.christianlouboutins2u.com/&quot;&gt;discount
christian louboutin pumps&lt;/a&gt; happiest people don't necessarily
have the best &lt;a href=
&quot;http://www.christianlouboutins2u.com/&quot;&gt;christian louboutin
shoes&lt;/a&gt; of everything. They just make the most of everything that
comes along their &lt;a href=
&quot;http://www.christianlouboutins2u.com/&quot;&gt;christian louboutin
sale&lt;/a&gt; way. Happiness are for those who cry, those who have
searched, and those who have tried because only &lt;a href=
&quot;http://www.christianlouboutins2u.com/Christian-Louboutin-/Christian-Louboutin-Boots/&quot;
title=&quot;Christian Louboutin Boots&quot;&gt;christian louboutin boots&lt;/a&gt;
they can appreciate the importance of people who have touched their
&lt;a href=
&quot;http://www.christianlouboutins2u.com/&quot;&gt;http://www.christianlouboutins2u.com/&lt;/a&gt;
lives.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T01:13:04+00:00</created-at>
      <creator-id type="integer">52995</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2430</number>
      <permalink>enumerableevery-functionality</permalink>
      <priority type="integer">1582</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Enumerable#every functionality</title>
      <updated-at type="datetime">2011-02-19T09:27:39+00:00</updated-at>
      <user-id type="integer">137764</user-id>
      <version type="integer">25</version>
      <user-name>afra89</user-name>
      <creator-name>mynyml</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2430</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2b2e25bcffb84317328c83be4d02566a069a6d1a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-04-06T16:28:09+01:00</created-at>
      <filename>every.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">108380</id>
      <size type="integer">3976</size>
      <uploader-id type="integer">52995</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/108380/every.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>e55952b9ac0f8d709108ae72fdb6b47d5aa049ad</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-04-07T03:34:35+01:00</created-at>
      <filename>every-extended.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">108723</id>
      <size type="integer">6541</size>
      <uploader-id type="integer">19875</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/108723/every-extended.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>dd99aff2db19c54c7482cf647153d797541f481e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-04-09T02:22:20+01:00</created-at>
      <filename>every_with_introspection.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">109757</id>
      <size type="integer">4291</size>
      <uploader-id type="integer">52995</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/109757/every_with_introspection.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>f76f7be6dc4fe2dbee20e31216eb8c292fff1f61</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-04-09T02:34:34+01:00</created-at>
      <filename>every_with_introspection-updated.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">109758</id>
      <size type="integer">6540</size>
      <uploader-id type="integer">52995</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/109758/every_with_introspection-updated.diff</url>
    </attachment>
  </attachments>
</ticket>
