<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-07-02T10:53:24+01:00</created-at>
  <creator-id type="integer">61625</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2862</number>
  <permalink>possible-routing-bug</permalink>
  <priority type="integer">1954</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>2-3-stable methodnotallowed routingerror</tag>
  <title>Possible routing bug</title>
  <updated-at type="datetime">2009-07-02T21:15:55+01:00</updated-at>
  <user-id type="integer">61625</user-id>
  <version type="integer">3</version>
  <user-name>Steven Hartland</user-name>
  <creator-name>Steven Hartland</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2862</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When a catch all route for a specific method is configured and an invalid URL is requested instead of the expected ActionController::RoutingError we're seeing ActionController::MethodNotAllowed

An example of this is:
map.connect '*path', :controller =&gt; 'fixes', :action =&gt; 'options_for_mopd', :conditions =&gt; { :method =&gt; :options }

It seems that the conditions check is being done too late so instead of matching on the combination of the path and conditions instead its matching on the path and then checking the conditions, resulting in what I believe is an incorrect exception.</original-body>
  <latest-body>When a catch all route for a specific method is configured and an invalid URL is requested instead of the expected ActionController::RoutingError we're seeing ActionController::MethodNotAllowed

An example of this is:
map.connect '*path', :controller =&gt; 'fixes', :action =&gt; 'options_for_mopd', :conditions =&gt; { :method =&gt; :options }

It seems that the conditions check is being done too late so instead of matching on the combination of the path and conditions instead its matching on the path and then checking the conditions, resulting in what I believe is an incorrect exception.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When a catch all route for a specific method is configured and
an invalid URL is requested instead of the expected
ActionController::RoutingError we're seeing
ActionController::MethodNotAllowed&lt;/p&gt;
&lt;p&gt;An example of this is: map.connect '*path', :controller =&amp;gt;
'fixes', :action =&amp;gt; 'options_for_mopd', :conditions =&amp;gt; {
:method =&amp;gt; :options }&lt;/p&gt;
&lt;p&gt;It seems that the conditions check is being done too late so
instead of matching on the combination of the path and conditions
instead its matching on the path and then checking the conditions,
resulting in what I believe is an incorrect exception.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When a catch all route for a specific method is configured and an invalid URL is requested instead of the expected ActionController::RoutingError we're seeing ActionController::MethodNotAllowed

An example of this is:
map.connect '*path', :controller =&gt; 'fixes', :action =&gt; 'options_for_mopd', :conditions =&gt; { :method =&gt; :options }

It seems that the conditions check is being done too late so instead of matching on the combination of the path and conditions instead its matching on the path and then checking the conditions, resulting in what I believe is an incorrect exception.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When a catch all route for a specific method is configured and
an invalid URL is requested instead of the expected
ActionController::RoutingError we're seeing
ActionController::MethodNotAllowed&lt;/p&gt;
&lt;p&gt;An example of this is:&lt;br&gt;
map.connect '*path', :controller =&amp;gt; 'fixes', :action =&amp;gt;
'options_for_mopd', :conditions =&amp;gt; { :method =&amp;gt; :options
}&lt;/p&gt;
&lt;p&gt;It seems that the conditions check is being done too late so
instead of matching on the combination of the path and conditions
instead its matching on the path and then checking the conditions,
resulting in what I believe is an incorrect exception.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-02T10:53:24+01:00</created-at>
      <creator-id type="integer">61625</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2862</number>
      <permalink>possible-routing-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable methodnotallowed routingerror</tag>
      <title>Possible routing bug</title>
      <updated-at type="datetime">2009-07-02T10:53:27+01:00</updated-at>
      <user-id type="integer">61625</user-id>
      <version type="integer">1</version>
      <user-name>Steven Hartland</user-name>
      <creator-name>Steven Hartland</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2862</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails specifically raises a MethodNotAllowed in this case to mirror the HTTP error codes http://en.wikipedia.org/wiki/List_of_HTTP_status_codes specifically, 405</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails specifically raises a MethodNotAllowed in this case to
mirror the HTTP error codes &lt;a href=
&quot;http://en.wikipedia.org/wiki/List_of_HTTP_status_codes&quot;&gt;http://en.wikipedia.org/wiki/List_of_HTTP_status_codes&lt;/a&gt;
specifically, 405&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-02T18:18:12+01:00</created-at>
      <creator-id type="integer">61625</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2862</number>
      <permalink>possible-routing-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2-3-stable methodnotallowed routingerror</tag>
      <title>Possible routing bug</title>
      <updated-at type="datetime">2009-07-02T18:18:15+01:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">2</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Steven Hartland</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2862</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I would be inclined to agree for a none wild card path, but with the current behaviour is impossible to catch the total wild card case for a specific method request, without effectively breaking standard 404 behaviour for the instance.

It may be that an additional directive to the route, possibly within :conditions, could be used to indicate if a match to the rule but not the method should result in NotFound or MethodNotAllowed.

An example of this could be:
 map.connect '*path', :controller =&gt; 'fixes', :action =&gt; 'options_for_mopd', :conditions =&gt; { :method =&gt; :options, :match_method =&gt; true }

Either way it would be a good idea to make it clear in the docs of ActionController::Routing as the current statement:
&quot;With conditions you can define restrictions on routes.&quot;
Indicates that conditions &quot;restrict&quot; the matching of a route, which is not the case; the route matches but is bypassed in a post filter by the condition, hence facilitating MethodNotAllowed / 405 functionaility, if the path matches but the method does not.

For completeness if anyone reading this is looking for a workaround, you can do this by adding a second catch all route without a :method condition that generates 404 e.g
 map.nofile '*path', :controller =&gt; 'fixes', :action =&gt; 'do404'</body>
      <body-html>&lt;div&gt;&lt;p&gt;I would be inclined to agree for a none wild card path, but with
the current behaviour is impossible to catch the total wild card
case for a specific method request, without effectively breaking
standard 404 behaviour for the instance.&lt;/p&gt;
&lt;p&gt;It may be that an additional directive to the route, possibly
within :conditions, could be used to indicate if a match to the
rule but not the method should result in NotFound or
MethodNotAllowed.&lt;/p&gt;
&lt;p&gt;An example of this could be:&lt;br&gt;
map.connect '*path', :controller =&amp;gt; 'fixes', :action =&amp;gt;
'options_for_mopd', :conditions =&amp;gt; { :method =&amp;gt; :options,
:match_method =&amp;gt; true }&lt;/p&gt;
&lt;p&gt;Either way it would be a good idea to make it clear in the docs
of ActionController::Routing as the current statement:&lt;br&gt;
&quot;With conditions you can define restrictions on routes.&quot; Indicates
that conditions &quot;restrict&quot; the matching of a route, which is not
the case; the route matches but is bypassed in a post filter by the
condition, hence facilitating MethodNotAllowed / 405
functionaility, if the path matches but the method does not.&lt;/p&gt;
&lt;p&gt;For completeness if anyone reading this is looking for a
workaround, you can do this by adding a second catch all route
without a :method condition that generates 404 e.g&lt;br&gt;
map.nofile '*path', :controller =&amp;gt; 'fixes', :action =&amp;gt;
'do404'&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-02T21:15:52+01:00</created-at>
      <creator-id type="integer">61625</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2862</number>
      <permalink>possible-routing-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2-3-stable methodnotallowed routingerror</tag>
      <title>Possible routing bug</title>
      <updated-at type="datetime">2009-07-02T21:15:55+01:00</updated-at>
      <user-id type="integer">61625</user-id>
      <version type="integer">3</version>
      <user-name>Steven Hartland</user-name>
      <creator-name>Steven Hartland</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2862</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
