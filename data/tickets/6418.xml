<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-11T22:27:20+00:00</created-at>
  <creator-id type="integer">135698</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6418</number>
  <permalink>exception-propagation-in-integration-tests</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Exception Propagation in Integration Tests</title>
  <updated-at type="datetime">2011-02-11T22:27:23+00:00</updated-at>
  <user-id type="integer">135698</user-id>
  <version type="integer">1</version>
  <user-name>Ed4</user-name>
  <creator-name>Ed4</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6418</url>
  <priority-name nil="true"></priority-name>
  <original-body>In Rails 2.x, you used to be able to do things like this in integration tests:

@@@ ruby

get &quot;/customers/500&quot;
assert_response :not_found

@@@

This kind of test allows you to verify the behavior of your rescue handlers.  In my case, I'm relying on the built-in default handler to catch the ActiveRecord::RecordNotFound exception and serve up :not_found (and I'm also making assertions about how the exception gets logged and reported).

But in Rails 3.x, the RecordNotFound exception propagates out through the &quot;get&quot; call above, and the whole test halts without ever serving up a response, as far as I can tell.

So how are we supposed to test rescue behavior in Rails 3?</original-body>
  <latest-body>In Rails 2.x, you used to be able to do things like this in integration tests:

@@@ ruby

get &quot;/customers/500&quot;
assert_response :not_found

@@@

This kind of test allows you to verify the behavior of your rescue handlers.  In my case, I'm relying on the built-in default handler to catch the ActiveRecord::RecordNotFound exception and serve up :not_found (and I'm also making assertions about how the exception gets logged and reported).

But in Rails 3.x, the RecordNotFound exception propagates out through the &quot;get&quot; call above, and the whole test halts without ever serving up a response, as far as I can tell.

So how are we supposed to test rescue behavior in Rails 3?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In Rails 2.x, you used to be able to do things like this in
integration tests:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
get &quot;/customers/500&quot;
assert_response :not_found&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This kind of test allows you to verify the behavior of your
rescue handlers. In my case, I'm relying on the built-in default
handler to catch the ActiveRecord::RecordNotFound exception and
serve up :not_found (and I'm also making assertions about how the
exception gets logged and reported).&lt;/p&gt;
&lt;p&gt;But in Rails 3.x, the RecordNotFound exception propagates out
through the &quot;get&quot; call above, and the whole test halts without ever
serving up a response, as far as I can tell.&lt;/p&gt;
&lt;p&gt;So how are we supposed to test rescue behavior in Rails 3?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In Rails 2.x, you used to be able to do things like this in integration tests:

@@@ ruby

get &quot;/customers/500&quot;
assert_response :not_found

@@@

This kind of test allows you to verify the behavior of your rescue handlers.  In my case, I'm relying on the built-in default handler to catch the ActiveRecord::RecordNotFound exception and serve up :not_found (and I'm also making assertions about how the exception gets logged and reported).

But in Rails 3.x, the RecordNotFound exception propagates out through the &quot;get&quot; call above, and the whole test halts without ever serving up a response, as far as I can tell.

So how are we supposed to test rescue behavior in Rails 3?</body>
      <body-html>&lt;div&gt;&lt;p&gt;In Rails 2.x, you used to be able to do things like this in
integration tests:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
get &quot;/customers/500&quot;
assert_response :not_found&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This kind of test allows you to verify the behavior of your
rescue handlers. In my case, I'm relying on the built-in default
handler to catch the ActiveRecord::RecordNotFound exception and
serve up :not_found (and I'm also making assertions about how the
exception gets logged and reported).&lt;/p&gt;
&lt;p&gt;But in Rails 3.x, the RecordNotFound exception propagates out
through the &quot;get&quot; call above, and the whole test halts without ever
serving up a response, as far as I can tell.&lt;/p&gt;
&lt;p&gt;So how are we supposed to test rescue behavior in Rails 3?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-11T22:27:20+00:00</created-at>
      <creator-id type="integer">135698</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6418</number>
      <permalink>exception-propagation-in-integration-tests</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Exception Propagation in Integration Tests</title>
      <updated-at type="datetime">2011-02-11T22:27:23+00:00</updated-at>
      <user-id type="integer">135698</user-id>
      <version type="integer">1</version>
      <user-name>Ed4</user-name>
      <creator-name>Ed4</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6418</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
