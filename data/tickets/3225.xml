<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-09-17T17:42:22+01:00</created-at>
  <creator-id type="integer">70131</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3225</number>
  <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
  <priority type="integer">146658</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>active_record count group group_field join patch table_name</tag>
  <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
  <updated-at type="datetime">2011-02-02T18:40:27+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">10</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>pzupan</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
  <priority-name nil="true"></priority-name>
  <original-body>I put together an SQL statement in count and found it didn't respond as expected.

   Foo.count(:f2_id,
      :joins =&gt; 'LEFT JOIN (foo AS table1) ON (foo.f1_id = table1.f2_id )' ,
      :conditions =&gt; 'table1.f1_id = ' + current_user.t_id.to_s,
      :group =&gt; :f2_id,
      :having =&gt; 'count(*) &gt; 3',
      :order =&gt; 'count(*) DESC')

Result:

   SELECT count(`foo`.f2_id) AS count_f2_id, f2_id AS f2_id
     FROM `foo`
     LEFT JOIN (foo AS table1) ON (foo.f1_id = table1.f2_id )
     WHERE (table1.f1_id = 4599) 
     GROUP BY f2_id
     HAVING count(*) &gt; 5
     ORDER BY count(*) DESC

Which fails because the second field name f2_id is ambiguous as it lacks a table definition.

After tracing the parsing of the statement into AR/calculations.rb, I found that it fails to add a table name to group_field if you use only a symbol, even though it properly adds a table name as a prefix to the count column.  The easy solution is to pass an explicit group column name when calling count (e.g.; :group =&gt; 'foo.f2_id').  However, I'm wondering if this is simply an unexpected oversight when using :group with :join and that the table name should always prefix the column when using :group.  Anyone else think it should behave differently?

Here's the method from calculations.rb where group_field is created...

def execute_grouped_calculation(operation, column_name, column, options) #:nodoc:
    group_attr = options[:group].to_s
    association = reflect_on_association(group_attr.to_sym)
    associated = association &amp;&amp; association.macro == :belongs_to # only count belongs_to associations
    group_field = associated ? association.primary_key_name : group_attr
    group_alias = column_alias_for(group_field)
    group_column = column_for group_field
    sql = construct_calculation_sql(operation, column_name, options.merge(:group_field =&gt; group_field, :group_alias =&gt; group_alias))
    calculated_data = connection.select_all(sql)
    aggregate_alias = column_alias_for(operation, column_name)

    ....
end

Suggested change:
    ...
    group_field = associated ? association.primary_key_name : &quot;#{connection.quote_table_name(table_name)}.#{group_attr}&quot;
    ...</original-body>
  <latest-body>I put together an SQL statement in count and found it didn't respond as expected.

   Foo.count(:f2_id,
      :joins =&gt; 'LEFT JOIN (foo AS table1) ON (foo.f1_id = table1.f2_id )' ,
      :conditions =&gt; 'table1.f1_id = ' + current_user.t_id.to_s,
      :group =&gt; :f2_id,
      :having =&gt; 'count(*) &gt; 3',
      :order =&gt; 'count(*) DESC')

Result:

   SELECT count(`foo`.f2_id) AS count_f2_id, f2_id AS f2_id
     FROM `foo`
     LEFT JOIN (foo AS table1) ON (foo.f1_id = table1.f2_id )
     WHERE (table1.f1_id = 4599) 
     GROUP BY f2_id
     HAVING count(*) &gt; 5
     ORDER BY count(*) DESC

Which fails because the second field name f2_id is ambiguous as it lacks a table definition.

After tracing the parsing of the statement into AR/calculations.rb, I found that it fails to add a table name to group_field if you use only a symbol, even though it properly adds a table name as a prefix to the count column.  The easy solution is to pass an explicit group column name when calling count (e.g.; :group =&gt; 'foo.f2_id').  However, I'm wondering if this is simply an unexpected oversight when using :group with :join and that the table name should always prefix the column when using :group.  Anyone else think it should behave differently?

Here's the method from calculations.rb where group_field is created...

def execute_grouped_calculation(operation, column_name, column, options) #:nodoc:
    group_attr = options[:group].to_s
    association = reflect_on_association(group_attr.to_sym)
    associated = association &amp;&amp; association.macro == :belongs_to # only count belongs_to associations
    group_field = associated ? association.primary_key_name : group_attr
    group_alias = column_alias_for(group_field)
    group_column = column_for group_field
    sql = construct_calculation_sql(operation, column_name, options.merge(:group_field =&gt; group_field, :group_alias =&gt; group_alias))
    calculated_data = connection.select_all(sql)
    aggregate_alias = column_alias_for(operation, column_name)

    ....
end

Suggested change:
    ...
    group_field = associated ? association.primary_key_name : &quot;#{connection.quote_table_name(table_name)}.#{group_attr}&quot;
    ...</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I put together an SQL statement in count and found it didn't
respond as expected.&lt;/p&gt;
&lt;p&gt;Foo.count(:f2_id,&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  :joins =&amp;gt; 'LEFT JOIN (foo AS table1) ON (foo.f1_id = table1.f2_id )' ,
  :conditions =&amp;gt; 'table1.f1_id = ' + current_user.t_id.to_s,
  :group =&amp;gt; :f2_id,
  :having =&amp;gt; 'count(*) &amp;gt; 3',
  :order =&amp;gt; 'count(*) DESC')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;p&gt;SELECT count(&lt;code&gt;foo&lt;/code&gt;.f2_id) AS count_f2_id, f2_id AS
f2_id&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; FROM `foo`
 LEFT JOIN (foo AS table1) ON (foo.f1_id = table1.f2_id )
 WHERE (table1.f1_id = 4599) 
 GROUP BY f2_id
 HAVING count(*) &amp;gt; 5
 ORDER BY count(*) DESC&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which fails because the second field name f2_id is ambiguous as
it lacks a table definition.&lt;/p&gt;
&lt;p&gt;After tracing the parsing of the statement into
AR/calculations.rb, I found that it fails to add a table name to
group_field if you use only a symbol, even though it properly adds
a table name as a prefix to the count column. The easy solution is
to pass an explicit group column name when calling count (e.g.;
:group =&amp;gt; 'foo.f2_id'). However, I'm wondering if this is simply
an unexpected oversight when using :group with :join and that the
table name should always prefix the column when using :group.
Anyone else think it should behave differently?&lt;/p&gt;
&lt;p&gt;Here's the method from calculations.rb where group_field is
created...&lt;/p&gt;
&lt;p&gt;def execute_grouped_calculation(operation, column_name, column,
options) #:nodoc:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;group_attr = options[:group].to_s
association = reflect_on_association(group_attr.to_sym)
associated = association &amp;amp;&amp;amp; association.macro == :belongs_to # only count belongs_to associations
group_field = associated ? association.primary_key_name : group_attr
group_alias = column_alias_for(group_field)
group_column = column_for group_field
sql = construct_calculation_sql(operation, column_name, options.merge(:group_field =&amp;gt; group_field, :group_alias =&amp;gt; group_alias))
calculated_data = connection.select_all(sql)
aggregate_alias = column_alias_for(operation, column_name)

....&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;Suggested change:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;...
group_field = associated ? association.primary_key_name : &quot;#{connection.quote_table_name(table_name)}.#{group_attr}&quot;
...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I put together an SQL statement in count and found it didn't respond as expected.

Foo.count(:f2_id,
    :joins =&gt; 'LEFT JOIN (foo AS table1) ON (foo.f1_id = table1.f2_id )' ,
    :conditions =&gt; 'table1.f1_id = ' + current_user.t_id.to_s,
    :group =&gt; :f2_id,
    :having =&gt; 'count(*) &gt; 3',
    :order =&gt; 'count(*) DESC')

Result:

SELECT count(`foo`.f2_id) AS count_f2_id, f2_id AS f2_id
    FROM `foo`
    LEFT JOIN (foo AS table1) ON (foo.f1_id = table1.f2_id )
    WHERE (table1.f1_id = 4599) 
    GROUP BY f2_id
    HAVING count(*) &gt; 5
    ORDER BY count(*) DESC

Which fails because the second field name f2_id is ambiguous as it lacks a table definition.

After tracing the parsing of the statement into AR/calculations.rb, I found that it fails to add a table name to group_field if you use only a symbol, even though it properly adds a table name as a prefix to the count column.  The easy solution is to pass an explicit group column name when calling count (e.g.; :group =&gt; 'foo.f2_id').  However, I'm wondering if this is simply an unexpected oversight when using :group with :join and that the table name should always prefix the column when using :group.  Anyone else think it should behave differently?

Here's the method from calculations.rb where group_field is created...

  def execute_grouped_calculation(operation, column_name, column, options) #:nodoc:
      group_attr = options[:group].to_s
      association = reflect_on_association(group_attr.to_sym)
      associated = association &amp;&amp; association.macro == :belongs_to # only count belongs_to associations
      group_field = associated ? association.primary_key_name : group_attr
      group_alias = column_alias_for(group_field)
      group_column = column_for group_field
      sql = construct_calculation_sql(operation, column_name, options.merge(:group_field =&gt; group_field, :group_alias =&gt; group_alias))
      calculated_data = connection.select_all(sql)
      aggregate_alias = column_alias_for(operation, column_name)

    ....
end

Suggested change:
    ...
    group_field = associated ? association.primary_key_name : &quot;#{connection.quote_table_name(table_name)}.#{group_attr}&quot;
    ...</body>
      <body-html>&lt;div&gt;&lt;p&gt;I put together an SQL statement in count and found it didn't
respond as expected.&lt;/p&gt;
&lt;p&gt;Foo.count(:f2_id,&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:joins =&amp;gt; 'LEFT JOIN (foo AS table1) ON (foo.f1_id = table1.f2_id )' ,
:conditions =&amp;gt; 'table1.f1_id = ' + current_user.t_id.to_s,
:group =&amp;gt; :f2_id,
:having =&amp;gt; 'count(*) &amp;gt; 3',
:order =&amp;gt; 'count(*) DESC')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;p&gt;SELECT count(&lt;code&gt;foo&lt;/code&gt;.f2_id) AS count_f2_id, f2_id AS
f2_id&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;FROM `foo`
LEFT JOIN (foo AS table1) ON (foo.f1_id = table1.f2_id )
WHERE (table1.f1_id = 4599) 
GROUP BY f2_id
HAVING count(*) &amp;gt; 5
ORDER BY count(*) DESC&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which fails because the second field name f2_id is ambiguous as
it lacks a table definition.&lt;/p&gt;
&lt;p&gt;After tracing the parsing of the statement into
AR/calculations.rb, I found that it fails to add a table name to
group_field if you use only a symbol, even though it properly adds
a table name as a prefix to the count column. The easy solution is
to pass an explicit group column name when calling count (e.g.;
:group =&amp;gt; 'foo.f2_id'). However, I'm wondering if this is simply
an unexpected oversight when using :group with :join and that the
table name should always prefix the column when using :group.
Anyone else think it should behave differently?&lt;/p&gt;
&lt;p&gt;Here's the method from calculations.rb where group_field is
created...&lt;/p&gt;
&lt;p&gt;def execute_grouped_calculation(operation, column_name, column,
options) #:nodoc:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  group_attr = options[:group].to_s
  association = reflect_on_association(group_attr.to_sym)
  associated = association &amp;amp;&amp;amp; association.macro == :belongs_to # only count belongs_to associations
  group_field = associated ? association.primary_key_name : group_attr
  group_alias = column_alias_for(group_field)
  group_column = column_for group_field
  sql = construct_calculation_sql(operation, column_name, options.merge(:group_field =&amp;gt; group_field, :group_alias =&amp;gt; group_alias))
  calculated_data = connection.select_all(sql)
  aggregate_alias = column_alias_for(operation, column_name)

....&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;Suggested change:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;...
group_field = associated ? association.primary_key_name : &quot;#{connection.quote_table_name(table_name)}.#{group_attr}&quot;
...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-17T17:42:22+01:00</created-at>
      <creator-id type="integer">70131</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3225</number>
      <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record count group group_field join table_name</tag>
      <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
      <updated-at type="datetime">2009-09-17T17:46:54+01:00</updated-at>
      <user-id type="integer">70131</user-id>
      <version type="integer">1</version>
      <user-name>pzupan</user-name>
      <creator-name>pzupan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-25T12:02:45+01:00</created-at>
      <creator-id type="integer">70131</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: active_record count group group_field join table_name
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3225</number>
      <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record bugmash count group group_field join table_name</tag>
      <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
      <updated-at type="datetime">2009-09-25T12:47:50+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">2</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>pzupan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have attached a patch with tests and implementation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have attached a patch with tests and implementation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-06T23:17:55+01:00</created-at>
      <creator-id type="integer">70131</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: active_record bugmash count group group_field join table_name
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3225</number>
      <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record bugmash count group group_field join patch table_name</tag>
      <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
      <updated-at type="datetime">2009-10-06T23:17:58+01:00</updated-at>
      <user-id type="integer">65618</user-id>
      <version type="integer">3</version>
      <user-name>dira</user-name>
      <creator-name>pzupan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Dira: I tested your patch today and found that the SQL in the new tests doesn't work with PostgreSQL and SQLite. The test did work with MySQL though.

Another thing I found was the redefinition of the test method &quot;test_should_sum_field&quot; that seems to be useless.

The errors in PostgreSQL and SQlite were the following:

**PostgreSQL**
&lt;code&gt;
  1) Error:
test_should_calculate_grouped_association_with_self_association_and_count_on_field_name(CalculationsTest):
ActiveRecord::StatementInvalid: PGError: ERROR:  syntax error at or near &quot;)&quot;
LINE 1: ...ource_id FROM &quot;edges&quot;  INNER JOIN (edges AS second) ON (edge...
                                                             ^
: SELECT count(&quot;edges&quot;.source_id) AS count_source_id, &quot;edges&quot;.source_id AS edges_source_id FROM &quot;edges&quot;  INNER JOIN (edges AS second) ON (edges.sink_id = second.source_id )  GROUP BY &quot;edges&quot;.source_id 
    ./test/cases/../../lib/active_record/connection_adapters/abstract_adapter.rb:217:in `log'
    ./test/cases/../../lib/active_record/connection_adapters/postgresql_adapter.rb:551:in `execute_without_query_record'
    ./test/cases/helper.rb:39:in `execute'
    ./test/cases/../../lib/active_record/connection_adapters/postgresql_adapter.rb:1049:in `select_raw'
    ./test/cases/../../lib/active_record/connection_adapters/postgresql_adapter.rb:1036:in `select'
    ./test/cases/../../lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all_without_query_cache'
    ./test/cases/../../lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'
    ./test/cases/../../lib/active_record/calculations.rb:257:in `execute_grouped_calculation'
    ./test/cases/../../lib/active_record/calculations.rb:131:in `calculate'
    ./test/cases/../../lib/active_record/calculations.rb:129:in `catch'
    ./test/cases/../../lib/active_record/calculations.rb:129:in `calculate'
    ./test/cases/../../lib/active_record/calculations.rb:47:in `count'
    ./test/cases/calculations_test.rb:198:in `test_should_calculate_grouped_association_with_self_association_and_count_on_field_name'
    ./test/cases/../../lib/../../activemodel/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
    ./test/cases/../../lib/../../activemodel/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run'

  2) Error:
test_should_calculate_grouped_association_with_self_association_and_count_on_full_field_name(CalculationsTest):
ActiveRecord::StatementInvalid: PGError: ERROR:  syntax error at or near &quot;)&quot;
LINE 1: ...ource_id FROM &quot;edges&quot;  INNER JOIN (edges AS second) ON (edge...
                                                             ^
: SELECT count(second.source_id) AS count_second_source_id, second.source_id AS second_source_id FROM &quot;edges&quot;  INNER JOIN (edges AS second) ON (edges.sink_id = second.source_id )  GROUP BY second.source_id 
    ./test/cases/../../lib/active_record/connection_adapters/abstract_adapter.rb:217:in `log'
    ./test/cases/../../lib/active_record/connection_adapters/postgresql_adapter.rb:551:in `execute_without_query_record'
    ./test/cases/helper.rb:39:in `execute'
    ./test/cases/../../lib/active_record/connection_adapters/postgresql_adapter.rb:1049:in `select_raw'
    ./test/cases/../../lib/active_record/connection_adapters/postgresql_adapter.rb:1036:in `select'
    ./test/cases/../../lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all_without_query_cache'
    ./test/cases/../../lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'
    ./test/cases/../../lib/active_record/calculations.rb:257:in `execute_grouped_calculation'
    ./test/cases/../../lib/active_record/calculations.rb:131:in `calculate'
    ./test/cases/../../lib/active_record/calculations.rb:129:in `catch'
    ./test/cases/../../lib/active_record/calculations.rb:129:in `calculate'
    ./test/cases/../../lib/active_record/calculations.rb:47:in `count'
    ./test/cases/calculations_test.rb:208:in `test_should_calculate_grouped_association_with_self_association_and_count_on_full_field_name'
    ./test/cases/../../lib/../../activemodel/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
    ./test/cases/../../lib/../../activemodel/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run'
&lt;/code&gt;

**SQLite3**
&lt;code&gt;
  1) Error:
test_should_calculate_grouped_association_with_self_association_and_count_on_field_name(CalculationsTest):
ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: second.source_id: SELECT count(&quot;edges&quot;.source_id) AS count_source_id, &quot;edges&quot;.source_id AS edges_source_id FROM &quot;edges&quot;  INNER JOIN (edges AS second) ON (edges.sink_id = second.source_id )  GROUP BY &quot;edges&quot;.source_id 
    ./test/cases/../../lib/active_record/connection_adapters/abstract_adapter.rb:217:in `log'
    ./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:150:in `execute_without_query_record'
    ./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:395:in `catch_schema_changes'
    ./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:150:in `execute_without_query_record'
    ./test/cases/helper.rb:39:in `execute'
    ./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:298:in `select'
    ./test/cases/../../lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all_without_query_cache'
    ./test/cases/../../lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'
    ./test/cases/../../lib/active_record/calculations.rb:257:in `execute_grouped_calculation'
    ./test/cases/../../lib/active_record/calculations.rb:131:in `calculate'
    ./test/cases/../../lib/active_record/calculations.rb:129:in `catch'
    ./test/cases/../../lib/active_record/calculations.rb:129:in `calculate'
    ./test/cases/../../lib/active_record/calculations.rb:47:in `count'
    ./test/cases/calculations_test.rb:198:in `test_should_calculate_grouped_association_with_self_association_and_count_on_field_name'
    ./test/cases/../../lib/../../activemodel/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
    ./test/cases/../../lib/../../activemodel/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run'

  2) Error:
test_should_calculate_grouped_association_with_self_association_and_count_on_full_field_name(CalculationsTest):
ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: second.source_id: SELECT count(second.source_id) AS count_second_source_id, second.source_id AS second_source_id FROM &quot;edges&quot;  INNER JOIN (edges AS second) ON (edges.sink_id = second.source_id )  GROUP BY second.source_id 
    ./test/cases/../../lib/active_record/connection_adapters/abstract_adapter.rb:217:in `log'
    ./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:150:in `execute_without_query_record'
    ./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:395:in `catch_schema_changes'
    ./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:150:in `execute_without_query_record'
    ./test/cases/helper.rb:39:in `execute'
    ./test/cases/../../lib/active_record/connection_adapters/sqlite_adapter.rb:298:in `select'
    ./test/cases/../../lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all_without_query_cache'
    ./test/cases/../../lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'
    ./test/cases/../../lib/active_record/calculations.rb:257:in `execute_grouped_calculation'
    ./test/cases/../../lib/active_record/calculations.rb:131:in `calculate'
    ./test/cases/../../lib/active_record/calculations.rb:129:in `catch'
    ./test/cases/../../lib/active_record/calculations.rb:129:in `calculate'
    ./test/cases/../../lib/active_record/calculations.rb:47:in `count'
    ./test/cases/calculations_test.rb:208:in `test_should_calculate_grouped_association_with_self_association_and_count_on_full_field_name'
    ./test/cases/../../lib/../../activemodel/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `__send__'
    ./test/cases/../../lib/../../activemodel/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:62:in `run'
&lt;/code&gt;

So it seems that your `INNER JOIN` alias is not understood in these DBs (and is a syntax error in PostgreSQL).

I'm not a PostgreSQL or SQLite3 expert, but it seems you example is very limited to MySQL.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Dira: I tested your patch today and found that the SQL in the
new tests doesn't work with PostgreSQL and SQLite. The test did
work with MySQL though.&lt;/p&gt;
&lt;p&gt;Another thing I found was the redefinition of the test method
&quot;test_should_sum_field&quot; that seems to be useless.&lt;/p&gt;
&lt;p&gt;The errors in PostgreSQL and SQlite were the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; &lt;code&gt;&lt;br&gt;
1) Error:
test_should_calculate_grouped_association_with_self_association_and_count_on_field_name(CalculationsTest):&lt;br&gt;
ActiveRecord::StatementInvalid: PGError: ERROR: syntax error at or
near &quot;)&quot;&lt;br&gt;
LINE 1: ...ource_id FROM &quot;edges&quot; INNER JOIN (edges AS second) ON
(edge...&lt;br&gt;&lt;/code&gt;&lt;/p&gt;
{mkd-extraction-2cdae367fc573288e8154f028fda606c}
&lt;p&gt;: SELECT count(&quot;edges&quot;.source_id) AS count_source_id,
&quot;edges&quot;.source_id AS edges_source_id FROM &quot;edges&quot; INNER JOIN (edges
AS second) ON (edges.sink_id = second.source_id ) GROUP BY
&quot;edges&quot;.source_id&lt;/p&gt;
{mkd-extraction-8a16f59ae20e40ff40fa2c1f8adb5d6c}
&lt;p&gt;2) Error:
test_should_calculate_grouped_association_with_self_association_and_count_on_full_field_name(CalculationsTest):&lt;br&gt;
ActiveRecord::StatementInvalid: PGError: ERROR: syntax error at or
near &quot;)&quot;&lt;br&gt;
LINE 1: ...ource_id FROM &quot;edges&quot; INNER JOIN (edges AS second) ON
(edge...&lt;br&gt;&lt;/p&gt;
{mkd-extraction-2cdae367fc573288e8154f028fda606c}
&lt;p&gt;: SELECT count(second.source_id) AS count_second_source_id,
second.source_id AS second_source_id FROM &quot;edges&quot; INNER JOIN (edges
AS second) ON (edges.sink_id = second.source_id ) GROUP BY
second.source_id&lt;/p&gt;
{mkd-extraction-512a34c6016ffa7918514c390b738fb2}
&lt;p&gt;&lt;strong&gt;SQLite3&lt;/strong&gt; &lt;code&gt;&lt;br&gt;
1) Error:
test_should_calculate_grouped_association_with_self_association_and_count_on_field_name(CalculationsTest):&lt;br&gt;
ActiveRecord::StatementInvalid: SQLite3::SQLException: no such
column: second.source_id: SELECT count(&quot;edges&quot;.source_id) AS
count_source_id, &quot;edges&quot;.source_id AS edges_source_id FROM &quot;edges&quot;
INNER JOIN (edges AS second) ON (edges.sink_id = second.source_id )
GROUP BY &quot;edges&quot;.source_id&lt;br&gt;&lt;/code&gt;&lt;/p&gt;
{mkd-extraction-a916f19abb37361a398d56b0954d724a}
&lt;p&gt;2) Error:
test_should_calculate_grouped_association_with_self_association_and_count_on_full_field_name(CalculationsTest):&lt;br&gt;
ActiveRecord::StatementInvalid: SQLite3::SQLException: no such
column: second.source_id: SELECT count(second.source_id) AS
count_second_source_id, second.source_id AS second_source_id FROM
&quot;edges&quot; INNER JOIN (edges AS second) ON (edges.sink_id =
second.source_id ) GROUP BY second.source_id&lt;br&gt;&lt;/p&gt;
{mkd-extraction-1f8406fc6a3a5eaadb6c748538d51476}
&lt;p&gt;So it seems that your &lt;code&gt;INNER JOIN&lt;/code&gt; alias is not
understood in these DBs (and is a syntax error in PostgreSQL).&lt;/p&gt;
&lt;p&gt;I'm not a PostgreSQL or SQLite3 expert, but it seems you example
is very limited to MySQL.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-09T12:14:03+01:00</created-at>
      <creator-id type="integer">70131</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3225</number>
      <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record bugmash count group group_field join patch table_name</tag>
      <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
      <updated-at type="datetime">2009-10-09T12:17:41+01:00</updated-at>
      <user-id type="integer">38348</user-id>
      <version type="integer">4</version>
      <user-name>Christopher Hlubek</user-name>
      <creator-name>pzupan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Christopher,

thanks for your feedback. Indeed I tested only on MySQL as I did not have the other databases installed :|

My Postgres installation is still in progress - but I fixed the tests to be compatible with generic SQL syntax and they pass on sqlite.

Could you please verify the patch again? Thank you.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Christopher,&lt;/p&gt;
&lt;p&gt;thanks for your feedback. Indeed I tested only on MySQL as I did
not have the other databases installed :|&lt;/p&gt;
&lt;p&gt;My Postgres installation is still in progress - but I fixed the
tests to be compatible with generic SQL syntax and they pass on
sqlite.&lt;/p&gt;
&lt;p&gt;Could you please verify the patch again? Thank you.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-12T12:56:46+01:00</created-at>
      <creator-id type="integer">70131</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3225</number>
      <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record bugmash count group group_field join patch table_name</tag>
      <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
      <updated-at type="datetime">2009-10-12T12:56:51+01:00</updated-at>
      <user-id type="integer">65618</user-id>
      <version type="integer">5</version>
      <user-name>dira</user-name>
      <creator-name>pzupan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1 from me, as it works in MySQL, PostgreSQL and SQLite3 now on Rails master

BTW, I used the RailsBridge Bugmash VM (http://greg.nokes.name/2009/10/05/railsbridge-bugmash-vm/) that is preconfigured with the databases (except the grants were wrong for MySQL and PostgreSQL) for testing</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 from me, as it works in MySQL, PostgreSQL and SQLite3 now on
Rails master&lt;/p&gt;
&lt;p&gt;BTW, I used the RailsBridge Bugmash VM (&lt;a href=
&quot;http://greg.nokes.name/2009/10/05/railsbridge-bugmash-vm/&quot;&gt;http://greg.nokes.name/2009/10/05/railsbridge-bugmash-vm/&lt;/a&gt;)
that is preconfigured with the databases (except the grants were
wrong for MySQL and PostgreSQL) for testing&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-12T13:18:07+01:00</created-at>
      <creator-id type="integer">70131</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3225</number>
      <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record bugmash count group group_field join patch table_name</tag>
      <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
      <updated-at type="datetime">2009-10-12T13:18:11+01:00</updated-at>
      <user-id type="integer">38348</user-id>
      <version type="integer">6</version>
      <user-name>Christopher Hlubek</user-name>
      <creator-name>pzupan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Cool, thanks for the link!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Cool, thanks for the link!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-12T14:10:54+01:00</created-at>
      <creator-id type="integer">70131</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3225</number>
      <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record bugmash count group group_field join patch table_name</tag>
      <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
      <updated-at type="datetime">2009-10-12T14:10:57+01:00</updated-at>
      <user-id type="integer">65618</user-id>
      <version type="integer">7</version>
      <user-name>dira</user-name>
      <creator-name>pzupan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/13645)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/13645&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-12T12:46:18+00:00</created-at>
      <creator-id type="integer">70131</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: active_record bugmash count group group_field join patch table_name
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3225</number>
      <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record count group group_field join patch table_name</tag>
      <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
      <updated-at type="datetime">2010-02-12T12:46:18+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">8</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>pzupan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:55:24+00:00</created-at>
      <creator-id type="integer">70131</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3225</number>
      <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
      <priority type="integer">146658</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>active_record count group group_field join patch table_name</tag>
      <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
      <updated-at type="datetime">2011-02-02T18:40:14+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">9</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>pzupan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:55:25+00:00</created-at>
      <creator-id type="integer">70131</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3225</number>
      <permalink>arcount-using-symbol-in-group-with-join-fails-to-return-proper-column</permalink>
      <priority type="integer">146658</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>active_record count group group_field join patch table_name</tag>
      <title>AR.count - Using symbol in :group with :join fails to return proper column</title>
      <updated-at type="datetime">2011-02-02T18:40:27+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">10</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>pzupan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3225</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>09545e0cf81c3a4be38dd31fc54dc5bf8aff2d65</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-10-06T23:17:55+01:00</created-at>
      <filename>3225-tests-patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">287993</id>
      <size type="integer">3294</size>
      <uploader-id type="integer">65618</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/287993/3225-tests-patch.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>d409fbdb0a75eb09257656d80be422d9d76ec9df</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-10-12T12:56:46+01:00</created-at>
      <filename>3225-tests-patch-v2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">292777</id>
      <size type="integer">3189</size>
      <uploader-id type="integer">65618</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/292777/3225-tests-patch-v2.diff</url>
    </attachment>
  </attachments>
</ticket>
