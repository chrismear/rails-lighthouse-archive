<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-06-09T05:57:20+01:00</created-at>
  <creator-id type="integer">5060</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4803</number>
  <permalink>patch-remove_column-should-raise-an-argumenterror-when-no-columns-are-passed</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activecord migrations patch</tag>
  <title>[PATCH] remove_column should raise an ArgumentError when no columns are passed</title>
  <updated-at type="datetime">2010-06-23T05:25:57+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">9</version>
  <user-name>Repository</user-name>
  <creator-name>Jeff Dean</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4803</url>
  <priority-name nil="true"></priority-name>
  <original-body>Currently in migrations you can write the following:

@@@ ruby
remove_column :foo
@@@

This will execute without errors, but will make no change to your database.  I think this is surprising behavior - I expect my migration methods fail if proper arguments are not passed.  I can't think of any case in which having a migration method that fails silently is desirable.

I've attached a patch that will raise an argument error if you don't pass any columns to remove_column.  It includes a simple test there and it passes against mysql, postgres and sqlite3.</original-body>
  <latest-body>Currently in migrations you can write the following:

@@@ ruby
remove_column :foo
@@@

This will execute without errors, but will make no change to your database.  I think this is surprising behavior - I expect my migration methods fail if proper arguments are not passed.  I can't think of any case in which having a migration method that fails silently is desirable.

I've attached a patch that will raise an argument error if you don't pass any columns to remove_column.  It includes a simple test there and it passes against mysql, postgres and sqlite3.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Currently in migrations you can write the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;remove_column :foo&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will execute without errors, but will make no change to
your database. I think this is surprising behavior - I expect my
migration methods fail if proper arguments are not passed. I can't
think of any case in which having a migration method that fails
silently is desirable.&lt;/p&gt;
&lt;p&gt;I've attached a patch that will raise an argument error if you
don't pass any columns to remove_column. It includes a simple test
there and it passes against mysql, postgres and sqlite3.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Currently in migrations you can write the following:

@@@ ruby
remove_column :foo
@@@

This will execute without errors, but will make no change to your database.  I think this is surprising behavior - I expect my migration methods fail if proper arguments are not passed.  I can't think of any case in which having a migration method that fails silently is desirable.

I've attached a patch that will raise an argument error if you don't pass any columns to remove_column.  It includes a simple test there and it passes against mysql, postgres and sqlite3.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Currently in migrations you can write the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;remove_column :foo&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will execute without errors, but will make no change to
your database. I think this is surprising behavior - I expect my
migration methods fail if proper arguments are not passed. I can't
think of any case in which having a migration method that fails
silently is desirable.&lt;/p&gt;
&lt;p&gt;I've attached a patch that will raise an argument error if you
don't pass any columns to remove_column. It includes a simple test
there and it passes against mysql, postgres and sqlite3.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-09T05:57:20+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4803</number>
      <permalink>patch-remove_column-should-raise-an-argumenterror-when-no-columns-are-passed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activecord migrations</tag>
      <title>[PATCH] remove_column should raise an ArgumentError when no columns are passed</title>
      <updated-at type="datetime">2010-06-09T06:02:05+01:00</updated-at>
      <user-id type="integer">5060</user-id>
      <version type="integer">1</version>
      <user-name>Jeff Dean</user-name>
      <creator-name>Jeff Dean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4803</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-09T06:00:17+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4803</number>
      <permalink>patch-remove_column-should-raise-an-argumenterror-when-no-columns-are-passed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activecord migrations</tag>
      <title>[PATCH] remove_column should raise an ArgumentError when no columns are passed</title>
      <updated-at type="datetime">2010-06-09T06:00:26+01:00</updated-at>
      <user-id type="integer">5060</user-id>
      <version type="integer">2</version>
      <user-name>Jeff Dean</user-name>
      <creator-name>Jeff Dean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4803</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-09T06:02:25+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activecord migrations
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4803</number>
      <permalink>patch-remove_column-should-raise-an-argumenterror-when-no-columns-are-passed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activecord migrations patch</tag>
      <title>[PATCH] remove_column should raise an ArgumentError when no columns are passed</title>
      <updated-at type="datetime">2010-06-09T06:02:29+01:00</updated-at>
      <user-id type="integer">5060</user-id>
      <version type="integer">3</version>
      <user-name>Jeff Dean</user-name>
      <creator-name>Jeff Dean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4803</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-09T06:10:55+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4803</number>
      <permalink>patch-remove_column-should-raise-an-argumenterror-when-no-columns-are-passed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activecord migrations patch</tag>
      <title>[PATCH] remove_column should raise an ArgumentError when no columns are passed</title>
      <updated-at type="datetime">2010-06-09T06:10:57+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">4</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Jeff Dean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4803</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've looked at this one for a while and I'm totally baffled as to why is doesn't just raise a MySQL exception anyway.  If you try to drop a column that doesn't exist using the db shell, you get an error:

    $ mysql -u rails -D activerecord_unittest
    Welcome to the MySQL monitor.  Commands end with ; or \g.
    Your MySQL connection id is 78
    Server version: 5.1.42-log Source distribution

    Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

    mysql&gt; alter table people drop funny;
    ERROR 1091 (42000): Can't DROP 'funny'; check that column/key exists

Seems like the thing you would want to have happen is just for that error to bubble up.  I agree that trying to remove a column doesn't exist should raise an error, but that should just happen naturally, we shouldn't have to have an explicit ArgumentError check for that.  It's important that drop table, change column, etc. behave the same way as well.

So it seems to me that the right fix is to prevent the actual MySQL error from being swallowed, but I haven't figured out why that's happening</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've looked at this one for a while and I'm totally baffled as
to why is doesn't just raise a MySQL exception anyway. If you try
to drop a column that doesn't exist using the db shell, you get an
error:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ mysql -u rails -D activerecord_unittest
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 78
Server version: 5.1.42-log Source distribution

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&amp;gt; alter table people drop funny;
ERROR 1091 (42000): Can't DROP 'funny'; check that column/key exists&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Seems like the thing you would want to have happen is just for
that error to bubble up. I agree that trying to remove a column
doesn't exist should raise an error, but that should just happen
naturally, we shouldn't have to have an explicit ArgumentError
check for that. It's important that drop table, change column, etc.
behave the same way as well.&lt;/p&gt;
&lt;p&gt;So it seems to me that the right fix is to prevent the actual
MySQL error from being swallowed, but I haven't figured out why
that's happening&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-12T03:30:25+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4803</number>
      <permalink>patch-remove_column-should-raise-an-argumenterror-when-no-columns-are-passed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activecord migrations patch</tag>
      <title>[PATCH] remove_column should raise an ArgumentError when no columns are passed</title>
      <updated-at type="datetime">2010-06-12T03:30:30+01:00</updated-at>
      <user-id type="integer">10193</user-id>
      <version type="integer">5</version>
      <user-name>Paul Barry</user-name>
      <creator-name>Jeff Dean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4803</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree that the db errors should be consistent, and I believe they are.  However, when you execute `remove_column(:name)` it's never getting to mysql at all because because internally it's iterating over the column names.  If they are empty, it never enters the loop, so MySQL never gets any commands.  Here's the code:

@@@ ruby
def remove_column(table_name, *column_names)
  remove_column(:people, :first_name)&quot;) if column_names.empty?
  column_names.flatten.each do |column_name|
    execute &quot;ALTER TABLE #{quote_table_name(table_name)} DROP #{quote_column_name(column_name)}&quot;
  end
end
@@@

Notice how if column_names is empty, nothing happens.  

There was a time when `remove_column` only took a single column, and it would raise an ArgumentError if you only passed it a single parameter:

@@@ ruby
def remove_column(table_name, column_name)
  #...
end

remove_column(:table_name)
@@@

If you only passed a single argument, it would throw and error.  Now `remove_column` now has some sugary syntax and it allows multiple columns with `*columns`:

@@@ ruby
remove_column(:table_name, :column1, :column2)
@@@

When that change was made, it broke the original behavior of requiring a second parameter.  So I see this as a regression.  The method can't possibly work when you pass it a single parameter, so I think and ArgumentError is appropriate, and restores the original behavior of the method.

`drop_table` and `change_column` don't happen to have the same bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree that the db errors should be consistent, and I believe
they are. However, when you execute
&lt;code&gt;remove_column(:name)&lt;/code&gt; it's never getting to mysql at
all because because internally it's iterating over the column
names. If they are empty, it never enters the loop, so MySQL never
gets any commands. Here's the code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def remove_column(table_name, *column_names)
  remove_column(:people, :first_name)&quot;) if column_names.empty?
  column_names.flatten.each do |column_name|
    execute &quot;ALTER TABLE #{quote_table_name(table_name)} DROP #{quote_column_name(column_name)}&quot;
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice how if column_names is empty, nothing happens.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;There was a time when &lt;code&gt;remove_column&lt;/code&gt; only took a
single column, and it would raise an ArgumentError if you only
passed it a single parameter:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def remove_column(table_name, column_name)
  #...
end

remove_column(:table_name)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you only passed a single argument, it would throw and error.
Now &lt;code&gt;remove_column&lt;/code&gt; now has some sugary syntax and it
allows multiple columns with &lt;code&gt;*columns&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;remove_column(:table_name, :column1, :column2)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When that change was made, it broke the original behavior of
requiring a second parameter. So I see this as a regression. The
method can't possibly work when you pass it a single parameter, so
I think and ArgumentError is appropriate, and restores the original
behavior of the method.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;drop_table&lt;/code&gt; and &lt;code&gt;change_column&lt;/code&gt; don't
happen to have the same bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-12T03:43:51+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4803</number>
      <permalink>patch-remove_column-should-raise-an-argumenterror-when-no-columns-are-passed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activecord migrations patch</tag>
      <title>[PATCH] remove_column should raise an ArgumentError when no columns are passed</title>
      <updated-at type="datetime">2010-06-12T03:43:55+01:00</updated-at>
      <user-id type="integer">5060</user-id>
      <version type="integer">6</version>
      <user-name>Jeff Dean</user-name>
      <creator-name>Jeff Dean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4803</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Jeff,

You're right, I completely was looking at the wrong thing.  Raising an ArgumentError here completely makes sense if column_names is empty, which is what this patch does, so +1!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jeff,&lt;/p&gt;
&lt;p&gt;You're right, I completely was looking at the wrong thing.
Raising an ArgumentError here completely makes sense if
column_names is empty, which is what this patch does, so +1!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-12T04:11:04+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4803</number>
      <permalink>patch-remove_column-should-raise-an-argumenterror-when-no-columns-are-passed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activecord migrations patch</tag>
      <title>[PATCH] remove_column should raise an ArgumentError when no columns are passed</title>
      <updated-at type="datetime">2010-06-12T04:11:07+01:00</updated-at>
      <user-id type="integer">10193</user-id>
      <version type="integer">7</version>
      <user-name>Paul Barry</user-name>
      <creator-name>Jeff Dean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4803</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [da93d69bcb8c507a16503f883f67597338b5edeb]) remove_column should raise an ArgumentError when no columns are passed [#4803 state:resolved]

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
http://github.com/rails/rails/commit/da93d69bcb8c507a16503f883f67597338b5edeb</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/da93d69bcb8c507a16503f883f67597338b5edeb&quot;
title=
&quot;Changeset [da93d69bcb8c507a16503f883f67597338b5edeb]&quot;&gt;[da93d69bcb8c507a16503f883f67597338b5edeb]&lt;/a&gt;)
remove_column should raise an ArgumentError when no columns are
passed [&lt;a href=&quot;/projects/8994/tickets/4803&quot; title=
&quot;Ticket #4803&quot;&gt;#4803&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=
&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/da93d69bcb8c507a16503f883f67597338b5edeb&quot;&gt;
http://github.com/rails/rails/commit/da93d69bcb8c507a16503f883f6759...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-23T05:25:50+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4803</number>
      <permalink>patch-remove_column-should-raise-an-argumenterror-when-no-columns-are-passed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activecord migrations patch</tag>
      <title>[PATCH] remove_column should raise an ArgumentError when no columns are passed</title>
      <updated-at type="datetime">2010-06-23T05:25:54+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>Jeff Dean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4803</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [e639536ea80e94f5d72493267c8aec21d305cf74]) remove_column should raise an ArgumentError when no columns are passed [#4803 state:resolved]

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
http://github.com/rails/rails/commit/e639536ea80e94f5d72493267c8aec21d305cf74</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/e639536ea80e94f5d72493267c8aec21d305cf74&quot;
title=
&quot;Changeset [e639536ea80e94f5d72493267c8aec21d305cf74]&quot;&gt;[e639536ea80e94f5d72493267c8aec21d305cf74]&lt;/a&gt;)
remove_column should raise an ArgumentError when no columns are
passed [&lt;a href=&quot;/projects/8994/tickets/4803&quot; title=
&quot;Ticket #4803&quot;&gt;#4803&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=
&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/e639536ea80e94f5d72493267c8aec21d305cf74&quot;&gt;
http://github.com/rails/rails/commit/e639536ea80e94f5d72493267c8aec...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-23T05:25:54+01:00</created-at>
      <creator-id type="integer">5060</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4803</number>
      <permalink>patch-remove_column-should-raise-an-argumenterror-when-no-columns-are-passed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activecord migrations patch</tag>
      <title>[PATCH] remove_column should raise an ArgumentError when no columns are passed</title>
      <updated-at type="datetime">2010-06-23T05:25:57+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">9</version>
      <user-name>Repository</user-name>
      <creator-name>Jeff Dean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4803</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>8a9fea8581b33402521e16fb8597446fac85ce19</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-06-09T06:00:18+01:00</created-at>
      <filename>remove-column-raises-argument-error.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">551888</id>
      <size type="integer">2867</size>
      <uploader-id type="integer">5060</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/551888/remove-column-raises-argument-error.diff</url>
    </attachment>
  </attachments>
</ticket>
