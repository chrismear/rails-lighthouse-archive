<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-03T07:20:53+01:00</created-at>
  <creator-id type="integer">20836</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">542</number>
  <permalink>calculation-queries-do-not-take-eager-loading-into-account</permalink>
  <priority type="integer">38</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord eager_loading</tag>
  <title>Calculation queries do not take eager loading into account</title>
  <updated-at type="datetime">2008-10-05T15:18:50+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Lawrence Pit</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/542</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When :include is used with a find (or defined within a scope), like for example: 

@@@ ruby
  Project.scoped({:include =&gt; categories}).find(:limit =&gt; 15)
@@@

then execution of this results in e.g. these queries:

@@@ ruby 
Project Load (0.005413)   SELECT projects.id, title FROM `projects` LIMIT 0, 15

Category Load (0.003505)   SELECT `categories`.*, t0.project_id as _parent_record_id FROM `categories` INNER JOIN `categories_projects` as t0 ON `categories`.id = t0.category_id WHERE (t0.project_id IN (1298,1275,1274,1273,1270,1269,1264,1261,1260,1259,1258,1257,1256,1254,1253))  
@@@

So far so good.

However, when a count is executed on the same scope, the query is like:

@@@ ruby
SQL (0.013835)   SELECT count(DISTINCT `projects`.id) AS count_all FROM `projects` LEFT OUTER JOIN `categories_projects` ON `categories_projects`.project_id = `projects`.id LEFT OUTER JOIN `categories` ON `categories`.id = `categories_projects`.category_id
@@@

I expected, based on the first &quot;Project Load&quot; query executed:

@@@ ruby
SELECT count(DISTINCT `projects`.id) AS count_all FROM `projects`
@@@

which should perform a lot better.</original-body>
  <latest-body>When :include is used with a find (or defined within a scope), like for example: 

@@@ ruby
  Project.scoped({:include =&gt; categories}).find(:limit =&gt; 15)
@@@

then execution of this results in e.g. these queries:

@@@ ruby 
Project Load (0.005413)   SELECT projects.id, title FROM `projects` LIMIT 0, 15

Category Load (0.003505)   SELECT `categories`.*, t0.project_id as _parent_record_id FROM `categories` INNER JOIN `categories_projects` as t0 ON `categories`.id = t0.category_id WHERE (t0.project_id IN (1298,1275,1274,1273,1270,1269,1264,1261,1260,1259,1258,1257,1256,1254,1253))  
@@@

So far so good.

However, when a count is executed on the same scope, the query is like:

@@@ ruby
SQL (0.013835)   SELECT count(DISTINCT `projects`.id) AS count_all FROM `projects` LEFT OUTER JOIN `categories_projects` ON `categories_projects`.project_id = `projects`.id LEFT OUTER JOIN `categories` ON `categories`.id = `categories_projects`.category_id
@@@

I expected, based on the first &quot;Project Load&quot; query executed:

@@@ ruby
SELECT count(DISTINCT `projects`.id) AS count_all FROM `projects`
@@@

which should perform a lot better.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
When :include is used with a find (or defined within a scope), like for example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  Project.scoped({:include =&amp;gt; categories}).find(:limit =&amp;gt; 15)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
then execution of this results in e.g. these queries:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Project Load (0.005413)   SELECT projects.id, title FROM `projects` LIMIT 0, 15

Category Load (0.003505)   SELECT `categories`.*, t0.project_id as _parent_record_id FROM `categories` INNER JOIN `categories_projects` as t0 ON `categories`.id = t0.category_id WHERE (t0.project_id IN (1298,1275,1274,1273,1270,1269,1264,1261,1260,1259,1258,1257,1256,1254,1253))  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
So far so good.
&lt;/p&gt;&lt;p&gt;
However, when a count is executed on the same scope, the query is like:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;SQL (0.013835)   SELECT count(DISTINCT `projects`.id) AS count_all FROM `projects` LEFT OUTER JOIN `categories_projects` ON `categories_projects`.project_id = `projects`.id LEFT OUTER JOIN `categories` ON `categories`.id = `categories_projects`.category_id&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I expected, based on the first &quot;Project Load&quot; query executed:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;SELECT count(DISTINCT `projects`.id) AS count_all FROM `projects`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
which should perform a lot better.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When :include is used with a find (or defined within a scope), like for example: 

@@@ ruby
  Project.scoped({:include =&gt; categories}).find(:limit =&gt; 15)
@@@

then execution of this results in e.g. these queries:

@@@ ruby 
Project Load (0.005413)   SELECT projects.id, title FROM `projects` LIMIT 0, 15

Category Load (0.003505)   SELECT `categories`.*, t0.project_id as _parent_record_id FROM `categories` INNER JOIN `categories_projects` as t0 ON `categories`.id = t0.category_id WHERE (t0.project_id IN (1298,1275,1274,1273,1270,1269,1264,1261,1260,1259,1258,1257,1256,1254,1253))  
@@@

So far so good.

However, when a count is executed on the same scope, the query is like:

@@@ ruby
SQL (0.013835)   SELECT count(DISTINCT `projects`.id) AS count_all FROM `projects` LEFT OUTER JOIN `categories_projects` ON `categories_projects`.project_id = `projects`.id LEFT OUTER JOIN `categories` ON `categories`.id = `categories_projects`.category_id
@@@

I expected, based on the first &quot;Project Load&quot; query executed:

@@@ ruby
SELECT count(DISTINCT `projects`.id) AS count_all FROM `projects`
@@@

which should perform a lot better.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
When :include is used with a find (or defined within a scope), like for example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  Project.scoped({:include =&amp;gt; categories}).find(:limit =&amp;gt; 15)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
then execution of this results in e.g. these queries:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Project Load (0.005413)   SELECT projects.id, title FROM `projects` LIMIT 0, 15

Category Load (0.003505)   SELECT `categories`.*, t0.project_id as _parent_record_id FROM `categories` INNER JOIN `categories_projects` as t0 ON `categories`.id = t0.category_id WHERE (t0.project_id IN (1298,1275,1274,1273,1270,1269,1264,1261,1260,1259,1258,1257,1256,1254,1253))  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
So far so good.
&lt;/p&gt;&lt;p&gt;
However, when a count is executed on the same scope, the query is like:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;SQL (0.013835)   SELECT count(DISTINCT `projects`.id) AS count_all FROM `projects` LEFT OUTER JOIN `categories_projects` ON `categories_projects`.project_id = `projects`.id LEFT OUTER JOIN `categories` ON `categories`.id = `categories_projects`.category_id&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I expected, based on the first &quot;Project Load&quot; query executed:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;SELECT count(DISTINCT `projects`.id) AS count_all FROM `projects`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
which should perform a lot better.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-03T07:20:53+01:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">542</number>
      <permalink>calculation-queries-do-not-take-eager-loading-into-account</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading</tag>
      <title>Calculation queries do not take eager loading into account</title>
      <updated-at type="datetime">2008-07-03T07:20:53+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">1</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/542</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-05T15:18:49+01:00</created-at>
      <creator-id type="integer">20836</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">542</number>
      <permalink>calculation-queries-do-not-take-eager-loading-into-account</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord eager_loading</tag>
      <title>Calculation queries do not take eager loading into account</title>
      <updated-at type="datetime">2008-10-05T15:18:50+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Lawrence Pit</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/542</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
