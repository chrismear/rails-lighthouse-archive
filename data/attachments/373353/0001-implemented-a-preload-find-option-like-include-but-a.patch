From 5eef0c5dee4f6e955335171fe2d00349cf3ba3d8 Mon Sep 17 00:00:00 2001
From: Will Bryant <will.bryant@gmail.com>
Date: Mon, 11 Jan 2010 23:22:22 +1300
Subject: [PATCH] implemented a :preload find option (like :include, but always stays on the 'new' path rather than joining if tables are referenced)

---
 activerecord/lib/active_record/base.rb             |   13 +++++--
 activerecord/test/cases/associations/eager_test.rb |   38 +++++++++++++++++++-
 2 files changed, 47 insertions(+), 4 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index 78c580f..9be89f1 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -1564,13 +1564,18 @@ module ActiveRecord #:nodoc:
 
         def find_every(options)
           include_associations = merge_includes(scope(:find, :include), options[:include])
+          preload_associations = merge_includes(scope(:find, :preload), options[:preload])
 
           if include_associations.any? && references_eager_loaded_tables?(options)
             records = find_with_associations(options)
+            if preload_associations.any?
+              preload_associations(records, preload_associations)
+            end
           else
             records = find_by_sql(construct_finder_sql(options))
-            if include_associations.any?
-              preload_associations(records, include_associations)
+            preload_associations = merge_includes(include_associations, preload_associations)
+            if preload_associations.any?
+              preload_associations(records, preload_associations)
             end
           end
 
@@ -2141,6 +2146,8 @@ module ActiveRecord #:nodoc:
                         end
                       elsif key == :include && merge
                         hash[method][key] = merge_includes(hash[method][key], params[key]).uniq
+                      elsif key == :preload && merge
+                        hash[method][key] = merge_includes(hash[method][key], params[key]).uniq
                       elsif key == :joins && merge
                         hash[method][key] = merge_joins(params[key], hash[method][key])
                       else
@@ -2422,7 +2429,7 @@ module ActiveRecord #:nodoc:
           end
         end
 
-        VALID_FIND_OPTIONS = [ :conditions, :include, :joins, :limit, :offset,
+        VALID_FIND_OPTIONS = [ :conditions, :include, :joins, :preload, :limit, :offset,
                                :order, :select, :readonly, :group, :having, :from, :lock ]
 
         def validate_find_options(options) #:nodoc:
diff --git a/activerecord/test/cases/associations/eager_test.rb b/activerecord/test/cases/associations/eager_test.rb
index d23f86b..9f1738e 100644
--- a/activerecord/test/cases/associations/eager_test.rb
+++ b/activerecord/test/cases/associations/eager_test.rb
@@ -17,12 +17,15 @@ require 'models/subscription'
 require 'models/book'
 require 'models/developer'
 require 'models/project'
+require 'models/pirate'
+require 'models/parrot'
+require 'models/treasure'
 
 class EagerAssociationTest < ActiveRecord::TestCase
   fixtures :posts, :comments, :authors, :author_addresses, :categories, :categories_posts,
             :companies, :accounts, :tags, :taggings, :people, :readers,
             :owners, :pets, :author_favorites, :jobs, :references, :subscribers, :subscriptions, :books,
-            :developers, :projects, :developers_projects
+            :developers, :projects, :developers_projects, :pirates, :parrots, :treasures
 
   def test_loading_with_one_association
     posts = Post.find(:all, :include => :comments)
@@ -831,4 +834,37 @@ class EagerAssociationTest < ActiveRecord::TestCase
     end
   end
   
+  def test_loading_with_forced_preload_instead_of_include
+    posts = assert_queries(2) do 
+      Post.find(:all, :preload => :comments)
+    end
+    post = posts.find { |p| p.id == 1 }
+    assert_equal 2, post.comments.size
+    assert post.comments.include?(comments(:greetings))
+
+    post = assert_queries(2) do
+      Post.find(:first, :preload => :comments, :conditions => "posts.title = 'Welcome to the weblog'")
+    end
+    assert_equal 2, post.comments.size
+    assert post.comments.include?(comments(:greetings))
+  end
+  
+  def test_loading_with_include_and_preload_of_polymorphic
+    treasures = Treasure.find(:all, :include => :parrots, :conditions => {:parrots => {:name => "polly"}}, :preload => :looter)
+    treasure = treasures.find { |p| p.name == "sapphire" }
+    redbeard = pirates(:redbeard)
+    assert_no_queries do
+      assert_equal 1, treasure.parrots.size
+      assert_equal "polly", treasure.parrots.first.name
+      assert_equal redbeard, treasure.looter
+    end
+  end
+  
+  def test_loading_with_preload_from_scope
+    treasure_with_preload = Treasure.send(:with_scope, :find => {:preload => :looter}) { Treasure.find_by_name("sapphire") }
+    redbeard = pirates(:redbeard)
+    assert_no_queries do
+      assert_equal redbeard, treasure_with_preload.looter
+    end
+  end
 end
-- 
1.6.4.1

