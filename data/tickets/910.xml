<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-27T00:13:29+01:00</created-at>
  <creator-id type="integer">19627</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">910</number>
  <permalink>find-include-will-look-for-rows-with-null-primary-keys</permalink>
  <priority type="integer">362</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>activerecord patch</tag>
  <title>find(:include) will look for rows with null primary keys</title>
  <updated-at type="datetime">2008-12-18T22:47:26+00:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">5</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>Eric</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/910</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I am doing a very complicated :include and noticed many queries similar to the following:

SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (NULL))


Models are as follows:

Stuff
id
one_asset_id
two_asset_id

Asset
id


Table data:
Stuff
id | one_asset_id | two_asset_id
1    1              NULL

Asset
id
1


AR usage:

&gt;&gt; Stuff.find(1, :include =&gt; [:one_asset, :two_asset])
Stuff Load (0.000884)  SELECT * FROM &quot;stuff&quot; WHERE (&quot;stuff&quot;.&quot;id&quot; = 1) 
Asset Load (0.001164)  SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (NULL)) 
Asset Load (0.000421)  SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (E'1')) 



Now in my choice of database (Postgres), NULL values are not indexed so the NULL id query results in a sequential table scan, very painful for a million row table if this is done many times.


I looked in the code and found this in association_preload.rb:

conditions = &quot;#{table_name}.#{connection.quote_column_name(primary_key)} IN (?)&quot;
...
klass.find(:all, :conditions =&gt; [conditions, ids],

When the array ids is empty, it results in that NULL query. If we skipped the find in the cases that we have no ids to query for, we can avoid these NULL queries completely.

See attached diff for my patch.</original-body>
  <latest-body>I am doing a very complicated :include and noticed many queries similar to the following:

SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (NULL))


Models are as follows:

Stuff
id
one_asset_id
two_asset_id

Asset
id


Table data:
Stuff
id | one_asset_id | two_asset_id
1    1              NULL

Asset
id
1


AR usage:

&gt;&gt; Stuff.find(1, :include =&gt; [:one_asset, :two_asset])
Stuff Load (0.000884)  SELECT * FROM &quot;stuff&quot; WHERE (&quot;stuff&quot;.&quot;id&quot; = 1) 
Asset Load (0.001164)  SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (NULL)) 
Asset Load (0.000421)  SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (E'1')) 



Now in my choice of database (Postgres), NULL values are not indexed so the NULL id query results in a sequential table scan, very painful for a million row table if this is done many times.


I looked in the code and found this in association_preload.rb:

conditions = &quot;#{table_name}.#{connection.quote_column_name(primary_key)} IN (?)&quot;
...
klass.find(:all, :conditions =&gt; [conditions, ids],

When the array ids is empty, it results in that NULL query. If we skipped the find in the cases that we have no ids to query for, we can avoid these NULL queries completely.

See attached diff for my patch.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I am doing a very complicated :include and noticed many queries similar to the following:&lt;/p&gt;

&lt;p&gt;SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (NULL))&lt;/p&gt;

&lt;p&gt;Models are as follows:&lt;/p&gt;

&lt;p&gt;Stuff
id
one_asset_id
two_asset_id&lt;/p&gt;

&lt;p&gt;Asset
id&lt;/p&gt;

&lt;p&gt;Table data:
Stuff
id | one_asset_id | two_asset_id
1    1              NULL&lt;/p&gt;

&lt;p&gt;Asset
id
1&lt;/p&gt;

&lt;p&gt;AR usage:&lt;/p&gt;

&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Stuff.find(1, :include =&gt; [:one_asset, :two_asset])
Stuff Load (0.000884)  SELECT * FROM &quot;stuff&quot; WHERE (&quot;stuff&quot;.&quot;id&quot; = 1)
Asset Load (0.001164)  SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (NULL))
Asset Load (0.000421)  SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (E'1'))&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;

&lt;p&gt;Now in my choice of database (Postgres), NULL values are not indexed so the NULL id query results in a sequential table scan, very painful for a million row table if this is done many times.&lt;/p&gt;

&lt;p&gt;I looked in the code and found this in association_preload.rb:&lt;/p&gt;

&lt;p&gt;conditions = &quot;#{table_name}.#{connection.quote_column_name(primary_key)} IN (?)&quot;
...
klass.find(:all, :conditions =&gt; [conditions, ids],&lt;/p&gt;

&lt;p&gt;When the array ids is empty, it results in that NULL query. If we skipped the find in the cases that we have no ids to query for, we can avoid these NULL queries completely.&lt;/p&gt;

&lt;p&gt;See attached diff for my patch.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I am doing a very complicated :include and noticed many queries similar to the following:

SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (NULL))


Models are as follows:

`
    Stuff
    -----
    id
    one_asset_id
    two_asset_id

    Asset
    -----
    id
`

Table data:

Stuff
`
    id | one_asset_id | two_asset_id
    ---|------------|-----------
    1    1              NULL

    Asset
    id
    --
    1
`

AR usage:
`
    =&gt; Stuff.find(1, :include =&gt; [:one_asset, :two_asset])
    Stuff Load (0.000884)  SELECT * FROM &quot;stuff&quot; WHERE (&quot;stuff&quot;.&quot;id&quot; = 1) 
    Asset Load (0.001164)  SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (NULL)) 
    Asset Load (0.000421)  SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (E'1')) 
`


Now in my choice of database (Postgres), NULL values are not indexed so the NULL id query results in a sequential table scan, very painful for a million row table if this is done many times.


I looked in the code and found this in association_preload.rb:

`
    conditions = &quot;#{table_name}.#{connection.quote_column_name(primary_key)} IN (?)&quot;
    ...
    klass.find(:all, :conditions =&gt; [conditions, ids],
`

When the array ids is empty, it results in that NULL query. If we skipped the find in the cases that we have no ids to query for, we can avoid these NULL queries completely.

See attached diff for my patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am doing a very complicated :include and noticed many queries similar to the following:&lt;/p&gt;

&lt;p&gt;SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (NULL))&lt;/p&gt;

&lt;p&gt;Models are as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stuff
-----
id
one_asset_id
two_asset_id

Asset
-----
id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Table data:&lt;/p&gt;

&lt;p&gt;Stuff
&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id | one_asset_id | two_asset_id
---|------------|-----------
1    1              NULL

Asset
id
--
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;AR usage:
&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;gt; Stuff.find(1, :include =&amp;gt; [:one_asset, :two_asset])
Stuff Load (0.000884)  SELECT * FROM &quot;stuff&quot; WHERE (&quot;stuff&quot;.&quot;id&quot; = 1)
Asset Load (0.001164)  SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (NULL))
Asset Load (0.000421)  SELECT * FROM &quot;assets&quot; WHERE (&quot;assets&quot;.id IN (E'1'))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now in my choice of database (Postgres), NULL values are not indexed so the NULL id query results in a sequential table scan, very painful for a million row table if this is done many times.&lt;/p&gt;

&lt;p&gt;I looked in the code and found this in association_preload.rb:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conditions = &quot;#{table_name}.#{connection.quote_column_name(primary_key)} IN (?)&quot;
...
klass.find(:all, :conditions =&amp;gt; [conditions, ids],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the array ids is empty, it results in that NULL query. If we skipped the find in the cases that we have no ids to query for, we can avoid these NULL queries completely.&lt;/p&gt;

&lt;p&gt;See attached diff for my patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-27T00:43:00+01:00</created-at>
      <creator-id type="integer">19627</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">910</number>
      <permalink>find-include-will-look-for-rows-with-null-primary-keys</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch</tag>
      <title>find(:include) will look for rows with null primary keys</title>
      <updated-at type="datetime">2008-08-27T00:43:00+01:00</updated-at>
      <user-id type="integer">19627</user-id>
      <version type="integer">1</version>
      <user-name>Eric</user-name>
      <creator-name>Eric</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/910</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Missing tests.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Missing tests.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-30T17:07:02+01:00</created-at>
      <creator-id type="integer">19627</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">910</number>
      <permalink>find-include-will-look-for-rows-with-null-primary-keys-2</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord patch</tag>
      <title>find(:include) will look for rows with null primary keys</title>
      <updated-at type="datetime">2008-08-30T17:07:02+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Eric</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/910</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Same patch, with test.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Same patch, with test.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-04T19:38:36+01:00</created-at>
      <creator-id type="integer">19627</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">910</number>
      <permalink>find-include-will-look-for-rows-with-null-primary-keys-3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord patch</tag>
      <title>find(:include) will look for rows with null primary keys</title>
      <updated-at type="datetime">2008-09-04T19:38:36+01:00</updated-at>
      <user-id type="integer">19627</user-id>
      <version type="integer">3</version>
      <user-name>Eric</user-name>
      <creator-name>Eric</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/910</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-18T04:31:31+01:00</created-at>
      <creator-id type="integer">19627</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord patch
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">910</number>
      <permalink>find-include-will-look-for-rows-with-null-primary-keys</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord patch</tag>
      <title>find(:include) will look for rows with null primary keys</title>
      <updated-at type="datetime">2008-09-18T04:31:32+01:00</updated-at>
      <user-id type="integer">14890</user-id>
      <version type="integer">4</version>
      <user-name>Tarmo T&#228;nav</user-name>
      <creator-name>Eric</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/910</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Same as #1027, now fixed</body>
      <body-html>&lt;div&gt;&lt;p&gt;Same as &lt;a href=&quot;/projects/8994/tickets/1027&quot; title=&quot;Ticket #1027&quot;&gt;#1027&lt;/a&gt;, now fixed&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-18T22:47:23+00:00</created-at>
      <creator-id type="integer">19627</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">910</number>
      <permalink>find-include-will-look-for-rows-with-null-primary-keys</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>activerecord patch</tag>
      <title>find(:include) will look for rows with null primary keys</title>
      <updated-at type="datetime">2008-12-18T22:47:26+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">5</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Eric</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/910</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>feb11ae12058eed8f174f8bda529a284ee15ee30</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-27T00:13:29+01:00</created-at>
      <filename>skip_empty_id.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">41789</id>
      <size type="integer">1044</size>
      <uploader-id type="integer">19627</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/41789/skip_empty_id.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>f0ca5a64f6bc7d5d9ce3dd384a1ab3e65b2af472</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-04T19:38:36+01:00</created-at>
      <filename>skip_empty_id_with_test.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">43840</id>
      <size type="integer">2000</size>
      <uploader-id type="integer">19627</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/43840/skip_empty_id_with_test.diff</url>
    </attachment>
  </attachments>
</ticket>
