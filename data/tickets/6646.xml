<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-29T23:21:12+01:00</created-at>
  <creator-id type="integer">70177</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6646</number>
  <permalink>orderedhash-serialization-does-not-work-when-storing-arrays</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>array bug orderedhash serialization</tag>
  <title>OrderedHash serialization does not work when storing arrays</title>
  <updated-at type="datetime">2011-03-29T23:25:43+01:00</updated-at>
  <user-id type="integer">70177</user-id>
  <version type="integer">1</version>
  <user-name>Philippe Creux</user-name>
  <creator-name>Philippe Creux</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6646</url>
  <priority-name nil="true"></priority-name>
  <original-body>I'm storing an OrderedHash containing A/R validation errors in a serialized column. When I retreive it from the database the array of errors become a string containing the last item of the array.

**Model:**

@@@
class InvalidRecord &lt; ActiveRecord::Base
  belongs_to :record, :polymorphic =&gt; true
  serialize :validation_errors
end
@@@

**Schema:**

@@@
  create_table &quot;invalid_records&quot;, :force =&gt; true do |t|
    t.integer  &quot;record_id&quot;,         :null =&gt; false
    t.string   &quot;record_type&quot;,       :null =&gt; false
    t.text     &quot;validation_errors&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end
@@@

The following code...

@@@
  r = InvalidRecord.new(:record =&gt; invalid_user, :validation_errors =&gt; invalid_user.errors)
  p r
  r.save!
  r.reload
  p r
@@@

outputs:

@@@
# new record: (errors on username is an array containing 2 items)
#&lt;InvalidRecord id: nil, record_id: 1, record_type: &quot;User&quot;, 
validation_errors: #&lt;OrderedHash {:username=&gt;[&quot;can't be blank&quot;, &quot;is too short (minimum is 3 characters)&quot;]}&gt;, 
created_at: nil, updated_at: nil&gt;

# saved record: (errors on username is now a string)
#&lt;InvalidRecord id: 2, record_id: 1, record_type: &quot;User&quot;, 
validation_errors: #&lt;OrderedHash {:username=&gt;&quot;is too short (minimum is 3 characters)&quot;}&gt;, 
created_at: &quot;2011-03-29 22:08:24&quot;, updated_at: &quot;2011-03-29 22:08:26&quot;&gt;
@@@

I'm using &lt;code&gt;ree-1.8.7-2010.02 [ x86_64 ]&lt;/code&gt; with &lt;code&gt;sqlite3&lt;/code&gt;.

Here is the YAML stored in the db:
@@@
--- !omap 
   - :username: can't be blank
   - :username: is too short (minimum is 3 characters)
@@@</original-body>
  <latest-body>I'm storing an OrderedHash containing A/R validation errors in a serialized column. When I retreive it from the database the array of errors become a string containing the last item of the array.

**Model:**

@@@
class InvalidRecord &lt; ActiveRecord::Base
  belongs_to :record, :polymorphic =&gt; true
  serialize :validation_errors
end
@@@

**Schema:**

@@@
  create_table &quot;invalid_records&quot;, :force =&gt; true do |t|
    t.integer  &quot;record_id&quot;,         :null =&gt; false
    t.string   &quot;record_type&quot;,       :null =&gt; false
    t.text     &quot;validation_errors&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end
@@@

The following code...

@@@
  r = InvalidRecord.new(:record =&gt; invalid_user, :validation_errors =&gt; invalid_user.errors)
  p r
  r.save!
  r.reload
  p r
@@@

outputs:

@@@
# new record: (errors on username is an array containing 2 items)
#&lt;InvalidRecord id: nil, record_id: 1, record_type: &quot;User&quot;, 
validation_errors: #&lt;OrderedHash {:username=&gt;[&quot;can't be blank&quot;, &quot;is too short (minimum is 3 characters)&quot;]}&gt;, 
created_at: nil, updated_at: nil&gt;

# saved record: (errors on username is now a string)
#&lt;InvalidRecord id: 2, record_id: 1, record_type: &quot;User&quot;, 
validation_errors: #&lt;OrderedHash {:username=&gt;&quot;is too short (minimum is 3 characters)&quot;}&gt;, 
created_at: &quot;2011-03-29 22:08:24&quot;, updated_at: &quot;2011-03-29 22:08:26&quot;&gt;
@@@

I'm using &lt;code&gt;ree-1.8.7-2010.02 [ x86_64 ]&lt;/code&gt; with &lt;code&gt;sqlite3&lt;/code&gt;.

Here is the YAML stored in the db:
@@@
--- !omap 
   - :username: can't be blank
   - :username: is too short (minimum is 3 characters)
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm storing an OrderedHash containing A/R validation errors in a
serialized column. When I retreive it from the database the array
of errors become a string containing the last item of the
array.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class InvalidRecord &amp;lt; ActiveRecord::Base
  belongs_to :record, :polymorphic =&amp;gt; true
  serialize :validation_errors
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Schema:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  create_table &quot;invalid_records&quot;, :force =&amp;gt; true do |t|
    t.integer  &quot;record_id&quot;,         :null =&amp;gt; false
    t.string   &quot;record_type&quot;,       :null =&amp;gt; false
    t.text     &quot;validation_errors&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The following code...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  r = InvalidRecord.new(:record =&amp;gt; invalid_user, :validation_errors =&amp;gt; invalid_user.errors)
  p r
  r.save!
  r.reload
  p r&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;outputs:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# new record: (errors on username is an array containing 2 items)
#&amp;lt;InvalidRecord id: nil, record_id: 1, record_type: &quot;User&quot;, 
validation_errors: #&amp;lt;OrderedHash {:username=&amp;gt;[&quot;can't be blank&quot;, &quot;is too short (minimum is 3 characters)&quot;]}&amp;gt;, 
created_at: nil, updated_at: nil&amp;gt;

# saved record: (errors on username is now a string)
#&amp;lt;InvalidRecord id: 2, record_id: 1, record_type: &quot;User&quot;, 
validation_errors: #&amp;lt;OrderedHash {:username=&amp;gt;&quot;is too short (minimum is 3 characters)&quot;}&amp;gt;, 
created_at: &quot;2011-03-29 22:08:24&quot;, updated_at: &quot;2011-03-29 22:08:26&quot;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm using &lt;code&gt;ree-1.8.7-2010.02 [ x86_64 ]&lt;/code&gt; with
&lt;code&gt;sqlite3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the YAML stored in the db:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--- !omap 
   - :username: can't be blank
   - :username: is too short (minimum is 3 characters)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm storing an OrderedHash containing A/R validation errors in a serialized column. When I retreive it from the database the array of errors become a string containing the last item of the array.

**Model:**

@@@
class InvalidRecord &lt; ActiveRecord::Base
  belongs_to :record, :polymorphic =&gt; true
  serialize :validation_errors
end
@@@

**Schema:**

@@@
  create_table &quot;invalid_records&quot;, :force =&gt; true do |t|
    t.integer  &quot;record_id&quot;,         :null =&gt; false
    t.string   &quot;record_type&quot;,       :null =&gt; false
    t.text     &quot;validation_errors&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end
@@@

The following code...

@@@
  r = InvalidRecord.new(:record =&gt; invalid_user, :validation_errors =&gt; invalid_user.errors)
  p r
  r.save!
  r.reload
  p r
@@@

outputs:

@@@
# new record: (errors on username is an array containing 2 items)
#&lt;InvalidRecord id: nil, record_id: 1, record_type: &quot;User&quot;, 
validation_errors: #&lt;OrderedHash {:username=&gt;[&quot;can't be blank&quot;, &quot;is too short (minimum is 3 characters)&quot;]}&gt;, 
created_at: nil, updated_at: nil&gt;

# saved record: (errors on username is now a string)
#&lt;InvalidRecord id: 2, record_id: 1, record_type: &quot;User&quot;, 
validation_errors: #&lt;OrderedHash {:username=&gt;&quot;is too short (minimum is 3 characters)&quot;}&gt;, 
created_at: &quot;2011-03-29 22:08:24&quot;, updated_at: &quot;2011-03-29 22:08:26&quot;&gt;
@@@

I'm using &lt;code&gt;ree-1.8.7-2010.02 [ x86_64 ]&lt;/code&gt; with &lt;code&gt;sqlite3&lt;/code&gt;.

Here is the YAML stored in the db:
@@@
--- !omap 
   - :username: can't be blank
   - :username: is too short (minimum is 3 characters)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm storing an OrderedHash containing A/R validation errors in a
serialized column. When I retreive it from the database the array
of errors become a string containing the last item of the
array.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class InvalidRecord &amp;lt; ActiveRecord::Base
  belongs_to :record, :polymorphic =&amp;gt; true
  serialize :validation_errors
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Schema:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  create_table &quot;invalid_records&quot;, :force =&amp;gt; true do |t|
    t.integer  &quot;record_id&quot;,         :null =&amp;gt; false
    t.string   &quot;record_type&quot;,       :null =&amp;gt; false
    t.text     &quot;validation_errors&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The following code...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  r = InvalidRecord.new(:record =&amp;gt; invalid_user, :validation_errors =&amp;gt; invalid_user.errors)
  p r
  r.save!
  r.reload
  p r&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;outputs:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# new record: (errors on username is an array containing 2 items)
#&amp;lt;InvalidRecord id: nil, record_id: 1, record_type: &quot;User&quot;, 
validation_errors: #&amp;lt;OrderedHash {:username=&amp;gt;[&quot;can't be blank&quot;, &quot;is too short (minimum is 3 characters)&quot;]}&amp;gt;, 
created_at: nil, updated_at: nil&amp;gt;

# saved record: (errors on username is now a string)
#&amp;lt;InvalidRecord id: 2, record_id: 1, record_type: &quot;User&quot;, 
validation_errors: #&amp;lt;OrderedHash {:username=&amp;gt;&quot;is too short (minimum is 3 characters)&quot;}&amp;gt;, 
created_at: &quot;2011-03-29 22:08:24&quot;, updated_at: &quot;2011-03-29 22:08:26&quot;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm using &lt;code&gt;ree-1.8.7-2010.02 [ x86_64 ]&lt;/code&gt; with
&lt;code&gt;sqlite3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the YAML stored in the db:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--- !omap 
   - :username: can't be blank
   - :username: is too short (minimum is 3 characters)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-29T23:21:12+01:00</created-at>
      <creator-id type="integer">70177</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6646</number>
      <permalink>orderedhash-serialization-does-not-work-when-storing-arrays</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>array bug orderedhash serialization</tag>
      <title>OrderedHash serialization does not work when storing arrays</title>
      <updated-at type="datetime">2011-03-29T23:25:39+01:00</updated-at>
      <user-id type="integer">70177</user-id>
      <version type="integer">1</version>
      <user-name>Philippe Creux</user-name>
      <creator-name>Philippe Creux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6646</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
