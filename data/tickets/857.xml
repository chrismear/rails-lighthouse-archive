<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-19T01:12:27+01:00</created-at>
  <creator-id type="integer">11310</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">857</number>
  <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
  <priority type="integer">314</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>2.1 activerecord bug edge patch serialize tested</tag>
  <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
  <updated-at type="datetime">2009-10-22T12:41:24+01:00</updated-at>
  <user-id type="integer">74047</user-id>
  <version type="integer">12</version>
  <user-name>viktor tron (strawberry)</user-name>
  <creator-name>Andreas Korth</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When setting a serialized attribute to &quot;Yes&quot; or &quot;No&quot; will set the attribute to true or false, respectively.

Test case:

class Thing &lt; ActiveRecord::Base
  serialize :name, String
end

class ThingTest &lt; ActiveSupport::TestCase
  def test_name_serialization
    thing = Thing.new
    thing.name = &quot;Yes&quot;
    assert thing.name == &quot;Yes&quot;
  end
end

The test case will fail with:
ActiveRecord::SerializationTypeMismatch: name was supposed to be a String, but was a TrueClass

I'd love to create a patch, but after digging through the code for a while, I still have no clue where things go wrong. Sorry.</original-body>
  <latest-body>When setting a serialized attribute to &quot;Yes&quot; or &quot;No&quot; will set the attribute to true or false, respectively.

Test case:

class Thing &lt; ActiveRecord::Base
  serialize :name, String
end

class ThingTest &lt; ActiveSupport::TestCase
  def test_name_serialization
    thing = Thing.new
    thing.name = &quot;Yes&quot;
    assert thing.name == &quot;Yes&quot;
  end
end

The test case will fail with:
ActiveRecord::SerializationTypeMismatch: name was supposed to be a String, but was a TrueClass

I'd love to create a patch, but after digging through the code for a while, I still have no clue where things go wrong. Sorry.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When setting a serialized attribute to &quot;Yes&quot; or &quot;No&quot; will set the attribute to true or false, respectively.&lt;/p&gt;

&lt;p&gt;Test case:&lt;/p&gt;

&lt;p&gt;class Thing &amp;lt; ActiveRecord::Base
  serialize :name, String
end&lt;/p&gt;

&lt;p&gt;class ThingTest &amp;lt; ActiveSupport::TestCase
  def test_name_serialization&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;thing = Thing.new
thing.name = &quot;Yes&quot;
assert thing.name == &quot;Yes&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end&lt;/p&gt;

&lt;p&gt;The test case will fail with:
ActiveRecord::SerializationTypeMismatch: name was supposed to be a String, but was a TrueClass&lt;/p&gt;

&lt;p&gt;I'd love to create a patch, but after digging through the code for a while, I still have no clue where things go wrong. Sorry.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When setting a serialized attribute to &quot;Yes&quot; or &quot;No&quot; will set the attribute to true or false, respectively.

Test case:

@@@ ruby

class Thing &lt; ActiveRecord::Base
  serialize :name, String
end

class ThingTest &lt; ActiveSupport::TestCase
  def test_name_serialization
    thing = Thing.new
    thing.name = &quot;Yes&quot;
    assert thing.name == &quot;Yes&quot;
  end
end
@@@

The test case will fail with:
ActiveRecord::SerializationTypeMismatch: name was supposed to be a String, but was a TrueClass

I'd love to create a patch, but after digging through the code for a while, I still have no clue where things go wrong. Sorry.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When setting a serialized attribute to &quot;Yes&quot; or &quot;No&quot; will set the attribute to true or false, respectively.&lt;/p&gt;

&lt;p&gt;Test case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;

class Thing &amp;lt; ActiveRecord::Base
  serialize :name, String
end

class ThingTest &amp;lt; ActiveSupport::TestCase
  def test_name_serialization
    thing = Thing.new
    thing.name = &amp;quot;Yes&amp;quot;
    assert thing.name == &amp;quot;Yes&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The test case will fail with:
ActiveRecord::SerializationTypeMismatch: name was supposed to be a String, but was a TrueClass&lt;/p&gt;

&lt;p&gt;I'd love to create a patch, but after digging through the code for a while, I still have no clue where things go wrong. Sorry.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-19T01:18:50+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug serialize</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2008-08-19T01:18:50+01:00</updated-at>
      <user-id type="integer">11310</user-id>
      <version type="integer">1</version>
      <user-name>Andreas Korth</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I can confirm this test fails for both 2.1 and edge.

The reason it fails is that attribute serialization was not written to support serialization of Strings.

activerecord/lib/active_record/base.rb: (edge line 2769)

@@@ ruby
      def object_from_yaml(string)
        return string unless string.is_a?(String)
        YAML::load(string) rescue string
      end
@@@

Despite the name, this method is passed whatever you assign to a serialized attribute, in it's unserialized form. So in the test above, object_from_yaml(&quot;Yes&quot;) is called, which returns true because &quot;Yes&quot; is a String, and YAML::load translates &quot;Yes&quot; to true.

My guess would be that to fix this, somewhere further up the method call chain, there needs to be a decision to _not_ try to unserialize values that haven't been serialized yet.

I can try to write a patch, but I'm a rails hacking n00b, and I'm not sure if it's really, really worth supporting the use case of serializing a String.

On the other hand, it might be worth fixing because the problem also affects serialization of String subclasses.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can confirm this test fails for both 2.1 and edge.&lt;/p&gt;

&lt;p&gt;The reason it fails is that attribute serialization was not written to support serialization of Strings.&lt;/p&gt;

&lt;p&gt;activerecord/lib/active_record/base.rb: (edge line 2769)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
      def object_from_yaml(string)
        return string unless string.is_a?(String)
        YAML::load(string) rescue string
      end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Despite the name, this method is passed whatever you assign to a serialized attribute, in it's unserialized form. So in the test above, object_from_yaml(&quot;Yes&quot;) is called, which returns true because &quot;Yes&quot; is a String, and YAML::load translates &quot;Yes&quot; to true.&lt;/p&gt;

&lt;p&gt;My guess would be that to fix this, somewhere further up the method call chain, there needs to be a decision to &lt;em&gt;not&lt;/em&gt; try to unserialize values that haven't been serialized yet.&lt;/p&gt;

&lt;p&gt;I can try to write a patch, but I'm a rails hacking n00b, and I'm not sure if it's really, really worth supporting the use case of serializing a String.&lt;/p&gt;

&lt;p&gt;On the other hand, it might be worth fixing because the problem also affects serialization of String subclasses.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-19T05:09:04+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1 activerecord bug serialize
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge serialize</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2008-08-19T05:09:04+01:00</updated-at>
      <user-id type="integer">23609</user-id>
      <version type="integer">2</version>
      <user-name>Chris Barnett</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks, Chris.

Now that I know where things go wrong, I can probably create a patch.

It might not make a whole lot of sense to serialize a String, but in my case the attribute value can be either a String, or an Array, or a Hash.

This is definitely a Rails bug, since YAML::load(YAML::dump(&quot;Yes&quot;)) == &quot;Yes&quot;.

I'll work around this for now, hoping that someone from core will pick it up. If not, I'll schedule it as a task for our next iteration.

Thanks again for figuring this out.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks, Chris.&lt;/p&gt;

&lt;p&gt;Now that I know where things go wrong, I can probably create a patch.&lt;/p&gt;

&lt;p&gt;It might not make a whole lot of sense to serialize a String, but in my case the attribute value can be either a String, or an Array, or a Hash.&lt;/p&gt;

&lt;p&gt;This is definitely a Rails bug, since YAML::load(YAML::dump(&quot;Yes&quot;)) == &quot;Yes&quot;.&lt;/p&gt;

&lt;p&gt;I'll work around this for now, hoping that someone from core will pick it up. If not, I'll schedule it as a task for our next iteration.&lt;/p&gt;

&lt;p&gt;Thanks again for figuring this out.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-19T09:54:30+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge serialize</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2008-08-19T09:54:30+01:00</updated-at>
      <user-id type="integer">11310</user-id>
      <version type="integer">3</version>
      <user-name>Andreas Korth</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think I have a pretty simple fix for this. I'll post it as soon as I get a couple things sorted out.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think I have a pretty simple fix for this. I'll post it as soon as I get a couple things sorted out.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-23T20:02:52+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge serialize</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2008-08-23T20:02:52+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">4</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here we go.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here we go.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-23T20:52:57+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1 activerecord bug edge serialize
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge patch serialize tested</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2008-08-23T20:52:57+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">5</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>What's the use case for serializing strings?</body>
      <body-html>&lt;div&gt;&lt;p&gt;What's the use case for serializing strings?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T06:06:27+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge patch serialize tested</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2008-09-10T06:07:13+01:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">6</version>
      <user-name>DHH</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>For me the case is to have an answer attribute that can hold any type of value for dynamically built forms. So depending on the field type it may contain, a string, a datetime, an array of selected options, a ranking order... And this means that string too must be serialized for there to not be any unintended unserializings of certain string values.</body>
      <body-html>&lt;div&gt;&lt;p&gt;For me the case is to have an answer attribute that can hold any
type of value for dynamically built forms. So depending on the
field type it may contain, a string, a datetime, an array of
selected options, a ranking order... And this means that string too
must be serialized for there to not be any unintended
unserializings of certain string values.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T06:53:18+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge patch serialize tested</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2008-09-10T06:53:59+01:00</updated-at>
      <user-id type="integer">14890</user-id>
      <version type="integer">7</version>
      <user-name>Tarmo T&#228;nav</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>My use case is the same as Tarmo's. Serializing a string alone doesn't make sense, but whenever the attribute value can be of variable type, the bug might hit you.</body>
      <body-html>&lt;div&gt;&lt;p&gt;My use case is the same as Tarmo's. Serializing a string alone
doesn't make sense, but whenever the attribute value can be of
variable type, the bug might hit you.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T08:18:33+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge patch serialize tested</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2008-09-10T08:18:51+01:00</updated-at>
      <user-id type="integer">11310</user-id>
      <version type="integer">8</version>
      <user-name>Andreas Korth</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Out of curiosity, is this getting any attention?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Out of curiosity, is this getting any attention?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-26T01:48:32+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge patch serialize tested</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2008-10-26T01:48:34+01:00</updated-at>
      <user-id type="integer">19875</user-id>
      <version type="integer">9</version>
      <user-name>Peter Wagenet</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [c94ba8150a726da4a894cd8325ee682a3286ec9f]) Fixed that serialized strings should never be type-casted (i.e. turning &quot;Yes&quot; to a boolean)(Andreas Korth) [#857 state:committed]
http://github.com/rails/rails/commit/c94ba8150a726da4a894cd8325ee682a3286ec9f</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [c94ba8150a726da4a894cd8325ee682a3286ec9f]) Fixed that
serialized strings should never be type-casted (i.e. turning &quot;Yes&quot;
to a boolean)(Andreas Korth) [&lt;a href=&quot;/projects/8994/tickets/857&quot; title=&quot;Ticket #857&quot;&gt;#857&lt;/a&gt; state:committed] &lt;a href=&quot;http://github.com/rails/rails/commit/c94ba8150a726da4a894cd8325ee682a3286ec9f&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-27T16:17:31+00:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2.1 activerecord bug edge patch serialize tested</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2008-10-27T16:17:35+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">10</version>
      <user-name>Repository</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>We should reopen this issue. 
It took me hours to figure out why serialization fails on my object.
It was because YAML refuses to deserialize a Method, 
but the object_from_yaml function rescues this and falls back to the unserialized string value
if you constrained the serialization for a type, then the object will fail with Type Mismatch.

suppose attr on object s is serialized as a Hash
this is what you get.
&gt;&gt; s.attr
ActiveRecord::SerializationTypeMismatch: attr was supposed to be a Hash, but was a String
&gt;&gt; s.instance_eval { object_from_yaml(@attributes['attr']) }.class
=&gt; String
&gt;&gt; s.instance_eval { YAML::load(@attributes['attr']) }.class
TypeError: allocator undefined for Method
        from /usr/lib/ruby/1.8/yaml.rb:133:in `transfer'

Very annoying that on the s.attr call the real problem is masked because of the rescue in object_from_yaml.

While in this case it is just annoying, imagine the case mentioned by some of you when you serialize because of type polymorphism.
In that case the string will be a legitimate type (No type mismatch error), and we will not fail, but instead of an object we get the serialized string of an object.
This is a security risk since it could display confidential info stored in the serialized objects attributes which you never intended to display for instance. 

The real problem is of course a bug in YAML which should refuse to dump objects which it cannot load 
but that is another issue....

I suggest removing the rescue string</body>
      <body-html>&lt;div&gt;&lt;p&gt;We should reopen this issue.&lt;br&gt;
It took me hours to figure out why serialization fails on my
object.&lt;br&gt;
It was because YAML refuses to deserialize a Method,&lt;br&gt;
but the object_from_yaml function rescues this and falls back to
the unserialized string value&lt;br&gt;
if you constrained the serialization for a type, then the object
will fail with Type Mismatch.&lt;/p&gt;
&lt;p&gt;suppose attr on object s is serialized as a Hash&lt;br&gt;
this is what you get.&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;s.attr ActiveRecord::SerializationTypeMismatch: attr was
supposed to be a Hash, but was a String&lt;br&gt;
s.instance_eval { object_from_yaml(@attributes['attr']) }.class
=&amp;gt; String s.instance_eval { YAML::load(@attributes['attr'])
}.class TypeError: allocator undefined for Method&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    from /usr/lib/ruby/1.8/yaml.rb:133:in `transfer'&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Very annoying that on the s.attr call the real problem is masked
because of the rescue in object_from_yaml.&lt;/p&gt;
&lt;p&gt;While in this case it is just annoying, imagine the case
mentioned by some of you when you serialize because of type
polymorphism.&lt;br&gt;
In that case the string will be a legitimate type (No type mismatch
error), and we will not fail, but instead of an object we get the
serialized string of an object.&lt;br&gt;
This is a security risk since it could display confidential info
stored in the serialized objects attributes which you never
intended to display for instance.&lt;/p&gt;
&lt;p&gt;The real problem is of course a bug in YAML which should refuse
to dump objects which it cannot load&lt;br&gt;
but that is another issue....&lt;/p&gt;
&lt;p&gt;I suggest removing the rescue string&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-10-22T12:30:37+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2.1 activerecord bug edge patch serialize tested</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2009-10-22T12:30:43+01:00</updated-at>
      <user-id type="integer">74047</user-id>
      <version type="integer">11</version>
      <user-name>viktor tron (strawberry)</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>sorry for awkward formatting, I resubmit.

We should reopen this issue.
It took me hours to figure out why serialization fails on my object.
It was because YAML refuses to deserialize a Method,
but the object_from_yaml function rescues this and falls back to the unserialized string value
if you constrained the serialization for a type, then the object will fail with Type Mismatch.

suppose attr on object s is serialized as a Hash
this is what you get.

        &gt;&gt; s.attr 
         ActiveRecord::SerializationTypeMismatch: attr was supposed to be a Hash, but was a String
        &gt;&gt; s.instance_eval { object_from_yaml(@attributes['attr']) }.class 
        =&gt; String 
        &gt;&gt; s.instance_eval { YAML::load(@attributes['attr']) }.class 
          TypeError: allocator undefined for Method
         from /usr/lib/ruby/1.8/yaml.rb:133:in `transfer'

Very annoying that on the s.attr call the real problem is masked because of the rescue in object_from_yaml.

While in this case it is just annoying, imagine the case mentioned by some of you when you serialize because of type polymorphism.
In that case the string will be a legitimate type (No type mismatch error), and we will not fail, but instead of an object we get the serialized string of an object.
This is a security risk since it could display confidential info stored in the serialized objects attributes which you never intended to display for instance.

The real problem is of course a bug in YAML which should refuse to dump objects which it cannot load
but that is another issue....

I suggest removing the rescue string</body>
      <body-html>&lt;div&gt;&lt;p&gt;sorry for awkward formatting, I resubmit.&lt;/p&gt;
&lt;p&gt;We should reopen this issue.&lt;br&gt;
It took me hours to figure out why serialization fails on my
object.&lt;br&gt;
It was because YAML refuses to deserialize a Method,&lt;br&gt;
but the object_from_yaml function rescues this and falls back to
the unserialized string value&lt;br&gt;
if you constrained the serialization for a type, then the object
will fail with Type Mismatch.&lt;/p&gt;
&lt;p&gt;suppose attr on object s is serialized as a Hash&lt;br&gt;
this is what you get.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    &amp;gt;&amp;gt; s.attr
     ActiveRecord::SerializationTypeMismatch: attr was supposed to be a Hash, but was a String
    &amp;gt;&amp;gt; s.instance_eval { object_from_yaml(@attributes['attr']) }.class 
    =&amp;gt; String 
    &amp;gt;&amp;gt; s.instance_eval { YAML::load(@attributes['attr']) }.class 
      TypeError: allocator undefined for Method
     from /usr/lib/ruby/1.8/yaml.rb:133:in `transfer'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Very annoying that on the s.attr call the real problem is masked
because of the rescue in object_from_yaml.&lt;/p&gt;
&lt;p&gt;While in this case it is just annoying, imagine the case
mentioned by some of you when you serialize because of type
polymorphism.&lt;br&gt;
In that case the string will be a legitimate type (No type mismatch
error), and we will not fail, but instead of an object we get the
serialized string of an object.&lt;br&gt;
This is a security risk since it could display confidential info
stored in the serialized objects attributes which you never
intended to display for instance.&lt;/p&gt;
&lt;p&gt;The real problem is of course a bug in YAML which should refuse
to dump objects which it cannot load&lt;br&gt;
but that is another issue....&lt;/p&gt;
&lt;p&gt;I suggest removing the rescue string&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-10-22T12:41:19+01:00</created-at>
      <creator-id type="integer">11310</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">857</number>
      <permalink>serialized-attribute-values-yes-or-no-get-coerced-into-booleans</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2.1 activerecord bug edge patch serialize tested</tag>
      <title>Serialized attribute values &quot;Yes&quot; or &quot;No&quot; get coerced into booleans</title>
      <updated-at type="datetime">2009-10-22T12:41:24+01:00</updated-at>
      <user-id type="integer">74047</user-id>
      <version type="integer">12</version>
      <user-name>viktor tron (strawberry)</user-name>
      <creator-name>Andreas Korth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/857</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>e3f6d0d2d06e27fe72d9b9a9c70078c77440730f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-23T20:52:56+01:00</created-at>
      <filename>serialized_strings.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">41089</id>
      <size type="integer">1511</size>
      <uploader-id type="integer">19875</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/41089/serialized_strings.diff</url>
    </attachment>
  </attachments>
</ticket>
