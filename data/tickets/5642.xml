<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-09-17T16:36:02+01:00</created-at>
  <creator-id type="integer">116169</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5642</number>
  <permalink>clean-up-optimize-session_store-config</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>database datamapper session</tag>
  <title>Clean up &amp; Optimize session_store config</title>
  <updated-at type="datetime">2011-02-02T16:49:36+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>bgentry</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5642</url>
  <priority-name nil="true"></priority-name>
  <original-body>See [this code block](http://github.com/rails/rails/blob/master/railties/lib/rails/application/configuration.rb#L122-138)

The `Rails::Application::Configuration#session_store` method has several issues. First of all, when trying to set this up with DataMapper, I assumed that `session_store(:data_mapper_store)` would be the way to enable DataMapper session storage. This does not work, however, because DataMapper follows ActiveRecord's session class structure (`Rails::DataMapper::SessionStore`, just like `Rails::ActiveRecord::SessionStore`).

Rather than following an agnostic approach that all ORMs can adopt, ActiveRecord session support is hardcoded into this method.

In order to make this work with `session_store(:data_mapper_store)`, the DataMapper team would have to rename or alias the existing class to `ActionDispatch::Session::DataMapperStore`. However, even if they make that change, this method is caching the symbol as `@session_store` and performing the string conversion/constant lookup every time it is called. Even if the structure of this method is not changed, we should be caching the Class itself once we've looked it up.

One other issue at this point is that I can configure my session store with `MyApp::Application.config.session_store = Rails::DataMapper::SessionStore`, but even if I do that I still have to manually `require 'dm-rails/session_store'` before declaring my session_store. It would be great if a solution could also handle autoloading of the required class.

I'd like some advice on how this should be resolved. It seems reasonable that AR should not be hardcoded into this method, but should instead follow the same agnostic approach that every other ORM should follow. Exactly what that approach should be is open for debate.</original-body>
  <latest-body>See [this code block](http://github.com/rails/rails/blob/master/railties/lib/rails/application/configuration.rb#L122-138)

The `Rails::Application::Configuration#session_store` method has several issues. First of all, when trying to set this up with DataMapper, I assumed that `session_store(:data_mapper_store)` would be the way to enable DataMapper session storage. This does not work, however, because DataMapper follows ActiveRecord's session class structure (`Rails::DataMapper::SessionStore`, just like `Rails::ActiveRecord::SessionStore`).

Rather than following an agnostic approach that all ORMs can adopt, ActiveRecord session support is hardcoded into this method.

In order to make this work with `session_store(:data_mapper_store)`, the DataMapper team would have to rename or alias the existing class to `ActionDispatch::Session::DataMapperStore`. However, even if they make that change, this method is caching the symbol as `@session_store` and performing the string conversion/constant lookup every time it is called. Even if the structure of this method is not changed, we should be caching the Class itself once we've looked it up.

One other issue at this point is that I can configure my session store with `MyApp::Application.config.session_store = Rails::DataMapper::SessionStore`, but even if I do that I still have to manually `require 'dm-rails/session_store'` before declaring my session_store. It would be great if a solution could also handle autoloading of the required class.

I'd like some advice on how this should be resolved. It seems reasonable that AR should not be hardcoded into this method, but should instead follow the same agnostic approach that every other ORM should follow. Exactly what that approach should be is open for debate.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;See &lt;a href=
&quot;http://github.com/rails/rails/blob/master/railties/lib/rails/application/configuration.rb#L122-138&quot;&gt;
this code block&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Rails::Application::Configuration#session_store&lt;/code&gt;
method has several issues. First of all, when trying to set this up
with DataMapper, I assumed that
&lt;code&gt;session_store(:data_mapper_store)&lt;/code&gt; would be the way to
enable DataMapper session storage. This does not work, however,
because DataMapper follows ActiveRecord's session class structure
(&lt;code&gt;Rails::DataMapper::SessionStore&lt;/code&gt;, just like
&lt;code&gt;Rails::ActiveRecord::SessionStore&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Rather than following an agnostic approach that all ORMs can
adopt, ActiveRecord session support is hardcoded into this
method.&lt;/p&gt;
&lt;p&gt;In order to make this work with
&lt;code&gt;session_store(:data_mapper_store)&lt;/code&gt;, the DataMapper team
would have to rename or alias the existing class to
&lt;code&gt;ActionDispatch::Session::DataMapperStore&lt;/code&gt;. However,
even if they make that change, this method is caching the symbol as
&lt;code&gt;@session_store&lt;/code&gt; and performing the string
conversion/constant lookup every time it is called. Even if the
structure of this method is not changed, we should be caching the
Class itself once we've looked it up.&lt;/p&gt;
&lt;p&gt;One other issue at this point is that I can configure my session
store with &lt;code&gt;MyApp::Application.config.session_store =
Rails::DataMapper::SessionStore&lt;/code&gt;, but even if I do that I
still have to manually &lt;code&gt;require
'dm-rails/session_store'&lt;/code&gt; before declaring my session_store.
It would be great if a solution could also handle autoloading of
the required class.&lt;/p&gt;
&lt;p&gt;I'd like some advice on how this should be resolved. It seems
reasonable that AR should not be hardcoded into this method, but
should instead follow the same agnostic approach that every other
ORM should follow. Exactly what that approach should be is open for
debate.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>See [this code block](http://github.com/rails/rails/blob/master/railties/lib/rails/application/configuration.rb#L122-138)

The `Rails::Application::Configuration#session_store` method has several issues. First of all, when trying to set this up with DataMapper, I assumed that `session_store(:data_mapper_store)` would be the way to enable DataMapper session storage. This does not work, however, because DataMapper follows ActiveRecord's session class structure (`Rails::DataMapper::SessionStore`, just like `Rails::ActiveRecord::SessionStore`).

Rather than following an agnostic approach that all ORMs can adopt, ActiveRecord session support is hardcoded into this method.

In order to make this work with `session_store(:data_mapper_store)`, the DataMapper team would have to rename or alias the existing class to `ActionDispatch::Session::DataMapperStore`. However, even if they make that change, this method is caching the symbol as `@session_store` and performing the string conversion/constant lookup every time it is called. Even if the structure of this method is not changed, we should be caching the Class itself once we've looked it up.

One other issue at this point is that I can configure my session store with `MyApp::Application.config.session_store = Rails::DataMapper::SessionStore`, but even if I do that I still have to manually `require 'dm-rails/session_store'` before declaring my session_store. It would be great if a solution could also handle autoloading of the required class.

I'd like some advice on how this should be resolved. It seems reasonable that AR should not be hardcoded into this method, but should instead follow the same agnostic approach that every other ORM should follow. Exactly what that approach should be is open for debate.</body>
      <body-html>&lt;div&gt;&lt;p&gt;See &lt;a href=
&quot;http://github.com/rails/rails/blob/master/railties/lib/rails/application/configuration.rb#L122-138&quot;&gt;
this code block&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Rails::Application::Configuration#session_store&lt;/code&gt;
method has several issues. First of all, when trying to set this up
with DataMapper, I assumed that
&lt;code&gt;session_store(:data_mapper_store)&lt;/code&gt; would be the way to
enable DataMapper session storage. This does not work, however,
because DataMapper follows ActiveRecord's session class structure
(&lt;code&gt;Rails::DataMapper::SessionStore&lt;/code&gt;, just like
&lt;code&gt;Rails::ActiveRecord::SessionStore&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Rather than following an agnostic approach that all ORMs can
adopt, ActiveRecord session support is hardcoded into this
method.&lt;/p&gt;
&lt;p&gt;In order to make this work with
&lt;code&gt;session_store(:data_mapper_store)&lt;/code&gt;, the DataMapper team
would have to rename or alias the existing class to
&lt;code&gt;ActionDispatch::Session::DataMapperStore&lt;/code&gt;. However,
even if they make that change, this method is caching the symbol as
&lt;code&gt;@session_store&lt;/code&gt; and performing the string
conversion/constant lookup every time it is called. Even if the
structure of this method is not changed, we should be caching the
Class itself once we've looked it up.&lt;/p&gt;
&lt;p&gt;One other issue at this point is that I can configure my session
store with &lt;code&gt;MyApp::Application.config.session_store =
Rails::DataMapper::SessionStore&lt;/code&gt;, but even if I do that I
still have to manually &lt;code&gt;require
'dm-rails/session_store'&lt;/code&gt; before declaring my session_store.
It would be great if a solution could also handle autoloading of
the required class.&lt;/p&gt;
&lt;p&gt;I'd like some advice on how this should be resolved. It seems
reasonable that AR should not be hardcoded into this method, but
should instead follow the same agnostic approach that every other
ORM should follow. Exactly what that approach should be is open for
debate.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-16T21:33:13+01:00</created-at>
      <creator-id type="integer">116169</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5642</number>
      <permalink>clean-up-optimize-session_store-config</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>database datamapper session</tag>
      <title>Clean up &amp; Optimize session_store config</title>
      <updated-at type="datetime">2010-09-16T21:34:13+01:00</updated-at>
      <user-id type="integer">116169</user-id>
      <version type="integer">1</version>
      <user-name>bgentry</user-name>
      <creator-name>bgentry</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5642</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:31:23+00:00</created-at>
      <creator-id type="integer">116169</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5642</number>
      <permalink>clean-up-optimize-session_store-config</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>database datamapper session</tag>
      <title>Clean up &amp; Optimize session_store config</title>
      <updated-at type="datetime">2011-02-02T16:49:36+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>bgentry</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5642</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:31:24+00:00</created-at>
      <creator-id type="integer">116169</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5642</number>
      <permalink>clean-up-optimize-session_store-config</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>database datamapper session</tag>
      <title>Clean up &amp; Optimize session_store config</title>
      <updated-at type="datetime">2011-02-02T16:49:22+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>bgentry</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5642</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
