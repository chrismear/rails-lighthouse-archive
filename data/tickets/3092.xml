<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-31T11:26:06+00:00</created-at>
  <creator-id type="integer">67454</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3092</number>
  <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
  <title>Nested object validations return incorrect attribute IDs</title>
  <updated-at type="datetime">2009-12-31T16:42:07+00:00</updated-at>
  <user-id type="integer">67454</user-id>
  <version type="integer">21</version>
  <user-name>Yuval Kordov</user-name>
  <creator-name>Yuval Kordov</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
  <priority-name>Low</priority-name>
  <original-body>First ticket, guys. Try not to slaughter me all at once. :)

I am having issues with incorrect validation errors from nested objects. See the code below.

user.rb
&lt;code&gt;
has_one :address
accepts_nested_attributes_for :address
attr_accessible :address_attributes
&lt;/code&gt;

users_controller.rb
&lt;code&gt;
def new
  @user = User.new
  @user.build_address
end

def create
  @user.save
  redirect_to @user
end
&lt;/code&gt;

users/new.html.erb
&lt;code&gt;
&lt;% form_for @user do |f| %&gt;
  &lt;%= f.text_field :first_name %&gt;
  &lt;%= f.text_field :last_name %&gt;
  &lt;% f.fields_for :address do |a| %&gt;
    &lt;%= a.text_field :city %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
&lt;/code&gt;

You get the picture. Anyway, the form is getting submitted correctly, the controllers and model are doing their job. However, when there are validation errors Im getting back attributes that do not match up with what was generated by the fields_for. Specifically, they're missing an extra &quot;_attributes&quot; portion.

For instance, in the example code above, the city field gets rendered as:
&lt;code&gt;
&lt;input id=&quot;user_address_attributes_city&quot; name=&quot;user[address_attributes][city]&quot; size=&quot;30&quot; type=&quot;text&quot; /&gt;
&lt;/code&gt;

But when I inspect @user.errors, it returns &quot;user_address_city&quot; as the failed attribute, rather than &quot;user_address_attributes_city&quot;. This has completely fubar'd my custom error handling helper, short of some seriously grotty hard coding hackery, and seems like a bug. 

Thoughts?</original-body>
  <latest-body>First ticket, guys. Try not to slaughter me all at once. :)

I am having issues with incorrect validation errors from nested objects. See the code below.

user.rb
&lt;code&gt;
has_one :address
accepts_nested_attributes_for :address
attr_accessible :address_attributes
&lt;/code&gt;

users_controller.rb
&lt;code&gt;
def new
  @user = User.new
  @user.build_address
end

def create
  @user.save
  redirect_to @user
end
&lt;/code&gt;

users/new.html.erb
&lt;code&gt;
&lt;% form_for @user do |f| %&gt;
  &lt;%= f.text_field :first_name %&gt;
  &lt;%= f.text_field :last_name %&gt;
  &lt;% f.fields_for :address do |a| %&gt;
    &lt;%= a.text_field :city %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
&lt;/code&gt;

You get the picture. Anyway, the form is getting submitted correctly, the controllers and model are doing their job. However, when there are validation errors Im getting back attributes that do not match up with what was generated by the fields_for. Specifically, they're missing an extra &quot;_attributes&quot; portion.

For instance, in the example code above, the city field gets rendered as:
&lt;code&gt;
&lt;input id=&quot;user_address_attributes_city&quot; name=&quot;user[address_attributes][city]&quot; size=&quot;30&quot; type=&quot;text&quot; /&gt;
&lt;/code&gt;

But when I inspect @user.errors, it returns &quot;user_address_city&quot; as the failed attribute, rather than &quot;user_address_attributes_city&quot;. This has completely fubar'd my custom error handling helper, short of some seriously grotty hard coding hackery, and seems like a bug. 

Thoughts?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;First ticket, guys. Try not to slaughter me all at once. :)&lt;/p&gt;
&lt;p&gt;I am having issues with incorrect validation errors from nested
objects. See the code below.&lt;/p&gt;
&lt;p&gt;user.rb&lt;/p&gt;
&lt;p&gt;has_one :address accepts_nested_attributes_for :address
attr_accessible :address_attributes&lt;/p&gt;
&lt;p&gt;users_controller.rb&lt;/p&gt;
&lt;p&gt;def new @user = User.new @user.build_address end&lt;/p&gt;
&lt;p&gt;def create @user.save redirect_to @user end&lt;/p&gt;
&lt;p&gt;users/new.html.erb&lt;/p&gt;
&lt;p&gt;&amp;lt;% form_for @user do |f| %&amp;gt; &amp;lt;%= f.text_field
:first_name %&amp;gt; &amp;lt;%= f.text_field :last_name %&amp;gt; &amp;lt;%
f.fields_for :address do |a| %&amp;gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;%= a.text_field :city %&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;lt;% end %&amp;gt; &amp;lt;% end %&amp;gt;&lt;/p&gt;
&lt;p&gt;You get the picture. Anyway, the form is getting submitted
correctly, the controllers and model are doing their job. However,
when there are validation errors Im getting back attributes that do
not match up with what was generated by the fields_for.
Specifically, they're missing an extra &quot;_attributes&quot; portion.&lt;/p&gt;
&lt;p&gt;For instance, in the example code above, the city field gets
rendered as:&lt;/p&gt;
&lt;p&gt;But when I inspect @user.errors, it returns &quot;user_address_city&quot;
as the failed attribute, rather than
&quot;user_address_attributes_city&quot;. This has completely fubar'd my
custom error handling helper, short of some seriously grotty hard
coding hackery, and seems like a bug.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>First ticket, guys. Try not to slaughter me all at once. :)

I am having issues with incorrect validation errors from nested objects. See the code below.

user.rb
&lt;code&gt;
has_one :address
accepts_nested_attributes_for :address
attr_accessible :address_attributes
&lt;/code&gt;

users_controller.rb
&lt;code&gt;
def new
  @user = User.new
  @user.build_address
end

def create
  @user.save
  redirect_to @user
end
&lt;/code&gt;

users/new.html.erb
&lt;code&gt;
&lt;% form_for @user do |f| %&gt;
  &lt;%= f.text_field :first_name %&gt;
  &lt;%= f.text_field :last_name %&gt;
  &lt;% f.fields_for :address do |a| %&gt;
    &lt;%= a.text_field :city %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
&lt;/code&gt;

You get the picture. Anyway, the form is getting submitted correctly, the controllers and model are doing their job. However, when there are validation errors Im getting back attributes that do not match up with what was generated by the fields_for. Specifically, they're missing an extra &quot;_attributes&quot; portion.

For instance, in the example code above, the city field gets rendered as:
&lt;code&gt;
&lt;input id=&quot;user_address_attributes_city&quot; name=&quot;user[address_attributes][city]&quot; size=&quot;30&quot; type=&quot;text&quot; /&gt;
&lt;/code&gt;

But when I inspect @user.errors, it returns &quot;user_address_city&quot; as the failed attribute, rather than &quot;user_address_attributes_city&quot;. This has completely fubar'd my custom error handling helper, short of some seriously grotty hard coding hackery, and seems like a bug. 

Thoughts?</body>
      <body-html>&lt;div&gt;&lt;p&gt;First ticket, guys. Try not to slaughter me all at once. :)&lt;/p&gt;
&lt;p&gt;I am having issues with incorrect validation errors from nested
objects. See the code below.&lt;/p&gt;
&lt;p&gt;user.rb&lt;br&gt;
&lt;code&gt;&lt;br&gt;
has_one :address&lt;br&gt;
accepts_nested_attributes_for :address&lt;br&gt;
attr_accessible :address_attributes&lt;br&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;users_controller.rb&lt;br&gt;
&lt;code&gt;&lt;br&gt;
def new&lt;br&gt;
@user = User.new @user.build_address end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;def create&lt;br&gt;
@user.save redirect_to @user end&lt;br&gt;&lt;/p&gt;
&lt;p&gt;users/new.html.erb&lt;br&gt;
&lt;code&gt;&lt;br&gt;
&amp;lt;% form_for @user do |f| %&amp;gt;&lt;br&gt;
&amp;lt;%= f.text_field :first_name %&amp;gt; &amp;lt;%= f.text_field
:last_name %&amp;gt; &amp;lt;% f.fields_for :address do |a|
%&amp;gt;&lt;/code&gt;&lt;/p&gt;
{mkd-extraction-a9e5b452fc9f3ed8079fcbebf0d81542}
&lt;p&gt;&amp;lt;% end %&amp;gt; &amp;lt;% end %&amp;gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;You get the picture. Anyway, the form is getting submitted
correctly, the controllers and model are doing their job. However,
when there are validation errors Im getting back attributes that do
not match up with what was generated by the fields_for.
Specifically, they're missing an extra &quot;_attributes&quot; portion.&lt;/p&gt;
&lt;p&gt;For instance, in the example code above, the city field gets
rendered as:&lt;br&gt;
&lt;code&gt;&lt;br&gt;
&lt;br&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But when I inspect @user.errors, it returns &quot;user_address_city&quot;
as the failed attribute, rather than
&quot;user_address_attributes_city&quot;. This has completely fubar'd my
custom error handling helper, short of some seriously grotty hard
coding hackery, and seems like a bug.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-24T23:16:40+01:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-08-24T23:16:54+01:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">1</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Looks like my formatting got wrecked, and an entire code block has vanished. I apologize. The rendered field looks like:
&lt;code&gt;
input id=&quot;user_address_attributes_city&quot; name=&quot;user[address_attributes][city]&quot; size=&quot;30&quot; type=&quot;text&quot;
&lt;/code&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks like my formatting got wrecked, and an entire code block
has vanished. I apologize. The rendered field looks like:&lt;br&gt;
&lt;code&gt;&lt;br&gt;
input id=&quot;user_address_attributes_city&quot;
name=&quot;user[address_attributes][city]&quot; size=&quot;30&quot;
type=&quot;text&quot;&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-24T23:19:42+01:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-08-24T23:19:44+01:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">2</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Yuval,

thanks for your first report.
This is a clear problem that I experienced myself.

The question I was asking myself when reading this was whether it makes more sense to alter the errors attribute or rather change the code that does the highlighting of fields with errors.

What do you guys think?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Yuval,&lt;/p&gt;
&lt;p&gt;thanks for your first report.&lt;br&gt;
This is a clear problem that I experienced myself.&lt;/p&gt;
&lt;p&gt;The question I was asking myself when reading this was whether
it makes more sense to alter the errors attribute or rather change
the code that does the highlighting of fields with errors.&lt;/p&gt;
&lt;p&gt;What do you guys think?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-25T11:41:12+01:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-08-25T11:41:13+01:00</updated-at>
      <user-id type="integer">19954</user-id>
      <version type="integer">3</version>
      <user-name>Pascal Ehlert</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks Pascal. IMO, the error collection should absolutely return a correct representation of the attributes that failed. That's how it works in non-nested cases. Otherwise we're left doing brute force subs on our error handlers to look for specific objects that have been nested. It gets even worse if they are nested in some forms and not on others.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks Pascal. IMO, the error collection should absolutely
return a correct representation of the attributes that failed.
That's how it works in non-nested cases. Otherwise we're left doing
brute force subs on our error handlers to look for specific objects
that have been nested. It gets even worse if they are nested in
some forms and not on others.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-25T15:15:51+01:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-08-25T15:15:56+01:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">4</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am updating this ticket because the problem has become even worse in Rails 2.3.5. Nested attributes are now coming back with a period instead of an underscore. For instance, going back to the original post where user accepts nested attributes for address, I now get address.city as the failed attribute, rather than address_city. This is not only just weird, it breaks simple unit tests such as assert user.errors.invalid?(:billing_address_city)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am updating this ticket because the problem has become even
worse in Rails 2.3.5. Nested attributes are now coming back with a
period instead of an underscore. For instance, going back to the
original post where user accepts nested attributes for address, I
now get address.city as the failed attribute, rather than
address_city. This is not only just weird, it breaks simple unit
tests such as assert
user.errors.invalid?(:billing_address_city)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-30T17:12:31+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-11-30T17:12:32+00:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">5</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-30T17:13:48+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;accepts_nested_attributes_for fields_for\&quot; \&quot;nested attributes\&quot; \&quot;nested objects\&quot; validation&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-11-30T17:13:50+00:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">6</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T19:48:49+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T19:48:50+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">7</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Which Rails version this happened please?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Which Rails version this happened please?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T19:53:19+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T19:53:21+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">8</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I didn't run Rails 2.3.4 because of other bugs in that release, so I can't say if the erroneous period issue happened then or in 2.3.5. It definitely did not happen in 2.3.3. 

As it stands, in 2.3.5 you can't even do basic unit tests on nested objects. In 2.3.3, with the code in the original post I could do a unit test such as this:

@@@ test &quot;create with invalid nested billing address&quot; do
    user = User.new(:email_address =&gt; 'foo@bar.com', :first_name =&gt; 'Foo', :last_name =&gt; 'Bar', :password =&gt; 'foo',
      :billing_address_attributes =&gt; {})
    assert !user.valid?
    assert user.errors.invalid?(:address_line_1)
    assert user.errors.invalid?(:address_city)
    assert user.errors.invalid?(:address_postal_code)
    assert user.errors.invalid?(:address_country_code)
    assert !user.billing_address.valid?
    assert !user.save
  end
@@@

But this is no longer possible, as the attributes are being handled internally as address.line_1 etc.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I didn't run Rails 2.3.4 because of other bugs in that release,
so I can't say if the erroneous period issue happened then or in
2.3.5. It definitely did not happen in 2.3.3.&lt;/p&gt;
&lt;p&gt;As it stands, in 2.3.5 you can't even do basic unit tests on
nested objects. In 2.3.3, with the code in the original post I
could do a unit test such as this:&lt;/p&gt;
&lt;p&gt;@@@ test &quot;create with invalid nested billing address&quot; do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;user = User.new(:email_address =&amp;gt; 'foo@bar.com', :first_name =&amp;gt; 'Foo', :last_name =&amp;gt; 'Bar', :password =&amp;gt; 'foo',
  :billing_address_attributes =&amp;gt; {})
assert !user.valid?
assert user.errors.invalid?(:address_line_1)
assert user.errors.invalid?(:address_city)
assert user.errors.invalid?(:address_postal_code)
assert user.errors.invalid?(:address_country_code)
assert !user.billing_address.valid?
assert !user.save&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
But this is no longer possible, as the attributes are being handled internally as address.line_1 etc.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T21:05:59+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T21:06:04+00:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">9</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry for the formatting issues. And &quot;billing_address&quot; above should be &quot;address&quot;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry for the formatting issues. And &quot;billing_address&quot; above
should be &quot;address&quot;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T21:07:11+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T21:07:13+00:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">10</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>As far as I know, this is feature. You should use :&quot;address.line_1&quot; instead of :address_line_1. And I will try to explain why.

On Rails &lt; 2.3.5, when working with I18n, if you had a customized messages for Address, and then it becomes a nested association, you needed to customized them in two places:

    en:
      activerecord:
        errors:
          models:
            address:
              attributes:
                line_1:
                  invalid: some special error
                city:
                  invalid: another special error
            user:
              attributes:
                address_line_1:
                  invalid: some special error
                address_city:
                  invalid: another special error

            
Now, if we use &quot;.&quot; instead of &quot;_&quot;, it becomes like this:          

    en:
      activerecord:
        errors:
          models:
            address:
              attributes:
                line_1:
                  invalid: some special error
                city:
                  invalid: another special error
            user:
              attributes:
                address:
                  line_1:
                    invalid: some special error
                  city:
                    invalid: another special error

It does not sounds like a big difference, unless we take into account the features available in the last I18n gem version, which actually allow us to do this:

    en:
      activerecord:
        errors:
          models:
            address:
              attributes:
                line_1:
                  invalid: some special error
                city:
                  invalid: another special error
            user:
              attributes:
                address: :&quot;activerecord.errors.models.address.attributes&quot;

Your yml is DRYer and you likely won't make mistakes. Everything should work as expected. You should be able to install i18n &gt;= 0.3.3 in a project and make use of such features. If you don't, then we will really have a bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As far as I know, this is feature. You should use
:&quot;address.line_1&quot; instead of :address_line_1. And I will try to
explain why.&lt;/p&gt;
&lt;p&gt;On Rails &amp;lt; 2.3.5, when working with I18n, if you had a
customized messages for Address, and then it becomes a nested
association, you needed to customized them in two places:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;en:
  activerecord:
    errors:
      models:
        address:
          attributes:
            line_1:
              invalid: some special error
            city:
              invalid: another special error
        user:
          attributes:
            address_line_1:
              invalid: some special error
            address_city:
              invalid: another special error&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, if we use &quot;.&quot; instead of &quot;_&quot;, it becomes like this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;en:
  activerecord:
    errors:
      models:
        address:
          attributes:
            line_1:
              invalid: some special error
            city:
              invalid: another special error
        user:
          attributes:
            address:
              line_1:
                invalid: some special error
              city:
                invalid: another special error&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It does not sounds like a big difference, unless we take into
account the features available in the last I18n gem version, which
actually allow us to do this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;en:
  activerecord:
    errors:
      models:
        address:
          attributes:
            line_1:
              invalid: some special error
            city:
              invalid: another special error
        user:
          attributes:
            address: :&quot;activerecord.errors.models.address.attributes&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Your yml is DRYer and you likely won't make mistakes. Everything
should work as expected. You should be able to install i18n &amp;gt;=
0.3.3 in a project and make use of such features. If you don't,
then we will really have a bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T21:36:58+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T21:37:00+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">11</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>About the f.fields_for, it was supposed to work because it will look for the error in the @user.address.first.errors, instead of @user.errors. I will try to reproduce and create a patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;About the f.fields_for, it was supposed to work because it will
look for the error in the @user.address.first.errors, instead of
@user.errors. I will try to reproduce and create a patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T21:46:57+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T21:47:02+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">12</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks for the update Jos&#233;, that's what I thought too. But looking at the way one has to use a symbol, do you think it would be feasible to allow a string as well?

Ie: &quot;address.line_1&quot; instead of :&quot;address.line_1&quot;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for the update Jos&amp;eacute;, that's what I thought too.
But looking at the way one has to use a symbol, do you think it
would be feasible to allow a string as well?&lt;/p&gt;
&lt;p&gt;Ie: &quot;address.line_1&quot; instead of :&quot;address.line_1&quot;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T21:48:11+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T21:48:13+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">13</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't know if we can use strings. This is completely up to ActiveRecord#Errors implementation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't know if we can use strings. This is completely up to
ActiveRecord#Errors implementation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T21:49:31+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T23:23:07+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">14</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>To me, :&quot;address.line_1&quot; is extremely bizarre notation. And by the time your error makes it to the front end, you have to do onerous transformations just to figure out what's in error.

For instance (and I'm going to try the formatting again, but I'll be damned if I can ever get it to work as intended):

Here are the models.

@@@ ruby
user.rb
class User &lt; ActiveRecord::Base
  has_one :address
  accepts_nested_attributes_for :address
end

address.rb
class Address &lt; ActiveRecord::Base
  validates_presence_of :line_1
end
@@@

So we have a user object that accepts nested attributes for an address object, and that address object has validations. 

Here's the controller that creates a new user with a nested address:

@@@ ruby
def create
  user = User.new(params[:user])
  render :update do |page|
  if user.save
    page.redirect_to user
  else
    show_errors(page, user)
  end
end
@@@

So let's say line_1 was left blank. In my error handler, we look at the user model and output all the errors in whatever fashion we want. In my case, the meaty part looks something like this. Note the substitutions that are required just to obtain the correct fields from the nested address object.

@@@ ruby
def show_errors(page, obj)
  obj.errors.each do |attr, msg|
  model_prefix = obj.class.name.underscore.downcase + &quot;_&quot;
  # at this point, the attribute is being incorrectly returned as *address.line_1* instead of matching the rendered field id of *user_address_attributes_line_1*
  # note that if first_name was required on the user object and left blank, we would correctly receive *first_name* as the attribute
  # So now we are required to substitute an underscore for the period and also to do a very specific sub to find an attribute beginning with *address* so that *_attributes* can be added onto it.
  attr = model_prefix + s.sub('.', '_').sub(/(address)/,'\1_attributes')
  # Then we flag the field and show a message
end

@@@

Now obviously, this is a custom error handler. But you get my point. What's happening on the model side is not at all being represented on the controller/form side. Hope that clarifies.</body>
      <body-html>&lt;div&gt;&lt;p&gt;To me, :&quot;address.line_1&quot; is extremely bizarre notation. And by
the time your error makes it to the front end, you have to do
onerous transformations just to figure out what's in error.&lt;/p&gt;
&lt;p&gt;For instance (and I'm going to try the formatting again, but
I'll be damned if I can ever get it to work as intended):&lt;/p&gt;
&lt;p&gt;Here are the models.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;user.rb
class User &amp;lt; ActiveRecord::Base
  has_one :address
  accepts_nested_attributes_for :address
end

address.rb
class Address &amp;lt; ActiveRecord::Base
  validates_presence_of :line_1
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So we have a user object that accepts nested attributes for an
address object, and that address object has validations.&lt;/p&gt;
&lt;p&gt;Here's the controller that creates a new user with a nested
address:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def create
  user = User.new(params[:user])
  render :update do |page|
  if user.save
    page.redirect_to user
  else
    show_errors(page, user)
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So let's say line_1 was left blank. In my error handler, we look
at the user model and output all the errors in whatever fashion we
want. In my case, the meaty part looks something like this. Note
the substitutions that are required just to obtain the correct
fields from the nested address object.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def show_errors(page, obj)
  obj.errors.each do |attr, msg|
  model_prefix = obj.class.name.underscore.downcase + &quot;_&quot;
  # at this point, the attribute is being incorrectly returned as *address.line_1* instead of matching the rendered field id of *user_address_attributes_line_1*
  # note that if first_name was required on the user object and left blank, we would correctly receive *first_name* as the attribute
  # So now we are required to substitute an underscore for the period and also to do a very specific sub to find an attribute beginning with *address* so that *_attributes* can be added onto it.
  attr = model_prefix + s.sub('.', '_').sub(/(address)/,'\1_attributes')
  # Then we flag the field and show a message
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now obviously, this is a custom error handler. But you get my
point. What's happening on the model side is not at all being
represented on the controller/form side. Hope that clarifies.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T22:06:21+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T22:06:23+00:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">15</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Really wish I could edit ticket entries. :) *s* above is supposed to be *attr*.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Really wish I could edit ticket entries. :) &lt;em&gt;s&lt;/em&gt; above is
supposed to be &lt;em&gt;attr&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T22:13:07+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T22:13:08+00:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">16</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, I see your point. I was not the one who planned to use &quot;user_address_attributes_line_1&quot; instead of &quot;user_address_line_1&quot;, so I cannot tell what motivated that difference in the first place. But regarding to &quot;address.line_1&quot; in error messages, I think this is an improvement compared with what we had before. I discussed several options extensively with different people and we settled on it. So I'm -1 for changing it unless you come up with a good solution. ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, I see your point. I was not the one who planned to use
&quot;user_address_attributes_line_1&quot; instead of &quot;user_address_line_1&quot;,
so I cannot tell what motivated that difference in the first place.
But regarding to &quot;address.line_1&quot; in error messages, I think this
is an improvement compared with what we had before. I discussed
several options extensively with different people and we settled on
it. So I'm -1 for changing it unless you come up with a good
solution. ;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T22:28:34+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-30T22:28:36+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">17</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, the reason for having params[:user][:address_attributes] instead of params[:user][:address] is because the second would do &quot;user.address = params[:user][:address]&quot;, which wouldn't work. That's why we need to do: &quot;user.address_attributes = params[:user][:address_attributes]&quot;.

So we could change errors messages to be: user.errors[:&quot;address.attributes.line_1&quot;]. But this is not getting anywhere prettier. Again, we need the dots so we can DRY up I18n files.

By the way, the dot actually helps you, because all you need to do (in Rails 2.3.5) is replace the '.' by '\_attributes\_'. Consider a relationship with underscore:

    class Post 
      has_one :super_user
    end

And the error message like:

    post.errors[&quot;super_user.special_comment&quot;] #=&gt; can't be blank

In your helper, to find the proper field, you can simply replace the dot. However, considering Rails 2.3.3 approach, this would be impossible, because there is nothing telling where the relationship starts and where the attribute start:

    post.errors[&quot;super_user_special_comment&quot;] #=&gt; can't be blank

You would need to track the relationships, which is just more complicated.

This pretty much won't fix unless a good solution is proposed and we already tried several options, you can check tickets #2210 and #2904 for some background. Does it make sense?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, the reason for having params[:user][:address_attributes]
instead of params[:user][:address] is because the second would do
&quot;user.address = params[:user][:address]&quot;, which wouldn't work.
That's why we need to do: &quot;user.address_attributes =
params[:user][:address_attributes]&quot;.&lt;/p&gt;
&lt;p&gt;So we could change errors messages to be:
user.errors[:&quot;address.attributes.line_1&quot;]. But this is not getting
anywhere prettier. Again, we need the dots so we can DRY up I18n
files.&lt;/p&gt;
&lt;p&gt;By the way, the dot actually helps you, because all you need to
do (in Rails 2.3.5) is replace the '.' by '_attributes_'. Consider
a relationship with underscore:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Post
  has_one :super_user
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And the error message like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;post.errors[&quot;super_user.special_comment&quot;] #=&amp;gt; can't be blank&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In your helper, to find the proper field, you can simply replace
the dot. However, considering Rails 2.3.3 approach, this would be
impossible, because there is nothing telling where the relationship
starts and where the attribute start:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;post.errors[&quot;super_user_special_comment&quot;] #=&amp;gt; can't be blank&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You would need to track the relationships, which is just more
complicated.&lt;/p&gt;
&lt;p&gt;This pretty much won't fix unless a good solution is proposed
and we already tried several options, you can check tickets
&lt;a href=&quot;/projects/8994/tickets/2210&quot; title=
&quot;Ticket #2210&quot;&gt;#2210&lt;/a&gt; and &lt;a href=&quot;/projects/8994/tickets/2904&quot;
title=&quot;Ticket #2904&quot;&gt;#2904&lt;/a&gt; for some background. Does it make
sense?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-31T11:26:06+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-31T11:27:54+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">18</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It does to me, imo the ticket can be closed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It does to me, imo the ticket can be closed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-31T11:29:40+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-31T11:29:41+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">19</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-12-31T12:12:39+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-31T12:12:43+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">20</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I still feel like there's a disconnect here, especially with basic unit testing. Thanks anyway for your time. Happy new year!</body>
      <body-html>&lt;div&gt;&lt;p&gt;I still feel like there's a disconnect here, especially with
basic unit testing. Thanks anyway for your time. Happy new
year!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-12-31T16:42:05+00:00</created-at>
      <creator-id type="integer">67454</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3092</number>
      <permalink>nested-object-validations-return-incorrect-attribute-ids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.3.5 &quot;accepts_nested_attributes_for fields_for&quot; &quot;nested attributes&quot; &quot;nested objects&quot; rails validation</tag>
      <title>Nested object validations return incorrect attribute IDs</title>
      <updated-at type="datetime">2009-12-31T16:42:07+00:00</updated-at>
      <user-id type="integer">67454</user-id>
      <version type="integer">21</version>
      <user-name>Yuval Kordov</user-name>
      <creator-name>Yuval Kordov</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3092</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
