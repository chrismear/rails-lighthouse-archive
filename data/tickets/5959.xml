<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-12T12:35:50+00:00</created-at>
  <creator-id type="integer">124585</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5959</number>
  <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
  <updated-at type="datetime">2010-11-23T12:22:23+00:00</updated-at>
  <user-id type="integer">124585</user-id>
  <version type="integer">12</version>
  <user-name>Kieran McCusker</user-name>
  <creator-name>Kieran McCusker</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
  <priority-name>Low</priority-name>
  <original-body>Hi

I am only raising this here as I have spent quite a few hours searching for why my 2.3.8 project no longer works in rails 3 and I thought someone else could find this post.

I am using Postgresql and uuids (guids) as the primary key (id) column.

This works fine in 2.3.8 but fails silently in rails 3.0.1. A cursory glance at Activerecord suggests it now insists on integer primary key id's.

e.g. On my box

PUBLISH::Document.first('e06ae583-bea5-474e-8c68-9a9d96caeefd') works fine in 2.3.8

but fails with 
TypeError: can't convert String into Integer
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/relation/finder_methods.rb:117:in `first'
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/relation/finder_methods.rb:117:in `first'
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/base.rb:439:in `__send__'

in rails 3.0.1
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/base.rb:439:in `first'


PUBLISH::Document.create! creates the database record but reports the id as nil in 3.0.1

As this was supported in 2.3, but not in 3.0.1, I think this should be made more explicit in the upgrade guidance.

Many Thanks

Kieran</original-body>
  <latest-body>Hi

I am only raising this here as I have spent quite a few hours searching for why my 2.3.8 project no longer works in rails 3 and I thought someone else could find this post.

I am using Postgresql and uuids (guids) as the primary key (id) column.

This works fine in 2.3.8 but fails silently in rails 3.0.1. A cursory glance at Activerecord suggests it now insists on integer primary key id's.

e.g. On my box

PUBLISH::Document.first('e06ae583-bea5-474e-8c68-9a9d96caeefd') works fine in 2.3.8

but fails with 
TypeError: can't convert String into Integer
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/relation/finder_methods.rb:117:in `first'
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/relation/finder_methods.rb:117:in `first'
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/base.rb:439:in `__send__'

in rails 3.0.1
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/base.rb:439:in `first'


PUBLISH::Document.create! creates the database record but reports the id as nil in 3.0.1

As this was supported in 2.3, but not in 3.0.1, I think this should be made more explicit in the upgrade guidance.

Many Thanks

Kieran</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi&lt;/p&gt;
&lt;p&gt;I am only raising this here as I have spent quite a few hours
searching for why my 2.3.8 project no longer works in rails 3 and I
thought someone else could find this post.&lt;/p&gt;
&lt;p&gt;I am using Postgresql and uuids (guids) as the primary key (id)
column.&lt;/p&gt;
&lt;p&gt;This works fine in 2.3.8 but fails silently in rails 3.0.1. A
cursory glance at Activerecord suggests it now insists on integer
primary key id's.&lt;/p&gt;
&lt;p&gt;e.g. On my box&lt;/p&gt;
&lt;p&gt;PUBLISH::Document.first('e06ae583-bea5-474e-8c68-9a9d96caeefd')
works fine in 2.3.8&lt;/p&gt;
&lt;p&gt;but fails with&lt;br&gt;
TypeError: can't convert String into Integer&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/relation/finder_methods.rb:117:in `first'
    from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/relation/finder_methods.rb:117:in `first'
    from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/base.rb:439:in `__send__'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;in rails 3.0.1&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/base.rb:439:in `first'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PUBLISH::Document.create! creates the database record but
reports the id as nil in 3.0.1&lt;/p&gt;
&lt;p&gt;As this was supported in 2.3, but not in 3.0.1, I think this
should be made more explicit in the upgrade guidance.&lt;/p&gt;
&lt;p&gt;Many Thanks&lt;/p&gt;
&lt;p&gt;Kieran&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi

I am only raising this here as I have spent quite a few hours searching for why my 2.3.8 project no longer works in rails 3 and I thought someone else could find this post.

I am using Postgresql and uuids (guids) as the primary key (id) column.

This works fine in 2.3.8 but fails silently in rails 3.0.1. A cursory glance at Activerecord suggests it now insists on integer primary key id's.

e.g. On my box

PUBLISH::Document.first('e06ae583-bea5-474e-8c68-9a9d96caeefd') works fine in 2.3.8

but fails with 
TypeError: can't convert String into Integer
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/relation/finder_methods.rb:117:in `first'
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/relation/finder_methods.rb:117:in `first'
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/base.rb:439:in `__send__'

in rails 3.0.1
        from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/base.rb:439:in `first'


PUBLISH::Document.create! creates the database record but reports the id as nil in 3.0.1

As this was supported in 2.3, but not in 3.0.1, I think this should be made more explicit in the upgrade guidance.

Many Thanks

Kieran</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi&lt;/p&gt;
&lt;p&gt;I am only raising this here as I have spent quite a few hours
searching for why my 2.3.8 project no longer works in rails 3 and I
thought someone else could find this post.&lt;/p&gt;
&lt;p&gt;I am using Postgresql and uuids (guids) as the primary key (id)
column.&lt;/p&gt;
&lt;p&gt;This works fine in 2.3.8 but fails silently in rails 3.0.1. A
cursory glance at Activerecord suggests it now insists on integer
primary key id's.&lt;/p&gt;
&lt;p&gt;e.g. On my box&lt;/p&gt;
&lt;p&gt;PUBLISH::Document.first('e06ae583-bea5-474e-8c68-9a9d96caeefd')
works fine in 2.3.8&lt;/p&gt;
&lt;p&gt;but fails with&lt;br&gt;
TypeError: can't convert String into Integer&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/relation/finder_methods.rb:117:in `first'
    from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/relation/finder_methods.rb:117:in `first'
    from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/base.rb:439:in `__send__'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;in rails 3.0.1&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    from /usr/lib/ruby/gems/1.8/gems/activerecord-3.0.1/lib/active_record/base.rb:439:in `first'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PUBLISH::Document.create! creates the database record but
reports the id as nil in 3.0.1&lt;/p&gt;
&lt;p&gt;As this was supported in 2.3, but not in 3.0.1, I think this
should be made more explicit in the upgrade guidance.&lt;/p&gt;
&lt;p&gt;Many Thanks&lt;/p&gt;
&lt;p&gt;Kieran&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-12T12:35:50+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-12T12:35:51+00:00</updated-at>
      <user-id type="integer">124585</user-id>
      <version type="integer">1</version>
      <user-name>Kieran McCusker</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>PUBLISH::Document.first(n) returns the first n records - you want find(id) instead.</body>
      <body-html>&lt;div&gt;&lt;p&gt;PUBLISH::Document.first(n) returns the first n records - you
want find(id) instead.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-12T13:05:17+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-12T13:05:23+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yep, sorry about that, but the central problem still stands that id returns nil and relations do not work e.g.

d = PUBLISH::Document.create!
d.chapters.create!

Does not create a document with a chapter belonging to it in the database as it does in 2.3.8</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yep, sorry about that, but the central problem still stands that
id returns nil and relations do not work e.g.&lt;/p&gt;
&lt;p&gt;d = PUBLISH::Document.create!&lt;br&gt;
d.chapters.create!&lt;/p&gt;
&lt;p&gt;Does not create a document with a chapter belonging to it in the
database as it does in 2.3.8&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-12T13:47:05+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-12T13:47:09+00:00</updated-at>
      <user-id type="integer">124585</user-id>
      <version type="integer">3</version>
      <user-name>Kieran McCusker</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think you need to investigate this a bit further. I've got a Rails 3.0.1 app which also uses non-Integer primary keys (in my case, just a string though), and I'm able to do things like

EventType.find(&quot;documents_create&quot;)

which works find.

I suspect this may be due to the string to integer coercion which ActiveRecord::Base.find does to allow use to say things like Thing.find(params[:id]), when the integer id in the params hash is actually a string. So this may be a bug specific to GUID/UUID-type identifiers, rather than all non-integer primary keys.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think you need to investigate this a bit further. I've got a
Rails 3.0.1 app which also uses non-Integer primary keys (in my
case, just a string though), and I'm able to do things like&lt;/p&gt;
&lt;p&gt;EventType.find(&quot;documents_create&quot;)&lt;/p&gt;
&lt;p&gt;which works find.&lt;/p&gt;
&lt;p&gt;I suspect this may be due to the string to integer coercion
which ActiveRecord::Base.find does to allow use to say things like
Thing.find(params[:id]), when the integer id in the params hash is
actually a string. So this may be a bug specific to GUID/UUID-type
identifiers, rather than all non-integer primary keys.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-13T21:52:35+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-13T21:52:38+00:00</updated-at>
      <user-id type="integer">96260</user-id>
      <version type="integer">4</version>
      <user-name>Jason Langenauer</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm a little further down the line, and have updated to Activerecord 3.0.3

I have a postgresql table with a column {id uuid} as the primary key. To get d = PUBLISH::Document.create! to work I have replaced pk_and_sequence_for in the postgresql activerecord adapter with :-

      def pk_and_sequence_for(table) #:nodoc:
        # Look for a single column primary key
        # If it is a sequence then return the sequence 
         result = query(&lt;&lt;-end_sql, 'PK and serial sequence')[0]
           SELECT 
             a.attname,
             MIN(
               CASE
                 WHEN d.adsrc ~* '^nextval\\(' THEN
                   CASE
                     WHEN split_part(d.adsrc, '''', 2) ~ '.' THEN substr(split_part(d.adsrc, '''', 2), strpos(split_part(d.adsrc, '''', 2), '.')+1)
                     ELSE split_part(d.adsrc, '''', 2)
                   END
                 ELSE NULL
               END
             )
           FROM pg_attribute a JOIN pg_attrdef d 
           ON a.attrelid = d.adrelid AND a.attnum = d.adnum
           join pg_constraint c on c.conrelid = a.attrelid and a.attnum = any (c.conkey)
           WHERE c.contype = 'p' and a.attrelid = '#{quote_table_name(table)}'::regclass
           AND a.attnum &gt; 0 AND NOT a.attisdropped
           group by 1
           having count(*) = 1
         end_sql
 
         # [primary_key, sequence]
         result
      end

i.e. I will take as my primary key a single column defined as a primary key that also has default. If the default is a sequence I will return that as the sequence. This seems to me to be what the original code is striving for.

As a side point in our production database the old code returned almost 1000 rows in the first select in the old function and was almost an order of magnitude slower.

There are a couple of other changes I needed to the adapter as well

1. In the quote function I needed 

        elsif value.kind_of?(String) &amp;&amp; column.sql_type == 'uuid'
          &quot;'#{quote_string(value.gsub(&quot;'&quot;,''))}'&quot;

Otherwise when I do update_attribute I get an extra set of quotes around the uuid which causes the sql to fail.

2. In table_exists? function I needed

        exists = 
          query(&lt;&lt;-SQL).first[0].to_i &gt; 0
             SELECT COUNT(*)
             FROM pg_tables
             WHERE tablename = '#{table.gsub(/(^&quot;|&quot;$)/,'')}'
             #{schema ? &quot;AND schemaname = '#{schema}'&quot; : ''}
          SQL
        if !exists
          ## Check if it is actually a view
          exists = 
            query(&lt;&lt;-SQL).first[0].to_i &gt; 0
               SELECT COUNT(*)
               FROM pg_views
               WHERE viewname = '#{table.gsub(/(^&quot;|&quot;$)/,'')}'
               #{schema ? &quot;AND schemaname = '#{schema}'&quot; : ''}
            SQL
         end
         
         exists

as one of our tables is actually a view - Although I suppose I could recode this quite easily</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm a little further down the line, and have updated to
Activerecord 3.0.3&lt;/p&gt;
&lt;p&gt;I have a postgresql table with a column {id uuid} as the primary
key. To get d = PUBLISH::Document.create! to work I have replaced
pk_and_sequence_for in the postgresql activerecord adapter with
:-&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def pk_and_sequence_for(table) #:nodoc:
    # Look for a single column primary key
    # If it is a sequence then return the sequence 
     result = query(&amp;lt;&amp;lt;-end_sql, 'PK and serial sequence')[0]
       SELECT 
         a.attname,
         MIN(
           CASE
             WHEN d.adsrc ~* '^nextval\\(' THEN
               CASE
                 WHEN split_part(d.adsrc, '''', 2) ~ '.' THEN substr(split_part(d.adsrc, '''', 2), strpos(split_part(d.adsrc, '''', 2), '.')+1)
                 ELSE split_part(d.adsrc, '''', 2)
               END
             ELSE NULL
           END
         )
       FROM pg_attribute a JOIN pg_attrdef d 
       ON a.attrelid = d.adrelid AND a.attnum = d.adnum
       join pg_constraint c on c.conrelid = a.attrelid and a.attnum = any (c.conkey)
       WHERE c.contype = 'p' and a.attrelid = '#{quote_table_name(table)}'::regclass
       AND a.attnum &amp;gt; 0 AND NOT a.attisdropped
       group by 1
       having count(*) = 1
     end_sql

     # [primary_key, sequence]
     result
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;i.e. I will take as my primary key a single column defined as a
primary key that also has default. If the default is a sequence I
will return that as the sequence. This seems to me to be what the
original code is striving for.&lt;/p&gt;
&lt;p&gt;As a side point in our production database the old code returned
almost 1000 rows in the first select in the old function and was
almost an order of magnitude slower.&lt;/p&gt;
&lt;p&gt;There are a couple of other changes I needed to the adapter as
well&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In the quote function I needed&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;elsif value.kind_of?(String) &amp;amp;&amp;amp; column.sql_type == 'uuid'
  &quot;'#{quote_string(value.gsub(&quot;'&quot;,''))}'&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Otherwise when I do update_attribute I get an extra set of
quotes around the uuid which causes the sql to fail.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In table_exists? function I needed&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;exists =
  query(&amp;lt;&amp;lt;-SQL).first[0].to_i &amp;gt; 0
     SELECT COUNT(*)
     FROM pg_tables
     WHERE tablename = '#{table.gsub(/(^&quot;|&quot;$)/,'')}'
     #{schema ? &quot;AND schemaname = '#{schema}'&quot; : ''}
  SQL
if !exists
  ## Check if it is actually a view
  exists = 
    query(&amp;lt;&amp;lt;-SQL).first[0].to_i &amp;gt; 0
       SELECT COUNT(*)
       FROM pg_views
       WHERE viewname = '#{table.gsub(/(^&quot;|&quot;$)/,'')}'
       #{schema ? &quot;AND schemaname = '#{schema}'&quot; : ''}
    SQL
 end

 exists&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;as one of our tables is actually a view - Although I suppose I
could recode this quite easily&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-22T18:06:21+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-22T18:06:26+00:00</updated-at>
      <user-id type="integer">124585</user-id>
      <version type="integer">5</version>
      <user-name>Kieran McCusker</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can you show us your migration?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can you show us your migration?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-22T19:19:53+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-22T19:20:02+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry this application goes back to 2006 - We've never implemented migrations</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry this application goes back to 2006 - We've never
implemented migrations&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-23T09:48:06+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-23T09:48:09+00:00</updated-at>
      <user-id type="integer">124585</user-id>
      <version type="integer">7</version>
      <user-name>Kieran McCusker</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-23T09:49:06+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-23T09:49:08+00:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">8</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi

I wonder if you could you say how this has been resolved? My original question was about changes in the way 3.0 Activerecord worked breaking current applications in an undocumented way. Are thinking this is just an application written in 2006? It has been under development ever since and is currently in production under 2.3.8

The changes I made to the postgresql adapter resolve these issues, but I suspect that you are not thinking of looking at or merging them. Have you updated the upgrade guidance with the new requirement that postgresql now can only use serial columns as primary keys?

Many thanks

Kieran</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi&lt;/p&gt;
&lt;p&gt;I wonder if you could you say how this has been resolved? My
original question was about changes in the way 3.0 Activerecord
worked breaking current applications in an undocumented way. Are
thinking this is just an application written in 2006? It has been
under development ever since and is currently in production under
2.3.8&lt;/p&gt;
&lt;p&gt;The changes I made to the postgresql adapter resolve these
issues, but I suspect that you are not thinking of looking at or
merging them. Have you updated the upgrade guidance with the new
requirement that postgresql now can only use serial columns as
primary keys?&lt;/p&gt;
&lt;p&gt;Many thanks&lt;/p&gt;
&lt;p&gt;Kieran&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-23T10:23:57+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-23T10:24:06+00:00</updated-at>
      <user-id type="integer">124585</user-id>
      <version type="integer">9</version>
      <user-name>Kieran McCusker</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry for posting again, but actually I didn't have any migrations anyway - I was simply trying to get the application working under Rails 3.0</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry for posting again, but actually I didn't have any
migrations anyway - I was simply trying to get the application
working under Rails 3.0&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-23T10:25:54+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-23T10:25:57+00:00</updated-at>
      <user-id type="integer">124585</user-id>
      <version type="integer">10</version>
      <user-name>Kieran McCusker</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can you dump the schema and show us that?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can you dump the schema and show us that?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-23T12:04:33+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-23T12:04:36+00:00</updated-at>
      <user-id type="integer">71333</user-id>
      <version type="integer">11</version>
      <user-name>wtn</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There are loads of tables in the schema. In terms of the problem table the first three columns look like (with primary key shown) :-

CREATE TABLE publishing.documents
(
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  version_no integer DEFAULT 2,
  created_by integer,
  PRIMARY KEY (id)
)

Is this what you wanted?</body>
      <body-html>&lt;div&gt;&lt;p&gt;There are loads of tables in the schema. In terms of the problem
table the first three columns look like (with primary key shown)
:-&lt;/p&gt;
&lt;p&gt;CREATE TABLE publishing.documents&lt;br&gt;
( id uuid NOT NULL DEFAULT uuid_generate_v4(), version_no integer
DEFAULT 2, created_by integer, PRIMARY KEY (id) )&lt;/p&gt;
&lt;p&gt;Is this what you wanted?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-23T12:22:19+00:00</created-at>
      <creator-id type="integer">124585</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5959</number>
      <permalink>it-is-no-longer-possible-to-use-non-integer-id-columns-in-rails-3</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>It is no longer possible to use Non-Integer id columns in rails 3</title>
      <updated-at type="datetime">2010-11-23T12:22:23+00:00</updated-at>
      <user-id type="integer">124585</user-id>
      <version type="integer">12</version>
      <user-name>Kieran McCusker</user-name>
      <creator-name>Kieran McCusker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5959</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
