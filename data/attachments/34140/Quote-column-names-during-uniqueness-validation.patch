From d0d67e19c10511dd330917d8648872594c8f328b Mon Sep 17 00:00:00 2001
From: Murray Steele <muz@h-lame.com>
Date: Mon, 21 Jul 2008 11:01:48 +0100
Subject: [PATCH] Quote column names during uniquness validation.

---
 .../lib/active_model/validations/uniqueness.rb     |   10 +++++-----
 activerecord/lib/active_record/validations.rb      |    8 ++++----
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/activemodel/lib/active_model/validations/uniqueness.rb b/activemodel/lib/active_model/validations/uniqueness.rb
index 2b47c6b..36c3230 100644
--- a/activemodel/lib/active_model/validations/uniqueness.rb
+++ b/activemodel/lib/active_model/validations/uniqueness.rb
@@ -54,32 +54,32 @@ module ActiveModel
           finder_class = class_hierarchy.detect { |klass| !klass.abstract_class? }
 
           if value.nil? || (configuration[:case_sensitive] || !finder_class.columns_hash[attr_name.to_s].text?)
-            condition_sql = "#{record.class.quoted_table_name}.#{attr_name} #{attribute_condition(value)}"
+            condition_sql = "#{record.class.quoted_table_name}.#{connection.quote_column_name(attr_name)} #{attribute_condition(value)}"
             condition_params = [value]
           else
             # sqlite has case sensitive SELECT query, while MySQL/Postgresql don't.
             # Hence, this is needed only for sqlite.
-            condition_sql = "LOWER(#{record.class.quoted_table_name}.#{attr_name}) #{attribute_condition(value)}"
+            condition_sql = "LOWER(#{record.class.quoted_table_name}.#{connection.quote_column_name(attr_name)}) #{attribute_condition(value)}"
             condition_params = [value.downcase]
           end
 
           if scope = configuration[:scope]
             Array(scope).map do |scope_item|
               scope_value = record.send(scope_item)
-              condition_sql << " AND #{record.class.quoted_table_name}.#{scope_item} #{attribute_condition(scope_value)}"
+              condition_sql << " AND #{record.class.quoted_table_name}.#{connection.quote_column_name(scope_item)} #{attribute_condition(scope_value)}"
               condition_params << scope_value
             end
           end
 
           unless record.new_record?
-            condition_sql << " AND #{record.class.quoted_table_name}.#{record.class.primary_key} <> ?"
+            condition_sql << " AND #{record.class.quoted_table_name}.#{connection.quote_column_name(record.class.primary_key)} <> ?"
             condition_params << record.send(:id)
           end
 
           results = finder_class.with_exclusive_scope do
             connection.select_all(
               construct_finder_sql(
-                :select     => "#{attr_name}",
+                :select     => "#{connection.quote_column_name(attr_name)}",
                 :from       => "#{finder_class.quoted_table_name}",
                 :conditions => [condition_sql, *condition_params]
               )
diff --git a/activerecord/lib/active_record/validations.rb b/activerecord/lib/active_record/validations.rb
index 741649f..75729d6 100755
--- a/activerecord/lib/active_record/validations.rb
+++ b/activerecord/lib/active_record/validations.rb
@@ -618,25 +618,25 @@ module ActiveRecord
           finder_class = class_hierarchy.detect { |klass| !klass.abstract_class? }
 
           if value.nil? || (configuration[:case_sensitive] || !finder_class.columns_hash[attr_name.to_s].text?)
-            condition_sql = "#{record.class.quoted_table_name}.#{attr_name} #{attribute_condition(value)}"
+            condition_sql = "#{record.class.quoted_table_name}.#{connection.quote_column_name(attr_name)} #{attribute_condition(value)}"
             condition_params = [value]
           else
             # sqlite has case sensitive SELECT query, while MySQL/Postgresql don't.
             # Hence, this is needed only for sqlite.
-            condition_sql = "LOWER(#{record.class.quoted_table_name}.#{attr_name}) #{attribute_condition(value)}"
+            condition_sql = "LOWER(#{record.class.quoted_table_name}.#{connection.quote_column_name(attr_name)}) #{attribute_condition(value)}"
             condition_params = [value.downcase]
           end
 
           if scope = configuration[:scope]
             Array(scope).map do |scope_item|
               scope_value = record.send(scope_item)
-              condition_sql << " AND #{record.class.quoted_table_name}.#{scope_item} #{attribute_condition(scope_value)}"
+              condition_sql << " AND #{record.class.quoted_table_name}.#{connection.quote_column_name scope_item} #{attribute_condition(scope_value)}"
               condition_params << scope_value
             end
           end
 
           unless record.new_record?
-            condition_sql << " AND #{record.class.quoted_table_name}.#{record.class.primary_key} <> ?"
+            condition_sql << " AND #{record.class.quoted_table_name}.#{connection.quote_column_name record.class.primary_key} <> ?"
             condition_params << record.send(:id)
           end
 
-- 
1.5.4.5

