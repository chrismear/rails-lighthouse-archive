<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-04-28T17:25:55+01:00</created-at>
  <creator-id type="integer">18514</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">60</number>
  <permalink>have_tag-assert_select-does-not-validate-xml-with-periods-in-attribute-names</permalink>
  <priority type="integer">10278</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>have_tag/assert_select does not validate XML with periods in attribute names</title>
  <updated-at type="datetime">2008-06-13T06:46:16+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>T.J. VanSlyke</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/60</url>
  <priority-name nil="true"></priority-name>
  <original-body>While creating specs for a method to generate valid GraphML, I needed to use attributes with periods ('.') in their names (i.e. '&lt;some-tag some.attr=&quot;some_val&quot;/&gt;').  However, as it stands, assert_select uses the HTML::Node.parse method to parse its input.  This method does not allow periods in attribute names (the valid characters are represented by the regex /[-\w:\]+/).  My temporary solution was to monkeypatch the HTML::Node.parse method in my spec_helpers.rb to accept periods by changing the regex to read /[-\w:\.]+/.  However, that is obviously not a reasonable solution.

Is anyone aware of this issue?  If so, is it a problem inherent in Rails or am I missing some kind of alternative XML parser which allows for this syntax?

Thanks all!</original-body>
  <latest-body>While creating specs for a method to generate valid GraphML, I needed to use attributes with periods ('.') in their names (i.e. '&lt;some-tag some.attr=&quot;some_val&quot;/&gt;').  However, as it stands, assert_select uses the HTML::Node.parse method to parse its input.  This method does not allow periods in attribute names (the valid characters are represented by the regex /[-\w:\]+/).  My temporary solution was to monkeypatch the HTML::Node.parse method in my spec_helpers.rb to accept periods by changing the regex to read /[-\w:\.]+/.  However, that is obviously not a reasonable solution.

Is anyone aware of this issue?  If so, is it a problem inherent in Rails or am I missing some kind of alternative XML parser which allows for this syntax?

Thanks all!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
While creating specs for a method to generate valid GraphML, I needed to use attributes with periods ('.') in their names (i.e. '').  However, as it stands, assert_select uses the HTML::Node.parse method to parse its input.  This method does not allow periods in attribute names (the valid characters are represented by the regex /[-\w:\]+/).  My temporary solution was to monkeypatch the HTML::Node.parse method in my spec_helpers.rb to accept periods by changing the regex to read /[-\w:\.]+/.  However, that is obviously not a reasonable solution.
&lt;/p&gt;&lt;p&gt;
Is anyone aware of this issue?  If so, is it a problem inherent in Rails or am I missing some kind of alternative XML parser which allows for this syntax?
&lt;/p&gt;&lt;p&gt;
Thanks all!
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>While creating specs for a method to generate valid GraphML, I needed to use attributes with periods ('.') in their names (i.e. '&lt;some-tag some.attr=&quot;some_val&quot;/&gt;').  However, as it stands, assert_select uses the HTML::Node.parse method to parse its input.  This method does not allow periods in attribute names (the valid characters are represented by the regex /[-\w:\]+/).  My temporary solution was to monkeypatch the HTML::Node.parse method in my spec_helpers.rb to accept periods by changing the regex to read /[-\w:\.]+/.  However, that is obviously not a reasonable solution.

Is anyone aware of this issue?  If so, is it a problem inherent in Rails or am I missing some kind of alternative XML parser which allows for this syntax?

Thanks all!</body>
      <body-html>&lt;div&gt;&lt;p&gt;
While creating specs for a method to generate valid GraphML, I needed to use attributes with periods ('.') in their names (i.e. '').  However, as it stands, assert_select uses the HTML::Node.parse method to parse its input.  This method does not allow periods in attribute names (the valid characters are represented by the regex /[-\w:\]+/).  My temporary solution was to monkeypatch the HTML::Node.parse method in my spec_helpers.rb to accept periods by changing the regex to read /[-\w:\.]+/.  However, that is obviously not a reasonable solution.
&lt;/p&gt;&lt;p&gt;
Is anyone aware of this issue?  If so, is it a problem inherent in Rails or am I missing some kind of alternative XML parser which allows for this syntax?
&lt;/p&gt;&lt;p&gt;
Thanks all!
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-28T17:25:55+01:00</created-at>
      <creator-id type="integer">18514</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">60</number>
      <permalink>have_tag-assert_select-does-not-validate-xml-with-periods-in-attribute-names</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>have_tag/assert_select does not validate XML with periods in attribute names</title>
      <updated-at type="datetime">2008-04-28T17:25:55+01:00</updated-at>
      <user-id type="integer">18514</user-id>
      <version type="integer">1</version>
      <user-name>T.J. VanSlyke</user-name>
      <creator-name>T.J. VanSlyke</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/60</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'd ask around on the Ruby on Rails mailing list.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I'd ask around on the Ruby on Rails mailing list.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-13T06:46:16+01:00</created-at>
      <creator-id type="integer">18514</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">60</number>
      <permalink>have_tag-assert_select-does-not-validate-xml-with-periods-in-attribute-names</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>have_tag/assert_select does not validate XML with periods in attribute names</title>
      <updated-at type="datetime">2008-06-13T06:46:16+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>T.J. VanSlyke</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/60</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
