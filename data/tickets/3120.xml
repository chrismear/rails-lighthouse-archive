<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-08-31T07:02:31+01:00</created-at>
  <creator-id type="integer">68150</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3120</number>
  <permalink>activerecordbase-is-non-commutative-when-comparing-a-loaded-versus-initialized-object</permalink>
  <priority type="integer">135732</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>active_record base comparison equality</tag>
  <title>ActiveRecord::Base#== is non-commutative when comparing a loaded versus initialized object</title>
  <updated-at type="datetime">2010-01-21T07:05:46+00:00</updated-at>
  <user-id type="integer">65556</user-id>
  <version type="integer">4</version>
  <user-name>Rizwan Reza</user-name>
  <creator-name>fritz</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3120</url>
  <priority-name nil="true"></priority-name>
  <original-body>If you compare a fully loaded model object with an initialized object of the same type and with the same id, the result of the == operator depends on order of operands. For example:

@@@
&gt;&gt; loaded_object = MyModel.last
=&gt; #&lt; MyModel id: 842437485, user_id: 11, ...&gt;
&gt;&gt; initialized_object = MyModel.new
=&gt; #&lt; MyModel id: nil, user_id: nil, ...&gt;
&gt;&gt; initialized_object.id = loaded_object.id
=&gt; 842437485
&gt;&gt; initialized_object == loaded_object
=&gt; true
&gt;&gt; loaded_object == initialized_object   # (!)
**=&gt; false**
@@@

It's clear from the implementation why this is the case:

@@@
2811:       def ==(comparison_object)
2812:         comparison_object.equal?(self) ||
2813:           (comparison_object.instance_of?(self.class) &amp;&amp;
2814:             comparison_object.id == id &amp;&amp;
2815:             ***!comparison_object.new_record?***)
2816:       end
@@@

I can't imagine that the intent was a non-commutative equality operator. 

This could be resolved either by ensuring that new records either never or always compare equal to records with the same id. However I'm not sure what the intent is. My instinct is &quot;always&quot; (i.e., removing the &quot;&amp;&amp; !comparison_object.new_record?&quot;), but I'm not totally sure of the intent. 

I'm happy to submit a patch and the requisite tests if I can get some input on which way the fix should go...</original-body>
  <latest-body>If you compare a fully loaded model object with an initialized object of the same type and with the same id, the result of the == operator depends on order of operands. For example:

@@@
&gt;&gt; loaded_object = MyModel.last
=&gt; #&lt; MyModel id: 842437485, user_id: 11, ...&gt;
&gt;&gt; initialized_object = MyModel.new
=&gt; #&lt; MyModel id: nil, user_id: nil, ...&gt;
&gt;&gt; initialized_object.id = loaded_object.id
=&gt; 842437485
&gt;&gt; initialized_object == loaded_object
=&gt; true
&gt;&gt; loaded_object == initialized_object   # (!)
**=&gt; false**
@@@

It's clear from the implementation why this is the case:

@@@
2811:       def ==(comparison_object)
2812:         comparison_object.equal?(self) ||
2813:           (comparison_object.instance_of?(self.class) &amp;&amp;
2814:             comparison_object.id == id &amp;&amp;
2815:             ***!comparison_object.new_record?***)
2816:       end
@@@

I can't imagine that the intent was a non-commutative equality operator. 

This could be resolved either by ensuring that new records either never or always compare equal to records with the same id. However I'm not sure what the intent is. My instinct is &quot;always&quot; (i.e., removing the &quot;&amp;&amp; !comparison_object.new_record?&quot;), but I'm not totally sure of the intent. 

I'm happy to submit a patch and the requisite tests if I can get some input on which way the fix should go...</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If you compare a fully loaded model object with an initialized
object of the same type and with the same id, the result of the ==
operator depends on order of operands. For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; loaded_object = MyModel.last
=&amp;gt; #&amp;lt; MyModel id: 842437485, user_id: 11, ...&amp;gt;
&amp;gt;&amp;gt; initialized_object = MyModel.new
=&amp;gt; #&amp;lt; MyModel id: nil, user_id: nil, ...&amp;gt;
&amp;gt;&amp;gt; initialized_object.id = loaded_object.id
=&amp;gt; 842437485
&amp;gt;&amp;gt; initialized_object == loaded_object
=&amp;gt; true
&amp;gt;&amp;gt; loaded_object == initialized_object   # (!)
**=&amp;gt; false**&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It's clear from the implementation why this is the case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2811:       def ==(comparison_object)
2812:         comparison_object.equal?(self) ||
2813:           (comparison_object.instance_of?(self.class) &amp;amp;&amp;amp;
2814:             comparison_object.id == id &amp;amp;&amp;amp;
2815:             ***!comparison_object.new_record?***)
2816:       end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I can't imagine that the intent was a non-commutative equality
operator.&lt;/p&gt;
&lt;p&gt;This could be resolved either by ensuring that new records
either never or always compare equal to records with the same id.
However I'm not sure what the intent is. My instinct is &quot;always&quot;
(i.e., removing the &quot;&amp;amp;&amp;amp; !comparison_object.new_record?&quot;),
but I'm not totally sure of the intent.&lt;/p&gt;
&lt;p&gt;I'm happy to submit a patch and the requisite tests if I can get
some input on which way the fix should go...&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you compare a fully loaded model object with an initialized object of the same type and with the same id, the result of the == operator depends on order of operands. For example:

@@@
&gt;&gt; loaded_object = MyModel.last
=&gt; #&lt; MyModel id: 842437485, user_id: 11, ...&gt;
&gt;&gt; initialized_object = MyModel.new
=&gt; #&lt; MyModel id: nil, user_id: nil, ...&gt;
&gt;&gt; initialized_object.id = loaded_object.id
=&gt; 842437485
&gt;&gt; initialized_object == loaded_object
=&gt; true
&gt;&gt; loaded_object == initialized_object   # (!)
**=&gt; false**
@@@

It's clear from the implementation why this is the case:

@@@
2811:       def ==(comparison_object)
2812:         comparison_object.equal?(self) ||
2813:           (comparison_object.instance_of?(self.class) &amp;&amp;
2814:             comparison_object.id == id &amp;&amp;
2815:             ***!comparison_object.new_record?***)
2816:       end
@@@

I can't imagine that the intent was a non-commutative equality operator. 

This could be resolved either by ensuring that new records either never or always compare equal to records with the same id. However I'm not sure what the intent is. My instinct is &quot;always&quot; (i.e., removing the &quot;&amp;&amp; !comparison_object.new_record?&quot;), but I'm not totally sure of the intent. 

I'm happy to submit a patch and the requisite tests if I can get some input on which way the fix should go...</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you compare a fully loaded model object with an initialized
object of the same type and with the same id, the result of the ==
operator depends on order of operands. For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; loaded_object = MyModel.last
=&amp;gt; #&amp;lt; MyModel id: 842437485, user_id: 11, ...&amp;gt;
&amp;gt;&amp;gt; initialized_object = MyModel.new
=&amp;gt; #&amp;lt; MyModel id: nil, user_id: nil, ...&amp;gt;
&amp;gt;&amp;gt; initialized_object.id = loaded_object.id
=&amp;gt; 842437485
&amp;gt;&amp;gt; initialized_object == loaded_object
=&amp;gt; true
&amp;gt;&amp;gt; loaded_object == initialized_object   # (!)
**=&amp;gt; false**&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It's clear from the implementation why this is the case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2811:       def ==(comparison_object)
2812:         comparison_object.equal?(self) ||
2813:           (comparison_object.instance_of?(self.class) &amp;amp;&amp;amp;
2814:             comparison_object.id == id &amp;amp;&amp;amp;
2815:             ***!comparison_object.new_record?***)
2816:       end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I can't imagine that the intent was a non-commutative equality
operator.&lt;/p&gt;
&lt;p&gt;This could be resolved either by ensuring that new records
either never or always compare equal to records with the same id.
However I'm not sure what the intent is. My instinct is &quot;always&quot;
(i.e., removing the &quot;&amp;amp;&amp;amp; !comparison_object.new_record?&quot;),
but I'm not totally sure of the intent.&lt;/p&gt;
&lt;p&gt;I'm happy to submit a patch and the requisite tests if I can get
some input on which way the fix should go...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-31T07:02:31+01:00</created-at>
      <creator-id type="integer">68150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3120</number>
      <permalink>activerecordbase-is-non-commutative-when-comparing-a-loaded-versus-initialized-object</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record base comparison equality</tag>
      <title>ActiveRecord::Base#== is non-commutative when comparing a loaded versus initialized object</title>
      <updated-at type="datetime">2009-08-31T07:02:36+01:00</updated-at>
      <user-id type="integer">68150</user-id>
      <version type="integer">1</version>
      <user-name>fritz</user-name>
      <creator-name>fritz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3120</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Followup: we've been using the following monkeypatch locally and it seems to work well. Note the restriction on nil ids.

@@@
module ActiveRecord
  class Base
    def ==(comparison_object)
      comparison_object.equal?(self) ||
        (comparison_object.instance_of?(self.class) &amp;&amp;
         comparison_object.id == id &amp;&amp;
         !id.nil?)
    end
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Followup: we've been using the following monkeypatch locally and
it seems to work well. Note the restriction on nil ids.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;module ActiveRecord
  class Base
    def ==(comparison_object)
      comparison_object.equal?(self) ||
        (comparison_object.instance_of?(self.class) &amp;amp;&amp;amp;
         comparison_object.id == id &amp;amp;&amp;amp;
         !id.nil?)
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-01T05:53:08+01:00</created-at>
      <creator-id type="integer">68150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3120</number>
      <permalink>activerecordbase-is-non-commutative-when-comparing-a-loaded-versus-initialized-object</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record base comparison equality</tag>
      <title>ActiveRecord::Base#== is non-commutative when comparing a loaded versus initialized object</title>
      <updated-at type="datetime">2009-09-01T05:53:10+01:00</updated-at>
      <user-id type="integer">68150</user-id>
      <version type="integer">2</version>
      <user-name>fritz</user-name>
      <creator-name>fritz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3120</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-25T12:38:08+01:00</created-at>
      <creator-id type="integer">68150</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: active_record base comparison equality
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3120</number>
      <permalink>activerecordbase-is-non-commutative-when-comparing-a-loaded-versus-initialized-object</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record base bugmash comparison equality</tag>
      <title>ActiveRecord::Base#== is non-commutative when comparing a loaded versus initialized object</title>
      <updated-at type="datetime">2009-09-25T12:50:01+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>fritz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3120</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is fixed in 2-3-stable or 2.3.5.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is fixed in 2-3-stable or 2.3.5.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-21T07:05:45+00:00</created-at>
      <creator-id type="integer">68150</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: active_record base bugmash comparison equality
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3120</number>
      <permalink>activerecordbase-is-non-commutative-when-comparing-a-loaded-versus-initialized-object</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>active_record base comparison equality</tag>
      <title>ActiveRecord::Base#== is non-commutative when comparing a loaded versus initialized object</title>
      <updated-at type="datetime">2010-01-21T07:05:46+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">4</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>fritz</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3120</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
