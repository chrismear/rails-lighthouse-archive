<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-01-26T03:04:21+00:00</created-at>
  <creator-id type="integer">83562</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">3788</number>
  <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
  <priority type="integer">2</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
  <updated-at type="datetime">2010-10-15T23:01:41+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">12</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Paul Rosania</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Medium</priority-name>
  <original-body>Rails::Initializable::Collection does not always properly account for :after and :before requirements.

The sorting algorithm in Collection#initialize searches for the initializer specified by :after or :before, which works great if the initializer is already present.  However, attempting to hook an initializer to another initializer that hasn't yet been loaded causes the find to fail, which puts the initializer at the end.

In order to handle dependencies at insertion time (as currently designed), one could envision a system that creates placeholders for these requirements.

Unfortunately I don't time to write a patch yet, so I'm just reporting the issue.</original-body>
  <latest-body>Rails::Initializable::Collection does not always properly account for :after and :before requirements.

The sorting algorithm in Collection#initialize searches for the initializer specified by :after or :before, which works great if the initializer is already present.  However, attempting to hook an initializer to another initializer that hasn't yet been loaded causes the find to fail, which puts the initializer at the end.

In order to handle dependencies at insertion time (as currently designed), one could envision a system that creates placeholders for these requirements.

Unfortunately I don't time to write a patch yet, so I'm just reporting the issue.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Rails::Initializable::Collection does not always properly
account for :after and :before requirements.&lt;/p&gt;
&lt;p&gt;The sorting algorithm in Collection#initialize searches for the
initializer specified by :after or :before, which works great if
the initializer is already present. However, attempting to hook an
initializer to another initializer that hasn't yet been loaded
causes the find to fail, which puts the initializer at the end.&lt;/p&gt;
&lt;p&gt;In order to handle dependencies at insertion time (as currently
designed), one could envision a system that creates placeholders
for these requirements.&lt;/p&gt;
&lt;p&gt;Unfortunately I don't time to write a patch yet, so I'm just
reporting the issue.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails::Initializable::Collection does not always properly account for :after and :before requirements.

The sorting algorithm in Collection#initialize searches for the initializer specified by :after or :before, which works great if the initializer is already present.  However, attempting to hook an initializer to another initializer that hasn't yet been loaded causes the find to fail, which puts the initializer at the end.

In order to handle dependencies at insertion time (as currently designed), one could envision a system that creates placeholders for these requirements.

Unfortunately I don't time to write a patch yet, so I'm just reporting the issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails::Initializable::Collection does not always properly
account for :after and :before requirements.&lt;/p&gt;
&lt;p&gt;The sorting algorithm in Collection#initialize searches for the
initializer specified by :after or :before, which works great if
the initializer is already present. However, attempting to hook an
initializer to another initializer that hasn't yet been loaded
causes the find to fail, which puts the initializer at the end.&lt;/p&gt;
&lt;p&gt;In order to handle dependencies at insertion time (as currently
designed), one could envision a system that creates placeholders
for these requirements.&lt;/p&gt;
&lt;p&gt;Unfortunately I don't time to write a patch yet, so I'm just
reporting the issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-26T03:04:21+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>initialization initializer initializers plugins rails3</tag>
      <title>Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-01-26T03:04:22+00:00</updated-at>
      <user-id type="integer">83562</user-id>
      <version type="integer">1</version>
      <user-name>Paul Rosania</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Patch attached for discussion.

I have modified the dependency resolution algorithm to use topographical sort (leveraging tsort from the Ruby standard library).

Following the principle of least surprise, and to satisfy pre-existing tests, initializer declarations now implicitly create an :after dependency on the prior initializer in the class (if there is one, and no explicit :after is stated).

However, because of the nature of the dependency graph created during boot (DAG), it is not guaranteed that an initializer with an :after (s/after/before) will run *immediately* after the specified initializer dependency.  Therefore, it is necessary in these rare cases to be explicit in stating both a :before and :after condition to make sure execution happens as desired.  I have updated the tests to reflect this situation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Patch attached for discussion.&lt;/p&gt;
&lt;p&gt;I have modified the dependency resolution algorithm to use
topographical sort (leveraging tsort from the Ruby standard
library).&lt;/p&gt;
&lt;p&gt;Following the principle of least surprise, and to satisfy
pre-existing tests, initializer declarations now implicitly create
an :after dependency on the prior initializer in the class (if
there is one, and no explicit :after is stated).&lt;/p&gt;
&lt;p&gt;However, because of the nature of the dependency graph created
during boot (DAG), it is not guaranteed that an initializer with an
:after (s/after/before) will run &lt;em&gt;immediately&lt;/em&gt; after the
specified initializer dependency. Therefore, it is necessary in
these rare cases to be explicit in stating both a :before and
:after condition to make sure execution happens as desired. I have
updated the tests to reflect this situation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-27T06:30:42+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>initialization initializer initializers plugins rails3</tag>
      <title>Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-01-27T06:30:46+00:00</updated-at>
      <user-id type="integer">83562</user-id>
      <version type="integer">2</version>
      <user-name>Paul Rosania</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-27T13:41:33+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- 
:title: Rails 3.0.pre initializers do not always bind in the proper order
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>initialization initializer initializers plugins rails3</tag>
      <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-01-27T13:41:35+00:00</updated-at>
      <user-id type="integer">83562</user-id>
      <version type="integer">3</version>
      <user-name>Paul Rosania</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good thinking, Paul! I get a test failure though:

&lt;pre&gt;
  1) Failure:
test_database_middleware_initializes_when_session_store_is_active_record(ApplicationTests::FrameworlsTest) [test/application/initializers/frameworks_test.rb:71]:
&lt;[ActiveRecord::ConnectionAdapters::ConnectionManagement,
 ActiveRecord::QueryCache,
 ActiveRecord::SessionStore]&gt; expected but was
&lt;[ActiveRecord::SessionStore,
 ActiveRecord::ConnectionAdapters::ConnectionManagement,
 ActiveRecord::QueryCache]&gt;.
&lt;/pre&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good thinking, Paul! I get a test failure though:&lt;/p&gt;
&lt;pre&gt;
  1) Failure:
test_database_middleware_initializes_when_session_store_is_active_record(ApplicationTests::FrameworlsTest) [test/application/initializers/frameworks_test.rb:71]:
&amp;lt;[ActiveRecord::ConnectionAdapters::ConnectionManagement,
 ActiveRecord::QueryCache,
 ActiveRecord::SessionStore]&amp;gt; expected but was
&amp;lt;[ActiveRecord::SessionStore,
 ActiveRecord::ConnectionAdapters::ConnectionManagement,
 ActiveRecord::QueryCache]&amp;gt;.
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-28T16:14:55+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>initialization initializer initializers plugins rails3</tag>
      <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-01-28T16:14:57+00:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hmm. This is a side effect of the sort.  Any test checking whether initializers loaded or not will need to be agnostic to the exact order.  I will take a look and revise the test accordingly.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hmm. This is a side effect of the sort. Any test checking
whether initializers loaded or not will need to be agnostic to the
exact order. I will take a look and revise the test
accordingly.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-28T16:25:36+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>initialization initializer initializers plugins rails3</tag>
      <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-01-28T16:25:38+00:00</updated-at>
      <user-id type="integer">83562</user-id>
      <version type="integer">5</version>
      <user-name>Paul Rosania</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Updated patch attached.

The new initializer method highlights an implicit :before dependency in the AR initializers.  I made the dependency explicit, which resolves the outstanding test case.

I should note that while the tsort method is much more robust, it necessarily increases the chances that implicit dependencies will break.  Primarily, this impacts how one thinks about what a :before dependencies means.

For example, under the proposed system, :after dependencies guarantee that the referenced initializer has been run.  They do *not* guarantee that your initializer will run immediately afterward; in fact it could run at any point onward.  A :before dependency is required if you want to box execution very specifically.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Updated patch attached.&lt;/p&gt;
&lt;p&gt;The new initializer method highlights an implicit :before
dependency in the AR initializers. I made the dependency explicit,
which resolves the outstanding test case.&lt;/p&gt;
&lt;p&gt;I should note that while the tsort method is much more robust,
it necessarily increases the chances that implicit dependencies
will break. Primarily, this impacts how one thinks about what a
:before dependencies means.&lt;/p&gt;
&lt;p&gt;For example, under the proposed system, :after dependencies
guarantee that the referenced initializer has been run. They do
&lt;em&gt;not&lt;/em&gt; guarantee that your initializer will run immediately
afterward; in fact it could run at any point onward. A :before
dependency is required if you want to box execution very
specifically.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-28T21:56:50+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>initialization initializer initializers plugins rails3</tag>
      <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-01-28T21:56:53+00:00</updated-at>
      <user-id type="integer">83562</user-id>
      <version type="integer">6</version>
      <user-name>Paul Rosania</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hey Paul,

Got this Error:

&lt;pre&gt;
test_plugin_init_is_ran_before_application_ones(RailtiesTest::PluginTest):
RuntimeError: no $foo
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/tmp/app/config/initializers/foo.rb:1:in `&lt;top (required)&gt;'
    /Users/andhapp/Projects/git-repository/andhapp-rails/activesupport/lib/active_support/dependencies.rb:156:in `load'
    /Users/andhapp/Projects/git-repository/andhapp-rails/activesupport/lib/active_support/dependencies.rb:156:in `block in load_with_new_constant_marking'
    /Users/andhapp/Projects/git-repository/andhapp-rails/activesupport/lib/active_support/dependencies.rb:537:in `new_constants_in'
    /Users/andhapp/Projects/git-repository/andhapp-rails/activesupport/lib/active_support/dependencies.rb:156:in `load_with_new_constant_marking'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/engine.rb:107:in `block (2 levels) in &lt;class:Engine&gt;'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/engine.rb:106:in `each'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/engine.rb:106:in `block in &lt;class:Engine&gt;'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/initializable.rb:25:in `instance_exec'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/initializable.rb:25:in `run'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/initializable.rb:55:in `block in run_initializers'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/initializable.rb:54:in `each'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/initializable.rb:54:in `run_initializers'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/application.rb:71:in `initialize!'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/application.rb:41:in `method_missing'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/tmp/app/config/environment.rb:5:in `&lt;top (required)&gt;'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/test/railties/shared_tests.rb:6:in `require'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/test/railties/shared_tests.rb:6:in `boot_rails'
    test/railties/plugin_test.rb:60:in `block in &lt;class:PluginTest&gt;'

&lt;/pre&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Paul,&lt;/p&gt;
&lt;p&gt;Got this Error:&lt;/p&gt;
&lt;pre&gt;
test_plugin_init_is_ran_before_application_ones(RailtiesTest::PluginTest):
RuntimeError: no $foo
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/tmp/app/config/initializers/foo.rb:1:in `'
    /Users/andhapp/Projects/git-repository/andhapp-rails/activesupport/lib/active_support/dependencies.rb:156:in `load'
    /Users/andhapp/Projects/git-repository/andhapp-rails/activesupport/lib/active_support/dependencies.rb:156:in `block in load_with_new_constant_marking'
    /Users/andhapp/Projects/git-repository/andhapp-rails/activesupport/lib/active_support/dependencies.rb:537:in `new_constants_in'
    /Users/andhapp/Projects/git-repository/andhapp-rails/activesupport/lib/active_support/dependencies.rb:156:in `load_with_new_constant_marking'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/engine.rb:107:in `block (2 levels) in '
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/engine.rb:106:in `each'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/engine.rb:106:in `block in '
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/initializable.rb:25:in `instance_exec'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/initializable.rb:25:in `run'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/initializable.rb:55:in `block in run_initializers'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/initializable.rb:54:in `each'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/initializable.rb:54:in `run_initializers'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/application.rb:71:in `initialize!'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/lib/rails/application.rb:41:in `method_missing'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/tmp/app/config/environment.rb:5:in `'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/test/railties/shared_tests.rb:6:in `require'
    /Users/andhapp/Projects/git-repository/andhapp-rails/railties/test/railties/shared_tests.rb:6:in `boot_rails'
    test/railties/plugin_test.rb:60:in `block in '

&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-29T00:59:18+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: initialization initializer initializers plugins rails3
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-01-29T00:59:21+00:00</updated-at>
      <user-id type="integer">30291</user-id>
      <version type="integer">7</version>
      <user-name>Anuj Dutta</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Okay.  Here is one that definitely clears all Railties tests.  Sorry for the misfire!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Okay. Here is one that definitely clears all Railties tests.
Sorry for the misfire!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-29T02:29:11+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-01-29T02:29:18+00:00</updated-at>
      <user-id type="integer">83562</user-id>
      <version type="integer">8</version>
      <user-name>Paul Rosania</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1 
Patch applies cleanly and all railties test pass.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 Patch applies cleanly and all railties test pass.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-29T03:16:45+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-01-29T03:16:46+00:00</updated-at>
      <user-id type="integer">30291</user-id>
      <version type="integer">9</version>
      <user-name>Anuj Dutta</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I guess this one was already applied. Please tell me if I'm wrong.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I guess this one was already applied. Please tell me if I'm
wrong.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-23T21:40:11+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
:assigned_user: 12714
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-02-23T21:40:12+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">10</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>FWIW, I've found it possible to do a stable topological sort using tsort by yielding to the nodes in the order they were added. So if two nodes are equivalent, the original order will be preserved.

I had track what order things were inserted in and sort by this order in tsort_each_node *and* tsort_each_child, but otherwise it was relatively simple change.

Of course the extra sort is slightly less efficient than a pure tsort, I think that it matches most people's mental model of how dependencies should be resolved (i.e. things given equivalent weight in the sort would be processed in the order they were added).</body>
      <body-html>&lt;div&gt;&lt;p&gt;FWIW, I've found it possible to do a stable topological sort
using tsort by yielding to the nodes in the order they were added.
So if two nodes are equivalent, the original order will be
preserved.&lt;/p&gt;
&lt;p&gt;I had track what order things were inserted in and sort by this
order in tsort_each_node &lt;em&gt;and&lt;/em&gt; tsort_each_child, but
otherwise it was relatively simple change.&lt;/p&gt;
&lt;p&gt;Of course the extra sort is slightly less efficient than a pure
tsort, I think that it matches most people's mental model of how
dependencies should be resolved (i.e. things given equivalent
weight in the sort would be processed in the order they were
added).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-16T22:42:27+00:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-03-16T22:42:28+00:00</updated-at>
      <user-id type="integer">5609</user-id>
      <version type="integer">11</version>
      <user-name>Dan Kubb (dkubb)</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:41+01:00</created-at>
      <creator-id type="integer">83562</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">3788</number>
      <permalink>rails-30pre-initializers-do-not-always-bind-in-the-proper-order</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>[PATCH] Rails 3.0.pre initializers do not always bind in the proper order</title>
      <updated-at type="datetime">2010-10-15T23:01:41+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">12</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Paul Rosania</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3788</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>c2d41f54b0b38107b64c433c6141b5bb7f31c85c</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-28T21:56:50+00:00</created-at>
      <filename>initializer_tsort_v2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">394015</id>
      <size type="integer">5516</size>
      <uploader-id type="integer">83562</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/394015/initializer_tsort_v2.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>3809216d9434a740513cae11a4e7a723f407a932</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-29T02:29:11+00:00</created-at>
      <filename>initializer_tsort_v3.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">394244</id>
      <size type="integer">6082</size>
      <uploader-id type="integer">83562</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/394244/initializer_tsort_v3.diff</url>
    </attachment>
  </attachments>
</ticket>
