<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">17477</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-04T01:54:00+01:00</created-at>
  <creator-id type="integer">33222</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1167</number>
  <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
  <priority type="integer">577</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord association belongs_to foreign_key has_one_through</tag>
  <title>has_one :through using belongs_to produces incorrect SQL</title>
  <updated-at type="datetime">2009-11-13T17:23:38+00:00</updated-at>
  <user-id type="integer">17272</user-id>
  <version type="integer">13</version>
  <user-name>Matthew Vincent</user-name>
  <creator-name>John Wilger</creator-name>
  <assigned-user-name>Frederick Cheung</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Using the following model classes:

  class Foo &lt; ActiveRecord::Base
  end

  class Bar &lt; ActiveRecord::Base
    belongs_to :foo
  end

  class Baz &lt; ActiveRecord::Base
    belongs_to :bar
    has_one :foo, :through =&gt; :bar
  end

The following code:

  Baz.create.foo

will result in a SQL query with an incorrect WHERE clause and an exception similar to the following:

  ActiveRecord::StatementInvalid: SQLite3::SQLException: no such
  column: bars.bar_id: SELECT &quot;foos&quot;.* FROM &quot;foos&quot;
  INNER JOIN bars ON foos.id = bars.foo_id
  WHERE ((&quot;bars&quot;.bar_id = 1))

I'v attached a test case which proves the bug.</original-body>
  <latest-body>Using the following model classes:

  class Foo &lt; ActiveRecord::Base
  end

  class Bar &lt; ActiveRecord::Base
    belongs_to :foo
  end

  class Baz &lt; ActiveRecord::Base
    belongs_to :bar
    has_one :foo, :through =&gt; :bar
  end

The following code:

  Baz.create.foo

will result in a SQL query with an incorrect WHERE clause and an exception similar to the following:

  ActiveRecord::StatementInvalid: SQLite3::SQLException: no such
  column: bars.bar_id: SELECT &quot;foos&quot;.* FROM &quot;foos&quot;
  INNER JOIN bars ON foos.id = bars.foo_id
  WHERE ((&quot;bars&quot;.bar_id = 1))

I'v attached a test case which proves the bug.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Using the following model classes:&lt;/p&gt;
&lt;p&gt;class Foo &amp;lt; ActiveRecord::Base end&lt;/p&gt;
&lt;p&gt;class Bar &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;belongs_to :foo
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;class Baz &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;belongs_to :bar
has_one :foo, :through =&amp;gt; :bar
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;The following code:&lt;/p&gt;
&lt;p&gt;Baz.create.foo&lt;/p&gt;
&lt;p&gt;will result in a SQL query with an incorrect WHERE clause and an
exception similar to the following:&lt;/p&gt;
&lt;p&gt;ActiveRecord::StatementInvalid: SQLite3::SQLException: no such
column: bars.bar_id: SELECT &quot;foos&quot;.* FROM &quot;foos&quot; INNER JOIN bars ON
foos.id = bars.foo_id WHERE ((&quot;bars&quot;.bar_id = 1))&lt;/p&gt;
&lt;p&gt;I'v attached a test case which proves the bug.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Using the following model classes:

    class Foo &lt; ActiveRecord::Base
    end
    
    class Bar &lt; ActiveRecord::Base
      belongs_to :foo
    end
    
    class Baz &lt; ActiveRecord::Base
      belongs_to :bar
      has_one :foo, :through =&gt; :bar
    end

The following code:

    Baz.create.foo

will result in a SQL query with an incorrect WHERE clause and an exception similar to the following:

    ActiveRecord::StatementInvalid: SQLite3::SQLException: no such
    column: bars.bar_id: SELECT &quot;foos&quot;.* FROM &quot;foos&quot;
    INNER JOIN bars ON foos.id = bars.foo_id
    WHERE ((&quot;bars&quot;.bar_id = 1))

I'v attached a test case which proves the bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Using the following model classes:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Foo &amp;lt; ActiveRecord::Base
end

class Bar &amp;lt; ActiveRecord::Base
  belongs_to :foo
end

class Baz &amp;lt; ActiveRecord::Base
  belongs_to :bar
  has_one :foo, :through =&amp;gt; :bar
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The following code:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Baz.create.foo
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;will result in a SQL query with an incorrect WHERE clause and an
exception similar to the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActiveRecord::StatementInvalid: SQLite3::SQLException: no such
column: bars.bar_id: SELECT &quot;foos&quot;.* FROM &quot;foos&quot;
INNER JOIN bars ON foos.id = bars.foo_id
WHERE ((&quot;bars&quot;.bar_id = 1))
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'v attached a test case which proves the bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-04T01:54:00+01:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2008-10-04T01:55:05+01:00</updated-at>
      <user-id type="integer">33222</user-id>
      <version type="integer">1</version>
      <user-name>John Wilger</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've experienced the same issue - I will try to work on a patch this week</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've experienced the same issue - I will try to work on a patch
this week&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-02T14:44:34+00:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2008-11-02T14:44:39+00:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">2</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The root cause was that has_one through is a special case of has_many through and has many through didn't allow the through reflection to be a belongs_to.

This was fixed for 2.2 in [this commit](http://github.com/rails/rails/commit/95e1cf4812d4b964d7ab0fdf4bfa31177d27909c) which resolves the has one through issue too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The root cause was that has_one through is a special case of
has_many through and has many through didn't allow the through
reflection to be a belongs_to.&lt;/p&gt;
&lt;p&gt;This was fixed for 2.2 in &lt;a href=&quot;http://github.com/rails/rails/commit/95e1cf4812d4b964d7ab0fdf4bfa31177d27909c&quot;&gt;
this commit&lt;/a&gt; which resolves the has one through issue too.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-20T13:53:29+00:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2008-12-20T13:53:41+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-20T14:00:06+00:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2008-12-20T14:00:10+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">4</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm actually still seeing something which I believe is a result of this problem.
I have the same relationship as above:

class Foo &lt; ActiveRecord::Base
end

class Bar &lt; ActiveRecord::Base
  belongs_to :foo
end

class Bat &lt; ActiveRecord::Base
  belongs_to :bar
  has_one :foo, :through =&gt; :bar
end


(I use Bat because it's easier to pluralize than Baz)
If I call the through attribute directly, then it works:

&gt;&gt; Bat.first.foo
=&gt; #&lt;Foo id:1&gt;

But if I try to include the :foo association in any find conditions, then I get a similar error to the one above.

&gt;&gt; Bat.all(:include =&gt; :foo, :conditions =&gt; { 'foos.id' =&gt; 1 })
ActiveRecord::StatementInvalid: Mysql::Error: Unknown column 'bars.bar_id' in 'on clause': SELECT `bats`.`id` AS t0_r0, `bat`.`bar_id` AS t0_r1, `foos`.`id` AS t1_r0 FROM `bats`  LEFT OUTER JOIN `bars` ON (`bats`.`id` = `bars`.`bar_id`)  LEFT OUTER JOIN `foos` ON (`foos`.`id` = `bats`.`foo_id`) WHERE (`foos`.`id` = 1) 

It seems as though the join on condition (`bats`.`id` = `bars`.`bar_id`) has simply reversed the foreign/primary keys here.  So it should be:
`bats`.`bar_id` = `bars`.`id`
Correct?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm actually still seeing something which I believe is a result
of this problem. I have the same relationship as above:&lt;/p&gt;
&lt;p&gt;class Foo &amp;lt; ActiveRecord::Base end&lt;/p&gt;
&lt;p&gt;class Bar &amp;lt; ActiveRecord::Base belongs_to :foo end&lt;/p&gt;
&lt;p&gt;class Bat &amp;lt; ActiveRecord::Base belongs_to :bar has_one :foo,
:through =&amp;gt; :bar end&lt;/p&gt;
&lt;p&gt;(I use Bat because it's easier to pluralize than Baz) If I call
the through attribute directly, then it works:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Bat.first.foo =&amp;gt; #&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;But if I try to include the :foo association in any find
conditions, then I get a similar error to the one above.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Bat.all(:include =&amp;gt; :foo, :conditions =&amp;gt; { 'foos.id' =&amp;gt;
1 }) ActiveRecord::StatementInvalid: Mysql::Error: Unknown column
'bars.bar_id' in 'on clause': SELECT
&lt;code&gt;bats&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; AS t0_r0,
&lt;code&gt;bat&lt;/code&gt;.&lt;code&gt;bar_id&lt;/code&gt; AS t0_r1,
&lt;code&gt;foos&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; AS t1_r0 FROM &lt;code&gt;bats&lt;/code&gt;
LEFT OUTER JOIN &lt;code&gt;bars&lt;/code&gt; ON
(&lt;code&gt;bats&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;bars&lt;/code&gt;.&lt;code&gt;bar_id&lt;/code&gt;) LEFT OUTER JOIN
&lt;code&gt;foos&lt;/code&gt; ON (&lt;code&gt;foos&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;bats&lt;/code&gt;.&lt;code&gt;foo_id&lt;/code&gt;) WHERE
(&lt;code&gt;foos&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems as though the join on condition
(&lt;code&gt;bats&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; =
&lt;code&gt;bars&lt;/code&gt;.&lt;code&gt;bar_id&lt;/code&gt;) has simply reversed the
foreign/primary keys here. So it should be:
&lt;code&gt;bats&lt;/code&gt;.&lt;code&gt;bar_id&lt;/code&gt; =
&lt;code&gt;bars&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; Correct?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-02T16:01:35+00:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2009-02-02T16:01:36+00:00</updated-at>
      <user-id type="integer">27185</user-id>
      <version type="integer">5</version>
      <user-name>Glenn Powell</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>My post got chewed up, but I think you can see the gist of it</body>
      <body-html>&lt;div&gt;&lt;p&gt;My post got chewed up, but I think you can see the gist of
it&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-02T16:02:44+00:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2009-02-02T16:02:49+00:00</updated-at>
      <user-id type="integer">27185</user-id>
      <version type="integer">6</version>
      <user-name>Glenn Powell</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I can confirm that I'm experiencing the same issues as Glenn is. Where the foreign/primary keys seem reversed (or something along those lines).

Can we see this no longer marked as &quot;resolved&quot;?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can confirm that I'm experiencing the same issues as Glenn is.
Where the foreign/primary keys seem reversed (or something along
those lines).&lt;/p&gt;
&lt;p&gt;Can we see this no longer marked as &quot;resolved&quot;?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-12T21:20:45+00:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2009-02-12T21:20:51+00:00</updated-at>
      <user-id type="integer">23667</user-id>
      <version type="integer">7</version>
      <user-name>Brian Landau</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm having the same problem when I search Baz for Foos with a certain attr using a named scope defined in Baz in ActiveRecord 2.3.

Baz.with_Foo_attr(attr) yields:
ActiveRecord::StatementInvalid: PGError: ERROR:  column bars.bar_id does not exist

Baz.first.Foo works.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm having the same problem when I search Baz for Foos with a
certain attr using a named scope defined in Baz in ActiveRecord
2.3.&lt;/p&gt;
&lt;p&gt;Baz.with_Foo_attr(attr) yields: ActiveRecord::StatementInvalid:
PGError: ERROR: column bars.bar_id does not exist&lt;/p&gt;
&lt;p&gt;Baz.first.Foo works.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-24T21:24:30+01:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2009-04-24T21:24:36+01:00</updated-at>
      <user-id type="integer">38963</user-id>
      <version type="integer">8</version>
      <user-name>ronin-38963 (at lighthouseapp)</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Turns out I had my :joins statement wrong--sorry.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Turns out I had my :joins statement wrong--sorry.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-24T21:35:06+01:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2009-04-24T21:35:09+01:00</updated-at>
      <user-id type="integer">38963</user-id>
      <version type="integer">9</version>
      <user-name>ronin-38963 (at lighthouseapp)</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I can also confirm this is still an issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can also confirm this is still an issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-09-23T16:02:18+01:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2009-09-23T16:02:23+01:00</updated-at>
      <user-id type="integer">26400</user-id>
      <version type="integer">10</version>
      <user-name>Emrys Ingersoll</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've attached a patch that verifies this is fixed in 2-3-stable with a concrete test case. Please review and advise</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've attached a patch that verifies this is fixed in 2-3-stable
with a concrete test case. Please review and advise&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-10-28T22:08:28+00:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2009-10-28T22:08:31+00:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">11</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-10-28T22:08:41+00:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2009-10-28T22:08:45+00:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">12</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I am having this issue with 2.3.4, the issue isn't so much in the has_one :through a belongs_to relationship.  Using Dan's patch example, there is no issue doing membership.member_type.  However, it breaks once you do something more complex such as:

@@@ ruby
Membership.find :first, :include=&gt;:member_type, :conditions=&gt;['member_types.type = ?','VIP']
@@@

Would produce an error 

ActiveRecord::StatementInvalid: Mysql::Error: Unknown column 'members.member_id'

My specific example is as follows, and maybe I just have something incorrectly setup:

@@@ ruby
class Locus &lt; ActiveRecord::Base
  belongs_to :square
  has_many :artifacts
end

class Artifact 
  belongs_to :locus
  has_one :square, :through=&gt;:locus
end
@@@

So now if I want to find all the objects found in one excavation square, I would do the following:

@@@ ruby
Artifact.find :all, :include=&gt;:square, :conditions=&gt;['squares.code = ?','8K11']
@@@

Which instead produces the error:

ActiveRecord::StatementInvalid: Mysql::Error: Unknown column 'loci.locus_id'

Any thoughts?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am having this issue with 2.3.4, the issue isn't so much in
the has_one :through a belongs_to relationship. Using Dan's patch
example, there is no issue doing membership.member_type. However,
it breaks once you do something more complex such as:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Membership.find :first, :include=&amp;gt;:member_type, :conditions=&amp;gt;['member_types.type = ?','VIP']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Would produce an error&lt;/p&gt;
&lt;p&gt;ActiveRecord::StatementInvalid: Mysql::Error: Unknown column
'members.member_id'&lt;/p&gt;
&lt;p&gt;My specific example is as follows, and maybe I just have
something incorrectly setup:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Locus &amp;lt; ActiveRecord::Base
  belongs_to :square
  has_many :artifacts
end

class Artifact 
  belongs_to :locus
  has_one :square, :through=&amp;gt;:locus
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So now if I want to find all the objects found in one excavation
square, I would do the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Artifact.find :all, :include=&amp;gt;:square, :conditions=&amp;gt;['squares.code = ?','8K11']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which instead produces the error:&lt;/p&gt;
&lt;p&gt;ActiveRecord::StatementInvalid: Mysql::Error: Unknown column
'loci.locus_id'&lt;/p&gt;
&lt;p&gt;Any thoughts?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-13T17:23:36+00:00</created-at>
      <creator-id type="integer">33222</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1167</number>
      <permalink>has_one-through-using-belongs_to-produces-incorrect-sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord association belongs_to foreign_key has_one_through</tag>
      <title>has_one :through using belongs_to produces incorrect SQL</title>
      <updated-at type="datetime">2009-11-13T17:23:38+00:00</updated-at>
      <user-id type="integer">17272</user-id>
      <version type="integer">13</version>
      <user-name>Matthew Vincent</user-name>
      <creator-name>John Wilger</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1167</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>feab6e58101af660ff4f40eb2519f456af60fec2</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-04T01:54:00+01:00</created-at>
      <filename>0001-Added-test-case-to-prove-bug-in-has_one-through-usi.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">51198</id>
      <size type="integer">4108</size>
      <uploader-id type="integer">33222</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/51198/0001-Added-test-case-to-prove-bug-in-has_one-through-usi.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>1addda854b7e6ad23d0396b9d81a987c3375f712</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-10-28T22:08:28+00:00</created-at>
      <filename>ho_bt_through_test.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">307333</id>
      <size type="integer">1571</size>
      <uploader-id type="integer">22242</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/307333/ho_bt_through_test.patch</url>
    </attachment>
  </attachments>
</ticket>
