<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2010-11-25T07:22:05+00:00</created-at>
  <creator-id type="integer">40277</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6062</number>
  <permalink>activesupport-assumes-too-much-about-how-datedatetime-are-implemented-breaking-some-usage-with-home_run</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>active_support core_ext date datetime home_run ruby-head</tag>
  <title>ActiveSupport assumes too much about how Date/DateTime are implemented, breaking some usage with home_run</title>
  <updated-at type="datetime">2011-03-29T19:52:54+01:00</updated-at>
  <user-id type="integer">40277</user-id>
  <version type="integer">7</version>
  <user-name>Jeremy Evans</user-name>
  <creator-name>Jeremy Evans</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6062</url>
  <priority-name nil="true"></priority-name>
  <original-body>ActiveSupport assumes that DateTime inherits certain methods from Date, such as -.  This is true in the standard library (where dates are stored as datetimes), but not true in home_run.  I think ActiveSupport should be changed so that any methods that are overridden in Date should not be assumed to be automatically overridden in DateTime, so that you are sure that DateTime objects have the same behavior.  I believe that ActiveSupport overrides the following methods in Date and assumes they will be overridden in DateTime: +, -, &gt;&gt;.

Removing the methods from DateTime or defining them to call super will not work, because the behavior for DateTime could be different from Date (and is in home_run).  However, just adding the following to the DateTime core extension should work:

    class DateTime
      alias_method :plus_without_duration, :+
      alias_method :+, :plus_with_duration
      alias_method :minus_without_duration, :-
      alias_method :-, :minus_with_duration
    end

For &gt;&gt;, you should probably do something similar, like defining a new method and aliasing instead of undefing, even if you don't call the previous method.  That's less of an issue, though, as you aren't changing behavior.  You aren't going to effect home_run's DateTime class, but as it doesn't suffer from the bug you are trying to fix, it doesn't matter much.

See https://gist.github.com/714891 for a gist of the problem. See https://github.com/jeremyevans/home_run/issues/issue/20 for the issue reported on home_run's bugtracker.</original-body>
  <latest-body>ActiveSupport assumes that DateTime inherits certain methods from Date, such as -.  This is true in the standard library (where dates are stored as datetimes), but not true in home_run.  I think ActiveSupport should be changed so that any methods that are overridden in Date should not be assumed to be automatically overridden in DateTime, so that you are sure that DateTime objects have the same behavior.  I believe that ActiveSupport overrides the following methods in Date and assumes they will be overridden in DateTime: +, -, &gt;&gt;.

Removing the methods from DateTime or defining them to call super will not work, because the behavior for DateTime could be different from Date (and is in home_run).  However, just adding the following to the DateTime core extension should work:

    class DateTime
      alias_method :plus_without_duration, :+
      alias_method :+, :plus_with_duration
      alias_method :minus_without_duration, :-
      alias_method :-, :minus_with_duration
    end

For &gt;&gt;, you should probably do something similar, like defining a new method and aliasing instead of undefing, even if you don't call the previous method.  That's less of an issue, though, as you aren't changing behavior.  You aren't going to effect home_run's DateTime class, but as it doesn't suffer from the bug you are trying to fix, it doesn't matter much.

See https://gist.github.com/714891 for a gist of the problem. See https://github.com/jeremyevans/home_run/issues/issue/20 for the issue reported on home_run's bugtracker.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActiveSupport assumes that DateTime inherits certain methods
from Date, such as -. This is true in the standard library (where
dates are stored as datetimes), but not true in home_run. I think
ActiveSupport should be changed so that any methods that are
overridden in Date should not be assumed to be automatically
overridden in DateTime, so that you are sure that DateTime objects
have the same behavior. I believe that ActiveSupport overrides the
following methods in Date and assumes they will be overridden in
DateTime: +, -, &amp;gt;&amp;gt;.&lt;/p&gt;
&lt;p&gt;Removing the methods from DateTime or defining them to call
super will not work, because the behavior for DateTime could be
different from Date (and is in home_run). However, just adding the
following to the DateTime core extension should work:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class DateTime
  alias_method :plus_without_duration, :+
  alias_method :+, :plus_with_duration
  alias_method :minus_without_duration, :-
  alias_method :-, :minus_with_duration
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For &amp;gt;&amp;gt;, you should probably do something similar, like
defining a new method and aliasing instead of undefing, even if you
don't call the previous method. That's less of an issue, though, as
you aren't changing behavior. You aren't going to effect home_run's
DateTime class, but as it doesn't suffer from the bug you are
trying to fix, it doesn't matter much.&lt;/p&gt;
&lt;p&gt;See &lt;a href=
&quot;https://gist.github.com/714891&quot;&gt;https://gist.github.com/714891&lt;/a&gt;
for a gist of the problem. See &lt;a href=
&quot;https://github.com/jeremyevans/home_run/issues/issue/20&quot;&gt;https://github.com/jeremyevans/home_run/issues/issue/20&lt;/a&gt;
for the issue reported on home_run's bugtracker.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveSupport assumes that DateTime inherits certain methods from Date, such as -.  This is true in the standard library (where dates are stored as datetimes), but not true in home_run.  I think ActiveSupport should be changed so that any methods that are overridden in Date should not be assumed to be automatically overridden in DateTime, so that you are sure that DateTime objects have the same behavior.  I believe that ActiveSupport overrides the following methods in Date and assumes they will be overridden in DateTime: +, -, &gt;&gt;.

Removing the methods from DateTime or defining them to call super will not work, because the behavior for DateTime could be different from Date (and is in home_run).  However, just adding the following to the DateTime core extension should work:

    class DateTime
      alias_method :plus_without_duration, :+
      alias_method :+, :plus_with_duration
      alias_method :minus_without_duration, :-
      alias_method :-, :minus_with_duration
    end

For &gt;&gt;, you should probably do something similar, like defining a new method and aliasing instead of undefing, even if you don't call the previous method.  That's less of an issue, though, as you aren't changing behavior.  You aren't going to effect home_run's DateTime class, but as it doesn't suffer from the bug you are trying to fix, it doesn't matter much.

See https://gist.github.com/714891 for a gist of the problem. See https://github.com/jeremyevans/home_run/issues/issue/20 for the issue reported on home_run's bugtracker.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveSupport assumes that DateTime inherits certain methods
from Date, such as -. This is true in the standard library (where
dates are stored as datetimes), but not true in home_run. I think
ActiveSupport should be changed so that any methods that are
overridden in Date should not be assumed to be automatically
overridden in DateTime, so that you are sure that DateTime objects
have the same behavior. I believe that ActiveSupport overrides the
following methods in Date and assumes they will be overridden in
DateTime: +, -, &amp;gt;&amp;gt;.&lt;/p&gt;
&lt;p&gt;Removing the methods from DateTime or defining them to call
super will not work, because the behavior for DateTime could be
different from Date (and is in home_run). However, just adding the
following to the DateTime core extension should work:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class DateTime
  alias_method :plus_without_duration, :+
  alias_method :+, :plus_with_duration
  alias_method :minus_without_duration, :-
  alias_method :-, :minus_with_duration
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For &amp;gt;&amp;gt;, you should probably do something similar, like
defining a new method and aliasing instead of undefing, even if you
don't call the previous method. That's less of an issue, though, as
you aren't changing behavior. You aren't going to effect home_run's
DateTime class, but as it doesn't suffer from the bug you are
trying to fix, it doesn't matter much.&lt;/p&gt;
&lt;p&gt;See &lt;a href=
&quot;https://gist.github.com/714891&quot;&gt;https://gist.github.com/714891&lt;/a&gt;
for a gist of the problem. See &lt;a href=
&quot;https://github.com/jeremyevans/home_run/issues/issue/20&quot;&gt;https://github.com/jeremyevans/home_run/issues/issue/20&lt;/a&gt;
for the issue reported on home_run's bugtracker.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-25T07:22:05+00:00</created-at>
      <creator-id type="integer">40277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6062</number>
      <permalink>activesupport-assumes-too-much-about-how-datedatetime-are-implemented-breaking-some-usage-with-home_run</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;date datetime home_run core_ext active_support&quot;</tag>
      <title>ActiveSupport assumes too much about how Date/DateTime are implemented, breaking some usage with home_run</title>
      <updated-at type="datetime">2010-11-25T07:22:07+00:00</updated-at>
      <user-id type="integer">40277</user-id>
      <version type="integer">1</version>
      <user-name>Jeremy Evans</user-name>
      <creator-name>Jeremy Evans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6062</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm attaching a tested patch that fixes DateTime#+ and DateTime#- to work both with and without home_run, including some new tests for it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm attaching a tested patch that fixes DateTime#+ and
DateTime#- to work both with and without home_run, including some
new tests for it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-25T17:43:15+00:00</created-at>
      <creator-id type="integer">40277</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;date datetime home_run core_ext active_support\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6062</number>
      <permalink>activesupport-assumes-too-much-about-how-datedatetime-are-implemented-breaking-some-usage-with-home_run</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_support core_ext date datetime home_run</tag>
      <title>ActiveSupport assumes too much about how Date/DateTime are implemented, breaking some usage with home_run</title>
      <updated-at type="datetime">2010-11-25T17:43:18+00:00</updated-at>
      <user-id type="integer">40277</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Evans</user-name>
      <creator-name>Jeremy Evans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6062</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-26T00:00:07+00:00</created-at>
      <creator-id type="integer">40277</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6062</number>
      <permalink>activesupport-assumes-too-much-about-how-datedatetime-are-implemented-breaking-some-usage-with-home_run</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>active_support core_ext date datetime home_run</tag>
      <title>ActiveSupport assumes too much about how Date/DateTime are implemented, breaking some usage with home_run</title>
      <updated-at type="datetime">2011-02-26T00:00:15+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Jeremy Evans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6062</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-26T00:00:08+00:00</created-at>
      <creator-id type="integer">40277</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6062</number>
      <permalink>activesupport-assumes-too-much-about-how-datedatetime-are-implemented-breaking-some-usage-with-home_run</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>active_support core_ext date datetime home_run</tag>
      <title>ActiveSupport assumes too much about how Date/DateTime are implemented, breaking some usage with home_run</title>
      <updated-at type="datetime">2011-02-26T00:03:32+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">4</version>
      <user-name>rails</user-name>
      <creator-name>Jeremy Evans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6062</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[state:open] This still hasn't been fixed, and the patch probably still applies.  While it currently only affects people that use home_run, as soon as tadf (ruby core member) merges his switch_hitter patch (replacing the standard date/datetime library with a C extension, see http://redmine.ruby-lang.org/issues/show/4257), this is going to start breaking on ruby-head, so you are going to have to fix it sooner or later.</body>
      <body-html>&lt;div&gt;&lt;p&gt;[state:open] This still hasn't been fixed, and the patch
probably still applies. While it currently only affects people that
use home_run, as soon as tadf (ruby core member) merges his
switch_hitter patch (replacing the standard date/datetime library
with a C extension, see &lt;a href=
&quot;http://redmine.ruby-lang.org/issues/show/4257)&quot;&gt;http://redmine.ruby-lang.org/issues/show/4257)&lt;/a&gt;,
this is going to start breaking on ruby-head, so you are going to
have to fix it sooner or later.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-26T02:48:27+00:00</created-at>
      <creator-id type="integer">40277</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6062</number>
      <permalink>activesupport-assumes-too-much-about-how-datedatetime-are-implemented-breaking-some-usage-with-home_run</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>active_support core_ext date datetime home_run</tag>
      <title>ActiveSupport assumes too much about how Date/DateTime are implemented, breaking some usage with home_run</title>
      <updated-at type="datetime">2011-02-26T02:48:30+00:00</updated-at>
      <user-id type="integer">40277</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Evans</user-name>
      <creator-name>Jeremy Evans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6062</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This currently affects ruby-head even without home_run, since tadf merged his switch_hitter patch:

    $ gem list | grep active
    activesupport (3.0.5)
    $ ruby -v -r date -ractive_support/all -e 'p(DateTime::parse(&quot;January 1 1943&quot;) + 1.year)'
    ruby 1.9.3dev (2011-02-28 trunk 30975) [x86_64-openbsd4.9]
    /home/jeremy/.rvm/rubies/ruby-head/lib/ruby/1.9.1/date.rb:1358:in `plus_r': expected numeric (TypeError)
            from -e:1:in `+'
            from -e:1:in `&lt;main&gt;'</body>
      <body-html>&lt;div&gt;&lt;p&gt;This currently affects ruby-head even without home_run, since
tadf merged his switch_hitter patch:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ gem list | grep active
activesupport (3.0.5)
$ ruby -v -r date -ractive_support/all -e 'p(DateTime::parse(&quot;January 1 1943&quot;) + 1.year)'
ruby 1.9.3dev (2011-02-28 trunk 30975) [x86_64-openbsd4.9]
/home/jeremy/.rvm/rubies/ruby-head/lib/ruby/1.9.1/date.rb:1358:in `plus_r': expected numeric (TypeError)
        from -e:1:in `+'
        from -e:1:in `&amp;lt;main&amp;gt;'&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-29T19:45:51+01:00</created-at>
      <creator-id type="integer">40277</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: active_support core_ext date datetime home_run
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6062</number>
      <permalink>activesupport-assumes-too-much-about-how-datedatetime-are-implemented-breaking-some-usage-with-home_run</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>active_support core_ext date datetime home_run ruby-head</tag>
      <title>ActiveSupport assumes too much about how Date/DateTime are implemented, breaking some usage with home_run</title>
      <updated-at type="datetime">2011-03-29T19:45:54+01:00</updated-at>
      <user-id type="integer">40277</user-id>
      <version type="integer">6</version>
      <user-name>Jeremy Evans</user-name>
      <creator-name>Jeremy Evans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6062</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Looks like tenderlove fixed this earlier this month (https://github.com/rails/rails/commit/33f222b9e1b20aa6264084ec2c8c3206e1c2d598), but didn't merge it into the stable branch.  Could this be merged to 3-0-stable so it makes 3.0.6?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks like tenderlove fixed this earlier this month (&lt;a href=
&quot;https://github.com/rails/rails/commit/33f222b9e1b20aa6264084ec2c8c3206e1c2d598)&quot;&gt;https://github.com/rails/rails/commit/33f222b9e1b20aa6264084ec2c8c3...&lt;/a&gt;,
but didn't merge it into the stable branch. Could this be merged to
3-0-stable so it makes 3.0.6?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-29T19:52:33+01:00</created-at>
      <creator-id type="integer">40277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6062</number>
      <permalink>activesupport-assumes-too-much-about-how-datedatetime-are-implemented-breaking-some-usage-with-home_run</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>active_support core_ext date datetime home_run ruby-head</tag>
      <title>ActiveSupport assumes too much about how Date/DateTime are implemented, breaking some usage with home_run</title>
      <updated-at type="datetime">2011-03-29T19:52:54+01:00</updated-at>
      <user-id type="integer">40277</user-id>
      <version type="integer">7</version>
      <user-name>Jeremy Evans</user-name>
      <creator-name>Jeremy Evans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6062</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>cd825216749ca15f68d2c8dcf4c0fec5f9907fb0</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-11-25T17:43:16+00:00</created-at>
      <filename>active_support_datetime_plus_minus_fix.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">790007</id>
      <size type="integer">2406</size>
      <uploader-id type="integer">40277</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/790007/active_support_datetime_plus_minus_fix.patch</url>
    </attachment>
  </attachments>
</ticket>
