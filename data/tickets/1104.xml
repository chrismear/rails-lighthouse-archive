<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-24T17:00:48+01:00</created-at>
  <creator-id type="integer">25962</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1104</number>
  <permalink>references_eager_loaded_tables-should-search-tables-in-join-clauses</permalink>
  <priority type="integer">523</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>activerecord include joins</tag>
  <title>references_eager_loaded_tables? should search tables in :join clauses</title>
  <updated-at type="datetime">2008-12-17T16:00:05+00:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">7</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>David Stevenson</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1104</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When deciding whether to use the new-include-syntax or the old-include-syntax, activerecord searches :select, :order, and :conditions clauses for tables that are != to the base finder's table name.  If there are any matches, it falls back to the old style.

This should be updated to ignore tables found in :join clauses.  Without this update, the old include syntax fallback will happen more conservatively than it needs to.  

We are experiencing this so often that we've hard coded references_eager_loaded_tables? to always return false so we're always using the new style.  Of course, that would break lots of stuff, so this is a good compromise.

Patch to follow.

David Stevenson &amp; Joseph Palermo 
Pivotal Labs</original-body>
  <latest-body>When deciding whether to use the new-include-syntax or the old-include-syntax, activerecord searches :select, :order, and :conditions clauses for tables that are != to the base finder's table name.  If there are any matches, it falls back to the old style.

This should be updated to ignore tables found in :join clauses.  Without this update, the old include syntax fallback will happen more conservatively than it needs to.  

We are experiencing this so often that we've hard coded references_eager_loaded_tables? to always return false so we're always using the new style.  Of course, that would break lots of stuff, so this is a good compromise.

Patch to follow.

David Stevenson &amp; Joseph Palermo 
Pivotal Labs</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When deciding whether to use the new-include-syntax or the
old-include-syntax, activerecord searches :select, :order, and
:conditions clauses for tables that are != to the base finder's
table name. If there are any matches, it falls back to the old
style.&lt;/p&gt;
&lt;p&gt;This should be updated to ignore tables found in :join clauses.
Without this update, the old include syntax fallback will happen
more conservatively than it needs to.&lt;/p&gt;
&lt;p&gt;We are experiencing this so often that we've hard coded
references_eager_loaded_tables? to always return false so we're
always using the new style. Of course, that would break lots of
stuff, so this is a good compromise.&lt;/p&gt;
&lt;p&gt;Patch to follow.&lt;/p&gt;
&lt;p&gt;David Stevenson &amp;amp; Joseph Palermo Pivotal Labs&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When deciding whether to use the new-include-syntax or the old-include-syntax, activerecord searches :select, :order, and :conditions clauses for tables that are != to the base finder's table name.  If there are any matches, it falls back to the old style.

This should be updated to ignore tables found in :join clauses.  Without this update, the old include syntax fallback will happen more conservatively than it needs to.  

We are experiencing this so often that we've hard coded references_eager_loaded_tables? to always return false so we're always using the new style.  Of course, that would break lots of stuff, so this is a good compromise.

Patch to follow.

David Stevenson &amp; Joseph Palermo 
(Pivotal Labs)</body>
      <body-html>&lt;div&gt;&lt;p&gt;When deciding whether to use the new-include-syntax or the
old-include-syntax, activerecord searches :select, :order, and
:conditions clauses for tables that are != to the base finder's
table name. If there are any matches, it falls back to the old
style.&lt;/p&gt;
&lt;p&gt;This should be updated to ignore tables found in :join clauses.
Without this update, the old include syntax fallback will happen
more conservatively than it needs to.&lt;/p&gt;
&lt;p&gt;We are experiencing this so often that we've hard coded
references_eager_loaded_tables? to always return false so we're
always using the new style. Of course, that would break lots of
stuff, so this is a good compromise.&lt;/p&gt;
&lt;p&gt;Patch to follow.&lt;/p&gt;
&lt;p&gt;David Stevenson &amp;amp; Joseph Palermo (Pivotal Labs)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-24T17:00:48+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1104</number>
      <permalink>references_eager_loaded_tables-should-search-tables-in-join-clauses</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord include joins</tag>
      <title>references_eager_loaded_tables? should search tables in :join clauses</title>
      <updated-at type="datetime">2008-09-24T17:17:36+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">1</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1104</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This looks juicy :-) With 2.2RC1 around the corner, would be great to see the patch!</body>
      <body-html>&lt;div&gt;&lt;p&gt;This looks juicy :-) With 2.2RC1 around the corner, would be
great to see the patch!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-07T00:01:27+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1104</number>
      <permalink>references_eager_loaded_tables-should-search-tables-in-join-clauses</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord include joins</tag>
      <title>references_eager_loaded_tables? should search tables in :join clauses</title>
      <updated-at type="datetime">2008-10-07T00:01:31+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">2</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1104</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>So... this is actually hard.  It's not easy to write a REGEX that works to find all the joined in tables from a string.  It's not as easy as looking for TABLE_NAME.FIELD_NAME like rails does for everything else.  

Joseph and I have since disabled pre-2.1 style includes across our app.  This turned out to be better for us than making rails &quot;guess&quot; better at which style of includes to use.  

More and more, people will be switching away from old includes for performance reasons, so I think the better approach here might be to provide a global configuration on ActiveRecord to disable single-query includes.  Naturally, it won't work for every query, but anyone who cares about performance will be optimizing all their queries to work anyway.  Without the ability to disable these old-style includes completely, you're always going to be stuck trying to trick rails into believing that your query is safe.  No matter how good we make the guessing system, there will always be incorrect guesses, so let's solve this problem at the core.</body>
      <body-html>&lt;div&gt;&lt;p&gt;So... this is actually hard. It's not easy to write a REGEX that
works to find all the joined in tables from a string. It's not as
easy as looking for TABLE_NAME.FIELD_NAME like rails does for
everything else.&lt;/p&gt;
&lt;p&gt;Joseph and I have since disabled pre-2.1 style includes across
our app. This turned out to be better for us than making rails
&quot;guess&quot; better at which style of includes to use.&lt;/p&gt;
&lt;p&gt;More and more, people will be switching away from old includes
for performance reasons, so I think the better approach here might
be to provide a global configuration on ActiveRecord to disable
single-query includes. Naturally, it won't work for every query,
but anyone who cares about performance will be optimizing all their
queries to work anyway. Without the ability to disable these
old-style includes completely, you're always going to be stuck
trying to trick rails into believing that your query is safe. No
matter how good we make the guessing system, there will always be
incorrect guesses, so let's solve this problem at the core.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-07T02:40:06+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1104</number>
      <permalink>references_eager_loaded_tables-should-search-tables-in-join-clauses</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord include joins</tag>
      <title>references_eager_loaded_tables? should search tables in :join clauses</title>
      <updated-at type="datetime">2008-10-07T02:40:10+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">3</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1104</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Opened this ticket instead:

http://rails.lighthouseapp.com/projects/8994/tickets/1185-old-single-query-includes-should-be-globally-disableable</body>
      <body-html>&lt;div&gt;&lt;p&gt;Opened this ticket instead:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/1185-old-single-query-includes-should-be-globally-disableable&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-09T16:51:20+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1104</number>
      <permalink>references_eager_loaded_tables-should-search-tables-in-join-clauses</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord include joins</tag>
      <title>references_eager_loaded_tables? should search tables in :join clauses</title>
      <updated-at type="datetime">2008-10-09T16:51:24+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">4</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1104</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>What do you mean by &quot;new include syntax&quot; versus the &quot;old include syntax&quot; ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;What do you mean by &quot;new include syntax&quot; versus the &quot;old include
syntax&quot; ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-17T05:04:58+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1104</number>
      <permalink>references_eager_loaded_tables-should-search-tables-in-join-clauses</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord include joins</tag>
      <title>references_eager_loaded_tables? should search tables in :join clauses</title>
      <updated-at type="datetime">2008-10-17T05:05:02+01:00</updated-at>
      <user-id type="integer">3825</user-id>
      <version type="integer">5</version>
      <user-name>Rob Sanheim</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1104</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry - new include syntax is not a syntax but an implementation.  It's the process of preloading associations using a separate query for each level of the include chain.  

The old include &quot;syntax&quot; created a single query to prefetch all the associated data.  This was usually slower, but allowed you to use conditions on tables in the include chain.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry - new include syntax is not a syntax but an
implementation. It's the process of preloading associations using a
separate query for each level of the include chain.&lt;/p&gt;
&lt;p&gt;The old include &quot;syntax&quot; created a single query to prefetch all
the associated data. This was usually slower, but allowed you to
use conditions on tables in the include chain.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-17T06:12:35+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1104</number>
      <permalink>references_eager_loaded_tables-should-search-tables-in-join-clauses</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord include joins</tag>
      <title>references_eager_loaded_tables? should search tables in :join clauses</title>
      <updated-at type="datetime">2008-10-17T06:12:40+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">6</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1104</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>#528 is all about this (and has patches too)</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;/projects/8994/tickets/528&quot; title=&quot;Ticket #528&quot;&gt;#528&lt;/a&gt; is all about this (and has patches too)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-17T16:00:04+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1104</number>
      <permalink>references_eager_loaded_tables-should-search-tables-in-join-clauses</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>activerecord include joins</tag>
      <title>references_eager_loaded_tables? should search tables in :join clauses</title>
      <updated-at type="datetime">2008-12-17T16:00:05+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">7</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>David Stevenson</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1104</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
