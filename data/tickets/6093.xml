<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">11378</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-30T18:37:34+00:00</created-at>
  <creator-id type="integer">27540</creator-id>
  <milestone-due-on type="datetime">2011-02-27T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">101623</milestone-id>
  <number type="integer">6093</number>
  <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activesupport bug patch</tag>
  <title>[PATCH] Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
  <updated-at type="datetime">2011-02-12T21:58:23+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">12</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>John Paul Ashenfelter</creator-name>
  <assigned-user-name>Xavier Noria</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
  <milestone-title>3.0.5</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>I have an model named &quot;ors&quot; which is both singular and plural (e.g. it's uncountable)

@@@
ActiveSupport::Inflector.inflections do |inflect|
  inflect.uncountable %w( ors )
end
@@@

The inflector works beautifully

@@@
&quot;ors&quot;.pluralize =&gt; &quot;ors&quot;
&quot;ors&quot;.singularize =&gt; &quot;ors&quot;
&quot;ors&quot;.pluralize.singularize =&gt; &quot;ors&quot;
@@@

Then I add some scaffolding for my Sponsor model and everything goes crazy with the tests -- long story short the pluralization/singularization is not right. I try the same inflecting:

@@@
&quot;sponsor&quot;.pluralize =&gt; &quot;sponsors&quot;
&quot;sponsors&quot;.singularize =&gt; &quot;sponsors&quot;
&quot;sponsor&quot;.pluralize.singularize =&gt; &quot;sponsors&quot;
@@@

After some WTF time, I try a clean Rails3 project and &quot;sponsors&quot;.singularize =&gt; &quot;sponsor&quot; as expected, so I realize it might be the &quot;ors&quot; inflection. I add the uncountable &quot;ors&quot; inflection to the clean Rails3 project and get the problematic &quot;sponsors&quot; singular inflection. I remove it, problem stops. I verify it with &quot;razors&quot; to make sure I'm not crazy:

@@@
&quot;razor&quot;.pluralize =&gt; &quot;razors&quot;
&quot;razors&quot;.singularize =&gt; &quot;razors&quot;
&quot;razor&quot;.pluralize.singularize =&gt; &quot;razors&quot;
@@@

I'm going to assume this was *not* the intended behavior but I know there's lots of back and forth discussion on inflections and lack of interest in changing them. The core problem for me here was that setting an uncountable inflection had the side effect of changing a number of other inflections (sponsor, donor, razor). The reason I think it's a bug is that it's not reflexive -- &quot;string&quot;.pluralize.singularize == &quot;string&quot; IMHO. 

The problem is in #singularize on line 151 of https://github.com/rails/rails/blob/4eab983b955fe17cf02c6fe96cab1c8a309cd606/activesupport/lib/active_support/inflector/inflections.rb

@@@
151 if inflections.uncountables.any? { |inflection| result =~ /#{inflection}\Z/i }
@@@

The matching #pluralize is specific

@@@
132 if word.empty? || inflections.uncountables.include?(result.downcase)
@@@

For what it's worth, I couldn't get &quot;ors&quot; to work as an irregular either since that generates ending/suffix matches instead of word matches.

I looked at the tests in ActiveSupport::Inflections and it's also silent on the details of irregular words:

jeans =&gt; jeans
funky jeans =&gt; funky jeans
bluejeans =&gt; ... (it's not there to settle the issue)

If the intention is matching the ending *fragment*, as #singularize is currently written, then

bluejeans =&gt; bluejeans
sponsors =&gt; sponsors

given inflect.uncountables = %w( jeans ors)

This is definitely broken for the word &quot;sponsors&quot; since there is a singular that's different.

If instead, the intention is the *word*, as &quot;funky jeans&quot; suggests, then adding a word boundary to the regex fixes &quot;sponsors&quot; and retains &quot;funky jeans&quot;. But it breaks &quot;bluejeans&quot;

It seems like I'm making a big deal, bit the key thing for me is that I can't use &quot;ors&quot; as an @uncountable without breaking things and I can't use it as an irregular because the singular and plurals generated from that match and word containing /or(s)/. Right now, my only solution other than refactoring the name of the object is to manually set the singular and plural

@@@
inflect.plural /^(ors)$/i, '\1'
inflect.singular /^(ors)$/i, '\1'
@@@

I would have thought that was what uncountable was supposed to do.</original-body>
  <latest-body>I have an model named &quot;ors&quot; which is both singular and plural (e.g. it's uncountable)

@@@
ActiveSupport::Inflector.inflections do |inflect|
  inflect.uncountable %w( ors )
end
@@@

The inflector works beautifully

@@@
&quot;ors&quot;.pluralize =&gt; &quot;ors&quot;
&quot;ors&quot;.singularize =&gt; &quot;ors&quot;
&quot;ors&quot;.pluralize.singularize =&gt; &quot;ors&quot;
@@@

Then I add some scaffolding for my Sponsor model and everything goes crazy with the tests -- long story short the pluralization/singularization is not right. I try the same inflecting:

@@@
&quot;sponsor&quot;.pluralize =&gt; &quot;sponsors&quot;
&quot;sponsors&quot;.singularize =&gt; &quot;sponsors&quot;
&quot;sponsor&quot;.pluralize.singularize =&gt; &quot;sponsors&quot;
@@@

After some WTF time, I try a clean Rails3 project and &quot;sponsors&quot;.singularize =&gt; &quot;sponsor&quot; as expected, so I realize it might be the &quot;ors&quot; inflection. I add the uncountable &quot;ors&quot; inflection to the clean Rails3 project and get the problematic &quot;sponsors&quot; singular inflection. I remove it, problem stops. I verify it with &quot;razors&quot; to make sure I'm not crazy:

@@@
&quot;razor&quot;.pluralize =&gt; &quot;razors&quot;
&quot;razors&quot;.singularize =&gt; &quot;razors&quot;
&quot;razor&quot;.pluralize.singularize =&gt; &quot;razors&quot;
@@@

I'm going to assume this was *not* the intended behavior but I know there's lots of back and forth discussion on inflections and lack of interest in changing them. The core problem for me here was that setting an uncountable inflection had the side effect of changing a number of other inflections (sponsor, donor, razor). The reason I think it's a bug is that it's not reflexive -- &quot;string&quot;.pluralize.singularize == &quot;string&quot; IMHO. 

The problem is in #singularize on line 151 of https://github.com/rails/rails/blob/4eab983b955fe17cf02c6fe96cab1c8a309cd606/activesupport/lib/active_support/inflector/inflections.rb

@@@
151 if inflections.uncountables.any? { |inflection| result =~ /#{inflection}\Z/i }
@@@

The matching #pluralize is specific

@@@
132 if word.empty? || inflections.uncountables.include?(result.downcase)
@@@

For what it's worth, I couldn't get &quot;ors&quot; to work as an irregular either since that generates ending/suffix matches instead of word matches.

I looked at the tests in ActiveSupport::Inflections and it's also silent on the details of irregular words:

jeans =&gt; jeans
funky jeans =&gt; funky jeans
bluejeans =&gt; ... (it's not there to settle the issue)

If the intention is matching the ending *fragment*, as #singularize is currently written, then

bluejeans =&gt; bluejeans
sponsors =&gt; sponsors

given inflect.uncountables = %w( jeans ors)

This is definitely broken for the word &quot;sponsors&quot; since there is a singular that's different.

If instead, the intention is the *word*, as &quot;funky jeans&quot; suggests, then adding a word boundary to the regex fixes &quot;sponsors&quot; and retains &quot;funky jeans&quot;. But it breaks &quot;bluejeans&quot;

It seems like I'm making a big deal, bit the key thing for me is that I can't use &quot;ors&quot; as an @uncountable without breaking things and I can't use it as an irregular because the singular and plurals generated from that match and word containing /or(s)/. Right now, my only solution other than refactoring the name of the object is to manually set the singular and plural

@@@
inflect.plural /^(ors)$/i, '\1'
inflect.singular /^(ors)$/i, '\1'
@@@

I would have thought that was what uncountable was supposed to do.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have an model named &quot;ors&quot; which is both singular and plural
(e.g. it's uncountable)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActiveSupport::Inflector.inflections do |inflect|
  inflect.uncountable %w( ors )
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The inflector works beautifully&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;ors&quot;.pluralize =&amp;gt; &quot;ors&quot;
&quot;ors&quot;.singularize =&amp;gt; &quot;ors&quot;
&quot;ors&quot;.pluralize.singularize =&amp;gt; &quot;ors&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then I add some scaffolding for my Sponsor model and everything
goes crazy with the tests -- long story short the
pluralization/singularization is not right. I try the same
inflecting:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;sponsor&quot;.pluralize =&amp;gt; &quot;sponsors&quot;
&quot;sponsors&quot;.singularize =&amp;gt; &quot;sponsors&quot;
&quot;sponsor&quot;.pluralize.singularize =&amp;gt; &quot;sponsors&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After some WTF time, I try a clean Rails3 project and
&quot;sponsors&quot;.singularize =&amp;gt; &quot;sponsor&quot; as expected, so I realize it
might be the &quot;ors&quot; inflection. I add the uncountable &quot;ors&quot;
inflection to the clean Rails3 project and get the problematic
&quot;sponsors&quot; singular inflection. I remove it, problem stops. I
verify it with &quot;razors&quot; to make sure I'm not crazy:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;razor&quot;.pluralize =&amp;gt; &quot;razors&quot;
&quot;razors&quot;.singularize =&amp;gt; &quot;razors&quot;
&quot;razor&quot;.pluralize.singularize =&amp;gt; &quot;razors&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm going to assume this was &lt;em&gt;not&lt;/em&gt; the intended behavior
but I know there's lots of back and forth discussion on inflections
and lack of interest in changing them. The core problem for me here
was that setting an uncountable inflection had the side effect of
changing a number of other inflections (sponsor, donor, razor). The
reason I think it's a bug is that it's not reflexive --
&quot;string&quot;.pluralize.singularize == &quot;string&quot; IMHO.&lt;/p&gt;
&lt;p&gt;The problem is in #singularize on line 151 of &lt;a href=
&quot;https://github.com/rails/rails/blob/4eab983b955fe17cf02c6fe96cab1c8a309cd606/activesupport/lib/active_support/inflector/inflections.rb&quot;&gt;
https://github.com/rails/rails/blob/4eab983b955fe17cf02c6fe96cab1c8...&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;151 if inflections.uncountables.any? { |inflection| result =~ /#{inflection}\Z/i }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The matching #pluralize is specific&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;132 if word.empty? || inflections.uncountables.include?(result.downcase)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For what it's worth, I couldn't get &quot;ors&quot; to work as an
irregular either since that generates ending/suffix matches instead
of word matches.&lt;/p&gt;
&lt;p&gt;I looked at the tests in ActiveSupport::Inflections and it's
also silent on the details of irregular words:&lt;/p&gt;
&lt;p&gt;jeans =&amp;gt; jeans&lt;br&gt;
funky jeans =&amp;gt; funky jeans&lt;br&gt;
bluejeans =&amp;gt; ... (it's not there to settle the issue)&lt;/p&gt;
&lt;p&gt;If the intention is matching the ending &lt;em&gt;fragment&lt;/em&gt;, as
#singularize is currently written, then&lt;/p&gt;
&lt;p&gt;bluejeans =&amp;gt; bluejeans&lt;br&gt;
sponsors =&amp;gt; sponsors&lt;/p&gt;
&lt;p&gt;given inflect.uncountables = %w( jeans ors)&lt;/p&gt;
&lt;p&gt;This is definitely broken for the word &quot;sponsors&quot; since there is
a singular that's different.&lt;/p&gt;
&lt;p&gt;If instead, the intention is the &lt;em&gt;word&lt;/em&gt;, as &quot;funky jeans&quot;
suggests, then adding a word boundary to the regex fixes &quot;sponsors&quot;
and retains &quot;funky jeans&quot;. But it breaks &quot;bluejeans&quot;&lt;/p&gt;
&lt;p&gt;It seems like I'm making a big deal, bit the key thing for me is
that I can't use &quot;ors&quot; as an @uncountable without breaking things
and I can't use it as an irregular because the singular and plurals
generated from that match and word containing /or(s)/. Right now,
my only solution other than refactoring the name of the object is
to manually set the singular and plural&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;inflect.plural /^(ors)$/i, '\1'
inflect.singular /^(ors)$/i, '\1'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I would have thought that was what uncountable was supposed to
do.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have an model named &quot;ors&quot; which is both singular and plural (e.g. it's uncountable)

@@@
ActiveSupport::Inflector.inflections do |inflect|
  inflect.uncountable %w( ors )
end
@@@

The inflector works beautifully

@@@
&quot;ors&quot;.pluralize =&gt; &quot;ors&quot;
&quot;ors&quot;.singularize =&gt; &quot;ors&quot;
&quot;ors&quot;.pluralize.singularize =&gt; &quot;ors&quot;
@@@

Then I add some scaffolding for my Sponsor model and everything goes crazy with the tests -- long story short the pluralization/singularization is not right. I try the same inflecting:

@@@
&quot;sponsor&quot;.pluralize =&gt; &quot;sponsors&quot;
&quot;sponsors&quot;.singularize =&gt; &quot;sponsors&quot;
&quot;sponsor&quot;.pluralize.singularize =&gt; &quot;sponsors&quot;
@@@

After some WTF time, I try a clean Rails3 project and &quot;sponsors&quot;.singularize =&gt; &quot;sponsor&quot; as expected, so I realize it might be the &quot;ors&quot; inflection. I add the uncountable &quot;ors&quot; inflection to the clean Rails3 project and get the problematic &quot;sponsors&quot; singular inflection. I remove it, problem stops. I verify it with &quot;razors&quot; to make sure I'm not crazy:

@@@
&quot;razor&quot;.pluralize =&gt; &quot;razors&quot;
&quot;razors&quot;.singularize =&gt; &quot;razors&quot;
&quot;razor&quot;.pluralize.singularize =&gt; &quot;razors&quot;
@@@

I'm going to assume this was *not* the intended behavior but I know there's lots of back and forth discussion on inflections and lack of interest in changing them. The core problem for me here was that setting an uncountable inflection had the side effect of changing a number of other inflections (sponsor, donor, razor). The reason I think it's a bug is that it's not reflexive -- &quot;string&quot;.pluralize.singularize == &quot;string&quot; IMHO. 

The problem is in #singularize on line 151 of https://github.com/rails/rails/blob/4eab983b955fe17cf02c6fe96cab1c8a309cd606/activesupport/lib/active_support/inflector/inflections.rb

@@@
151 if inflections.uncountables.any? { |inflection| result =~ /#{inflection}\Z/i }
@@@

The matching #pluralize is specific

@@@
132 if word.empty? || inflections.uncountables.include?(result.downcase)
@@@

For what it's worth, I couldn't get &quot;ors&quot; to work as an irregular either since that generates ending/suffix matches instead of word matches.

I looked at the tests in ActiveSupport::Inflections and it's also silent on the details of irregular words:

jeans =&gt; jeans
funky jeans =&gt; funky jeans
bluejeans =&gt; ... (it's not there to settle the issue)

If the intention is matching the ending *fragment*, as #singularize is currently written, then

bluejeans =&gt; bluejeans
sponsors =&gt; sponsors

given inflect.uncountables = %w( jeans ors)

This is definitely broken for the word &quot;sponsors&quot; since there is a singular that's different.

If instead, the intention is the *word*, as &quot;funky jeans&quot; suggests, then adding a word boundary to the regex fixes &quot;sponsors&quot; and retains &quot;funky jeans&quot;. But it breaks &quot;bluejeans&quot;

It seems like I'm making a big deal, bit the key thing for me is that I can't use &quot;ors&quot; as an @uncountable without breaking things and I can't use it as an irregular because the singular and plurals generated from that match and word containing /or(s)/. Right now, my only solution other than refactoring the name of the object is to manually set the singular and plural

@@@
inflect.plural /^(ors)$/i, '\1'
inflect.singular /^(ors)$/i, '\1'
@@@

I would have thought that was what uncountable was supposed to do.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have an model named &quot;ors&quot; which is both singular and plural
(e.g. it's uncountable)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActiveSupport::Inflector.inflections do |inflect|
  inflect.uncountable %w( ors )
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The inflector works beautifully&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;ors&quot;.pluralize =&amp;gt; &quot;ors&quot;
&quot;ors&quot;.singularize =&amp;gt; &quot;ors&quot;
&quot;ors&quot;.pluralize.singularize =&amp;gt; &quot;ors&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then I add some scaffolding for my Sponsor model and everything
goes crazy with the tests -- long story short the
pluralization/singularization is not right. I try the same
inflecting:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;sponsor&quot;.pluralize =&amp;gt; &quot;sponsors&quot;
&quot;sponsors&quot;.singularize =&amp;gt; &quot;sponsors&quot;
&quot;sponsor&quot;.pluralize.singularize =&amp;gt; &quot;sponsors&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After some WTF time, I try a clean Rails3 project and
&quot;sponsors&quot;.singularize =&amp;gt; &quot;sponsor&quot; as expected, so I realize it
might be the &quot;ors&quot; inflection. I add the uncountable &quot;ors&quot;
inflection to the clean Rails3 project and get the problematic
&quot;sponsors&quot; singular inflection. I remove it, problem stops. I
verify it with &quot;razors&quot; to make sure I'm not crazy:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;razor&quot;.pluralize =&amp;gt; &quot;razors&quot;
&quot;razors&quot;.singularize =&amp;gt; &quot;razors&quot;
&quot;razor&quot;.pluralize.singularize =&amp;gt; &quot;razors&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm going to assume this was &lt;em&gt;not&lt;/em&gt; the intended behavior
but I know there's lots of back and forth discussion on inflections
and lack of interest in changing them. The core problem for me here
was that setting an uncountable inflection had the side effect of
changing a number of other inflections (sponsor, donor, razor). The
reason I think it's a bug is that it's not reflexive --
&quot;string&quot;.pluralize.singularize == &quot;string&quot; IMHO.&lt;/p&gt;
&lt;p&gt;The problem is in #singularize on line 151 of &lt;a href=
&quot;https://github.com/rails/rails/blob/4eab983b955fe17cf02c6fe96cab1c8a309cd606/activesupport/lib/active_support/inflector/inflections.rb&quot;&gt;
https://github.com/rails/rails/blob/4eab983b955fe17cf02c6fe96cab1c8...&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;151 if inflections.uncountables.any? { |inflection| result =~ /#{inflection}\Z/i }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The matching #pluralize is specific&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;132 if word.empty? || inflections.uncountables.include?(result.downcase)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For what it's worth, I couldn't get &quot;ors&quot; to work as an
irregular either since that generates ending/suffix matches instead
of word matches.&lt;/p&gt;
&lt;p&gt;I looked at the tests in ActiveSupport::Inflections and it's
also silent on the details of irregular words:&lt;/p&gt;
&lt;p&gt;jeans =&amp;gt; jeans&lt;br&gt;
funky jeans =&amp;gt; funky jeans&lt;br&gt;
bluejeans =&amp;gt; ... (it's not there to settle the issue)&lt;/p&gt;
&lt;p&gt;If the intention is matching the ending &lt;em&gt;fragment&lt;/em&gt;, as
#singularize is currently written, then&lt;/p&gt;
&lt;p&gt;bluejeans =&amp;gt; bluejeans&lt;br&gt;
sponsors =&amp;gt; sponsors&lt;/p&gt;
&lt;p&gt;given inflect.uncountables = %w( jeans ors)&lt;/p&gt;
&lt;p&gt;This is definitely broken for the word &quot;sponsors&quot; since there is
a singular that's different.&lt;/p&gt;
&lt;p&gt;If instead, the intention is the &lt;em&gt;word&lt;/em&gt;, as &quot;funky jeans&quot;
suggests, then adding a word boundary to the regex fixes &quot;sponsors&quot;
and retains &quot;funky jeans&quot;. But it breaks &quot;bluejeans&quot;&lt;/p&gt;
&lt;p&gt;It seems like I'm making a big deal, bit the key thing for me is
that I can't use &quot;ors&quot; as an @uncountable without breaking things
and I can't use it as an irregular because the singular and plurals
generated from that match and word containing /or(s)/. Right now,
my only solution other than refactoring the name of the object is
to manually set the singular and plural&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;inflect.plural /^(ors)$/i, '\1'
inflect.singular /^(ors)$/i, '\1'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I would have thought that was what uncountable was supposed to
do.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T18:37:34+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-11-30T18:37:36+00:00</updated-at>
      <user-id type="integer">27540</user-id>
      <version type="integer">1</version>
      <user-name>John Paul Ashenfelter</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T18:53:11+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-11-30T18:53:13+00:00</updated-at>
      <user-id type="integer">27540</user-id>
      <version type="integer">2</version>
      <user-name>John Paul Ashenfelter</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T18:55:09+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug patch</tag>
      <title>Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-11-30T18:55:10+00:00</updated-at>
      <user-id type="integer">27540</user-id>
      <version type="integer">3</version>
      <user-name>John Paul Ashenfelter</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T18:56:53+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- 
:title: Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug patch</tag>
      <title>[PATCH] Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-11-30T18:56:54+00:00</updated-at>
      <user-id type="integer">27540</user-id>
      <version type="integer">4</version>
      <user-name>John Paul Ashenfelter</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T19:11:17+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: bug patch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport bug patch</tag>
      <title>[PATCH] Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-11-30T19:11:18+00:00</updated-at>
      <user-id type="integer">27540</user-id>
      <version type="integer">5</version>
      <user-name>John Paul Ashenfelter</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-01T08:55:57+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport bug patch</tag>
      <title>[PATCH] Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-12-01T08:56:06+00:00</updated-at>
      <user-id type="integer">17433</user-id>
      <version type="integer">6</version>
      <user-name>Aditya Sanghi</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 Tests are passing on master.

Nicely done, JP.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 Tests are passing on master.&lt;/p&gt;
&lt;p&gt;Nicely done, JP.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-06T03:01:07+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport bug patch</tag>
      <title>[PATCH] Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-12-06T03:01:19+00:00</updated-at>
      <user-id type="integer">44801</user-id>
      <version type="integer">7</version>
      <user-name>Lake</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>#6040 deals with the same issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;/projects/8994/tickets/6040&quot; title=
&quot;Ticket #6040&quot;&gt;#6040&lt;/a&gt; deals with the same issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-17T20:41:12+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport bug patch</tag>
      <title>[PATCH] Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-12-17T20:41:24+00:00</updated-at>
      <user-id type="integer">82083</user-id>
      <version type="integer">8</version>
      <user-name>Vijay Dev</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>John: only one thing, you should move the last line of second test to ensure:

    ensure
      ActiveSupport::Inflector.inflections.instance_variable_set :@uncountables, cached_uncountables
    end

if that test breaks, other tests will not break because of that.</body>
      <body-html>&lt;div&gt;&lt;p&gt;John: only one thing, you should move the last line of second
test to ensure:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ensure
  ActiveSupport::Inflector.inflections.instance_variable_set :@uncountables, cached_uncountables
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;if that test breaks, other tests will not break because of
that.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-18T08:53:35+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport bug patch</tag>
      <title>[PATCH] Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-12-18T08:53:47+00:00</updated-at>
      <user-id type="integer">7341</user-id>
      <version type="integer">9</version>
      <user-name>Piotr Sarnacki</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [9b4622a483319f3d1e7f4489442f0d86afb6da36]) Added a word boundary to uncountable inflection regex for #singularize so short inflections like ors do not affect larger words like sponsors [#6093 state:resolved]
https://github.com/rails/rails/commit/9b4622a483319f3d1e7f4489442f0d86afb6da36</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/9b4622a483319f3d1e7f4489442f0d86afb6da36&quot;
title=
&quot;Changeset [9b4622a483319f3d1e7f4489442f0d86afb6da36]&quot;&gt;[9b4622a483319f3d1e7f4489442f0d86afb6da36]&lt;/a&gt;)
Added a word boundary to uncountable inflection regex for
#singularize so short inflections like ors do not affect larger
words like sponsors [&lt;a href=&quot;/projects/8994/tickets/6093&quot; title=
&quot;Ticket #6093&quot;&gt;#6093&lt;/a&gt; state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/9b4622a483319f3d1e7f4489442f0d86afb6da36&quot;&gt;
https://github.com/rails/rails/commit/9b4622a483319f3d1e7f4489442f0...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-22T08:45:52+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activesupport bug patch</tag>
      <title>[PATCH] Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-12-22T08:46:10+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">10</version>
      <user-name>Repository</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [cad4f0030969476941ec62096b9c84070355b823]) Added a word boundary to uncountable inflection regex for #singularize so short inflections like ors do not affect larger words like sponsors [#6093 state:resolved]
https://github.com/rails/rails/commit/cad4f0030969476941ec62096b9c84070355b823</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/cad4f0030969476941ec62096b9c84070355b823&quot;
title=
&quot;Changeset [cad4f0030969476941ec62096b9c84070355b823]&quot;&gt;[cad4f0030969476941ec62096b9c84070355b823]&lt;/a&gt;)
Added a word boundary to uncountable inflection regex for
#singularize so short inflections like ors do not affect larger
words like sponsors [&lt;a href=&quot;/projects/8994/tickets/6093&quot; title=
&quot;Ticket #6093&quot;&gt;#6093&lt;/a&gt; state:resolved] &lt;a href=
&quot;https://github.com/rails/rails/commit/cad4f0030969476941ec62096b9c84070355b823&quot;&gt;
https://github.com/rails/rails/commit/cad4f0030969476941ec62096b9c8...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-22T08:48:11+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activesupport bug patch</tag>
      <title>[PATCH] Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2010-12-22T08:48:24+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">11</version>
      <user-name>Repository</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">11378</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/42275)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/42275&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-12T21:58:23+00:00</created-at>
      <creator-id type="integer">27540</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 92071
</diffable-attributes>
      <milestone-id type="integer">101623</milestone-id>
      <number type="integer">6093</number>
      <permalink>uncountable-singularize-uses-regex-match-while-pluralize-uses-exact-match-leading-leading-to-unexpected-collisions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activesupport bug patch</tag>
      <title>[PATCH] Uncountable singularize uses regex match while pluralize uses exact match leading leading to unexpected collisions</title>
      <updated-at type="datetime">2011-02-12T21:58:23+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">12</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>John Paul Ashenfelter</creator-name>
      <assigned-user-name>Xavier Noria</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6093</url>
      <milestone-title>3.0.5</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>791c2c946de2d53e11cfa00194a8c3ec67941f4a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-11-30T18:53:11+00:00</created-at>
      <filename>patch_6093.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">795805</id>
      <size type="integer">3088</size>
      <uploader-id type="integer">27540</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/795805/patch_6093.diff</url>
    </attachment>
  </attachments>
</ticket>
