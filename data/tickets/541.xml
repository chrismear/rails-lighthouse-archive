<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-02T22:31:42+01:00</created-at>
  <creator-id type="integer">25164</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">541</number>
  <permalink>dirty-attributes-with-associations</permalink>
  <priority type="integer">37</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>association changes</tag>
  <title>Dirty Attributes with Associations</title>
  <updated-at type="datetime">2011-02-02T17:22:31+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">17</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Josh Clayton</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Currently, to track dirty attributes on associations, you need to reference with a foreign key.

@@@ ruby
class Ticket &lt; ActiveRecord::Base
  belongs_to :owner, :class_name =&gt; &quot;User&quot;, :foreign_key =&gt; &quot;user_id&quot;
end

class User &lt; ActiveRecord::Base; end

ticket = Ticket.create! :name =&gt; 'My Ticket'
ticket.changed? # =&gt; false
ticket.owner = User.first
ticket.changed? # =&gt; true
ticket.changed # =&gt; ['user_id']
ticket.user_id_changed? # =&gt; true
@@@

I would like to have access to methods like ticket#owner_changed?, ticket#owner_was, etc.

I've attached a patch that resolves most of these issues; the only thing I was unable to do was make available association virtual attributes to get recognized by the attribute_method_suffix initially.  Once they are set, the additional methods become available</original-body>
  <latest-body>Currently, to track dirty attributes on associations, you need to reference with a foreign key.

@@@ ruby
class Ticket &lt; ActiveRecord::Base
  belongs_to :owner, :class_name =&gt; &quot;User&quot;, :foreign_key =&gt; &quot;user_id&quot;
end

class User &lt; ActiveRecord::Base; end

ticket = Ticket.create! :name =&gt; 'My Ticket'
ticket.changed? # =&gt; false
ticket.owner = User.first
ticket.changed? # =&gt; true
ticket.changed # =&gt; ['user_id']
ticket.user_id_changed? # =&gt; true
@@@

I would like to have access to methods like ticket#owner_changed?, ticket#owner_was, etc.

I've attached a patch that resolves most of these issues; the only thing I was unable to do was make available association virtual attributes to get recognized by the attribute_method_suffix initially.  Once they are set, the additional methods become available</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Currently, to track dirty attributes on associations, you need to reference with a foreign key.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Ticket &amp;lt; ActiveRecord::Base
  belongs_to :owner, :class_name =&amp;gt; &amp;quot;User&amp;quot;, :foreign_key =&amp;gt; &amp;quot;user_id&amp;quot;
end

class User &amp;lt; ActiveRecord::Base; end

ticket = Ticket.create! :name =&amp;gt; 'My Ticket'
ticket.changed? # =&amp;gt; false
ticket.owner = User.first
ticket.changed? # =&amp;gt; true
ticket.changed # =&amp;gt; ['user_id']
ticket.user_id_changed? # =&amp;gt; true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I would like to have access to methods like ticket#owner_changed?, ticket#owner_was, etc.
&lt;/p&gt;&lt;p&gt;
I've attached a patch that resolves most of these issues; the only thing I was unable to do was make available association virtual attributes to get recognized by the attribute_method_suffix initially.  Once they are set, the additional methods become available
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Currently, to track dirty attributes on associations, you need to reference with a foreign key.

@@@ ruby
class Ticket &lt; ActiveRecord::Base
  belongs_to :owner, :class_name =&gt; &quot;User&quot;, :foreign_key =&gt; &quot;user_id&quot;
end

class User &lt; ActiveRecord::Base; end

ticket = Ticket.create! :name =&gt; 'My Ticket'
ticket.changed? # =&gt; false
ticket.owner = User.first
ticket.changed? # =&gt; true
ticket.changed # =&gt; ['user_id']
ticket.user_id_changed? # =&gt; true
@@@

I would like to have access to methods like ticket#owner_changed?, ticket#owner_was, etc.

I've attached a patch that resolves most of these issues; the only thing I was unable to do was make available association virtual attributes to get recognized by the attribute_method_suffix initially.  Once they are set, the additional methods become available</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Currently, to track dirty attributes on associations, you need to reference with a foreign key.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Ticket &amp;lt; ActiveRecord::Base
  belongs_to :owner, :class_name =&amp;gt; &amp;quot;User&amp;quot;, :foreign_key =&amp;gt; &amp;quot;user_id&amp;quot;
end

class User &amp;lt; ActiveRecord::Base; end

ticket = Ticket.create! :name =&amp;gt; 'My Ticket'
ticket.changed? # =&amp;gt; false
ticket.owner = User.first
ticket.changed? # =&amp;gt; true
ticket.changed # =&amp;gt; ['user_id']
ticket.user_id_changed? # =&amp;gt; true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I would like to have access to methods like ticket#owner_changed?, ticket#owner_was, etc.
&lt;/p&gt;&lt;p&gt;
I've attached a patch that resolves most of these issues; the only thing I was unable to do was make available association virtual attributes to get recognized by the attribute_method_suffix initially.  Once they are set, the additional methods become available
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T22:31:42+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch tested</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-07-02T22:31:42+01:00</updated-at>
      <user-id type="integer">25164</user-id>
      <version type="integer">1</version>
      <user-name>Josh Clayton</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I think this is a better fit for a plugin. It's not very common to track association changes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I think this is a better fit for a plugin. It's not very common to track association changes.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-04T00:23:35+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch tested</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-07-04T00:23:35+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Josh: I wrote  plugin for this functionality. The plugin definitely needs some work, including specs, but it works well. I'll be presenting it at SDRuby this Thursday, so I'm looking to get some work done on it this week. Info below:

http://github.com/TheBreeze/shadow/tree/master

Contact me if you're interested.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Josh: I wrote  plugin for this functionality. The plugin definitely needs some work, including specs, but it works well. I'll be presenting it at SDRuby this Thursday, so I'm looking to get some work done on it this week. Info below:
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/TheBreeze/shadow/tree/master&quot;&gt;http://github.com/TheBreeze/shad...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
Contact me if you're interested.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-08T00:09:26+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord enhancement patch tested
:assigned_user: 85
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-07-08T00:09:26+01:00</updated-at>
      <user-id type="integer">25562</user-id>
      <version type="integer">3</version>
      <user-name>TheBreeze</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Re: &quot;It's not very common to track association changes.&quot;

I would say that the data suggests otherwise.

And as an example: &quot;&#8594; Assigned user changed from &#8220;&#8221; to &#8220;Jeremy Kemper&#8221;&quot;.

I agree with Josh, we definitely need this in.

And Dirty needs a whole lot of work. Where it could have been an elegant and conceptually simple solution, it's currently certainly not. This is giving rise to cruft (will_change!), unreliability and a whole load of recent tickets.

I've seen votes for better syntax too: person.name.changed? instead of person.name_changed? since person.name.changed? asks the attribute (instead of the model) if it has changed, which is more semantically correct, and represents a more meta-data purpose. Plus it's far less painful to type.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Re: &quot;It's not very common to track association changes.&quot;&lt;/p&gt;

&lt;p&gt;I would say that the data suggests otherwise.&lt;/p&gt;

&lt;p&gt;And as an example: &quot;&#8594; Assigned user changed from &#8220;&#8221; to &#8220;Jeremy Kemper&#8221;&quot;.&lt;/p&gt;

&lt;p&gt;I agree with Josh, we definitely need this in.&lt;/p&gt;

&lt;p&gt;And Dirty needs a whole lot of work. Where it could have been an elegant and conceptually simple solution, it's currently certainly not. This is giving rise to cruft (will_change!), unreliability and a whole load of recent tickets.&lt;/p&gt;

&lt;p&gt;I've seen votes for better syntax too: person.name.changed? instead of person.name_changed? since person.name.changed? asks the attribute (instead of the model) if it has changed, which is more semantically correct, and represents a more meta-data purpose. Plus it's far less painful to type.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-20T07:58:26+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-08-20T07:58:26+01:00</updated-at>
      <user-id type="integer">24025</user-id>
      <version type="integer">4</version>
      <user-name>Joran Greef</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&gt; person.name.changed? instead of person.name_changed?

This seems like a bad idea to me. How can you tell the difference between asking if person's name attribute has a different value and the name itself having an attribute value changed?  This could easily happen if `name` is an association to a model that contains first, middle and last attributes. Also, the API you propose would require layering a proxy object on top of simple attribute access the way it is on associations now. Sounds very complicated for minimal short-term benefit. Adding an AttributeProxy object could do some interesting stuff, but it would be a huge change and seems like a 3.0 kind of move.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;&lt;p&gt;person.name.changed? instead of person.name_changed?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This seems like a bad idea to me. How can you tell the difference between asking if person's name attribute has a different value and the name itself having an attribute value changed?  This could easily happen if &lt;code&gt;name&lt;/code&gt; is an association to a model that contains first, middle and last attributes. Also, the API you propose would require layering a proxy object on top of simple attribute access the way it is on associations now. Sounds very complicated for minimal short-term benefit. Adding an AttributeProxy object could do some interesting stuff, but it would be a huge change and seems like a 3.0 kind of move.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-20T15:00:20+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-08-20T15:00:20+01:00</updated-at>
      <user-id type="integer">11372</user-id>
      <version type="integer">5</version>
      <user-name>Josh Susser</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Joran, your elegant, simple patches are welcome ;)

Josh, it feels wrong to add association awareness to a feature that deals only with attribute changes. Perhaps it's asking for a better abstraction.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Joran, your elegant, simple patches are welcome ;)&lt;/p&gt;

&lt;p&gt;Josh, it feels wrong to add association awareness to a feature that deals only with attribute changes. Perhaps it's asking for a better abstraction.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-20T17:30:59+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-08-20T17:30:59+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">6</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Jeremy, thanks, I better keep my mouth shut more in future! ;)

Josh, surely &quot;the difference between asking if person's name attribute has a different value and the name itself having an attribute value changed&quot; is already the case with the existing syntax? Turtles all the way down? I agree it's complicated. And it's not the most important issue. In this case, it's getting rid of will_change! and adding better association support (I had to redefine other_ids=() today because of this and it's no fun).

On the subject of a simpler design, hinging attribute_changed? on the attribute setter requires the will_change! flag and discourages use of methods such as attribute.upcase! etc. It's a slippery slope trying to remember when and where to use will_change!. The one advantage however is that the row is not kept in memory twice. i.e. there's no &quot;before&quot; and &quot;after&quot;. But this is a machine advantage with not much human upside.

I think the memory cost of a before and after approach is worth it. Then attributes can be changed any which way. There's no need for will_change! and Dirty gets more simple and reliable, esp. re: partial updates.

More joy for the human. More pain for the machine.

I'll put my newbie Rails simple mind to it and see what I can do. ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jeremy, thanks, I better keep my mouth shut more in future! ;)&lt;/p&gt;

&lt;p&gt;Josh, surely &quot;the difference between asking if person's name attribute has a different value and the name itself having an attribute value changed&quot; is already the case with the existing syntax? Turtles all the way down? I agree it's complicated. And it's not the most important issue. In this case, it's getting rid of will_change! and adding better association support (I had to redefine other_ids=() today because of this and it's no fun).&lt;/p&gt;

&lt;p&gt;On the subject of a simpler design, hinging attribute_changed? on the attribute setter requires the will_change! flag and discourages use of methods such as attribute.upcase! etc. It's a slippery slope trying to remember when and where to use will_change!. The one advantage however is that the row is not kept in memory twice. i.e. there's no &quot;before&quot; and &quot;after&quot;. But this is a machine advantage with not much human upside.&lt;/p&gt;

&lt;p&gt;I think the memory cost of a before and after approach is worth it. Then attributes can be changed any which way. There's no need for will_change! and Dirty gets more simple and reliable, esp. re: partial updates.&lt;/p&gt;

&lt;p&gt;More joy for the human. More pain for the machine.&lt;/p&gt;

&lt;p&gt;I'll put my newbie Rails simple mind to it and see what I can do. ;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-20T17:54:22+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-08-20T17:54:22+01:00</updated-at>
      <user-id type="integer">24025</user-id>
      <version type="integer">7</version>
      <user-name>Joran Greef</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Too many Joshes!  Plz use an unambiguous name when there's more than one of us about.  How ironic when the point I'm trying to make is about ambiguous naming, heh.

&gt; surely &quot;the difference between asking if person's name attribute has a different value and the name itself having an attribute value changed&quot; is already the case with the existing syntax?

Not really.  Right now name.changed? will tell you if a Name model has any changed attributes. It's difficult to tell by looking at the code if person.name.changed? means the person has a new name or the same name with a different attribute.

Whenever you introduce a proxy you need to make sure it doesn't block methods on its target.  For an example, create a Missile model with a :target attribute.  Silo.belongs_to :missile.  silo.missile.target returns.... the silo's missile, not the missile's target.

Sorry if this is off-topic. I'm all for improving the dirty tracking API.  Just let's not make things worse.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Too many Joshes!  Plz use an unambiguous name when there's more than one of us about.  How ironic when the point I'm trying to make is about ambiguous naming, heh.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;surely &quot;the difference between asking if person's name attribute has a different value and the name itself having an attribute value changed&quot; is already the case with the existing syntax?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not really.  Right now name.changed? will tell you if a Name model has any changed attributes. It's difficult to tell by looking at the code if person.name.changed? means the person has a new name or the same name with a different attribute.&lt;/p&gt;

&lt;p&gt;Whenever you introduce a proxy you need to make sure it doesn't block methods on its target.  For an example, create a Missile model with a :target attribute.  Silo.belongs_to :missile.  silo.missile.target returns.... the silo's missile, not the missile's target.&lt;/p&gt;

&lt;p&gt;Sorry if this is off-topic. I'm all for improving the dirty tracking API.  Just let's not make things worse.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-20T18:14:28+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-08-20T18:14:28+01:00</updated-at>
      <user-id type="integer">11372</user-id>
      <version type="integer">8</version>
      <user-name>Josh Susser</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Josh Susser, right, got you now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Josh Susser, right, got you now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-20T18:25:36+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-08-20T18:25:36+01:00</updated-at>
      <user-id type="integer">24025</user-id>
      <version type="integer">9</version>
      <user-name>Joran Greef</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&gt; Currently, to track dirty attributes on associations, you need to reference with a foreign key. 

How to do that with habtm associations?

Thx,
cs.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;Currently, to track dirty attributes on associations, you need
to reference with a foreign key.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How to do that with habtm associations?&lt;/p&gt;
&lt;p&gt;Thx, cs.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-23T08:42:27+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-10-23T08:42:30+01:00</updated-at>
      <user-id type="integer">35439</user-id>
      <version type="integer">10</version>
      <user-name>cs</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I just ran into the same problem.

There's a Project model which has_and_belongs_to_many :users
After assigning adding some more users and removing a few from the _team_ (project.user_ids) I'd like to write an observer which determines the new teammates by substraction of project.users and _project.users_were_ 
On the one hand I understand that especially a habtm association is more likely a _foreign mapping of associations_ than a attribute of an object itself &#8211; on the other hand one could argue from a more abstract and  object-related point of view where an association is just a way composing a single object.

Using something like acts_as_versioned for this scenario seems to me like breaking a butterfly on the wheel.
So&#8230; what do you suggest?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just ran into the same problem.&lt;/p&gt;
&lt;p&gt;There's a Project model which has_and_belongs_to_many :users
After assigning adding some more users and removing a few from the
&lt;em&gt;team&lt;/em&gt; (project.user_ids) I'd like to write an observer
which determines the new teammates by substraction of project.users
and &lt;em&gt;project.users_were&lt;/em&gt; On the one hand I understand that
especially a habtm association is more likely a &lt;em&gt;foreign mapping
of associations&lt;/em&gt; than a attribute of an object itself &amp;#8211;
on the other hand one could argue from a more abstract and
object-related point of view where an association is just a way
composing a single object.&lt;/p&gt;
&lt;p&gt;Using something like acts_as_versioned for this scenario seems
to me like breaking a butterfly on the wheel. So&amp;#8230; what do you
suggest?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-26T14:32:34+00:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-11-26T14:32:36+00:00</updated-at>
      <user-id type="integer">29463</user-id>
      <version type="integer">11</version>
      <user-name>yves.vogl (at dock42)</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've also had a go at making a plugin to do this, very much pre-alpha, but if you want a look:

github.com/joshpencheon/dirty_associations</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've also had a go at making a plugin to do this, very much
pre-alpha, but if you want a look:&lt;/p&gt;
&lt;p&gt;github.com/joshpencheon/dirty_associations&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-10T22:31:20+00:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2008-12-10T22:31:25+00:00</updated-at>
      <user-id type="integer">37717</user-id>
      <version type="integer">12</version>
      <user-name>Josh Pencheon</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Well, it would make sense that if you overwrite the content of an object's association you would be able to know that you did so and what you are replacing.

@@@ ruby
user = User.last

user.ticket
# =&gt; #&lt;Ticket id:101, queue_position:41, ...&gt;
user.create_ticket
# =&gt; #&lt;Ticket id:102, queue_position:42, ...&gt;
user.ticket_changed?
# =&gt; true
user.ticket_was
# =&gt; #&lt;Ticket id:101, queue_position:41, ...&gt;
@@@

All I can think of now is changing the *association_accessor_methods*, *association_constructor_method* and *collection_accessor_methods* in Activerecord::Associations and cache the old object in the reflection itself. But I'm not sure I understood any of that correctly and that wouldn't be as modular as Dirty that simply wraps around write_attribute when loaded.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well, it would make sense that if you overwrite the content of
an object's association you would be able to know that you did so
and what you are replacing.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
user = User.last

user.ticket
# =&amp;gt; #&amp;lt;Ticket id:101, queue_position:41, ...&amp;gt;
user.create_ticket
# =&amp;gt; #&amp;lt;Ticket id:102, queue_position:42, ...&amp;gt;
user.ticket_changed?
# =&amp;gt; true
user.ticket_was
# =&amp;gt; #&amp;lt;Ticket id:101, queue_position:41, ...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All I can think of now is changing the
&lt;em&gt;association_accessor_methods&lt;/em&gt;,
&lt;em&gt;association_constructor_method&lt;/em&gt; and
&lt;em&gt;collection_accessor_methods&lt;/em&gt; in Activerecord::Associations
and cache the old object in the reflection itself. But I'm not sure
I understood any of that correctly and that wouldn't be as modular
as Dirty that simply wraps around write_attribute when loaded.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-15T01:29:02+00:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2009-02-16T02:23:12+00:00</updated-at>
      <user-id type="integer">29259</user-id>
      <version type="integer">13</version>
      <user-name>Leandro Pedroni</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:33+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2010-05-04T18:48:33+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">14</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 for this - I think it makes sense to include.

Rationale: when I think of objects in real life &quot;changing&quot; I don't distinguish attributes vs associations.  This is closest to it's meaning in the English language.  For example, if I say &quot;there is something different about this class&quot; I could just as easily be referring to the new teacher/students in the class (associations) as the title of the class (attribute).

It also feels more &quot;rubyish&quot; following the principles of:
1. emphasize human, rather than computer, needs and
2. the principle of least astonishment (POLA), meaning that the language should behave in such a way as to minimize confusion

Basically - when I heard about the dirty functions, it was my first assumption to assume/hope this encompassed associations, since that seemed most natural.  But I wasn't really surprised to find they didn't, given that it's obviously harder to implement.

Anyway, just wanted to add that...</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for this - I think it makes sense to include.&lt;/p&gt;
&lt;p&gt;Rationale: when I think of objects in real life &quot;changing&quot; I
don't distinguish attributes vs associations. This is closest to
it's meaning in the English language. For example, if I say &quot;there
is something different about this class&quot; I could just as easily be
referring to the new teacher/students in the class (associations)
as the title of the class (attribute).&lt;/p&gt;
&lt;p&gt;It also feels more &quot;rubyish&quot; following the principles of:&lt;br&gt;
1. emphasize human, rather than computer, needs and&lt;br&gt;
2. the principle of least astonishment (POLA), meaning that the
language should behave in such a way as to minimize confusion&lt;/p&gt;
&lt;p&gt;Basically - when I heard about the dirty functions, it was my
first assumption to assume/hope this encompassed associations,
since that seemed most natural. But I wasn't really surprised to
find they didn't, given that it's obviously harder to
implement.&lt;/p&gt;
&lt;p&gt;Anyway, just wanted to add that...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-11T01:06:33+01:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2010-06-11T01:06:47+01:00</updated-at>
      <user-id type="integer">57403</user-id>
      <version type="integer">15</version>
      <user-name>Brian Armstrong</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:37:40+00:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">37</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2011-02-02T17:22:31+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">16</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:37:41+00:00</created-at>
      <creator-id type="integer">25164</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">541</number>
      <permalink>dirty-attributes-with-associations</permalink>
      <priority type="integer">37</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>association changes</tag>
      <title>Dirty Attributes with Associations</title>
      <updated-at type="datetime">2011-02-02T17:22:05+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">17</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Josh Clayton</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/541</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ebb5f44a7d32608b0d3099bfc6736cbbd4131f49</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-07-02T22:31:42+01:00</created-at>
      <filename>dirty_with_associations.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">30611</id>
      <size type="integer">3827</size>
      <uploader-id type="integer">25164</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/30611/dirty_with_associations.diff</url>
    </attachment>
  </attachments>
</ticket>
