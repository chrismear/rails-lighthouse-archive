From b7e4a1ed99b6965450a2c8709f0ab27673c31f20 Mon Sep 17 00:00:00 2001
From: Norman Clarke <norman@randomba.org>
Date: Fri, 27 Feb 2009 09:03:20 -0800
Subject: [PATCH] Add support for :order => :random in queries.

---
 activerecord/lib/active_record/associations.rb     |    6 +++---
 activerecord/lib/active_record/base.rb             |    6 +++---
 .../connection_adapters/abstract_adapter.rb        |   14 ++++++++++++++
 .../connection_adapters/mysql_adapter.rb           |    8 ++++++++
 activerecord/test/cases/finder_test.rb             |   11 ++++++++---
 activerecord/test/cases/named_scope_test.rb        |    9 +++++++--
 6 files changed, 43 insertions(+), 11 deletions(-)

diff --git a/activerecord/lib/active_record/associations.rb b/activerecord/lib/active_record/associations.rb
index 6e88c89..72f1278 100755
--- a/activerecord/lib/active_record/associations.rb
+++ b/activerecord/lib/active_record/associations.rb
@@ -714,7 +714,7 @@ module ActiveRecord
       #   or <tt>@blog.posts.build</tt>.
       # [:order]
       #   Specify the order in which the associated objects are returned as an <tt>ORDER BY</tt> SQL fragment,
-      #   such as <tt>last_name, first_name DESC</tt>.
+      #   such as <tt>last_name, first_name DESC</tt>. You can also set <tt>:order => :random</tt> return records in random order.
       # [:foreign_key]
       #   Specify the foreign key used for the association. By default this is guessed to be the name
       #   of this class in lower-case and "_id" suffixed. So a Person class that makes a +has_many+ association will use "person_id"
@@ -843,7 +843,7 @@ module ActiveRecord
       #   SQL fragment, such as <tt>rank = 5</tt>.
       # [:order]
       #   Specify the order in which the associated objects are returned as an <tt>ORDER BY</tt> SQL fragment,
-      #   such as <tt>last_name, first_name DESC</tt>.
+      #   such as <tt>last_name, first_name DESC</tt>. You can also set <tt>:order => :random</tt> to return records in random order.
       # [:dependent]
       #   If set to <tt>:destroy</tt>, the associated object is destroyed when this object is. If set to
       #   <tt>:delete</tt>, the associated object is deleted *without* calling its destroy method. If set to <tt>:nullify</tt>, the associated
@@ -1139,7 +1139,7 @@ module ActiveRecord
       #   or <tt>@blog.posts.build</tt>.
       # [:order]
       #   Specify the order in which the associated objects are returned as an <tt>ORDER BY</tt> SQL fragment,
-      #   such as <tt>last_name, first_name DESC</tt>
+      #   such as <tt>last_name, first_name DESC</tt>. You can also set <tt>:order => :random</tt> to return records in random order.
       # [:uniq]
       #   If true, duplicate associated objects will be ignored by accessors and query methods.
       # [:finder_sql]
diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index 55ab1fa..197e094 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -1744,10 +1744,10 @@ module ActiveRecord #:nodoc:
           scope = scope(:find) if :auto == scope
           scoped_order = scope[:order] if scope
           if order
-            sql << " ORDER BY #{order}"
-            sql << ", #{scoped_order}" if scoped_order
+            sql << " ORDER BY #{connection.order(order)}"
+            sql << ", #{connection.order(scoped_order)}" if scoped_order
           else
-            sql << " ORDER BY #{scoped_order}" if scoped_order
+            sql << " ORDER BY #{connection.order(scoped_order)}" if scoped_order
           end
         end
 
diff --git a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
index a8cd9f0..27b33b1 100755
--- a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
@@ -100,6 +100,20 @@ module ActiveRecord
         yield
       end
 
+      # DATABASE STATEMENTS ======================================
+
+      # Adjust ORDER BY arguments to match supported syntax. Passing :random
+      # will return the appropriate RAND()/RANDOM()/etc for the adapter. All
+      # other arguments are returned unmodified.
+      def order(arg)
+        case arg
+        when :random
+          "RANDOM()"
+        else
+          arg
+        end
+      end
+
       # CONNECTION MANAGEMENT ====================================
 
       # Checks whether the connection to the database is still active. This includes
diff --git a/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb b/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
index 9300df2..444dad2 100644
--- a/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
@@ -377,6 +377,14 @@ module ActiveRecord
         end
       end
 
+      def order(arg)
+        case arg
+        when :random
+          "RAND()"
+        else
+          arg
+        end
+      end
 
       # SCHEMA STATEMENTS ========================================
 
diff --git a/activerecord/test/cases/finder_test.rb b/activerecord/test/cases/finder_test.rb
index ee8f490..c160733 100644
--- a/activerecord/test/cases/finder_test.rb
+++ b/activerecord/test/cases/finder_test.rb
@@ -94,16 +94,16 @@ class FinderTest < ActiveRecord::TestCase
 
     assert_raise(NoMethodError) { Topic.exists?([1,2]) }
   end
-  
+
   def test_exists_returns_true_with_one_record_and_no_args
     assert Topic.exists?
   end
-  
+
   def test_does_not_exist_with_empty_table_and_no_args_given
     Topic.delete_all
     assert !Topic.exists?
   end
-  
+
   def test_exists_with_aggregate_having_three_mappings
     existing_address = customers(:david).address
     assert Customer.exists?(:address => existing_address)
@@ -191,6 +191,11 @@ class FinderTest < ActiveRecord::TestCase
     assert developers.all? { |developer|  developer.salary > 10000 }
   end
 
+  def test_find_with_random_order
+    developers =  Developer.find(:all, :order => :random, :limit => 4)
+    assert_equal 4, developers.size
+  end
+
   def test_find_with_entire_select_statement
     topics = Topic.find_by_sql "SELECT * FROM topics WHERE author_name = 'Mary'"
 
diff --git a/activerecord/test/cases/named_scope_test.rb b/activerecord/test/cases/named_scope_test.rb
index f28285f..987cb8a 100644
--- a/activerecord/test/cases/named_scope_test.rb
+++ b/activerecord/test/cases/named_scope_test.rb
@@ -196,6 +196,11 @@ class NamedScopeTest < ActiveRecord::TestCase
     end
   end
 
+  def test_random_order
+    topics = Topic.base.all(:order => :random, :limit => 4)
+    assert_equal 4, topics.size
+  end
+
   def test_empty_should_not_load_results
     topics = Topic.base
     assert_queries(2) do
@@ -247,7 +252,7 @@ class NamedScopeTest < ActiveRecord::TestCase
     topic = Topic.approved.create!({})
     assert topic.approved
   end
-  
+
   def test_should_build_with_proxy_options_chained
     topic = Topic.approved.by_lifo.build({})
     assert topic.approved
@@ -308,7 +313,7 @@ class NamedScopeTest < ActiveRecord::TestCase
   end
 end
 
-class DynamicScopeMatchTest < ActiveRecord::TestCase  
+class DynamicScopeMatchTest < ActiveRecord::TestCase
   def test_scoped_by_no_match
     assert_nil ActiveRecord::DynamicScopeMatch.match("not_scoped_at_all")
   end
-- 
1.6.1

