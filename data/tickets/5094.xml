<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-26T08:44:16+01:00</created-at>
  <creator-id type="integer">37373</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5094</number>
  <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>&quot;activerecord rails3&quot; activerelation</tag>
  <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
  <updated-at type="datetime">2010-08-05T20:56:49+01:00</updated-at>
  <user-id type="integer">40263</user-id>
  <version type="integer">14</version>
  <user-name>Neeraj Singh</user-name>
  <creator-name>Matt Moriarity</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
  <priority-name>Low</priority-name>
  <original-body>I created a table using migrations called lists, which has a column named order for maintaining the order of the lists. This worked fine, but then I tried to call List.order(:order), which generated this SQL:

SELECT     &quot;lists&quot;.* FROM       &quot;lists&quot; ORDER BY  order

This is a syntax error since order is a SQL keyword. It should be quoted, similar to how &quot;lists&quot; is quoted in the same query.</original-body>
  <latest-body>I created a table using migrations called lists, which has a column named order for maintaining the order of the lists. This worked fine, but then I tried to call List.order(:order), which generated this SQL:

SELECT     &quot;lists&quot;.* FROM       &quot;lists&quot; ORDER BY  order

This is a syntax error since order is a SQL keyword. It should be quoted, similar to how &quot;lists&quot; is quoted in the same query.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I created a table using migrations called lists, which has a
column named order for maintaining the order of the lists. This
worked fine, but then I tried to call List.order(:order), which
generated this SQL:&lt;/p&gt;
&lt;p&gt;SELECT &quot;lists&quot;.* FROM &quot;lists&quot; ORDER BY order&lt;/p&gt;
&lt;p&gt;This is a syntax error since order is a SQL keyword. It should
be quoted, similar to how &quot;lists&quot; is quoted in the same query.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I created a table using migrations called lists, which has a column named order for maintaining the order of the lists. This worked fine, but then I tried to call List.order(:order), which generated this SQL:

SELECT     &quot;lists&quot;.* FROM       &quot;lists&quot; ORDER BY  order

This is a syntax error since order is a SQL keyword. It should be quoted, similar to how &quot;lists&quot; is quoted in the same query.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I created a table using migrations called lists, which has a
column named order for maintaining the order of the lists. This
worked fine, but then I tried to call List.order(:order), which
generated this SQL:&lt;/p&gt;
&lt;p&gt;SELECT &quot;lists&quot;.* FROM &quot;lists&quot; ORDER BY order&lt;/p&gt;
&lt;p&gt;This is a syntax error since order is a SQL keyword. It should
be quoted, similar to how &quot;lists&quot; is quoted in the same query.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-12T15:19:06+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-07-12T15:19:07+01:00</updated-at>
      <user-id type="integer">37373</user-id>
      <version type="integer">1</version>
      <user-name>Matt Moriarity</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>As far as I know order by should _never_ be quoted. 

@@@ ruby
SELECT cars.* FROM &quot;cars&quot; ORDER BY id 
SELECT cars.* FROM &quot;cars&quot; ORDER BY 'id' 
@@@

Above two sql statements are not same. The second one is meaningless. It will sort on literal string 'id'.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As far as I know order by should &lt;em&gt;never&lt;/em&gt; be quoted.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;SELECT cars.* FROM &quot;cars&quot; ORDER BY id 
SELECT cars.* FROM &quot;cars&quot; ORDER BY 'id'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Above two sql statements are not same. The second one is
meaningless. It will sort on literal string 'id'.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T00:57:13+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-07-13T00:57:15+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I mean double-quoted, which will treat it as a column name and not a keyword:

SELECT cars.* FROM &quot;cars&quot; ORDER BY &quot;id&quot;

would be the same as the original, but if &quot;id&quot; was &quot;order&quot;, this one would work while the original wouldn't.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I mean double-quoted, which will treat it as a column name and
not a keyword:&lt;/p&gt;
&lt;p&gt;SELECT cars.* FROM &quot;cars&quot; ORDER BY &quot;id&quot;&lt;/p&gt;
&lt;p&gt;would be the same as the original, but if &quot;id&quot; was &quot;order&quot;, this
one would work while the original wouldn't.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T01:25:09+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-07-13T01:25:10+01:00</updated-at>
      <user-id type="integer">37373</user-id>
      <version type="integer">3</version>
      <user-name>Matt Moriarity</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I did not know that in the case you mentioned double quote would work but not single quote.

Anyway here is snippet from mysql adapter.

@@@ ruby
      def quote(value, column = nil)
        if value.kind_of?(String) &amp;&amp; column &amp;&amp; column.type == :binary &amp;&amp; column.class.respond_to?(:string_to_binary)
          s = column.class.string_to_binary(value).unpack(&quot;H*&quot;)[0]
          &quot;x'#{s}'&quot;
        elsif value.kind_of?(BigDecimal)
          value.to_s(&quot;F&quot;)
        else
          super
        end
      end
@@@

As you can see even if code is put into quote the data then in mysql it would be quoted using single quote unless code is changed to handle this special case.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I did not know that in the case you mentioned double quote would
work but not single quote.&lt;/p&gt;
&lt;p&gt;Anyway here is snippet from mysql adapter.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;      def quote(value, column = nil)
        if value.kind_of?(String) &amp;amp;&amp;amp; column &amp;amp;&amp;amp; column.type == :binary &amp;amp;&amp;amp; column.class.respond_to?(:string_to_binary)
          s = column.class.string_to_binary(value).unpack(&quot;H*&quot;)[0]
          &quot;x'#{s}'&quot;
        elsif value.kind_of?(BigDecimal)
          value.to_s(&quot;F&quot;)
        else
          super
        end
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see even if code is put into quote the data then in
mysql it would be quoted using single quote unless code is changed
to handle this special case.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T02:09:54+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-07-13T02:09:56+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">4</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think this is actually an Arel thing. If you look at the code for the ordering clause in arel. Specifically, if you look at
lib/arel/engines/sql/formatters.rb on line 48:

@@@
class OrderClause &lt; PassThrough
  def ordering(ordering)
    &quot;#{quote_table_name(name_for(ordering.attribute.original_relation))}.#{quote_column_name(ordering.attribute.name)} #{ordering.\
direction_sql}&quot;
  end
end
@@@

You can see that the OrderClause class doesn't override the value() method of its parent and just passes the order value through unchanged. If you add a value clause like this:

@@@
class OrderClause &lt; PassThrough
  def value(value)
    quote_column_name(value)
  end

  def ordering(ordering)
  &quot;#{quote_table_name(name_for(ordering.attribute.original_relation))}.#{quote_column_name(ordering.attribute.name)} #{ordering.\
direction_sql}&quot;
  end
end
@@@

Then queries like Lists.order(:order) start to work but this breaks queries like Lists.order(&quot;order asc&quot;). The only way I can see to make this work is to make the OrderClause class smart enough to parse the various expressions you can put in an order clause, but maybe this is easy in Arel. I don't understand the internals of Arel well enough to say.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think this is actually an Arel thing. If you look at the code
for the ordering clause in arel. Specifically, if you look at&lt;br&gt;
lib/arel/engines/sql/formatters.rb on line 48:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class OrderClause &amp;lt; PassThrough
  def ordering(ordering)
    &quot;#{quote_table_name(name_for(ordering.attribute.original_relation))}.#{quote_column_name(ordering.attribute.name)} #{ordering.\
direction_sql}&quot;
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can see that the OrderClause class doesn't override the
value() method of its parent and just passes the order value
through unchanged. If you add a value clause like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class OrderClause &amp;lt; PassThrough
  def value(value)
    quote_column_name(value)
  end

  def ordering(ordering)
  &quot;#{quote_table_name(name_for(ordering.attribute.original_relation))}.#{quote_column_name(ordering.attribute.name)} #{ordering.\
direction_sql}&quot;
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then queries like Lists.order(:order) start to work but this
breaks queries like Lists.order(&quot;order asc&quot;). The only way I can
see to make this work is to make the OrderClause class smart enough
to parse the various expressions you can put in an order clause,
but maybe this is easy in Arel. I don't understand the internals of
Arel well enough to say.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T03:18:56+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-07-13T03:18:58+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">5</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In query_methods.rb in  ActiveRecord you can do following

@@@ ruby
def order(*args)
  clone.tap { |r| r.order_values += args if args.present? }
  #clone.tap { |r| r.order_values += args.collect {|e| connection.quote(e)} if args.present? }
end
@@@

commented out code is the change I did. 

I ran this test with mysql and lots of tests failed. That is because mysql put single quotes around values. I had no idea that single quote vs double quotes matter. I guess quote can be patched to accept parameter then this might work.


Question:

Do all databases(sqlite3, mysql, postgresql, oracle) support having double quotes around order by values?</body>
      <body-html>&lt;div&gt;&lt;p&gt;In query_methods.rb in ActiveRecord you can do following&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def order(*args)
  clone.tap { |r| r.order_values += args if args.present? }
  #clone.tap { |r| r.order_values += args.collect {|e| connection.quote(e)} if args.present? }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;commented out code is the change I did.&lt;/p&gt;
&lt;p&gt;I ran this test with mysql and lots of tests failed. That is
because mysql put single quotes around values. I had no idea that
single quote vs double quotes matter. I guess quote can be patched
to accept parameter then this might work.&lt;/p&gt;
&lt;p&gt;Question:&lt;/p&gt;
&lt;p&gt;Do all databases(sqlite3, mysql, postgresql, oracle) support
having double quotes around order by values?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T03:28:07+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-07-13T03:28:08+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I just noticed that this page:
http://wiki.rubyonrails.org/rails/pages/reservedwords

Which advises against using any sql reserved words for column names. So, I wouldn't say that people should expect this to work. I guess it's worth an easy fix if there is one but maybe not worth tearing up much of the ActiveRelation code if that's what it takes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just noticed that this page:&lt;br&gt;
&lt;a href=
&quot;http://wiki.rubyonrails.org/rails/pages/reservedwords&quot;&gt;http://wiki.rubyonrails.org/rails/pages/reservedwords&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which advises against using any sql reserved words for column
names. So, I wouldn't say that people should expect this to work. I
guess it's worth an easy fix if there is one but maybe not worth
tearing up much of the ActiveRelation code if that's what it
takes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T22:18:52+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-07-13T22:18:54+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">7</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It will take a lot of work to fix it and even then it would be flaky. It is best to not to use reserved words.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It will take a lot of work to fix it and even then it would be
flaky. It is best to not to use reserved words.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-05T04:07:10+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-08-05T04:07:12+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">8</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I guess I'm just surprised this is such a difficult fix, since the double quotes are already used earlier in the SQL statement in the SELECT block. There's no reason not to apply them, even if the word is not reserved.

But then again, I'm not intimately familiar with how ActiveRelation and ActiveRecord work internally, so I'll have to take you at your word that this is not as easy as it seems to me. I changed my column name anyway, so I'm no longer hindered by this.

Thanks for the response.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I guess I'm just surprised this is such a difficult fix, since
the double quotes are already used earlier in the SQL statement in
the SELECT block. There's no reason not to apply them, even if the
word is not reserved.&lt;/p&gt;
&lt;p&gt;But then again, I'm not intimately familiar with how
ActiveRelation and ActiveRecord work internally, so I'll have to
take you at your word that this is not as easy as it seems to me. I
changed my column name anyway, so I'm no longer hindered by
this.&lt;/p&gt;
&lt;p&gt;Thanks for the response.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-05T04:32:56+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-08-05T04:32:58+01:00</updated-at>
      <user-id type="integer">37373</user-id>
      <version type="integer">9</version>
      <user-name>Matt Moriarity</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The thing that makes it difficult is that the order by parameter can be any sql expression, so you'd have to try to parse it, not just throw quotes around it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The thing that makes it difficult is that the order by parameter
can be any sql expression, so you'd have to try to parse it, not
just throw quotes around it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-05T04:45:48+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-08-05T04:45:49+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">10</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Perhaps it could be quoted automatically only if the user provided a symbol as the parameter.

For instance, List.order(:order) would generate '... ORDER BY &quot;order&quot;' but List.order('order') would generate '... ORDER BY order'</body>
      <body-html>&lt;div&gt;&lt;p&gt;Perhaps it could be quoted automatically only if the user
provided a symbol as the parameter.&lt;/p&gt;
&lt;p&gt;For instance, List.order(:order) would generate '... ORDER BY
&quot;order&quot;' but List.order('order') would generate '... ORDER BY
order'&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-05T20:47:59+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-08-05T20:48:01+01:00</updated-at>
      <user-id type="integer">37373</user-id>
      <version type="integer">11</version>
      <user-name>Matt Moriarity</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm inclined to agree with Neeraj here. For the sake of simplicity and maintainability it's better to ask people to avoid used reserved SQL words as field names.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm inclined to agree with Neeraj here. For the sake of
simplicity and maintainability it's better to ask people to avoid
used reserved SQL words as field names.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-05T20:53:18+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-08-05T20:53:19+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">12</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Alright, it was worth a shot. Still loving Rails 3 anyway!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Alright, it was worth a shot. Still loving Rails 3 anyway!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-05T20:54:20+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-08-05T20:54:23+01:00</updated-at>
      <user-id type="integer">37373</user-id>
      <version type="integer">13</version>
      <user-name>Matt Moriarity</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If rails start supporting usage of reserved words then hundreds of test cases need to be added to ensure that rails through and through works with reserved words. Just not worth the effort in my opinion.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If rails start supporting usage of reserved words then hundreds
of test cases need to be added to ensure that rails through and
through works with reserved words. Just not worth the effort in my
opinion.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-05T20:56:48+01:00</created-at>
      <creator-id type="integer">37373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5094</number>
      <permalink>activerelation-doesnt-quote-columns-that-are-sql-keywords</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;activerecord rails3&quot; activerelation</tag>
      <title>ActiveRelation doesn't quote columns that are SQL keywords</title>
      <updated-at type="datetime">2010-08-05T20:56:49+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">14</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Matt Moriarity</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5094</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
