From 6badfd55fe682d7ce7c9908783b0f945aed810b0 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 00:34:57 -0500
Subject: [PATCH] Adding #environment to template runner - Allows adding of top level config to the Rails::Initializer block

---
 .../generators/applications/app/template_runner.rb |   12 ++++++++++--
 1 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/railties/lib/rails_generator/generators/applications/app/template_runner.rb b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
index c611364..59797c6 100644
--- a/railties/lib/rails_generator/generators/applications/app/template_runner.rb
+++ b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
@@ -85,17 +85,25 @@ module Rails
     def gem(name, options = {})
       puts "adding gem #{name}"
 
-      sentinel = 'Rails::Initializer.run do |config|'
       gems_code = "config.gem '#{name}'"
 
       if options.any?
         opts = options.inject([]) {|result, h| result << [":#{h[0]} => '#{h[1]}'"] }.join(", ")
         gems_code << ", #{opts}"
       end
+      
+      environment gems_code
+    end
+    
+    # Adds a line inside the Initializer block for config/environment.rb. Used by #gem
+    def environment(data = nil, &block_given)
+      sentinel = 'Rails::Initializer.run do |config|'
+      
+      data = block.call if !data && block_given?
 
       in_root do
         gsub_file 'config/environment.rb', /(#{Regexp.escape(sentinel)})/mi do |match|
-          "#{match}\n  #{gems_code}"
+          "#{match}\n " << data << "\n"
         end
       end
     end
-- 
1.6.0.2


From 62c4289e9ea0bd650d89d6f56ab332a1f309dee9 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 01:19:18 -0500
Subject: [PATCH] Removing trailing retun

---
 .../generators/applications/app/template_runner.rb |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/railties/lib/rails_generator/generators/applications/app/template_runner.rb b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
index 59797c6..866fd7b 100644
--- a/railties/lib/rails_generator/generators/applications/app/template_runner.rb
+++ b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
@@ -103,7 +103,7 @@ module Rails
 
       in_root do
         gsub_file 'config/environment.rb', /(#{Regexp.escape(sentinel)})/mi do |match|
-          "#{match}\n " << data << "\n"
+          "#{match}\n " << data
         end
       end
     end
-- 
1.6.0.2


From d4f8a56ac5523b07ca831c5c4d865eb2138d0974 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 12:38:40 -0500
Subject: [PATCH] Fix for require convention

---
 .../test/generators/rails_helper_generator_test.rb |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/railties/test/generators/rails_helper_generator_test.rb b/railties/test/generators/rails_helper_generator_test.rb
index 8d05f55..8ce1703 100644
--- a/railties/test/generators/rails_helper_generator_test.rb
+++ b/railties/test/generators/rails_helper_generator_test.rb
@@ -1,4 +1,4 @@
-require File.dirname(__FILE__) + '/generator_test_helper'
+require 'generators/generator_test_helper'
 
 class RailsHelperGeneratorTest < GeneratorTestCase
   def test_helper_generates_helper
-- 
1.6.0.2


From d47546a9990086095d835300c432997162acabe6 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 12:45:59 -0500
Subject: [PATCH] Added test file

---
 .../test/generators/rails_template_runner_test.rb  |   49 ++++++++++++++++++++
 1 files changed, 49 insertions(+), 0 deletions(-)
 create mode 100644 railties/test/generators/rails_template_runner_test.rb

diff --git a/railties/test/generators/rails_template_runner_test.rb b/railties/test/generators/rails_template_runner_test.rb
new file mode 100644
index 0000000..2ec8803
--- /dev/null
+++ b/railties/test/generators/rails_template_runner_test.rb
@@ -0,0 +1,49 @@
+require 'generators/generator_test_helper'
+
+uses_mocha 'Template Runner Tests' do
+  class RailsTemplateRunnerTest < GeneratorTestCase
+    
+    def setup
+      run_generator('app', RAILS_ROOT)
+    end
+    
+    
+
+    # def test_controller_generates_controller
+    #   run_generator('controller', %w(products))
+    # 
+    #   assert_generated_controller_for :products
+    #   assert_generated_functional_test_for :products
+    #   assert_generated_helper_for :products
+    #   assert_generated_helper_test_for :products
+    # end
+    # 
+    # def test_controller_generates_namespaced_controller
+    #   run_generator('controller', %w(admin::products))
+    # 
+    #   assert_generated_controller_for "admin::products"
+    #   assert_generated_functional_test_for "admin::products"
+    #   assert_generated_helper_for "admin::products"
+    #   assert_generated_helper_test_for "admin::products"
+    # end
+    # 
+    # def test_controller_generates_namespaced_and_not_namespaced_controllers
+    #   run_generator('controller', %w(products))
+    # 
+    #   # We have to require the generated helper to show the problem because
+    #   # the test helpers just check for generated files and contents but
+    #   # do not actually load them. But they have to be loaded (as in a real environment)
+    #   # to make the second generator run fail
+    #   require "#{RAILS_ROOT}/app/helpers/products_helper"
+    # 
+    #   assert_nothing_raised do
+    #     begin
+    #       run_generator('controller', %w(admin::products))
+    #     ensure
+    #       # cleanup
+    #       Object.send(:remove_const, :ProductsHelper)
+    #     end
+    #   end
+    # end
+  end
+end
\ No newline at end of file
-- 
1.6.0.2


From d896010119e699e69bbcecfb6bab3ba348b9f5f2 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 14:06:47 -0500
Subject: [PATCH] TemplateRunner should use the generator logger instead of puts

---
 .../generators/applications/app/template_runner.rb |   40 +++++++++++--------
 1 files changed, 23 insertions(+), 17 deletions(-)

diff --git a/railties/lib/rails_generator/generators/applications/app/template_runner.rb b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
index 866fd7b..ecc6b02 100644
--- a/railties/lib/rails_generator/generators/applications/app/template_runner.rb
+++ b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
@@ -7,16 +7,17 @@ require 'fileutils'
 
 module Rails
   class TemplateRunner
+    
     attr_reader :root
 
     def initialize(template, root = '') # :nodoc:
       @root = File.join(Dir.pwd, root)
 
-      puts "applying template: #{template}"
+      logger.log "applying template: #{template}"
 
       load_template(template)
 
-      puts "#{template} applied."
+      logger.log "#{template} applied."
     end
 
     def load_template(template)
@@ -24,6 +25,7 @@ module Rails
         code = open(template).read
         in_root { self.instance_eval(code) }
       rescue LoadError
+      rescue Errno::ENOENT
         raise "The template [#{template}] could not be loaded."
       end
     end
@@ -42,7 +44,7 @@ module Rails
     #   file("config/apach.conf", "your apache config")
     #
     def file(filename, data = nil, &block)
-      puts "creating file #{filename}"
+      logger.log "creating file #{filename}"
       dir, file = [File.dirname(filename), File.basename(filename)]
 
       inside(dir) do
@@ -66,7 +68,7 @@ module Rails
     #   plugin 'restful-authentication', :svn => 'svn://svnhub.com/technoweenie/restful-authentication/trunk'
     #
     def plugin(name, options)
-      puts "installing plugin #{name}"
+      logger.log "installing plugin #{name}"
 
       if options[:git] && options[:submodule]
         in_root do
@@ -77,13 +79,13 @@ module Rails
           `script/plugin install #{options[:svn] || options[:git]}`
         end
       else
-        puts "! no git or svn provided for #{name}.  skipping..."
+        logger.log "! no git or svn provided for #{name}.  skipping..."
       end
     end
 
     # Adds an entry into config/environment.rb for the supplied gem :
     def gem(name, options = {})
-      puts "adding gem #{name}"
+      logger.log "adding gem #{name}"
 
       gems_code = "config.gem '#{name}'"
 
@@ -119,11 +121,11 @@ module Rails
     def git(command = {})
       in_root do
         if command.is_a?(Symbol)
-          puts "running git #{command}"
+          logger.log "running git #{command}"
           Git.run(command.to_s)
         else
           command.each do |command, options|
-            puts "running git #{command} #{options}"
+            logger.log "running git #{command} #{options}"
             Git.run("#{command} #{options}")
           end
         end
@@ -143,7 +145,7 @@ module Rails
     #   vendor("foreign.rb", "# Foreign code is fun")
     #
     def vendor(filename, data = nil, &block)
-      puts "vendoring file #{filename}"
+      logger.log "vendoring file #{filename}"
       inside("vendor") do |folder|
         File.open("#{folder}/#{filename}", "w") do |f|
           if block_given?
@@ -167,7 +169,7 @@ module Rails
     #   lib("foreign.rb", "# Foreign code is fun")
     #
     def lib(filename, data = nil)
-      puts "add lib file #{filename}"
+      logger.log "add lib file #{filename}"
       inside("lib") do |folder|
         File.open("#{folder}/#{filename}", "w") do |f|
           if block_given?
@@ -198,7 +200,7 @@ module Rails
     #   rakefile("seed.rake", "puts 'im plantin ur seedz'")
     #
     def rakefile(filename, data = nil, &block)
-      puts "adding rakefile #{filename}"
+      logger.log "adding rakefile #{filename}"
       inside("lib/tasks") do |folder|
         File.open("#{folder}/#{filename}", "w") do |f|
           if block_given?
@@ -227,7 +229,7 @@ module Rails
     #   initializer("api.rb", "API_KEY = '123456'")
     #
     def initializer(filename, data = nil, &block)
-      puts "adding initializer #{filename}"
+      logger.log "adding initializer #{filename}"
       inside("config/initializers") do |folder|
         File.open("#{folder}/#{filename}", "w") do |f|
           if block_given?
@@ -248,7 +250,7 @@ module Rails
     #   generate(:authenticated, "user session")
     #
     def generate(what, *args)
-      puts "generating #{what}"
+      logger.log "generating #{what}"
       argument = args.map(&:to_s).flatten.join(" ")
 
       in_root { `#{root}/script/generate #{what} #{argument}` }
@@ -263,7 +265,7 @@ module Rails
     #   end
     #
     def run(command)
-      puts "executing #{command} from #{Dir.pwd}"
+      logger.log "executing #{command} from #{Dir.pwd}"
       `#{command}`
     end
 
@@ -276,7 +278,7 @@ module Rails
     #   rake("gems:install", :sudo => true)
     #
     def rake(command, options = {})
-      puts "running rake task #{command}"
+      logger.log "running rake task #{command}"
       env = options[:env] || 'development'
       sudo = options[:sudo] ? 'sudo ' : ''
       in_root { `#{sudo}rake #{command} RAILS_ENV=#{env}` }
@@ -299,7 +301,7 @@ module Rails
     #   freeze!
     #
     def freeze!(args = {})
-      puts "vendoring rails edge"
+      logger.log "vendoring rails edge"
       in_root { `rake rails:freeze:edge` }
     end
 
@@ -329,7 +331,7 @@ module Rails
     #   freeze! if ask("Should I freeze the latest Rails?") == "yes"
     #
     def ask(string)
-      puts string
+      logger.log string
       gets.strip
     end
 
@@ -376,5 +378,9 @@ module Rails
     def destination_path(relative_destination)
       File.join(root, relative_destination)
     end
+    
+    def logger
+      Rails::Generator::Base.logger
+    end
   end
 end
\ No newline at end of file
-- 
1.6.0.2


From e4e82183f26e771417b84230a7cd32f86c96830f Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 14:21:19 -0500
Subject: [PATCH] Added first tests for template runner
 Rewiring template runner to send messages to logger

---
 .../generators/applications/app/template_runner.rb |   43 +++++++++++---------
 .../test/generators/rails_template_runner_test.rb  |   33 ++++++++++++++-
 2 files changed, 55 insertions(+), 21 deletions(-)

diff --git a/railties/lib/rails_generator/generators/applications/app/template_runner.rb b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
index ecc6b02..c5f2a41 100644
--- a/railties/lib/rails_generator/generators/applications/app/template_runner.rb
+++ b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
@@ -9,15 +9,16 @@ module Rails
   class TemplateRunner
     
     attr_reader :root
-
+    attr_writer :logger
+    
     def initialize(template, root = '') # :nodoc:
       @root = File.join(Dir.pwd, root)
 
-      logger.log "applying template: #{template}"
+      log "applying template: #{template}"
 
       load_template(template)
 
-      logger.log "#{template} applied."
+      log "#{template} applied."
     end
 
     def load_template(template)
@@ -44,7 +45,7 @@ module Rails
     #   file("config/apach.conf", "your apache config")
     #
     def file(filename, data = nil, &block)
-      logger.log "creating file #{filename}"
+      log "creating file #{filename}"
       dir, file = [File.dirname(filename), File.basename(filename)]
 
       inside(dir) do
@@ -68,7 +69,7 @@ module Rails
     #   plugin 'restful-authentication', :svn => 'svn://svnhub.com/technoweenie/restful-authentication/trunk'
     #
     def plugin(name, options)
-      logger.log "installing plugin #{name}"
+      log "installing plugin #{name}"
 
       if options[:git] && options[:submodule]
         in_root do
@@ -79,13 +80,13 @@ module Rails
           `script/plugin install #{options[:svn] || options[:git]}`
         end
       else
-        logger.log "! no git or svn provided for #{name}.  skipping..."
+        log "! no git or svn provided for #{name}.  skipping..."
       end
     end
 
     # Adds an entry into config/environment.rb for the supplied gem :
     def gem(name, options = {})
-      logger.log "adding gem #{name}"
+      log "adding gem #{name}"
 
       gems_code = "config.gem '#{name}'"
 
@@ -121,11 +122,11 @@ module Rails
     def git(command = {})
       in_root do
         if command.is_a?(Symbol)
-          logger.log "running git #{command}"
+          log "running git #{command}"
           Git.run(command.to_s)
         else
           command.each do |command, options|
-            logger.log "running git #{command} #{options}"
+            log "running git #{command} #{options}"
             Git.run("#{command} #{options}")
           end
         end
@@ -145,7 +146,7 @@ module Rails
     #   vendor("foreign.rb", "# Foreign code is fun")
     #
     def vendor(filename, data = nil, &block)
-      logger.log "vendoring file #{filename}"
+      log "vendoring file #{filename}"
       inside("vendor") do |folder|
         File.open("#{folder}/#{filename}", "w") do |f|
           if block_given?
@@ -169,7 +170,7 @@ module Rails
     #   lib("foreign.rb", "# Foreign code is fun")
     #
     def lib(filename, data = nil)
-      logger.log "add lib file #{filename}"
+      log "add lib file #{filename}"
       inside("lib") do |folder|
         File.open("#{folder}/#{filename}", "w") do |f|
           if block_given?
@@ -200,7 +201,7 @@ module Rails
     #   rakefile("seed.rake", "puts 'im plantin ur seedz'")
     #
     def rakefile(filename, data = nil, &block)
-      logger.log "adding rakefile #{filename}"
+      log "adding rakefile #{filename}"
       inside("lib/tasks") do |folder|
         File.open("#{folder}/#{filename}", "w") do |f|
           if block_given?
@@ -229,7 +230,7 @@ module Rails
     #   initializer("api.rb", "API_KEY = '123456'")
     #
     def initializer(filename, data = nil, &block)
-      logger.log "adding initializer #{filename}"
+      log "adding initializer #{filename}"
       inside("config/initializers") do |folder|
         File.open("#{folder}/#{filename}", "w") do |f|
           if block_given?
@@ -250,7 +251,7 @@ module Rails
     #   generate(:authenticated, "user session")
     #
     def generate(what, *args)
-      logger.log "generating #{what}"
+      log "generating #{what}"
       argument = args.map(&:to_s).flatten.join(" ")
 
       in_root { `#{root}/script/generate #{what} #{argument}` }
@@ -265,7 +266,7 @@ module Rails
     #   end
     #
     def run(command)
-      logger.log "executing #{command} from #{Dir.pwd}"
+      log "executing #{command} from #{Dir.pwd}"
       `#{command}`
     end
 
@@ -278,7 +279,7 @@ module Rails
     #   rake("gems:install", :sudo => true)
     #
     def rake(command, options = {})
-      logger.log "running rake task #{command}"
+      log "running rake task #{command}"
       env = options[:env] || 'development'
       sudo = options[:sudo] ? 'sudo ' : ''
       in_root { `#{sudo}rake #{command} RAILS_ENV=#{env}` }
@@ -301,7 +302,7 @@ module Rails
     #   freeze!
     #
     def freeze!(args = {})
-      logger.log "vendoring rails edge"
+      log 'vendoring rails edge'
       in_root { `rake rails:freeze:edge` }
     end
 
@@ -331,7 +332,7 @@ module Rails
     #   freeze! if ask("Should I freeze the latest Rails?") == "yes"
     #
     def ask(string)
-      logger.log string
+      log string
       gets.strip
     end
 
@@ -378,9 +379,13 @@ module Rails
     def destination_path(relative_destination)
       File.join(root, relative_destination)
     end
+   
+    def log(message, status = '')
+      logger.log(status, message) 
+    end
     
     def logger
-      Rails::Generator::Base.logger
+      @logger ||= Rails::Generator::Base.logger
     end
   end
 end
\ No newline at end of file
diff --git a/railties/test/generators/rails_template_runner_test.rb b/railties/test/generators/rails_template_runner_test.rb
index 2ec8803..5b9f2b7 100644
--- a/railties/test/generators/rails_template_runner_test.rb
+++ b/railties/test/generators/rails_template_runner_test.rb
@@ -1,14 +1,38 @@
 require 'generators/generator_test_helper'
+require 'abstract_unit'
 
 uses_mocha 'Template Runner Tests' do
   class RailsTemplateRunnerTest < GeneratorTestCase
     
     def setup
-      run_generator('app', RAILS_ROOT)
+      Rails::Generator::Base.use_application_sources!
+      run_generator('app', [RAILS_ROOT])
+      # generate empty template 
+      @template_path = File.join(RAILS_ROOT, 'template.rb')
+      File.open(File.join(@template_path), 'w') {|f| f << '' }
     end
     
+    def teardown
+      super
+      rm_rf "#{RAILS_ROOT}/README"
+      rm_rf "#{RAILS_ROOT}/Rakefile"
+      rm_rf "#{RAILS_ROOT}/doc"
+      rm_rf "#{RAILS_ROOT}/log"
+      rm_rf "#{RAILS_ROOT}/script"
+      rm_rf @template_path
+    end
+    
+    def test_initialize_should_load_template
+      Rails::TemplateRunner.any_instance.expects(:load_template).with(@template_path)
+      Rails::TemplateRunner.new(@template_path, RAILS_ROOT)
+    end
+    
+    def test_initialize_should_raise_error_on_missing_template_file
+      assert_raise(RuntimeError) do
+        Rails::TemplateRunner.new('non/existent/path/to/template.rb', RAILS_ROOT)
+      end
+    end
     
-
     # def test_controller_generates_controller
     #   run_generator('controller', %w(products))
     # 
@@ -45,5 +69,10 @@ uses_mocha 'Template Runner Tests' do
     #     end
     #   end
     # end
+    
+    protected
+
+    
+    
   end
 end
\ No newline at end of file
-- 
1.6.0.2


From 989cb99a5e2faf1264bb09bc2eff5a3815d73796 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 14:24:37 -0500
Subject: [PATCH] Using silence_generator to capture runner output

---
 .../test/generators/rails_template_runner_test.rb  |    8 ++++++--
 1 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/railties/test/generators/rails_template_runner_test.rb b/railties/test/generators/rails_template_runner_test.rb
index 5b9f2b7..0d280d7 100644
--- a/railties/test/generators/rails_template_runner_test.rb
+++ b/railties/test/generators/rails_template_runner_test.rb
@@ -24,12 +24,16 @@ uses_mocha 'Template Runner Tests' do
     
     def test_initialize_should_load_template
       Rails::TemplateRunner.any_instance.expects(:load_template).with(@template_path)
-      Rails::TemplateRunner.new(@template_path, RAILS_ROOT)
+      silence_generator do
+        Rails::TemplateRunner.new(@template_path, RAILS_ROOT)
+      end
     end
     
     def test_initialize_should_raise_error_on_missing_template_file
       assert_raise(RuntimeError) do
-        Rails::TemplateRunner.new('non/existent/path/to/template.rb', RAILS_ROOT)
+        silence_generator do
+          Rails::TemplateRunner.new('non/existent/path/to/template.rb', RAILS_ROOT)
+        end
       end
     end
     
-- 
1.6.0.2


From d253051e02b3c861686ec0d7100c3a32c9ab43f2 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 15:01:17 -0500
Subject: [PATCH] Created full test skeleton for template runner

---
 .../generators/applications/app/template_runner.rb |    8 +-
 .../test/generators/rails_template_runner_test.rb  |  142 ++++++++++++++-----
 2 files changed, 108 insertions(+), 42 deletions(-)

diff --git a/railties/lib/rails_generator/generators/applications/app/template_runner.rb b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
index c5f2a41..7a31a4a 100644
--- a/railties/lib/rails_generator/generators/applications/app/template_runner.rb
+++ b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
@@ -12,7 +12,7 @@ module Rails
     attr_writer :logger
     
     def initialize(template, root = '') # :nodoc:
-      @root = File.join(Dir.pwd, root)
+      @root = File.directory?(root) ? root : File.join(Dir.pwd, root)
 
       log "applying template: #{template}"
 
@@ -77,7 +77,7 @@ module Rails
         end
       elsif options[:git] || options[:svn]
         in_root do
-          `script/plugin install #{options[:svn] || options[:git]}`
+          run("script/plugin install #{options[:svn] || options[:git]}", false)
         end
       else
         log "! no git or svn provided for #{name}.  skipping..."
@@ -265,8 +265,8 @@ module Rails
     #     run('ln -s ~/edge rails)
     #   end
     #
-    def run(command)
-      log "executing #{command} from #{Dir.pwd}"
+    def run(command, log_action = true)
+      log "executing #{command} from #{Dir.pwd}" if log_action
       `#{command}`
     end
 
diff --git a/railties/test/generators/rails_template_runner_test.rb b/railties/test/generators/rails_template_runner_test.rb
index 0d280d7..866c09d 100644
--- a/railties/test/generators/rails_template_runner_test.rb
+++ b/railties/test/generators/rails_template_runner_test.rb
@@ -17,6 +17,7 @@ uses_mocha 'Template Runner Tests' do
       rm_rf "#{RAILS_ROOT}/README"
       rm_rf "#{RAILS_ROOT}/Rakefile"
       rm_rf "#{RAILS_ROOT}/doc"
+      rm_rf "#{RAILS_ROOT}/lib"
       rm_rf "#{RAILS_ROOT}/log"
       rm_rf "#{RAILS_ROOT}/script"
       rm_rf @template_path
@@ -37,46 +38,111 @@ uses_mocha 'Template Runner Tests' do
       end
     end
     
-    # def test_controller_generates_controller
-    #   run_generator('controller', %w(products))
-    # 
-    #   assert_generated_controller_for :products
-    #   assert_generated_functional_test_for :products
-    #   assert_generated_helper_for :products
-    #   assert_generated_helper_test_for :products
-    # end
-    # 
-    # def test_controller_generates_namespaced_controller
-    #   run_generator('controller', %w(admin::products))
-    # 
-    #   assert_generated_controller_for "admin::products"
-    #   assert_generated_functional_test_for "admin::products"
-    #   assert_generated_helper_for "admin::products"
-    #   assert_generated_helper_test_for "admin::products"
-    # end
-    # 
-    # def test_controller_generates_namespaced_and_not_namespaced_controllers
-    #   run_generator('controller', %w(products))
-    # 
-    #   # We have to require the generated helper to show the problem because
-    #   # the test helpers just check for generated files and contents but
-    #   # do not actually load them. But they have to be loaded (as in a real environment)
-    #   # to make the second generator run fail
-    #   require "#{RAILS_ROOT}/app/helpers/products_helper"
-    # 
-    #   assert_nothing_raised do
-    #     begin
-    #       run_generator('controller', %w(admin::products))
-    #     ensure
-    #       # cleanup
-    #       Object.send(:remove_const, :ProductsHelper)
-    #     end
-    #   end
-    # end
+    def test_file_should_write_data_to_file_path
+      run_template_method(:file, 'lib/test_file.rb', 'heres test data')
+      assert_generated_file 'lib/test_file.rb' do |body|
+        assert_equal 'heres test data', body
+      end
+    end
     
-    protected
-
+    def test_file_should_write_block_contents_to_file_path
+      run_template_method(:file, 'lib/test_file.rb') { 'heres block data' }
+      assert_generated_file 'lib/test_file.rb' do |body|
+        assert_equal 'heres block data', body
+      end
+    end
+    
+    def test_plugin_with_git_option_should_run_plugin_install
+      
+    end
+    
+    def test_plugin_with_git_option_and_submodule_should_use_git_submodule
+      
+    end
+    
+    def test_plugin_with_svn_option_should_run_plugin_install
+      
+    end
+    
+    def test_plugin_with_no_options_should_skip_method
+      
+    end
+    
+    def test_gem_should_put_gem_dependency_in_enviroment
+      
+    end
+    
+    def test_gem_with_options_should_include_options_in_gem_dependency_in_environment
+      
+    end
+    
+    def test_environment_should_include_data_in_environment_initializer_block
+      
+    end
+    
+    def test_environment_with_block_should_include_block_contents_in_environment_initializer_block
+      
+    end
+    
+    def test_git_with_symbol_should_run_command_using_git_scm
+      
+    end
+    
+    def test_git_with_hash_should_run_each_command_using_git_scm
+      
+    end
     
+    def test_vendor_should_write_data_to_file_in_vendor
+      
+    end
+    
+    def test_lib_should_write_data_to_file_in_lib
+      
+    end
+    
+    def test_rakefile_should_write_date_to_file_in_lib_tasks
+      
+    end
+    
+    def test_initializer_should_write_date_to_file_in_config_initializers
+      
+    end
+    
+    def test_generate_should_run_script_generate_with_argument_and_options
+      
+    end
+    
+    def test_rake_should_run_rake_command_with_development_env
+      
+    end
+    
+    def test_rake_with_env_option_should_run_rake_command_in_env
+      
+    end
+    
+    def test_rake_with_sudo_option_should_run_rake_command_with_sudo
+      
+    end
+    
+    def test_capify_should_run_the_capify_command
+      
+    end
+    
+    def test_freeze_should_freeze_rails_edge
+      
+    end
+    
+    def test_route_should_add_data_to_the_routes_block_in_config_routes
+      
+    end
+    
+    protected
+    def run_template_method(method_name, *args, &block)
+      silence_generator do
+        @template_runner = Rails::TemplateRunner.new(@template_path, RAILS_ROOT)
+        @template_runner.send(method_name, *args, &block)
+      end
+    end
     
   end
 end
\ No newline at end of file
-- 
1.6.0.2


From c91a26dddde8d4377581fa5e9769874032b0cea8 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 15:33:52 -0500
Subject: [PATCH] More tests filled in

---
 .../test/generators/rails_template_runner_test.rb  |   29 +++++++++++++------
 1 files changed, 20 insertions(+), 9 deletions(-)

diff --git a/railties/test/generators/rails_template_runner_test.rb b/railties/test/generators/rails_template_runner_test.rb
index 866c09d..8caf6bc 100644
--- a/railties/test/generators/rails_template_runner_test.rb
+++ b/railties/test/generators/rails_template_runner_test.rb
@@ -1,5 +1,5 @@
-require 'generators/generator_test_helper'
 require 'abstract_unit'
+require 'generators/generator_test_helper'
 
 uses_mocha 'Template Runner Tests' do
   class RailsTemplateRunnerTest < GeneratorTestCase
@@ -10,6 +10,9 @@ uses_mocha 'Template Runner Tests' do
       # generate empty template 
       @template_path = File.join(RAILS_ROOT, 'template.rb')
       File.open(File.join(@template_path), 'w') {|f| f << '' }
+      
+      @git_plugin_uri = 'git://github.com/technoweenie/restful-authentication.git'
+      @svn_plugin_uri = 'svn://svnhub.com/technoweenie/restful-authentication/trunk'
     end
     
     def teardown
@@ -20,6 +23,7 @@ uses_mocha 'Template Runner Tests' do
       rm_rf "#{RAILS_ROOT}/lib"
       rm_rf "#{RAILS_ROOT}/log"
       rm_rf "#{RAILS_ROOT}/script"
+      rm_rf "#{RAILS_ROOT}/vendor"
       rm_rf @template_path
     end
     
@@ -53,19 +57,23 @@ uses_mocha 'Template Runner Tests' do
     end
     
     def test_plugin_with_git_option_should_run_plugin_install
-      
-    end
-    
-    def test_plugin_with_git_option_and_submodule_should_use_git_submodule
-      
+      expects_run_with_command("script/plugin install #{@git_plugin_uri}")
+      run_template_method(:plugin, 'restful-authentication', :git => @git_plugin_uri)
     end
-    
+  
     def test_plugin_with_svn_option_should_run_plugin_install
-      
+      expects_run_with_command("script/plugin install #{@svn_plugin_uri}")
+      run_template_method(:plugin, 'restful-authentication', :svn => @svn_plugin_uri)
     end
     
-    def test_plugin_with_no_options_should_skip_method
+    def test_plugin_with_git_option_and_submodule_should_use_git_scm
+      Rails::Git.expects(:run).with("submodule add #{@git_plugin_uri} vendor/plugins/rest_auth")
+      run_template_method(:plugin, 'rest_auth', :git => @git_plugin_uri, :submodule => true)
+    end
       
+    def test_plugin_with_no_options_should_skip_method
+      Rails::TemplateRunner.any_instance.expects(:run).never
+      run_template_method(:plugin, 'rest_auth', {})
     end
     
     def test_gem_should_put_gem_dependency_in_enviroment
@@ -144,5 +152,8 @@ uses_mocha 'Template Runner Tests' do
       end
     end
     
+    def expects_run_with_command(command)
+      Rails::TemplateRunner.any_instance.expects(:run).with(command, false)
+    end
   end
 end
\ No newline at end of file
-- 
1.6.0.2


From 58c343ed8ed89d5d3dc5a2a2525736e1495a81a4 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 16:09:53 -0500
Subject: [PATCH] Continuing to fill out tests for template runner

---
 .../generators/applications/app/template_runner.rb |    2 +-
 .../test/generators/rails_template_runner_test.rb  |  132 ++++++++++++--------
 2 files changed, 80 insertions(+), 54 deletions(-)

diff --git a/railties/lib/rails_generator/generators/applications/app/template_runner.rb b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
index 7a31a4a..3376c2d 100644
--- a/railties/lib/rails_generator/generators/applications/app/template_runner.rb
+++ b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
@@ -99,7 +99,7 @@ module Rails
     end
     
     # Adds a line inside the Initializer block for config/environment.rb. Used by #gem
-    def environment(data = nil, &block_given)
+    def environment(data = nil, &block)
       sentinel = 'Rails::Initializer.run do |config|'
       
       data = block.call if !data && block_given?
diff --git a/railties/test/generators/rails_template_runner_test.rb b/railties/test/generators/rails_template_runner_test.rb
index 8caf6bc..8efc387 100644
--- a/railties/test/generators/rails_template_runner_test.rb
+++ b/railties/test/generators/rails_template_runner_test.rb
@@ -3,18 +3,18 @@ require 'generators/generator_test_helper'
 
 uses_mocha 'Template Runner Tests' do
   class RailsTemplateRunnerTest < GeneratorTestCase
-    
+
     def setup
       Rails::Generator::Base.use_application_sources!
       run_generator('app', [RAILS_ROOT])
       # generate empty template 
       @template_path = File.join(RAILS_ROOT, 'template.rb')
       File.open(File.join(@template_path), 'w') {|f| f << '' }
-      
+
       @git_plugin_uri = 'git://github.com/technoweenie/restful-authentication.git'
       @svn_plugin_uri = 'svn://svnhub.com/technoweenie/restful-authentication/trunk'
     end
-    
+
     def teardown
       super
       rm_rf "#{RAILS_ROOT}/README"
@@ -24,16 +24,17 @@ uses_mocha 'Template Runner Tests' do
       rm_rf "#{RAILS_ROOT}/log"
       rm_rf "#{RAILS_ROOT}/script"
       rm_rf "#{RAILS_ROOT}/vendor"
+      rm_rf "#{RAILS_ROOT}/tmp"
       rm_rf @template_path
     end
-    
+
     def test_initialize_should_load_template
       Rails::TemplateRunner.any_instance.expects(:load_template).with(@template_path)
       silence_generator do
         Rails::TemplateRunner.new(@template_path, RAILS_ROOT)
       end
     end
-    
+
     def test_initialize_should_raise_error_on_missing_template_file
       assert_raise(RuntimeError) do
         silence_generator do
@@ -41,109 +42,119 @@ uses_mocha 'Template Runner Tests' do
         end
       end
     end
-    
+
     def test_file_should_write_data_to_file_path
       run_template_method(:file, 'lib/test_file.rb', 'heres test data')
-      assert_generated_file 'lib/test_file.rb' do |body|
-        assert_equal 'heres test data', body
-      end
+      assert_generated_file_with_data 'lib/test_file.rb', 'heres test data'
     end
-    
+
     def test_file_should_write_block_contents_to_file_path
       run_template_method(:file, 'lib/test_file.rb') { 'heres block data' }
-      assert_generated_file 'lib/test_file.rb' do |body|
-        assert_equal 'heres block data', body
-      end
+      assert_generated_file_with_data 'lib/test_file.rb', 'heres block data'
     end
-    
+
     def test_plugin_with_git_option_should_run_plugin_install
       expects_run_with_command("script/plugin install #{@git_plugin_uri}")
       run_template_method(:plugin, 'restful-authentication', :git => @git_plugin_uri)
     end
-  
+
     def test_plugin_with_svn_option_should_run_plugin_install
       expects_run_with_command("script/plugin install #{@svn_plugin_uri}")
       run_template_method(:plugin, 'restful-authentication', :svn => @svn_plugin_uri)
     end
-    
+
     def test_plugin_with_git_option_and_submodule_should_use_git_scm
       Rails::Git.expects(:run).with("submodule add #{@git_plugin_uri} vendor/plugins/rest_auth")
       run_template_method(:plugin, 'rest_auth', :git => @git_plugin_uri, :submodule => true)
     end
-      
+
     def test_plugin_with_no_options_should_skip_method
       Rails::TemplateRunner.any_instance.expects(:run).never
       run_template_method(:plugin, 'rest_auth', {})
     end
-    
+
     def test_gem_should_put_gem_dependency_in_enviroment
-      
+      run_template_method(:gem, 'will-paginate')
+      assert_rails_initializer_includes("config.gem 'will-paginate'")
     end
-    
+
     def test_gem_with_options_should_include_options_in_gem_dependency_in_environment
-      
+      run_template_method(:gem, 'mislav-will-paginate', :lib => 'will-paginate', :source => 'http://gems.github.com')
+      assert_rails_initializer_includes("config.gem 'mislav-will-paginate', :source => 'http://gems.github.com', :lib => 'will-paginate'")
     end
-    
+
     def test_environment_should_include_data_in_environment_initializer_block
-      
+      load_paths = 'config.load_paths += %w["#{RAILS_ROOT}/app/extras"]'
+      run_template_method(:environment, load_paths)
+      assert_rails_initializer_includes(load_paths)
     end
-    
+
     def test_environment_with_block_should_include_block_contents_in_environment_initializer_block
-      
+      run_template_method(:environment) do
+        '# This wont be added'
+        '# This will be added'
+      end
+      assert_rails_initializer_includes('# This will be added')
     end
-    
+
     def test_git_with_symbol_should_run_command_using_git_scm
-      
+      Rails::Git.expects(:run).once.with('init')
+      run_template_method(:git, :init)
     end
-    
+
     def test_git_with_hash_should_run_each_command_using_git_scm
-      
+      Rails::Git.expects(:run).times(2)
+      run_template_method(:git, {:init => '', :add => '.'})
     end
-    
+
     def test_vendor_should_write_data_to_file_in_vendor
-      
+      run_template_method(:vendor, 'vendor_file.rb', '# vendor data')
+      assert_generated_file_with_data('vendor/vendor_file.rb', '# vendor data')
     end
-    
+
     def test_lib_should_write_data_to_file_in_lib
-      
+      run_template_method(:lib, 'my_library.rb', 'class MyLibrary')
+      assert_generated_file_with_data('lib/my_library.rb', 'class MyLibrary')
     end
-    
+
     def test_rakefile_should_write_date_to_file_in_lib_tasks
-      
+      run_template_method(:rakefile, 'myapp.rake', 'task :run => [:environment]')
+      assert_generated_file_with_data('lib/tasks/myapp.rake', 'task :run => [:environment]')
     end
-    
+
     def test_initializer_should_write_date_to_file_in_config_initializers
-      
+      run_template_method(:initializer, 'constants.rb', 'MY_CONSTANT = 42')
+      assert_generated_file_with_data('config/initializers/constants.rb', 'MY_CONSTANT = 42')
     end
-    
+
     def test_generate_should_run_script_generate_with_argument_and_options
-      
+
     end
-    
+
     def test_rake_should_run_rake_command_with_development_env
-      
+
     end
-    
+
     def test_rake_with_env_option_should_run_rake_command_in_env
-      
+
     end
-    
+
     def test_rake_with_sudo_option_should_run_rake_command_with_sudo
-      
+
     end
-    
+
     def test_capify_should_run_the_capify_command
-      
+
     end
-    
+
     def test_freeze_should_freeze_rails_edge
-      
+
     end
-    
+
     def test_route_should_add_data_to_the_routes_block_in_config_routes
-      
+
     end
-    
+
     protected
     def run_template_method(method_name, *args, &block)
       silence_generator do
@@ -151,9 +162,24 @@ uses_mocha 'Template Runner Tests' do
         @template_runner.send(method_name, *args, &block)
       end
     end
-    
+
     def expects_run_with_command(command)
       Rails::TemplateRunner.any_instance.expects(:run).with(command, false)
     end
+
+    def assert_rails_initializer_includes(data, message = nil)
+      message ||= "Rails::Initializer should include #{data}"
+      assert_generated_file 'config/environment.rb' do |body|
+        assert_match(/#{Regexp.escape("Rails::Initializer.run do |config|")}.+#{Regexp.escape(data)}.+end/m, body, message)
+      end
+    end
+    
+    def assert_generated_file_with_data(file, data, message = nil)
+      message ||= "#{file} should include '#{data}'"
+      assert_generated_file(file) do |file|
+        assert_match(/#{Regexp.escape(data)}/,file, message)
+      end
+    end
+    
   end
 end
\ No newline at end of file
-- 
1.6.0.2


From 8de5d67583cb060761a8228ce81941e51b6da0e4 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 16:42:17 -0500
Subject: [PATCH] Full test suite for Rails::TemplateRunner

---
 .../generators/applications/app/template_runner.rb |    9 ++++---
 .../test/generators/rails_template_runner_test.rb  |   25 +++++++++++++------
 2 files changed, 22 insertions(+), 12 deletions(-)

diff --git a/railties/lib/rails_generator/generators/applications/app/template_runner.rb b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
index 3376c2d..2675412 100644
--- a/railties/lib/rails_generator/generators/applications/app/template_runner.rb
+++ b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
@@ -254,7 +254,7 @@ module Rails
       log "generating #{what}"
       argument = args.map(&:to_s).flatten.join(" ")
 
-      in_root { `#{root}/script/generate #{what} #{argument}` }
+      in_root { run("script/generate #{what} #{argument}", false) }
     end
 
     # Executes a command
@@ -282,7 +282,7 @@ module Rails
       log "running rake task #{command}"
       env = options[:env] || 'development'
       sudo = options[:sudo] ? 'sudo ' : ''
-      in_root { `#{sudo}rake #{command} RAILS_ENV=#{env}` }
+      in_root { run("#{sudo}rake #{command} RAILS_ENV=#{env}", false) }
     end
 
     # Just run the capify command in root
@@ -292,7 +292,8 @@ module Rails
     #   capify!
     #
     def capify!
-      in_root { `capify .` }
+      log 'capifying'
+      in_root { run('capify .', false) }
     end
 
     # Add Rails to /vendor/rails
@@ -303,7 +304,7 @@ module Rails
     #
     def freeze!(args = {})
       log 'vendoring rails edge'
-      in_root { `rake rails:freeze:edge` }
+      in_root { run('rake rails:freeze:edge', false) }
     end
 
     # Make an entry in Rails routing file conifg/routes.rb
diff --git a/railties/test/generators/rails_template_runner_test.rb b/railties/test/generators/rails_template_runner_test.rb
index 8efc387..9589d23 100644
--- a/railties/test/generators/rails_template_runner_test.rb
+++ b/railties/test/generators/rails_template_runner_test.rb
@@ -25,6 +25,7 @@ uses_mocha 'Template Runner Tests' do
       rm_rf "#{RAILS_ROOT}/script"
       rm_rf "#{RAILS_ROOT}/vendor"
       rm_rf "#{RAILS_ROOT}/tmp"
+      rm_rf "#{RAILS_ROOT}/Capfile"
       rm_rf @template_path
     end
 
@@ -128,31 +129,39 @@ uses_mocha 'Template Runner Tests' do
     end
 
     def test_generate_should_run_script_generate_with_argument_and_options
-
+      expects_run_with_command('script/generate model MyModel')
+      run_template_method(:generate, 'model', 'MyModel')
     end
 
     def test_rake_should_run_rake_command_with_development_env
-
+      expects_run_with_command('rake log:clear RAILS_ENV=development')
+      run_template_method(:rake, 'log:clear')
     end
 
     def test_rake_with_env_option_should_run_rake_command_in_env
-
+      expects_run_with_command('rake log:clear RAILS_ENV=production')
+      run_template_method(:rake, 'log:clear', :env => 'production')
     end
 
     def test_rake_with_sudo_option_should_run_rake_command_with_sudo
-
+      expects_run_with_command('sudo rake log:clear RAILS_ENV=development')
+      run_template_method(:rake, 'log:clear', :sudo => true)
     end
 
     def test_capify_should_run_the_capify_command
-
+      expects_run_with_command('capify .')
+      run_template_method(:capify!)
     end
 
     def test_freeze_should_freeze_rails_edge
-
+      expects_run_with_command('rake rails:freeze:edge')
+      run_template_method(:freeze!)
     end
 
     def test_route_should_add_data_to_the_routes_block_in_config_routes
-
+      route_command = "map.route '/login', :controller => 'sessions', :action => 'new'"
+      run_template_method(:route, route_command)
+      assert_generated_file_with_data 'config/routes.rb', route_command
     end
 
     protected
@@ -164,7 +173,7 @@ uses_mocha 'Template Runner Tests' do
     end
 
     def expects_run_with_command(command)
-      Rails::TemplateRunner.any_instance.expects(:run).with(command, false)
+      Rails::TemplateRunner.any_instance.stubs(:run).once.with(command, false)
     end
 
     def assert_rails_initializer_includes(data, message = nil)
-- 
1.6.0.2


From f17a01cd07a9bd299563a12deba1fe3b30ed7de6 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 16:47:06 -0500
Subject: [PATCH] Refactored TemplateRunner #lib, #vendor, #rakefile, #initializer to use #file

---
 .../generators/applications/app/template_runner.rb |   46 +++-----------------
 1 files changed, 7 insertions(+), 39 deletions(-)

diff --git a/railties/lib/rails_generator/generators/applications/app/template_runner.rb b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
index 2675412..94e391b 100644
--- a/railties/lib/rails_generator/generators/applications/app/template_runner.rb
+++ b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
@@ -44,8 +44,8 @@ module Rails
     #
     #   file("config/apach.conf", "your apache config")
     #
-    def file(filename, data = nil, &block)
-      log "creating file #{filename}"
+    def file(filename, data = nil, log_action = true, &block)
+      log "creating file #{filename}" if log_action
       dir, file = [File.dirname(filename), File.basename(filename)]
 
       inside(dir) do
@@ -147,15 +147,7 @@ module Rails
     #
     def vendor(filename, data = nil, &block)
       log "vendoring file #{filename}"
-      inside("vendor") do |folder|
-        File.open("#{folder}/#{filename}", "w") do |f|
-          if block_given?
-            f.write(block.call)
-          else
-            f.write(data)
-          end
-        end
-      end
+      file("vendor/#{filename}", data, false, &block)
     end
 
     # Create a new file in the lib/ directory. Code can be specified
@@ -169,17 +161,9 @@ module Rails
     #
     #   lib("foreign.rb", "# Foreign code is fun")
     #
-    def lib(filename, data = nil)
+    def lib(filename, data = nil, &block)
       log "add lib file #{filename}"
-      inside("lib") do |folder|
-        File.open("#{folder}/#{filename}", "w") do |f|
-          if block_given?
-            f.write(block.call)
-          else
-            f.write(data)
-          end
-        end
-      end
+      file("lib/#{filename}", data, false, &block)
     end
 
     # Create a new Rakefile with the provided code (either in a block or a string).
@@ -202,15 +186,7 @@ module Rails
     #
     def rakefile(filename, data = nil, &block)
       log "adding rakefile #{filename}"
-      inside("lib/tasks") do |folder|
-        File.open("#{folder}/#{filename}", "w") do |f|
-          if block_given?
-            f.write(block.call)
-          else
-            f.write(data)
-          end
-        end
-      end
+      file("lib/tasks/#{filename}", data, false, &block)
     end
 
     # Create a new initializer with the provided code (either in a block or a string).
@@ -231,15 +207,7 @@ module Rails
     #
     def initializer(filename, data = nil, &block)
       log "adding initializer #{filename}"
-      inside("config/initializers") do |folder|
-        File.open("#{folder}/#{filename}", "w") do |f|
-          if block_given?
-            f.write(block.call)
-          else
-            f.write(data)
-          end
-        end
-      end
+      file("config/initializers/#{filename}", data, false, &block)
     end
 
     # Generate something using a generator from Rails or a plugin.
-- 
1.6.0.2

