From ecd451c73ecde2e355ebea5f8f3393706b843eaa Mon Sep 17 00:00:00 2001
From: Nik Wakelin <nik@codetocustomer.com>
Date: Sat, 2 Aug 2008 17:44:02 +1200
Subject: [PATCH] Added MigrationStub so that ActiveRecord::Migrator only loads classes it's actually going to run

---
 activerecord/lib/active_record/migration.rb |   35 +++++++++++++++++----------
 activerecord/test/cases/migration_test.rb   |   24 +++++++++++++++++-
 2 files changed, 44 insertions(+), 15 deletions(-)

diff --git a/activerecord/lib/active_record/migration.rb b/activerecord/lib/active_record/migration.rb
index 731a350..8ce0b82 100644
--- a/activerecord/lib/active_record/migration.rb
+++ b/activerecord/lib/active_record/migration.rb
@@ -348,7 +348,10 @@ module ActiveRecord
       end
     end
   end
-
+  
+  # Represents migrations prior to load
+  MigrationStub = Struct.new(:name, :version, :filename)
+  
   class Migrator#:nodoc:
     class << self
       def migrate(migrations_path, target_version = nil)
@@ -416,7 +419,10 @@ module ActiveRecord
       target = migrations.detect { |m| m.version == @target_version }
       raise UnknownMigrationVersionError.new(@target_version) if target.nil?
       unless (up? && migrated.include?(target.version.to_i)) || (down? && !migrated.include?(target.version.to_i))
-        target.migrate(@direction)
+        
+        migration = load_migration_stub(target)
+        
+        migration.migrate(@direction)
         record_version_state_after_migrating(target.version)
       end
     end
@@ -436,18 +442,20 @@ module ActiveRecord
       # skip the last migration if we're headed down, but not ALL the way down
       runnable.pop if down? && !target.nil?
       
-      runnable.each do |migration|
-        Base.logger.info "Migrating to #{migration} (#{migration.version})"
+      runnable.each do |migration_stub|
+        Base.logger.info "Migrating to #{migration_stub.name} (#{migration_stub.version})"
 
         # On our way up, we skip migrating the ones we've already migrated
         # On our way down, we skip reverting the ones we've never migrated
-        next if up? && migrated.include?(migration.version.to_i)
+        next if up? && migrated.include?(migration_stub.version.to_i)
 
-        if down? && !migrated.include?(migration.version.to_i)
+        migration = load_migration_stub(migration_stub)
+
+        if down? && !migrated.include?(migration_stub.version.to_i)
           migration.announce 'never migrated, skipping'; migration.write
         else
           migration.migrate(@direction)
-          record_version_state_after_migrating(migration.version)
+          record_version_state_after_migrating(migration_stub.version)
         end
       end
     end
@@ -470,12 +478,7 @@ module ActiveRecord
             raise DuplicateMigrationNameError.new(name.camelize) 
           end
           
-          load(file)
-          
-          klasses << returning(name.camelize.constantize) do |klass|
-            class << klass; attr_accessor :version end
-            klass.version = version
-          end
+          klasses << MigrationStub.new(name.camelize, version, file)
         end
         
         migrations = migrations.sort_by(&:version)
@@ -511,5 +514,11 @@ module ActiveRecord
       def down?
         @direction == :down
       end
+      
+      def load_migration_stub(stub)
+        load(stub.filename)
+        stub.name.constantize
+      end
+      
   end
 end
diff --git a/activerecord/test/cases/migration_test.rb b/activerecord/test/cases/migration_test.rb
index 7ecf755..0756c0c 100644
--- a/activerecord/test/cases/migration_test.rb
+++ b/activerecord/test/cases/migration_test.rb
@@ -14,7 +14,7 @@ if ActiveRecord::Base.connection.supports_migrations?
   class BigNumber < ActiveRecord::Base; end
 
   class Reminder < ActiveRecord::Base; end
-
+  
   class ActiveRecord::Migration
     class <<self
       attr_accessor :message_count
@@ -921,7 +921,27 @@ if ActiveRecord::Base.connection.supports_migrations?
       migrations[0].version == '3'
       migrations[0].name    == 'innocent_jointable'
     end
-
+    
+    def test_only_loads_pending_migrations
+      # migrate up to 1
+      ActiveRecord::Migrator.up(MIGRATIONS_ROOT + "/valid", 1)
+      
+      # now unload the migrations that have been defined
+      PeopleHaveLastNames.unloadable
+      ActiveSupport::Dependencies.remove_unloadable_constants!
+      
+      ActiveRecord::Migrator.migrate(MIGRATIONS_ROOT + "/valid", nil)        
+    
+      assert !defined? PeopleHaveLastNames
+      
+      %w(WeNeedReminders, InnocentJointable).each do |migration|
+        assert defined? migration
+      end
+      
+    ensure
+      load(MIGRATIONS_ROOT + "/valid/1_people_have_last_names.rb")
+    end
+     
     def test_migrator_interleaved_migrations
       ActiveRecord::Migrator.up(MIGRATIONS_ROOT + "/interleaved/pass_1")
 
-- 
1.5.6.1

