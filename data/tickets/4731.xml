<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-19T09:28:12+00:00</created-at>
  <creator-id type="integer">71387</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4731</number>
  <permalink>patch-fix-activesupportdependencies-removes-properly-loaded-classes-nested-in-autoloaded-modules</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>2-3-stable activesupport dependencies master patch</tag>
  <title>[PATCH] fix ActiveSupport::Dependencies removes properly loaded classes nested in autoloaded modules</title>
  <updated-at type="datetime">2011-03-26T02:35:50+00:00</updated-at>
  <user-id type="integer">142823</user-id>
  <version type="integer">7</version>
  <user-name>bingbing</user-name>
  <creator-name>Serge Balyuk</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4731</url>
  <priority-name nil="true"></priority-name>
  <original-body>I've discovered this under the following conditions:

 * `ApplicationController` has `helper :all` call (it requires all helper files right away)
 * some helpers are nested into `Admin` module, that module is autoloaded by directory name
 * one of helper files contains either syntax error or requires missing file, so that either `LoadError` or `SyntaxError` gets thrown.

Here, `application_controller.rb` can't be loaded because one of it's dependencies fails. This situation is handled by `new_constants_in` and partially loaded constants are removed. `Admin` autoloaded module is considered as such and gets removed along with all its nested modules, so all `Admin::*` helpers get removed.

The problem is that although helpers where removed, their paths still exist in `loaded` set. So subsequent load of `application_controller.rb` (for rescue handling) throws another exception which can be misleading. It blames the first `Admin::*` helper with a message like &quot;Expected app/helper/admin/some_helper.rb to define Admin::SomeHelper&quot;

Please find proposed fix attached. It changes logic so that autoloaded modules are not removed on load failure recovery. I hope that makes sense as such modules are created by dependencies mechanism and should not have partially loaded state.

Also, condition in `load_missing_constant` is checking `file_path` with `.rb` extension against `loaded` set which holds paths without those. I think that does not cause any problems because `require_or_load` contains another check which is correct. I've changed that line, however.

The other test case and fix is also related to autoloaded modules handling. If some namespace spans across reloadable and `load_once_paths`, and module was created by a directory name from reloadable set, it gets removed on reload despite the fact that it holds classes from `load_once_paths`.

Hope that makes some sense. I wonder if these changes can produce any undesired side effects. All existing tests pass however.

Thanks
Serge</original-body>
  <latest-body>I've discovered this under the following conditions:

 * `ApplicationController` has `helper :all` call (it requires all helper files right away)
 * some helpers are nested into `Admin` module, that module is autoloaded by directory name
 * one of helper files contains either syntax error or requires missing file, so that either `LoadError` or `SyntaxError` gets thrown.

Here, `application_controller.rb` can't be loaded because one of it's dependencies fails. This situation is handled by `new_constants_in` and partially loaded constants are removed. `Admin` autoloaded module is considered as such and gets removed along with all its nested modules, so all `Admin::*` helpers get removed.

The problem is that although helpers where removed, their paths still exist in `loaded` set. So subsequent load of `application_controller.rb` (for rescue handling) throws another exception which can be misleading. It blames the first `Admin::*` helper with a message like &quot;Expected app/helper/admin/some_helper.rb to define Admin::SomeHelper&quot;

Please find proposed fix attached. It changes logic so that autoloaded modules are not removed on load failure recovery. I hope that makes sense as such modules are created by dependencies mechanism and should not have partially loaded state.

Also, condition in `load_missing_constant` is checking `file_path` with `.rb` extension against `loaded` set which holds paths without those. I think that does not cause any problems because `require_or_load` contains another check which is correct. I've changed that line, however.

The other test case and fix is also related to autoloaded modules handling. If some namespace spans across reloadable and `load_once_paths`, and module was created by a directory name from reloadable set, it gets removed on reload despite the fact that it holds classes from `load_once_paths`.

Hope that makes some sense. I wonder if these changes can produce any undesired side effects. All existing tests pass however.

Thanks
Serge</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I've discovered this under the following conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ApplicationController&lt;/code&gt; has &lt;code&gt;helper :all&lt;/code&gt;
call (it requires all helper files right away)&lt;/li&gt;
&lt;li&gt;some helpers are nested into &lt;code&gt;Admin&lt;/code&gt; module, that
module is autoloaded by directory name&lt;/li&gt;
&lt;li&gt;one of helper files contains either syntax error or requires
missing file, so that either &lt;code&gt;LoadError&lt;/code&gt; or
&lt;code&gt;SyntaxError&lt;/code&gt; gets thrown.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here, &lt;code&gt;application_controller.rb&lt;/code&gt; can't be loaded
because one of it's dependencies fails. This situation is handled
by &lt;code&gt;new_constants_in&lt;/code&gt; and partially loaded constants are
removed. &lt;code&gt;Admin&lt;/code&gt; autoloaded module is considered as such
and gets removed along with all its nested modules, so all
&lt;code&gt;Admin::*&lt;/code&gt; helpers get removed.&lt;/p&gt;
&lt;p&gt;The problem is that although helpers where removed, their paths
still exist in &lt;code&gt;loaded&lt;/code&gt; set. So subsequent load of
&lt;code&gt;application_controller.rb&lt;/code&gt; (for rescue handling) throws
another exception which can be misleading. It blames the first
&lt;code&gt;Admin::*&lt;/code&gt; helper with a message like &quot;Expected
app/helper/admin/some_helper.rb to define Admin::SomeHelper&quot;&lt;/p&gt;
&lt;p&gt;Please find proposed fix attached. It changes logic so that
autoloaded modules are not removed on load failure recovery. I hope
that makes sense as such modules are created by dependencies
mechanism and should not have partially loaded state.&lt;/p&gt;
&lt;p&gt;Also, condition in &lt;code&gt;load_missing_constant&lt;/code&gt; is
checking &lt;code&gt;file_path&lt;/code&gt; with &lt;code&gt;.rb&lt;/code&gt; extension
against &lt;code&gt;loaded&lt;/code&gt; set which holds paths without those. I
think that does not cause any problems because
&lt;code&gt;require_or_load&lt;/code&gt; contains another check which is
correct. I've changed that line, however.&lt;/p&gt;
&lt;p&gt;The other test case and fix is also related to autoloaded
modules handling. If some namespace spans across reloadable and
&lt;code&gt;load_once_paths&lt;/code&gt;, and module was created by a directory
name from reloadable set, it gets removed on reload despite the
fact that it holds classes from &lt;code&gt;load_once_paths&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hope that makes some sense. I wonder if these changes can
produce any undesired side effects. All existing tests pass
however.&lt;/p&gt;
&lt;p&gt;Thanks&lt;br&gt;
Serge&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've discovered this under the following conditions:

 * `ApplicationController` has `helper :all` call (it requires all helper files right away)
 * some helpers are nested into `Admin` module, that module is autoloaded by directory name
 * one of helper files contains either syntax error or requires missing file, so that either `LoadError` or `SyntaxError` gets thrown.

Here, `application_controller.rb` can't be loaded because one of it's dependencies fails. This situation is handled by `new_constants_in` and partially loaded constants are removed. `Admin` autoloaded module is considered as such and gets removed along with all its nested modules, so all `Admin::*` helpers get removed.

The problem is that although helpers where removed, their paths still exist in `loaded` set. So subsequent load of `application_controller.rb` (for rescue handling) throws another exception which can be misleading. It blames the first `Admin::*` helper with a message like &quot;Expected app/helper/admin/some_helper.rb to define Admin::SomeHelper&quot;

Please find proposed fix attached. It changes logic so that autoloaded modules are not removed on load failure recovery. I hope that makes sense as such modules are created by dependencies mechanism and should not have partially loaded state.

Also, condition in `load_missing_constant` is checking `file_path` with `.rb` extension against `loaded` set which holds paths without those. I think that does not cause any problems because `require_or_load` contains another check which is correct. I've changed that line, however.

The other test case and fix is also related to autoloaded modules handling. If some namespace spans across reloadable and `load_once_paths`, and module was created by a directory name from reloadable set, it gets removed on reload despite the fact that it holds classes from `load_once_paths`.

Hope that makes some sense. I wonder if these changes can produce any undesired side effects. All existing tests pass however.

Thanks
Serge</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've discovered this under the following conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ApplicationController&lt;/code&gt; has &lt;code&gt;helper :all&lt;/code&gt;
call (it requires all helper files right away)&lt;/li&gt;
&lt;li&gt;some helpers are nested into &lt;code&gt;Admin&lt;/code&gt; module, that
module is autoloaded by directory name&lt;/li&gt;
&lt;li&gt;one of helper files contains either syntax error or requires
missing file, so that either &lt;code&gt;LoadError&lt;/code&gt; or
&lt;code&gt;SyntaxError&lt;/code&gt; gets thrown.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here, &lt;code&gt;application_controller.rb&lt;/code&gt; can't be loaded
because one of it's dependencies fails. This situation is handled
by &lt;code&gt;new_constants_in&lt;/code&gt; and partially loaded constants are
removed. &lt;code&gt;Admin&lt;/code&gt; autoloaded module is considered as such
and gets removed along with all its nested modules, so all
&lt;code&gt;Admin::*&lt;/code&gt; helpers get removed.&lt;/p&gt;
&lt;p&gt;The problem is that although helpers where removed, their paths
still exist in &lt;code&gt;loaded&lt;/code&gt; set. So subsequent load of
&lt;code&gt;application_controller.rb&lt;/code&gt; (for rescue handling) throws
another exception which can be misleading. It blames the first
&lt;code&gt;Admin::*&lt;/code&gt; helper with a message like &quot;Expected
app/helper/admin/some_helper.rb to define Admin::SomeHelper&quot;&lt;/p&gt;
&lt;p&gt;Please find proposed fix attached. It changes logic so that
autoloaded modules are not removed on load failure recovery. I hope
that makes sense as such modules are created by dependencies
mechanism and should not have partially loaded state.&lt;/p&gt;
&lt;p&gt;Also, condition in &lt;code&gt;load_missing_constant&lt;/code&gt; is
checking &lt;code&gt;file_path&lt;/code&gt; with &lt;code&gt;.rb&lt;/code&gt; extension
against &lt;code&gt;loaded&lt;/code&gt; set which holds paths without those. I
think that does not cause any problems because
&lt;code&gt;require_or_load&lt;/code&gt; contains another check which is
correct. I've changed that line, however.&lt;/p&gt;
&lt;p&gt;The other test case and fix is also related to autoloaded
modules handling. If some namespace spans across reloadable and
&lt;code&gt;load_once_paths&lt;/code&gt;, and module was created by a directory
name from reloadable set, it gets removed on reload despite the
fact that it holds classes from &lt;code&gt;load_once_paths&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hope that makes some sense. I wonder if these changes can
produce any undesired side effects. All existing tests pass
however.&lt;/p&gt;
&lt;p&gt;Thanks&lt;br&gt;
Serge&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-30T16:39:49+01:00</created-at>
      <creator-id type="integer">71387</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4731</number>
      <permalink>patch-fix-activesupportdependencies-removes-properly-loaded-classes-nested-in-autoloaded-modules</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activesupport dependencies master patch</tag>
      <title>[PAtCH] fix ActiveSupport::Dependencies removes properly loaded classes nested in autoloaded modules</title>
      <updated-at type="datetime">2010-05-30T16:39:59+01:00</updated-at>
      <user-id type="integer">71387</user-id>
      <version type="integer">1</version>
      <user-name>Serge Balyuk</user-name>
      <creator-name>Serge Balyuk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4731</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-01T08:13:33+01:00</created-at>
      <creator-id type="integer">71387</creator-id>
      <diffable-attributes type="yaml">--- 
:title: &quot;[PAtCH] fix ActiveSupport::Dependencies removes properly loaded classes nested in autoloaded modules&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4731</number>
      <permalink>patch-fix-activesupportdependencies-removes-properly-loaded-classes-nested-in-autoloaded-modules</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activesupport dependencies master patch</tag>
      <title>[PATCH] fix ActiveSupport::Dependencies removes properly loaded classes nested in autoloaded modules</title>
      <updated-at type="datetime">2010-06-01T08:13:39+01:00</updated-at>
      <user-id type="integer">71387</user-id>
      <version type="integer">2</version>
      <user-name>Serge Balyuk</user-name>
      <creator-name>Serge Balyuk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4731</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:51:53+00:00</created-at>
      <creator-id type="integer">71387</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4731</number>
      <permalink>patch-fix-activesupportdependencies-removes-properly-loaded-classes-nested-in-autoloaded-modules</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2-3-stable activesupport dependencies master patch</tag>
      <title>[PATCH] fix ActiveSupport::Dependencies removes properly loaded classes nested in autoloaded modules</title>
      <updated-at type="datetime">2011-02-02T18:23:58+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Serge Balyuk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4731</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:51:55+00:00</created-at>
      <creator-id type="integer">71387</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4731</number>
      <permalink>patch-fix-activesupportdependencies-removes-properly-loaded-classes-nested-in-autoloaded-modules</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2-3-stable activesupport dependencies master patch</tag>
      <title>[PATCH] fix ActiveSupport::Dependencies removes properly loaded classes nested in autoloaded modules</title>
      <updated-at type="datetime">2011-02-02T18:24:04+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Serge Balyuk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4731</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-17T06:08:17+00:00</created-at>
      <creator-id type="integer">71387</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4731</number>
      <permalink>patch-fix-activesupportdependencies-removes-properly-loaded-classes-nested-in-autoloaded-modules</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2-3-stable activesupport dependencies master patch</tag>
      <title>[PATCH] fix ActiveSupport::Dependencies removes properly loaded classes nested in autoloaded modules</title>
      <updated-at type="datetime">2011-02-17T06:48:11+00:00</updated-at>
      <user-id type="integer">137442</user-id>
      <version type="integer">5</version>
      <user-name>gfh</user-name>
      <creator-name>Serge Balyuk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4731</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T00:31:30+00:00</created-at>
      <creator-id type="integer">71387</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4731</number>
      <permalink>patch-fix-activesupportdependencies-removes-properly-loaded-classes-nested-in-autoloaded-modules</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2-3-stable activesupport dependencies master patch</tag>
      <title>[PATCH] fix ActiveSupport::Dependencies removes properly loaded classes nested in autoloaded modules</title>
      <updated-at type="datetime">2011-02-19T09:28:12+00:00</updated-at>
      <user-id type="integer">137759</user-id>
      <version type="integer">6</version>
      <user-name>mklo</user-name>
      <creator-name>Serge Balyuk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4731</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton
watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-26T02:10:42+00:00</created-at>
      <creator-id type="integer">71387</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4731</number>
      <permalink>patch-fix-activesupportdependencies-removes-properly-loaded-classes-nested-in-autoloaded-modules</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2-3-stable activesupport dependencies master patch</tag>
      <title>[PATCH] fix ActiveSupport::Dependencies removes properly loaded classes nested in autoloaded modules</title>
      <updated-at type="datetime">2011-03-26T02:35:50+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">7</version>
      <user-name>bingbing</user-name>
      <creator-name>Serge Balyuk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4731</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>a4372d16977aa46a779001c8bdfcc8b13177b0a3</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-05-30T16:39:49+01:00</created-at>
      <filename>master-dependencies-module-loading-fix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">540182</id>
      <size type="integer">7021</size>
      <uploader-id type="integer">71387</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/540182/master-dependencies-module-loading-fix.diff</url>
    </attachment>
  </attachments>
</ticket>
