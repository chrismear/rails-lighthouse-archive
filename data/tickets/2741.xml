<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-05-30T09:13:34+01:00</created-at>
  <creator-id type="integer">58394</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2741</number>
  <permalink>decimal-column-with-zero-scale-dumped-as-integer-column</permalink>
  <priority type="integer">1852</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>activerecord patch schema_dumper</tag>
  <title>Decimal column with zero scale dumped as integer column</title>
  <updated-at type="datetime">2009-06-01T02:47:54+01:00</updated-at>
  <user-id type="integer">58394</user-id>
  <version type="integer">6</version>
  <user-name>Giles Alexander</user-name>
  <creator-name>Giles Alexander</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2741</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>If you declare a decimal column with a scale of 0 in a migration:

@@@create_table :large_integers do |t|
  t.decimal :large, :scale =&gt; 0, :precision =&gt; 80

  t.timestamps
end@@@

Then a table will be created like the following:

@@@large      | numeric(40,0)               | 
created_at | timestamp without time zone | 
updated_at | timestamp without time zone |@@@

But, after running `rake db:schema:dump`, db/schema.rb will contain something like the following:

@@@create_table &quot;large_integers&quot;, :force =&gt; true do |t|
  t.integer  &quot;large&quot;,      :limit =&gt; 40, :precision =&gt; 80, :scale =&gt; 0
  t.datetime &quot;created_at&quot;
  t.datetime &quot;updated_at&quot;
end@@@

On PostgreSQL, this will create an integer column, not a numeric column, and if the precision is large then the column can not hold numbers up to that precision.

Plus, it is a little surprising to have schema.rb differing from your migration like this.

The attached patch fixes this problem in the schema dumper by looking for integer columns where the underlying sql_type is decimal or numeric, and then setting the type to be emitted to 'decimal' instead of 'integer'.</original-body>
  <latest-body>If you declare a decimal column with a scale of 0 in a migration:

@@@create_table :large_integers do |t|
  t.decimal :large, :scale =&gt; 0, :precision =&gt; 80

  t.timestamps
end@@@

Then a table will be created like the following:

@@@large      | numeric(40,0)               | 
created_at | timestamp without time zone | 
updated_at | timestamp without time zone |@@@

But, after running `rake db:schema:dump`, db/schema.rb will contain something like the following:

@@@create_table &quot;large_integers&quot;, :force =&gt; true do |t|
  t.integer  &quot;large&quot;,      :limit =&gt; 40, :precision =&gt; 80, :scale =&gt; 0
  t.datetime &quot;created_at&quot;
  t.datetime &quot;updated_at&quot;
end@@@

On PostgreSQL, this will create an integer column, not a numeric column, and if the precision is large then the column can not hold numbers up to that precision.

Plus, it is a little surprising to have schema.rb differing from your migration like this.

The attached patch fixes this problem in the schema dumper by looking for integer columns where the underlying sql_type is decimal or numeric, and then setting the type to be emitted to 'decimal' instead of 'integer'.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If you declare a decimal column with a scale of 0 in a
migration:&lt;/p&gt;
&lt;p&gt;@@@create_table :large_integers do |t| t.decimal :large, :scale
=&amp;gt; 0, :precision =&amp;gt; 80&lt;/p&gt;
&lt;p&gt;t.timestamps end@@@&lt;/p&gt;
&lt;p&gt;Then a table will be created like the following:&lt;/p&gt;
&lt;p&gt;@@@large | numeric(40,0) | created_at | timestamp without time
zone | updated_at | timestamp without time zone |@@@&lt;/p&gt;
&lt;p&gt;But, after running &lt;code&gt;rake db:schema:dump&lt;/code&gt;,
db/schema.rb will contain something like the following:&lt;/p&gt;
&lt;p&gt;@@@create_table &quot;large_integers&quot;, :force =&amp;gt; true do |t|
t.integer &quot;large&quot;, :limit =&amp;gt; 40, :precision =&amp;gt; 80, :scale
=&amp;gt; 0 t.datetime &quot;created_at&quot; t.datetime &quot;updated_at&quot; end@@@&lt;/p&gt;
&lt;p&gt;On PostgreSQL, this will create an integer column, not a numeric
column, and if the precision is large then the column can not hold
numbers up to that precision.&lt;/p&gt;
&lt;p&gt;Plus, it is a little surprising to have schema.rb differing from
your migration like this.&lt;/p&gt;
&lt;p&gt;The attached patch fixes this problem in the schema dumper by
looking for integer columns where the underlying sql_type is
decimal or numeric, and then setting the type to be emitted to
'decimal' instead of 'integer'.@@@&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you declare a decimal column with a scale of 0 in a migration:

@@@ ruby
create_table :large_integers do |t|
  t.decimal :large, :scale =&gt; 0, :precision =&gt; 80

  t.timestamps
end
@@@

Then a table will be created like the following:

    large      | numeric(40,0)               | 
    created_at | timestamp without time zone | 
    updated_at | timestamp without time zone |

But, after running `rake db:schema:dump`, db/schema.rb will contain something like the following:

@@@ ruby
create_table &quot;large_integers&quot;, :force =&gt; true do |t|
  t.integer  &quot;large&quot;,      :limit =&gt; 80, :precision =&gt; 80, :scale =&gt; 0
  t.datetime &quot;created_at&quot;
  t.datetime &quot;updated_at&quot;
end
@@@

On PostgreSQL, this will create an integer column, not a numeric column, and if the precision is large then the column can not hold numbers up to that precision.

Plus, it is a little surprising to have schema.rb differing from your migration like this.

The attached patch fixes this problem in the schema dumper by looking for integer columns where the underlying sql_type is decimal or numeric, and then setting the type to be emitted to 'decimal' instead of 'integer'.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you declare a decimal column with a scale of 0 in a
migration:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;create_table :large_integers do |t|
  t.decimal :large, :scale =&amp;gt; 0, :precision =&amp;gt; 80

  t.timestamps
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then a table will be created like the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;large      | numeric(40,0)               |
created_at | timestamp without time zone | 
updated_at | timestamp without time zone |&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But, after running &lt;code&gt;rake db:schema:dump&lt;/code&gt;,
db/schema.rb will contain something like the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;create_table &quot;large_integers&quot;, :force =&amp;gt; true do |t|
  t.integer  &quot;large&quot;,      :limit =&amp;gt; 80, :precision =&amp;gt; 80, :scale =&amp;gt; 0
  t.datetime &quot;created_at&quot;
  t.datetime &quot;updated_at&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;On PostgreSQL, this will create an integer column, not a numeric
column, and if the precision is large then the column can not hold
numbers up to that precision.&lt;/p&gt;
&lt;p&gt;Plus, it is a little surprising to have schema.rb differing from
your migration like this.&lt;/p&gt;
&lt;p&gt;The attached patch fixes this problem in the schema dumper by
looking for integer columns where the underlying sql_type is
decimal or numeric, and then setting the type to be emitted to
'decimal' instead of 'integer'.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-30T09:13:34+01:00</created-at>
      <creator-id type="integer">58394</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2741</number>
      <permalink>decimal-column-with-zero-scale-dumped-as-integer-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch schema_dumper</tag>
      <title>Decimal column with zero scale dumped as integer column</title>
      <updated-at type="datetime">2009-05-30T10:45:47+01:00</updated-at>
      <user-id type="integer">58394</user-id>
      <version type="integer">1</version>
      <user-name>Giles Alexander</user-name>
      <creator-name>Giles Alexander</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2741</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Isn't the real problem here that column.type for that column is returning integer rather than decimal?

The fix should probably be there rather than just in the dumper?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Isn't the real problem here that column.type for that column is
returning integer rather than decimal?&lt;/p&gt;
&lt;p&gt;The fix should probably be there rather than just in the
dumper?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-01T01:11:40+01:00</created-at>
      <creator-id type="integer">58394</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2741</number>
      <permalink>decimal-column-with-zero-scale-dumped-as-integer-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch schema_dumper</tag>
      <title>Decimal column with zero scale dumped as integer column</title>
      <updated-at type="datetime">2009-06-01T01:11:44+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Giles Alexander</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2741</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I tried that, and it caused a lot of test failures. There's an optimisation in ActiveRecord to represent decimal columns with a scale of 0 as integers. This is a pretty good optimisation, that I actually want, and it's described in the documentation.

This just changes the dumper to notice when that optimisation has been applied.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I tried that, and it caused a lot of test failures. There's an
optimisation in ActiveRecord to represent decimal columns with a
scale of 0 as integers. This is a pretty good optimisation, that I
actually want, and it's described in the documentation.&lt;/p&gt;
&lt;p&gt;This just changes the dumper to notice when that optimisation
has been applied.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-01T01:42:32+01:00</created-at>
      <creator-id type="integer">58394</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2741</number>
      <permalink>decimal-column-with-zero-scale-dumped-as-integer-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch schema_dumper</tag>
      <title>Decimal column with zero scale dumped as integer column</title>
      <updated-at type="datetime">2009-06-01T01:42:35+01:00</updated-at>
      <user-id type="integer">58394</user-id>
      <version type="integer">3</version>
      <user-name>Giles Alexander</user-name>
      <creator-name>Giles Alexander</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2741</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [532219fd091837a9312a301c74e0fbf06abab3a8]) Schema dumper now records scale 0 decimal columns as decimal not integer.

The schema dumper would dump out any decimal or numeric column that had a zero
scale as an integer column. This will cause problems for very large precision
columns on some DBMSs, particularly PostgreSQL. It also looks strange to see
your column change type after moving through schema.rb.

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
[#2741 state:committed]
http://github.com/rails/rails/commit/532219fd091837a9312a301c74e0fbf06abab3a8</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/532219fd091837a9312a301c74e0fbf06abab3a8&quot;
title=
&quot;Changeset [532219fd091837a9312a301c74e0fbf06abab3a8]&quot;&gt;[532219fd091837a9312a301c74e0fbf06abab3a8]&lt;/a&gt;)
Schema dumper now records scale 0 decimal columns as decimal not
integer.&lt;/p&gt;
&lt;p&gt;The schema dumper would dump out any decimal or numeric column
that had a zero&lt;br&gt;
scale as an integer column. This will cause problems for very large
precision&lt;br&gt;
columns on some DBMSs, particularly PostgreSQL. It also looks
strange to see&lt;br&gt;
your column change type after moving through schema.rb.&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=
&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt;&lt;br&gt;
[&lt;a href=&quot;/projects/8994/tickets/2741&quot; title=
&quot;Ticket #2741&quot;&gt;#2741&lt;/a&gt; state:committed] &lt;a href=
&quot;http://github.com/rails/rails/commit/532219fd091837a9312a301c74e0fbf06abab3a8&quot;&gt;
http://github.com/rails/rails/commit/532219fd091837a9312a301c74e0fb...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-01T02:40:51+01:00</created-at>
      <creator-id type="integer">58394</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2741</number>
      <permalink>decimal-column-with-zero-scale-dumped-as-integer-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord patch schema_dumper</tag>
      <title>Decimal column with zero scale dumped as integer column</title>
      <updated-at type="datetime">2009-06-01T02:40:53+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">4</version>
      <user-name>Repository</user-name>
      <creator-name>Giles Alexander</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2741</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I had to change the precision down to 55 in the tests as mysql (at least on my mac) doesn't support precisions that high.

Does it still look ok?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I had to change the precision down to 55 in the tests as mysql
(at least on my mac) doesn't support precisions that high.&lt;/p&gt;
&lt;p&gt;Does it still look ok?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-01T02:45:44+01:00</created-at>
      <creator-id type="integer">58394</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2741</number>
      <permalink>decimal-column-with-zero-scale-dumped-as-integer-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord patch schema_dumper</tag>
      <title>Decimal column with zero scale dumped as integer column</title>
      <updated-at type="datetime">2009-06-01T02:45:50+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">5</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Giles Alexander</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2741</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks. Yes, that still looks ok.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks. Yes, that still looks ok.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-01T02:47:49+01:00</created-at>
      <creator-id type="integer">58394</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2741</number>
      <permalink>decimal-column-with-zero-scale-dumped-as-integer-column</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord patch schema_dumper</tag>
      <title>Decimal column with zero scale dumped as integer column</title>
      <updated-at type="datetime">2009-06-01T02:47:54+01:00</updated-at>
      <user-id type="integer">58394</user-id>
      <version type="integer">6</version>
      <user-name>Giles Alexander</user-name>
      <creator-name>Giles Alexander</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2741</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>090f49a7bf1d449e15b84824af01a143ccdd1f49</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-05-30T09:13:34+01:00</created-at>
      <filename>zero-scale-decimal.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">127945</id>
      <size type="integer">3207</size>
      <uploader-id type="integer">58394</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/127945/zero-scale-decimal.diff</url>
    </attachment>
  </attachments>
</ticket>
