From 15fc8c37f0cbde132ee3706378c65bfb7380e5d7 Mon Sep 17 00:00:00 2001
From: Matt Duncan <mrduncan@gmail.com>
Date: Fri, 7 Aug 2009 18:46:11 -0400
Subject: [PATCH] Setting usec on Time#end_of_* methods

---
 .../active_support/core_ext/time/calculations.rb   |   12 +++---
 activesupport/test/core_ext/date_ext_test.rb       |    2 +-
 activesupport/test/core_ext/time_ext_test.rb       |   46 ++++++++++----------
 3 files changed, 30 insertions(+), 30 deletions(-)

diff --git a/activesupport/lib/active_support/core_ext/time/calculations.rb b/activesupport/lib/active_support/core_ext/time/calculations.rb
index b73c3b2..2cb97a6 100644
--- a/activesupport/lib/active_support/core_ext/time/calculations.rb
+++ b/activesupport/lib/active_support/core_ext/time/calculations.rb
@@ -178,9 +178,9 @@ class Time
   alias :at_midnight :beginning_of_day
   alias :at_beginning_of_day :beginning_of_day
 
-  # Returns a new Time representing the end of the day (23:59:59)
+  # Returns a new Time representing the end of the day (23:59:59.999999)
   def end_of_day
-    change(:hour => 23, :min => 59, :sec => 59)
+    change(:hour => 23, :min => 59, :sec => 59, :usec => 999999)
   end
 
   # Returns a new Time representing the start of the month (1st of the month, 0:00)
@@ -190,11 +190,11 @@ class Time
   end
   alias :at_beginning_of_month :beginning_of_month
 
-  # Returns a new Time representing the end of the month (last day of the month, 0:00)
+  # Returns a new Time representing the end of the month (last day of the month, 23:59:59.999999)
   def end_of_month
     #self - ((self.mday-1).days + self.seconds_since_midnight)
     last_day = ::Time.days_in_month(month, year)
-    change(:day => last_day, :hour => 23, :min => 59, :sec => 59, :usec => 0)
+    change(:day => last_day, :hour => 23, :min => 59, :sec => 59, :usec => 999999)
   end
   alias :at_end_of_month :end_of_month
 
@@ -216,9 +216,9 @@ class Time
   end
   alias :at_beginning_of_year :beginning_of_year
 
-  # Returns a new Time representing the end of the year (31st of december, 23:59:59)
+  # Returns a new Time representing the end of the year (31st of december, 23:59:59.999999)
   def end_of_year
-    change(:month => 12, :day => 31, :hour => 23, :min => 59, :sec => 59)
+    change(:month => 12, :day => 31, :hour => 23, :min => 59, :sec => 59, :usec => 999999)
   end
   alias :at_end_of_year :end_of_year
 
diff --git a/activesupport/test/core_ext/date_ext_test.rb b/activesupport/test/core_ext/date_ext_test.rb
index 7fd551e..277948c 100644
--- a/activesupport/test/core_ext/date_ext_test.rb
+++ b/activesupport/test/core_ext/date_ext_test.rb
@@ -196,7 +196,7 @@ class DateExtCalculationsTest < Test::Unit::TestCase
   end
 
   def test_end_of_day
-    assert_equal Time.local(2005,2,21,23,59,59), Date.new(2005,2,21).end_of_day
+    assert_equal Time.local(2005,2,21,23,59,59,999999), Date.new(2005,2,21).end_of_day
   end
 
   def test_xmlschema
diff --git a/activesupport/test/core_ext/time_ext_test.rb b/activesupport/test/core_ext/time_ext_test.rb
index 1c2d0fb..2c15745 100644
--- a/activesupport/test/core_ext/time_ext_test.rb
+++ b/activesupport/test/core_ext/time_ext_test.rb
@@ -85,45 +85,45 @@ class TimeExtCalculationsTest < Test::Unit::TestCase
   end
 
   def test_end_of_day
-    assert_equal Time.local(2007,8,12,23,59,59), Time.local(2007,8,12,10,10,10).end_of_day
+    assert_equal Time.local(2007,8,12,23,59,59,999999), Time.local(2007,8,12,10,10,10).end_of_day
     with_env_tz 'US/Eastern' do
-      assert_equal Time.local(2007,4,2,23,59,59), Time.local(2007,4,2,10,10,10).end_of_day, 'start DST'
-      assert_equal Time.local(2007,10,29,23,59,59), Time.local(2007,10,29,10,10,10).end_of_day, 'ends DST'
+      assert_equal Time.local(2007,4,2,23,59,59,999999), Time.local(2007,4,2,10,10,10).end_of_day, 'start DST'
+      assert_equal Time.local(2007,10,29,23,59,59,999999), Time.local(2007,10,29,10,10,10).end_of_day, 'ends DST'
     end
     with_env_tz 'NZ' do
-      assert_equal Time.local(2006,3,19,23,59,59), Time.local(2006,3,19,10,10,10).end_of_day, 'ends DST'
-      assert_equal Time.local(2006,10,1,23,59,59), Time.local(2006,10,1,10,10,10).end_of_day, 'start DST'
+      assert_equal Time.local(2006,3,19,23,59,59,999999), Time.local(2006,3,19,10,10,10).end_of_day, 'ends DST'
+      assert_equal Time.local(2006,10,1,23,59,59,999999), Time.local(2006,10,1,10,10,10).end_of_day, 'start DST'
     end
   end
 
   def test_end_of_week
-    assert_equal Time.local(2008,1,6,23,59,59), Time.local(2007,12,31,10,10,10).end_of_week
-    assert_equal Time.local(2007,9,2,23,59,59), Time.local(2007,8,27,0,0,0).end_of_week #monday
-    assert_equal Time.local(2007,9,2,23,59,59), Time.local(2007,8,28,0,0,0).end_of_week #tuesday
-    assert_equal Time.local(2007,9,2,23,59,59), Time.local(2007,8,29,0,0,0).end_of_week #wednesday
-    assert_equal Time.local(2007,9,2,23,59,59), Time.local(2007,8,30,0,0,0).end_of_week #thursday
-    assert_equal Time.local(2007,9,2,23,59,59), Time.local(2007,8,31,0,0,0).end_of_week #friday
-    assert_equal Time.local(2007,9,2,23,59,59), Time.local(2007,9,01,0,0,0).end_of_week #saturday
-    assert_equal Time.local(2007,9,2,23,59,59), Time.local(2007,9,02,0,0,0).end_of_week #sunday
+    assert_equal Time.local(2008,1,6,23,59,59,999999), Time.local(2007,12,31,10,10,10).end_of_week
+    assert_equal Time.local(2007,9,2,23,59,59,999999), Time.local(2007,8,27,0,0,0).end_of_week #monday
+    assert_equal Time.local(2007,9,2,23,59,59,999999), Time.local(2007,8,28,0,0,0).end_of_week #tuesday
+    assert_equal Time.local(2007,9,2,23,59,59,999999), Time.local(2007,8,29,0,0,0).end_of_week #wednesday
+    assert_equal Time.local(2007,9,2,23,59,59,999999), Time.local(2007,8,30,0,0,0).end_of_week #thursday
+    assert_equal Time.local(2007,9,2,23,59,59,999999), Time.local(2007,8,31,0,0,0).end_of_week #friday
+    assert_equal Time.local(2007,9,2,23,59,59,999999), Time.local(2007,9,01,0,0,0).end_of_week #saturday
+    assert_equal Time.local(2007,9,2,23,59,59,999999), Time.local(2007,9,02,0,0,0).end_of_week #sunday
   end
 
   def test_end_of_month
-    assert_equal Time.local(2005,3,31,23,59,59), Time.local(2005,3,20,10,10,10).end_of_month
-    assert_equal Time.local(2005,2,28,23,59,59), Time.local(2005,2,20,10,10,10).end_of_month
-    assert_equal Time.local(2005,4,30,23,59,59), Time.local(2005,4,20,10,10,10).end_of_month
+    assert_equal Time.local(2005,3,31,23,59,59,999999), Time.local(2005,3,20,10,10,10).end_of_month
+    assert_equal Time.local(2005,2,28,23,59,59,999999), Time.local(2005,2,20,10,10,10).end_of_month
+    assert_equal Time.local(2005,4,30,23,59,59,999999), Time.local(2005,4,20,10,10,10).end_of_month
   end
 
   def test_end_of_quarter
-    assert_equal Time.local(2007,3,31,23,59,59), Time.local(2007,2,15,10,10,10).end_of_quarter
-    assert_equal Time.local(2007,3,31,23,59,59), Time.local(2007,3,31,0,0,0).end_of_quarter
-    assert_equal Time.local(2007,12,31,23,59,59), Time.local(2007,12,21,10,10,10).end_of_quarter
-    assert_equal Time.local(2007,6,30,23,59,59), Time.local(2007,4,1,0,0,0).end_of_quarter
-    assert_equal Time.local(2008,6,30,23,59,59), Time.local(2008,5,31,0,0,0).end_of_quarter
+    assert_equal Time.local(2007,3,31,23,59,59,999999), Time.local(2007,2,15,10,10,10).end_of_quarter
+    assert_equal Time.local(2007,3,31,23,59,59,999999), Time.local(2007,3,31,0,0,0).end_of_quarter
+    assert_equal Time.local(2007,12,31,23,59,59,999999), Time.local(2007,12,21,10,10,10).end_of_quarter
+    assert_equal Time.local(2007,6,30,23,59,59,999999), Time.local(2007,4,1,0,0,0).end_of_quarter
+    assert_equal Time.local(2008,6,30,23,59,59,999999), Time.local(2008,5,31,0,0,0).end_of_quarter
   end
 
   def test_end_of_year
-    assert_equal Time.local(2007,12,31,23,59,59), Time.local(2007,2,22,10,10,10).end_of_year
-    assert_equal Time.local(2007,12,31,23,59,59), Time.local(2007,12,31,10,10,10).end_of_year
+    assert_equal Time.local(2007,12,31,23,59,59,999999), Time.local(2007,2,22,10,10,10).end_of_year
+    assert_equal Time.local(2007,12,31,23,59,59,999999), Time.local(2007,12,31,10,10,10).end_of_year
   end
 
   def test_beginning_of_year
-- 
1.6.0

