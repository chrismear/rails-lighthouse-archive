<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-06T02:25:25+00:00</created-at>
  <creator-id type="integer">15459</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2147</number>
  <permalink>add-from-to-has_many-belongs_to-etc</permalink>
  <priority type="integer">1360</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord active_record associations belongs_to edge feature has_many invalid rails</tag>
  <title>Add :from to has_many, belongs_to, etc</title>
  <updated-at type="datetime">2010-04-15T22:44:59+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">3</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Nate Wiger</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2147</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Currently, we have the need for the following in our app:

    class Game &lt; ActiveRecord::Base
      has_many :summarized_game_players, :from =&gt; 'v_game_player_statuses',
               :class_name =&gt; 'GamePlayer', :readonly =&gt; true
    end

This is to create an association that loads a GamePlayer object, but gets the data from `v_game_player_statuses`.

The workaround we have is this:

    class Game &lt; ActiveRecord::Base
      has_many :summarized_game_players, :finder_sql =&gt; 'SELECT * FROM v_game_player_statuses where game_id = #{id}',
             :class_name =&gt; 'GamePlayer', :readonly =&gt; true
    end

Which works, but having `:from` support to be consistent with `find()` would be really nice.

I will gladly attempt a patch and required tests, but I'm just trying to sift through active_record/associations and I'm a bit lost where to add it.  Suggestions or thoughts?

Thanks,
Nate</original-body>
  <latest-body>Currently, we have the need for the following in our app:

    class Game &lt; ActiveRecord::Base
      has_many :summarized_game_players, :from =&gt; 'v_game_player_statuses',
               :class_name =&gt; 'GamePlayer', :readonly =&gt; true
    end

This is to create an association that loads a GamePlayer object, but gets the data from `v_game_player_statuses`.

The workaround we have is this:

    class Game &lt; ActiveRecord::Base
      has_many :summarized_game_players, :finder_sql =&gt; 'SELECT * FROM v_game_player_statuses where game_id = #{id}',
             :class_name =&gt; 'GamePlayer', :readonly =&gt; true
    end

Which works, but having `:from` support to be consistent with `find()` would be really nice.

I will gladly attempt a patch and required tests, but I'm just trying to sift through active_record/associations and I'm a bit lost where to add it.  Suggestions or thoughts?

Thanks,
Nate</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Currently, we have the need for the following in our app:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Game &amp;lt; ActiveRecord::Base
  has_many :summarized_game_players, :from =&amp;gt; 'v_game_player_statuses',
           :class_name =&amp;gt; 'GamePlayer', :readonly =&amp;gt; true
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is to create an association that loads a GamePlayer object,
but gets the data from &lt;code&gt;v_game_player_statuses&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The workaround we have is this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Game &amp;lt; ActiveRecord::Base
  has_many :summarized_game_players, :finder_sql =&amp;gt; 'SELECT * FROM v_game_player_statuses where game_id = #{id}',
         :class_name =&amp;gt; 'GamePlayer', :readonly =&amp;gt; true
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which works, but having &lt;code&gt;:from&lt;/code&gt; support to be
consistent with &lt;code&gt;find()&lt;/code&gt; would be really nice.&lt;/p&gt;
&lt;p&gt;I will gladly attempt a patch and required tests, but I'm just
trying to sift through active_record/associations and I'm a bit
lost where to add it. Suggestions or thoughts?&lt;/p&gt;
&lt;p&gt;Thanks, Nate&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Currently, we have the need for the following in our app:

    class Game &lt; ActiveRecord::Base
      has_many :summarized_game_players, :from =&gt; 'v_game_player_statuses',
               :class_name =&gt; 'GamePlayer', :readonly =&gt; true
    end

This is to create an association that loads a GamePlayer object, but gets the data from `v_game_player_statuses`.

The workaround we have is this:

    class Game &lt; ActiveRecord::Base
      has_many :summarized_game_players, :finder_sql =&gt; 'SELECT * FROM v_game_player_statuses where game_id = #{id}',
             :class_name =&gt; 'GamePlayer', :readonly =&gt; true
    end

Which works, but having `:from` support to be consistent with `find()` would be really nice.

I will gladly attempt a patch and required tests, but I'm just trying to sift through active_record/associations and I'm a bit lost where to add it.  Suggestions or thoughts?

Thanks,
Nate</body>
      <body-html>&lt;div&gt;&lt;p&gt;Currently, we have the need for the following in our app:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Game &amp;lt; ActiveRecord::Base
  has_many :summarized_game_players, :from =&amp;gt; 'v_game_player_statuses',
           :class_name =&amp;gt; 'GamePlayer', :readonly =&amp;gt; true
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is to create an association that loads a GamePlayer object,
but gets the data from &lt;code&gt;v_game_player_statuses&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The workaround we have is this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Game &amp;lt; ActiveRecord::Base
  has_many :summarized_game_players, :finder_sql =&amp;gt; 'SELECT * FROM v_game_player_statuses where game_id = #{id}',
         :class_name =&amp;gt; 'GamePlayer', :readonly =&amp;gt; true
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which works, but having &lt;code&gt;:from&lt;/code&gt; support to be
consistent with &lt;code&gt;find()&lt;/code&gt; would be really nice.&lt;/p&gt;
&lt;p&gt;I will gladly attempt a patch and required tests, but I'm just
trying to sift through active_record/associations and I'm a bit
lost where to add it. Suggestions or thoughts?&lt;/p&gt;
&lt;p&gt;Thanks, Nate&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-06T02:25:26+00:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2147</number>
      <permalink>add-from-to-has_many-belongs_to-etc</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord active_record associations belongs_to edge feature has_many rails</tag>
      <title>Add :from to has_many, belongs_to, etc</title>
      <updated-at type="datetime">2009-03-06T02:25:28+00:00</updated-at>
      <user-id type="integer">15459</user-id>
      <version type="integer">1</version>
      <user-name>Nate Wiger</user-name>
      <creator-name>Nate Wiger</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2147</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>What your looking for is likely has_many :through http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association.

can be marked as invalid</body>
      <body-html>&lt;div&gt;&lt;p&gt;What your looking for is likely has_many :through &lt;a href=
&quot;http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association&quot;&gt;
http://guides.rubyonrails.org/association_basics.html#the-has-many-...&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;can be marked as invalid&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-15T21:05:10+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord active_record associations belongs_to edge feature has_many rails
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2147</number>
      <permalink>add-from-to-has_many-belongs_to-etc</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord active_record associations belongs_to edge feature has_many invalid rails</tag>
      <title>Add :from to has_many, belongs_to, etc</title>
      <updated-at type="datetime">2010-04-15T21:05:15+01:00</updated-at>
      <user-id type="integer">65576</user-id>
      <version type="integer">2</version>
      <user-name>Steve St. Martin</user-name>
      <creator-name>Nate Wiger</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2147</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-15T22:44:43+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2147</number>
      <permalink>add-from-to-has_many-belongs_to-etc</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord active_record associations belongs_to edge feature has_many invalid rails</tag>
      <title>Add :from to has_many, belongs_to, etc</title>
      <updated-at type="datetime">2010-04-15T22:44:59+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">3</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Nate Wiger</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2147</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
