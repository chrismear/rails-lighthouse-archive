<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-20T21:15:23+01:00</created-at>
  <creator-id type="integer">10679</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1081</number>
  <permalink>associationproxy-starts-transactions-in-the-incorrect-database</permalink>
  <priority type="integer">503</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>2.1 activerecord bug edge patch</tag>
  <title>AssociationCollection starts transactions in the incorrect database</title>
  <updated-at type="datetime">2008-09-23T19:32:35+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">4</version>
  <user-name>Repository</user-name>
  <creator-name>Hongli Lai</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1081</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Some AssociationProxy methods, e.g. #clear, start transactions. However, they start the transaction in the wrong place. For example, suppose Author has_many :books. One would expect &quot;author.books.clear&quot; to start a transaction by calling Book.transaction, but the current implementation calls Author.transaction. Only has_and_belongs_to_many seems to get it right.

This patch fixes this bug, and also includes a unit test. All code in AssociationProxy subclasses now start transactions by calling AssociationProxy#transaction, which in turn calls .transaction on the association class. The reason why I added this method instead of calling @reflection.klass.transaction (as has_and_belongs_to_many does) is because I need the AssocationProxy#transaction hook for a database sharding plugin that I'm developing: the transaction needs to be activated in the correct shard, and this requires some additional housekeeping code.

The patch applies on 2-1-stable and on master.</original-body>
  <latest-body>Some AssociationProxy methods, e.g. #clear, start transactions. However, they start the transaction in the wrong place. For example, suppose Author has_many :books. One would expect &quot;author.books.clear&quot; to start a transaction by calling Book.transaction, but the current implementation calls Author.transaction. Only has_and_belongs_to_many seems to get it right.

This patch fixes this bug, and also includes a unit test. All code in AssociationProxy subclasses now start transactions by calling AssociationProxy#transaction, which in turn calls .transaction on the association class. The reason why I added this method instead of calling @reflection.klass.transaction (as has_and_belongs_to_many does) is because I need the AssocationProxy#transaction hook for a database sharding plugin that I'm developing: the transaction needs to be activated in the correct shard, and this requires some additional housekeeping code.

The patch applies on 2-1-stable and on master.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Some AssociationProxy methods, e.g. #clear, start transactions.
However, they start the transaction in the wrong place. For
example, suppose Author has_many :books. One would expect
&quot;author.books.clear&quot; to start a transaction by calling
Book.transaction, but the current implementation calls
Author.transaction. Only has_and_belongs_to_many seems to get it
right.&lt;/p&gt;
&lt;p&gt;This patch fixes this bug, and also includes a unit test. All
code in AssociationProxy subclasses now start transactions by
calling AssociationProxy#transaction, which in turn calls
.transaction on the association class. The reason why I added this
method instead of calling @reflection.klass.transaction (as
has_and_belongs_to_many does) is because I need the
AssocationProxy#transaction hook for a database sharding plugin
that I'm developing: the transaction needs to be activated in the
correct shard, and this requires some additional housekeeping
code.&lt;/p&gt;
&lt;p&gt;The patch applies on 2-1-stable and on master.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Some AssociationProxy methods, e.g. #clear, start transactions. However, they start the transaction in the wrong place. For example, suppose Author has_many :books. One would expect &quot;author.books.clear&quot; to start a transaction by calling Book.transaction, but the current implementation calls Author.transaction. Only has_and_belongs_to_many seems to get it right.

This patch fixes this bug, and also includes a unit test. All code in AssociationProxy subclasses now start transactions by calling AssociationProxy#transaction, which in turn calls .transaction on the association class. The reason why I added this method instead of calling @reflection.klass.transaction (as has_and_belongs_to_many does) is because I need the AssocationProxy#transaction hook for a database sharding plugin that I'm developing: the transaction needs to be activated in the correct shard, and this requires some additional housekeeping code.

The patch applies on 2-1-stable and on master.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Some AssociationProxy methods, e.g. #clear, start transactions.
However, they start the transaction in the wrong place. For
example, suppose Author has_many :books. One would expect
&quot;author.books.clear&quot; to start a transaction by calling
Book.transaction, but the current implementation calls
Author.transaction. Only has_and_belongs_to_many seems to get it
right.&lt;/p&gt;
&lt;p&gt;This patch fixes this bug, and also includes a unit test. All
code in AssociationProxy subclasses now start transactions by
calling AssociationProxy#transaction, which in turn calls
.transaction on the association class. The reason why I added this
method instead of calling @reflection.klass.transaction (as
has_and_belongs_to_many does) is because I need the
AssocationProxy#transaction hook for a database sharding plugin
that I'm developing: the transaction needs to be activated in the
correct shard, and this requires some additional housekeeping
code.&lt;/p&gt;
&lt;p&gt;The patch applies on 2-1-stable and on master.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-20T21:15:23+01:00</created-at>
      <creator-id type="integer">10679</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1081</number>
      <permalink>associationproxy-starts-transactions-in-the-incorrect-database</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge patch</tag>
      <title>AssociationProxy starts transactions in the incorrect database</title>
      <updated-at type="datetime">2008-09-20T21:15:28+01:00</updated-at>
      <user-id type="integer">10679</user-id>
      <version type="integer">1</version>
      <user-name>Hongli Lai</user-name>
      <creator-name>Hongli Lai</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1081</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here's an updated patch. AssociationProxy#transaction has been moved to AssociationCollection because it makes no sense for non-collection associations. More tests have been added.

The following patch is for edge.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here's an updated patch. AssociationProxy#transaction has been
moved to AssociationCollection because it makes no sense for
non-collection associations. More tests have been added.&lt;/p&gt;
&lt;p&gt;The following patch is for edge.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-20T21:56:42+01:00</created-at>
      <creator-id type="integer">10679</creator-id>
      <diffable-attributes type="yaml">--- 
:title: AssociationProxy starts transactions in the incorrect database
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1081</number>
      <permalink>associationproxy-starts-transactions-in-the-incorrect-database</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge patch</tag>
      <title>AssociationCollection starts transactions in the incorrect database</title>
      <updated-at type="datetime">2008-09-20T21:56:44+01:00</updated-at>
      <user-id type="integer">10679</user-id>
      <version type="integer">2</version>
      <user-name>Hongli Lai</user-name>
      <creator-name>Hongli Lai</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1081</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>And this patch is for 2-1-stable.</body>
      <body-html>&lt;div&gt;&lt;p&gt;And this patch is for 2-1-stable.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-20T21:56:54+01:00</created-at>
      <creator-id type="integer">10679</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1081</number>
      <permalink>associationproxy-starts-transactions-in-the-incorrect-database</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug edge patch</tag>
      <title>AssociationCollection starts transactions in the incorrect database</title>
      <updated-at type="datetime">2008-09-20T21:56:55+01:00</updated-at>
      <user-id type="integer">10679</user-id>
      <version type="integer">3</version>
      <user-name>Hongli Lai</user-name>
      <creator-name>Hongli Lai</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1081</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [70b8ea4fa6f432919340345ae0d5af6aa8f87ec8]) Make AssociationCollection start transactions in the correct database.

AssociationCollection now starts transactions by calling
AssociationCollection#transaction instead of @owner.transaction or
@reflection.klass.transaction.

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;

[#1081 state:committed]
http://github.com/rails/rails/commit/70b8ea4fa6f432919340345ae0d5af6aa8f87ec8</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [70b8ea4fa6f432919340345ae0d5af6aa8f87ec8]) Make
AssociationCollection start transactions in the correct
database.&lt;/p&gt;
&lt;p&gt;AssociationCollection now starts transactions by calling
AssociationCollection#transaction instead of @owner.transaction or
@reflection.klass.transaction.&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/1081&quot; title=&quot;Ticket #1081&quot;&gt;#1081&lt;/a&gt; state:committed] &lt;a href=&quot;http://github.com/rails/rails/commit/70b8ea4fa6f432919340345ae0d5af6aa8f87ec8&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-09-23T19:32:32+01:00</created-at>
      <creator-id type="integer">10679</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1081</number>
      <permalink>associationproxy-starts-transactions-in-the-incorrect-database</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2.1 activerecord bug edge patch</tag>
      <title>AssociationCollection starts transactions in the incorrect database</title>
      <updated-at type="datetime">2008-09-23T19:32:35+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">4</version>
      <user-name>Repository</user-name>
      <creator-name>Hongli Lai</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1081</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>46121f979c68b7bdd19583216ae9b2e6b51f83f0</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-20T21:56:43+01:00</created-at>
      <filename>edge-0001-Make-AssociationCollection-start-transactions-in-the.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">47420</id>
      <size type="integer">6543</size>
      <uploader-id type="integer">10679</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/47420/edge-0001-Make-AssociationCollection-start-transactions-in-the.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>bce704d480760c1e03e816fc22915a922ba2bb91</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-20T21:56:54+01:00</created-at>
      <filename>2-1-stable-0001-Make-AssociationCollection-start-transactions-in-the.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">47421</id>
      <size type="integer">6543</size>
      <uploader-id type="integer">10679</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/47421/2-1-stable-0001-Make-AssociationCollection-start-transactions-in-the.patch</url>
    </attachment>
  </attachments>
</ticket>
