<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-17T08:07:24+00:00</created-at>
  <creator-id type="integer">38102</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5883</number>
  <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Design of Schema.define() can cause missed migrations</title>
  <updated-at type="datetime">2011-03-26T01:53:37+00:00</updated-at>
  <user-id type="integer">142823</user-id>
  <version type="integer">12</version>
  <user-name>bingbing</user-name>
  <creator-name>Daniel Beardsley</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
  <priority-name>Low</priority-name>
  <original-body>This is an architectural issue, but the way the schema.rb file only lists one version number makes it possible to end up in a state where the entries in your **schema_migrations table don't match up with the migrations that have actually been applied** to your database.

There are **lots of ways** this could happen, but here is one scenario:

 1. Two developers are working on separate branches and each creates a migration.
 2. Both merge their work back into master.
 3. One of them inevitably has a conflict with the `Schema.define(:version =&gt;` line within db/schema.rb
 4. Developer picks the wrong `Schema.define` line when merging
 5. Someone later uses `rake db:schema:load` and now has incorrect entries in their schema_migrations table because Schema.define assumes all prior migrations have already happened.

Depending on the scenario, this can happen both ways (schema.rb assumes incorrectly that migrations have been applied OR assumes incorrectly that migrations haven't been applied).

This **Stack Overflow [answer](http://stackoverflow.com/questions/2979059/is-the-version-number-in-rails-schema-rb-used-for-anything#4047884)** does a much better job of explaining the problem.   Also see this Lighthouse ticket [comment](https://rails.lighthouseapp.com/projects/8994/tickets/1304-patch-readable-schemarb-timestamp#ticket-1304-9) by Ryan Bates


### Solution ###

Really, **schema.rb should list all migration numbers** that have already been applied so that we can guarantee `rake db:migrate == rake db:schema:load` 

I propose changing the Schema.define method to accept `:verions =&gt; [...]` and properly sort and list all the entries (one per line).  I'll gladly create a patch and some test cases if this is a good idea.</original-body>
  <latest-body>This is an architectural issue, but the way the schema.rb file only lists one version number makes it possible to end up in a state where the entries in your **schema_migrations table don't match up with the migrations that have actually been applied** to your database.

There are **lots of ways** this could happen, but here is one scenario:

 1. Two developers are working on separate branches and each creates a migration.
 2. Both merge their work back into master.
 3. One of them inevitably has a conflict with the `Schema.define(:version =&gt;` line within db/schema.rb
 4. Developer picks the wrong `Schema.define` line when merging
 5. Someone later uses `rake db:schema:load` and now has incorrect entries in their schema_migrations table because Schema.define assumes all prior migrations have already happened.

Depending on the scenario, this can happen both ways (schema.rb assumes incorrectly that migrations have been applied OR assumes incorrectly that migrations haven't been applied).

This **Stack Overflow [answer](http://stackoverflow.com/questions/2979059/is-the-version-number-in-rails-schema-rb-used-for-anything#4047884)** does a much better job of explaining the problem.   Also see this Lighthouse ticket [comment](https://rails.lighthouseapp.com/projects/8994/tickets/1304-patch-readable-schemarb-timestamp#ticket-1304-9) by Ryan Bates


### Solution ###

Really, **schema.rb should list all migration numbers** that have already been applied so that we can guarantee `rake db:migrate == rake db:schema:load` 

I propose changing the Schema.define method to accept `:verions =&gt; [...]` and properly sort and list all the entries (one per line).  I'll gladly create a patch and some test cases if this is a good idea.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is an architectural issue, but the way the schema.rb file
only lists one version number makes it possible to end up in a
state where the entries in your &lt;strong&gt;schema_migrations table
don't match up with the migrations that have actually been
applied&lt;/strong&gt; to your database.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;lots of ways&lt;/strong&gt; this could happen, but
here is one scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Two developers are working on separate branches and each
creates a migration.&lt;/li&gt;
&lt;li&gt;Both merge their work back into master.&lt;/li&gt;
&lt;li&gt;One of them inevitably has a conflict with the
&lt;code&gt;Schema.define(:version =&amp;gt;&lt;/code&gt; line within
db/schema.rb&lt;/li&gt;
&lt;li&gt;Developer picks the wrong &lt;code&gt;Schema.define&lt;/code&gt; line when
merging&lt;/li&gt;
&lt;li&gt;Someone later uses &lt;code&gt;rake db:schema:load&lt;/code&gt; and now has
incorrect entries in their schema_migrations table because
Schema.define assumes all prior migrations have already
happened.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on the scenario, this can happen both ways (schema.rb
assumes incorrectly that migrations have been applied OR assumes
incorrectly that migrations haven't been applied).&lt;/p&gt;
&lt;p&gt;This &lt;strong&gt;Stack Overflow &lt;a href=
&quot;http://stackoverflow.com/questions/2979059/is-the-version-number-in-rails-schema-rb-used-for-anything#4047884&quot;&gt;
answer&lt;/a&gt;&lt;/strong&gt; does a much better job of explaining the
problem. Also see this Lighthouse ticket &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/1304-patch-readable-schemarb-timestamp#ticket-1304-9&quot;&gt;
comment&lt;/a&gt; by Ryan Bates&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;Really, &lt;strong&gt;schema.rb should list all migration
numbers&lt;/strong&gt; that have already been applied so that we can
guarantee &lt;code&gt;rake db:migrate == rake db:schema:load&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I propose changing the Schema.define method to accept
&lt;code&gt;:verions =&amp;gt; [...]&lt;/code&gt; and properly sort and list all
the entries (one per line). I'll gladly create a patch and some
test cases if this is a good idea.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is an architectural issue, but the way the schema.rb file only lists one version number makes it possible to end up in a state where the entries in your **schema_migrations table don't match up with the migrations that have actually been applied** to your database.

There are **lots of ways** this could happen, but here is one scenario:

 1. Two developers are working on separate branches and each creates a migration.
 2. Both merge their work back into master.
 3. One of them inevitably has a conflict with the `Schema.define(:version =&gt;` line within db/schema.rb
 4. Developer picks the wrong `Schema.define` line when merging
 5. Someone later uses `rake db:schema:load` and now has incorrect entries in their schema_migrations table because Schema.define assumes all prior migrations have already happened.

Depending on the scenario, this can happen both ways (schema.rb assumes incorrectly that migrations have been applied OR assumes incorrectly that migrations haven't been applied).

This **Stack Overflow [answer](http://stackoverflow.com/questions/2979059/is-the-version-number-in-rails-schema-rb-used-for-anything#4047884)** does a much better job of explaining the problem.   Also see this Lighthouse ticket [comment](https://rails.lighthouseapp.com/projects/8994/tickets/1304-patch-readable-schemarb-timestamp#ticket-1304-9) by Ryan Bates


### Solution ###

Really, **schema.rb should list all migration numbers** that have already been applied so that we can guarantee `rake db:migrate == rake db:schema:load` 

I propose changing the Schema.define method to accept `:verions =&gt; [...]` and properly sort and list all the entries (one per line).  I'll gladly create a patch and some test cases if this is a good idea.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is an architectural issue, but the way the schema.rb file
only lists one version number makes it possible to end up in a
state where the entries in your &lt;strong&gt;schema_migrations table
don't match up with the migrations that have actually been
applied&lt;/strong&gt; to your database.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;lots of ways&lt;/strong&gt; this could happen, but
here is one scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Two developers are working on separate branches and each
creates a migration.&lt;/li&gt;
&lt;li&gt;Both merge their work back into master.&lt;/li&gt;
&lt;li&gt;One of them inevitably has a conflict with the
&lt;code&gt;Schema.define(:version =&amp;gt;&lt;/code&gt; line within
db/schema.rb&lt;/li&gt;
&lt;li&gt;Developer picks the wrong &lt;code&gt;Schema.define&lt;/code&gt; line when
merging&lt;/li&gt;
&lt;li&gt;Someone later uses &lt;code&gt;rake db:schema:load&lt;/code&gt; and now has
incorrect entries in their schema_migrations table because
Schema.define assumes all prior migrations have already
happened.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on the scenario, this can happen both ways (schema.rb
assumes incorrectly that migrations have been applied OR assumes
incorrectly that migrations haven't been applied).&lt;/p&gt;
&lt;p&gt;This &lt;strong&gt;Stack Overflow &lt;a href=
&quot;http://stackoverflow.com/questions/2979059/is-the-version-number-in-rails-schema-rb-used-for-anything#4047884&quot;&gt;
answer&lt;/a&gt;&lt;/strong&gt; does a much better job of explaining the
problem. Also see this Lighthouse ticket &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/1304-patch-readable-schemarb-timestamp#ticket-1304-9&quot;&gt;
comment&lt;/a&gt; by Ryan Bates&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;Really, &lt;strong&gt;schema.rb should list all migration
numbers&lt;/strong&gt; that have already been applied so that we can
guarantee &lt;code&gt;rake db:migrate == rake db:schema:load&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I propose changing the Schema.define method to accept
&lt;code&gt;:verions =&amp;gt; [...]&lt;/code&gt; and properly sort and list all
the entries (one per line). I'll gladly create a patch and some
test cases if this is a good idea.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-29T07:43:48+01:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;schema migrations&quot; schema.rb schema_format timestamped_migrations</tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2010-10-29T10:03:52+01:00</updated-at>
      <user-id type="integer">38102</user-id>
      <version type="integer">1</version>
      <user-name>Daniel Beardsley</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't think listing all the applied migrations in schema.rb is a good idea - you'll still get a merge conflict on the Schema.define line. The task `db:migrate:status` will show you any migrations that haven't been applied, so I'd be more in favour of removing the version line to eliminate the merge conflict.

What I'd like to see is being able to edit the schema.rb directly and then running a rake task sync the database to the schema with an option to save the migration first for tweaking if necessary.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think listing all the applied migrations in schema.rb is
a good idea - you'll still get a merge conflict on the
Schema.define line. The task &lt;code&gt;db:migrate:status&lt;/code&gt; will
show you any migrations that haven't been applied, so I'd be more
in favour of removing the version line to eliminate the merge
conflict.&lt;/p&gt;
&lt;p&gt;What I'd like to see is being able to edit the schema.rb
directly and then running a rake task sync the database to the
schema with an option to save the migration first for tweaking if
necessary.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-29T09:37:52+01:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;schema migrations&quot; schema.rb schema_format timestamped_migrations</tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2010-10-29T09:37:55+01:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Why would there be a merge conflict?  Each migration timestamp would be on its own line (and sorted):

@@@ ruby
  Schema.define(:versions =&gt; %w{
      201008110387143
      201008140387943
      201008210562792
      ...
      201008110387943
    )) do
@@@

Also, merging would be easy, just include both lines.  

This **Stack Overflow [answer](http://stackoverflow.com/questions/2979059/is-the-version-number-in-rails-schema-rb-used-for-anything#4047884)** does a much better job of explaining the problem.

`rake db:migrate:status` only shows migrations that aren't listed in the schema_migrations table but do exist in your db/migrate directory; If the above situation happens, there will be entries in schema_migrations for migrations that truly haven't been applied to the database.

**The `:version` parameter should NOT be removed**; if it was, a `db:schema:loaded` database would have NO way of knowing which migrations have been applied (unless you just assume ALL of them).

One of the main points of schema migrations is to create an easy way to undo changes to the database, editing the schema.rb directly and doing a text-based diff to create a migration (maybe I misunderstood your suggestion) would only allow forward changes and couldn't be used to automatically create a `down` step.  Besides, schema.rb creates a database from scratch, it has no mechanism to &quot;sync&quot; an existing database.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Why would there be a merge conflict? Each migration timestamp
would be on its own line (and sorted):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  Schema.define(:versions =&amp;gt; %w{
      201008110387143
      201008140387943
      201008210562792
      ...
      201008110387943
    )) do&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Also, merging would be easy, just include both lines.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This &lt;strong&gt;Stack Overflow &lt;a href=
&quot;http://stackoverflow.com/questions/2979059/is-the-version-number-in-rails-schema-rb-used-for-anything#4047884&quot;&gt;
answer&lt;/a&gt;&lt;/strong&gt; does a much better job of explaining the
problem.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rake db:migrate:status&lt;/code&gt; only shows migrations that
aren't listed in the schema_migrations table but do exist in your
db/migrate directory; If the above situation happens, there will be
entries in schema_migrations for migrations that truly haven't been
applied to the database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;:version&lt;/code&gt; parameter should NOT be
removed&lt;/strong&gt;; if it was, a &lt;code&gt;db:schema:loaded&lt;/code&gt;
database would have NO way of knowing which migrations have been
applied (unless you just assume ALL of them).&lt;/p&gt;
&lt;p&gt;One of the main points of schema migrations is to create an easy
way to undo changes to the database, editing the schema.rb directly
and doing a text-based diff to create a migration (maybe I
misunderstood your suggestion) would only allow forward changes and
couldn't be used to automatically create a &lt;code&gt;down&lt;/code&gt; step.
Besides, schema.rb creates a database from scratch, it has no
mechanism to &quot;sync&quot; an existing database.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-29T10:00:52+01:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;schema migrations&quot; schema.rb schema_format timestamped_migrations</tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2010-10-29T10:00:54+01:00</updated-at>
      <user-id type="integer">38102</user-id>
      <version type="integer">3</version>
      <user-name>Daniel Beardsley</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Putting each one on a line will eliminate the merge conflict for the simple case but there's still a possibility of conflict when you have multiple migrations and long running feature branches. Also there is the issue of what order the migrations should be applied - date order or the schema.rb specified order. Then you've got the issue of apps with lots of migrations - I've one that started out using Rails 1.0 that now has a couple of hundred migrations. I don't want those 200 lines in my schema.rb. We should rethink the whole schema/migrations issue rather than trying to patch something that's fundamentally flawed.

I'm not sure what you mean with the `db:schema:loaded` database - the `db:schema:load` task recreates all of the tables and doesn't check what migrations have been applied. If you mean the current database then the schema_migrations table has the list of applied migrations, but you know that.

As for having no down step, DHH's keynote from RailsConf 2010 suggested this was the way 3.1 was heading:

http://www.youtube.com/watch?v=b0iKYRKtAsA
Timecode 37:34

@@@ ruby
class CreateTolkTables &lt; ActiveRecord::Migration
  def self.change
    table :tolk_locales do |t|
      t.string   :name
      t.datetime :created_at
      t.datetime :updated_at
    end
  end
end
@@@

I know there's no mechanism for syncing changes in ActiveRecord::Schema - I was thinking of adding some. Often the down step is irreversible and also often doesn't work because the up step didn't complete successfully. To revert to a previous version of the database you'd just revert your schema.rb and sync. You'd have options to skip destructive actions like remove_column, remove_index and drop_table and you'd also be able to sync either way.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Putting each one on a line will eliminate the merge conflict for
the simple case but there's still a possibility of conflict when
you have multiple migrations and long running feature branches.
Also there is the issue of what order the migrations should be
applied - date order or the schema.rb specified order. Then you've
got the issue of apps with lots of migrations - I've one that
started out using Rails 1.0 that now has a couple of hundred
migrations. I don't want those 200 lines in my schema.rb. We should
rethink the whole schema/migrations issue rather than trying to
patch something that's fundamentally flawed.&lt;/p&gt;
&lt;p&gt;I'm not sure what you mean with the
&lt;code&gt;db:schema:loaded&lt;/code&gt; database - the
&lt;code&gt;db:schema:load&lt;/code&gt; task recreates all of the tables and
doesn't check what migrations have been applied. If you mean the
current database then the schema_migrations table has the list of
applied migrations, but you know that.&lt;/p&gt;
&lt;p&gt;As for having no down step, DHH's keynote from RailsConf 2010
suggested this was the way 3.1 was heading:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://www.youtube.com/watch?v=b0iKYRKtAsA&quot;&gt;http://www.youtube.com/watch?v=b0iKYRKtAsA&lt;/a&gt;&lt;br&gt;
Timecode 37:34&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class CreateTolkTables &amp;lt; ActiveRecord::Migration
  def self.change
    table :tolk_locales do |t|
      t.string   :name
      t.datetime :created_at
      t.datetime :updated_at
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I know there's no mechanism for syncing changes in
ActiveRecord::Schema - I was thinking of adding some. Often the
down step is irreversible and also often doesn't work because the
up step didn't complete successfully. To revert to a previous
version of the database you'd just revert your schema.rb and sync.
You'd have options to skip destructive actions like remove_column,
remove_index and drop_table and you'd also be able to sync either
way.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-29T11:19:38+01:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;schema migrations&quot; schema.rb schema_format timestamped_migrations</tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2010-10-29T11:19:41+01:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">4</version>
      <user-name>Andrew White</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-08T01:54:39+00:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;schema migrations\&quot; schema.rb schema_format timestamped_migrations&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2010-11-08T01:54:41+00:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">6</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I stumbled across this issue by accident, but it's something I was already considering implementing, so I figured I'd share my two cents.

In one of my projects, we use a workflow that avoids the schema.rb conflicts altogether:

* Rename schema.rb to schema.versioned.rb in version control.
* Do migrations as necessary.  Users can bootstrap by copying schema.versioned.rb to schema.rb and applying all remaining migrations.
* Our CI server always bootstraps from schema.versioned.rb so we always know about conflicts.
* When the number of migrations gets high, copy your schema.rb over the schema.versioned.rb and commit.

This introduces one problem, however:  If user A creates a migration on a topic branch, then user B does the schema.versioned.rb update, and then user A merges their branch, their migration ends up getting skipped due to the higher :version (with no conflict).

Our solution for now is that, whenever we update the schema.versioned.rb, we delete all included migrations and set the :version to zero.  This prevents old migrations from being re-run, and new migrations from being skipped.

Listing migration versions in the schema.rb (as per Daniel's solution) would be ideal here.

Obviously we have an unsupported non-standard workflow, and I'm not suggesting that Rails cater specifically to that &#8212; but my point is that listing versions is a more complete, more flexible solution that supports various possible workflows much better than just declaring a version cutoff.

Users always have the option to prune the version list when they prune the migrations directory.  I'm not really sure how having a couple hundred lines in a (presumably already rather large) schema file is worse than having the same number of files in a directory.  Especially if they were moved to the bottom instead, say.

As for &quot;Also there is the issue of what order the migrations should be applied - date order or the schema.rb specified order&quot; &#8212; this is a bit of a red herring, since schema.rb doesn't apply migrations, it only declares which migrations have been applied.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I stumbled across this issue by accident, but it's something I
was already considering implementing, so I figured I'd share my two
cents.&lt;/p&gt;
&lt;p&gt;In one of my projects, we use a workflow that avoids the
schema.rb conflicts altogether:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rename schema.rb to schema.versioned.rb in version
control.&lt;/li&gt;
&lt;li&gt;Do migrations as necessary. Users can bootstrap by copying
schema.versioned.rb to schema.rb and applying all remaining
migrations.&lt;/li&gt;
&lt;li&gt;Our CI server always bootstraps from schema.versioned.rb so we
always know about conflicts.&lt;/li&gt;
&lt;li&gt;When the number of migrations gets high, copy your schema.rb
over the schema.versioned.rb and commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This introduces one problem, however: If user A creates a
migration on a topic branch, then user B does the
schema.versioned.rb update, and then user A merges their branch,
their migration ends up getting skipped due to the higher :version
(with no conflict).&lt;/p&gt;
&lt;p&gt;Our solution for now is that, whenever we update the
schema.versioned.rb, we delete all included migrations and set the
:version to zero. This prevents old migrations from being re-run,
and new migrations from being skipped.&lt;/p&gt;
&lt;p&gt;Listing migration versions in the schema.rb (as per Daniel's
solution) would be ideal here.&lt;/p&gt;
&lt;p&gt;Obviously we have an unsupported non-standard workflow, and I'm
not suggesting that Rails cater specifically to that &amp;#8212; but my
point is that listing versions is a more complete, more flexible
solution that supports various possible workflows much better than
just declaring a version cutoff.&lt;/p&gt;
&lt;p&gt;Users always have the option to prune the version list when they
prune the migrations directory. I'm not really sure how having a
couple hundred lines in a (presumably already rather large) schema
file is worse than having the same number of files in a directory.
Especially if they were moved to the bottom instead, say.&lt;/p&gt;
&lt;p&gt;As for &quot;Also there is the issue of what order the migrations
should be applied - date order or the schema.rb specified order&quot;
&amp;#8212; this is a bit of a red herring, since schema.rb doesn't
apply migrations, it only declares which migrations have been
applied.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-11T00:30:55+00:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2010-11-11T00:30:57+00:00</updated-at>
      <user-id type="integer">101392</user-id>
      <version type="integer">7</version>
      <user-name>Adrian Irving-Beer</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-11T19:18:06+00:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2011-02-11T19:18:27+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">8</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-11T19:18:06+00:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2011-02-11T19:18:46+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">9</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-14T03:05:29+00:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2011-02-14T05:41:59+00:00</updated-at>
      <user-id type="integer">136860</user-id>
      <version type="integer">10</version>
      <user-name>xixi</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Today, kids as babyish as Ashcan School or nine name-conscious and trend-alert, puma ducati buying at for solid garments rather than just throwing on what&#8217;s pure. Here are just some of the brands and trends your children hungered over 2011. The 80&#8242;s Are Back. You may have noticed a trend this year for evisu jeans, supra shoes, leggings petticoats, oversized tees, and big &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; shoes. This is a look that appeals to babies girls-it&#8217;s quirky and yet smart at the same time.
&lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; with success sets the charm for manner, lifestyle and gambols. This has been believed to serve for an ideal cross flight simulator. This has been fine-looking by most jocks and the Speed Cat is an old name for the industriousness which made &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; gain millions with this business. With many people converting more wellness conscious in time, a lot wants also to commit on a good pair of cross trainers. These are very indestructible and forward-looking just like the real carrying out of a real &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt;. It consumes been systematically on the forefront of design and carrying out when it pertains comfort and style commingled.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Today, kids as babyish as Ashcan School or nine name-conscious
and trend-alert, puma ducati buying at for solid garments rather
than just throwing on what&amp;#8217;s pure. Here are just some of the
brands and trends your children hungered over 2011. The 80&amp;#8242;s
Are Back. You may have noticed a trend this year for evisu jeans,
supra shoes, leggings petticoats, oversized tees, and big &lt;a href=
&quot;http:&quot;&gt;puma speed cat shoes. This is a look that appeals to babies
girls-it&amp;#8217;s quirky and yet smart at the same time.&lt;br&gt;
&lt;a href=&quot;http:&quot;&gt;Puma future cat with success sets the charm for
manner, lifestyle and gambols. This has been believed to serve for
an ideal cross flight simulator. This has been fine-looking by most
jocks and the Speed Cat is an old name for the industriousness
which made &lt;a href=&quot;http:&quot;&gt;Puma shoes gain millions with this
business. With many people converting more wellness conscious in
time, a lot wants also to commit on a good pair of cross trainers.
These are very indestructible and forward-looking just like the
real carrying out of a real &lt;a href=&quot;http:&quot;&gt;Puma future cat. It
consumes been systematically on the forefront of design and
carrying out when it pertains comfort and style commingled.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-17T08:06:33+00:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2011-02-17T08:07:50+00:00</updated-at>
      <user-id type="integer">137453</user-id>
      <version type="integer">11</version>
      <user-name>gfhg</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;omega watch&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;omega
watch&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-26T01:37:01+00:00</created-at>
      <creator-id type="integer">38102</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5883</number>
      <permalink>design-of-schemadefine-can-cause-missed-migrations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Design of Schema.define() can cause missed migrations</title>
      <updated-at type="datetime">2011-03-26T01:53:37+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">12</version>
      <user-name>bingbing</user-name>
      <creator-name>Daniel Beardsley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5883</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
