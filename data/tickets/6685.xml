<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-07T23:02:49+01:00</created-at>
  <creator-id type="integer">144760</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6685</number>
  <permalink>move-conditions-for-polymorphic-joins-from-where-to-on-clause</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Move conditions for polymorphic joins from WHERE to ON clause</title>
  <updated-at type="datetime">2011-04-07T23:02:51+01:00</updated-at>
  <user-id type="integer">144760</user-id>
  <version type="integer">1</version>
  <user-name>Ryan Aipperspach</user-name>
  <creator-name>Ryan Aipperspach</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6685</url>
  <priority-name nil="true"></priority-name>
  <original-body># The problem #

Polymorphic joins currently add a condition (e.g., taggable_type=&quot;Post&quot;) to the WHERE clause.  When the table being joined is in an outer join (e.g., via a Tag.include(:tagged_posts)), this precludes finding objects that have no matching objects across the join (e.g., Tags that don't have any Posts).

To reproduce, see `test_has_many_polymporphic_with_source_type_and_some_empty_children` in `join_model_test.rb`.

In the current code, the query:
@@@ ruby
Tag.includes(:tagged_posts).where(:taggings =&gt; {:id =&gt; nil}).limit(100)
@@@

generates SQL like:

@@@ sql
SELECT ... FROM tags LEFT OUTER JOIN &quot;taggings&quot; ON &quot;taggings&quot;.&quot;tag_id&quot; = &quot;tags&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;id&quot; = &quot;taggings&quot;.&quot;taggable_id&quot; WHERE &quot;taggings&quot;.&quot;taggable_type&quot; = 'Post' AND &quot;taggings&quot;.&quot;id&quot; IS NULL LIMIT 100
@@@

Which will never find any results because of the conflicting conditions `&quot;taggings&quot;.&quot;taggable_type&quot; = 'Post'` and `&quot;taggings&quot;.&quot;id&quot; IS NULL`. 

After applying this patch, it instead generates:

@@@ sql
SELECT ... FROM &quot;tags&quot; LEFT OUTER JOIN &quot;taggings&quot; ON &quot;taggings&quot;.&quot;tag_id&quot; = &quot;tags&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;id&quot; = &quot;taggings&quot;.&quot;taggable_id&quot; AND &quot;taggings&quot;.&quot;taggable_type&quot; = 'Post' WHERE &quot;taggings&quot;.&quot;id&quot; IS NULL LIMIT 100
@@@

# Solution #

`ThroughReflection#conditions` currently applies a condition of `foreign_type =&gt; options[:source_type]` whenever an association provides a source_type (either directly, or implicitly via a `:through` or `:source` option, which is the source of the errant condition in the query above.

This was replaced with a constraint that is inserted when a join is created, in both `AssociationScope#add_constraints` and `JoinAssociation#join_to` (with the shared code for generating the constraint in `join_helper.rb`:

@@@ ruby
def append_source_type_condition(constraint, table, foreign_table, reflection)
  source_type = reflection.options[:source_type] ||
    (reflection.source_reflection &amp;&amp; 
     reflection.source_reflection.options[:source_type])
     
  if (source_type)
    table.create_and([
      constraint,
      foreign_table[reflection.foreign_type].eq(source_type)
    ])
  else
    constraint
  end
end</original-body>
  <latest-body># The problem #

Polymorphic joins currently add a condition (e.g., taggable_type=&quot;Post&quot;) to the WHERE clause.  When the table being joined is in an outer join (e.g., via a Tag.include(:tagged_posts)), this precludes finding objects that have no matching objects across the join (e.g., Tags that don't have any Posts).

To reproduce, see `test_has_many_polymporphic_with_source_type_and_some_empty_children` in `join_model_test.rb`.

In the current code, the query:
@@@ ruby
Tag.includes(:tagged_posts).where(:taggings =&gt; {:id =&gt; nil}).limit(100)
@@@

generates SQL like:

@@@ sql
SELECT ... FROM tags LEFT OUTER JOIN &quot;taggings&quot; ON &quot;taggings&quot;.&quot;tag_id&quot; = &quot;tags&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;id&quot; = &quot;taggings&quot;.&quot;taggable_id&quot; WHERE &quot;taggings&quot;.&quot;taggable_type&quot; = 'Post' AND &quot;taggings&quot;.&quot;id&quot; IS NULL LIMIT 100
@@@

Which will never find any results because of the conflicting conditions `&quot;taggings&quot;.&quot;taggable_type&quot; = 'Post'` and `&quot;taggings&quot;.&quot;id&quot; IS NULL`. 

After applying this patch, it instead generates:

@@@ sql
SELECT ... FROM &quot;tags&quot; LEFT OUTER JOIN &quot;taggings&quot; ON &quot;taggings&quot;.&quot;tag_id&quot; = &quot;tags&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;id&quot; = &quot;taggings&quot;.&quot;taggable_id&quot; AND &quot;taggings&quot;.&quot;taggable_type&quot; = 'Post' WHERE &quot;taggings&quot;.&quot;id&quot; IS NULL LIMIT 100
@@@

# Solution #

`ThroughReflection#conditions` currently applies a condition of `foreign_type =&gt; options[:source_type]` whenever an association provides a source_type (either directly, or implicitly via a `:through` or `:source` option, which is the source of the errant condition in the query above.

This was replaced with a constraint that is inserted when a join is created, in both `AssociationScope#add_constraints` and `JoinAssociation#join_to` (with the shared code for generating the constraint in `join_helper.rb`:

@@@ ruby
def append_source_type_condition(constraint, table, foreign_table, reflection)
  source_type = reflection.options[:source_type] ||
    (reflection.source_reflection &amp;&amp; 
     reflection.source_reflection.options[:source_type])
     
  if (source_type)
    table.create_and([
      constraint,
      foreign_table[reflection.foreign_type].eq(source_type)
    ])
  else
    constraint
  end
end</latest-body>
  <original-body-html>&lt;div&gt;&lt;h1&gt;The problem&lt;/h1&gt;
&lt;p&gt;Polymorphic joins currently add a condition (e.g.,
taggable_type=&quot;Post&quot;) to the WHERE clause. When the table being
joined is in an outer join (e.g., via a
Tag.include(:tagged_posts)), this precludes finding objects that
have no matching objects across the join (e.g., Tags that don't
have any Posts).&lt;/p&gt;
&lt;p&gt;To reproduce, see
&lt;code&gt;test_has_many_polymporphic_with_source_type_and_some_empty_children&lt;/code&gt;
in &lt;code&gt;join_model_test.rb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the current code, the query:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Tag.includes(:tagged_posts).where(:taggings =&amp;gt; {:id =&amp;gt; nil}).limit(100)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;generates SQL like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT ... FROM tags LEFT OUTER JOIN &quot;taggings&quot; ON &quot;taggings&quot;.&quot;tag_id&quot; = &quot;tags&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;id&quot; = &quot;taggings&quot;.&quot;taggable_id&quot; WHERE &quot;taggings&quot;.&quot;taggable_type&quot; = 'Post' AND &quot;taggings&quot;.&quot;id&quot; IS NULL LIMIT 100&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which will never find any results because of the conflicting
conditions &lt;code&gt;&quot;taggings&quot;.&quot;taggable_type&quot; = 'Post'&lt;/code&gt; and
&lt;code&gt;&quot;taggings&quot;.&quot;id&quot; IS NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After applying this patch, it instead generates:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT ... FROM &quot;tags&quot; LEFT OUTER JOIN &quot;taggings&quot; ON &quot;taggings&quot;.&quot;tag_id&quot; = &quot;tags&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;id&quot; = &quot;taggings&quot;.&quot;taggable_id&quot; AND &quot;taggings&quot;.&quot;taggable_type&quot; = 'Post' WHERE &quot;taggings&quot;.&quot;id&quot; IS NULL LIMIT 100&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;ThroughReflection#conditions&lt;/code&gt; currently applies a
condition of &lt;code&gt;foreign_type =&amp;gt; options[:source_type]&lt;/code&gt;
whenever an association provides a source_type (either directly, or
implicitly via a &lt;code&gt;:through&lt;/code&gt; or &lt;code&gt;:source&lt;/code&gt;
option, which is the source of the errant condition in the query
above.&lt;/p&gt;
&lt;p&gt;This was replaced with a constraint that is inserted when a join
is created, in both &lt;code&gt;AssociationScope#add_constraints&lt;/code&gt;
and &lt;code&gt;JoinAssociation#join_to&lt;/code&gt; (with the shared code for
generating the constraint in &lt;code&gt;join_helper.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;def append_source_type_condition(constraint, table, foreign_table, reflection)
  source_type = reflection.options[:source_type] ||
    (reflection.source_reflection &amp;amp;&amp;amp; 
     reflection.source_reflection.options[:source_type])
     
  if (source_type)
    table.create_and([
      constraint,
      foreign_table[reflection.foreign_type].eq(source_type)
    ])
  else
    constraint
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body># The problem #

Polymorphic joins currently add a condition (e.g., taggable_type=&quot;Post&quot;) to the WHERE clause.  When the table being joined is in an outer join (e.g., via a Tag.include(:tagged_posts)), this precludes finding objects that have no matching objects across the join (e.g., Tags that don't have any Posts).

To reproduce, see `test_has_many_polymporphic_with_source_type_and_some_empty_children` in `join_model_test.rb`.

In the current code, the query:
@@@ ruby
Tag.includes(:tagged_posts).where(:taggings =&gt; {:id =&gt; nil}).limit(100)
@@@

generates SQL like:

@@@ sql
SELECT ... FROM tags LEFT OUTER JOIN &quot;taggings&quot; ON &quot;taggings&quot;.&quot;tag_id&quot; = &quot;tags&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;id&quot; = &quot;taggings&quot;.&quot;taggable_id&quot; WHERE &quot;taggings&quot;.&quot;taggable_type&quot; = 'Post' AND &quot;taggings&quot;.&quot;id&quot; IS NULL LIMIT 100
@@@

Which will never find any results because of the conflicting conditions `&quot;taggings&quot;.&quot;taggable_type&quot; = 'Post'` and `&quot;taggings&quot;.&quot;id&quot; IS NULL`. 

After applying this patch, it instead generates:

@@@ sql
SELECT ... FROM &quot;tags&quot; LEFT OUTER JOIN &quot;taggings&quot; ON &quot;taggings&quot;.&quot;tag_id&quot; = &quot;tags&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;id&quot; = &quot;taggings&quot;.&quot;taggable_id&quot; AND &quot;taggings&quot;.&quot;taggable_type&quot; = 'Post' WHERE &quot;taggings&quot;.&quot;id&quot; IS NULL LIMIT 100
@@@

# Solution #

`ThroughReflection#conditions` currently applies a condition of `foreign_type =&gt; options[:source_type]` whenever an association provides a source_type (either directly, or implicitly via a `:through` or `:source` option, which is the source of the errant condition in the query above.

This was replaced with a constraint that is inserted when a join is created, in both `AssociationScope#add_constraints` and `JoinAssociation#join_to` (with the shared code for generating the constraint in `join_helper.rb`:

@@@ ruby
def append_source_type_condition(constraint, table, foreign_table, reflection)
  source_type = reflection.options[:source_type] ||
    (reflection.source_reflection &amp;&amp; 
     reflection.source_reflection.options[:source_type])
     
  if (source_type)
    table.create_and([
      constraint,
      foreign_table[reflection.foreign_type].eq(source_type)
    ])
  else
    constraint
  end
end</body>
      <body-html>&lt;div&gt;&lt;h1&gt;The problem&lt;/h1&gt;
&lt;p&gt;Polymorphic joins currently add a condition (e.g.,
taggable_type=&quot;Post&quot;) to the WHERE clause. When the table being
joined is in an outer join (e.g., via a
Tag.include(:tagged_posts)), this precludes finding objects that
have no matching objects across the join (e.g., Tags that don't
have any Posts).&lt;/p&gt;
&lt;p&gt;To reproduce, see
&lt;code&gt;test_has_many_polymporphic_with_source_type_and_some_empty_children&lt;/code&gt;
in &lt;code&gt;join_model_test.rb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the current code, the query:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Tag.includes(:tagged_posts).where(:taggings =&amp;gt; {:id =&amp;gt; nil}).limit(100)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;generates SQL like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT ... FROM tags LEFT OUTER JOIN &quot;taggings&quot; ON &quot;taggings&quot;.&quot;tag_id&quot; = &quot;tags&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;id&quot; = &quot;taggings&quot;.&quot;taggable_id&quot; WHERE &quot;taggings&quot;.&quot;taggable_type&quot; = 'Post' AND &quot;taggings&quot;.&quot;id&quot; IS NULL LIMIT 100&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which will never find any results because of the conflicting
conditions &lt;code&gt;&quot;taggings&quot;.&quot;taggable_type&quot; = 'Post'&lt;/code&gt; and
&lt;code&gt;&quot;taggings&quot;.&quot;id&quot; IS NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After applying this patch, it instead generates:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT ... FROM &quot;tags&quot; LEFT OUTER JOIN &quot;taggings&quot; ON &quot;taggings&quot;.&quot;tag_id&quot; = &quot;tags&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;id&quot; = &quot;taggings&quot;.&quot;taggable_id&quot; AND &quot;taggings&quot;.&quot;taggable_type&quot; = 'Post' WHERE &quot;taggings&quot;.&quot;id&quot; IS NULL LIMIT 100&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;ThroughReflection#conditions&lt;/code&gt; currently applies a
condition of &lt;code&gt;foreign_type =&amp;gt; options[:source_type]&lt;/code&gt;
whenever an association provides a source_type (either directly, or
implicitly via a &lt;code&gt;:through&lt;/code&gt; or &lt;code&gt;:source&lt;/code&gt;
option, which is the source of the errant condition in the query
above.&lt;/p&gt;
&lt;p&gt;This was replaced with a constraint that is inserted when a join
is created, in both &lt;code&gt;AssociationScope#add_constraints&lt;/code&gt;
and &lt;code&gt;JoinAssociation#join_to&lt;/code&gt; (with the shared code for
generating the constraint in &lt;code&gt;join_helper.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;def append_source_type_condition(constraint, table, foreign_table, reflection)
  source_type = reflection.options[:source_type] ||
    (reflection.source_reflection &amp;amp;&amp;amp; 
     reflection.source_reflection.options[:source_type])
     
  if (source_type)
    table.create_and([
      constraint,
      foreign_table[reflection.foreign_type].eq(source_type)
    ])
  else
    constraint
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-07T23:02:49+01:00</created-at>
      <creator-id type="integer">144760</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6685</number>
      <permalink>move-conditions-for-polymorphic-joins-from-where-to-on-clause</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Move conditions for polymorphic joins from WHERE to ON clause</title>
      <updated-at type="datetime">2011-04-07T23:02:51+01:00</updated-at>
      <user-id type="integer">144760</user-id>
      <version type="integer">1</version>
      <user-name>Ryan Aipperspach</user-name>
      <creator-name>Ryan Aipperspach</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6685</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>547d0add1048ecc236f779afbf37435b87cba274</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-04-07T23:02:50+01:00</created-at>
      <filename>move_source_type_from_where_to_.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">1002147</id>
      <size type="integer">4776</size>
      <uploader-id type="integer">144760</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/1002147/move_source_type_from_where_to_.diff</url>
    </attachment>
  </attachments>
</ticket>
