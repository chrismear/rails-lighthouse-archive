<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-25T14:31:39+00:00</created-at>
  <creator-id type="integer">767</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6623</number>
  <permalink>render_to_string-in-mailer-causes-subsequent-render-to-fail</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>actioncontroller actionmailer rendering</tag>
  <title>render_to_string in mailer causes subsequent render to fail</title>
  <updated-at type="datetime">2011-04-06T16:32:00+01:00</updated-at>
  <user-id type="integer">127487</user-id>
  <version type="integer">2</version>
  <user-name>bhu</user-name>
  <creator-name>Jacob Tj&#248;rnholm</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6623</url>
  <priority-name nil="true"></priority-name>
  <original-body>I'm using render_to_string in a mailer, and this prevents the rendering of the actual mail from finding the template. 

This seems to be caused by @lookup_context being initialized on the mailer by render_to_string, then reused when rendering the mail. And this breaks because the mail extension (*.text.erb) is not found by the lookup context. 

Here's a minimal example: 
@@@
class NoteMailer &lt; ActionMailer::Base
  default :from =&gt; &quot;from@example.com&quot;

  def foo
    @notes = []
    render_to_string(:template =&gt; &quot;notes/index.html.erb&quot;) # &lt;-- Removing this line makes the test pass
    # self.instance_variable_set(:@lookup_context, nil) # &lt;-- So does enabling this
    mail(:to =&gt; &quot;example@example.com&quot;)
  end
end
@@@

I'm attaching a minimal project containing a functional test that demonstrates this.</original-body>
  <latest-body>I'm using render_to_string in a mailer, and this prevents the rendering of the actual mail from finding the template. 

This seems to be caused by @lookup_context being initialized on the mailer by render_to_string, then reused when rendering the mail. And this breaks because the mail extension (*.text.erb) is not found by the lookup context. 

Here's a minimal example: 
@@@
class NoteMailer &lt; ActionMailer::Base
  default :from =&gt; &quot;from@example.com&quot;

  def foo
    @notes = []
    render_to_string(:template =&gt; &quot;notes/index.html.erb&quot;) # &lt;-- Removing this line makes the test pass
    # self.instance_variable_set(:@lookup_context, nil) # &lt;-- So does enabling this
    mail(:to =&gt; &quot;example@example.com&quot;)
  end
end
@@@

I'm attaching a minimal project containing a functional test that demonstrates this.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm using render_to_string in a mailer, and this prevents the
rendering of the actual mail from finding the template.&lt;/p&gt;
&lt;p&gt;This seems to be caused by @lookup_context being initialized on
the mailer by render_to_string, then reused when rendering the
mail. And this breaks because the mail extension (*.text.erb) is
not found by the lookup context.&lt;/p&gt;
&lt;p&gt;Here's a minimal example:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class NoteMailer &amp;lt; ActionMailer::Base
  default :from =&amp;gt; &quot;from@example.com&quot;

  def foo
    @notes = []
    render_to_string(:template =&amp;gt; &quot;notes/index.html.erb&quot;) # &amp;lt;-- Removing this line makes the test pass
    # self.instance_variable_set(:@lookup_context, nil) # &amp;lt;-- So does enabling this
    mail(:to =&amp;gt; &quot;example@example.com&quot;)
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm attaching a minimal project containing a functional test
that demonstrates this.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm using render_to_string in a mailer, and this prevents the rendering of the actual mail from finding the template. 

This seems to be caused by @lookup_context being initialized on the mailer by render_to_string, then reused when rendering the mail. And this breaks because the mail extension (*.text.erb) is not found by the lookup context. 

Here's a minimal example: 
@@@
class NoteMailer &lt; ActionMailer::Base
  default :from =&gt; &quot;from@example.com&quot;

  def foo
    @notes = []
    render_to_string(:template =&gt; &quot;notes/index.html.erb&quot;) # &lt;-- Removing this line makes the test pass
    # self.instance_variable_set(:@lookup_context, nil) # &lt;-- So does enabling this
    mail(:to =&gt; &quot;example@example.com&quot;)
  end
end
@@@

I'm attaching a minimal project containing a functional test that demonstrates this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm using render_to_string in a mailer, and this prevents the
rendering of the actual mail from finding the template.&lt;/p&gt;
&lt;p&gt;This seems to be caused by @lookup_context being initialized on
the mailer by render_to_string, then reused when rendering the
mail. And this breaks because the mail extension (*.text.erb) is
not found by the lookup context.&lt;/p&gt;
&lt;p&gt;Here's a minimal example:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class NoteMailer &amp;lt; ActionMailer::Base
  default :from =&amp;gt; &quot;from@example.com&quot;

  def foo
    @notes = []
    render_to_string(:template =&amp;gt; &quot;notes/index.html.erb&quot;) # &amp;lt;-- Removing this line makes the test pass
    # self.instance_variable_set(:@lookup_context, nil) # &amp;lt;-- So does enabling this
    mail(:to =&amp;gt; &quot;example@example.com&quot;)
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm attaching a minimal project containing a functional test
that demonstrates this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-25T14:31:39+00:00</created-at>
      <creator-id type="integer">767</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6623</number>
      <permalink>render_to_string-in-mailer-causes-subsequent-render-to-fail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actioncontroller actionmailer</tag>
      <title>render_to_string in mailer causes subsequent render to fail</title>
      <updated-at type="datetime">2011-03-25T14:31:41+00:00</updated-at>
      <user-id type="integer">767</user-id>
      <version type="integer">1</version>
      <user-name>Jacob Tj&#248;rnholm</user-name>
      <creator-name>Jacob Tj&#248;rnholm</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6623</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>think i got the same error

@@@
 def cancellation(contract, user)
    @contract = contract
    kit = PDFKit.new(render_to_string('pdf/cancellation', :layout =&gt; false))
    kit.stylesheets &lt;&lt; 'private/stylesheets/cancellation.css'
    
    attachments['Cancellation.pdf'] = kit.to_pdf

    options = {}
    options[:to] = contract.email
    options[:from] = user.email
    options[:bcc] = user.email if Variable.send_employee_email_bcc
    options[:subject] = &quot;Cancellation&quot;

    mail options
  end
@@@

it renders nothing except the attachment which breaks the mail completely if there is no body.

the format block helps getting around this but i dont think that it's intended for this kind of situation

@@@
mail options do |format|
  format.text
  format.html
end
@@@

with this block the default behavior is some kind of restored. you have to explicitly specify every format. per real default rails is auto detecting which formats are available.

Sorry for not really having a solution, just a workaround :/</body>
      <body-html>&lt;div&gt;&lt;p&gt;think i got the same error&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; def cancellation(contract, user)
    @contract = contract
    kit = PDFKit.new(render_to_string('pdf/cancellation', :layout =&amp;gt; false))
    kit.stylesheets &amp;lt;&amp;lt; 'private/stylesheets/cancellation.css'
    
    attachments['Cancellation.pdf'] = kit.to_pdf

    options = {}
    options[:to] = contract.email
    options[:from] = user.email
    options[:bcc] = user.email if Variable.send_employee_email_bcc
    options[:subject] = &quot;Cancellation&quot;

    mail options
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;it renders nothing except the attachment which breaks the mail
completely if there is no body.&lt;/p&gt;
&lt;p&gt;the format block helps getting around this but i dont think that
it's intended for this kind of situation&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mail options do |format|
  format.text
  format.html
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;with this block the default behavior is some kind of restored.
you have to explicitly specify every format. per real default rails
is auto detecting which formats are available.&lt;/p&gt;
&lt;p&gt;Sorry for not really having a solution, just a workaround :/&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-06T16:31:51+01:00</created-at>
      <creator-id type="integer">767</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: actioncontroller actionmailer
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6623</number>
      <permalink>render_to_string-in-mailer-causes-subsequent-render-to-fail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actioncontroller actionmailer rendering</tag>
      <title>render_to_string in mailer causes subsequent render to fail</title>
      <updated-at type="datetime">2011-04-06T16:32:00+01:00</updated-at>
      <user-id type="integer">127487</user-id>
      <version type="integer">2</version>
      <user-name>bhu</user-name>
      <creator-name>Jacob Tj&#248;rnholm</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6623</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>349a960aaf8034b00111fa368f5c0be8ae7b2ea8</code>
      <content-type>application/zip</content-type>
      <created-at type="datetime">2011-03-25T14:31:39+00:00</created-at>
      <filename>lookup_context_bug.zip</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">978066</id>
      <size type="integer">107368</size>
      <uploader-id type="integer">767</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/978066/lookup_context_bug.zip</url>
    </attachment>
  </attachments>
</ticket>
