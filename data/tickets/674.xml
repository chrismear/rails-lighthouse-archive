<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-22T14:55:34+01:00</created-at>
  <creator-id type="integer">136</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">674</number>
  <permalink>validations_test-rb-tests-make-changes-to-models-without-reverting-them</permalink>
  <priority type="integer">148</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord patch</tag>
  <title>validations_test.rb: tests make changes to models without reverting them</title>
  <updated-at type="datetime">2008-12-19T13:42:36+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">5</version>
  <user-name>Repository</user-name>
  <creator-name>Murray Steele</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/674</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Most of the tests in validations_tests take an existing model, give it a new validation and then do some asserts to make sure that the validations work.  There is code in setup to blank out the validations for Topic (the model used in most of the tests), however, other models are used and they are not being revertted.

The problem is that any test that is run after validations_test may encounter problems where models can't be saved because of the validations added by validations_test.

Also, the current method of simply zero-ing the validations for Topic before each test isn't the best case for this because Topic does have some default validations (has_many :replies adds a default validate_associated_records_for_replies), so the state of the Topic model going into these validations_tests is wrong. It's also wrong after the last validation_test as either anything that happens inside that test will not be reverted or the default Topic validations are not reset.

The attached patch provides a repair_helper for activerecord tests that currently knows how to:

a) repair validations: will record the validation state of a model class, execute the block and then reset the validations afterward.
b) repair default error messages: will record the default error messages inside ActiveRecord::Errors, execute the block and then reset the default error messages.

These can be called with a block inside a test, or without a block in the context of a test case to supply default setup / teardown callbacks to do the same.</original-body>
  <latest-body>Most of the tests in validations_tests take an existing model, give it a new validation and then do some asserts to make sure that the validations work.  There is code in setup to blank out the validations for Topic (the model used in most of the tests), however, other models are used and they are not being revertted.

The problem is that any test that is run after validations_test may encounter problems where models can't be saved because of the validations added by validations_test.

Also, the current method of simply zero-ing the validations for Topic before each test isn't the best case for this because Topic does have some default validations (has_many :replies adds a default validate_associated_records_for_replies), so the state of the Topic model going into these validations_tests is wrong. It's also wrong after the last validation_test as either anything that happens inside that test will not be reverted or the default Topic validations are not reset.

The attached patch provides a repair_helper for activerecord tests that currently knows how to:

a) repair validations: will record the validation state of a model class, execute the block and then reset the validations afterward.
b) repair default error messages: will record the default error messages inside ActiveRecord::Errors, execute the block and then reset the default error messages.

These can be called with a block inside a test, or without a block in the context of a test case to supply default setup / teardown callbacks to do the same.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Most of the tests in validations_tests take an existing model, give it a new validation and then do some asserts to make sure that the validations work.  There is code in setup to blank out the validations for Topic (the model used in most of the tests), however, other models are used and they are not being revertted.
&lt;/p&gt;&lt;p&gt;
The problem is that any test that is run after validations_test may encounter problems where models can't be saved because of the validations added by validations_test.
&lt;/p&gt;&lt;p&gt;
Also, the current method of simply zero-ing the validations for Topic before each test isn't the best case for this because Topic does have some default validations (has_many :replies adds a default validate_associated_records_for_replies), so the state of the Topic model going into these validations_tests is wrong. It's also wrong after the last validation_test as either anything that happens inside that test will not be reverted or the default Topic validations are not reset.
&lt;/p&gt;&lt;p&gt;
The attached patch provides a repair_helper for activerecord tests that currently knows how to:
&lt;/p&gt;&lt;p&gt;
a) repair validations: will record the validation state of a model class, execute the block and then reset the validations afterward.
&lt;/p&gt;&lt;p&gt;
b) repair default error messages: will record the default error messages inside ActiveRecord::Errors, execute the block and then reset the default error messages.
&lt;/p&gt;&lt;p&gt;
These can be called with a block inside a test, or without a block in the context of a test case to supply default setup / teardown callbacks to do the same.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Most of the tests in validations_tests take an existing model, give it a new validation and then do some asserts to make sure that the validations work.  There is code in setup to blank out the validations for Topic (the model used in most of the tests), however, other models are used and they are not being revertted.

The problem is that any test that is run after validations_test may encounter problems where models can't be saved because of the validations added by validations_test.

Also, the current method of simply zero-ing the validations for Topic before each test isn't the best case for this because Topic does have some default validations (has_many :replies adds a default validate_associated_records_for_replies), so the state of the Topic model going into these validations_tests is wrong. It's also wrong after the last validation_test as either anything that happens inside that test will not be reverted or the default Topic validations are not reset.

The attached patch provides a repair_helper for activerecord tests that currently knows how to:

a) repair validations: will record the validation state of a model class, execute the block and then reset the validations afterward.
b) repair default error messages: will record the default error messages inside ActiveRecord::Errors, execute the block and then reset the default error messages.

These can be called with a block inside a test, or without a block in the context of a test case to supply default setup / teardown callbacks to do the same.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Most of the tests in validations_tests take an existing model, give it a new validation and then do some asserts to make sure that the validations work.  There is code in setup to blank out the validations for Topic (the model used in most of the tests), however, other models are used and they are not being revertted.
&lt;/p&gt;&lt;p&gt;
The problem is that any test that is run after validations_test may encounter problems where models can't be saved because of the validations added by validations_test.
&lt;/p&gt;&lt;p&gt;
Also, the current method of simply zero-ing the validations for Topic before each test isn't the best case for this because Topic does have some default validations (has_many :replies adds a default validate_associated_records_for_replies), so the state of the Topic model going into these validations_tests is wrong. It's also wrong after the last validation_test as either anything that happens inside that test will not be reverted or the default Topic validations are not reset.
&lt;/p&gt;&lt;p&gt;
The attached patch provides a repair_helper for activerecord tests that currently knows how to:
&lt;/p&gt;&lt;p&gt;
a) repair validations: will record the validation state of a model class, execute the block and then reset the validations afterward.
&lt;/p&gt;&lt;p&gt;
b) repair default error messages: will record the default error messages inside ActiveRecord::Errors, execute the block and then reset the default error messages.
&lt;/p&gt;&lt;p&gt;
These can be called with a block inside a test, or without a block in the context of a test case to supply default setup / teardown callbacks to do the same.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-22T14:55:35+01:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">674</number>
      <permalink>validations_test-rb-tests-make-changes-to-models-without-reverting-them</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch</tag>
      <title>validations_test.rb: tests make changes to models without reverting them</title>
      <updated-at type="datetime">2008-07-22T14:55:35+01:00</updated-at>
      <user-id type="integer">136</user-id>
      <version type="integer">1</version>
      <user-name>Murray Steele</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/674</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hey Murray,

I think you forgot to include the definition of repair_validations method.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Murray,&lt;/p&gt;
&lt;p&gt;I think you forgot to include the definition of
repair_validations method.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-04T14:42:08+01:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">674</number>
      <permalink>validations_test-rb-tests-make-changes-to-models-without-reverting-them</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord patch</tag>
      <title>validations_test.rb: tests make changes to models without reverting them</title>
      <updated-at type="datetime">2008-10-04T14:42:09+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/674</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>You're right, I'm an idiot.  Attaching a new version.  Although this version no longer includes the repair_default_error_messages stuff because I haven't looked into the new i18N stuff.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You're right, I'm an idiot. Attaching a new version. Although
this version no longer includes the repair_default_error_messages
stuff because I haven't looked into the new i18N stuff.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-26T15:30:38+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">674</number>
      <permalink>validations_test-rb-tests-make-changes-to-models-without-reverting-them</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord patch</tag>
      <title>validations_test.rb: tests make changes to models without reverting them</title>
      <updated-at type="datetime">2008-10-26T15:30:43+00:00</updated-at>
      <user-id type="integer">136</user-id>
      <version type="integer">3</version>
      <user-name>Murray Steele</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/674</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-18T21:33:38+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">674</number>
      <permalink>validations_test-rb-tests-make-changes-to-models-without-reverting-them</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord patch</tag>
      <title>validations_test.rb: tests make changes to models without reverting them</title>
      <updated-at type="datetime">2008-12-18T21:33:41+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/674</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [8a92cdc8638d1f91aaa55fc47743a6210ad2181b]) Add a repair_helper to repair changes to the validations inside validations_test.rb [#674 state:resolved]

Many of the tests in validations_test would add a new validation to
models.  However, only Topic was being reset with a fairly aggressive
clearing of all validations.  None of the other models being used however
were recieving the same treatment.  Now we use repair_validations(Topic)
for the whole test case because most test cases use Topic and then the
block form of repair_validations(&lt;other_models&gt;) inside any tests that use
other models.

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/8a92cdc8638d1f91aaa55fc47743a6210ad2181b</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [8a92cdc8638d1f91aaa55fc47743a6210ad2181b]) Add a
repair_helper to repair changes to the validations inside
validations_test.rb [&lt;a href=&quot;/projects/8994/tickets/674&quot; title=&quot;Ticket #674&quot;&gt;#674&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Many of the tests in validations_test would add a new validation
to models. However, only Topic was being reset with a fairly
aggressive clearing of all validations. None of the other models
being used however were recieving the same treatment. Now we use
repair_validations(Topic) for the whole test case because most test
cases use Topic and then the block form of
repair_validations(&amp;lt;other_models&amp;gt;) inside any tests that use
other models.&lt;/p&gt;
&lt;p&gt;Signed-off-by: Pratik Naik &lt;a href=&quot;mailto:pratiknaik@gmail.com&quot;&gt;pratiknaik@gmail.com&lt;/a&gt; &lt;a href=&quot;http://github.com/rails/rails/commit/8a92cdc8638d1f91aaa55fc47743a6210ad2181b&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-19T13:42:35+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">674</number>
      <permalink>validations_test-rb-tests-make-changes-to-models-without-reverting-them</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord patch</tag>
      <title>validations_test.rb: tests make changes to models without reverting them</title>
      <updated-at type="datetime">2008-12-19T13:42:36+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">5</version>
      <user-name>Repository</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/674</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4921930e9921e1ca97abb39f81bcf7fab9e4658f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-26T15:30:38+00:00</created-at>
      <filename>provide_repair_helper_and_make_validations_tests_use_it.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">57127</id>
      <size type="integer">26575</size>
      <uploader-id type="integer">136</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/57127/provide_repair_helper_and_make_validations_tests_use_it.patch</url>
    </attachment>
  </attachments>
</ticket>
