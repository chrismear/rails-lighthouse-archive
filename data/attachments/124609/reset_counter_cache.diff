From 712514c1015d1d2257f5e1d76c19a532f07dfe8f Mon Sep 17 00:00:00 2001
From: Mike Breen <hardbap@gmail.com>
Date: Wed, 20 May 2009 10:31:12 -0400
Subject: [PATCH] Implement ActiveRecord#reset_counter_cache

---
 activerecord/lib/active_record/base.rb |   18 ++++++++++++++++++
 activerecord/test/cases/base_test.rb   |   10 ++++++++++
 2 files changed, 28 insertions(+), 0 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index 8a65945..39c97dd 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -929,6 +929,24 @@ module ActiveRecord #:nodoc:
         sql = sanitize_conditions(sql)
         connection.select_value(sql, "#{name} Count").to_i
       end
+      
+      # Reset a counter cache for all records.
+      #
+      # ==== Parameters
+      #
+      # * +association_name+ - The name of of the association counter cache to reset
+      #
+      # ==== Examples
+      #   # For all Post records reset the comments_count
+      #   Post.reset_counter_cache(:comments)
+      def reset_counter_cache(association)
+        child_class = reflect_on_association(association).klass        
+        counter_name = child_class.reflect_on_association(self.name.downcase.to_sym).counter_cache_column        
+        
+        find_each do |object|          
+          connection.update("UPDATE #{quoted_table_name} SET #{connection.quote_column_name(counter_name)} = #{object.send(association).count} WHERE #{connection.quote_column_name(primary_key)} = #{quote_value(object.id)}", "#{name} UPDATE")
+        end        
+      end
 
       # A generic "counter updater" implementation, intended primarily to be
       # used by increment_counter and decrement_counter, but which may also
diff --git a/activerecord/test/cases/base_test.rb b/activerecord/test/cases/base_test.rb
index 59aa695..21e1b97 100755
--- a/activerecord/test/cases/base_test.rb
+++ b/activerecord/test/cases/base_test.rb
@@ -625,6 +625,16 @@ class BasicsTest < ActiveRecord::TestCase
     Topic.decrement_counter("replies_count", 2)
     assert_equal -2, Topic.find(2).replies_count
   end
+  
+  def test_reset_counter_cache
+    assert_equal 1, Topic.find(1).replies_count
+    
+    Topic.increment_counter("replies_count", 1)
+    assert_equal 2, Topic.find(1).replies_count 
+    
+    Topic.reset_counter_cache(:replies)
+    assert_equal 1, Topic.find(1).replies_count  
+  end
 
   def test_update_counter
     category = categories(:general)
-- 
1.6.1.3

