<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-23T12:01:46+00:00</created-at>
  <creator-id type="integer">27558</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1791</number>
  <permalink>ar-validates_uniqueness_of-floats-and-find_by_float_field</permalink>
  <priority type="integer">1090</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord find validates_uniqueness_of</tag>
  <title>AR validates_uniqueness_of floats and find_by_FLOAT_FIELD</title>
  <updated-at type="datetime">2010-04-14T21:35:14+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">4</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>joahking</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1791</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>if you try this:
@@@ ruby
model WithFloats &lt; ActiveRecord::Base
validates_uniqueness_of :lat
end
@@@
right now fails (at least mysql, which is my itch!), mainly because the query AR builds is:
@@@ sql
SELECT x FROM xs WHERE lat = 49.2123
@@@
which fails to find existing floats, read more http://dev.mysql.com/doc/refman/5.0/en/problems-with-float.html

I am right now working on it in http://github.com/joahking/rails/tree/floats

My main itches are:
* guaranteeing unique validations on floats (100 % done as now!). 
**NOTE:** mysql validations test are passing (100 %), but ALL mysql tests dont! I'll get into that next does not look hard

* guaranteeing find_by_FLOAT_FIELD work (1 % done).
**NOTE:** test added that fails

my main goal is to make it for mysql, if other db are not tough I would make them too, but if someone like to help would be cool.

cheers,
joahking
PS: the issue reported here is **NOT** happening with BigDecimals and its mysql Decimal repressentation :-)</original-body>
  <latest-body>if you try this:
@@@ ruby
model WithFloats &lt; ActiveRecord::Base
validates_uniqueness_of :lat
end
@@@
right now fails (at least mysql, which is my itch!), mainly because the query AR builds is:
@@@ sql
SELECT x FROM xs WHERE lat = 49.2123
@@@
which fails to find existing floats, read more http://dev.mysql.com/doc/refman/5.0/en/problems-with-float.html

I am right now working on it in http://github.com/joahking/rails/tree/floats

My main itches are:
* guaranteeing unique validations on floats (100 % done as now!). 
**NOTE:** mysql validations test are passing (100 %), but ALL mysql tests dont! I'll get into that next does not look hard

* guaranteeing find_by_FLOAT_FIELD work (1 % done).
**NOTE:** test added that fails

my main goal is to make it for mysql, if other db are not tough I would make them too, but if someone like to help would be cool.

cheers,
joahking
PS: the issue reported here is **NOT** happening with BigDecimals and its mysql Decimal repressentation :-)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;if you try this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
model WithFloats &amp;lt; ActiveRecord::Base
validates_uniqueness_of :lat
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;right now fails (at least mysql, which is my itch!), mainly
because the query AR builds is:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT x FROM xs WHERE lat = 49.2123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which fails to find existing floats, read more &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/problems-with-float.html&quot;&gt;http://dev.mysql.com/doc/refman/...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am right now working on it in &lt;a href=&quot;http://github.com/joahking/rails/tree/floats&quot;&gt;http://github.com/joahking/rails...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My main itches are: * guaranteeing unique validations on floats
(100 % done as now!). &lt;strong&gt;NOTE:&lt;/strong&gt; mysql validations test
are passing (100 %), but ALL mysql tests dont! I'll get into that
next does not look hard&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;guaranteeing find_by_FLOAT_FIELD work (1 % done).
&lt;strong&gt;NOTE:&lt;/strong&gt; test added that fails&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;my main goal is to make it for mysql, if other db are not tough
I would make them too, but if someone like to help would be
cool.&lt;/p&gt;
&lt;p&gt;cheers, joahking PS: the issue reported here is
&lt;strong&gt;NOT&lt;/strong&gt; happening with BigDecimals and its mysql
Decimal repressentation :-)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>if you try this:
@@@ ruby
model WithFloat &lt; ActiveRecord::Base
validates_uniqueness_of :lat
end
@@@
right now fails (at least mysql, which is my itch!), mainly because the query AR builds is:
@@@ sql
SELECT `with_floats`.* FROM `with_floats` WHERE `with_floats`.`lat` = 49.2123
@@@
which fails to find existing floats, read more http://dev.mysql.com/doc/refman/5.0/en/problems-with-float.html

I am right now working on it in http://github.com/joahking/rails/tree/floats

My main itches are:

* guaranteeing unique validations on floats (100 % done as now!). 

**NOTE:** mysql validations test are passing (100 %), but ALL mysql tests dont! I'll get into that next does not look hard

* guaranteeing find_by_FLOAT_FIELD works (1 % done).

**NOTE:** test added that fails

my main goal is to make it for mysql, if other db are not tough I would make them too, but if someone like to help would be cool.

cheers,
joahking

PS: the issue reported here is **NOT** happening with BigDecimals and its mysql Decimal repressentation :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;if you try this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
model WithFloat &amp;lt; ActiveRecord::Base
validates_uniqueness_of :lat
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;right now fails (at least mysql, which is my itch!), mainly
because the query AR builds is:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT `with_floats`.* FROM `with_floats` WHERE `with_floats`.`lat` = 49.2123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which fails to find existing floats, read more &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/problems-with-float.html&quot;&gt;http://dev.mysql.com/doc/refman/...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am right now working on it in &lt;a href=&quot;http://github.com/joahking/rails/tree/floats&quot;&gt;http://github.com/joahking/rails...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My main itches are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;guaranteeing unique validations on floats (100 % done as
now!).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; mysql validations test are passing (100
%), but ALL mysql tests dont! I'll get into that next does not look
hard&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;guaranteeing find_by_FLOAT_FIELD works (1 % done).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; test added that fails&lt;/p&gt;
&lt;p&gt;my main goal is to make it for mysql, if other db are not tough
I would make them too, but if someone like to help would be
cool.&lt;/p&gt;
&lt;p&gt;cheers, joahking&lt;/p&gt;
&lt;p&gt;PS: the issue reported here is &lt;strong&gt;NOT&lt;/strong&gt; happening
with BigDecimals and its mysql Decimal repressentation :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-23T12:01:47+00:00</created-at>
      <creator-id type="integer">27558</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1791</number>
      <permalink>ar-validates_uniqueness_of-floats-and-find_by_float_field</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord find validates_uniqueness_of</tag>
      <title>AR validates_uniqueness_of floats and find_by_FLOAT_FIELD</title>
      <updated-at type="datetime">2009-01-23T12:07:08+00:00</updated-at>
      <user-id type="integer">27558</user-id>
      <version type="integer">1</version>
      <user-name>joahking</user-name>
      <creator-name>joahking</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1791</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15159</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Any further news on this? I tried today on Rails 2.3.5 and got the following query by doing a `Place.find_by_lat`

    SELECT * FROM &quot;places&quot; WHERE (&quot;places&quot;.&quot;lat&quot; = '45.3243')

To me, this is expected behavior.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Any further news on this? I tried today on Rails 2.3.5 and got
the following query by doing a &lt;code&gt;Place.find_by_lat&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT * FROM &quot;places&quot; WHERE (&quot;places&quot;.&quot;lat&quot; = '45.3243')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To me, this is expected behavior.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-10T11:42:11+01:00</created-at>
      <creator-id type="integer">27558</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1791</number>
      <permalink>ar-validates_uniqueness_of-floats-and-find_by_float_field</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord find validates_uniqueness_of</tag>
      <title>AR validates_uniqueness_of floats and find_by_FLOAT_FIELD</title>
      <updated-at type="datetime">2010-04-10T11:42:15+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">2</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>joahking</creator-name>
      <assigned-user-name>Mikel Lindsaar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1791</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Like Ryan, I was unable to duplicate this issue with Rails 2.3.5:

@@@
&#10140;  code  rails -v
Rails 2.3.5
&#10140;  code  rails validates_uniqueness_of_float
...
&#10140;  code  cd validates_uniqueness_of_float 
&#10140;  validates_uniqueness_of_float  script/generate model place lat:float
...
&#10140;  validates_uniqueness_of_float  rake db:migrate
(in /Users/dtrasbo/code/validates_uniqueness_of_float)
...
&#10140;  validates_uniqueness_of_float  script/console 
Loading development environment (Rails 2.3.5)
ruby-1.8.7-p249 &gt; Place.create!(:lat =&gt; '42.123')
 =&gt; #&lt;Place id: 1, lat: 42.123, created_at: &quot;2010-04-14 19:53:00&quot;, updated_at: &quot;2010-04-14 19:53:00&quot;&gt; 
ruby-1.8.7-p249 &gt; Place.create!(:lat =&gt; '42.123')
ActiveRecord::RecordInvalid: Validation failed: Lat has already been taken
...
ruby-1.8.7-p249 &gt; Place.find_by_lat(42.123)
 =&gt; #&lt;Place id: 1, lat: 42.123, created_at: &quot;2010-04-14 19:53:00&quot;, updated_at: &quot;2010-04-14 19:53:00&quot;&gt; 
@@@

@@@ ruby
class Place &lt; ActiveRecord::Base
  validates_uniqueness_of :lat
end
@@@

This ticket can be closed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Like Ryan, I was unable to duplicate this issue with Rails
2.3.5:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;#10140;  code  rails -v
Rails 2.3.5
&amp;#10140;  code  rails validates_uniqueness_of_float
...
&amp;#10140;  code  cd validates_uniqueness_of_float 
&amp;#10140;  validates_uniqueness_of_float  script/generate model place lat:float
...
&amp;#10140;  validates_uniqueness_of_float  rake db:migrate
(in /Users/dtrasbo/code/validates_uniqueness_of_float)
...
&amp;#10140;  validates_uniqueness_of_float  script/console 
Loading development environment (Rails 2.3.5)
ruby-1.8.7-p249 &amp;gt; Place.create!(:lat =&amp;gt; '42.123')
 =&amp;gt; #&amp;lt;Place id: 1, lat: 42.123, created_at: &quot;2010-04-14 19:53:00&quot;, updated_at: &quot;2010-04-14 19:53:00&quot;&amp;gt; 
ruby-1.8.7-p249 &amp;gt; Place.create!(:lat =&amp;gt; '42.123')
ActiveRecord::RecordInvalid: Validation failed: Lat has already been taken
...
ruby-1.8.7-p249 &amp;gt; Place.find_by_lat(42.123)
 =&amp;gt; #&amp;lt;Place id: 1, lat: 42.123, created_at: &quot;2010-04-14 19:53:00&quot;, updated_at: &quot;2010-04-14 19:53:00&quot;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Place &amp;lt; ActiveRecord::Base
  validates_uniqueness_of :lat
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This ticket can be closed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-14T20:56:51+01:00</created-at>
      <creator-id type="integer">27558</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 15159
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1791</number>
      <permalink>ar-validates_uniqueness_of-floats-and-find_by_float_field</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord find validates_uniqueness_of</tag>
      <title>AR validates_uniqueness_of floats and find_by_FLOAT_FIELD</title>
      <updated-at type="datetime">2010-04-14T20:56:59+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">3</version>
      <user-name>David Trasbo</user-name>
      <creator-name>joahking</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1791</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-14T21:31:48+01:00</created-at>
      <creator-id type="integer">27558</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1791</number>
      <permalink>ar-validates_uniqueness_of-floats-and-find_by_float_field</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord find validates_uniqueness_of</tag>
      <title>AR validates_uniqueness_of floats and find_by_FLOAT_FIELD</title>
      <updated-at type="datetime">2010-04-14T21:35:14+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">4</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>joahking</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1791</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
