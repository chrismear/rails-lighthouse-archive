<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-16T21:07:28+00:00</created-at>
  <creator-id type="integer">79967</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3587</number>
  <permalink>primary-key-value-is-not-properly-quoted-with-has_many-through-using-belongs_to</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Primary key value is not properly quoted with has_many :through using belongs_to</title>
  <updated-at type="datetime">2010-10-09T22:04:45+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">5</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Gustav Broberg</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3587</url>
  <priority-name>Low</priority-name>
  <original-body>The `has_many :through` association where the _through_ association is a `belongs_to`, (a feature introduced by #323) can generate SQL queries with an unquoted primary key value.

The following example will fail when the `has_many :through` association is used and Ocean's primary key value is something that needs quoting.

@@@ ruby
    class Fisherman &lt; ActiveRecord::Base
      belongs_to :ocean
      has_many :crabs, :through =&gt; :ocean
    end

    class Ocean &lt; ActiveRecord::Base
      # Ocean's primary key is e.g. a string
      has_many :crabs
    end
 
    class Crab &lt; ActiveRecord::Base; end
@@@

Here is an example of what this might yield:

    &gt;&gt; f = Fisherman.first
    =&gt; #&lt;Fisherman id: 2, ocean_id: &quot;atlantic&quot;&gt;
    &gt;&gt; f.crabs

    ActiveRecord::StatementInvalid: [...]
     no such column: atlantic:
      SELECT &quot;crabs&quot;.* FROM &quot;crabs&quot;
      INNER JOIN &quot;oceans&quot; ON &quot;crabs&quot;.ocean_id = &quot;oceans&quot;.id
      WHERE ((&quot;oceans&quot;.id = atlantic))

The bug is in HasManyThroughAssociation's `construct_quoted_owner_attributes`. It properly quotes the primary key value for the two other types of `has_many :through`, but not the `belongs_to`:

@@@ ruby
    # Associate attributes pointing to owner, quoted.
    def construct_quoted_owner_attributes(reflection)
      if as = reflection.options[:as]
        { &quot;#{as}_id&quot; =&gt; owner_quoted_id,
          &quot;#{as}_type&quot; =&gt; reflection.klass.quote_value(
            @owner.class.base_class.name.to_s,
            reflection.klass.columns_hash[&quot;#{as}_type&quot;]) }
      elsif reflection.macro == :belongs_to
        { reflection.klass.primary_key =&gt; @owner[reflection.primary_key_name] }
      else
        { reflection.primary_key_name =&gt; owner_quoted_id }
      end
    end
@@@

This is clearly wrong as the method name and comment indicates that it should quote the attributes. The code in question was commited in [95e1cf4812...](http://github.com/rails/rails/commit/95e1cf4812d4b964d7ab0fdf4bfa31177d27909c#L1R114 &quot;Fix has_many :through when the source is a belongs_to association&quot;). I have attached a simple patch to add the needed quoting.</original-body>
  <latest-body>The `has_many :through` association where the _through_ association is a `belongs_to`, (a feature introduced by #323) can generate SQL queries with an unquoted primary key value.

The following example will fail when the `has_many :through` association is used and Ocean's primary key value is something that needs quoting.

@@@ ruby
    class Fisherman &lt; ActiveRecord::Base
      belongs_to :ocean
      has_many :crabs, :through =&gt; :ocean
    end

    class Ocean &lt; ActiveRecord::Base
      # Ocean's primary key is e.g. a string
      has_many :crabs
    end
 
    class Crab &lt; ActiveRecord::Base; end
@@@

Here is an example of what this might yield:

    &gt;&gt; f = Fisherman.first
    =&gt; #&lt;Fisherman id: 2, ocean_id: &quot;atlantic&quot;&gt;
    &gt;&gt; f.crabs

    ActiveRecord::StatementInvalid: [...]
     no such column: atlantic:
      SELECT &quot;crabs&quot;.* FROM &quot;crabs&quot;
      INNER JOIN &quot;oceans&quot; ON &quot;crabs&quot;.ocean_id = &quot;oceans&quot;.id
      WHERE ((&quot;oceans&quot;.id = atlantic))

The bug is in HasManyThroughAssociation's `construct_quoted_owner_attributes`. It properly quotes the primary key value for the two other types of `has_many :through`, but not the `belongs_to`:

@@@ ruby
    # Associate attributes pointing to owner, quoted.
    def construct_quoted_owner_attributes(reflection)
      if as = reflection.options[:as]
        { &quot;#{as}_id&quot; =&gt; owner_quoted_id,
          &quot;#{as}_type&quot; =&gt; reflection.klass.quote_value(
            @owner.class.base_class.name.to_s,
            reflection.klass.columns_hash[&quot;#{as}_type&quot;]) }
      elsif reflection.macro == :belongs_to
        { reflection.klass.primary_key =&gt; @owner[reflection.primary_key_name] }
      else
        { reflection.primary_key_name =&gt; owner_quoted_id }
      end
    end
@@@

This is clearly wrong as the method name and comment indicates that it should quote the attributes. The code in question was commited in [95e1cf4812...](http://github.com/rails/rails/commit/95e1cf4812d4b964d7ab0fdf4bfa31177d27909c#L1R114 &quot;Fix has_many :through when the source is a belongs_to association&quot;). I have attached a simple patch to add the needed quoting.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The &lt;code&gt;has_many :through&lt;/code&gt; association where the
&lt;em&gt;through&lt;/em&gt; association is a &lt;code&gt;belongs_to&lt;/code&gt;, (a
feature introduced by &lt;a href=&quot;/projects/8994/tickets/323&quot; title=
&quot;Ticket #323&quot;&gt;#323&lt;/a&gt;) can generate SQL queries with an unquoted
primary key value.&lt;/p&gt;
&lt;p&gt;The following example will fail when the &lt;code&gt;has_many
:through&lt;/code&gt; association is used and Ocean's primary key value
is something that needs quoting.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    class Fisherman &amp;lt; ActiveRecord::Base
      belongs_to :ocean
      has_many :crabs, :through =&amp;gt; :ocean
    end

    class Ocean &amp;lt; ActiveRecord::Base
      # Ocean's primary key is e.g. a string
      has_many :crabs
    end
 
    class Crab &amp;lt; ActiveRecord::Base; end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here is an example of what this might yield:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; f = Fisherman.first
=&amp;gt; #&amp;lt;Fisherman id: 2, ocean_id: &quot;atlantic&quot;&amp;gt;
&amp;gt;&amp;gt; f.crabs

ActiveRecord::StatementInvalid: [...]
 no such column: atlantic:
  SELECT &quot;crabs&quot;.* FROM &quot;crabs&quot;
  INNER JOIN &quot;oceans&quot; ON &quot;crabs&quot;.ocean_id = &quot;oceans&quot;.id
  WHERE ((&quot;oceans&quot;.id = atlantic))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The bug is in HasManyThroughAssociation's
&lt;code&gt;construct_quoted_owner_attributes&lt;/code&gt;. It properly quotes
the primary key value for the two other types of &lt;code&gt;has_many
:through&lt;/code&gt;, but not the &lt;code&gt;belongs_to&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    # Associate attributes pointing to owner, quoted.
    def construct_quoted_owner_attributes(reflection)
      if as = reflection.options[:as]
        { &quot;#{as}_id&quot; =&amp;gt; owner_quoted_id,
          &quot;#{as}_type&quot; =&amp;gt; reflection.klass.quote_value(
            @owner.class.base_class.name.to_s,
            reflection.klass.columns_hash[&quot;#{as}_type&quot;]) }
      elsif reflection.macro == :belongs_to
        { reflection.klass.primary_key =&amp;gt; @owner[reflection.primary_key_name] }
      else
        { reflection.primary_key_name =&amp;gt; owner_quoted_id }
      end
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is clearly wrong as the method name and comment indicates
that it should quote the attributes. The code in question was
commited in &lt;a href=
&quot;http://github.com/rails/rails/commit/95e1cf4812d4b964d7ab0fdf4bfa31177d27909c#L1R114&quot;
title=
&quot;Fix has_many :through when the source is a belongs_to association&quot;&gt;
95e1cf4812...&lt;/a&gt;. I have attached a simple patch to add the needed
quoting.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The `has_many :through` association where the _through_ association is a `belongs_to`, (a feature introduced by #323) can generate SQL queries with an unquoted primary key value.

The following example will fail when the `has_many :through` association is used and Ocean's primary key value is something that needs quoting.

@@@ ruby
    class Fisherman &lt; ActiveRecord::Base
      belongs_to :ocean
      has_many :crabs, :through =&gt; :ocean
    end

    class Ocean &lt; ActiveRecord::Base
      # Ocean's primary key is e.g. a string
      has_many :crabs
    end
 
    class Crab &lt; ActiveRecord::Base; end
@@@

Here is an example of what this might yield:

    &gt;&gt; f = Fisherman.first
    =&gt; #&lt;Fisherman id: 2, ocean_id: &quot;atlantic&quot;&gt;
    &gt;&gt; f.crabs

    ActiveRecord::StatementInvalid: [...]
     no such column: atlantic:
      SELECT &quot;crabs&quot;.* FROM &quot;crabs&quot;
      INNER JOIN &quot;oceans&quot; ON &quot;crabs&quot;.ocean_id = &quot;oceans&quot;.id
      WHERE ((&quot;oceans&quot;.id = atlantic))

The bug is in HasManyThroughAssociation's `construct_quoted_owner_attributes`. It properly quotes the primary key value for the two other types of `has_many :through`, but not the `belongs_to`:

@@@ ruby
    # Associate attributes pointing to owner, quoted.
    def construct_quoted_owner_attributes(reflection)
      if as = reflection.options[:as]
        { &quot;#{as}_id&quot; =&gt; owner_quoted_id,
          &quot;#{as}_type&quot; =&gt; reflection.klass.quote_value(
            @owner.class.base_class.name.to_s,
            reflection.klass.columns_hash[&quot;#{as}_type&quot;]) }
      elsif reflection.macro == :belongs_to
        { reflection.klass.primary_key =&gt; @owner[reflection.primary_key_name] }
      else
        { reflection.primary_key_name =&gt; owner_quoted_id }
      end
    end
@@@

This is clearly wrong as the method name and comment indicates that it should quote the attributes. The code in question was commited in [95e1cf4812...](http://github.com/rails/rails/commit/95e1cf4812d4b964d7ab0fdf4bfa31177d27909c#L1R114 &quot;Fix has_many :through when the source is a belongs_to association&quot;). I have attached a simple patch to add the needed quoting.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The &lt;code&gt;has_many :through&lt;/code&gt; association where the
&lt;em&gt;through&lt;/em&gt; association is a &lt;code&gt;belongs_to&lt;/code&gt;, (a
feature introduced by &lt;a href=&quot;/projects/8994/tickets/323&quot; title=
&quot;Ticket #323&quot;&gt;#323&lt;/a&gt;) can generate SQL queries with an unquoted
primary key value.&lt;/p&gt;
&lt;p&gt;The following example will fail when the &lt;code&gt;has_many
:through&lt;/code&gt; association is used and Ocean's primary key value
is something that needs quoting.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    class Fisherman &amp;lt; ActiveRecord::Base
      belongs_to :ocean
      has_many :crabs, :through =&amp;gt; :ocean
    end

    class Ocean &amp;lt; ActiveRecord::Base
      # Ocean's primary key is e.g. a string
      has_many :crabs
    end
 
    class Crab &amp;lt; ActiveRecord::Base; end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here is an example of what this might yield:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; f = Fisherman.first
=&amp;gt; #&amp;lt;Fisherman id: 2, ocean_id: &quot;atlantic&quot;&amp;gt;
&amp;gt;&amp;gt; f.crabs

ActiveRecord::StatementInvalid: [...]
 no such column: atlantic:
  SELECT &quot;crabs&quot;.* FROM &quot;crabs&quot;
  INNER JOIN &quot;oceans&quot; ON &quot;crabs&quot;.ocean_id = &quot;oceans&quot;.id
  WHERE ((&quot;oceans&quot;.id = atlantic))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The bug is in HasManyThroughAssociation's
&lt;code&gt;construct_quoted_owner_attributes&lt;/code&gt;. It properly quotes
the primary key value for the two other types of &lt;code&gt;has_many
:through&lt;/code&gt;, but not the &lt;code&gt;belongs_to&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    # Associate attributes pointing to owner, quoted.
    def construct_quoted_owner_attributes(reflection)
      if as = reflection.options[:as]
        { &quot;#{as}_id&quot; =&amp;gt; owner_quoted_id,
          &quot;#{as}_type&quot; =&amp;gt; reflection.klass.quote_value(
            @owner.class.base_class.name.to_s,
            reflection.klass.columns_hash[&quot;#{as}_type&quot;]) }
      elsif reflection.macro == :belongs_to
        { reflection.klass.primary_key =&amp;gt; @owner[reflection.primary_key_name] }
      else
        { reflection.primary_key_name =&amp;gt; owner_quoted_id }
      end
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is clearly wrong as the method name and comment indicates
that it should quote the attributes. The code in question was
commited in &lt;a href=
&quot;http://github.com/rails/rails/commit/95e1cf4812d4b964d7ab0fdf4bfa31177d27909c#L1R114&quot;
title=
&quot;Fix has_many :through when the source is a belongs_to association&quot;&gt;
95e1cf4812...&lt;/a&gt;. I have attached a simple patch to add the needed
quoting.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-16T21:07:28+00:00</created-at>
      <creator-id type="integer">79967</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3587</number>
      <permalink>primary-key-value-is-not-properly-quoted-with-has_many-through-using-belongs_to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 has_many_through_association patch quoting sql</tag>
      <title>Primary key value is not properly quoted with has_many :through using belongs_to</title>
      <updated-at type="datetime">2009-12-17T15:31:14+00:00</updated-at>
      <user-id type="integer">79967</user-id>
      <version type="integer">1</version>
      <user-name>Gustav Broberg</user-name>
      <creator-name>Gustav Broberg</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3587</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-17T01:30:56+00:00</created-at>
      <creator-id type="integer">79967</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3587</number>
      <permalink>primary-key-value-is-not-properly-quoted-with-has_many-through-using-belongs_to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 has_many_through_association patch quoting sql</tag>
      <title>Primary key value is not properly quoted with has_many :through using belongs_to</title>
      <updated-at type="datetime">2009-12-17T01:30:57+00:00</updated-at>
      <user-id type="integer">79967</user-id>
      <version type="integer">2</version>
      <user-name>Gustav Broberg</user-name>
      <creator-name>Gustav Broberg</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3587</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-09T03:11:57+01:00</created-at>
      <creator-id type="integer">79967</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3587</number>
      <permalink>primary-key-value-is-not-properly-quoted-with-has_many-through-using-belongs_to</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.3.5 has_many_through_association patch quoting sql</tag>
      <title>Primary key value is not properly quoted with has_many :through using belongs_to</title>
      <updated-at type="datetime">2010-10-09T03:12:00+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">3</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Gustav Broberg</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3587</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-09T22:04:42+01:00</created-at>
      <creator-id type="integer">79967</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.5 has_many_through_association patch quoting sql
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3587</number>
      <permalink>primary-key-value-is-not-properly-quoted-with-has_many-through-using-belongs_to</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Primary key value is not properly quoted with has_many :through using belongs_to</title>
      <updated-at type="datetime">2010-10-09T22:04:44+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">5</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Gustav Broberg</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3587</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>42e402732786f183d6d67c943b04b28a9ccb2db9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-12-16T21:07:28+00:00</created-at>
      <filename>quote-primary-key-in-has_many_through.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">355115</id>
      <size type="integer">877</size>
      <uploader-id type="integer">79967</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/355115/quote-primary-key-in-has_many_through.diff</url>
    </attachment>
  </attachments>
</ticket>
