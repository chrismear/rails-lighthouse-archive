<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-03-08T19:42:28+00:00</created-at>
  <creator-id type="integer">26330</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4132</number>
  <permalink>named_scope-gets-applied-to-self-referential-relations</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>named_scope</tag>
  <title>named_scope gets applied to self-referential relations</title>
  <updated-at type="datetime">2011-02-02T18:57:47+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>elDub</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4132</url>
  <priority-name>Low</priority-name>
  <original-body>When performing a find using a named scope on an object which utilizes acts_as_tree, the scope is getting applied to the acts_as_tree relations in addition to the primary find request.

Example:

@@@
class Job &lt; ActiveRecord::Base
  acts_as_tree

  named_scope :bases, :conditions =&gt; { :parent_id =&gt; nil }
end
@@@

Performing:

@@@
Job.bases.destroy_all
@@@

Will only destroy the base jobs and not their Job#children jobs.  Here is the log output:

@@@
Job Load (1.5ms)   SELECT * FROM &quot;jobs&quot; WHERE (&quot;jobs&quot;.&quot;parent_id&quot; IS NULL) 
SQL (0.2ms)   BEGIN
Job Load (7.6ms)   SELECT * FROM &quot;jobs&quot; WHERE (&quot;jobs&quot;.parent_id = 1) AND (&quot;jobs&quot;.&quot;parent_id&quot; IS NULL)
Job Destroy (0.2ms)   DELETE FROM &quot;jobs&quot; WHERE &quot;id&quot; = 1
@@@

Note that the automatically generated query of children is getting the bases scope added to it which will return zero records since a job's parent_id cannot be equal to 1 AND not null.

Had I directly queried the jobs WITHOUT a named scope, the automatic destruction of the children would happen as expected.</original-body>
  <latest-body>When performing a find using a named scope on an object which utilizes acts_as_tree, the scope is getting applied to the acts_as_tree relations in addition to the primary find request.

Example:

@@@
class Job &lt; ActiveRecord::Base
  acts_as_tree

  named_scope :bases, :conditions =&gt; { :parent_id =&gt; nil }
end
@@@

Performing:

@@@
Job.bases.destroy_all
@@@

Will only destroy the base jobs and not their Job#children jobs.  Here is the log output:

@@@
Job Load (1.5ms)   SELECT * FROM &quot;jobs&quot; WHERE (&quot;jobs&quot;.&quot;parent_id&quot; IS NULL) 
SQL (0.2ms)   BEGIN
Job Load (7.6ms)   SELECT * FROM &quot;jobs&quot; WHERE (&quot;jobs&quot;.parent_id = 1) AND (&quot;jobs&quot;.&quot;parent_id&quot; IS NULL)
Job Destroy (0.2ms)   DELETE FROM &quot;jobs&quot; WHERE &quot;id&quot; = 1
@@@

Note that the automatically generated query of children is getting the bases scope added to it which will return zero records since a job's parent_id cannot be equal to 1 AND not null.

Had I directly queried the jobs WITHOUT a named scope, the automatic destruction of the children would happen as expected.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When performing a find using a named scope on an object which
utilizes acts_as_tree, the scope is getting applied to the
acts_as_tree relations in addition to the primary find request.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Job &amp;lt; ActiveRecord::Base
  acts_as_tree

  named_scope :bases, :conditions =&amp;gt; { :parent_id =&amp;gt; nil }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Performing:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Job.bases.destroy_all&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Will only destroy the base jobs and not their Job#children jobs.
Here is the log output:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Job Load (1.5ms)   SELECT * FROM &quot;jobs&quot; WHERE (&quot;jobs&quot;.&quot;parent_id&quot; IS NULL) 
SQL (0.2ms)   BEGIN
Job Load (7.6ms)   SELECT * FROM &quot;jobs&quot; WHERE (&quot;jobs&quot;.parent_id = 1) AND (&quot;jobs&quot;.&quot;parent_id&quot; IS NULL)
Job Destroy (0.2ms)   DELETE FROM &quot;jobs&quot; WHERE &quot;id&quot; = 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that the automatically generated query of children is
getting the bases scope added to it which will return zero records
since a job's parent_id cannot be equal to 1 AND not null.&lt;/p&gt;
&lt;p&gt;Had I directly queried the jobs WITHOUT a named scope, the
automatic destruction of the children would happen as expected.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When performing a find using a named scope on an object which utilizes acts_as_tree, the scope is getting applied to the acts_as_tree relations in addition to the primary find request.

Example:

@@@
class Job &lt; ActiveRecord::Base
  acts_as_tree

  named_scope :bases, :conditions =&gt; { :parent_id =&gt; nil }
end
@@@

Performing:

@@@
Job.bases.destroy_all
@@@

Will only destroy the base jobs and not their Job#children jobs.  Here is the log output:

@@@
Job Load (1.5ms)   SELECT * FROM &quot;jobs&quot; WHERE (&quot;jobs&quot;.&quot;parent_id&quot; IS NULL) 
SQL (0.2ms)   BEGIN
Job Load (7.6ms)   SELECT * FROM &quot;jobs&quot; WHERE (&quot;jobs&quot;.parent_id = 1) AND (&quot;jobs&quot;.&quot;parent_id&quot; IS NULL)
Job Destroy (0.2ms)   DELETE FROM &quot;jobs&quot; WHERE &quot;id&quot; = 1
@@@

Note that the automatically generated query of children is getting the bases scope added to it which will return zero records since a job's parent_id cannot be equal to 1 AND not null.

Had I directly queried the jobs WITHOUT a named scope, the automatic destruction of the children would happen as expected.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When performing a find using a named scope on an object which
utilizes acts_as_tree, the scope is getting applied to the
acts_as_tree relations in addition to the primary find request.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Job &amp;lt; ActiveRecord::Base
  acts_as_tree

  named_scope :bases, :conditions =&amp;gt; { :parent_id =&amp;gt; nil }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Performing:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Job.bases.destroy_all&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Will only destroy the base jobs and not their Job#children jobs.
Here is the log output:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Job Load (1.5ms)   SELECT * FROM &quot;jobs&quot; WHERE (&quot;jobs&quot;.&quot;parent_id&quot; IS NULL) 
SQL (0.2ms)   BEGIN
Job Load (7.6ms)   SELECT * FROM &quot;jobs&quot; WHERE (&quot;jobs&quot;.parent_id = 1) AND (&quot;jobs&quot;.&quot;parent_id&quot; IS NULL)
Job Destroy (0.2ms)   DELETE FROM &quot;jobs&quot; WHERE &quot;id&quot; = 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that the automatically generated query of children is
getting the bases scope added to it which will return zero records
since a job's parent_id cannot be equal to 1 AND not null.&lt;/p&gt;
&lt;p&gt;Had I directly queried the jobs WITHOUT a named scope, the
automatic destruction of the children would happen as expected.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-08T19:42:28+00:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4132</number>
      <permalink>named_scope-gets-applied-to-self-referential-relations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;named_scope acts_as_tree&quot;</tag>
      <title>named_scope gets applied to self-referential relations</title>
      <updated-at type="datetime">2010-03-08T19:42:33+00:00</updated-at>
      <user-id type="integer">26330</user-id>
      <version type="integer">1</version>
      <user-name>elDub</user-name>
      <creator-name>elDub</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4132</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Could you please provide a failing test case? Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Could you please provide a failing test case? Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-08T22:55:28+00:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4132</number>
      <permalink>named_scope-gets-applied-to-self-referential-relations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;named_scope acts_as_tree&quot;</tag>
      <title>named_scope gets applied to self-referential relations</title>
      <updated-at type="datetime">2010-03-08T23:11:27+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">2</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>elDub</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4132</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is a failing test case based off the v2.3.5 tag.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is a failing test case based off the v2.3.5 tag.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-09T03:20:16+00:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4132</number>
      <permalink>named_scope-gets-applied-to-self-referential-relations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;named_scope acts_as_tree&quot;</tag>
      <title>named_scope gets applied to self-referential relations</title>
      <updated-at type="datetime">2010-03-09T03:20:22+00:00</updated-at>
      <user-id type="integer">26330</user-id>
      <version type="integer">3</version>
      <user-name>elDub</user-name>
      <creator-name>elDub</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4132</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-24T13:34:55+00:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;named_scope acts_as_tree\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4132</number>
      <permalink>named_scope-gets-applied-to-self-referential-relations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>named_scope</tag>
      <title>named_scope gets applied to self-referential relations</title>
      <updated-at type="datetime">2010-03-24T13:34:57+00:00</updated-at>
      <user-id type="integer">26330</user-id>
      <version type="integer">4</version>
      <user-name>elDub</user-name>
      <creator-name>elDub</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4132</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've also run into this bug.  It's not related to acts_as_tree, it seems to happen when calling destroy_all on a named_scope on an association.

I've created a minimal app to illustrate the problem here: https://gist.github.com/2a208d1e03ce0d0e0fef</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've also run into this bug. It's not related to acts_as_tree,
it seems to happen when calling destroy_all on a named_scope on an
association.&lt;/p&gt;
&lt;p&gt;I've created a minimal app to illustrate the problem here:
&lt;a href=
&quot;https://gist.github.com/2a208d1e03ce0d0e0fef&quot;&gt;https://gist.github.com/2a208d1e03ce0d0e0fef&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-29T09:13:47+01:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4132</number>
      <permalink>named_scope-gets-applied-to-self-referential-relations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>named_scope</tag>
      <title>named_scope gets applied to self-referential relations</title>
      <updated-at type="datetime">2010-06-29T09:13:53+01:00</updated-at>
      <user-id type="integer">22357</user-id>
      <version type="integer">5</version>
      <user-name>Alex Tomlins</user-name>
      <creator-name>elDub</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4132</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T17:01:23+00:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4132</number>
      <permalink>named_scope-gets-applied-to-self-referential-relations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>named_scope</tag>
      <title>named_scope gets applied to self-referential relations</title>
      <updated-at type="datetime">2011-02-02T18:57:39+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>elDub</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4132</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T17:01:24+00:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4132</number>
      <permalink>named_scope-gets-applied-to-self-referential-relations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>named_scope</tag>
      <title>named_scope gets applied to self-referential relations</title>
      <updated-at type="datetime">2011-02-02T18:57:47+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>elDub</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4132</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>808e45cfe87ae8df3b5f546f34bb8fc88d0f573f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-03-09T03:20:16+00:00</created-at>
      <filename>named_scopes_and_self_referential_relations.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">439109</id>
      <size type="integer">4087</size>
      <uploader-id type="integer">26330</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/439109/named_scopes_and_self_referential_relations.diff</url>
    </attachment>
  </attachments>
</ticket>
