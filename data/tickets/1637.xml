<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-12-26T14:43:31+00:00</created-at>
  <creator-id type="integer">41895</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1637</number>
  <permalink>accessing-datetime-via-read_attribute-loses-timezone</permalink>
  <priority type="integer">974</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord timewithzone</tag>
  <title>Accessing datetime via read_attribute loses timezone</title>
  <updated-at type="datetime">2009-01-07T06:29:31+00:00</updated-at>
  <user-id type="integer">15783</user-id>
  <version type="integer">5</version>
  <user-name>Geoff Buesing</user-name>
  <creator-name>Artem Ignatiev</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1637</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>In my project I needed to alter getter method for datetime attribute, like that:

@@@ ruby
class SomeModel &lt; ActiveRecord::Base
  has_one :overriding_model
  def start_time
    if overriding_model
      overriding_model.start_time
    else
      read_attribute(:start_time)
    end
  end
end
@@@

With such definition @start_time@ method began to return instances of Time class (with time in UTC timezone), so that broke displaying of times for us.

Here's diff to test case that will fail test_time_attributes_are_retrieved_in_current_time_zone

@@@
diff --git a/activerecord/test/cases/attribute_methods_test.rb b/activerecord/test/cases/attribute_methods_test.rb
index 77ee8d8..cc5198f 100644
--- a/activerecord/test/cases/attribute_methods_test.rb
+++ b/activerecord/test/cases/attribute_methods_test.rb
@@ -146,7 +146,9 @@ class AttributeMethodsTest &lt; ActiveRecord::TestCase
       record[:written_on] = utc_time
       assert_equal utc_time, record.written_on # record.written on is equal to (i.e., simultaneous with) utc_time
       assert_kind_of ActiveSupport::TimeWithZone, record.written_on # but is a TimeWithZone
+      assert_kind_of ActiveSupport::TimeWithZone, record.read_attribute(:written_on)
       assert_equal ActiveSupport::TimeZone[&quot;Pacific Time (US &amp; Canada)&quot;], record.written_on.time_zone # and is in the current Time.zone
+      assert_equal ActiveSupport::TimeZone[&quot;Pacific Time (US &amp; Canada)&quot;], record.read_attribute(:written_on).time_zone
       assert_equal Time.utc(2007, 12, 31, 16), record.written_on.time # and represents time values adjusted accordingly
     end
   end

@@@</original-body>
  <latest-body>In my project I needed to alter getter method for datetime attribute, like that:

@@@ ruby
class SomeModel &lt; ActiveRecord::Base
  has_one :overriding_model
  def start_time
    if overriding_model
      overriding_model.start_time
    else
      read_attribute(:start_time)
    end
  end
end
@@@

With such definition @start_time@ method began to return instances of Time class (with time in UTC timezone), so that broke displaying of times for us.

Here's diff to test case that will fail test_time_attributes_are_retrieved_in_current_time_zone

@@@
diff --git a/activerecord/test/cases/attribute_methods_test.rb b/activerecord/test/cases/attribute_methods_test.rb
index 77ee8d8..cc5198f 100644
--- a/activerecord/test/cases/attribute_methods_test.rb
+++ b/activerecord/test/cases/attribute_methods_test.rb
@@ -146,7 +146,9 @@ class AttributeMethodsTest &lt; ActiveRecord::TestCase
       record[:written_on] = utc_time
       assert_equal utc_time, record.written_on # record.written on is equal to (i.e., simultaneous with) utc_time
       assert_kind_of ActiveSupport::TimeWithZone, record.written_on # but is a TimeWithZone
+      assert_kind_of ActiveSupport::TimeWithZone, record.read_attribute(:written_on)
       assert_equal ActiveSupport::TimeZone[&quot;Pacific Time (US &amp; Canada)&quot;], record.written_on.time_zone # and is in the current Time.zone
+      assert_equal ActiveSupport::TimeZone[&quot;Pacific Time (US &amp; Canada)&quot;], record.read_attribute(:written_on).time_zone
       assert_equal Time.utc(2007, 12, 31, 16), record.written_on.time # and represents time values adjusted accordingly
     end
   end

@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In my project I needed to alter getter method for datetime
attribute, like that:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class SomeModel &amp;lt; ActiveRecord::Base
  has_one :overriding_model
  def start_time
    if overriding_model
      overriding_model.start_time
    else
      read_attribute(:start_time)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With such definition &lt;code&gt;start_time&lt;/code&gt; method began to
return instances of Time class (with time in UTC timezone), so that
broke displaying of times for us.&lt;/p&gt;
&lt;p&gt;Here's diff to test case that will fail
test_time_attributes_are_retrieved_in_current_time_zone&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
diff --git a/activerecord/test/cases/attribute_methods_test.rb b/activerecord/test/cases/attribute_methods_test.rb
index 77ee8d8..cc5198f 100644
--- a/activerecord/test/cases/attribute_methods_test.rb
+++ b/activerecord/test/cases/attribute_methods_test.rb
@@ -146,7 +146,9 @@ class AttributeMethodsTest &amp;lt; ActiveRecord::TestCase
       record[:written_on] = utc_time
       assert_equal utc_time, record.written_on # record.written on is equal to (i.e., simultaneous with) utc_time
       assert_kind_of ActiveSupport::TimeWithZone, record.written_on # but is a TimeWithZone
+      assert_kind_of ActiveSupport::TimeWithZone, record.read_attribute(:written_on)
       assert_equal ActiveSupport::TimeZone[&amp;quot;Pacific Time (US &amp;amp; Canada)&amp;quot;], record.written_on.time_zone # and is in the current Time.zone
+      assert_equal ActiveSupport::TimeZone[&amp;quot;Pacific Time (US &amp;amp; Canada)&amp;quot;], record.read_attribute(:written_on).time_zone
       assert_equal Time.utc(2007, 12, 31, 16), record.written_on.time # and represents time values adjusted accordingly
     end
   end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In my project I needed to alter getter method for datetime attribute, like that:

@@@ ruby
class SomeModel &lt; ActiveRecord::Base
  has_one :overriding_model
  def start_time
    if overriding_model
      overriding_model.start_time
    else
      read_attribute(:start_time)
    end
  end
end
@@@

With such definition @start_time@ method began to return instances of Time class (with time in UTC timezone), so that broke displaying of times for us.

Here's diff to test case that will fail test_time_attributes_are_retrieved_in_current_time_zone

@@@
diff --git a/activerecord/test/cases/attribute_methods_test.rb b/activerecord/test/cases/attribute_methods_test.rb
index 77ee8d8..cc5198f 100644
--- a/activerecord/test/cases/attribute_methods_test.rb
+++ b/activerecord/test/cases/attribute_methods_test.rb
@@ -146,7 +146,9 @@ class AttributeMethodsTest &lt; ActiveRecord::TestCase
       record[:written_on] = utc_time
       assert_equal utc_time, record.written_on # record.written on is equal to (i.e., simultaneous with) utc_time
       assert_kind_of ActiveSupport::TimeWithZone, record.written_on # but is a TimeWithZone
+      assert_kind_of ActiveSupport::TimeWithZone, record.read_attribute(:written_on)
       assert_equal ActiveSupport::TimeZone[&quot;Pacific Time (US &amp; Canada)&quot;], record.written_on.time_zone # and is in the current Time.zone
+      assert_equal ActiveSupport::TimeZone[&quot;Pacific Time (US &amp; Canada)&quot;], record.read_attribute(:written_on).time_zone
       assert_equal Time.utc(2007, 12, 31, 16), record.written_on.time # and represents time values adjusted accordingly
     end
   end

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;In my project I needed to alter getter method for datetime
attribute, like that:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class SomeModel &amp;lt; ActiveRecord::Base
  has_one :overriding_model
  def start_time
    if overriding_model
      overriding_model.start_time
    else
      read_attribute(:start_time)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With such definition &lt;code&gt;start_time&lt;/code&gt; method began to
return instances of Time class (with time in UTC timezone), so that
broke displaying of times for us.&lt;/p&gt;
&lt;p&gt;Here's diff to test case that will fail
test_time_attributes_are_retrieved_in_current_time_zone&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
diff --git a/activerecord/test/cases/attribute_methods_test.rb b/activerecord/test/cases/attribute_methods_test.rb
index 77ee8d8..cc5198f 100644
--- a/activerecord/test/cases/attribute_methods_test.rb
+++ b/activerecord/test/cases/attribute_methods_test.rb
@@ -146,7 +146,9 @@ class AttributeMethodsTest &amp;lt; ActiveRecord::TestCase
       record[:written_on] = utc_time
       assert_equal utc_time, record.written_on # record.written on is equal to (i.e., simultaneous with) utc_time
       assert_kind_of ActiveSupport::TimeWithZone, record.written_on # but is a TimeWithZone
+      assert_kind_of ActiveSupport::TimeWithZone, record.read_attribute(:written_on)
       assert_equal ActiveSupport::TimeZone[&amp;quot;Pacific Time (US &amp;amp; Canada)&amp;quot;], record.written_on.time_zone # and is in the current Time.zone
+      assert_equal ActiveSupport::TimeZone[&amp;quot;Pacific Time (US &amp;amp; Canada)&amp;quot;], record.read_attribute(:written_on).time_zone
       assert_equal Time.utc(2007, 12, 31, 16), record.written_on.time # and represents time values adjusted accordingly
     end
   end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-26T14:43:31+00:00</created-at>
      <creator-id type="integer">41895</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1637</number>
      <permalink>accessing-datetime-via-read_attribute-loses-timezone</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord timewithzone</tag>
      <title>Accessing datetime via read_attribute loses timezone</title>
      <updated-at type="datetime">2008-12-26T14:43:33+00:00</updated-at>
      <user-id type="integer">41895</user-id>
      <version type="integer">1</version>
      <user-name>Artem Ignatiev</user-name>
      <creator-name>Artem Ignatiev</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1637</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>What version of Rails are you using?</body>
      <body-html>&lt;div&gt;&lt;p&gt;What version of Rails are you using?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-26T21:02:47+00:00</created-at>
      <creator-id type="integer">41895</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1637</number>
      <permalink>accessing-datetime-via-read_attribute-loses-timezone</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord timewithzone</tag>
      <title>Accessing datetime via read_attribute loses timezone</title>
      <updated-at type="datetime">2008-12-26T21:02:51+00:00</updated-at>
      <user-id type="integer">30535</user-id>
      <version type="integer">2</version>
      <user-name>Mark Turner</user-name>
      <creator-name>Artem Ignatiev</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1637</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Well currently the conversion happens at the level of the automatically generated attribute reader so it's not surprising that this happens.

All you need to do is change your code to say

@@@ ruby
  read_attribute(:start_time).in_time_zone
@@@

Furthermore I'm of the opinion that time zone conversions etc... are none of read_attribute's business. It's a low level method, so if you use it there will be slighly more faffing around</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well currently the conversion happens at the level of the
automatically generated attribute reader so it's not surprising
that this happens.&lt;/p&gt;
&lt;p&gt;All you need to do is change your code to say&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  read_attribute(:start_time).in_time_zone
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Furthermore I'm of the opinion that time zone conversions etc...
are none of read_attribute's business. It's a low level method, so
if you use it there will be slighly more faffing around&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-26T22:26:20+00:00</created-at>
      <creator-id type="integer">41895</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1637</number>
      <permalink>accessing-datetime-via-read_attribute-loses-timezone</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord timewithzone</tag>
      <title>Accessing datetime via read_attribute loses timezone</title>
      <updated-at type="datetime">2008-12-26T22:26:22+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Artem Ignatiev</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1637</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt; What version of Rails are you using?
Using 2.2, patch is against 07298fd0929ae1c6dd6d1b41bf320112d6bfc6a0 (Fri Dec 26 01:49:14 2008 +0000)

2Frederick:

Well, after reading the source I came to conclusion that it's intended behaviour when reading datetime attributes.

Perhaps, a note should be added to rdoc about timezone conversion when reading/writing datetime attributes?</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;What version of Rails are you using? Using 2.2, patch is against
07298fd0929ae1c6dd6d1b41bf320112d6bfc6a0 (Fri Dec 26 01:49:14 2008
+0000)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2Frederick:&lt;/p&gt;
&lt;p&gt;Well, after reading the source I came to conclusion that it's
intended behaviour when reading datetime attributes.&lt;/p&gt;
&lt;p&gt;Perhaps, a note should be added to rdoc about timezone
conversion when reading/writing datetime attributes?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-29T12:07:49+00:00</created-at>
      <creator-id type="integer">41895</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1637</number>
      <permalink>accessing-datetime-via-read_attribute-loses-timezone</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord timewithzone</tag>
      <title>Accessing datetime via read_attribute loses timezone</title>
      <updated-at type="datetime">2008-12-29T12:07:51+00:00</updated-at>
      <user-id type="integer">41895</user-id>
      <version type="integer">4</version>
      <user-name>Artem Ignatiev</user-name>
      <creator-name>Artem Ignatiev</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1637</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In agreement with Frederick -- time zone conversions shouldn't be done inside of read_attribute.

@Artem, agreed, an rdoc note could help by explaining that time zone conversions are done via generated methods, and not inside of read_attribute.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In agreement with Frederick -- time zone conversions shouldn't
be done inside of read_attribute.&lt;/p&gt;
&lt;p&gt;@Artem, agreed, an rdoc note could help by explaining that time
zone conversions are done via generated methods, and not inside of
read_attribute.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-07T06:29:26+00:00</created-at>
      <creator-id type="integer">41895</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1637</number>
      <permalink>accessing-datetime-via-read_attribute-loses-timezone</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord timewithzone</tag>
      <title>Accessing datetime via read_attribute loses timezone</title>
      <updated-at type="datetime">2009-01-07T06:29:31+00:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">5</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>Artem Ignatiev</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1637</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
