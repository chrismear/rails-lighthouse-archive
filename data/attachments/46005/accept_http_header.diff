From 53d73f1f5095fc1d42afbf77d941259779b13c7e Mon Sep 17 00:00:00 2001
From: Edgar J. Suarez <edgar.js@gmail.com>
Date: Mon, 15 Sep 2008 12:17:14 -0500
Subject: [PATCH] removed http default format header

---
 activeresource/lib/active_resource/connection.rb |    2 +-
 activeresource/test/connection_test.rb           |   28 ++++++++++++++++-----
 2 files changed, 22 insertions(+), 8 deletions(-)

diff --git a/activeresource/lib/active_resource/connection.rb b/activeresource/lib/active_resource/connection.rb
index fe9c2d5..15acf3c 100644
--- a/activeresource/lib/active_resource/connection.rb
+++ b/activeresource/lib/active_resource/connection.rb
@@ -199,7 +199,7 @@ module ActiveResource
 
       # Builds headers for request to remote service.
       def build_request_headers(headers, http_method=nil)
-        authorization_header.update(default_header).update(headers).update(http_format_header(http_method))
+        authorization_header.update(default_header).update(headers)
       end
 
       # Sets authorization header
diff --git a/activeresource/test/connection_test.rb b/activeresource/test/connection_test.rb
index 06f31f1..3eaf5bd 100644
--- a/activeresource/test/connection_test.rb
+++ b/activeresource/test/connection_test.rb
@@ -176,15 +176,29 @@ class ConnectionTest < Test::Unit::TestCase
       assert_raises(ActiveResource::TimeoutError) { @conn.get('/people_timeout.xml') }
     end
   end
+  
+  # Not sure if these next 2 tests are valid since http mock does not a real call...
+  # So I'm making it at the bare bones...
+  def test_youtube_api_fails_with_accept_header
+    http = Net::HTTP.new("gdata.youtube.com")
+    response = http.head('/feeds/api/videos?vq=rails', 'Accept' => 'application/xml')
+    assert_equal "406", response.code
+  end
+  
+  def test_youtube_api_works_without_accept_header
+    http = Net::HTTP.new("gdata.youtube.com")
+    response = http.head('/feeds/api/videos?vq=rails')
+    assert_equal "200", response.code
+  end
 
   protected
-    def assert_response_raises(klass, code)
-      assert_raise(klass, "Expected response code #{code} to raise #{klass}") do
-        handle_response ResponseCodeStub.new(code)
-      end
+  def assert_response_raises(klass, code)
+    assert_raise(klass, "Expected response code #{code} to raise #{klass}") do
+      handle_response ResponseCodeStub.new(code)
     end
+  end
 
-    def handle_response(response)
-      @conn.__send__(:handle_response, response)
-    end
+  def handle_response(response)
+    @conn.__send__(:handle_response, response)
+  end
 end
-- 
1.5.4.3

