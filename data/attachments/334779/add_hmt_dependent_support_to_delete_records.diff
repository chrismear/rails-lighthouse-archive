From 85c7b4adcefdc78d673583b5e23aceeffd75a83c Mon Sep 17 00:00:00 2001
From: Shane Liebling <shanel@gmail.com>
Date: Wed, 25 Nov 2009 16:15:28 -0500
Subject: [PATCH] added has_many through dependent destroy support to delete records

---
 .../associations/has_many_through_association.rb   |    8 ++++++--
 .../has_many_through_associations_test.rb          |   10 ++++++++++
 activerecord/test/models/post.rb                   |    9 +++++++++
 activerecord/test/models/topic.rb                  |    3 +++
 activerecord/test/schema/schema.rb                 |    5 +++++
 5 files changed, 33 insertions(+), 2 deletions(-)

diff --git a/activerecord/lib/active_record/associations/has_many_through_association.rb b/activerecord/lib/active_record/associations/has_many_through_association.rb
index 214ce59..20b6f1d 100644
--- a/activerecord/lib/active_record/associations/has_many_through_association.rb
+++ b/activerecord/lib/active_record/associations/has_many_through_association.rb
@@ -71,11 +71,15 @@ module ActiveRecord
           through_association.proxy_target << through_record
         end
 
-        # TODO - add dependent option support
         def delete_records(records)
           klass = @reflection.through_reflection.klass
+          dependent = @reflection.through_reflection.options[:dependent]
           records.each do |associate|
-            klass.delete_all(construct_join_attributes(associate))
+            if dependent == :destroy
+              klass.destroy_all(construct_join_attributes(associate))
+            else
+              klass.delete_all(construct_join_attributes(associate))
+            end
           end
         end
 
diff --git a/activerecord/test/cases/associations/has_many_through_associations_test.rb b/activerecord/test/cases/associations/has_many_through_associations_test.rb
index fe68d03..9041da6 100644
--- a/activerecord/test/cases/associations/has_many_through_associations_test.rb
+++ b/activerecord/test/cases/associations/has_many_through_associations_test.rb
@@ -379,4 +379,14 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase
       lambda { authors(:david).very_special_comments.delete(authors(:david).very_special_comments.first) },
     ].each {|block| assert_raise(ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection, &block) }
   end
+  
+  def test_post_topic_destroy_method_called_when_topics_are_removed_from_posts
+    assert_equal(1, PostTopic.find(:all).count)
+    welcome_post = posts(:welcome)
+    assert_equal(1, welcome_post.topics.length)
+    joke_count = Joke.count
+    welcome_post.topics = []
+    assert_equal(0, PostTopic.count)
+    assert_equal(joke_count + 1, Joke.count)
+  end
 end
diff --git a/activerecord/test/models/post.rb b/activerecord/test/models/post.rb
index 7392515..c468d4b 100644
--- a/activerecord/test/models/post.rb
+++ b/activerecord/test/models/post.rb
@@ -72,6 +72,9 @@ class Post < ActiveRecord::Base
   has_many :skimmers, :class_name => 'Reader', :conditions => { :skimmer => true }
   has_many :impatient_people, :through => :skimmers, :source => :person
 
+  has_many :post_topics, :dependent => :destroy
+  has_many :topics, :through => :post_topics
+
   def self.top(limit)
     ranked_by_comments.limit(limit)
   end
@@ -100,3 +103,9 @@ end
 class SubStiPost < StiPost
   self.table_name = Post.table_name
 end
+
+class PostTopic < ActiveRecord::Base
+  belongs_to :post
+  belongs_to :topic
+  after_destroy { Joke.create! } # a way to check that the destroy method has been called
+end
diff --git a/activerecord/test/models/topic.rb b/activerecord/test/models/topic.rb
index baca497..735b85c 100644
--- a/activerecord/test/models/topic.rb
+++ b/activerecord/test/models/topic.rb
@@ -42,6 +42,9 @@ class Topic < ActiveRecord::Base
 
   before_create  :default_written_on
   before_destroy :destroy_children
+  
+  has_many :post_topics, :dependent => :destroy
+  has_many :posts, :through => :post_topics
 
   def parent
     Topic.find(parent_id)
diff --git a/activerecord/test/schema/schema.rb b/activerecord/test/schema/schema.rb
index 0dd9da4..e050dff 100644
--- a/activerecord/test/schema/schema.rb
+++ b/activerecord/test/schema/schema.rb
@@ -378,6 +378,11 @@ ActiveRecord::Schema.define do
     t.integer :taggings_count, :default => 0
   end
 
+  create_table :post_topics, :force => true do |t|
+    t.integer :post_id
+    t.integer :topic_id
+  end
+
   create_table :price_estimates, :force => true do |t|
     t.string :estimate_of_type
     t.integer :estimate_of_id
-- 
1.6.5.2

