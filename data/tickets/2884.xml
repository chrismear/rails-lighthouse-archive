<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-07-08T13:51:57+01:00</created-at>
  <creator-id type="integer">18793</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2884</number>
  <permalink>reverse_merge-modifies-the-hash-outside-the-method-scope</permalink>
  <priority type="integer">1971</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>reverse_merge!() modifies the hash outside the method scope</title>
  <updated-at type="datetime">2010-04-25T22:11:16+01:00</updated-at>
  <user-id type="integer">18793</user-id>
  <version type="integer">4</version>
  <user-name>J&#233;r&#233;my Lecour</user-name>
  <creator-name>J&#233;r&#233;my Lecour</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2884</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Hi,

I have a Hash that is passed as a method argument to several methods on different Models. It has to be the same when it enters each method, but each Model can apply some specific default values to the Hash with reverse_merge!()

I'm surprised to see that in fact each method call modifies the original Hash, the one that is outside the scope of each method.

I don't doubt that it's an absolutly normal behavior from a Ruby perspective, but I don't think it's normal from the Rails perspective. At least I didn't expect this.

I've written a small rake task to illustrate this :

@@@ ruby
desc &quot;bug reverse_merge!&quot;
task(:reverse_merge) do
  
  options = {
    :attr1 =&gt; &quot;generic string&quot;
  }
  
  def some_method(options = {})
    default_options = {
      :attr1 =&gt; &quot;default string&quot;,
      :attr2 =&gt; &quot;another string&quot;
    }
    options.reverse_merge!(default_options)

    puts &quot;*** options INSIDE the method call :&quot;
    puts options.inspect
  end
  
  puts &quot;*** options BEFORE the method call :&quot;
  puts options.inspect
  
  some_method(options)
  
  puts &quot;*** options AFTER the method call :&quot;
  puts options.inspect
  
end
@@@</original-body>
  <latest-body>Hi,

I have a Hash that is passed as a method argument to several methods on different Models. It has to be the same when it enters each method, but each Model can apply some specific default values to the Hash with reverse_merge!()

I'm surprised to see that in fact each method call modifies the original Hash, the one that is outside the scope of each method.

I don't doubt that it's an absolutly normal behavior from a Ruby perspective, but I don't think it's normal from the Rails perspective. At least I didn't expect this.

I've written a small rake task to illustrate this :

@@@ ruby
desc &quot;bug reverse_merge!&quot;
task(:reverse_merge) do
  
  options = {
    :attr1 =&gt; &quot;generic string&quot;
  }
  
  def some_method(options = {})
    default_options = {
      :attr1 =&gt; &quot;default string&quot;,
      :attr2 =&gt; &quot;another string&quot;
    }
    options.reverse_merge!(default_options)

    puts &quot;*** options INSIDE the method call :&quot;
    puts options.inspect
  end
  
  puts &quot;*** options BEFORE the method call :&quot;
  puts options.inspect
  
  some_method(options)
  
  puts &quot;*** options AFTER the method call :&quot;
  puts options.inspect
  
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I have a Hash that is passed as a method argument to several
methods on different Models. It has to be the same when it enters
each method, but each Model can apply some specific default values
to the Hash with reverse_merge!()&lt;/p&gt;
&lt;p&gt;I'm surprised to see that in fact each method call modifies the
original Hash, the one that is outside the scope of each
method.&lt;/p&gt;
&lt;p&gt;I don't doubt that it's an absolutly normal behavior from a Ruby
perspective, but I don't think it's normal from the Rails
perspective. At least I didn't expect this.&lt;/p&gt;
&lt;p&gt;I've written a small rake task to illustrate this :&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
desc &amp;quot;bug reverse_merge!&amp;quot;
task(:reverse_merge) do
  
  options = {
    :attr1 =&amp;gt; &amp;quot;generic string&amp;quot;
  }
  
  def some_method(options = {})
    default_options = {
      :attr1 =&amp;gt; &amp;quot;default string&amp;quot;,
      :attr2 =&amp;gt; &amp;quot;another string&amp;quot;
    }
    options.reverse_merge!(default_options)

    puts &amp;quot;*** options INSIDE the method call :&amp;quot;
    puts options.inspect
  end
  
  puts &amp;quot;*** options BEFORE the method call :&amp;quot;
  puts options.inspect
  
  some_method(options)
  
  puts &amp;quot;*** options AFTER the method call :&amp;quot;
  puts options.inspect
  
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

I have a Hash that is passed as a method argument to several methods on different Models. It has to be the same when it enters each method, but each Model can apply some specific default values to the Hash with reverse_merge!()

I'm surprised to see that in fact each method call modifies the original Hash, the one that is outside the scope of each method.

I don't doubt that it's an absolutly normal behavior from a Ruby perspective, but I don't think it's normal from the Rails perspective. At least I didn't expect this.

I've written a small rake task to illustrate this :

@@@ ruby
desc &quot;bug reverse_merge!&quot;
task(:reverse_merge) do
  
  options = {
    :attr1 =&gt; &quot;generic string&quot;
  }
  
  def some_method(options = {})
    default_options = {
      :attr1 =&gt; &quot;default string&quot;,
      :attr2 =&gt; &quot;another string&quot;
    }
    options.reverse_merge!(default_options)

    puts &quot;*** options INSIDE the method call :&quot;
    puts options.inspect
  end
  
  puts &quot;*** options BEFORE the method call :&quot;
  puts options.inspect
  
  some_method(options)
  
  puts &quot;*** options AFTER the method call :&quot;
  puts options.inspect
  
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I have a Hash that is passed as a method argument to several
methods on different Models. It has to be the same when it enters
each method, but each Model can apply some specific default values
to the Hash with reverse_merge!()&lt;/p&gt;
&lt;p&gt;I'm surprised to see that in fact each method call modifies the
original Hash, the one that is outside the scope of each
method.&lt;/p&gt;
&lt;p&gt;I don't doubt that it's an absolutly normal behavior from a Ruby
perspective, but I don't think it's normal from the Rails
perspective. At least I didn't expect this.&lt;/p&gt;
&lt;p&gt;I've written a small rake task to illustrate this :&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;desc &quot;bug reverse_merge!&quot;
task(:reverse_merge) do
  
  options = {
    :attr1 =&amp;gt; &quot;generic string&quot;
  }
  
  def some_method(options = {})
    default_options = {
      :attr1 =&amp;gt; &quot;default string&quot;,
      :attr2 =&amp;gt; &quot;another string&quot;
    }
    options.reverse_merge!(default_options)

    puts &quot;*** options INSIDE the method call :&quot;
    puts options.inspect
  end
  
  puts &quot;*** options BEFORE the method call :&quot;
  puts options.inspect
  
  some_method(options)
  
  puts &quot;*** options AFTER the method call :&quot;
  puts options.inspect
  
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-08T13:51:57+01:00</created-at>
      <creator-id type="integer">18793</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2884</number>
      <permalink>reverse_merge-modifies-the-hash-outside-the-method-scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>reverse_merge!() modifies the hash outside the method scope</title>
      <updated-at type="datetime">2009-07-08T13:52:00+01:00</updated-at>
      <user-id type="integer">18793</user-id>
      <version type="integer">1</version>
      <user-name>J&#233;r&#233;my Lecour</user-name>
      <creator-name>J&#233;r&#233;my Lecour</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2884</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ruby passes params by reference not by value so I'm not sure why we would expect Rails to behave differently. 

What you probably want to do here is to use the non-bang version.

    def some_method(options = {})
      default_options = {
        :attr1 =&gt; &quot;default string&quot;,
        :attr2 =&gt; &quot;another string&quot;
      }
      my_options = options.reverse_merge(default_options)

      puts &quot;*** options INSIDE the method call :&quot;
      puts my_options.inspect
    end</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ruby passes params by reference not by value so I'm not sure why
we would expect Rails to behave differently.&lt;/p&gt;
&lt;p&gt;What you probably want to do here is to use the non-bang
version.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def some_method(options = {})
  default_options = {
    :attr1 =&amp;gt; &quot;default string&quot;,
    :attr2 =&amp;gt; &quot;another string&quot;
  }
  my_options = options.reverse_merge(default_options)

  puts &quot;*** options INSIDE the method call :&quot;
  puts my_options.inspect
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-24T18:54:50+01:00</created-at>
      <creator-id type="integer">18793</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2884</number>
      <permalink>reverse_merge-modifies-the-hash-outside-the-method-scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>reverse_merge!() modifies the hash outside the method scope</title>
      <updated-at type="datetime">2010-04-24T18:54:54+01:00</updated-at>
      <user-id type="integer">31940</user-id>
      <version type="integer">2</version>
      <user-name>Mike Breen</user-name>
      <creator-name>J&#233;r&#233;my Lecour</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2884</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I agree with Mike here.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree with Mike here.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-25T00:14:10+01:00</created-at>
      <creator-id type="integer">18793</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2884</number>
      <permalink>reverse_merge-modifies-the-hash-outside-the-method-scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>reverse_merge!() modifies the hash outside the method scope</title>
      <updated-at type="datetime">2010-04-25T00:14:14+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">3</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>J&#233;r&#233;my Lecour</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2884</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I also agree with Mike. I guess I misinterpreted something. Sorry about that.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I also agree with Mike. I guess I misinterpreted something.
Sorry about that.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-25T22:11:13+01:00</created-at>
      <creator-id type="integer">18793</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2884</number>
      <permalink>reverse_merge-modifies-the-hash-outside-the-method-scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>reverse_merge!() modifies the hash outside the method scope</title>
      <updated-at type="datetime">2010-04-25T22:11:16+01:00</updated-at>
      <user-id type="integer">18793</user-id>
      <version type="integer">4</version>
      <user-name>J&#233;r&#233;my Lecour</user-name>
      <creator-name>J&#233;r&#233;my Lecour</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2884</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
