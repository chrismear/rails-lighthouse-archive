<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-17T06:48:17+00:00</created-at>
  <creator-id type="integer">17407</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2249</number>
  <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.3.2 activecord associations bug edge nested save validation</tag>
  <title>autosaving associations skips validations and persists invalid data in the DB</title>
  <updated-at type="datetime">2011-02-17T06:48:17+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">17</version>
  <user-name>Repository</user-name>
  <creator-name>Akira Matsuda</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When autosaving associations, the associated models are saved without validations even when their data are invalid.

For example, with these 2 models,
@@@
./script/generate model pirate catchphrase:string

class Pirate &lt; ActiveRecord::Base
  has_one :ship

  validates_presence_of :catchphrase
end

./script/generate model ship pirate:references name:string

class Ship &lt; ActiveRecord::Base
  belongs_to :pirate

  validates_presence_of :name
end
@@@

you can save a ship with no name with the following operation.
@@@
 p = Pirate.new :catchphrase =&gt; &quot;I'm Gonna Be King of the Pirates!&quot;
 #=&gt; #&lt;Pirate id: nil, catchphrase: &quot;I'm Gonna Be King of the Pirates!&quot;, created_at: nil, updated_at: nil&gt;
 p.build_ship
 #=&gt; #&lt;Ship id: nil, pirate_id: nil, name: nil, created_at: nil, updated_at: nil&gt;
 p.save
 #=&gt; true
 s = Ship.last
 #=&gt; #&lt;Ship id: 1, pirate_id: 1, name: nil, created_at: &quot;2009-03-16 07:50:14&quot;, updated_at: &quot;2009-03-16 07:50:14&quot;&gt;
 s.valid?
 #=&gt; false
 s.errors.full_messages
 #=&gt; [&quot;Name can't be blank&quot;]  # note that an invalid data is in the DB!
@@@

In my opinion, any model could never be saved without validations except when save_without_validation method are explicitly called by the developer.  
I don't know whether a bug or intentional is this, but anyways, this may cause a dozen of serious problems on Rails 2.3, because we may easily create this situation automatically through nested_model_forms.

Very very dangerous, isn't it?</original-body>
  <latest-body>When autosaving associations, the associated models are saved without validations even when their data are invalid.

For example, with these 2 models,
@@@
./script/generate model pirate catchphrase:string

class Pirate &lt; ActiveRecord::Base
  has_one :ship

  validates_presence_of :catchphrase
end

./script/generate model ship pirate:references name:string

class Ship &lt; ActiveRecord::Base
  belongs_to :pirate

  validates_presence_of :name
end
@@@

you can save a ship with no name with the following operation.
@@@
 p = Pirate.new :catchphrase =&gt; &quot;I'm Gonna Be King of the Pirates!&quot;
 #=&gt; #&lt;Pirate id: nil, catchphrase: &quot;I'm Gonna Be King of the Pirates!&quot;, created_at: nil, updated_at: nil&gt;
 p.build_ship
 #=&gt; #&lt;Ship id: nil, pirate_id: nil, name: nil, created_at: nil, updated_at: nil&gt;
 p.save
 #=&gt; true
 s = Ship.last
 #=&gt; #&lt;Ship id: 1, pirate_id: 1, name: nil, created_at: &quot;2009-03-16 07:50:14&quot;, updated_at: &quot;2009-03-16 07:50:14&quot;&gt;
 s.valid?
 #=&gt; false
 s.errors.full_messages
 #=&gt; [&quot;Name can't be blank&quot;]  # note that an invalid data is in the DB!
@@@

In my opinion, any model could never be saved without validations except when save_without_validation method are explicitly called by the developer.  
I don't know whether a bug or intentional is this, but anyways, this may cause a dozen of serious problems on Rails 2.3, because we may easily create this situation automatically through nested_model_forms.

Very very dangerous, isn't it?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When autosaving associations, the associated models are saved
without validations even when their data are invalid.&lt;/p&gt;
&lt;p&gt;For example, with these 2 models,&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
./script/generate model pirate catchphrase:string

class Pirate &amp;lt; ActiveRecord::Base
  has_one :ship

  validates_presence_of :catchphrase
end

./script/generate model ship pirate:references name:string

class Ship &amp;lt; ActiveRecord::Base
  belongs_to :pirate

  validates_presence_of :name
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can save a ship with no name with the following
operation.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
 p = Pirate.new :catchphrase =&amp;gt; &amp;quot;I'm Gonna Be King of the Pirates!&amp;quot;
 #=&amp;gt; #&amp;lt;Pirate id: nil, catchphrase: &amp;quot;I'm Gonna Be King of the Pirates!&amp;quot;, created_at: nil, updated_at: nil&amp;gt;
 p.build_ship
 #=&amp;gt; #&amp;lt;Ship id: nil, pirate_id: nil, name: nil, created_at: nil, updated_at: nil&amp;gt;
 p.save
 #=&amp;gt; true
 s = Ship.last
 #=&amp;gt; #&amp;lt;Ship id: 1, pirate_id: 1, name: nil, created_at: &amp;quot;2009-03-16 07:50:14&amp;quot;, updated_at: &amp;quot;2009-03-16 07:50:14&amp;quot;&amp;gt;
 s.valid?
 #=&amp;gt; false
 s.errors.full_messages
 #=&amp;gt; [&amp;quot;Name can't be blank&amp;quot;]  # note that an invalid data is in the DB!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my opinion, any model could never be saved without
validations except when save_without_validation method are
explicitly called by the developer.&lt;br&gt;
I don't know whether a bug or intentional is this, but anyways,
this may cause a dozen of serious problems on Rails 2.3, because we
may easily create this situation automatically through
nested_model_forms.&lt;/p&gt;
&lt;p&gt;Very very dangerous, isn't it?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When autosaving associations, the associated models are saved without validations even when their data are invalid.

For example, with these 2 models,
@@@
% ./script/generate model pirate catchphrase:string

class Pirate &lt; ActiveRecord::Base
  has_one :ship

  validates_presence_of :catchphrase
end

% ./script/generate model ship pirate:references name:string

class Ship &lt; ActiveRecord::Base
  belongs_to :pirate

  validates_presence_of :name
end
@@@

you can save a ship with no name with the following operation.
@@@
 p = Pirate.new :catchphrase =&gt; &quot;I'm Gonna Be King of the Pirates!&quot;
 #=&gt; #&lt;Pirate id: nil, catchphrase: &quot;I'm Gonna Be King of the Pirates!&quot;, created_at: nil, updated_at: nil&gt;
 p.build_ship
 #=&gt; #&lt;Ship id: nil, pirate_id: nil, name: nil, created_at: nil, updated_at: nil&gt;
 p.save
 #=&gt; true
 s = Ship.last
 #=&gt; #&lt;Ship id: 1, pirate_id: 1, name: nil, created_at: &quot;2009-03-16 07:50:14&quot;, updated_at: &quot;2009-03-16 07:50:14&quot;&gt;
 s.valid?
 #=&gt; false
 s.errors.full_messages
 #=&gt; [&quot;Name can't be blank&quot;]  # note that an invalid data is in the DB!
@@@

In my opinion, any model could never be saved without validations except when save_without_validation method are explicitly called by the developer.  
I don't know whether a bug or intentional is this, but anyways, this may cause a dozen of serious problems on Rails 2.3, because we may easily create this situation automatically through nested_model_forms.

Very very dangerous, isn't it?</body>
      <body-html>&lt;div&gt;&lt;p&gt;When autosaving associations, the associated models are saved
without validations even when their data are invalid.&lt;/p&gt;
&lt;p&gt;For example, with these 2 models,&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
% ./script/generate model pirate catchphrase:string

class Pirate &amp;lt; ActiveRecord::Base
  has_one :ship

  validates_presence_of :catchphrase
end

% ./script/generate model ship pirate:references name:string

class Ship &amp;lt; ActiveRecord::Base
  belongs_to :pirate

  validates_presence_of :name
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can save a ship with no name with the following
operation.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
 p = Pirate.new :catchphrase =&amp;gt; &amp;quot;I'm Gonna Be King of the Pirates!&amp;quot;
 #=&amp;gt; #&amp;lt;Pirate id: nil, catchphrase: &amp;quot;I'm Gonna Be King of the Pirates!&amp;quot;, created_at: nil, updated_at: nil&amp;gt;
 p.build_ship
 #=&amp;gt; #&amp;lt;Ship id: nil, pirate_id: nil, name: nil, created_at: nil, updated_at: nil&amp;gt;
 p.save
 #=&amp;gt; true
 s = Ship.last
 #=&amp;gt; #&amp;lt;Ship id: 1, pirate_id: 1, name: nil, created_at: &amp;quot;2009-03-16 07:50:14&amp;quot;, updated_at: &amp;quot;2009-03-16 07:50:14&amp;quot;&amp;gt;
 s.valid?
 #=&amp;gt; false
 s.errors.full_messages
 #=&amp;gt; [&amp;quot;Name can't be blank&amp;quot;]  # note that an invalid data is in the DB!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my opinion, any model could never be saved without
validations except when save_without_validation method are
explicitly called by the developer.&lt;br&gt;
I don't know whether a bug or intentional is this, but anyways,
this may cause a dozen of serious problems on Rails 2.3, because we
may easily create this situation automatically through
nested_model_forms.&lt;/p&gt;
&lt;p&gt;Very very dangerous, isn't it?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-16T08:37:34+00:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-03-16T09:31:19+00:00</updated-at>
      <user-id type="integer">17407</user-id>
      <version type="integer">1</version>
      <user-name>Akira Matsuda</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-16T09:12:42+00:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-03-16T09:12:43+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">2</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1

I also think this is very serious problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;I also think this is very serious problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-16T09:14:45+00:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-03-16T09:14:47+00:00</updated-at>
      <user-id type="integer">37892</user-id>
      <version type="integer">3</version>
      <user-name>MOROHASHI Kyosuke</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt; I don't know whether a bug or intentional is this, but anyways

It's intentional. If you want to validate a single association, has_one/belongs_to, you will have to define the association with :validate =&gt; true. This has always been the case.

&gt; this may cause a dozen of serious problems on Rails 2.3, because we may easily create this situation automatically through nested_model_forms.

Nope it won't be a problem, because using NestedAttributes will automatically enable :autosave =&gt; true on the association. If :autosave is enabled an association _should_ always be validated and saved.

If you find that not to be the case please file a failing test case.

Thanks</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;I don't know whether a bug or intentional is this, but
anyways&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's intentional. If you want to validate a single association,
has_one/belongs_to, you will have to define the association with
:validate =&amp;gt; true. This has always been the case.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;this may cause a dozen of serious problems on Rails 2.3, because
we may easily create this situation automatically through
nested_model_forms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nope it won't be a problem, because using NestedAttributes will
automatically enable :autosave =&amp;gt; true on the association. If
:autosave is enabled an association &lt;em&gt;should&lt;/em&gt; always be
validated and saved.&lt;/p&gt;
&lt;p&gt;If you find that not to be the case please file a failing test
case.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-16T10:15:11+00:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-03-16T10:15:15+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">4</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Btw: The source for AutosaveAssociation can be viewed here: http://github.com/rails/rails/blob/master/activerecord/lib/active_record/autosave_association.rb</body>
      <body-html>&lt;div&gt;&lt;p&gt;Btw: The source for AutosaveAssociation can be viewed here:
&lt;a href=&quot;http://github.com/rails/rails/blob/master/activerecord/lib/active_record/autosave_association.rb&quot;&gt;
http://github.com/rails/rails/bl...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-16T10:16:16+00:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-03-16T10:16:18+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">5</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt; Nope it won't be a problem, because using NestedAttributes will automatically enable :autosave =&gt; true on the association. If :autosave is enabled an association should always be validated and saved.

Ahh, I see. So, this problem is not directly related to NestedAttributes. Sorry for the wrong point of argument. 

But I'm still not totally agree with you. Please don't close the ticket.

Let me repeat the most important point.
## any model could never be saved without validations except when save_without_validation method are explicitly called by the developer. ##

I tried the same operation on Rails 2.2.2, and found that on Rails 2.2.2, saving the pirate does not raise an error, and neither saves the invalid Ship model.  
On the other hand, ActiveRecord 2.3 changes its behaviour to implicitly inject an invalid record into DB with normal :save method, which should never be happen.

I really love the nested_form feature, but this AR matter is absolutely a worse change. Couldn't it rolled back to AR 2.2.2 behaviour?</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;Nope it won't be a problem, because using NestedAttributes will
automatically enable :autosave =&amp;gt; true on the association. If
:autosave is enabled an association should always be validated and
saved.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ahh, I see. So, this problem is not directly related to
NestedAttributes. Sorry for the wrong point of argument.&lt;/p&gt;
&lt;p&gt;But I'm still not totally agree with you. Please don't close the
ticket.&lt;/p&gt;
&lt;p&gt;Let me repeat the most important point.&lt;/p&gt;
&lt;h2&gt;any model could never be saved without validations except when
save_without_validation method are explicitly called by the
developer.&lt;/h2&gt;
&lt;p&gt;I tried the same operation on Rails 2.2.2, and found that on
Rails 2.2.2, saving the pirate does not raise an error, and neither
saves the invalid Ship model.&lt;br&gt;
On the other hand, ActiveRecord 2.3 changes its behaviour to
implicitly inject an invalid record into DB with normal :save
method, which should never be happen.&lt;/p&gt;
&lt;p&gt;I really love the nested_form feature, but this AR matter is
absolutely a worse change. Couldn't it rolled back to AR 2.2.2
behaviour?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-16T11:20:55+00:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-03-16T11:21:00+00:00</updated-at>
      <user-id type="integer">17407</user-id>
      <version type="integer">6</version>
      <user-name>Akira Matsuda</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt; But I'm still not totally agree with you. Please don't close the ticket.

Sumimasen Matsuda-san.

I did not want to scare you into believing that it would not be fixed, just that the original ticket misled me&#8230; Now that you re-explained it some more it seems we are on the same page :)

&gt; Let me repeat the most important point.
&gt; any model could never be saved without validations except when save_without_validation method are explicitly called by the developer. I tried the same operation on Rails 2.2.2, and found that on Rails 2.2.2, saving the pirate does not raise an error, and neither saves the invalid Ship model. On the other hand, ActiveRecord 2.3 changes its behaviour to implicitly inject an invalid record into DB with normal :save method, which should never be happen. I really love the nested_form feature, but this AR matter is absolutely a worse change. Couldn't it rolled back to AR 2.2.2 behaviour?

Ok I have checked the source of 2.2 again and I think I finally figured out why this regression was introduced. As you can see on this line it would indicate that a has_one/belongs_to _only_ validates when :validate =&gt; true. However, this did not affect the saving of the record when the parent is a new record, in that case it did #save(true), so it did ran the validations:

http://github.com/rails/rails/blob/5f95347af583d2e2a67631da02e0293679991612/activerecord/lib/active_record/associations.rb#L894

Of course the biggest problem is that there apperantly was _no_ test for this. So when I refactored it I apparently failed to grasp the original intent.

Too bad this only got noticed until now, so I guess we're too late for 2.3. But that's life, there was an RC and it was gone unnoticed, nothing that we can do about it now. I'll fix this on edge asap though.

Thanks</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;But I'm still not totally agree with you. Please don't close the
ticket.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sumimasen Matsuda-san.&lt;/p&gt;
&lt;p&gt;I did not want to scare you into believing that it would not be
fixed, just that the original ticket misled me&amp;#8230; Now that you
re-explained it some more it seems we are on the same page :)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let me repeat the most important point. any model could never be
saved without validations except when save_without_validation
method are explicitly called by the developer. I tried the same
operation on Rails 2.2.2, and found that on Rails 2.2.2, saving the
pirate does not raise an error, and neither saves the invalid Ship
model. On the other hand, ActiveRecord 2.3 changes its behaviour to
implicitly inject an invalid record into DB with normal :save
method, which should never be happen. I really love the nested_form
feature, but this AR matter is absolutely a worse change. Couldn't
it rolled back to AR 2.2.2 behaviour?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok I have checked the source of 2.2 again and I think I finally
figured out why this regression was introduced. As you can see on
this line it would indicate that a has_one/belongs_to &lt;em&gt;only&lt;/em&gt;
validates when :validate =&amp;gt; true. However, this did not affect
the saving of the record when the parent is a new record, in that
case it did #save(true), so it did ran the validations:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/rails/rails/blob/5f95347af583d2e2a67631da02e0293679991612/activerecord/lib/active_record/associations.rb#L894&quot;&gt;
http://github.com/rails/rails/bl...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course the biggest problem is that there apperantly was
&lt;em&gt;no&lt;/em&gt; test for this. So when I refactored it I apparently
failed to grasp the original intent.&lt;/p&gt;
&lt;p&gt;Too bad this only got noticed until now, so I guess we're too
late for 2.3. But that's life, there was an RC and it was gone
unnoticed, nothing that we can do about it now. I'll fix this on
edge asap though.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-16T13:08:11+00:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- 
:state: invalid
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-03-16T13:08:13+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">7</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This should fix it. Thanks for the report.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This should fix it. Thanks for the report.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T00:06:54+00:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 8406
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-03-17T00:07:00+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">8</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1

this fixed the issue we were having with has_one saving invalid child records when we upgraded to Rails 2.3</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;this fixed the issue we were having with has_one saving invalid
child records when we upgraded to Rails 2.3&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-31T21:55:00+01:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-03-31T21:55:05+01:00</updated-at>
      <user-id type="integer">82</user-id>
      <version type="integer">9</version>
      <user-name>Cody Fauser</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks, this fixed this problem for us also.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks, this fixed this problem for us also.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-02T19:43:14+01:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-04-02T19:43:16+01:00</updated-at>
      <user-id type="integer">30933</user-id>
      <version type="integer">10</version>
      <user-name>Jordan Brough</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Just run into this problem. The patch fixed it.

Eloy, can you get it applied?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just run into this problem. The patch fixed it.&lt;/p&gt;
&lt;p&gt;Eloy, can you get it applied?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-11T19:48:09+01:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-04-11T19:48:13+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">11</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>We are running this as part of Shopify since the patch was posted. +1</body>
      <body-html>&lt;div&gt;&lt;p&gt;We are running this as part of Shopify since the patch was
posted. +1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-27T19:24:16+01:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-04-27T19:24:21+01:00</updated-at>
      <user-id type="integer">80</user-id>
      <version type="integer">12</version>
      <user-name>Tobias L&#252;tke</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [da3c21ead59cb47b8f4c69c6bd95f225a9c8b479]) Ensure the parent record is always saved when the child is invalid. [#2249 state:resolved]

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/da3c21ead59cb47b8f4c69c6bd95f225a9c8b479</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [da3c21ead59cb47b8f4c69c6bd95f225a9c8b479]) Ensure the
parent record is always saved when the child is invalid. [&lt;a href=&quot;/projects/8994/tickets/2249&quot; title=&quot;Ticket #2249&quot;&gt;#2249&lt;/a&gt;
state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Pratik Naik &lt;a href=&quot;mailto:pratiknaik@gmail.com&quot;&gt;pratiknaik@gmail.com&lt;/a&gt; &lt;a href=&quot;http://github.com/rails/rails/commit/da3c21ead59cb47b8f4c69c6bd95f225a9c8b479&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-27T19:50:08+01:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-04-27T19:50:10+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">13</version>
      <user-name>Repository</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Just wanted to mention that a side effect of this bug is that before_validations callbacks are not called when doing build_&lt;association&gt; followed by a save on the parent. The patch fixes this. It's a shame it's not applied to the 2.3-stable branch. Adding :validate =&gt; true to the association, using before_save, or applying this patch to frozen rails gets around that problem.

Thank you all for identifying and fixing this issue!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just wanted to mention that a side effect of this bug is that
before_validations callbacks are not called when doing build_
followed by a save on the parent. The patch fixes this. It's a
shame it's not applied to the 2.3-stable branch. Adding :validate
=&amp;gt; true to the association, using before_save, or applying this
patch to frozen rails gets around that problem.&lt;/p&gt;
&lt;p&gt;Thank you all for identifying and fixing this issue!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-20T15:20:16+01:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-05-20T15:20:23+01:00</updated-at>
      <user-id type="integer">18185</user-id>
      <version type="integer">14</version>
      <user-name>Joshua Warchol</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It would be great if this could be applied to 2-3-stable. Like Tobi mentioned, we've been running this patch in production with Shopify since March 31.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It would be great if this could be applied to 2-3-stable. Like
Tobi mentioned, we've been running this patch in production with
Shopify since March 31.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-20T19:00:48+01:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-05-20T19:00:51+01:00</updated-at>
      <user-id type="integer">39817</user-id>
      <version type="integer">15</version>
      <user-name>Developers</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Previous comment was from me. I was logged in with the wrong Lighthouse account.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Previous comment was from me. I was logged in with the wrong
Lighthouse account.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-20T19:03:11+01:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-05-20T19:03:17+01:00</updated-at>
      <user-id type="integer">82</user-id>
      <version type="integer">16</version>
      <user-name>Cody Fauser</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [a70c78177a564c2f2cd09846a5e7ab6e8669e9f2]) Ensure the parent record is always saved when the child is invalid. [#2249 state:resolved]

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/a70c78177a564c2f2cd09846a5e7ab6e8669e9f2</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/a70c78177a564c2f2cd09846a5e7ab6e8669e9f2&quot;
title=
&quot;Changeset [a70c78177a564c2f2cd09846a5e7ab6e8669e9f2]&quot;&gt;[a70c78177a564c2f2cd09846a5e7ab6e8669e9f2]&lt;/a&gt;)
Ensure the parent record is always saved when the child is invalid.
[&lt;a href=&quot;/projects/8994/tickets/2249&quot; title=
&quot;Ticket #2249&quot;&gt;#2249&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Pratik Naik &lt;a&gt;pratiknaik@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/a70c78177a564c2f2cd09846a5e7ab6e8669e9f2&quot;&gt;
http://github.com/rails/rails/commit/a70c78177a564c2f2cd09846a5e7ab...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-20T20:21:19+01:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2009-05-20T20:21:21+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">17</version>
      <user-name>Repository</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-17T06:29:46+00:00</created-at>
      <creator-id type="integer">17407</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2249</number>
      <permalink>autosaving-associations-skips-validations-and-persists-invalid-data-in-the-db</permalink>
      <priority type="integer">1432</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activecord associations bug edge nested save validation</tag>
      <title>autosaving associations skips validations and persists invalid data in the DB</title>
      <updated-at type="datetime">2011-02-17T06:48:17+00:00</updated-at>
      <user-id type="integer">137442</user-id>
      <version type="integer">18</version>
      <user-name>gfh</user-name>
      <creator-name>Akira Matsuda</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2249</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2c7f8db73f4aafc1eec3d94f36e7b0d35fb80c71</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-17T00:06:54+00:00</created-at>
      <filename>validate_new_single_associated_object_on_new_parent_when_saving.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">100488</id>
      <size type="integer">3939</size>
      <uploader-id type="integer">8406</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/100488/validate_new_single_associated_object_on_new_parent_when_saving.diff</url>
    </attachment>
  </attachments>
</ticket>
