<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-05-08T04:11:43+01:00</created-at>
  <creator-id type="integer">8050</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2623</number>
  <permalink>inconsistent-session-cookie-value-from-marshalled-hash</permalink>
  <priority type="integer">1755</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>action_pack cookie_store invalid patch</tag>
  <title>Inconsistent session cookie value from marshalled hash</title>
  <updated-at type="datetime">2009-05-10T16:19:25+01:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">5</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>Ben Alavi</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2623</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When using CookieStore there can be cases where the session cookie is inconsistent between requests. This is caused by marshalling an unmarshalling of a Hash of which the ordering is not guaranteed (nor consistent). The resulting marshalled value will be different causing a different value for the session cookie. However when unmarshalled it will still be the same hash so it does not effect the way the session is persistent *unless* you were relying on the session cookie to be persistent between requests (i.e. for a flash uploader).

i.e.
    session[:foo] = 'bar'
    session[:biz] = 'bam'

may unpredictably result in this:

    &gt;&gt; Marshal.dump(:foo =&gt; 'bar', :biz =&gt; 'bam')
    =&gt; &quot;\004\b{\a:\bbiz\&quot;\bbam:\bfoo\&quot;\bbar&quot;

or this:

    &gt;&gt; Marshal.dump(:biz =&gt; 'bam', :foo =&gt; 'bar')
    =&gt; &quot;\004\b{\a:\bfoo\&quot;\bbar:\bbiz\&quot;\bbam&quot;

The attached patch changes CookieStore to sort the hash into an array before marshalling, and to rebuild a hash from the sorted array on unmarshalling to avoid the inconsistent nature of a hash.

I could not find a way to duplicate the failing case in a test because it relies on how the hash ends up being marshalled, which is inconsistent, which is the whole problem in the first place.</original-body>
  <latest-body>When using CookieStore there can be cases where the session cookie is inconsistent between requests. This is caused by marshalling an unmarshalling of a Hash of which the ordering is not guaranteed (nor consistent). The resulting marshalled value will be different causing a different value for the session cookie. However when unmarshalled it will still be the same hash so it does not effect the way the session is persistent *unless* you were relying on the session cookie to be persistent between requests (i.e. for a flash uploader).

i.e.
    session[:foo] = 'bar'
    session[:biz] = 'bam'

may unpredictably result in this:

    &gt;&gt; Marshal.dump(:foo =&gt; 'bar', :biz =&gt; 'bam')
    =&gt; &quot;\004\b{\a:\bbiz\&quot;\bbam:\bfoo\&quot;\bbar&quot;

or this:

    &gt;&gt; Marshal.dump(:biz =&gt; 'bam', :foo =&gt; 'bar')
    =&gt; &quot;\004\b{\a:\bfoo\&quot;\bbar:\bbiz\&quot;\bbam&quot;

The attached patch changes CookieStore to sort the hash into an array before marshalling, and to rebuild a hash from the sorted array on unmarshalling to avoid the inconsistent nature of a hash.

I could not find a way to duplicate the failing case in a test because it relies on how the hash ends up being marshalled, which is inconsistent, which is the whole problem in the first place.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When using CookieStore there can be cases where the session
cookie is inconsistent between requests. This is caused by
marshalling an unmarshalling of a Hash of which the ordering is not
guaranteed (nor consistent). The resulting marshalled value will be
different causing a different value for the session cookie. However
when unmarshalled it will still be the same hash so it does not
effect the way the session is persistent &lt;em&gt;unless&lt;/em&gt; you were
relying on the session cookie to be persistent between requests
(i.e. for a flash uploader).&lt;/p&gt;
&lt;p&gt;i.e.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;session[:foo] = 'bar'
session[:biz] = 'bam'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;may unpredictably result in this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Marshal.dump(:foo =&amp;gt; 'bar', :biz =&amp;gt; 'bam')
=&amp;gt; &quot;\004\b{\a:\bbiz\&quot;\bbam:\bfoo\&quot;\bbar&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;or this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Marshal.dump(:biz =&amp;gt; 'bam', :foo =&amp;gt; 'bar')
=&amp;gt; &quot;\004\b{\a:\bfoo\&quot;\bbar:\bbiz\&quot;\bbam&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The attached patch changes CookieStore to sort the hash into an
array before marshalling, and to rebuild a hash from the sorted
array on unmarshalling to avoid the inconsistent nature of a
hash.&lt;/p&gt;
&lt;p&gt;I could not find a way to duplicate the failing case in a test
because it relies on how the hash ends up being marshalled, which
is inconsistent, which is the whole problem in the first place.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When using CookieStore there can be cases where the session cookie is inconsistent between requests. This is caused by marshalling an unmarshalling of a Hash of which the ordering is not guaranteed (nor consistent). The resulting marshalled value will be different causing a different value for the session cookie. However when unmarshalled it will still be the same hash so it does not effect the way the session is persistent *unless* you were relying on the session cookie to be persistent between requests (i.e. for a flash uploader).

i.e.
    session[:foo] = 'bar'
    session[:biz] = 'bam'

may unpredictably result in this:

    &gt;&gt; Marshal.dump(:foo =&gt; 'bar', :biz =&gt; 'bam')
    =&gt; &quot;\004\b{\a:\bbiz\&quot;\bbam:\bfoo\&quot;\bbar&quot;

or this:

    &gt;&gt; Marshal.dump(:biz =&gt; 'bam', :foo =&gt; 'bar')
    =&gt; &quot;\004\b{\a:\bfoo\&quot;\bbar:\bbiz\&quot;\bbam&quot;

The attached patch changes CookieStore to sort the hash into an array before marshalling, and to rebuild a hash from the sorted array on unmarshalling to avoid the inconsistent nature of a hash.

I could not find a way to duplicate the failing case in a test because it relies on how the hash ends up being marshalled, which is inconsistent, which is the whole problem in the first place.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When using CookieStore there can be cases where the session
cookie is inconsistent between requests. This is caused by
marshalling an unmarshalling of a Hash of which the ordering is not
guaranteed (nor consistent). The resulting marshalled value will be
different causing a different value for the session cookie. However
when unmarshalled it will still be the same hash so it does not
effect the way the session is persistent &lt;em&gt;unless&lt;/em&gt; you were
relying on the session cookie to be persistent between requests
(i.e. for a flash uploader).&lt;/p&gt;
&lt;p&gt;i.e.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;session[:foo] = 'bar'
session[:biz] = 'bam'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;may unpredictably result in this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Marshal.dump(:foo =&amp;gt; 'bar', :biz =&amp;gt; 'bam')
=&amp;gt; &quot;\004\b{\a:\bbiz\&quot;\bbam:\bfoo\&quot;\bbar&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;or this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Marshal.dump(:biz =&amp;gt; 'bam', :foo =&amp;gt; 'bar')
=&amp;gt; &quot;\004\b{\a:\bfoo\&quot;\bbar:\bbiz\&quot;\bbam&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The attached patch changes CookieStore to sort the hash into an
array before marshalling, and to rebuild a hash from the sorted
array on unmarshalling to avoid the inconsistent nature of a
hash.&lt;/p&gt;
&lt;p&gt;I could not find a way to duplicate the failing case in a test
because it relies on how the hash ends up being marshalled, which
is inconsistent, which is the whole problem in the first place.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-08T04:11:44+01:00</created-at>
      <creator-id type="integer">8050</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2623</number>
      <permalink>inconsistent-session-cookie-value-from-marshalled-hash</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_pack cookie_store patch</tag>
      <title>Inconsistent session cookie value from marshalled hash</title>
      <updated-at type="datetime">2009-05-08T04:11:46+01:00</updated-at>
      <user-id type="integer">8050</user-id>
      <version type="integer">1</version>
      <user-name>Ben Alavi</user-name>
      <creator-name>Ben Alavi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2623</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>After digging into this a lot more I can't find a reason why this *should* matter.

I'm pretty sure this is invalid.</body>
      <body-html>&lt;div&gt;&lt;p&gt;After digging into this a lot more I can't find a reason why
this &lt;em&gt;should&lt;/em&gt; matter.&lt;/p&gt;
&lt;p&gt;I'm pretty sure this is invalid.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-08T05:10:03+01:00</created-at>
      <creator-id type="integer">8050</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2623</number>
      <permalink>inconsistent-session-cookie-value-from-marshalled-hash</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_pack cookie_store patch</tag>
      <title>Inconsistent session cookie value from marshalled hash</title>
      <updated-at type="datetime">2009-05-08T05:10:06+01:00</updated-at>
      <user-id type="integer">8050</user-id>
      <version type="integer">2</version>
      <user-name>Ben Alavi</user-name>
      <creator-name>Ben Alavi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2623</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-08T05:12:18+01:00</created-at>
      <creator-id type="integer">8050</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: action_pack cookie_store patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2623</number>
      <permalink>inconsistent-session-cookie-value-from-marshalled-hash</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_pack cookie_store invalid patch</tag>
      <title>Inconsistent session cookie value from marshalled hash</title>
      <updated-at type="datetime">2009-05-08T05:12:20+01:00</updated-at>
      <user-id type="integer">8050</user-id>
      <version type="integer">3</version>
      <user-name>Ben Alavi</user-name>
      <creator-name>Ben Alavi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2623</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>After playing with MessageVerifier more this is definitely invalid.</body>
      <body-html>&lt;div&gt;&lt;p&gt;After playing with MessageVerifier more this is definitely
invalid.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-08T05:46:30+01:00</created-at>
      <creator-id type="integer">8050</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2623</number>
      <permalink>inconsistent-session-cookie-value-from-marshalled-hash</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_pack cookie_store invalid patch</tag>
      <title>Inconsistent session cookie value from marshalled hash</title>
      <updated-at type="datetime">2009-05-08T05:46:34+01:00</updated-at>
      <user-id type="integer">8050</user-id>
      <version type="integer">4</version>
      <user-name>Ben Alavi</user-name>
      <creator-name>Ben Alavi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2623</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-10T16:19:20+01:00</created-at>
      <creator-id type="integer">8050</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2623</number>
      <permalink>inconsistent-session-cookie-value-from-marshalled-hash</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>action_pack cookie_store invalid patch</tag>
      <title>Inconsistent session cookie value from marshalled hash</title>
      <updated-at type="datetime">2009-05-10T16:19:25+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">5</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Ben Alavi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2623</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>820bbaadb40544b4914f847af6ba271992dfca59</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-05-08T04:11:44+01:00</created-at>
      <filename>cookie_store.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">120255</id>
      <size type="integer">2693</size>
      <uploader-id type="integer">8050</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/120255/cookie_store.diff</url>
    </attachment>
  </attachments>
</ticket>
