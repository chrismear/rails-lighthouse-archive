From 80ddef686e045964d236befd90693a20090b3ee1 Mon Sep 17 00:00:00 2001
From: Ivan Ukhov <uvsoft@gmail.com>
Date: Wed, 9 Dec 2009 13:03:48 +0300
Subject: [PATCH] Add update_timestamps and update_timestamps! methods, touch is an alias for update_timestamps!, call update_timestamps on nested attributes assigment

---
 .../lib/active_record/nested_attributes.rb         |    4 +++
 activerecord/lib/active_record/timestamp.rb        |   24 +++++++++++--------
 2 files changed, 18 insertions(+), 10 deletions(-)

diff --git a/activerecord/lib/active_record/nested_attributes.rb b/activerecord/lib/active_record/nested_attributes.rb
index ca3110a..3f7f603 100644
--- a/activerecord/lib/active_record/nested_attributes.rb
+++ b/activerecord/lib/active_record/nested_attributes.rb
@@ -302,6 +302,7 @@ module ActiveRecord
           method = "build_#{association_name}"
           if respond_to?(method)
             send(method, attributes.except(*UNASSIGNABLE_KEYS))
+            update_timestamp
           else
             raise ArgumentError, "Cannot build association #{association_name}. Are you trying to build a polymorphic one-to-one association?"
           end
@@ -359,6 +360,7 @@ module ActiveRecord
         if attributes['id'].blank?
           unless reject_new_record?(association_name, attributes)
             send(association_name).build(attributes.except(*UNASSIGNABLE_KEYS))
+            update_timestamp
           end
         elsif existing_record = send(association_name).detect { |record| record.id.to_s == attributes['id'].to_s }
           assign_to_or_mark_for_destruction(existing_record, attributes, options[:allow_destroy])
@@ -371,8 +373,10 @@ module ActiveRecord
     def assign_to_or_mark_for_destruction(record, attributes, allow_destroy)
       if has_destroy_flag?(attributes) && allow_destroy
         record.mark_for_destruction
+        update_timestamp
       else
         record.attributes = attributes.except(*UNASSIGNABLE_KEYS)
+        update_timestamp if record.changed?
       end
     end
 
diff --git a/activerecord/lib/active_record/timestamp.rb b/activerecord/lib/active_record/timestamp.rb
index da075da..19ef7f8 100644
--- a/activerecord/lib/active_record/timestamp.rb
+++ b/activerecord/lib/active_record/timestamp.rb
@@ -18,15 +18,7 @@ module ActiveRecord
       self.record_timestamps = true
     end
     
-    # Saves the record with the updated_at/on attributes set to the current time.
-    # If the save fails because of validation errors, an ActiveRecord::RecordInvalid exception is raised.
-    # If an attribute name is passed, that attribute is used for the touch instead of the updated_at/on attributes.
-    #
-    # Examples:
-    #
-    #   product.touch               # updates updated_at
-    #   product.touch(:designed_at) # updates the designed_at attribute
-    def touch(attribute = nil)
+    def update_timestamp(attribute = nil)
       current_time = current_time_from_proper_timezone
 
       if attribute
@@ -35,10 +27,22 @@ module ActiveRecord
         write_attribute('updated_at', current_time) if respond_to?(:updated_at)
         write_attribute('updated_on', current_time) if respond_to?(:updated_on)
       end
+    end
 
+    def update_timestamp!(attribute = nil)
+      update_timestamp attribute
       save!
     end
 
+    # Saves the record with the updated_at/on attributes set to the current time.
+    # If the save fails because of validation errors, an ActiveRecord::RecordInvalid exception is raised.
+    # If an attribute name is passed, that attribute is used for the touch instead of the updated_at/on attributes.
+    #
+    # Examples:
+    #
+    #   product.touch               # updates updated_at
+    #   product.touch(:designed_at) # updates the designed_at attribute
+    alias_method :touch, :update_timestamp!
 
     private
       def create_with_timestamps #:nodoc:
@@ -70,4 +74,4 @@ module ActiveRecord
         self.class.default_timezone == :utc ? Time.now.utc : Time.now
       end
   end
-end
\ No newline at end of file
+end
-- 
1.6.2.2

