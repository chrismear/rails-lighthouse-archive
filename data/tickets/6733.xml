<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-20T18:41:23+01:00</created-at>
  <creator-id type="integer">60523</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6733</number>
  <permalink>calling-a-relation-in-after_initialize-disables-includesrelation-functionality</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>&quot;activerecord 3.0&quot; &quot;rails 3.0.7&quot;</tag>
  <title>Calling a relation in after_initialize disables includes(:relation) functionality</title>
  <updated-at type="datetime">2011-04-20T18:41:25+01:00</updated-at>
  <user-id type="integer">60523</user-id>
  <version type="integer">1</version>
  <user-name>bterkuile</user-name>
  <creator-name>bterkuile</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6733</url>
  <priority-name nil="true"></priority-name>
  <original-body>When a relation is triggered in an after_initialize block the includes statement will not do its magic and falls back to separate requests. A reproduction scenario using Rails 3.0.7 on Ubuntu:

rails new after_initialize
cd after_initialize
rails g scaffold Post name:string body:text
rails g scaffold Comment email:string body:text post_id:integer
rake db:migrate

@@@ rails
class Comment &lt; ActiveRecord::Base
  belongs_to :post
end
class Post &lt; ActiveRecord::Base
  has_many :comments
end
@@@

rails c
@@@ rails
p1 = Post.create(:name =&gt; 'Post 1')
p2 = Post.create :name =&gt; 'Post 2'
p1.comments &lt;&lt; p1.comments.create(:body =&gt; 'Comment 1')
p2.comments &lt;&lt; p2.comments.create(:body =&gt; 'Comment 2')
Comment.includes(:post).map{|c| c.post.name} #=&gt;  Post Load (0.2ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;id&quot; IN (1,2))
@@@

Now the models with after initialize:
@@@ rails
class Comment &lt; ActiveRecord::Base
  belongs_to :post

  after_initialize do
    self.body = post.try(:name)
  end
end
class Post &lt; ActiveRecord::Base
  has_many :comments
end
@@@
And in the console:
@@@ rails
Comment.includes(:post).map{|c| c.post.name} #=&gt;
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 1 LIMIT 1
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 1 LIMIT 1
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 2 LIMIT 1
@@@

When the relation is not triggered in after_initialize, aka:

@@@ rails
class Comment &lt; ActiveRecord::Base
  belongs_to :post

  after_initialize do
    self.body = 'I am new'
  end
end
class Post &lt; ActiveRecord::Base
  has_many :comments
end
@@@

Everything is ok. This can lead to performance drops.</original-body>
  <latest-body>When a relation is triggered in an after_initialize block the includes statement will not do its magic and falls back to separate requests. A reproduction scenario using Rails 3.0.7 on Ubuntu:

rails new after_initialize
cd after_initialize
rails g scaffold Post name:string body:text
rails g scaffold Comment email:string body:text post_id:integer
rake db:migrate

@@@ rails
class Comment &lt; ActiveRecord::Base
  belongs_to :post
end
class Post &lt; ActiveRecord::Base
  has_many :comments
end
@@@

rails c
@@@ rails
p1 = Post.create(:name =&gt; 'Post 1')
p2 = Post.create :name =&gt; 'Post 2'
p1.comments &lt;&lt; p1.comments.create(:body =&gt; 'Comment 1')
p2.comments &lt;&lt; p2.comments.create(:body =&gt; 'Comment 2')
Comment.includes(:post).map{|c| c.post.name} #=&gt;  Post Load (0.2ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;id&quot; IN (1,2))
@@@

Now the models with after initialize:
@@@ rails
class Comment &lt; ActiveRecord::Base
  belongs_to :post

  after_initialize do
    self.body = post.try(:name)
  end
end
class Post &lt; ActiveRecord::Base
  has_many :comments
end
@@@
And in the console:
@@@ rails
Comment.includes(:post).map{|c| c.post.name} #=&gt;
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 1 LIMIT 1
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 1 LIMIT 1
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 2 LIMIT 1
@@@

When the relation is not triggered in after_initialize, aka:

@@@ rails
class Comment &lt; ActiveRecord::Base
  belongs_to :post

  after_initialize do
    self.body = 'I am new'
  end
end
class Post &lt; ActiveRecord::Base
  has_many :comments
end
@@@

Everything is ok. This can lead to performance drops.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When a relation is triggered in an after_initialize block the
includes statement will not do its magic and falls back to separate
requests. A reproduction scenario using Rails 3.0.7 on Ubuntu:&lt;/p&gt;
&lt;p&gt;rails new after_initialize&lt;br&gt;
cd after_initialize&lt;br&gt;
rails g scaffold Post name:string body:text&lt;br&gt;
rails g scaffold Comment email:string body:text post_id:integer&lt;br&gt;
rake db:migrate&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;class Comment &amp;lt; ActiveRecord::Base
  belongs_to :post
end
class Post &amp;lt; ActiveRecord::Base
  has_many :comments
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;rails c&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;p1 = Post.create(:name =&amp;gt; 'Post 1')
p2 = Post.create :name =&amp;gt; 'Post 2'
p1.comments &amp;lt;&amp;lt; p1.comments.create(:body =&amp;gt; 'Comment 1')
p2.comments &amp;lt;&amp;lt; p2.comments.create(:body =&amp;gt; 'Comment 2')
Comment.includes(:post).map{|c| c.post.name} #=&amp;gt;  Post Load (0.2ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;id&quot; IN (1,2))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now the models with after initialize:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;class Comment &amp;lt; ActiveRecord::Base
  belongs_to :post

  after_initialize do
    self.body = post.try(:name)
  end
end
class Post &amp;lt; ActiveRecord::Base
  has_many :comments
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And in the console:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;rails&quot;&gt;Comment.includes(:post).map{|c| c.post.name} #=&amp;gt;
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 1 LIMIT 1
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 1 LIMIT 1
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 2 LIMIT 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When the relation is not triggered in after_initialize, aka:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;class Comment &amp;lt; ActiveRecord::Base
  belongs_to :post

  after_initialize do
    self.body = 'I am new'
  end
end
class Post &amp;lt; ActiveRecord::Base
  has_many :comments
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Everything is ok. This can lead to performance drops.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When a relation is triggered in an after_initialize block the includes statement will not do its magic and falls back to separate requests. A reproduction scenario using Rails 3.0.7 on Ubuntu:

rails new after_initialize
cd after_initialize
rails g scaffold Post name:string body:text
rails g scaffold Comment email:string body:text post_id:integer
rake db:migrate

@@@ rails
class Comment &lt; ActiveRecord::Base
  belongs_to :post
end
class Post &lt; ActiveRecord::Base
  has_many :comments
end
@@@

rails c
@@@ rails
p1 = Post.create(:name =&gt; 'Post 1')
p2 = Post.create :name =&gt; 'Post 2'
p1.comments &lt;&lt; p1.comments.create(:body =&gt; 'Comment 1')
p2.comments &lt;&lt; p2.comments.create(:body =&gt; 'Comment 2')
Comment.includes(:post).map{|c| c.post.name} #=&gt;  Post Load (0.2ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;id&quot; IN (1,2))
@@@

Now the models with after initialize:
@@@ rails
class Comment &lt; ActiveRecord::Base
  belongs_to :post

  after_initialize do
    self.body = post.try(:name)
  end
end
class Post &lt; ActiveRecord::Base
  has_many :comments
end
@@@
And in the console:
@@@ rails
Comment.includes(:post).map{|c| c.post.name} #=&gt;
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 1 LIMIT 1
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 1 LIMIT 1
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 2 LIMIT 1
@@@

When the relation is not triggered in after_initialize, aka:

@@@ rails
class Comment &lt; ActiveRecord::Base
  belongs_to :post

  after_initialize do
    self.body = 'I am new'
  end
end
class Post &lt; ActiveRecord::Base
  has_many :comments
end
@@@

Everything is ok. This can lead to performance drops.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When a relation is triggered in an after_initialize block the
includes statement will not do its magic and falls back to separate
requests. A reproduction scenario using Rails 3.0.7 on Ubuntu:&lt;/p&gt;
&lt;p&gt;rails new after_initialize&lt;br&gt;
cd after_initialize&lt;br&gt;
rails g scaffold Post name:string body:text&lt;br&gt;
rails g scaffold Comment email:string body:text post_id:integer&lt;br&gt;
rake db:migrate&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;class Comment &amp;lt; ActiveRecord::Base
  belongs_to :post
end
class Post &amp;lt; ActiveRecord::Base
  has_many :comments
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;rails c&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;p1 = Post.create(:name =&amp;gt; 'Post 1')
p2 = Post.create :name =&amp;gt; 'Post 2'
p1.comments &amp;lt;&amp;lt; p1.comments.create(:body =&amp;gt; 'Comment 1')
p2.comments &amp;lt;&amp;lt; p2.comments.create(:body =&amp;gt; 'Comment 2')
Comment.includes(:post).map{|c| c.post.name} #=&amp;gt;  Post Load (0.2ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE (&quot;posts&quot;.&quot;id&quot; IN (1,2))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now the models with after initialize:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;class Comment &amp;lt; ActiveRecord::Base
  belongs_to :post

  after_initialize do
    self.body = post.try(:name)
  end
end
class Post &amp;lt; ActiveRecord::Base
  has_many :comments
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And in the console:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;rails&quot;&gt;Comment.includes(:post).map{|c| c.post.name} #=&amp;gt;
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 1 LIMIT 1
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 1 LIMIT 1
  Post Load (0.1ms)  SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; = 2 LIMIT 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When the relation is not triggered in after_initialize, aka:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;rails&quot;&gt;class Comment &amp;lt; ActiveRecord::Base
  belongs_to :post

  after_initialize do
    self.body = 'I am new'
  end
end
class Post &amp;lt; ActiveRecord::Base
  has_many :comments
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Everything is ok. This can lead to performance drops.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-20T18:41:23+01:00</created-at>
      <creator-id type="integer">60523</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6733</number>
      <permalink>calling-a-relation-in-after_initialize-disables-includesrelation-functionality</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord 3.0&quot; &quot;rails 3.0.7&quot;</tag>
      <title>Calling a relation in after_initialize disables includes(:relation) functionality</title>
      <updated-at type="datetime">2011-04-20T18:41:25+01:00</updated-at>
      <user-id type="integer">60523</user-id>
      <version type="integer">1</version>
      <user-name>bterkuile</user-name>
      <creator-name>bterkuile</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6733</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
