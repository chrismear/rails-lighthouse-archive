From bae8d2e38a1c2f9217662120b55c567fe79323ee Mon Sep 17 00:00:00 2001
From: Sam Goldstein <sgrock@gmail.com>
Date: Wed, 8 Jul 2009 11:45:26 -0700
Subject: [PATCH] fixed bug #2808

AR attribute collides with private method, results in NoMethodError
---
 .../lib/active_record/attribute_methods.rb         |   13 +++++++++----
 activerecord/test/cases/attribute_methods_test.rb  |   16 ++++++++++++++++
 2 files changed, 25 insertions(+), 4 deletions(-)

diff --git a/activerecord/lib/active_record/attribute_methods.rb b/activerecord/lib/active_record/attribute_methods.rb
index 1535897..166cdbd 100644
--- a/activerecord/lib/active_record/attribute_methods.rb
+++ b/activerecord/lib/active_record/attribute_methods.rb
@@ -133,6 +133,7 @@ module ActiveRecord
       end
 
       private
+      
         # Suffixes a, ?, c become regexp /(a|\?|c)$/
         def rebuild_attribute_method_regexp
           suffixes = attribute_method_suffixes.map { |s| Regexp.escape(s) }
@@ -238,19 +239,17 @@ module ActiveRecord
     def method_missing(method_id, *args, &block)
       method_name = method_id.to_s
 
-      if self.class.private_method_defined?(method_name)
-        raise NoMethodError.new("Attempt to call private method", method_name, args)
-      end
-
       # If we haven't generated any methods yet, generate them, then
       # see if we've created the method we're looking for.
       if !self.class.generated_methods?
         self.class.define_attribute_methods
+        guard_private_attribute_method!(method_name, args)
         if self.class.generated_methods.include?(method_name)
           return self.send(method_id, *args, &block)
         end
       end
       
+      guard_private_attribute_method!(method_name, args)
       if self.class.primary_key.to_s == method_name
         id
       elsif md = self.class.match_attribute_method?(method_name)
@@ -371,6 +370,12 @@ module ActiveRecord
     end
 
     private
+      # prevent method_missing from calling private methods with #send
+      def guard_private_attribute_method!(method_name, args)
+        if self.class.private_method_defined?(method_name)
+          raise NoMethodError.new("Attempt to call private method", method_name, args)
+        end
+      end
     
       def missing_attribute(attr_name, stack)
         raise ActiveRecord::MissingAttributeError, "missing attribute: #{attr_name}", stack
diff --git a/activerecord/test/cases/attribute_methods_test.rb b/activerecord/test/cases/attribute_methods_test.rb
index 17ed302..183be1e 100644
--- a/activerecord/test/cases/attribute_methods_test.rb
+++ b/activerecord/test/cases/attribute_methods_test.rb
@@ -277,6 +277,22 @@ class AttributeMethodsTest < ActiveRecord::TestCase
     assert_raise(ActiveRecord::UnknownAttributeError) { @target.new.attributes = { :title => "Ants in pants" } }
   end
 
+  def test_read_attribute_overwrites_private_method_not_considered_implemented
+    # simulate a model with a db column that shares its name an inherited
+    # private method (e.g. Object#system)
+    #
+    Object.class_eval do
+      private
+      def title; "private!"; end
+    end
+    assert !@target.instance_method_already_implemented?(:title)
+    topic = @target.new
+    assert_equal nil, topic.title
+
+    Object.send(:undef_method, :title) # remove test method from object
+  end
+
+
   private
   def time_related_columns_on_topic
     Topic.columns.select{|c| [:time, :date, :datetime, :timestamp].include?(c.type)}.map(&:name)
-- 
1.6.1.1

