diff --git a/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb b/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb
index 2213b09..bd574b6 100644
--- a/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb
+++ b/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb
@@ -63,6 +63,18 @@ class HashWithIndifferentAccess < Hash
   alias_method :merge!, :update
 
   # Checks the hash for a key matching the argument passed in
+  #
+  #   Example:
+  #
+  #   >> hash = HashWithIndifferentAccess.new
+  #   => {}
+  #   >> hash["key"] = "value"
+  #   => "value"
+  #   >> hash.key? :key
+  #   => true
+  #   >> hash.key? "key"
+  #   => true 
+  #
   def key?(key)
     super(convert_key(key))
   end
@@ -76,7 +88,19 @@ class HashWithIndifferentAccess < Hash
     super(convert_key(key), *extras)
   end
 
-  # Returns an array of the values at the specified indicies. 
+  # Returns an array of the values at the specified indices.
+  #
+  # Example:
+  #
+  #   >> hash = HashWithIndifferentAccess.new
+  #   => {}
+  #   >> hash[:a] = "x"
+  #   => "x"
+  #   >> hash[:b] = "y"
+  #   => "y"
+  #   >> hash.values_at("a", "b")
+  #   => ["x", "y"]
+  #
   def values_at(*indices)
     indices.collect {|key| self[convert_key(key)]}
   end
@@ -107,10 +131,12 @@ class HashWithIndifferentAccess < Hash
   end
 
   protected
+    # Returns string form of the key
     def convert_key(key)
       key.kind_of?(Symbol) ? key.to_s : key
     end
 
+    # Convert value if necessary from Hash to HashWithIndifferentAccess
     def convert_value(value)
       case value
       when Hash
