<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-01T15:36:22+01:00</created-at>
  <creator-id type="integer">880</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">78</number>
  <permalink>fixtures-identify-should-generate-uniqueids</permalink>
  <priority type="integer">10534</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord bug fixtures</tag>
  <title>Fixtures.identify should generate uniqueIDs</title>
  <updated-at type="datetime">2008-07-29T01:27:23+01:00</updated-at>
  <user-id type="integer">27409</user-id>
  <version type="integer">6</version>
  <user-name>roobnoob</user-name>
  <creator-name>vlad.zar (at gmail)</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/78</url>
  <priority-name nil="true"></priority-name>
  <original-body>&gt; &quot;Foxy fixtures are great! Manually entered IDs no more required at all&quot; (c) somebody.

Well, that's not actually true (yet).

I've tried to generate a big number of records for upcoming load testing using fixtures and rake task similar to fixtures:load. Here is simplified example of my records.yml file:

@@@ ruby
&lt;% 1.upto(1_000) do |type_id| %&gt;
&lt;% 1.upto(1_100) do |record_id| %&gt;

type_&lt;%= type_id %&gt;_record_&lt;%= record_id %&gt;:
  name: $LABEL

&lt;% end %&gt;
&lt;% end %&gt;
@@@

And I've got an error from MySQL which looks like:

Mysql::Error: #23000Duplicate entry '813474051' for key 1: INSERT INTO `records` (`id`, `name`) VALUES ('813474051', 'type_894_record_204')

Ok, it's clear what is going on here. See fixtures.rb source code.

@@@ ruby
class Fixtures

# Returns a consistent identifier for +label+. This will always
# be a positive integer, and will always be the same for a given
# label, assuming the same OS, platform, and version of Ruby.
def self.identify(label)
  label.to_s.hash.abs
end

end
@@@

So, Object#hash generates Fixnum value, and abs makes it even less. It's ok, but now look at this:

@@@ ruby
'type_304_record_1070'.hash.abs # =&gt; 813474051
'type_894_record_204'.hash.abs # =&gt; 813474051
@@@

How bad such behavior is? For me, this is bad enough.

I think Fixtures.identify should return not only &quot;consistent identifier, the same for given label&quot; but not less importantly *unique* identifier (probably inside yml file?) too.

Don't think this error is too rare to bother other people. See this nice fixture keys for users.yml file:

@@@ ruby
'olga_boyer'.hash.abs # =&gt; 603279717
'demond_jacobi'.hash.abs # =&gt; 603279717

'chadrick_conroy'.hash.abs # =&gt; 786185615
'ardella_vonrueden'.hash.abs # =&gt; 786185615

'margarett_jakubowski'.hash.abs # =&gt; 35381745
'alexanne_volkman'.hash.abs # =&gt; 35381745

'rafael_harris'.hash.abs # =&gt; 546356202
'jamar_schimmel'.hash.abs # =&gt; 546356202

'carissa_schoen'.hash.abs # =&gt; 892394396
'dasia_gusikowski'.hash.abs # =&gt; 892394396

'adriana_skiles'.hash.abs # =&gt; 31972130
'hester_murazik'.hash.abs # =&gt; 31972130

'tatyana_kessler'.hash.abs # =&gt; 711293022
'nigel_kuhlman'.hash.abs # =&gt; 711293022

'christy_brown'.hash.abs # =&gt; 182416424
'clark_weber'.hash.abs # =&gt; 182416424

'esmeralda_bauch'.hash.abs # =&gt; 206812768
'marcelina_moore'.hash.abs # =&gt; 206812768
@@@

This nice little keys won't work too!

Ok, ok, I'm cheating a bit. I've generated this keys with faker gem.

Nevertheless I'm looking forward to Fixtures.identify new implementation.</original-body>
  <latest-body>&gt; &quot;Foxy fixtures are great! Manually entered IDs no more required at all&quot; (c) somebody.

Well, that's not actually true (yet).

I've tried to generate a big number of records for upcoming load testing using fixtures and rake task similar to fixtures:load. Here is simplified example of my records.yml file:

@@@ ruby
&lt;% 1.upto(1_000) do |type_id| %&gt;
&lt;% 1.upto(1_100) do |record_id| %&gt;

type_&lt;%= type_id %&gt;_record_&lt;%= record_id %&gt;:
  name: $LABEL

&lt;% end %&gt;
&lt;% end %&gt;
@@@

And I've got an error from MySQL which looks like:

Mysql::Error: #23000Duplicate entry '813474051' for key 1: INSERT INTO `records` (`id`, `name`) VALUES ('813474051', 'type_894_record_204')

Ok, it's clear what is going on here. See fixtures.rb source code.

@@@ ruby
class Fixtures

# Returns a consistent identifier for +label+. This will always
# be a positive integer, and will always be the same for a given
# label, assuming the same OS, platform, and version of Ruby.
def self.identify(label)
  label.to_s.hash.abs
end

end
@@@

So, Object#hash generates Fixnum value, and abs makes it even less. It's ok, but now look at this:

@@@ ruby
'type_304_record_1070'.hash.abs # =&gt; 813474051
'type_894_record_204'.hash.abs # =&gt; 813474051
@@@

How bad such behavior is? For me, this is bad enough.

I think Fixtures.identify should return not only &quot;consistent identifier, the same for given label&quot; but not less importantly *unique* identifier (probably inside yml file?) too.

Don't think this error is too rare to bother other people. See this nice fixture keys for users.yml file:

@@@ ruby
'olga_boyer'.hash.abs # =&gt; 603279717
'demond_jacobi'.hash.abs # =&gt; 603279717

'chadrick_conroy'.hash.abs # =&gt; 786185615
'ardella_vonrueden'.hash.abs # =&gt; 786185615

'margarett_jakubowski'.hash.abs # =&gt; 35381745
'alexanne_volkman'.hash.abs # =&gt; 35381745

'rafael_harris'.hash.abs # =&gt; 546356202
'jamar_schimmel'.hash.abs # =&gt; 546356202

'carissa_schoen'.hash.abs # =&gt; 892394396
'dasia_gusikowski'.hash.abs # =&gt; 892394396

'adriana_skiles'.hash.abs # =&gt; 31972130
'hester_murazik'.hash.abs # =&gt; 31972130

'tatyana_kessler'.hash.abs # =&gt; 711293022
'nigel_kuhlman'.hash.abs # =&gt; 711293022

'christy_brown'.hash.abs # =&gt; 182416424
'clark_weber'.hash.abs # =&gt; 182416424

'esmeralda_bauch'.hash.abs # =&gt; 206812768
'marcelina_moore'.hash.abs # =&gt; 206812768
@@@

This nice little keys won't work too!

Ok, ok, I'm cheating a bit. I've generated this keys with faker gem.

Nevertheless I'm looking forward to Fixtures.identify new implementation.</latest-body>
  <original-body-html>&lt;div&gt;&lt;blockquote&gt;&lt;p&gt;
&quot;Foxy fixtures are great! Manually entered IDs no more required at all&quot; (c) somebody.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;
Well, that's not actually true (yet).
&lt;/p&gt;&lt;p&gt;
I've tried to generate a big number of records for upcoming load testing using fixtures and rake task similar to fixtures:load. Here is simplified example of my records.yml file:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&amp;lt;% 1.upto(1_000) do |type_id| %&amp;gt;
&amp;lt;% 1.upto(1_100) do |record_id| %&amp;gt;

type_&amp;lt;%= type_id %&amp;gt;_record_&amp;lt;%= record_id %&amp;gt;:
  name: $LABEL

&amp;lt;% end %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
And I've got an error from MySQL which looks like:
&lt;/p&gt;&lt;p&gt;
Mysql::Error: &lt;a href=&quot;/projects/8994/tickets/23000&quot; title=&quot;Ticket #23000&quot;&gt;#23000&lt;/a&gt;Duplicate entry '813474051' for key 1: INSERT INTO `records` (`id`, `name`) VALUES ('813474051', 'type_894_record_204')
&lt;/p&gt;&lt;p&gt;
Ok, it's clear what is going on here. See fixtures.rb source code.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Fixtures

# Returns a consistent identifier for +label+. This will always
# be a positive integer, and will always be the same for a given
# label, assuming the same OS, platform, and version of Ruby.
def self.identify(label)
  label.to_s.hash.abs
end

end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
So, Object#hash generates Fixnum value, and abs makes it even less. It's ok, but now look at this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;'type_304_record_1070'.hash.abs # =&amp;gt; 813474051
'type_894_record_204'.hash.abs # =&amp;gt; 813474051&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
How bad such behavior is? For me, this is bad enough.
&lt;/p&gt;&lt;p&gt;
I think Fixtures.identify should return not only &quot;consistent identifier, the same for given label&quot; but not less importantly &lt;strong&gt;unique&lt;/strong&gt; identifier (probably inside yml file?) too.
&lt;/p&gt;&lt;p&gt;
Don't think this error is too rare to bother other people. See this nice fixture keys for users.yml file:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;'olga_boyer'.hash.abs # =&amp;gt; 603279717
'demond_jacobi'.hash.abs # =&amp;gt; 603279717

'chadrick_conroy'.hash.abs # =&amp;gt; 786185615
'ardella_vonrueden'.hash.abs # =&amp;gt; 786185615

'margarett_jakubowski'.hash.abs # =&amp;gt; 35381745
'alexanne_volkman'.hash.abs # =&amp;gt; 35381745

'rafael_harris'.hash.abs # =&amp;gt; 546356202
'jamar_schimmel'.hash.abs # =&amp;gt; 546356202

'carissa_schoen'.hash.abs # =&amp;gt; 892394396
'dasia_gusikowski'.hash.abs # =&amp;gt; 892394396

'adriana_skiles'.hash.abs # =&amp;gt; 31972130
'hester_murazik'.hash.abs # =&amp;gt; 31972130

'tatyana_kessler'.hash.abs # =&amp;gt; 711293022
'nigel_kuhlman'.hash.abs # =&amp;gt; 711293022

'christy_brown'.hash.abs # =&amp;gt; 182416424
'clark_weber'.hash.abs # =&amp;gt; 182416424

'esmeralda_bauch'.hash.abs # =&amp;gt; 206812768
'marcelina_moore'.hash.abs # =&amp;gt; 206812768&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This nice little keys won't work too!
&lt;/p&gt;&lt;p&gt;
Ok, ok, I'm cheating a bit. I've generated this keys with faker gem.
&lt;/p&gt;&lt;p&gt;
Nevertheless I'm looking forward to Fixtures.identify new implementation.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt; &quot;Foxy fixtures are great! Manually entered IDs no more required at all&quot; (c) somebody.

Well, that's not actually true (yet).

I've tried to generate a big number of records for upcoming load testing using fixtures and rake task similar to fixtures:load. Here is simplified example of my records.yml file:

@@@ ruby
&lt;% 1.upto(1_000) do |type_id| %&gt;
&lt;% 1.upto(1_100) do |record_id| %&gt;

type_&lt;%= type_id %&gt;_record_&lt;%= record_id %&gt;:
  name: $LABEL

&lt;% end %&gt;
&lt;% end %&gt;
@@@

And I've got an error from MySQL which looks like:

Mysql::Error: #23000Duplicate entry '813474051' for key 1: INSERT INTO `records` (`id`, `name`) VALUES ('813474051', 'type_894_record_204')

Ok, it's clear what is going on here. See fixtures.rb source code.

@@@ ruby
class Fixtures

# Returns a consistent identifier for +label+. This will always
# be a positive integer, and will always be the same for a given
# label, assuming the same OS, platform, and version of Ruby.
def self.identify(label)
  label.to_s.hash.abs
end

end
@@@

So, Object#hash generates Fixnum value, and abs makes it even less. It's ok, but now look at this:

@@@ ruby
'type_304_record_1070'.hash.abs # =&gt; 813474051
'type_894_record_204'.hash.abs # =&gt; 813474051
@@@

How bad such behavior is? For me, this is bad enough.

I think Fixtures.identify should return not only &quot;consistent identifier, the same for given label&quot; but not less importantly *unique* identifier (probably inside yml file?) too.

Don't think this error is too rare to bother other people. See this nice fixture keys for users.yml file:

@@@ ruby
'olga_boyer'.hash.abs # =&gt; 603279717
'demond_jacobi'.hash.abs # =&gt; 603279717

'chadrick_conroy'.hash.abs # =&gt; 786185615
'ardella_vonrueden'.hash.abs # =&gt; 786185615

'margarett_jakubowski'.hash.abs # =&gt; 35381745
'alexanne_volkman'.hash.abs # =&gt; 35381745

'rafael_harris'.hash.abs # =&gt; 546356202
'jamar_schimmel'.hash.abs # =&gt; 546356202

'carissa_schoen'.hash.abs # =&gt; 892394396
'dasia_gusikowski'.hash.abs # =&gt; 892394396

'adriana_skiles'.hash.abs # =&gt; 31972130
'hester_murazik'.hash.abs # =&gt; 31972130

'tatyana_kessler'.hash.abs # =&gt; 711293022
'nigel_kuhlman'.hash.abs # =&gt; 711293022

'christy_brown'.hash.abs # =&gt; 182416424
'clark_weber'.hash.abs # =&gt; 182416424

'esmeralda_bauch'.hash.abs # =&gt; 206812768
'marcelina_moore'.hash.abs # =&gt; 206812768
@@@

This nice little keys won't work too!

Ok, ok, I'm cheating a bit. I've generated this keys with faker gem.

Nevertheless I'm looking forward to Fixtures.identify new implementation.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;&lt;p&gt;
&quot;Foxy fixtures are great! Manually entered IDs no more required at all&quot; (c) somebody.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;
Well, that's not actually true (yet).
&lt;/p&gt;&lt;p&gt;
I've tried to generate a big number of records for upcoming load testing using fixtures and rake task similar to fixtures:load. Here is simplified example of my records.yml file:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&amp;lt;% 1.upto(1_000) do |type_id| %&amp;gt;
&amp;lt;% 1.upto(1_100) do |record_id| %&amp;gt;

type_&amp;lt;%= type_id %&amp;gt;_record_&amp;lt;%= record_id %&amp;gt;:
  name: $LABEL

&amp;lt;% end %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
And I've got an error from MySQL which looks like:
&lt;/p&gt;&lt;p&gt;
Mysql::Error: &lt;a href=&quot;/projects/8994/tickets/23000&quot; title=&quot;Ticket #23000&quot;&gt;#23000&lt;/a&gt;Duplicate entry '813474051' for key 1: INSERT INTO `records` (`id`, `name`) VALUES ('813474051', 'type_894_record_204')
&lt;/p&gt;&lt;p&gt;
Ok, it's clear what is going on here. See fixtures.rb source code.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Fixtures

# Returns a consistent identifier for +label+. This will always
# be a positive integer, and will always be the same for a given
# label, assuming the same OS, platform, and version of Ruby.
def self.identify(label)
  label.to_s.hash.abs
end

end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
So, Object#hash generates Fixnum value, and abs makes it even less. It's ok, but now look at this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;'type_304_record_1070'.hash.abs # =&amp;gt; 813474051
'type_894_record_204'.hash.abs # =&amp;gt; 813474051&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
How bad such behavior is? For me, this is bad enough.
&lt;/p&gt;&lt;p&gt;
I think Fixtures.identify should return not only &quot;consistent identifier, the same for given label&quot; but not less importantly &lt;strong&gt;unique&lt;/strong&gt; identifier (probably inside yml file?) too.
&lt;/p&gt;&lt;p&gt;
Don't think this error is too rare to bother other people. See this nice fixture keys for users.yml file:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;'olga_boyer'.hash.abs # =&amp;gt; 603279717
'demond_jacobi'.hash.abs # =&amp;gt; 603279717

'chadrick_conroy'.hash.abs # =&amp;gt; 786185615
'ardella_vonrueden'.hash.abs # =&amp;gt; 786185615

'margarett_jakubowski'.hash.abs # =&amp;gt; 35381745
'alexanne_volkman'.hash.abs # =&amp;gt; 35381745

'rafael_harris'.hash.abs # =&amp;gt; 546356202
'jamar_schimmel'.hash.abs # =&amp;gt; 546356202

'carissa_schoen'.hash.abs # =&amp;gt; 892394396
'dasia_gusikowski'.hash.abs # =&amp;gt; 892394396

'adriana_skiles'.hash.abs # =&amp;gt; 31972130
'hester_murazik'.hash.abs # =&amp;gt; 31972130

'tatyana_kessler'.hash.abs # =&amp;gt; 711293022
'nigel_kuhlman'.hash.abs # =&amp;gt; 711293022

'christy_brown'.hash.abs # =&amp;gt; 182416424
'clark_weber'.hash.abs # =&amp;gt; 182416424

'esmeralda_bauch'.hash.abs # =&amp;gt; 206812768
'marcelina_moore'.hash.abs # =&amp;gt; 206812768&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This nice little keys won't work too!
&lt;/p&gt;&lt;p&gt;
Ok, ok, I'm cheating a bit. I've generated this keys with faker gem.
&lt;/p&gt;&lt;p&gt;
Nevertheless I'm looking forward to Fixtures.identify new implementation.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T15:36:22+01:00</created-at>
      <creator-id type="integer">880</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">78</number>
      <permalink>fixtures-identify-should-generate-uniqueids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Fixtures.identify should generate uniqueIDs</title>
      <updated-at type="datetime">2008-05-01T15:36:22+01:00</updated-at>
      <user-id type="integer">880</user-id>
      <version type="integer">1</version>
      <user-name>vlad.zar (at gmail)</user-name>
      <creator-name>vlad.zar (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/78</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've always wondered whether this was going to be a problem with anyone. Typically the number of things in a fixtures file is quite small, so it does seem quite unlikely unless there are many fixtures.

Fundamentally the problem is that: (as i understand it) we need to be able to generate the label for people(:bob) without having read the people.yml. Perhaps Fixtures.identify could stash away all the ids it has generated so that it knows not to reuse certain values?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I've always wondered whether this was going to be a problem with anyone. Typically the number of things in a fixtures file is quite small, so it does seem quite unlikely unless there are many fixtures.
&lt;/p&gt;&lt;p&gt;
Fundamentally the problem is that: (as i understand it) we need to be able to generate the label for people(:bob) without having read the people.yml. Perhaps Fixtures.identify could stash away all the ids it has generated so that it knows not to reuse certain values?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T18:53:43+01:00</created-at>
      <creator-id type="integer">880</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">78</number>
      <permalink>fixtures-identify-should-generate-uniqueids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Fixtures.identify should generate uniqueIDs</title>
      <updated-at type="datetime">2008-05-01T18:53:43+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">2</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>vlad.zar (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/78</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Another thought: is there any evidence that String#hash is generating particular bad values (ie bad uniformity etc...) ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Another thought: is there any evidence that String#hash is generating particular bad values (ie bad uniformity etc...) ?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T18:55:10+01:00</created-at>
      <creator-id type="integer">880</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">78</number>
      <permalink>fixtures-identify-should-generate-uniqueids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Fixtures.identify should generate uniqueIDs</title>
      <updated-at type="datetime">2008-05-01T18:55:10+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>vlad.zar (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/78</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>String#hash doesn't need to generate unique value, it generates hash and do it pretty well :) Instead, if I see a method named *identify*, I expect unique value to be generated.

I'm used to this nice new feature in edge Rails. It allows me to have easily reading relations in fixtures.

Having a big non sequential IDs for records is also a small advantage in tests. It gives me more realistic data, which looks like application is being in use some years maybe :) I mean Some records were deleted. Btw, I've found a bug in project just because I have such a big IDs.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
String#hash doesn't need to generate unique value, it generates hash and do it pretty well :) Instead, if I see a method named *identify*, I expect unique value to be generated.
&lt;/p&gt;&lt;p&gt;
I'm used to this nice new feature in edge Rails. It allows me to have easily reading relations in fixtures.
&lt;/p&gt;&lt;p&gt;
Having a big non sequential IDs for records is also a small advantage in tests. It gives me more realistic data, which looks like application is being in use some years maybe :) I mean Some records were deleted. Btw, I've found a bug in project just because I have such a big IDs.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-02T08:06:24+01:00</created-at>
      <creator-id type="integer">880</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">78</number>
      <permalink>fixtures-identify-should-generate-uniqueids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Fixtures.identify should generate uniqueIDs</title>
      <updated-at type="datetime">2008-05-02T08:06:24+01:00</updated-at>
      <user-id type="integer">880</user-id>
      <version type="integer">4</version>
      <user-name>vlad.zar (at gmail)</user-name>
      <creator-name>vlad.zar (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/78</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Fixtures were not mean for HUGE data stores. 1000 records is going slow your tests down a ton since that gets reloaded every test case. Probably not a good idea. I'd use a factory pattern to create this large data set for the tests you need it. I don't think fixture collision tests are necessary.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Fixtures were not mean for HUGE data stores. 1000 records is going slow your tests down a ton since that gets reloaded every test case. Probably not a good idea. I'd use a factory pattern to create this large data set for the tests you need it. I don't think fixture collision tests are necessary.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-17T01:02:10+01:00</created-at>
      <creator-id type="integer">880</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">78</number>
      <permalink>fixtures-identify-should-generate-uniqueids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord bug fixtures</tag>
      <title>Fixtures.identify should generate uniqueIDs</title>
      <updated-at type="datetime">2008-07-17T01:02:10+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">5</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>vlad.zar (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/78</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It's really a bad idea to use a hash as a synonym for uniqueness. A collision can happen at any time, whether you have 2 entries or millions. Of course, the probability of a collision with 2 entries is microscopic, but it's there; it's like a mine waiting to be stepped on.

And fixtures aren't just used for testing. They can be used as seed data sources (as you deploy, you run a rake task that loads up the db with seed data from fixtures). Or as mentioned above, to have a bunch of data for stress testing.

Once you get into this realm, you might have millions of rows, and now you're hitting real probabilities of a collision.

There should at least be a big huge disclaimer &quot;WARNING!..&quot; in the foxy fixtures documentation.

Now, as to how to fix the problem, that's a tough one.  A brute force solution to load everything in and track id's works, but then you start running into potential memory issues if you store these hashes in memory when dealing with huge data sets.

I would probably leave it as &quot;wontfix&quot;, since there are 2 cases: a) either somebody is generating the fixtures by hand and runs into the collision, or b) huge data sets are being generated via some program, as in the above.

For a), just edit the file and change one of the colliding symobls, for b), don't use foxy-fixtures. Since it's being generated by code, simply generate the id as well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It's really a bad idea to use a hash as a synonym for uniqueness. A collision can happen at any time, whether you have 2 entries or millions. Of course, the probability of a collision with 2 entries is microscopic, but it's there; it's like a mine waiting to be stepped on.
&lt;/p&gt;&lt;p&gt;
And fixtures aren't just used for testing. They can be used as seed data sources (as you deploy, you run a rake task that loads up the db with seed data from fixtures). Or as mentioned above, to have a bunch of data for stress testing.
&lt;/p&gt;&lt;p&gt;
Once you get into this realm, you might have millions of rows, and now you're hitting real probabilities of a collision.
&lt;/p&gt;&lt;p&gt;
There should at least be a big huge disclaimer &quot;WARNING!..&quot; in the foxy fixtures documentation.
&lt;/p&gt;&lt;p&gt;
Now, as to how to fix the problem, that's a tough one.  A brute force solution to load everything in and track id's works, but then you start running into potential memory issues if you store these hashes in memory when dealing with huge data sets.
&lt;/p&gt;&lt;p&gt;
I would probably leave it as &quot;wontfix&quot;, since there are 2 cases: a) either somebody is generating the fixtures by hand and runs into the collision, or b) huge data sets are being generated via some program, as in the above.
&lt;/p&gt;&lt;p&gt;
For a), just edit the file and change one of the colliding symobls, for b), don't use foxy-fixtures. Since it's being generated by code, simply generate the id as well.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-29T01:27:23+01:00</created-at>
      <creator-id type="integer">880</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">78</number>
      <permalink>fixtures-identify-should-generate-uniqueids</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord bug fixtures</tag>
      <title>Fixtures.identify should generate uniqueIDs</title>
      <updated-at type="datetime">2008-07-29T01:27:23+01:00</updated-at>
      <user-id type="integer">27409</user-id>
      <version type="integer">6</version>
      <user-name>roobnoob</user-name>
      <creator-name>vlad.zar (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/78</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
