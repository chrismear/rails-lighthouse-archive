<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-12-19T16:21:25+00:00</created-at>
  <creator-id type="integer">41366</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1603</number>
  <permalink>sqlite3-adapter-should-not-raise-exception-when-table-does-not-exist</permalink>
  <priority type="integer">938</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord adapters bug sqlite3</tag>
  <title>sqlite3 adapter should not raise exception when table does not exist</title>
  <updated-at type="datetime">2009-03-13T14:23:41+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Paul Hinze</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1603</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The other connection adapters I've seen allow columns to return null, but in SQLite3Adapter#table_structure an exception is raised.n  This prevents any descendants from ActiveRecord::Base from being initialized without a table existing.

Here is where the exception is raised:
http://github.com/rails/rails/tree/master/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L29

For reference, note the MySQL adapter allows columns to return an empty array:
http://github.com/rails/rails/tree/master/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb#L445

If there's a good reason for this design decision, then I'm happy to hear it, but right now it's preventing me from running unit tests that create temporary models (tests that pass on a SQL Server adapter) on SQLite.

Noting Jeremy just because github has him as the last one to touch the file.</original-body>
  <latest-body>The other connection adapters I've seen allow columns to return null, but in SQLite3Adapter#table_structure an exception is raised.n  This prevents any descendants from ActiveRecord::Base from being initialized without a table existing.

Here is where the exception is raised:
http://github.com/rails/rails/tree/master/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L29

For reference, note the MySQL adapter allows columns to return an empty array:
http://github.com/rails/rails/tree/master/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb#L445

If there's a good reason for this design decision, then I'm happy to hear it, but right now it's preventing me from running unit tests that create temporary models (tests that pass on a SQL Server adapter) on SQLite.

Noting Jeremy just because github has him as the last one to touch the file.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The other connection adapters I've seen allow columns to return
null, but in SQLite3Adapter#table_structure an exception is
raised.n This prevents any descendants from ActiveRecord::Base from
being initialized without a table existing.&lt;/p&gt;
&lt;p&gt;Here is where the exception is raised: &lt;a href=&quot;http://github.com/rails/rails/tree/master/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L29&quot;&gt;
http://github.com/rails/rails/tr...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For reference, note the MySQL adapter allows columns to return
an empty array: &lt;a href=&quot;http://github.com/rails/rails/tree/master/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb#L445&quot;&gt;
http://github.com/rails/rails/tr...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If there's a good reason for this design decision, then I'm
happy to hear it, but right now it's preventing me from running
unit tests that create temporary models (tests that pass on a SQL
Server adapter) on SQLite.&lt;/p&gt;
&lt;p&gt;Noting Jeremy just because github has him as the last one to
touch the file.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The other connection adapters I've seen allow columns to return null, but in SQLite3Adapter#table_structure an exception is raised.n  This prevents any descendants from ActiveRecord::Base from being initialized without a table existing.

Here is where the exception is raised:
http://github.com/rails/rails/tree/master/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L29

For reference, note the MySQL adapter allows columns to return an empty array:
http://github.com/rails/rails/tree/master/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb#L445

If there's a good reason for this design decision, then I'm happy to hear it, but right now it's preventing me from running unit tests that create temporary models (tests that pass on a SQL Server adapter) on SQLite.

Noting Jeremy just because github has him as the last one to touch the file.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The other connection adapters I've seen allow columns to return
null, but in SQLite3Adapter#table_structure an exception is
raised.n This prevents any descendants from ActiveRecord::Base from
being initialized without a table existing.&lt;/p&gt;
&lt;p&gt;Here is where the exception is raised: &lt;a href=&quot;http://github.com/rails/rails/tree/master/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L29&quot;&gt;
http://github.com/rails/rails/tr...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For reference, note the MySQL adapter allows columns to return
an empty array: &lt;a href=&quot;http://github.com/rails/rails/tree/master/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb#L445&quot;&gt;
http://github.com/rails/rails/tr...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If there's a good reason for this design decision, then I'm
happy to hear it, but right now it's preventing me from running
unit tests that create temporary models (tests that pass on a SQL
Server adapter) on SQLite.&lt;/p&gt;
&lt;p&gt;Noting Jeremy just because github has him as the last one to
touch the file.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-19T16:21:25+00:00</created-at>
      <creator-id type="integer">41366</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1603</number>
      <permalink>sqlite3-adapter-should-not-raise-exception-when-table-does-not-exist</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord adapters bug sqlite3</tag>
      <title>sqlite3 adapter should not raise exception when table does not exist</title>
      <updated-at type="datetime">2008-12-19T16:21:28+00:00</updated-at>
      <user-id type="integer">41366</user-id>
      <version type="integer">1</version>
      <user-name>Paul Hinze</user-name>
      <creator-name>Paul Hinze</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1603</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The table_structure() method is just an internal method used by connection#columns(). connection#columns() raises an exception in MySQL when the table is missing.

I think it's a good design to fail early in such cases rather than silently ignoring failures.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The table_structure() method is just an internal method used by
connection#columns(). connection#columns() raises an exception in
MySQL when the table is missing.&lt;/p&gt;
&lt;p&gt;I think it's a good design to fail early in such cases rather
than silently ignoring failures.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-13T14:23:36+00:00</created-at>
      <creator-id type="integer">41366</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 85
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1603</number>
      <permalink>sqlite3-adapter-should-not-raise-exception-when-table-does-not-exist</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord adapters bug sqlite3</tag>
      <title>sqlite3 adapter should not raise exception when table does not exist</title>
      <updated-at type="datetime">2009-03-13T14:23:41+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Paul Hinze</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1603</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
