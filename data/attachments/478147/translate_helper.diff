From 074aa49945a57aee4ec14ac236c59a2d889fc9e3 Mon Sep 17 00:00:00 2001
From: Craig Davey <me@craigdavey.ca>
Date: Fri, 9 Apr 2010 21:01:32 -0400
Subject: [PATCH] =?UTF-8?q?Changed=20translate=20helper=20so=20that=20it=20doesn=E2=80=99t=20mark=20every=20translation=20as=20safe=20HTML.=20Only=20keys=20with=20a=20"=5Fhtml"=20suffix=20and=20keys=20named=20"html"=20are=20considered=20to=20be=20safe=20HTML.=20All=20other=20translations=20are=20left=20untouched.?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../lib/action_view/helpers/translation_helper.rb  |   26 +++++++++++++++++--
 .../test/fixtures/test/array_translation.erb       |    2 +-
 .../test/template/translation_helper_test.rb       |   17 ++++++++++++-
 3 files changed, 40 insertions(+), 5 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/translation_helper.rb b/actionpack/lib/action_view/helpers/translation_helper.rb
index 457944d..89c1b4a 100644
--- a/actionpack/lib/action_view/helpers/translation_helper.rb
+++ b/actionpack/lib/action_view/helpers/translation_helper.rb
@@ -3,17 +3,28 @@ require 'action_view/helpers/tag_helper'
 module ActionView
   module Helpers
     module TranslationHelper
-      # Delegates to I18n#translate but also performs two additional functions. First, it'll catch MissingTranslationData exceptions 
+      # Delegates to I18n#translate but also performs three additional functions. First, it'll catch MissingTranslationData exceptions 
       # and turn them into inline spans that contains the missing key, such that you can see in a view what is missing where.
       #
       # Second, it'll scope the key by the current partial if the key starts with a period. So if you call translate(".foo") from the
       # people/index.html.erb template, you'll actually be calling I18n.translate("people.index.foo"). This makes it less repetitive
       # to translate many keys within the same partials and gives you a simple framework for scoping them consistently. If you don't
       # prepend the key with a period, nothing is converted.
+      #
+      # Third, it’ll mark the translation as safe HTML if the key has the suffix "_html" or the last element of the key is the word 
+      # "html". For example, calling translate("footer_html") or translate("footer.html") will return a safe HTML string that won’t 
+      # be escaped by other HTML helper methods. This naming convention helps to identify translations that include HTML tags so that 
+      # you know what kind of output to expect when you call translate in a template.
+
       def translate(key, options = {})
         options[:raise] = true
         translation = I18n.translate(scope_key_by_partial(key), options)
-        (translation.respond_to?(:join) ? translation.join : translation).html_safe
+        translation = (translation.respond_to?(:join) ? translation.join : translation)
+        if html_safe_translation_key? key
+          translation.html_safe
+        else
+          translation
+        end
       rescue I18n::MissingTranslationData => e
         keys = I18n.normalize_keys(e.locale, e.key, e.options[:scope])
         content_tag('span', keys.join(', '), :class => 'translation_missing')
@@ -27,7 +38,7 @@ module ActionView
       alias :l :localize
 
       private
-
+        
         def scope_key_by_partial(key)
           strkey = key.respond_to?(:join) ? key.join : key.to_s
           if strkey.first == "."
@@ -40,6 +51,15 @@ module ActionView
             key
           end
         end
+
+        def html_safe_translation_key?(key)
+          last_key = if key.is_a? Array
+            key.last
+          else
+            key.to_s.split('.').last
+          end
+          (last_key == "html") || (last_key.ends_with? "_html")
+        end
     end
   end
 end
diff --git a/actionpack/test/fixtures/test/array_translation.erb b/actionpack/test/fixtures/test/array_translation.erb
index 12c0763..def3a1a 100644
--- a/actionpack/test/fixtures/test/array_translation.erb
+++ b/actionpack/test/fixtures/test/array_translation.erb
@@ -1 +1 @@
-<%= t(['foo', 'bar']) %>
\ No newline at end of file
+<%= t(['foo', 'bar', 'html']) %>
\ No newline at end of file
diff --git a/actionpack/test/template/translation_helper_test.rb b/actionpack/test/template/translation_helper_test.rb
index 6782bf0..b382b5e 100644
--- a/actionpack/test/template/translation_helper_test.rb
+++ b/actionpack/test/template/translation_helper_test.rb
@@ -25,7 +25,7 @@ class TranslationHelperTest < ActiveSupport::TestCase
 
   def test_translation_of_an_array_with_html
     expected = '<a href="#">foo</a><a href="#">bar</a>'
-    I18n.expects(:translate).with(["foo", "bar"], :raise => true).returns(['<a href="#">foo</a>', '<a href="#">bar</a>'])
+    I18n.expects(:translate).with(["foo", "bar", "html"], :raise => true).returns(['<a href="#">foo</a>', '<a href="#">bar</a>'])
     @view = ActionView::Base.new(ActionController::Base.view_paths, {})
     assert_equal expected, @view.render(:file => "test/array_translation")
   end
@@ -47,4 +47,19 @@ class TranslationHelperTest < ActiveSupport::TestCase
     @view = ActionView::Base.new(ActionController::Base.view_paths, {})
     assert_equal "foobar", @view.render(:file => "test/scoped_array_translation")
   end
+  
+  def test_translate_does_not_mark_plain_text_as_safe_html
+    I18n.expects(:translate).with("hello", :raise => true).returns("Hello World")
+    assert_equal false, translate("hello").html_safe?
+  end
+
+  def test_translate_marks_translations_named_html_as_safe_html
+    I18n.expects(:translate).with("html", :raise => true).returns("<a>Hello World</a>")
+    assert translate("html").html_safe?
+  end
+
+  def test_translate_marks_translations_with_a_html_suffix_as_safe_html
+    I18n.expects(:translate).with("hello_html", :raise => true).returns("<a>Hello World</a>")
+    assert translate("hello_html").html_safe?
+  end
 end
-- 
1.6.6.1

