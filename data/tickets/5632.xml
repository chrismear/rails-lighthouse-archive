<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-19T09:28:17+00:00</created-at>
  <creator-id type="integer">102535</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5632</number>
  <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
  <updated-at type="datetime">2011-03-26T02:46:52+00:00</updated-at>
  <user-id type="integer">142823</user-id>
  <version type="integer">16</version>
  <user-name>bingbing</user-name>
  <creator-name>Aaron Aberg</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
  <priority-name>Low</priority-name>
  <original-body>Background:
`validates_associated` allows you to validate nested objects in a model. When one of those nested objects is invalid, `validates_associated` invalidated the parent object and adds an error to the list of errors stating that &quot;X is invalid&quot;.

The problem is that `validates_associated` doesn't provide a way to prevent this behavior. Here is an example for why this an issue:

I have a `Customer` which is a `User` which is a `Person`. If the `Person` object is invalid (The user forgot to enter a first name for example) You get a list of errors like this:

&gt; * First Name can't be blank
&gt; * Person is invalid
&gt; * User is invalid
&gt; * Customer is invalid

As a programmer, I know exactly what the problem is and this doesn't confuse me. However, to someone who is just a regular user, this IS VERY confusing. What I propose is that `validates_associated` have a new parameter that we could pass to it that prevents these `X is invalid` errors from showing up. Something like one of these options:

@@@ ruby
  # option 1
  validates_associated :user, :message =&gt; :ignore
  # option 2
  validates_associated :user, :message =&gt; false
  # option 3
  validates_associated :user, :message =&gt; nil
  # option 4
  validates_associated :user, :reject_generic_error =&gt; true
@@@</original-body>
  <latest-body>Background:
`validates_associated` allows you to validate nested objects in a model. When one of those nested objects is invalid, `validates_associated` invalidated the parent object and adds an error to the list of errors stating that &quot;X is invalid&quot;.

The problem is that `validates_associated` doesn't provide a way to prevent this behavior. Here is an example for why this an issue:

I have a `Customer` which is a `User` which is a `Person`. If the `Person` object is invalid (The user forgot to enter a first name for example) You get a list of errors like this:

&gt; * First Name can't be blank
&gt; * Person is invalid
&gt; * User is invalid
&gt; * Customer is invalid

As a programmer, I know exactly what the problem is and this doesn't confuse me. However, to someone who is just a regular user, this IS VERY confusing. What I propose is that `validates_associated` have a new parameter that we could pass to it that prevents these `X is invalid` errors from showing up. Something like one of these options:

@@@ ruby
  # option 1
  validates_associated :user, :message =&gt; :ignore
  # option 2
  validates_associated :user, :message =&gt; false
  # option 3
  validates_associated :user, :message =&gt; nil
  # option 4
  validates_associated :user, :reject_generic_error =&gt; true
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Background:&lt;br&gt;
&lt;code&gt;validates_associated&lt;/code&gt; allows you to validate nested
objects in a model. When one of those nested objects is invalid,
&lt;code&gt;validates_associated&lt;/code&gt; invalidated the parent object and
adds an error to the list of errors stating that &quot;X is
invalid&quot;.&lt;/p&gt;
&lt;p&gt;The problem is that &lt;code&gt;validates_associated&lt;/code&gt; doesn't
provide a way to prevent this behavior. Here is an example for why
this an issue:&lt;/p&gt;
&lt;p&gt;I have a &lt;code&gt;Customer&lt;/code&gt; which is a &lt;code&gt;User&lt;/code&gt;
which is a &lt;code&gt;Person&lt;/code&gt;. If the &lt;code&gt;Person&lt;/code&gt; object
is invalid (The user forgot to enter a first name for example) You
get a list of errors like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;First Name can't be blank&lt;/li&gt;
&lt;li&gt;Person is invalid&lt;/li&gt;
&lt;li&gt;User is invalid&lt;/li&gt;
&lt;li&gt;Customer is invalid&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a programmer, I know exactly what the problem is and this
doesn't confuse me. However, to someone who is just a regular user,
this IS VERY confusing. What I propose is that
&lt;code&gt;validates_associated&lt;/code&gt; have a new parameter that we
could pass to it that prevents these &lt;code&gt;X is invalid&lt;/code&gt;
errors from showing up. Something like one of these options:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  # option 1
  validates_associated :user, :message =&amp;gt; :ignore
  # option 2
  validates_associated :user, :message =&amp;gt; false
  # option 3
  validates_associated :user, :message =&amp;gt; nil
  # option 4
  validates_associated :user, :reject_generic_error =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Background:
`validates_associated` allows you to validate nested objects in a model. When one of those nested objects is invalid, `validates_associated` invalidated the parent object and adds an error to the list of errors stating that &quot;X is invalid&quot;.

The problem is that `validates_associated` doesn't provide a way to prevent this behavior. Here is an example for why this an issue:

I have a `Customer` which is a `User` which is a `Person`. If the `Person` object is invalid (The user forgot to enter a first name for example) You get a list of errors like this:

&gt; * First Name can't be blank
&gt; * Person is invalid
&gt; * User is invalid
&gt; * Customer is invalid

As a programmer, I know exactly what the problem is and this doesn't confuse me. However, to someone who is just a regular user, this IS VERY confusing. What I propose is that `validates_associated` have a new parameter that we could pass to it that prevents these `X is invalid` errors from showing up. Something like one of these options:

@@@ ruby
  # option 1
  validates_associated :user, :message =&gt; :ignore
  # option 2
  validates_associated :user, :message =&gt; false
  # option 3
  validates_associated :user, :message =&gt; nil
  # option 4
  validates_associated :user, :reject_generic_error =&gt; true
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Background:&lt;br&gt;
&lt;code&gt;validates_associated&lt;/code&gt; allows you to validate nested
objects in a model. When one of those nested objects is invalid,
&lt;code&gt;validates_associated&lt;/code&gt; invalidated the parent object and
adds an error to the list of errors stating that &quot;X is
invalid&quot;.&lt;/p&gt;
&lt;p&gt;The problem is that &lt;code&gt;validates_associated&lt;/code&gt; doesn't
provide a way to prevent this behavior. Here is an example for why
this an issue:&lt;/p&gt;
&lt;p&gt;I have a &lt;code&gt;Customer&lt;/code&gt; which is a &lt;code&gt;User&lt;/code&gt;
which is a &lt;code&gt;Person&lt;/code&gt;. If the &lt;code&gt;Person&lt;/code&gt; object
is invalid (The user forgot to enter a first name for example) You
get a list of errors like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;First Name can't be blank&lt;/li&gt;
&lt;li&gt;Person is invalid&lt;/li&gt;
&lt;li&gt;User is invalid&lt;/li&gt;
&lt;li&gt;Customer is invalid&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a programmer, I know exactly what the problem is and this
doesn't confuse me. However, to someone who is just a regular user,
this IS VERY confusing. What I propose is that
&lt;code&gt;validates_associated&lt;/code&gt; have a new parameter that we
could pass to it that prevents these &lt;code&gt;X is invalid&lt;/code&gt;
errors from showing up. Something like one of these options:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  # option 1
  validates_associated :user, :message =&amp;gt; :ignore
  # option 2
  validates_associated :user, :message =&amp;gt; false
  # option 3
  validates_associated :user, :message =&amp;gt; nil
  # option 4
  validates_associated :user, :reject_generic_error =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-14T09:20:42+01:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_associated</tag>
      <title>validates_associated should be allowed to not create an error</title>
      <updated-at type="datetime">2010-09-14T09:20:46+01:00</updated-at>
      <user-id type="integer">102535</user-id>
      <version type="integer">1</version>
      <user-name>Aaron Aberg</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Currently, I am using a work around to get the behavior I want:

@@@ ruby
class SomeModel &lt; ActiveRecord::Base
  has_one :singular_model
  has_many :plural_models

  validates_associated :singular_model
  validates_associated :plural_models

  def after_validation
    # Skip errors that won't be useful to the end user
    filtered_errors = self.errors.reject{ |err| %{ singular_model plural_models }.include?(err.first) }
    # this changes the field name from customer.user.person.first_name
    # to: First name
    filtered_errors.collect{ |err|
      if err[0] =~ /(.+\.)?(.+)$/
        err[0] = $2.titleize
      end
      err
    }
    self.errors.clear
    filtered_errors.each { |err| self.errors.add(*err) }
  end
end
@@@

The problem with this though, is that you have to put this method in every class that uses `validates_associated`</body>
      <body-html>&lt;div&gt;&lt;p&gt;Currently, I am using a work around to get the behavior I
want:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class SomeModel &amp;lt; ActiveRecord::Base
  has_one :singular_model
  has_many :plural_models

  validates_associated :singular_model
  validates_associated :plural_models

  def after_validation
    # Skip errors that won't be useful to the end user
    filtered_errors = self.errors.reject{ |err| %{ singular_model plural_models }.include?(err.first) }
    # this changes the field name from customer.user.person.first_name
    # to: First name
    filtered_errors.collect{ |err|
      if err[0] =~ /(.+\.)?(.+)$/
        err[0] = $2.titleize
      end
      err
    }
    self.errors.clear
    filtered_errors.each { |err| self.errors.add(*err) }
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem with this though, is that you have to put this
method in every class that uses
&lt;code&gt;validates_associated&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-14T09:45:09+01:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_associated</tag>
      <title>validates_associated should be allowed to not create an error</title>
      <updated-at type="datetime">2010-09-14T09:45:11+01:00</updated-at>
      <user-id type="integer">102535</user-id>
      <version type="integer">2</version>
      <user-name>Aaron Aberg</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>What do you mean by this? &quot;I have a Customer which is a User which is a Person.&quot; Are you using STI or have you set up `belongs_to` associations between the models? Please paste extracts of the models' code, if you don't mind.</body>
      <body-html>&lt;div&gt;&lt;p&gt;What do you mean by this? &quot;I have a Customer which is a User
which is a Person.&quot; Are you using STI or have you set up
&lt;code&gt;belongs_to&lt;/code&gt; associations between the models? Please
paste extracts of the models' code, if you don't mind.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-23T09:53:04+01:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_associated</tag>
      <title>validates_associated should be allowed to not create an error</title>
      <updated-at type="datetime">2010-09-23T09:53:05+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">3</version>
      <user-name>David Trasbo</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;christian louboutin shoes&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;louboutin shoes&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;christian louboutin heels&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;louboutin heels&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;yves saint laurent shoes&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;yves saint Laurent heels&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;fendi shoes&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;fendi heels&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;jimmy choo shoes&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;jimmy choo heels&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;manolo blahnik shoes&lt;/a&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;manalo blahnik heels&lt;/a&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;christian louboutin
shoes&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;louboutin shoes&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;christian louboutin
heels&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;louboutin heels&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;yves saint laurent
shoes&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;yves saint Laurent
heels&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;fendi shoes&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;fendi heels&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;jimmy choo shoes&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;jimmy choo heels&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;manolo blahnik shoes&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.whatsheshops.com&quot;&gt;manalo blahnik heels&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-23T10:32:04+01:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_associated</tag>
      <title>validates_associated should be allowed to not create an error</title>
      <updated-at type="datetime">2010-09-23T10:59:31+01:00</updated-at>
      <user-id type="integer">117086</user-id>
      <version type="integer">4</version>
      <user-name>manolo blahnik shoes</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi David,
Here are the steps to produce this (from prompt):

@@@ bash
rails nested
cd nested
script/generate scaffold user login:string password:string
script/generate model person first_name:string last_name:string person_role_id:integer person_role_type:string
script/generate model phone_number person_id:integer number:string
@@@

edit the migrations:

@@@ ruby
class CreateUsers &lt; ActiveRecord::Migration
  def self.up
    create_table :users do |t|
      t.string :login, :null =&gt; false
      t.string :password, :null =&gt; false
      t.timestamps
    end
  end
  def self.down
    drop_table :users
  end
end

class CreatePeople &lt; ActiveRecord::Migration
  def self.up
    create_table :people do |t|
      t.string :first_name, :null =&gt; false
      t.string :last_name, :null =&gt; false
      t.integer :person_role_id, :null =&gt; false 
      t.string :person_role_type, :null =&gt; false 
      t.timestamps
    end
  end
  def self.down
    drop_table :people
  end
end

class CreatePhoneNumbers &lt; ActiveRecord::Migration
  def self.up
    create_table :phone_numbers do |t|
      t.integer :person_id, :null =&gt; false
      t.string :number, :null =&gt; false
      t.timestamps
    end
  end
  def self.down
    drop_table :phone_numbers
  end
end
@@@

migrate:

@@@ bash
rake db:migrate
@@@

edit your models:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_one :person, :as =&gt; :person_role, :dependent =&gt; :destroy
  accepts_nested_attributes_for :person, :allow_destroy =&gt; :true
  validates_associated :person # here it would be great to have something like , :ignore_generic_error =&gt; true
  validates_presence_of :login
  validates_presence_of :password
end
class Person &lt; ActiveRecord::Base
  belongs_to :person_role, :polymorphic =&gt; true
  has_many :phone_numbers
  accepts_nested_attributes_for :phone_numbers, :allow_destroy =&gt; :true
  validates_associated :phone_numbers # here it would be great to have something like , :ignore_generic_error =&gt; true
  validates_presence_of :first_name
  validates_presence_of :last_name
end
class PhoneNumber &lt; ActiveRecord::Base
  belongs_to :person
  validates_presence_of :person_id
  validates_presence_of :number
end
@@@

edit your users_controller.rb#new:

@@@ ruby
class UsersController &lt; ApplicationController
  #ignore all other methods and just edit new.
  def new
    @user = User.new
    @user.person = Person.new
    @user.person.phone_numbers &lt;&lt; PhoneNumber.new
    
    respond_to do |format|
      format.html # new.html.erb
      format.xml  { render :xml =&gt; @user }
    end
  end
end
@@@

edit your users/new.html.erb:

@@@ ruby
&lt;h1&gt;New user&lt;/h1&gt;
&lt;% form_for(@user) do |f| %&gt;
  &lt;%= f.error_messages %&gt;
  &lt;% f.fields_for :person do |p| %&gt;
    &lt;p&gt;
      &lt;%= p.label :first_name %&gt;&lt;br /&gt;
      &lt;%= p.text_field :first_name %&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;%= p.label :last_name %&gt;&lt;br /&gt;
      &lt;%= p.text_field :last_name %&gt;
    &lt;/p&gt;
    &lt;% p.fields_for :phone_numbers do |ph| %&gt;
      &lt;p&gt;
        &lt;%= ph.label :number %&gt;&lt;br /&gt;
        &lt;%= ph.text_field :number %&gt;
      &lt;/p&gt;
    &lt;% end %&gt;
  &lt;% end %&gt;
  &lt;p&gt;
    &lt;%= f.label :login %&gt;&lt;br /&gt;
    &lt;%= f.text_field :login %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.label :password %&gt;&lt;br /&gt;
    &lt;%= f.text_field :password %&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;%= f.submit 'Create' %&gt;
  &lt;/p&gt;
&lt;% end %&gt;
&lt;%= link_to 'Back', users_path %&gt;
@@@

Start up the server and go to: http://localhost:3000/users/new. Click the 'Create' button without entering anything in the fields. You will get the following list of errors:

* Person can't be blank
* Number can't be blank
* Phone numbers is invalid
* First name can't be blank
* Last name can't be blank
* Person is invalid
* Login can't be blank
* Password can't be blank

You'll notice that there are two generic errors: 'Person is invalid' and 'Phone numbers is invalid'. These aren't very useful and they are generated when you use the `validates_associated` method. I think by default, they SHOULDN'T show up but that's my opinion. I think `validates_associated` needs a parameter that can turn off these extra errors.

Hopefully this explains what I'm talking about.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi David,&lt;br&gt;
Here are the steps to produce this (from prompt):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash&quot;&gt;rails nested
cd nested
script/generate scaffold user login:string password:string
script/generate model person first_name:string last_name:string person_role_id:integer person_role_type:string
script/generate model phone_number person_id:integer number:string&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;edit the migrations:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class CreateUsers &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :users do |t|
      t.string :login, :null =&amp;gt; false
      t.string :password, :null =&amp;gt; false
      t.timestamps
    end
  end
  def self.down
    drop_table :users
  end
end

class CreatePeople &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :people do |t|
      t.string :first_name, :null =&amp;gt; false
      t.string :last_name, :null =&amp;gt; false
      t.integer :person_role_id, :null =&amp;gt; false 
      t.string :person_role_type, :null =&amp;gt; false 
      t.timestamps
    end
  end
  def self.down
    drop_table :people
  end
end

class CreatePhoneNumbers &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :phone_numbers do |t|
      t.integer :person_id, :null =&amp;gt; false
      t.string :number, :null =&amp;gt; false
      t.timestamps
    end
  end
  def self.down
    drop_table :phone_numbers
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;migrate:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash&quot;&gt;rake db:migrate&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;edit your models:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_one :person, :as =&amp;gt; :person_role, :dependent =&amp;gt; :destroy
  accepts_nested_attributes_for :person, :allow_destroy =&amp;gt; :true
  validates_associated :person # here it would be great to have something like , :ignore_generic_error =&amp;gt; true
  validates_presence_of :login
  validates_presence_of :password
end
class Person &amp;lt; ActiveRecord::Base
  belongs_to :person_role, :polymorphic =&amp;gt; true
  has_many :phone_numbers
  accepts_nested_attributes_for :phone_numbers, :allow_destroy =&amp;gt; :true
  validates_associated :phone_numbers # here it would be great to have something like , :ignore_generic_error =&amp;gt; true
  validates_presence_of :first_name
  validates_presence_of :last_name
end
class PhoneNumber &amp;lt; ActiveRecord::Base
  belongs_to :person
  validates_presence_of :person_id
  validates_presence_of :number
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;edit your users_controller.rb#new:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class UsersController &amp;lt; ApplicationController
  #ignore all other methods and just edit new.
  def new
    @user = User.new
    @user.person = Person.new
    @user.person.phone_numbers &amp;lt;&amp;lt; PhoneNumber.new
    
    respond_to do |format|
      format.html # new.html.erb
      format.xml  { render :xml =&amp;gt; @user }
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;edit your users/new.html.erb:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;lt;h1&amp;gt;New user&amp;lt;/h1&amp;gt;
&amp;lt;% form_for(@user) do |f| %&amp;gt;
  &amp;lt;%= f.error_messages %&amp;gt;
  &amp;lt;% f.fields_for :person do |p| %&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;%= p.label :first_name %&amp;gt;&amp;lt;br /&amp;gt;
      &amp;lt;%= p.text_field :first_name %&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;%= p.label :last_name %&amp;gt;&amp;lt;br /&amp;gt;
      &amp;lt;%= p.text_field :last_name %&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;% p.fields_for :phone_numbers do |ph| %&amp;gt;
      &amp;lt;p&amp;gt;
        &amp;lt;%= ph.label :number %&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;%= ph.text_field :number %&amp;gt;
      &amp;lt;/p&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;% end %&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :login %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_field :login %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :password %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_field :password %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.submit 'Create' %&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;%= link_to 'Back', users_path %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Start up the server and go to: &lt;a href=
&quot;http://localhost:3000/users/new&quot;&gt;http://localhost:3000/users/new&lt;/a&gt;.
Click the 'Create' button without entering anything in the fields.
You will get the following list of errors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Person can't be blank&lt;/li&gt;
&lt;li&gt;Number can't be blank&lt;/li&gt;
&lt;li&gt;Phone numbers is invalid&lt;/li&gt;
&lt;li&gt;First name can't be blank&lt;/li&gt;
&lt;li&gt;Last name can't be blank&lt;/li&gt;
&lt;li&gt;Person is invalid&lt;/li&gt;
&lt;li&gt;Login can't be blank&lt;/li&gt;
&lt;li&gt;Password can't be blank&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You'll notice that there are two generic errors: 'Person is
invalid' and 'Phone numbers is invalid'. These aren't very useful
and they are generated when you use the
&lt;code&gt;validates_associated&lt;/code&gt; method. I think by default, they
SHOULDN'T show up but that's my opinion. I think
&lt;code&gt;validates_associated&lt;/code&gt; needs a parameter that can turn
off these extra errors.&lt;/p&gt;
&lt;p&gt;Hopefully this explains what I'm talking about.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-24T02:13:47+01:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_associated</tag>
      <title>validates_associated should be allowed to not create an error</title>
      <updated-at type="datetime">2010-09-24T02:13:50+01:00</updated-at>
      <user-id type="integer">102535</user-id>
      <version type="integer">5</version>
      <user-name>Aaron Aberg</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-24T02:17:13+01:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- 
:title: validates_associated should be allowed to not create an error
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_associated</tag>
      <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
      <updated-at type="datetime">2010-09-24T02:17:15+01:00</updated-at>
      <user-id type="integer">102535</user-id>
      <version type="integer">6</version>
      <user-name>Aaron Aberg</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, some additional information:

I did some research. The generic error gets added in `AssociatedValidator.validate_each` method.
`/activerecord/lib/active_record/validations/associated.rb:`

@@@ ruby
def validate_each(record, attribute, value)
  return if (value.is_a?(Array) ? value : [value]).collect{ |r| r.nil? || r.valid? }.all?
  record.errors.add(attribute, :invalid, options.merge(:value =&gt; value))
end
@@@

This method is passed the associated records and determines if there were any errors in those records. If there weren't any it returns right then and there. If there was at least one error, a generic `X is invalid` error is added. I figured out that this error is important because its the ONLY way that you can determine if the parent record is valid or not based on its nested associations.

To fix this, we need to do something like:

`/activerecord/lib/active_record/validations/associated.rb:`

@@@ ruby
# TODO: expose the @associated_are_valid variable somehow so the record.valid? method
# so that it can determine whether its valid or not based on its nested associations.
def validate_each(record, attribute, value)
  # lets assume everything is ok for now.
  @associated_are_valid = true

  return if (value.is_a?(Array) ? value : [value]).collect{ |r| r.nil? || r.valid? }.all?
        
  # ok, there was an error so regardless whether we want a generic error or not
  # we'll set this to false and check it later to determine if this record
  # and its nested associations are valid.
  @associated_are_valid = false
  
  if !options[:ignore_generic_error]
    record.errors.add(attribute, :invalid, options.merge(:value =&gt; value))
  end
end
@@@

`/activerecord/lib/active_record/validations.rb:`

@@@ ruby
def valid?(context = nil)
  context ||= (new_record? ? :create : :update)
  output = super(context)

  # TODO: Find out if any associated models have errors. If they do,
  # this method should return false even if errors.empty? IS true.
  # errors.empty? COULD be true if we told this record to not add a
  # generic error when one of its nested associations become invalid.

  errors.empty? &amp;&amp; output
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, some additional information:&lt;/p&gt;
&lt;p&gt;I did some research. The generic error gets added in
&lt;code&gt;AssociatedValidator.validate_each&lt;/code&gt; method.&lt;br&gt;
&lt;code&gt;/activerecord/lib/active_record/validations/associated.rb:&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def validate_each(record, attribute, value)
  return if (value.is_a?(Array) ? value : [value]).collect{ |r| r.nil? || r.valid? }.all?
  record.errors.add(attribute, :invalid, options.merge(:value =&amp;gt; value))
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This method is passed the associated records and determines if
there were any errors in those records. If there weren't any it
returns right then and there. If there was at least one error, a
generic &lt;code&gt;X is invalid&lt;/code&gt; error is added. I figured out
that this error is important because its the ONLY way that you can
determine if the parent record is valid or not based on its nested
associations.&lt;/p&gt;
&lt;p&gt;To fix this, we need to do something like:&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;/activerecord/lib/active_record/validations/associated.rb:&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;# TODO: expose the @associated_are_valid variable somehow so the record.valid? method
# so that it can determine whether its valid or not based on its nested associations.
def validate_each(record, attribute, value)
  # lets assume everything is ok for now.
  @associated_are_valid = true

  return if (value.is_a?(Array) ? value : [value]).collect{ |r| r.nil? || r.valid? }.all?
        
  # ok, there was an error so regardless whether we want a generic error or not
  # we'll set this to false and check it later to determine if this record
  # and its nested associations are valid.
  @associated_are_valid = false
  
  if !options[:ignore_generic_error]
    record.errors.add(attribute, :invalid, options.merge(:value =&amp;gt; value))
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;/activerecord/lib/active_record/validations.rb:&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def valid?(context = nil)
  context ||= (new_record? ? :create : :update)
  output = super(context)

  # TODO: Find out if any associated models have errors. If they do,
  # this method should return false even if errors.empty? IS true.
  # errors.empty? COULD be true if we told this record to not add a
  # generic error when one of its nested associations become invalid.

  errors.empty? &amp;amp;&amp;amp; output
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-25T11:02:34+01:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_associated</tag>
      <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
      <updated-at type="datetime">2010-09-25T11:02:36+01:00</updated-at>
      <user-id type="integer">102535</user-id>
      <version type="integer">7</version>
      <user-name>Aaron Aberg</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Aaron,

I think you should submit a patch for this, according to the guidelines outlined here: https://rails.lighthouseapp.com/projects/8994/sending-patches

As it's not a bug per se, and certainly not very critical I don't think you'll be able to get anyone else to do it. It's a &quot;fix it yourself or leave it&quot; ticket, as with many others in here.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Aaron,&lt;/p&gt;
&lt;p&gt;I think you should submit a patch for this, according to the
guidelines outlined here: &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/sending-patches&quot;&gt;https://rails.lighthouseapp.com/projects/8994/sending-patches&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As it's not a bug per se, and certainly not very critical I
don't think you'll be able to get anyone else to do it. It's a &quot;fix
it yourself or leave it&quot; ticket, as with many others in here.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-25T17:55:46+01:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_associated</tag>
      <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
      <updated-at type="datetime">2010-09-25T17:55:51+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">8</version>
      <user-name>David Trasbo</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi David,

Yeah I saw the &quot;we don't do feature requests&quot; part under contributing to rails. I realized last night that this was a feature request and not a bug. I've already been working on a patch. Thanks for your help.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi David,&lt;/p&gt;
&lt;p&gt;Yeah I saw the &quot;we don't do feature requests&quot; part under
contributing to rails. I realized last night that this was a
feature request and not a bug. I've already been working on a
patch. Thanks for your help.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-25T18:45:04+01:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>validates_associated</tag>
      <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
      <updated-at type="datetime">2010-09-25T18:45:06+01:00</updated-at>
      <user-id type="integer">102535</user-id>
      <version type="integer">9</version>
      <user-name>Aaron Aberg</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-07T16:56:36+00:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: validates_associated
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
      <updated-at type="datetime">2010-11-07T16:56:37+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">11</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-09T00:32:03+00:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
      <updated-at type="datetime">2011-02-09T00:42:29+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">12</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-09T00:32:03+00:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
      <updated-at type="datetime">2011-02-09T00:42:15+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">13</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-16T07:09:52+00:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
      <updated-at type="datetime">2011-02-16T07:20:11+00:00</updated-at>
      <user-id type="integer">137258</user-id>
      <version type="integer">14</version>
      <user-name>fgfhnmn</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Today, kids as babyish as Ashcan School or nine name-conscious and trend-alert, puma ducati buying at for solid garments rather than just throwing on what&#8217;s pure. Here are just some of the brands and trends your children hungered over 2011. The 80&#8242;s Are Back. You may have noticed a trend this year for evisu jeans, supra shoes, leggings petticoats, oversized tees, and big &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; shoes. This is a look that appeals to babies girls-it&#8217;s quirky and yet smart at the same time.
&lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; with success sets the charm for manner, lifestyle and gambols. This has been believed to serve for an ideal cross flight simulator. This has been fine-looking by most jocks and the Speed Cat is an old name for the industriousness which made &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; gain millions with this business. With many people converting more wellness conscious in time, a lot wants also to commit on a good pair of cross trainers. These are very indestructible and forward-looking just like the real carrying out of a real &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt;. It consumes been systematically on the forefront of design and carrying out when it pertains comfort and style commingled.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Today, kids as babyish as Ashcan School or nine name-conscious
and trend-alert, puma ducati buying at for solid garments rather
than just throwing on what&amp;#8217;s pure. Here are just some of the
brands and trends your children hungered over 2011. The 80&amp;#8242;s
Are Back. You may have noticed a trend this year for evisu jeans,
supra shoes, leggings petticoats, oversized tees, and big &lt;a href=
&quot;http:&quot;&gt;puma speed cat shoes. This is a look that appeals to babies
girls-it&amp;#8217;s quirky and yet smart at the same time.&lt;br&gt;
&lt;a href=&quot;http:&quot;&gt;Puma future cat with success sets the charm for
manner, lifestyle and gambols. This has been believed to serve for
an ideal cross flight simulator. This has been fine-looking by most
jocks and the Speed Cat is an old name for the industriousness
which made &lt;a href=&quot;http:&quot;&gt;Puma shoes gain millions with this
business. With many people converting more wellness conscious in
time, a lot wants also to commit on a good pair of cross trainers.
These are very indestructible and forward-looking just like the
real carrying out of a real &lt;a href=&quot;http:&quot;&gt;Puma future cat. It
consumes been systematically on the forefront of design and
carrying out when it pertains comfort and style commingled.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T01:20:41+00:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
      <updated-at type="datetime">2011-02-19T09:28:17+00:00</updated-at>
      <user-id type="integer">137759</user-id>
      <version type="integer">15</version>
      <user-name>mklo</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton
watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-26T02:15:18+00:00</created-at>
      <creator-id type="integer">102535</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5632</number>
      <permalink>validates_associated-should-be-allowed-to-not-create-an-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>validates_associated should be allowed to filter out the generic error for nested models.</title>
      <updated-at type="datetime">2011-03-26T02:46:52+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">16</version>
      <user-name>bingbing</user-name>
      <creator-name>Aaron Aberg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5632</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
