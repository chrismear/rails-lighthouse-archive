<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-03-26T16:10:11+00:00</created-at>
  <creator-id type="integer">74474</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4275</number>
  <permalink>scopes-should-not-be-used-when-association-has-finder_sql</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>association_collection finder_sql has_many with_scope</tag>
  <title>Scopes should not be used when association has :finder_sql</title>
  <updated-at type="datetime">2011-02-02T17:51:24+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">4</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Nick @ Reenhanced</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4275</url>
  <priority-name>Low</priority-name>
  <original-body>Compatibility with legacy data requires me to use a :finder_sql

It appears that when the finder_sql is used however, the normal methods you can call on associations are broken.

A controller requires a limit of 3 items from an association, attempting to use #all(:limit =&gt; 3) causes the issue below.

For now, I've worked around this by treating the association as an Enumerable and use #take(3) instead.

@@@ ruby
class Company &lt; ActiveRecord::Base
  has_many :stats, :finder_sql =&gt; 'SELECT from_table.* 
                        FROM gs_info from_table, gs_link link 
                        WHERE link.id_2 = \'#{id}\' AND link.link_type IN (\'S\')
                        AND link.id_1 = from_table.e_id',
                   :class_name =&gt; 'GsInfo'
end
@@@

@@@ shell
&gt;&gt; Company.find(51).stats.all(:limit =&gt; 3)
ActiveRecord::StatementInvalid: Mysql::Error: Operand should contain 1 column(s): SELECT * FROM `gs_info` WHERE (SELECT from_table.* 
                        FROM gs_info from_table, gs_link link 
                        WHERE link.id_2 = '51' AND link.link_type IN ('S')
                        AND link.id_1 = from_table.e_id) LIMIT 3
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:219:in `log'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:323:in `execute'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:608:in `select'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all_without_query_cache'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:615:in `find'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:635:in `all'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing_without_paginate'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing_without_paginate'
	from /opt/local/lib/ruby/gems/1.8/gems/mislav-will_paginate-2.3.11/lib/will_paginate/finder.rb:170:in `method_missing'
	from (irb):11
	from :0
@@@</original-body>
  <latest-body>Compatibility with legacy data requires me to use a :finder_sql

It appears that when the finder_sql is used however, the normal methods you can call on associations are broken.

A controller requires a limit of 3 items from an association, attempting to use #all(:limit =&gt; 3) causes the issue below.

For now, I've worked around this by treating the association as an Enumerable and use #take(3) instead.

@@@ ruby
class Company &lt; ActiveRecord::Base
  has_many :stats, :finder_sql =&gt; 'SELECT from_table.* 
                        FROM gs_info from_table, gs_link link 
                        WHERE link.id_2 = \'#{id}\' AND link.link_type IN (\'S\')
                        AND link.id_1 = from_table.e_id',
                   :class_name =&gt; 'GsInfo'
end
@@@

@@@ shell
&gt;&gt; Company.find(51).stats.all(:limit =&gt; 3)
ActiveRecord::StatementInvalid: Mysql::Error: Operand should contain 1 column(s): SELECT * FROM `gs_info` WHERE (SELECT from_table.* 
                        FROM gs_info from_table, gs_link link 
                        WHERE link.id_2 = '51' AND link.link_type IN ('S')
                        AND link.id_1 = from_table.e_id) LIMIT 3
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:219:in `log'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:323:in `execute'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:608:in `select'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all_without_query_cache'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:615:in `find'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:635:in `all'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing_without_paginate'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing_without_paginate'
	from /opt/local/lib/ruby/gems/1.8/gems/mislav-will_paginate-2.3.11/lib/will_paginate/finder.rb:170:in `method_missing'
	from (irb):11
	from :0
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Compatibility with legacy data requires me to use a
:finder_sql&lt;/p&gt;
&lt;p&gt;It appears that when the finder_sql is used however, the normal
methods you can call on associations are broken.&lt;/p&gt;
&lt;p&gt;A controller requires a limit of 3 items from an association,
attempting to use #all(:limit =&amp;gt; 3) causes the issue below.&lt;/p&gt;
&lt;p&gt;For now, I've worked around this by treating the association as
an Enumerable and use #take(3) instead.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Company &amp;lt; ActiveRecord::Base
  has_many :stats, :finder_sql =&amp;gt; 'SELECT from_table.* 
                        FROM gs_info from_table, gs_link link 
                        WHERE link.id_2 = \'#{id}\' AND link.link_type IN (\'S\')
                        AND link.id_1 = from_table.e_id',
                   :class_name =&amp;gt; 'GsInfo'
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;shell&quot;&gt;&amp;gt;&amp;gt; Company.find(51).stats.all(:limit =&amp;gt; 3)
ActiveRecord::StatementInvalid: Mysql::Error: Operand should contain 1 column(s): SELECT * FROM `gs_info` WHERE (SELECT from_table.* 
                        FROM gs_info from_table, gs_link link 
                        WHERE link.id_2 = '51' AND link.link_type IN ('S')
                        AND link.id_1 = from_table.e_id) LIMIT 3
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:219:in `log'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:323:in `execute'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:608:in `select'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all_without_query_cache'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:615:in `find'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:635:in `all'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing_without_paginate'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing_without_paginate'
    from /opt/local/lib/ruby/gems/1.8/gems/mislav-will_paginate-2.3.11/lib/will_paginate/finder.rb:170:in `method_missing'
    from (irb):11
    from :0&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Compatibility with legacy data requires me to use a :finder_sql

It appears that when the finder_sql is used however, the normal methods you can call on associations are broken.

A controller requires a limit of 3 items from an association, attempting to use #all(:limit =&gt; 3) causes the issue below.

For now, I've worked around this by treating the association as an Enumerable and use #take(3) instead.

@@@ ruby
class Company &lt; ActiveRecord::Base
  has_many :stats, :finder_sql =&gt; 'SELECT from_table.* 
                        FROM gs_info from_table, gs_link link 
                        WHERE link.id_2 = \'#{id}\' AND link.link_type IN (\'S\')
                        AND link.id_1 = from_table.e_id',
                   :class_name =&gt; 'GsInfo'
end
@@@

@@@ shell
&gt;&gt; Company.find(51).stats.all(:limit =&gt; 3)
ActiveRecord::StatementInvalid: Mysql::Error: Operand should contain 1 column(s): SELECT * FROM `gs_info` WHERE (SELECT from_table.* 
                        FROM gs_info from_table, gs_link link 
                        WHERE link.id_2 = '51' AND link.link_type IN ('S')
                        AND link.id_1 = from_table.e_id) LIMIT 3
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:219:in `log'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:323:in `execute'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:608:in `select'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all_without_query_cache'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:615:in `find'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:635:in `all'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing_without_paginate'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
	from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing_without_paginate'
	from /opt/local/lib/ruby/gems/1.8/gems/mislav-will_paginate-2.3.11/lib/will_paginate/finder.rb:170:in `method_missing'
	from (irb):11
	from :0
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Compatibility with legacy data requires me to use a
:finder_sql&lt;/p&gt;
&lt;p&gt;It appears that when the finder_sql is used however, the normal
methods you can call on associations are broken.&lt;/p&gt;
&lt;p&gt;A controller requires a limit of 3 items from an association,
attempting to use #all(:limit =&amp;gt; 3) causes the issue below.&lt;/p&gt;
&lt;p&gt;For now, I've worked around this by treating the association as
an Enumerable and use #take(3) instead.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Company &amp;lt; ActiveRecord::Base
  has_many :stats, :finder_sql =&amp;gt; 'SELECT from_table.* 
                        FROM gs_info from_table, gs_link link 
                        WHERE link.id_2 = \'#{id}\' AND link.link_type IN (\'S\')
                        AND link.id_1 = from_table.e_id',
                   :class_name =&amp;gt; 'GsInfo'
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;shell&quot;&gt;&amp;gt;&amp;gt; Company.find(51).stats.all(:limit =&amp;gt; 3)
ActiveRecord::StatementInvalid: Mysql::Error: Operand should contain 1 column(s): SELECT * FROM `gs_info` WHERE (SELECT from_table.* 
                        FROM gs_info from_table, gs_link link 
                        WHERE link.id_2 = '51' AND link.link_type IN ('S')
                        AND link.id_1 = from_table.e_id) LIMIT 3
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:219:in `log'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:323:in `execute'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:608:in `select'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all_without_query_cache'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:62:in `select_all'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:661:in `find_by_sql'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:1548:in `find_every'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:615:in `find'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:635:in `all'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `send'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:380:in `method_missing_without_paginate'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/base.rb:2143:in `with_scope'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `send'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
    from /Volumes/RAID/projects/12/vendor/rails/activerecord/lib/active_record/associations/association_collection.rb:376:in `method_missing_without_paginate'
    from /opt/local/lib/ruby/gems/1.8/gems/mislav-will_paginate-2.3.11/lib/will_paginate/finder.rb:170:in `method_missing'
    from (irb):11
    from :0&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-26T16:10:11+00:00</created-at>
      <creator-id type="integer">74474</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4275</number>
      <permalink>scopes-should-not-be-used-when-association-has-finder_sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>association_collection finder_sql has_many with_scope</tag>
      <title>Scopes should not be used when association has :finder_sql</title>
      <updated-at type="datetime">2010-03-26T16:10:12+00:00</updated-at>
      <user-id type="integer">74474</user-id>
      <version type="integer">1</version>
      <user-name>Nick @ Reenhanced</user-name>
      <creator-name>Nick @ Reenhanced</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4275</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Please can you provide a test_case or at least upload a zip with your application.
Thanks for helping.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please can you provide a test_case or at least upload a zip with
your application.&lt;br&gt;
Thanks for helping.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-12T01:12:50+01:00</created-at>
      <creator-id type="integer">74474</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4275</number>
      <permalink>scopes-should-not-be-used-when-association-has-finder_sql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>association_collection finder_sql has_many with_scope</tag>
      <title>Scopes should not be used when association has :finder_sql</title>
      <updated-at type="datetime">2010-04-12T01:12:51+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Nick @ Reenhanced</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4275</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:44:00+00:00</created-at>
      <creator-id type="integer">74474</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4275</number>
      <permalink>scopes-should-not-be-used-when-association-has-finder_sql</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>association_collection finder_sql has_many with_scope</tag>
      <title>Scopes should not be used when association has :finder_sql</title>
      <updated-at type="datetime">2011-02-02T17:50:59+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Nick @ Reenhanced</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4275</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:44:02+00:00</created-at>
      <creator-id type="integer">74474</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4275</number>
      <permalink>scopes-should-not-be-used-when-association-has-finder_sql</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>association_collection finder_sql has_many with_scope</tag>
      <title>Scopes should not be used when association has :finder_sql</title>
      <updated-at type="datetime">2011-02-02T17:51:24+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Nick @ Reenhanced</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4275</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
