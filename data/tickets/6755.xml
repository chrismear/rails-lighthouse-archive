<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-28T23:39:54+01:00</created-at>
  <creator-id type="integer">147375</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6755</number>
  <permalink>rails-3-errorskey_without_errors-returns-empty-array</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Rails 3: errors[:key_without_errors] returns empty array</title>
  <updated-at type="datetime">2011-04-28T23:39:57+01:00</updated-at>
  <user-id type="integer">147375</user-id>
  <version type="integer">1</version>
  <user-name>weexpectedthis</user-name>
  <creator-name>weexpectedthis</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6755</url>
  <priority-name nil="true"></priority-name>
  <original-body>There is no reason for this to return an array instead of nil.  Makes testing for errors on the object non-intuitive.

With rails 2 in Rspec I can write:

obj.errors.on(:key_without_errors).should be_nil

With rails 3 in Rspec I have to write the weird notation of:

obj.errors[:key_without_errors].to_a.should be_nil

Can we just return nil instead of an empty array?</original-body>
  <latest-body>There is no reason for this to return an array instead of nil.  Makes testing for errors on the object non-intuitive.

With rails 2 in Rspec I can write:

obj.errors.on(:key_without_errors).should be_nil

With rails 3 in Rspec I have to write the weird notation of:

obj.errors[:key_without_errors].to_a.should be_nil

Can we just return nil instead of an empty array?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;There is no reason for this to return an array instead of nil.
Makes testing for errors on the object non-intuitive.&lt;/p&gt;
&lt;p&gt;With rails 2 in Rspec I can write:&lt;/p&gt;
&lt;p&gt;obj.errors.on(:key_without_errors).should be_nil&lt;/p&gt;
&lt;p&gt;With rails 3 in Rspec I have to write the weird notation of:&lt;/p&gt;
&lt;p&gt;obj.errors[:key_without_errors].to_a.should be_nil&lt;/p&gt;
&lt;p&gt;Can we just return nil instead of an empty array?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There is no reason for this to return an array instead of nil.  Makes testing for errors on the object non-intuitive.

With rails 2 in Rspec I can write:

obj.errors.on(:key_without_errors).should be_nil

With rails 3 in Rspec I have to write the weird notation of:

obj.errors[:key_without_errors].to_a.should be_nil

Can we just return nil instead of an empty array?</body>
      <body-html>&lt;div&gt;&lt;p&gt;There is no reason for this to return an array instead of nil.
Makes testing for errors on the object non-intuitive.&lt;/p&gt;
&lt;p&gt;With rails 2 in Rspec I can write:&lt;/p&gt;
&lt;p&gt;obj.errors.on(:key_without_errors).should be_nil&lt;/p&gt;
&lt;p&gt;With rails 3 in Rspec I have to write the weird notation of:&lt;/p&gt;
&lt;p&gt;obj.errors[:key_without_errors].to_a.should be_nil&lt;/p&gt;
&lt;p&gt;Can we just return nil instead of an empty array?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-28T23:39:54+01:00</created-at>
      <creator-id type="integer">147375</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6755</number>
      <permalink>rails-3-errorskey_without_errors-returns-empty-array</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3: errors[:key_without_errors] returns empty array</title>
      <updated-at type="datetime">2011-04-28T23:39:57+01:00</updated-at>
      <user-id type="integer">147375</user-id>
      <version type="integer">1</version>
      <user-name>weexpectedthis</user-name>
      <creator-name>weexpectedthis</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6755</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
