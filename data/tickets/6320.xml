<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-01-21T02:11:20+00:00</created-at>
  <creator-id type="integer">106122</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6320</number>
  <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>autoload &quot;class cache&quot; &quot;class reloading&quot; sti</tag>
  <title>Autoloading behaves weird when class caching is turned off</title>
  <updated-at type="datetime">2011-03-30T07:47:26+01:00</updated-at>
  <user-id type="integer">143486</user-id>
  <version type="integer">11</version>
  <user-name>myopenid.com (at bobics)</user-name>
  <creator-name>Owen</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
  <priority-name>Low</priority-name>
  <original-body>The algorithm of auto-loading paths in Rails 3 is a bit weird when class caching is turned off. Assuming you add all subdirectories under app/models to the load paths by using the new &quot;config.autoload_paths&quot; setting in config/application.rb:

	config.autoload_paths += Dir[&quot;#{config.root}/app/models/**/&quot;]

And you have a subdirectory under app/models with name class1 and a file under this subdirectory with name class1.rb. When you are referring any classes under this subdirectory in class1.rb, you have to make sure they are in the namespace of Class1. Otherwise Rails will complain about your referred class is not in the namespace of Class1. In more details, if you have a directory structure like this:

	- app
	  - models
	    - class1
	      - class1.rb
	      - class1_reference.rb

When you refer to Class1Reference in Class1, you will get &quot;**Expected app/models/class1/class1_reference.rb to define Class1::Class1Reference**&quot;. If the subdirectory is not named class1, strangely this example will work... Let's take a look at a comparing directory structure:

	- app
	  - models
	    - not_class2
	      - class2.rb
	      - class2_reference.rb

This second example have everything the same as the first one except that the subdirectory name (not_class2) is different from the file name (class2). Surprisingly, this example works as expected. The code of this two examples are available here: https://github.com/jingweno/loading_path_gotchas_in_rails3/tree/master/app/models.</original-body>
  <latest-body>The algorithm of auto-loading paths in Rails 3 is a bit weird when class caching is turned off. Assuming you add all subdirectories under app/models to the load paths by using the new &quot;config.autoload_paths&quot; setting in config/application.rb:

	config.autoload_paths += Dir[&quot;#{config.root}/app/models/**/&quot;]

And you have a subdirectory under app/models with name class1 and a file under this subdirectory with name class1.rb. When you are referring any classes under this subdirectory in class1.rb, you have to make sure they are in the namespace of Class1. Otherwise Rails will complain about your referred class is not in the namespace of Class1. In more details, if you have a directory structure like this:

	- app
	  - models
	    - class1
	      - class1.rb
	      - class1_reference.rb

When you refer to Class1Reference in Class1, you will get &quot;**Expected app/models/class1/class1_reference.rb to define Class1::Class1Reference**&quot;. If the subdirectory is not named class1, strangely this example will work... Let's take a look at a comparing directory structure:

	- app
	  - models
	    - not_class2
	      - class2.rb
	      - class2_reference.rb

This second example have everything the same as the first one except that the subdirectory name (not_class2) is different from the file name (class2). Surprisingly, this example works as expected. The code of this two examples are available here: https://github.com/jingweno/loading_path_gotchas_in_rails3/tree/master/app/models.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The algorithm of auto-loading paths in Rails 3 is a bit weird
when class caching is turned off. Assuming you add all
subdirectories under app/models to the load paths by using the new
&quot;config.autoload_paths&quot; setting in config/application.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;config.autoload_paths += Dir[&quot;#{config.root}/app/models/**/&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And you have a subdirectory under app/models with name class1
and a file under this subdirectory with name class1.rb. When you
are referring any classes under this subdirectory in class1.rb, you
have to make sure they are in the namespace of Class1. Otherwise
Rails will complain about your referred class is not in the
namespace of Class1. In more details, if you have a directory
structure like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- app
  - models
    - class1
      - class1.rb
      - class1_reference.rb&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When you refer to Class1Reference in Class1, you will get
&quot;&lt;strong&gt;Expected app/models/class1/class1_reference.rb to define
Class1::Class1Reference&lt;/strong&gt;&quot;. If the subdirectory is not named
class1, strangely this example will work... Let's take a look at a
comparing directory structure:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- app
  - models
    - not_class2
      - class2.rb
      - class2_reference.rb&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This second example have everything the same as the first one
except that the subdirectory name (not_class2) is different from
the file name (class2). Surprisingly, this example works as
expected. The code of this two examples are available here:
&lt;a href=&quot;https://github.com/jingweno/loading_path_gotchas_in_rails3/tree/master/app/models&quot;&gt;
https://github.com/jingweno/loading_path_gotchas_in_rails3/tree/mas...&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The algorithm of auto-loading paths in Rails 3 is a bit weird when class caching is turned off. Assuming you add all subdirectories under app/models to the load paths by using the new &quot;config.autoload_paths&quot; setting in config/application.rb:

	config.autoload_paths += Dir[&quot;#{config.root}/app/models/**/&quot;]

And you have a subdirectory under app/models with name class1 and a file under this subdirectory with name class1.rb. When you are referring any classes under this subdirectory in class1.rb, you have to make sure they are in the namespace of Class1. Otherwise Rails will complain about your referred class is not in the namespace of Class1. In more details, if you have a directory structure like this:

	- app
	  - models
	    - class1
	      - class1.rb
	      - class1_reference.rb

When you refer to Class1Reference in Class1, you will get &quot;**Expected app/models/class1/class1_reference.rb to define Class1::Class1Reference**&quot;. If the subdirectory is not named class1, strangely this example will work... Let's take a look at a comparing directory structure:

	- app
	  - models
	    - not_class2
	      - class2.rb
	      - class2_reference.rb

This second example have everything the same as the first one except that the subdirectory name (not_class2) is different from the file name (class2). Surprisingly, this example works as expected. The code of this two examples are available here: https://github.com/jingweno/loading_path_gotchas_in_rails3/tree/master/app/models.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The algorithm of auto-loading paths in Rails 3 is a bit weird
when class caching is turned off. Assuming you add all
subdirectories under app/models to the load paths by using the new
&quot;config.autoload_paths&quot; setting in config/application.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;config.autoload_paths += Dir[&quot;#{config.root}/app/models/**/&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And you have a subdirectory under app/models with name class1
and a file under this subdirectory with name class1.rb. When you
are referring any classes under this subdirectory in class1.rb, you
have to make sure they are in the namespace of Class1. Otherwise
Rails will complain about your referred class is not in the
namespace of Class1. In more details, if you have a directory
structure like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- app
  - models
    - class1
      - class1.rb
      - class1_reference.rb&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When you refer to Class1Reference in Class1, you will get
&quot;&lt;strong&gt;Expected app/models/class1/class1_reference.rb to define
Class1::Class1Reference&lt;/strong&gt;&quot;. If the subdirectory is not named
class1, strangely this example will work... Let's take a look at a
comparing directory structure:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- app
  - models
    - not_class2
      - class2.rb
      - class2_reference.rb&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This second example have everything the same as the first one
except that the subdirectory name (not_class2) is different from
the file name (class2). Surprisingly, this example works as
expected. The code of this two examples are available here:
&lt;a href=&quot;https://github.com/jingweno/loading_path_gotchas_in_rails3/tree/master/app/models&quot;&gt;
https://github.com/jingweno/loading_path_gotchas_in_rails3/tree/mas...&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-21T02:11:20+00:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot;</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-01-21T02:11:22+00:00</updated-at>
      <user-id type="integer">106122</user-id>
      <version type="integer">1</version>
      <user-name>Owen</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>More detail is available at my blog post with comparing examples: http://owenou.com/2011/01/20/loading-path-gotchas-in-rails3.html</body>
      <body-html>&lt;div&gt;&lt;p&gt;More detail is available at my blog post with comparing
examples: &lt;a href=
&quot;http://owenou.com/2011/01/20/loading-path-gotchas-in-rails3.html&quot;&gt;http://owenou.com/2011/01/20/loading-path-gotchas-in-rails3.html&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-21T12:56:23+00:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot;</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-01-21T12:56:26+00:00</updated-at>
      <user-id type="integer">106122</user-id>
      <version type="integer">2</version>
      <user-name>Owen</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am investigating this potential bug with a different twist.  Glad to find this post and bug report.

My example is having:
app/models/user.rb
app/models/Modu/user.rb

and have autoload_path::
config.autoload_paths += %W(#{config.root}/app/models/Modu)


Where app/models/user.rb is simply:
@@@
 class User
   puts &quot;hi User&quot;
 end
@@@

and app/Modu/user.rb is simply:
@@@
 module Modu
   class User
   puts &quot;hi Modu::User&quot;
   end
 end
@@@

Upon &quot;rails c&quot; or &quot;rails server,&quot; the following exception will occur:

@@@
hi Modu::User
/Library/Ruby/Gems/1.8/gems/activesupport-3.0.3/lib/active_support/dependencies.rb:492:in `load_missing_constant': Expected /Users/apps/xyz/app/models/Modu/user.rb to define User (LoadError)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am investigating this potential bug with a different twist.
Glad to find this post and bug report.&lt;/p&gt;
&lt;p&gt;My example is having:&lt;br&gt;
app/models/user.rb&lt;br&gt;
app/models/Modu/user.rb&lt;/p&gt;
&lt;p&gt;and have autoload_path::&lt;br&gt;
config.autoload_paths += %W(#{config.root}/app/models/Modu)&lt;/p&gt;
&lt;p&gt;Where app/models/user.rb is simply:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; class User
   puts &quot;hi User&quot;
 end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and app/Modu/user.rb is simply:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; module Modu
   class User
   puts &quot;hi Modu::User&quot;
   end
 end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Upon &quot;rails c&quot; or &quot;rails server,&quot; the following exception will
occur:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hi Modu::User
/Library/Ruby/Gems/1.8/gems/activesupport-3.0.3/lib/active_support/dependencies.rb:492:in `load_missing_constant': Expected /Users/apps/xyz/app/models/Modu/user.rb to define User (LoadError)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-21T20:19:06+00:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot;</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-01-21T20:19:14+00:00</updated-at>
      <user-id type="integer">52811</user-id>
      <version type="integer">3</version>
      <user-name>tsailipu</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>BTW, the bug I reported above happens regardless of caching.</body>
      <body-html>&lt;div&gt;&lt;p&gt;BTW, the bug I reported above happens regardless of caching.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-25T05:05:44+00:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot;</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-01-25T05:05:49+00:00</updated-at>
      <user-id type="integer">52811</user-id>
      <version type="integer">4</version>
      <user-name>tsailipu</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails is panicking when you add subdirectories of a given directory to autoload paths. In both cases, you will have in the load paths both app/models/ and app/models/client1 (or app/models/Modu) and then Rails heuristic to find which model to load is picking up the one you do not expect to. The ideal way is to not include subdirectories in autoload paths and reference the constants using namespaces.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails is panicking when you add subdirectories of a given
directory to autoload paths. In both cases, you will have in the
load paths both app/models/ and app/models/client1 (or
app/models/Modu) and then Rails heuristic to find which model to
load is picking up the one you do not expect to. The ideal way is
to not include subdirectories in autoload paths and reference the
constants using namespaces.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-25T05:41:20+00:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot;</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-01-25T05:41:31+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">5</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Jos&#233;,

How about my example? I don't have two classes with the same name. I have a subdirectory named class1 and a file under it named class1.rb. If class1.rb refers to class1reference.rb, if will also raise exception. I have documented it with a blog post: http://owenou.com/2011/01/20/loading-path-gotchas-in-rails3.html. Please take a look. Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Jos&amp;eacute;,&lt;/p&gt;
&lt;p&gt;How about my example? I don't have two classes with the same
name. I have a subdirectory named class1 and a file under it named
class1.rb. If class1.rb refers to class1reference.rb, if will also
raise exception. I have documented it with a blog post: &lt;a href=
&quot;http://owenou.com/2011/01/20/loading-path-gotchas-in-rails3.html&quot;&gt;http://owenou.com/2011/01/20/loading-path-gotchas-in-rails3.html&lt;/a&gt;.
Please take a look. Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-25T16:36:01+00:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot;</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-01-25T16:36:13+00:00</updated-at>
      <user-id type="integer">106122</user-id>
      <version type="integer">6</version>
      <user-name>Owen</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Owen, but you still have app/models/client1 which is a directory. Rails get confused about defining a module with client1 (which it does automatically for directories) or loading the module (which would define a class). Again, the origin of the issue is the same, having a subpath inside another in autoload_paths. This causes ambiguity and any way Rails try to solve it will likely clause conflicts.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Owen, but you still have app/models/client1 which is a
directory. Rails get confused about defining a module with client1
(which it does automatically for directories) or loading the module
(which would define a class). Again, the origin of the issue is the
same, having a subpath inside another in autoload_paths. This
causes ambiguity and any way Rails try to solve it will likely
clause conflicts.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-25T17:17:32+00:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot;</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-01-25T17:17:43+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">7</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks for the clarification, Jos&#233;. So what's the best practice to manage subdirectories in Rails 3? I have too many models and I would like to manage them in different directories. Should I still organize them by having a base file &quot;require&quot; all the files in the subdirectories?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for the clarification, Jos&amp;eacute;. So what's the best
practice to manage subdirectories in Rails 3? I have too many
models and I would like to manage them in different directories.
Should I still organize them by having a base file &quot;require&quot; all
the files in the subdirectories?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-25T17:35:47+00:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot;</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-01-25T17:35:57+00:00</updated-at>
      <user-id type="integer">106122</user-id>
      <version type="integer">8</version>
      <user-name>Owen</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sounds like Rails 3 could improve the loading logic: remember the path to the class, then when asked and if there are classes with the same name, check to see whether the references have the path, if not, complain.  Bailing out during &quot;rails c&quot; or &quot;rails server&quot; when an autoload path contains the same class name as another in the default app/models path renders Rails 3 brittle....  BTW, Jose, I don't know what changed, but the example I quoted doesn't have a problem in Rails 2 (e.g. 2.3.5).  So I don't know why you wouldn't think this is something worth looking into in Rails 3.  Thanks for the explanation!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sounds like Rails 3 could improve the loading logic: remember
the path to the class, then when asked and if there are classes
with the same name, check to see whether the references have the
path, if not, complain. Bailing out during &quot;rails c&quot; or &quot;rails
server&quot; when an autoload path contains the same class name as
another in the default app/models path renders Rails 3 brittle....
BTW, Jose, I don't know what changed, but the example I quoted
doesn't have a problem in Rails 2 (e.g. 2.3.5). So I don't know why
you wouldn't think this is something worth looking into in Rails 3.
Thanks for the explanation!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-25T17:49:41+00:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot;</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-01-25T17:49:51+00:00</updated-at>
      <user-id type="integer">52811</user-id>
      <version type="integer">9</version>
      <user-name>tsailipu</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Jos&#233;, can you provide recommendations on how to manage subdirectories in Rails 3. Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Jos&amp;eacute;, can you provide recommendations on how to manage
subdirectories in Rails 3. Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-28T21:28:30+00:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot;</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-01-28T21:28:41+00:00</updated-at>
      <user-id type="integer">106122</user-id>
      <version type="integer">10</version>
      <user-name>Owen</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I realize this ticket is marked &quot;wontfix&quot; but I'd like to add a use case where loading subfolder without a namespace makes sense.  My current issue is that I want to use Single Table Inheritance and organize the sub classes in a folder.  I should be able to use:

class Automobile ... end
class Car &lt; Automobile ... end
class Truck &lt; Automobile ... end

And put car.rb and truck.rb under a folder &quot;automobile&quot; without having to scope them.  If I use the following:

class Automobile::Car &lt; Automobile ... end

Then I get &quot;Automobile::Car&quot; in the &quot;type&quot; column for STI.  This is definitely NOT what I want, I'd rather just have &quot;Car&quot;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I realize this ticket is marked &quot;wontfix&quot; but I'd like to add a
use case where loading subfolder without a namespace makes sense.
My current issue is that I want to use Single Table Inheritance and
organize the sub classes in a folder. I should be able to use:&lt;/p&gt;
&lt;p&gt;class Automobile ... end&lt;br&gt;
class Car &amp;lt; Automobile ... end&lt;br&gt;
class Truck &amp;lt; Automobile ... end&lt;/p&gt;
&lt;p&gt;And put car.rb and truck.rb under a folder &quot;automobile&quot; without
having to scope them. If I use the following:&lt;/p&gt;
&lt;p&gt;class Automobile::Car &amp;lt; Automobile ... end&lt;/p&gt;
&lt;p&gt;Then I get &quot;Automobile::Car&quot; in the &quot;type&quot; column for STI. This
is definitely NOT what I want, I'd rather just have &quot;Car&quot;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-30T07:47:11+01:00</created-at>
      <creator-id type="integer">106122</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: autoload &quot;class cache&quot; &quot;class reloading&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6320</number>
      <permalink>autoloading-behaves-weird-when-class-caching-is-turned-off</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>autoload &quot;class cache&quot; &quot;class reloading&quot; sti</tag>
      <title>Autoloading behaves weird when class caching is turned off</title>
      <updated-at type="datetime">2011-03-30T07:47:26+01:00</updated-at>
      <user-id type="integer">143486</user-id>
      <version type="integer">11</version>
      <user-name>myopenid.com (at bobics)</user-name>
      <creator-name>Owen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6320</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
