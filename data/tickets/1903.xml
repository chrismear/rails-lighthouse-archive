<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-07T05:11:19+00:00</created-at>
  <creator-id type="integer">3706</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1903</number>
  <permalink>errorsonatt-should-not-return-a-string</permalink>
  <priority type="integer">1168</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>hold</state>
  <tag>array errors string validation</tag>
  <title>errors.on(:att) should not return a String</title>
  <updated-at type="datetime">2009-02-09T21:14:40+00:00</updated-at>
  <user-id type="integer">46476</user-id>
  <version type="integer">6</version>
  <user-name>Jonas Schneider</user-name>
  <creator-name>Justin French</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1903</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I find it very surprising and awkward that ActiveRecord's errors.on(:attribute) can return nil, a String (when there's only one error) or an Array (more than one error).

It's more common elsewhere in ActiveRecord to return an array even when there's only item... find(:all) is a perfect example.

I've attached a patch which changes the behavior so that an array is returned when 1 or more errors exist on the attribute, which will mean developers no longer have to write special code to handle the String special case.

This change is *mostly* backwards compatible:

Developers should have already been expecting either nil, a String or an Array of errors, so this change just negates the need for the String handling in their code.

However, there's probably a lot of validation unit tests out there expecting Strings rather than Arrays.</original-body>
  <latest-body>I find it very surprising and awkward that ActiveRecord's errors.on(:attribute) can return nil, a String (when there's only one error) or an Array (more than one error).

It's more common elsewhere in ActiveRecord to return an array even when there's only item... find(:all) is a perfect example.

I've attached a patch which changes the behavior so that an array is returned when 1 or more errors exist on the attribute, which will mean developers no longer have to write special code to handle the String special case.

This change is *mostly* backwards compatible:

Developers should have already been expecting either nil, a String or an Array of errors, so this change just negates the need for the String handling in their code.

However, there's probably a lot of validation unit tests out there expecting Strings rather than Arrays.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I find it very surprising and awkward that ActiveRecord's
errors.on(:attribute) can return nil, a String (when there's only
one error) or an Array (more than one error).&lt;/p&gt;
&lt;p&gt;It's more common elsewhere in ActiveRecord to return an array
even when there's only item... find(:all) is a perfect example.&lt;/p&gt;
&lt;p&gt;I've attached a patch which changes the behavior so that an
array is returned when 1 or more errors exist on the attribute,
which will mean developers no longer have to write special code to
handle the String special case.&lt;/p&gt;
&lt;p&gt;This change is &lt;em&gt;mostly&lt;/em&gt; backwards compatible:&lt;/p&gt;
&lt;p&gt;Developers should have already been expecting either nil, a
String or an Array of errors, so this change just negates the need
for the String handling in their code.&lt;/p&gt;
&lt;p&gt;However, there's probably a lot of validation unit tests out
there expecting Strings rather than Arrays.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I find it very surprising and awkward that ActiveRecord's errors.on(:attribute) can return nil, a String (when there's only one error) or an Array (more than one error).

It's more common elsewhere in ActiveRecord to return an array even when there's only item... find(:all) is a perfect example.

I've attached a patch which changes the behavior so that an array is returned when 1 or more errors exist on the attribute, which will mean developers no longer have to write special code to handle the String special case.

This change is *mostly* backwards compatible:

Developers should have already been expecting either nil, a String or an Array of errors, so this change just negates the need for the String handling in their code.

However, there's probably a lot of validation unit tests out there expecting Strings rather than Arrays.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I find it very surprising and awkward that ActiveRecord's
errors.on(:attribute) can return nil, a String (when there's only
one error) or an Array (more than one error).&lt;/p&gt;
&lt;p&gt;It's more common elsewhere in ActiveRecord to return an array
even when there's only item... find(:all) is a perfect example.&lt;/p&gt;
&lt;p&gt;I've attached a patch which changes the behavior so that an
array is returned when 1 or more errors exist on the attribute,
which will mean developers no longer have to write special code to
handle the String special case.&lt;/p&gt;
&lt;p&gt;This change is &lt;em&gt;mostly&lt;/em&gt; backwards compatible:&lt;/p&gt;
&lt;p&gt;Developers should have already been expecting either nil, a
String or an Array of errors, so this change just negates the need
for the String handling in their code.&lt;/p&gt;
&lt;p&gt;However, there's probably a lot of validation unit tests out
there expecting Strings rather than Arrays.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-07T05:11:21+00:00</created-at>
      <creator-id type="integer">3706</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1903</number>
      <permalink>errorsonatt-should-not-return-a-string</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>array errors string validation</tag>
      <title>errors.on(:att) should not return a String</title>
      <updated-at type="datetime">2009-02-07T05:11:25+00:00</updated-at>
      <user-id type="integer">3706</user-id>
      <version type="integer">1</version>
      <user-name>Justin French</user-name>
      <creator-name>Justin French</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1903</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>yes please, I hate the previous behavior. I want it to return an empty array rather than nil also, but that would probably break too much stuff</body>
      <body-html>&lt;div&gt;&lt;p&gt;yes please, I hate the previous behavior. I want it to return an
empty array rather than nil also, but that would probably break too
much stuff&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-07T05:21:42+00:00</created-at>
      <creator-id type="integer">3706</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1903</number>
      <permalink>errorsonatt-should-not-return-a-string</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>array errors string validation</tag>
      <title>errors.on(:att) should not return a String</title>
      <updated-at type="datetime">2009-02-07T05:21:47+00:00</updated-at>
      <user-id type="integer">17200</user-id>
      <version type="integer">2</version>
      <user-name>Xavier Shay</user-name>
      <creator-name>Justin French</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1903</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>yeah, i'd love an empty array too, and i started on that too, but I see a lot of code checking 'errors.on(:foo)' rather than 'errors.on(:foo).blank?'</body>
      <body-html>&lt;div&gt;&lt;p&gt;yeah, i'd love an empty array too, and i started on that too,
but I see a lot of code checking 'errors.on(:foo)' rather than
'errors.on(:foo).blank?'&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-07T06:10:36+00:00</created-at>
      <creator-id type="integer">3706</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1903</number>
      <permalink>errorsonatt-should-not-return-a-string</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>array errors string validation</tag>
      <title>errors.on(:att) should not return a String</title>
      <updated-at type="datetime">2009-02-07T06:10:38+00:00</updated-at>
      <user-id type="integer">3706</user-id>
      <version type="integer">3</version>
      <user-name>Justin French</user-name>
      <creator-name>Justin French</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1903</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This is not going to be backwards compatible and I'm sorta on the fence about whether it's even a good idea. If you're primarily working with 1 error per field, it'd be a hassle to deal with the array. And if you are thinking there might be multiple, couldn't you just wrap the call in Array()?</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is not going to be backwards compatible and I'm sorta on
the fence about whether it's even a good idea. If you're primarily
working with 1 error per field, it'd be a hassle to deal with the
array. And if you are thinking there might be multiple, couldn't
you just wrap the call in Array()?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-07T13:41:39+00:00</created-at>
      <creator-id type="integer">3706</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1903</number>
      <permalink>errorsonatt-should-not-return-a-string</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag>array errors string validation</tag>
      <title>errors.on(:att) should not return a String</title>
      <updated-at type="datetime">2009-02-07T13:41:40+00:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">4</version>
      <user-name>DHH</user-name>
      <creator-name>Justin French</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1903</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree this isn't just a quick patch we can squeeze into stable any time we like, but I just don't buy the idea that most people, most of the time will only have or expect one error on a field.  Nor can I buy the idea that they'd expect a String instead of an array for a pluralized method name like @errors@.

And (aside from unit tests) it's not THAT much of a compatibility problem, is it?  For those that were expecting a string Array#to_s returns the string, and to_s is called by ERB.

I've seen plenty of developers have a &quot;WTF?&quot; moment on this.  They all expected an array of one object.  Hey, they all expected an empty array for zero errors too, so let's fix that!

Major releases like 3.0 are an opportunity to reduce those WTF moments.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree this isn't just a quick patch we can squeeze into stable
any time we like, but I just don't buy the idea that most people,
most of the time will only have or expect one error on a field. Nor
can I buy the idea that they'd expect a String instead of an array
for a pluralized method name like &lt;code&gt;errors&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And (aside from unit tests) it's not THAT much of a
compatibility problem, is it? For those that were expecting a
string Array#to_s returns the string, and to_s is called by
ERB.&lt;/p&gt;
&lt;p&gt;I've seen plenty of developers have a &quot;WTF?&quot; moment on this.
They all expected an array of one object. Hey, they all expected an
empty array for zero errors too, so let's fix that!&lt;/p&gt;
&lt;p&gt;Major releases like 3.0 are an opportunity to reduce those WTF
moments.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-08T00:54:55+00:00</created-at>
      <creator-id type="integer">3706</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1903</number>
      <permalink>errorsonatt-should-not-return-a-string</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag>array errors string validation</tag>
      <title>errors.on(:att) should not return a String</title>
      <updated-at type="datetime">2009-02-08T00:54:58+00:00</updated-at>
      <user-id type="integer">3706</user-id>
      <version type="integer">5</version>
      <user-name>Justin French</user-name>
      <creator-name>Justin French</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1903</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 for me, for sure.
stumbled across this stuff so many times now...
But it should be included first in Rails3 or something (where we break bc anyway :D)</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for me, for sure. stumbled across this stuff so many times
now... But it should be included first in Rails3 or something
(where we break bc anyway :D)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-09T21:14:35+00:00</created-at>
      <creator-id type="integer">3706</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1903</number>
      <permalink>errorsonatt-should-not-return-a-string</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag>array errors string validation</tag>
      <title>errors.on(:att) should not return a String</title>
      <updated-at type="datetime">2009-02-09T21:14:40+00:00</updated-at>
      <user-id type="integer">46476</user-id>
      <version type="integer">6</version>
      <user-name>Jonas Schneider</user-name>
      <creator-name>Justin French</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1903</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ae93ce79af4fca101100631619eaff3fe5de1be1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-07T05:11:21+00:00</created-at>
      <filename>errors-as-arrays.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">86302</id>
      <size type="integer">43353</size>
      <uploader-id type="integer">3706</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/86302/errors-as-arrays.diff</url>
    </attachment>
  </attachments>
</ticket>
