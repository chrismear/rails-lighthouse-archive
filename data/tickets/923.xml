<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-28T06:01:55+01:00</created-at>
  <creator-id type="integer">24378</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">923</number>
  <permalink>count-ordered-assn-w-postgres</permalink>
  <priority type="integer">374</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord postgres</tag>
  <title>count ordered assn w/ postgres</title>
  <updated-at type="datetime">2008-12-03T15:26:36+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Gary Yngve</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/923</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Postgres is much stricter than Mysql and barfs if a sql statement has both select count(*) and an order clause.  Unfortunately, if a count_by_sql isn't provided for an association governed by a find_by_sql with an order clause, ActiveRecord will substitute the select clause with count(*) and neglect to drop the order clause.

We patched our Rails to drop the order clause (by finding the last occurrence of order by).  Maybe there's some other reason why this is a bad idea (some SQL code that gets broken by this).  

Mostly just making yall aware of the issue...</original-body>
  <latest-body>Postgres is much stricter than Mysql and barfs if a sql statement has both select count(*) and an order clause.  Unfortunately, if a count_by_sql isn't provided for an association governed by a find_by_sql with an order clause, ActiveRecord will substitute the select clause with count(*) and neglect to drop the order clause.

We patched our Rails to drop the order clause (by finding the last occurrence of order by).  Maybe there's some other reason why this is a bad idea (some SQL code that gets broken by this).  

Mostly just making yall aware of the issue...</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Postgres is much stricter than Mysql and barfs if a sql statement has both select count(&lt;em&gt;) and an order clause.  Unfortunately, if a count_by_sql isn't provided for an association governed by a find_by_sql with an order clause, ActiveRecord will substitute the select clause with count(&lt;/em&gt;) and neglect to drop the order clause.&lt;/p&gt;

&lt;p&gt;We patched our Rails to drop the order clause (by finding the last occurrence of order by).  Maybe there's some other reason why this is a bad idea (some SQL code that gets broken by this).&lt;/p&gt;

&lt;p&gt;Mostly just making yall aware of the issue...&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Postgres is much stricter than Mysql and barfs if a sql statement has both select count(*) and an order clause.  Unfortunately, if a count_by_sql isn't provided for an association governed by a find_by_sql with an order clause, ActiveRecord will substitute the select clause with count(*) and neglect to drop the order clause.

We patched our Rails to drop the order clause (by finding the last occurrence of order by).  Maybe there's some other reason why this is a bad idea (some SQL code that gets broken by this).  

Mostly just making yall aware of the issue...</body>
      <body-html>&lt;div&gt;&lt;p&gt;Postgres is much stricter than Mysql and barfs if a sql statement has both select count(&lt;em&gt;) and an order clause.  Unfortunately, if a count_by_sql isn't provided for an association governed by a find_by_sql with an order clause, ActiveRecord will substitute the select clause with count(&lt;/em&gt;) and neglect to drop the order clause.&lt;/p&gt;

&lt;p&gt;We patched our Rails to drop the order clause (by finding the last occurrence of order by).  Maybe there's some other reason why this is a bad idea (some SQL code that gets broken by this).&lt;/p&gt;

&lt;p&gt;Mostly just making yall aware of the issue...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-28T06:01:56+01:00</created-at>
      <creator-id type="integer">24378</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">923</number>
      <permalink>count-ordered-assn-w-postgres</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord postgres</tag>
      <title>count ordered assn w/ postgres</title>
      <updated-at type="datetime">2008-08-28T06:01:56+01:00</updated-at>
      <user-id type="integer">24378</user-id>
      <version type="integer">1</version>
      <user-name>Gary Yngve</user-name>
      <creator-name>Gary Yngve</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/923</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-03T15:26:33+00:00</created-at>
      <creator-id type="integer">24378</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">923</number>
      <permalink>count-ordered-assn-w-postgres</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord postgres</tag>
      <title>count ordered assn w/ postgres</title>
      <updated-at type="datetime">2008-12-03T15:26:36+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Gary Yngve</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/923</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
