<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">5</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-14T07:28:43+00:00</created-at>
  <creator-id type="integer">26148</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">4452</number>
  <permalink>making-activesupportcache-consistent</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>3.0 activesupport cache</tag>
  <title>Making ActiveSupport::Cache consistent</title>
  <updated-at type="datetime">2011-02-14T07:28:43+00:00</updated-at>
  <user-id type="integer">43354</user-id>
  <version type="integer">18</version>
  <user-name>Tomasz Mazur</user-name>
  <creator-name>Brian Durand</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>I have recently been working on some gems that utilize ActiveSupport::Cache and ran into some issues with the different implementations handling the same functionality differently. One of the issues was that I couldn't rely on expiring entries with the :expires_in option. MemCacheStore takes this option on a write, while FileStore takes it on a read, and MemoryStore ignores it all together so that the cache will just grow until you run out of memory.

I ended up doing a pretty large refactoring of ActiveSupport::Cache to provide universal support for some options, fix some bugs, and update the documentation. The patch is attached to this ticket.

Here are the highlights:

All Caches

* Add default options to initializer that will be sent to all read, write, fetch, exist?, increment, and decrement
* Add support for the :expires_in option to fetch and write for all caches. Cache entries are stored with the create timestamp and a ttl so that expiration can be handled independently of the implementation.
* Add support for a :namespace option. This can be used to set a global prefix for cache entries.
* Deprecate expand_cache_key on ActiveSupport::Cache and move it to ActionController::Caching and ActionDispatch::Http::Cache since the logic in the method used some Rails specific environment variables and was only used by ActionPack classes. Not very DRY but there didn't seem to be a good shared spot and ActiveSupport really shouldn't be Rails specific.
* Add support for :race_condition_ttl to fetch. This setting can prevent race conditions on fetch calls where several processes try to regenerate a recently expired entry at once.
* Add support for :compress option to fetch and write which will compress any data over a configurable threshold.
* Nil values can now be stored in the cache and are distinct from cache misses for fetch.
* Easier API to create new implementations. Just need to implement the methods read_entry, write_entry, and delete_entry instead of overwriting existing methods.
* Since all cache implementations support storing objects, update the docs to state that ActiveCache::Cache::Store implementations should store objects. Keys, however, must be strings since some implementations require that.
* Increase test coverage.
* Document methods which are provided as convenience but which may not be universally available.

MemoryStore

* MemoryStore can now safely be used as the cache for single server sites.
* Make thread safe so that the default cache implementation used by Rails is thread safe. The overhead is minimal and it is still the fastest store available.
* Provide :size initialization option indicating the maximum size of the cache in memory (defaults to 32Mb).
* Add prune logic that removes the least recently used cache entries to keep the cache size from exceeding the max.
* Deprecated SynchronizedMemoryStore since it isn't needed anymore.

FileStore

* Escape key values so they will work as file names on all file systems, be consistent, and case sensitive
* Use a hash algorithm to segment the cache into sub directories so that a large cache doesn't exceed file system limits.
* FileStore can be slow so implement the LocalCache strategy to cache reads for the duration of a request.
* Add cleanup method to keep the disk from filling up with expired entries.
* Fix increment and decrement to use file system locks so they are consistent between processes.

MemCacheStore

* Support all keys. Previously keys with spaces in them would fail
* Deprecate CompressedMemCacheStore since it isn't needed anymore</original-body>
  <latest-body>I have recently been working on some gems that utilize ActiveSupport::Cache and ran into some issues with the different implementations handling the same functionality differently. One of the issues was that I couldn't rely on expiring entries with the :expires_in option. MemCacheStore takes this option on a write, while FileStore takes it on a read, and MemoryStore ignores it all together so that the cache will just grow until you run out of memory.

I ended up doing a pretty large refactoring of ActiveSupport::Cache to provide universal support for some options, fix some bugs, and update the documentation. The patch is attached to this ticket.

Here are the highlights:

All Caches

* Add default options to initializer that will be sent to all read, write, fetch, exist?, increment, and decrement
* Add support for the :expires_in option to fetch and write for all caches. Cache entries are stored with the create timestamp and a ttl so that expiration can be handled independently of the implementation.
* Add support for a :namespace option. This can be used to set a global prefix for cache entries.
* Deprecate expand_cache_key on ActiveSupport::Cache and move it to ActionController::Caching and ActionDispatch::Http::Cache since the logic in the method used some Rails specific environment variables and was only used by ActionPack classes. Not very DRY but there didn't seem to be a good shared spot and ActiveSupport really shouldn't be Rails specific.
* Add support for :race_condition_ttl to fetch. This setting can prevent race conditions on fetch calls where several processes try to regenerate a recently expired entry at once.
* Add support for :compress option to fetch and write which will compress any data over a configurable threshold.
* Nil values can now be stored in the cache and are distinct from cache misses for fetch.
* Easier API to create new implementations. Just need to implement the methods read_entry, write_entry, and delete_entry instead of overwriting existing methods.
* Since all cache implementations support storing objects, update the docs to state that ActiveCache::Cache::Store implementations should store objects. Keys, however, must be strings since some implementations require that.
* Increase test coverage.
* Document methods which are provided as convenience but which may not be universally available.

MemoryStore

* MemoryStore can now safely be used as the cache for single server sites.
* Make thread safe so that the default cache implementation used by Rails is thread safe. The overhead is minimal and it is still the fastest store available.
* Provide :size initialization option indicating the maximum size of the cache in memory (defaults to 32Mb).
* Add prune logic that removes the least recently used cache entries to keep the cache size from exceeding the max.
* Deprecated SynchronizedMemoryStore since it isn't needed anymore.

FileStore

* Escape key values so they will work as file names on all file systems, be consistent, and case sensitive
* Use a hash algorithm to segment the cache into sub directories so that a large cache doesn't exceed file system limits.
* FileStore can be slow so implement the LocalCache strategy to cache reads for the duration of a request.
* Add cleanup method to keep the disk from filling up with expired entries.
* Fix increment and decrement to use file system locks so they are consistent between processes.

MemCacheStore

* Support all keys. Previously keys with spaces in them would fail
* Deprecate CompressedMemCacheStore since it isn't needed anymore</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have recently been working on some gems that utilize
ActiveSupport::Cache and ran into some issues with the different
implementations handling the same functionality differently. One of
the issues was that I couldn't rely on expiring entries with the
:expires_in option. MemCacheStore takes this option on a write,
while FileStore takes it on a read, and MemoryStore ignores it all
together so that the cache will just grow until you run out of
memory.&lt;/p&gt;
&lt;p&gt;I ended up doing a pretty large refactoring of
ActiveSupport::Cache to provide universal support for some options,
fix some bugs, and update the documentation. The patch is attached
to this ticket.&lt;/p&gt;
&lt;p&gt;Here are the highlights:&lt;/p&gt;
&lt;p&gt;All Caches&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add default options to initializer that will be sent to all
read, write, fetch, exist?, increment, and decrement&lt;/li&gt;
&lt;li&gt;Add support for the :expires_in option to fetch and write for
all caches. Cache entries are stored with the create timestamp and
a ttl so that expiration can be handled independently of the
implementation.&lt;/li&gt;
&lt;li&gt;Add support for a :namespace option. This can be used to set a
global prefix for cache entries.&lt;/li&gt;
&lt;li&gt;Deprecate expand_cache_key on ActiveSupport::Cache and move it
to ActionController::Caching and ActionDispatch::Http::Cache since
the logic in the method used some Rails specific environment
variables and was only used by ActionPack classes. Not very DRY but
there didn't seem to be a good shared spot and ActiveSupport really
shouldn't be Rails specific.&lt;/li&gt;
&lt;li&gt;Add support for :race_condition_ttl to fetch. This setting can
prevent race conditions on fetch calls where several processes try
to regenerate a recently expired entry at once.&lt;/li&gt;
&lt;li&gt;Add support for :compress option to fetch and write which will
compress any data over a configurable threshold.&lt;/li&gt;
&lt;li&gt;Nil values can now be stored in the cache and are distinct from
cache misses for fetch.&lt;/li&gt;
&lt;li&gt;Easier API to create new implementations. Just need to
implement the methods read_entry, write_entry, and delete_entry
instead of overwriting existing methods.&lt;/li&gt;
&lt;li&gt;Since all cache implementations support storing objects, update
the docs to state that ActiveCache::Cache::Store implementations
should store objects. Keys, however, must be strings since some
implementations require that.&lt;/li&gt;
&lt;li&gt;Increase test coverage.&lt;/li&gt;
&lt;li&gt;Document methods which are provided as convenience but which
may not be universally available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MemoryStore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MemoryStore can now safely be used as the cache for single
server sites.&lt;/li&gt;
&lt;li&gt;Make thread safe so that the default cache implementation used
by Rails is thread safe. The overhead is minimal and it is still
the fastest store available.&lt;/li&gt;
&lt;li&gt;Provide :size initialization option indicating the maximum size
of the cache in memory (defaults to 32Mb).&lt;/li&gt;
&lt;li&gt;Add prune logic that removes the least recently used cache
entries to keep the cache size from exceeding the max.&lt;/li&gt;
&lt;li&gt;Deprecated SynchronizedMemoryStore since it isn't needed
anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FileStore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escape key values so they will work as file names on all file
systems, be consistent, and case sensitive&lt;/li&gt;
&lt;li&gt;Use a hash algorithm to segment the cache into sub directories
so that a large cache doesn't exceed file system limits.&lt;/li&gt;
&lt;li&gt;FileStore can be slow so implement the LocalCache strategy to
cache reads for the duration of a request.&lt;/li&gt;
&lt;li&gt;Add cleanup method to keep the disk from filling up with
expired entries.&lt;/li&gt;
&lt;li&gt;Fix increment and decrement to use file system locks so they
are consistent between processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MemCacheStore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support all keys. Previously keys with spaces in them would
fail&lt;/li&gt;
&lt;li&gt;Deprecate CompressedMemCacheStore since it isn't needed
anymore&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have recently been working on some gems that utilize ActiveSupport::Cache and ran into some issues with the different implementations handling the same functionality differently. One of the issues was that I couldn't rely on expiring entries with the :expires_in option. MemCacheStore takes this option on a write, while FileStore takes it on a read, and MemoryStore ignores it all together so that the cache will just grow until you run out of memory.

I ended up doing a pretty large refactoring of ActiveSupport::Cache to provide universal support for some options, fix some bugs, and update the documentation. The patch is attached to this ticket.

Here are the highlights:

All Caches

* Add default options to initializer that will be sent to all read, write, fetch, exist?, increment, and decrement
* Add support for the :expires_in option to fetch and write for all caches. Cache entries are stored with the create timestamp and a ttl so that expiration can be handled independently of the implementation.
* Add support for a :namespace option. This can be used to set a global prefix for cache entries.
* Deprecate expand_cache_key on ActiveSupport::Cache and move it to ActionController::Caching and ActionDispatch::Http::Cache since the logic in the method used some Rails specific environment variables and was only used by ActionPack classes. Not very DRY but there didn't seem to be a good shared spot and ActiveSupport really shouldn't be Rails specific.
* Add support for :race_condition_ttl to fetch. This setting can prevent race conditions on fetch calls where several processes try to regenerate a recently expired entry at once.
* Add support for :compress option to fetch and write which will compress any data over a configurable threshold.
* Nil values can now be stored in the cache and are distinct from cache misses for fetch.
* Easier API to create new implementations. Just need to implement the methods read_entry, write_entry, and delete_entry instead of overwriting existing methods.
* Since all cache implementations support storing objects, update the docs to state that ActiveCache::Cache::Store implementations should store objects. Keys, however, must be strings since some implementations require that.
* Increase test coverage.
* Document methods which are provided as convenience but which may not be universally available.

MemoryStore

* MemoryStore can now safely be used as the cache for single server sites.
* Make thread safe so that the default cache implementation used by Rails is thread safe. The overhead is minimal and it is still the fastest store available.
* Provide :size initialization option indicating the maximum size of the cache in memory (defaults to 32Mb).
* Add prune logic that removes the least recently used cache entries to keep the cache size from exceeding the max.
* Deprecated SynchronizedMemoryStore since it isn't needed anymore.

FileStore

* Escape key values so they will work as file names on all file systems, be consistent, and case sensitive
* Use a hash algorithm to segment the cache into sub directories so that a large cache doesn't exceed file system limits.
* FileStore can be slow so implement the LocalCache strategy to cache reads for the duration of a request.
* Add cleanup method to keep the disk from filling up with expired entries.
* Fix increment and decrement to use file system locks so they are consistent between processes.

MemCacheStore

* Support all keys. Previously keys with spaces in them would fail
* Deprecate CompressedMemCacheStore since it isn't needed anymore</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have recently been working on some gems that utilize
ActiveSupport::Cache and ran into some issues with the different
implementations handling the same functionality differently. One of
the issues was that I couldn't rely on expiring entries with the
:expires_in option. MemCacheStore takes this option on a write,
while FileStore takes it on a read, and MemoryStore ignores it all
together so that the cache will just grow until you run out of
memory.&lt;/p&gt;
&lt;p&gt;I ended up doing a pretty large refactoring of
ActiveSupport::Cache to provide universal support for some options,
fix some bugs, and update the documentation. The patch is attached
to this ticket.&lt;/p&gt;
&lt;p&gt;Here are the highlights:&lt;/p&gt;
&lt;p&gt;All Caches&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add default options to initializer that will be sent to all
read, write, fetch, exist?, increment, and decrement&lt;/li&gt;
&lt;li&gt;Add support for the :expires_in option to fetch and write for
all caches. Cache entries are stored with the create timestamp and
a ttl so that expiration can be handled independently of the
implementation.&lt;/li&gt;
&lt;li&gt;Add support for a :namespace option. This can be used to set a
global prefix for cache entries.&lt;/li&gt;
&lt;li&gt;Deprecate expand_cache_key on ActiveSupport::Cache and move it
to ActionController::Caching and ActionDispatch::Http::Cache since
the logic in the method used some Rails specific environment
variables and was only used by ActionPack classes. Not very DRY but
there didn't seem to be a good shared spot and ActiveSupport really
shouldn't be Rails specific.&lt;/li&gt;
&lt;li&gt;Add support for :race_condition_ttl to fetch. This setting can
prevent race conditions on fetch calls where several processes try
to regenerate a recently expired entry at once.&lt;/li&gt;
&lt;li&gt;Add support for :compress option to fetch and write which will
compress any data over a configurable threshold.&lt;/li&gt;
&lt;li&gt;Nil values can now be stored in the cache and are distinct from
cache misses for fetch.&lt;/li&gt;
&lt;li&gt;Easier API to create new implementations. Just need to
implement the methods read_entry, write_entry, and delete_entry
instead of overwriting existing methods.&lt;/li&gt;
&lt;li&gt;Since all cache implementations support storing objects, update
the docs to state that ActiveCache::Cache::Store implementations
should store objects. Keys, however, must be strings since some
implementations require that.&lt;/li&gt;
&lt;li&gt;Increase test coverage.&lt;/li&gt;
&lt;li&gt;Document methods which are provided as convenience but which
may not be universally available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MemoryStore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MemoryStore can now safely be used as the cache for single
server sites.&lt;/li&gt;
&lt;li&gt;Make thread safe so that the default cache implementation used
by Rails is thread safe. The overhead is minimal and it is still
the fastest store available.&lt;/li&gt;
&lt;li&gt;Provide :size initialization option indicating the maximum size
of the cache in memory (defaults to 32Mb).&lt;/li&gt;
&lt;li&gt;Add prune logic that removes the least recently used cache
entries to keep the cache size from exceeding the max.&lt;/li&gt;
&lt;li&gt;Deprecated SynchronizedMemoryStore since it isn't needed
anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FileStore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escape key values so they will work as file names on all file
systems, be consistent, and case sensitive&lt;/li&gt;
&lt;li&gt;Use a hash algorithm to segment the cache into sub directories
so that a large cache doesn't exceed file system limits.&lt;/li&gt;
&lt;li&gt;FileStore can be slow so implement the LocalCache strategy to
cache reads for the duration of a request.&lt;/li&gt;
&lt;li&gt;Add cleanup method to keep the disk from filling up with
expired entries.&lt;/li&gt;
&lt;li&gt;Fix increment and decrement to use file system locks so they
are consistent between processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MemCacheStore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support all keys. Previously keys with spaces in them would
fail&lt;/li&gt;
&lt;li&gt;Deprecate CompressedMemCacheStore since it isn't needed
anymore&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-22T05:31:53+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-22T05:31:59+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">1</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Wow that's massive,
+1

(btw. why there is the space sometimes after the function name like
`def expanded_key (key) # :nodoc:`
?)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Wow that's massive,&lt;br&gt;
+1&lt;/p&gt;
&lt;p&gt;(btw. why there is the space sometimes after the function name
like &lt;code&gt;def expanded_key (key) # :nodoc:&lt;/code&gt; ?)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-22T08:18:48+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-22T08:18:49+01:00</updated-at>
      <user-id type="integer">43210</user-id>
      <version type="integer">2</version>
      <user-name>Evgeniy Dolzhenko</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-22T11:41:34+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-22T11:41:37+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Great patch!

We use `ActiveSupport::Cache.expand_cache_key` in our apps a lot. Everything except `ENV[&quot;RAILS_CACHE_ID&quot;] || ENV[&quot;RAILS_APP_VERSION&quot;]` is not Rails-specific, and those are for global namespacing. Perhaps `ActionController::Caching.expand_cache_key` could use `AS::Cache.expand_cache_key` and pass these env vars along if present.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Great patch!&lt;/p&gt;
&lt;p&gt;We use &lt;code&gt;ActiveSupport::Cache.expand_cache_key&lt;/code&gt; in our
apps a lot. Everything except &lt;code&gt;ENV[&quot;RAILS_CACHE_ID&quot;] ||
ENV[&quot;RAILS_APP_VERSION&quot;]&lt;/code&gt; is not Rails-specific, and those
are for global namespacing. Perhaps
&lt;code&gt;ActionController::Caching.expand_cache_key&lt;/code&gt; could use
&lt;code&gt;AS::Cache.expand_cache_key&lt;/code&gt; and pass these env vars
along if present.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-22T17:39:08+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-22T17:39:12+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I have another patch to apply on top of this one. It fixes FileStore and MemCacheStore so that they don't exceed limits on key length (memcached limit is 250 characters and file systems are generally 255).

FileStore still may have issues on some (Windows mostly) file systems, but I don't see away around that and still keeping the delete_matched method. Personally, I'd be OK with getting rid of delete_matched since it doesn't work on MemCacheStore so it isn't reliably available.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have another patch to apply on top of this one. It fixes
FileStore and MemCacheStore so that they don't exceed limits on key
length (memcached limit is 250 characters and file systems are
generally 255).&lt;/p&gt;
&lt;p&gt;FileStore still may have issues on some (Windows mostly) file
systems, but I don't see away around that and still keeping the
delete_matched method. Personally, I'd be OK with getting rid of
delete_matched since it doesn't work on MemCacheStore so it isn't
reliably available.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-23T03:12:06+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 85
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-23T03:12:10+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">5</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This patch looks great! Reading through the diff, I have but a few remarks.

1. The patch does not apply cleanly on the current Rails master (19cecc907f2c97458519f103cbb967cf8dda5716)
2. The definition of `ActiveSupport::Cache::Store#initialize` places a space between the method name and the parenthesis. This style appears several places throughout the patch, and doesn't comform with the style guidelines (or normal Ruby style). In particular, `cleanup`, `clear`, `key_matcher` and the rest of the methods in the vicinity are defined like that.

These are probably easily fixable, so it's an overall +1 from me :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch looks great! Reading through the diff, I have but a
few remarks.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The patch does not apply cleanly on the current Rails master
(19cecc907f2c97458519f103cbb967cf8dda5716)&lt;br&gt;&lt;/li&gt;
&lt;li&gt;The definition of
&lt;code&gt;ActiveSupport::Cache::Store#initialize&lt;/code&gt; places a space
between the method name and the parenthesis. This style appears
several places throughout the patch, and doesn't comform with the
style guidelines (or normal Ruby style). In particular,
&lt;code&gt;cleanup&lt;/code&gt;, &lt;code&gt;clear&lt;/code&gt;, &lt;code&gt;key_matcher&lt;/code&gt;
and the rest of the methods in the vicinity are defined like
that.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are probably easily fixable, so it's an overall +1 from me
:-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-23T09:59:11+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-23T09:59:13+01:00</updated-at>
      <user-id type="integer">17949</user-id>
      <version type="integer">6</version>
      <user-name>Daniel Schierbeck</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>oops, accidentally unassigned</body>
      <body-html>&lt;div&gt;&lt;p&gt;oops, accidentally unassigned&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-23T15:31:13+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-23T15:31:16+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">7</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I've updated the patch again to remove the offending spaces and rebase to master again.

The latest version also adds some more synchronization on MemoryStore.

I also moved delete_matched, increment, and decrement from being implemented by default to being not implemented by default and explicitly documenting that only fetch, write, read, exist?, and delete are supported by all implementations. It adds a bit of duplicate code, but after thinking about it I realized increment and decrement will always be more than just a simple read/write and either need to be synchronized or use an atomic operator in the implementation code.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've updated the patch again to remove the offending spaces and
rebase to master again.&lt;/p&gt;
&lt;p&gt;The latest version also adds some more synchronization on
MemoryStore.&lt;/p&gt;
&lt;p&gt;I also moved delete_matched, increment, and decrement from being
implemented by default to being not implemented by default and
explicitly documenting that only fetch, write, read, exist?, and
delete are supported by all implementations. It adds a bit of
duplicate code, but after thinking about it I realized increment
and decrement will always be more than just a simple read/write and
either need to be synchronized or use an atomic operator in the
implementation code.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-23T16:52:26+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-23T16:52:28+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">8</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Jeremy, I agree. If there are a lot of uses of expand_cache_key in the wild let's keep it (I don't use it and was only looking in the Rails code base). My concern was only with the Rails specific variables being used.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jeremy, I agree. If there are a lot of uses of expand_cache_key
in the wild let's keep it (I don't use it and was only looking in
the Rails code base). My concern was only with the Rails specific
variables being used.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-23T16:57:05+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-23T16:57:11+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">9</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>This looks like an excellent patch. I'll have to dig around a bit more in the patch, but it looks to be very concise and has refactored many parts where it was much needed. +1</body>
      <body-html>&lt;div&gt;&lt;p&gt;This looks like an excellent patch. I'll have to dig around a
bit more in the patch, but it looks to be very concise and has
refactored many parts where it was much needed. +1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-23T17:41:15+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-23T17:41:18+01:00</updated-at>
      <user-id type="integer">50020</user-id>
      <version type="integer">10</version>
      <user-name>tonycoco</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Attaching new patch which removes the deprecation of ActiveSupport::Cache.expand_cache_key.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attaching new patch which removes the deprecation of
ActiveSupport::Cache.expand_cache_key.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-26T15:50:59+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-26T15:51:01+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">11</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Three issues with MemoryStore:

Bounds don't work since non-String values may be cached and `#size` for them is rarely byte-size. Same deal for 1.9 String, have to use `#bytesize`. Perhaps the bound should be on number of entries.

LRU pruning is limited by timestamp resolution, so the unit tests will fail on fast machines. They test strict ordering.

The pruning thread means the cache can't be used on Google App Engine. I'm not sure whether we can detect whether threads are available, but blocking to prune the cache would be acceptable in that case.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Three issues with MemoryStore:&lt;/p&gt;
&lt;p&gt;Bounds don't work since non-String values may be cached and
&lt;code&gt;#size&lt;/code&gt; for them is rarely byte-size. Same deal for 1.9
String, have to use &lt;code&gt;#bytesize&lt;/code&gt;. Perhaps the bound
should be on number of entries.&lt;/p&gt;
&lt;p&gt;LRU pruning is limited by timestamp resolution, so the unit
tests will fail on fast machines. They test strict ordering.&lt;/p&gt;
&lt;p&gt;The pruning thread means the cache can't be used on Google App
Engine. I'm not sure whether we can detect whether threads are
available, but blocking to prune the cache would be acceptable in
that case.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-26T21:59:43+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-26T21:59:48+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">12</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Another patch to fix MemoryStore.

1. Made the logic for Entry#size more sophisticated so that if the object responds to :bytesize, use that, otherwise Marshal.dump the object and get the bytesize. This adds a bit of overhead for more complex objects but not much (~1.5ms for a large array in my tests). For strings, numbers, or hashes of strings and numbers the overhead is negligible.

2. Added sleep(0.001) statements to pruning tests to throttle fast CPUs.

3. Removed pruning thread in favor of a max pruning time (default 2 seconds). The intent of the Thread was to not tie up request threads pruning a large cache. This will provide an throttle without the need for a separate thread.

4. Added Entry#create method so it is possible for implementations to recreate entries from a native format if desired.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Another patch to fix MemoryStore.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Made the logic for Entry#size more sophisticated so that if the
object responds to :bytesize, use that, otherwise Marshal.dump the
object and get the bytesize. This adds a bit of overhead for more
complex objects but not much (~1.5ms for a large array in my
tests). For strings, numbers, or hashes of strings and numbers the
overhead is negligible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added sleep(0.001) statements to pruning tests to throttle fast
CPUs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed pruning thread in favor of a max pruning time (default 2
seconds). The intent of the Thread was to not tie up request
threads pruning a large cache. This will provide an throttle
without the need for a separate thread.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added Entry#create method so it is possible for implementations
to recreate entries from a native format if desired.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-27T17:24:39+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-27T17:24:44+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">13</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>(from [ee51b51b60f9e6cce9babed2c8a65a14d87790c8]) ActiveSupport::Cache refactoring

All Caches

* Add default options to initializer that will be sent to all read, write, fetch, exist?, increment, and decrement
* Add support for the :expires_in option to fetch and write for all caches. Cache entries are stored with the create timestamp and a ttl so that expiration can be handled independently of the implementation.
* Add support for a :namespace option. This can be used to set a global prefix for cache entries.
* Deprecate expand_cache_key on ActiveSupport::Cache and move it to ActionController::Caching and ActionDispatch::Http::Cache since the logic in the method used some Rails specific environment variables and was only used by ActionPack classes. Not very DRY but there didn't seem to be a good shared spot and ActiveSupport really shouldn't be Rails specific.
* Add support for :race_condition_ttl to fetch. This setting can prevent race conditions on fetch calls where several processes try to regenerate a recently expired entry at once.
* Add support for :compress option to fetch and write which will compress any data over a configurable threshold.
* Nil values can now be stored in the cache and are distinct from cache misses for fetch.
* Easier API to create new implementations. Just need to implement the methods read_entry, write_entry, and delete_entry instead of overwriting existing methods.
* Since all cache implementations support storing objects, update the docs to state that ActiveCache::Cache::Store implementations should store objects. Keys, however, must be strings since some implementations require that.
* Increase test coverage.
* Document methods which are provided as convenience but which may not be universally available.

MemoryStore

* MemoryStore can now safely be used as the cache for single server sites.
* Make thread safe so that the default cache implementation used by Rails is thread safe. The overhead is minimal and it is still the fastest store available.
* Provide :size initialization option indicating the maximum size of the cache in memory (defaults to 32Mb).
* Add prune logic that removes the least recently used cache entries to keep the cache size from exceeding the max.
* Deprecated SynchronizedMemoryStore since it isn't needed anymore.

FileStore

* Escape key values so they will work as file names on all file systems, be consistent, and case sensitive
* Use a hash algorithm to segment the cache into sub directories so that a large cache doesn't exceed file system limits.
* FileStore can be slow so implement the LocalCache strategy to cache reads for the duration of a request.
* Add cleanup method to keep the disk from filling up with expired entries.
* Fix increment and decrement to use file system locks so they are consistent between processes.

MemCacheStore

* Support all keys. Previously keys with spaces in them would fail
* Deprecate CompressedMemCacheStore since it isn't needed anymore (use :compress =&gt; true)

[#4452 state:committed]

Signed-off-by: Jeremy Kemper &lt;jeremy@bitsweat.net&gt;
http://github.com/rails/rails/commit/ee51b51b60f9e6cce9babed2c8a65a14d87790c8</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/ee51b51b60f9e6cce9babed2c8a65a14d87790c8&quot;
title=
&quot;Changeset [ee51b51b60f9e6cce9babed2c8a65a14d87790c8]&quot;&gt;[ee51b51b60f9e6cce9babed2c8a65a14d87790c8]&lt;/a&gt;)
ActiveSupport::Cache refactoring&lt;/p&gt;
&lt;p&gt;All Caches&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add default options to initializer that will be sent to all
read, write, fetch, exist?, increment, and decrement&lt;/li&gt;
&lt;li&gt;Add support for the :expires_in option to fetch and write for
all caches. Cache entries are stored with the create timestamp and
a ttl so that expiration can be handled independently of the
implementation.&lt;/li&gt;
&lt;li&gt;Add support for a :namespace option. This can be used to set a
global prefix for cache entries.&lt;/li&gt;
&lt;li&gt;Deprecate expand_cache_key on ActiveSupport::Cache and move it
to ActionController::Caching and ActionDispatch::Http::Cache since
the logic in the method used some Rails specific environment
variables and was only used by ActionPack classes. Not very DRY but
there didn't seem to be a good shared spot and ActiveSupport really
shouldn't be Rails specific.&lt;/li&gt;
&lt;li&gt;Add support for :race_condition_ttl to fetch. This setting can
prevent race conditions on fetch calls where several processes try
to regenerate a recently expired entry at once.&lt;/li&gt;
&lt;li&gt;Add support for :compress option to fetch and write which will
compress any data over a configurable threshold.&lt;/li&gt;
&lt;li&gt;Nil values can now be stored in the cache and are distinct from
cache misses for fetch.&lt;/li&gt;
&lt;li&gt;Easier API to create new implementations. Just need to
implement the methods read_entry, write_entry, and delete_entry
instead of overwriting existing methods.&lt;/li&gt;
&lt;li&gt;Since all cache implementations support storing objects, update
the docs to state that ActiveCache::Cache::Store implementations
should store objects. Keys, however, must be strings since some
implementations require that.&lt;/li&gt;
&lt;li&gt;Increase test coverage.&lt;/li&gt;
&lt;li&gt;Document methods which are provided as convenience but which
may not be universally available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MemoryStore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MemoryStore can now safely be used as the cache for single
server sites.&lt;/li&gt;
&lt;li&gt;Make thread safe so that the default cache implementation used
by Rails is thread safe. The overhead is minimal and it is still
the fastest store available.&lt;/li&gt;
&lt;li&gt;Provide :size initialization option indicating the maximum size
of the cache in memory (defaults to 32Mb).&lt;/li&gt;
&lt;li&gt;Add prune logic that removes the least recently used cache
entries to keep the cache size from exceeding the max.&lt;/li&gt;
&lt;li&gt;Deprecated SynchronizedMemoryStore since it isn't needed
anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FileStore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escape key values so they will work as file names on all file
systems, be consistent, and case sensitive&lt;/li&gt;
&lt;li&gt;Use a hash algorithm to segment the cache into sub directories
so that a large cache doesn't exceed file system limits.&lt;/li&gt;
&lt;li&gt;FileStore can be slow so implement the LocalCache strategy to
cache reads for the duration of a request.&lt;/li&gt;
&lt;li&gt;Add cleanup method to keep the disk from filling up with
expired entries.&lt;/li&gt;
&lt;li&gt;Fix increment and decrement to use file system locks so they
are consistent between processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MemCacheStore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support all keys. Previously keys with spaces in them would
fail&lt;/li&gt;
&lt;li&gt;Deprecate CompressedMemCacheStore since it isn't needed anymore
(use :compress =&amp;gt; true)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/4452&quot; title=
&quot;Ticket #4452&quot;&gt;#4452&lt;/a&gt; state:committed]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jeremy Kemper &lt;a&gt;jeremy@bitsweat.net&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/ee51b51b60f9e6cce9babed2c8a65a14d87790c8&quot;&gt;
http://github.com/rails/rails/commit/ee51b51b60f9e6cce9babed2c8a65a...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-27T19:20:01+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-27T19:20:03+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">14</version>
      <user-name>Repository</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>Wow, what a patch! Fantastic work Brian!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Wow, what a patch! Fantastic work Brian!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-28T00:13:17+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-04-28T00:13:19+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">15</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>Great patch indeed. Can I ask you guys to look at this one as well? :

https://rails.lighthouseapp.com/projects/8994/tickets/4588-cache-incrementdecrement-with-initialization-when-missing-value

It has some minor doc fixes to this patch + makes increment/decrement consistent for all cache stores, particularly Memcache + adds the ability to provide a block to increment/decrement similar to how +fetch+ works.


Thanks,
Lawrence</body>
      <body-html>&lt;div&gt;&lt;p&gt;Great patch indeed. Can I ask you guys to look at this one as
well? :&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/4588-cache-incrementdecrement-with-initialization-when-missing-value&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/4588-cache-in...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It has some minor doc fixes to this patch + makes
increment/decrement consistent for all cache stores, particularly
Memcache + adds the ability to provide a block to
increment/decrement similar to how +fetch+ works.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
Lawrence&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-05-19T05:03:02+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-05-19T05:03:04+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">16</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:52+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-10-15T23:01:52+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">17</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>+1 Highly recommended patch</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 Highly recommended patch&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-07T11:04:21+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2010-12-07T11:04:39+00:00</updated-at>
      <user-id type="integer">43354</user-id>
      <version type="integer">18</version>
      <user-name>Tomasz Mazur</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>thank you very much......&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/&quot;&gt;&#1605;&#1606;&#1578;&#1583;&#1610;&#1575;&#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f86.html&quot;&gt;&#1605;&#1603;&#1610;&#1575;&#1580;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&#1575;&#1586;&#1610;&#1575;&#1569;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&#1601;&#1587;&#1575;&#1578;&#1610;&#1606;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f17.html&quot;&gt;&#1585;&#1587;&#1575;&#1574;&#1604; 
- &#1605;&#1587;&#1580;&#1575;&#1578; - &#1608;&#1587;&#1575;&#1574;&#1591;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f18.html&quot;&gt;&#1578;&#1608;&#1576;&#1610;&#1603;&#1575;&#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;&#1608;&#1592;&#1575;&#1574;&#1601;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;jobs&lt;/a&gt; &lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;&#1576;&#1585;&#1608;&#1603;&#1587;&#1610;&lt;/a&gt; &lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;proxy&lt;/a&gt;&lt;a href=&quot;http://forum.line-sport.tv/&quot;&gt;&#1604;&#1575;&#1610;&#1606; &#1587;&#1576;&#1608;&#1585;&#1578;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;thank you very much......&lt;span class=
&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=
&quot;http://www.tran33m.com/vb/&quot;&gt;&amp;#1605;&amp;#1606;&amp;#1578;&amp;#1583;&amp;#1610;&amp;#1575;&amp;#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f86.html&quot;&gt;&amp;#1605;&amp;#1603;&amp;#1610;&amp;#1575;&amp;#1580;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&amp;#1575;&amp;#1586;&amp;#1610;&amp;#1575;&amp;#1569;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&amp;#1601;&amp;#1587;&amp;#1575;&amp;#1578;&amp;#1610;&amp;#1606;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f17.html&quot;&gt;&amp;#1585;&amp;#1587;&amp;#1575;&amp;#1574;&amp;#1604;&lt;br&gt;
- &amp;#1605;&amp;#1587;&amp;#1580;&amp;#1575;&amp;#1578; -
&amp;#1608;&amp;#1587;&amp;#1575;&amp;#1574;&amp;#1591;&lt;/a&gt;&lt;span class=
&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=
&quot;http://www.tran33m.com/vb/f18.html&quot;&gt;&amp;#1578;&amp;#1608;&amp;#1576;&amp;#1610;&amp;#1603;&amp;#1575;&amp;#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;&amp;#1608;&amp;#1592;&amp;#1575;&amp;#1574;&amp;#1601;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;jobs&lt;/a&gt;
&lt;a href=
&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;&amp;#1576;&amp;#1585;&amp;#1608;&amp;#1603;&amp;#1587;&amp;#1610;&lt;/a&gt;
&lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;proxy&lt;/a&gt;&lt;a href=
&quot;http://forum.line-sport.tv/&quot;&gt;&amp;#1604;&amp;#1575;&amp;#1610;&amp;#1606;
&amp;#1587;&amp;#1576;&amp;#1608;&amp;#1585;&amp;#1578;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-08T11:12:11+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2011-02-08T12:16:00+00:00</updated-at>
      <user-id type="integer">136126</user-id>
      <version type="integer">19</version>
      <user-name>alasiri1</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;You possibly can buy beauty drops you can aquire with many different patterns similar to the triangular as well as rectangle-shaped varieties.&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-bracelets-c-3.html&quot;&gt;&lt;em&gt;Pandoras Bracelets&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; To help while recognize touch available practically expression along with damaged in almost any necklace around your neck.&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-charms-c-9.html&quot;&gt;&lt;em&gt;Pandora&#160;Charms&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; Just in case alphabets will never get that promotion using a man, &lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;pandora ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;use those who obtain out of all kinds of other communities as an example food including cakes,&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; crops and so forth</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;You
possibly can buy beauty drops you can aquire with many different
patterns similar to the triangular as well as rectangle-shaped
varieties.&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/pandora-bracelets-c-3.html&quot;&gt;&lt;em&gt;Pandoras
Bracelets&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; To help while recognize touch available
practically expression along with damaged in almost any necklace
around your neck.&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/pandora-charms-c-9.html&quot;&gt;&lt;em&gt;Pandora&amp;nbsp;Charms&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;
Just in case alphabets will never get that promotion using a man,
&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;pandora
ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;use those who obtain out of all kinds of
other communities as an example food including
cakes,&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora
NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; crops and so forth&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-14T06:15:11+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4452</number>
      <permalink>making-activesupportcache-consistent</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>3.0 activesupport cache</tag>
      <title>Making ActiveSupport::Cache consistent</title>
      <updated-at type="datetime">2011-02-14T07:28:43+00:00</updated-at>
      <user-id type="integer">136876</user-id>
      <version type="integer">20</version>
      <user-name>pandora jewellry</user-name>
      <creator-name>Brian Durand</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4452</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>b09f1d0b2a3c5396e8b082bc0840b82f9aa2ab58</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-22T05:31:53+01:00</created-at>
      <filename>active_support_cache_refactoring.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">492460</id>
      <size type="integer">85848</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/492460/active_support_cache_refactoring.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>546697e390164bb5de9941a42bae150c3f778f59</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-23T03:12:06+01:00</created-at>
      <filename>active_support_cache_keys_of_any_length.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">494148</id>
      <size type="integer">5432</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/494148/active_support_cache_keys_of_any_length.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>40b690a0e9d7df55b0e9a8fd1c877b9a1abd4692</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-23T16:52:26+01:00</created-at>
      <filename>active_support_cache_refactoring_2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">494851</id>
      <size type="integer">88576</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/494851/active_support_cache_refactoring_2.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>9e4ea768c608aad9ec8b7c2a5ef52caa3b9195c3</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-26T15:51:00+01:00</created-at>
      <filename>active_support_cache_refactoring_3.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">497631</id>
      <size type="integer">84345</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/497631/active_support_cache_refactoring_3.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>2c9b62ac439cb5f0eb6e4b2627affc1b477d8752</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-27T17:24:39+01:00</created-at>
      <filename>active_support_cache_refactoring_4.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">499800</id>
      <size type="integer">87577</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/499800/active_support_cache_refactoring_4.diff</url>
    </attachment>
  </attachments>
</ticket>
