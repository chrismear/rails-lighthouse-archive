<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">8406</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-11-30T21:56:13+00:00</created-at>
  <creator-id type="integer">24643</creator-id>
  <milestone-due-on type="datetime">2010-01-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">50064</milestone-id>
  <number type="integer">3525</number>
  <permalink>nested-attributes-are-saved-twice</permalink>
  <priority type="integer">180252</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>attributes nested</tag>
  <title>Nested attributes are saved twice</title>
  <updated-at type="datetime">2010-01-13T09:46:47+00:00</updated-at>
  <user-id type="integer">8406</user-id>
  <version type="integer">8</version>
  <user-name>Eloy Duran</user-name>
  <creator-name>gix</creator-name>
  <assigned-user-name>Eloy Duran</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3525</url>
  <milestone-title>2.3.6</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Nested attributes are saved twice. Suppose a definition like this, each having a *name* column:

@@@ ruby
    class Person &lt; ActiveRecord::Base
        has_many :children
        accepts_nested_attributes_for :children
    end

    class Child &lt; ActiveRecord::Base
        belongs_to :person
        before_save do
            puts &quot;before save&quot;
        end
    end
@@@

Creating a person with nested attributes reveils that the child is saved twice (i.e. insert+update, or update+update):

    &gt;&gt; Person.create(:name=&gt;'Person',:children_attributes=&gt;[{:name=&gt;'Child'}])
    before save!
    before save!
    =&gt; #&lt;Person id: 1, name: &quot;Person&quot;, child_id: nil, created_at: &quot;2009-11-30 21:26:44&quot;, updated_at: &quot;2009-11-30 21:26:44&quot;&gt;

This usually won't result in two queries though, since the dirty-feature removes all updated columns after the first save:

    SQL (0.1ms)   BEGIN
    Person Create (0.4ms)   INSERT INTO `people` (`name`, `created_at`, `updated_at`, `child_id`) VALUES('Person', '2009-11-30 21:27:15', '2009-11-30 21:27:15', NULL)
    Child Create (0.2ms)   INSERT INTO `children` (`name`, `created_at`, `updated_at`) VALUES('Child', '2009-11-30 21:27:15', '2009-11-30 21:27:15')
    SQL (1.3ms)   COMMIT


The reason for this is that `AutosaveAssociation#save_collection_association` is set up twice as an after-callback for create and update: first when calling `has_many :children` (`AutosaveAssociation` overwrites `has_many` et al and adds a call to `add_autosave_association_callbacks`), and second when calling `accepts_nested_attributes_for` (calls `add_autosave_association_callbacks` right after defining the nested attributes setter). So in turn the save method is overwritten with an equivalent one, and added again as a callback.

I'm not sure what would be the best way to fix this (or whether this is actually intended behavior). The call to `add_autosave_association_callbacks` should probably be dropped from `accepts_nested_attributes_for` since it *requires* an association anyway. Otherwise a simple `return if method_defined? save_method` at the top of `add_autosave_association_callbacks` works, but only cures the symptom.</original-body>
  <latest-body>Nested attributes are saved twice. Suppose a definition like this, each having a *name* column:

@@@ ruby
    class Person &lt; ActiveRecord::Base
        has_many :children
        accepts_nested_attributes_for :children
    end

    class Child &lt; ActiveRecord::Base
        belongs_to :person
        before_save do
            puts &quot;before save&quot;
        end
    end
@@@

Creating a person with nested attributes reveils that the child is saved twice (i.e. insert+update, or update+update):

    &gt;&gt; Person.create(:name=&gt;'Person',:children_attributes=&gt;[{:name=&gt;'Child'}])
    before save!
    before save!
    =&gt; #&lt;Person id: 1, name: &quot;Person&quot;, child_id: nil, created_at: &quot;2009-11-30 21:26:44&quot;, updated_at: &quot;2009-11-30 21:26:44&quot;&gt;

This usually won't result in two queries though, since the dirty-feature removes all updated columns after the first save:

    SQL (0.1ms)   BEGIN
    Person Create (0.4ms)   INSERT INTO `people` (`name`, `created_at`, `updated_at`, `child_id`) VALUES('Person', '2009-11-30 21:27:15', '2009-11-30 21:27:15', NULL)
    Child Create (0.2ms)   INSERT INTO `children` (`name`, `created_at`, `updated_at`) VALUES('Child', '2009-11-30 21:27:15', '2009-11-30 21:27:15')
    SQL (1.3ms)   COMMIT


The reason for this is that `AutosaveAssociation#save_collection_association` is set up twice as an after-callback for create and update: first when calling `has_many :children` (`AutosaveAssociation` overwrites `has_many` et al and adds a call to `add_autosave_association_callbacks`), and second when calling `accepts_nested_attributes_for` (calls `add_autosave_association_callbacks` right after defining the nested attributes setter). So in turn the save method is overwritten with an equivalent one, and added again as a callback.

I'm not sure what would be the best way to fix this (or whether this is actually intended behavior). The call to `add_autosave_association_callbacks` should probably be dropped from `accepts_nested_attributes_for` since it *requires* an association anyway. Otherwise a simple `return if method_defined? save_method` at the top of `add_autosave_association_callbacks` works, but only cures the symptom.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Nested attributes are saved twice. Suppose a definition like
this, each having a &lt;em&gt;name&lt;/em&gt; column:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    class Person &amp;lt; ActiveRecord::Base
        has_many :children
        accepts_nested_attributes_for :children
    end

    class Child &amp;lt; ActiveRecord::Base
        belongs_to :person
        before_save do
            puts &quot;before save&quot;
        end
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Creating a person with nested attributes reveils that the child
is saved twice (i.e. insert+update, or update+update):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Person.create(:name=&amp;gt;'Person',:children_attributes=&amp;gt;[{:name=&amp;gt;'Child'}])
before save!
before save!
=&amp;gt; #&amp;lt;Person id: 1, name: &quot;Person&quot;, child_id: nil, created_at: &quot;2009-11-30 21:26:44&quot;, updated_at: &quot;2009-11-30 21:26:44&quot;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This usually won't result in two queries though, since the
dirty-feature removes all updated columns after the first save:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQL (0.1ms)   BEGIN
Person Create (0.4ms)   INSERT INTO `people` (`name`, `created_at`, `updated_at`, `child_id`) VALUES('Person', '2009-11-30 21:27:15', '2009-11-30 21:27:15', NULL)
Child Create (0.2ms)   INSERT INTO `children` (`name`, `created_at`, `updated_at`) VALUES('Child', '2009-11-30 21:27:15', '2009-11-30 21:27:15')
SQL (1.3ms)   COMMIT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The reason for this is that
&lt;code&gt;AutosaveAssociation#save_collection_association&lt;/code&gt; is set
up twice as an after-callback for create and update: first when
calling &lt;code&gt;has_many :children&lt;/code&gt;
(&lt;code&gt;AutosaveAssociation&lt;/code&gt; overwrites &lt;code&gt;has_many&lt;/code&gt;
et al and adds a call to
&lt;code&gt;add_autosave_association_callbacks&lt;/code&gt;), and second when
calling &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; (calls
&lt;code&gt;add_autosave_association_callbacks&lt;/code&gt; right after
defining the nested attributes setter). So in turn the save method
is overwritten with an equivalent one, and added again as a
callback.&lt;/p&gt;
&lt;p&gt;I'm not sure what would be the best way to fix this (or whether
this is actually intended behavior). The call to
&lt;code&gt;add_autosave_association_callbacks&lt;/code&gt; should probably be
dropped from &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; since it
&lt;em&gt;requires&lt;/em&gt; an association anyway. Otherwise a simple
&lt;code&gt;return if method_defined? save_method&lt;/code&gt; at the top of
&lt;code&gt;add_autosave_association_callbacks&lt;/code&gt; works, but only
cures the symptom.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Nested attributes are saved twice. Suppose a definition like this, each having a *name* column:

@@@ ruby
    class Person &lt; ActiveRecord::Base
        has_many :children
        accepts_nested_attributes_for :children
    end

    class Child &lt; ActiveRecord::Base
        belongs_to :person
        before_save do
            puts &quot;before save&quot;
        end
    end
@@@

Creating a person with nested attributes reveils that the child is saved twice (i.e. insert+update, or update+update):

    &gt;&gt; Person.create(:name=&gt;'Person',:children_attributes=&gt;[{:name=&gt;'Child'}])
    before save!
    before save!
    =&gt; #&lt;Person id: 1, name: &quot;Person&quot;, child_id: nil, created_at: &quot;2009-11-30 21:26:44&quot;, updated_at: &quot;2009-11-30 21:26:44&quot;&gt;

This usually won't result in two queries though, since the dirty-feature removes all updated columns after the first save:

    SQL (0.1ms)   BEGIN
    Person Create (0.4ms)   INSERT INTO `people` (`name`, `created_at`, `updated_at`, `child_id`) VALUES('Person', '2009-11-30 21:27:15', '2009-11-30 21:27:15', NULL)
    Child Create (0.2ms)   INSERT INTO `children` (`name`, `created_at`, `updated_at`) VALUES('Child', '2009-11-30 21:27:15', '2009-11-30 21:27:15')
    SQL (1.3ms)   COMMIT


The reason for this is that `AutosaveAssociation#save_collection_association` is set up twice as an after-callback for create and update: first when calling `has_many :children` (`AutosaveAssociation` overwrites `has_many` et al and adds a call to `add_autosave_association_callbacks`), and second when calling `accepts_nested_attributes_for` (calls `add_autosave_association_callbacks` right after defining the nested attributes setter). So in turn the save method is overwritten with an equivalent one, and added again as a callback.

I'm not sure what would be the best way to fix this (or whether this is actually intended behavior). The call to `add_autosave_association_callbacks` should probably be dropped from `accepts_nested_attributes_for` since it *requires* an association anyway. Otherwise a simple `return if method_defined? save_method` at the top of `add_autosave_association_callbacks` works, but only cures the symptom.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Nested attributes are saved twice. Suppose a definition like
this, each having a &lt;em&gt;name&lt;/em&gt; column:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    class Person &amp;lt; ActiveRecord::Base
        has_many :children
        accepts_nested_attributes_for :children
    end

    class Child &amp;lt; ActiveRecord::Base
        belongs_to :person
        before_save do
            puts &quot;before save&quot;
        end
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Creating a person with nested attributes reveils that the child
is saved twice (i.e. insert+update, or update+update):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Person.create(:name=&amp;gt;'Person',:children_attributes=&amp;gt;[{:name=&amp;gt;'Child'}])
before save!
before save!
=&amp;gt; #&amp;lt;Person id: 1, name: &quot;Person&quot;, child_id: nil, created_at: &quot;2009-11-30 21:26:44&quot;, updated_at: &quot;2009-11-30 21:26:44&quot;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This usually won't result in two queries though, since the
dirty-feature removes all updated columns after the first save:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQL (0.1ms)   BEGIN
Person Create (0.4ms)   INSERT INTO `people` (`name`, `created_at`, `updated_at`, `child_id`) VALUES('Person', '2009-11-30 21:27:15', '2009-11-30 21:27:15', NULL)
Child Create (0.2ms)   INSERT INTO `children` (`name`, `created_at`, `updated_at`) VALUES('Child', '2009-11-30 21:27:15', '2009-11-30 21:27:15')
SQL (1.3ms)   COMMIT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The reason for this is that
&lt;code&gt;AutosaveAssociation#save_collection_association&lt;/code&gt; is set
up twice as an after-callback for create and update: first when
calling &lt;code&gt;has_many :children&lt;/code&gt;
(&lt;code&gt;AutosaveAssociation&lt;/code&gt; overwrites &lt;code&gt;has_many&lt;/code&gt;
et al and adds a call to
&lt;code&gt;add_autosave_association_callbacks&lt;/code&gt;), and second when
calling &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; (calls
&lt;code&gt;add_autosave_association_callbacks&lt;/code&gt; right after
defining the nested attributes setter). So in turn the save method
is overwritten with an equivalent one, and added again as a
callback.&lt;/p&gt;
&lt;p&gt;I'm not sure what would be the best way to fix this (or whether
this is actually intended behavior). The call to
&lt;code&gt;add_autosave_association_callbacks&lt;/code&gt; should probably be
dropped from &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; since it
&lt;em&gt;requires&lt;/em&gt; an association anyway. Otherwise a simple
&lt;code&gt;return if method_defined? save_method&lt;/code&gt; at the top of
&lt;code&gt;add_autosave_association_callbacks&lt;/code&gt; works, but only
cures the symptom.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-30T21:56:13+00:00</created-at>
      <creator-id type="integer">24643</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3525</number>
      <permalink>nested-attributes-are-saved-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>attributes nested</tag>
      <title>Nested attributes are saved twice</title>
      <updated-at type="datetime">2009-11-30T21:56:19+00:00</updated-at>
      <user-id type="integer">24643</user-id>
      <version type="integer">1</version>
      <user-name>gix</user-name>
      <creator-name>gix</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3525</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I confirm the exact same problem on 2.3.5 however the exact same code 2.3.4 works</body>
      <body-html>&lt;div&gt;&lt;p&gt;I confirm the exact same problem on 2.3.5 however the exact same
code 2.3.4 works&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-15T17:30:48+00:00</created-at>
      <creator-id type="integer">24643</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3525</number>
      <permalink>nested-attributes-are-saved-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>attributes nested</tag>
      <title>Nested attributes are saved twice</title>
      <updated-at type="datetime">2009-12-15T17:30:50+00:00</updated-at>
      <user-id type="integer">10884</user-id>
      <version type="integer">2</version>
      <user-name>Cyrille</user-name>
      <creator-name>gix</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3525</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am also seeing this problem in 2.3.5</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am also seeing this problem in 2.3.5&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-15T21:18:32+00:00</created-at>
      <creator-id type="integer">24643</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3525</number>
      <permalink>nested-attributes-are-saved-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>attributes nested</tag>
      <title>Nested attributes are saved twice</title>
      <updated-at type="datetime">2009-12-15T21:18:36+00:00</updated-at>
      <user-id type="integer">13453</user-id>
      <version type="integer">3</version>
      <user-name>Stephen Heuer</user-name>
      <creator-name>gix</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3525</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T19:37:12+00:00</created-at>
      <creator-id type="integer">24643</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3525</number>
      <permalink>nested-attributes-are-saved-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>attributes nested</tag>
      <title>Nested attributes are saved twice</title>
      <updated-at type="datetime">2009-12-30T19:37:17+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">4</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>gix</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3525</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-30T19:37:21+00:00</created-at>
      <creator-id type="integer">24643</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3525</number>
      <permalink>nested-attributes-are-saved-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>attributes nested</tag>
      <title>Nested attributes are saved twice</title>
      <updated-at type="datetime">2009-12-30T19:37:23+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">5</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>gix</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3525</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This has recently been fixed on 2-3-stable and master. For instance: http://github.com/rails/rails/commit/146a7505680cbb646c0b9d55dca7cc8494b36e47

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;This has recently been fixed on 2-3-stable and master. For
instance: &lt;a href=
&quot;http://github.com/rails/rails/commit/146a7505680cbb646c0b9d55dca7cc8494b36e47&quot;&gt;
http://github.com/rails/rails/commit/146a7505680cbb646c0b9d55dca7cc...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-08T11:07:53+00:00</created-at>
      <creator-id type="integer">24643</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3525</number>
      <permalink>nested-attributes-are-saved-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>attributes nested</tag>
      <title>Nested attributes are saved twice</title>
      <updated-at type="datetime">2010-01-08T11:07:55+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">6</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>gix</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3525</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>How can I get that applied immediately? I stuck on this already :(</body>
      <body-html>&lt;div&gt;&lt;p&gt;How can I get that applied immediately? I stuck on this already
:(&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-13T09:30:31+00:00</created-at>
      <creator-id type="integer">24643</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3525</number>
      <permalink>nested-attributes-are-saved-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>attributes nested</tag>
      <title>Nested attributes are saved twice</title>
      <updated-at type="datetime">2010-01-13T09:30:33+00:00</updated-at>
      <user-id type="integer">11788</user-id>
      <version type="integer">7</version>
      <user-name>goodwill</user-name>
      <creator-name>gix</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3525</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@goodwill You'll have to use &#8216;edge&#8217; rails. If this is a 2.3.x app, you could simply do a checkout of the repo and 2-3-stable branch in ./vendor/rails. If you're on master see this: http://yehudakatz.com/2009/12/31/spinning-up-a-new-rails-app

Any more questions should go to the rubyonrails-talk mailing list: http://groups.google.com/group/rubyonrails-talk</body>
      <body-html>&lt;div&gt;&lt;p&gt;@goodwill You'll have to use &amp;#8216;edge&amp;#8217; rails. If this
is a 2.3.x app, you could simply do a checkout of the repo and
2-3-stable branch in ./vendor/rails. If you're on master see this:
&lt;a href=
&quot;http://yehudakatz.com/2009/12/31/spinning-up-a-new-rails-app&quot;&gt;http://yehudakatz.com/2009/12/31/spinning-up-a-new-rails-app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Any more questions should go to the rubyonrails-talk mailing
list: &lt;a href=
&quot;http://groups.google.com/group/rubyonrails-talk&quot;&gt;http://groups.google.com/group/rubyonrails-talk&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-13T09:46:45+00:00</created-at>
      <creator-id type="integer">24643</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3525</number>
      <permalink>nested-attributes-are-saved-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>attributes nested</tag>
      <title>Nested attributes are saved twice</title>
      <updated-at type="datetime">2010-01-13T09:46:47+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">8</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>gix</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3525</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
