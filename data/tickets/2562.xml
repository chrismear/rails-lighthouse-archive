<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-24T22:15:16+01:00</created-at>
  <creator-id type="integer">22233</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2562</number>
  <permalink>postgres-schemadumper-does-not-preserve-composite-index-column-order</permalink>
  <priority type="integer">1704</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag nil="true"></tag>
  <title>Postgres SchemaDumper does not preserve composite index column order</title>
  <updated-at type="datetime">2009-04-24T22:43:30+01:00</updated-at>
  <user-id type="integer">7211</user-id>
  <version type="integer">3</version>
  <user-name>CancelProfileIsBroken</user-name>
  <creator-name>Kevin Menard</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2562</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The schema dumper used by the PostgreSQL adapter does not preserve column order for composite keys.  It issues a query against internal Postgres tables and does no further sorting.  While this leaves it up to the DB to decide, I've found that Postgres 8.3 on MacOS X seems to return in attribute number ascending order.  So, the problem wouldn't appear if every subsequent column in the index appeared later than all previous ones in the table definition.  If the columns used in the index are not in the same sequential ordering as the table definition, the dumped &quot;add_index&quot; line is wrong.

While looking into this code, too, I noticed an artificial upper limit on the number of columns in composite indices.  As of 8.3, Postgres allows up to 32 columns.  The PostgreSQL adapter, however, caps this at 10.</original-body>
  <latest-body>The schema dumper used by the PostgreSQL adapter does not preserve column order for composite keys.  It issues a query against internal Postgres tables and does no further sorting.  While this leaves it up to the DB to decide, I've found that Postgres 8.3 on MacOS X seems to return in attribute number ascending order.  So, the problem wouldn't appear if every subsequent column in the index appeared later than all previous ones in the table definition.  If the columns used in the index are not in the same sequential ordering as the table definition, the dumped &quot;add_index&quot; line is wrong.

While looking into this code, too, I noticed an artificial upper limit on the number of columns in composite indices.  As of 8.3, Postgres allows up to 32 columns.  The PostgreSQL adapter, however, caps this at 10.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The schema dumper used by the PostgreSQL adapter does not
preserve column order for composite keys. It issues a query against
internal Postgres tables and does no further sorting. While this
leaves it up to the DB to decide, I've found that Postgres 8.3 on
MacOS X seems to return in attribute number ascending order. So,
the problem wouldn't appear if every subsequent column in the index
appeared later than all previous ones in the table definition. If
the columns used in the index are not in the same sequential
ordering as the table definition, the dumped &quot;add_index&quot; line is
wrong.&lt;/p&gt;
&lt;p&gt;While looking into this code, too, I noticed an artificial upper
limit on the number of columns in composite indices. As of 8.3,
Postgres allows up to 32 columns. The PostgreSQL adapter, however,
caps this at 10.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The schema dumper used by the PostgreSQL adapter does not preserve column order for composite keys.  It issues a query against internal Postgres tables and does no further sorting.  While this leaves it up to the DB to decide, I've found that Postgres 8.3 on MacOS X seems to return in attribute number ascending order.  So, the problem wouldn't appear if every subsequent column in the index appeared later than all previous ones in the table definition.  If the columns used in the index are not in the same sequential ordering as the table definition, the dumped &quot;add_index&quot; line is wrong.

While looking into this code, too, I noticed an artificial upper limit on the number of columns in composite indices.  As of 8.3, Postgres allows up to 32 columns.  The PostgreSQL adapter, however, caps this at 10.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The schema dumper used by the PostgreSQL adapter does not
preserve column order for composite keys. It issues a query against
internal Postgres tables and does no further sorting. While this
leaves it up to the DB to decide, I've found that Postgres 8.3 on
MacOS X seems to return in attribute number ascending order. So,
the problem wouldn't appear if every subsequent column in the index
appeared later than all previous ones in the table definition. If
the columns used in the index are not in the same sequential
ordering as the table definition, the dumped &quot;add_index&quot; line is
wrong.&lt;/p&gt;
&lt;p&gt;While looking into this code, too, I noticed an artificial upper
limit on the number of columns in composite indices. As of 8.3,
Postgres allows up to 32 columns. The PostgreSQL adapter, however,
caps this at 10.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-24T22:15:16+01:00</created-at>
      <creator-id type="integer">22233</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2562</number>
      <permalink>postgres-schemadumper-does-not-preserve-composite-index-column-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Postgres SchemaDumper does not preserve composite index column order</title>
      <updated-at type="datetime">2009-04-24T22:15:19+01:00</updated-at>
      <user-id type="integer">22233</user-id>
      <version type="integer">1</version>
      <user-name>Kevin Menard</user-name>
      <creator-name>Kevin Menard</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2562</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Nevermind.  This is a duplicate of #2515 and has already been fixed.  I came across the problem before that ticket was opened and didn't get to really investigate until just now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Nevermind. This is a duplicate of &lt;a href=&quot;/projects/8994/tickets/2515&quot; title=&quot;Ticket #2515&quot;&gt;#2515&lt;/a&gt; and
has already been fixed. I came across the problem before that
ticket was opened and didn't get to really investigate until just
now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-24T22:31:45+01:00</created-at>
      <creator-id type="integer">22233</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2562</number>
      <permalink>postgres-schemadumper-does-not-preserve-composite-index-column-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Postgres SchemaDumper does not preserve composite index column order</title>
      <updated-at type="datetime">2009-04-24T22:31:50+01:00</updated-at>
      <user-id type="integer">22233</user-id>
      <version type="integer">2</version>
      <user-name>Kevin Menard</user-name>
      <creator-name>Kevin Menard</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2562</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-24T22:43:25+01:00</created-at>
      <creator-id type="integer">22233</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2562</number>
      <permalink>postgres-schemadumper-does-not-preserve-composite-index-column-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag nil="true"></tag>
      <title>Postgres SchemaDumper does not preserve composite index column order</title>
      <updated-at type="datetime">2009-04-24T22:43:30+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Kevin Menard</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2562</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
