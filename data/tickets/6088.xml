<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-28T03:36:03+00:00</created-at>
  <creator-id type="integer">127216</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6088</number>
  <permalink>possible-bug-with-eager-loading-github-sample-included</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Possible Bug with Eager Loading (github sample included)</title>
  <updated-at type="datetime">2011-03-29T01:02:05+01:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">4</version>
  <user-name>rails</user-name>
  <creator-name>Ryan Detert</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6088</url>
  <priority-name nil="true"></priority-name>
  <original-body>I'm having problems with eager loading. I've posted a sample project here: 

https://github.com/rdetert/Rails-Test/tree/master/eager_loading/

From the README:
---
I'm using an alternative to the built-in polymorphism to take advantage of DB level integrity.

Assume another table called posts that has a column, `posts`.`commentable_id`

I AM TRYING TO EAGERLY LOAD ALL COMMENTS GIVEN TO A POST TOPIC, INCLUDING USER INFO AND WHETHER OR NOT THEY HAVE VOTED ON THE COMMENT.


##To Install:##

@@@ 
$ rake db:migrate
$ rake db:seed

$ rails c
@@@

@@@
ruby-1.8.7-p299 &gt; Comment.with_eager_votes(User.first).with_eager_userdata.where(:commentable_id =&gt; 1).to_sql

 =&gt; &quot;SELECT * FROM \&quot;comments\&quot; INNER JOIN \&quot;votable\&quot; ON \&quot;votable\&quot;.\&quot;id\&quot; = \&quot;comments\&quot;.\&quot;votable_id\&quot; INNER JOIN \&quot;users\&quot; ON \&quot;users\&quot;.\&quot;id\&quot; = \&quot;comments\&quot;.\&quot;user_id\&quot; LEFT OUTER JOIN votes ON votes.votable_id = votable.id AND votes.user_id=1 WHERE (\&quot;comments\&quot;.\&quot;commentable_id\&quot; = 1)&quot; 
@@@

This is the correct query and returns the correct data set
 However, when votes are null, it does not behaves as expected. The eagerly loaded associations are also null.
 
 IN THIS RESULT SET, THE USER HAS NOT VOTED ONLY ON THE FIRST COMMENT.

@@@
ruby-1.8.7-p299 &gt; @comments = Comment.with_eager_votes(User.first).with_eager_userdata.where(:commentable_id =&gt; 1)

ruby-1.8.7-p299 &gt; @comments.first.user       # =&gt; WRONG
 =&gt; nil 

ruby-1.8.7-p299 &gt; @comments.second.user
 =&gt; #&lt;User id: 1, name: &quot;Big Chief&quot;, created_at: &quot;2010-11-30 10:51:19&quot;, updated_at: &quot;2010-11-30 10:51:19&quot;&gt; 

ruby-1.8.7-p299 &gt; @comments.third.user
 =&gt; #&lt;User id: 1, name: &quot;Big Chief&quot;, created_at: &quot;2010-11-30 10:51:19&quot;, updated_at: &quot;2010-11-30 10:51:19&quot;&gt; 

ruby-1.8.7-p299 &gt; 
@@@</original-body>
  <latest-body>I'm having problems with eager loading. I've posted a sample project here: 

https://github.com/rdetert/Rails-Test/tree/master/eager_loading/

From the README:
---
I'm using an alternative to the built-in polymorphism to take advantage of DB level integrity.

Assume another table called posts that has a column, `posts`.`commentable_id`

I AM TRYING TO EAGERLY LOAD ALL COMMENTS GIVEN TO A POST TOPIC, INCLUDING USER INFO AND WHETHER OR NOT THEY HAVE VOTED ON THE COMMENT.


##To Install:##

@@@ 
$ rake db:migrate
$ rake db:seed

$ rails c
@@@

@@@
ruby-1.8.7-p299 &gt; Comment.with_eager_votes(User.first).with_eager_userdata.where(:commentable_id =&gt; 1).to_sql

 =&gt; &quot;SELECT * FROM \&quot;comments\&quot; INNER JOIN \&quot;votable\&quot; ON \&quot;votable\&quot;.\&quot;id\&quot; = \&quot;comments\&quot;.\&quot;votable_id\&quot; INNER JOIN \&quot;users\&quot; ON \&quot;users\&quot;.\&quot;id\&quot; = \&quot;comments\&quot;.\&quot;user_id\&quot; LEFT OUTER JOIN votes ON votes.votable_id = votable.id AND votes.user_id=1 WHERE (\&quot;comments\&quot;.\&quot;commentable_id\&quot; = 1)&quot; 
@@@

This is the correct query and returns the correct data set
 However, when votes are null, it does not behaves as expected. The eagerly loaded associations are also null.
 
 IN THIS RESULT SET, THE USER HAS NOT VOTED ONLY ON THE FIRST COMMENT.

@@@
ruby-1.8.7-p299 &gt; @comments = Comment.with_eager_votes(User.first).with_eager_userdata.where(:commentable_id =&gt; 1)

ruby-1.8.7-p299 &gt; @comments.first.user       # =&gt; WRONG
 =&gt; nil 

ruby-1.8.7-p299 &gt; @comments.second.user
 =&gt; #&lt;User id: 1, name: &quot;Big Chief&quot;, created_at: &quot;2010-11-30 10:51:19&quot;, updated_at: &quot;2010-11-30 10:51:19&quot;&gt; 

ruby-1.8.7-p299 &gt; @comments.third.user
 =&gt; #&lt;User id: 1, name: &quot;Big Chief&quot;, created_at: &quot;2010-11-30 10:51:19&quot;, updated_at: &quot;2010-11-30 10:51:19&quot;&gt; 

ruby-1.8.7-p299 &gt; 
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm having problems with eager loading. I've posted a sample
project here:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rdetert/Rails-Test/tree/master/eager_loading/&quot;&gt;https://github.com/rdetert/Rails-Test/tree/master/eager_loading/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;From the README:&lt;/h2&gt;
&lt;p&gt;I'm using an alternative to the built-in polymorphism to take
advantage of DB level integrity.&lt;/p&gt;
&lt;p&gt;Assume another table called posts that has a column,
&lt;code&gt;posts&lt;/code&gt;.&lt;code&gt;commentable_id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I AM TRYING TO EAGERLY LOAD ALL COMMENTS GIVEN TO A POST TOPIC,
INCLUDING USER INFO AND WHETHER OR NOT THEY HAVE VOTED ON THE
COMMENT.&lt;/p&gt;
&lt;h2&gt;To Install:&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;$ rake db:migrate
$ rake db:seed

$ rails c&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.8.7-p299 &amp;gt; Comment.with_eager_votes(User.first).with_eager_userdata.where(:commentable_id =&amp;gt; 1).to_sql

 =&amp;gt; &quot;SELECT * FROM \&quot;comments\&quot; INNER JOIN \&quot;votable\&quot; ON \&quot;votable\&quot;.\&quot;id\&quot; = \&quot;comments\&quot;.\&quot;votable_id\&quot; INNER JOIN \&quot;users\&quot; ON \&quot;users\&quot;.\&quot;id\&quot; = \&quot;comments\&quot;.\&quot;user_id\&quot; LEFT OUTER JOIN votes ON votes.votable_id = votable.id AND votes.user_id=1 WHERE (\&quot;comments\&quot;.\&quot;commentable_id\&quot; = 1)&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the correct query and returns the correct data set&lt;br&gt;
However, when votes are null, it does not behaves as expected. The
eagerly loaded associations are also null.&lt;/p&gt;
&lt;p&gt;IN THIS RESULT SET, THE USER HAS NOT VOTED ONLY ON THE FIRST
COMMENT.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.8.7-p299 &amp;gt; @comments = Comment.with_eager_votes(User.first).with_eager_userdata.where(:commentable_id =&amp;gt; 1)

ruby-1.8.7-p299 &amp;gt; @comments.first.user       # =&amp;gt; WRONG
 =&amp;gt; nil 

ruby-1.8.7-p299 &amp;gt; @comments.second.user
 =&amp;gt; #&amp;lt;User id: 1, name: &quot;Big Chief&quot;, created_at: &quot;2010-11-30 10:51:19&quot;, updated_at: &quot;2010-11-30 10:51:19&quot;&amp;gt; 

ruby-1.8.7-p299 &amp;gt; @comments.third.user
 =&amp;gt; #&amp;lt;User id: 1, name: &quot;Big Chief&quot;, created_at: &quot;2010-11-30 10:51:19&quot;, updated_at: &quot;2010-11-30 10:51:19&quot;&amp;gt; 

ruby-1.8.7-p299 &amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm having problems with eager loading. I've posted a sample project here: 

https://github.com/rdetert/Rails-Test/tree/master/eager_loading/

From the README:
---
I'm using an alternative to the built-in polymorphism to take advantage of DB level integrity.

Assume another table called posts that has a column, `posts`.`commentable_id`

I AM TRYING TO EAGERLY LOAD ALL COMMENTS GIVEN TO A POST TOPIC, INCLUDING USER INFO AND WHETHER OR NOT THEY HAVE VOTED ON THE COMMENT.


##To Install:##

@@@ 
$ rake db:migrate
$ rake db:seed

$ rails c
@@@

@@@
ruby-1.8.7-p299 &gt; Comment.with_eager_votes(User.first).with_eager_userdata.where(:commentable_id =&gt; 1).to_sql

 =&gt; &quot;SELECT * FROM \&quot;comments\&quot; INNER JOIN \&quot;votable\&quot; ON \&quot;votable\&quot;.\&quot;id\&quot; = \&quot;comments\&quot;.\&quot;votable_id\&quot; INNER JOIN \&quot;users\&quot; ON \&quot;users\&quot;.\&quot;id\&quot; = \&quot;comments\&quot;.\&quot;user_id\&quot; LEFT OUTER JOIN votes ON votes.votable_id = votable.id AND votes.user_id=1 WHERE (\&quot;comments\&quot;.\&quot;commentable_id\&quot; = 1)&quot; 
@@@

This is the correct query and returns the correct data set
 However, when votes are null, it does not behaves as expected. The eagerly loaded associations are also null.
 
 IN THIS RESULT SET, THE USER HAS NOT VOTED ONLY ON THE FIRST COMMENT.

@@@
ruby-1.8.7-p299 &gt; @comments = Comment.with_eager_votes(User.first).with_eager_userdata.where(:commentable_id =&gt; 1)

ruby-1.8.7-p299 &gt; @comments.first.user       # =&gt; WRONG
 =&gt; nil 

ruby-1.8.7-p299 &gt; @comments.second.user
 =&gt; #&lt;User id: 1, name: &quot;Big Chief&quot;, created_at: &quot;2010-11-30 10:51:19&quot;, updated_at: &quot;2010-11-30 10:51:19&quot;&gt; 

ruby-1.8.7-p299 &gt; @comments.third.user
 =&gt; #&lt;User id: 1, name: &quot;Big Chief&quot;, created_at: &quot;2010-11-30 10:51:19&quot;, updated_at: &quot;2010-11-30 10:51:19&quot;&gt; 

ruby-1.8.7-p299 &gt; 
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm having problems with eager loading. I've posted a sample
project here:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rdetert/Rails-Test/tree/master/eager_loading/&quot;&gt;https://github.com/rdetert/Rails-Test/tree/master/eager_loading/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;From the README:&lt;/h2&gt;
&lt;p&gt;I'm using an alternative to the built-in polymorphism to take
advantage of DB level integrity.&lt;/p&gt;
&lt;p&gt;Assume another table called posts that has a column,
&lt;code&gt;posts&lt;/code&gt;.&lt;code&gt;commentable_id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I AM TRYING TO EAGERLY LOAD ALL COMMENTS GIVEN TO A POST TOPIC,
INCLUDING USER INFO AND WHETHER OR NOT THEY HAVE VOTED ON THE
COMMENT.&lt;/p&gt;
&lt;h2&gt;To Install:&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;$ rake db:migrate
$ rake db:seed

$ rails c&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.8.7-p299 &amp;gt; Comment.with_eager_votes(User.first).with_eager_userdata.where(:commentable_id =&amp;gt; 1).to_sql

 =&amp;gt; &quot;SELECT * FROM \&quot;comments\&quot; INNER JOIN \&quot;votable\&quot; ON \&quot;votable\&quot;.\&quot;id\&quot; = \&quot;comments\&quot;.\&quot;votable_id\&quot; INNER JOIN \&quot;users\&quot; ON \&quot;users\&quot;.\&quot;id\&quot; = \&quot;comments\&quot;.\&quot;user_id\&quot; LEFT OUTER JOIN votes ON votes.votable_id = votable.id AND votes.user_id=1 WHERE (\&quot;comments\&quot;.\&quot;commentable_id\&quot; = 1)&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the correct query and returns the correct data set&lt;br&gt;
However, when votes are null, it does not behaves as expected. The
eagerly loaded associations are also null.&lt;/p&gt;
&lt;p&gt;IN THIS RESULT SET, THE USER HAS NOT VOTED ONLY ON THE FIRST
COMMENT.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.8.7-p299 &amp;gt; @comments = Comment.with_eager_votes(User.first).with_eager_userdata.where(:commentable_id =&amp;gt; 1)

ruby-1.8.7-p299 &amp;gt; @comments.first.user       # =&amp;gt; WRONG
 =&amp;gt; nil 

ruby-1.8.7-p299 &amp;gt; @comments.second.user
 =&amp;gt; #&amp;lt;User id: 1, name: &quot;Big Chief&quot;, created_at: &quot;2010-11-30 10:51:19&quot;, updated_at: &quot;2010-11-30 10:51:19&quot;&amp;gt; 

ruby-1.8.7-p299 &amp;gt; @comments.third.user
 =&amp;gt; #&amp;lt;User id: 1, name: &quot;Big Chief&quot;, created_at: &quot;2010-11-30 10:51:19&quot;, updated_at: &quot;2010-11-30 10:51:19&quot;&amp;gt; 

ruby-1.8.7-p299 &amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T11:26:06+00:00</created-at>
      <creator-id type="integer">127216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6088</number>
      <permalink>possible-bug-with-eager-loading-github-sample-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Possible Bug with Eager Loading (github sample included)</title>
      <updated-at type="datetime">2010-11-30T11:26:08+00:00</updated-at>
      <user-id type="integer">127216</user-id>
      <version type="integer">1</version>
      <user-name>Ryan Detert</user-name>
      <creator-name>Ryan Detert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6088</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;a href=http://www.beautiful-ugg.com &gt;ugg nederland&lt;/a&gt; with a legendary brand, first glimpse of &lt;a href=http://www.beautiful-ugg.com &gt;goedkope ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg laarzen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg australia nederland&lt;/a&gt;for both &lt;a href=http://www.beautiful-ugg.com &gt;ugg store rotterdam&lt;/a&gt;
&lt;a href=http://www.beautiful-ugg.com &gt;ugg schoenen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg kopen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg amsterdam&lt;/a&gt;beer-drinking cartoon appearance is not too cold, and it is a style boots, since many euramerican star street pats have sufficient terengganu Ugg snow handsome appearance and fashionable boots and the earth, Ugg sweep of popular wind continues to explode, &lt;a href=http://www.beautiful-ugg.com &gt;ugg bestellen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg online kopen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg online bestellen&lt;/a&gt; Ugg there are many fans.

About Australia Ugg sheep leather &lt;a href=http://www.beautiful-ugg.com &gt;kinder ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg goedkoop&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg maten&lt;/a&gt; history dates back to 1978, called a Brian Smith Australian young surfing member once took a batch of sheep leather boots to America. In the past years, Australia craftsman people always habits in New Zealand seaside sewing sheep leather boots, however, is the young man with the business mind bold attempt will this Australian traditional products to the United States ugg boots sale.

At that time, he only a few several pairs &lt;a href=http://www.beautiful-ugg.com &gt;ugg nl&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg in nederland&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;nep ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;echte ugg&lt;/a&gt; leather boots, with full of passion and self-confidence, began in New York street hawkers. However, the start, he has not been so good luck, one day come down, did not sell a pair of &lt;a href=http://www.beautiful-ugg.com &gt;goedkoopste ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg goedkoopste&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg voor kids&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;maten ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;online ugg bestellen&lt;/a&gt; However, he did not lose heart, even a little stubborn think sure to succeed. He believes that, in the U.S. market will have a belong to his boots of heaven and earth.

So he decided to go to California western, to find opportunities. When he arrived at the destination and found there has been part of that such a man as he, with similar sheep leather boots at the seaside sale. Here he head round business into five customer sold 48 boots. Of course, can say is California developed surfing market attracted these from Australia boutique sheep leather boots. Australia &lt;a href=http://www.beautiful-ugg.com &gt;laarzen ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg amerika&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;uggs for cheap&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg warmer schoenen&lt;/a&gt; sheep leather boots begins to become every surfers landed necessary article.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http:&quot;&gt;ugg nederland with a legendary brand, first
glimpse of &lt;a href=&quot;http:&quot;&gt;goedkope ugg&lt;a href=&quot;http:&quot;&gt;ugg
laarzen&lt;a href=&quot;http:&quot;&gt;ugg australia nederlandfor both &lt;a href=
&quot;http:&quot;&gt;ugg store rotterdam&lt;br&gt;
&lt;a href=&quot;http:&quot;&gt;ugg schoenen&lt;a href=&quot;http:&quot;&gt;ugg kopen&lt;a href=
&quot;http:&quot;&gt;ugg amsterdambeer-drinking cartoon appearance is not too
cold, and it is a style boots, since many euramerican star street
pats have sufficient terengganu Ugg snow handsome appearance and
fashionable boots and the earth, Ugg sweep of popular wind
continues to explode, &lt;a href=&quot;http:&quot;&gt;ugg bestellen&lt;a href=
&quot;http:&quot;&gt;ugg online kopen&lt;a href=&quot;http:&quot;&gt;ugg online bestellen Ugg
there are many fans.&lt;/p&gt;
&lt;p&gt;About Australia Ugg sheep leather &lt;a href=&quot;http:&quot;&gt;kinder
ugg&lt;a href=&quot;http:&quot;&gt;ugg goedkoop&lt;a href=&quot;http:&quot;&gt;ugg maten history
dates back to 1978, called a Brian Smith Australian young surfing
member once took a batch of sheep leather boots to America. In the
past years, Australia craftsman people always habits in New Zealand
seaside sewing sheep leather boots, however, is the young man with
the business mind bold attempt will this Australian traditional
products to the United States ugg boots sale.&lt;/p&gt;
&lt;p&gt;At that time, he only a few several pairs &lt;a href=&quot;http:&quot;&gt;ugg
nl&lt;a href=&quot;http:&quot;&gt;ugg in nederland&lt;a href=&quot;http:&quot;&gt;nep ugg&lt;a href=
&quot;http:&quot;&gt;echte ugg leather boots, with full of passion and
self-confidence, began in New York street hawkers. However, the
start, he has not been so good luck, one day come down, did not
sell a pair of &lt;a href=&quot;http:&quot;&gt;goedkoopste ugg&lt;a href=&quot;http:&quot;&gt;ugg
goedkoopste&lt;a href=&quot;http:&quot;&gt;ugg voor kids&lt;a href=&quot;http:&quot;&gt;maten
ugg&lt;a href=&quot;http:&quot;&gt;online ugg bestellen However, he did not lose
heart, even a little stubborn think sure to succeed. He believes
that, in the U.S. market will have a belong to his boots of heaven
and earth.&lt;/p&gt;
&lt;p&gt;So he decided to go to California western, to find
opportunities. When he arrived at the destination and found there
has been part of that such a man as he, with similar sheep leather
boots at the seaside sale. Here he head round business into five
customer sold 48 boots. Of course, can say is California developed
surfing market attracted these from Australia boutique sheep
leather boots. Australia &lt;a href=&quot;http:&quot;&gt;laarzen ugg&lt;a href=
&quot;http:&quot;&gt;ugg amerika&lt;a href=&quot;http:&quot;&gt;uggs for cheap&lt;a href=
&quot;http:&quot;&gt;ugg warmer schoenen sheep leather boots begins to become
every surfers landed necessary article.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-28T02:02:55+00:00</created-at>
      <creator-id type="integer">127216</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6088</number>
      <permalink>possible-bug-with-eager-loading-github-sample-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Possible Bug with Eager Loading (github sample included)</title>
      <updated-at type="datetime">2010-12-28T03:36:03+00:00</updated-at>
      <user-id type="integer">130424</user-id>
      <version type="integer">2</version>
      <user-name>tdtgrdhg</user-name>
      <creator-name>Ryan Detert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6088</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-29T01:00:18+01:00</created-at>
      <creator-id type="integer">127216</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6088</number>
      <permalink>possible-bug-with-eager-loading-github-sample-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Possible Bug with Eager Loading (github sample included)</title>
      <updated-at type="datetime">2011-03-29T01:02:05+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Ryan Detert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6088</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-29T01:00:18+01:00</created-at>
      <creator-id type="integer">127216</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6088</number>
      <permalink>possible-bug-with-eager-loading-github-sample-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Possible Bug with Eager Loading (github sample included)</title>
      <updated-at type="datetime">2011-03-29T01:02:01+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">4</version>
      <user-name>rails</user-name>
      <creator-name>Ryan Detert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6088</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
