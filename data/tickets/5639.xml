<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-09-16T11:10:52+01:00</created-at>
  <creator-id type="integer">102627</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5639</number>
  <permalink>define_attribute_methods-race-leads-to-method-missing-exception-while-creating-objects-conccurently</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>define_attribute_methods race leads to method missing exception while creating objects conccurently</title>
  <updated-at type="datetime">2011-02-02T16:49:54+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>lcars</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5639</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hi, we are experiencing random 'undefined method' errors while creating objects in an heavily threaded environment, here's an example:

caught exception in vendor/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/attribute_method
s.rb:255:in `method_missing'

undefined method `uuid=' for #&lt;OurObject:0xdef731&gt; ... etc etc

with random I mean very rarely and apparently only once after application startup. In OurObject 'uuid' is the primary key. The code which leads to the exception is the following:

o = new(params)
o.uuid = params['uuid']

We think this might be a race in how method_missing override (in attribute_methods.rb) checks if all attribute methods have been defined before invoking super on ruby's own method_missing.

If we check the define_attribute_methods we see the following:

  def define_attribute_methods
    return if generated_methods?

    ...
  end

This means that define_attribute_methods returns if any number (even just one out of hunders ) of methods have been added to the @generated_methods instance set for the object columns.

Considering this along with the fact that these are all class methods without mutex protection, is it possible in an heavily threaded environment for two objects of the same class, in separate threads, to invoke define_attribute_methods at the same time making one of the two bailing out prematurely because generated_methods? was satisfied that at least one attribute method was set (by the other thread) ?

This would lead to method_missing skipping this conditional:

  if !self.class.generated_methods?
    self.class.define_attribute_methods
    if self.class.generated_methods.include?(method_name)
      return self.send(method_id, *args, &amp;block)
    end
  end

...and eventually hitting the super which would cause the exception.

Unfortunately I don't have time to create a test for this.

Thanks</original-body>
  <latest-body>Hi, we are experiencing random 'undefined method' errors while creating objects in an heavily threaded environment, here's an example:

caught exception in vendor/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/attribute_method
s.rb:255:in `method_missing'

undefined method `uuid=' for #&lt;OurObject:0xdef731&gt; ... etc etc

with random I mean very rarely and apparently only once after application startup. In OurObject 'uuid' is the primary key. The code which leads to the exception is the following:

o = new(params)
o.uuid = params['uuid']

We think this might be a race in how method_missing override (in attribute_methods.rb) checks if all attribute methods have been defined before invoking super on ruby's own method_missing.

If we check the define_attribute_methods we see the following:

  def define_attribute_methods
    return if generated_methods?

    ...
  end

This means that define_attribute_methods returns if any number (even just one out of hunders ) of methods have been added to the @generated_methods instance set for the object columns.

Considering this along with the fact that these are all class methods without mutex protection, is it possible in an heavily threaded environment for two objects of the same class, in separate threads, to invoke define_attribute_methods at the same time making one of the two bailing out prematurely because generated_methods? was satisfied that at least one attribute method was set (by the other thread) ?

This would lead to method_missing skipping this conditional:

  if !self.class.generated_methods?
    self.class.define_attribute_methods
    if self.class.generated_methods.include?(method_name)
      return self.send(method_id, *args, &amp;block)
    end
  end

...and eventually hitting the super which would cause the exception.

Unfortunately I don't have time to create a test for this.

Thanks</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi, we are experiencing random 'undefined method' errors while
creating objects in an heavily threaded environment, here's an
example:&lt;/p&gt;
&lt;p&gt;caught exception in
vendor/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/attribute_method&lt;br&gt;
s.rb:255:in &lt;code&gt;method_missing'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;undefined method &lt;code&gt;uuid=' for #&amp;lt;OurObject:0xdef731&amp;gt;
... etc etc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with random I mean very rarely and apparently only once after
application startup. In OurObject 'uuid' is the primary key. The
code which leads to the exception is the following:&lt;/p&gt;
&lt;p&gt;o = new(params)&lt;br&gt;
o.uuid = params['uuid']&lt;/p&gt;
&lt;p&gt;We think this might be a race in how method_missing override (in
attribute_methods.rb) checks if all attribute methods have been
defined before invoking super on ruby's own method_missing.&lt;/p&gt;
&lt;p&gt;If we check the define_attribute_methods we see the
following:&lt;/p&gt;
&lt;p&gt;def define_attribute_methods&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;return if generated_methods?

...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;This means that define_attribute_methods returns if any number
(even just one out of hunders ) of methods have been added to the
@generated_methods instance set for the object columns.&lt;/p&gt;
&lt;p&gt;Considering this along with the fact that these are all class
methods without mutex protection, is it possible in an heavily
threaded environment for two objects of the same class, in separate
threads, to invoke define_attribute_methods at the same time making
one of the two bailing out prematurely because generated_methods?
was satisfied that at least one attribute method was set (by the
other thread) ?&lt;/p&gt;
&lt;p&gt;This would lead to method_missing skipping this conditional:&lt;/p&gt;
&lt;p&gt;if !self.class.generated_methods?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;self.class.define_attribute_methods
if self.class.generated_methods.include?(method_name)
  return self.send(method_id, *args, &amp;amp;block)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;...and eventually hitting the super which would cause the
exception.&lt;/p&gt;
&lt;p&gt;Unfortunately I don't have time to create a test for this.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi, we are experiencing random 'undefined method' errors while creating objects in an heavily threaded environment, here's an example:

caught exception in vendor/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/attribute_method
s.rb:255:in `method_missing'

undefined method `uuid=' for #&lt;OurObject:0xdef731&gt; ... etc etc

with random I mean very rarely and apparently only once after application startup. In OurObject 'uuid' is the primary key. The code which leads to the exception is the following:

o = new(params)
o.uuid = params['uuid']

We think this might be a race in how method_missing override (in attribute_methods.rb) checks if all attribute methods have been defined before invoking super on ruby's own method_missing.

If we check the define_attribute_methods we see the following:

  def define_attribute_methods
    return if generated_methods?

    ...
  end

This means that define_attribute_methods returns if any number (even just one out of hunders ) of methods have been added to the @generated_methods instance set for the object columns.

Considering this along with the fact that these are all class methods without mutex protection, is it possible in an heavily threaded environment for two objects of the same class, in separate threads, to invoke define_attribute_methods at the same time making one of the two bailing out prematurely because generated_methods? was satisfied that at least one attribute method was set (by the other thread) ?

This would lead to method_missing skipping this conditional:

  if !self.class.generated_methods?
    self.class.define_attribute_methods
    if self.class.generated_methods.include?(method_name)
      return self.send(method_id, *args, &amp;block)
    end
  end

...and eventually hitting the super which would cause the exception.

Unfortunately I don't have time to create a test for this.

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi, we are experiencing random 'undefined method' errors while
creating objects in an heavily threaded environment, here's an
example:&lt;/p&gt;
&lt;p&gt;caught exception in
vendor/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/attribute_method&lt;br&gt;
s.rb:255:in &lt;code&gt;method_missing'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;undefined method &lt;code&gt;uuid=' for #&amp;lt;OurObject:0xdef731&amp;gt;
... etc etc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with random I mean very rarely and apparently only once after
application startup. In OurObject 'uuid' is the primary key. The
code which leads to the exception is the following:&lt;/p&gt;
&lt;p&gt;o = new(params)&lt;br&gt;
o.uuid = params['uuid']&lt;/p&gt;
&lt;p&gt;We think this might be a race in how method_missing override (in
attribute_methods.rb) checks if all attribute methods have been
defined before invoking super on ruby's own method_missing.&lt;/p&gt;
&lt;p&gt;If we check the define_attribute_methods we see the
following:&lt;/p&gt;
&lt;p&gt;def define_attribute_methods&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;return if generated_methods?

...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;This means that define_attribute_methods returns if any number
(even just one out of hunders ) of methods have been added to the
@generated_methods instance set for the object columns.&lt;/p&gt;
&lt;p&gt;Considering this along with the fact that these are all class
methods without mutex protection, is it possible in an heavily
threaded environment for two objects of the same class, in separate
threads, to invoke define_attribute_methods at the same time making
one of the two bailing out prematurely because generated_methods?
was satisfied that at least one attribute method was set (by the
other thread) ?&lt;/p&gt;
&lt;p&gt;This would lead to method_missing skipping this conditional:&lt;/p&gt;
&lt;p&gt;if !self.class.generated_methods?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;self.class.define_attribute_methods
if self.class.generated_methods.include?(method_name)
  return self.send(method_id, *args, &amp;amp;block)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;...and eventually hitting the super which would cause the
exception.&lt;/p&gt;
&lt;p&gt;Unfortunately I don't have time to create a test for this.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-16T11:10:52+01:00</created-at>
      <creator-id type="integer">102627</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5639</number>
      <permalink>define_attribute_methods-race-leads-to-method-missing-exception-while-creating-objects-conccurently</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>define_attribute_methods race leads to method missing exception while creating objects conccurently</title>
      <updated-at type="datetime">2010-09-16T11:10:54+01:00</updated-at>
      <user-id type="integer">102627</user-id>
      <version type="integer">1</version>
      <user-name>lcars</user-name>
      <creator-name>lcars</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5639</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:31:31+00:00</created-at>
      <creator-id type="integer">102627</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5639</number>
      <permalink>define_attribute_methods-race-leads-to-method-missing-exception-while-creating-objects-conccurently</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>define_attribute_methods race leads to method missing exception while creating objects conccurently</title>
      <updated-at type="datetime">2011-02-02T16:49:50+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>lcars</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5639</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:31:33+00:00</created-at>
      <creator-id type="integer">102627</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5639</number>
      <permalink>define_attribute_methods-race-leads-to-method-missing-exception-while-creating-objects-conccurently</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>define_attribute_methods race leads to method missing exception while creating objects conccurently</title>
      <updated-at type="datetime">2011-02-02T16:49:54+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>lcars</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5639</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
