<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-14T05:41:57+00:00</created-at>
  <creator-id type="integer">103676</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4975</number>
  <permalink>model-namespaces-and-habtm</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>active_record has_and_belongs_to_many namespace</tag>
  <title>Model Namespaces and HABTM</title>
  <updated-at type="datetime">2011-03-26T02:40:33+00:00</updated-at>
  <user-id type="integer">142823</user-id>
  <version type="integer">12</version>
  <user-name>bingbing</user-name>
  <creator-name>Samuel Kadolph</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
  <priority-name nil="true"></priority-name>
  <original-body>If you have a model under a namespace and try to set up any HABTM association with it, the join table that it tries to use by default strips out the namespace. Given all the rails 3 work to improve handling of namespaces controllers, helpers and models, I don't think this functionality is intended anymore.

Sample construction of namespaced models with HABTM:

    class Contact &lt; ActiveRecord::Base
      has_and_belongs_to_many :organizations
    end

    class Contact::Address &lt; ActiveRecord::Base
      has_and_belongs_to_many :organizations
    end
    
    class Contact::Organization &lt; ActiveRecord::Base
      has_and_belongs_to_many :addresses
      has_and_belongs_to_many :contacts
    end
    
    create_table :contacts
    create_table :contact_addresses
    create_table :contact_addresses_contact_organizations, :id =&gt; false do |t|
      t.references :address; t.references :organization
    end
    create_table :contact_organizations
    create_table :contacts_contact_organizations, :id =&gt; false do |t|
      t.references :contact; t.references :organization
    end

Because of a call to `demodulize` inside `undecorated_table_name`, the namespaces are stripped away and is the only reason the above does not work. Manually specifying `:join_table` shows perfect functionality.

@@@ ruby
irb(main):001:0&gt; c = Contact.create
=&gt; #&lt;Contact id: 1&gt;
irb(main):002:0&gt; org = c.organizations.create
=&gt; #&lt;Contact::Organization id: 1&gt;
irb(main):003:0&gt; a = org.addresses.create
=&gt; #&lt;Contact::Address id: 1&gt;
irb(main):004:0&gt; c2 = Contact.create
=&gt; #&lt;Contact id: 2&gt;
irb(main):005:0&gt; c2.organizations &lt;&lt; org
=&gt; [#&lt;Contact::Organization id: 1&gt;]
irb(main):006:0&gt; org2 = Contact::Organization.create
=&gt; #&lt;Contact::Organization id: 2&gt;
irb(main):007:0&gt; org2.addresses &lt;&lt; a
=&gt; [#&lt;Contact::Address id: 1&gt;]
irb(main):008:0&gt; c2.organizations &lt;&lt; org2
=&gt; [#&lt;Contact::Organization id: 1&gt;, #&lt;Contact::Organization id: 2&gt;]
@@@

First thoughts for a solution is to rewrite `join_table_name` in `activerecord/lib/active_record/associations.rb` to do the same as `undecorated_table_name` sans the `demodulize`.</original-body>
  <latest-body>If you have a model under a namespace and try to set up any HABTM association with it, the join table that it tries to use by default strips out the namespace. Given all the rails 3 work to improve handling of namespaces controllers, helpers and models, I don't think this functionality is intended anymore.

Sample construction of namespaced models with HABTM:

    class Contact &lt; ActiveRecord::Base
      has_and_belongs_to_many :organizations
    end

    class Contact::Address &lt; ActiveRecord::Base
      has_and_belongs_to_many :organizations
    end
    
    class Contact::Organization &lt; ActiveRecord::Base
      has_and_belongs_to_many :addresses
      has_and_belongs_to_many :contacts
    end
    
    create_table :contacts
    create_table :contact_addresses
    create_table :contact_addresses_contact_organizations, :id =&gt; false do |t|
      t.references :address; t.references :organization
    end
    create_table :contact_organizations
    create_table :contacts_contact_organizations, :id =&gt; false do |t|
      t.references :contact; t.references :organization
    end

Because of a call to `demodulize` inside `undecorated_table_name`, the namespaces are stripped away and is the only reason the above does not work. Manually specifying `:join_table` shows perfect functionality.

@@@ ruby
irb(main):001:0&gt; c = Contact.create
=&gt; #&lt;Contact id: 1&gt;
irb(main):002:0&gt; org = c.organizations.create
=&gt; #&lt;Contact::Organization id: 1&gt;
irb(main):003:0&gt; a = org.addresses.create
=&gt; #&lt;Contact::Address id: 1&gt;
irb(main):004:0&gt; c2 = Contact.create
=&gt; #&lt;Contact id: 2&gt;
irb(main):005:0&gt; c2.organizations &lt;&lt; org
=&gt; [#&lt;Contact::Organization id: 1&gt;]
irb(main):006:0&gt; org2 = Contact::Organization.create
=&gt; #&lt;Contact::Organization id: 2&gt;
irb(main):007:0&gt; org2.addresses &lt;&lt; a
=&gt; [#&lt;Contact::Address id: 1&gt;]
irb(main):008:0&gt; c2.organizations &lt;&lt; org2
=&gt; [#&lt;Contact::Organization id: 1&gt;, #&lt;Contact::Organization id: 2&gt;]
@@@

First thoughts for a solution is to rewrite `join_table_name` in `activerecord/lib/active_record/associations.rb` to do the same as `undecorated_table_name` sans the `demodulize`.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If you have a model under a namespace and try to set up any
HABTM association with it, the join table that it tries to use by
default strips out the namespace. Given all the rails 3 work to
improve handling of namespaces controllers, helpers and models, I
don't think this functionality is intended anymore.&lt;/p&gt;
&lt;p&gt;Sample construction of namespaced models with HABTM:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Contact &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :organizations
end

class Contact::Address &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :organizations
end

class Contact::Organization &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :addresses
  has_and_belongs_to_many :contacts
end

create_table :contacts
create_table :contact_addresses
create_table :contact_addresses_contact_organizations, :id =&amp;gt; false do |t|
  t.references :address; t.references :organization
end
create_table :contact_organizations
create_table :contacts_contact_organizations, :id =&amp;gt; false do |t|
  t.references :contact; t.references :organization
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Because of a call to &lt;code&gt;demodulize&lt;/code&gt; inside
&lt;code&gt;undecorated_table_name&lt;/code&gt;, the namespaces are stripped
away and is the only reason the above does not work. Manually
specifying &lt;code&gt;:join_table&lt;/code&gt; shows perfect
functionality.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;irb(main):001:0&amp;gt; c = Contact.create
=&amp;gt; #&amp;lt;Contact id: 1&amp;gt;
irb(main):002:0&amp;gt; org = c.organizations.create
=&amp;gt; #&amp;lt;Contact::Organization id: 1&amp;gt;
irb(main):003:0&amp;gt; a = org.addresses.create
=&amp;gt; #&amp;lt;Contact::Address id: 1&amp;gt;
irb(main):004:0&amp;gt; c2 = Contact.create
=&amp;gt; #&amp;lt;Contact id: 2&amp;gt;
irb(main):005:0&amp;gt; c2.organizations &amp;lt;&amp;lt; org
=&amp;gt; [#&amp;lt;Contact::Organization id: 1&amp;gt;]
irb(main):006:0&amp;gt; org2 = Contact::Organization.create
=&amp;gt; #&amp;lt;Contact::Organization id: 2&amp;gt;
irb(main):007:0&amp;gt; org2.addresses &amp;lt;&amp;lt; a
=&amp;gt; [#&amp;lt;Contact::Address id: 1&amp;gt;]
irb(main):008:0&amp;gt; c2.organizations &amp;lt;&amp;lt; org2
=&amp;gt; [#&amp;lt;Contact::Organization id: 1&amp;gt;, #&amp;lt;Contact::Organization id: 2&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;First thoughts for a solution is to rewrite
&lt;code&gt;join_table_name&lt;/code&gt; in
&lt;code&gt;activerecord/lib/active_record/associations.rb&lt;/code&gt; to do
the same as &lt;code&gt;undecorated_table_name&lt;/code&gt; sans the
&lt;code&gt;demodulize&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you have a model under a namespace and try to set up any HABTM association with it, the join table that it tries to use by default strips out the namespace. Given all the rails 3 work to improve handling of namespaces controllers, helpers and models, I don't think this functionality is intended anymore.

Sample construction of namespaced models with HABTM:

    class Contact &lt; ActiveRecord::Base
      has_and_belongs_to_many :organizations
    end

    class Contact::Address &lt; ActiveRecord::Base
      has_and_belongs_to_many :organizations
    end
    
    class Contact::Organization &lt; ActiveRecord::Base
      has_and_belongs_to_many :addresses
      has_and_belongs_to_many :contacts
    end
    
    create_table :contacts
    create_table :contact_addresses
    create_table :contact_addresses_contact_organizations, :id =&gt; false do |t|
      t.references :address; t.references :organization
    end
    create_table :contact_organizations
    create_table :contacts_contact_organizations, :id =&gt; false do |t|
      t.references :contact; t.references :organization
    end

Because of a call to `demodulize` inside `undecorated_table_name`, the namespaces are stripped away and is the only reason the above does not work. Manually specifying `:join_table` shows perfect functionality.

@@@ ruby
irb(main):001:0&gt; c = Contact.create
=&gt; #&lt;Contact id: 1&gt;
irb(main):002:0&gt; org = c.organizations.create
=&gt; #&lt;Contact::Organization id: 1&gt;
irb(main):003:0&gt; a = org.addresses.create
=&gt; #&lt;Contact::Address id: 1&gt;
irb(main):004:0&gt; c2 = Contact.create
=&gt; #&lt;Contact id: 2&gt;
irb(main):005:0&gt; c2.organizations &lt;&lt; org
=&gt; [#&lt;Contact::Organization id: 1&gt;]
irb(main):006:0&gt; org2 = Contact::Organization.create
=&gt; #&lt;Contact::Organization id: 2&gt;
irb(main):007:0&gt; org2.addresses &lt;&lt; a
=&gt; [#&lt;Contact::Address id: 1&gt;]
irb(main):008:0&gt; c2.organizations &lt;&lt; org2
=&gt; [#&lt;Contact::Organization id: 1&gt;, #&lt;Contact::Organization id: 2&gt;]
@@@

First thoughts for a solution is to rewrite `join_table_name` in `activerecord/lib/active_record/associations.rb` to do the same as `undecorated_table_name` sans the `demodulize`.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you have a model under a namespace and try to set up any
HABTM association with it, the join table that it tries to use by
default strips out the namespace. Given all the rails 3 work to
improve handling of namespaces controllers, helpers and models, I
don't think this functionality is intended anymore.&lt;/p&gt;
&lt;p&gt;Sample construction of namespaced models with HABTM:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Contact &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :organizations
end

class Contact::Address &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :organizations
end

class Contact::Organization &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :addresses
  has_and_belongs_to_many :contacts
end

create_table :contacts
create_table :contact_addresses
create_table :contact_addresses_contact_organizations, :id =&amp;gt; false do |t|
  t.references :address; t.references :organization
end
create_table :contact_organizations
create_table :contacts_contact_organizations, :id =&amp;gt; false do |t|
  t.references :contact; t.references :organization
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Because of a call to &lt;code&gt;demodulize&lt;/code&gt; inside
&lt;code&gt;undecorated_table_name&lt;/code&gt;, the namespaces are stripped
away and is the only reason the above does not work. Manually
specifying &lt;code&gt;:join_table&lt;/code&gt; shows perfect
functionality.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;irb(main):001:0&amp;gt; c = Contact.create
=&amp;gt; #&amp;lt;Contact id: 1&amp;gt;
irb(main):002:0&amp;gt; org = c.organizations.create
=&amp;gt; #&amp;lt;Contact::Organization id: 1&amp;gt;
irb(main):003:0&amp;gt; a = org.addresses.create
=&amp;gt; #&amp;lt;Contact::Address id: 1&amp;gt;
irb(main):004:0&amp;gt; c2 = Contact.create
=&amp;gt; #&amp;lt;Contact id: 2&amp;gt;
irb(main):005:0&amp;gt; c2.organizations &amp;lt;&amp;lt; org
=&amp;gt; [#&amp;lt;Contact::Organization id: 1&amp;gt;]
irb(main):006:0&amp;gt; org2 = Contact::Organization.create
=&amp;gt; #&amp;lt;Contact::Organization id: 2&amp;gt;
irb(main):007:0&amp;gt; org2.addresses &amp;lt;&amp;lt; a
=&amp;gt; [#&amp;lt;Contact::Address id: 1&amp;gt;]
irb(main):008:0&amp;gt; c2.organizations &amp;lt;&amp;lt; org2
=&amp;gt; [#&amp;lt;Contact::Organization id: 1&amp;gt;, #&amp;lt;Contact::Organization id: 2&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;First thoughts for a solution is to rewrite
&lt;code&gt;join_table_name&lt;/code&gt; in
&lt;code&gt;activerecord/lib/active_record/associations.rb&lt;/code&gt; to do
the same as &lt;code&gt;undecorated_table_name&lt;/code&gt; sans the
&lt;code&gt;demodulize&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-25T21:48:09+01:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2010-06-25T21:48:15+01:00</updated-at>
      <user-id type="integer">103676</user-id>
      <version type="integer">1</version>
      <user-name>Samuel Kadolph</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>table_name

&gt; Nested classes are given table names prefixed by the singular form of the parent&#8216;s table name. Enclosing modules are not considered.

i think the underlying problem is that create_has_and_belongs_to_many_reflection which is the only method that uses join_table_name does not use the classes table names but constructs them differently.
so neither nested classes, overridden table names nor table suffixes or prefixes are respected.

if someone from the core team could give me green light, i would write a patch with regression tests for this issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;table_name&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nested classes are given table names prefixed by the singular
form of the parent&amp;#8216;s table name. Enclosing modules are not
considered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;i think the underlying problem is that
create_has_and_belongs_to_many_reflection which is the only method
that uses join_table_name does not use the classes table names but
constructs them differently.&lt;br&gt;
so neither nested classes, overridden table names nor table
suffixes or prefixes are respected.&lt;/p&gt;
&lt;p&gt;if someone from the core team could give me green light, i would
write a patch with regression tests for this issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-27T01:31:24+01:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2010-06-27T01:31:28+01:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">2</version>
      <user-name>Kane</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>addition:

@Samuel Kadolph

to clarify some things: this is not directly a bug. the current behaviour is as described:

has_and_belongs_to_many
&gt;Specifies a many-to-many relationship with another class. This associates two classes via an intermediate join table. Unless the join table is explicitly specified as an option, it is guessed using the lexical order of the class names. 

the question is, should it really be that way?
Personally i would say it shoudnt use the class names bit the table names.
Im aware that a change of this would break existing apps, so this definitely needs discussion.</body>
      <body-html>&lt;div&gt;&lt;p&gt;addition:&lt;/p&gt;
&lt;p&gt;@Samuel Kadolph&lt;/p&gt;
&lt;p&gt;to clarify some things: this is not directly a bug. the current
behaviour is as described:&lt;/p&gt;
&lt;p&gt;has_and_belongs_to_many&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Specifies a many-to-many relationship with another class. This
associates two classes via an intermediate join table. Unless the
join table is explicitly specified as an option, it is guessed
using the lexical order of the class names.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;the question is, should it really be that way?&lt;br&gt;
Personally i would say it shoudnt use the class names bit the table
names.&lt;br&gt;
Im aware that a change of this would break existing apps, so this
definitely needs discussion.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-27T01:38:13+01:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2010-06-27T01:38:16+01:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">3</version>
      <user-name>Kane</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That's why I never used the word bug.
However with all of the changes to allow for namespacing of controllers, helpers and models. It only makes sense that all AR associations work as one would expect under a namespace.</body>
      <body-html>&lt;div&gt;&lt;p&gt;That's why I never used the word bug.&lt;br&gt;
However with all of the changes to allow for namespacing of
controllers, helpers and models. It only makes sense that all AR
associations work as one would expect under a namespace.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-27T01:40:42+01:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2010-06-27T01:40:47+01:00</updated-at>
      <user-id type="integer">103676</user-id>
      <version type="integer">4</version>
      <user-name>Samuel Kadolph</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>you dont namespace, what you described are nested classes. If you would use namespacing the namespace wouldnt go into the table name and everything would be okey.</body>
      <body-html>&lt;div&gt;&lt;p&gt;you dont namespace, what you described are nested classes. If
you would use namespacing the namespace wouldnt go into the table
name and everything would be okey.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-27T01:46:29+01:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2010-06-27T01:46:36+01:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">5</version>
      <user-name>Kane</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The same thing happens when they are under a module named `Contact`. Which isn't what you would want, anything under the `Contact` namespace (class or module) should always have the prefix `contact_` regardless of the association or the individual's AR `table_prefix`.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The same thing happens when they are under a module named
&lt;code&gt;Contact&lt;/code&gt;. Which isn't what you would want, anything
under the &lt;code&gt;Contact&lt;/code&gt; namespace (class or module) should
always have the prefix &lt;code&gt;contact_&lt;/code&gt; regardless of the
association or the individual's AR &lt;code&gt;table_prefix&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-27T01:51:56+01:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2010-06-27T01:52:03+01:00</updated-at>
      <user-id type="integer">103676</user-id>
      <version type="integer">6</version>
      <user-name>Samuel Kadolph</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can you provide a patch with tests? This proposal sounds interesting.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can you provide a patch with tests? This proposal sounds
interesting.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-17T14:21:42+01:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2010-10-17T14:21:45+01:00</updated-at>
      <user-id type="integer">81551</user-id>
      <version type="integer">7</version>
      <user-name>Andrea Campi</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>However with all of the changes to allow for namespacing of controllers, helpers and models. It only makes sense that all AR &lt;a href=&quot;http://www.weddinginthebox.com/blog/places-to-buy-wedding-dresses.html&quot;&gt;places that buy wedding dresses&lt;/a&gt; work as one would expect under a namespace.</body>
      <body-html>&lt;div&gt;&lt;p&gt;However with all of the changes to allow for namespacing of
controllers, helpers and models. It only makes sense that all AR
&lt;a href=
&quot;http://www.weddinginthebox.com/blog/places-to-buy-wedding-dresses.html&quot;&gt;
places that buy wedding dresses&lt;/a&gt; work as one would expect under
a namespace.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-19T06:24:21+01:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2010-10-19T17:52:54+01:00</updated-at>
      <user-id type="integer">120610</user-id>
      <version type="integer">8</version>
      <user-name>koukou</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:28:44+00:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2011-02-02T16:34:11+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">9</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:28:45+00:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2011-02-02T16:34:22+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">10</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-14T02:55:57+00:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2011-02-14T05:41:57+00:00</updated-at>
      <user-id type="integer">136860</user-id>
      <version type="integer">11</version>
      <user-name>xixi</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;louis vuitton
watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-26T02:12:39+00:00</created-at>
      <creator-id type="integer">103676</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4975</number>
      <permalink>model-namespaces-and-habtm</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>active_record has_and_belongs_to_many namespace</tag>
      <title>Model Namespaces and HABTM</title>
      <updated-at type="datetime">2011-03-26T02:40:33+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">12</version>
      <user-name>bingbing</user-name>
      <creator-name>Samuel Kadolph</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4975</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
