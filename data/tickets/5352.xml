<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-10T21:03:47+01:00</created-at>
  <creator-id type="integer">40656</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5352</number>
  <permalink>self-within-ar-scope-evaluating-to-parent-class-instead-of-calling-class</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>self within AR scope evaluating to parent class instead of calling class</title>
  <updated-at type="datetime">2011-02-02T18:53:21+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Sean</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5352</url>
  <priority-name nil="true"></priority-name>
  <original-body>I don't know if this is a bug or intentional, but when calling a :scope in a parent class from it's child class (STI model), self within the scope evaluates to the parent class.

According to standard ruby, it should evaluate to the class that called it, not the parent class. 

Reproducible example:

        class A &lt; AR::Base
           scope :test, lambda { puts self.to_s }
        end
        
        class B &lt; A ; end 

        A.test
        =&gt; 'A'
        B.test
        =&gt; 'A'</original-body>
  <latest-body>I don't know if this is a bug or intentional, but when calling a :scope in a parent class from it's child class (STI model), self within the scope evaluates to the parent class.

According to standard ruby, it should evaluate to the class that called it, not the parent class. 

Reproducible example:

        class A &lt; AR::Base
           scope :test, lambda { puts self.to_s }
        end
        
        class B &lt; A ; end 

        A.test
        =&gt; 'A'
        B.test
        =&gt; 'A'</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I don't know if this is a bug or intentional, but when calling a
:scope in a parent class from it's child class (STI model), self
within the scope evaluates to the parent class.&lt;/p&gt;
&lt;p&gt;According to standard ruby, it should evaluate to the class that
called it, not the parent class.&lt;/p&gt;
&lt;p&gt;Reproducible example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    class A &amp;lt; AR::Base
       scope :test, lambda { puts self.to_s }
    end

    class B &amp;lt; A ; end 

    A.test
    =&amp;gt; 'A'
    B.test
    =&amp;gt; 'A'&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't know if this is a bug or intentional, but when calling a :scope in a parent class from it's child class (STI model), self within the scope evaluates to the parent class.

According to standard ruby, it should evaluate to the class that called it, not the parent class. 

Reproducible example:

        class A &lt; AR::Base
           scope :test, lambda { puts self.to_s }
        end
        
        class B &lt; A ; end 

        A.test
        =&gt; 'A'
        B.test
        =&gt; 'A'</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't know if this is a bug or intentional, but when calling a
:scope in a parent class from it's child class (STI model), self
within the scope evaluates to the parent class.&lt;/p&gt;
&lt;p&gt;According to standard ruby, it should evaluate to the class that
called it, not the parent class.&lt;/p&gt;
&lt;p&gt;Reproducible example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    class A &amp;lt; AR::Base
       scope :test, lambda { puts self.to_s }
    end

    class B &amp;lt; A ; end 

    A.test
    =&amp;gt; 'A'
    B.test
    =&amp;gt; 'A'&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-10T21:03:47+01:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5352</number>
      <permalink>self-within-ar-scope-evaluating-to-parent-class-instead-of-calling-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>self within AR scope evaluating to parent class instead of calling class</title>
      <updated-at type="datetime">2010-08-10T21:03:48+01:00</updated-at>
      <user-id type="integer">40656</user-id>
      <version type="integer">1</version>
      <user-name>Sean</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5352</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The reason this is a problem is that if you have scopes in a parent class that you're calling from a couple of different child classes, you may need to perform an action based on the class that called the scope.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The reason this is a problem is that if you have scopes in a
parent class that you're calling from a couple of different child
classes, you may need to perform an action based on the class that
called the scope.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-10T21:04:40+01:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5352</number>
      <permalink>self-within-ar-scope-evaluating-to-parent-class-instead-of-calling-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>self within AR scope evaluating to parent class instead of calling class</title>
      <updated-at type="datetime">2010-08-10T21:04:41+01:00</updated-at>
      <user-id type="integer">40656</user-id>
      <version type="integer">2</version>
      <user-name>Sean</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5352</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry, I forgot to specify, this is on Rails3 (RC)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry, I forgot to specify, this is on Rails3 (RC)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-10T21:23:41+01:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5352</number>
      <permalink>self-within-ar-scope-evaluating-to-parent-class-instead-of-calling-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>self within AR scope evaluating to parent class instead of calling class</title>
      <updated-at type="datetime">2010-08-10T21:23:42+01:00</updated-at>
      <user-id type="integer">40656</user-id>
      <version type="integer">3</version>
      <user-name>Sean</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5352</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I can confirm that this is reproducible. However, I think this is due to Ruby evaluating self as you create the proc, and not when the proc is called. So, I think this is intentional, and at least not a rails problem.

This sortof does what AR::Base.scope() does, at least when it comes to defining methods.

    module Kernel
      def singleton_class
        class &lt;&lt; self
          self
        end
      end unless respond_to?(:singleton_class)
    end

    class A
      def self.define_scope(name, block)
        singleton_class.send(:define_method, name) do
          ret = block.call()
          ret
        end
      end
  
      define_scope(:test_two, lambda { self.to_s })
  
      def to_s
        'A'
      end
    end

    block = lambda { self.to_s }

    A.define_scope(:test_scopey, block)

    class B &lt; A
      def to_s
        'B'
      end
    end

    A.test_scopey # =&gt; &quot;main&quot;
    B.test_scopey # =&gt; &quot;main&quot;

    A.test_two # =&gt; &quot;A&quot;
    B.test_two # =&gt; &quot;A&quot;</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can confirm that this is reproducible. However, I think this
is due to Ruby evaluating self as you create the proc, and not when
the proc is called. So, I think this is intentional, and at least
not a rails problem.&lt;/p&gt;
&lt;p&gt;This sortof does what AR::Base.scope() does, at least when it
comes to defining methods.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;module Kernel
  def singleton_class
    class &amp;lt;&amp;lt; self
      self
    end
  end unless respond_to?(:singleton_class)
end

class A
  def self.define_scope(name, block)
    singleton_class.send(:define_method, name) do
      ret = block.call()
      ret
    end
  end

  define_scope(:test_two, lambda { self.to_s })

  def to_s
    'A'
  end
end

block = lambda { self.to_s }

A.define_scope(:test_scopey, block)

class B &amp;lt; A
  def to_s
    'B'
  end
end

A.test_scopey # =&amp;gt; &quot;main&quot;
B.test_scopey # =&amp;gt; &quot;main&quot;

A.test_two # =&amp;gt; &quot;A&quot;
B.test_two # =&amp;gt; &quot;A&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-11T01:12:06+01:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5352</number>
      <permalink>self-within-ar-scope-evaluating-to-parent-class-instead-of-calling-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>self within AR scope evaluating to parent class instead of calling class</title>
      <updated-at type="datetime">2010-08-11T01:12:07+01:00</updated-at>
      <user-id type="integer">106668</user-id>
      <version type="integer">4</version>
      <user-name>Henrik Hodne</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5352</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T17:00:17+00:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5352</number>
      <permalink>self-within-ar-scope-evaluating-to-parent-class-instead-of-calling-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>self within AR scope evaluating to parent class instead of calling class</title>
      <updated-at type="datetime">2011-02-02T18:53:06+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5352</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T17:00:18+00:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5352</number>
      <permalink>self-within-ar-scope-evaluating-to-parent-class-instead-of-calling-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>self within AR scope evaluating to parent class instead of calling class</title>
      <updated-at type="datetime">2011-02-02T18:53:21+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5352</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
