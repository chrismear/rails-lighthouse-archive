<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">4</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-14T07:28:43+00:00</created-at>
  <creator-id type="integer">16855</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">4239</number>
  <permalink>patch-improvements-in-number_helperrb</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
  <title>[PATCH] Improvements in number_helper.rb</title>
  <updated-at type="datetime">2011-02-14T07:28:43+00:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">12</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Bernardo Padua</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>Hi all,

I've made several small refactorings and added some new functionality to the existing number helpers (especially `number_to_human_size` and `number_with_precision`). And added a new one, `number_to_human`. All is well tested and documented. I've put a considerable amount of thought in every change, I think it is &quot;ready to commit&quot;, but please review and suggest possible improvements. 

## Rationale ##

What I needed to do was print large numbers in a rounded and readable way for human reading (instead of printing 10,232,423,423, printing &quot;10.2 billion&quot;). I thought Rails' `NumberHelper` would rescue me, but then I saw `#number_to_human_size` would only print file size. I though of throwing in a quick helper, if Rails would only help me round numbers to a certain amount of significant digits with `number_with_precision`, but then I was upset to discover what rails called *precision* (rounding the number of fractional digits) was far from precise/correct, according to the standard math definition of the name *precision* (the number of significant digits in a number - see [what wikipedia says](http://en.wikipedia.org/wiki/Arithmetic_precision) ). 

So I reached the conclusion Rails could do better, and decided to add this functionality.

## Improvements ##

First I changed `number_with_precision` by adding the `:significant` option, that if set to `true` will make `number_with_precision` round to the number with significant digits:

@@@ ruby  
    number_with_precision(3.1415, :precision =&gt; 2)                            # =&gt; &quot;3.14&quot;
    number_with_precision(3.1415, :precision =&gt; 2, :significant =&gt; true)      # =&gt; &quot;3.2&quot;
    number_with_precision(1232.2342, :precision =&gt; 2)                         # =&gt; &quot;1232.23&quot;
    number_with_precision(1232, :precision =&gt; 2, :significant =&gt; true)        #  =&gt; &quot;1200&quot;
    number_with_precision(12, :precision =&gt; 4)                                # =&gt; &quot;12.0000&quot;
    number_with_precision(12, :precision =&gt; 4, :significant =&gt; true)          # =&gt; &quot;12.00&quot;
@@@

Then I noticed `number_to_human_size` stripped unsignificant zeros after the decimal period by default, and thought this ought to be in `number_with_precision`, and not there. So I refactored.

@@@ ruby  
    number_with_precision(12, :precision =&gt; 4, :strip_unsignificant_zeros =&gt; true)                          # =&gt; &quot;12&quot;
    number_with_precision(12, :precision =&gt; 4, :significant =&gt; true, :strip_unsignificant_zeros =&gt; true)    # =&gt; &quot;12&quot;
@@@

Then I decided `number_to_human_size` should use `:strip_unsignificant_zeros =&gt; true` by default. It makes no sense to use `precision =&gt; 1` and display &quot;1.3 KB&quot; and &quot;657.6 Kb&quot; (2 digits versus 4 digits). It would be more reasonable (and less overwhelming to the end user) to display &quot;1.3 KB&quot; and &quot;650 KB&quot; (using `:precision =&gt; 2, :strip_unsignificant_zeros =&gt; true`). We are humans and our brains can't process too many digits (we always round). I know this can lead to some controversy, since it changes previous behavior. But come on, Rails is opinionated, its view code (won't break anything) and it is the right thing to do. In the paranoid scenario, we could add something to `initializers/new_rails_defaults.rb`, but I think it would be overkill (in this case).

@@@ ruby  
    number_to_human_size(kilobytes(543.43), :precision =&gt; 2)   # =&gt; &quot;540 KB&quot;
    number_to_human_size(kilobytes(543.34), :precision =&gt; 2, :strip_unsignificant_zeros =&gt; false)   # =&gt; &quot;543.34 KB&quot;
@@@

Besides that, I refactored the other number helpers to benefit from those changes (eg.: number_with_percentage can also have `:significant =&gt; true`), while keeping their defaults. I also made some improvements to the code (it's more clean and rubyish now), and fixed some minor issues with helpers not actually returning the untouched first parameter if it was not a valid number.

## number_to_human ##

I decided to call it `number_to_human` since it is more general than `number_to_human_size`, yet similar. It prints stuff like &quot;1.2 million&quot; and &quot;3.4 trillion&quot; by default, but it can be easily tweaked to print anything that uses a decimal scale, like 12 centimeters, 34 meters, 76 kilometers (No, it won't convert ounces to pounds.). 

By default I set in `actionview/locale/en.yml` a list of the decimal quantifiers:

@@@ yaml
human:
  format:
    delimiter: &quot;&quot;
    precision: 3
    significant: true
  # Used in number_to_human_size()
  storage_units:
    format: &quot;%n %u&quot;
    units:
      byte:
        one:   &quot;Byte&quot;
        other: &quot;Bytes&quot;
      kb: &quot;KB&quot;
      mb: &quot;MB&quot;
      gb: &quot;GB&quot;
      tb: &quot;TB&quot;
  # Used in number_to_human() 
  decimal_units:
    format: &quot;%n %u&quot;
    units:
      unit: &quot;&quot;     
      thousand: thousand
      million: million
      billion: billion
      trillion: trillion
      quadrillion: quadrillion
@@@

So it will do by default:

@@@ ruby  
  number_to_human(123456789)  # =&gt; 120 million
  number_to_human(123456789012, :precision =&gt; 4)  # =&gt; 123.4 billion  
@@@

But this can be easily customized by the user:

@@@ ruby  
  number_to_human(2780, :units =&gt; {:hundred =&gt; &quot;hundred&quot;})  # =&gt;  28 hundred
@@@

And he can also define it in his locale:

@@@ yaml
distance:
  centi:
    one: &quot;centimeter&quot;
    other: &quot;centimeters&quot; 
  unit:
    one: &quot;meter&quot;
    other: &quot;meters&quot;
  thousand:
    one: &quot;kilometer&quot;
    other: &quot;kilometers&quot;
  billion: &quot;gazilion-distance&quot;
@@@

And then do:

@@@ ruby  
  number_to_human(2780, :units =&gt; :distance)  # =&gt;  2.8 kilometers
  number_to_human(523, :units =&gt; :distance)  # =&gt;  520 meters
  number_to_human(0.238, :units =&gt; :distance)  # =&gt;  24 centimeters
  number_to_human(0.238, :units =&gt; :distance)  # =&gt;  24 centimeters
@@@

The possible unit quantifiers that can be used is defined in the DECIMAL_UNITS constant hash, and is currently set to:

{0 =&gt; :unit, 1 =&gt; :ten, 2 =&gt; :hundred, 3 =&gt; :thousand, 6 =&gt; :million, 9 =&gt; :billion, 12 =&gt; :trillion, 15 =&gt; :quadrillion,
  -1 =&gt; :deci, -2 =&gt; :centi, -3 =&gt; :mili, -6 =&gt; :micro, -9 =&gt; :nano, -12 =&gt; :pico}.freeze
  
Adding support for a new one (eg.: femto or quintillion) as simple as adding a new key =&gt; value pair to this hash with the proper exponent.

Patch will follow (I need the ticket number before I make the commit)</original-body>
  <latest-body>Hi all,

I've made several small refactorings and added some new functionality to the existing number helpers (especially `number_to_human_size` and `number_with_precision`). And added a new one, `number_to_human`. All is well tested and documented. I've put a considerable amount of thought in every change, I think it is &quot;ready to commit&quot;, but please review and suggest possible improvements. 

## Rationale ##

What I needed to do was print large numbers in a rounded and readable way for human reading (instead of printing 10,232,423,423, printing &quot;10.2 billion&quot;). I thought Rails' `NumberHelper` would rescue me, but then I saw `#number_to_human_size` would only print file size. I though of throwing in a quick helper, if Rails would only help me round numbers to a certain amount of significant digits with `number_with_precision`, but then I was upset to discover what rails called *precision* (rounding the number of fractional digits) was far from precise/correct, according to the standard math definition of the name *precision* (the number of significant digits in a number - see [what wikipedia says](http://en.wikipedia.org/wiki/Arithmetic_precision) ). 

So I reached the conclusion Rails could do better, and decided to add this functionality.

## Improvements ##

First I changed `number_with_precision` by adding the `:significant` option, that if set to `true` will make `number_with_precision` round to the number with significant digits:

@@@ ruby  
    number_with_precision(3.1415, :precision =&gt; 2)                            # =&gt; &quot;3.14&quot;
    number_with_precision(3.1415, :precision =&gt; 2, :significant =&gt; true)      # =&gt; &quot;3.2&quot;
    number_with_precision(1232.2342, :precision =&gt; 2)                         # =&gt; &quot;1232.23&quot;
    number_with_precision(1232, :precision =&gt; 2, :significant =&gt; true)        #  =&gt; &quot;1200&quot;
    number_with_precision(12, :precision =&gt; 4)                                # =&gt; &quot;12.0000&quot;
    number_with_precision(12, :precision =&gt; 4, :significant =&gt; true)          # =&gt; &quot;12.00&quot;
@@@

Then I noticed `number_to_human_size` stripped unsignificant zeros after the decimal period by default, and thought this ought to be in `number_with_precision`, and not there. So I refactored.

@@@ ruby  
    number_with_precision(12, :precision =&gt; 4, :strip_unsignificant_zeros =&gt; true)                          # =&gt; &quot;12&quot;
    number_with_precision(12, :precision =&gt; 4, :significant =&gt; true, :strip_unsignificant_zeros =&gt; true)    # =&gt; &quot;12&quot;
@@@

Then I decided `number_to_human_size` should use `:strip_unsignificant_zeros =&gt; true` by default. It makes no sense to use `precision =&gt; 1` and display &quot;1.3 KB&quot; and &quot;657.6 Kb&quot; (2 digits versus 4 digits). It would be more reasonable (and less overwhelming to the end user) to display &quot;1.3 KB&quot; and &quot;650 KB&quot; (using `:precision =&gt; 2, :strip_unsignificant_zeros =&gt; true`). We are humans and our brains can't process too many digits (we always round). I know this can lead to some controversy, since it changes previous behavior. But come on, Rails is opinionated, its view code (won't break anything) and it is the right thing to do. In the paranoid scenario, we could add something to `initializers/new_rails_defaults.rb`, but I think it would be overkill (in this case).

@@@ ruby  
    number_to_human_size(kilobytes(543.43), :precision =&gt; 2)   # =&gt; &quot;540 KB&quot;
    number_to_human_size(kilobytes(543.34), :precision =&gt; 2, :strip_unsignificant_zeros =&gt; false)   # =&gt; &quot;543.34 KB&quot;
@@@

Besides that, I refactored the other number helpers to benefit from those changes (eg.: number_with_percentage can also have `:significant =&gt; true`), while keeping their defaults. I also made some improvements to the code (it's more clean and rubyish now), and fixed some minor issues with helpers not actually returning the untouched first parameter if it was not a valid number.

## number_to_human ##

I decided to call it `number_to_human` since it is more general than `number_to_human_size`, yet similar. It prints stuff like &quot;1.2 million&quot; and &quot;3.4 trillion&quot; by default, but it can be easily tweaked to print anything that uses a decimal scale, like 12 centimeters, 34 meters, 76 kilometers (No, it won't convert ounces to pounds.). 

By default I set in `actionview/locale/en.yml` a list of the decimal quantifiers:

@@@ yaml
human:
  format:
    delimiter: &quot;&quot;
    precision: 3
    significant: true
  # Used in number_to_human_size()
  storage_units:
    format: &quot;%n %u&quot;
    units:
      byte:
        one:   &quot;Byte&quot;
        other: &quot;Bytes&quot;
      kb: &quot;KB&quot;
      mb: &quot;MB&quot;
      gb: &quot;GB&quot;
      tb: &quot;TB&quot;
  # Used in number_to_human() 
  decimal_units:
    format: &quot;%n %u&quot;
    units:
      unit: &quot;&quot;     
      thousand: thousand
      million: million
      billion: billion
      trillion: trillion
      quadrillion: quadrillion
@@@

So it will do by default:

@@@ ruby  
  number_to_human(123456789)  # =&gt; 120 million
  number_to_human(123456789012, :precision =&gt; 4)  # =&gt; 123.4 billion  
@@@

But this can be easily customized by the user:

@@@ ruby  
  number_to_human(2780, :units =&gt; {:hundred =&gt; &quot;hundred&quot;})  # =&gt;  28 hundred
@@@

And he can also define it in his locale:

@@@ yaml
distance:
  centi:
    one: &quot;centimeter&quot;
    other: &quot;centimeters&quot; 
  unit:
    one: &quot;meter&quot;
    other: &quot;meters&quot;
  thousand:
    one: &quot;kilometer&quot;
    other: &quot;kilometers&quot;
  billion: &quot;gazilion-distance&quot;
@@@

And then do:

@@@ ruby  
  number_to_human(2780, :units =&gt; :distance)  # =&gt;  2.8 kilometers
  number_to_human(523, :units =&gt; :distance)  # =&gt;  520 meters
  number_to_human(0.238, :units =&gt; :distance)  # =&gt;  24 centimeters
  number_to_human(0.238, :units =&gt; :distance)  # =&gt;  24 centimeters
@@@

The possible unit quantifiers that can be used is defined in the DECIMAL_UNITS constant hash, and is currently set to:

{0 =&gt; :unit, 1 =&gt; :ten, 2 =&gt; :hundred, 3 =&gt; :thousand, 6 =&gt; :million, 9 =&gt; :billion, 12 =&gt; :trillion, 15 =&gt; :quadrillion,
  -1 =&gt; :deci, -2 =&gt; :centi, -3 =&gt; :mili, -6 =&gt; :micro, -9 =&gt; :nano, -12 =&gt; :pico}.freeze
  
Adding support for a new one (eg.: femto or quintillion) as simple as adding a new key =&gt; value pair to this hash with the proper exponent.

Patch will follow (I need the ticket number before I make the commit)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;I've made several small refactorings and added some new
functionality to the existing number helpers (especially
&lt;code&gt;number_to_human_size&lt;/code&gt; and
&lt;code&gt;number_with_precision&lt;/code&gt;). And added a new one,
&lt;code&gt;number_to_human&lt;/code&gt;. All is well tested and documented.
I've put a considerable amount of thought in every change, I think
it is &quot;ready to commit&quot;, but please review and suggest possible
improvements.&lt;/p&gt;
&lt;h2&gt;Rationale&lt;/h2&gt;
&lt;p&gt;What I needed to do was print large numbers in a rounded and
readable way for human reading (instead of printing 10,232,423,423,
printing &quot;10.2 billion&quot;). I thought Rails'
&lt;code&gt;NumberHelper&lt;/code&gt; would rescue me, but then I saw
&lt;code&gt;#number_to_human_size&lt;/code&gt; would only print file size. I
though of throwing in a quick helper, if Rails would only help me
round numbers to a certain amount of significant digits with
&lt;code&gt;number_with_precision&lt;/code&gt;, but then I was upset to
discover what rails called &lt;em&gt;precision&lt;/em&gt; (rounding the number
of fractional digits) was far from precise/correct, according to
the standard math definition of the name &lt;em&gt;precision&lt;/em&gt; (the
number of significant digits in a number - see &lt;a href=
&quot;http://en.wikipedia.org/wiki/Arithmetic_precision&quot;&gt;what wikipedia
says&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;So I reached the conclusion Rails could do better, and decided
to add this functionality.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;First I changed &lt;code&gt;number_with_precision&lt;/code&gt; by adding the
&lt;code&gt;:significant&lt;/code&gt; option, that if set to &lt;code&gt;true&lt;/code&gt;
will make &lt;code&gt;number_with_precision&lt;/code&gt; round to the number
with significant digits:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    number_with_precision(3.1415, :precision =&amp;gt; 2)                            # =&amp;gt; &quot;3.14&quot;
    number_with_precision(3.1415, :precision =&amp;gt; 2, :significant =&amp;gt; true)      # =&amp;gt; &quot;3.2&quot;
    number_with_precision(1232.2342, :precision =&amp;gt; 2)                         # =&amp;gt; &quot;1232.23&quot;
    number_with_precision(1232, :precision =&amp;gt; 2, :significant =&amp;gt; true)        #  =&amp;gt; &quot;1200&quot;
    number_with_precision(12, :precision =&amp;gt; 4)                                # =&amp;gt; &quot;12.0000&quot;
    number_with_precision(12, :precision =&amp;gt; 4, :significant =&amp;gt; true)          # =&amp;gt; &quot;12.00&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then I noticed &lt;code&gt;number_to_human_size&lt;/code&gt; stripped
unsignificant zeros after the decimal period by default, and
thought this ought to be in &lt;code&gt;number_with_precision&lt;/code&gt;, and
not there. So I refactored.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    number_with_precision(12, :precision =&amp;gt; 4, :strip_unsignificant_zeros =&amp;gt; true)                          # =&amp;gt; &quot;12&quot;
    number_with_precision(12, :precision =&amp;gt; 4, :significant =&amp;gt; true, :strip_unsignificant_zeros =&amp;gt; true)    # =&amp;gt; &quot;12&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then I decided &lt;code&gt;number_to_human_size&lt;/code&gt; should use
&lt;code&gt;:strip_unsignificant_zeros =&amp;gt; true&lt;/code&gt; by default. It
makes no sense to use &lt;code&gt;precision =&amp;gt; 1&lt;/code&gt; and display
&quot;1.3 KB&quot; and &quot;657.6 Kb&quot; (2 digits versus 4 digits). It would be
more reasonable (and less overwhelming to the end user) to display
&quot;1.3 KB&quot; and &quot;650 KB&quot; (using &lt;code&gt;:precision =&amp;gt; 2,
:strip_unsignificant_zeros =&amp;gt; true&lt;/code&gt;). We are humans and
our brains can't process too many digits (we always round). I know
this can lead to some controversy, since it changes previous
behavior. But come on, Rails is opinionated, its view code (won't
break anything) and it is the right thing to do. In the paranoid
scenario, we could add something to
&lt;code&gt;initializers/new_rails_defaults.rb&lt;/code&gt;, but I think it
would be overkill (in this case).&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    number_to_human_size(kilobytes(543.43), :precision =&amp;gt; 2)   # =&amp;gt; &quot;540 KB&quot;
    number_to_human_size(kilobytes(543.34), :precision =&amp;gt; 2, :strip_unsignificant_zeros =&amp;gt; false)   # =&amp;gt; &quot;543.34 KB&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Besides that, I refactored the other number helpers to benefit
from those changes (eg.: number_with_percentage can also have
&lt;code&gt;:significant =&amp;gt; true&lt;/code&gt;), while keeping their
defaults. I also made some improvements to the code (it's more
clean and rubyish now), and fixed some minor issues with helpers
not actually returning the untouched first parameter if it was not
a valid number.&lt;/p&gt;
&lt;h2&gt;number_to_human&lt;/h2&gt;
&lt;p&gt;I decided to call it &lt;code&gt;number_to_human&lt;/code&gt; since it is
more general than &lt;code&gt;number_to_human_size&lt;/code&gt;, yet similar.
It prints stuff like &quot;1.2 million&quot; and &quot;3.4 trillion&quot; by default,
but it can be easily tweaked to print anything that uses a decimal
scale, like 12 centimeters, 34 meters, 76 kilometers (No, it won't
convert ounces to pounds.).&lt;/p&gt;
&lt;p&gt;By default I set in &lt;code&gt;actionview/locale/en.yml&lt;/code&gt; a list
of the decimal quantifiers:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;yaml&quot;&gt;human:
  format:
    delimiter: &quot;&quot;
    precision: 3
    significant: true
  # Used in number_to_human_size()
  storage_units:
    format: &quot;%n %u&quot;
    units:
      byte:
        one:   &quot;Byte&quot;
        other: &quot;Bytes&quot;
      kb: &quot;KB&quot;
      mb: &quot;MB&quot;
      gb: &quot;GB&quot;
      tb: &quot;TB&quot;
  # Used in number_to_human() 
  decimal_units:
    format: &quot;%n %u&quot;
    units:
      unit: &quot;&quot;     
      thousand: thousand
      million: million
      billion: billion
      trillion: trillion
      quadrillion: quadrillion&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So it will do by default:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  number_to_human(123456789)  # =&amp;gt; 120 million
  number_to_human(123456789012, :precision =&amp;gt; 4)  # =&amp;gt; 123.4 billion&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But this can be easily customized by the user:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  number_to_human(2780, :units =&amp;gt; {:hundred =&amp;gt; &quot;hundred&quot;})  # =&amp;gt;  28 hundred&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And he can also define it in his locale:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;yaml&quot;&gt;distance:
  centi:
    one: &quot;centimeter&quot;
    other: &quot;centimeters&quot; 
  unit:
    one: &quot;meter&quot;
    other: &quot;meters&quot;
  thousand:
    one: &quot;kilometer&quot;
    other: &quot;kilometers&quot;
  billion: &quot;gazilion-distance&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And then do:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  number_to_human(2780, :units =&amp;gt; :distance)  # =&amp;gt;  2.8 kilometers
  number_to_human(523, :units =&amp;gt; :distance)  # =&amp;gt;  520 meters
  number_to_human(0.238, :units =&amp;gt; :distance)  # =&amp;gt;  24 centimeters
  number_to_human(0.238, :units =&amp;gt; :distance)  # =&amp;gt;  24 centimeters&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The possible unit quantifiers that can be used is defined in the
DECIMAL_UNITS constant hash, and is currently set to:&lt;/p&gt;
&lt;p&gt;{0 =&amp;gt; :unit, 1 =&amp;gt; :ten, 2 =&amp;gt; :hundred, 3 =&amp;gt;
:thousand, 6 =&amp;gt; :million, 9 =&amp;gt; :billion, 12 =&amp;gt; :trillion,
15 =&amp;gt; :quadrillion, -1 =&amp;gt; :deci, -2 =&amp;gt; :centi, -3 =&amp;gt;
:mili, -6 =&amp;gt; :micro, -9 =&amp;gt; :nano, -12 =&amp;gt; :pico}.freeze&lt;/p&gt;
&lt;p&gt;Adding support for a new one (eg.: femto or quintillion) as
simple as adding a new key =&amp;gt; value pair to this hash with the
proper exponent.&lt;/p&gt;
&lt;p&gt;Patch will follow (I need the ticket number before I make the
commit)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi all,

I've made several small refactorings and added some new functionality to the existing number helpers (especially `number_to_human_size` and `number_with_precision`). And added a new one, `number_to_human`. All is well tested and documented. I've put a considerable amount of thought in every change, I think it is &quot;ready to commit&quot;, but please review and suggest possible improvements. 

## Rationale ##

What I needed to do was print large numbers in a rounded and readable way for human reading (instead of printing 10,232,423,423, printing &quot;10.2 billion&quot;). I thought Rails' `NumberHelper` would rescue me, but then I saw `#number_to_human_size` would only print file size. I though of throwing in a quick helper, if Rails would only help me round numbers to a certain amount of significant digits with `number_with_precision`, but then I was upset to discover what rails called *precision* (rounding the number of fractional digits) was far from precise/correct, according to the standard math definition of the name *precision* (the number of significant digits in a number - see [what wikipedia says](http://en.wikipedia.org/wiki/Arithmetic_precision) ). 

So I reached the conclusion Rails could do better, and decided to add this functionality.

## Improvements ##

First I changed `number_with_precision` by adding the `:significant` option, that if set to `true` will make `number_with_precision` round to the number with significant digits:

@@@ ruby  
    number_with_precision(3.1415, :precision =&gt; 2)                            # =&gt; &quot;3.14&quot;
    number_with_precision(3.1415, :precision =&gt; 2, :significant =&gt; true)      # =&gt; &quot;3.2&quot;
    number_with_precision(1232.2342, :precision =&gt; 2)                         # =&gt; &quot;1232.23&quot;
    number_with_precision(1232, :precision =&gt; 2, :significant =&gt; true)        #  =&gt; &quot;1200&quot;
    number_with_precision(12, :precision =&gt; 4)                                # =&gt; &quot;12.0000&quot;
    number_with_precision(12, :precision =&gt; 4, :significant =&gt; true)          # =&gt; &quot;12.00&quot;
@@@

Then I noticed `number_to_human_size` stripped unsignificant zeros after the decimal period by default, and thought this ought to be in `number_with_precision`, and not there. So I refactored.

@@@ ruby  
    number_with_precision(12, :precision =&gt; 4, :strip_unsignificant_zeros =&gt; true)                          # =&gt; &quot;12&quot;
    number_with_precision(12, :precision =&gt; 4, :significant =&gt; true, :strip_unsignificant_zeros =&gt; true)    # =&gt; &quot;12&quot;
@@@

Then I decided `number_to_human_size` should use `:strip_unsignificant_zeros =&gt; true` by default. It makes no sense to use `precision =&gt; 1` and display &quot;1.3 KB&quot; and &quot;657.6 Kb&quot; (2 digits versus 4 digits). It would be more reasonable (and less overwhelming to the end user) to display &quot;1.3 KB&quot; and &quot;650 KB&quot; (using `:precision =&gt; 2, :strip_unsignificant_zeros =&gt; true`). We are humans and our brains can't process too many digits (we always round). I know this can lead to some controversy, since it changes previous behavior. But come on, Rails is opinionated, its view code (won't break anything) and it is the right thing to do. In the paranoid scenario, we could add something to `initializers/new_rails_defaults.rb`, but I think it would be overkill (in this case).

@@@ ruby  
    number_to_human_size(kilobytes(543.43), :precision =&gt; 2)   # =&gt; &quot;540 KB&quot;
    number_to_human_size(kilobytes(543.34), :precision =&gt; 2, :strip_unsignificant_zeros =&gt; false)   # =&gt; &quot;543.34 KB&quot;
@@@

Besides that, I refactored the other number helpers to benefit from those changes (eg.: number_with_percentage can also have `:significant =&gt; true`), while keeping their defaults. I also made some improvements to the code (it's more clean and rubyish now), and fixed some minor issues with helpers not actually returning the untouched first parameter if it was not a valid number.

## number_to_human ##

I decided to call it `number_to_human` since it is more general than `number_to_human_size`, yet similar. It prints stuff like &quot;1.2 million&quot; and &quot;3.4 trillion&quot; by default, but it can be easily tweaked to print anything that uses a decimal scale, like 12 centimeters, 34 meters, 76 kilometers (No, it won't convert ounces to pounds.). 

By default I set in `actionview/locale/en.yml` a list of the decimal quantifiers:

@@@ yaml
human:
  format:
    delimiter: &quot;&quot;
    precision: 3
    significant: true
  # Used in number_to_human_size()
  storage_units:
    format: &quot;%n %u&quot;
    units:
      byte:
        one:   &quot;Byte&quot;
        other: &quot;Bytes&quot;
      kb: &quot;KB&quot;
      mb: &quot;MB&quot;
      gb: &quot;GB&quot;
      tb: &quot;TB&quot;
  # Used in number_to_human() 
  decimal_units:
    format: &quot;%n %u&quot;
    units:
      unit: &quot;&quot;     
      thousand: thousand
      million: million
      billion: billion
      trillion: trillion
      quadrillion: quadrillion
@@@

So it will do by default:

@@@ ruby  
  number_to_human(123456789)  # =&gt; 120 million
  number_to_human(123456789012, :precision =&gt; 4)  # =&gt; 123.4 billion  
@@@

But this can be easily customized by the user:

@@@ ruby  
  number_to_human(2780, :units =&gt; {:hundred =&gt; &quot;hundred&quot;})  # =&gt;  28 hundred
@@@

And he can also define it in his locale:

@@@ yaml
distance:
  centi:
    one: &quot;centimeter&quot;
    other: &quot;centimeters&quot; 
  unit:
    one: &quot;meter&quot;
    other: &quot;meters&quot;
  thousand:
    one: &quot;kilometer&quot;
    other: &quot;kilometers&quot;
  billion: &quot;gazilion-distance&quot;
@@@

And then do:

@@@ ruby  
  number_to_human(2780, :units =&gt; :distance)  # =&gt;  2.8 kilometers
  number_to_human(523, :units =&gt; :distance)  # =&gt;  520 meters
  number_to_human(0.238, :units =&gt; :distance)  # =&gt;  24 centimeters
  number_to_human(0.238, :units =&gt; :distance)  # =&gt;  24 centimeters
@@@

The possible unit quantifiers that can be used is defined in the DECIMAL_UNITS constant hash, and is currently set to:

{0 =&gt; :unit, 1 =&gt; :ten, 2 =&gt; :hundred, 3 =&gt; :thousand, 6 =&gt; :million, 9 =&gt; :billion, 12 =&gt; :trillion, 15 =&gt; :quadrillion,
  -1 =&gt; :deci, -2 =&gt; :centi, -3 =&gt; :mili, -6 =&gt; :micro, -9 =&gt; :nano, -12 =&gt; :pico}.freeze
  
Adding support for a new one (eg.: femto or quintillion) as simple as adding a new key =&gt; value pair to this hash with the proper exponent.

Patch will follow (I need the ticket number before I make the commit)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;I've made several small refactorings and added some new
functionality to the existing number helpers (especially
&lt;code&gt;number_to_human_size&lt;/code&gt; and
&lt;code&gt;number_with_precision&lt;/code&gt;). And added a new one,
&lt;code&gt;number_to_human&lt;/code&gt;. All is well tested and documented.
I've put a considerable amount of thought in every change, I think
it is &quot;ready to commit&quot;, but please review and suggest possible
improvements.&lt;/p&gt;
&lt;h2&gt;Rationale&lt;/h2&gt;
&lt;p&gt;What I needed to do was print large numbers in a rounded and
readable way for human reading (instead of printing 10,232,423,423,
printing &quot;10.2 billion&quot;). I thought Rails'
&lt;code&gt;NumberHelper&lt;/code&gt; would rescue me, but then I saw
&lt;code&gt;#number_to_human_size&lt;/code&gt; would only print file size. I
though of throwing in a quick helper, if Rails would only help me
round numbers to a certain amount of significant digits with
&lt;code&gt;number_with_precision&lt;/code&gt;, but then I was upset to
discover what rails called &lt;em&gt;precision&lt;/em&gt; (rounding the number
of fractional digits) was far from precise/correct, according to
the standard math definition of the name &lt;em&gt;precision&lt;/em&gt; (the
number of significant digits in a number - see &lt;a href=
&quot;http://en.wikipedia.org/wiki/Arithmetic_precision&quot;&gt;what wikipedia
says&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;So I reached the conclusion Rails could do better, and decided
to add this functionality.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;First I changed &lt;code&gt;number_with_precision&lt;/code&gt; by adding the
&lt;code&gt;:significant&lt;/code&gt; option, that if set to &lt;code&gt;true&lt;/code&gt;
will make &lt;code&gt;number_with_precision&lt;/code&gt; round to the number
with significant digits:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    number_with_precision(3.1415, :precision =&amp;gt; 2)                            # =&amp;gt; &quot;3.14&quot;
    number_with_precision(3.1415, :precision =&amp;gt; 2, :significant =&amp;gt; true)      # =&amp;gt; &quot;3.2&quot;
    number_with_precision(1232.2342, :precision =&amp;gt; 2)                         # =&amp;gt; &quot;1232.23&quot;
    number_with_precision(1232, :precision =&amp;gt; 2, :significant =&amp;gt; true)        #  =&amp;gt; &quot;1200&quot;
    number_with_precision(12, :precision =&amp;gt; 4)                                # =&amp;gt; &quot;12.0000&quot;
    number_with_precision(12, :precision =&amp;gt; 4, :significant =&amp;gt; true)          # =&amp;gt; &quot;12.00&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then I noticed &lt;code&gt;number_to_human_size&lt;/code&gt; stripped
unsignificant zeros after the decimal period by default, and
thought this ought to be in &lt;code&gt;number_with_precision&lt;/code&gt;, and
not there. So I refactored.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    number_with_precision(12, :precision =&amp;gt; 4, :strip_unsignificant_zeros =&amp;gt; true)                          # =&amp;gt; &quot;12&quot;
    number_with_precision(12, :precision =&amp;gt; 4, :significant =&amp;gt; true, :strip_unsignificant_zeros =&amp;gt; true)    # =&amp;gt; &quot;12&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then I decided &lt;code&gt;number_to_human_size&lt;/code&gt; should use
&lt;code&gt;:strip_unsignificant_zeros =&amp;gt; true&lt;/code&gt; by default. It
makes no sense to use &lt;code&gt;precision =&amp;gt; 1&lt;/code&gt; and display
&quot;1.3 KB&quot; and &quot;657.6 Kb&quot; (2 digits versus 4 digits). It would be
more reasonable (and less overwhelming to the end user) to display
&quot;1.3 KB&quot; and &quot;650 KB&quot; (using &lt;code&gt;:precision =&amp;gt; 2,
:strip_unsignificant_zeros =&amp;gt; true&lt;/code&gt;). We are humans and
our brains can't process too many digits (we always round). I know
this can lead to some controversy, since it changes previous
behavior. But come on, Rails is opinionated, its view code (won't
break anything) and it is the right thing to do. In the paranoid
scenario, we could add something to
&lt;code&gt;initializers/new_rails_defaults.rb&lt;/code&gt;, but I think it
would be overkill (in this case).&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    number_to_human_size(kilobytes(543.43), :precision =&amp;gt; 2)   # =&amp;gt; &quot;540 KB&quot;
    number_to_human_size(kilobytes(543.34), :precision =&amp;gt; 2, :strip_unsignificant_zeros =&amp;gt; false)   # =&amp;gt; &quot;543.34 KB&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Besides that, I refactored the other number helpers to benefit
from those changes (eg.: number_with_percentage can also have
&lt;code&gt;:significant =&amp;gt; true&lt;/code&gt;), while keeping their
defaults. I also made some improvements to the code (it's more
clean and rubyish now), and fixed some minor issues with helpers
not actually returning the untouched first parameter if it was not
a valid number.&lt;/p&gt;
&lt;h2&gt;number_to_human&lt;/h2&gt;
&lt;p&gt;I decided to call it &lt;code&gt;number_to_human&lt;/code&gt; since it is
more general than &lt;code&gt;number_to_human_size&lt;/code&gt;, yet similar.
It prints stuff like &quot;1.2 million&quot; and &quot;3.4 trillion&quot; by default,
but it can be easily tweaked to print anything that uses a decimal
scale, like 12 centimeters, 34 meters, 76 kilometers (No, it won't
convert ounces to pounds.).&lt;/p&gt;
&lt;p&gt;By default I set in &lt;code&gt;actionview/locale/en.yml&lt;/code&gt; a list
of the decimal quantifiers:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;yaml&quot;&gt;human:
  format:
    delimiter: &quot;&quot;
    precision: 3
    significant: true
  # Used in number_to_human_size()
  storage_units:
    format: &quot;%n %u&quot;
    units:
      byte:
        one:   &quot;Byte&quot;
        other: &quot;Bytes&quot;
      kb: &quot;KB&quot;
      mb: &quot;MB&quot;
      gb: &quot;GB&quot;
      tb: &quot;TB&quot;
  # Used in number_to_human() 
  decimal_units:
    format: &quot;%n %u&quot;
    units:
      unit: &quot;&quot;     
      thousand: thousand
      million: million
      billion: billion
      trillion: trillion
      quadrillion: quadrillion&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So it will do by default:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  number_to_human(123456789)  # =&amp;gt; 120 million
  number_to_human(123456789012, :precision =&amp;gt; 4)  # =&amp;gt; 123.4 billion&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But this can be easily customized by the user:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  number_to_human(2780, :units =&amp;gt; {:hundred =&amp;gt; &quot;hundred&quot;})  # =&amp;gt;  28 hundred&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And he can also define it in his locale:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;yaml&quot;&gt;distance:
  centi:
    one: &quot;centimeter&quot;
    other: &quot;centimeters&quot; 
  unit:
    one: &quot;meter&quot;
    other: &quot;meters&quot;
  thousand:
    one: &quot;kilometer&quot;
    other: &quot;kilometers&quot;
  billion: &quot;gazilion-distance&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And then do:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  number_to_human(2780, :units =&amp;gt; :distance)  # =&amp;gt;  2.8 kilometers
  number_to_human(523, :units =&amp;gt; :distance)  # =&amp;gt;  520 meters
  number_to_human(0.238, :units =&amp;gt; :distance)  # =&amp;gt;  24 centimeters
  number_to_human(0.238, :units =&amp;gt; :distance)  # =&amp;gt;  24 centimeters&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The possible unit quantifiers that can be used is defined in the
DECIMAL_UNITS constant hash, and is currently set to:&lt;/p&gt;
&lt;p&gt;{0 =&amp;gt; :unit, 1 =&amp;gt; :ten, 2 =&amp;gt; :hundred, 3 =&amp;gt;
:thousand, 6 =&amp;gt; :million, 9 =&amp;gt; :billion, 12 =&amp;gt; :trillion,
15 =&amp;gt; :quadrillion, -1 =&amp;gt; :deci, -2 =&amp;gt; :centi, -3 =&amp;gt;
:mili, -6 =&amp;gt; :micro, -9 =&amp;gt; :nano, -12 =&amp;gt; :pico}.freeze&lt;/p&gt;
&lt;p&gt;Adding support for a new one (eg.: femto or quintillion) as
simple as adding a new key =&amp;gt; value pair to this hash with the
proper exponent.&lt;/p&gt;
&lt;p&gt;Patch will follow (I need the ticket number before I make the
commit)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-19T21:40:04+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-19T21:40:05+00:00</updated-at>
      <user-id type="integer">16855</user-id>
      <version type="integer">1</version>
      <user-name>Bernardo Padua</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is the patch (with ticket update keyword).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is the patch (with ticket update keyword).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-19T22:02:20+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-19T22:02:38+00:00</updated-at>
      <user-id type="integer">16855</user-id>
      <version type="integer">2</version>
      <user-name>Bernardo Padua</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>BTW, somebody please close #1340 as it looks like it was already fixed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;BTW, somebody please close &lt;a href=&quot;/projects/8994/tickets/1340&quot;
title=&quot;Ticket #1340&quot;&gt;#1340&lt;/a&gt; as it looks like it was already
fixed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-19T22:11:26+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-19T22:11:29+00:00</updated-at>
      <user-id type="integer">16855</user-id>
      <version type="integer">3</version>
      <user-name>Bernardo Padua</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-19T22:37:20+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 
:assigned_user: 19965
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-19T22:37:25+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">4</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Great patch, Bernardo!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Great patch, Bernardo!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-19T22:44:35+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-19T22:50:00+00:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-19T22:47:18+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-19T22:50:19+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">6</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks for the nice feedback, Jos&#233; and Jeremy. Following some suggestions by Jos&#233; (exchanged in portuguese, I won't bother printing them here... :)), I refactored the patch (and also found/fixed some minor issues), here is the 2nd take. In the process I rewrote the number_helper_i18n_test.rb, since it used mocking in a very brittle way and broke completely with the slightest refactoring.

Something I forgot to write in the ticket (but it is in the docs), is that you can also supply your custom formatting for `number_to_human`:

@@@ ruby
  number_to_human(2000, :format =&gt; &quot;Y%n%u&quot;, :units =&gt; {:thousand =&gt; &quot;k&quot;})  # =&gt;  &quot;Y2k&quot;
@@@

Any questions/requests let me know.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for the nice feedback, Jos&amp;eacute; and Jeremy. Following
some suggestions by Jos&amp;eacute; (exchanged in portuguese, I won't
bother printing them here... :)), I refactored the patch (and also
found/fixed some minor issues), here is the 2nd take. In the
process I rewrote the number_helper_i18n_test.rb, since it used
mocking in a very brittle way and broke completely with the
slightest refactoring.&lt;/p&gt;
&lt;p&gt;Something I forgot to write in the ticket (but it is in the
docs), is that you can also supply your custom formatting for
&lt;code&gt;number_to_human&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  number_to_human(2000, :format =&amp;gt; &quot;Y%n%u&quot;, :units =&amp;gt; {:thousand =&amp;gt; &quot;k&quot;})  # =&amp;gt;  &quot;Y2k&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Any questions/requests let me know.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-20T20:21:47+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-20T20:21:50+00:00</updated-at>
      <user-id type="integer">16855</user-id>
      <version type="integer">7</version>
      <user-name>Bernardo Padua</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I just discovered there was a line/hack in `number_to_currency` which wasn't doing anything useful (its probably from when it didn't rely on `number_with_precision`), so I yanked it:

@@@ ruby
  separator = '' if precision == 0
@@@

Now `number_to_currency` looks much better. Hope its not too late.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just discovered there was a line/hack in
&lt;code&gt;number_to_currency&lt;/code&gt; which wasn't doing anything useful
(its probably from when it didn't rely on
&lt;code&gt;number_with_precision&lt;/code&gt;), so I yanked it:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  separator = '' if precision == 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;number_to_currency&lt;/code&gt; looks much better. Hope its
not too late.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-20T20:44:05+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-20T20:44:07+00:00</updated-at>
      <user-id type="integer">16855</user-id>
      <version type="integer">8</version>
      <user-name>Bernardo Padua</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Ops, me one more time!

I just figured out rails 3 will have this `html_safe` thing (I wasn't aware, since I am still working with 2.3), and most of the outputs from NumberHelper were not `html_safe` (only number_to_currency was, for some reason). 

I am trying to fix that, hold until I send the updated patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ops, me one more time!&lt;/p&gt;
&lt;p&gt;I just figured out rails 3 will have this &lt;code&gt;html_safe&lt;/code&gt;
thing (I wasn't aware, since I am still working with 2.3), and most
of the outputs from NumberHelper were not &lt;code&gt;html_safe&lt;/code&gt;
(only number_to_currency was, for some reason).&lt;/p&gt;
&lt;p&gt;I am trying to fix that, hold until I send the updated
patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-20T21:36:23+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-20T21:36:24+00:00</updated-at>
      <user-id type="integer">16855</user-id>
      <version type="integer">9</version>
      <user-name>Bernardo Padua</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Hi,

I finally added support for html_safe throughout NumberHelper methods. The updated patch follows (there are two commits, one for the previous improvements, other for this). 

We have to make sure the number (which may also be a string in all helpers) does not have any unsafe stuff, so it was not just a matter of adding `.html_safe` to everything that is returned. Most number helpers return the `number` param unchanged if they are not a valid number (sometimes prepended/appended by something, like number + &quot;%&quot; in `number_to_percentage`), so this is where the danger lies. To accommodate that I had to be a little bit more strict when parsing the numbers in some helpers (which were not doing any parsing) and had to add a way for the helpers to throw exceptions so they could be &quot;bubbled up&quot; to helpers that in turn relied on other helpers (eg.: `number_to_currency` relies on `number_with_precision`).

Of course it is tested. I also structured the tests a little bit more to make a few of those things more clear (methods returning number param unchanged, returning nil when number is nil, etc).

Waiting for your reviews now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I finally added support for html_safe throughout NumberHelper
methods. The updated patch follows (there are two commits, one for
the previous improvements, other for this).&lt;/p&gt;
&lt;p&gt;We have to make sure the number (which may also be a string in
all helpers) does not have any unsafe stuff, so it was not just a
matter of adding &lt;code&gt;.html_safe&lt;/code&gt; to everything that is
returned. Most number helpers return the &lt;code&gt;number&lt;/code&gt; param
unchanged if they are not a valid number (sometimes
prepended/appended by something, like number + &quot;%&quot; in
&lt;code&gt;number_to_percentage&lt;/code&gt;), so this is where the danger
lies. To accommodate that I had to be a little bit more strict when
parsing the numbers in some helpers (which were not doing any
parsing) and had to add a way for the helpers to throw exceptions
so they could be &quot;bubbled up&quot; to helpers that in turn relied on
other helpers (eg.: &lt;code&gt;number_to_currency&lt;/code&gt; relies on
&lt;code&gt;number_with_precision&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Of course it is tested. I also structured the tests a little bit
more to make a few of those things more clear (methods returning
number param unchanged, returning nil when number is nil, etc).&lt;/p&gt;
&lt;p&gt;Waiting for your reviews now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-22T19:46:04+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-22T19:46:08+00:00</updated-at>
      <user-id type="integer">16855</user-id>
      <version type="integer">10</version>
      <user-name>Bernardo Padua</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>(from [75904c566e3ea475045450ba8fb1a74070a94fcb]) Adds number_to_human and several improvements in NumberHelper. [#4239 state:resolved]

Signed-off-by: Jos&#233; Valim &lt;jose.valim@gmail.com&gt;
http://github.com/rails/rails/commit/75904c566e3ea475045450ba8fb1a74070a94fcb</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/75904c566e3ea475045450ba8fb1a74070a94fcb&quot;
title=
&quot;Changeset [75904c566e3ea475045450ba8fb1a74070a94fcb]&quot;&gt;[75904c566e3ea475045450ba8fb1a74070a94fcb]&lt;/a&gt;)
Adds number_to_human and several improvements in NumberHelper.
[&lt;a href=&quot;/projects/8994/tickets/4239&quot; title=
&quot;Ticket #4239&quot;&gt;#4239&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jos&amp;eacute; Valim &lt;a&gt;jose.valim@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/75904c566e3ea475045450ba8fb1a74070a94fcb&quot;&gt;
http://github.com/rails/rails/commit/75904c566e3ea475045450ba8fb1a7...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-22T20:42:04+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-03-22T20:42:06+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">11</version>
      <user-name>Repository</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:49+01:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2010-10-15T23:01:49+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">12</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>thank you very much......&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/&quot;&gt;&#1605;&#1606;&#1578;&#1583;&#1610;&#1575;&#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f86.html&quot;&gt;&#1605;&#1603;&#1610;&#1575;&#1580;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&#1575;&#1586;&#1610;&#1575;&#1569;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&#1601;&#1587;&#1575;&#1578;&#1610;&#1606;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f17.html&quot;&gt;&#1585;&#1587;&#1575;&#1574;&#1604; 
- &#1605;&#1587;&#1580;&#1575;&#1578; - &#1608;&#1587;&#1575;&#1574;&#1591;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f18.html&quot;&gt;&#1578;&#1608;&#1576;&#1610;&#1603;&#1575;&#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;&#1608;&#1592;&#1575;&#1574;&#1601;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;jobs&lt;/a&gt; &lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;&#1576;&#1585;&#1608;&#1603;&#1587;&#1610;&lt;/a&gt; &lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;proxy&lt;/a&gt;&lt;a href=&quot;http://forum.line-sport.tv/&quot;&gt;&#1604;&#1575;&#1610;&#1606; &#1587;&#1576;&#1608;&#1585;&#1578;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;thank you very much......&lt;span class=
&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=
&quot;http://www.tran33m.com/vb/&quot;&gt;&amp;#1605;&amp;#1606;&amp;#1578;&amp;#1583;&amp;#1610;&amp;#1575;&amp;#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f86.html&quot;&gt;&amp;#1605;&amp;#1603;&amp;#1610;&amp;#1575;&amp;#1580;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&amp;#1575;&amp;#1586;&amp;#1610;&amp;#1575;&amp;#1569;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&amp;#1601;&amp;#1587;&amp;#1575;&amp;#1578;&amp;#1610;&amp;#1606;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f17.html&quot;&gt;&amp;#1585;&amp;#1587;&amp;#1575;&amp;#1574;&amp;#1604;&lt;br&gt;
- &amp;#1605;&amp;#1587;&amp;#1580;&amp;#1575;&amp;#1578; -
&amp;#1608;&amp;#1587;&amp;#1575;&amp;#1574;&amp;#1591;&lt;/a&gt;&lt;span class=
&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=
&quot;http://www.tran33m.com/vb/f18.html&quot;&gt;&amp;#1578;&amp;#1608;&amp;#1576;&amp;#1610;&amp;#1603;&amp;#1575;&amp;#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;&amp;#1608;&amp;#1592;&amp;#1575;&amp;#1574;&amp;#1601;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;jobs&lt;/a&gt;
&lt;a href=
&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;&amp;#1576;&amp;#1585;&amp;#1608;&amp;#1603;&amp;#1587;&amp;#1610;&lt;/a&gt;
&lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;proxy&lt;/a&gt;&lt;a href=
&quot;http://forum.line-sport.tv/&quot;&gt;&amp;#1604;&amp;#1575;&amp;#1610;&amp;#1606;
&amp;#1587;&amp;#1576;&amp;#1608;&amp;#1585;&amp;#1578;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-08T11:17:34+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2011-02-08T12:16:04+00:00</updated-at>
      <user-id type="integer">136126</user-id>
      <version type="integer">13</version>
      <user-name>alasiri1</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;You possibly can buy beauty drops you can aquire with many different patterns similar to the triangular as well as rectangle-shaped varieties.&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-bracelets-c-3.html&quot;&gt;&lt;em&gt;Pandoras Bracelets&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; To help while recognize touch available practically expression along with damaged in almost any necklace around your neck.&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-charms-c-9.html&quot;&gt;&lt;em&gt;Pandora&#160;Charms&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; Just in case alphabets will never get that promotion using a man, &lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;pandora ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;use those who obtain out of all kinds of other communities as an example food including cakes,&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; crops and so forth</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;You
possibly can buy beauty drops you can aquire with many different
patterns similar to the triangular as well as rectangle-shaped
varieties.&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/pandora-bracelets-c-3.html&quot;&gt;&lt;em&gt;Pandoras
Bracelets&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; To help while recognize touch available
practically expression along with damaged in almost any necklace
around your neck.&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/pandora-charms-c-9.html&quot;&gt;&lt;em&gt;Pandora&amp;nbsp;Charms&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;
Just in case alphabets will never get that promotion using a man,
&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;pandora
ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;use those who obtain out of all kinds of
other communities as an example food including
cakes,&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora
NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; crops and so forth&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-14T06:15:07+00:00</created-at>
      <creator-id type="integer">16855</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4239</number>
      <permalink>patch-improvements-in-number_helperrb</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>action_view numberhelper number_helper number_to_human_size number_with_precision patch</tag>
      <title>[PATCH] Improvements in number_helper.rb</title>
      <updated-at type="datetime">2011-02-14T07:28:43+00:00</updated-at>
      <user-id type="integer">136876</user-id>
      <version type="integer">14</version>
      <user-name>pandora jewellry</user-name>
      <creator-name>Bernardo Padua</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4239</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>26289d7af7a48e22753a9f59dfb0bfbe87424f97</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-03-19T22:02:20+00:00</created-at>
      <filename>number_to_human_and_number_helper_improvements_with_tests.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">453416</id>
      <size type="integer">42116</size>
      <uploader-id type="integer">16855</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/453416/number_to_human_and_number_helper_improvements_with_tests.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>c896a1d649a173b405ce5c4a9bd366969cece3d8</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-03-20T20:21:47+00:00</created-at>
      <filename>number_to_human_and_number_helper_improvements_with_tests_v2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">453773</id>
      <size type="integer">52661</size>
      <uploader-id type="integer">16855</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/453773/number_to_human_and_number_helper_improvements_with_tests_v2.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>5a3300f8f2cc8e3b0bc669e00f6c261964a37424</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-03-20T20:44:05+00:00</created-at>
      <filename>number_to_human_and_number_helper_improvements_with_tests_v3.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">453774</id>
      <size type="integer">52599</size>
      <uploader-id type="integer">16855</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/453774/number_to_human_and_number_helper_improvements_with_tests_v3.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>0a0c3501a368f4086b848994d3c6a2002a54e125</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-03-22T19:46:04+00:00</created-at>
      <filename>number_to_human_and_number_helper_improvements_with_tests_v4.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">455183</id>
      <size type="integer">71382</size>
      <uploader-id type="integer">16855</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/455183/number_to_human_and_number_helper_improvements_with_tests_v4.diff</url>
    </attachment>
  </attachments>
</ticket>
