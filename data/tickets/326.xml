<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-03T22:31:36+01:00</created-at>
  <creator-id type="integer">17264</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">326</number>
  <permalink>query-generated-with-include-does-not-have-join-clause</permalink>
  <priority type="integer">15153</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>2.1 activerecord bug eager_loading include joins with_scope</tag>
  <title>Query generated with :include does not have join clause</title>
  <updated-at type="datetime">2008-12-08T15:35:45+00:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">3</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>Comron Sattari</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/326</url>
  <priority-name nil="true"></priority-name>
  <original-body>Recently, when we were upgrading from 1.2.x all the way to 2.1 we noticed some of the rails generated queries were not valid SQL. We tracked the problem down to the new feature in rails of loading :included tables in separate queries, the feature is smart enough to revert to the old massive OUTER JOIN style query when the :included tables are used in a :conditions clause. 

The problem we were having was that the feature doesn't extend the same kindness to tables found in our :order clause. Turns out only the conditions_tables method looks to the scope to find tables, we are using with_scope() with an :order clause and it was being ignored. 

We quickly patched our own copy of rails' order_tables to look like this:

@@@ Ruby
        def order_tables(options)
          orders = [scope(:find, :order), options[:order]].flatten.join(', ')
          orders.scan(/([\.\w]+).?\./).flatten
        end
@@@

but couldn't find an appropriate test to change to test for the new expected behavior. Is this a bug or a feature =)? Is using :order with with_scope wrong?

Thanks,
COmron</original-body>
  <latest-body>Recently, when we were upgrading from 1.2.x all the way to 2.1 we noticed some of the rails generated queries were not valid SQL. We tracked the problem down to the new feature in rails of loading :included tables in separate queries, the feature is smart enough to revert to the old massive OUTER JOIN style query when the :included tables are used in a :conditions clause. 

The problem we were having was that the feature doesn't extend the same kindness to tables found in our :order clause. Turns out only the conditions_tables method looks to the scope to find tables, we are using with_scope() with an :order clause and it was being ignored. 

We quickly patched our own copy of rails' order_tables to look like this:

@@@ Ruby
        def order_tables(options)
          orders = [scope(:find, :order), options[:order]].flatten.join(', ')
          orders.scan(/([\.\w]+).?\./).flatten
        end
@@@

but couldn't find an appropriate test to change to test for the new expected behavior. Is this a bug or a feature =)? Is using :order with with_scope wrong?

Thanks,
COmron</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Recently, when we were upgrading from 1.2.x all the way to 2.1 we noticed some of the rails generated queries were not valid SQL. We tracked the problem down to the new feature in rails of loading :included tables in separate queries, the feature is smart enough to revert to the old massive OUTER JOIN style query when the :included tables are used in a :conditions clause.
&lt;/p&gt;&lt;p&gt;
The problem we were having was that the feature doesn't extend the same kindness to tables found in our :order clause. Turns out only the conditions_tables method looks to the scope to find tables, we are using with_scope() with an :order clause and it was being ignored.
&lt;/p&gt;&lt;p&gt;
We quickly patched our own copy of rails' order_tables to look like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;Ruby&quot;&gt;        def order_tables(options)
          orders = [scope(:find, :order), options[:order]].flatten.join(', ')
          orders.scan(/([\.\w]+).?\./).flatten
        end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
but couldn't find an appropriate test to change to test for the new expected behavior. Is this a bug or a feature =)? Is using :order with with_scope wrong?
&lt;/p&gt;&lt;p&gt;
Thanks,
&lt;/p&gt;&lt;p&gt;
COmron
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Recently, when we were upgrading from 1.2.x all the way to 2.1 we noticed some of the rails generated queries were not valid SQL. We tracked the problem down to the new feature in rails of loading :included tables in separate queries, the feature is smart enough to revert to the old massive OUTER JOIN style query when the :included tables are used in a :conditions clause. 

The problem we were having was that the feature doesn't extend the same kindness to tables found in our :order clause. Turns out only the conditions_tables method looks to the scope to find tables, we are using with_scope() with an :order clause and it was being ignored. 

We quickly patched our own copy of rails' order_tables to look like this:

@@@ Ruby
        def order_tables(options)
          orders = [scope(:find, :order), options[:order]].flatten.join(', ')
          orders.scan(/([\.\w]+).?\./).flatten
        end
@@@

but couldn't find an appropriate test to change to test for the new expected behavior. Is this a bug or a feature =)? Is using :order with with_scope wrong?

Thanks,
COmron</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Recently, when we were upgrading from 1.2.x all the way to 2.1 we noticed some of the rails generated queries were not valid SQL. We tracked the problem down to the new feature in rails of loading :included tables in separate queries, the feature is smart enough to revert to the old massive OUTER JOIN style query when the :included tables are used in a :conditions clause.
&lt;/p&gt;&lt;p&gt;
The problem we were having was that the feature doesn't extend the same kindness to tables found in our :order clause. Turns out only the conditions_tables method looks to the scope to find tables, we are using with_scope() with an :order clause and it was being ignored.
&lt;/p&gt;&lt;p&gt;
We quickly patched our own copy of rails' order_tables to look like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;Ruby&quot;&gt;        def order_tables(options)
          orders = [scope(:find, :order), options[:order]].flatten.join(', ')
          orders.scan(/([\.\w]+).?\./).flatten
        end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
but couldn't find an appropriate test to change to test for the new expected behavior. Is this a bug or a feature =)? Is using :order with with_scope wrong?
&lt;/p&gt;&lt;p&gt;
Thanks,
&lt;/p&gt;&lt;p&gt;
COmron
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-03T22:31:36+01:00</created-at>
      <creator-id type="integer">17264</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">326</number>
      <permalink>query-generated-with-include-does-not-have-join-clause</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Query generated with :include does not have join clause</title>
      <updated-at type="datetime">2008-06-03T22:31:36+01:00</updated-at>
      <user-id type="integer">17264</user-id>
      <version type="integer">1</version>
      <user-name>Comron Sattari</user-name>
      <creator-name>Comron Sattari</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/326</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-30T17:53:06+01:00</created-at>
      <creator-id type="integer">17264</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">326</number>
      <permalink>query-generated-with-include-does-not-have-join-clause</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;2.1&quot; activerecord bug eager_loading include joins with_scope</tag>
      <title>Query generated with :include does not have join clause</title>
      <updated-at type="datetime">2008-09-30T17:53:08+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Comron Sattari</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/326</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Was fixed by http://github.com/rails/rails/commit/e94e53f9cd70bee69759661e9771da3fe0ee9554</body>
      <body-html>&lt;div&gt;&lt;p&gt;Was fixed by &lt;a href=&quot;http://github.com/rails/rails/commit/e94e53f9cd70bee69759661e9771da3fe0ee9554&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-08T15:35:42+00:00</created-at>
      <creator-id type="integer">17264</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;2.1\&quot; activerecord bug eager_loading include joins with_scope&quot;
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">326</number>
      <permalink>query-generated-with-include-does-not-have-join-clause</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>2.1 activerecord bug eager_loading include joins with_scope</tag>
      <title>Query generated with :include does not have join clause</title>
      <updated-at type="datetime">2008-12-08T15:35:45+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Comron Sattari</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/326</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
