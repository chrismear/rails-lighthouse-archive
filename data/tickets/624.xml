<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-15T18:54:43+01:00</created-at>
  <creator-id type="integer">26262</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">624</number>
  <permalink>columns-marked-for-serialization-do-not-serialize</permalink>
  <priority type="integer">109</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord bug patch serialization yaml</tag>
  <title>Columns marked for serialization do not serialize</title>
  <updated-at type="datetime">2008-10-28T16:31:49+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">6</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Bryce Kerley</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/624</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Columns in an AR model can be marked for serialization if they are being used to store Arrays, Hashes, or other YAML-able data non-relationally:
@@@
class Hat &lt; ActiveRecord::Base
  serialize :description
end
@@@

However, if this column is used for a variant/union type (such as a column used sometimes for strings, sometimes for arrays, and sometimes for hashes), data can become corrupted when it is deserialized on its way out of the database:
@@@
  1) Failure:
test_what_goes_in_comes_back_out(HatTest)
    [./test/unit/hat_test.rb:10:in `test_what_goes_in_comes_back_out'
     /Users/bryce/Documents/serialize_test/vendor/rails/activerecord/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'
     /Users/bryce/Documents/serialize_test/vendor/rails/activerecord/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run']:
&lt;&quot;&lt;span style=\&quot;color: #800\&quot;&gt;SODA HAT IS A SLANG TERM FOR A LID&lt;/span&gt;\n&quot;&gt; expected but was
&lt;{&quot;&lt;span style=\&quot;color&quot;=&gt;nil}&gt;.
@@@

A project demonstrating this can be found at: http://github.com/bkerley/serialize_test/tree/master

The attached patch adds a test for this problem and provides a fix that passes @@@rake test_sqlite3@@@ .</original-body>
  <latest-body>Columns in an AR model can be marked for serialization if they are being used to store Arrays, Hashes, or other YAML-able data non-relationally:
@@@
class Hat &lt; ActiveRecord::Base
  serialize :description
end
@@@

However, if this column is used for a variant/union type (such as a column used sometimes for strings, sometimes for arrays, and sometimes for hashes), data can become corrupted when it is deserialized on its way out of the database:
@@@
  1) Failure:
test_what_goes_in_comes_back_out(HatTest)
    [./test/unit/hat_test.rb:10:in `test_what_goes_in_comes_back_out'
     /Users/bryce/Documents/serialize_test/vendor/rails/activerecord/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'
     /Users/bryce/Documents/serialize_test/vendor/rails/activerecord/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run']:
&lt;&quot;&lt;span style=\&quot;color: #800\&quot;&gt;SODA HAT IS A SLANG TERM FOR A LID&lt;/span&gt;\n&quot;&gt; expected but was
&lt;{&quot;&lt;span style=\&quot;color&quot;=&gt;nil}&gt;.
@@@

A project demonstrating this can be found at: http://github.com/bkerley/serialize_test/tree/master

The attached patch adds a test for this problem and provides a fix that passes @@@rake test_sqlite3@@@ .</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Columns in an AR model can be marked for serialization if they are being used to store Arrays, Hashes, or other YAML-able data non-relationally:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;class Hat &amp;lt; ActiveRecord::Base
  serialize :description
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
However, if this column is used for a variant/union type (such as a column used sometimes for strings, sometimes for arrays, and sometimes for hashes), data can become corrupted when it is deserialized on its way out of the database:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;  1) Failure:
test_what_goes_in_comes_back_out(HatTest)
    [./test/unit/hat_test.rb:10:in `test_what_goes_in_comes_back_out'
     /Users/bryce/Documents/serialize_test/vendor/rails/activerecord/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'
     /Users/bryce/Documents/serialize_test/vendor/rails/activerecord/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run']:
&amp;lt;&amp;quot;&amp;lt;span style=\&amp;quot;color: &lt;a href=&quot;/projects/8994/tickets/800&quot; title=&quot;Ticket #800&quot;&gt;#800&lt;/a&gt;\&amp;quot;&amp;gt;SODA HAT IS A SLANG TERM FOR A LID&amp;lt;/span&amp;gt;\n&amp;quot;&amp;gt; expected but was
&amp;lt;{&amp;quot;&amp;lt;span style=\&amp;quot;color&amp;quot;=&amp;gt;nil}&amp;gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
A project demonstrating this can be found at: &lt;a href=&quot;http://github.com/bkerley/serialize_test/tree/master&quot;&gt;http://github.com/bkerley/serial...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
The attached patch adds a test for this problem and provides a fix that passes @@@rake test_sqlite3@@@ .
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Columns in an AR model can be marked for serialization if they are being used to store Arrays, Hashes, or other YAML-able data non-relationally:
@@@
class Hat &lt; ActiveRecord::Base
  serialize :description
end
@@@

However, if this column is used for a variant/union type (such as a column used sometimes for strings, sometimes for arrays, and sometimes for hashes), data can become corrupted when it is deserialized on its way out of the database:
@@@
  1) Failure:
test_what_goes_in_comes_back_out(HatTest)
    [./test/unit/hat_test.rb:10:in `test_what_goes_in_comes_back_out'
     /Users/bryce/Documents/serialize_test/vendor/rails/activerecord/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'
     /Users/bryce/Documents/serialize_test/vendor/rails/activerecord/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run']:
&lt;&quot;&lt;span style=\&quot;color: #800\&quot;&gt;SODA HAT IS A SLANG TERM FOR A LID&lt;/span&gt;\n&quot;&gt; expected but was
&lt;{&quot;&lt;span style=\&quot;color&quot;=&gt;nil}&gt;.
@@@

A project demonstrating this can be found at: http://github.com/bkerley/serialize_test/tree/master

The attached patch adds a test for this problem and provides a fix that passes rake test_sqlite3.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Columns in an AR model can be marked for serialization if they are being used to store Arrays, Hashes, or other YAML-able data non-relationally:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;class Hat &amp;lt; ActiveRecord::Base
  serialize :description
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
However, if this column is used for a variant/union type (such as a column used sometimes for strings, sometimes for arrays, and sometimes for hashes), data can become corrupted when it is deserialized on its way out of the database:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;  1) Failure:
test_what_goes_in_comes_back_out(HatTest)
    [./test/unit/hat_test.rb:10:in `test_what_goes_in_comes_back_out'
     /Users/bryce/Documents/serialize_test/vendor/rails/activerecord/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'
     /Users/bryce/Documents/serialize_test/vendor/rails/activerecord/lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run']:
&amp;lt;&amp;quot;&amp;lt;span style=\&amp;quot;color: &lt;a href=&quot;/projects/8994/tickets/800&quot; title=&quot;Ticket #800&quot;&gt;#800&lt;/a&gt;\&amp;quot;&amp;gt;SODA HAT IS A SLANG TERM FOR A LID&amp;lt;/span&amp;gt;\n&amp;quot;&amp;gt; expected but was
&amp;lt;{&amp;quot;&amp;lt;span style=\&amp;quot;color&amp;quot;=&amp;gt;nil}&amp;gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
A project demonstrating this can be found at: &lt;a href=&quot;http://github.com/bkerley/serialize_test/tree/master&quot;&gt;http://github.com/bkerley/serial...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
The attached patch adds a test for this problem and provides a fix that passes rake test_sqlite3.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-15T18:55:41+01:00</created-at>
      <creator-id type="integer">26262</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">624</number>
      <permalink>columns-marked-for-serialization-do-not-serialize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch serialization tested yaml</tag>
      <title>Columns marked for serialization do not serialize</title>
      <updated-at type="datetime">2008-07-15T18:55:41+01:00</updated-at>
      <user-id type="integer">26262</user-id>
      <version type="integer">1</version>
      <user-name>Bryce Kerley</user-name>
      <creator-name>Bryce Kerley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/624</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>So it turns out that attributes_with_quotes grabs the unserialized  version through the provided accessor, and then re-serializes them into the database.  http://github.com/bkerley/serialize_test/commit/a8a1c181a7304cacffe2cfd493934b4f27b1be98 adds a test displaying this case.  I'm still cooking up a fix for this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
So it turns out that attributes_with_quotes grabs the unserialized  version through the provided accessor, and then re-serializes them into the database.  &lt;a href=&quot;http://github.com/bkerley/serialize_test/commit/a8a1c181a7304cacffe2cfd493934b4f27b1be98&quot;&gt;http://github.com/bkerley/serial...&lt;/a&gt; adds a test displaying this case.  I'm still cooking up a fix for this.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-15T19:38:19+01:00</created-at>
      <creator-id type="integer">26262</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">624</number>
      <permalink>columns-marked-for-serialization-do-not-serialize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch serialization tested yaml</tag>
      <title>Columns marked for serialization do not serialize</title>
      <updated-at type="datetime">2008-07-15T19:38:19+01:00</updated-at>
      <user-id type="integer">26262</user-id>
      <version type="integer">2</version>
      <user-name>Bryce Kerley</user-name>
      <creator-name>Bryce Kerley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/624</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Can't do this the way I'm doing it without creating stupid workarounds for lots of tests.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Can't do this the way I'm doing it without creating stupid workarounds for lots of tests.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-15T21:58:55+01:00</created-at>
      <creator-id type="integer">26262</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">624</number>
      <permalink>columns-marked-for-serialization-do-not-serialize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch serialization tested yaml</tag>
      <title>Columns marked for serialization do not serialize</title>
      <updated-at type="datetime">2008-07-15T21:58:55+01:00</updated-at>
      <user-id type="integer">26262</user-id>
      <version type="integer">3</version>
      <user-name>Bryce Kerley</user-name>
      <creator-name>Bryce Kerley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/624</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>OK, got this most of the way fixed, except I'm failing a couple validation tests:
@@@
  1) Failure:
test_validate_uniqueness_scoped_to_defining_class(ValidationsTest)
    [./test/cases/validations_test.rb:393:in `test_validate_uniqueness_scoped_to_defining_class'
     ./test/cases/../../lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'
     ./test/cases/../../lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run']:
Saving r2.
&lt;false&gt; is not true.

  2) Failure:
test_validate_uniqueness_with_scope(ValidationsTest)
    [./test/cases/validations_test.rb:376:in `test_validate_uniqueness_with_scope'
     ./test/cases/../../lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'
     ./test/cases/../../lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run']:
Saving r2 first time.
&lt;false&gt; is not true.

@@@

The changed code, tests, etc. are in the git repo: http://github.com/bkerley/serialize_test/</body>
      <body-html>&lt;div&gt;&lt;p&gt;
OK, got this most of the way fixed, except I'm failing a couple validation tests:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;  1) Failure:
test_validate_uniqueness_scoped_to_defining_class(ValidationsTest)
    [./test/cases/validations_test.rb:393:in `test_validate_uniqueness_scoped_to_defining_class'
     ./test/cases/../../lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'
     ./test/cases/../../lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run']:
Saving r2.
&amp;lt;false&amp;gt; is not true.

  2) Failure:
test_validate_uniqueness_with_scope(ValidationsTest)
    [./test/cases/validations_test.rb:376:in `test_validate_uniqueness_with_scope'
     ./test/cases/../../lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'
     ./test/cases/../../lib/../../activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run']:
Saving r2 first time.
&amp;lt;false&amp;gt; is not true.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The changed code, tests, etc. are in the git repo: &lt;a href=&quot;http://github.com/bkerley/serialize_test/&quot;&gt;http://github.com/bkerley/serial...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T15:10:53+01:00</created-at>
      <creator-id type="integer">26262</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord bug patch serialization tested yaml
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">624</number>
      <permalink>columns-marked-for-serialization-do-not-serialize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch serialization yaml</tag>
      <title>Columns marked for serialization do not serialize</title>
      <updated-at type="datetime">2008-07-17T15:10:53+01:00</updated-at>
      <user-id type="integer">26262</user-id>
      <version type="integer">4</version>
      <user-name>Bryce Kerley</user-name>
      <creator-name>Bryce Kerley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/624</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1

The breakages you are seeing were already there.  Even without your patch you can't validate uniqueness against serialized attributes.  It's just that before a string wouldn't be saved as a yamlized string so the find would work.  (E.g. with/without your patch it does select * from whatever where whatever.serialized_attribute = 'a string'; whereas what's in the DB is '---\n  &quot;a string&quot;'.)

Either: 

1. we fix the tests to not test validation of uniqueness against serialized attributes
2. we fix validates_uniqueness of to work with serialized attribtues
3. we fix finders to know about serialized attributes and co-erce values accordingly.

1 or 3 work for me.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
+1
&lt;/p&gt;&lt;p&gt;
The breakages you are seeing were already there.  Even without your patch you can't validate uniqueness against serialized attributes.  It's just that before a string wouldn't be saved as a yamlized string so the find would work.  (E.g. with/without your patch it does select * from whatever where whatever.serialized_attribute = 'a string'; whereas what's in the DB is '---\n  &quot;a string&quot;'.)
&lt;/p&gt;&lt;p&gt;
Either:
&lt;/p&gt;&lt;p&gt;
1. we fix the tests to not test validation of uniqueness against serialized attributes
&lt;/p&gt;&lt;p&gt;
2. we fix validates_uniqueness of to work with serialized attribtues
&lt;/p&gt;&lt;p&gt;
3. we fix finders to know about serialized attributes and co-erce values accordingly.
&lt;/p&gt;&lt;p&gt;
1 or 3 work for me.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-23T16:13:57+01:00</created-at>
      <creator-id type="integer">26262</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">624</number>
      <permalink>columns-marked-for-serialization-do-not-serialize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch serialization yaml</tag>
      <title>Columns marked for serialization do not serialize</title>
      <updated-at type="datetime">2008-07-23T16:13:57+01:00</updated-at>
      <user-id type="integer">136</user-id>
      <version type="integer">5</version>
      <user-name>Murray Steele</user-name>
      <creator-name>Bryce Kerley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/624</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Staling out, please reopen if this is still a problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Staling out, please reopen if this is still a problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-28T16:31:47+00:00</created-at>
      <creator-id type="integer">26262</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">624</number>
      <permalink>columns-marked-for-serialization-do-not-serialize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug patch serialization yaml</tag>
      <title>Columns marked for serialization do not serialize</title>
      <updated-at type="datetime">2008-10-28T16:31:49+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">6</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Bryce Kerley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/624</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4383fe08626fb7f17b18220af6bdd7435f0e6e3e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-07-17T15:10:53+01:00</created-at>
      <filename>ar_serialization.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">33257</id>
      <size type="integer">5843</size>
      <uploader-id type="integer">26262</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/33257/ar_serialization.patch</url>
    </attachment>
  </attachments>
</ticket>
