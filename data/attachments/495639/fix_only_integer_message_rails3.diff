From 1df28b3bed9edf6342d0d5603426817d384a3048 Mon Sep 17 00:00:00 2001
From: reu <rnavarro1@gmail.com>
Date: Fri, 23 Apr 2010 22:28:31 -0300
Subject: [PATCH] Add not an integer error message to validates_numericaly_of [#4406 resolved]

---
 activemodel/lib/active_model/locale/en.yml         |    1 +
 .../lib/active_model/validations/numericality.rb   |   29 ++++++++++++-------
 .../test/cases/validations/i18n_validation_test.rb |   18 ++++++------
 3 files changed, 28 insertions(+), 20 deletions(-)

diff --git a/activemodel/lib/active_model/locale/en.yml b/activemodel/lib/active_model/locale/en.yml
index ea58021..d05c049 100644
--- a/activemodel/lib/active_model/locale/en.yml
+++ b/activemodel/lib/active_model/locale/en.yml
@@ -17,6 +17,7 @@ en:
       too_short: "is too short (minimum is {{count}} characters)"
       wrong_length: "is the wrong length (should be {{count}} characters)"
       not_a_number: "is not a number"
+      not_an_integer: "must be an integer"
       greater_than: "must be greater than {{count}}"
       greater_than_or_equal_to: "must be greater than or equal to {{count}}"
       equal_to: "must be equal to {{count}}"
diff --git a/activemodel/lib/active_model/validations/numericality.rb b/activemodel/lib/active_model/validations/numericality.rb
index c6d84c5..f974999 100644
--- a/activemodel/lib/active_model/validations/numericality.rb
+++ b/activemodel/lib/active_model/validations/numericality.rb
@@ -25,11 +25,18 @@ module ActiveModel

         return if options[:allow_nil] && raw_value.nil?

-        unless value = parse_raw_value(raw_value, options)
+        unless value = parse_raw_value_as_a_number(raw_value)
           record.errors.add(attr_name, :not_a_number, :value => raw_value, :default => options[:message])
           return
         end

+        if options[:only_integer]
+          unless value = parse_raw_value_as_an_integer(raw_value)
+            record.errors.add(attr_name, :not_an_integer, :value => raw_value, :default => options[:message])
+            return
+          end
+        end
+
         options.slice(*CHECKS.keys).each do |option, option_value|
           case option
           when :odd, :even
@@ -44,23 +51,23 @@ module ActiveModel
               record.errors.add(attr_name, option, :default => options[:message], :value => value, :count => option_value)
             end
           end
-        end
+        end
       end

     protected

-      def parse_raw_value(raw_value, options)
-        if options[:only_integer]
-          raw_value.to_i if raw_value.to_s =~ /\A[+-]?\d+\Z/
-        else
-          begin
-            Kernel.Float(raw_value)
-          rescue ArgumentError, TypeError
-            nil
-          end
+      def parse_raw_value_as_a_number(raw_value)
+        begin
+          Kernel.Float(raw_value)
+        rescue ArgumentError, TypeError
+          nil
         end
       end

+      def parse_raw_value_as_an_integer(raw_value)
+        raw_value.to_i if raw_value.to_s =~ /\A[+-]?\d+\Z/
+      end
+
     end

     module ClassMethods
diff --git a/activemodel/test/cases/validations/i18n_validation_test.rb b/activemodel/test/cases/validations/i18n_validation_test.rb
index 7dd82e7..b99f7e0 100644
--- a/activemodel/test/cases/validations/i18n_validation_test.rb
+++ b/activemodel/test/cases/validations/i18n_validation_test.rb
@@ -217,15 +217,15 @@ class I18nValidationTest < ActiveModel::TestCase

   def test_validates_numericality_of_only_integer_generates_message
     Person.validates_numericality_of :title, :only_integer => true
-    @person.title = 'a'
-    @person.errors.expects(:generate_message).with(:title, :not_a_number, {:value => 'a', :default => nil})
+    @person.title = '1.0'
+    @person.errors.expects(:generate_message).with(:title, :not_an_integer, {:value => '1.0', :default => nil})
     @person.valid?
   end

   def test_validates_numericality_of_only_integer_generates_message_with_custom_default_message
     Person.validates_numericality_of :title, :only_integer => true, :message => 'custom'
-    @person.title = 'a'
-    @person.errors.expects(:generate_message).with(:title, :not_a_number, {:value => 'a', :default => 'custom'})
+    @person.title = '1.0'
+    @person.errors.expects(:generate_message).with(:title, :not_an_integer, {:value => '1.0', :default => 'custom'})
     @person.valid?
   end

@@ -441,20 +441,20 @@ class I18nValidationTest < ActiveModel::TestCase
   # validates_numericality_of with :only_integer w/o mocha

   def test_validates_numericality_of_only_integer_finds_custom_model_key_translation
-    I18n.backend.store_translations 'en', :activemodel => {:errors => {:models => {:person => {:attributes => {:title => {:not_a_number => 'custom message'}}}}}}
-    I18n.backend.store_translations 'en', :errors => {:messages => {:not_a_number => 'global message'}}
+    I18n.backend.store_translations 'en', :activemodel => {:errors => {:models => {:person => {:attributes => {:title => {:not_an_integer => 'custom message'}}}}}}
+    I18n.backend.store_translations 'en', :errors => {:messages => {:not_an_integer => 'global message'}}

     Person.validates_numericality_of :title, :only_integer => true
-    @person.title = 'a'
+    @person.title = '1.0'
     @person.valid?
     assert_equal ['custom message'], @person.errors[:title]
   end

   def test_validates_numericality_of_only_integer_finds_global_default_translation
-    I18n.backend.store_translations 'en', :errors => {:messages => {:not_a_number => 'global message'}}
+    I18n.backend.store_translations 'en', :errors => {:messages => {:not_an_integer => 'global message'}}

     Person.validates_numericality_of :title, :only_integer => true
-    @person.title = 'a'
+    @person.title = '1.0'
     @person.valid?
     assert_equal ['global message'], @person.errors[:title]
   end
--
1.6.6.1

