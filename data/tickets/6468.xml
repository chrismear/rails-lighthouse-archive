<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-25T11:17:44+00:00</created-at>
  <creator-id type="integer">78990</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6468</number>
  <permalink>caching-of-exclusive-row-lock-requests-by-activerecord</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>activerecord &quot;exclusive lock&quot; &quot;for update&quot; &quot;pessimistic locking&quot;</tag>
  <title>Caching of Exclusive Row Lock Requests by ActiveRecord</title>
  <updated-at type="datetime">2011-02-25T12:10:56+00:00</updated-at>
  <user-id type="integer">78990</user-id>
  <version type="integer">3</version>
  <user-name>groe</user-name>
  <creator-name>groe</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6468</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hello,

I guess this is an unexpected behaviour or even a bug.

# Calling
Model1.find(1, :lock =&gt; true)
Model1.find(1, :lock =&gt; true)
# results in
Model1 Load (0.2ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE
CACHE (0.0ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE

# and calling
foo = Model1.find(1)
foo.lock!
foo.lock!
# results in
Model1 Load (0.2ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1
Model1 Load (0.3ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE
CACHE (0.0ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE

IMO queries containing &quot;FOR UPDATE&quot; should never get cached by the ActiveRecord query cache, because that way the database doesn&#180;t even notice the row lock request.

Can be fixed manually by wrapping calls of &quot;lock!&quot; in Model1.uncached-blocks. But IMO this should be automatically handled by ActiveRecord, am I wrong?

Regards</original-body>
  <latest-body>Hello,

I guess this is an unexpected behaviour or even a bug.

# Calling
Model1.find(1, :lock =&gt; true)
Model1.find(1, :lock =&gt; true)
# results in
Model1 Load (0.2ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE
CACHE (0.0ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE

# and calling
foo = Model1.find(1)
foo.lock!
foo.lock!
# results in
Model1 Load (0.2ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1
Model1 Load (0.3ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE
CACHE (0.0ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE

IMO queries containing &quot;FOR UPDATE&quot; should never get cached by the ActiveRecord query cache, because that way the database doesn&#180;t even notice the row lock request.

Can be fixed manually by wrapping calls of &quot;lock!&quot; in Model1.uncached-blocks. But IMO this should be automatically handled by ActiveRecord, am I wrong?

Regards</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I guess this is an unexpected behaviour or even a bug.&lt;/p&gt;
&lt;h1&gt;Calling&lt;/h1&gt;
&lt;p&gt;Model1.find(1, :lock =&amp;gt; true)&lt;br&gt;
Model1.find(1, :lock =&amp;gt; true)&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;results in&lt;/h1&gt;
&lt;p&gt;Model1 Load (0.2ms) SELECT &lt;code&gt;model1&lt;/code&gt;. &lt;em&gt;FROM
&lt;code&gt;model1&lt;/code&gt; WHERE &lt;code&gt;model&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1
LIMIT 1 FOR UPDATE&lt;br&gt;
CACHE (0.0ms) SELECT &lt;code&gt;model1&lt;/code&gt;.&lt;/em&gt; FROM
&lt;code&gt;model1&lt;/code&gt; WHERE &lt;code&gt;model&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1
LIMIT 1 FOR UPDATE&lt;/p&gt;
&lt;h1&gt;and calling&lt;/h1&gt;
&lt;p&gt;foo = Model1.find(1)&lt;br&gt;
foo.lock!&lt;br&gt;
foo.lock!&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;results in&lt;/h1&gt;
&lt;p&gt;Model1 Load (0.2ms) SELECT &lt;code&gt;model1&lt;/code&gt;. &lt;em&gt;FROM
&lt;code&gt;model1&lt;/code&gt; WHERE &lt;code&gt;model&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1
LIMIT 1&lt;br&gt;
Model1 Load (0.3ms) SELECT &lt;code&gt;model1&lt;/code&gt;.&lt;/em&gt; FROM
&lt;code&gt;model1&lt;/code&gt; WHERE &lt;code&gt;model&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1
LIMIT 1 FOR UPDATE&lt;br&gt;
CACHE (0.0ms) SELECT &lt;code&gt;model1&lt;/code&gt;.* FROM &lt;code&gt;model1&lt;/code&gt;
WHERE &lt;code&gt;model&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1 LIMIT 1 FOR UPDATE&lt;/p&gt;
&lt;p&gt;IMO queries containing &quot;FOR UPDATE&quot; should never get cached by
the ActiveRecord query cache, because that way the database
doesn&amp;acute;t even notice the row lock request.&lt;/p&gt;
&lt;p&gt;Can be fixed manually by wrapping calls of &quot;lock!&quot; in
Model1.uncached-blocks. But IMO this should be automatically
handled by ActiveRecord, am I wrong?&lt;/p&gt;
&lt;p&gt;Regards&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello,

I guess this is an unexpected behaviour or even a bug.

# Calling
Model1.find(1, :lock =&gt; true)
Model1.find(1, :lock =&gt; true)
# results in
Model1 Load (0.2ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE
CACHE (0.0ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE

# and calling
foo = Model1.find(1)
foo.lock!
foo.lock!
# results in
Model1 Load (0.2ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1
Model1 Load (0.3ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE
CACHE (0.0ms)  SELECT `model1`.* FROM `model1` WHERE `model`.`id` = 1 LIMIT 1 FOR UPDATE

IMO queries containing &quot;FOR UPDATE&quot; should never get cached by the ActiveRecord query cache, because that way the database doesn&#180;t even notice the row lock request.

Can be fixed manually by wrapping calls of &quot;lock!&quot; in Model1.uncached-blocks. But IMO this should be automatically handled by ActiveRecord, am I wrong?

Regards</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I guess this is an unexpected behaviour or even a bug.&lt;/p&gt;
&lt;h1&gt;Calling&lt;/h1&gt;
&lt;p&gt;Model1.find(1, :lock =&amp;gt; true)&lt;br&gt;
Model1.find(1, :lock =&amp;gt; true)&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;results in&lt;/h1&gt;
&lt;p&gt;Model1 Load (0.2ms) SELECT &lt;code&gt;model1&lt;/code&gt;. &lt;em&gt;FROM
&lt;code&gt;model1&lt;/code&gt; WHERE &lt;code&gt;model&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1
LIMIT 1 FOR UPDATE&lt;br&gt;
CACHE (0.0ms) SELECT &lt;code&gt;model1&lt;/code&gt;.&lt;/em&gt; FROM
&lt;code&gt;model1&lt;/code&gt; WHERE &lt;code&gt;model&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1
LIMIT 1 FOR UPDATE&lt;/p&gt;
&lt;h1&gt;and calling&lt;/h1&gt;
&lt;p&gt;foo = Model1.find(1)&lt;br&gt;
foo.lock!&lt;br&gt;
foo.lock!&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;results in&lt;/h1&gt;
&lt;p&gt;Model1 Load (0.2ms) SELECT &lt;code&gt;model1&lt;/code&gt;. &lt;em&gt;FROM
&lt;code&gt;model1&lt;/code&gt; WHERE &lt;code&gt;model&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1
LIMIT 1&lt;br&gt;
Model1 Load (0.3ms) SELECT &lt;code&gt;model1&lt;/code&gt;.&lt;/em&gt; FROM
&lt;code&gt;model1&lt;/code&gt; WHERE &lt;code&gt;model&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1
LIMIT 1 FOR UPDATE&lt;br&gt;
CACHE (0.0ms) SELECT &lt;code&gt;model1&lt;/code&gt;.* FROM &lt;code&gt;model1&lt;/code&gt;
WHERE &lt;code&gt;model&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 1 LIMIT 1 FOR UPDATE&lt;/p&gt;
&lt;p&gt;IMO queries containing &quot;FOR UPDATE&quot; should never get cached by
the ActiveRecord query cache, because that way the database
doesn&amp;acute;t even notice the row lock request.&lt;/p&gt;
&lt;p&gt;Can be fixed manually by wrapping calls of &quot;lock!&quot; in
Model1.uncached-blocks. But IMO this should be automatically
handled by ActiveRecord, am I wrong?&lt;/p&gt;
&lt;p&gt;Regards&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-25T11:17:44+00:00</created-at>
      <creator-id type="integer">78990</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6468</number>
      <permalink>caching-of-exclusive-row-lock-requests-by-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord &quot;exclusive lock&quot; &quot;for update&quot; &quot;pessimistic locking&quot;</tag>
      <title>Caching of Exclusive Row Lock Requests by ActiveRecord</title>
      <updated-at type="datetime">2011-02-25T11:17:46+00:00</updated-at>
      <user-id type="integer">78990</user-id>
      <version type="integer">1</version>
      <user-name>groe</user-name>
      <creator-name>groe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6468</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>My temporary fix:
# config/lock_caching.rb
    class ActiveRecord::Base
      def lock!(lock=true)
        self.class.uncached do
          self.reload(:lock =&gt; lock) unless new_record?
        end
        self
      end
    end

This disables caching of lock requests when calling &quot;lock!&quot; but does not handle arguments like {:lock =&gt; true} or {:lock =&gt; &quot;FOR UPDATE&quot;}. So is there a better way to fix this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;My temporary fix:&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;config/lock_caching.rb&lt;/h1&gt;
&lt;pre&gt;
&lt;code&gt;class ActiveRecord::Base
  def lock!(lock=true)
    self.class.uncached do
      self.reload(:lock =&amp;gt; lock) unless new_record?
    end
    self
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This disables caching of lock requests when calling &quot;lock!&quot; but
does not handle arguments like {:lock =&amp;gt; true} or {:lock =&amp;gt;
&quot;FOR UPDATE&quot;}. So is there a better way to fix this?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-25T12:01:50+00:00</created-at>
      <creator-id type="integer">78990</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6468</number>
      <permalink>caching-of-exclusive-row-lock-requests-by-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord &quot;exclusive lock&quot; &quot;for update&quot; &quot;pessimistic locking&quot;</tag>
      <title>Caching of Exclusive Row Lock Requests by ActiveRecord</title>
      <updated-at type="datetime">2011-02-25T12:01:52+00:00</updated-at>
      <user-id type="integer">78990</user-id>
      <version type="integer">2</version>
      <user-name>groe</user-name>
      <creator-name>groe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6468</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-25T12:10:53+00:00</created-at>
      <creator-id type="integer">78990</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6468</number>
      <permalink>caching-of-exclusive-row-lock-requests-by-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord &quot;exclusive lock&quot; &quot;for update&quot; &quot;pessimistic locking&quot;</tag>
      <title>Caching of Exclusive Row Lock Requests by ActiveRecord</title>
      <updated-at type="datetime">2011-02-25T12:10:56+00:00</updated-at>
      <user-id type="integer">78990</user-id>
      <version type="integer">3</version>
      <user-name>groe</user-name>
      <creator-name>groe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6468</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
