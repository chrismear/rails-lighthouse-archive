<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-01-15T18:47:02+00:00</created-at>
  <creator-id type="integer">82451</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3699</number>
  <permalink>timestamps-with-has_and_belongs_to_many</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Timestamps with has_and_belongs_to_many</title>
  <updated-at type="datetime">2010-06-12T03:15:02+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">2</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Lyle</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3699</url>
  <priority-name>Low</priority-name>
  <original-body>I'm using Rails 2.3.5.

All of my tables include the default timestamps (created_at and updated_at) including my join tables for has_and_belongs_to_many (habtm) associations. When I retrieve the habtm objects using the convention `task.colors`, Rails returns the timestamps from the join table instead of the color table. Since it returns Color objects, the timestamps should be from the colors table since that reflects when the Color object was last updated.

Both tables have timestamps, is Rails confusing the two? Or is this by design?

@@@ ruby
class Task &lt; ActiveRecord::Base
  has_and_belongs_to_many :colors
end
@@@

@@@ ruby
class CreateColorsTasks &lt; ActiveRecord::Migration
  def self.up
    create_table :colors_tasks, :id =&gt; false do |t|
      t.integer 'color_id', :null =&gt; false
      t.integer 'task_id', :null =&gt; false
      t.timestamps
@@@

@@@ ruby
class CreateTasks &lt; ActiveRecord::Migration
  def self.up
    create_table :tasks do |t|
      t.string 'name'
      t.timestamps
@@@

@@@ ruby
class CreateColors &lt; ActiveRecord::Migration
  def self.up
    create_table :colors do |t|
      t.string 'name'
      t.timestamps
@@@</original-body>
  <latest-body>I'm using Rails 2.3.5.

All of my tables include the default timestamps (created_at and updated_at) including my join tables for has_and_belongs_to_many (habtm) associations. When I retrieve the habtm objects using the convention `task.colors`, Rails returns the timestamps from the join table instead of the color table. Since it returns Color objects, the timestamps should be from the colors table since that reflects when the Color object was last updated.

Both tables have timestamps, is Rails confusing the two? Or is this by design?

@@@ ruby
class Task &lt; ActiveRecord::Base
  has_and_belongs_to_many :colors
end
@@@

@@@ ruby
class CreateColorsTasks &lt; ActiveRecord::Migration
  def self.up
    create_table :colors_tasks, :id =&gt; false do |t|
      t.integer 'color_id', :null =&gt; false
      t.integer 'task_id', :null =&gt; false
      t.timestamps
@@@

@@@ ruby
class CreateTasks &lt; ActiveRecord::Migration
  def self.up
    create_table :tasks do |t|
      t.string 'name'
      t.timestamps
@@@

@@@ ruby
class CreateColors &lt; ActiveRecord::Migration
  def self.up
    create_table :colors do |t|
      t.string 'name'
      t.timestamps
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm using Rails 2.3.5.&lt;/p&gt;
&lt;p&gt;All of my tables include the default timestamps (created_at and
updated_at) including my join tables for has_and_belongs_to_many
(habtm) associations. When I retrieve the habtm objects using the
convention &lt;code&gt;task.colors&lt;/code&gt;, Rails returns the timestamps
from the join table instead of the color table. Since it returns
Color objects, the timestamps should be from the colors table since
that reflects when the Color object was last updated.&lt;/p&gt;
&lt;p&gt;Both tables have timestamps, is Rails confusing the two? Or is
this by design?&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Task &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :colors
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class CreateColorsTasks &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :colors_tasks, :id =&amp;gt; false do |t|
      t.integer 'color_id', :null =&amp;gt; false
      t.integer 'task_id', :null =&amp;gt; false
      t.timestamps&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class CreateTasks &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :tasks do |t|
      t.string 'name'
      t.timestamps&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class CreateColors &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :colors do |t|
      t.string 'name'
      t.timestamps&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm using Rails 2.3.5.

All of my tables include the default timestamps (created_at and updated_at) including my join tables for has_and_belongs_to_many (habtm) associations. When I retrieve the habtm objects using the convention `task.colors`, Rails returns the timestamps from the join table instead of the color table. Since it returns Color objects, the timestamps should be from the colors table since that reflects when the Color object was last updated.

Both tables have timestamps, is Rails confusing the two? Or is this by design?

@@@ ruby
class Task &lt; ActiveRecord::Base
  has_and_belongs_to_many :colors
end
@@@

@@@ ruby
class CreateColorsTasks &lt; ActiveRecord::Migration
  def self.up
    create_table :colors_tasks, :id =&gt; false do |t|
      t.integer 'color_id', :null =&gt; false
      t.integer 'task_id', :null =&gt; false
      t.timestamps
@@@

@@@ ruby
class CreateTasks &lt; ActiveRecord::Migration
  def self.up
    create_table :tasks do |t|
      t.string 'name'
      t.timestamps
@@@

@@@ ruby
class CreateColors &lt; ActiveRecord::Migration
  def self.up
    create_table :colors do |t|
      t.string 'name'
      t.timestamps
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm using Rails 2.3.5.&lt;/p&gt;
&lt;p&gt;All of my tables include the default timestamps (created_at and
updated_at) including my join tables for has_and_belongs_to_many
(habtm) associations. When I retrieve the habtm objects using the
convention &lt;code&gt;task.colors&lt;/code&gt;, Rails returns the timestamps
from the join table instead of the color table. Since it returns
Color objects, the timestamps should be from the colors table since
that reflects when the Color object was last updated.&lt;/p&gt;
&lt;p&gt;Both tables have timestamps, is Rails confusing the two? Or is
this by design?&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Task &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :colors
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class CreateColorsTasks &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :colors_tasks, :id =&amp;gt; false do |t|
      t.integer 'color_id', :null =&amp;gt; false
      t.integer 'task_id', :null =&amp;gt; false
      t.timestamps&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class CreateTasks &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :tasks do |t|
      t.string 'name'
      t.timestamps&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class CreateColors &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :colors do |t|
      t.string 'name'
      t.timestamps&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-15T18:47:02+00:00</created-at>
      <creator-id type="integer">82451</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3699</number>
      <permalink>timestamps-with-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Timestamps with has_and_belongs_to_many</title>
      <updated-at type="datetime">2010-01-15T18:47:05+00:00</updated-at>
      <user-id type="integer">82451</user-id>
      <version type="integer">1</version>
      <user-name>Lyle</user-name>
      <creator-name>Lyle</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3699</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Use a `has_many :through` if you want more than just the join columns in the join table.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Use a &lt;code&gt;has_many :through&lt;/code&gt; if you want more than just
the join columns in the join table.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-12T03:14:58+01:00</created-at>
      <creator-id type="integer">82451</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3699</number>
      <permalink>timestamps-with-has_and_belongs_to_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Timestamps with has_and_belongs_to_many</title>
      <updated-at type="datetime">2010-06-12T03:15:02+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">2</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Lyle</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3699</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
