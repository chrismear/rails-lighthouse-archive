<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-02T10:46:35+01:00</created-at>
  <creator-id type="integer">46921</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5542</number>
  <permalink>namespaced-models-activemodelname-uses-activesupportinflector-incorrectly</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Namespaced models: ActiveModel::Name uses ActiveSupport::Inflector incorrectly?</title>
  <updated-at type="datetime">2010-10-02T10:46:35+01:00</updated-at>
  <user-id type="integer">46921</user-id>
  <version type="integer">3</version>
  <user-name>der_flo</user-name>
  <creator-name>der_flo</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5542</url>
  <priority-name>Low</priority-name>
  <original-body>When working with namespaced models, ActiveModel::Name seems to use ActiveSupport::Inflector not correct.

@@@ ruby
@singular = ActiveSupport::Inflector.underscore(self).tr('/', '_').freeze
@plural = ActiveSupport::Inflector.pluralize(@singular).freeze
@@@
Suppose self is something like Seafood::Fish, @singular results in 'seafood_fish' and @plural in 'seafood_fishs'.
But @plural should also be 'seafood_fish', because 'fish' is defined as uncountable.

Do you agree, that this is an error? If yes, I could try to create a patch.

Thanks,
der Flo</original-body>
  <latest-body>When working with namespaced models, ActiveModel::Name seems to use ActiveSupport::Inflector not correct.

@@@ ruby
@singular = ActiveSupport::Inflector.underscore(self).tr('/', '_').freeze
@plural = ActiveSupport::Inflector.pluralize(@singular).freeze
@@@
Suppose self is something like Seafood::Fish, @singular results in 'seafood_fish' and @plural in 'seafood_fishs'.
But @plural should also be 'seafood_fish', because 'fish' is defined as uncountable.

Do you agree, that this is an error? If yes, I could try to create a patch.

Thanks,
der Flo</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When working with namespaced models, ActiveModel::Name seems to
use ActiveSupport::Inflector not correct.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;@singular = ActiveSupport::Inflector.underscore(self).tr('/', '_').freeze
@plural = ActiveSupport::Inflector.pluralize(@singular).freeze&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Suppose self is something like Seafood::Fish, @singular results
in 'seafood_fish' and @plural in 'seafood_fishs'.&lt;br&gt;
But @plural should also be 'seafood_fish', because 'fish' is
defined as uncountable.&lt;/p&gt;
&lt;p&gt;Do you agree, that this is an error? If yes, I could try to
create a patch.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
der Flo&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When working with namespaced models, ActiveModel::Name seems to use ActiveSupport::Inflector not correct.

@@@ ruby
@singular = ActiveSupport::Inflector.underscore(self).tr('/', '_').freeze
@plural = ActiveSupport::Inflector.pluralize(@singular).freeze
@@@
Suppose self is something like Seafood::Fish, @singular results in 'seafood_fish' and @plural in 'seafood_fishs'.
But @plural should also be 'seafood_fish', because 'fish' is defined as uncountable.

Do you agree, that this is an error? If yes, I could try to create a patch.

Thanks,
der Flo</body>
      <body-html>&lt;div&gt;&lt;p&gt;When working with namespaced models, ActiveModel::Name seems to
use ActiveSupport::Inflector not correct.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;@singular = ActiveSupport::Inflector.underscore(self).tr('/', '_').freeze
@plural = ActiveSupport::Inflector.pluralize(@singular).freeze&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Suppose self is something like Seafood::Fish, @singular results
in 'seafood_fish' and @plural in 'seafood_fishs'.&lt;br&gt;
But @plural should also be 'seafood_fish', because 'fish' is
defined as uncountable.&lt;/p&gt;
&lt;p&gt;Do you agree, that this is an error? If yes, I could try to
create a patch.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
der Flo&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-03T10:01:13+01:00</created-at>
      <creator-id type="integer">46921</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5542</number>
      <permalink>namespaced-models-activemodelname-uses-activesupportinflector-incorrectly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Namespaced models: ActiveModel::Name uses ActiveSupport::Inflector incorrectly?</title>
      <updated-at type="datetime">2010-09-03T10:01:14+01:00</updated-at>
      <user-id type="integer">46921</user-id>
      <version type="integer">1</version>
      <user-name>der_flo</user-name>
      <creator-name>der_flo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5542</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You need to add seafood_fish to your uncountable inflections:

@@@ ruby
# config/initializers/inflections.rb
ActiveSupport::Inflector.inflections do |inflect|
  inflect.uncountable %w( seafood_fish )
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;You need to add seafood_fish to your uncountable
inflections:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# config/initializers/inflections.rb
ActiveSupport::Inflector.inflections do |inflect|
  inflect.uncountable %w( seafood_fish )
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-03T11:18:29+01:00</created-at>
      <creator-id type="integer">46921</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5542</number>
      <permalink>namespaced-models-activemodelname-uses-activesupportinflector-incorrectly</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Namespaced models: ActiveModel::Name uses ActiveSupport::Inflector incorrectly?</title>
      <updated-at type="datetime">2010-09-03T11:18:30+01:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>der_flo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5542</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The problem is that methods like `polymorphic_url` internally use the Inflector in the way I described, but the router handles it differently. I want to give an example:

@@@ bash
    rvm 1.9.2
    rails new testapp
    cd testapp
    rails generate scaffold Seafood::Fish name:string
    rails generate controller test index
@@@
config/routes.rb (generated):
@@@ ruby
    ...
    namespace :seafood do resources :fish end
    ...
@@@
app/controllers/test_controller.rb:
@@@ ruby
    class TestController &lt; ApplicationController
      def index
        render :text =&gt; polymorphic_url(Seafood::Fish)
      end
    end
@@@

See what `rake routes` shows:
@@@
    seafood_fish_index GET    /seafood/fish(.:format)          {:action=&gt;&quot;index&quot;, :controller=&gt;&quot;seafood/fish&quot;}
    seafood_fish_index POST   /seafood/fish(.:format)          {:action=&gt;&quot;create&quot;, :controller=&gt;&quot;seafood/fish&quot;}
      new_seafood_fish GET    /seafood/fish/new(.:format)      {:action=&gt;&quot;new&quot;, :controller=&gt;&quot;seafood/fish&quot;}
     edit_seafood_fish GET    /seafood/fish/:id/edit(.:format) {:action=&gt;&quot;edit&quot;, :controller=&gt;&quot;seafood/fish&quot;}
          seafood_fish GET    /seafood/fish/:id(.:format)      {:action=&gt;&quot;show&quot;, :controller=&gt;&quot;seafood/fish&quot;}
          seafood_fish PUT    /seafood/fish/:id(.:format)      {:action=&gt;&quot;update&quot;, :controller=&gt;&quot;seafood/fish&quot;}
          seafood_fish DELETE /seafood/fish/:id(.:format)      {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;seafood/fish&quot;}
@@@

But calling our action `/test/index` gives us the following error:
@@@
    undefined method `seafood_fishes_url' for #&lt;TestController:0x9100848&gt;
@@@

Do you see the problem? Or is it an inconsistency?

Thanks again!</body>
      <body-html>&lt;div&gt;&lt;p&gt;The problem is that methods like &lt;code&gt;polymorphic_url&lt;/code&gt;
internally use the Inflector in the way I described, but the router
handles it differently. I want to give an example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash&quot;&gt;    rvm 1.9.2
    rails new testapp
    cd testapp
    rails generate scaffold Seafood::Fish name:string
    rails generate controller test index&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;config/routes.rb (generated):&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    ...&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&lt;code&gt;namespace :seafood do resources :fish end
...&amp;lt;/code&amp;gt;&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
&lt;/pre&gt;
app/controllers/test_controller.rb:&lt;br&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    class TestController &amp;lt; ApplicationController&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&lt;code&gt;  def index
    render :text =&amp;amp;gt; polymorphic_url(Seafood::Fish)
  end
end&amp;lt;/code&amp;gt;&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
&lt;/pre&gt;
&lt;p&gt;See what &lt;code&gt;rake routes&lt;/code&gt; shows:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    seafood_fish_index GET    /seafood/fish(.:format)          {:action=&amp;gt;&quot;index&quot;, :controller=&amp;gt;&quot;seafood/fish&quot;}&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&lt;code&gt;seafood_fish_index POST   /seafood/fish(.:format)          {:action=&amp;amp;gt;&amp;amp;quot;create&amp;amp;quot;, :controller=&amp;amp;gt;&amp;amp;quot;seafood/fish&amp;amp;quot;}
  new_seafood_fish GET    /seafood/fish/new(.:format)      {:action=&amp;amp;gt;&amp;amp;quot;new&amp;amp;quot;, :controller=&amp;amp;gt;&amp;amp;quot;seafood/fish&amp;amp;quot;}
 edit_seafood_fish GET    /seafood/fish/:id/edit(.:format) {:action=&amp;amp;gt;&amp;amp;quot;edit&amp;amp;quot;, :controller=&amp;amp;gt;&amp;amp;quot;seafood/fish&amp;amp;quot;}
      seafood_fish GET    /seafood/fish/:id(.:format)      {:action=&amp;amp;gt;&amp;amp;quot;show&amp;amp;quot;, :controller=&amp;amp;gt;&amp;amp;quot;seafood/fish&amp;amp;quot;}
      seafood_fish PUT    /seafood/fish/:id(.:format)      {:action=&amp;amp;gt;&amp;amp;quot;update&amp;amp;quot;, :controller=&amp;amp;gt;&amp;amp;quot;seafood/fish&amp;amp;quot;}
      seafood_fish DELETE /seafood/fish/:id(.:format)      {:action=&amp;amp;gt;&amp;amp;quot;destroy&amp;amp;quot;, :controller=&amp;amp;gt;&amp;amp;quot;seafood/fish&amp;amp;quot;}&amp;lt;/code&amp;gt;&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
&lt;/pre&gt;
&lt;p&gt;But calling our action &lt;code&gt;/test/index&lt;/code&gt; gives us the
following error:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    undefined method &lt;/code&gt;seafood_fishes_url' for #&amp;amp;lt;TestController:0x9100848&amp;amp;gt;&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;

&lt;br&gt;
Do you see the problem? Or is it an inconsistency?

&lt;br&gt;
Thanks again!
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-30T15:58:01+01:00</created-at>
      <creator-id type="integer">46921</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5542</number>
      <permalink>namespaced-models-activemodelname-uses-activesupportinflector-incorrectly</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Namespaced models: ActiveModel::Name uses ActiveSupport::Inflector incorrectly?</title>
      <updated-at type="datetime">2010-09-30T15:58:02+01:00</updated-at>
      <user-id type="integer">46921</user-id>
      <version type="integer">3</version>
      <user-name>der_flo</user-name>
      <creator-name>der_flo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5542</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
