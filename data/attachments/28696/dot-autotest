Autotest.add_hook :initialize do |at|
  
  at.failed_results_re = /^\s+\d+\) (?:Failure|Error):\n(.*?)\((.*?)\)\n\[([^:]*):.*\]/
  
  at.add_exception %r%^\./(?:doc|bin)%
  
  at.clear_mappings
  
  at.add_mapping %r%^lib/active_support/multibyte% do
    "test/multibyte_chars_test.rb"
  end
  
  at.add_mapping %r%^lib/active_support/cache% do
    "test/caching_test.rb"
  end
  
  at.add_mapping %r%^lib/active_support/testing% do
    "test/test_test.rb"
  end
  
  at.add_mapping %r%^lib/active_support/json% do
    at.files_matching %r%^test/json.*_test\.rb$%
  end
  
  at.add_mapping %r%^lib/active_support/json% do
    at.files_matching %r%^test/json.*_test\.rb$%
  end
  
  at.add_mapping %r%^lib/active_support/core_ext/(\w*).rb$% do |_, match|
    "test/core_ext/#{match[1]}_test.rb"
  end
  
  at.add_mapping %r%^lib/active_support/core_ext/([^\/]*)% do |_, match|
    ["test/core_ext/#{File.basename(match[1])}_ext_test.rb", "test/core_ext/#{File.basename(match[1])}_test.rb"]
  end
  
  at.add_mapping %r%^lib/active_support/([^\/]*).rb% do |_, match|
    sqwat = match[1].gsub('/', '_')
    "test/#{sqwat}_test.rb"
  end
  
  at.add_mapping %r%^test/.*_test.rb$% do |filename, _|
    filename
  end
  
  class << at
    def consolidate_failures(failed)
      failed.inject(new_hash_of_arrays) do |filters, (method, klass, filename)|
        filters[File.expand_path(filename)] << method; filters
      end
    end
  end
end