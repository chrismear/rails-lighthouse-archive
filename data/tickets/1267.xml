<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">5</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-24T18:42:15+01:00</created-at>
  <creator-id type="integer">32550</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">82855</milestone-id>
  <number type="integer">1267</number>
  <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
  <priority type="integer">2</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord bugmash named_scope patch</tag>
  <title>Methods invoked within named_scope Procs should respect the scope stack</title>
  <updated-at type="datetime">2011-02-02T17:01:01+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">26</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>jvoorhis</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
  <milestone-title>2.3.10</milestone-title>
  <priority-name>Medium</priority-name>
  <original-body>Since Procs passed to a named_scope declaration are executed within the scope of the class, the rules of the scope chain are not applied to queries executed within the Proc. This patch modifies this behavior to apply the scope to methods invoked within the Proc.

See activerecord/test/cases/named_scope_test.rb and activerecord/test/models/topic.rb for examples.</original-body>
  <latest-body>Since Procs passed to a named_scope declaration are executed within the scope of the class, the rules of the scope chain are not applied to queries executed within the Proc. This patch modifies this behavior to apply the scope to methods invoked within the Proc.

See activerecord/test/cases/named_scope_test.rb and activerecord/test/models/topic.rb for examples.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Since Procs passed to a named_scope declaration are executed
within the scope of the class, the rules of the scope chain are not
applied to queries executed within the Proc. This patch modifies
this behavior to apply the scope to methods invoked within the
Proc.&lt;/p&gt;
&lt;p&gt;See activerecord/test/cases/named_scope_test.rb and
activerecord/test/models/topic.rb for examples.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Since Procs passed to a named_scope declaration are executed within the scope of the class, the rules of the scope chain are not applied to queries executed within the Proc. This patch modifies this behavior to apply the scope to methods invoked within the Proc.

See activerecord/test/cases/named_scope_test.rb and activerecord/test/models/topic.rb for examples.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Since Procs passed to a named_scope declaration are executed
within the scope of the class, the rules of the scope chain are not
applied to queries executed within the Proc. This patch modifies
this behavior to apply the scope to methods invoked within the
Proc.&lt;/p&gt;
&lt;p&gt;See activerecord/test/cases/named_scope_test.rb and
activerecord/test/models/topic.rb for examples.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-24T18:42:15+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2008-10-24T18:42:21+01:00</updated-at>
      <user-id type="integer">32550</user-id>
      <version type="integer">1</version>
      <user-name>jvoorhis</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [6a13376525f34a00e013fc3a6022838329dfe856]) Methods invoked within named scope Procs should respect the scope stack. [#1267 state:resolved]

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/6a13376525f34a00e013fc3a6022838329dfe856</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [6a13376525f34a00e013fc3a6022838329dfe856]) Methods
invoked within named scope Procs should respect the scope stack.
[&lt;a href=&quot;/projects/8994/tickets/1267&quot; title=&quot;Ticket #1267&quot;&gt;#1267&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Pratik Naik &lt;a href=&quot;mailto:pratiknaik@gmail.com&quot;&gt;pratiknaik@gmail.com&lt;/a&gt; &lt;a href=&quot;http://github.com/rails/rails/commit/6a13376525f34a00e013fc3a6022838329dfe856&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-06T17:01:20+00:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-03-06T17:01:22+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">2</version>
      <user-name>Repository</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This leads to named_scopes that are order dependent, and queries inside of lambdas do not behave as you would expect.

Given a User class with a 'friends' association (pointing at other Users) with the following named_scopes:

@@@ ruby

named_scope :named_bob, {
  :conditions =&gt; {:name =&gt; 'bob'}
}

named_scope :second_degree_friends, lambda{|user|
  user_friends = user.friends
  second_degree_friend_ids = user_friends.collect{|u| u.friend_ids}
  {
    :conditions =&gt; {:id =&gt; second_degree_friend_ids.flatten}
  }
}

User.named_bob.second_degree_friends(user_sam) 
User.second_degree_friends(user_sam).named_bob 

@@@

So one of these queries will only pull user_sam's friends named 'bob' and then see if any of them have friends named 'bob' which is not what I want.  The other one will work as expected where it finds all of user_sam's second degree friends named bob.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This leads to named_scopes that are order dependent, and queries
inside of lambdas do not behave as you would expect.&lt;/p&gt;
&lt;p&gt;Given a User class with a 'friends' association (pointing at
other Users) with the following named_scopes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
named_scope :named_bob, {
  :conditions =&amp;gt; {:name =&amp;gt; 'bob'}
}

named_scope :second_degree_friends, lambda{|user|
  user_friends = user.friends
  second_degree_friend_ids = user_friends.collect{|u| u.friend_ids}
  {
    :conditions =&amp;gt; {:id =&amp;gt; second_degree_friend_ids.flatten}
  }
}

User.named_bob.second_degree_friends(user_sam) 
User.second_degree_friends(user_sam).named_bob&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So one of these queries will only pull user_sam's friends named
'bob' and then see if any of them have friends named 'bob' which is
not what I want. The other one will work as expected where it finds
all of user_sam's second degree friends named bob.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-27T19:46:16+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-27T19:49:33+01:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">3</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm not seeing this as a huge problem, if you *don't* want the scope applied to the stack then you could use with_exclusive_scope or something in the named_scope declaration?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not seeing this as a huge problem, if you &lt;em&gt;don't&lt;/em&gt;
want the scope applied to the stack then you could use
with_exclusive_scope or something in the named_scope
declaration?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-27T22:47:28+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-27T22:47:32+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">4</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>To me, named_scopes should be composable.  If I can't rely on the internals of a named_scope to create the same conditions every time I pass it the same parameters, then it's not reliable enough to use in a composable manner.

We often have search objects where a chain of named_scopes will get passed around, and you don't care what has already been applied, you just know you need to add an additional condition, so you tack on an additional named_scope knowing that it should add the condition regardless of what has already been added to the scope.

But now, the scopes no longer work in isolation.  You need to know what scopes have been applied, and how those scopes will affect the implementation details of the scope you are about to apply.

You could, as you mention, construct all of your named_scopes using with_exclusive_scope inside the lambda, but that seems like too much work for what should be the default behavior (and possibly prone to error if there are default_scopes or larger with_scopes that you actually want for some reason).

It's not clear from the tests what the original use case was for this patch, but if it is necessary behavior, it feels like it should not be the default behavior.</body>
      <body-html>&lt;div&gt;&lt;p&gt;To me, named_scopes should be composable. If I can't rely on the
internals of a named_scope to create the same conditions every time
I pass it the same parameters, then it's not reliable enough to use
in a composable manner.&lt;/p&gt;
&lt;p&gt;We often have search objects where a chain of named_scopes will
get passed around, and you don't care what has already been
applied, you just know you need to add an additional condition, so
you tack on an additional named_scope knowing that it should add
the condition regardless of what has already been added to the
scope.&lt;/p&gt;
&lt;p&gt;But now, the scopes no longer work in isolation. You need to
know what scopes have been applied, and how those scopes will
affect the implementation details of the scope you are about to
apply.&lt;/p&gt;
&lt;p&gt;You could, as you mention, construct all of your named_scopes
using with_exclusive_scope inside the lambda, but that seems like
too much work for what should be the default behavior (and possibly
prone to error if there are default_scopes or larger with_scopes
that you actually want for some reason).&lt;/p&gt;
&lt;p&gt;It's not clear from the tests what the original use case was for
this patch, but if it is necessary behavior, it feels like it
should not be the default behavior.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-28T11:13:36+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-28T11:13:41+01:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">5</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I have to agree with Joseph.  This change significantly effects the behavior of existing named scopes, and it's not clear what the original motivation is.  Changing the internal behavior of a named_scope based on the scope in which it's applied at runtime strikes me as a violation of Least Surprise.  Named scopes have always been somewhat order dependent (with regard to SELECT, ORDER BY, etc. clauses), as others have pointed out, but this effect on CONDITIONS takes order dependence to a new extreme.

Perhaps someone could explain the scenario that led to the change, and explain why it's important enough to break existing applications?  Unless there's a truly compelling need I fully support rolling this change back.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have to agree with Joseph. This change significantly effects
the behavior of existing named scopes, and it's not clear what the
original motivation is. Changing the internal behavior of a
named_scope based on the scope in which it's applied at runtime
strikes me as a violation of Least Surprise. Named scopes have
always been somewhat order dependent (with regard to SELECT, ORDER
BY, etc. clauses), as others have pointed out, but this effect on
CONDITIONS takes order dependence to a new extreme.&lt;/p&gt;
&lt;p&gt;Perhaps someone could explain the scenario that led to the
change, and explain why it's important enough to break existing
applications? Unless there's a truly compelling need I fully
support rolling this change back.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-28T17:29:49+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-28T17:29:53+01:00</updated-at>
      <user-id type="integer">29892</user-id>
      <version type="integer">6</version>
      <user-name>Adam Milligan</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>At this point, I should explain our motivation for this patch. On a couple occasions we have created some named scopes for complex queries that execute their own, auxiliary queries to limit the complexity of any one query for performance reasons. Since the outcome of the named scope chain's final query is dependent on the results of an auxiliary query, we'd like the same conditions to be applied to it &#8211;&#160;otherwise a named scope with an inner query is not composable.

Admittedly, this is not the most common case, but regardless of the api I would like it to be convenient. I think the with_exclusive_scope is a decent &quot;escape hatch&quot; mechanism, but I would be open to a change in the opposite direction &#8211;&#160;perhaps using with_chained_scopes to apply the accumulated query options instead of having them available by default. Regardless of the outcome, I'm glad we're discussing the semantics of named scopes now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;At this point, I should explain our motivation for this patch.
On a couple occasions we have created some named scopes for complex
queries that execute their own, auxiliary queries to limit the
complexity of any one query for performance reasons. Since the
outcome of the named scope chain's final query is dependent on the
results of an auxiliary query, we'd like the same conditions to be
applied to it &amp;#8211;&amp;nbsp;otherwise a named scope with an inner
query is not composable.&lt;/p&gt;
&lt;p&gt;Admittedly, this is not the most common case, but regardless of
the api I would like it to be convenient. I think the
with_exclusive_scope is a decent &quot;escape hatch&quot; mechanism, but I
would be open to a change in the opposite direction
&amp;#8211;&amp;nbsp;perhaps using with_chained_scopes to apply the
accumulated query options instead of having them available by
default. Regardless of the outcome, I'm glad we're discussing the
semantics of named scopes now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-28T17:32:37+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-28T17:32:40+01:00</updated-at>
      <user-id type="integer">32550</user-id>
      <version type="integer">7</version>
      <user-name>jvoorhis</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here is a test that shows the original functionality, before the patch.

I could get behind a :with_chained_scopes option to named_scope.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is a test that shows the original functionality, before the
patch.&lt;/p&gt;
&lt;p&gt;I could get behind a :with_chained_scopes option to
named_scope.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-28T20:51:56+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-28T20:52:00+01:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">8</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>3rd try, not sure why the patch file is not making it to S3</body>
      <body-html>&lt;div&gt;&lt;p&gt;3rd try, not sure why the patch file is not making it to S3&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-28T21:06:22+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-28T21:06:27+01:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">9</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I'm still not sold the the abstract idea of composibility is worth making this change.   Scopes *aren't* purely composable because there are certain options where composing makes no sense.  Order and limit clauses for example.


I don't see why the current behaviour is any more confusing / surprising than what you're proposing.  The proc / lamda is evaluated in a given context, and that context either does or doesn't have scope applied.  If you want to opt out of scoping then you use with_exclusive_scope.  You'd get the same behaviour with class methods and association method_missing.

All the same, opening the ticket and marking for resolution by 2.3.4.  However a resolution I'm leaning towards is a documentation fix.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm still not sold the the abstract idea of composibility is
worth making this change. Scopes &lt;em&gt;aren't&lt;/em&gt; purely composable
because there are certain options where composing makes no sense.
Order and limit clauses for example.&lt;/p&gt;
&lt;p&gt;I don't see why the current behaviour is any more confusing /
surprising than what you're proposing. The proc / lamda is
evaluated in a given context, and that context either does or
doesn't have scope applied. If you want to opt out of scoping then
you use with_exclusive_scope. You'd get the same behaviour with
class methods and association method_missing.&lt;/p&gt;
&lt;p&gt;All the same, opening the ticket and marking for resolution by
2.3.4. However a resolution I'm leaning towards is a documentation
fix.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-29T03:01:49+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:state: resolved
:milestone: 9903
:assigned_user: 1366
</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-29T03:01:51+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">10</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Named scopes can be composable.  Conditions and Joins are all merged together.  Selects, Order, and Limit are not things that are usually used with named scopes, at least not ones that are intended to be chained with others.

The current behavior is confusing because a named_scope is not a scoping block like a with_scope.  In a with_scope I expect that scope to be applied to the block and only the block.  A named_scope is something even more targeted, a named_scope is applied directly to a finder, a single target.  I would expect the scope to apply only to that target, and the lambda is not the target.

with_exclusive_scope is not something I want to sprinkle around inside any lambda that accesses an association or does a find.  Especially with the arrival of default scopes.  That will almost certainly lead to bugs.

I think that the usefulness of this original change is very small.  If you are actually utilizing the accumulated scopes in your lambda to further restrict the result set size, it should not even change your final result set since that was already going to be constrained by the accumulated scopes.  I think this is somewhat evident by the test that was committed with this change, it doesn't actually check the result set, because there is no change in the result set.  From what I can tell, this is only a performance optimization for a very specific case.

What it does do however, is cause any associations that you access from inside your lambda, that happen to be the same class that your named_scope operations on, to be restricted by the accumulated scopes.  The vast majority of time, this will be non-obvious, non-desirable, and lead to strange bugs.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Named scopes can be composable. Conditions and Joins are all
merged together. Selects, Order, and Limit are not things that are
usually used with named scopes, at least not ones that are intended
to be chained with others.&lt;/p&gt;
&lt;p&gt;The current behavior is confusing because a named_scope is not a
scoping block like a with_scope. In a with_scope I expect that
scope to be applied to the block and only the block. A named_scope
is something even more targeted, a named_scope is applied directly
to a finder, a single target. I would expect the scope to apply
only to that target, and the lambda is not the target.&lt;/p&gt;
&lt;p&gt;with_exclusive_scope is not something I want to sprinkle around
inside any lambda that accesses an association or does a find.
Especially with the arrival of default scopes. That will almost
certainly lead to bugs.&lt;/p&gt;
&lt;p&gt;I think that the usefulness of this original change is very
small. If you are actually utilizing the accumulated scopes in your
lambda to further restrict the result set size, it should not even
change your final result set since that was already going to be
constrained by the accumulated scopes. I think this is somewhat
evident by the test that was committed with this change, it doesn't
actually check the result set, because there is no change in the
result set. From what I can tell, this is only a performance
optimization for a very specific case.&lt;/p&gt;
&lt;p&gt;What it does do however, is cause any associations that you
access from inside your lambda, that happen to be the same class
that your named_scope operations on, to be restricted by the
accumulated scopes. The vast majority of time, this will be
non-obvious, non-desirable, and lead to strange bugs.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-29T07:59:09+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-29T07:59:10+01:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">11</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Let's keep the original behavior and introduce a new option instead. Jeremy, are you interested in revisiting this patch and updating for 2.3.4 release?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Let's keep the original behavior and introduce a new option
instead. Jeremy, are you interested in revisiting this patch and
updating for 2.3.4 release?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-30T00:42:16+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-30T00:42:19+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">12</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [d83b1828577c268de56e1b3942e16002c9efdd57]) Revert &quot;Methods invoked within named scope Procs should respect the scope stack. [#1267 state:resolved]&quot;

This reverts commit 6a13376525f34a00e013fc3a6022838329dfe856.

Conflicts:

	activerecord/test/cases/named_scope_test.rb
http://github.com/rails/rails/commit/d83b1828577c268de56e1b3942e16002c9efdd57</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/d83b1828577c268de56e1b3942e16002c9efdd57&quot;
title=
&quot;Changeset [d83b1828577c268de56e1b3942e16002c9efdd57]&quot;&gt;[d83b1828577c268de56e1b3942e16002c9efdd57]&lt;/a&gt;)
Revert &quot;Methods invoked within named scope Procs should respect the
scope stack. [&lt;a href=&quot;/projects/8994/tickets/1267&quot; title=
&quot;Ticket #1267&quot;&gt;#1267&lt;/a&gt; state:resolved]&quot;&lt;/p&gt;
&lt;p&gt;This reverts commit
6a13376525f34a00e013fc3a6022838329dfe856.&lt;/p&gt;
&lt;p&gt;Conflicts:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;activerecord/test/cases/named_scope_test.rb&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/rails/commit/d83b1828577c268de56e1b3942e16002c9efdd57&quot;&gt;
http://github.com/rails/rails/commit/d83b1828577c268de56e1b3942e160...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-30T00:55:33+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-30T00:55:34+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">13</version>
      <user-name>Repository</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [17f336e2f00f419a41eb7effb817bd7ad3e84f0d]) Revert &quot;Methods invoked within named scope Procs should respect the scope stack. [#1267 state:resolved]&quot;

This reverts commit 6a13376525f34a00e013fc3a6022838329dfe856.

Conflicts:

	activerecord/test/cases/named_scope_test.rb
http://github.com/rails/rails/commit/17f336e2f00f419a41eb7effb817bd7ad3e84f0d</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/17f336e2f00f419a41eb7effb817bd7ad3e84f0d&quot;
title=
&quot;Changeset [17f336e2f00f419a41eb7effb817bd7ad3e84f0d]&quot;&gt;[17f336e2f00f419a41eb7effb817bd7ad3e84f0d]&lt;/a&gt;)
Revert &quot;Methods invoked within named scope Procs should respect the
scope stack. [&lt;a href=&quot;/projects/8994/tickets/1267&quot; title=
&quot;Ticket #1267&quot;&gt;#1267&lt;/a&gt; state:resolved]&quot;&lt;/p&gt;
&lt;p&gt;This reverts commit
6a13376525f34a00e013fc3a6022838329dfe856.&lt;/p&gt;
&lt;p&gt;Conflicts:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;activerecord/test/cases/named_scope_test.rb&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/rails/commit/17f336e2f00f419a41eb7effb817bd7ad3e84f0d&quot;&gt;
http://github.com/rails/rails/commit/17f336e2f00f419a41eb7effb817bd...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-30T00:55:35+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-30T00:55:37+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">14</version>
      <user-name>Repository</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-30T00:55:59+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:state: resolved
</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-30T00:56:04+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">15</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Here is the patch for the new functionality.  Since named scopes have either taken a Proc OR a options hash, there is now the ability to pass the Proc as a :proc option.

I'm not terribly happy with how I ended up parsing the options inside named_scope, if somebody has something cleaner it would be great.

I included the tests for both old and new functionality.

I did a rough change to the documentation to explain the new functionality, but I didn't provide an example.  Partially because I'm still not totally clear on a use case for this, and partially because I think it would probably take up a lot of space to make an understandable example.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is the patch for the new functionality. Since named scopes
have either taken a Proc OR a options hash, there is now the
ability to pass the Proc as a :proc option.&lt;/p&gt;
&lt;p&gt;I'm not terribly happy with how I ended up parsing the options
inside named_scope, if somebody has something cleaner it would be
great.&lt;/p&gt;
&lt;p&gt;I included the tests for both old and new functionality.&lt;/p&gt;
&lt;p&gt;I did a rough change to the documentation to explain the new
functionality, but I didn't provide an example. Partially because
I'm still not totally clear on a use case for this, and partially
because I think it would probably take up a lot of space to make an
understandable example.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-30T08:11:17+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-30T08:11:19+01:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">16</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Why does it keep eating my uploads?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Why does it keep eating my uploads?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-30T08:12:12+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-07-30T08:12:16+01:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">17</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>[milestone:id#50064 bulk edit command]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[milestone:id#50064 bulk edit command]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-11T23:04:34+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 41987
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-09-11T23:04:34+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">18</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>Why just not let named_scope to be chained and be able to manipulate with_scope merge_conditions connector ? It would give named_scope new dimension of manipulating scopes, and save a lot of work that now is need to be done to allow match any criteria in ActiveRecord finders, i think right now using simple array condition builders are the best way for such thing, and IMHO for AR this is really shame, when you compare how mature this library should be after so many years of development. 

For example it would allow to do something like this:

@@@ ruby
Ticket.any { pending.in_progress.resolved }.all(:conditions =&gt; { :created_at &lt; Time.now })
@@@

And it would result with where conditions: &quot;status_id = 1 OR status_id = 2 OR status_id = 3 AND created_at = '1970-01-01 00:00:00'&quot;

This could also work:

@@@ ruby
Ticket.any(:conditions =&gt; { :created_at &lt; Time.now, :status_id =&gt; [1,2,3] })
@@@

And where conditions should look like &quot;created_at = '1970-01-01 00:00:00' OR status_id IN(1,2,3)&quot;
And of course more deep chains should be also welcome.

@@@ ruby
Ticket.all { any { }.all { } }
@@@

#all and #any methods without blocks should act as #find(:all) with AND/OR conditions connector, and with blocks, as part of whole named_scope stack including chained named_scope used inside #any/#all blocks</body>
      <body-html>&lt;div&gt;&lt;p&gt;Why just not let named_scope to be chained and be able to
manipulate with_scope merge_conditions connector ? It would give
named_scope new dimension of manipulating scopes, and save a lot of
work that now is need to be done to allow match any criteria in
ActiveRecord finders, i think right now using simple array
condition builders are the best way for such thing, and IMHO for AR
this is really shame, when you compare how mature this library
should be after so many years of development.&lt;/p&gt;
&lt;p&gt;For example it would allow to do something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Ticket.any { pending.in_progress.resolved }.all(:conditions =&amp;gt; { :created_at &amp;lt; Time.now })&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And it would result with where conditions: &quot;status_id = 1 OR
status_id = 2 OR status_id = 3 AND created_at = '1970-01-01
00:00:00'&quot;&lt;/p&gt;
&lt;p&gt;This could also work:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Ticket.any(:conditions =&amp;gt; { :created_at &amp;lt; Time.now, :status_id =&amp;gt; [1,2,3] })&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And where conditions should look like &quot;created_at = '1970-01-01
00:00:00' OR status_id IN(1,2,3)&quot;&lt;br&gt;
And of course more deep chains should be also welcome.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;Ticket.all { any { }.all { } }&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;all and #any methods without blocks should act as #find(:all)
with AND/OR conditions connector, and with blocks, as part of whole
named_scope stack including chained named_scope used inside
#any/#all blocks&lt;/h1&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-22T20:36:47+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2009-09-22T20:36:50+01:00</updated-at>
      <user-id type="integer">11785</user-id>
      <version type="integer">19</version>
      <user-name>Pawe&#322; Kondzior</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/20088)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/20088&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-16T02:41:08+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord named_scope patch
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord bugmash named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2010-05-16T02:41:08+01:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">20</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/20606)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/20606&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-23T17:54:42+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 50064
</diffable-attributes>
      <milestone-id type="integer">73241</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord bugmash named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2010-05-23T17:54:42+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">21</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.7</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/20631)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/20631&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-24T09:40:50+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 73241
</diffable-attributes>
      <milestone-id type="integer">73273</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord bugmash named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2010-05-24T09:40:50+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">22</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.8</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/20816)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/20816&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-25T23:45:37+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 73273
</diffable-attributes>
      <milestone-id type="integer">73534</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord bugmash named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2010-05-25T23:45:37+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">23</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.9</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/27613)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/27613&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-30T02:28:47+01:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 73534
</diffable-attributes>
      <milestone-id type="integer">82855</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord bugmash named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2010-08-30T02:28:48+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">24</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.10</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:33:10+00:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">82855</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bugmash named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2011-02-02T17:00:21+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">25</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.10</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:33:11+00:00</created-at>
      <creator-id type="integer">32550</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">82855</milestone-id>
      <number type="integer">1267</number>
      <permalink>methods-invoked-within-named_scope-procs-should-respect-the-scope-stack</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bugmash named_scope patch</tag>
      <title>Methods invoked within named_scope Procs should respect the scope stack</title>
      <updated-at type="datetime">2011-02-02T17:01:01+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">26</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>jvoorhis</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1267</url>
      <milestone-title>2.3.10</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>496758b253925fbe629d970eb95bdc9f72f6cfcc</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-24T18:42:15+01:00</created-at>
      <filename>methods_invoked_within_named_scopes_should_respect_scope.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">56896</id>
      <size type="integer">2549</size>
      <uploader-id type="integer">32550</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/56896/methods_invoked_within_named_scopes_should_respect_scope.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>b7671598547868147fd8f3644de600061fa970e6</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-07-28T20:51:56+01:00</created-at>
      <filename>finds_inside_lambdas_should_not_use_chained_scopes.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">231287</id>
      <size type="integer">1817</size>
      <uploader-id type="integer">32604</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/231287/finds_inside_lambdas_should_not_use_chained_scopes.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>982de11b47aa6f903875028fefcec0074ba43c7f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-07-28T21:06:22+01:00</created-at>
      <filename>finds_inside_lambdas_should_not_use_chained_scopes.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">231294</id>
      <size type="integer">1817</size>
      <uploader-id type="integer">32604</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/231294/finds_inside_lambdas_should_not_use_chained_scopes.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>10331628d21af801b7fd952b4d427245ff1e7ee8</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-07-30T08:11:17+01:00</created-at>
      <filename>with_chained_scopes.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">232566</id>
      <size type="integer">4201</size>
      <uploader-id type="integer">32604</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/232566/with_chained_scopes.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>c9d7595b131597e5e00073fd62d6ca98dd1564e0</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-07-30T08:12:58+01:00</created-at>
      <filename>with_chained_scopes.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">232568</id>
      <size type="integer">4201</size>
      <uploader-id type="integer">32604</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/232568/with_chained_scopes.diff</url>
    </attachment>
  </attachments>
</ticket>
