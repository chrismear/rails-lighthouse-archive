<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-25T10:41:36+01:00</created-at>
  <creator-id type="integer">18469</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">897</number>
  <permalink>patch-memoized-methods-are-stored-in-klass-memoized_methods</permalink>
  <priority type="integer">350</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activesupport memoize patch</tag>
  <title>[PATCH] :memoized methods are stored in Klass.memoized_methods</title>
  <updated-at type="datetime">2008-08-26T01:01:19+01:00</updated-at>
  <user-id type="integer">18469</user-id>
  <version type="integer">4</version>
  <user-name>MatthewRudy</user-name>
  <creator-name>MatthewRudy</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/897</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>http://groups.google.com/group/rubyonrails-core/browse_thread/thread/178e9a52050cab10?hl=en

@@@ ruby
class MyKlass
  def something(n)
     return randomly(n)
  end
  memoize :something
end

class MyKlassTest
  test &quot;something is declared as memoized&quot; do
    assert MyKlass.memoized_methods.include?(:something)
  end

  test &quot;something is memoized&quot; do
     my_model.stubs(:randomly).returns(1,2,3)
     assert_equal 1, my_model.something(7)
     assert_equal 1, my_model.something(7)
     assert_equal 2, my_model.something(100)
  end 
end
@@@

I've currently put the :memoized_methods method on the Klass,
perhaps it should be on the record,
or called :memoized_instance_methods.

But it feels that, as it's declared in the class scope, it should set :memoized_methods in the same scope.</original-body>
  <latest-body>http://groups.google.com/group/rubyonrails-core/browse_thread/thread/178e9a52050cab10?hl=en

@@@ ruby
class MyKlass
  def something(n)
     return randomly(n)
  end
  memoize :something
end

class MyKlassTest
  test &quot;something is declared as memoized&quot; do
    assert MyKlass.memoized_methods.include?(:something)
  end

  test &quot;something is memoized&quot; do
     my_model.stubs(:randomly).returns(1,2,3)
     assert_equal 1, my_model.something(7)
     assert_equal 1, my_model.something(7)
     assert_equal 2, my_model.something(100)
  end 
end
@@@

I've currently put the :memoized_methods method on the Klass,
perhaps it should be on the record,
or called :memoized_instance_methods.

But it feels that, as it's declared in the class scope, it should set :memoized_methods in the same scope.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/178e9a52050cab10?hl=en&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class MyKlass
  def something(n)
     return randomly(n)
  end
  memoize :something
end

class MyKlassTest
  test &amp;quot;something is declared as memoized&amp;quot; do
    assert MyKlass.memoized_methods.include?(:something)
  end

  test &amp;quot;something is memoized&amp;quot; do
     my_model.stubs(:randomly).returns(1,2,3)
     assert_equal 1, my_model.something(7)
     assert_equal 1, my_model.something(7)
     assert_equal 2, my_model.something(100)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I've currently put the :memoized_methods method on the Klass,
perhaps it should be on the record,
or called :memoized_instance_methods.&lt;/p&gt;

&lt;p&gt;But it feels that, as it's declared in the class scope, it should set :memoized_methods in the same scope.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>http://groups.google.com/group/rubyonrails-core/browse_thread/thread/178e9a52050cab10?hl=en

@@@ ruby
class MyKlass
  def something(n)
     return randomly(n)
  end
  memoize :something
end

class MyKlassTest
  test &quot;something is declared as memoized&quot; do
    assert MyKlass.memoized_methods.include?(:something)
  end

  test &quot;something is memoized&quot; do
     my_model.stubs(:randomly).returns(1,2,3)
     assert_equal 1, my_model.something(7)
     assert_equal 1, my_model.something(7)
     assert_equal 2, my_model.something(100)
  end 
end
@@@

I've currently put the :memoized_methods method on the Klass,
perhaps it should be on the record,
or called :memoized_instance_methods.

But it feels that, as it's declared in the class scope, it should set :memoized_methods in the same scope.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/178e9a52050cab10?hl=en&quot;&gt;http://groups.google.com/group/r...&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class MyKlass
  def something(n)
     return randomly(n)
  end
  memoize :something
end

class MyKlassTest
  test &amp;quot;something is declared as memoized&amp;quot; do
    assert MyKlass.memoized_methods.include?(:something)
  end

  test &amp;quot;something is memoized&amp;quot; do
     my_model.stubs(:randomly).returns(1,2,3)
     assert_equal 1, my_model.something(7)
     assert_equal 1, my_model.something(7)
     assert_equal 2, my_model.something(100)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I've currently put the :memoized_methods method on the Klass,
perhaps it should be on the record,
or called :memoized_instance_methods.&lt;/p&gt;

&lt;p&gt;But it feels that, as it's declared in the class scope, it should set :memoized_methods in the same scope.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-25T10:41:37+01:00</created-at>
      <creator-id type="integer">18469</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">897</number>
      <permalink>patch-memoized-methods-are-stored-in-klass-memoized_methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport memoize patch</tag>
      <title>[PATCH] :memoized methods are stored in Klass.memoized_methods</title>
      <updated-at type="datetime">2008-08-25T10:41:37+01:00</updated-at>
      <user-id type="integer">18469</user-id>
      <version type="integer">1</version>
      <user-name>MatthewRudy</user-name>
      <creator-name>MatthewRudy</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/897</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I still feel that this is better handled by you writing your own assertion

@@@
def assert_memoized(object, method)
  assert object.respond_to? &quot;_unmemoized_#{method}&quot;
end
@@@

Changing the implementation just to suit tests seems broken.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I still feel that this is better handled by you writing your own assertion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
def assert_memoized(object, method)
  assert object.respond_to? &amp;quot;_unmemoized_#{method}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Changing the implementation just to suit tests seems broken.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-25T15:03:38+01:00</created-at>
      <creator-id type="integer">18469</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">897</number>
      <permalink>patch-memoized-methods-are-stored-in-klass-memoized_methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport memoize patch</tag>
      <title>[PATCH] :memoized methods are stored in Klass.memoized_methods</title>
      <updated-at type="datetime">2008-08-25T15:03:38+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>MatthewRudy</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/897</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>You might want to add some test coverage for mixins, inheritance, and extending objects. You might find an instance variable just won't work how you except it. Seriously, I tried this approach when I first wrote this helper.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You might want to add some test coverage for mixins, inheritance, and extending objects. You might find an instance variable just won't work how you except it. Seriously, I tried this approach when I first wrote this helper.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-25T16:18:32+01:00</created-at>
      <creator-id type="integer">18469</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">897</number>
      <permalink>patch-memoized-methods-are-stored-in-klass-memoized_methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activesupport memoize patch</tag>
      <title>[PATCH] :memoized methods are stored in Klass.memoized_methods</title>
      <updated-at type="datetime">2008-08-25T16:18:32+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">3</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>MatthewRudy</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/897</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>hmm, yeah.
maybe Mr Koz.

I still don't understand why this doesn't use alias_method_chain, though.

I may just abandon using :memoize anyway,
as it doesn't seem like the best idea in the world.

I still see a use in asserting that a rails method has been used.

eg.

Model.should have_many(:sausages).with(:conditions =&gt; {:tasty =&gt; true})

is useful.

Although, I guess my particular brand of testing logic is distinct from yours.

Take it easy.
Will nudge you at RailsConf in a week-ish</body>
      <body-html>&lt;div&gt;&lt;p&gt;hmm, yeah.
maybe Mr Koz.&lt;/p&gt;

&lt;p&gt;I still don't understand why this doesn't use alias_method_chain, though.&lt;/p&gt;

&lt;p&gt;I may just abandon using :memoize anyway,
as it doesn't seem like the best idea in the world.&lt;/p&gt;

&lt;p&gt;I still see a use in asserting that a rails method has been used.&lt;/p&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;p&gt;Model.should have_many(:sausages).with(:conditions =&gt; {:tasty =&gt; true})&lt;/p&gt;

&lt;p&gt;is useful.&lt;/p&gt;

&lt;p&gt;Although, I guess my particular brand of testing logic is distinct from yours.&lt;/p&gt;

&lt;p&gt;Take it easy.
Will nudge you at RailsConf in a week-ish&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-26T01:01:19+01:00</created-at>
      <creator-id type="integer">18469</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">897</number>
      <permalink>patch-memoized-methods-are-stored-in-klass-memoized_methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activesupport memoize patch</tag>
      <title>[PATCH] :memoized methods are stored in Klass.memoized_methods</title>
      <updated-at type="datetime">2008-08-26T01:01:19+01:00</updated-at>
      <user-id type="integer">18469</user-id>
      <version type="integer">4</version>
      <user-name>MatthewRudy</user-name>
      <creator-name>MatthewRudy</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/897</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ceebfc7c9508085ecb43dcc8a8b0cad348472732</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-25T10:41:36+01:00</created-at>
      <filename>add_memoized_methods.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">41215</id>
      <size type="integer">1906</size>
      <uploader-id type="integer">18469</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/41215/add_memoized_methods.patch</url>
    </attachment>
  </attachments>
</ticket>
