<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-22T22:58:34+01:00</created-at>
  <creator-id type="integer">108455</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5181</number>
  <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord &quot;activerecord rails3&quot; fix fixed patch regression</tag>
  <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
  <updated-at type="datetime">2011-02-02T16:46:14+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">10</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>clocksarestupid</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
  <priority-name>Low</priority-name>
  <original-body>Given the following setup:

Book
- name

Author
- first_name
- last_name

Page
- page_number
- content

And the following relationships:

Author has many Books
Book has many Pages
Book belongs to Author
Page belongs to Book

The following query breaks with ActiveRecord 3.0, that does not on ActiveRecord 2.0.

Author.find(:all, :include =&gt; [{:books =&gt; :pages}, :books], :conditions =&gt; &quot;pages.page_number = 1&quot;)

Using Rails 3 scopes also fails:

Author.includes(:books).includes(:books =&gt; :pages).where({:pages =&gt; {:page_number =&gt; 1}})

When using sqlite3 as a database, the backtrace looks like the following:

ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: books_authors.id: SELECT     &quot;authors&quot;.&quot;id&quot; AS t0_r0, &quot;authors&quot;.&quot;first_name&quot; AS t0_r1, &quot;authors&quot;.&quot;last_name&quot; AS t0_r2, &quot;authors&quot;.&quot;created_at&quot; AS t0_r3, &quot;authors&quot;.&quot;updated_at&quot; AS t0_r4, &quot;books&quot;.&quot;id&quot; AS t1_r0, &quot;books&quot;.&quot;name&quot; AS t1_r1, &quot;books&quot;.&quot;created_at&quot; AS t1_r2, &quot;books&quot;.&quot;updated_at&quot; AS t1_r3, &quot;books&quot;.&quot;author_id&quot; AS t1_r4, &quot;pages&quot;.&quot;id&quot; AS t2_r0, &quot;pages&quot;.&quot;book_id&quot; AS t2_r1, &quot;pages&quot;.&quot;page_number&quot; AS t2_r2, &quot;pages&quot;.&quot;content&quot; AS t2_r3, &quot;pages&quot;.&quot;created_at&quot; AS t2_r4, &quot;pages&quot;.&quot;updated_at&quot; AS t2_r5, &quot;books_authors&quot;.&quot;id&quot; AS t3_r0, &quot;books_authors&quot;.&quot;name&quot; AS t3_r1, &quot;books_authors&quot;.&quot;created_at&quot; AS t3_r2, &quot;books_authors&quot;.&quot;updated_at&quot; AS t3_r3, &quot;books_authors&quot;.&quot;author_id&quot; AS t3_r4 FROM       &quot;authors&quot; LEFT OUTER JOIN &quot;books&quot; ON &quot;books&quot;.&quot;author_id&quot; = &quot;authors&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;pages&quot; ON &quot;pages&quot;.&quot;book_id&quot; = &quot;books&quot;.&quot;id&quot; WHERE     (pages.page_number = 1)
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract_adapter.rb:210:in `log'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:154:in `execute'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:394:in `catch_schema_changes'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:154:in `execute'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:297:in `select'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:431:in `find_by_sql'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation.rb:64:in `to_a'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:182:in `find_with_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation.rb:64:in `to_a'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:138:in `all'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:100:in `send'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:100:in `find'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:96:in `find'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:403:in `__send__'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:403:in `find'
	from (irb):8

This does not happen on Rails 2.0. Sample Rails app attached that shows the problem. A current workaround can be to merge the includes hash to be smarter, but since it also happens with scopes it's not possible to fix the problem entirely.

A query that works is the following:

Author.find(:all, :include =&gt; {:books =&gt; :pages}, :conditions =&gt; &quot;pages.page_number = 1&quot;)

Or with Rails 3 scopes:

Author.includes(:books =&gt; :pages).where({:pages =&gt; {:page_number =&gt; 1}})</original-body>
  <latest-body>Given the following setup:

Book
- name

Author
- first_name
- last_name

Page
- page_number
- content

And the following relationships:

Author has many Books
Book has many Pages
Book belongs to Author
Page belongs to Book

The following query breaks with ActiveRecord 3.0, that does not on ActiveRecord 2.0.

Author.find(:all, :include =&gt; [{:books =&gt; :pages}, :books], :conditions =&gt; &quot;pages.page_number = 1&quot;)

Using Rails 3 scopes also fails:

Author.includes(:books).includes(:books =&gt; :pages).where({:pages =&gt; {:page_number =&gt; 1}})

When using sqlite3 as a database, the backtrace looks like the following:

ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: books_authors.id: SELECT     &quot;authors&quot;.&quot;id&quot; AS t0_r0, &quot;authors&quot;.&quot;first_name&quot; AS t0_r1, &quot;authors&quot;.&quot;last_name&quot; AS t0_r2, &quot;authors&quot;.&quot;created_at&quot; AS t0_r3, &quot;authors&quot;.&quot;updated_at&quot; AS t0_r4, &quot;books&quot;.&quot;id&quot; AS t1_r0, &quot;books&quot;.&quot;name&quot; AS t1_r1, &quot;books&quot;.&quot;created_at&quot; AS t1_r2, &quot;books&quot;.&quot;updated_at&quot; AS t1_r3, &quot;books&quot;.&quot;author_id&quot; AS t1_r4, &quot;pages&quot;.&quot;id&quot; AS t2_r0, &quot;pages&quot;.&quot;book_id&quot; AS t2_r1, &quot;pages&quot;.&quot;page_number&quot; AS t2_r2, &quot;pages&quot;.&quot;content&quot; AS t2_r3, &quot;pages&quot;.&quot;created_at&quot; AS t2_r4, &quot;pages&quot;.&quot;updated_at&quot; AS t2_r5, &quot;books_authors&quot;.&quot;id&quot; AS t3_r0, &quot;books_authors&quot;.&quot;name&quot; AS t3_r1, &quot;books_authors&quot;.&quot;created_at&quot; AS t3_r2, &quot;books_authors&quot;.&quot;updated_at&quot; AS t3_r3, &quot;books_authors&quot;.&quot;author_id&quot; AS t3_r4 FROM       &quot;authors&quot; LEFT OUTER JOIN &quot;books&quot; ON &quot;books&quot;.&quot;author_id&quot; = &quot;authors&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;pages&quot; ON &quot;pages&quot;.&quot;book_id&quot; = &quot;books&quot;.&quot;id&quot; WHERE     (pages.page_number = 1)
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract_adapter.rb:210:in `log'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:154:in `execute'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:394:in `catch_schema_changes'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:154:in `execute'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:297:in `select'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:431:in `find_by_sql'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation.rb:64:in `to_a'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:182:in `find_with_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation.rb:64:in `to_a'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:138:in `all'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:100:in `send'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:100:in `find'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:96:in `find'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:403:in `__send__'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:403:in `find'
	from (irb):8

This does not happen on Rails 2.0. Sample Rails app attached that shows the problem. A current workaround can be to merge the includes hash to be smarter, but since it also happens with scopes it's not possible to fix the problem entirely.

A query that works is the following:

Author.find(:all, :include =&gt; {:books =&gt; :pages}, :conditions =&gt; &quot;pages.page_number = 1&quot;)

Or with Rails 3 scopes:

Author.includes(:books =&gt; :pages).where({:pages =&gt; {:page_number =&gt; 1}})</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Given the following setup:&lt;/p&gt;
&lt;p&gt;Book&lt;br&gt;
- name&lt;/p&gt;
&lt;p&gt;Author&lt;br&gt;
- first_name - last_name&lt;/p&gt;
&lt;p&gt;Page&lt;br&gt;
- page_number - content&lt;/p&gt;
&lt;p&gt;And the following relationships:&lt;/p&gt;
&lt;p&gt;Author has many Books&lt;br&gt;
Book has many Pages&lt;br&gt;
Book belongs to Author&lt;br&gt;
Page belongs to Book&lt;/p&gt;
&lt;p&gt;The following query breaks with ActiveRecord 3.0, that does not
on ActiveRecord 2.0.&lt;/p&gt;
&lt;p&gt;Author.find(:all, :include =&amp;gt; [{:books =&amp;gt; :pages},
:books], :conditions =&amp;gt; &quot;pages.page_number = 1&quot;)&lt;/p&gt;
&lt;p&gt;Using Rails 3 scopes also fails:&lt;/p&gt;
&lt;p&gt;Author.includes(:books).includes(:books =&amp;gt;
:pages).where({:pages =&amp;gt; {:page_number =&amp;gt; 1}})&lt;/p&gt;
&lt;p&gt;When using sqlite3 as a database, the backtrace looks like the
following:&lt;/p&gt;
&lt;p&gt;ActiveRecord::StatementInvalid: SQLite3::SQLException: no such
column: books_authors.id: SELECT &quot;authors&quot;.&quot;id&quot; AS t0_r0,
&quot;authors&quot;.&quot;first_name&quot; AS t0_r1, &quot;authors&quot;.&quot;last_name&quot; AS t0_r2,
&quot;authors&quot;.&quot;created_at&quot; AS t0_r3, &quot;authors&quot;.&quot;updated_at&quot; AS t0_r4,
&quot;books&quot;.&quot;id&quot; AS t1_r0, &quot;books&quot;.&quot;name&quot; AS t1_r1,
&quot;books&quot;.&quot;created_at&quot; AS t1_r2, &quot;books&quot;.&quot;updated_at&quot; AS t1_r3,
&quot;books&quot;.&quot;author_id&quot; AS t1_r4, &quot;pages&quot;.&quot;id&quot; AS t2_r0,
&quot;pages&quot;.&quot;book_id&quot; AS t2_r1, &quot;pages&quot;.&quot;page_number&quot; AS t2_r2,
&quot;pages&quot;.&quot;content&quot; AS t2_r3, &quot;pages&quot;.&quot;created_at&quot; AS t2_r4,
&quot;pages&quot;.&quot;updated_at&quot; AS t2_r5, &quot;books_authors&quot;.&quot;id&quot; AS t3_r0,
&quot;books_authors&quot;.&quot;name&quot; AS t3_r1, &quot;books_authors&quot;.&quot;created_at&quot; AS
t3_r2, &quot;books_authors&quot;.&quot;updated_at&quot; AS t3_r3,
&quot;books_authors&quot;.&quot;author_id&quot; AS t3_r4 FROM &quot;authors&quot; LEFT OUTER JOIN
&quot;books&quot; ON &quot;books&quot;.&quot;author_id&quot; = &quot;authors&quot;.&quot;id&quot; LEFT OUTER JOIN
&quot;pages&quot; ON &quot;pages&quot;.&quot;book_id&quot; = &quot;books&quot;.&quot;id&quot; WHERE
(pages.page_number = 1)&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract_adapter.rb:210:in `log'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:154:in `execute'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:394:in `catch_schema_changes'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:154:in `execute'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:297:in `select'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:431:in `find_by_sql'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation.rb:64:in `to_a'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:182:in `find_with_associations'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation.rb:64:in `to_a'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:138:in `all'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:100:in `send'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:100:in `find'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:96:in `find'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:403:in `__send__'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:403:in `find'
from (irb):8&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This does not happen on Rails 2.0. Sample Rails app attached
that shows the problem. A current workaround can be to merge the
includes hash to be smarter, but since it also happens with scopes
it's not possible to fix the problem entirely.&lt;/p&gt;
&lt;p&gt;A query that works is the following:&lt;/p&gt;
&lt;p&gt;Author.find(:all, :include =&amp;gt; {:books =&amp;gt; :pages},
:conditions =&amp;gt; &quot;pages.page_number = 1&quot;)&lt;/p&gt;
&lt;p&gt;Or with Rails 3 scopes:&lt;/p&gt;
&lt;p&gt;Author.includes(:books =&amp;gt; :pages).where({:pages =&amp;gt;
{:page_number =&amp;gt; 1}})&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Given the following setup:

Book
- name

Author
- first_name
- last_name

Page
- page_number
- content

And the following relationships:

Author has many Books
Book has many Pages
Book belongs to Author
Page belongs to Book

The following query breaks with ActiveRecord 3.0, that does not on ActiveRecord 2.0.

Author.find(:all, :include =&gt; [{:books =&gt; :pages}, :books], :conditions =&gt; &quot;pages.page_number = 1&quot;)

Using Rails 3 scopes also fails:

Author.includes(:books).includes(:books =&gt; :pages).where({:pages =&gt; {:page_number =&gt; 1}})

When using sqlite3 as a database, the backtrace looks like the following:

ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: books_authors.id: SELECT     &quot;authors&quot;.&quot;id&quot; AS t0_r0, &quot;authors&quot;.&quot;first_name&quot; AS t0_r1, &quot;authors&quot;.&quot;last_name&quot; AS t0_r2, &quot;authors&quot;.&quot;created_at&quot; AS t0_r3, &quot;authors&quot;.&quot;updated_at&quot; AS t0_r4, &quot;books&quot;.&quot;id&quot; AS t1_r0, &quot;books&quot;.&quot;name&quot; AS t1_r1, &quot;books&quot;.&quot;created_at&quot; AS t1_r2, &quot;books&quot;.&quot;updated_at&quot; AS t1_r3, &quot;books&quot;.&quot;author_id&quot; AS t1_r4, &quot;pages&quot;.&quot;id&quot; AS t2_r0, &quot;pages&quot;.&quot;book_id&quot; AS t2_r1, &quot;pages&quot;.&quot;page_number&quot; AS t2_r2, &quot;pages&quot;.&quot;content&quot; AS t2_r3, &quot;pages&quot;.&quot;created_at&quot; AS t2_r4, &quot;pages&quot;.&quot;updated_at&quot; AS t2_r5, &quot;books_authors&quot;.&quot;id&quot; AS t3_r0, &quot;books_authors&quot;.&quot;name&quot; AS t3_r1, &quot;books_authors&quot;.&quot;created_at&quot; AS t3_r2, &quot;books_authors&quot;.&quot;updated_at&quot; AS t3_r3, &quot;books_authors&quot;.&quot;author_id&quot; AS t3_r4 FROM       &quot;authors&quot; LEFT OUTER JOIN &quot;books&quot; ON &quot;books&quot;.&quot;author_id&quot; = &quot;authors&quot;.&quot;id&quot; LEFT OUTER JOIN &quot;pages&quot; ON &quot;pages&quot;.&quot;book_id&quot; = &quot;books&quot;.&quot;id&quot; WHERE     (pages.page_number = 1)
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract_adapter.rb:210:in `log'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:154:in `execute'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:394:in `catch_schema_changes'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:154:in `execute'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:297:in `select'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:431:in `find_by_sql'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation.rb:64:in `to_a'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:182:in `find_with_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation.rb:64:in `to_a'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:138:in `all'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:100:in `send'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:100:in `find'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:96:in `find'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:403:in `__send__'
	from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:403:in `find'
	from (irb):8

This does not happen on Rails 2.0. Sample Rails app attached that shows the problem. A current workaround can be to merge the includes hash to be smarter, but since it also happens with scopes it's not possible to fix the problem entirely.

A query that works is the following:

Author.find(:all, :include =&gt; {:books =&gt; :pages}, :conditions =&gt; &quot;pages.page_number = 1&quot;)

Or with Rails 3 scopes:

Author.includes(:books =&gt; :pages).where({:pages =&gt; {:page_number =&gt; 1}})</body>
      <body-html>&lt;div&gt;&lt;p&gt;Given the following setup:&lt;/p&gt;
&lt;p&gt;Book&lt;br&gt;
- name&lt;/p&gt;
&lt;p&gt;Author&lt;br&gt;
- first_name - last_name&lt;/p&gt;
&lt;p&gt;Page&lt;br&gt;
- page_number - content&lt;/p&gt;
&lt;p&gt;And the following relationships:&lt;/p&gt;
&lt;p&gt;Author has many Books&lt;br&gt;
Book has many Pages&lt;br&gt;
Book belongs to Author&lt;br&gt;
Page belongs to Book&lt;/p&gt;
&lt;p&gt;The following query breaks with ActiveRecord 3.0, that does not
on ActiveRecord 2.0.&lt;/p&gt;
&lt;p&gt;Author.find(:all, :include =&amp;gt; [{:books =&amp;gt; :pages},
:books], :conditions =&amp;gt; &quot;pages.page_number = 1&quot;)&lt;/p&gt;
&lt;p&gt;Using Rails 3 scopes also fails:&lt;/p&gt;
&lt;p&gt;Author.includes(:books).includes(:books =&amp;gt;
:pages).where({:pages =&amp;gt; {:page_number =&amp;gt; 1}})&lt;/p&gt;
&lt;p&gt;When using sqlite3 as a database, the backtrace looks like the
following:&lt;/p&gt;
&lt;p&gt;ActiveRecord::StatementInvalid: SQLite3::SQLException: no such
column: books_authors.id: SELECT &quot;authors&quot;.&quot;id&quot; AS t0_r0,
&quot;authors&quot;.&quot;first_name&quot; AS t0_r1, &quot;authors&quot;.&quot;last_name&quot; AS t0_r2,
&quot;authors&quot;.&quot;created_at&quot; AS t0_r3, &quot;authors&quot;.&quot;updated_at&quot; AS t0_r4,
&quot;books&quot;.&quot;id&quot; AS t1_r0, &quot;books&quot;.&quot;name&quot; AS t1_r1,
&quot;books&quot;.&quot;created_at&quot; AS t1_r2, &quot;books&quot;.&quot;updated_at&quot; AS t1_r3,
&quot;books&quot;.&quot;author_id&quot; AS t1_r4, &quot;pages&quot;.&quot;id&quot; AS t2_r0,
&quot;pages&quot;.&quot;book_id&quot; AS t2_r1, &quot;pages&quot;.&quot;page_number&quot; AS t2_r2,
&quot;pages&quot;.&quot;content&quot; AS t2_r3, &quot;pages&quot;.&quot;created_at&quot; AS t2_r4,
&quot;pages&quot;.&quot;updated_at&quot; AS t2_r5, &quot;books_authors&quot;.&quot;id&quot; AS t3_r0,
&quot;books_authors&quot;.&quot;name&quot; AS t3_r1, &quot;books_authors&quot;.&quot;created_at&quot; AS
t3_r2, &quot;books_authors&quot;.&quot;updated_at&quot; AS t3_r3,
&quot;books_authors&quot;.&quot;author_id&quot; AS t3_r4 FROM &quot;authors&quot; LEFT OUTER JOIN
&quot;books&quot; ON &quot;books&quot;.&quot;author_id&quot; = &quot;authors&quot;.&quot;id&quot; LEFT OUTER JOIN
&quot;pages&quot; ON &quot;pages&quot;.&quot;book_id&quot; = &quot;books&quot;.&quot;id&quot; WHERE
(pages.page_number = 1)&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract_adapter.rb:210:in `log'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:154:in `execute'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:394:in `catch_schema_changes'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:154:in `execute'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/sqlite_adapter.rb:297:in `select'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:431:in `find_by_sql'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation.rb:64:in `to_a'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:182:in `find_with_associations'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation.rb:64:in `to_a'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:138:in `all'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:100:in `send'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:100:in `find'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/relation/finder_methods.rb:96:in `find'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:403:in `__send__'
from /Library/Ruby/Gems/1.8/gems/activerecord-3.0.0.beta4/lib/active_record/base.rb:403:in `find'
from (irb):8&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This does not happen on Rails 2.0. Sample Rails app attached
that shows the problem. A current workaround can be to merge the
includes hash to be smarter, but since it also happens with scopes
it's not possible to fix the problem entirely.&lt;/p&gt;
&lt;p&gt;A query that works is the following:&lt;/p&gt;
&lt;p&gt;Author.find(:all, :include =&amp;gt; {:books =&amp;gt; :pages},
:conditions =&amp;gt; &quot;pages.page_number = 1&quot;)&lt;/p&gt;
&lt;p&gt;Or with Rails 3 scopes:&lt;/p&gt;
&lt;p&gt;Author.includes(:books =&amp;gt; :pages).where({:pages =&amp;gt;
{:page_number =&amp;gt; 1}})&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-22T22:58:34+01:00</created-at>
      <creator-id type="integer">108455</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5181</number>
      <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; regression</tag>
      <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
      <updated-at type="datetime">2010-07-22T22:58:36+01:00</updated-at>
      <user-id type="integer">108455</user-id>
      <version type="integer">1</version>
      <user-name>clocksarestupid</user-name>
      <creator-name>clocksarestupid</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>works for me with rails edge.

@@@ ruby
def self.lab
  Project.includes(:tasks =&gt; :users).where({:users =&gt; {:name =&gt; 'John2'}})
end
@@@

generates following sql

@@@ ruby
SELECT &quot;projects&quot;.&quot;id&quot; AS t0_r0, &quot;projects&quot;.&quot;name&quot; AS t0_r1, 
&quot;projects&quot;.&quot;created_at&quot; AS t0_r2, &quot;projects&quot;.&quot;updated_at&quot; AS t0_r3, 
&quot;tasks&quot;.&quot;id&quot; AS t1_r0, &quot;tasks&quot;.&quot;name&quot; AS t1_r1, &quot;tasks&quot;.&quot;project_id&quot; AS t1_r2, 
&quot;users&quot;.&quot;id&quot; AS t2_r0, &quot;users&quot;.&quot;name&quot; AS t2_r1 FROM &quot;projects&quot; 
LEFT OUTER JOIN &quot;tasks&quot; ON &quot;tasks&quot;.&quot;project_id&quot; = &quot;projects&quot;.&quot;id&quot; 
LEFT OUTER JOIN &quot;tasks_users&quot; ON &quot;tasks_users&quot;.&quot;task_id&quot; = &quot;tasks&quot;.&quot;id&quot; 
LEFT OUTER JOIN &quot;users&quot; ON &quot;users&quot;.&quot;id&quot; = &quot;tasks_users&quot;.&quot;user_id&quot; 
WHERE (&quot;users&quot;.&quot;name&quot; = 'John2')

@@@


@@@ ruby
ActiveRecord::Schema.define(:version =&gt; 20100714212039) do

  create_table &quot;projects&quot;, :force =&gt; true do |t|
    t.string   &quot;name&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

  create_table &quot;tasks&quot;, :force =&gt; true do |t|
    t.string  &quot;name&quot;
    t.integer &quot;project_id&quot;, :null =&gt; false
  end

  create_table &quot;tasks_users&quot;, :id =&gt; false, :force =&gt; true do |t|
    t.integer &quot;task_id&quot;, :null =&gt; false
    t.integer &quot;user_id&quot;, :null =&gt; false
  end

  create_table &quot;users&quot;, :force =&gt; true do |t|
    t.string &quot;name&quot;
  end

end

class Project &lt; ActiveRecord::Base
  has_many :tasks, :uniq =&gt; true

  def self.setup
    Project.delete_all
    Task.delete_all
    User.delete_all

    pr2 = Project.create!(:name =&gt; 'pr2')

    task2 = Task.new(:name =&gt; 'task2')
    task2.project_id = pr2.id
    task2.save!

    task2.users.create(:name =&gt; 'John1')
    task2.users.create(:name =&gt; 'John2')
    task2.users.create(:name =&gt; 'John3')
  end

  def self.lab
    Project.includes(:tasks =&gt; :users).where({:users =&gt; {:name =&gt; 'John2'}})
  end
end

class Task &lt; ActiveRecord::Base
  belongs_to :project
  has_and_belongs_to_many :users, :uniq =&gt; true
end

class User &lt; ActiveRecord::Base
  has_and_belongs_to_many :tasks
end

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;works for me with rails edge.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def self.lab
  Project.includes(:tasks =&amp;gt; :users).where({:users =&amp;gt; {:name =&amp;gt; 'John2'}})
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;generates following sql&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;SELECT &quot;projects&quot;.&quot;id&quot; AS t0_r0, &quot;projects&quot;.&quot;name&quot; AS t0_r1, 
&quot;projects&quot;.&quot;created_at&quot; AS t0_r2, &quot;projects&quot;.&quot;updated_at&quot; AS t0_r3, 
&quot;tasks&quot;.&quot;id&quot; AS t1_r0, &quot;tasks&quot;.&quot;name&quot; AS t1_r1, &quot;tasks&quot;.&quot;project_id&quot; AS t1_r2, 
&quot;users&quot;.&quot;id&quot; AS t2_r0, &quot;users&quot;.&quot;name&quot; AS t2_r1 FROM &quot;projects&quot; 
LEFT OUTER JOIN &quot;tasks&quot; ON &quot;tasks&quot;.&quot;project_id&quot; = &quot;projects&quot;.&quot;id&quot; 
LEFT OUTER JOIN &quot;tasks_users&quot; ON &quot;tasks_users&quot;.&quot;task_id&quot; = &quot;tasks&quot;.&quot;id&quot; 
LEFT OUTER JOIN &quot;users&quot; ON &quot;users&quot;.&quot;id&quot; = &quot;tasks_users&quot;.&quot;user_id&quot; 
WHERE (&quot;users&quot;.&quot;name&quot; = 'John2')&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;ActiveRecord::Schema.define(:version =&amp;gt; 20100714212039) do

  create_table &quot;projects&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;name&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

  create_table &quot;tasks&quot;, :force =&amp;gt; true do |t|
    t.string  &quot;name&quot;
    t.integer &quot;project_id&quot;, :null =&amp;gt; false
  end

  create_table &quot;tasks_users&quot;, :id =&amp;gt; false, :force =&amp;gt; true do |t|
    t.integer &quot;task_id&quot;, :null =&amp;gt; false
    t.integer &quot;user_id&quot;, :null =&amp;gt; false
  end

  create_table &quot;users&quot;, :force =&amp;gt; true do |t|
    t.string &quot;name&quot;
  end

end

class Project &amp;lt; ActiveRecord::Base
  has_many :tasks, :uniq =&amp;gt; true

  def self.setup
    Project.delete_all
    Task.delete_all
    User.delete_all

    pr2 = Project.create!(:name =&amp;gt; 'pr2')

    task2 = Task.new(:name =&amp;gt; 'task2')
    task2.project_id = pr2.id
    task2.save!

    task2.users.create(:name =&amp;gt; 'John1')
    task2.users.create(:name =&amp;gt; 'John2')
    task2.users.create(:name =&amp;gt; 'John3')
  end

  def self.lab
    Project.includes(:tasks =&amp;gt; :users).where({:users =&amp;gt; {:name =&amp;gt; 'John2'}})
  end
end

class Task &amp;lt; ActiveRecord::Base
  belongs_to :project
  has_and_belongs_to_many :users, :uniq =&amp;gt; true
end

class User &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :tasks
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T20:32:56+01:00</created-at>
      <creator-id type="integer">108455</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5181</number>
      <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; regression</tag>
      <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
      <updated-at type="datetime">2010-07-26T20:32:58+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>clocksarestupid</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Neeraj, change your query to the following:

Project.includes([{:tasks =&gt; :users}, :tasks]).where({:users =&gt; {:name =&gt; 'John2'}})

Then it should fail.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Neeraj, change your query to the following:&lt;/p&gt;
&lt;p&gt;Project.includes([{:tasks =&amp;gt; :users}, :tasks]).where({:users
=&amp;gt; {:name =&amp;gt; 'John2'}})&lt;/p&gt;
&lt;p&gt;Then it should fail.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T21:02:57+01:00</created-at>
      <creator-id type="integer">108455</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5181</number>
      <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; regression</tag>
      <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
      <updated-at type="datetime">2010-07-26T21:03:02+01:00</updated-at>
      <user-id type="integer">108455</user-id>
      <version type="integer">3</version>
      <user-name>clocksarestupid</user-name>
      <creator-name>clocksarestupid</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks @clocks. Yes in that case query is indeed failing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks @clocks. Yes in that case query is indeed failing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T21:14:01+01:00</created-at>
      <creator-id type="integer">108455</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5181</number>
      <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; regression</tag>
      <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
      <updated-at type="datetime">2010-07-26T21:14:02+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">4</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>clocksarestupid</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>So it's missing a join table. In Rails 2.3.x it has 3 joins that it's performing and in Rails 3 it's missing one.

I've attached a simple file that is easier to debug with. There's a toggle flag at the top that will switch between ActiveRecord 3 and ActiveRecord 2. It will construct an in-memory SQLite3 database and try to perform the query.</body>
      <body-html>&lt;div&gt;&lt;p&gt;So it's missing a join table. In Rails 2.3.x it has 3 joins that
it's performing and in Rails 3 it's missing one.&lt;/p&gt;
&lt;p&gt;I've attached a simple file that is easier to debug with.
There's a toggle flag at the top that will switch between
ActiveRecord 3 and ActiveRecord 2. It will construct an in-memory
SQLite3 database and try to perform the query.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T21:16:28+01:00</created-at>
      <creator-id type="integer">108455</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5181</number>
      <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; regression</tag>
      <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
      <updated-at type="datetime">2010-07-26T21:16:32+01:00</updated-at>
      <user-id type="integer">108455</user-id>
      <version type="integer">5</version>
      <user-name>clocksarestupid</user-name>
      <creator-name>clocksarestupid</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I've got the fix. There was an incorrect equality check in the joins that was excluding the last join. I've attached a patch that fixes the problem and also adds a unit test to verify that no exceptions are thrown.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've got the fix. There was an incorrect equality check in the
joins that was excluding the last join. I've attached a patch that
fixes the problem and also adds a unit test to verify that no
exceptions are thrown.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-27T00:25:38+01:00</created-at>
      <creator-id type="integer">108455</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5181</number>
      <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; regression</tag>
      <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
      <updated-at type="datetime">2010-07-27T00:25:40+01:00</updated-at>
      <user-id type="integer">108455</user-id>
      <version type="integer">6</version>
      <user-name>clocksarestupid</user-name>
      <creator-name>clocksarestupid</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-27T22:14:21+01:00</created-at>
      <creator-id type="integer">108455</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord rails3\&quot; regression&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5181</number>
      <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; fix fixed &quot;patch activerecord&quot; regression</tag>
      <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
      <updated-at type="datetime">2010-07-27T22:14:22+01:00</updated-at>
      <user-id type="integer">108455</user-id>
      <version type="integer">7</version>
      <user-name>clocksarestupid</user-name>
      <creator-name>clocksarestupid</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>bulk tags cleanup</body>
      <body-html>&lt;div&gt;&lt;p&gt;bulk tags cleanup&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-11T07:17:45+01:00</created-at>
      <creator-id type="integer">108455</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord rails3\&quot; fix fixed \&quot;patch activerecord\&quot; regression&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5181</number>
      <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord &quot;activerecord rails3&quot; fix fixed patch regression</tag>
      <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
      <updated-at type="datetime">2010-10-11T07:17:48+01:00</updated-at>
      <user-id type="integer">81551</user-id>
      <version type="integer">8</version>
      <user-name>Andrea Campi</user-name>
      <creator-name>clocksarestupid</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:30:40+00:00</created-at>
      <creator-id type="integer">108455</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5181</number>
      <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord &quot;activerecord rails3&quot; fix fixed patch regression</tag>
      <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
      <updated-at type="datetime">2011-02-02T16:45:32+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">9</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>clocksarestupid</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:30:42+00:00</created-at>
      <creator-id type="integer">108455</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5181</number>
      <permalink>activerecord-3-regression-certain-includes-hashes-fail-on-ar3-that-work-on-ar2</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord &quot;activerecord rails3&quot; fix fixed patch regression</tag>
      <title>ActiveRecord 3 Regression: Certain includes hashes fail on AR3 that work on AR2.</title>
      <updated-at type="datetime">2011-02-02T16:46:14+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">10</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>clocksarestupid</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5181</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ea71a9ee784f28838757332bd02d72b1ae63f754</code>
      <content-type>application/zip</content-type>
      <created-at type="datetime">2010-07-22T22:58:34+01:00</created-at>
      <filename>ar_regression.zip</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">599894</id>
      <size type="integer">101673</size>
      <uploader-id type="integer">108455</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/599894/ar_regression.zip</url>
    </attachment>
    <attachment type="Attachment">
      <code>7b138513fbdc67ace194b018da9c31a89d521cbf</code>
      <content-type>text/x-ruby-script</content-type>
      <created-at type="datetime">2010-07-26T21:16:28+01:00</created-at>
      <filename>ar_test_case.rb</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">603144</id>
      <size type="integer">1714</size>
      <uploader-id type="integer">108455</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/603144/ar_test_case.rb</url>
    </attachment>
    <attachment type="Attachment">
      <code>4aa9af56be039bc2f6403422ce591547fe66160a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-27T00:25:38+01:00</created-at>
      <filename>fix_equality_check_for_joins_5818.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">603486</id>
      <size type="integer">2847</size>
      <uploader-id type="integer">108455</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/603486/fix_equality_check_for_joins_5818.diff</url>
    </attachment>
  </attachments>
</ticket>
