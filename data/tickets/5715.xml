<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-02T10:55:05+01:00</created-at>
  <creator-id type="integer">117561</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5715</number>
  <permalink>rails3-disable_with-remote-form-button-immediately-gets-re-enabled</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>ajax disable_with form_for rails3</tag>
  <title>Rails3 disable_with remote form button immediately gets re-enabled</title>
  <updated-at type="datetime">2010-10-02T10:55:05+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">2</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>ph0rque</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5715</url>
  <priority-name>Low</priority-name>
  <original-body>When submitting a remote form with a &quot;disable_with&quot; option, the reasonable expectation is that the button will be re-enabled after the ajax response. Instead, the button is immediately re-enabled after the request is made but before the response is received. The problem is that the re-enabling code in rails.js (lines 167-174) is fired on ajax:after:

@@@ javascript
  document.on(&quot;ajax:after&quot;, &quot;form&quot;, function(event, element) {
    var inputs = element.select(&quot;input[type=submit][disabled=true][data-disable-with]&quot;);
    inputs.each(function(input) {
      input.value = input.readAttribute('data-original-value');
      input.removeAttribute('data-original-value');
      input.disabled = false;
    });
  });
@@@

If changed to be ajax:complete (line 167):

@@@ javascript
  document.on(&quot;ajax:complete&quot;, &quot;form&quot;, function(event, element) { 
    //original code here
  }
@@@

The code works as expected: the button is disabled until the ajax response is received.</original-body>
  <latest-body>When submitting a remote form with a &quot;disable_with&quot; option, the reasonable expectation is that the button will be re-enabled after the ajax response. Instead, the button is immediately re-enabled after the request is made but before the response is received. The problem is that the re-enabling code in rails.js (lines 167-174) is fired on ajax:after:

@@@ javascript
  document.on(&quot;ajax:after&quot;, &quot;form&quot;, function(event, element) {
    var inputs = element.select(&quot;input[type=submit][disabled=true][data-disable-with]&quot;);
    inputs.each(function(input) {
      input.value = input.readAttribute('data-original-value');
      input.removeAttribute('data-original-value');
      input.disabled = false;
    });
  });
@@@

If changed to be ajax:complete (line 167):

@@@ javascript
  document.on(&quot;ajax:complete&quot;, &quot;form&quot;, function(event, element) { 
    //original code here
  }
@@@

The code works as expected: the button is disabled until the ajax response is received.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When submitting a remote form with a &quot;disable_with&quot; option, the
reasonable expectation is that the button will be re-enabled after
the ajax response. Instead, the button is immediately re-enabled
after the request is made but before the response is received. The
problem is that the re-enabling code in rails.js (lines 167-174) is
fired on ajax:after:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;javascript&quot;&gt;  document.on(&quot;ajax:after&quot;, &quot;form&quot;, function(event, element) {
    var inputs = element.select(&quot;input[type=submit][disabled=true][data-disable-with]&quot;);
    inputs.each(function(input) {
      input.value = input.readAttribute('data-original-value');
      input.removeAttribute('data-original-value');
      input.disabled = false;
    });
  });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If changed to be ajax:complete (line 167):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;javascript&quot;&gt;  document.on(&quot;ajax:complete&quot;, &quot;form&quot;, function(event, element) { 
    //original code here
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The code works as expected: the button is disabled until the
ajax response is received.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When submitting a remote form with a &quot;disable_with&quot; option, the reasonable expectation is that the button will be re-enabled after the ajax response. Instead, the button is immediately re-enabled after the request is made but before the response is received. The problem is that the re-enabling code in rails.js (lines 167-174) is fired on ajax:after:

@@@ javascript
  document.on(&quot;ajax:after&quot;, &quot;form&quot;, function(event, element) {
    var inputs = element.select(&quot;input[type=submit][disabled=true][data-disable-with]&quot;);
    inputs.each(function(input) {
      input.value = input.readAttribute('data-original-value');
      input.removeAttribute('data-original-value');
      input.disabled = false;
    });
  });
@@@

If changed to be ajax:complete (line 167):

@@@ javascript
  document.on(&quot;ajax:complete&quot;, &quot;form&quot;, function(event, element) { 
    //original code here
  }
@@@

The code works as expected: the button is disabled until the ajax response is received.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When submitting a remote form with a &quot;disable_with&quot; option, the
reasonable expectation is that the button will be re-enabled after
the ajax response. Instead, the button is immediately re-enabled
after the request is made but before the response is received. The
problem is that the re-enabling code in rails.js (lines 167-174) is
fired on ajax:after:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;javascript&quot;&gt;  document.on(&quot;ajax:after&quot;, &quot;form&quot;, function(event, element) {
    var inputs = element.select(&quot;input[type=submit][disabled=true][data-disable-with]&quot;);
    inputs.each(function(input) {
      input.value = input.readAttribute('data-original-value');
      input.removeAttribute('data-original-value');
      input.disabled = false;
    });
  });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If changed to be ajax:complete (line 167):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;javascript&quot;&gt;  document.on(&quot;ajax:complete&quot;, &quot;form&quot;, function(event, element) { 
    //original code here
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The code works as expected: the button is disabled until the
ajax response is received.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-27T16:17:48+01:00</created-at>
      <creator-id type="integer">117561</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5715</number>
      <permalink>rails3-disable_with-remote-form-button-immediately-gets-re-enabled</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>ajax disable_with form_for rails3</tag>
      <title>Rails3 disable_with remote form button immediately gets re-enabled</title>
      <updated-at type="datetime">2010-09-27T16:17:50+01:00</updated-at>
      <user-id type="integer">117561</user-id>
      <version type="integer">1</version>
      <user-name>ph0rque</user-name>
      <creator-name>ph0rque</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5715</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Duplicate of #5714.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Duplicate of &lt;a href=&quot;/projects/8994/tickets/5714&quot; title=
&quot;Ticket #5714&quot;&gt;#5714&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-27T23:19:42+01:00</created-at>
      <creator-id type="integer">117561</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5715</number>
      <permalink>rails3-disable_with-remote-form-button-immediately-gets-re-enabled</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>ajax disable_with form_for rails3</tag>
      <title>Rails3 disable_with remote form button immediately gets re-enabled</title>
      <updated-at type="datetime">2010-09-27T23:19:47+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">2</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>ph0rque</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5715</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
