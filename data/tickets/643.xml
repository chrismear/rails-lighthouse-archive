<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">17477</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-17T16:29:56+01:00</created-at>
  <creator-id type="integer">26330</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">643</number>
  <permalink>named_scope-with-eager-loading-affects-activerecord-objects</permalink>
  <priority type="integer">125</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.1 activerecord bug eager_loading has_one named_scope patch</tag>
  <title>named_scope with eager loading affects activerecord objects</title>
  <updated-at type="datetime">2009-05-01T20:41:38+01:00</updated-at>
  <user-id type="integer">10014</user-id>
  <version type="integer">6</version>
  <user-name>James Le Cuirot</user-name>
  <creator-name>elDub</creator-name>
  <assigned-user-name>Frederick Cheung</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/643</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Named scope with eager loading seems to affect activerecord objects to the point in which the object's relationships are broken.

Take this example class...

@@@
class Document &lt; ActiveRecord::Base
  has_one :revision, :class_name =&gt; 'Document', :foreign_key =&gt; 'prior_revision_id'
  belongs_to :prior_revision, :class_name =&gt; 'Document', :foreign_key =&gt; 'prior_revision_id'
  
  named_scope :active, :conditions =&gt; { :active =&gt; true }
  named_scope :inactive, :conditions =&gt; { :active =&gt; false }
  named_scope :both, :conditions =&gt; { :active =&gt; [true,false] }
end
@@@

...and this setup...

@@@
script/console
Loading development environment (Rails 2.1.0)
&gt;&gt; doc = Document.create(:active =&gt; false)
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; doc.create_revision(:active =&gt; true)
=&gt; #&lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &quot;2008-07-17 15:18:58&quot;, updated_at: &quot;2008-07-17 15:18:58&quot;&gt;
@@@

A basic test works...

@@@
&gt;&gt; test1 = Document.inactive.find(:first)
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; test1.revision
=&gt; #&lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &quot;2008-07-17 15:18:58&quot;, updated_at: &quot;2008-07-17 15:18:58&quot;&gt;
@@@

However, using eager loading, the scope has caused the resulting activerecord object to NOT be able to see the revision relationship.

@@@
&gt;&gt; test2 = Document.inactive.find(:first, :include =&gt; :revision)
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07
-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; test2.revision
=&gt; nil
@@@

To further confuse things, if I instead collect all the matching documents with an order clause referencing the join, things are back to normal.

@@@
&gt;&gt; test3 = Document.inactive.find(:all, :include =&gt; :revision, :order =&gt; 'revisions_documents.id')[0]
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; test3.revision
=&gt; #&lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &quot;2008-07-17 15:18:58&quot;, updated_at: &quot;2008-07-17 15:18:58&quot;&gt;
@@@</original-body>
  <latest-body>Named scope with eager loading seems to affect activerecord objects to the point in which the object's relationships are broken.

Take this example class...

@@@
class Document &lt; ActiveRecord::Base
  has_one :revision, :class_name =&gt; 'Document', :foreign_key =&gt; 'prior_revision_id'
  belongs_to :prior_revision, :class_name =&gt; 'Document', :foreign_key =&gt; 'prior_revision_id'
  
  named_scope :active, :conditions =&gt; { :active =&gt; true }
  named_scope :inactive, :conditions =&gt; { :active =&gt; false }
  named_scope :both, :conditions =&gt; { :active =&gt; [true,false] }
end
@@@

...and this setup...

@@@
script/console
Loading development environment (Rails 2.1.0)
&gt;&gt; doc = Document.create(:active =&gt; false)
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; doc.create_revision(:active =&gt; true)
=&gt; #&lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &quot;2008-07-17 15:18:58&quot;, updated_at: &quot;2008-07-17 15:18:58&quot;&gt;
@@@

A basic test works...

@@@
&gt;&gt; test1 = Document.inactive.find(:first)
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; test1.revision
=&gt; #&lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &quot;2008-07-17 15:18:58&quot;, updated_at: &quot;2008-07-17 15:18:58&quot;&gt;
@@@

However, using eager loading, the scope has caused the resulting activerecord object to NOT be able to see the revision relationship.

@@@
&gt;&gt; test2 = Document.inactive.find(:first, :include =&gt; :revision)
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07
-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; test2.revision
=&gt; nil
@@@

To further confuse things, if I instead collect all the matching documents with an order clause referencing the join, things are back to normal.

@@@
&gt;&gt; test3 = Document.inactive.find(:all, :include =&gt; :revision, :order =&gt; 'revisions_documents.id')[0]
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; test3.revision
=&gt; #&lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &quot;2008-07-17 15:18:58&quot;, updated_at: &quot;2008-07-17 15:18:58&quot;&gt;
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Named scope with eager loading seems to affect activerecord objects to the point in which the object's relationships are broken.
&lt;/p&gt;&lt;p&gt;
Take this example class...
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;class Document &amp;lt; ActiveRecord::Base
  has_one :revision, :class_name =&amp;gt; 'Document', :foreign_key =&amp;gt; 'prior_revision_id'
  belongs_to :prior_revision, :class_name =&amp;gt; 'Document', :foreign_key =&amp;gt; 'prior_revision_id'
  
  named_scope :active, :conditions =&amp;gt; { :active =&amp;gt; true }
  named_scope :inactive, :conditions =&amp;gt; { :active =&amp;gt; false }
  named_scope :both, :conditions =&amp;gt; { :active =&amp;gt; [true,false] }
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
...and this setup...
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;script/console
Loading development environment (Rails 2.1.0)
&amp;gt;&amp;gt; doc = Document.create(:active =&amp;gt; false)
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &amp;quot;2008-07-17 15:18:44&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:44&amp;quot;&amp;gt;
&amp;gt;&amp;gt; doc.create_revision(:active =&amp;gt; true)
=&amp;gt; #&amp;lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &amp;quot;2008-07-17 15:18:58&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:58&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
A basic test works...
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;&amp;gt;&amp;gt; test1 = Document.inactive.find(:first)
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &amp;quot;2008-07-17 15:18:44&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:44&amp;quot;&amp;gt;
&amp;gt;&amp;gt; test1.revision
=&amp;gt; #&amp;lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &amp;quot;2008-07-17 15:18:58&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:58&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
However, using eager loading, the scope has caused the resulting activerecord object to NOT be able to see the revision relationship.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;&amp;gt;&amp;gt; test2 = Document.inactive.find(:first, :include =&amp;gt; :revision)
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &amp;quot;2008-07
-17 15:18:44&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:44&amp;quot;&amp;gt;
&amp;gt;&amp;gt; test2.revision
=&amp;gt; nil&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
To further confuse things, if I instead collect all the matching documents with an order clause referencing the join, things are back to normal.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;&amp;gt;&amp;gt; test3 = Document.inactive.find(:all, :include =&amp;gt; :revision, :order =&amp;gt; 'revisions_documents.id')[0]
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &amp;quot;2008-07-17 15:18:44&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:44&amp;quot;&amp;gt;
&amp;gt;&amp;gt; test3.revision
=&amp;gt; #&amp;lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &amp;quot;2008-07-17 15:18:58&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:58&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Named scope with eager loading seems to affect activerecord objects to the point in which the object's relationships are broken.

Take this example class...
@@@
class Document &lt; ActiveRecord::Base
  has_one :revision, :class_name =&gt; 'Document', :foreign_key =&gt; 'prior_revision_id'
  belongs_to :prior_revision, :class_name =&gt; 'Document', :foreign_key =&gt; 'prior_revision_id'
  
  named_scope :active, :conditions =&gt; { :active =&gt; true }
  named_scope :inactive, :conditions =&gt; { :active =&gt; false }
  named_scope :both, :conditions =&gt; { :active =&gt; [true,false] }
end
@@@

...and this setup...
@@@
script/console
Loading development environment (Rails 2.1.0)
&gt;&gt; doc = Document.create(:active =&gt; false)
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; doc.create_revision(:active =&gt; true)
=&gt; #&lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &quot;2008-07-17 15:18:58&quot;, updated_at: &quot;2008-07-17 15:18:58&quot;&gt;
@@@

A basic test works...
@@@
&gt;&gt; test1 = Document.inactive.find(:first)
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; test1.revision
=&gt; #&lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &quot;2008-07-17 15:18:58&quot;, updated_at: &quot;2008-07-17 15:18:58&quot;&gt;
@@@

However, using eager loading, the scope has caused the resulting activerecord object to NOT be able to see the revision relationship.
@@@
&gt;&gt; test2 = Document.inactive.find(:first, :include =&gt; :revision)
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07
-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; test2.revision
=&gt; nil
@@@
I assume that because the revision relationship is itself of the Document class that THAT is the reason why it was not returned (it is active and the named scope was looking for inactive), though I don't agree that the relationship should be scoped.  If the named scope is changed from 'inactive' to 'both', the revision relationship is visible.

To further confuse things, if I instead collect all the matching documents with an order clause referencing the join, things are back to normal.
@@@
&gt;&gt; test3 = Document.inactive.find(:all, :include =&gt; :revision, :order =&gt; 'revisions_documents.id')[0]
=&gt; #&lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &quot;2008-07-17 15:18:44&quot;, updated_at: &quot;2008-07-17 15:18:44&quot;&gt;
&gt;&gt; test3.revision
=&gt; #&lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &quot;2008-07-17 15:18:58&quot;, updated_at: &quot;2008-07-17 15:18:58&quot;&gt;
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Named scope with eager loading seems to affect activerecord objects to the point in which the object's relationships are broken.
&lt;/p&gt;&lt;p&gt;
Take this example class...
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;class Document &amp;lt; ActiveRecord::Base
  has_one :revision, :class_name =&amp;gt; 'Document', :foreign_key =&amp;gt; 'prior_revision_id'
  belongs_to :prior_revision, :class_name =&amp;gt; 'Document', :foreign_key =&amp;gt; 'prior_revision_id'
  
  named_scope :active, :conditions =&amp;gt; { :active =&amp;gt; true }
  named_scope :inactive, :conditions =&amp;gt; { :active =&amp;gt; false }
  named_scope :both, :conditions =&amp;gt; { :active =&amp;gt; [true,false] }
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
...and this setup...
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;script/console
Loading development environment (Rails 2.1.0)
&amp;gt;&amp;gt; doc = Document.create(:active =&amp;gt; false)
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &amp;quot;2008-07-17 15:18:44&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:44&amp;quot;&amp;gt;
&amp;gt;&amp;gt; doc.create_revision(:active =&amp;gt; true)
=&amp;gt; #&amp;lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &amp;quot;2008-07-17 15:18:58&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:58&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
A basic test works...
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;&amp;gt;&amp;gt; test1 = Document.inactive.find(:first)
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &amp;quot;2008-07-17 15:18:44&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:44&amp;quot;&amp;gt;
&amp;gt;&amp;gt; test1.revision
=&amp;gt; #&amp;lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &amp;quot;2008-07-17 15:18:58&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:58&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
However, using eager loading, the scope has caused the resulting activerecord object to NOT be able to see the revision relationship.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;&amp;gt;&amp;gt; test2 = Document.inactive.find(:first, :include =&amp;gt; :revision)
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &amp;quot;2008-07
-17 15:18:44&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:44&amp;quot;&amp;gt;
&amp;gt;&amp;gt; test2.revision
=&amp;gt; nil&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I assume that because the revision relationship is itself of the Document class that THAT is the reason why it was not returned (it is active and the named scope was looking for inactive), though I don't agree that the relationship should be scoped.  If the named scope is changed from 'inactive' to 'both', the revision relationship is visible.
&lt;/p&gt;&lt;p&gt;
To further confuse things, if I instead collect all the matching documents with an order clause referencing the join, things are back to normal.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;&amp;gt;&amp;gt; test3 = Document.inactive.find(:all, :include =&amp;gt; :revision, :order =&amp;gt; 'revisions_documents.id')[0]
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, active: false, created_at: &amp;quot;2008-07-17 15:18:44&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:44&amp;quot;&amp;gt;
&amp;gt;&amp;gt; test3.revision
=&amp;gt; #&amp;lt;Document id: 2, prior_revision_id: 1, active: true, created_at: &amp;quot;2008-07-17 15:18:58&amp;quot;, updated_at: &amp;quot;2008-07-17 15:18:58&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T16:50:00+01:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">643</number>
      <permalink>named_scope-with-eager-loading-affects-activerecord-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug eager_loading has_one named_scope</tag>
      <title>named_scope with eager loading affects activerecord objects</title>
      <updated-at type="datetime">2008-07-17T16:50:00+01:00</updated-at>
      <user-id type="integer">26330</user-id>
      <version type="integer">1</version>
      <user-name>elDub</user-name>
      <creator-name>elDub</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Added failing test case.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Added failing test case.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-19T17:49:23+01:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1 activerecord bug eager_loading has_one named_scope
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">643</number>
      <permalink>named_scope-with-eager-loading-affects-activerecord-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug eager_loading has_one named_scope</tag>
      <title>named_scope with eager loading affects activerecord objects</title>
      <updated-at type="datetime">2008-09-19T17:49:28+01:00</updated-at>
      <user-id type="integer">26330</user-id>
      <version type="integer">2</version>
      <user-name>elDub</user-name>
      <creator-name>elDub</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Resolves issue for me, but see discussion on [mailing list](http://groups.google.com/group/rubyonrails-core/t/8ed0fe42a1d71005)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Resolves issue for me, but see discussion on &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/t/8ed0fe42a1d71005&quot;&gt;
mailing list&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-19T01:38:30+00:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1 activerecord bug eager_loading has_one named_scope
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">643</number>
      <permalink>named_scope-with-eager-loading-affects-activerecord-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug eager_loading has_one named_scope patch</tag>
      <title>named_scope with eager loading affects activerecord objects</title>
      <updated-at type="datetime">2008-12-19T01:38:33+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>elDub</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-19T14:07:41+00:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">643</number>
      <permalink>named_scope-with-eager-loading-affects-activerecord-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug eager_loading has_one named_scope patch</tag>
      <title>named_scope with eager loading affects activerecord objects</title>
      <updated-at type="datetime">2008-12-19T14:07:46+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>elDub</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [5cebe69e74d411c3c9e5f6ab9d4b2b16ee36177c]) Preload uses exclusive scope [#643 state:resolved]

With self referential associations, the scope for the the top level should not affect fetching of associations, for example
when doing

Person.male.find :all, :include =&gt; :friends

we should load all of the friends for each male, not just the male friends.
http://github.com/rails/rails/commit/5cebe69e74d411c3c9e5f6ab9d4b2b16ee36177c</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [5cebe69e74d411c3c9e5f6ab9d4b2b16ee36177c]) Preload uses
exclusive scope [&lt;a href=&quot;/projects/8994/tickets/643&quot; title=&quot;Ticket #643&quot;&gt;#643&lt;/a&gt; state:resolved]&lt;/p&gt;
&lt;p&gt;With self referential associations, the scope for the the top
level should not affect fetching of associations, for example when
doing&lt;/p&gt;
&lt;p&gt;Person.male.find :all, :include =&amp;gt; :friends&lt;/p&gt;
&lt;p&gt;we should load all of the friends for each male, not just the
male friends. &lt;a href=&quot;http://github.com/rails/rails/commit/5cebe69e74d411c3c9e5f6ab9d4b2b16ee36177c&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-26T21:57:38+00:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">643</number>
      <permalink>named_scope-with-eager-loading-affects-activerecord-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.1 activerecord bug eager_loading has_one named_scope patch</tag>
      <title>named_scope with eager loading affects activerecord objects</title>
      <updated-at type="datetime">2008-12-26T21:57:41+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">5</version>
      <user-name>Repository</user-name>
      <creator-name>elDub</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I think you guys need to see ticket #2348.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think you guys need to see ticket &lt;a href=&quot;/projects/8994/tickets/2348&quot; title=&quot;Ticket #2348&quot;&gt;#2348&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-01T20:41:33+01:00</created-at>
      <creator-id type="integer">26330</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">643</number>
      <permalink>named_scope-with-eager-loading-affects-activerecord-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.1 activerecord bug eager_loading has_one named_scope patch</tag>
      <title>named_scope with eager loading affects activerecord objects</title>
      <updated-at type="datetime">2009-05-01T20:41:38+01:00</updated-at>
      <user-id type="integer">10014</user-id>
      <version type="integer">6</version>
      <user-name>James Le Cuirot</user-name>
      <creator-name>elDub</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>c1d50f1124fd32c4b5b757cfb8412954b8b96778</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-19T17:49:24+01:00</created-at>
      <filename>named_scope_scopes_relations_test.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">47217</id>
      <size type="integer">3558</size>
      <uploader-id type="integer">26330</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/47217/named_scope_scopes_relations_test.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>b258a633397099dc734220a97b4ee32df881f0df</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-12-19T01:38:30+00:00</created-at>
      <filename>fix_preload_of_scoped_self_referential.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">72769</id>
      <size type="integer">9248</size>
      <uploader-id type="integer">17477</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/72769/fix_preload_of_scoped_self_referential.diff</url>
    </attachment>
  </attachments>
</ticket>
