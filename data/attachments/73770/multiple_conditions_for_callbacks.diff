From fe94e4ed4e4d7aa262b318da9b33251f1342f798 Mon Sep 17 00:00:00 2001
From: mino <l@caviola.net>
Date: Wed, 24 Dec 2008 14:25:50 +0100
Subject: [PATCH] Make it possible to use :if and :unless together when using callbacks and allows you to add multiple conditions as an array.

Example:
  before_validation :set_random_user, :unless => :user, :if => :beginning
  validate :validates_user, :if => [:user, :beginning]
---
 activesupport/lib/active_support/callbacks.rb |   10 ++----
 activesupport/test/callbacks_test.rb          |   42 ++++++++++++++++++++++++-
 2 files changed, 44 insertions(+), 8 deletions(-)

diff --git a/activesupport/lib/active_support/callbacks.rb b/activesupport/lib/active_support/callbacks.rb
index 5cdcaf5..08f9460 100644
--- a/activesupport/lib/active_support/callbacks.rb
+++ b/activesupport/lib/active_support/callbacks.rb
@@ -192,13 +192,9 @@ module ActiveSupport
         end
 
         def should_run_callback?(*args)
-          if options[:if]
-            evaluate_method(options[:if], *args)
-          elsif options[:unless]
-            !evaluate_method(options[:unless], *args)
-          else
-            true
-          end
+          cond = [options[:if]].flatten.compact.map { |a| !!evaluate_method(a, *args) } +
+                 [options[:unless]].flatten.compact.map { |a| !evaluate_method(a, *args) }
+          cond.empty? || (cond.uniq == [true])
         end
     end
 
diff --git a/activesupport/test/callbacks_test.rb b/activesupport/test/callbacks_test.rb
index 25b8eec..2bc2e1e 100644
--- a/activesupport/test/callbacks_test.rb
+++ b/activesupport/test/callbacks_test.rb
@@ -53,10 +53,41 @@ class Person < Record
 end
 
 class ConditionalPerson < Record
+  # proc
   before_save Proc.new { |r| r.history << [:before_save, :proc] }, :if => Proc.new { |r| true }
   before_save Proc.new { |r| r.history << "b00m" }, :if => Proc.new { |r| false }
   before_save Proc.new { |r| r.history << [:before_save, :proc] }, :unless => Proc.new { |r| false }
   before_save Proc.new { |r| r.history << "b00m" }, :unless => Proc.new { |r| true }
+  # symbol
+  before_save Proc.new { |r| r.history << [:before_save, :symbol] }, :if => :yes
+  before_save Proc.new { |r| r.history << "b00m" }, :if => :no
+  before_save Proc.new { |r| r.history << [:before_save, :symbol] }, :unless => :no
+  before_save Proc.new { |r| r.history << "b00m" }, :unless => :yes
+  # string
+  before_save Proc.new { |r| r.history << [:before_save, :string] }, :if => 'yes'
+  before_save Proc.new { |r| r.history << "b00m" }, :if => 'no'
+  before_save Proc.new { |r| r.history << [:before_save, :string] }, :unless => 'no'
+  before_save Proc.new { |r| r.history << "b00m" }, :unless => 'yes'
+  # Array with conditions
+  before_save Proc.new { |r| r.history << [:before_save, :symbol_array] }, :if => [:yes, :other_yes]
+  before_save Proc.new { |r| r.history << "b00m" }, :if => [:yes, :no]
+  before_save Proc.new { |r| r.history << [:before_save, :symbol_array] }, :unless => [:no, :other_no]
+  before_save Proc.new { |r| r.history << "b00m" }, :unless => [:yes, :no]
+  # Combined if and unless
+  before_save Proc.new { |r| r.history << [:before_save, :combined_symbol] }, :if => :yes, :unless => :no
+  before_save Proc.new { |r| r.history << "b00m" }, :if => :yes, :unless => :yes
+  # Array with different types of conditions
+  before_save Proc.new { |r| r.history << [:before_save, :symbol_proc_string_array] }, :if => [:yes, Proc.new { |r| true }, 'yes']
+  before_save Proc.new { |r| r.history << "b00m" }, :if => [:yes, Proc.new { |r| true }, 'no']
+  # Array with different types of conditions comibned if and unless
+  before_save Proc.new { |r| r.history << [:before_save, :combined_symbol_proc_string_array] },
+              :if => [:yes, Proc.new { |r| true }, 'yes'], :unless => [:no, 'no']
+  before_save Proc.new { |r| r.history << "b00m" }, :if => [:yes, Proc.new { |r| true }, 'no'], :unless => [:no, 'no']
+
+  def yes; true; end
+  def other_yes; true; end
+  def no; false; end
+  def other_no; false; end
 
   def save
     run_callbacks(:before_save)
@@ -90,7 +121,16 @@ class ConditionalCallbackTest < Test::Unit::TestCase
     person.save
     assert_equal [
       [:before_save, :proc],
-      [:before_save, :proc]
+      [:before_save, :proc],
+      [:before_save, :symbol],
+      [:before_save, :symbol],
+      [:before_save, :string],
+      [:before_save, :string],
+      [:before_save, :symbol_array],
+      [:before_save, :symbol_array],
+      [:before_save, :combined_symbol],
+      [:before_save, :symbol_proc_string_array],
+      [:before_save, :combined_symbol_proc_string_array]
     ], person.history
   end
 end
-- 
1.5.6.3

