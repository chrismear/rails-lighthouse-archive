<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-17T20:08:10+01:00</created-at>
  <creator-id type="integer">26259</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">646</number>
  <permalink>eager-loading-duplicates-conditions-unnecessarily</permalink>
  <priority type="integer">128</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord eager_loading</tag>
  <title>eager loading duplicates conditions unnecessarily</title>
  <updated-at type="datetime">2008-10-23T16:32:07+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Smilinguy</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/646</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I noticed that when querying for limited numbers of results, that the eager loading of objects with have has_and_belongs_to_many and has_many :through associations appears to run a pre-query to obtain object ids then performs the eager loading of those objects by id with the included associations.

The issue I saw was that the conditions block was run on both the pre-query for IDs and the eager loading query.  Perhaps I'm missing something, but if you already have the object ids, and you are really just querying by ID why do you need to run the conditions again?  It slows things down and it looks to me to be unnecessary.

I'm not sure how to make a patch, but the method that I think needs to be changed is construct_finder_sql_with_included_associations.

I changed the lines
@@@
add_conditions!(sql, options[:conditions], scope)
add_limited_ids_condition!(sql, options, join_dependency) if !using_limitable_reflections?(join_dependency.reflections) &amp;&amp; ((scope &amp;&amp; scope[:limit]) || options[:limit]) 
@@@

to 

@@@
if !using_limitable_reflections?(join_dependency.reflections) &amp;&amp; ((scope &amp;&amp; scope[:limit]) || options[:limit])
            add_limited_ids_condition!(sql, options, join_dependency)
          else
            add_conditions!(sql, options[:conditions], scope)
          end  
@@@

Not sure what other impacts this will have or if I'm correct in my assumptions.  Any comments or feedback would be appreciated.</original-body>
  <latest-body>I noticed that when querying for limited numbers of results, that the eager loading of objects with have has_and_belongs_to_many and has_many :through associations appears to run a pre-query to obtain object ids then performs the eager loading of those objects by id with the included associations.

The issue I saw was that the conditions block was run on both the pre-query for IDs and the eager loading query.  Perhaps I'm missing something, but if you already have the object ids, and you are really just querying by ID why do you need to run the conditions again?  It slows things down and it looks to me to be unnecessary.

I'm not sure how to make a patch, but the method that I think needs to be changed is construct_finder_sql_with_included_associations.

I changed the lines
@@@
add_conditions!(sql, options[:conditions], scope)
add_limited_ids_condition!(sql, options, join_dependency) if !using_limitable_reflections?(join_dependency.reflections) &amp;&amp; ((scope &amp;&amp; scope[:limit]) || options[:limit]) 
@@@

to 

@@@
if !using_limitable_reflections?(join_dependency.reflections) &amp;&amp; ((scope &amp;&amp; scope[:limit]) || options[:limit])
            add_limited_ids_condition!(sql, options, join_dependency)
          else
            add_conditions!(sql, options[:conditions], scope)
          end  
@@@

Not sure what other impacts this will have or if I'm correct in my assumptions.  Any comments or feedback would be appreciated.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
I noticed that when querying for limited numbers of results, that the eager loading of objects with have has_and_belongs_to_many and has_many :through associations appears to run a pre-query to obtain object ids then performs the eager loading of those objects by id with the included associations.
&lt;/p&gt;&lt;p&gt;
The issue I saw was that the conditions block was run on both the pre-query for IDs and the eager loading query.  Perhaps I'm missing something, but if you already have the object ids, and you are really just querying by ID why do you need to run the conditions again?  It slows things down and it looks to me to be unnecessary.
&lt;/p&gt;&lt;p&gt;
I'm not sure how to make a patch, but the method that I think needs to be changed is construct_finder_sql_with_included_associations.
&lt;/p&gt;&lt;p&gt;
I changed the lines
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;add_conditions!(sql, options[:conditions], scope)
add_limited_ids_condition!(sql, options, join_dependency) if !using_limitable_reflections?(join_dependency.reflections) &amp;amp;&amp;amp; ((scope &amp;amp;&amp;amp; scope[:limit]) || options[:limit]) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
to
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;if !using_limitable_reflections?(join_dependency.reflections) &amp;amp;&amp;amp; ((scope &amp;amp;&amp;amp; scope[:limit]) || options[:limit])
            add_limited_ids_condition!(sql, options, join_dependency)
          else
            add_conditions!(sql, options[:conditions], scope)
          end  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Not sure what other impacts this will have or if I'm correct in my assumptions.  Any comments or feedback would be appreciated.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I noticed that when querying for limited numbers of results, that the eager loading of objects with have has_and_belongs_to_many and has_many :through associations appears to run a pre-query to obtain object ids then performs the eager loading of those objects by id with the included associations.

The issue I saw was that the conditions block was run on both the pre-query for IDs and the eager loading query.  Perhaps I'm missing something, but if you already have the object ids, and you are really just querying by ID why do you need to run the conditions again?  It slows things down and it looks to me to be unnecessary.

I'm not sure how to make a patch, but the method that I think needs to be changed is construct_finder_sql_with_included_associations.

I changed the lines
@@@
add_conditions!(sql, options[:conditions], scope)
add_limited_ids_condition!(sql, options, join_dependency) if !using_limitable_reflections?(join_dependency.reflections) &amp;&amp; ((scope &amp;&amp; scope[:limit]) || options[:limit]) 
@@@

to 

@@@
if !using_limitable_reflections?(join_dependency.reflections) &amp;&amp; ((scope &amp;&amp; scope[:limit]) || options[:limit])
            add_limited_ids_condition!(sql, options, join_dependency)
          else
            add_conditions!(sql, options[:conditions], scope)
          end  
@@@

Not sure what other impacts this will have or if I'm correct in my assumptions.  Any comments or feedback would be appreciated.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I noticed that when querying for limited numbers of results, that the eager loading of objects with have has_and_belongs_to_many and has_many :through associations appears to run a pre-query to obtain object ids then performs the eager loading of those objects by id with the included associations.
&lt;/p&gt;&lt;p&gt;
The issue I saw was that the conditions block was run on both the pre-query for IDs and the eager loading query.  Perhaps I'm missing something, but if you already have the object ids, and you are really just querying by ID why do you need to run the conditions again?  It slows things down and it looks to me to be unnecessary.
&lt;/p&gt;&lt;p&gt;
I'm not sure how to make a patch, but the method that I think needs to be changed is construct_finder_sql_with_included_associations.
&lt;/p&gt;&lt;p&gt;
I changed the lines
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;add_conditions!(sql, options[:conditions], scope)
add_limited_ids_condition!(sql, options, join_dependency) if !using_limitable_reflections?(join_dependency.reflections) &amp;amp;&amp;amp; ((scope &amp;amp;&amp;amp; scope[:limit]) || options[:limit]) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
to
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;if !using_limitable_reflections?(join_dependency.reflections) &amp;amp;&amp;amp; ((scope &amp;amp;&amp;amp; scope[:limit]) || options[:limit])
            add_limited_ids_condition!(sql, options, join_dependency)
          else
            add_conditions!(sql, options[:conditions], scope)
          end  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Not sure what other impacts this will have or if I'm correct in my assumptions.  Any comments or feedback would be appreciated.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T20:08:10+01:00</created-at>
      <creator-id type="integer">26259</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">646</number>
      <permalink>eager-loading-duplicates-conditions-unnecessarily</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord eager_loading</tag>
      <title>eager loading duplicates conditions unnecessarily</title>
      <updated-at type="datetime">2008-07-17T20:08:10+01:00</updated-at>
      <user-id type="integer">26259</user-id>
      <version type="integer">1</version>
      <user-name>Smilinguy</user-name>
      <creator-name>Smilinguy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/646</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-23T16:32:05+01:00</created-at>
      <creator-id type="integer">26259</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">646</number>
      <permalink>eager-loading-duplicates-conditions-unnecessarily</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord eager_loading</tag>
      <title>eager loading duplicates conditions unnecessarily</title>
      <updated-at type="datetime">2008-10-23T16:32:07+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Smilinguy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/646</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
