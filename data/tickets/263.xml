<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-27T16:11:10+01:00</created-at>
  <creator-id type="integer">5701</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">263</number>
  <permalink>calling-named-scope-in-class-method</permalink>
  <priority type="integer">15962</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>bug named_scope tested</tag>
  <title>calling named scope in class method</title>
  <updated-at type="datetime">2008-07-18T03:02:00+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">3</version>
  <user-name>Pratik</user-name>
  <creator-name>Ryan Bates</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/263</url>
  <priority-name nil="true"></priority-name>
  <original-body>When a named scope is called inside a class method, it loses the other scopes in the chain. For example:

@@@ ruby
class Topic &lt; ActiveRecord::Base
  named_scope :approved, :conditions =&gt; {:approved =&gt; true}
  named_scope :replied, :conditions =&gt; ['replies_count &gt; 0']

  def self.approved_through_class_method
    approved
  end
end

Topic.replied.replied.approved_through_class_method # =&gt; loses replied scope
@@@

What's interesting is that appending find to the scope will work and pick up the chained scope.

@@@ ruby
Topic.replied.replied.approved_through_class_method.find(:all) # =&gt; keeps replied scope
@@@

I have attached a failing test which proves this, but I'm not familiar enough with named_scope to make it pass.</original-body>
  <latest-body>When a named scope is called inside a class method, it loses the other scopes in the chain. For example:

@@@ ruby
class Topic &lt; ActiveRecord::Base
  named_scope :approved, :conditions =&gt; {:approved =&gt; true}
  named_scope :replied, :conditions =&gt; ['replies_count &gt; 0']

  def self.approved_through_class_method
    approved
  end
end

Topic.replied.replied.approved_through_class_method # =&gt; loses replied scope
@@@

What's interesting is that appending find to the scope will work and pick up the chained scope.

@@@ ruby
Topic.replied.replied.approved_through_class_method.find(:all) # =&gt; keeps replied scope
@@@

I have attached a failing test which proves this, but I'm not familiar enough with named_scope to make it pass.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
When a named scope is called inside a class method, it loses the other scopes in the chain. For example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Topic &amp;lt; ActiveRecord::Base
  named_scope :approved, :conditions =&amp;gt; {:approved =&amp;gt; true}
  named_scope :replied, :conditions =&amp;gt; ['replies_count &amp;gt; 0']

  def self.approved_through_class_method
    approved
  end
end

Topic.replied.replied.approved_through_class_method # =&amp;gt; loses replied scope&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
What's interesting is that appending find to the scope will work and pick up the chained scope.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Topic.replied.replied.approved_through_class_method.find(:all) # =&amp;gt; keeps replied scope&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I have attached a failing test which proves this, but I'm not familiar enough with named_scope to make it pass.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When a named scope is called inside a class method, it loses the other scopes in the chain. For example:

@@@ ruby
class Topic &lt; ActiveRecord::Base
  named_scope :approved, :conditions =&gt; {:approved =&gt; true}
  named_scope :replied, :conditions =&gt; ['replies_count &gt; 0']

  def self.approved_through_class_method
    approved
  end
end

Topic.replied.approved_through_class_method # =&gt; loses replied scope
@@@

What's interesting is that if I append &quot;all&quot; to the approved call in the class method then it will work.

@@@ ruby
def self.approved_through_class_method
  approved.all
end

Topic.replied.approved_through_class_method # =&gt; keeps replied scope
@@@

I have attached a failing test, but I'm not familiar enough with named_scope to make it pass.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
When a named scope is called inside a class method, it loses the other scopes in the chain. For example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Topic &amp;lt; ActiveRecord::Base
  named_scope :approved, :conditions =&amp;gt; {:approved =&amp;gt; true}
  named_scope :replied, :conditions =&amp;gt; ['replies_count &amp;gt; 0']

  def self.approved_through_class_method
    approved
  end
end

Topic.replied.approved_through_class_method # =&amp;gt; loses replied scope&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
What's interesting is that if I append &quot;all&quot; to the approved call in the class method then it will work.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def self.approved_through_class_method
  approved.all
end

Topic.replied.approved_through_class_method # =&amp;gt; keeps replied scope&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I have attached a failing test, but I'm not familiar enough with named_scope to make it pass.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-27T16:21:03+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">263</number>
      <permalink>calling-named-scope-in-class-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>calling named scope in class method</title>
      <updated-at type="datetime">2008-05-27T16:21:03+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">1</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>Ryan Bates</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/263</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T01:59:37+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">263</number>
      <permalink>calling-named-scope-in-class-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug named_scope tested</tag>
      <title>calling named scope in class method</title>
      <updated-at type="datetime">2008-07-17T01:59:37+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Ryan Bates</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/263</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This would happen because you're calling approved_through_class_method on Scope object. In case of Topic.replied.approved, Scope#method_missing checks @@scopes hash to see if :approved is a named scope or not. Wherein case of Topic.replied.approved_through_class_method, there is no way to determine if approved_through_class_method is going to return a named scope or not.

The real solution to this would be very fugly and in no way not worth it.

So the practical solution : Define the method in named scope extension.

@@@ ruby
  named_scope :replied, :conditions =&gt; ['replies_count &gt; 0'] do
    def approved_through_class_method
      approved
    end
  end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This would happen because you're calling approved_through_class_method on Scope object. In case of Topic.replied.approved, Scope#method_missing checks @@scopes hash to see if :approved is a named scope or not. Wherein case of Topic.replied.approved_through_class_method, there is no way to determine if approved_through_class_method is going to return a named scope or not.
&lt;/p&gt;&lt;p&gt;
The real solution to this would be very fugly and in no way not worth it.
&lt;/p&gt;&lt;p&gt;
So the practical solution : Define the method in named scope extension.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  named_scope :replied, :conditions =&amp;gt; ['replies_count &amp;gt; 0'] do
    def approved_through_class_method
      approved
    end
  end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-18T03:02:00+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">263</number>
      <permalink>calling-named-scope-in-class-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>bug named_scope tested</tag>
      <title>calling named scope in class method</title>
      <updated-at type="datetime">2008-07-18T03:02:00+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>Ryan Bates</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/263</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f3f83f0f5f7c5edf1bc3271595847f5c453397eb</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-27T16:11:10+01:00</created-at>
      <filename>test_for_named_scope_in_class_method.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">24619</id>
      <size type="integer">1361</size>
      <uploader-id type="integer">5701</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/24619/test_for_named_scope_in_class_method.diff</url>
    </attachment>
  </attachments>
</ticket>
