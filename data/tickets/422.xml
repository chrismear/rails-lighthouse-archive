<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-15T06:22:55+01:00</created-at>
  <creator-id type="integer">22313</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">422</number>
  <permalink>patch-to-add-count-words-to-validates_length_of</permalink>
  <priority type="integer">16663</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord patch</tag>
  <title>patch to add :count=&gt;:words to validates_length_of</title>
  <updated-at type="datetime">2008-06-29T01:48:52+01:00</updated-at>
  <user-id type="integer">22313</user-id>
  <version type="integer">8</version>
  <user-name>David Lowenfels</user-name>
  <creator-name>David Lowenfels</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/422</url>
  <priority-name nil="true"></priority-name>
  <original-body>This is a patch to add a feature to count words instead of characters, in the ActiveRecord validates_length_of method.

for instance:

@@@ ruby
validates_length_of :essay, :minimum=200, :count=&gt;:words, :too_short=&gt;&quot;Your essay must be at least %d words.&quot;
@@@

The patch includes the following tests.

@@@ ruby
def test_validates_length_of_with_word_count_is
  Topic.validates_length_of( :title, :is =&gt; 5, :count =&gt; :words )
  
  assert !Topic.create(&quot;title&quot; =&gt; &quot;this title has too many words&quot;).valid?
  assert !Topic.create(&quot;title&quot; =&gt; &quot;too little&quot;).valid?
  assert Topic.create(&quot;title&quot; =&gt; &quot;this title has just enough&quot;).valid?
end

def test_validates_length_of_with_word_count_within
  Topic.validates_length_of( :title, :within =&gt; 3..5, :count =&gt; :words )

  t = Topic.new( :title =&gt; &quot;not enough&quot;)
  assert !t.valid?
  assert_equal &quot;is too short (minimum is 3 words)&quot;, t.errors.on(:title)

  t = Topic.new( :title =&gt; &quot;this title has too many words&quot;)
  assert !t.valid?
  assert_equal &quot;is too long (maximum is 5 words)&quot;, t.errors.on(:title)
end
@@@</original-body>
  <latest-body>This is a patch to add a feature to count words instead of characters, in the ActiveRecord validates_length_of method.

for instance:

@@@ ruby
validates_length_of :essay, :minimum=200, :count=&gt;:words, :too_short=&gt;&quot;Your essay must be at least %d words.&quot;
@@@

The patch includes the following tests.

@@@ ruby
def test_validates_length_of_with_word_count_is
  Topic.validates_length_of( :title, :is =&gt; 5, :count =&gt; :words )
  
  assert !Topic.create(&quot;title&quot; =&gt; &quot;this title has too many words&quot;).valid?
  assert !Topic.create(&quot;title&quot; =&gt; &quot;too little&quot;).valid?
  assert Topic.create(&quot;title&quot; =&gt; &quot;this title has just enough&quot;).valid?
end

def test_validates_length_of_with_word_count_within
  Topic.validates_length_of( :title, :within =&gt; 3..5, :count =&gt; :words )

  t = Topic.new( :title =&gt; &quot;not enough&quot;)
  assert !t.valid?
  assert_equal &quot;is too short (minimum is 3 words)&quot;, t.errors.on(:title)

  t = Topic.new( :title =&gt; &quot;this title has too many words&quot;)
  assert !t.valid?
  assert_equal &quot;is too long (maximum is 5 words)&quot;, t.errors.on(:title)
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
This is a patch to add a feature to count words instead of characters, in the ActiveRecord validates_length_of method.
&lt;/p&gt;&lt;p&gt;
for instance:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;validates_length_of :essay, :minimum=200, :count=&amp;gt;:words, :too_short=&amp;gt;&amp;quot;Your essay must be at least %d words.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The patch includes the following tests.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def test_validates_length_of_with_word_count_is
  Topic.validates_length_of( :title, :is =&amp;gt; 5, :count =&amp;gt; :words )
  
  assert !Topic.create(&amp;quot;title&amp;quot; =&amp;gt; &amp;quot;this title has too many words&amp;quot;).valid?
  assert !Topic.create(&amp;quot;title&amp;quot; =&amp;gt; &amp;quot;too little&amp;quot;).valid?
  assert Topic.create(&amp;quot;title&amp;quot; =&amp;gt; &amp;quot;this title has just enough&amp;quot;).valid?
end

def test_validates_length_of_with_word_count_within
  Topic.validates_length_of( :title, :within =&amp;gt; 3..5, :count =&amp;gt; :words )

  t = Topic.new( :title =&amp;gt; &amp;quot;not enough&amp;quot;)
  assert !t.valid?
  assert_equal &amp;quot;is too short (minimum is 3 words)&amp;quot;, t.errors.on(:title)

  t = Topic.new( :title =&amp;gt; &amp;quot;this title has too many words&amp;quot;)
  assert !t.valid?
  assert_equal &amp;quot;is too long (maximum is 5 words)&amp;quot;, t.errors.on(:title)
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is a patch to add a feature to count words instead of characters, in the ActiveRecord validates_length_of method.

for instance:

@@@ ruby
validates_length_of :essay, :minimum=200, :count=&gt;:words, :too_short=&gt;&quot;Your essay must be at least %d words.&quot;
@@@

The patch includes the following tests.

@@@ ruby
def test_validates_length_of_with_word_count_is
  Topic.validates_length_of( :title, :is =&gt; 5, :count =&gt; :words )
  
  assert !Topic.create(&quot;title&quot; =&gt; &quot;this title has too many words&quot;).valid?
  assert !Topic.create(&quot;title&quot; =&gt; &quot;too little&quot;).valid?
  assert Topic.create(&quot;title&quot; =&gt; &quot;this title has just enough&quot;).valid?
end

def test_validates_length_of_with_word_count_within
  Topic.validates_length_of( :title, :within =&gt; 3..5, :count =&gt; :words )

  t = Topic.new( :title =&gt; &quot;not enough&quot;)
  assert !t.valid?
  assert_equal &quot;is too short (minimum is 3 words)&quot;, t.errors.on(:title)

  t = Topic.new( :title =&gt; &quot;this title has too many words&quot;)
  assert !t.valid?
  assert_equal &quot;is too long (maximum is 5 words)&quot;, t.errors.on(:title)
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This is a patch to add a feature to count words instead of characters, in the ActiveRecord validates_length_of method.
&lt;/p&gt;&lt;p&gt;
for instance:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;validates_length_of :essay, :minimum=200, :count=&amp;gt;:words, :too_short=&amp;gt;&amp;quot;Your essay must be at least %d words.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The patch includes the following tests.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def test_validates_length_of_with_word_count_is
  Topic.validates_length_of( :title, :is =&amp;gt; 5, :count =&amp;gt; :words )
  
  assert !Topic.create(&amp;quot;title&amp;quot; =&amp;gt; &amp;quot;this title has too many words&amp;quot;).valid?
  assert !Topic.create(&amp;quot;title&amp;quot; =&amp;gt; &amp;quot;too little&amp;quot;).valid?
  assert Topic.create(&amp;quot;title&amp;quot; =&amp;gt; &amp;quot;this title has just enough&amp;quot;).valid?
end

def test_validates_length_of_with_word_count_within
  Topic.validates_length_of( :title, :within =&amp;gt; 3..5, :count =&amp;gt; :words )

  t = Topic.new( :title =&amp;gt; &amp;quot;not enough&amp;quot;)
  assert !t.valid?
  assert_equal &amp;quot;is too short (minimum is 3 words)&amp;quot;, t.errors.on(:title)

  t = Topic.new( :title =&amp;gt; &amp;quot;this title has too many words&amp;quot;)
  assert !t.valid?
  assert_equal &amp;quot;is too long (maximum is 5 words)&amp;quot;, t.errors.on(:title)
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-15T06:22:55+01:00</created-at>
      <creator-id type="integer">22313</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">422</number>
      <permalink>patch-to-add-count-words-to-validates_length_of</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>patch to add :count=&gt;:words to validates_length_of</title>
      <updated-at type="datetime">2008-06-15T06:22:55+01:00</updated-at>
      <user-id type="integer">22313</user-id>
      <version type="integer">1</version>
      <user-name>David Lowenfels</user-name>
      <creator-name>David Lowenfels</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/422</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't think this is a very common requirement. I'd suggest releasing a plugin. Although, you can try emailing railscore mailing list to see if there is enough interest in the patch, in which case we can roll it in.

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I don't think this is a very common requirement. I'd suggest releasing a plugin. Although, you can try emailing railscore mailing list to see if there is enough interest in the patch, in which case we can roll it in.
&lt;/p&gt;&lt;p&gt;
Thanks!
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-27T16:33:07+01:00</created-at>
      <creator-id type="integer">22313</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">422</number>
      <permalink>patch-to-add-count-words-to-validates_length_of</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord patch</tag>
      <title>patch to add :count=&gt;:words to validates_length_of</title>
      <updated-at type="datetime">2008-06-27T16:33:07+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>David Lowenfels</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/422</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Seconded. I've never needed to count word length. If I did, I think I'd prefer adding a new kind of validation instead of another layer on validates_length_of.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Seconded. I've never needed to count word length. If I did, I think I'd prefer adding a new kind of validation instead of another layer on validates_length_of.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-28T03:21:35+01:00</created-at>
      <creator-id type="integer">22313</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">422</number>
      <permalink>patch-to-add-count-words-to-validates_length_of</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord patch</tag>
      <title>patch to add :count=&gt;:words to validates_length_of</title>
      <updated-at type="datetime">2008-06-28T03:21:35+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>David Lowenfels</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/422</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It seemed like a natural fit to me because the existing rails code already is splitting on '', so I just modified it to optionally split on '\W'. It's a low hanging fruit. I thought a plugin would be overkill, as the core implementation happens on one line (which occurs twice in the code):

-              value = value.split(//) if value.kind_of?(String)
+              value = value.split(/#{split_token}/) if value.kind_of?(String)

The rest is just icing on the cake to extend the API, modify the validation error messages, and add tests.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It seemed like a natural fit to me because the existing rails code already is splitting on '', so I just modified it to optionally split on '\W'. It's a low hanging fruit. I thought a plugin would be overkill, as the core implementation happens on one line (which occurs twice in the code):
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
             value = value.split(//) if value.kind_of?(String)
&lt;/li&gt;&lt;li&gt;
             value = value.split(/#{split_token}/) if value.kind_of?(String)
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
The rest is just icing on the cake to extend the API, modify the validation error messages, and add tests.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-28T03:53:42+01:00</created-at>
      <creator-id type="integer">22313</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">422</number>
      <permalink>patch-to-add-count-words-to-validates_length_of</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord patch</tag>
      <title>patch to add :count=&gt;:words to validates_length_of</title>
      <updated-at type="datetime">2008-06-28T03:53:42+01:00</updated-at>
      <user-id type="integer">22313</user-id>
      <version type="integer">4</version>
      <user-name>David Lowenfels</user-name>
      <creator-name>David Lowenfels</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/422</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good point, David! We split with // so we get Unicode-aware character counts instead of byte length. This is an implementation detail that goes away in Ruby 1.9.

Perhaps we should accept an optional block to take an object and return a count.
@@@ ruby
validates_length_of(:essay, :minimum =&gt; 200, :too_short=&gt;&quot;Your essay must be at least %d words.&quot;) { |str| str.scan(/\w+/).size }
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Good point, David! We split with // so we get Unicode-aware character counts instead of byte length. This is an implementation detail that goes away in Ruby 1.9.
&lt;/p&gt;&lt;p&gt;
Perhaps we should accept an optional block to take an object and return a count.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;validates_length_of(:essay, :minimum =&amp;gt; 200, :too_short=&amp;gt;&amp;quot;Your essay must be at least %d words.&amp;quot;) { |str| str.scan(/\w+/).size }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-28T05:28:37+01:00</created-at>
      <creator-id type="integer">22313</creator-id>
      <diffable-attributes type="yaml">--- 
:state: invalid
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">422</number>
      <permalink>patch-to-add-count-words-to-validates_length_of</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch</tag>
      <title>patch to add :count=&gt;:words to validates_length_of</title>
      <updated-at type="datetime">2008-06-28T05:28:37+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>David Lowenfels</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/422</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@jeremy: that sounds like a good solution. Should I cook up a patch to accept a block?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
@jeremy: that sounds like a good solution. Should I cook up a patch to accept a block?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-28T23:26:42+01:00</created-at>
      <creator-id type="integer">22313</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">422</number>
      <permalink>patch-to-add-count-words-to-validates_length_of</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch</tag>
      <title>patch to add :count=&gt;:words to validates_length_of</title>
      <updated-at type="datetime">2008-06-28T23:26:42+01:00</updated-at>
      <user-id type="integer">22313</user-id>
      <version type="integer">6</version>
      <user-name>David Lowenfels</user-name>
      <creator-name>David Lowenfels</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/422</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>cool, please do!</body>
      <body-html>&lt;div&gt;&lt;p&gt;
cool, please do!
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-28T23:35:18+01:00</created-at>
      <creator-id type="integer">22313</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">422</number>
      <permalink>patch-to-add-count-words-to-validates_length_of</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch</tag>
      <title>patch to add :count=&gt;:words to validates_length_of</title>
      <updated-at type="datetime">2008-06-28T23:35:18+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">7</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>David Lowenfels</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/422</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>done! see #507</body>
      <body-html>&lt;div&gt;&lt;p&gt;
done! see &lt;a href=&quot;/projects/8994/tickets/507&quot; title=&quot;Ticket #507&quot;&gt;#507&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-29T01:48:52+01:00</created-at>
      <creator-id type="integer">22313</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">422</number>
      <permalink>patch-to-add-count-words-to-validates_length_of</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch</tag>
      <title>patch to add :count=&gt;:words to validates_length_of</title>
      <updated-at type="datetime">2008-06-29T01:48:52+01:00</updated-at>
      <user-id type="integer">22313</user-id>
      <version type="integer">8</version>
      <user-name>David Lowenfels</user-name>
      <creator-name>David Lowenfels</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/422</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>44d0dbcedb9beb34d37ad13b6c673962210481a4</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-06-15T06:22:55+01:00</created-at>
      <filename>add-wordcount-to-validates_length_of.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">27492</id>
      <size type="integer">5319</size>
      <uploader-id type="integer">22313</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/27492/add-wordcount-to-validates_length_of.diff</url>
    </attachment>
  </attachments>
</ticket>
