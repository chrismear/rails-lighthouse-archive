<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-29T16:19:20+00:00</created-at>
  <creator-id type="integer">2292</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1819</number>
  <permalink>tabledefinitioncolumn-ignores-limit-for-integer-types</permalink>
  <priority type="integer">1109</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>2.2.2 activerecord limit schema</tag>
  <title>TableDefinition.column ignores :limit for integer types</title>
  <updated-at type="datetime">2009-08-09T15:21:50+01:00</updated-at>
  <user-id type="integer">7211</user-id>
  <version type="integer">6</version>
  <user-name>CancelProfileIsBroken</user-name>
  <creator-name>Carlos Paramio</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1819</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Given a migration like:

@@@
class CreateMyModel &lt; ActiveRecord::Migration
  def self.up
    create_table :my_models, :id =&gt; false do |t|
      t.column  :integer_test1, :integer, :limit =&gt; 20
      t.integer :integer_test2, :limit =&gt; 20
      t.string  :string_test1, :limit =&gt; 20
    end
  end
end
@@@

It generates a schema like:

@@@
+---------------+--------------+------+-----+---------+----------------+
| Field         | Type         | Null | Key | Default | Extra          |
+---------------+--------------+------+-----+---------+----------------+
| id            | int(11)      | NO   | PRI | NULL    | auto_increment | 
| integer_test1 | int(11)      | YES  |     | NULL    |                | 
| integer_test2 | int(11)      | YES  |     | NULL    |                | 
| string_test1  | varchar(20)  | YES  |     | NULL    |                | 
+---------------+--------------+------+-----+---------+----------------+
@@@

when the integer columns should be of type int(20). This happens with MySQL and SQLite, so I suspect it is a bug on the column method.</original-body>
  <latest-body>Given a migration like:

@@@
class CreateMyModel &lt; ActiveRecord::Migration
  def self.up
    create_table :my_models, :id =&gt; false do |t|
      t.column  :integer_test1, :integer, :limit =&gt; 20
      t.integer :integer_test2, :limit =&gt; 20
      t.string  :string_test1, :limit =&gt; 20
    end
  end
end
@@@

It generates a schema like:

@@@
+---------------+--------------+------+-----+---------+----------------+
| Field         | Type         | Null | Key | Default | Extra          |
+---------------+--------------+------+-----+---------+----------------+
| id            | int(11)      | NO   | PRI | NULL    | auto_increment | 
| integer_test1 | int(11)      | YES  |     | NULL    |                | 
| integer_test2 | int(11)      | YES  |     | NULL    |                | 
| string_test1  | varchar(20)  | YES  |     | NULL    |                | 
+---------------+--------------+------+-----+---------+----------------+
@@@

when the integer columns should be of type int(20). This happens with MySQL and SQLite, so I suspect it is a bug on the column method.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Given a migration like:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class CreateMyModel &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :my_models, :id =&amp;gt; false do |t|
      t.column  :integer_test1, :integer, :limit =&amp;gt; 20
      t.integer :integer_test2, :limit =&amp;gt; 20
      t.string  :string_test1, :limit =&amp;gt; 20
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It generates a schema like:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
+---------------+--------------+------+-----+---------+----------------+
| Field         | Type         | Null | Key | Default | Extra          |
+---------------+--------------+------+-----+---------+----------------+
| id            | int(11)      | NO   | PRI | NULL    | auto_increment | 
| integer_test1 | int(11)      | YES  |     | NULL    |                | 
| integer_test2 | int(11)      | YES  |     | NULL    |                | 
| string_test1  | varchar(20)  | YES  |     | NULL    |                | 
+---------------+--------------+------+-----+---------+----------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when the integer columns should be of type int(20). This happens
with MySQL and SQLite, so I suspect it is a bug on the column
method.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Given a migration like:

@@@
class CreateMyModel &lt; ActiveRecord::Migration
  def self.up
    create_table :my_models, :id =&gt; false do |t|
      t.column  :integer_test1, :integer, :limit =&gt; 20
      t.integer :integer_test2, :limit =&gt; 20
      t.string  :string_test1, :limit =&gt; 20
    end
  end
end
@@@

It generates a schema like:

@@@
+---------------+--------------+------+-----+---------+----------------+
| Field         | Type         | Null | Key | Default | Extra          |
+---------------+--------------+------+-----+---------+----------------+
| id            | int(11)      | NO   | PRI | NULL    | auto_increment | 
| integer_test1 | int(11)      | YES  |     | NULL    |                | 
| integer_test2 | int(11)      | YES  |     | NULL    |                | 
| string_test1  | varchar(20)  | YES  |     | NULL    |                | 
+---------------+--------------+------+-----+---------+----------------+
@@@

when the integer columns should be of type int(20). This happens with MySQL and SQLite, so I suspect it is a bug on the column method.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Given a migration like:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class CreateMyModel &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :my_models, :id =&amp;gt; false do |t|
      t.column  :integer_test1, :integer, :limit =&amp;gt; 20
      t.integer :integer_test2, :limit =&amp;gt; 20
      t.string  :string_test1, :limit =&amp;gt; 20
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It generates a schema like:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
+---------------+--------------+------+-----+---------+----------------+
| Field         | Type         | Null | Key | Default | Extra          |
+---------------+--------------+------+-----+---------+----------------+
| id            | int(11)      | NO   | PRI | NULL    | auto_increment | 
| integer_test1 | int(11)      | YES  |     | NULL    |                | 
| integer_test2 | int(11)      | YES  |     | NULL    |                | 
| string_test1  | varchar(20)  | YES  |     | NULL    |                | 
+---------------+--------------+------+-----+---------+----------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when the integer columns should be of type int(20). This happens
with MySQL and SQLite, so I suspect it is a bug on the column
method.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-29T16:19:20+00:00</created-at>
      <creator-id type="integer">2292</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1819</number>
      <permalink>tabledefinitioncolumn-ignores-limit-for-integer-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord limit schema</tag>
      <title>TableDefinition.column ignores :limit for integer types</title>
      <updated-at type="datetime">2009-01-29T16:19:24+00:00</updated-at>
      <user-id type="integer">2292</user-id>
      <version type="integer">1</version>
      <user-name>Carlos Paramio</user-name>
      <creator-name>Carlos Paramio</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1819</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I realized that this fails because there isn't any integer type on MySQL with a size of 20 bytes:

ActiveRecord::Base.connection.type_to_sql(:integer, 20)
ActiveRecord::ActiveRecordError: No integer type has byte size 20

Please close this ticket.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I realized that this fails because there isn't any integer type
on MySQL with a size of 20 bytes:&lt;/p&gt;
&lt;p&gt;ActiveRecord::Base.connection.type_to_sql(:integer, 20)
ActiveRecord::ActiveRecordError: No integer type has byte size
20&lt;/p&gt;
&lt;p&gt;Please close this ticket.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-29T16:43:27+00:00</created-at>
      <creator-id type="integer">2292</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1819</number>
      <permalink>tabledefinitioncolumn-ignores-limit-for-integer-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord limit schema</tag>
      <title>TableDefinition.column ignores :limit for integer types</title>
      <updated-at type="datetime">2009-01-29T16:43:28+00:00</updated-at>
      <user-id type="integer">2292</user-id>
      <version type="integer">2</version>
      <user-name>Carlos Paramio</user-name>
      <creator-name>Carlos Paramio</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1819</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-04T18:16:02+01:00</created-at>
      <creator-id type="integer">2292</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.2.2 activerecord limit schema
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1819</number>
      <permalink>tabledefinitioncolumn-ignores-limit-for-integer-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord bugmash limit schema</tag>
      <title>TableDefinition.column ignores :limit for integer types</title>
      <updated-at type="datetime">2009-08-04T18:16:05+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Carlos Paramio</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1819</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 for closing this ticket

ActiveRecord::Base.connection.type_to_sql(:integer, 20)
ActiveRecord::ActiveRecordError: No integer type has byte size 20
	from /Users/rajesh/src/property/trunk/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:535:in `type_to_sql'

but following work fine

&gt;&gt; ActiveRecord::Base.connection.type_to_sql(:integer, 4)
=&gt; &quot;int(11)&quot;
&gt;&gt; ActiveRecord::Base.connection.type_to_sql(:integer, 8)
=&gt; &quot;bigint&quot;</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for closing this ticket&lt;/p&gt;
&lt;p&gt;ActiveRecord::Base.connection.type_to_sql(:integer, 20)&lt;br&gt;
ActiveRecord::ActiveRecordError: No integer type has byte size
20&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from /Users/rajesh/src/property/trunk/vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:535:in `type_to_sql'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but following work fine&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ActiveRecord::Base.connection.type_to_sql(:integer, 4) =&amp;gt;
&quot;int(11)&quot; ActiveRecord::Base.connection.type_to_sql(:integer, 8)
=&amp;gt; &quot;bigint&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-08T21:12:50+01:00</created-at>
      <creator-id type="integer">2292</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1819</number>
      <permalink>tabledefinitioncolumn-ignores-limit-for-integer-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord bugmash limit schema</tag>
      <title>TableDefinition.column ignores :limit for integer types</title>
      <updated-at type="datetime">2009-08-08T21:12:52+01:00</updated-at>
      <user-id type="integer">64574</user-id>
      <version type="integer">4</version>
      <user-name>Rajesh</user-name>
      <creator-name>Carlos Paramio</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1819</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In mysql, I'm able to create a table with int(20):

@@@
mysql&gt; create table test(id int(20));
mysql&gt; show columns from test;
+-------+---------+------+-----+---------+-------+
| Field | Type    | Null | Key | Default | Extra |
+-------+---------+------+-----+---------+-------+
| id    | int(20) | YES  |     | NULL    |       |
+-------+---------+------+-----+---------+-------+
@@@

If I insert large values (like 9999999999999999999) they won't be saved.

@@@

mysql&gt; insert into test VALUES (9999999999999999999);
mysql&gt; select id from test;
+------------+
| id         |
+------------+
| 2147483647 |
+------------+
1 row in set (0.00 sec)

@@@

int(20) only does something if you use it in conjunction with ZEROFILL,
in which the mysql interactive tools will print out something like this:

@@@
mysql&gt; drop table test;
mysql&gt; create table test(id int(20) zerofill);
mysql&gt; insert into test VALUES (9999999999999999999);
mysql&gt; select id from test;
+----------------------+
| id                   |
+----------------------+
| 00000000004294967295 |
+----------------------+
@@@

Odd behaviour, but since it doesn't change the storage size, I'd say it's irrelevant for rails purpose. I say +1 for closing this ticket.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In mysql, I'm able to create a table with int(20):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mysql&amp;gt; create table test(id int(20));
mysql&amp;gt; show columns from test;
+-------+---------+------+-----+---------+-------+
| Field | Type    | Null | Key | Default | Extra |
+-------+---------+------+-----+---------+-------+
| id    | int(20) | YES  |     | NULL    |       |
+-------+---------+------+-----+---------+-------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If I insert large values (like 9999999999999999999) they won't
be saved.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
mysql&amp;gt; insert into test VALUES (9999999999999999999);
mysql&amp;gt; select id from test;
+------------+
| id         |
+------------+
| 2147483647 |
+------------+
1 row in set (0.00 sec)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;int(20) only does something if you use it in conjunction with
ZEROFILL,&lt;br&gt;
in which the mysql interactive tools will print out something like
this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mysql&amp;gt; drop table test;
mysql&amp;gt; create table test(id int(20) zerofill);
mysql&amp;gt; insert into test VALUES (9999999999999999999);
mysql&amp;gt; select id from test;
+----------------------+
| id                   |
+----------------------+
| 00000000004294967295 |
+----------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Odd behaviour, but since it doesn't change the storage size, I'd
say it's irrelevant for rails purpose. I say +1 for closing this
ticket.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-08T22:54:28+01:00</created-at>
      <creator-id type="integer">2292</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1819</number>
      <permalink>tabledefinitioncolumn-ignores-limit-for-integer-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord bugmash limit schema</tag>
      <title>TableDefinition.column ignores :limit for integer types</title>
      <updated-at type="datetime">2009-08-08T22:54:30+01:00</updated-at>
      <user-id type="integer">30376</user-id>
      <version type="integer">5</version>
      <user-name>Hugo Peixoto</user-name>
      <creator-name>Carlos Paramio</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1819</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Not worth changing Rails core unless we see some use case and patch that isn't mysql-specific.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not worth changing Rails core unless we see some use case and
patch that isn't mysql-specific.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-09T15:21:44+01:00</created-at>
      <creator-id type="integer">2292</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:tag: 2.2.2 activerecord bugmash limit schema
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1819</number>
      <permalink>tabledefinitioncolumn-ignores-limit-for-integer-types</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.2.2 activerecord limit schema</tag>
      <title>TableDefinition.column ignores :limit for integer types</title>
      <updated-at type="datetime">2009-08-09T15:21:50+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">6</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Carlos Paramio</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1819</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
