From 050aa637e0b29b386c0e7736696713370367cab5 Mon Sep 17 00:00:00 2001
From: Adam Milligan <amilligan@pivotallabs.com>
Date: Fri, 26 Dec 2008 23:44:26 -0800
Subject: [PATCH] Fixed order-dependent test failure in has_many_through_associations_test, caused by omitted requires; removed some dead code; fixed some grammar and spelling in comments.

---
 activerecord/lib/active_record/associations.rb     |    2 +-
 .../associations/association_proxy.rb              |    1 -
 .../associations/has_many_through_association.rb   |   15 +++++----------
 .../has_many_through_associations_test.rb          |    2 ++
 4 files changed, 8 insertions(+), 12 deletions(-)

diff --git a/activerecord/lib/active_record/associations.rb b/activerecord/lib/active_record/associations.rb
index 5a60b13..5020649 100755
--- a/activerecord/lib/active_record/associations.rb
+++ b/activerecord/lib/active_record/associations.rb
@@ -65,7 +65,7 @@ module ActiveRecord
 
   # See ActiveRecord::Associations::ClassMethods for documentation.
   module Associations # :nodoc:
-    # These classes will be loaded when associatoins are created.
+    # These classes will be loaded when associations are created.
     # So there is no need to eager load them.
     autoload :AssociationCollection, 'active_record/associations/association_collection'
     autoload :AssociationProxy, 'active_record/associations/association_proxy'
diff --git a/activerecord/lib/active_record/associations/association_proxy.rb b/activerecord/lib/active_record/associations/association_proxy.rb
index 59f1d3b..f8db4f2 100644
--- a/activerecord/lib/active_record/associations/association_proxy.rb
+++ b/activerecord/lib/active_record/associations/association_proxy.rb
@@ -48,7 +48,6 @@ module ActiveRecord
     class AssociationProxy #:nodoc:
       alias_method :proxy_respond_to?, :respond_to?
       alias_method :proxy_extend, :extend
-      delegate :to_param, :to => :proxy_target
       instance_methods.each { |m| undef_method m unless m =~ /(^__|^nil\?$|^send$|proxy_|^object_id$)/ }
 
       def initialize(owner, reflection)
diff --git a/activerecord/lib/active_record/associations/has_many_through_association.rb b/activerecord/lib/active_record/associations/has_many_through_association.rb
index 2eeeb28..c09cda3 100644
--- a/activerecord/lib/active_record/associations/has_many_through_association.rb
+++ b/activerecord/lib/active_record/associations/has_many_through_association.rb
@@ -23,8 +23,8 @@ module ActiveRecord
       end
 
       # Returns the size of the collection by executing a SELECT COUNT(*) query if the collection hasn't been loaded and
-      # calling collection.size if it has. If it's more likely than not that the collection does have a size larger than zero
-      # and you need to fetch that collection afterwards, it'll take one less SELECT query if you use length.
+      # calling collection.size if it has. If it's more likely than not that the collection does have a size larger than zero,
+      # and you need to fetch that collection afterwards, it'll take one fewer SELECT query if you use #length.
       def size
         return @owner.send(:read_attribute, cached_counter_attribute_name) if has_cached_counter?
         return @target.size if loaded?
@@ -47,14 +47,9 @@ module ActiveRecord
           options[:include] = @reflection.source_reflection.options[:include] if options[:include].nil?
         end
         
-        def insert_record(record, force=true)
-          if record.new_record?
-            if force
-              record.save!
-            else
-              return false unless record.save
-            end
-          end
+        def insert_record(record)
+          record.save! if record.new_record?
+
           through_reflection = @reflection.through_reflection
           klass = through_reflection.klass
           @owner.send(@reflection.through_reflection.name).proxy_target << klass.send(:with_scope, :create => construct_join_attributes(record)) { through_reflection.create_association! }
diff --git a/activerecord/test/cases/associations/has_many_through_associations_test.rb b/activerecord/test/cases/associations/has_many_through_associations_test.rb
index ad6a5d6..6cc3e2b 100644
--- a/activerecord/test/cases/associations/has_many_through_associations_test.rb
+++ b/activerecord/test/cases/associations/has_many_through_associations_test.rb
@@ -1,6 +1,8 @@
 require "cases/helper"
 require 'models/post'
 require 'models/person'
+require 'models/reference'
+require 'models/job'
 require 'models/reader'
 require 'models/comment'
 require 'models/tag'
-- 
1.6.0

