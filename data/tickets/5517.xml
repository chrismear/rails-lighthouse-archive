<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-31T23:58:25+01:00</created-at>
  <creator-id type="integer">58946</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5517</number>
  <permalink>activesupportmemoizable-flush_cache-is-very-slow</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activesupport memoizable patch</tag>
  <title>ActiveSupport::Memoizable flush_cache is very slow</title>
  <updated-at type="datetime">2011-02-02T18:06:51+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Jason Frey</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5517</url>
  <priority-name nil="true"></priority-name>
  <original-body>With one of my heftier models, I noticed that calling flush_cache or unmemoize_all was incredibly expensive.  In the model was a method that would run some code and then flush the memoized cache.  I had an array of 1000 objects on which I ran the method on each one and it ran for a long time.  When I removed the cache clearing, the method ran almost immediately.


Essentially, calling methods + private_methods + protected_methods and then looping over all of them with a regex is overly expensive, when we already know what the memoized methods are when they are defined.  By storing the known memoized methods, we can just loop over that much smaller array without a need for a regex.


Attached is a patch to speed up flush_cache and prime_cache (and memoize_all and unmemoize_all by extension).  It is also available at http://github.com/Fryguy/rails/commit/4d1a36fb952bb63858657f7269bad6d14f85791b


Below is a Benchmark example run to show you my timings of unmemoize_all, where v is an instance of my model.


Before patch:
    &gt;&gt; Benchmark.bmbm { |x| x.report { 100.times { v.unmemoize_all } } }
    Rehearsal ------------------------------------
       1.669000   0.015000   1.684000 (  1.705682)
    --------------------------- total: 1.684000sec
    
           user     system      total        real
       1.419000   0.063000   1.482000 (  1.520608)

After patch:
    &gt;&gt; Benchmark.bmbm { |x| x.report { 100.times { v.unmemoize_all } } }
    Rehearsal ------------------------------------
       0.031000   0.000000   0.031000 (  0.027010)
    --------------------------- total: 0.031000sec
    
           user     system      total        real
       0.000000   0.000000   0.000000 (  0.010004)</original-body>
  <latest-body>With one of my heftier models, I noticed that calling flush_cache or unmemoize_all was incredibly expensive.  In the model was a method that would run some code and then flush the memoized cache.  I had an array of 1000 objects on which I ran the method on each one and it ran for a long time.  When I removed the cache clearing, the method ran almost immediately.


Essentially, calling methods + private_methods + protected_methods and then looping over all of them with a regex is overly expensive, when we already know what the memoized methods are when they are defined.  By storing the known memoized methods, we can just loop over that much smaller array without a need for a regex.


Attached is a patch to speed up flush_cache and prime_cache (and memoize_all and unmemoize_all by extension).  It is also available at http://github.com/Fryguy/rails/commit/4d1a36fb952bb63858657f7269bad6d14f85791b


Below is a Benchmark example run to show you my timings of unmemoize_all, where v is an instance of my model.


Before patch:
    &gt;&gt; Benchmark.bmbm { |x| x.report { 100.times { v.unmemoize_all } } }
    Rehearsal ------------------------------------
       1.669000   0.015000   1.684000 (  1.705682)
    --------------------------- total: 1.684000sec
    
           user     system      total        real
       1.419000   0.063000   1.482000 (  1.520608)

After patch:
    &gt;&gt; Benchmark.bmbm { |x| x.report { 100.times { v.unmemoize_all } } }
    Rehearsal ------------------------------------
       0.031000   0.000000   0.031000 (  0.027010)
    --------------------------- total: 0.031000sec
    
           user     system      total        real
       0.000000   0.000000   0.000000 (  0.010004)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;With one of my heftier models, I noticed that calling
flush_cache or unmemoize_all was incredibly expensive. In the model
was a method that would run some code and then flush the memoized
cache. I had an array of 1000 objects on which I ran the method on
each one and it ran for a long time. When I removed the cache
clearing, the method ran almost immediately.&lt;/p&gt;
&lt;p&gt;Essentially, calling methods + private_methods +
protected_methods and then looping over all of them with a regex is
overly expensive, when we already know what the memoized methods
are when they are defined. By storing the known memoized methods,
we can just loop over that much smaller array without a need for a
regex.&lt;/p&gt;
&lt;p&gt;Attached is a patch to speed up flush_cache and prime_cache (and
memoize_all and unmemoize_all by extension). It is also available
at &lt;a href=
&quot;http://github.com/Fryguy/rails/commit/4d1a36fb952bb63858657f7269bad6d14f85791b&quot;&gt;
http://github.com/Fryguy/rails/commit/4d1a36fb952bb63858657f7269bad...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Below is a Benchmark example run to show you my timings of
unmemoize_all, where v is an instance of my model.&lt;/p&gt;
&lt;p&gt;Before patch:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Benchmark.bmbm { |x| x.report { 100.times { v.unmemoize_all } } }
Rehearsal ------------------------------------
   1.669000   0.015000   1.684000 (  1.705682)
--------------------------- total: 1.684000sec

       user     system      total        real
   1.419000   0.063000   1.482000 (  1.520608)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After patch:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Benchmark.bmbm { |x| x.report { 100.times { v.unmemoize_all } } }
Rehearsal ------------------------------------
   0.031000   0.000000   0.031000 (  0.027010)
--------------------------- total: 0.031000sec

       user     system      total        real
   0.000000   0.000000   0.000000 (  0.010004)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>With one of my heftier models, I noticed that calling flush_cache or unmemoize_all was incredibly expensive.  In the model was a method that would run some code and then flush the memoized cache.  I had an array of 1000 objects on which I ran the method on each one and it ran for a long time.  When I removed the cache clearing, the method ran almost immediately.


Essentially, calling methods + private_methods + protected_methods and then looping over all of them with a regex is overly expensive, when we already know what the memoized methods are when they are defined.  By storing the known memoized methods, we can just loop over that much smaller array without a need for a regex.


Attached is a patch to speed up flush_cache and prime_cache (and memoize_all and unmemoize_all by extension).  It is also available at http://github.com/Fryguy/rails/commit/4d1a36fb952bb63858657f7269bad6d14f85791b


Below is a Benchmark example run to show you my timings of unmemoize_all, where v is an instance of my model.


Before patch:
    &gt;&gt; Benchmark.bmbm { |x| x.report { 100.times { v.unmemoize_all } } }
    Rehearsal ------------------------------------
       1.669000   0.015000   1.684000 (  1.705682)
    --------------------------- total: 1.684000sec
    
           user     system      total        real
       1.419000   0.063000   1.482000 (  1.520608)

After patch:
    &gt;&gt; Benchmark.bmbm { |x| x.report { 100.times { v.unmemoize_all } } }
    Rehearsal ------------------------------------
       0.031000   0.000000   0.031000 (  0.027010)
    --------------------------- total: 0.031000sec
    
           user     system      total        real
       0.000000   0.000000   0.000000 (  0.010004)</body>
      <body-html>&lt;div&gt;&lt;p&gt;With one of my heftier models, I noticed that calling
flush_cache or unmemoize_all was incredibly expensive. In the model
was a method that would run some code and then flush the memoized
cache. I had an array of 1000 objects on which I ran the method on
each one and it ran for a long time. When I removed the cache
clearing, the method ran almost immediately.&lt;/p&gt;
&lt;p&gt;Essentially, calling methods + private_methods +
protected_methods and then looping over all of them with a regex is
overly expensive, when we already know what the memoized methods
are when they are defined. By storing the known memoized methods,
we can just loop over that much smaller array without a need for a
regex.&lt;/p&gt;
&lt;p&gt;Attached is a patch to speed up flush_cache and prime_cache (and
memoize_all and unmemoize_all by extension). It is also available
at &lt;a href=
&quot;http://github.com/Fryguy/rails/commit/4d1a36fb952bb63858657f7269bad6d14f85791b&quot;&gt;
http://github.com/Fryguy/rails/commit/4d1a36fb952bb63858657f7269bad...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Below is a Benchmark example run to show you my timings of
unmemoize_all, where v is an instance of my model.&lt;/p&gt;
&lt;p&gt;Before patch:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Benchmark.bmbm { |x| x.report { 100.times { v.unmemoize_all } } }
Rehearsal ------------------------------------
   1.669000   0.015000   1.684000 (  1.705682)
--------------------------- total: 1.684000sec

       user     system      total        real
   1.419000   0.063000   1.482000 (  1.520608)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After patch:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Benchmark.bmbm { |x| x.report { 100.times { v.unmemoize_all } } }
Rehearsal ------------------------------------
   0.031000   0.000000   0.031000 (  0.027010)
--------------------------- total: 0.031000sec

       user     system      total        real
   0.000000   0.000000   0.000000 (  0.010004)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-31T23:58:25+01:00</created-at>
      <creator-id type="integer">58946</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5517</number>
      <permalink>activesupportmemoizable-flush_cache-is-very-slow</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport memoizable</tag>
      <title>ActiveSupport::Memoizable flush_cache is very slow</title>
      <updated-at type="datetime">2010-08-31T23:58:27+01:00</updated-at>
      <user-id type="integer">58946</user-id>
      <version type="integer">1</version>
      <user-name>Jason Frey</user-name>
      <creator-name>Jason Frey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5517</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>After playing around with this patch locally for while, it seems there are some issues with it.  Specifically, it doesn't handle methods that are included (even though somehow it passed the memoizable_test.rb).  I made some changes locally to maybe try to get the methods from self.included_modules, but then I ran into issues with methods that are extended.

So, ignore the patch above, but the issue still stands.  flush_cache is really slow since it has to call methods + private_methods + instanced_methods every time.  My idea was to store the methods as an Array, which I think it still workable, but I haven't been able to do it just yet.</body>
      <body-html>&lt;div&gt;&lt;p&gt;After playing around with this patch locally for while, it seems
there are some issues with it. Specifically, it doesn't handle
methods that are included (even though somehow it passed the
memoizable_test.rb). I made some changes locally to maybe try to
get the methods from self.included_modules, but then I ran into
issues with methods that are extended.&lt;/p&gt;
&lt;p&gt;So, ignore the patch above, but the issue still stands.
flush_cache is really slow since it has to call methods +
private_methods + instanced_methods every time. My idea was to
store the methods as an Array, which I think it still workable, but
I haven't been able to do it just yet.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-02T23:11:22+01:00</created-at>
      <creator-id type="integer">58946</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5517</number>
      <permalink>activesupportmemoizable-flush_cache-is-very-slow</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport memoizable</tag>
      <title>ActiveSupport::Memoizable flush_cache is very slow</title>
      <updated-at type="datetime">2010-09-02T23:11:24+01:00</updated-at>
      <user-id type="integer">58946</user-id>
      <version type="integer">2</version>
      <user-name>Jason Frey</user-name>
      <creator-name>Jason Frey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5517</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Ok, round 2.

After more playing around with this, I realized the issue is not with calling methods + private_methods + protected_methods directly, but instead they are being called IN A LOOP of the parameters passed in.  So, if you pass, for example, 20 method names to flush cache, it will call methods + private_methods + protected_methods 20 times.  This is why I was seeing such horrible performance.  flush_cache by itself wasn't the problem, it was flush_cache with parameters...the more the worse.

Attached is a patch that avoids that calling in a loop with much better results, plus all tests passing.  Below is new benchmarks (MEMOIZED_METHODS is an array of 20 symbols):

Before patch:
    &gt;&gt; Benchmark.realtime { 100.times { v.unmemoize_all }}
    =&gt; 1.62846398353577
    &gt;&gt; Benchmark.realtime { 100.times { v.flush_cache *MEMOIZED_METHODS }}
    =&gt; 40.7326259613037

After patch:
    &gt;&gt; Benchmark.realtime { 100.times { v.unmemoize_all }}
    =&gt; 0.400160074234009
    &gt;&gt; Benchmark.realtime { 100.times { v.flush_cache *MEMOIZED_METHODS }}
    =&gt; 0.0130050182342529</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, round 2.&lt;/p&gt;
&lt;p&gt;After more playing around with this, I realized the issue is not
with calling methods + private_methods + protected_methods
directly, but instead they are being called IN A LOOP of the
parameters passed in. So, if you pass, for example, 20 method names
to flush cache, it will call methods + private_methods +
protected_methods 20 times. This is why I was seeing such horrible
performance. flush_cache by itself wasn't the problem, it was
flush_cache with parameters...the more the worse.&lt;/p&gt;
&lt;p&gt;Attached is a patch that avoids that calling in a loop with much
better results, plus all tests passing. Below is new benchmarks
(MEMOIZED_METHODS is an array of 20 symbols):&lt;/p&gt;
&lt;p&gt;Before patch:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Benchmark.realtime { 100.times { v.unmemoize_all }}
=&amp;gt; 1.62846398353577
&amp;gt;&amp;gt; Benchmark.realtime { 100.times { v.flush_cache *MEMOIZED_METHODS }}
=&amp;gt; 40.7326259613037&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After patch:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; Benchmark.realtime { 100.times { v.unmemoize_all }}
=&amp;gt; 0.400160074234009
&amp;gt;&amp;gt; Benchmark.realtime { 100.times { v.flush_cache *MEMOIZED_METHODS }}
=&amp;gt; 0.0130050182342529&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-03T15:01:37+01:00</created-at>
      <creator-id type="integer">58946</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activesupport memoizable
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5517</number>
      <permalink>activesupportmemoizable-flush_cache-is-very-slow</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport memoizable patch</tag>
      <title>ActiveSupport::Memoizable flush_cache is very slow</title>
      <updated-at type="datetime">2010-09-03T15:01:38+01:00</updated-at>
      <user-id type="integer">58946</user-id>
      <version type="integer">3</version>
      <user-name>Jason Frey</user-name>
      <creator-name>Jason Frey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5517</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Patch also available at http://github.com/Fryguy/rails/commit/9f223d7fc1e0374d86b3017eea9150ace47b3806</body>
      <body-html>&lt;div&gt;&lt;p&gt;Patch also available at &lt;a href=
&quot;http://github.com/Fryguy/rails/commit/9f223d7fc1e0374d86b3017eea9150ace47b3806&quot;&gt;
http://github.com/Fryguy/rails/commit/9f223d7fc1e0374d86b3017eea915...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-03T15:03:01+01:00</created-at>
      <creator-id type="integer">58946</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5517</number>
      <permalink>activesupportmemoizable-flush_cache-is-very-slow</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport memoizable patch</tag>
      <title>ActiveSupport::Memoizable flush_cache is very slow</title>
      <updated-at type="datetime">2010-09-03T15:03:02+01:00</updated-at>
      <user-id type="integer">58946</user-id>
      <version type="integer">4</version>
      <user-name>Jason Frey</user-name>
      <creator-name>Jason Frey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5517</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:48:57+00:00</created-at>
      <creator-id type="integer">58946</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5517</number>
      <permalink>activesupportmemoizable-flush_cache-is-very-slow</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport memoizable patch</tag>
      <title>ActiveSupport::Memoizable flush_cache is very slow</title>
      <updated-at type="datetime">2011-02-02T18:06:48+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jason Frey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5517</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:48:58+00:00</created-at>
      <creator-id type="integer">58946</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5517</number>
      <permalink>activesupportmemoizable-flush_cache-is-very-slow</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activesupport memoizable patch</tag>
      <title>ActiveSupport::Memoizable flush_cache is very slow</title>
      <updated-at type="datetime">2011-02-02T18:06:51+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jason Frey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5517</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2bca9e496191b0f3bafa3d95943058cd58119289</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-08-31T23:58:25+01:00</created-at>
      <filename>0001-improved-performance-of-flush_cache-and-prime_cache.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">654067</id>
      <size type="integer">3498</size>
      <uploader-id type="integer">58946</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/654067/0001-improved-performance-of-flush_cache-and-prime_cache.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>3c575346e96961edeb4287b613ac5138e4cc46b2</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-09-03T15:01:37+01:00</created-at>
      <filename>0001-improved-performance-of-flush_cache-and-prime_cache.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">658276</id>
      <size type="integer">2475</size>
      <uploader-id type="integer">58946</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/658276/0001-improved-performance-of-flush_cache-and-prime_cache.patch</url>
    </attachment>
  </attachments>
</ticket>
