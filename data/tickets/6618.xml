<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-24T19:42:56+00:00</created-at>
  <creator-id type="integer">22106</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6618</number>
  <permalink>inconsistent-behavior-of-collectionnew-vs-collectionbuild</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>associations has_many has_many_through</tag>
  <title>Inconsistent behavior of collection.new vs collection.build</title>
  <updated-at type="datetime">2011-03-24T19:51:12+00:00</updated-at>
  <user-id type="integer">22106</user-id>
  <version type="integer">2</version>
  <user-name>Szymon Nowak</user-name>
  <creator-name>Szymon Nowak</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6618</url>
  <priority-name nil="true"></priority-name>
  <original-body>I'm not sure how exactly collection.new should behave, as it's not really documented (at least not here: http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html), but it's behavior is inconsistent:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, :through =&gt; :friendships
end

class Friendship &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :friend, :class_name =&gt; &quot;User&quot;
end

user.friendships.new
user.friendships # =&gt; []
user.friendships.build
user.friendships # =&gt; [#&lt;Friendship id: nil, user_id: 1, friend_id: nil&gt;]

# but
user.friends # =&gt; []
user.friends.new
user.friends # =&gt; [#&lt;User id: nil...&gt;]
@@@

I'm not sure how it should behave, but it would be great if it always behaved like for non-through associations. It works like this in Rails 3.0.5 and master.</original-body>
  <latest-body>I'm not sure how exactly collection.new should behave, as it's not really documented (at least not here: http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html), but it's behavior is inconsistent:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, :through =&gt; :friendships
end

class Friendship &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :friend, :class_name =&gt; &quot;User&quot;
end

user.friendships.new
user.friendships # =&gt; []
user.friendships.build
user.friendships # =&gt; [#&lt;Friendship id: nil, user_id: 1, friend_id: nil&gt;]

# but
user.friends # =&gt; []
user.friends.new
user.friends # =&gt; [#&lt;User id: nil...&gt;]
@@@

I'm not sure how it should behave, but it would be great if it always behaved like for non-through associations. It works like this in Rails 3.0.5 and master.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm not sure how exactly collection.new should behave, as it's
not really documented (at least not here: &lt;a href=
&quot;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html)&quot;&gt;
http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassM...&lt;/a&gt;,
but it's behavior is inconsistent:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, :through =&amp;gt; :friendships
end

class Friendship &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :friend, :class_name =&amp;gt; &quot;User&quot;
end

user.friendships.new
user.friendships # =&amp;gt; []
user.friendships.build
user.friendships # =&amp;gt; [#&amp;lt;Friendship id: nil, user_id: 1, friend_id: nil&amp;gt;]

# but
user.friends # =&amp;gt; []
user.friends.new
user.friends # =&amp;gt; [#&amp;lt;User id: nil...&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm not sure how it should behave, but it would be great if it
always behaved like for non-through associations. It works like
this in Rails 3.0.5 and master.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm not sure how exactly collection.new should behave, as it's not really documented (at least not here: http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html), but it's behavior is inconsistent:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, :through =&gt; :friendships
end

class Friendship &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :friend, :class_name =&gt; &quot;User&quot;
end

user.friendships.new
user.friendships # =&gt; []
user.friendships.build
user.friendships # =&gt; [#&lt;Friendship id: nil, user_id: 1, friend_id: nil&gt;]

# but
user.friends # =&gt; []
user.friends.new
user.friends # =&gt; [#&lt;User id: nil...&gt;]
@@@

I'm not sure how it should behave, but it would be great if it always behaved like for non-through associations. It works like this in Rails 3.0.5 and master.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not sure how exactly collection.new should behave, as it's
not really documented (at least not here: &lt;a href=
&quot;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html)&quot;&gt;
http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassM...&lt;/a&gt;,
but it's behavior is inconsistent:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, :through =&amp;gt; :friendships
end

class Friendship &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :friend, :class_name =&amp;gt; &quot;User&quot;
end

user.friendships.new
user.friendships # =&amp;gt; []
user.friendships.build
user.friendships # =&amp;gt; [#&amp;lt;Friendship id: nil, user_id: 1, friend_id: nil&amp;gt;]

# but
user.friends # =&amp;gt; []
user.friends.new
user.friends # =&amp;gt; [#&amp;lt;User id: nil...&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm not sure how it should behave, but it would be great if it
always behaved like for non-through associations. It works like
this in Rails 3.0.5 and master.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-24T19:42:56+00:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6618</number>
      <permalink>inconsistent-behavior-of-collectionnew-vs-collectionbuild</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many has_many_through</tag>
      <title>Inconsistent behavior of collection.new vs collection.build</title>
      <updated-at type="datetime">2011-03-24T19:42:58+00:00</updated-at>
      <user-id type="integer">22106</user-id>
      <version type="integer">1</version>
      <user-name>Szymon Nowak</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6618</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Turns out that `HasManyThroughAssociation` has a simple alias: ` alias_method :new, :build`, which `HasManyAssociation` doesn't have. Not sure if it's on purpose.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Turns out that &lt;code&gt;HasManyThroughAssociation&lt;/code&gt; has a
simple alias: &lt;code&gt;alias_method :new, :build&lt;/code&gt;, which
&lt;code&gt;HasManyAssociation&lt;/code&gt; doesn't have. Not sure if it's on
purpose.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-24T19:51:11+00:00</created-at>
      <creator-id type="integer">22106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6618</number>
      <permalink>inconsistent-behavior-of-collectionnew-vs-collectionbuild</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations has_many has_many_through</tag>
      <title>Inconsistent behavior of collection.new vs collection.build</title>
      <updated-at type="datetime">2011-03-24T19:51:12+00:00</updated-at>
      <user-id type="integer">22106</user-id>
      <version type="integer">2</version>
      <user-name>Szymon Nowak</user-name>
      <creator-name>Szymon Nowak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6618</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
