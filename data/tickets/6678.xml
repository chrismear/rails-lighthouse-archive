<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-06T10:33:38+01:00</created-at>
  <creator-id type="integer">72560</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6678</number>
  <permalink>has_many-through-with-uniq-gives-wrong-count-if-condition-given</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>&quot;active record&quot; edge</tag>
  <title>has_many through with uniq gives wrong count if condition given</title>
  <updated-at type="datetime">2011-04-06T10:42:40+01:00</updated-at>
  <user-id type="integer">72560</user-id>
  <version type="integer">3</version>
  <user-name>artemave</user-name>
  <creator-name>artemave</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6678</url>
  <priority-name nil="true"></priority-name>
  <original-body>Affects rails 3, including current master.

Here is a sample model setup:

    class Post &lt; ActiveRecord::Base  
      has_many :comments
    end

    class Comment &lt; ActiveRecord::Base  
      belongs_to :post
      belongs_to :user
    end

    class User &lt; ActiveRecord::Base
      has_many :comments
      has_many :commented_posts, through: :comments, source: :post, uniq: true
    end

Now the following works correctly:

    ruby-1.9.2-p0 &gt; user.commented_posts.count
      SQL (0.2ms)  SELECT COUNT(DISTINCT &quot;posts&quot;.id) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1))
    =&gt; 1

But adding condition makes active record 'forget' about `uniq: true` bit:

    ruby-1.9.2-p0 &gt; user.commented_posts.where(&quot;posts.id != 42&quot;).count
      SQL (0.2ms)  SELECT COUNT(*) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1)) AND (posts.id != 42)
    =&gt; 2

but only when count - `all` works as expected:

    ruby-1.9.2-p0 &gt; user.commented_posts.where(&quot;posts.id != 42&quot;).all
      Post Load (0.3ms)  SELECT DISTINCT &quot;posts&quot;.* FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1)) AND (posts.id != 42)
    =&gt; [#&lt;Post id: 1, created_at: &quot;2011-03-07 12:17:30&quot;, updated_at: &quot;2011-03-07 12:17:30&quot;&gt;]</original-body>
  <latest-body>Affects rails 3, including current master.

Here is a sample model setup:

    class Post &lt; ActiveRecord::Base  
      has_many :comments
    end

    class Comment &lt; ActiveRecord::Base  
      belongs_to :post
      belongs_to :user
    end

    class User &lt; ActiveRecord::Base
      has_many :comments
      has_many :commented_posts, through: :comments, source: :post, uniq: true
    end

Now the following works correctly:

    ruby-1.9.2-p0 &gt; user.commented_posts.count
      SQL (0.2ms)  SELECT COUNT(DISTINCT &quot;posts&quot;.id) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1))
    =&gt; 1

But adding condition makes active record 'forget' about `uniq: true` bit:

    ruby-1.9.2-p0 &gt; user.commented_posts.where(&quot;posts.id != 42&quot;).count
      SQL (0.2ms)  SELECT COUNT(*) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1)) AND (posts.id != 42)
    =&gt; 2

but only when count - `all` works as expected:

    ruby-1.9.2-p0 &gt; user.commented_posts.where(&quot;posts.id != 42&quot;).all
      Post Load (0.3ms)  SELECT DISTINCT &quot;posts&quot;.* FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1)) AND (posts.id != 42)
    =&gt; [#&lt;Post id: 1, created_at: &quot;2011-03-07 12:17:30&quot;, updated_at: &quot;2011-03-07 12:17:30&quot;&gt;]</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Affects rails 3, including current master.&lt;/p&gt;
&lt;p&gt;Here is a sample model setup:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Post &amp;lt; ActiveRecord::Base  
  has_many :comments
end

class Comment &amp;lt; ActiveRecord::Base  
  belongs_to :post
  belongs_to :user
end

class User &amp;lt; ActiveRecord::Base
  has_many :comments
  has_many :commented_posts, through: :comments, source: :post, uniq: true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now the following works correctly:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.9.2-p0 &amp;gt; user.commented_posts.count
  SQL (0.2ms)  SELECT COUNT(DISTINCT &quot;posts&quot;.id) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1))
=&amp;gt; 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But adding condition makes active record 'forget' about
&lt;code&gt;uniq: true&lt;/code&gt; bit:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.9.2-p0 &amp;gt; user.commented_posts.where(&quot;posts.id != 42&quot;).count
  SQL (0.2ms)  SELECT COUNT(*) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1)) AND (posts.id != 42)
=&amp;gt; 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but only when count - &lt;code&gt;all&lt;/code&gt; works as expected:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.9.2-p0 &amp;gt; user.commented_posts.where(&quot;posts.id != 42&quot;).all
  Post Load (0.3ms)  SELECT DISTINCT &quot;posts&quot;.* FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1)) AND (posts.id != 42)
=&amp;gt; [#&amp;lt;Post id: 1, created_at: &quot;2011-03-07 12:17:30&quot;, updated_at: &quot;2011-03-07 12:17:30&quot;&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Affects rails 3, including current master.

Here is a sample model setup:

    class Post &lt; ActiveRecord::Base  
      has_many :comments
    end

    class Comment &lt; ActiveRecord::Base  
      belongs_to :post
      belongs_to :user
    end

    class User &lt; ActiveRecord::Base
      has_many :comments
      has_many :commented_posts, through: :comments, source: :post, uniq: true
    end

Now the following works correctly:

    ruby-1.9.2-p0 &gt; user.commented_posts.count
      SQL (0.2ms)  SELECT COUNT(DISTINCT &quot;posts&quot;.id) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1))
    =&gt; 1

But adding condition makes active record 'forget' about `uniq: true` bit:

    ruby-1.9.2-p0 &gt; user.commented_posts.where(&quot;posts.id != 42&quot;).count
      SQL (0.2ms)  SELECT COUNT(*) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1)) AND (posts.id != 42)
    =&gt; 2

but only when count - `all` works as expected:

    ruby-1.9.2-p0 &gt; user.commented_posts.where(&quot;posts.id != 42&quot;).all
      Post Load (0.3ms)  SELECT DISTINCT &quot;posts&quot;.* FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1)) AND (posts.id != 42)
    =&gt; [#&lt;Post id: 1, created_at: &quot;2011-03-07 12:17:30&quot;, updated_at: &quot;2011-03-07 12:17:30&quot;&gt;]</body>
      <body-html>&lt;div&gt;&lt;p&gt;Affects rails 3, including current master.&lt;/p&gt;
&lt;p&gt;Here is a sample model setup:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Post &amp;lt; ActiveRecord::Base  
  has_many :comments
end

class Comment &amp;lt; ActiveRecord::Base  
  belongs_to :post
  belongs_to :user
end

class User &amp;lt; ActiveRecord::Base
  has_many :comments
  has_many :commented_posts, through: :comments, source: :post, uniq: true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now the following works correctly:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.9.2-p0 &amp;gt; user.commented_posts.count
  SQL (0.2ms)  SELECT COUNT(DISTINCT &quot;posts&quot;.id) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1))
=&amp;gt; 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But adding condition makes active record 'forget' about
&lt;code&gt;uniq: true&lt;/code&gt; bit:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.9.2-p0 &amp;gt; user.commented_posts.where(&quot;posts.id != 42&quot;).count
  SQL (0.2ms)  SELECT COUNT(*) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1)) AND (posts.id != 42)
=&amp;gt; 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but only when count - &lt;code&gt;all&lt;/code&gt; works as expected:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.9.2-p0 &amp;gt; user.commented_posts.where(&quot;posts.id != 42&quot;).all
  Post Load (0.3ms)  SELECT DISTINCT &quot;posts&quot;.* FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;posts&quot;.id = &quot;comments&quot;.post_id WHERE ((&quot;comments&quot;.user_id = 1)) AND (posts.id != 42)
=&amp;gt; [#&amp;lt;Post id: 1, created_at: &quot;2011-03-07 12:17:30&quot;, updated_at: &quot;2011-03-07 12:17:30&quot;&amp;gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-06T10:33:38+01:00</created-at>
      <creator-id type="integer">72560</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6678</number>
      <permalink>has_many-through-with-uniq-gives-wrong-count-if-condition-given</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;active record&quot;</tag>
      <title>has_many through with uniq gives wrong count if condition given</title>
      <updated-at type="datetime">2011-04-06T10:33:39+01:00</updated-at>
      <user-id type="integer">72560</user-id>
      <version type="integer">1</version>
      <user-name>artemave</user-name>
      <creator-name>artemave</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6678</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Proposed fix: https://github.com/artemave/rails/commits/has_many_through_uniq_fix/</body>
      <body-html>&lt;div&gt;&lt;p&gt;Proposed fix: &lt;a href=
&quot;https://github.com/artemave/rails/commits/has_many_through_uniq_fix/&quot;&gt;
https://github.com/artemave/rails/commits/has_many_through_uniq_fix/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-06T10:38:29+01:00</created-at>
      <creator-id type="integer">72560</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6678</number>
      <permalink>has_many-through-with-uniq-gives-wrong-count-if-condition-given</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;active record&quot;</tag>
      <title>has_many through with uniq gives wrong count if condition given</title>
      <updated-at type="datetime">2011-04-06T10:38:31+01:00</updated-at>
      <user-id type="integer">72560</user-id>
      <version type="integer">2</version>
      <user-name>artemave</user-name>
      <creator-name>artemave</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6678</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-06T10:42:38+01:00</created-at>
      <creator-id type="integer">72560</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;active record\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6678</number>
      <permalink>has_many-through-with-uniq-gives-wrong-count-if-condition-given</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;active record&quot; edge</tag>
      <title>has_many through with uniq gives wrong count if condition given</title>
      <updated-at type="datetime">2011-04-06T10:42:40+01:00</updated-at>
      <user-id type="integer">72560</user-id>
      <version type="integer">3</version>
      <user-name>artemave</user-name>
      <creator-name>artemave</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6678</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
