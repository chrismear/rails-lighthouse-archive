<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-04-30T20:51:22+01:00</created-at>
  <creator-id type="integer">24325</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4513</number>
  <permalink>associationproxy-undef-methods-call-on-symbol-in-ruby-19</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>association_proxy patch</tag>
  <title>AssociationProxy undef methods call =~ on symbol in Ruby 1.9</title>
  <updated-at type="datetime">2010-05-05T18:56:41+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Ernie Miller</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4513</url>
  <priority-name>Low</priority-name>
  <original-body>Not sure this can technically count as a bug, since on a stock Ruby 1.9.x the behavior is the same as on 1.8.x, but due to an obscure bug that showed up at http://github.com/ernie/meta_where/issues#issue/1 I tracked down something interesting in AssociationProxy. Since Ruby 1.9 returns symbols in response to Object#methods instead of strings, association_proxy.rb is calling regexps on symbols while undefining methods.

The default behavior on 1.9 is to cast a symbol to string before comparing via regexp, so this issue is masked unless you attempt to do something crazy, like, oh, say, defining a new Symbol#=~, in which case it causes the association proxy to fail to mask the class of an association to be Array, then cascades to the problem outlined in the above github ticket, where the check for association.is_a?(Array) fails in form_helper.rb (fields_for_with_nested_attributes).

A patch is attached. If a test is warranted on this one just let me know and I'm sure I can come up with something. :)</original-body>
  <latest-body>Not sure this can technically count as a bug, since on a stock Ruby 1.9.x the behavior is the same as on 1.8.x, but due to an obscure bug that showed up at http://github.com/ernie/meta_where/issues#issue/1 I tracked down something interesting in AssociationProxy. Since Ruby 1.9 returns symbols in response to Object#methods instead of strings, association_proxy.rb is calling regexps on symbols while undefining methods.

The default behavior on 1.9 is to cast a symbol to string before comparing via regexp, so this issue is masked unless you attempt to do something crazy, like, oh, say, defining a new Symbol#=~, in which case it causes the association proxy to fail to mask the class of an association to be Array, then cascades to the problem outlined in the above github ticket, where the check for association.is_a?(Array) fails in form_helper.rb (fields_for_with_nested_attributes).

A patch is attached. If a test is warranted on this one just let me know and I'm sure I can come up with something. :)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Not sure this can technically count as a bug, since on a stock
Ruby 1.9.x the behavior is the same as on 1.8.x, but due to an
obscure bug that showed up at &lt;a href=
&quot;http://github.com/ernie/meta_where/issues#issue/1&quot;&gt;http://github.com/ernie/meta_where/issues#issue/1&lt;/a&gt;
I tracked down something interesting in AssociationProxy. Since
Ruby 1.9 returns symbols in response to Object#methods instead of
strings, association_proxy.rb is calling regexps on symbols while
undefining methods.&lt;/p&gt;
&lt;p&gt;The default behavior on 1.9 is to cast a symbol to string before
comparing via regexp, so this issue is masked unless you attempt to
do something crazy, like, oh, say, defining a new Symbol#=~, in
which case it causes the association proxy to fail to mask the
class of an association to be Array, then cascades to the problem
outlined in the above github ticket, where the check for
association.is_a?(Array) fails in form_helper.rb
(fields_for_with_nested_attributes).&lt;/p&gt;
&lt;p&gt;A patch is attached. If a test is warranted on this one just let
me know and I'm sure I can come up with something. :)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Not sure this can technically count as a bug, since on a stock Ruby 1.9.x the behavior is the same as on 1.8.x, but due to an obscure bug that showed up at http://github.com/ernie/meta_where/issues#issue/1 I tracked down something interesting in AssociationProxy. Since Ruby 1.9 returns symbols in response to Object#methods instead of strings, association_proxy.rb is calling regexps on symbols while undefining methods.

The default behavior on 1.9 is to cast a symbol to string before comparing via regexp, so this issue is masked unless you attempt to do something crazy, like, oh, say, defining a new Symbol#=~, in which case it causes the association proxy to fail to mask the class of an association to be Array, then cascades to the problem outlined in the above github ticket, where the check for association.is_a?(Array) fails in form_helper.rb (fields_for_with_nested_attributes).

A patch is attached. If a test is warranted on this one just let me know and I'm sure I can come up with something. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not sure this can technically count as a bug, since on a stock
Ruby 1.9.x the behavior is the same as on 1.8.x, but due to an
obscure bug that showed up at &lt;a href=
&quot;http://github.com/ernie/meta_where/issues#issue/1&quot;&gt;http://github.com/ernie/meta_where/issues#issue/1&lt;/a&gt;
I tracked down something interesting in AssociationProxy. Since
Ruby 1.9 returns symbols in response to Object#methods instead of
strings, association_proxy.rb is calling regexps on symbols while
undefining methods.&lt;/p&gt;
&lt;p&gt;The default behavior on 1.9 is to cast a symbol to string before
comparing via regexp, so this issue is masked unless you attempt to
do something crazy, like, oh, say, defining a new Symbol#=~, in
which case it causes the association proxy to fail to mask the
class of an association to be Array, then cascades to the problem
outlined in the above github ticket, where the check for
association.is_a?(Array) fails in form_helper.rb
(fields_for_with_nested_attributes).&lt;/p&gt;
&lt;p&gt;A patch is attached. If a test is warranted on this one just let
me know and I'm sure I can come up with something. :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-30T20:51:22+01:00</created-at>
      <creator-id type="integer">24325</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4513</number>
      <permalink>associationproxy-undef-methods-call-on-symbol-in-ruby-19</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>association_proxy patch</tag>
      <title>AssociationProxy undef methods call =~ on symbol in Ruby 1.9</title>
      <updated-at type="datetime">2010-04-30T20:51:29+01:00</updated-at>
      <user-id type="integer">24325</user-id>
      <version type="integer">1</version>
      <user-name>Ernie Miller</user-name>
      <creator-name>Ernie Miller</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4513</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Resolved in http://github.com/rails/rails/commit/5be49884b5947d4624bdaaf9cf2629ca4dd73567</body>
      <body-html>&lt;div&gt;&lt;p&gt;Resolved in &lt;a href=
&quot;http://github.com/rails/rails/commit/5be49884b5947d4624bdaaf9cf2629ca4dd73567&quot;&gt;
http://github.com/rails/rails/commit/5be49884b5947d4624bdaaf9cf2629...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-05-05T18:56:36+01:00</created-at>
      <creator-id type="integer">24325</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4513</number>
      <permalink>associationproxy-undef-methods-call-on-symbol-in-ruby-19</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>association_proxy patch</tag>
      <title>AssociationProxy undef methods call =~ on symbol in Ruby 1.9</title>
      <updated-at type="datetime">2010-05-05T18:56:41+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Ernie Miller</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4513</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>928f1e43121a8b3ad18c323a384b331b14bdb9f4</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-30T20:51:22+01:00</created-at>
      <filename>prevent_symbol_regexp_in_assoc_proxy.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">505849</id>
      <size type="integer">1179</size>
      <uploader-id type="integer">24325</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/505849/prevent_symbol_regexp_in_assoc_proxy.diff</url>
    </attachment>
  </attachments>
</ticket>
