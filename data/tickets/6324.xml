<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-01-22T10:55:44+00:00</created-at>
  <creator-id type="integer">27056</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6324</number>
  <permalink>rails-303-has-manycreate-does-not-create-a-record</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>Rails 3.0.3 has many#create does not create a record</title>
  <updated-at type="datetime">2011-01-27T06:18:56+00:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">4</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Rob Westgeest</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6324</url>
  <priority-name>Low</priority-name>
  <original-body>Given a these models
@@@ ruby
class OrganizingCity &lt; ActiveRecord::Base
  has_many :tables
end
class Table &lt; ActiveRecord::Base
  belongs_to :organizing_city
end
@@@

and the specs (using FixtureReplacement)

@@@ ruby 
describe OrganizingCity do
  describe &quot;create a table&quot; do
    it &quot;through tables#create add a table to the has_many association&quot; do
      organizing_city = create_organizing_city
      organizing_city.tables.create new_table.attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
    it &quot;through creating a new table adds a table to the has many association&quot; do
      organizing_city = create_organizing_city
      Table.create organizing_city.tables.create new_table(:organizing_city =&gt; organizing_city).attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
  end
end
@@@

then the first one fails and the second one passes.</original-body>
  <latest-body>Given a these models
@@@ ruby
class OrganizingCity &lt; ActiveRecord::Base
  has_many :tables
end
class Table &lt; ActiveRecord::Base
  belongs_to :organizing_city
end
@@@

and the specs (using FixtureReplacement)

@@@ ruby 
describe OrganizingCity do
  describe &quot;create a table&quot; do
    it &quot;through tables#create add a table to the has_many association&quot; do
      organizing_city = create_organizing_city
      organizing_city.tables.create new_table.attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
    it &quot;through creating a new table adds a table to the has many association&quot; do
      organizing_city = create_organizing_city
      Table.create organizing_city.tables.create new_table(:organizing_city =&gt; organizing_city).attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
  end
end
@@@

then the first one fails and the second one passes.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Given a these models&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class OrganizingCity &amp;lt; ActiveRecord::Base
  has_many :tables
end
class Table &amp;lt; ActiveRecord::Base
  belongs_to :organizing_city
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and the specs (using FixtureReplacement)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;describe OrganizingCity do
  describe &quot;create a table&quot; do
    it &quot;through tables#create add a table to the has_many association&quot; do
      organizing_city = create_organizing_city
      organizing_city.tables.create new_table.attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
    it &quot;through creating a new table adds a table to the has many association&quot; do
      organizing_city = create_organizing_city
      Table.create organizing_city.tables.create new_table(:organizing_city =&amp;gt; organizing_city).attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;then the first one fails and the second one passes.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Given a these models
@@@ ruby
class OrganizingCity &lt; ActiveRecord::Base
  has_many :tables
end
class Table &lt; ActiveRecord::Base
  belongs_to :organizing_city
end
@@@

and the specs (using FixtureReplacement)

@@@ ruby 
describe OrganizingCity do
  describe &quot;create a table&quot; do
    it &quot;through tables#create add a table to the has_many association&quot; do
      organizing_city = create_organizing_city
      organizing_city.tables.create new_table.attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
    it &quot;through creating a new table adds a table to the has many association&quot; do
      organizing_city = create_organizing_city
      Table.create organizing_city.tables.create new_table(:organizing_city =&gt; organizing_city).attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
  end
end
@@@

then the first one fails and the second one passes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Given a these models&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class OrganizingCity &amp;lt; ActiveRecord::Base
  has_many :tables
end
class Table &amp;lt; ActiveRecord::Base
  belongs_to :organizing_city
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and the specs (using FixtureReplacement)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;describe OrganizingCity do
  describe &quot;create a table&quot; do
    it &quot;through tables#create add a table to the has_many association&quot; do
      organizing_city = create_organizing_city
      organizing_city.tables.create new_table.attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
    it &quot;through creating a new table adds a table to the has many association&quot; do
      organizing_city = create_organizing_city
      Table.create organizing_city.tables.create new_table(:organizing_city =&amp;gt; organizing_city).attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;then the first one fails and the second one passes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-22T10:55:44+00:00</created-at>
      <creator-id type="integer">27056</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6324</number>
      <permalink>rails-303-has-manycreate-does-not-create-a-record</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3.0.3 has many#create does not create a record</title>
      <updated-at type="datetime">2011-01-22T10:55:45+00:00</updated-at>
      <user-id type="integer">27056</user-id>
      <version type="integer">1</version>
      <user-name>Rob Westgeest</user-name>
      <creator-name>Rob Westgeest</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6324</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This won't be a Rails problem. Its likely that `new_table.attributes` is returning a hash which has a key `:organizing_city_id` with a value of `nil`, causing the table to get saved without the foreign key.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This won't be a Rails problem. Its likely that
&lt;code&gt;new_table.attributes&lt;/code&gt; is returning a hash which has a
key &lt;code&gt;:organizing_city_id&lt;/code&gt; with a value of
&lt;code&gt;nil&lt;/code&gt;, causing the table to get saved without the
foreign key.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-22T17:59:28+00:00</created-at>
      <creator-id type="integer">27056</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6324</number>
      <permalink>rails-303-has-manycreate-does-not-create-a-record</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3.0.3 has many#create does not create a record</title>
      <updated-at type="datetime">2011-01-22T17:59:33+00:00</updated-at>
      <user-id type="integer">37349</user-id>
      <version type="integer">2</version>
      <user-name>Matt Fawcett</user-name>
      <creator-name>Rob Westgeest</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6324</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You're right!. changing the first spec to:

@@@ ruby
    it &quot;through tables#create add a table to the has_many association&quot; do
      organizing_city = create_organizing_city
      table_attributes = new_table.attributes
      table_attributes.delete &quot;organizing_city_id&quot;
      organizing_city.tables.create table_attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end
@@@
makes it pass.

Sorry to have poluted this list with a worthless ticket. This can be closed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You're right!. changing the first spec to:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    it &quot;through tables#create add a table to the has_many association&quot; do
      organizing_city = create_organizing_city
      table_attributes = new_table.attributes
      table_attributes.delete &quot;organizing_city_id&quot;
      organizing_city.tables.create table_attributes
      organizing_city.reload
      organizing_city.tables.size.should == 1
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;makes it pass.&lt;/p&gt;
&lt;p&gt;Sorry to have poluted this list with a worthless ticket. This
can be closed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-22T20:20:27+00:00</created-at>
      <creator-id type="integer">27056</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6324</number>
      <permalink>rails-303-has-manycreate-does-not-create-a-record</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3.0.3 has many#create does not create a record</title>
      <updated-at type="datetime">2011-01-22T20:20:29+00:00</updated-at>
      <user-id type="integer">27056</user-id>
      <version type="integer">3</version>
      <user-name>Rob Westgeest</user-name>
      <creator-name>Rob Westgeest</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6324</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-27T06:18:47+00:00</created-at>
      <creator-id type="integer">27056</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6324</number>
      <permalink>rails-303-has-manycreate-does-not-create-a-record</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Rails 3.0.3 has many#create does not create a record</title>
      <updated-at type="datetime">2011-01-27T06:18:56+00:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">4</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Rob Westgeest</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6324</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
