<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-17T22:32:55+01:00</created-at>
  <creator-id type="integer">25693</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">647</number>
  <permalink>serialize-d-array-not-unserializing-properly</permalink>
  <priority type="integer">129</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>bug serialize yaml</tag>
  <title>serialize'd array not unserializing properly</title>
  <updated-at type="datetime">2008-07-18T20:14:55+01:00</updated-at>
  <user-id type="integer">25693</user-id>
  <version type="integer">8</version>
  <user-name>auzigog</user-name>
  <creator-name>auzigog</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/647</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I don't have time to make a patch for this, but I wanted to bring it to everyone's attention.

Take this code as an example

@@@ ruby
class Peg
  # does not inherit from ActiveRecord
  def some_method
     &quot;foo&quot;
  end
end

class Board &lt; ActiveRecord::Base
  serialize :pegs
  def setup_pegs
    self.pegs = [Peg.new, Peg.new, Peg.new]
  end
end

class SomeController &lt; ApplicationController
  def index
    b = find_or_create_board
    b.pegs[0].some_method  # IMPORTANT LINE!
  end
  
  def find_or_create_board
    b = Board.find(:first)
    if b.nil?
      b = Board.new
      b.setup_pegs
      b.save!
      b
    end
  end
end
@@@

This code will work fine the first time though because it creates new Peg objects. The second time through, when it has to load the pegs from the database, the &quot;b.pegs[0].some_method&quot; will result in a NoMethodError because the &quot;pegs&quot; array actually looks (something) like this:

&quot;#&lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&gt;&quot;,
&quot;#&lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&gt;&quot;,
&quot;#&lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&gt;&quot;

It is an array of YAML objects instead of an array of Pegs, therefor, it doesn't have &quot;some_method&quot; like you would expect. I learned form &quot;this helpful blog&quot;:http://itsignals.cascadia.com.au/?p=10 that doing adding

@@@ ruby
require 'peg'
@@@

to the top of the Board class will solve this problem. The reason it is happening is because the YAML loading method can't find the Peg class and defaults to making it a YAML object.</original-body>
  <latest-body>I don't have time to make a patch for this, but I wanted to bring it to everyone's attention.

Take this code as an example

@@@ ruby
class Peg
  # does not inherit from ActiveRecord
  def some_method
     &quot;foo&quot;
  end
end

class Board &lt; ActiveRecord::Base
  serialize :pegs
  def setup_pegs
    self.pegs = [Peg.new, Peg.new, Peg.new]
  end
end

class SomeController &lt; ApplicationController
  def index
    b = find_or_create_board
    b.pegs[0].some_method  # IMPORTANT LINE!
  end
  
  def find_or_create_board
    b = Board.find(:first)
    if b.nil?
      b = Board.new
      b.setup_pegs
      b.save!
      b
    end
  end
end
@@@

This code will work fine the first time though because it creates new Peg objects. The second time through, when it has to load the pegs from the database, the &quot;b.pegs[0].some_method&quot; will result in a NoMethodError because the &quot;pegs&quot; array actually looks (something) like this:

&quot;#&lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&gt;&quot;,
&quot;#&lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&gt;&quot;,
&quot;#&lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&gt;&quot;

It is an array of YAML objects instead of an array of Pegs, therefor, it doesn't have &quot;some_method&quot; like you would expect. I learned form &quot;this helpful blog&quot;:http://itsignals.cascadia.com.au/?p=10 that doing adding

@@@ ruby
require 'peg'
@@@

to the top of the Board class will solve this problem. The reason it is happening is because the YAML loading method can't find the Peg class and defaults to making it a YAML object.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
I don't have time to make a patch for this, but I wanted to bring it to everyone's attention.
&lt;/p&gt;&lt;p&gt;
Take this code as an example
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Peg
  # does not inherit from ActiveRecord
  def some_method
     &amp;quot;foo&amp;quot;
  end
end

class Board &amp;lt; ActiveRecord::Base
  serialize :pegs
  def setup_pegs
    self.pegs = [Peg.new, Peg.new, Peg.new]
  end
end

class SomeController &amp;lt; ApplicationController
  def index
    b = find_or_create_board
    b.pegs[0].some_method  # IMPORTANT LINE!
  end
  
  def find_or_create_board
    b = Board.find(:first)
    if b.nil?
      b = Board.new
      b.setup_pegs
      b.save!
      b
    end
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This code will work fine the first time though because it creates new Peg objects. The second time through, when it has to load the pegs from the database, the &quot;b.pegs[0].some_method&quot; will result in a NoMethodError because the &quot;pegs&quot; array actually looks (something) like this:
&lt;/p&gt;&lt;p&gt;
&quot;#&quot;,
&lt;/p&gt;&lt;p&gt;
&quot;#&quot;,
&lt;/p&gt;&lt;p&gt;
&quot;#&quot;
&lt;/p&gt;&lt;p&gt;
It is an array of YAML objects instead of an array of Pegs, therefor, it doesn't have &quot;some_method&quot; like you would expect. I learned form &lt;a href=&quot;http://itsignals.cascadia.com.au/?p=10&quot;&gt;this helpful blog&lt;/a&gt; that doing adding
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'peg'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
to the top of the Board class will solve this problem. The reason it is happening is because the YAML loading method can't find the Peg class and defaults to making it a YAML object.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't have time to make a patch for this, but I wanted to bring it to everyone's attention.

Take this code as an example

@@@ ruby
class Peg
  # does not inherit from ActiveRecord
  def some_method
     &quot;foo&quot;
  end
end

class Board &lt; ActiveRecord::Base
  serialize :pegs
  def setup_pegs
    self.pegs = [Peg.new, Peg.new, Peg.new]
  end
end

class SomeController &lt; ApplicationController
  def index
    b = find_or_create_board
    b.pegs[0].some_method  # IMPORTANT LINE!
  end
  
  def find_or_create_board
    b = Board.find(:first)
    if b.nil?
      b = Board.new
      b.setup_pegs
      b.save!
      b
    end
  end
end
@@@

This code will work fine the first time though because it creates new Peg objects. The second time through, when it has to load the pegs from the database, the &quot;b.pegs[0].some_method&quot; will result in a NoMethodError because the &quot;pegs&quot; array actually looks (something) like this:

&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;,
&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;,
&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;

It is an array of YAML objects instead of an array of Pegs, therefor, it doesn't have &quot;some_method&quot; like you would expect. I learned form &quot;this helpful blog&quot;:http://itsignals.cascadia.com.au/?p=10 that adding

@@@ ruby
require 'peg'
@@@

to the top of the Board class will solve this problem. The reason it is happening is because the YAML loading method can't find the Peg class and defaults to making it a YAML object.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I don't have time to make a patch for this, but I wanted to bring it to everyone's attention.
&lt;/p&gt;&lt;p&gt;
Take this code as an example
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Peg
  # does not inherit from ActiveRecord
  def some_method
     &amp;quot;foo&amp;quot;
  end
end

class Board &amp;lt; ActiveRecord::Base
  serialize :pegs
  def setup_pegs
    self.pegs = [Peg.new, Peg.new, Peg.new]
  end
end

class SomeController &amp;lt; ApplicationController
  def index
    b = find_or_create_board
    b.pegs[0].some_method  # IMPORTANT LINE!
  end
  
  def find_or_create_board
    b = Board.find(:first)
    if b.nil?
      b = Board.new
      b.setup_pegs
      b.save!
      b
    end
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This code will work fine the first time though because it creates new Peg objects. The second time through, when it has to load the pegs from the database, the &quot;b.pegs[0].some_method&quot; will result in a NoMethodError because the &quot;pegs&quot; array actually looks (something) like this:
&lt;/p&gt;&lt;p&gt;
&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;,
&lt;/p&gt;&lt;p&gt;
&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;,
&lt;/p&gt;&lt;p&gt;
&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;
&lt;/p&gt;&lt;p&gt;
It is an array of YAML objects instead of an array of Pegs, therefor, it doesn't have &quot;some_method&quot; like you would expect. I learned form &lt;a href=&quot;http://itsignals.cascadia.com.au/?p=10&quot;&gt;this helpful blog&lt;/a&gt; that adding
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'peg'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
to the top of the Board class will solve this problem. The reason it is happening is because the YAML loading method can't find the Peg class and defaults to making it a YAML object.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-18T20:14:55+01:00</created-at>
      <creator-id type="integer">25693</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">647</number>
      <permalink>serialize-d-array-not-unserializing-properly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug serialize yaml</tag>
      <title>serialize'd array not unserializing properly</title>
      <updated-at type="datetime">2008-07-18T20:14:55+01:00</updated-at>
      <user-id type="integer">25693</user-id>
      <version type="integer">1</version>
      <user-name>auzigog</user-name>
      <creator-name>auzigog</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/647</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry, those #'s in the middle were supposed to look like this:

&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;,
&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;,
&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Sorry, those #'s in the middle were supposed to look like this:
&lt;/p&gt;&lt;p&gt;
&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;,
&lt;/p&gt;&lt;p&gt;
&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;,
&lt;/p&gt;&lt;p&gt;
&quot;#&amp;lt;YAML::Object:0x52cc220 @ivars={}, @class=&quot;Peg&quot;&amp;gt;&quot;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T22:34:13+01:00</created-at>
      <creator-id type="integer">25693</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">647</number>
      <permalink>serialize-d-array-not-unserializing-properly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug serialize yaml</tag>
      <title>serialize'd array not unserializing properly</title>
      <updated-at type="datetime">2008-07-17T22:34:13+01:00</updated-at>
      <user-id type="integer">25693</user-id>
      <version type="integer">2</version>
      <user-name>auzigog</user-name>
      <creator-name>auzigog</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/647</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>How is this not a has_many association?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
How is this not a has_many association?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T22:38:01+01:00</created-at>
      <creator-id type="integer">25693</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">647</number>
      <permalink>serialize-d-array-not-unserializing-properly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug serialize yaml</tag>
      <title>serialize'd array not unserializing properly</title>
      <updated-at type="datetime">2008-07-17T22:38:01+01:00</updated-at>
      <user-id type="integer">9830</user-id>
      <version type="integer">3</version>
      <user-name>RSL</user-name>
      <creator-name>auzigog</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/647</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Because Peg is not a model? It doesn't deserve to be a model. There are hundreds of pegs per row and there is no point in wasting tons of database rows with simple objects that could easily be serialized instead.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Because Peg is not a model? It doesn't deserve to be a model. There are hundreds of pegs per row and there is no point in wasting tons of database rows with simple objects that could easily be serialized instead.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T22:39:21+01:00</created-at>
      <creator-id type="integer">25693</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">647</number>
      <permalink>serialize-d-array-not-unserializing-properly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug serialize yaml</tag>
      <title>serialize'd array not unserializing properly</title>
      <updated-at type="datetime">2008-07-17T22:39:21+01:00</updated-at>
      <user-id type="integer">25693</user-id>
      <version type="integer">4</version>
      <user-name>auzigog</user-name>
      <creator-name>auzigog</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/647</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&quot;Related bug from old Rails Trac&quot;:http://dev.rubyonrails.org/ticket/7537</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&lt;a href=&quot;http://dev.rubyonrails.org/ticket/7537&quot;&gt;Related bug from old Rails Trac&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T23:42:27+01:00</created-at>
      <creator-id type="integer">25693</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">647</number>
      <permalink>serialize-d-array-not-unserializing-properly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug serialize yaml</tag>
      <title>serialize'd array not unserializing properly</title>
      <updated-at type="datetime">2008-07-17T23:42:27+01:00</updated-at>
      <user-id type="integer">25693</user-id>
      <version type="integer">5</version>
      <user-name>auzigog</user-name>
      <creator-name>auzigog</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/647</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Shouldn't including peg.rb in lib/ do the trick for this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Shouldn't including peg.rb in lib/ do the trick for this?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-18T02:19:12+01:00</created-at>
      <creator-id type="integer">25693</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">647</number>
      <permalink>serialize-d-array-not-unserializing-properly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug serialize yaml</tag>
      <title>serialize'd array not unserializing properly</title>
      <updated-at type="datetime">2008-07-18T02:19:12+01:00</updated-at>
      <user-id type="integer">25003</user-id>
      <version type="integer">6</version>
      <user-name>Phil Orwig</user-name>
      <creator-name>auzigog</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/647</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Use composed_of.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Use composed_of.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-18T17:30:53+01:00</created-at>
      <creator-id type="integer">25693</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">647</number>
      <permalink>serialize-d-array-not-unserializing-properly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>bug serialize yaml</tag>
      <title>serialize'd array not unserializing properly</title>
      <updated-at type="datetime">2008-07-18T17:30:53+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">7</version>
      <user-name>Pratik</user-name>
      <creator-name>auzigog</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/647</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Am I wrong in assuming that serialize isn't working as expected?

Using composed_of doesn't resolve that unexpected behavior, it just fixed my problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Am I wrong in assuming that serialize isn't working as expected?
&lt;/p&gt;&lt;p&gt;
Using composed_of doesn't resolve that unexpected behavior, it just fixed my problem.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-18T20:06:47+01:00</created-at>
      <creator-id type="integer">25693</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">647</number>
      <permalink>serialize-d-array-not-unserializing-properly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>bug serialize yaml</tag>
      <title>serialize'd array not unserializing properly</title>
      <updated-at type="datetime">2008-07-18T20:06:47+01:00</updated-at>
      <user-id type="integer">25693</user-id>
      <version type="integer">8</version>
      <user-name>auzigog</user-name>
      <creator-name>auzigog</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/647</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
