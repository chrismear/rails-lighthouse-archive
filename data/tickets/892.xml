<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-24T11:08:53+01:00</created-at>
  <creator-id type="integer">10510</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">892</number>
  <permalink>composed_of-constructor-and-converter-options</permalink>
  <priority type="integer">2</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>activerecord enhancement patch tests</tag>
  <title>composed_of constructor and converter options</title>
  <updated-at type="datetime">2008-09-10T17:51:00+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">8</version>
  <user-name>Repository</user-name>
  <creator-name>Rob Anderton</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/892</url>
  <priority-name>Medium</priority-name>
  <original-body>Attached is a patch for composed_of aggregations that does the following:

1. It adds a new :constructor option that takes a symbol or a proc that will be used to instantiate the aggregate object. It is optional and if not used then the existing behaviour of calling new with the mapped attributes will be used.
2. It deprecates the use of a block to provide a method of converting values assigned to the aggregate attribute. The use of a block didn&#8217;t feel particularly consistent with the rest of Rails where typically symbols or procs are passed as options (a good example being the :if and :unless options for validations). Of course passing a block will still function, so existing code won&#8217;t break, but it will raise a deprecation warning. This change leads on to&#8230;
3. It adds a new :converter option that also takes a symbol or proc that will be used when the aggregate attribute is assigned a value that is not an instance of the aggregate class. This replaces the old block syntax and makes it easier to do things like calling composed_of from within a with_options block. If both the :converter option and a block are passed to composed_of then the :converter option will take precedence.

This is a different approach to that taken by [previous](http://dev.rubyonrails.org/ticket/11122 &quot;6 month old patch&quot;) [patches](http://rails.lighthouseapp.com/projects/8994/tickets/212-add-alternate-constructor-support-to-aggregations &quot;3 month old patch&quot;) which is why I&#8217;m submitting it as a new ticket.

Here&#8217;s a simple usage example, currently this won't work:

@@@ ruby
class Visitor

  composed_of :ip_addr,
              :class_name =&gt; 'IPAddr',
              :mapping =&gt; %w(ip to_i)

end
@@@

Here the composed_of aggregation maps the ip attribute (an integer) to the IPAddr class from the Ruby standard library. This won&#8217;t work properly as the IPAddr constructor requires a second parameter to be passed to the constructor. I appreciate that a workaround is to manually instantiate aggregate classes when the model is initialised, but I don&#8217;t see why we should have to - it doesn't seem very elegant.

This patch allows the following code to be used:

@@@ ruby
class Visitor

  composed_of :ip_addr,
              :class_name =&gt; 'IPAddr',
              :mapping =&gt; %w(ip to_i),
              :constructor =&gt; Proc.new { |value| IPAddr.new(value, Socket::AF_INET) },
              :converter =&gt; Proc.new { |value| value.is_a?(Integer) ? IPAddr.new(value, Socket::AF_INET) : IPAddr.new(value.to_s) }

end
@@@</original-body>
  <latest-body>Attached is a patch for composed_of aggregations that does the following:

1. It adds a new :constructor option that takes a symbol or a proc that will be used to instantiate the aggregate object. It is optional and if not used then the existing behaviour of calling new with the mapped attributes will be used.
2. It deprecates the use of a block to provide a method of converting values assigned to the aggregate attribute. The use of a block didn&#8217;t feel particularly consistent with the rest of Rails where typically symbols or procs are passed as options (a good example being the :if and :unless options for validations). Of course passing a block will still function, so existing code won&#8217;t break, but it will raise a deprecation warning. This change leads on to&#8230;
3. It adds a new :converter option that also takes a symbol or proc that will be used when the aggregate attribute is assigned a value that is not an instance of the aggregate class. This replaces the old block syntax and makes it easier to do things like calling composed_of from within a with_options block. If both the :converter option and a block are passed to composed_of then the :converter option will take precedence.

This is a different approach to that taken by [previous](http://dev.rubyonrails.org/ticket/11122 &quot;6 month old patch&quot;) [patches](http://rails.lighthouseapp.com/projects/8994/tickets/212-add-alternate-constructor-support-to-aggregations &quot;3 month old patch&quot;) which is why I&#8217;m submitting it as a new ticket.

Here&#8217;s a simple usage example, currently this won't work:

@@@ ruby
class Visitor

  composed_of :ip_addr,
              :class_name =&gt; 'IPAddr',
              :mapping =&gt; %w(ip to_i)

end
@@@

Here the composed_of aggregation maps the ip attribute (an integer) to the IPAddr class from the Ruby standard library. This won&#8217;t work properly as the IPAddr constructor requires a second parameter to be passed to the constructor. I appreciate that a workaround is to manually instantiate aggregate classes when the model is initialised, but I don&#8217;t see why we should have to - it doesn't seem very elegant.

This patch allows the following code to be used:

@@@ ruby
class Visitor

  composed_of :ip_addr,
              :class_name =&gt; 'IPAddr',
              :mapping =&gt; %w(ip to_i),
              :constructor =&gt; Proc.new { |value| IPAddr.new(value, Socket::AF_INET) },
              :converter =&gt; Proc.new { |value| value.is_a?(Integer) ? IPAddr.new(value, Socket::AF_INET) : IPAddr.new(value.to_s) }

end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Attached is a patch for composed_of aggregations that does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It adds a new :constructor option that takes a symbol or a proc that will be used to instantiate the aggregate object. It is optional and if not used then the existing behaviour of calling new with the mapped attributes will be used.&lt;/li&gt;
&lt;li&gt;It deprecates the use of a block to provide a method of converting values assigned to the aggregate attribute. The use of a block didn&#8217;t feel particularly consistent with the rest of Rails where typically symbols or procs are passed as options (a good example being the :if and :unless options for validations). Of course passing a block will still function, so existing code won&#8217;t break, but it will raise a deprecation warning. This change leads on to&#8230;&lt;/li&gt;
&lt;li&gt;It adds a new :converter option that also takes a symbol or proc that will be used when the aggregate attribute is assigned a value that is not an instance of the aggregate class. This replaces the old block syntax and makes it easier to do things like calling composed_of from within a with_options block. If both the :converter option and a block are passed to composed_of then the :converter option will take precedence.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This is a different approach to that taken by &lt;a href=&quot;http://dev.rubyonrails.org/ticket/11122&quot; title=&quot;6 month old patch&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/212-add-alternate-constructor-support-to-aggregations&quot; title=&quot;3 month old patch&quot;&gt;patches&lt;/a&gt; which is why I&#8217;m submitting it as a new ticket.&lt;/p&gt;

&lt;p&gt;Here&#8217;s a simple usage example, currently this won't work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Visitor

  composed_of :ip_addr,
              :class_name =&amp;gt; 'IPAddr',
              :mapping =&amp;gt; %w(ip to_i)

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the composed_of aggregation maps the ip attribute (an integer) to the IPAddr class from the Ruby standard library. This won&#8217;t work properly as the IPAddr constructor requires a second parameter to be passed to the constructor. I appreciate that a workaround is to manually instantiate aggregate classes when the model is initialised, but I don&#8217;t see why we should have to - it doesn't seem very elegant.&lt;/p&gt;

&lt;p&gt;This patch allows the following code to be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Visitor

  composed_of :ip_addr,
              :class_name =&amp;gt; 'IPAddr',
              :mapping =&amp;gt; %w(ip to_i),
              :constructor =&amp;gt; Proc.new { |value| IPAddr.new(value, Socket::AF_INET) },
              :converter =&amp;gt; Proc.new { |value| value.is_a?(Integer) ? IPAddr.new(value, Socket::AF_INET) : IPAddr.new(value.to_s) }

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Attached is a patch for composed_of aggregations that does the following:

1. It adds a new :constructor option that takes a symbol or a proc that will be used to instantiate the aggregate object. It is optional and if not used then the existing behaviour of calling new with the mapped attributes will be used.
2. It deprecates the use of a block to provide a method of converting values assigned to the aggregate attribute. The use of a block didn&#8217;t feel particularly consistent with the rest of Rails where typically symbols or procs are passed as options (a good example being the :if and :unless options for validations). Of course passing a block will still function, so existing code won&#8217;t break, but it will raise a deprecation warning. This change leads on to&#8230;
3. It adds a new :converter option that also takes a symbol or proc that will be used when the aggregate attribute is assigned a value that is not an instance of the aggregate class. This replaces the old block syntax and makes it easier to do things like calling composed_of from within a with_options block. If both the :converter option and a block are passed to composed_of then the :converter option will take precedence.

This is a different approach to that taken by [previous](http://dev.rubyonrails.org/ticket/11122 &quot;6 month old patch&quot;) [patches](http://rails.lighthouseapp.com/projects/8994/tickets/212-add-alternate-constructor-support-to-aggregations &quot;3 month old patch&quot;) which is why I&#8217;m submitting it as a new ticket.

Here&#8217;s a simple usage example, currently this won't work:

@@@ ruby
class Visitor

  composed_of :ip_addr,
              :class_name =&gt; 'IPAddr',
              :mapping =&gt; %w(ip to_i)

end
@@@

Here the composed_of aggregation maps the ip attribute (an integer) to the IPAddr class from the Ruby standard library. This won&#8217;t work properly as the IPAddr constructor requires a second parameter to be passed to the constructor. I appreciate that a workaround is to manually instantiate aggregate classes when the model is initialised, but I don&#8217;t see why we should have to - it doesn't seem very elegant.

This patch allows the following code to be used:

@@@ ruby
class Visitor

  composed_of :ip_addr,
              :class_name =&gt; 'IPAddr',
              :mapping =&gt; %w(ip to_i),
              :constructor =&gt; Proc.new { |value| IPAddr.new(value, Socket::AF_INET) },
              :converter =&gt; Proc.new { |value| value.is_a?(Integer) ? IPAddr.new(value, Socket::AF_INET) : IPAddr.new(value.to_s) }

end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attached is a patch for composed_of aggregations that does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It adds a new :constructor option that takes a symbol or a proc that will be used to instantiate the aggregate object. It is optional and if not used then the existing behaviour of calling new with the mapped attributes will be used.&lt;/li&gt;
&lt;li&gt;It deprecates the use of a block to provide a method of converting values assigned to the aggregate attribute. The use of a block didn&#8217;t feel particularly consistent with the rest of Rails where typically symbols or procs are passed as options (a good example being the :if and :unless options for validations). Of course passing a block will still function, so existing code won&#8217;t break, but it will raise a deprecation warning. This change leads on to&#8230;&lt;/li&gt;
&lt;li&gt;It adds a new :converter option that also takes a symbol or proc that will be used when the aggregate attribute is assigned a value that is not an instance of the aggregate class. This replaces the old block syntax and makes it easier to do things like calling composed_of from within a with_options block. If both the :converter option and a block are passed to composed_of then the :converter option will take precedence.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This is a different approach to that taken by &lt;a href=&quot;http://dev.rubyonrails.org/ticket/11122&quot; title=&quot;6 month old patch&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/212-add-alternate-constructor-support-to-aggregations&quot; title=&quot;3 month old patch&quot;&gt;patches&lt;/a&gt; which is why I&#8217;m submitting it as a new ticket.&lt;/p&gt;

&lt;p&gt;Here&#8217;s a simple usage example, currently this won't work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Visitor

  composed_of :ip_addr,
              :class_name =&amp;gt; 'IPAddr',
              :mapping =&amp;gt; %w(ip to_i)

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the composed_of aggregation maps the ip attribute (an integer) to the IPAddr class from the Ruby standard library. This won&#8217;t work properly as the IPAddr constructor requires a second parameter to be passed to the constructor. I appreciate that a workaround is to manually instantiate aggregate classes when the model is initialised, but I don&#8217;t see why we should have to - it doesn't seem very elegant.&lt;/p&gt;

&lt;p&gt;This patch allows the following code to be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Visitor

  composed_of :ip_addr,
              :class_name =&amp;gt; 'IPAddr',
              :mapping =&amp;gt; %w(ip to_i),
              :constructor =&amp;gt; Proc.new { |value| IPAddr.new(value, Socket::AF_INET) },
              :converter =&amp;gt; Proc.new { |value| value.is_a?(Integer) ? IPAddr.new(value, Socket::AF_INET) : IPAddr.new(value.to_s) }

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-24T11:08:54+01:00</created-at>
      <creator-id type="integer">10510</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">892</number>
      <permalink>composed_of-constructor-and-converter-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch tests</tag>
      <title>composed_of constructor and converter options</title>
      <updated-at type="datetime">2008-08-24T11:08:54+01:00</updated-at>
      <user-id type="integer">10510</user-id>
      <version type="integer">1</version>
      <user-name>Rob Anderton</user-name>
      <creator-name>Rob Anderton</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/892</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't quite follow what :converter is compared to :constructor</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't quite follow what :converter is compared to :constructor&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-26T17:01:12+01:00</created-at>
      <creator-id type="integer">10510</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">892</number>
      <permalink>composed_of-constructor-and-converter-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch tests</tag>
      <title>composed_of constructor and converter options</title>
      <updated-at type="datetime">2008-08-26T17:01:12+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Rob Anderton</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/892</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>My IPAddress example is probably to blame. The differences are:

* :constructor is called when instantiating the aggregate object and is therefore passed *all* of the mapped attributes in the order they are defined in the :mapping option
* :converter is called when a value is assigned to the aggregate attribute and therefore passed the single value that is used in the assignment

Here's an example that hopefully makes this difference more obvious - it uses the [NetAddr gem](http://netaddr.rubyforge.org/ &quot;See NetAddr rdoc&quot;) and is slightly convoluted for emphasis :)

@@@ ruby
class NetworkResource &lt; ActiveRecord::Base

 composed_of :cidr,
             :class_name =&gt; 'NetAddr::CIDR',
             :mapping =&gt; [ %w(network_address network), %w(cidr_range bits) ],
             :allow_nil =&gt; true,
             :constructor =&gt; Proc.new { |network_address, cidr_range| NetAddr::CIDR.create(&quot;#{network_address}/#{cidr_range}&quot;) },
             :converter =&gt; Proc.new { |value| NetAddr::CIDR.create(value.is_a?(Array) ? value.join('/') : value) }
	     
end

# Calls the :constructor proc
n = NetworkResource.new(:network_address =&gt; '192.168.0.1', :cidr_range =&gt; 24)

# Calls the :converter proc
n.cidr = [ '192.168.2.1', 8 ]
n.cidr = '192.168.0.1/24'

# Doesn't call the :converter proc as the class matches the aggregate class
n.cidr = NetAddr::CIDR.create('192.168.2.1/8')

# Save and reload - uses the :constructor proc on reload
n.save
n.reload

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;My IPAddress example is probably to blame. The differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:constructor is called when instantiating the aggregate object and is therefore passed &lt;em&gt;all&lt;/em&gt; of the mapped attributes in the order they are defined in the :mapping option&lt;/li&gt;
&lt;li&gt;:converter is called when a value is assigned to the aggregate attribute and therefore passed the single value that is used in the assignment&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here's an example that hopefully makes this difference more obvious - it uses the &lt;a href=&quot;http://netaddr.rubyforge.org/&quot; title=&quot;See NetAddr rdoc&quot;&gt;NetAddr gem&lt;/a&gt; and is slightly convoluted for emphasis :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class NetworkResource &amp;lt; ActiveRecord::Base

 composed_of :cidr,
             :class_name =&amp;gt; 'NetAddr::CIDR',
             :mapping =&amp;gt; [ %w(network_address network), %w(cidr_range bits) ],
             :allow_nil =&amp;gt; true,
             :constructor =&amp;gt; Proc.new { |network_address, cidr_range| NetAddr::CIDR.create(&amp;quot;#{network_address}/#{cidr_range}&amp;quot;) },
             :converter =&amp;gt; Proc.new { |value| NetAddr::CIDR.create(value.is_a?(Array) ? value.join('/') : value) }

end

# Calls the :constructor proc
n = NetworkResource.new(:network_address =&amp;gt; '192.168.0.1', :cidr_range =&amp;gt; 24)

# Calls the :converter proc
n.cidr = [ '192.168.2.1', 8 ]
n.cidr = '192.168.0.1/24'

# Doesn't call the :converter proc as the class matches the aggregate class
n.cidr = NetAddr::CIDR.create('192.168.2.1/8')

# Save and reload - uses the :constructor proc on reload
n.save
n.reload

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-26T19:20:41+01:00</created-at>
      <creator-id type="integer">10510</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">892</number>
      <permalink>composed_of-constructor-and-converter-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch tests</tag>
      <title>composed_of constructor and converter options</title>
      <updated-at type="datetime">2008-08-26T19:20:41+01:00</updated-at>
      <user-id type="integer">10510</user-id>
      <version type="integer">3</version>
      <user-name>Rob Anderton</user-name>
      <creator-name>Rob Anderton</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/892</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Given that this patch fixes what is really a bug in ActiveRecord, doesn&#8217;t break existing code and is now the third such patch to address the issue of constructors in composed_of (the other two of course not being applied), is there a good reason _not_ to apply it now?

I appreciate the efforts of [Eloy](http://rails.lighthouseapp.com/projects/8994/tickets/950-attributedecorator-a-new-take-on-aggregation &quot;Attribute Decorator patch&quot;) to provide a complete replacement for composed_of and, while I don&#8217;t necessarily agree with the syntax, I think this is something that should be investigated further using plugins for now with a view to incorporating the &#8216;best&#8217; approach into Rails at some point in the future.

But in the interim can the two or three of us who want to use composed_of with classes that don&#8217;t conform to its narrow view of how objects should be constructed, actually be allowed to?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Given that this patch fixes what is really a bug in
ActiveRecord, doesn&amp;#8217;t break existing code and is now the
third such patch to address the issue of constructors in
composed_of (the other two of course not being applied), is there a
good reason &lt;em&gt;not&lt;/em&gt; to apply it now?&lt;/p&gt;
&lt;p&gt;I appreciate the efforts of &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/950-attributedecorator-a-new-take-on-aggregation&quot; title=&quot;Attribute Decorator patch&quot;&gt;Eloy&lt;/a&gt; to provide a complete
replacement for composed_of and, while I don&amp;#8217;t necessarily
agree with the syntax, I think this is something that should be
investigated further using plugins for now with a view to
incorporating the &amp;#8216;best&amp;#8217; approach into Rails at some
point in the future.&lt;/p&gt;
&lt;p&gt;But in the interim can the two or three of us who want to use
composed_of with classes that don&amp;#8217;t conform to its narrow
view of how objects should be constructed, actually be allowed
to?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T13:04:29+01:00</created-at>
      <creator-id type="integer">10510</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">892</number>
      <permalink>composed_of-constructor-and-converter-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch tests</tag>
      <title>composed_of constructor and converter options</title>
      <updated-at type="datetime">2008-09-10T13:04:33+01:00</updated-at>
      <user-id type="integer">10510</user-id>
      <version type="integer">4</version>
      <user-name>Rob Anderton</user-name>
      <creator-name>Rob Anderton</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/892</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>OK, I think I agree, it's probably a good idea to apply this.

Could you flesh out the documentation with a few more examples though.</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, I think I agree, it's probably a good idea to apply
this.&lt;/p&gt;
&lt;p&gt;Could you flesh out the documentation with a few more examples
though.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T14:53:00+01:00</created-at>
      <creator-id type="integer">10510</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">892</number>
      <permalink>composed_of-constructor-and-converter-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch tests</tag>
      <title>composed_of constructor and converter options</title>
      <updated-at type="datetime">2008-09-10T14:53:07+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">5</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Rob Anderton</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/892</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Basically if you turn that comment above into rdoc, I think we're good</body>
      <body-html>&lt;div&gt;&lt;p&gt;Basically if you turn that comment above into rdoc, I think
we're good&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T14:57:18+01:00</created-at>
      <creator-id type="integer">10510</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">892</number>
      <permalink>composed_of-constructor-and-converter-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch tests</tag>
      <title>composed_of constructor and converter options</title>
      <updated-at type="datetime">2008-09-10T14:57:22+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">6</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Rob Anderton</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/892</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>That's great news, thanks!

I've attached an updated patch which includes the original changes plus the example from above and some additional explanations for how things work that hopefully make things a bit clearer.</body>
      <body-html>&lt;div&gt;&lt;p&gt;That's great news, thanks!&lt;/p&gt;
&lt;p&gt;I've attached an updated patch which includes the original
changes plus the example from above and some additional
explanations for how things work that hopefully make things a bit
clearer.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T17:20:24+01:00</created-at>
      <creator-id type="integer">10510</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">892</number>
      <permalink>composed_of-constructor-and-converter-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch tests</tag>
      <title>composed_of constructor and converter options</title>
      <updated-at type="datetime">2008-09-10T17:20:28+01:00</updated-at>
      <user-id type="integer">10510</user-id>
      <version type="integer">7</version>
      <user-name>Rob Anderton</user-name>
      <creator-name>Rob Anderton</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/892</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [b518b6c0d3e7796e303c2396de97a8d901aeb308]) Expanded documentation for new composed_of options

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
[#892 state:committed]
http://github.com/rails/rails/commit/b518b6c0d3e7796e303c2396de97a8d901aeb308</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [b518b6c0d3e7796e303c2396de97a8d901aeb308]) Expanded
documentation for new composed_of options&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt; [&lt;a href=&quot;/projects/8994/tickets/892&quot; title=&quot;Ticket #892&quot;&gt;#892&lt;/a&gt;
state:committed] &lt;a href=&quot;http://github.com/rails/rails/commit/b518b6c0d3e7796e303c2396de97a8d901aeb308&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-09-10T17:50:56+01:00</created-at>
      <creator-id type="integer">10510</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">892</number>
      <permalink>composed_of-constructor-and-converter-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord enhancement patch tests</tag>
      <title>composed_of constructor and converter options</title>
      <updated-at type="datetime">2008-09-10T17:51:00+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>Rob Anderton</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/892</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>17fc87339b22a81f14a2a2d5501c84f7d9681252</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-24T11:08:53+01:00</created-at>
      <filename>improved_composed_of.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">41111</id>
      <size type="integer">14496</size>
      <uploader-id type="integer">10510</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/41111/improved_composed_of.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>b3bdd1472832faf163a3be32d9f649dc9cca9ec2</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-10T17:20:24+01:00</created-at>
      <filename>improved_composed_of_with_documentation.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">45076</id>
      <size type="integer">21213</size>
      <uploader-id type="integer">10510</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/45076/improved_composed_of_with_documentation.diff</url>
    </attachment>
  </attachments>
</ticket>
