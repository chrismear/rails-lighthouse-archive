<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-27T17:39:53+01:00</created-at>
  <creator-id type="integer">52024</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5198</number>
  <permalink>undefined-method-i18n_scope-raised-by-activemodelerrors-when-validated-model-is-not-extended-with-activemodeltranslation-incorrect-documentation-about-activemodelerrors-class</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>undefined method 'i18n_scope' raised by ActiveModel::Errors when validated model is not extended with ActiveModel::Translation. Incorrect documentation about ActiveModel::Errors class.</title>
  <updated-at type="datetime">2011-02-09T00:42:44+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Robert Pankowecki</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5198</url>
  <priority-name>Low</priority-name>
  <original-body>This is extract from ActiveModel::Errors documentation:

@@@
  # A minimal implementation could be:
  # 
  #   class Person
  #   
  #     # Required dependency for ActiveModel::Errors
  #     extend ActiveModel::Naming
  # 
  #     def initialize
  #       @errors = ActiveModel::Errors.new(self)
  #     end
  #   
  #     attr_accessor :name
  #     attr_reader   :errors
  #   
  #     def validate!
  #       errors.add(:name, &quot;can not be nil&quot;) if name == nil
  #     end
  #   
  #     # The following methods are needed to be minimally implemented
  #
  #     def read_attribute_for_validation(attr)
  #       send(attr)
  #     end
  #   
  #     def ErrorsPerson.human_attribute_name(attr, options = {})
  #       attr
  #     end
  #   
  #     def ErrorsPerson.lookup_ancestors
  #       [self]
  #     end
  #   
  #   end
  #
  # The last three methods are required in your object for Errors to be
  # able to generate error messages correctly and also handle multiple
  # languages.  Of course, if you extend your object with ActiveModel::Translations
  # you will not need to implement the last two.  Likewise, using
  # ActiveModel::Validations will handle the validation related methods
  # for you.
@@@

Problem 1: I think it should state that Person.human_attribute_name and Perons.lookup_ancestors are necessary. They should be defined for Person class, not for ErrorsPerson class.

Problem 2: Implementing those methods on Person class is not enough. When you do so it leads to the exception:

@@@
undefined method `i18n_scope' for Person:Class

activemodel (3.0.0.beta4) lib/active_model/errors.rb:261:in `block in generate_message'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:260:in `map'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:260:in `generate_message'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:182:in `add'
@@@

Problem 3: To walk around second problem the class should be extended with ActiveModel::Translation, not ActiveModel::Translations as the documentation states.</original-body>
  <latest-body>This is extract from ActiveModel::Errors documentation:

@@@
  # A minimal implementation could be:
  # 
  #   class Person
  #   
  #     # Required dependency for ActiveModel::Errors
  #     extend ActiveModel::Naming
  # 
  #     def initialize
  #       @errors = ActiveModel::Errors.new(self)
  #     end
  #   
  #     attr_accessor :name
  #     attr_reader   :errors
  #   
  #     def validate!
  #       errors.add(:name, &quot;can not be nil&quot;) if name == nil
  #     end
  #   
  #     # The following methods are needed to be minimally implemented
  #
  #     def read_attribute_for_validation(attr)
  #       send(attr)
  #     end
  #   
  #     def ErrorsPerson.human_attribute_name(attr, options = {})
  #       attr
  #     end
  #   
  #     def ErrorsPerson.lookup_ancestors
  #       [self]
  #     end
  #   
  #   end
  #
  # The last three methods are required in your object for Errors to be
  # able to generate error messages correctly and also handle multiple
  # languages.  Of course, if you extend your object with ActiveModel::Translations
  # you will not need to implement the last two.  Likewise, using
  # ActiveModel::Validations will handle the validation related methods
  # for you.
@@@

Problem 1: I think it should state that Person.human_attribute_name and Perons.lookup_ancestors are necessary. They should be defined for Person class, not for ErrorsPerson class.

Problem 2: Implementing those methods on Person class is not enough. When you do so it leads to the exception:

@@@
undefined method `i18n_scope' for Person:Class

activemodel (3.0.0.beta4) lib/active_model/errors.rb:261:in `block in generate_message'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:260:in `map'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:260:in `generate_message'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:182:in `add'
@@@

Problem 3: To walk around second problem the class should be extended with ActiveModel::Translation, not ActiveModel::Translations as the documentation states.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is extract from ActiveModel::Errors documentation:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  # A minimal implementation could be:
  # 
  #   class Person
  #   
  #     # Required dependency for ActiveModel::Errors
  #     extend ActiveModel::Naming
  # 
  #     def initialize
  #       @errors = ActiveModel::Errors.new(self)
  #     end
  #   
  #     attr_accessor :name
  #     attr_reader   :errors
  #   
  #     def validate!
  #       errors.add(:name, &quot;can not be nil&quot;) if name == nil
  #     end
  #   
  #     # The following methods are needed to be minimally implemented
  #
  #     def read_attribute_for_validation(attr)
  #       send(attr)
  #     end
  #   
  #     def ErrorsPerson.human_attribute_name(attr, options = {})
  #       attr
  #     end
  #   
  #     def ErrorsPerson.lookup_ancestors
  #       [self]
  #     end
  #   
  #   end
  #
  # The last three methods are required in your object for Errors to be
  # able to generate error messages correctly and also handle multiple
  # languages.  Of course, if you extend your object with ActiveModel::Translations
  # you will not need to implement the last two.  Likewise, using
  # ActiveModel::Validations will handle the validation related methods
  # for you.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Problem 1: I think it should state that
Person.human_attribute_name and Perons.lookup_ancestors are
necessary. They should be defined for Person class, not for
ErrorsPerson class.&lt;/p&gt;
&lt;p&gt;Problem 2: Implementing those methods on Person class is not
enough. When you do so it leads to the exception:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;undefined method `i18n_scope' for Person:Class

activemodel (3.0.0.beta4) lib/active_model/errors.rb:261:in `block in generate_message'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:260:in `map'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:260:in `generate_message'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:182:in `add'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Problem 3: To walk around second problem the class should be
extended with ActiveModel::Translation, not
ActiveModel::Translations as the documentation states.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is extract from ActiveModel::Errors documentation:

@@@
  # A minimal implementation could be:
  # 
  #   class Person
  #   
  #     # Required dependency for ActiveModel::Errors
  #     extend ActiveModel::Naming
  # 
  #     def initialize
  #       @errors = ActiveModel::Errors.new(self)
  #     end
  #   
  #     attr_accessor :name
  #     attr_reader   :errors
  #   
  #     def validate!
  #       errors.add(:name, &quot;can not be nil&quot;) if name == nil
  #     end
  #   
  #     # The following methods are needed to be minimally implemented
  #
  #     def read_attribute_for_validation(attr)
  #       send(attr)
  #     end
  #   
  #     def ErrorsPerson.human_attribute_name(attr, options = {})
  #       attr
  #     end
  #   
  #     def ErrorsPerson.lookup_ancestors
  #       [self]
  #     end
  #   
  #   end
  #
  # The last three methods are required in your object for Errors to be
  # able to generate error messages correctly and also handle multiple
  # languages.  Of course, if you extend your object with ActiveModel::Translations
  # you will not need to implement the last two.  Likewise, using
  # ActiveModel::Validations will handle the validation related methods
  # for you.
@@@

Problem 1: I think it should state that Person.human_attribute_name and Perons.lookup_ancestors are necessary. They should be defined for Person class, not for ErrorsPerson class.

Problem 2: Implementing those methods on Person class is not enough. When you do so it leads to the exception:

@@@
undefined method `i18n_scope' for Person:Class

activemodel (3.0.0.beta4) lib/active_model/errors.rb:261:in `block in generate_message'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:260:in `map'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:260:in `generate_message'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:182:in `add'
@@@

Problem 3: To walk around second problem the class should be extended with ActiveModel::Translation, not ActiveModel::Translations as the documentation states.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is extract from ActiveModel::Errors documentation:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  # A minimal implementation could be:
  # 
  #   class Person
  #   
  #     # Required dependency for ActiveModel::Errors
  #     extend ActiveModel::Naming
  # 
  #     def initialize
  #       @errors = ActiveModel::Errors.new(self)
  #     end
  #   
  #     attr_accessor :name
  #     attr_reader   :errors
  #   
  #     def validate!
  #       errors.add(:name, &quot;can not be nil&quot;) if name == nil
  #     end
  #   
  #     # The following methods are needed to be minimally implemented
  #
  #     def read_attribute_for_validation(attr)
  #       send(attr)
  #     end
  #   
  #     def ErrorsPerson.human_attribute_name(attr, options = {})
  #       attr
  #     end
  #   
  #     def ErrorsPerson.lookup_ancestors
  #       [self]
  #     end
  #   
  #   end
  #
  # The last three methods are required in your object for Errors to be
  # able to generate error messages correctly and also handle multiple
  # languages.  Of course, if you extend your object with ActiveModel::Translations
  # you will not need to implement the last two.  Likewise, using
  # ActiveModel::Validations will handle the validation related methods
  # for you.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Problem 1: I think it should state that
Person.human_attribute_name and Perons.lookup_ancestors are
necessary. They should be defined for Person class, not for
ErrorsPerson class.&lt;/p&gt;
&lt;p&gt;Problem 2: Implementing those methods on Person class is not
enough. When you do so it leads to the exception:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;undefined method `i18n_scope' for Person:Class

activemodel (3.0.0.beta4) lib/active_model/errors.rb:261:in `block in generate_message'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:260:in `map'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:260:in `generate_message'
activemodel (3.0.0.beta4) lib/active_model/errors.rb:182:in `add'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Problem 3: To walk around second problem the class should be
extended with ActiveModel::Translation, not
ActiveModel::Translations as the documentation states.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-26T15:33:16+01:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5198</number>
      <permalink>undefined-method-i18n_scope-raised-by-activemodelerrors-when-validated-model-is-not-extended-with-activemodeltranslation-incorrect-documentation-about-activemodelerrors-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;active model&quot; activemodel active_modelerrors documenation</tag>
      <title>undefined method 'i18n_scope' raised by ActiveModel::Errors when validated model is not extended with ActiveModel::Translation. Incorrect documentation about ActiveModel::Errors class.</title>
      <updated-at type="datetime">2010-07-26T15:33:19+01:00</updated-at>
      <user-id type="integer">52024</user-id>
      <version type="integer">1</version>
      <user-name>Robert Pankowecki</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5198</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Cheap balenciaga purses, &lt;a href='http://www.poboshop.com'&gt;balenciaga handbags&lt;/a&gt;, balenciaga wallets onsale, 
Luxuy handbags, purses, high quality at low price at poboshop.com.
&lt;a href='http://www.balenciagaonsale.com'&gt;balenciaga bags&lt;/a&gt;

The most cool online shoes shop where you can find the most fashion designers shoes, include
&lt;a href='http://www.fashionshoesmart.com'&gt;Manolo Blahnik Shoes&lt;/a&gt;, &lt;a href='http://www.fashionshoesmart.com'&gt;Jimmy Choo Shoes&lt;/a&gt;, Christian Louboutin shoes and more. 
we offer high quality highheels at low price.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Cheap balenciaga purses, &lt;a href=
&quot;http://www.poboshop.com&quot;&gt;balenciaga handbags&lt;/a&gt;, balenciaga
wallets onsale,&lt;br&gt;
Luxuy handbags, purses, high quality at low price at
poboshop.com.&lt;br&gt;
&lt;a href=&quot;http://www.balenciagaonsale.com&quot;&gt;balenciaga bags&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The most cool online shoes shop where you can find the most
fashion designers shoes, include&lt;br&gt;
&lt;a href=&quot;http://www.fashionshoesmart.com&quot;&gt;Manolo Blahnik Shoes&lt;/a&gt;,
&lt;a href=&quot;http://www.fashionshoesmart.com&quot;&gt;Jimmy Choo Shoes&lt;/a&gt;,
Christian Louboutin shoes and more.&lt;br&gt;
we offer high quality highheels at low price.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-27T15:17:30+01:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5198</number>
      <permalink>undefined-method-i18n_scope-raised-by-activemodelerrors-when-validated-model-is-not-extended-with-activemodeltranslation-incorrect-documentation-about-activemodelerrors-class</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;active model&quot; activemodel active_modelerrors documenation</tag>
      <title>undefined method 'i18n_scope' raised by ActiveModel::Errors when validated model is not extended with ActiveModel::Translation. Incorrect documentation about ActiveModel::Errors class.</title>
      <updated-at type="datetime">2010-07-27T17:39:53+01:00</updated-at>
      <user-id type="integer">109040</user-id>
      <version type="integer">2</version>
      <user-name>matin</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5198</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-07T16:54:56+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:tag: &quot;\&quot;active model\&quot; activemodel active_modelerrors documenation&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5198</number>
      <permalink>undefined-method-i18n_scope-raised-by-activemodelerrors-when-validated-model-is-not-extended-with-activemodeltranslation-incorrect-documentation-about-activemodelerrors-class</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>undefined method 'i18n_scope' raised by ActiveModel::Errors when validated model is not extended with ActiveModel::Translation. Incorrect documentation about ActiveModel::Errors class.</title>
      <updated-at type="datetime">2010-11-07T16:54:58+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">4</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5198</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-09T00:32:04+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5198</number>
      <permalink>undefined-method-i18n_scope-raised-by-activemodelerrors-when-validated-model-is-not-extended-with-activemodeltranslation-incorrect-documentation-about-activemodelerrors-class</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>undefined method 'i18n_scope' raised by ActiveModel::Errors when validated model is not extended with ActiveModel::Translation. Incorrect documentation about ActiveModel::Errors class.</title>
      <updated-at type="datetime">2011-02-09T00:42:44+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5198</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-09T00:32:04+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5198</number>
      <permalink>undefined-method-i18n_scope-raised-by-activemodelerrors-when-validated-model-is-not-extended-with-activemodeltranslation-incorrect-documentation-about-activemodelerrors-class</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>undefined method 'i18n_scope' raised by ActiveModel::Errors when validated model is not extended with ActiveModel::Translation. Incorrect documentation about ActiveModel::Errors class.</title>
      <updated-at type="datetime">2011-02-09T00:42:22+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5198</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
