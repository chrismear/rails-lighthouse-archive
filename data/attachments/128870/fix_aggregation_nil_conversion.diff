From 32e43e5e2a3b3de804348dbcce3f29386b0adace Mon Sep 17 00:00:00 2001
From: Chris Hapgood <cch1@hapgoods.com>
Date: Tue, 2 Jun 2009 16:17:12 -0400
Subject: [PATCH] Behave nicely if converter returns nil

---
 activerecord/lib/active_record/aggregations.rb |   20 ++++++++++----------
 activerecord/test/cases/aggregations_test.rb   |    5 +++++
 activerecord/test/models/customer.rb           |    8 ++++++--
 3 files changed, 21 insertions(+), 12 deletions(-)

diff --git a/activerecord/lib/active_record/aggregations.rb b/activerecord/lib/active_record/aggregations.rb
index 9ecf231..de26a4c 100644
--- a/activerecord/lib/active_record/aggregations.rb
+++ b/activerecord/lib/active_record/aggregations.rb
@@ -234,20 +234,20 @@ module ActiveRecord
         def writer_method(name, class_name, mapping, allow_nil, converter)
           module_eval do
             define_method("#{name}=") do |part|
+              unless part.nil? || part.is_a?(class_name.constantize) || converter.nil?
+                part = case converter
+                  when Symbol
+                   class_name.constantize.send(converter, part)
+                  when Proc, Method
+                    converter.call(part)
+                  else
+                    raise ArgumentError, 'Converter must be a symbol denoting the converter method to call or a Proc to be invoked.'
+                  end
+              end
               if part.nil? && allow_nil
                 mapping.each { |pair| self[pair.first] = nil }
                 instance_variable_set("@#{name}", nil)
               else
-                unless part.is_a?(class_name.constantize) || converter.nil?
-                  part = case converter
-                    when Symbol
-                     class_name.constantize.send(converter, part)
-                    when Proc, Method
-                      converter.call(part)
-                    else
-                      raise ArgumentError, 'Converter must be a symbol denoting the converter method to call or a Proc to be invoked.'
-                    end
-                end
                 mapping.each { |pair| self[pair.first] = part.send(pair.last) }
                 instance_variable_set("@#{name}", part.freeze)
               end
diff --git a/activerecord/test/cases/aggregations_test.rb b/activerecord/test/cases/aggregations_test.rb
index 8b6ec04..ff80f2e 100644
--- a/activerecord/test/cases/aggregations_test.rb
+++ b/activerecord/test/cases/aggregations_test.rb
@@ -119,6 +119,11 @@ class AggregationsTest < ActiveRecord::TestCase
     assert_equal 'Barnoit GUMBLEAU', customers(:barney).fullname.to_s
     assert_kind_of Fullname, customers(:barney).fullname
   end
+  
+  def test_converter_returning_nil
+    assert_nothing_raised { customers(:barney).fullname = "" }
+    assert_nil customers(:barney).fullname
+  end
 end
 
 class DeprecatedAggregationsTest < ActiveRecord::TestCase
diff --git a/activerecord/test/models/customer.rb b/activerecord/test/models/customer.rb
index e258ccd..6c82495 100644
--- a/activerecord/test/models/customer.rb
+++ b/activerecord/test/models/customer.rb
@@ -2,7 +2,7 @@ class Customer < ActiveRecord::Base
   composed_of :address, :mapping => [ %w(address_street street), %w(address_city city), %w(address_country country) ], :allow_nil => true
   composed_of :balance, :class_name => "Money", :mapping => %w(balance amount), :converter => Proc.new { |balance| balance.to_money }
   composed_of :gps_location, :allow_nil => true
-  composed_of :fullname, :mapping => %w(name to_s), :constructor => Proc.new { |name| Fullname.parse(name) }, :converter => :parse
+  composed_of :fullname, :mapping => %w(name to_str), :constructor => Proc.new { |name| Fullname.parse(name) }, :converter => :parse, :allow_nil => true
 end
 
 class Address
@@ -59,7 +59,7 @@ class Fullname
   attr_reader :first, :last
 
   def self.parse(str)
-    return nil unless str
+    return nil unless str && str.any?
     new(*str.to_s.split)
   end
 
@@ -67,6 +67,10 @@ class Fullname
     @first, @last = first, last
   end
 
+  def to_str
+    "#{first} #{last}"
+  end
+  
   def to_s
     "#{first} #{last.upcase}"
   end
-- 
1.6.2.2

