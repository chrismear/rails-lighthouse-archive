<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-15T17:53:13+00:00</created-at>
  <creator-id type="integer">20429</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6433</number>
  <permalink>chained-where-conditions-referencing-same-attribute-joined-by-or</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>&quot;activerecord rails3&quot;</tag>
  <title>Chained where conditions referencing same attribute joined by OR</title>
  <updated-at type="datetime">2011-02-15T19:17:08+00:00</updated-at>
  <user-id type="integer">20429</user-id>
  <version type="integer">3</version>
  <user-name>Jeremy McNevin</user-name>
  <creator-name>Jeremy McNevin</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6433</url>
  <priority-name>Low</priority-name>
  <original-body>I've noticed that in Rails 3.0.4, the where method behaves differently if the attribute it references has been used previously, generating an 'OR' instead of 'AND'.  Is this expected behavior?

Rails 3.0.3
State.where(:abbreviation =&gt; 'TX').where(:abbreviation =&gt; 'NE')
SQL: SELECT `states`.* FROM `states` WHERE (`states`.`abbreviation` = 'TX') AND (`states`.`abbreviation` = 'NE')

Rails 3.0.4
State.where(:abbreviation =&gt; 'TX').where(:abbreviation =&gt; 'NE')
SQL: SELECT `states`.* FROM `states` WHERE (`states`.`abbreviation` = 'TX' OR `states`.`abbreviation` = 'NE')</original-body>
  <latest-body>I've noticed that in Rails 3.0.4, the where method behaves differently if the attribute it references has been used previously, generating an 'OR' instead of 'AND'.  Is this expected behavior?

Rails 3.0.3
State.where(:abbreviation =&gt; 'TX').where(:abbreviation =&gt; 'NE')
SQL: SELECT `states`.* FROM `states` WHERE (`states`.`abbreviation` = 'TX') AND (`states`.`abbreviation` = 'NE')

Rails 3.0.4
State.where(:abbreviation =&gt; 'TX').where(:abbreviation =&gt; 'NE')
SQL: SELECT `states`.* FROM `states` WHERE (`states`.`abbreviation` = 'TX' OR `states`.`abbreviation` = 'NE')</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I've noticed that in Rails 3.0.4, the where method behaves
differently if the attribute it references has been used
previously, generating an 'OR' instead of 'AND'. Is this expected
behavior?&lt;/p&gt;
&lt;p&gt;Rails 3.0.3&lt;br&gt;
State.where(:abbreviation =&amp;gt; 'TX').where(:abbreviation =&amp;gt;
'NE')&lt;br&gt;
SQL: SELECT &lt;code&gt;states&lt;/code&gt;.* FROM &lt;code&gt;states&lt;/code&gt; WHERE
(&lt;code&gt;states&lt;/code&gt;.&lt;code&gt;abbreviation&lt;/code&gt; = 'TX') AND
(&lt;code&gt;states&lt;/code&gt;.&lt;code&gt;abbreviation&lt;/code&gt; = 'NE')&lt;/p&gt;
&lt;p&gt;Rails 3.0.4&lt;br&gt;
State.where(:abbreviation =&amp;gt; 'TX').where(:abbreviation =&amp;gt;
'NE')&lt;br&gt;
SQL: SELECT &lt;code&gt;states&lt;/code&gt;.* FROM &lt;code&gt;states&lt;/code&gt; WHERE
(&lt;code&gt;states&lt;/code&gt;.&lt;code&gt;abbreviation&lt;/code&gt; = 'TX' OR
&lt;code&gt;states&lt;/code&gt;.&lt;code&gt;abbreviation&lt;/code&gt; = 'NE')&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've noticed that in Rails 3.0.4, the where method behaves differently if the attribute it references has been used previously, generating an 'OR' instead of 'AND'.  Is this expected behavior?

Rails 3.0.3
State.where(:abbreviation =&gt; 'TX').where(:abbreviation =&gt; 'NE')
SQL: SELECT `states`.* FROM `states` WHERE (`states`.`abbreviation` = 'TX') AND (`states`.`abbreviation` = 'NE')

Rails 3.0.4
State.where(:abbreviation =&gt; 'TX').where(:abbreviation =&gt; 'NE')
SQL: SELECT `states`.* FROM `states` WHERE (`states`.`abbreviation` = 'TX' OR `states`.`abbreviation` = 'NE')</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've noticed that in Rails 3.0.4, the where method behaves
differently if the attribute it references has been used
previously, generating an 'OR' instead of 'AND'. Is this expected
behavior?&lt;/p&gt;
&lt;p&gt;Rails 3.0.3&lt;br&gt;
State.where(:abbreviation =&amp;gt; 'TX').where(:abbreviation =&amp;gt;
'NE')&lt;br&gt;
SQL: SELECT &lt;code&gt;states&lt;/code&gt;.* FROM &lt;code&gt;states&lt;/code&gt; WHERE
(&lt;code&gt;states&lt;/code&gt;.&lt;code&gt;abbreviation&lt;/code&gt; = 'TX') AND
(&lt;code&gt;states&lt;/code&gt;.&lt;code&gt;abbreviation&lt;/code&gt; = 'NE')&lt;/p&gt;
&lt;p&gt;Rails 3.0.4&lt;br&gt;
State.where(:abbreviation =&amp;gt; 'TX').where(:abbreviation =&amp;gt;
'NE')&lt;br&gt;
SQL: SELECT &lt;code&gt;states&lt;/code&gt;.* FROM &lt;code&gt;states&lt;/code&gt; WHERE
(&lt;code&gt;states&lt;/code&gt;.&lt;code&gt;abbreviation&lt;/code&gt; = 'TX' OR
&lt;code&gt;states&lt;/code&gt;.&lt;code&gt;abbreviation&lt;/code&gt; = 'NE')&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-15T17:53:13+00:00</created-at>
      <creator-id type="integer">20429</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6433</number>
      <permalink>chained-where-conditions-referencing-same-attribute-joined-by-or</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot;</tag>
      <title>Chained where conditions referencing same attribute joined by OR</title>
      <updated-at type="datetime">2011-02-15T17:53:16+00:00</updated-at>
      <user-id type="integer">20429</user-id>
      <version type="integer">1</version>
      <user-name>Jeremy McNevin</user-name>
      <creator-name>Jeremy McNevin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6433</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is expected behavior that fixes #4598.  The `OR` will only be generated when the keys are the same.  An `AND` with identical columns doesn't make sense.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is expected behavior that fixes &lt;a href=
&quot;/projects/8994/tickets/4598&quot; title=&quot;Ticket #4598&quot;&gt;#4598&lt;/a&gt;. The
&lt;code&gt;OR&lt;/code&gt; will only be generated when the keys are the same.
An &lt;code&gt;AND&lt;/code&gt; with identical columns doesn't make sense.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-15T18:33:01+00:00</created-at>
      <creator-id type="integer">20429</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6433</number>
      <permalink>chained-where-conditions-referencing-same-attribute-joined-by-or</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;activerecord rails3&quot;</tag>
      <title>Chained where conditions referencing same attribute joined by OR</title>
      <updated-at type="datetime">2011-02-15T18:33:10+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">2</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Jeremy McNevin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6433</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm not sure I'm in agreement with this.

I would expect the where method to operate in consistent manner, and not swap AND or OR around in any case, even if the SQL being generated &quot;doesn't make sense.&quot;  I could see using chained where statements referencing the same attribute to limit the set of records I ultimately want to search.

UNICAMERAL_STATES = ['NE']
class State &lt; ActiveRecord::Base
  scope :unicameral, where(:abbreviation =&gt; UNICAMERAL_STATES)
end
State.unicameral.where(:abbreviation =&gt; 'MN') # None found.

Granted, someone might be able to come up with a better example than that.  I guess the issue is, should chaining where statements together by default actually be able to _increase_ the number of results that are being returned?  I think using OR in this case is an unsafe assumption.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not sure I'm in agreement with this.&lt;/p&gt;
&lt;p&gt;I would expect the where method to operate in consistent manner,
and not swap AND or OR around in any case, even if the SQL being
generated &quot;doesn't make sense.&quot; I could see using chained where
statements referencing the same attribute to limit the set of
records I ultimately want to search.&lt;/p&gt;
&lt;p&gt;UNICAMERAL_STATES = ['NE']&lt;br&gt;
class State &amp;lt; ActiveRecord::Base&lt;br&gt;
scope :unicameral, where(:abbreviation =&amp;gt; UNICAMERAL_STATES)
end&lt;br&gt;
State.unicameral.where(:abbreviation =&amp;gt; 'MN') # None found.&lt;/p&gt;
&lt;p&gt;Granted, someone might be able to come up with a better example
than that. I guess the issue is, should chaining where statements
together by default actually be able to &lt;em&gt;increase&lt;/em&gt; the
number of results that are being returned? I think using OR in this
case is an unsafe assumption.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-15T19:16:59+00:00</created-at>
      <creator-id type="integer">20429</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6433</number>
      <permalink>chained-where-conditions-referencing-same-attribute-joined-by-or</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;activerecord rails3&quot;</tag>
      <title>Chained where conditions referencing same attribute joined by OR</title>
      <updated-at type="datetime">2011-02-15T19:17:08+00:00</updated-at>
      <user-id type="integer">20429</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy McNevin</user-name>
      <creator-name>Jeremy McNevin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6433</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
