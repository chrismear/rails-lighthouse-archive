<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-09-28T19:51:23+01:00</created-at>
  <creator-id type="integer">17728</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3301</number>
  <permalink>delete_all-with-named_scope-fails-when-named_scope-has-joins</permalink>
  <priority type="integer">154697</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>:delete_all with named_scope fails when named_scope has :joins</title>
  <updated-at type="datetime">2010-10-06T17:05:05+01:00</updated-at>
  <user-id type="integer">17728</user-id>
  <version type="integer">6</version>
  <user-name>spovich</user-name>
  <creator-name>spovich</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3301</url>
  <priority-name nil="true"></priority-name>
  <original-body>Trying to call #delete_all through a named_scope fails when the named_scope has conditions that join or include another model.  This same method works fine for #destroy_all

For example, I use STI on User class for different types of users, and want to only #delete_all users of a specific type (in this case OemUsers).

class User &lt; ActiveRecord::Base
 ...
 has_many :email_subscribers
 ...
end

class OemUser &lt; User
 ...
end

class EmailSubscriber &lt; ActiveRecord::Base
 ...
 belongs_to :user
 named_scope :oem_user, :joins =&gt; :user, :conditions =&gt; [&quot;users.type = ?&quot;, 'OemUser']
 ...
end

Now calling delete_all will fail because the User join is working for the delete clause.

&gt;&gt; EmailSubscriber.oem_user.delete_all
ActiveRecord::StatementInvalid: PGError: ERROR:  missing FROM-clause entry for table &quot;users&quot;
LINE 1: DELETE FROM &quot;email_subscribers&quot; WHERE (users.type = E'Oem...

However, destroy_all works fine:
&gt;&gt; EmailSubscriber.oem_user.destroy_all</original-body>
  <latest-body>Trying to call #delete_all through a named_scope fails when the named_scope has conditions that join or include another model.  This same method works fine for #destroy_all

For example, I use STI on User class for different types of users, and want to only #delete_all users of a specific type (in this case OemUsers).

class User &lt; ActiveRecord::Base
 ...
 has_many :email_subscribers
 ...
end

class OemUser &lt; User
 ...
end

class EmailSubscriber &lt; ActiveRecord::Base
 ...
 belongs_to :user
 named_scope :oem_user, :joins =&gt; :user, :conditions =&gt; [&quot;users.type = ?&quot;, 'OemUser']
 ...
end

Now calling delete_all will fail because the User join is working for the delete clause.

&gt;&gt; EmailSubscriber.oem_user.delete_all
ActiveRecord::StatementInvalid: PGError: ERROR:  missing FROM-clause entry for table &quot;users&quot;
LINE 1: DELETE FROM &quot;email_subscribers&quot; WHERE (users.type = E'Oem...

However, destroy_all works fine:
&gt;&gt; EmailSubscriber.oem_user.destroy_all</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Trying to call #delete_all through a named_scope fails when the
named_scope has conditions that join or include another model. This
same method works fine for #destroy_all&lt;/p&gt;
&lt;p&gt;For example, I use STI on User class for different types of
users, and want to only #delete_all users of a specific type (in
this case OemUsers).&lt;/p&gt;
&lt;p&gt;class User &amp;lt; ActiveRecord::Base&lt;br&gt;
... has_many :email_subscribers ... end&lt;/p&gt;
&lt;p&gt;class OemUser &amp;lt; User&lt;br&gt;
... end&lt;/p&gt;
&lt;p&gt;class EmailSubscriber &amp;lt; ActiveRecord::Base&lt;br&gt;
... belongs_to :user named_scope :oem_user, :joins =&amp;gt; :user,
:conditions =&amp;gt; [&quot;users.type = ?&quot;, 'OemUser'] ... end&lt;/p&gt;
&lt;p&gt;Now calling delete_all will fail because the User join is
working for the delete clause.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;EmailSubscriber.oem_user.delete_all
ActiveRecord::StatementInvalid: PGError: ERROR: missing FROM-clause
entry for table &quot;users&quot;&lt;br&gt;
LINE 1: DELETE FROM &quot;email_subscribers&quot; WHERE (users.type =
E'Oem...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, destroy_all works fine:&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;EmailSubscriber.oem_user.destroy_all&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Trying to call #delete_all through a named_scope fails when the named_scope has conditions that join or include another model.  This same method works fine for #destroy_all

For example, I use STI on User class for different types of users, and want to only #delete_all users of a specific type (in this case OemUsers).

@@@ ruby
class User &lt; ActiveRecord::Base
 ...
 has_many :email_subscribers
 ...
end

class OemUser &lt; User
 ...
end

class EmailSubscriber &lt; ActiveRecord::Base
 ...
 belongs_to :user
 named_scope :oem_user, :joins =&gt; :user, :conditions =&gt; [&quot;users.type = ?&quot;, 'OemUser']
 ...
end
@@@

Now calling delete_all will fail because the User join is NOT working for the delete clause.

&gt;&gt; EmailSubscriber.oem_user.delete_all

ActiveRecord::StatementInvalid: PGError: ERROR:  missing FROM-clause entry for table &quot;users&quot;
LINE 1: DELETE FROM &quot;email_subscribers&quot; WHERE (users.type = E'Oem...

The full SQL produced is: DELETE FROM &quot;email_subscribers&quot; WHERE (users.type = E'OemUser') 

However, destroy_all works fine:
&gt;&gt; EmailSubscriber.oem_user.destroy_all</body>
      <body-html>&lt;div&gt;&lt;p&gt;Trying to call #delete_all through a named_scope fails when the
named_scope has conditions that join or include another model. This
same method works fine for #destroy_all&lt;/p&gt;
&lt;p&gt;For example, I use STI on User class for different types of
users, and want to only #delete_all users of a specific type (in
this case OemUsers).&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
 ...
 has_many :email_subscribers
 ...
end

class OemUser &amp;lt; User
 ...
end

class EmailSubscriber &amp;lt; ActiveRecord::Base
 ...
 belongs_to :user
 named_scope :oem_user, :joins =&amp;gt; :user, :conditions =&amp;gt; [&quot;users.type = ?&quot;, 'OemUser']
 ...
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now calling delete_all will fail because the User join is NOT
working for the delete clause.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;EmailSubscriber.oem_user.delete_all&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;ActiveRecord::StatementInvalid: PGError: ERROR: missing
FROM-clause entry for table &quot;users&quot;&lt;br&gt;
LINE 1: DELETE FROM &quot;email_subscribers&quot; WHERE (users.type =
E'Oem...&lt;/p&gt;
&lt;p&gt;The full SQL produced is: DELETE FROM &quot;email_subscribers&quot; WHERE
(users.type = E'OemUser')&lt;/p&gt;
&lt;p&gt;However, destroy_all works fine:&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;EmailSubscriber.oem_user.destroy_all&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T19:51:23+01:00</created-at>
      <creator-id type="integer">17728</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3301</number>
      <permalink>delete_all-with-named_scope-fails-when-named_scope-has-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>:delete_all with named_scope fails when named_scope has :joins</title>
      <updated-at type="datetime">2009-09-28T20:11:11+01:00</updated-at>
      <user-id type="integer">17728</user-id>
      <version type="integer">1</version>
      <user-name>spovich</user-name>
      <creator-name>spovich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3301</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Not sure if this is a limitation of ActiveRecord, but for PostgreSQL, the necessary SQL statement would need to specify the USING clause which is roughly equivalent to the FROM clause

http://www.postgresql.org/docs/8.4/static/sql-delete.html

So, it would need to generate the following:

DELETE from email_subscribers USING users WHERE users.type='OemUser'

For MySQL, it looks like you can specify a regular LEFT JOIN after the FROM clause.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not sure if this is a limitation of ActiveRecord, but for
PostgreSQL, the necessary SQL statement would need to specify the
USING clause which is roughly equivalent to the FROM clause&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://www.postgresql.org/docs/8.4/static/sql-delete.html&quot;&gt;http://www.postgresql.org/docs/8.4/static/sql-delete.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, it would need to generate the following:&lt;/p&gt;
&lt;p&gt;DELETE from email_subscribers USING users WHERE
users.type='OemUser'&lt;/p&gt;
&lt;p&gt;For MySQL, it looks like you can specify a regular LEFT JOIN
after the FROM clause.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T20:16:34+01:00</created-at>
      <creator-id type="integer">17728</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3301</number>
      <permalink>delete_all-with-named_scope-fails-when-named_scope-has-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>:delete_all with named_scope fails when named_scope has :joins</title>
      <updated-at type="datetime">2009-09-28T20:16:36+01:00</updated-at>
      <user-id type="integer">17728</user-id>
      <version type="integer">2</version>
      <user-name>spovich</user-name>
      <creator-name>spovich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3301</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The special syntax for Postgres may be part of why this isn't supported; see also #2558 for discussion on update_all, which had a similar issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The special syntax for Postgres may be part of why this isn't
supported; see also &lt;a href=&quot;/projects/8994/tickets/2558&quot; title=
&quot;Ticket #2558&quot;&gt;#2558&lt;/a&gt; for discussion on update_all, which had a
similar issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T22:21:59+01:00</created-at>
      <creator-id type="integer">17728</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3301</number>
      <permalink>delete_all-with-named_scope-fails-when-named_scope-has-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>:delete_all with named_scope fails when named_scope has :joins</title>
      <updated-at type="datetime">2009-09-28T22:22:03+01:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">3</version>
      <user-name>Matt Jones</user-name>
      <creator-name>spovich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3301</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Well, the general sentiment in #2558 is that you should just write the SQL which is no problem, however, named scopes are so useful and clean, that it seems a shame not to be able to use them in this way.

Also, the documentation for #delete_all is very clear about the risks and limitations, so I don't see that as an issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well, the general sentiment in &lt;a href=
&quot;/projects/8994/tickets/2558&quot; title=&quot;Ticket #2558&quot;&gt;#2558&lt;/a&gt; is
that you should just write the SQL which is no problem, however,
named scopes are so useful and clean, that it seems a shame not to
be able to use them in this way.&lt;/p&gt;
&lt;p&gt;Also, the documentation for #delete_all is very clear about the
risks and limitations, so I don't see that as an issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T23:32:03+01:00</created-at>
      <creator-id type="integer">17728</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3301</number>
      <permalink>delete_all-with-named_scope-fails-when-named_scope-has-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>:delete_all with named_scope fails when named_scope has :joins</title>
      <updated-at type="datetime">2009-09-28T23:32:08+01:00</updated-at>
      <user-id type="integer">17728</user-id>
      <version type="integer">4</version>
      <user-name>spovich</user-name>
      <creator-name>spovich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3301</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:46:00+01:00</created-at>
      <creator-id type="integer">17728</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3301</number>
      <permalink>delete_all-with-named_scope-fails-when-named_scope-has-joins</permalink>
      <priority type="integer">154697</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>:delete_all with named_scope fails when named_scope has :joins</title>
      <updated-at type="datetime">2010-10-06T06:46:01+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">5</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>spovich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3301</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I no longer work at the company where I ran into this problem.  Also, I'm not working on any rails 2.3.x apps (only Rails 3 now).  I tested this with Rails 3 and postgresql and it works fine, so please close the issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I no longer work at the company where I ran into this problem.
Also, I'm not working on any rails 2.3.x apps (only Rails 3 now). I
tested this with Rails 3 and postgresql and it works fine, so
please close the issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T17:05:03+01:00</created-at>
      <creator-id type="integer">17728</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3301</number>
      <permalink>delete_all-with-named_scope-fails-when-named_scope-has-joins</permalink>
      <priority type="integer">154697</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>:delete_all with named_scope fails when named_scope has :joins</title>
      <updated-at type="datetime">2010-10-06T17:05:05+01:00</updated-at>
      <user-id type="integer">17728</user-id>
      <version type="integer">6</version>
      <user-name>spovich</user-name>
      <creator-name>spovich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3301</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
