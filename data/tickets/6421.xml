<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">40272</assigned-user-id>
  <attachments-count type="integer">4</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-18T10:10:47+00:00</created-at>
  <creator-id type="integer">12061</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71470</milestone-id>
  <number type="integer">6421</number>
  <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
  <title>Deprecate 'escape' parameter/option in three helper functions</title>
  <updated-at type="datetime">2011-03-29T14:46:16+01:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">23</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Brian Morearty</creator-name>
  <assigned-user-name>Santiago Pastorino</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
  <milestone-title>3.1</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>From this Rails Core comment by Santiago: https://mail.google.com/a/morearty.org/#inbox/12e0c4594370424a

Now that we have the html_safe function, let's depcrecate the 'escape' option (which is sometimes an option, sometimes a parameter) in many of the helper functions in 3-0-stable.  The default in most cases should now be to escape the text by calling html_safe in the helper.  Let people call html_safe before calling the helper if they want to avoid escaping.  

These are the helpers that have either an `escape` parameter or `:escape` option that we can deprecate:

* `FormTagHelper#text_area_tag`. Remove the :escape option. Santiago suggested removing this one.  
* `TagHelper#content_tag`. Remove the escape param, which currently doesn't work. See below for details.
* `TagHelper#tag`. Remove escape param, which currently defaults to true. 

Santiago asked me to go ahead and make a patch for this deprecation, which I will do.  

----

Here's why I said the escape param for `content_tag` currently doesn't work:

In a 3.0.1 Rails project the output is never escaped but html_safe? always returns true:

@@@ ruby
  rails console
  Loading development environment (Rails 3.0.1)
  ruby-1.8.7-p330 :001 &gt; helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end
  =&gt; &quot;&lt;div&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :002 &gt; (helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :003 &gt; helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :004 &gt; (helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :005 &gt; helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :006 &gt; (helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
@@@

In a Rails 3.0.2 project the content is always escaped and html_safe? always returns true:

@@@ ruby
  rails console
  Loading development environment (Rails 3.0.2)
  ruby-1.8.7-p330 :001 &gt; helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :002 &gt; (helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :003 &gt; helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :004 &gt; (helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :005 &gt; helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :006 &gt; (helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
@@@

So at least in Rails 3.0.2 the html_safe? function is reporting the truth. But content_tag escapes the output even when escape=false (see the last two lines). 

[This is the commit that changed the behavior](https://github.com/rails/rails/commit/bb9c58eb4aa637fa75c69c705a9918d6322ff834). After this change, escape=true doesn't work but calling html_safe still does.</original-body>
  <latest-body>From this Rails Core comment by Santiago: https://mail.google.com/a/morearty.org/#inbox/12e0c4594370424a

Now that we have the html_safe function, let's depcrecate the 'escape' option (which is sometimes an option, sometimes a parameter) in many of the helper functions in 3-0-stable.  The default in most cases should now be to escape the text by calling html_safe in the helper.  Let people call html_safe before calling the helper if they want to avoid escaping.  

These are the helpers that have either an `escape` parameter or `:escape` option that we can deprecate:

* `FormTagHelper#text_area_tag`. Remove the :escape option. Santiago suggested removing this one.  
* `TagHelper#content_tag`. Remove the escape param, which currently doesn't work. See below for details.
* `TagHelper#tag`. Remove escape param, which currently defaults to true. 

Santiago asked me to go ahead and make a patch for this deprecation, which I will do.  

----

Here's why I said the escape param for `content_tag` currently doesn't work:

In a 3.0.1 Rails project the output is never escaped but html_safe? always returns true:

@@@ ruby
  rails console
  Loading development environment (Rails 3.0.1)
  ruby-1.8.7-p330 :001 &gt; helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end
  =&gt; &quot;&lt;div&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :002 &gt; (helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :003 &gt; helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :004 &gt; (helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :005 &gt; helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :006 &gt; (helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
@@@

In a Rails 3.0.2 project the content is always escaped and html_safe? always returns true:

@@@ ruby
  rails console
  Loading development environment (Rails 3.0.2)
  ruby-1.8.7-p330 :001 &gt; helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :002 &gt; (helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :003 &gt; helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :004 &gt; (helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :005 &gt; helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :006 &gt; (helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
@@@

So at least in Rails 3.0.2 the html_safe? function is reporting the truth. But content_tag escapes the output even when escape=false (see the last two lines). 

[This is the commit that changed the behavior](https://github.com/rails/rails/commit/bb9c58eb4aa637fa75c69c705a9918d6322ff834). After this change, escape=true doesn't work but calling html_safe still does.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;From this Rails Core comment by Santiago: &lt;a href=
&quot;https://mail.google.com/a/morearty.org/#inbox/12e0c4594370424a&quot;&gt;https://mail.google.com/a/morearty.org/#inbox/12e0c4594370424a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the html_safe function, let's depcrecate the
'escape' option (which is sometimes an option, sometimes a
parameter) in many of the helper functions in 3-0-stable. The
default in most cases should now be to escape the text by calling
html_safe in the helper. Let people call html_safe before calling
the helper if they want to avoid escaping.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;These are the helpers that have either an &lt;code&gt;escape&lt;/code&gt;
parameter or &lt;code&gt;:escape&lt;/code&gt; option that we can deprecate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FormTagHelper#text_area_tag&lt;/code&gt;. Remove the :escape
option. Santiago suggested removing this one.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TagHelper#content_tag&lt;/code&gt;. Remove the escape param,
which currently doesn't work. See below for details.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TagHelper#tag&lt;/code&gt;. Remove escape param, which
currently defaults to true.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Santiago asked me to go ahead and make a patch for this
deprecation, which I will do.&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here's why I said the escape param for &lt;code&gt;content_tag&lt;/code&gt;
currently doesn't work:&lt;/p&gt;
&lt;p&gt;In a 3.0.1 Rails project the output is never escaped but
html_safe? always returns true:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  rails console
  Loading development environment (Rails 3.0.1)
  ruby-1.8.7-p330 :001 &amp;gt; helper.content_tag :div do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
  =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :002 &amp;gt; (helper.content_tag :div do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true
  ruby-1.8.7-p330 :003 &amp;gt; helper.content_tag :div,nil,nil,true do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
   =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :004 &amp;gt; (helper.content_tag :div,nil,nil,true do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true
  ruby-1.8.7-p330 :005 &amp;gt; helper.content_tag :div,nil,nil,false do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
   =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :006 &amp;gt; (helper.content_tag :div,nil,nil,false do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In a Rails 3.0.2 project the content is always escaped and
html_safe? always returns true:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  rails console
  Loading development environment (Rails 3.0.2)
  ruby-1.8.7-p330 :001 &amp;gt; helper.content_tag :div do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
   =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;amp;lt;b&amp;amp;gt;hello&amp;amp;lt;/b&amp;amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :002 &amp;gt; (helper.content_tag :div do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true
  ruby-1.8.7-p330 :003 &amp;gt; helper.content_tag :div,nil,nil,true do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
   =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;amp;lt;b&amp;amp;gt;hello&amp;amp;lt;/b&amp;amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :004 &amp;gt; (helper.content_tag :div,nil,nil,true do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true
  ruby-1.8.7-p330 :005 &amp;gt; helper.content_tag :div,nil,nil,false do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
   =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;amp;lt;b&amp;amp;gt;hello&amp;amp;lt;/b&amp;amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :006 &amp;gt; (helper.content_tag :div,nil,nil,false do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So at least in Rails 3.0.2 the html_safe? function is reporting
the truth. But content_tag escapes the output even when
escape=false (see the last two lines).&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/commit/bb9c58eb4aa637fa75c69c705a9918d6322ff834&quot;&gt;
This is the commit that changed the behavior&lt;/a&gt;. After this
change, escape=true doesn't work but calling html_safe still
does.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>From this Rails Core comment by Santiago: https://mail.google.com/a/morearty.org/#inbox/12e0c4594370424a

Now that we have the html_safe function, let's depcrecate the 'escape' option (which is sometimes an option, sometimes a parameter) in many of the helper functions in 3-0-stable.  The default in most cases should now be to escape the text by calling html_safe in the helper.  Let people call html_safe before calling the helper if they want to avoid escaping.  

These are the helpers that have either an `escape` parameter or `:escape` option that we can deprecate:

* `FormTagHelper#text_area_tag`. Remove the :escape option. Santiago suggested removing this one.  
* `TagHelper#content_tag`. Remove the escape param, which currently doesn't work. See below for details.
* `TagHelper#tag`. Remove escape param, which currently defaults to true. 

Santiago asked me to go ahead and make a patch for this deprecation, which I will do.  

----

Here's why I said the escape param for `content_tag` currently doesn't work:

In a 3.0.1 Rails project the output is never escaped but html_safe? always returns true:

@@@ ruby
  rails console
  Loading development environment (Rails 3.0.1)
  ruby-1.8.7-p330 :001 &gt; helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end
  =&gt; &quot;&lt;div&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :002 &gt; (helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :003 &gt; helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :004 &gt; (helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :005 &gt; helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :006 &gt; (helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
@@@

In a Rails 3.0.2 project the content is always escaped and html_safe? always returns true:

@@@ ruby
  rails console
  Loading development environment (Rails 3.0.2)
  ruby-1.8.7-p330 :001 &gt; helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :002 &gt; (helper.content_tag :div do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :003 &gt; helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :004 &gt; (helper.content_tag :div,nil,nil,true do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
  ruby-1.8.7-p330 :005 &gt; helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end
   =&gt; &quot;&lt;div&gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&lt;/div&gt;&quot;
  ruby-1.8.7-p330 :006 &gt; (helper.content_tag :div,nil,nil,false do '&lt;b&gt;hello&lt;/b&gt;' end).html_safe?
   =&gt; true
@@@

So at least in Rails 3.0.2 the html_safe? function is reporting the truth. But content_tag escapes the output even when escape=false (see the last two lines). 

[This is the commit that changed the behavior](https://github.com/rails/rails/commit/bb9c58eb4aa637fa75c69c705a9918d6322ff834). After this change, escape=true doesn't work but calling html_safe still does.</body>
      <body-html>&lt;div&gt;&lt;p&gt;From this Rails Core comment by Santiago: &lt;a href=
&quot;https://mail.google.com/a/morearty.org/#inbox/12e0c4594370424a&quot;&gt;https://mail.google.com/a/morearty.org/#inbox/12e0c4594370424a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the html_safe function, let's depcrecate the
'escape' option (which is sometimes an option, sometimes a
parameter) in many of the helper functions in 3-0-stable. The
default in most cases should now be to escape the text by calling
html_safe in the helper. Let people call html_safe before calling
the helper if they want to avoid escaping.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;These are the helpers that have either an &lt;code&gt;escape&lt;/code&gt;
parameter or &lt;code&gt;:escape&lt;/code&gt; option that we can deprecate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FormTagHelper#text_area_tag&lt;/code&gt;. Remove the :escape
option. Santiago suggested removing this one.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TagHelper#content_tag&lt;/code&gt;. Remove the escape param,
which currently doesn't work. See below for details.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TagHelper#tag&lt;/code&gt;. Remove escape param, which
currently defaults to true.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Santiago asked me to go ahead and make a patch for this
deprecation, which I will do.&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here's why I said the escape param for &lt;code&gt;content_tag&lt;/code&gt;
currently doesn't work:&lt;/p&gt;
&lt;p&gt;In a 3.0.1 Rails project the output is never escaped but
html_safe? always returns true:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  rails console
  Loading development environment (Rails 3.0.1)
  ruby-1.8.7-p330 :001 &amp;gt; helper.content_tag :div do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
  =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :002 &amp;gt; (helper.content_tag :div do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true
  ruby-1.8.7-p330 :003 &amp;gt; helper.content_tag :div,nil,nil,true do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
   =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :004 &amp;gt; (helper.content_tag :div,nil,nil,true do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true
  ruby-1.8.7-p330 :005 &amp;gt; helper.content_tag :div,nil,nil,false do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
   =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :006 &amp;gt; (helper.content_tag :div,nil,nil,false do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In a Rails 3.0.2 project the content is always escaped and
html_safe? always returns true:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  rails console
  Loading development environment (Rails 3.0.2)
  ruby-1.8.7-p330 :001 &amp;gt; helper.content_tag :div do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
   =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;amp;lt;b&amp;amp;gt;hello&amp;amp;lt;/b&amp;amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :002 &amp;gt; (helper.content_tag :div do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true
  ruby-1.8.7-p330 :003 &amp;gt; helper.content_tag :div,nil,nil,true do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
   =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;amp;lt;b&amp;amp;gt;hello&amp;amp;lt;/b&amp;amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :004 &amp;gt; (helper.content_tag :div,nil,nil,true do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true
  ruby-1.8.7-p330 :005 &amp;gt; helper.content_tag :div,nil,nil,false do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end
   =&amp;gt; &quot;&amp;lt;div&amp;gt;&amp;amp;lt;b&amp;amp;gt;hello&amp;amp;lt;/b&amp;amp;gt;&amp;lt;/div&amp;gt;&quot;
  ruby-1.8.7-p330 :006 &amp;gt; (helper.content_tag :div,nil,nil,false do '&amp;lt;b&amp;gt;hello&amp;lt;/b&amp;gt;' end).html_safe?
   =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So at least in Rails 3.0.2 the html_safe? function is reporting
the truth. But content_tag escapes the output even when
escape=false (see the last two lines).&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://github.com/rails/rails/commit/bb9c58eb4aa637fa75c69c705a9918d6322ff834&quot;&gt;
This is the commit that changed the behavior&lt;/a&gt;. After this
change, escape=true doesn't work but calling html_safe still
does.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-12T17:29:55+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-12T17:29:57+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">1</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-12T18:49:09+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-12T18:49:20+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm writing a patch with deprecation notices for 3-0-stable.  But I have a question: what branch do I use for the post-deprecation code?  (The code that no longer supports the escape parameter at all, rather than just giving a deprecation warning.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm writing a patch with deprecation notices for 3-0-stable. But
I have a question: what branch do I use for the post-deprecation
code? (The code that no longer supports the escape parameter at
all, rather than just giving a deprecation warning.)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-13T00:37:26+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-13T00:37:39+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">3</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>3-0-stable for the one that deprecates it and master for the one that removes it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;3-0-stable for the one that deprecates it and master for the one
that removes it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-13T04:51:38+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-13T04:51:50+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Cool, so this patch is done, tested, and ready for you to apply.  The 3 helper functions mentioned above (`FormTagHelper#text_area_tag`, `TagHelper#content_tag`, and `TagHelper#tag` ) will have the following behavior after these patches are applied:

* In 3.0.5, using the 'escape' parameter or option will show a deprecation message.
* In 3.1 the 'escape' parameter or option to these 3 methods is removed.  The correct way to specify escaping behavior is to call (or not call) `html_safe` on the parameters.  Both the rdoc and the tests are updated.

The attached zipfile contains two patches: 

* 3-0-stable-deprecate-escape.diff is a patch for the 3-0-stable branch
* master-remove-escape.diff is a patch for the master branch

I put a full day's work in to this and was careful. Please let me know if anything looks amiss.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Cool, so this patch is done, tested, and ready for you to apply.
The 3 helper functions mentioned above
(&lt;code&gt;FormTagHelper#text_area_tag&lt;/code&gt;,
&lt;code&gt;TagHelper#content_tag&lt;/code&gt;, and &lt;code&gt;TagHelper#tag&lt;/code&gt;
) will have the following behavior after these patches are
applied:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In 3.0.5, using the 'escape' parameter or option will show a
deprecation message.&lt;/li&gt;
&lt;li&gt;In 3.1 the 'escape' parameter or option to these 3 methods is
removed. The correct way to specify escaping behavior is to call
(or not call) &lt;code&gt;html_safe&lt;/code&gt; on the parameters. Both the
rdoc and the tests are updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The attached zipfile contains two patches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3-0-stable-deprecate-escape.diff is a patch for the 3-0-stable
branch&lt;/li&gt;
&lt;li&gt;master-remove-escape.diff is a patch for the master branch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I put a full day's work in to this and was careful. Please let
me know if anything looks amiss.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-13T22:11:35+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-13T22:11:47+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">5</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;In which is because their own magnificent kinds easily obtainable in a great plethora. Other than which will,&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora jewellery ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; ought to have this kind of charms that's generally personal in line with your really want? &lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-charms-c-9.html&quot;&gt;&lt;em&gt;Pandora&#160;Charms&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;In reality, you are able to consider numerous varieties related to Pandora drops&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-bracelets-c-3.html&quot;&gt;&lt;em&gt;Pandoras Bracelets&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; along with develop ones personal confidential types.&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;pandora ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; These kind of expensive jewelry have probably always been exceptional reveals regarding instances as well as special birthday festivities&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;In
which is because their own magnificent kinds easily obtainable in a
great plethora. Other than which will,&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora jewellery
ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; ought to have this kind of charms that's
generally personal in line with your really want? &lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/pandora-charms-c-9.html&quot;&gt;&lt;em&gt;
Pandora&amp;nbsp;Charms&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;In reality, you are able to
consider numerous varieties related to Pandora
drops&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-bracelets-c-3.html&quot;&gt;&lt;em&gt;Pandoras
Bracelets&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; along with develop ones personal
confidential types.&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;pandora
ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; These kind of expensive jewelry have
probably always been exceptional reveals regarding instances as
well as special birthday festivities&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora
NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-14T05:46:45+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-14T07:28:36+00:00</updated-at>
      <user-id type="integer">136876</user-id>
      <version type="integer">6</version>
      <user-name>pandora jewellry</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-16T07:09:52+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-16T07:20:11+00:00</updated-at>
      <user-id type="integer">137258</user-id>
      <version type="integer">7</version>
      <user-name>fgfhnmn</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Today, kids as babyish as Ashcan School or nine name-conscious and trend-alert, puma ducati buying at for solid garments rather than just throwing on what&#8217;s pure. Here are just some of the brands and trends your children hungered over 2011. The 80&#8242;s Are Back. You may have noticed a trend this year for evisu jeans, supra shoes, leggings petticoats, oversized tees, and big &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; shoes. This is a look that appeals to babies girls-it&#8217;s quirky and yet smart at the same time.
&lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; with success sets the charm for manner, lifestyle and gambols. This has been believed to serve for an ideal cross flight simulator. This has been fine-looking by most jocks and the Speed Cat is an old name for the industriousness which made &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; gain millions with this business. With many people converting more wellness conscious in time, a lot wants also to commit on a good pair of cross trainers. These are very indestructible and forward-looking just like the real carrying out of a real &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt;. It consumes been systematically on the forefront of design and carrying out when it pertains comfort and style commingled.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Today, kids as babyish as Ashcan School or nine name-conscious
and trend-alert, puma ducati buying at for solid garments rather
than just throwing on what&amp;#8217;s pure. Here are just some of the
brands and trends your children hungered over 2011. The 80&amp;#8242;s
Are Back. You may have noticed a trend this year for evisu jeans,
supra shoes, leggings petticoats, oversized tees, and big &lt;a href=
&quot;http:&quot;&gt;puma speed cat shoes. This is a look that appeals to babies
girls-it&amp;#8217;s quirky and yet smart at the same time.&lt;br&gt;
&lt;a href=&quot;http:&quot;&gt;Puma future cat with success sets the charm for
manner, lifestyle and gambols. This has been believed to serve for
an ideal cross flight simulator. This has been fine-looking by most
jocks and the Speed Cat is an old name for the industriousness
which made &lt;a href=&quot;http:&quot;&gt;Puma shoes gain millions with this
business. With many people converting more wellness conscious in
time, a lot wants also to commit on a good pair of cross trainers.
These are very indestructible and forward-looking just like the
real carrying out of a real &lt;a href=&quot;http:&quot;&gt;Puma future cat. It
consumes been systematically on the forefront of design and
carrying out when it pertains comfort and style commingled.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-17T07:22:58+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-17T07:38:05+00:00</updated-at>
      <user-id type="integer">137451</user-id>
      <version type="integer">8</version>
      <user-name>fghgghjg</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hey Brian thanks for your work, can you please upload the patch files directly, don't wrap them in a zip is much easier for me to apply them and test.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Brian thanks for your work, can you please upload the patch
files directly, don't wrap them in a zip is much easier for me to
apply them and test.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-17T18:57:38+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-17T18:58:01+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">9</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Sure. This is the patch for the 3-0-stable branch...</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sure. This is the patch for the 3-0-stable branch...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-17T19:11:11+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-17T19:11:24+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">10</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>and this is the patch for the master branch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;and this is the patch for the master branch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-17T19:11:34+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-17T19:11:50+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">11</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Hey Brian, first of all thanks for your work ...

About the master patch ...

&lt;pre&gt;&lt;code&gt;+      #   tag(&quot;img&quot;, {:src =&gt; &quot;open &amp;amp; shut.png&quot;.html_safe})&lt;/code&gt;&lt;/pre&gt;

I think is not a good example, mark as safe a thing that is going to be escaped otherwise.


&lt;pre&gt;&lt;code&gt;-                final_value = value.is_a?(Array) ? value.join(&quot; &quot;) : value
-                final_value = ERB::Util.html_escape(final_value) if escape
+                final_value = value.is_a?(Array) ? value.map{|v|ERB::Util.html_escape(v)}.join(&quot; &quot;) : ERB::Util.html_escape(value)&lt;/code&gt;&lt;/pre&gt;

I think is better if you just do the same as before but remove the if escape, seems more readable to me.

&lt;pre&gt;&lt;code&gt;-              unless options[:sanitize] == false
+              if options.fetch(:sanitize, true)
                 link_text = sanitize(link_text)
                 href      = sanitize(href)
+              else
+                link_text = link_text.html_safe
+                href      = href.html_safe
               end
-              content_tag(:a, link_text, link_attributes.merge('href' =&gt; href), !!options[:sanitize]) + punctuation.reverse.join('')
+              content_tag(:a, link_text, link_attributes.merge('href' =&gt; href)) + punctuation.reverse.join('')&lt;/code&gt;&lt;/pre&gt;

That's wrong we should avoid marking html_safe unsafe content, sanitize != escape

http://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/text_helper.rb#L13-29</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Brian, first of all thanks for your work ...&lt;/p&gt;
&lt;p&gt;About the master patch ...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;+      #   tag(&quot;img&quot;, {:src =&amp;gt; &quot;open &amp;amp; shut.png&quot;.html_safe})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think is not a good example, mark as safe a thing that is
going to be escaped otherwise.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;-                final_value = value.is_a?(Array) ? value.join(&quot; &quot;) : value
-                final_value = ERB::Util.html_escape(final_value) if escape
+                final_value = value.is_a?(Array) ? value.map{|v|ERB::Util.html_escape(v)}.join(&quot; &quot;) : ERB::Util.html_escape(value)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think is better if you just do the same as before but remove
the if escape, seems more readable to me.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;-              unless options[:sanitize] == false
+              if options.fetch(:sanitize, true)
                 link_text = sanitize(link_text)
                 href      = sanitize(href)
+              else
+                link_text = link_text.html_safe
+                href      = href.html_safe
               end
-              content_tag(:a, link_text, link_attributes.merge('href' =&amp;gt; href), !!options[:sanitize]) + punctuation.reverse.join('')
+              content_tag(:a, link_text, link_attributes.merge('href' =&amp;gt; href)) + punctuation.reverse.join('')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That's wrong we should avoid marking html_safe unsafe content,
sanitize != escape&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/text_helper.rb#L13-29&quot;&gt;
http://github.com/rails/rails/blob/master/actionpack/lib/action_vie...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-17T23:15:14+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-17T23:15:25+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">12</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Thanks for taking a detailed look at it, Santiago. 

@@@
+      #   tag(&quot;img&quot;, {:src =&gt; &quot;open &amp; shut.png&quot;.html_safe})
@@@

You make a good point. I'll change it to something better, like a string with an HTML tag in it.

@@@
-                final_value = value.is_a?(Array) ? value.join(&quot; &quot;) : value
-                final_value = ERB::Util.html_escape(final_value) if escape
+                final_value = value.is_a?(Array) ? value.map{|v|ERB::Util.html_escape(v)}.join(&quot; &quot;) : ERB::Util.html_escape(value)
@@@

At first I did it the way you suggested--just leave the old code in place but always call html_escape. It caused problems because (I think) joining an array of strings, some of which are unsafe, results in a string that's unsafe. Then we escape it so all the content from all the array elements gets escaped. 

So if there's an array and you want one of the elements to be considered safe you have to mark them all safe. If I remember correctly. This approach was a fix for that problem.

@@@
-              unless options[:sanitize] == false
+              if options.fetch(:sanitize, true)
                 link_text = sanitize(link_text)
                 href      = sanitize(href)
+              else
+                link_text = link_text.html_safe
+                href      = href.html_safe
               end
-              content_tag(:a, link_text, link_attributes.merge('href' =&gt; href), !!options[:sanitize]) + punctuation.reverse.join('')
+              content_tag(:a, link_text, link_attributes.merge('href' =&gt; href)) + punctuation.reverse.join('')
@@@

Yeah, this is a tricky case. I knew that sanitize != escape but the old code was passing !!options[:sanitize] to content_tag's &quot;escape&quot; parameter, so the effect was:
1. If sanitize was true we also escaped it after sanitizing. Now the sanitize function calls html_safe at the end (not as part of my change), so this old behavior is probably broken.
2. If sanitize was false we didn't escape it. My call to html_safe in the 'else' clause keeps this behavior. But I think you're right, I shouldn't call html_safe here. I should let the content be output as an unsafe string.

I'll revisit this code and let you know what I find.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for taking a detailed look at it, Santiago.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;+      #   tag(&quot;img&quot;, {:src =&amp;gt; &quot;open &amp;amp; shut.png&quot;.html_safe})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You make a good point. I'll change it to something better, like
a string with an HTML tag in it.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;-                final_value = value.is_a?(Array) ? value.join(&quot; &quot;) : value
-                final_value = ERB::Util.html_escape(final_value) if escape
+                final_value = value.is_a?(Array) ? value.map{|v|ERB::Util.html_escape(v)}.join(&quot; &quot;) : ERB::Util.html_escape(value)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;At first I did it the way you suggested--just leave the old code
in place but always call html_escape. It caused problems because (I
think) joining an array of strings, some of which are unsafe,
results in a string that's unsafe. Then we escape it so all the
content from all the array elements gets escaped.&lt;/p&gt;
&lt;p&gt;So if there's an array and you want one of the elements to be
considered safe you have to mark them all safe. If I remember
correctly. This approach was a fix for that problem.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;-              unless options[:sanitize] == false
+              if options.fetch(:sanitize, true)
                 link_text = sanitize(link_text)
                 href      = sanitize(href)
+              else
+                link_text = link_text.html_safe
+                href      = href.html_safe
               end
-              content_tag(:a, link_text, link_attributes.merge('href' =&amp;gt; href), !!options[:sanitize]) + punctuation.reverse.join('')
+              content_tag(:a, link_text, link_attributes.merge('href' =&amp;gt; href)) + punctuation.reverse.join('')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Yeah, this is a tricky case. I knew that sanitize != escape but
the old code was passing !!options[:sanitize] to content_tag's
&quot;escape&quot; parameter, so the effect was:&lt;br&gt;
1. If sanitize was true we also escaped it after sanitizing. Now
the sanitize function calls html_safe at the end (not as part of my
change), so this old behavior is probably broken.&lt;br&gt;
2. If sanitize was false we didn't escape it. My call to html_safe
in the 'else' clause keeps this behavior. But I think you're right,
I shouldn't call html_safe here. I should let the content be output
as an unsafe string.&lt;/p&gt;
&lt;p&gt;I'll revisit this code and let you know what I find.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-18T00:54:39+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-18T00:54:52+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">13</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>You know what I mean Satin? Satin is a kind of mixed fabric with satin silk, polyester and other fibers woven in the plot on the surface of the woven fabric over a number of root tissue, well organized, smooth and shiny. The satin &lt;a href=&quot;http://www.longmanmart.com/knowledge/corset-wedding-dresses.html&quot;&gt;corset wedding dress&lt;/a&gt; can give others a better feel like an aristocrat.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You know what I mean Satin? Satin is a kind of mixed fabric with
satin silk, polyester and other fibers woven in the plot on the
surface of the woven fabric over a number of root tissue, well
organized, smooth and shiny. The satin &lt;a href=
&quot;http://www.longmanmart.com/knowledge/corset-wedding-dresses.html&quot;&gt;corset
wedding dress&lt;/a&gt; can give others a better feel like an
aristocrat.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-18T07:37:44+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-18T10:10:47+00:00</updated-at>
      <user-id type="integer">137617</user-id>
      <version type="integer">14</version>
      <user-name>junjun555</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Hi Santiago,

Thanks again for the help! Here is a new patch for the master branch. This is what I did:

Re: your first point, you are right--the example wasn't good. I have fixed the `tag` example to something that makes more sense. The only case I could think of where you would ever put a `&lt;` or `&gt;` in an attribute was JavaScript so I did that. 

Re: your second point, for the correct behavior I think it needs to be left the way it was in my patch. Joining a mix of html-safe and unsafe strings results in a single unsafe string, and escaping that would result in escaping some parts that were already safe. This irb session illustrates the difference:

@@@ ruby
# This is what my change does
ruby-1.8.7-p330 :011 &gt; [ERB::Util.html_escape('a&lt;b'),ERB::Util.html_escape('b&lt;c'.html_safe)].join(&quot; &quot;)
 =&gt; &quot;a&amp;lt;b b&lt;c&quot; 
# This is what your proposed change does--it escapes b&lt;c even though it's safe
ruby-1.8.7-p330 :012 &gt; ERB::Util.html_escape(['a&lt;b','b&lt;c'.html_safe].join(&quot; &quot;))
 =&gt; &quot;a&amp;lt;b b&amp;lt;c&quot; 
@@@

Re: your third point, I now remember why I added the html_safe calls. I tried reverting them them but the pre-existing `test_auto_link_should_not_sanitize_input_when_sanitize_option_is_false` test failed because all the ampersands are turned into ampersand-amp;. The `auto_link` helper has never escaped ampersands. This makes sense because when you use auto_link the input is an HTML string already, so any escaping that the caller wants is up to them. You said &quot;we should avoid marking html_safe unsafe content&quot; but the regex that recognizes a URL stops when it reaches a less-than or greater-than character, so the URL is always safe. My addition of html_safe is required to keep the behavior consistent because the `escape` parameter was removed from the content_tag call on the next line (since it's no longer supported).

In a side note, it turns out the `sanitize` parameter to `auto_link` is most likely irrelevant because the regexes used for both email and url recognition stop when they reach the first angle bracket. So there will never be anything to sanitize in a url or email. But that's a discussion for another day.

So to sum it up, in the end the only change from the first patch was the example for `tag`.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Santiago,&lt;/p&gt;
&lt;p&gt;Thanks again for the help! Here is a new patch for the master
branch. This is what I did:&lt;/p&gt;
&lt;p&gt;Re: your first point, you are right--the example wasn't good. I
have fixed the &lt;code&gt;tag&lt;/code&gt; example to something that makes
more sense. The only case I could think of where you would ever put
a &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; in an attribute was
JavaScript so I did that.&lt;/p&gt;
&lt;p&gt;Re: your second point, for the correct behavior I think it needs
to be left the way it was in my patch. Joining a mix of html-safe
and unsafe strings results in a single unsafe string, and escaping
that would result in escaping some parts that were already safe.
This irb session illustrates the difference:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# This is what my change does
ruby-1.8.7-p330 :011 &amp;gt; [ERB::Util.html_escape('a&amp;lt;b'),ERB::Util.html_escape('b&amp;lt;c'.html_safe)].join(&quot; &quot;)
 =&amp;gt; &quot;a&amp;amp;lt;b b&amp;lt;c&quot; 
# This is what your proposed change does--it escapes b&amp;lt;c even though it's safe
ruby-1.8.7-p330 :012 &amp;gt; ERB::Util.html_escape(['a&amp;lt;b','b&amp;lt;c'.html_safe].join(&quot; &quot;))
 =&amp;gt; &quot;a&amp;amp;lt;b b&amp;amp;lt;c&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Re: your third point, I now remember why I added the html_safe
calls. I tried reverting them them but the pre-existing
&lt;code&gt;test_auto_link_should_not_sanitize_input_when_sanitize_option_is_false&lt;/code&gt;
test failed because all the ampersands are turned into
ampersand-amp;. The &lt;code&gt;auto_link&lt;/code&gt; helper has never escaped
ampersands. This makes sense because when you use auto_link the
input is an HTML string already, so any escaping that the caller
wants is up to them. You said &quot;we should avoid marking html_safe
unsafe content&quot; but the regex that recognizes a URL stops when it
reaches a less-than or greater-than character, so the URL is always
safe. My addition of html_safe is required to keep the behavior
consistent because the &lt;code&gt;escape&lt;/code&gt; parameter was removed
from the content_tag call on the next line (since it's no longer
supported).&lt;/p&gt;
&lt;p&gt;In a side note, it turns out the &lt;code&gt;sanitize&lt;/code&gt; parameter
to &lt;code&gt;auto_link&lt;/code&gt; is most likely irrelevant because the
regexes used for both email and url recognition stop when they
reach the first angle bracket. So there will never be anything to
sanitize in a url or email. But that's a discussion for another
day.&lt;/p&gt;
&lt;p&gt;So to sum it up, in the end the only change from the first patch
was the example for &lt;code&gt;tag&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-18T17:25:08+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-18T17:25:20+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">15</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Hi,

I was wondering if there's anything I can do to help push this along. I saw that a 3.0.5rc1 was pushed out today, and the original plan was to put the 'escape' deprecations in 3.0.5.

Would it help if I add some more tests to &quot;document&quot; why I made the changes we discussed in the last couple of posts above?

Or would it help if someone else put another pair of eyes on the patch so they could weigh in on the right approach?

I'm willing to do more work to get this patch in.  It would be a shame to let it die.  Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I was wondering if there's anything I can do to help push this
along. I saw that a 3.0.5rc1 was pushed out today, and the original
plan was to put the 'escape' deprecations in 3.0.5.&lt;/p&gt;
&lt;p&gt;Would it help if I add some more tests to &quot;document&quot; why I made
the changes we discussed in the last couple of posts above?&lt;/p&gt;
&lt;p&gt;Or would it help if someone else put another pair of eyes on the
patch so they could weigh in on the right approach?&lt;/p&gt;
&lt;p&gt;I'm willing to do more work to get this patch in. It would be a
shame to let it die. Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-23T21:07:20+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-23T21:07:34+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">16</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Hey Brian, I'm really sorry for the delay, but I'm running out of time.
It takes a lot of time to review patches :( at least for me.

Anyways the idea of this patch is to go for 3.1 and to one 3.0.x but we are late to put it on 3.0.5
I will take a look ASAP.
Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Brian, I'm really sorry for the delay, but I'm running out
of time.&lt;br&gt;
It takes a lot of time to review patches :( at least for me.&lt;/p&gt;
&lt;p&gt;Anyways the idea of this patch is to go for 3.1 and to one 3.0.x
but we are late to put it on 3.0.5&lt;br&gt;
I will take a look ASAP.&lt;br&gt;
Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-24T00:23:04+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-24T00:23:16+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">17</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Hey, Santiago, no problem. I don't even know how you find time to do everything you do. I know reviewing patches is time-consuming. :-)

It's not a big deal if it's too late for the deprecations to make it into 3.0.5. There's always another version.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey, Santiago, no problem. I don't even know how you find time
to do everything you do. I know reviewing patches is
time-consuming. :-)&lt;/p&gt;
&lt;p&gt;It's not a big deal if it's too late for the deprecations to
make it into 3.0.5. There's always another version.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-24T00:40:19+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-02-24T00:40:31+00:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">18</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>+1 This would be a nice change to have, to finalize the migration to html_safe in Rails</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 This would be a nice change to have, to finalize the
migration to html_safe in Rails&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-20T02:34:23+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-03-20T02:34:36+00:00</updated-at>
      <user-id type="integer">12060</user-id>
      <version type="integer">19</version>
      <user-name>Ed Ruder</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Today the company to build a website for a job so important that can not simply say yes or no to it. Website has become the media and the leading business tool for every business, it brings an undeniable advantage. Here are the reasons to start building a website: Website
* Establish business presence on the internet, the opportunity to interact with customers anywhere and at any time. &lt;a href=&quot;http://ds-b.jp/&quot;&gt;&#12507;&#12540;&#12512;&#12506;&#12540;&#12472;&#35069;&#20316;&lt;/a&gt;
* Introduction of products and services in a lively and interactive. &lt;a href=&quot;http://ds-b.jp/&quot;&gt;&#12507;&#12540;&#12512;&#12506;&#12540;&#12472;&#21046;&#20316;&lt;/a&gt;
* Create opportunities to sell goods in a professional manner without costly. &lt;a href=&quot;http://ds-b.jp/&quot;&gt;&#12507;&#12540;&#12512;&#12506;&#12540;&#12472;&#20316;&#25104;&lt;/a&gt;
* The opportunity to serve customers better, achieve greater satisfaction from customers. &lt;a href=&quot;http://ds-b.jp/&quot;&gt;&#12507;&#12540;&#12512;&#12506;&#12540;&#12472;&#20316;&#25104;&#12477;&#12501;&#12488;&lt;/a&gt;
* Create a professional image in public, effective tool to implement marketing and PR campaigns. &lt;a href=&quot;http://ds-b.jp/&quot;&gt;&#12507;&#12540;&#12512;&#12506;&#12540;&#12472;&#12475;&#12511;&#12490;&#12540;&lt;/a&gt;
* The website is simply not a cause of failure of the business. &lt;a href=&quot;http://ds-b.jp/&quot;&gt;CMS&lt;/a&gt;
Your website is not only eye-catching, fast loading, meet customer needs, user-friendly but also friendly to Google, Yahoo, Bing (the popular search engines today) to website is always a high position on search engines this. Web promotion would be simpler if your website is programmed with the search engine-friendly from the beginning. With the development of talented engineers, professionals, OSS will design you a website with everything you need to exploit the strengths of the internet, making the reader interested in learning more about:
* The mission of your company. &lt;a href=&quot;http://ds-b.jp/&quot;&gt;&#12499;&#12472;&#12493;&#12473;&#12502;&#12525;&#12464;&lt;/a&gt;
* Services of your company.
* Help you identify the object.
* Create the form and feel according to your specific needs.
* Making site is always lively and eye-catching access.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Today the company to build a website for a job so important that
can not simply say yes or no to it. Website has become the media
and the leading business tool for every business, it brings an
undeniable advantage. Here are the reasons to start building a
website: Website&lt;br&gt;
* Establish business presence on the internet, the opportunity to
interact with customers anywhere and at any time. &lt;a href=
&quot;http://ds-b.jp/&quot;&gt;&amp;#12507;&amp;#12540;&amp;#12512;&amp;#12506;&amp;#12540;&amp;#12472;&amp;#35069;&amp;#20316;&lt;/a&gt;
* Introduction of products and services in a lively and
interactive. &lt;a href=
&quot;http://ds-b.jp/&quot;&gt;&amp;#12507;&amp;#12540;&amp;#12512;&amp;#12506;&amp;#12540;&amp;#12472;&amp;#21046;&amp;#20316;&lt;/a&gt;
* Create opportunities to sell goods in a professional manner
without costly. &lt;a href=
&quot;http://ds-b.jp/&quot;&gt;&amp;#12507;&amp;#12540;&amp;#12512;&amp;#12506;&amp;#12540;&amp;#12472;&amp;#20316;&amp;#25104;&lt;/a&gt;
* The opportunity to serve customers better, achieve greater
satisfaction from customers. &lt;a href=
&quot;http://ds-b.jp/&quot;&gt;&amp;#12507;&amp;#12540;&amp;#12512;&amp;#12506;&amp;#12540;&amp;#12472;&amp;#20316;&amp;#25104;&amp;#12477;&amp;#12501;&amp;#12488;&lt;/a&gt;
* Create a professional image in public, effective tool to
implement marketing and PR campaigns. &lt;a href=
&quot;http://ds-b.jp/&quot;&gt;&amp;#12507;&amp;#12540;&amp;#12512;&amp;#12506;&amp;#12540;&amp;#12472;&amp;#12475;&amp;#12511;&amp;#12490;&amp;#12540;&lt;/a&gt;
* The website is simply not a cause of failure of the business.
&lt;a href=&quot;http://ds-b.jp/&quot;&gt;CMS&lt;/a&gt; Your website is not only
eye-catching, fast loading, meet customer needs, user-friendly but
also friendly to Google, Yahoo, Bing (the popular search engines
today) to website is always a high position on search engines this.
Web promotion would be simpler if your website is programmed with
the search engine-friendly from the beginning. With the development
of talented engineers, professionals, OSS will design you a website
with everything you need to exploit the strengths of the internet,
making the reader interested in learning more about:&lt;br&gt;
* The mission of your company. &lt;a href=
&quot;http://ds-b.jp/&quot;&gt;&amp;#12499;&amp;#12472;&amp;#12493;&amp;#12473;&amp;#12502;&amp;#12525;&amp;#12464;&lt;/a&gt;
* Services of your company. * Help you identify the object. *
Create the form and feel according to your specific needs. * Making
site is always lively and eye-catching access.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-22T08:50:36+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-03-22T08:50:52+00:00</updated-at>
      <user-id type="integer">142293</user-id>
      <version type="integer">20</version>
      <user-name>tieunguyet</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;gucci watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://www.watcheseshop.com/&quot;&gt;gucci
watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-26T01:30:12+00:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-03-26T01:41:50+00:00</updated-at>
      <user-id type="integer">142823</user-id>
      <version type="integer">21</version>
      <user-name>bingbing</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Hi again,

Sorry to bump this but here goes: is there anything I can do to help get this deprecation of the 'escape' parameter done and approved? It's *so* close. The patch is in. Santiago has already reviewed it once, gave three suggestions, I implemented one of his suggestions and tried my best to explain why I think the other two should remain as is.  

Would it help if I contribute more tests?  Is there someone else who could approve the change? Should I provide more explanation of the changes I made? Anything?

It would really be a shame if this work went to waste since (a) it fixes real problems (the escape parameter doesn't work anymore) and (b) there seems to be general agreement that it should be done and no one has expressed opposition.

I'll help any way I can.

Thanks.

Brian</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi again,&lt;/p&gt;
&lt;p&gt;Sorry to bump this but here goes: is there anything I can do to
help get this deprecation of the 'escape' parameter done and
approved? It's &lt;em&gt;so&lt;/em&gt; close. The patch is in. Santiago has
already reviewed it once, gave three suggestions, I implemented one
of his suggestions and tried my best to explain why I think the
other two should remain as is.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Would it help if I contribute more tests? Is there someone else
who could approve the change? Should I provide more explanation of
the changes I made? Anything?&lt;/p&gt;
&lt;p&gt;It would really be a shame if this work went to waste since (a)
it fixes real problems (the escape parameter doesn't work anymore)
and (b) there seems to be general agreement that it should be done
and no one has expressed opposition.&lt;/p&gt;
&lt;p&gt;I'll help any way I can.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;
&lt;p&gt;Brian&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-29T05:56:07+01:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-03-29T05:56:23+01:00</updated-at>
      <user-id type="integer">12061</user-id>
      <version type="integer">22</version>
      <user-name>Brian Morearty</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Brian I need time to review a bit more and push I'm really really busy. Don't worry this will go in before 3.1 release.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Brian I need time to review a bit more and push I'm really
really busy. Don't worry this will go in before 3.1 release.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-29T14:46:01+01:00</created-at>
      <creator-id type="integer">12061</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71470</milestone-id>
      <number type="integer">6421</number>
      <permalink>deprecate-escape-parameteroption-in-three-helper-functions</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>content_tag escape helpers html_safe tag text_area_tag</tag>
      <title>Deprecate 'escape' parameter/option in three helper functions</title>
      <updated-at type="datetime">2011-03-29T14:46:16+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">23</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Brian Morearty</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6421</url>
      <milestone-title>3.1</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>66eeaae094ba44cb41d7d430965b1ebf473a5662</code>
      <content-type>application/x-zip-compressed</content-type>
      <created-at type="datetime">2011-02-13T22:11:35+00:00</created-at>
      <filename>remove-escape-option.zip</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">910167</id>
      <size type="integer">7711</size>
      <uploader-id type="integer">12061</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/910167/remove-escape-option.zip</url>
    </attachment>
    <attachment type="Attachment">
      <code>b79b6398f28841bf5e6b4ee081b2b5fffb8e19d5</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-17T19:11:11+00:00</created-at>
      <filename>3-0-stable-deprecate-escape.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">917968</id>
      <size type="integer">11856</size>
      <uploader-id type="integer">12061</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/917968/3-0-stable-deprecate-escape.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>f01274823916cb06847ae3239ecb6509235852cd</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-17T19:11:34+00:00</created-at>
      <filename>master-remove-escape.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">917969</id>
      <size type="integer">16417</size>
      <uploader-id type="integer">12061</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/917969/master-remove-escape.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>a20eaf030ef365641016268e33db2c7365b7340e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-18T17:25:08+00:00</created-at>
      <filename>master-remove-escape-2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">919867</id>
      <size type="integer">16498</size>
      <uploader-id type="integer">12061</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/919867/master-remove-escape-2.diff</url>
    </attachment>
  </attachments>
</ticket>
