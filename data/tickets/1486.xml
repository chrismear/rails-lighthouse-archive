<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-20T02:22:43+01:00</created-at>
  <creator-id type="integer">20185</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1486</number>
  <permalink>active-record-conditions-to-deal-with-nils-in-arrays</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord patch</tag>
  <title>active record conditions to deal with nils in arrays</title>
  <updated-at type="datetime">2010-07-20T02:22:43+01:00</updated-at>
  <user-id type="integer">20185</user-id>
  <version type="integer">3</version>
  <user-name>Nick Sellen</user-name>
  <creator-name>Nick Sellen</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1486</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>currently, this:
@@@ ruby
MyModel.find(:all,:conditions =&gt; {:some_param =&gt; [nil]})
@@@

returns differently to:
@@@ ruby
MyModel.find(:all,:conditions =&gt; {:some_param =&gt; nil})
@@@

(the difference being whether the nil is in an array or not)

This is due to the situation where this will return the expected result set:
@@@
select * from events where venue_id is null
@@@

but this will return an empty set:
@@@
select * from events where venue_id in (null)
@@@

I don't have access to anything other than MySQL databases so can't test whether this affects all database vendors.

The following demonstrates the behaviour:
@@@ ruby
SomeActiveRecordModel.send(:sanitize_sql_hash_for_conditions,{:some_param =&gt; [nil]})
@@@

the existing ActiveRecord will return:
@@@
`events`.`some_param` IN (NULL)
@@@

my patch changes it to return:
@@@
(`events`.`some_param` IN (NULL) OR `events`.`some_param` IS NULL)
@@@

This is my first patch so please forgive and inform me if something is not as it should be.</original-body>
  <latest-body>currently, this:
@@@ ruby
MyModel.find(:all,:conditions =&gt; {:some_param =&gt; [nil]})
@@@

returns differently to:
@@@ ruby
MyModel.find(:all,:conditions =&gt; {:some_param =&gt; nil})
@@@

(the difference being whether the nil is in an array or not)

This is due to the situation where this will return the expected result set:
@@@
select * from events where venue_id is null
@@@

but this will return an empty set:
@@@
select * from events where venue_id in (null)
@@@

I don't have access to anything other than MySQL databases so can't test whether this affects all database vendors.

The following demonstrates the behaviour:
@@@ ruby
SomeActiveRecordModel.send(:sanitize_sql_hash_for_conditions,{:some_param =&gt; [nil]})
@@@

the existing ActiveRecord will return:
@@@
`events`.`some_param` IN (NULL)
@@@

my patch changes it to return:
@@@
(`events`.`some_param` IN (NULL) OR `events`.`some_param` IS NULL)
@@@

This is my first patch so please forgive and inform me if something is not as it should be.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;currently, this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
MyModel.find(:all,:conditions =&amp;gt; {:some_param =&amp;gt; [nil]})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;returns differently to:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
MyModel.find(:all,:conditions =&amp;gt; {:some_param =&amp;gt; nil})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(the difference being whether the nil is in an array or not)&lt;/p&gt;
&lt;p&gt;This is due to the situation where this will return the expected
result set:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
select * from events where venue_id is null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but this will return an empty set:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
select * from events where venue_id in (null)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don't have access to anything other than MySQL databases so
can't test whether this affects all database vendors.&lt;/p&gt;
&lt;p&gt;The following demonstrates the behaviour:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
SomeActiveRecordModel.send(:sanitize_sql_hash_for_conditions,{:some_param =&amp;gt; [nil]})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the existing ActiveRecord will return:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
`events`.`some_param` IN (NULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;my patch changes it to return:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
(`events`.`some_param` IN (NULL) OR `events`.`some_param` IS NULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is my first patch so please forgive and inform me if
something is not as it should be.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>currently, this:
@@@ ruby
MyModel.find(:all,:conditions =&gt; {:some_param =&gt; [nil]})
@@@

returns differently to:
@@@ ruby
MyModel.find(:all,:conditions =&gt; {:some_param =&gt; nil})
@@@

(the difference being whether the nil is in an array or not)

This is due to the situation where this will return the expected result set:
@@@
select * from events where venue_id is null
@@@

but this will return an empty set:
@@@
select * from events where venue_id in (null)
@@@

I don't have access to anything other than MySQL databases so can't test whether this affects all database vendors.

The following demonstrates the behaviour:
@@@ ruby
SomeActiveRecordModel.send(:sanitize_sql_hash_for_conditions,{:some_param =&gt; [nil]})
@@@

the existing ActiveRecord will return:
@@@
`events`.`some_param` IN (NULL)
@@@

my patch changes it to return:
@@@
(`events`.`some_param` IN (NULL) OR `events`.`some_param` IS NULL)
@@@

This is my first patch so please forgive and inform me if something is not as it should be.</body>
      <body-html>&lt;div&gt;&lt;p&gt;currently, this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
MyModel.find(:all,:conditions =&amp;gt; {:some_param =&amp;gt; [nil]})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;returns differently to:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
MyModel.find(:all,:conditions =&amp;gt; {:some_param =&amp;gt; nil})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(the difference being whether the nil is in an array or not)&lt;/p&gt;
&lt;p&gt;This is due to the situation where this will return the expected
result set:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
select * from events where venue_id is null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but this will return an empty set:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
select * from events where venue_id in (null)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don't have access to anything other than MySQL databases so
can't test whether this affects all database vendors.&lt;/p&gt;
&lt;p&gt;The following demonstrates the behaviour:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
SomeActiveRecordModel.send(:sanitize_sql_hash_for_conditions,{:some_param =&amp;gt; [nil]})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the existing ActiveRecord will return:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
`events`.`some_param` IN (NULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;my patch changes it to return:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
(`events`.`some_param` IN (NULL) OR `events`.`some_param` IS NULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is my first patch so please forgive and inform me if
something is not as it should be.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-27T17:24:51+00:00</created-at>
      <creator-id type="integer">20185</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1486</number>
      <permalink>active-record-conditions-to-deal-with-nils-in-arrays</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>active record conditions to deal with nils in arrays</title>
      <updated-at type="datetime">2008-11-27T17:24:53+00:00</updated-at>
      <user-id type="integer">20185</user-id>
      <version type="integer">1</version>
      <user-name>Nick Sellen</user-name>
      <creator-name>Nick Sellen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1486</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This doesn't seem like something we should be changing.  The whole issue on whether 'null is a value' is something that's pretty deeply held amongst relational theorists and the IN (NULL) behaviour is intentional.

I think this is just one of those cases where the impedence mismatch between the ruby and SQL view of the world is incompatible and you need to handle that in code.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This doesn't seem like something we should be changing. The
whole issue on whether 'null is a value' is something that's pretty
deeply held amongst relational theorists and the IN (NULL)
behaviour is intentional.&lt;/p&gt;
&lt;p&gt;I think this is just one of those cases where the impedence
mismatch between the ruby and SQL view of the world is incompatible
and you need to handle that in code.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-29T11:58:27+00:00</created-at>
      <creator-id type="integer">20185</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: patch
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1486</number>
      <permalink>active-record-conditions-to-deal-with-nils-in-arrays</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch</tag>
      <title>active record conditions to deal with nils in arrays</title>
      <updated-at type="datetime">2008-11-29T11:58:31+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Nick Sellen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1486</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>ok 

activerecord already makes allowance for a nil/null oddity, i.e.:
@@@ ruby
:conditions =&gt; {:something =&gt; nil}
@@@
(resulting in &quot;something is null&quot; rather than &quot;something = &lt;value&gt;&quot; as for any other value)

... my feeling is that as the user experience ends up inconsistent and that as ruby nil is already not simply translated to SQL null (as in the above example) that not much is gained by passing SQL's strange idea of null through to the ruby world where nil very much is a value.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ok&lt;/p&gt;
&lt;p&gt;activerecord already makes allowance for a nil/null oddity,
i.e.:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
:conditions =&amp;gt; {:something =&amp;gt; nil}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(resulting in &quot;something is null&quot; rather than &quot;something = &quot; as
for any other value)&lt;/p&gt;
&lt;p&gt;... my feeling is that as the user experience ends up
inconsistent and that as ruby nil is already not simply translated
to SQL null (as in the above example) that not much is gained by
passing SQL's strange idea of null through to the ruby world where
nil very much is a value.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-29T18:43:55+00:00</created-at>
      <creator-id type="integer">20185</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1486</number>
      <permalink>active-record-conditions-to-deal-with-nils-in-arrays</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord patch</tag>
      <title>active record conditions to deal with nils in arrays</title>
      <updated-at type="datetime">2008-11-29T18:43:59+00:00</updated-at>
      <user-id type="integer">20185</user-id>
      <version type="integer">3</version>
      <user-name>Nick Sellen</user-name>
      <creator-name>Nick Sellen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1486</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>3360869ee31f17ab470af8647e9ffa15b03a0d03</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-11-27T17:24:51+00:00</created-at>
      <filename>active_record_conditions_with_arrays_containing_nil_fix.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">66019</id>
      <size type="integer">1476</size>
      <uploader-id type="integer">20185</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/66019/active_record_conditions_with_arrays_containing_nil_fix.patch</url>
    </attachment>
  </attachments>
</ticket>
