<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-01-29T02:12:11+00:00</created-at>
  <creator-id type="integer">84446</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3809</number>
  <permalink>default-scope-not-changing-when-class-is-unloaded-and-reloaded</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>default_scope &quot;rails 2.3.4&quot;</tag>
  <title>default scope not changing when class is unloaded and reloaded</title>
  <updated-at type="datetime">2010-10-19T00:49:58+01:00</updated-at>
  <user-id type="integer">7697</user-id>
  <version type="integer">3</version>
  <user-name>Andrew White</user-name>
  <creator-name>Farhad</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3809</url>
  <priority-name>Low</priority-name>
  <original-body>Rails 2.3.4

It seems that the default_scope doesn't change when reloading an object.  

To recreate:

@@@ 
class Foo &lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope :conditions =&gt; &quot;id &lt; 10&quot;
end
@@@ 

If in the console I type:
@@@
&gt; Foo.count
@@@

I see the following appearing in the output log stream:

DEBUG: Jan 28 17:57:12: SQL (0.3ms)   SELECT count(*) AS count_all FROM `foos` WHERE (id &lt; 10) 

Now, change the default scope such that the conditions are:

@@@ ruby
class Foo &lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope :conditions =&gt; &quot;id &gt; 5&quot;
end
@@@ 

In console do the following:
@@@
&gt;&gt; reload!
Reloading...
=&gt; true
&gt;&gt; Foo.count
Loading Foo
@@@

We see in the output log:

DEBUG: Jan 28 18:02:24: SQL (0.2ms)   SELECT count(*) AS count_all FROM `foos` WHERE (id &lt; 10) 

but if I exit console and run Foo.count again I get the correct response:

DEBUG: Jan 28 18:03:38: SQL (0.2ms)   SELECT count(*) AS count_all FROM `foos` WHERE (id &gt; 5) 

NOTE: the system is rails 2.3.4 but we've changed the output log to match what we have in our other systems running 1.2.6 for compatibility with our log parsers.</original-body>
  <latest-body>Rails 2.3.4

It seems that the default_scope doesn't change when reloading an object.  

To recreate:

@@@ 
class Foo &lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope :conditions =&gt; &quot;id &lt; 10&quot;
end
@@@ 

If in the console I type:
@@@
&gt; Foo.count
@@@

I see the following appearing in the output log stream:

DEBUG: Jan 28 17:57:12: SQL (0.3ms)   SELECT count(*) AS count_all FROM `foos` WHERE (id &lt; 10) 

Now, change the default scope such that the conditions are:

@@@ ruby
class Foo &lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope :conditions =&gt; &quot;id &gt; 5&quot;
end
@@@ 

In console do the following:
@@@
&gt;&gt; reload!
Reloading...
=&gt; true
&gt;&gt; Foo.count
Loading Foo
@@@

We see in the output log:

DEBUG: Jan 28 18:02:24: SQL (0.2ms)   SELECT count(*) AS count_all FROM `foos` WHERE (id &lt; 10) 

but if I exit console and run Foo.count again I get the correct response:

DEBUG: Jan 28 18:03:38: SQL (0.2ms)   SELECT count(*) AS count_all FROM `foos` WHERE (id &gt; 5) 

NOTE: the system is rails 2.3.4 but we've changed the output log to match what we have in our other systems running 1.2.6 for compatibility with our log parsers.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Rails 2.3.4&lt;/p&gt;
&lt;p&gt;It seems that the default_scope doesn't change when reloading an
object.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;To recreate:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Foo &amp;lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope :conditions =&amp;gt; &quot;id &amp;lt; 10&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If in the console I type:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; Foo.count&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I see the following appearing in the output log stream:&lt;/p&gt;
&lt;p&gt;DEBUG: Jan 28 17:57:12: SQL (0.3ms) SELECT count(*) AS count_all
FROM &lt;code&gt;foos&lt;/code&gt; WHERE (id &amp;lt; 10)&lt;/p&gt;
&lt;p&gt;Now, change the default scope such that the conditions are:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Foo &amp;lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope :conditions =&amp;gt; &quot;id &amp;gt; 5&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In console do the following:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; reload!
Reloading...
=&amp;gt; true
&amp;gt;&amp;gt; Foo.count
Loading Foo&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We see in the output log:&lt;/p&gt;
&lt;p&gt;DEBUG: Jan 28 18:02:24: SQL (0.2ms) SELECT count(*) AS count_all
FROM &lt;code&gt;foos&lt;/code&gt; WHERE (id &amp;lt; 10)&lt;/p&gt;
&lt;p&gt;but if I exit console and run Foo.count again I get the correct
response:&lt;/p&gt;
&lt;p&gt;DEBUG: Jan 28 18:03:38: SQL (0.2ms) SELECT count(*) AS count_all
FROM &lt;code&gt;foos&lt;/code&gt; WHERE (id &amp;gt; 5)&lt;/p&gt;
&lt;p&gt;NOTE: the system is rails 2.3.4 but we've changed the output log
to match what we have in our other systems running 1.2.6 for
compatibility with our log parsers.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails 2.3.4

It seems that the default_scope doesn't change when reloading an object.  

To recreate:

@@@ 
class Foo &lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope :conditions =&gt; &quot;id &lt; 10&quot;
end
@@@ 

If in the console I type:
@@@
&gt; Foo.count
@@@

I see the following appearing in the output log stream:

DEBUG: Jan 28 17:57:12: SQL (0.3ms)   SELECT count(*) AS count_all FROM `foos` WHERE (id &lt; 10) 

Now, change the default scope such that the conditions are:

@@@ ruby
class Foo &lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope :conditions =&gt; &quot;id &gt; 5&quot;
end
@@@ 

In console do the following:
@@@
&gt;&gt; reload!
Reloading...
=&gt; true
&gt;&gt; Foo.count
Loading Foo
@@@

We see in the output log:

DEBUG: Jan 28 18:02:24: SQL (0.2ms)   SELECT count(*) AS count_all FROM `foos` WHERE (id &lt; 10) 

but if I exit console and run Foo.count again I get the correct response:

DEBUG: Jan 28 18:03:38: SQL (0.2ms)   SELECT count(*) AS count_all FROM `foos` WHERE (id &gt; 5) 

NOTE: the system is rails 2.3.4 but we've changed the output log to match what we have in our other systems running 1.2.6 for compatibility with our log parsers.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails 2.3.4&lt;/p&gt;
&lt;p&gt;It seems that the default_scope doesn't change when reloading an
object.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;To recreate:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Foo &amp;lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope :conditions =&amp;gt; &quot;id &amp;lt; 10&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If in the console I type:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; Foo.count&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I see the following appearing in the output log stream:&lt;/p&gt;
&lt;p&gt;DEBUG: Jan 28 17:57:12: SQL (0.3ms) SELECT count(*) AS count_all
FROM &lt;code&gt;foos&lt;/code&gt; WHERE (id &amp;lt; 10)&lt;/p&gt;
&lt;p&gt;Now, change the default scope such that the conditions are:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Foo &amp;lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope :conditions =&amp;gt; &quot;id &amp;gt; 5&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In console do the following:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; reload!
Reloading...
=&amp;gt; true
&amp;gt;&amp;gt; Foo.count
Loading Foo&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We see in the output log:&lt;/p&gt;
&lt;p&gt;DEBUG: Jan 28 18:02:24: SQL (0.2ms) SELECT count(*) AS count_all
FROM &lt;code&gt;foos&lt;/code&gt; WHERE (id &amp;lt; 10)&lt;/p&gt;
&lt;p&gt;but if I exit console and run Foo.count again I get the correct
response:&lt;/p&gt;
&lt;p&gt;DEBUG: Jan 28 18:03:38: SQL (0.2ms) SELECT count(*) AS count_all
FROM &lt;code&gt;foos&lt;/code&gt; WHERE (id &amp;gt; 5)&lt;/p&gt;
&lt;p&gt;NOTE: the system is rails 2.3.4 but we've changed the output log
to match what we have in our other systems running 1.2.6 for
compatibility with our log parsers.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-29T02:12:11+00:00</created-at>
      <creator-id type="integer">84446</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3809</number>
      <permalink>default-scope-not-changing-when-class-is-unloaded-and-reloaded</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>default_scope &quot;rails 2.3.4&quot;</tag>
      <title>default scope not changing when class is unloaded and reloaded</title>
      <updated-at type="datetime">2010-01-29T02:12:13+00:00</updated-at>
      <user-id type="integer">84446</user-id>
      <version type="integer">1</version>
      <user-name>Farhad</user-name>
      <creator-name>Farhad</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3809</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

On the current `master`, it seems like this issue has been fixed.

@@@ ruby
# Foo.rb
class Foo &lt; ActiveRecord::Base
  puts &quot;Loading Foo&quot;
  default_scope where(&quot;id &lt; 10&quot;)
end
@@@

@@@
# Rails console
Loading development environment (Rails 3.1.0.beta)
irb(main):001:0&gt; Foo.count
Loading Foo
  SQL (0.1ms)  SELECT COUNT(*) FROM &quot;foos&quot; WHERE (id &lt; 10)
=&gt; 0
@@@

Change the default scope

@@@ ruby
# Foo.rb
class Foo &lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope where(&quot;id &gt; 5&quot;)
end
@@@

@@@
# Rails console
irb(main):002:0&gt; reload!
Reloading...
=&gt; true
irb(main):003:0&gt; Foo.count
Loading Foo
  SQL (0.2ms)  SELECT COUNT(*) FROM &quot;foos&quot; WHERE (id &gt; 5)
=&gt; 0
irb(main):004:0&gt; 
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;On the current &lt;code&gt;master&lt;/code&gt;, it seems like this issue has
been fixed.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# Foo.rb
class Foo &amp;lt; ActiveRecord::Base
  puts &quot;Loading Foo&quot;
  default_scope where(&quot;id &amp;lt; 10&quot;)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;# Rails console
Loading development environment (Rails 3.1.0.beta)
irb(main):001:0&amp;gt; Foo.count
Loading Foo
  SQL (0.1ms)  SELECT COUNT(*) FROM &quot;foos&quot; WHERE (id &amp;lt; 10)
=&amp;gt; 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Change the default scope&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# Foo.rb
class Foo &amp;lt; ActiveRecord::Base
 puts &quot;Loading Foo&quot;
 default_scope where(&quot;id &amp;gt; 5&quot;)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;# Rails console
irb(main):002:0&amp;gt; reload!
Reloading...
=&amp;gt; true
irb(main):003:0&amp;gt; Foo.count
Loading Foo
  SQL (0.2ms)  SELECT COUNT(*) FROM &quot;foos&quot; WHERE (id &amp;gt; 5)
=&amp;gt; 0
irb(main):004:0&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-17T17:53:17+01:00</created-at>
      <creator-id type="integer">84446</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3809</number>
      <permalink>default-scope-not-changing-when-class-is-unloaded-and-reloaded</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>default_scope &quot;rails 2.3.4&quot;</tag>
      <title>default scope not changing when class is unloaded and reloaded</title>
      <updated-at type="datetime">2010-10-17T17:53:20+01:00</updated-at>
      <user-id type="integer">25293</user-id>
      <version type="integer">2</version>
      <user-name>Prem Sichanugrist (sikachu)</user-name>
      <creator-name>Farhad</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3809</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, it was fixed by the commits on #5497 - though looking at this it needs backporting to 2-3-stable as well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, it was fixed by the commits on &lt;a href=
&quot;/projects/8994/tickets/5497&quot; title=&quot;Ticket #5497&quot;&gt;#5497&lt;/a&gt; -
though looking at this it needs backporting to 2-3-stable as
well.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-19T00:49:56+01:00</created-at>
      <creator-id type="integer">84446</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3809</number>
      <permalink>default-scope-not-changing-when-class-is-unloaded-and-reloaded</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>default_scope &quot;rails 2.3.4&quot;</tag>
      <title>default scope not changing when class is unloaded and reloaded</title>
      <updated-at type="datetime">2010-10-19T00:49:58+01:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">3</version>
      <user-name>Andrew White</user-name>
      <creator-name>Farhad</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3809</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
