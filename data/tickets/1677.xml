<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-21T14:04:54+00:00</created-at>
  <creator-id type="integer">10613</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1677</number>
  <permalink>association-proxies-using-class-methods-with-named-scopes</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>Association proxies using class methods with named scopes</title>
  <updated-at type="datetime">2011-02-21T14:04:54+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">4</version>
  <user-name>Repository</user-name>
  <creator-name>Matt Jankowski</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1677</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I believe this occurs in both 2.0 and 2.2.

When you attempt to chain named_scopes together in a class method, and then call that class method through an association proxy, the conditions from the association proxy are not applied unless the class method ends with a call to #all when using the named scopes.  Simple example follows...

Class definitions...

  class Event

    belongs_to :hub

    def self.upcoming_with_all(limit = nil)
      public.ending_after(Time.now.utc).published.limited(limit).ordered.all
    end

    def self.upcoming_without_all(limit = nil)
      public.ending_after(Time.now.utc).published.limited(limit).ordered
    end
  
  end

  class Hub
    has_many :events
  end

Console output...

  &gt;&gt; Hub.first.events.upcoming_with_all(2)
    Hub Load (0.7ms)   SELECT * FROM `hubs` LIMIT 1
    Event Load (1.0ms)   SELECT * FROM `events` WHERE ((((`events`.hub_id = 1) AND (events.published = 1)) AND (events.ends_at &gt; '2008-12-29 21:17:50')) AND ((not events.private))) ORDER BY events.created_on desc LIMIT 2

  &gt;&gt; Hub.first.events.upcoming_without_all(2).size
    Hub Load (0.3ms)   SELECT * FROM `hubs` LIMIT 1
    SQL (345.4ms)   SELECT count(*) AS count_all FROM `events` WHERE (((events.published = 1) AND (events.ends_at &gt; '2008-12-29 21:17:55')) AND ((not events.private))) LIMIT 2


Note how the first version, whose class method has an #all call on the end of the scope chain, correctly uses the condition that comes from the association (ie, it limits to a certain hub), but the second version does not.</original-body>
  <latest-body>I believe this occurs in both 2.0 and 2.2.

When you attempt to chain named_scopes together in a class method, and then call that class method through an association proxy, the conditions from the association proxy are not applied unless the class method ends with a call to #all when using the named scopes.  Simple example follows...

Class definitions...

  class Event

    belongs_to :hub

    def self.upcoming_with_all(limit = nil)
      public.ending_after(Time.now.utc).published.limited(limit).ordered.all
    end

    def self.upcoming_without_all(limit = nil)
      public.ending_after(Time.now.utc).published.limited(limit).ordered
    end
  
  end

  class Hub
    has_many :events
  end

Console output...

  &gt;&gt; Hub.first.events.upcoming_with_all(2)
    Hub Load (0.7ms)   SELECT * FROM `hubs` LIMIT 1
    Event Load (1.0ms)   SELECT * FROM `events` WHERE ((((`events`.hub_id = 1) AND (events.published = 1)) AND (events.ends_at &gt; '2008-12-29 21:17:50')) AND ((not events.private))) ORDER BY events.created_on desc LIMIT 2

  &gt;&gt; Hub.first.events.upcoming_without_all(2).size
    Hub Load (0.3ms)   SELECT * FROM `hubs` LIMIT 1
    SQL (345.4ms)   SELECT count(*) AS count_all FROM `events` WHERE (((events.published = 1) AND (events.ends_at &gt; '2008-12-29 21:17:55')) AND ((not events.private))) LIMIT 2


Note how the first version, whose class method has an #all call on the end of the scope chain, correctly uses the condition that comes from the association (ie, it limits to a certain hub), but the second version does not.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I believe this occurs in both 2.0 and 2.2.&lt;/p&gt;
&lt;p&gt;When you attempt to chain named_scopes together in a class
method, and then call that class method through an association
proxy, the conditions from the association proxy are not applied
unless the class method ends with a call to #all when using the
named scopes. Simple example follows...&lt;/p&gt;
&lt;p&gt;Class definitions...&lt;/p&gt;
&lt;p&gt;class Event&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;belongs_to :hub

def self.upcoming_with_all(limit = nil)
  public.ending_after(Time.now.utc).published.limited(limit).ordered.all
end

def self.upcoming_without_all(limit = nil)
  public.ending_after(Time.now.utc).published.limited(limit).ordered
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;class Hub&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;has_many :events
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;Console output...&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; Hub.first.events.upcoming_with_all(2)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Hub Load (0.7ms)   SELECT * FROM `hubs` LIMIT 1
Event Load (1.0ms)   SELECT * FROM `events` WHERE ((((`events`.hub_id = 1) AND (events.published = 1)) AND (events.ends_at &amp;gt; '2008-12-29 21:17:50')) AND ((not events.private))) ORDER BY events.created_on desc LIMIT 2
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;gt;&amp;gt; Hub.first.events.upcoming_without_all(2).size&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Hub Load (0.3ms)   SELECT * FROM `hubs` LIMIT 1
SQL (345.4ms)   SELECT count(*) AS count_all FROM `events` WHERE (((events.published = 1) AND (events.ends_at &amp;gt; '2008-12-29 21:17:55')) AND ((not events.private))) LIMIT 2
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note how the first version, whose class method has an #all call
on the end of the scope chain, correctly uses the condition that
comes from the association (ie, it limits to a certain hub), but
the second version does not.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I believe this occurs in both 2.0 and 2.2.

When you attempt to chain named_scopes together in a class method, and then call that class method through an association proxy, the conditions from the association proxy are not applied unless the class method ends with a call to #all when using the named scopes.  Simple example follows...

Class definitions...

@@@ ruby

  class Event

    belongs_to :hub

    def self.upcoming_with_all(limit = nil)
      public.ending_after(Time.now.utc).published.limited(limit).ordered.all
    end

    def self.upcoming_without_all(limit = nil)
      public.ending_after(Time.now.utc).published.limited(limit).ordered
    end
  
  end

  class Hub
    has_many :events
  end

@@@

Console output...

@@@

  &gt;&gt; Hub.first.events.upcoming_with_all(2)
    Hub Load (0.7ms)   SELECT * FROM `hubs` LIMIT 1
    Event Load (1.0ms)   SELECT * FROM `events` WHERE ((((`events`.hub_id = 1) 
    AND (events.published = 1)) AND (events.ends_at &gt; '2008-12-29 21:17:50')) 
    AND ((not events.private))) ORDER BY events.created_on desc LIMIT 2

  &gt;&gt; Hub.first.events.upcoming_without_all(2)
    Hub Load (0.3ms)   SELECT * FROM `hubs` LIMIT 1
    SQL (345.4ms)   SELECT count(*) AS count_all FROM `events` 
    WHERE (((events.published = 1) AND (events.ends_at &gt; '2008-12-29 21:17:55')) 
    AND ((not events.private))) LIMIT 2

@@@

Note how the first version, whose class method has an #all call on the end of the scope chain, correctly uses the condition that comes from the association (ie, it limits to a certain hub), but the second version does not.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I believe this occurs in both 2.0 and 2.2.&lt;/p&gt;
&lt;p&gt;When you attempt to chain named_scopes together in a class
method, and then call that class method through an association
proxy, the conditions from the association proxy are not applied
unless the class method ends with a call to #all when using the
named scopes. Simple example follows...&lt;/p&gt;
&lt;p&gt;Class definitions...&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;

  class Event

    belongs_to :hub

    def self.upcoming_with_all(limit = nil)
      public.ending_after(Time.now.utc).published.limited(limit).ordered.all
    end

    def self.upcoming_without_all(limit = nil)
      public.ending_after(Time.now.utc).published.limited(limit).ordered
    end
  
  end

  class Hub
    has_many :events
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Console output...&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;

  &amp;gt;&amp;gt; Hub.first.events.upcoming_with_all(2)
    Hub Load (0.7ms)   SELECT * FROM `hubs` LIMIT 1
    Event Load (1.0ms)   SELECT * FROM `events` WHERE ((((`events`.hub_id = 1) 
    AND (events.published = 1)) AND (events.ends_at &amp;gt; '2008-12-29 21:17:50')) 
    AND ((not events.private))) ORDER BY events.created_on desc LIMIT 2

  &amp;gt;&amp;gt; Hub.first.events.upcoming_without_all(2)
    Hub Load (0.3ms)   SELECT * FROM `hubs` LIMIT 1
    SQL (345.4ms)   SELECT count(*) AS count_all FROM `events` 
    WHERE (((events.published = 1) AND (events.ends_at &amp;gt; '2008-12-29 21:17:55')) 
    AND ((not events.private))) LIMIT 2

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how the first version, whose class method has an #all call
on the end of the scope chain, correctly uses the condition that
comes from the association (ie, it limits to a certain hub), but
the second version does not.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-31T15:54:05+00:00</created-at>
      <creator-id type="integer">10613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1677</number>
      <permalink>association-proxies-using-class-methods-with-named-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Association proxies using class methods with named scopes</title>
      <updated-at type="datetime">2008-12-31T15:59:50+00:00</updated-at>
      <user-id type="integer">10613</user-id>
      <version type="integer">1</version>
      <user-name>Matt Jankowski</user-name>
      <creator-name>Matt Jankowski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1677</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think I understand why this is. I setup User has_many posts, post has a named_scope called active.

When you do 
@@@ ruby
User.last.posts.active
@@@
Then active is called on the association proxy, and method missing on the association proxy knows that if you call :foo on it and :foo is a named scope on the parent then it should call that scope on itself (ie the named scope is called with proxy_scope set to the association proxy)

When you do
@@@ ruby
class Post
  def self.class_method
    active
  end
end
User.last.posts.class_method
@@@
Then the active method is called on class Post, not the association proxy and so the named scope is called with proxy_scope set to Post, not the association proxy.

The association proxy wraps the call to class\_method in a with\_scope with the conditions so if class_method does a find then it will execute inside the with_scope block and everything is fine. But if it just invokes a scope upon which a find is done later then that find is executed outside the with_scope and so everything falls to pieces.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think I understand why this is. I setup User has_many posts,
post has a named_scope called active.&lt;/p&gt;
&lt;p&gt;When you do&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
User.last.posts.active
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then active is called on the association proxy, and method
missing on the association proxy knows that if you call :foo on it
and :foo is a named scope on the parent then it should call that
scope on itself (ie the named scope is called with proxy_scope set
to the association proxy)&lt;/p&gt;
&lt;p&gt;When you do&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Post
  def self.class_method
    active
  end
end
User.last.posts.class_method
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then the active method is called on class Post, not the
association proxy and so the named scope is called with proxy_scope
set to Post, not the association proxy.&lt;/p&gt;
&lt;p&gt;The association proxy wraps the call to class_method in a
with_scope with the conditions so if class_method does a find then
it will execute inside the with_scope block and everything is fine.
But if it just invokes a scope upon which a find is done later then
that find is executed outside the with_scope and so everything
falls to pieces.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-31T17:00:00+00:00</created-at>
      <creator-id type="integer">10613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1677</number>
      <permalink>association-proxies-using-class-methods-with-named-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Association proxies using class methods with named scopes</title>
      <updated-at type="datetime">2008-12-31T17:03:50+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">2</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Matt Jankowski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1677</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think my patch on #1960 fixes this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think my patch on &lt;a href=&quot;/projects/8994/tickets/1960&quot; title=&quot;Ticket #1960&quot;&gt;#1960&lt;/a&gt; fixes this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-20T13:56:24+00:00</created-at>
      <creator-id type="integer">10613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1677</number>
      <permalink>association-proxies-using-class-methods-with-named-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Association proxies using class methods with named scopes</title>
      <updated-at type="datetime">2009-02-20T13:56:30+00:00</updated-at>
      <user-id type="integer">9698</user-id>
      <version type="integer">3</version>
      <user-name>Diego Algorta</user-name>
      <creator-name>Matt Jankowski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1677</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [a9aa18fdcdf3146ccbdecff71e52015f26a0f0b7]) Fixed bug that makes named_scopes _forgot_ current scope

Signed-off-by: rick &lt;technoweenie@gmail.com&gt;
[#1960 #1677 state:resolved]
http://github.com/rails/rails/commit/a9aa18fdcdf3146ccbdecff71e52015f26a0f0b7</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [a9aa18fdcdf3146ccbdecff71e52015f26a0f0b7]) Fixed bug that
makes named_scopes &lt;em&gt;forgot&lt;/em&gt; current scope&lt;/p&gt;
&lt;p&gt;Signed-off-by: rick &lt;a href=&quot;mailto:technoweenie@gmail.com&quot;&gt;technoweenie@gmail.com&lt;/a&gt;
[&lt;a href=&quot;/projects/8994/tickets/1960&quot; title=&quot;Ticket #1960&quot;&gt;#1960&lt;/a&gt; &lt;a href=&quot;/projects/8994/tickets/1677&quot; title=&quot;Ticket #1677&quot;&gt;#1677&lt;/a&gt; state:resolved] &lt;a href=&quot;http://github.com/rails/rails/commit/a9aa18fdcdf3146ccbdecff71e52015f26a0f0b7&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-25T17:13:35+00:00</created-at>
      <creator-id type="integer">10613</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1677</number>
      <permalink>association-proxies-using-class-methods-with-named-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Association proxies using class methods with named scopes</title>
      <updated-at type="datetime">2009-02-25T17:13:37+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">4</version>
      <user-name>Repository</user-name>
      <creator-name>Matt Jankowski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1677</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Replica Tag Watches sell at low prices. Buy Tag Heuer Replica Watches, Fake TAG Heuer Watches please come to our &lt;a href=&quot;http://www.replicawatchesi.com/tag-heuer-watches&quot;&gt;Replica Tag Heuer watches&lt;/a&gt;.Look no further for &lt;a href=&quot;http://www.replicawatchesi.com/&quot;&gt;replica watches&lt;/a&gt;, &lt;a href=&quot;http://www.replicawatchesi.com/&quot;&gt;replica rolex&lt;/a&gt;, &lt;a href=&quot;http://www.replicawatchesi.com/&quot;&gt;replica watches uk&lt;/a&gt;, &lt;a href=&quot;http://www.replicawatchesi.com/breitling-watches&quot;&gt;Replica Breitling watches&lt;/a&gt;, Swiss Replica Rolex, fake watch, and swiss replica watch.Buy Omega Watch, Omega Replicas, Alpha Omega Watches, Ladies Omega Replica Watches from our &lt;a href=&quot;http://www.replicawatchesi.com/omega-watches&quot;&gt;Replica Omega watches&lt;/a&gt; store.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Replica Tag Watches sell at low prices. Buy Tag Heuer Replica
Watches, Fake TAG Heuer Watches please come to our &lt;a href=
&quot;http://www.replicawatchesi.com/tag-heuer-watches&quot;&gt;Replica Tag
Heuer watches&lt;/a&gt;.Look no further for &lt;a href=
&quot;http://www.replicawatchesi.com/&quot;&gt;replica watches&lt;/a&gt;, &lt;a href=
&quot;http://www.replicawatchesi.com/&quot;&gt;replica rolex&lt;/a&gt;, &lt;a href=
&quot;http://www.replicawatchesi.com/&quot;&gt;replica watches uk&lt;/a&gt;, &lt;a href=
&quot;http://www.replicawatchesi.com/breitling-watches&quot;&gt;Replica
Breitling watches&lt;/a&gt;, Swiss Replica Rolex, fake watch, and swiss
replica watch.Buy Omega Watch, Omega Replicas, Alpha Omega Watches,
Ladies Omega Replica Watches from our &lt;a href=
&quot;http://www.replicawatchesi.com/omega-watches&quot;&gt;Replica Omega
watches&lt;/a&gt; store.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-21T13:55:02+00:00</created-at>
      <creator-id type="integer">10613</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1677</number>
      <permalink>association-proxies-using-class-methods-with-named-scopes</permalink>
      <priority type="integer">999</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Association proxies using class methods with named scopes</title>
      <updated-at type="datetime">2011-02-21T14:04:54+00:00</updated-at>
      <user-id type="integer">138022</user-id>
      <version type="integer">5</version>
      <user-name>benben</user-name>
      <creator-name>Matt Jankowski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1677</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
