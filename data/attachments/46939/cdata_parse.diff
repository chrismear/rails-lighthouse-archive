diff --git a/actionpack/lib/action_controller/vendor/html-scanner/html/node.rb b/actionpack/lib/action_controller/vendor/html-scanner/html/node.rb
index 472c5b2..c4f8341 100644
--- a/actionpack/lib/action_controller/vendor/html-scanner/html/node.rb
+++ b/actionpack/lib/action_controller/vendor/html-scanner/html/node.rb
@@ -150,8 +150,16 @@ module HTML #:nodoc:
           end
 
           if scanner.skip(/!\[CDATA\[/)
-            scanner.scan_until(/\]\]>/)
-            return CDATA.new(parent, line, pos, scanner.pre_match.gsub(/<!\[CDATA\[/, ''))
+            if scanner.scan_until(/\]\]>/)
+              cdata_content = scanner.pre_match.sub(/<!\[CDATA\[/, '')	
+            else
+              if strict
+                raise "expected ]]> (got #{scanner.rest.inspect} for <![CDATA[)"
+              else
+                cdata_content = scanner.rest
+              end
+            end
+            return CDATA.new(parent, line, pos, cdata_content)
           end
           
           closing = ( scanner.scan(/\//) ? :close : nil )
@@ -265,7 +273,7 @@ module HTML #:nodoc:
   # itself.
   class CDATA < Text #:nodoc:
     def to_s
-      "<![CDATA[#{super}]>"
+      "<![CDATA[#{super}]]>"
     end
   end
 
diff --git a/actionpack/test/controller/html-scanner/node_test.rb b/actionpack/test/controller/html-scanner/node_test.rb
index 240f01a..ff8e985 100644
--- a/actionpack/test/controller/html-scanner/node_test.rb
+++ b/actionpack/test/controller/html-scanner/node_test.rb
@@ -56,7 +56,7 @@ class NodeTest < Test::Unit::TestCase
     node = HTML::Node.parse(nil,0,0,s)
     assert node.attributes.has_key?("foo")
     assert node.attributes.has_key?("bar")
-    assert "<b foo bar>", node.to_s
+    assert_equal "<b foo bar>", node.to_s
   end
   
   def test_parse_with_unclosed_tag
@@ -65,4 +65,36 @@ class NodeTest < Test::Unit::TestCase
     assert_nothing_raised { node = HTML::Node.parse(nil,0,0,s,false) }
     assert node.attributes.has_key?("onmouseover")
   end
+
+  def test_parse_cdata
+    s = "<![CDATA[foo bar]]>"
+    node = nil
+    assert_nothing_raised { node = HTML::Node.parse(nil,0,0,s,false) }
+    assert node.is_a?(HTML::CDATA)
+    assert_equal "foo bar", node.content
+    assert_equal "<![CDATA[foo bar]]>", node.to_s
+  end
+
+  def test_parse_unclosed_cdata
+    s = "<![CDATA[foo bar"
+    node = nil
+    assert_nothing_raised { node = HTML::Node.parse(nil,0,0,s,false) }
+    assert node.is_a?(HTML::CDATA)
+    assert_equal "foo bar", node.content
+  end
+
+  def test_parse_duplicate_cdata
+    s = "<![CDATA[<![CDATA[]]>"
+    node = nil
+    assert_nothing_raised { node = HTML::Node.parse(nil,0,0,s,false) }
+    assert node.is_a?(HTML::CDATA)
+    assert_equal "<![CDATA[", node.content
+  end
+
+  def test_parse_cdata_strict
+    s = "<![CDATA[foo bar"
+    assert_raise(RuntimeError) { HTML::Node.parse(nil,0,0,s) }
+  end
+
+
 end
