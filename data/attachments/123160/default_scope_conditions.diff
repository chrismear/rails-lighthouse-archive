From 9c55ddf71c3f9a8e62ea9bbc0cfc8d6cc13c71eb Mon Sep 17 00:00:00 2001
From: Andrew Vit <andrew@avit.ca>
Date: Fri, 15 May 2009 12:19:54 -0700
Subject: [PATCH] default_scope should ignore string conditions on create

default_scope sets the model's default attributes from hash conditions.
This is not possible with string conditions, but it shouldn't fail to initialize the object.

(If default values are needed with string conditions, they should be added in a custom initialize method or before_create.)
---
 activerecord/lib/active_record/base.rb         |    7 ++++++-
 activerecord/test/cases/method_scoping_test.rb |    8 ++++++++
 activerecord/test/schema/schema.rb             |    1 +
 3 files changed, 15 insertions(+), 1 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index 545ee83..4c382ad 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -2163,7 +2163,12 @@ module ActiveRecord #:nodoc:
         #     default_scope :order => 'last_name, first_name'
         #   end
         def default_scope(options = {})
-          self.default_scoping << { :find => options, :create => (options.is_a?(Hash) && options.has_key?(:conditions)) ? options[:conditions] : {} }
+          create_options = if (options.is_a?(Hash) && options.has_key?(:conditions))
+            options[:conditions].is_a?(Hash) ? options[:conditions] : {}
+          else
+            {}
+          end
+          self.default_scoping << { :find => options, :create => create_options }
         end
 
         # Test whether the given method and optional key are scoped.
diff --git a/activerecord/test/cases/method_scoping_test.rb b/activerecord/test/cases/method_scoping_test.rb
index 9f23064..2e5a6e3 100644
--- a/activerecord/test/cases/method_scoping_test.rb
+++ b/activerecord/test/cases/method_scoping_test.rb
@@ -599,6 +599,14 @@ class DefaultScopingTest < ActiveRecord::TestCase
     end
   end
 
+  def test_default_scoping_with_string_conditions
+    klass = Class.new(Developer)
+    klass.send :default_scope, { :conditions => "state != 'active'" }
+
+    assert_equal 'waiting', klass.new(:state => 'waiting').state
+    assert_equal 'active', klass.new(:state => 'active').state
+  end
+
   def test_default_scoping_with_inheritance
     scope = [{ :create => {}, :find => { :order => 'salary DESC' } }]
 
diff --git a/activerecord/test/schema/schema.rb b/activerecord/test/schema/schema.rb
index 98e6d19..f309da0 100644
--- a/activerecord/test/schema/schema.rb
+++ b/activerecord/test/schema/schema.rb
@@ -138,6 +138,7 @@ ActiveRecord::Schema.define do
   create_table :developers, :force => true do |t|
     t.string   :name
     t.integer  :salary, :default => 70000
+    t.string   :state
     t.datetime :created_at
     t.datetime :updated_at
   end
-- 
1.6.1.2

