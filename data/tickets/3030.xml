<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">5</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-06-24T01:21:15+01:00</created-at>
  <creator-id type="integer">65734</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3030</number>
  <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
  <title>Rails does not handle TypeError from Rack on malformed query strings</title>
  <updated-at type="datetime">2010-10-22T20:48:07+01:00</updated-at>
  <user-id type="integer">14618</user-id>
  <version type="integer">21</version>
  <user-name>Bodaniel Jeanes</user-name>
  <creator-name>Steve H</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
  <priority-name>Low</priority-name>
  <original-body>Here's an example from Racks' test suite:

@@@ ruby
    lambda { Rack::Utils.parse_nested_query(&quot;x[y]=1&amp;x[y][][w]=2&quot;) }.
      should.raise(TypeError).
      message.should.equal &quot;expected Array (got String) for param `y'&quot;
@@@

And here's an example in the wild:

https://rails.lighthouseapp.com/dashboard?x[y]=1&amp;x[y][][w]=2

I would expect this to result in a 400 Bad Request rather than a 500 Internal Server Error.</original-body>
  <latest-body>Here's an example from Racks' test suite:

@@@ ruby
    lambda { Rack::Utils.parse_nested_query(&quot;x[y]=1&amp;x[y][][w]=2&quot;) }.
      should.raise(TypeError).
      message.should.equal &quot;expected Array (got String) for param `y'&quot;
@@@

And here's an example in the wild:

https://rails.lighthouseapp.com/dashboard?x[y]=1&amp;x[y][][w]=2

I would expect this to result in a 400 Bad Request rather than a 500 Internal Server Error.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Here's an example from Racks' test suite:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
    lambda { Rack::Utils.parse_nested_query(&amp;quot;x[y]=1&amp;amp;x[y][][w]=2&amp;quot;) }.
      should.raise(TypeError).
      message.should.equal &amp;quot;expected Array (got String) for param `y'&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here's an example in the wild:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rails.lighthouseapp.com/dashboard?x&quot;&gt;https://rails.lighthouseapp.com/...&lt;/a&gt;[y]=1&amp;amp;x[y][][w]=2&lt;/p&gt;
&lt;p&gt;I would expect this to result in a 400 Bad Request rather than a
500 Internal Server Error.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here's an example from Racks' test suite:

@@@ ruby
    lambda { Rack::Utils.parse_nested_query(&quot;x[y]=1&amp;x[y][][w]=2&quot;) }.
      should.raise(TypeError).
      message.should.equal &quot;expected Array (got String) for param `y'&quot;
@@@

And here's an example in the wild:

https://rails.lighthouseapp.com/dashboard?x[y]=1&amp;x[y][][w]=2

I would expect this to result in a 400 Bad Request rather than a 500 Internal Server Error.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here's an example from Racks' test suite:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;    lambda { Rack::Utils.parse_nested_query(&quot;x[y]=1&amp;amp;x[y][][w]=2&quot;) }.
      should.raise(TypeError).
      message.should.equal &quot;expected Array (got String) for param `y'&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And here's an example in the wild:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/dashboard?x[y]=1&amp;amp;x[y][][w]=2&quot;&gt;https://rails.lighthouseapp.com/dashboard?x[y]=1&amp;amp;amp;x[y][][w]=2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would expect this to result in a 400 Bad Request rather than a
500 Internal Server Error.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-10T06:49:20+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2009-08-10T06:49:29+01:00</updated-at>
      <user-id type="integer">65734</user-id>
      <version type="integer">1</version>
      <user-name>Steve H</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Lighthouse ate my URL, here it is again:

@@@
https://rails.lighthouseapp.com/dashboard?x[y]=1&amp;x[y][][w]=2
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Lighthouse ate my URL, here it is again:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;https://rails.lighthouseapp.com/dashboard?x[y]=1&amp;amp;x[y][][w]=2&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-10T06:50:20+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2009-08-10T06:50:24+01:00</updated-at>
      <user-id type="integer">65734</user-id>
      <version type="integer">2</version>
      <user-name>Steve H</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">89656</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Needs more info. Also, Lighthouse seems to have eaten the URL in second attempt too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Needs more info. Also, Lighthouse seems to have eaten the URL in
second attempt too.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-23T14:13:55+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-06-23T14:14:00+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">3</version>
      <user-name>David Trasbo</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Rohit Arondekar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">89656</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you copy and paste the second URL into your address bar you will get an internal server error from Lighthouse, because Lighthouse is running Rails and this affects every Rails installation. I was just using it to conveniently illustrate a point.

Have a look at the parameters:

x[y]=1
x[y][][w]=2

This is because you're assigning x[y] to an integer, and then using [] to add another value to it as if x[y] was an array.

Rack correctly raises a TypeError for this, but I feel Rails should catch this and return a 400 Bad Request as it is an error on the clients part, and not a 500 Internal Server Error.

Rack already has a test case for this (see the example from the test suite).</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you copy and paste the second URL into your address bar you
will get an internal server error from Lighthouse, because
Lighthouse is running Rails and this affects every Rails
installation. I was just using it to conveniently illustrate a
point.&lt;/p&gt;
&lt;p&gt;Have a look at the parameters:&lt;/p&gt;
&lt;p&gt;x[y]=1&lt;br&gt;
x[y][][w]=2&lt;/p&gt;
&lt;p&gt;This is because you're assigning x[y] to an integer, and then
using [] to add another value to it as if x[y] was an array.&lt;/p&gt;
&lt;p&gt;Rack correctly raises a TypeError for this, but I feel Rails
should catch this and return a 400 Bad Request as it is an error on
the clients part, and not a 500 Internal Server Error.&lt;/p&gt;
&lt;p&gt;Rack already has a test case for this (see the example from the
test suite).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-23T21:11:24+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-06-23T21:11:30+01:00</updated-at>
      <user-id type="integer">16113</user-id>
      <version type="integer">4</version>
      <user-name>Steve Hoeksema</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Rohit Arondekar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">89656</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Confirmed that Rails does indeed throw 500 Internal Server Error.

Can you write a failing test and a patch?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Confirmed that Rails does indeed throw 500 Internal Server
Error.&lt;/p&gt;
&lt;p&gt;Can you write a failing test and a patch?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-24T01:34:28+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-06-24T01:34:35+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">5</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Rohit Arondekar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A erroring test for this issue. Not a great test but I'm open to suggestions :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;A erroring test for this issue. Not a great test but I'm open to
suggestions :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-05T11:29:24+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:assigned_user: 89656
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-05T11:29:25+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">6</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This patch seems to fix this. It may look a little heavy-handed but as far as I can tell the only reason that query_parameters should return nil, as it does in this case, is that there was some kind of parameter parsing error and I imagine that a lot of code expects that params should always return at least an empty hash, so it doesn't seem too unreasonable a fix.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch seems to fix this. It may look a little heavy-handed
but as far as I can tell the only reason that query_parameters
should return nil, as it does in this case, is that there was some
kind of parameter parsing error and I imagine that a lot of code
expects that params should always return at least an empty hash, so
it doesn't seem too unreasonable a fix.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-10T19:49:14+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-10T19:49:32+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">7</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>-1 for simply discarding the error. The client that send such requests should be aware that he sent an invalid one.</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1 for simply discarding the error. The client that send such
requests should be aware that he sent an invalid one.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-10T20:35:14+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-10T20:35:18+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">8</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This patch doesn't discard the error, it just allows rails to display the error to the client instead of issuing a 500.

The code accessing query_parameters is used by the error page to display the error. It's not the source of the error.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch doesn't discard the error, it just allows rails to
display the error to the client instead of issuing a 500.&lt;/p&gt;
&lt;p&gt;The code accessing query_parameters is used by the error page to
display the error. It's not the source of the error.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-10T20:49:09+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-10T20:49:11+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">9</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Ah my bad, great! Could you please then provide a patch following the conventions here? http://rails.lighthouseapp.com/projects/8994/sending-patches

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ah my bad, great! Could you please then provide a patch
following the conventions here? &lt;a href=
&quot;http://rails.lighthouseapp.com/projects/8994/sending-patches&quot;&gt;http://rails.lighthouseapp.com/projects/8994/sending-patches&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-10T21:24:21+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-10T21:24:23+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">10</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Ok I've followed the instructions on that page and added a test case that triggers the error and verifies that it's handled correctly. Please let me know if this is acceptable or if I missed something. Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok I've followed the instructions on that page and added a test
case that triggers the error and verifies that it's handled
correctly. Please let me know if this is acceptable or if I missed
something. Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-10T22:32:36+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-10T22:32:39+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">11</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Here's an alternative solution, if you think it's reasonable to assert that request_parameters and query_parameters should never be nil.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here's an alternative solution, if you think it's reasonable to
assert that request_parameters and query_parameters should never be
nil.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-11T03:01:51+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-11T03:01:54+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">12</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Miles, your patches accept that the error is raised, which is great. But the proper behavior would be rails to rescue such error and return the proper http status.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Miles, your patches accept that the error is raised, which is
great. But the proper behavior would be rails to rescue such error
and return the proper http status.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T10:39:02+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-18T10:39:04+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">13</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Jos&#233; here is the chain of events as I see it:

1. rails tries to handle the request, which triggers the param parsing code in rack
2. rack fails to parse the query string and throws a type error
3. rails catches the type error and tries to display an error page
4. the error page tries to display the params of the request but fails because rack didn't set the environment variables it expects to contain the request params
5. this generates the 500

My patch fixes #4 so that the default rails exception handling does the right thing. The only remaining problem is the HTTP error code. This is generated in this code:

@@@
      def rescue_action_locally(request, exception)
        template = ActionView::Base.new([RESCUES_TEMPLATE_PATH],
          :request =&gt; request,
          :exception =&gt; exception,
          :application_trace =&gt; application_trace(exception),
          :framework_trace =&gt; framework_trace(exception),
          :full_trace =&gt; full_trace(exception)
        )
        file = &quot;rescues/#{@@rescue_templates[exception.class.name]}.erb&quot;
        body = template.render(:file =&gt; file, :layout =&gt; 'rescues/layout.erb')
        render(status_code(exception), body)
      end
@@@

Which calls this code:

@@@
   def status_code(exception)
      Rack::Utils.status_code(@@rescue_responses[exception.class.name])
   end
@@@

So rails is letting rack choose the error code. Unfortunately, rack defaults to a 500 for anything that doesn't map to the textual equivalent of a standard http result code (mappings in lib/rack/utils.rb in rack). So in order to return a 400 instead of a 500 in this case we'd either need to override the rack status code for this case or change the exception that is thrown in rack on a parse error or make the rack error code mapping smarter.

In either case it seems like a rack issue not a rails issue.

&lt;em&gt;Edited by [Rohit Arondekar](https://rails.lighthouseapp.com/users/89656) for formating.&lt;/em&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jos&amp;eacute; here is the chain of events as I see it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;rails tries to handle the request, which triggers the param
parsing code in rack&lt;br&gt;&lt;/li&gt;
&lt;li&gt;rack fails to parse the query string and throws a type
error&lt;br&gt;&lt;/li&gt;
&lt;li&gt;rails catches the type error and tries to display an error
page&lt;br&gt;&lt;/li&gt;
&lt;li&gt;the error page tries to display the params of the request but
fails because rack didn't set the environment variables it expects
to contain the request params&lt;br&gt;&lt;/li&gt;
&lt;li&gt;this generates the 500&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My patch fixes &lt;a href=&quot;/projects/8994/tickets/4&quot; title=
&quot;Ticket #4&quot;&gt;#4&lt;/a&gt; so that the default rails exception handling
does the right thing. The only remaining problem is the HTTP error
code. This is generated in this code:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      def rescue_action_locally(request, exception)
        template = ActionView::Base.new([RESCUES_TEMPLATE_PATH],
          :request =&amp;gt; request,
          :exception =&amp;gt; exception,
          :application_trace =&amp;gt; application_trace(exception),
          :framework_trace =&amp;gt; framework_trace(exception),
          :full_trace =&amp;gt; full_trace(exception)
        )
        file = &quot;rescues/#{@@rescue_templates[exception.class.name]}.erb&quot;
        body = template.render(:file =&amp;gt; file, :layout =&amp;gt; 'rescues/layout.erb')
        render(status_code(exception), body)
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which calls this code:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   def status_code(exception)
      Rack::Utils.status_code(@@rescue_responses[exception.class.name])
   end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So rails is letting rack choose the error code. Unfortunately,
rack defaults to a 500 for anything that doesn't map to the textual
equivalent of a standard http result code (mappings in
lib/rack/utils.rb in rack). So in order to return a 400 instead of
a 500 in this case we'd either need to override the rack status
code for this case or change the exception that is thrown in rack
on a parse error or make the rack error code mapping smarter.&lt;/p&gt;
&lt;p&gt;In either case it seems like a rack issue not a rails issue.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edited by &lt;a href=
&quot;https://rails.lighthouseapp.com/users/89656&quot;&gt;Rohit Arondekar&lt;/a&gt;
for formating.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T15:41:55+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-19T01:39:41+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">14</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Oh yes, confirm! :) So I can apply this initial patch, I just have two small suggestions:

1) The second patch looks good but we should probably move the logic to normalize_params.

2) The test name could be better to reveal what we are really testing, something like &quot;parameters can be accessed even after Rack::TypeError is raised&quot; would better express their intent.

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oh yes, confirm! :) So I can apply this initial patch, I just
have two small suggestions:&lt;/p&gt;
&lt;p&gt;1) The second patch looks good but we should probably move the
logic to normalize_params.&lt;/p&gt;
&lt;p&gt;2) The test name could be better to reveal what we are really
testing, something like &quot;parameters can be accessed even after
Rack::TypeError is raised&quot; would better express their intent.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T16:17:31+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-18T16:17:36+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">15</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>All that our normalize_parameters function does is recursively convert the params hash to a hash_with_indifferent_access, so it doesn't seem to me that it really should know about possible exceptions from rack since it's just a simple utility function. 

Another possibility would be to explicitly rescue the exception in the GET function that we override from the Rack::Request base class but we'd have to re-throw it to propagate the error correctly. That is, explicitly do a begin/rescue in this block:

@@@
    # Override Rack's GET method to support indifferent access                                                                         
    def GET
      @env[&quot;action_dispatch.request.query_parameters&quot;] ||= normalize_parameters(super)
    end
    alias :query_parameters :GET
@@@

I think you're right that the test could use a better name. I'll fix that.

The more I think about this the more I think that rack should handle this a little differently. If it can't parse a query string it should return or raise an error that it maps back to a 400, not a 500.</body>
      <body-html>&lt;div&gt;&lt;p&gt;All that our normalize_parameters function does is recursively
convert the params hash to a hash_with_indifferent_access, so it
doesn't seem to me that it really should know about possible
exceptions from rack since it's just a simple utility function.&lt;/p&gt;
&lt;p&gt;Another possibility would be to explicitly rescue the exception
in the GET function that we override from the Rack::Request base
class but we'd have to re-throw it to propagate the error
correctly. That is, explicitly do a begin/rescue in this block:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    # Override Rack's GET method to support indifferent access                                                                         
    def GET
      @env[&quot;action_dispatch.request.query_parameters&quot;] ||= normalize_parameters(super)
    end
    alias :query_parameters :GET&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think you're right that the test could use a better name. I'll
fix that.&lt;/p&gt;
&lt;p&gt;The more I think about this the more I think that rack should
handle this a little differently. If it can't parse a query string
it should return or raise an error that it maps back to a 400, not
a 500.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T16:35:32+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-18T16:35:34+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">16</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>You are correct, so the duplication in both GET and POST is ok. Indeed, Rack errors could be more http-ish instead of delegating such stuff to the framework.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You are correct, so the duplication in both GET and POST is ok.
Indeed, Rack errors could be more http-ish instead of delegating
such stuff to the framework.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T16:41:27+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-18T16:41:29+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">17</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Attached is a new patch with a better test.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attached is a new patch with a better test.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T17:11:27+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-07-18T17:11:31+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">18</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>Any further thoughts on this? Is the patch ok or should we take a different approach?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Any further thoughts on this? Is the patch ok or should we take
a different approach?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-03T20:46:52+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-08-03T20:46:55+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">19</version>
      <user-name>Miles Egan</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>(from [3eff729079a1a9e717e7872bdae19c8703b280ac]) make sure request parameters are accessible after rack throws an exception parsing the query string [#3030 state:resolved]

Signed-off-by: Jos&#233; Valim &lt;jose.valim@gmail.com&gt;
http://github.com/rails/rails/commit/3eff729079a1a9e717e7872bdae19c8703b280ac</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/3eff729079a1a9e717e7872bdae19c8703b280ac&quot;
title=
&quot;Changeset [3eff729079a1a9e717e7872bdae19c8703b280ac]&quot;&gt;[3eff729079a1a9e717e7872bdae19c8703b280ac]&lt;/a&gt;)
make sure request parameters are accessible after rack throws an
exception parsing the query string [&lt;a href=
&quot;/projects/8994/tickets/3030&quot; title=&quot;Ticket #3030&quot;&gt;#3030&lt;/a&gt;
state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jos&amp;eacute; Valim &lt;a&gt;jose.valim@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/3eff729079a1a9e717e7872bdae19c8703b280ac&quot;&gt;
http://github.com/rails/rails/commit/3eff729079a1a9e717e7872bdae19c...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-11T23:56:23+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-10-11T23:56:25+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">20</version>
      <user-name>Repository</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>I just came here to post an error this as I found what I think is the same bug as this one.

I've boiled this down to the smallest params segment that still raised this exception:

    ?a[b]&amp;a[]

I looked over the patch and it seems that it would cover this scenario, but I thought I'd add that this was reproducible in Rails 1, 2, and 3 and Ruby 1.8.7, 1.9.2, and REE.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just came here to post an error this as I found what I think
is the same bug as this one.&lt;/p&gt;
&lt;p&gt;I've boiled this down to the smallest params segment that still
raised this exception:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;?a[b]&amp;amp;a[]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I looked over the patch and it seems that it would cover this
scenario, but I thought I'd add that this was reproducible in Rails
1, 2, and 3 and Ruby 1.8.7, 1.9.2, and REE.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-22T20:48:04+01:00</created-at>
      <creator-id type="integer">65734</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3030</number>
      <permalink>rails-does-not-handle-typeerror-from-rack-on-malformed-query-strings</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>400 500 badrequest exception internalservererror malformed querystring rack typeerror</tag>
      <title>Rails does not handle TypeError from Rack on malformed query strings</title>
      <updated-at type="datetime">2010-10-22T20:48:07+01:00</updated-at>
      <user-id type="integer">14618</user-id>
      <version type="integer">21</version>
      <user-name>Bodaniel Jeanes</user-name>
      <creator-name>Steve H</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3030</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>92551cf41d7c59d83d44a79364575e062796d0a8</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-05T11:29:24+01:00</created-at>
      <filename>test_malformed_query_string.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">586009</id>
      <size type="integer">1482</size>
      <uploader-id type="integer">89656</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/586009/test_malformed_query_string.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>f828148532d5d5ec5c81f28a95ba927f8f642494</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-10T19:49:14+01:00</created-at>
      <filename>query_parameters.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">590483</id>
      <size type="integer">688</size>
      <uploader-id type="integer">105668</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/590483/query_parameters.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>afb14f7e457a5030bc395f64b6808e4fb6c7d13f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-10T22:32:36+01:00</created-at>
      <filename>query_parse_error_fix.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">590501</id>
      <size type="integer">1940</size>
      <uploader-id type="integer">105668</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/590501/query_parse_error_fix.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>ffc5c05fd4e14e2755fd44aa08e2be8ffaaeadf6</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-11T03:01:51+01:00</created-at>
      <filename>query_parse_error_fix2.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">590529</id>
      <size type="integer">2160</size>
      <uploader-id type="integer">105668</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/590529/query_parse_error_fix2.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>12c562be286a92fca5f6f55df25e0fd791df0409</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-18T17:11:27+01:00</created-at>
      <filename>query_parse_error_fix3.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">595795</id>
      <size type="integer">2316</size>
      <uploader-id type="integer">105668</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/595795/query_parse_error_fix3.patch</url>
    </attachment>
  </attachments>
</ticket>
