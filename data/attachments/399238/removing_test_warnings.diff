From 0c8d3acd1f6781cb4b68acf63701b2b758c6f044 Mon Sep 17 00:00:00 2001
From: Kieran Pilkington <kieran@katipo.co.nz>
Date: Wed, 3 Feb 2010 14:41:41 +1300
Subject: [PATCH] Fixing some warnings showing up in tests

---
 .../abstract/database_statements.rb                |    2 +-
 .../connection_adapters/abstract_adapter.rb        |    2 +-
 .../lib/active_record/relation/query_methods.rb    |   12 +++++++-----
 activeresource/test/cases/subscriber_test.rb       |    4 ++--
 activesupport/test/core_ext/array_ext_test.rb      |    8 ++++----
 5 files changed, 15 insertions(+), 13 deletions(-)

diff --git a/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb b/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb
index 027d736..6c0d6ca 100644
--- a/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb
@@ -113,7 +113,7 @@ module ActiveRecord
       def transaction(options = {})
         options.assert_valid_keys :requires_new, :joinable
 
-        last_transaction_joinable = @transaction_joinable
+        last_transaction_joinable = @transaction_joinable if defined?(@transaction_joinable)
         if options.has_key?(:joinable)
           @transaction_joinable = options[:joinable]
         else
diff --git a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
index 7e80347..6e71baa 100755
--- a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
@@ -113,7 +113,7 @@ module ActiveRecord
       # checking whether the database is actually capable of responding, i.e. whether
       # the connection isn't stale.
       def active?
-        @active != false
+        defined?(@active) && @active != false
       end
 
       # Disconnects from the database if already connected, and establishes a
diff --git a/activerecord/lib/active_record/relation/query_methods.rb b/activerecord/lib/active_record/relation/query_methods.rb
index 0266700..9a74480 100644
--- a/activerecord/lib/active_record/relation/query_methods.rb
+++ b/activerecord/lib/active_record/relation/query_methods.rb
@@ -169,11 +169,13 @@ module ActiveRecord
           arel.from(quoted_table_name)
         end
 
-      case @lock_value
-      when TrueClass
-        arel = arel.lock
-      when String
-        arel = arel.lock(@lock_value)
+      if defined?(@lock_value) && @lock_value.present?
+        case @lock_value
+        when TrueClass
+          arel = arel.lock
+        when String
+          arel = arel.lock(@lock_value)
+        end
       end
 
       arel
diff --git a/activeresource/test/cases/subscriber_test.rb b/activeresource/test/cases/subscriber_test.rb
index 3556fbf..6766e6f 100644
--- a/activeresource/test/cases/subscriber_test.rb
+++ b/activeresource/test/cases/subscriber_test.rb
@@ -24,7 +24,7 @@ class SubscriberTest < ActiveSupport::TestCase
     matz = Person.find(1)
     wait
     assert_equal 2, @logger.logged(:info).size
-    assert_equal "GET http://somewhere.else:80/people/1.xml", @logger.logged(:info)[0] 
-    assert_match /\-\-\> 200 200 106/, @logger.logged(:info)[1]
+    assert_equal "GET http://somewhere.else:80/people/1.xml", @logger.logged(:info)[0]
+    assert_match(/\-\-\> 200 200 106/, @logger.logged(:info)[1])
   end
 end
\ No newline at end of file
diff --git a/activesupport/test/core_ext/array_ext_test.rb b/activesupport/test/core_ext/array_ext_test.rb
index d4cd5dd..a58cb77 100644
--- a/activesupport/test/core_ext/array_ext_test.rb
+++ b/activesupport/test/core_ext/array_ext_test.rb
@@ -17,10 +17,10 @@ class ArrayExtAccessTests < Test::Unit::TestCase
     assert_equal %w( a b c ), %w( a b c d ).to(2)
     assert_equal %w( a b c d ), %w( a b c d ).to(10)
   end
-  
+
   def test_second_through_tenth
     array = (1..42).to_a
-    
+
     assert_equal array[1], array.second
     assert_equal array[2], array.third
     assert_equal array[3], array.fourth
@@ -306,7 +306,7 @@ class ArrayUniqByTests < Test::Unit::TestCase
   def test_uniq_by
     assert_equal [1,2], [1,2,3,4].uniq_by { |i| i.odd? }
     assert_equal [1,2], [1,2,3,4].uniq_by(&:even?)
-    assert_equal (-5..0).to_a, (-5..5).to_a.uniq_by{ |i| i**2 }
+    assert_equal( (-5..0).to_a, (-5..5).to_a.uniq_by{ |i| i**2 } )
   end
 
   def test_uniq_by!
@@ -320,7 +320,7 @@ class ArrayUniqByTests < Test::Unit::TestCase
 
     a = (-5..5).to_a
     a.uniq_by! { |i| i**2 }
-    assert_equal (-5..0).to_a, a
+    assert_equal( (-5..0).to_a, a )
   end
 end
 
-- 
1.6.6

