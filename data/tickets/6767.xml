<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-05-03T04:55:53+01:00</created-at>
  <creator-id type="integer">147748</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6767</number>
  <permalink>returning-id-does-not-work-due-to-trigger</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>&quot;Returning ID&quot; does not work due to trigger</title>
  <updated-at type="datetime">2011-05-04T04:32:56+01:00</updated-at>
  <user-id type="integer">147748</user-id>
  <version type="integer">4</version>
  <user-name>Nghi Pham</user-name>
  <creator-name>Nghi Pham</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6767</url>
  <priority-name nil="true"></priority-name>
  <original-body>I use PostgreSQL table partitioning. That is, a trigger is to be invoked prior to every INSERT query.

The trigger looks like this:

@@@
create or replace function insert_into_partition()
returns trigger
as $$
begin
    ... (insert into child table instead!)
    return null; -- note this
end;
$$
language plpgsql;
@@@

The problem is: the trigger somehow breaks the &quot;returning id&quot; query generated by Rails. As a result, the record is saved correctly into the database, but the ActiveRecord instance cannot retrieve the newly created ID. For example:

@@@
person = Person.new(:fullname =&gt; 'John', :age =&gt; 21)
person.save
# then, person.id --&gt; nil
@@@

The problem is, as I figured out, due to the &quot;return null&quot; statement of the corresponding trigger. However, I suggest that Rails should never return a nil value after a successful save statement. There should be kind of check for the value of id before assigning it back to the ActiveRecord instance.

Regards,

Other information:
Gem: 1.7.2
Rails: 3.0.7
Pg: 0.11.0
Platform: Ubuntu 10.04</original-body>
  <latest-body>I use PostgreSQL table partitioning. That is, a trigger is to be invoked prior to every INSERT query.

The trigger looks like this:

@@@
create or replace function insert_into_partition()
returns trigger
as $$
begin
    ... (insert into child table instead!)
    return null; -- note this
end;
$$
language plpgsql;
@@@

The problem is: the trigger somehow breaks the &quot;returning id&quot; query generated by Rails. As a result, the record is saved correctly into the database, but the ActiveRecord instance cannot retrieve the newly created ID. For example:

@@@
person = Person.new(:fullname =&gt; 'John', :age =&gt; 21)
person.save
# then, person.id --&gt; nil
@@@

The problem is, as I figured out, due to the &quot;return null&quot; statement of the corresponding trigger. However, I suggest that Rails should never return a nil value after a successful save statement. There should be kind of check for the value of id before assigning it back to the ActiveRecord instance.

Regards,

Other information:
Gem: 1.7.2
Rails: 3.0.7
Pg: 0.11.0
Platform: Ubuntu 10.04</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I use PostgreSQL table partitioning. That is, a trigger is to be
invoked prior to every INSERT query.&lt;/p&gt;
&lt;p&gt;The trigger looks like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create or replace function insert_into_partition()
returns trigger
as $$
begin
    ... (insert into child table instead!)
    return null; -- note this
end;
$$
language plpgsql;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is: the trigger somehow breaks the &quot;returning id&quot;
query generated by Rails. As a result, the record is saved
correctly into the database, but the ActiveRecord instance cannot
retrieve the newly created ID. For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;person = Person.new(:fullname =&amp;gt; 'John', :age =&amp;gt; 21)
person.save
# then, person.id --&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is, as I figured out, due to the &quot;return null&quot;
statement of the corresponding trigger. However, I suggest that
Rails should never return a nil value after a successful save
statement. There should be kind of check for the value of id before
assigning it back to the ActiveRecord instance.&lt;/p&gt;
&lt;p&gt;Regards,&lt;/p&gt;
&lt;p&gt;Other information:&lt;br&gt;
Gem: 1.7.2&lt;br&gt;
Rails: 3.0.7&lt;br&gt;
Pg: 0.11.0&lt;br&gt;
Platform: Ubuntu 10.04&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I use PostgreSQL table partitioning. That is, a trigger is to be invoked prior to every INSERT query.

The trigger looks like this:

@@@
create or replace function insert_into_partition()
returns trigger
as $$
begin
    ... (insert into child table instead!)
    return null; -- note this
end;
$$
language plpgsql;
@@@

The problem is: the trigger somehow breaks the &quot;returning id&quot; query generated by Rails. As a result, the record is saved correctly into the database, but the ActiveRecord instance cannot retrieve the newly created ID. For example:

@@@
person = Person.new(:fullname =&gt; 'John', :age =&gt; 21)
person.save
# then, person.id --&gt; nil
@@@

The problem is, as I figured out, due to the &quot;return null&quot; statement of the corresponding trigger. However, I suggest that Rails should never return a nil value after a successful save statement. There should be kind of check for the value of id before assigning it back to the ActiveRecord instance.

Regards,

Other information:
Gem: 1.7.2
Rails: 3.0.7
Pg: 0.11.0
Platform: Ubuntu 10.04</body>
      <body-html>&lt;div&gt;&lt;p&gt;I use PostgreSQL table partitioning. That is, a trigger is to be
invoked prior to every INSERT query.&lt;/p&gt;
&lt;p&gt;The trigger looks like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create or replace function insert_into_partition()
returns trigger
as $$
begin
    ... (insert into child table instead!)
    return null; -- note this
end;
$$
language plpgsql;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is: the trigger somehow breaks the &quot;returning id&quot;
query generated by Rails. As a result, the record is saved
correctly into the database, but the ActiveRecord instance cannot
retrieve the newly created ID. For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;person = Person.new(:fullname =&amp;gt; 'John', :age =&amp;gt; 21)
person.save
# then, person.id --&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is, as I figured out, due to the &quot;return null&quot;
statement of the corresponding trigger. However, I suggest that
Rails should never return a nil value after a successful save
statement. There should be kind of check for the value of id before
assigning it back to the ActiveRecord instance.&lt;/p&gt;
&lt;p&gt;Regards,&lt;/p&gt;
&lt;p&gt;Other information:&lt;br&gt;
Gem: 1.7.2&lt;br&gt;
Rails: 3.0.7&lt;br&gt;
Pg: 0.11.0&lt;br&gt;
Platform: Ubuntu 10.04&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-05-03T04:55:53+01:00</created-at>
      <creator-id type="integer">147748</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6767</number>
      <permalink>returning-id-does-not-work-due-to-trigger</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>&quot;Returning ID&quot; does not work due to trigger</title>
      <updated-at type="datetime">2011-05-03T04:58:05+01:00</updated-at>
      <user-id type="integer">147748</user-id>
      <version type="integer">1</version>
      <user-name>Nghi Pham</user-name>
      <creator-name>Nghi Pham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6767</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>i dont get it. why dont you just change your trigger to return the id?

also i dont quite get the last part

&gt; However, I suggest that Rails should never return a nil value after a successful save 
&gt; statement. There should be kind of check for the value of id before assigning it back to the 
&gt; ActiveRecord instance.

Does person.save return true?
you think it should return false and probably abort the transaction cause no id is given?</body>
      <body-html>&lt;div&gt;&lt;p&gt;i dont get it. why dont you just change your trigger to return
the id?&lt;/p&gt;
&lt;p&gt;also i dont quite get the last part&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, I suggest that Rails should never return a nil value
after a successful save statement. There should be kind of check
for the value of id before assigning it back to the ActiveRecord
instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does person.save return true?&lt;br&gt;
you think it should return false and probably abort the transaction
cause no id is given?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-05-03T15:17:05+01:00</created-at>
      <creator-id type="integer">147748</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6767</number>
      <permalink>returning-id-does-not-work-due-to-trigger</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>&quot;Returning ID&quot; does not work due to trigger</title>
      <updated-at type="datetime">2011-05-03T15:17:09+01:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">2</version>
      <user-name>Kane</user-name>
      <creator-name>Nghi Pham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6767</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt;&gt;i dont get it. why dont you just change your trigger to return the id?
Yes, &quot;return true&quot; in the trigger may somehow solve the problem. However, what I mean here is the stability of Rails: it should always retrieve the proper id after an insert regardless of whether or not &quot;insert into...returning id&quot; query is supported properly.

In this case, it's a fault of PostgreSQL itself that a trigger with &quot;return null&quot; breaks the &quot;returning id&quot; query (null returned). So, I suggest that Rails should not rely on this unstable feature of PostgreSQL. It should do extra work to make sure &quot;returning id&quot; is returning the right id; otherwise, try other way to obtain the newly inserted id
&gt;&gt;Does person.save return true?
&gt;&gt;you think it should return false and probably abort the transaction cause no id is given?
Yes, I think it should, in the worst case!
However, as I mentioned above, this is a problem of PostgreSQL and Rails should have a workarround for this</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;i dont get it. why dont you just change your trigger to return
the id? Yes, &quot;return true&quot; in the trigger may somehow solve the
problem. However, what I mean here is the stability of Rails: it
should always retrieve the proper id after an insert regardless of
whether or not &quot;insert into...returning id&quot; query is supported
properly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case, it's a fault of PostgreSQL itself that a trigger
with &quot;return null&quot; breaks the &quot;returning id&quot; query (null returned).
So, I suggest that Rails should not rely on this unstable feature
of PostgreSQL. It should do extra work to make sure &quot;returning id&quot;
is returning the right id; otherwise, try other way to obtain the
newly inserted id&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Does person.save return true? you think it should return false
and probably abort the transaction cause no id is given? Yes, I
think it should, in the worst case!&lt;br&gt;
However, as I mentioned above, this is a problem of PostgreSQL and
Rails should have a workarround for this&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-05-04T04:29:20+01:00</created-at>
      <creator-id type="integer">147748</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6767</number>
      <permalink>returning-id-does-not-work-due-to-trigger</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>&quot;Returning ID&quot; does not work due to trigger</title>
      <updated-at type="datetime">2011-05-04T04:29:22+01:00</updated-at>
      <user-id type="integer">147748</user-id>
      <version type="integer">3</version>
      <user-name>Nghi Pham</user-name>
      <creator-name>Nghi Pham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6767</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt;i dont get it. why dont you just change your trigger to return the id?

Yes, &quot;return true&quot; in the trigger may somehow solve the problem. However, what I mean here is the stability of Rails: it should always retrieve the proper id after an insert regardless of whether or not &quot;insert into...returning id&quot; query is supported properly.

In this case, it's a fault of PostgreSQL itself that a trigger with &quot;return null&quot; breaks the &quot;returning id&quot; query (null returned). So, I suggest that Rails should not rely on this unstable feature of PostgreSQL. It should do extra work to make sure &quot;returning id&quot; is returning the right id; otherwise, try other way to obtain the newly inserted id

&gt;Does person.save return true? you think it should return false and probably abort the transaction cause no id is given?

Yes, I think it should, in the worst case!
However, as I mentioned above, this is a problem of PostgreSQL and Rails should have a workarround for this</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;i dont get it. why dont you just change your trigger to return
the id?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, &quot;return true&quot; in the trigger may somehow solve the problem.
However, what I mean here is the stability of Rails: it should
always retrieve the proper id after an insert regardless of whether
or not &quot;insert into...returning id&quot; query is supported
properly.&lt;/p&gt;
&lt;p&gt;In this case, it's a fault of PostgreSQL itself that a trigger
with &quot;return null&quot; breaks the &quot;returning id&quot; query (null returned).
So, I suggest that Rails should not rely on this unstable feature
of PostgreSQL. It should do extra work to make sure &quot;returning id&quot;
is returning the right id; otherwise, try other way to obtain the
newly inserted id&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Does person.save return true? you think it should return false
and probably abort the transaction cause no id is given?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, I think it should, in the worst case!&lt;br&gt;
However, as I mentioned above, this is a problem of PostgreSQL and
Rails should have a workarround for this&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-05-04T04:32:54+01:00</created-at>
      <creator-id type="integer">147748</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6767</number>
      <permalink>returning-id-does-not-work-due-to-trigger</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>&quot;Returning ID&quot; does not work due to trigger</title>
      <updated-at type="datetime">2011-05-04T04:32:56+01:00</updated-at>
      <user-id type="integer">147748</user-id>
      <version type="integer">4</version>
      <user-name>Nghi Pham</user-name>
      <creator-name>Nghi Pham</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6767</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
