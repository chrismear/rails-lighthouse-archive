<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-11T04:16:35+00:00</created-at>
  <creator-id type="integer">11785</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1354</number>
  <permalink>habtm-finder_sql-and-preload-of-associations-bug</permalink>
  <priority type="integer">646</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>HABTM, :finder_sql and preload of associations bug</title>
  <updated-at type="datetime">2010-10-12T10:15:15+01:00</updated-at>
  <user-id type="integer">17433</user-id>
  <version type="integer">7</version>
  <user-name>Aditya Sanghi</user-name>
  <creator-name>Pawe&#322; Kondzior</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1354</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Let's say we have this model:
&lt;code&gt;
class Client &lt; ActiveRecord::Base
  has_and_belongs_to_many :pools, :class_name =&gt; 'Pool', :foreign_key =&gt; 'client_id', 
                          :finder_sql =&gt; %q{SELECT * FROM &quot;pools&quot; INNER JOIN &quot;clients_pools&quot; ON &quot;pools&quot;.id = &quot;clients_pools&quot;.pool_id WHERE (&quot;clients_pools&quot;.client_id = #{self.clients_pools_client_id})},
                          :delete_sql =&gt; %q{DELETE FROM &quot;clients_pools&quot; WHERE client_id = #{self.clients_pools_client_id} AND pool_id = #{self.record.id}},
                          :insert_sql =&gt;%q{INSERT INTO &quot;clients_pools&quot; (&quot;client_id&quot;, &quot;pool_id&quot;) VALUES (#{self.clients_pools_client_id}, #{record.id})}
  protected
  # if clinet kind is other that base use parent_id
  def clients_pools_client_id
    if self.kind_id != 1
      self.parent_id
    else
      self.id
    end
  end
end
&lt;/code&gt;

In rails 2.2 when we will try to this:
&lt;code&gt;
Client.first.pools
&lt;/code&gt;

Sql will be generated from this method `construct_sql`:
activerecord-2.2.0/lib/active_record/associations/has_and_belongs_to_many_association.rb

But when we will do preload
&lt;code&gt;
Client.find(:first, :include =&gt; :pools).pools
&lt;/code&gt;
AR will try firstly to do preload, ommiting finder_sql and generating it from relection, execute it with [] result then it will again do construct_sql but now without any execution. 

&lt;code&gt;
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations/has_and_belongs_to_many_association.rb:80:in `construct_sql'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations/association_collection.rb:21:in `initialize'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations.rb:1289:in `new'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations.rb:1289:in `pools'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `send'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `preload_has_and_belongs_to_many_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `each'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `preload_has_and_belongs_to_many_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:120:in `send'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:120:in `preload_one_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:114:in `each'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:114:in `preload_one_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:91:in `preload_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `preload_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `each'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `preload_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:1492:in `find_every'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:1452:in `find_initial'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:587:in `find'
&lt;/code&gt;

It seems that something here is really bad. If we have :finder_sql preload shouldn't generate it own sql. It should just do :finders_sql.

I thnik preload_has_and_belongs_to_many_association should ignore preload of :pools and just execute :finder_sql query and return it as array. Just like we have it in has_many.</original-body>
  <latest-body>Let's say we have this model:
&lt;code&gt;
class Client &lt; ActiveRecord::Base
  has_and_belongs_to_many :pools, :class_name =&gt; 'Pool', :foreign_key =&gt; 'client_id', 
                          :finder_sql =&gt; %q{SELECT * FROM &quot;pools&quot; INNER JOIN &quot;clients_pools&quot; ON &quot;pools&quot;.id = &quot;clients_pools&quot;.pool_id WHERE (&quot;clients_pools&quot;.client_id = #{self.clients_pools_client_id})},
                          :delete_sql =&gt; %q{DELETE FROM &quot;clients_pools&quot; WHERE client_id = #{self.clients_pools_client_id} AND pool_id = #{self.record.id}},
                          :insert_sql =&gt;%q{INSERT INTO &quot;clients_pools&quot; (&quot;client_id&quot;, &quot;pool_id&quot;) VALUES (#{self.clients_pools_client_id}, #{record.id})}
  protected
  # if clinet kind is other that base use parent_id
  def clients_pools_client_id
    if self.kind_id != 1
      self.parent_id
    else
      self.id
    end
  end
end
&lt;/code&gt;

In rails 2.2 when we will try to this:
&lt;code&gt;
Client.first.pools
&lt;/code&gt;

Sql will be generated from this method `construct_sql`:
activerecord-2.2.0/lib/active_record/associations/has_and_belongs_to_many_association.rb

But when we will do preload
&lt;code&gt;
Client.find(:first, :include =&gt; :pools).pools
&lt;/code&gt;
AR will try firstly to do preload, ommiting finder_sql and generating it from relection, execute it with [] result then it will again do construct_sql but now without any execution. 

&lt;code&gt;
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations/has_and_belongs_to_many_association.rb:80:in `construct_sql'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations/association_collection.rb:21:in `initialize'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations.rb:1289:in `new'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations.rb:1289:in `pools'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `send'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `preload_has_and_belongs_to_many_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `each'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `preload_has_and_belongs_to_many_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:120:in `send'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:120:in `preload_one_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:114:in `each'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:114:in `preload_one_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:91:in `preload_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `preload_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `each'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `preload_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:1492:in `find_every'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:1452:in `find_initial'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:587:in `find'
&lt;/code&gt;

It seems that something here is really bad. If we have :finder_sql preload shouldn't generate it own sql. It should just do :finders_sql.

I thnik preload_has_and_belongs_to_many_association should ignore preload of :pools and just execute :finder_sql query and return it as array. Just like we have it in has_many.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Let's say we have this model:&lt;/p&gt;
&lt;p&gt;class Client &amp;lt; ActiveRecord::Base has_and_belongs_to_many
:pools, :class_name =&amp;gt; 'Pool', :foreign_key =&amp;gt;
'client_id',&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;                      :finder_sql =&amp;gt; %q{SELECT * FROM &quot;pools&quot; INNER JOIN &quot;clients_pools&quot; ON &quot;pools&quot;.id = &quot;clients_pools&quot;.pool_id WHERE (&quot;clients_pools&quot;.client_id = #{self.clients_pools_client_id})},
                      :delete_sql =&amp;gt; %q{DELETE FROM &quot;clients_pools&quot; WHERE client_id = #{self.clients_pools_client_id} AND pool_id = #{self.record.id}},
                      :insert_sql =&amp;gt;%q{INSERT INTO &quot;clients_pools&quot; (&quot;client_id&quot;, &quot;pool_id&quot;) VALUES (#{self.clients_pools_client_id}, #{record.id})}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;protected # if clinet kind is other that base use parent_id def
clients_pools_client_id&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if self.kind_id != 1
  self.parent_id
else
  self.id
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;In rails 2.2 when we will try to this:&lt;/p&gt;
&lt;p&gt;Client.first.pools&lt;/p&gt;
&lt;p&gt;Sql will be generated from this method
&lt;code&gt;construct_sql&lt;/code&gt;:
activerecord-2.2.0/lib/active_record/associations/has_and_belongs_to_many_association.rb&lt;/p&gt;
&lt;p&gt;But when we will do preload&lt;/p&gt;
&lt;p&gt;Client.find(:first, :include =&amp;gt; :pools).pools&lt;/p&gt;
&lt;p&gt;AR will try firstly to do preload, ommiting finder_sql and
generating it from relection, execute it with [] result then it
will again do construct_sql but now without any execution.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations/has_and_belongs_to_many_association.rb:80:in `construct_sql'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations/association_collection.rb:21:in `initialize'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations.rb:1289:in `new'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations.rb:1289:in `pools'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `send'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `preload_has_and_belongs_to_many_association'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `each'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `preload_has_and_belongs_to_many_association'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:120:in `send'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:120:in `preload_one_association'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:114:in `each'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:114:in `preload_one_association'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:91:in `preload_associations'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `preload_associations'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `each'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `preload_associations'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:1492:in `find_every'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:1452:in `find_initial'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:587:in `find'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It seems that something here is really bad. If we have
:finder_sql preload shouldn't generate it own sql. It should just
do :finders_sql.&lt;/p&gt;
&lt;p&gt;I thnik preload_has_and_belongs_to_many_association should
ignore preload of :pools and just execute :finder_sql query and
return it as array. Just like we have it in has_many.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Let's say we have this model:
&lt;code&gt;
class Client &lt; ActiveRecord::Base
  has_and_belongs_to_many :pools, :class_name =&gt; 'Pool', :foreign_key =&gt; 'client_id', 
                          :finder_sql =&gt; %q{SELECT * FROM &quot;pools&quot; INNER JOIN &quot;clients_pools&quot; ON &quot;pools&quot;.id = &quot;clients_pools&quot;.pool_id WHERE (&quot;clients_pools&quot;.client_id = #{self.clients_pools_client_id})},
                          :delete_sql =&gt; %q{DELETE FROM &quot;clients_pools&quot; WHERE client_id = #{self.clients_pools_client_id} AND pool_id = #{self.record.id}},
                          :insert_sql =&gt;%q{INSERT INTO &quot;clients_pools&quot; (&quot;client_id&quot;, &quot;pool_id&quot;) VALUES (#{self.clients_pools_client_id}, #{record.id})}
  protected
  # if clinet kind is other that base use parent_id
  def clients_pools_client_id
    if self.kind_id != 1
      self.parent_id
    else
      self.id
    end
  end
end
&lt;/code&gt;

In rails 2.2 when we will try to this:
&lt;code&gt;
Client.first.pools
&lt;/code&gt;

Sql will be generated from this method `construct_sql`:
activerecord-2.2.0/lib/active_record/associations/has_and_belongs_to_many_association.rb

But when we will do preload
&lt;code&gt;
Client.find(:first, :include =&gt; :pools).pools
&lt;/code&gt;
AR will try firstly to do preload, ommiting finder_sql and generating it from relection, execute it with [] result then it will again do construct_sql but now without any execution. 

&lt;code&gt;
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations/has_and_belongs_to_many_association.rb:80:in `construct_sql'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations/association_collection.rb:21:in `initialize'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations.rb:1289:in `new'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations.rb:1289:in `pools'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `send'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `preload_has_and_belongs_to_many_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `each'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `preload_has_and_belongs_to_many_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:120:in `send'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:120:in `preload_one_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:114:in `each'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:114:in `preload_one_association'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:91:in `preload_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `preload_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `each'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `preload_associations'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:1492:in `find_every'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:1452:in `find_initial'
	from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:587:in `find'
&lt;/code&gt;

It seems that something here is really bad. If we have :finder_sql preload shouldn't generate it own sql. It should just do :finders_sql.

I thnik preload_has_and_belongs_to_many_association should ignore preload of :pools and just execute :finder_sql query and return it as array. Just like we have it in has_many.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Let's say we have this model: &lt;code&gt;class Client &amp;lt;
ActiveRecord::Base has_and_belongs_to_many :pools, :class_name
=&amp;gt; 'Pool', :foreign_key =&amp;gt; 'client_id',&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;                      :finder_sql =&amp;gt; %q{SELECT * FROM &quot;pools&quot; INNER JOIN &quot;clients_pools&quot; ON &quot;pools&quot;.id = &quot;clients_pools&quot;.pool_id WHERE (&quot;clients_pools&quot;.client_id = #{self.clients_pools_client_id})},
                      :delete_sql =&amp;gt; %q{DELETE FROM &quot;clients_pools&quot; WHERE client_id = #{self.clients_pools_client_id} AND pool_id = #{self.record.id}},
                      :insert_sql =&amp;gt;%q{INSERT INTO &quot;clients_pools&quot; (&quot;client_id&quot;, &quot;pool_id&quot;) VALUES (#{self.clients_pools_client_id}, #{record.id})}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;protected # if clinet kind is other that base use parent_id def
clients_pools_client_id&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if self.kind_id != 1
  self.parent_id
else
  self.id
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;In rails 2.2 when we will try to this:
&lt;code&gt;Client.first.pools&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sql will be generated from this method
&lt;code&gt;construct_sql&lt;/code&gt;:
activerecord-2.2.0/lib/active_record/associations/has_and_belongs_to_many_association.rb&lt;/p&gt;
&lt;p&gt;But when we will do preload &lt;code&gt;Client.find(:first, :include
=&amp;gt; :pools).pools&lt;/code&gt; AR will try firstly to do preload,
ommiting finder_sql and generating it from relection, execute it
with [] result then it will again do construct_sql but now without
any execution.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations/has_and_belongs_to_many_association.rb:80:in `construct_sql'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations/association_collection.rb:21:in `initialize'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations.rb:1289:in `new'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/associations.rb:1289:in `pools'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `send'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `preload_has_and_belongs_to_many_association'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `each'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:180:in `preload_has_and_belongs_to_many_association'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:120:in `send'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:120:in `preload_one_association'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:114:in `each'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:114:in `preload_one_association'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:91:in `preload_associations'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `preload_associations'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `each'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/association_preload.rb:90:in `preload_associations'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:1492:in `find_every'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:1452:in `find_initial'
from /Library/Ruby/Gems/1.8/gems/activerecord-2.2.0/lib/active_record/base.rb:587:in `find'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It seems that something here is really bad. If we have
:finder_sql preload shouldn't generate it own sql. It should just
do :finders_sql.&lt;/p&gt;
&lt;p&gt;I thnik preload_has_and_belongs_to_many_association should
ignore preload of :pools and just execute :finder_sql query and
return it as array. Just like we have it in has_many.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-11T04:16:35+00:00</created-at>
      <creator-id type="integer">11785</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1354</number>
      <permalink>habtm-finder_sql-and-preload-of-associations-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations_preload finder_sql habtm has_and_belongs_to_many preload</tag>
      <title>HABTM, :finder_sql and preload of associations bug</title>
      <updated-at type="datetime">2008-11-11T04:16:38+00:00</updated-at>
      <user-id type="integer">11785</user-id>
      <version type="integer">1</version>
      <user-name>Pawe&#322; Kondzior</user-name>
      <creator-name>Pawe&#322; Kondzior</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1354</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is biting me also in has_many - it's really rather inconvenient :p. 

class Box
  has_many :connections, :dependent =&gt; :destroy, :finder_sql =&gt; 'select * from connections where box1_id = #{id} or box2_id = #{id}'
end

class Connections
  belongs_to :box1, :class_name =&gt; &quot;Box&quot;, :foreign_key =&gt; :box1_id
  belongs_to :box2, :class_name =&gt; &quot;Box&quot;, :foreign_key =&gt; :box2_id
end

I'm happy to help fix it if at all possible. In the meantime, is there a sensible workaround?</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is biting me also in has_many - it's really rather
inconvenient :p.&lt;/p&gt;
&lt;p&gt;class Box has_many :connections, :dependent =&amp;gt; :destroy,
:finder_sql =&amp;gt; 'select * from connections where box1_id = #{id}
or box2_id = #{id}' end&lt;/p&gt;
&lt;p&gt;class Connections belongs_to :box1, :class_name =&amp;gt; &quot;Box&quot;,
:foreign_key =&amp;gt; :box1_id belongs_to :box2, :class_name =&amp;gt;
&quot;Box&quot;, :foreign_key =&amp;gt; :box2_id end&lt;/p&gt;
&lt;p&gt;I'm happy to help fix it if at all possible. In the meantime, is
there a sensible workaround?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-28T17:22:09+00:00</created-at>
      <creator-id type="integer">11785</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1354</number>
      <permalink>habtm-finder_sql-and-preload-of-associations-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations_preload finder_sql habtm has_and_belongs_to_many preload</tag>
      <title>HABTM, :finder_sql and preload of associations bug</title>
      <updated-at type="datetime">2008-11-28T17:22:11+00:00</updated-at>
      <user-id type="integer">39196</user-id>
      <version type="integer">2</version>
      <user-name>Nicholas Thomas</user-name>
      <creator-name>Pawe&#322; Kondzior</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1354</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I thnik adding :preload_sql for has_many, has_one and has_and_belongs_to_many that will bypass preload_has_and_belongs_to_many_association method would be solution here. I don't have right now time to check that this is even possible.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I thnik adding :preload_sql for has_many, has_one and
has_and_belongs_to_many that will bypass
preload_has_and_belongs_to_many_association method would be
solution here. I don't have right now time to check that this is
even possible.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-28T22:47:03+00:00</created-at>
      <creator-id type="integer">11785</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1354</number>
      <permalink>habtm-finder_sql-and-preload-of-associations-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations_preload finder_sql habtm has_and_belongs_to_many preload</tag>
      <title>HABTM, :finder_sql and preload of associations bug</title>
      <updated-at type="datetime">2008-11-28T22:47:06+00:00</updated-at>
      <user-id type="integer">11785</user-id>
      <version type="integer">3</version>
      <user-name>Pawe&#322; Kondzior</user-name>
      <creator-name>Pawe&#322; Kondzior</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1354</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>As it currently stands if you have finder_sql you're on your own for eager loading (both with preload and the old join based stuff) as the preloading code is just not going to be able to take your arbitrary sql statement and generalize it to produce a query return a set of objects. 

Adding a separate :preload_sql option would be possible, but i think it would have to be more than an sql fragment. A proc which given an array of (in this case) client objects returned an appropriate sql fragment. Until then I think this is a wontfix.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As it currently stands if you have finder_sql you're on your own
for eager loading (both with preload and the old join based stuff)
as the preloading code is just not going to be able to take your
arbitrary sql statement and generalize it to produce a query return
a set of objects.&lt;/p&gt;
&lt;p&gt;Adding a separate :preload_sql option would be possible, but i
think it would have to be more than an sql fragment. A proc which
given an array of (in this case) client objects returned an
appropriate sql fragment. Until then I think this is a wontfix.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-20T13:35:22+00:00</created-at>
      <creator-id type="integer">11785</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1354</number>
      <permalink>habtm-finder_sql-and-preload-of-associations-bug</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>associations_preload finder_sql habtm has_and_belongs_to_many preload</tag>
      <title>HABTM, :finder_sql and preload of associations bug</title>
      <updated-at type="datetime">2008-12-20T13:35:26+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">4</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Pawe&#322; Kondzior</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1354</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-12T09:10:39+01:00</created-at>
      <creator-id type="integer">11785</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: associations_preload finder_sql habtm has_and_belongs_to_many preload
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1354</number>
      <permalink>habtm-finder_sql-and-preload-of-associations-bug</permalink>
      <priority type="integer">646</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>HABTM, :finder_sql and preload of associations bug</title>
      <updated-at type="datetime">2010-10-12T09:10:41+01:00</updated-at>
      <user-id type="integer">1300</user-id>
      <version type="integer">6</version>
      <user-name>Anil Wadghule</user-name>
      <creator-name>Pawe&#322; Kondzior</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1354</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-12T10:14:43+01:00</created-at>
      <creator-id type="integer">11785</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1354</number>
      <permalink>habtm-finder_sql-and-preload-of-associations-bug</permalink>
      <priority type="integer">646</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>HABTM, :finder_sql and preload of associations bug</title>
      <updated-at type="datetime">2010-10-12T10:15:15+01:00</updated-at>
      <user-id type="integer">17433</user-id>
      <version type="integer">7</version>
      <user-name>Aditya Sanghi</user-name>
      <creator-name>Pawe&#322; Kondzior</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1354</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
