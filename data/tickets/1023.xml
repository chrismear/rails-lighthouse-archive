<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-11T15:09:46+01:00</created-at>
  <creator-id type="integer">28715</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1023</number>
  <permalink>connection-pool-always-resets-the-connection</permalink>
  <priority type="integer">461</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord bug</tag>
  <title>Connection Pool always resets the connection</title>
  <updated-at type="datetime">2009-03-10T12:24:13+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">3</version>
  <user-name>Pratik</user-name>
  <creator-name>Jeff Rafter</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1023</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I have noticed that the connection pool is resetting the connection to my Mysql database for every spec in my list of specs. Apart from the fact that this creates unnecessary overhead, it means that setting up connection specific settings for the database need to be repeated (e.g. FOREIGN_KEY_CHECKS = 0 for legacy databases). Placing a breakpoint (or log) in configure_connection in the adapter shows that it is getting called every time the connection is accessed from the pool.

This is the stack trace if I place an exception in the configure method:

vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:549:in `configure_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:288:in `reset!'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `send'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `evaluate_method'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in `call'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `run'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `each'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `send'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `run'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:277:in `run_callbacks'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:201:in `checkout_and_verify'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:196:in `checkout_existing_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:136:in `checkout'&#8232;/opt/local/lib/ruby/1.8/monitor.rb:242:in `synchronize'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:134:in `checkout'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:64:in `connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:250:in `retrieve_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:121:in `retrieve_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:113:in `connection'&#8232;vendor/rails/activerecord/lib/active_record/fixtures.rb:933:in `setup_fixtures'&#8232;vendor/plugins/rspec-rails/lib/spec/rails/example/rails_example_group.rb:15vendor/plugins/rspec/lib/spec/example/example_methods.rb:49:in `instance_eval'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:49:in `eval_each_fail_fast'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:48:in `each'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:48:in `eval_each_fail_fast'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:266:in `run_before_each'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:360:in `execute_in_class_hierarchy'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:359:in `each'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:359:in `execute_in_class_hierarchy'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:265:in `run_before_each'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:101:in `before_example'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:20:in `execute'&#8232;/opt/local/lib/ruby/1.8/timeout.rb:53:in `timeout'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:18:in `execute'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:303:in `execute_examples'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:302:in `each'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:302:in `execute_examples'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:130:in `run'&#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:22:in `run'&#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in `each'&#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in `run'&#8232;vendor/plugins/rspec/lib/spec/runner/options.rb:106:in `run_examples'&#8232;vendor/plugins/rspec/lib/spec/runner/command_line.rb:19:in `run'script/spec:4</original-body>
  <latest-body>I have noticed that the connection pool is resetting the connection to my Mysql database for every spec in my list of specs. Apart from the fact that this creates unnecessary overhead, it means that setting up connection specific settings for the database need to be repeated (e.g. FOREIGN_KEY_CHECKS = 0 for legacy databases). Placing a breakpoint (or log) in configure_connection in the adapter shows that it is getting called every time the connection is accessed from the pool.

This is the stack trace if I place an exception in the configure method:

vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:549:in `configure_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:288:in `reset!'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `send'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `evaluate_method'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in `call'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `run'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `each'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `send'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `run'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:277:in `run_callbacks'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:201:in `checkout_and_verify'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:196:in `checkout_existing_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:136:in `checkout'&#8232;/opt/local/lib/ruby/1.8/monitor.rb:242:in `synchronize'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:134:in `checkout'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:64:in `connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:250:in `retrieve_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:121:in `retrieve_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:113:in `connection'&#8232;vendor/rails/activerecord/lib/active_record/fixtures.rb:933:in `setup_fixtures'&#8232;vendor/plugins/rspec-rails/lib/spec/rails/example/rails_example_group.rb:15vendor/plugins/rspec/lib/spec/example/example_methods.rb:49:in `instance_eval'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:49:in `eval_each_fail_fast'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:48:in `each'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:48:in `eval_each_fail_fast'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:266:in `run_before_each'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:360:in `execute_in_class_hierarchy'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:359:in `each'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:359:in `execute_in_class_hierarchy'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:265:in `run_before_each'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:101:in `before_example'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:20:in `execute'&#8232;/opt/local/lib/ruby/1.8/timeout.rb:53:in `timeout'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:18:in `execute'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:303:in `execute_examples'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:302:in `each'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:302:in `execute_examples'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:130:in `run'&#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:22:in `run'&#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in `each'&#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in `run'&#8232;vendor/plugins/rspec/lib/spec/runner/options.rb:106:in `run_examples'&#8232;vendor/plugins/rspec/lib/spec/runner/command_line.rb:19:in `run'script/spec:4</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have noticed that the connection pool is resetting the
connection to my Mysql database for every spec in my list of specs.
Apart from the fact that this creates unnecessary overhead, it
means that setting up connection specific settings for the database
need to be repeated (e.g. FOREIGN_KEY_CHECKS = 0 for legacy
databases). Placing a breakpoint (or log) in configure_connection
in the adapter shows that it is getting called every time the
connection is accessed from the pool.&lt;/p&gt;
&lt;p&gt;This is the stack trace if I place an exception in the configure
method:&lt;/p&gt;
&lt;p&gt;
vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:549:in
&lt;code&gt;configure_connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:288:in&lt;/code&gt;reset!'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in
&lt;code&gt;send'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in&lt;/code&gt;evaluate_method'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in
&lt;code&gt;call'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in&lt;/code&gt;run'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in
&lt;code&gt;each'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in&lt;/code&gt;send'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in
&lt;code&gt;run'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:277:in&lt;/code&gt;run_callbacks'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:201:in
&lt;code&gt;checkout_and_verify'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:196:in&lt;/code&gt;checkout_existing_connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:136:in
&lt;code&gt;checkout'&amp;#8232;/opt/local/lib/ruby/1.8/monitor.rb:242:in&lt;/code&gt;synchronize'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:134:in
&lt;code&gt;checkout'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:64:in&lt;/code&gt;connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:250:in
&lt;code&gt;retrieve_connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:121:in&lt;/code&gt;retrieve_connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:113:in
&lt;code&gt;connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/fixtures.rb:933:in&lt;/code&gt;setup_fixtures'&amp;#8232;vendor/plugins/rspec-rails/lib/spec/rails/example/rails_example_group.rb:15vendor/plugins/rspec/lib/spec/example/example_methods.rb:49:in
&lt;code&gt;instance_eval'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:49:in&lt;/code&gt;eval_each_fail_fast'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:48:in
&lt;code&gt;each'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:48:in&lt;/code&gt;eval_each_fail_fast'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:266:in
&lt;code&gt;run_before_each'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:360:in&lt;/code&gt;execute_in_class_hierarchy'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:359:in
&lt;code&gt;each'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:359:in&lt;/code&gt;execute_in_class_hierarchy'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:265:in
&lt;code&gt;run_before_each'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:101:in&lt;/code&gt;before_example'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:20:in
&lt;code&gt;execute'&amp;#8232;/opt/local/lib/ruby/1.8/timeout.rb:53:in&lt;/code&gt;timeout'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:18:in
&lt;code&gt;execute'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:303:in&lt;/code&gt;execute_examples'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:302:in
&lt;code&gt;each'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:302:in&lt;/code&gt;execute_examples'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:130:in
&lt;code&gt;run'&amp;#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:22:in&lt;/code&gt;run'&amp;#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in
&lt;code&gt;each'&amp;#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in&lt;/code&gt;run'&amp;#8232;vendor/plugins/rspec/lib/spec/runner/options.rb:106:in
&lt;code&gt;run_examples'&amp;#8232;vendor/plugins/rspec/lib/spec/runner/command_line.rb:19:in&lt;/code&gt;run'script/spec:4&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have noticed that the connection pool is resetting the connection to my Mysql database for every spec in my list of specs. Apart from the fact that this creates unnecessary overhead, it means that setting up connection specific settings for the database need to be repeated (e.g. FOREIGN_KEY_CHECKS = 0 for legacy databases). Placing a breakpoint (or log) in configure_connection in the adapter shows that it is getting called every time the connection is accessed from the pool.

This is the stack trace if I place an exception in the configure method:

vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:549:in `configure_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:288:in `reset!'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `send'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in `evaluate_method'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in `call'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `run'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `each'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `send'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in `run'&#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:277:in `run_callbacks'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:201:in `checkout_and_verify'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:196:in `checkout_existing_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:136:in `checkout'&#8232;/opt/local/lib/ruby/1.8/monitor.rb:242:in `synchronize'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:134:in `checkout'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:64:in `connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:250:in `retrieve_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:121:in `retrieve_connection'&#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:113:in `connection'&#8232;vendor/rails/activerecord/lib/active_record/fixtures.rb:933:in `setup_fixtures'&#8232;vendor/plugins/rspec-rails/lib/spec/rails/example/rails_example_group.rb:15vendor/plugins/rspec/lib/spec/example/example_methods.rb:49:in `instance_eval'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:49:in `eval_each_fail_fast'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:48:in `each'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:48:in `eval_each_fail_fast'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:266:in `run_before_each'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:360:in `execute_in_class_hierarchy'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:359:in `each'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:359:in `execute_in_class_hierarchy'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:265:in `run_before_each'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:101:in `before_example'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:20:in `execute'&#8232;/opt/local/lib/ruby/1.8/timeout.rb:53:in `timeout'&#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:18:in `execute'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:303:in `execute_examples'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:302:in `each'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:302:in `execute_examples'&#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:130:in `run'&#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:22:in `run'&#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in `each'&#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in `run'&#8232;vendor/plugins/rspec/lib/spec/runner/options.rb:106:in `run_examples'&#8232;vendor/plugins/rspec/lib/spec/runner/command_line.rb:19:in `run'script/spec:4</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have noticed that the connection pool is resetting the
connection to my Mysql database for every spec in my list of specs.
Apart from the fact that this creates unnecessary overhead, it
means that setting up connection specific settings for the database
need to be repeated (e.g. FOREIGN_KEY_CHECKS = 0 for legacy
databases). Placing a breakpoint (or log) in configure_connection
in the adapter shows that it is getting called every time the
connection is accessed from the pool.&lt;/p&gt;
&lt;p&gt;This is the stack trace if I place an exception in the configure
method:&lt;/p&gt;
&lt;p&gt;
vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:549:in
&lt;code&gt;configure_connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb:288:in&lt;/code&gt;reset!'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in
&lt;code&gt;send'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:178:in&lt;/code&gt;evaluate_method'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:166:in
&lt;code&gt;call'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in&lt;/code&gt;run'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in
&lt;code&gt;each'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in&lt;/code&gt;send'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:90:in
&lt;code&gt;run'&amp;#8232;vendor/rails/activesupport/lib/active_support/callbacks.rb:277:in&lt;/code&gt;run_callbacks'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:201:in
&lt;code&gt;checkout_and_verify'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:196:in&lt;/code&gt;checkout_existing_connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:136:in
&lt;code&gt;checkout'&amp;#8232;/opt/local/lib/ruby/1.8/monitor.rb:242:in&lt;/code&gt;synchronize'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:134:in
&lt;code&gt;checkout'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:64:in&lt;/code&gt;connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:250:in
&lt;code&gt;retrieve_connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:121:in&lt;/code&gt;retrieve_connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb:113:in
&lt;code&gt;connection'&amp;#8232;vendor/rails/activerecord/lib/active_record/fixtures.rb:933:in&lt;/code&gt;setup_fixtures'&amp;#8232;vendor/plugins/rspec-rails/lib/spec/rails/example/rails_example_group.rb:15vendor/plugins/rspec/lib/spec/example/example_methods.rb:49:in
&lt;code&gt;instance_eval'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:49:in&lt;/code&gt;eval_each_fail_fast'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:48:in
&lt;code&gt;each'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:48:in&lt;/code&gt;eval_each_fail_fast'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:266:in
&lt;code&gt;run_before_each'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:360:in&lt;/code&gt;execute_in_class_hierarchy'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:359:in
&lt;code&gt;each'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:359:in&lt;/code&gt;execute_in_class_hierarchy'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:265:in
&lt;code&gt;run_before_each'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:101:in&lt;/code&gt;before_example'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:20:in
&lt;code&gt;execute'&amp;#8232;/opt/local/lib/ruby/1.8/timeout.rb:53:in&lt;/code&gt;timeout'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_methods.rb:18:in
&lt;code&gt;execute'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:303:in&lt;/code&gt;execute_examples'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:302:in
&lt;code&gt;each'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:302:in&lt;/code&gt;execute_examples'&amp;#8232;vendor/plugins/rspec/lib/spec/example/example_group_methods.rb:130:in
&lt;code&gt;run'&amp;#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:22:in&lt;/code&gt;run'&amp;#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in
&lt;code&gt;each'&amp;#8232;vendor/plugins/rspec/lib/spec/runner/example_group_runner.rb:21:in&lt;/code&gt;run'&amp;#8232;vendor/plugins/rspec/lib/spec/runner/options.rb:106:in
&lt;code&gt;run_examples'&amp;#8232;vendor/plugins/rspec/lib/spec/runner/command_line.rb:19:in&lt;/code&gt;run'script/spec:4&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-11T15:09:46+01:00</created-at>
      <creator-id type="integer">28715</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1023</number>
      <permalink>connection-pool-always-resets-the-connection</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug</tag>
      <title>Connection Pool always resets the connection</title>
      <updated-at type="datetime">2008-09-11T15:09:51+01:00</updated-at>
      <user-id type="integer">28715</user-id>
      <version type="integer">1</version>
      <user-name>Jeff Rafter</user-name>
      <creator-name>Jeff Rafter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1023</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>As I understand it this is by design - we want the reusable connection to start off in the same state each time.  

Where are you setting your extra connection settings at the moment?

I ask because most obvious places I can think of would only initialise the connection settings for the first connection the app has; but it can reconnect at any time (eg. if the db server has dropped the connection due to inactivity).  Do we need some kind of after_connection callback that could be used to set up project-specific goodness?</body>
      <body-html>&lt;div&gt;&lt;p&gt;As I understand it this is by design - we want the reusable
connection to start off in the same state each time.&lt;/p&gt;
&lt;p&gt;Where are you setting your extra connection settings at the
moment?&lt;/p&gt;
&lt;p&gt;I ask because most obvious places I can think of would only
initialise the connection settings for the first connection the app
has; but it can reconnect at any time (eg. if the db server has
dropped the connection due to inactivity). Do we need some kind of
after_connection callback that could be used to set up
project-specific goodness?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-25T03:45:27+00:00</created-at>
      <creator-id type="integer">28715</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1023</number>
      <permalink>connection-pool-always-resets-the-connection</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug</tag>
      <title>Connection Pool always resets the connection</title>
      <updated-at type="datetime">2008-11-25T03:45:29+00:00</updated-at>
      <user-id type="integer">10460</user-id>
      <version type="integer">2</version>
      <user-name>Will Bryant</user-name>
      <creator-name>Jeff Rafter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1023</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You should be using Connection's checkout callback. Does that solve the problem ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;You should be using Connection's checkout callback. Does that
solve the problem ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-10T12:24:11+00:00</created-at>
      <creator-id type="integer">28715</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1023</number>
      <permalink>connection-pool-always-resets-the-connection</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord bug</tag>
      <title>Connection Pool always resets the connection</title>
      <updated-at type="datetime">2009-03-10T12:24:13+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>Jeff Rafter</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1023</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
