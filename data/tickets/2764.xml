<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-05T02:43:00+01:00</created-at>
  <creator-id type="integer">37814</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2764</number>
  <permalink>supporting-partial-updates-for-serialized-columns</permalink>
  <priority type="integer">1871</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord attributes dirty partial serialized updates</tag>
  <title>Supporting partial updates for serialized columns</title>
  <updated-at type="datetime">2009-07-05T04:58:46+01:00</updated-at>
  <user-id type="integer">141</user-id>
  <version type="integer">11</version>
  <user-name>Michael Koziarski</user-name>
  <creator-name>coderrr</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This is my first pass at supporting partial updates for serialized columns.

The fact that serialized columns are always saved, regardless of whether they have changed, led to data clobbering issues in my production app.

Looking for some feedback on this.</original-body>
  <latest-body>This is my first pass at supporting partial updates for serialized columns.

The fact that serialized columns are always saved, regardless of whether they have changed, led to data clobbering issues in my production app.

Looking for some feedback on this.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is my first pass at supporting partial updates for
serialized columns.&lt;/p&gt;
&lt;p&gt;The fact that serialized columns are always saved, regardless of
whether they have changed, led to data clobbering issues in my
production app.&lt;/p&gt;
&lt;p&gt;Looking for some feedback on this.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is my first pass at supporting partial updates for serialized columns.

The fact that serialized columns are always saved, regardless of whether they have changed, led to data clobbering issues in my production app.

Looking for some feedback on this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is my first pass at supporting partial updates for
serialized columns.&lt;/p&gt;
&lt;p&gt;The fact that serialized columns are always saved, regardless of
whether they have changed, led to data clobbering issues in my
production app.&lt;/p&gt;
&lt;p&gt;Looking for some feedback on this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-05T02:43:00+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-06-05T02:43:07+01:00</updated-at>
      <user-id type="integer">37814</user-id>
      <version type="integer">1</version>
      <user-name>coderrr</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>fixed bug with nils; updated tests</body>
      <body-html>&lt;div&gt;&lt;p&gt;fixed bug with nils; updated tests&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-05T02:59:12+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord attributes dirty partial serialized updates</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-06-05T02:59:17+01:00</updated-at>
      <user-id type="integer">37814</user-id>
      <version type="integer">2</version>
      <user-name>coderrr</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Still studying the code (as I could use this functionality as well on my current app), but shouldn't this:

+        return val if val.is_a? String and val =~ /^---/

be more like:

+        return val if val.is_a? String and val =~ /\A---/</body>
      <body-html>&lt;div&gt;&lt;p&gt;Still studying the code (as I could use this functionality as
well on my current app), but shouldn't this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; return val if val.is_a? String and val =~ /^---/&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;be more like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; return val if val.is_a? String and val =~ /\A---/&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-19T10:18:39+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord attributes dirty partial serialized updates</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-06-19T10:18:43+01:00</updated-at>
      <user-id type="integer">24394</user-id>
      <version type="integer">3</version>
      <user-name>chris finne</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>wow glad someone is actually looking at this :)

Yes, I believe you are right that is more correct... the one I used I pulled right out of base.rb:

      def object_from_yaml(string)
        return string unless string.is_a?(String) &amp;&amp; string =~ /^---/
        YAML::load(string) rescue string
      end

But that would match &quot;abcd\n---&quot; so that's bad, thanks for pointing this out.</body>
      <body-html>&lt;div&gt;&lt;p&gt;wow glad someone is actually looking at this :)&lt;/p&gt;
&lt;p&gt;Yes, I believe you are right that is more correct... the one I
used I pulled right out of base.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def object_from_yaml(string)
    return string unless string.is_a?(String) &amp;amp;&amp;amp; string =~ /^---/
    YAML::load(string) rescue string
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But that would match &quot;abcd\n---&quot; so that's bad, thanks for
pointing this out.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-19T10:30:20+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord attributes dirty partial serialized updates</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-06-19T10:30:24+01:00</updated-at>
      <user-id type="integer">37814</user-id>
      <version type="integer">4</version>
      <user-name>coderrr</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I'm not sure I like doing this, my preference would be to provide an API to allow users to mark an attribute as dirty rather than comparing the yaml strings.  That way people could implement their own functionality to figure this out if they want to.

something as simple as mark_dirty :some_serialized_attribute would enable this for those who need it, without the complexity and cost being paid by every other user.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not sure I like doing this, my preference would be to
provide an API to allow users to mark an attribute as dirty rather
than comparing the yaml strings. That way people could implement
their own functionality to figure this out if they want to.&lt;/p&gt;
&lt;p&gt;something as simple as mark_dirty :some_serialized_attribute
would enable this for those who need it, without the complexity and
cost being paid by every other user.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-26T06:23:23+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord attributes dirty partial serialized updates</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-06-26T06:23:25+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">5</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Hey Koz,

Thanks for responding to this ticket.  So I totally understand not wanting to pay the perf penalty for this.

Would you be opposed to a solution which almost has no perf impact on people who don't care for the feature?  For example you call a class method like, track_dirty :some_serialized_attribute, which then compiles the method(s) which do the necessary yaml comparisons.  If the user doesn't invoke this feature then the method remains a no-op and they pay almost no perf penalty.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Koz,&lt;/p&gt;
&lt;p&gt;Thanks for responding to this ticket. So I totally understand
not wanting to pay the perf penalty for this.&lt;/p&gt;
&lt;p&gt;Would you be opposed to a solution which almost has no perf
impact on people who don't care for the feature? For example you
call a class method like, track_dirty :some_serialized_attribute,
which then compiles the method(s) which do the necessary yaml
comparisons. If the user doesn't invoke this feature then the
method remains a no-op and they pay almost no perf penalty.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-26T09:49:04+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord attributes dirty partial serialized updates</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-06-26T09:49:09+01:00</updated-at>
      <user-id type="integer">37814</user-id>
      <version type="integer">6</version>
      <user-name>coderrr</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>An API which would let you explicitly mark a column as dirty would let
you achive this with an after_find and a before_save.  So that's the
right option I think.</body>
      <body-html>&lt;div&gt;&lt;p&gt;An API which would let you explicitly mark a column as dirty
would let&lt;br&gt;
you achive this with an after_find and a before_save. So that's
the&lt;br&gt;
right option I think.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-27T18:22:01+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord attributes dirty partial serialized updates</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-06-27T18:22:03+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">7</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>So, we already have the will_change! API.  But at some point (i forget what version) you stopped requiring this for serialized attributes and just always saved them, since you guys, I guess, decided you didn't want people to have to hit will_change! every time they touched a serialized attribute.

So are you suggesting to have some option which maybe reverts the behavior to the original which will then require will_change! every time you touch a serialized attribute?  Or some class method which reverts the behavior on an attribute-by-attribute basis?

I still prefer having rails handle this automatically for me if I tell it to.  I think the reason you guys probably removed the partial updates for serialized attributes originally was because no one realized/remembered to call will_change! every time they touched it.  I think this can probably be achieved with very little overhead for people who decide not to use it.

What do you think?</body>
      <body-html>&lt;div&gt;&lt;p&gt;So, we already have the will_change! API. But at some point (i
forget what version) you stopped requiring this for serialized
attributes and just always saved them, since you guys, I guess,
decided you didn't want people to have to hit will_change! every
time they touched a serialized attribute.&lt;/p&gt;
&lt;p&gt;So are you suggesting to have some option which maybe reverts
the behavior to the original which will then require will_change!
every time you touch a serialized attribute? Or some class method
which reverts the behavior on an attribute-by-attribute basis?&lt;/p&gt;
&lt;p&gt;I still prefer having rails handle this automatically for me if
I tell it to. I think the reason you guys probably removed the
partial updates for serialized attributes originally was because no
one realized/remembered to call will_change! every time they
touched it. I think this can probably be achieved with very little
overhead for people who decide not to use it.&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-29T19:09:40+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord attributes dirty partial serialized updates</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-06-29T19:09:44+01:00</updated-at>
      <user-id type="integer">37814</user-id>
      <version type="integer">8</version>
      <user-name>coderrr</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I think the best option is to add an option (per class) which says
whether or not to support partial updates with serialized attributes.
Currently we don't allow you to do that at all, we just *always* save
them. That combined with will_change! will let people opt-in to the
dirty tracking that you're after here.

Whereas the majority of users can just stick with the defaults and
always save them, people will be able to mark things as dirty using
their own custom accessors.  seems like a good win.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think the best option is to add an option (per class) which
says&lt;br&gt;
whether or not to support partial updates with serialized
attributes.&lt;br&gt;
Currently we don't allow you to do that at all, we just
&lt;em&gt;always&lt;/em&gt; save&lt;br&gt;
them. That combined with will_change! will let people opt-in to
the&lt;br&gt;
dirty tracking that you're after here.&lt;/p&gt;
&lt;p&gt;Whereas the majority of users can just stick with the defaults
and&lt;br&gt;
always save them, people will be able to mark things as dirty
using&lt;br&gt;
their own custom accessors. seems like a good win.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-30T03:23:38+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord attributes dirty partial serialized updates</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-06-30T03:23:40+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">9</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Yea I agree that is better than what we have now.  But I am more interested in getting serialized attr updates for free.  Having to call will_change! every time you update a hash or array index is quite error prone.  If it could be done on an opt-in (even per-attr) basis w/o a perf penalty to those who don't opt-in, would you be opposed?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yea I agree that is better than what we have now. But I am more
interested in getting serialized attr updates for free. Having to
call will_change! every time you update a hash or array index is
quite error prone. If it could be done on an opt-in (even per-attr)
basis w/o a perf penalty to those who don't opt-in, would you be
opposed?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-30T16:34:38+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord attributes dirty partial serialized updates</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-06-30T16:34:40+01:00</updated-at>
      <user-id type="integer">37814</user-id>
      <version type="integer">10</version>
      <user-name>coderrr</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Yeah, I'm kinda opposed to making those kind of changes, but would be
happy to look at a patch which achieved it.

Fundamentally if you're directly working with serialized objects (i.e.
without encapsulation) then you'll have problems.

If you're doing it with encapsulation, then there's no difficulties at all.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah, I'm kinda opposed to making those kind of changes, but
would be&lt;br&gt;
happy to look at a patch which achieved it.&lt;/p&gt;
&lt;p&gt;Fundamentally if you're directly working with serialized objects
(i.e.&lt;br&gt;
without encapsulation) then you'll have problems.&lt;/p&gt;
&lt;p&gt;If you're doing it with encapsulation, then there's no
difficulties at all.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-05T04:58:45+01:00</created-at>
      <creator-id type="integer">37814</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2764</number>
      <permalink>supporting-partial-updates-for-serialized-columns</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord attributes dirty partial serialized updates</tag>
      <title>Supporting partial updates for serialized columns</title>
      <updated-at type="datetime">2009-07-05T04:58:46+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">11</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>coderrr</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2764</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>624177dd5284fa9c718351c68f21207e2da273d1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-06-05T02:43:00+01:00</created-at>
      <filename>0001-support-dirty-attributes-for-serialized-columns.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">129890</id>
      <size type="integer">7718</size>
      <uploader-id type="integer">37814</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/129890/0001-support-dirty-attributes-for-serialized-columns.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>c5f9bc3148b0ef3a385a6d8b8c4da9a992335fb6</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-06-05T02:59:13+01:00</created-at>
      <filename>0001-support-dirty-attributes-for-serialized-columns.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">129891</id>
      <size type="integer">8101</size>
      <uploader-id type="integer">37814</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/129891/0001-support-dirty-attributes-for-serialized-columns.patch</url>
    </attachment>
  </attachments>
</ticket>
