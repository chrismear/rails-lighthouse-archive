<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2010-12-11T14:47:21+00:00</created-at>
  <creator-id type="integer">31422</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6150</number>
  <permalink>has-one-association-nullifies-object-to-early</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>activerecord callbacks has_one</tag>
  <title>Has one association nullifies object to early</title>
  <updated-at type="datetime">2011-03-18T16:36:27+00:00</updated-at>
  <user-id type="integer">31422</user-id>
  <version type="integer">6</version>
  <user-name>Wojciech Wn&#281;trzak</user-name>
  <creator-name>Wojciech Wn&#281;trzak</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6150</url>
  <priority-name nil="true"></priority-name>
  <original-body>The best way to show the problem will be by code:
@@@ ruby
class User &lt; ActiveRecord::Base
  has_one :address, :dependent =&gt; :nullify
  before_destroy :address_do_something
  delegate :do_something, :to =&gt; :address, :prefix =&gt; true
end
@@@

@@@ ruby
class Address &lt; ActiveRecord::Base
  belongs_to :user
  def do_something
    # do something with user which shouldn't be nil
    user.inspect
  end
end
@@@

Problem is when method do_something is called by User `before_destroy` callback. When option `dependent` is specified to `nullify`, associated user is nil (this is happening before destroy).
Shouldn't this associated object be set to nil after destroy?

You can see and check that bug in sample app:
https://github.com/morgoth/nullify-bug</original-body>
  <latest-body>The best way to show the problem will be by code:
@@@ ruby
class User &lt; ActiveRecord::Base
  has_one :address, :dependent =&gt; :nullify
  before_destroy :address_do_something
  delegate :do_something, :to =&gt; :address, :prefix =&gt; true
end
@@@

@@@ ruby
class Address &lt; ActiveRecord::Base
  belongs_to :user
  def do_something
    # do something with user which shouldn't be nil
    user.inspect
  end
end
@@@

Problem is when method do_something is called by User `before_destroy` callback. When option `dependent` is specified to `nullify`, associated user is nil (this is happening before destroy).
Shouldn't this associated object be set to nil after destroy?

You can see and check that bug in sample app:
https://github.com/morgoth/nullify-bug</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The best way to show the problem will be by code:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_one :address, :dependent =&amp;gt; :nullify
  before_destroy :address_do_something
  delegate :do_something, :to =&amp;gt; :address, :prefix =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Address &amp;lt; ActiveRecord::Base
  belongs_to :user
  def do_something
    # do something with user which shouldn't be nil
    user.inspect
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Problem is when method do_something is called by User
&lt;code&gt;before_destroy&lt;/code&gt; callback. When option
&lt;code&gt;dependent&lt;/code&gt; is specified to &lt;code&gt;nullify&lt;/code&gt;,
associated user is nil (this is happening before destroy).&lt;br&gt;
Shouldn't this associated object be set to nil after destroy?&lt;/p&gt;
&lt;p&gt;You can see and check that bug in sample app:&lt;br&gt;
&lt;a href=
&quot;https://github.com/morgoth/nullify-bug&quot;&gt;https://github.com/morgoth/nullify-bug&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The best way to show the problem will be by code:
@@@ ruby
class User &lt; ActiveRecord::Base
  has_one :address, :dependent =&gt; :nullify
  before_destroy :address_do_something
  delegate :do_something, :to =&gt; :address, :prefix =&gt; true
end
@@@

@@@ ruby
class Address &lt; ActiveRecord::Base
  belongs_to :user
  def do_something
    # do something with user which shouldn't be nil
    user.inspect
  end
end
@@@

Problem is when method do_something is called by User `before_destroy` callback. When option `dependent` is specified to `nullify`, associated user is nil (this is happening before destroy).
Shouldn't this associated object be set to nil after destroy?

You can see and check that bug in sample app:
https://github.com/morgoth/nullify-bug</body>
      <body-html>&lt;div&gt;&lt;p&gt;The best way to show the problem will be by code:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_one :address, :dependent =&amp;gt; :nullify
  before_destroy :address_do_something
  delegate :do_something, :to =&amp;gt; :address, :prefix =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Address &amp;lt; ActiveRecord::Base
  belongs_to :user
  def do_something
    # do something with user which shouldn't be nil
    user.inspect
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Problem is when method do_something is called by User
&lt;code&gt;before_destroy&lt;/code&gt; callback. When option
&lt;code&gt;dependent&lt;/code&gt; is specified to &lt;code&gt;nullify&lt;/code&gt;,
associated user is nil (this is happening before destroy).&lt;br&gt;
Shouldn't this associated object be set to nil after destroy?&lt;/p&gt;
&lt;p&gt;You can see and check that bug in sample app:&lt;br&gt;
&lt;a href=
&quot;https://github.com/morgoth/nullify-bug&quot;&gt;https://github.com/morgoth/nullify-bug&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-11T14:47:21+00:00</created-at>
      <creator-id type="integer">31422</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6150</number>
      <permalink>has-one-association-nullifies-object-to-early</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord callbacks has_one</tag>
      <title>Has one association nullifies object to early</title>
      <updated-at type="datetime">2010-12-11T14:47:24+00:00</updated-at>
      <user-id type="integer">31422</user-id>
      <version type="integer">1</version>
      <user-name>Wojciech Wn&#281;trzak</user-name>
      <creator-name>Wojciech Wn&#281;trzak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6150</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>After digging a while I found that everything works fine when `has_one` is placed below `before_destroy` method.
This is caused by defining callback method `:has_one_dependent_nullify_for_address` by method `has_one`.
See code here:
[Defining method executed by before_destroy](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations.rb#L1729)

Order of methods passed to `before_destroy` is important.
Maybe methods generated by rails should be somehow placed at the end of this chain?

And another question:
Is there a proper order of using methods like: `has_one`, `validates`, `before_destroy`, etc. in ruby file, that will avoid problems like this one?</body>
      <body-html>&lt;div&gt;&lt;p&gt;After digging a while I found that everything works fine when
&lt;code&gt;has_one&lt;/code&gt; is placed below &lt;code&gt;before_destroy&lt;/code&gt;
method.&lt;br&gt;
This is caused by defining callback method
&lt;code&gt;:has_one_dependent_nullify_for_address&lt;/code&gt; by method
&lt;code&gt;has_one&lt;/code&gt;.&lt;br&gt;
See code here:&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations.rb#L1729&quot;&gt;
Defining method executed by before_destroy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Order of methods passed to &lt;code&gt;before_destroy&lt;/code&gt; is
important.&lt;br&gt;
Maybe methods generated by rails should be somehow placed at the
end of this chain?&lt;/p&gt;
&lt;p&gt;And another question:&lt;br&gt;
Is there a proper order of using methods like:
&lt;code&gt;has_one&lt;/code&gt;, &lt;code&gt;validates&lt;/code&gt;,
&lt;code&gt;before_destroy&lt;/code&gt;, etc. in ruby file, that will avoid
problems like this one?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-12T11:41:47+00:00</created-at>
      <creator-id type="integer">31422</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6150</number>
      <permalink>has-one-association-nullifies-object-to-early</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord callbacks has_one</tag>
      <title>Has one association nullifies object to early</title>
      <updated-at type="datetime">2010-12-12T11:41:48+00:00</updated-at>
      <user-id type="integer">31422</user-id>
      <version type="integer">2</version>
      <user-name>Wojciech Wn&#281;trzak</user-name>
      <creator-name>Wojciech Wn&#281;trzak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6150</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I added failing test.
You can check, that test will pass if line:
@@@
`before_destroy { |company| company.account &amp;&amp; company.account.set_dependent_firm_name }`
@@@
will be moved to top of file.
Reason of this is as described in previous comment.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I added failing test.&lt;br&gt;
You can check, that test will pass if line:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;code&gt;before_destroy { |company| company.account &amp;amp;amp;&amp;amp;amp; company.account.set_dependent_firm_name }&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
will be moved to top of file.&lt;br&gt;
Reason of this is as described in previous comment.&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-16T09:41:35+00:00</created-at>
      <creator-id type="integer">31422</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6150</number>
      <permalink>has-one-association-nullifies-object-to-early</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord callbacks has_one</tag>
      <title>Has one association nullifies object to early</title>
      <updated-at type="datetime">2010-12-16T09:41:38+00:00</updated-at>
      <user-id type="integer">31422</user-id>
      <version type="integer">3</version>
      <user-name>Wojciech Wn&#281;trzak</user-name>
      <creator-name>Wojciech Wn&#281;trzak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6150</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-17T00:00:11+00:00</created-at>
      <creator-id type="integer">31422</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6150</number>
      <permalink>has-one-association-nullifies-object-to-early</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord callbacks has_one</tag>
      <title>Has one association nullifies object to early</title>
      <updated-at type="datetime">2011-03-17T00:01:38+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">4</version>
      <user-name>rails</user-name>
      <creator-name>Wojciech Wn&#281;trzak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6150</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-17T00:00:12+00:00</created-at>
      <creator-id type="integer">31422</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6150</number>
      <permalink>has-one-association-nullifies-object-to-early</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord callbacks has_one</tag>
      <title>Has one association nullifies object to early</title>
      <updated-at type="datetime">2011-03-17T00:01:32+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">5</version>
      <user-name>rails</user-name>
      <creator-name>Wojciech Wn&#281;trzak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6150</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This problem still appears on rails master.
I updated sample failing app to rails master: https://github.com/morgoth/nullify-bug

I'm also submitting rebased patch with failing test.

[state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;This problem still appears on rails master.&lt;br&gt;
I updated sample failing app to rails master: &lt;a href=
&quot;https://github.com/morgoth/nullify-bug&quot;&gt;https://github.com/morgoth/nullify-bug&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm also submitting rebased patch with failing test.&lt;/p&gt;
&lt;p&gt;[state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-18T16:35:25+00:00</created-at>
      <creator-id type="integer">31422</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6150</number>
      <permalink>has-one-association-nullifies-object-to-early</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord callbacks has_one</tag>
      <title>Has one association nullifies object to early</title>
      <updated-at type="datetime">2011-03-18T16:35:29+00:00</updated-at>
      <user-id type="integer">31422</user-id>
      <version type="integer">6</version>
      <user-name>Wojciech Wn&#281;trzak</user-name>
      <creator-name>Wojciech Wn&#281;trzak</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6150</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>1e106b3cb061373d7d3c94ccaa9b63cebe00c223</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-18T16:35:25+00:00</created-at>
      <filename>failing_test_with_too_early_nul.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">966697</id>
      <size type="integer">2204</size>
      <uploader-id type="integer">31422</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/966697/failing_test_with_too_early_nul.diff</url>
    </attachment>
  </attachments>
</ticket>
