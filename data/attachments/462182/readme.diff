diff --git a/railties/lib/rails/generators/rails/app/templates/README b/railties/lib/rails/generators/rails/app/templates/README
index ded8570..193d02f 100644
--- a/railties/lib/rails/generators/rails/app/templates/README
+++ b/railties/lib/rails/generators/rails/app/templates/README
@@ -1,7 +1,7 @@
 == Welcome to Rails
 
-Rails is a web-application framework that includes everything needed to create 
-database-backed web applications according to the Model-View-Control pattern. 
+Rails is a web-application framework that includes everything needed to create
+database-backed web applications according to the Model-View-Control pattern.
 
 This pattern splits the view (also called the presentation) into "dumb" templates
 that are primarily responsible for inserting pre-built data in between HTML tags.
@@ -21,14 +21,14 @@ layers by its two parts: Action View and Action Controller. These two layers
 are bundled in a single package due to their heavy interdependence. This is
 unlike the relationship between the Active Record and Action Pack that is much
 more separate. Each of these packages can be used independently outside of
-Rails.  You can read more about Action Pack in
+Rails. You can read more about Action Pack in
 link:files/vendor/rails/actionpack/README.html.
 
 
 == Getting Started
 
 1. At the command prompt, start a new Rails application using the <tt>rails</tt> command
-   and your application name. Ex: rails myapp
+   and your application name. Ex: <tt>rails myapp</tt>
 2. Change directory into myapp and start the web server: <tt>rails server</tt> (run with --help for options)
 3. Go to http://localhost:3000/ and get "Welcome aboard: You're riding the Rails!"
 4. Follow the guidelines to start developing your application
@@ -37,68 +37,66 @@ link:files/vendor/rails/actionpack/README.html.
 == Web Servers
 
 By default, Rails will try to use Mongrel if it's installed when started with <tt>rails server</tt>, otherwise
-Rails will use WEBrick, the webserver that ships with Ruby. But you can also use Rails
+Rails will use WEBrick, the Web server that ships with Ruby. But you can also use Rails
 with a variety of other web servers.
 
-Mongrel is a Ruby-based webserver with a C component (which requires compilation) that is
+Mongrel is a Ruby-based Web server with a C component (which requires compilation) that is
 suitable for development and deployment of Rails applications. If you have Ruby Gems installed,
 getting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.
 More info at: http://mongrel.rubyforge.org
 
-Say other Ruby web servers like Thin and Ebb or regular web servers like Apache or LiteSpeed or
-Lighttpd or IIS. The Ruby web servers are run through Rack and the latter can either be setup to use
-FCGI or proxy to a pack of Mongrels/Thin/Ebb servers.
+Other Ruby web servers exist which can run your rails application, however <tt>rails server</tt> does
+not search for them or start them. These include {Thin}[http://code.macournoyer.com/thin/], {Ebb}[http://ebb.rubyforge.org/], and Apache with {mod_rails}[http://www.modrails.com/].
+
+For production use, often a web/proxy server, such as {Apache}[http://apache.org], {Nginx}[http://nginx.net/], {LiteSpeed}[http://litespeedtech.com/], {Lighttpd}[http://www.lighttpd.net/] or {IIS}[http://www.iis.net/], is
+deployed as the front-end server with the chosen Ruby web server running in the back-end
+and receiving the proxied requests via one of several protocols (HTTP, CGI, FCGI).
+
 
 == Apache .htaccess example for FCGI/CGI
 
-# General Apache options
-AddHandler fastcgi-script .fcgi
-AddHandler cgi-script .cgi
-Options +FollowSymLinks +ExecCGI
-
-# If you don't want Rails to look in certain directories,
-# use the following rewrite rules so that Apache won't rewrite certain requests
-# 
-# Example:
-#   RewriteCond %{REQUEST_URI} ^/notrails.*
-#   RewriteRule .* - [L]
-
-# Redirect all requests not available on the filesystem to Rails
-# By default the cgi dispatcher is used which is very slow
-# 
-# For better performance replace the dispatcher with the fastcgi one
-#
-# Example:
-#   RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]
-RewriteEngine On
-
-# If your Rails application is accessed via an Alias directive,
-# then you MUST also set the RewriteBase in this htaccess file.
-#
-# Example:
-#   Alias /myrailsapp /path/to/myrailsapp/public
-#   RewriteBase /myrailsapp
-
-RewriteRule ^$ index.html [QSA]
-RewriteRule ^([^.]+)$ $1.html [QSA]
-RewriteCond %{REQUEST_FILENAME} !-f
-RewriteRule ^(.*)$ dispatch.cgi [QSA,L]
-
-# In case Rails experiences terminal errors
-# Instead of displaying this message you can supply a file here which will be rendered instead
-# 
-# Example:
-#   ErrorDocument 500 /500.html
-
-ErrorDocument 500 "<h2>Application error</h2>Rails application failed to start properly"
+General Apache options
+
+  AddHandler fastcgi-script .fcgi
+  AddHandler cgi-script .cgi
+  Options +FollowSymLinks +ExecCGI
+
+If you don't want Rails to look in certain directories, use the following
+rewrite rules so that Apache won't rewrite certain requests.
+
+  RewriteCond %{REQUEST_URI} ^/notrails.*
+  RewriteRule .* - [L]
+
+Redirect all requests not available on the filesystem to Rails. By default the
+cgi dispatcher is used which is very slow, for better performance replace the
+dispatcher with the fastcgi one.
+
+  RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]
+  RewriteEngine On
+
+If your Rails application is accessed via an Alias directive, then you MUST also
+set the RewriteBase in this htaccess file.
+
+  Alias /myrailsapp /path/to/myrailsapp/public
+  RewriteBase /myrailsapp
+
+  RewriteRule ^$ index.html [QSA]
+  RewriteRule ^([^.]+)$ $1.html [QSA]
+  RewriteCond %{REQUEST_FILENAME} !-f
+  RewriteRule ^(.*)$ dispatch.cgi [QSA,L]
+
+Incase Rails experiences terminal errors, you may supply a file here to be rendered instead.
+
+  ErrorDocument 500 /500.html
+  ErrorDocument 500 "<h2>Application error</h2>Rails application failed to start properly"
 
 
 == Debugging Rails
 
-Sometimes your application goes wrong.  Fortunately there are a lot of tools that
+Sometimes your application goes wrong. Fortunately there are a lot of tools that
 will help you debug it and get it back on the rails.
 
-First area to check is the application log files.  Have "tail -f" commands running
+First area to check is the application log files. Have "tail -f" commands running
 on the server.log and development.log. Rails will automatically display debugging
 and runtime information to these files. Debugging info will also be shown in the
 browser on requests from 127.0.0.1.
@@ -123,7 +121,7 @@ More information on how to use the logger is at http://www.ruby-doc.org/core/
 Also, Ruby documentation can be found at http://www.ruby-lang.org/ including:
 
 * The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/
-* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)
+* Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)
 
 These two online (and free) books will bring you up to speed on the Ruby language
 and also on programming in general.
@@ -133,7 +131,7 @@ and also on programming in general.
 
 Debugger support is available through the debugger command when you start your Mongrel or
 Webrick server with --debugger. This means that you can break out of execution at any point
-in the code, investigate and change the model, AND then resume execution! 
+in the code, investigate and change the model, AND then resume execution!
 You need to install ruby-debug to run the server in debugging mode. With gems, use 'gem install ruby-debug'
 Example:
 
@@ -165,14 +163,24 @@ Finally, when you're ready to resume execution, you enter "cont"
 
 == Console
 
-You can interact with the domain model by starting the console through <tt>rails console</tt>.
-Here you'll have all parts of the application configured, just like it is when the
+The console is a Ruby shell, which allows you to interact with your application's domain
+model. Here you'll have all parts of the application configured, just like it is when the
 application is running. You can inspect domain models, change values, and save to the
 database. Starting the script without arguments will launch it in the development environment.
-Passing an argument will specify a different environment, like <tt>rails console production</tt>.
+
+To start the console, just run <tt>rails console</tt> from the application directory.
+
+Options:
+
+* Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications made to the database.
+* Passing an environment name as an argument will load the corresponding environment.
+  Example: <tt>rails console production</tt>.
 
 To reload your controllers and models after launching the console run <tt>reload!</tt>
 
+More information about irb can be found at link:http://www.rubycentral.com/pickaxe/irb.html
+
+
 == dbconsole
 
 You can go to the command line of your database directly through <tt>rails dbconsole</tt>.
@@ -183,6 +191,43 @@ Currently works for mysql, postgresql and sqlite.
 
 == Description of Contents
 
+The default directory structure of a generated Ruby on Rails applicartion:
+
+  |-- app
+  |   |-- controllers
+  |   |-- helpers
+  |   |-- models
+  |   `-- views
+  |       `-- layouts
+  |-- config
+  |   |-- environments
+  |   |-- initializers
+  |   `-- locales
+  |-- db
+  |-- doc
+  |-- lib
+  |   `-- tasks
+  |-- log
+  |-- public
+  |   |-- images
+  |   |-- javascripts
+  |   `-- stylesheets
+  |-- script
+  |   `-- performance
+  |-- test
+  |   |-- fixtures
+  |   |-- functional
+  |   |-- integration
+  |   |-- performance
+  |   `-- unit
+  |-- tmp
+  |   |-- cache
+  |   |-- pids
+  |   |-- sessions
+  |   `-- sockets
+  `-- vendor
+      `-- plugins
+
 app
   Holds all the code that's specific to this particular application.
 
@@ -215,7 +260,7 @@ config
   Configuration files for the Rails environment, the routing map, the database, and other dependencies.
 
 db
-  Contains the database schema in schema.rb.  db/migrate contains all
+  Contains the database schema in schema.rb. db/migrate contains all
   the sequence of Migrations for your schema.
 
 doc
