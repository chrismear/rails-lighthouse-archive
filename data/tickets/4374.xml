<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-04-12T20:32:42+01:00</created-at>
  <creator-id type="integer">27160</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">4374</number>
  <permalink>inflectortransliterate-fails-on-many-european-characters</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activesupport multibyte patch &quot;transliterate parameterize&quot;</tag>
  <title>Inflector#transliterate fails on many European characters</title>
  <updated-at type="datetime">2010-10-15T23:01:51+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">5</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Norman Clarke</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4374</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>Inflector.transliterate fails with many common European characters:

    Inflector.transliterate(&quot;&#198;r&#248;sk&#248;bing&quot;) # &quot;rskbing&quot;
    
In this case, the example is ironically a city in Denmark, DHH's home country.
    
The full list of failing characters is as follows:

&#198; &#208; &#216; &#222; &#223; &#230; &#240; &#248; &#254; &#272; &#273; &#294; &#295; &#305; &#306; &#307; &#312; &#319; &#320; &#321; &#322; &#329; &#330; &#331; &#338; &#339; &#358; &#359;

The reason for the failure is that ActiveSupport::Inflector::Transliterate relies Iconv, which gives variable and often insufficient results; or on UTF-8 decomposition, but the characters listed above (some surprisingly) do not decompose.

The patch I will attach after filing this ticket resolves this issue by removing Iconv, and relying on UTF-8 decomposition plus a check against a hash of approximations.

The patch also invokes `#tidy_bytes` before transliterating. This can rescue ISO-8859-1 and CP-1252 letter characters that the current implementation simply deletes, and allows for the removal of some code from `Inflector#parameterize`.

I have also added several tests that put `#transliterate` through its paces with all characters that have reasonable approximations in order to avoid future regressions.

A few observations:

### Performance

The new code performs a bit more slowly than the current implementation:

    benchmark do
      10_000.times do
        ActiveSupport::Inflector.transliterate(&quot;Malm&#246;, Sweden&quot;)
      end
    end
    
    # 1.9.1 before patch: 472.4ms
    # 1.9.1 after patch: 704.8ms
    # ree before patch: 932.6ms
    # ree after patch: 1597.9ms

I think the improvement in reliability and correctness makes up for this difference in performance - it's still **fast**, just not **AS** fast.


### Why I removed Iconv

The current code tries to use Iconv when available:

    # Replaces accented characters with their ascii equivalents.
    def transliterate(string)
      Iconv.iconv('ascii//ignore//translit', 'utf-8', string).to_s
    end

    if RUBY_VERSION &gt;= '1.9'
      undef_method :transliterate
      def transliterate(string)
        proxy = ActiveSupport::Multibyte.proxy_class.new(string)
        proxy.normalize(:kd).gsub(/[^\x00-\x7F]+/, '')
      end

    # The iconv transliteration code doesn't function correctly
    # on some platforms, but it's very fast where it does function.
    elsif &quot;foo&quot; != (Inflector.transliterate(&quot;f&#246;&#246;&quot;) rescue nil)
      undef_method :transliterate
      def transliterate(string)
        string.mb_chars.normalize(:kd). # Decompose accented characters
          gsub(/[^\x00-\x7F]+/, '')     # Remove anything non-ASCII entirely (e.g. diacritics).
      end
    end

but in practice rarely uses it:

    # encoding: utf-8
    require &quot;iconv&quot;
    p Iconv.iconv('ascii//translit//ignore', 'utf-8', &quot;f&#246;&#246;&quot;).to_s

    # Ubuntu 9.10, REE: &quot;f??&quot; (not used)
    # Ubuntu 9.10, 1.9.1: &quot;[\&quot;foo\&quot;]&quot; (transliterated per the conditional above, but not used)
    # Snow Leopard, Jruby 1.4: &quot;f\303\266\303\266&quot; (not used)
    # Snow Leopard, REE: &quot;f\&quot;o\&quot;o&quot; (not used)
    # Snow Leopard, 1.8.6: &quot;f\&quot;o\&quot;o&quot; (not used)
    # Snow Leopard, 1.9.1: &quot;[\&quot;f\\\&quot;o\\\&quot;o\&quot;]&quot; (not used)
    # Snow Leopard, 1.9.2: &quot;[\&quot;f\\\&quot;o\\\&quot;o\&quot;]&quot; (not used)


So many, many people are already using the non-Iconv code right now.

Even if the code were modified to ensure that Iconv is used, it still would not work reliably on Ubuntu because many of the characters in the approximation table are not handled.

So while Iconv could in theory offer excellent performance, its behavior is so variable and unreliable that I think it should not be used.</original-body>
  <latest-body>Inflector.transliterate fails with many common European characters:

    Inflector.transliterate(&quot;&#198;r&#248;sk&#248;bing&quot;) # &quot;rskbing&quot;
    
In this case, the example is ironically a city in Denmark, DHH's home country.
    
The full list of failing characters is as follows:

&#198; &#208; &#216; &#222; &#223; &#230; &#240; &#248; &#254; &#272; &#273; &#294; &#295; &#305; &#306; &#307; &#312; &#319; &#320; &#321; &#322; &#329; &#330; &#331; &#338; &#339; &#358; &#359;

The reason for the failure is that ActiveSupport::Inflector::Transliterate relies Iconv, which gives variable and often insufficient results; or on UTF-8 decomposition, but the characters listed above (some surprisingly) do not decompose.

The patch I will attach after filing this ticket resolves this issue by removing Iconv, and relying on UTF-8 decomposition plus a check against a hash of approximations.

The patch also invokes `#tidy_bytes` before transliterating. This can rescue ISO-8859-1 and CP-1252 letter characters that the current implementation simply deletes, and allows for the removal of some code from `Inflector#parameterize`.

I have also added several tests that put `#transliterate` through its paces with all characters that have reasonable approximations in order to avoid future regressions.

A few observations:

### Performance

The new code performs a bit more slowly than the current implementation:

    benchmark do
      10_000.times do
        ActiveSupport::Inflector.transliterate(&quot;Malm&#246;, Sweden&quot;)
      end
    end
    
    # 1.9.1 before patch: 472.4ms
    # 1.9.1 after patch: 704.8ms
    # ree before patch: 932.6ms
    # ree after patch: 1597.9ms

I think the improvement in reliability and correctness makes up for this difference in performance - it's still **fast**, just not **AS** fast.


### Why I removed Iconv

The current code tries to use Iconv when available:

    # Replaces accented characters with their ascii equivalents.
    def transliterate(string)
      Iconv.iconv('ascii//ignore//translit', 'utf-8', string).to_s
    end

    if RUBY_VERSION &gt;= '1.9'
      undef_method :transliterate
      def transliterate(string)
        proxy = ActiveSupport::Multibyte.proxy_class.new(string)
        proxy.normalize(:kd).gsub(/[^\x00-\x7F]+/, '')
      end

    # The iconv transliteration code doesn't function correctly
    # on some platforms, but it's very fast where it does function.
    elsif &quot;foo&quot; != (Inflector.transliterate(&quot;f&#246;&#246;&quot;) rescue nil)
      undef_method :transliterate
      def transliterate(string)
        string.mb_chars.normalize(:kd). # Decompose accented characters
          gsub(/[^\x00-\x7F]+/, '')     # Remove anything non-ASCII entirely (e.g. diacritics).
      end
    end

but in practice rarely uses it:

    # encoding: utf-8
    require &quot;iconv&quot;
    p Iconv.iconv('ascii//translit//ignore', 'utf-8', &quot;f&#246;&#246;&quot;).to_s

    # Ubuntu 9.10, REE: &quot;f??&quot; (not used)
    # Ubuntu 9.10, 1.9.1: &quot;[\&quot;foo\&quot;]&quot; (transliterated per the conditional above, but not used)
    # Snow Leopard, Jruby 1.4: &quot;f\303\266\303\266&quot; (not used)
    # Snow Leopard, REE: &quot;f\&quot;o\&quot;o&quot; (not used)
    # Snow Leopard, 1.8.6: &quot;f\&quot;o\&quot;o&quot; (not used)
    # Snow Leopard, 1.9.1: &quot;[\&quot;f\\\&quot;o\\\&quot;o\&quot;]&quot; (not used)
    # Snow Leopard, 1.9.2: &quot;[\&quot;f\\\&quot;o\\\&quot;o\&quot;]&quot; (not used)


So many, many people are already using the non-Iconv code right now.

Even if the code were modified to ensure that Iconv is used, it still would not work reliably on Ubuntu because many of the characters in the approximation table are not handled.

So while Iconv could in theory offer excellent performance, its behavior is so variable and unreliable that I think it should not be used.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Inflector.transliterate fails with many common European
characters:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Inflector.transliterate(&quot;&amp;AElig;r&amp;oslash;sk&amp;oslash;bing&quot;) # &quot;rskbing&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this case, the example is ironically a city in Denmark, DHH's
home country.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The full list of failing characters is as follows:&lt;/p&gt;
&lt;p&gt;&amp;AElig; &amp;ETH; &amp;Oslash; &amp;THORN; &amp;szlig; &amp;aelig; &amp;eth; &amp;oslash;
&amp;thorn; &amp;#272; &amp;#273; &amp;#294; &amp;#295; &amp;#305; &amp;#306; &amp;#307; &amp;#312;
&amp;#319; &amp;#320; &amp;#321; &amp;#322; &amp;#329; &amp;#330; &amp;#331; &amp;#338; &amp;#339;
&amp;#358; &amp;#359;&lt;/p&gt;
&lt;p&gt;The reason for the failure is that
ActiveSupport::Inflector::Transliterate relies Iconv, which gives
variable and often insufficient results; or on UTF-8 decomposition,
but the characters listed above (some surprisingly) do not
decompose.&lt;/p&gt;
&lt;p&gt;The patch I will attach after filing this ticket resolves this
issue by removing Iconv, and relying on UTF-8 decomposition plus a
check against a hash of approximations.&lt;/p&gt;
&lt;p&gt;The patch also invokes &lt;code&gt;#tidy_bytes&lt;/code&gt; before
transliterating. This can rescue ISO-8859-1 and CP-1252 letter
characters that the current implementation simply deletes, and
allows for the removal of some code from
&lt;code&gt;Inflector#parameterize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have also added several tests that put
&lt;code&gt;#transliterate&lt;/code&gt; through its paces with all characters
that have reasonable approximations in order to avoid future
regressions.&lt;/p&gt;
&lt;p&gt;A few observations:&lt;/p&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;The new code performs a bit more slowly than the current
implementation:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;benchmark do
  10_000.times do
    ActiveSupport::Inflector.transliterate(&quot;Malm&amp;ouml;, Sweden&quot;)
  end
end

# 1.9.1 before patch: 472.4ms
# 1.9.1 after patch: 704.8ms
# ree before patch: 932.6ms
# ree after patch: 1597.9ms&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think the improvement in reliability and correctness makes up
for this difference in performance - it's still
&lt;strong&gt;fast&lt;/strong&gt;, just not &lt;strong&gt;AS&lt;/strong&gt; fast.&lt;/p&gt;
&lt;h3&gt;Why I removed Iconv&lt;/h3&gt;
&lt;p&gt;The current code tries to use Iconv when available:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Replaces accented characters with their ascii equivalents.
def transliterate(string)
  Iconv.iconv('ascii//ignore//translit', 'utf-8', string).to_s
end

if RUBY_VERSION &amp;gt;= '1.9'
  undef_method :transliterate
  def transliterate(string)
    proxy = ActiveSupport::Multibyte.proxy_class.new(string)
    proxy.normalize(:kd).gsub(/[^\x00-\x7F]+/, '')
  end

# The iconv transliteration code doesn't function correctly
# on some platforms, but it's very fast where it does function.
elsif &quot;foo&quot; != (Inflector.transliterate(&quot;f&amp;ouml;&amp;ouml;&quot;) rescue nil)
  undef_method :transliterate
  def transliterate(string)
    string.mb_chars.normalize(:kd). # Decompose accented characters
      gsub(/[^\x00-\x7F]+/, '')     # Remove anything non-ASCII entirely (e.g. diacritics).
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but in practice rarely uses it:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# encoding: utf-8
require &quot;iconv&quot;
p Iconv.iconv('ascii//translit//ignore', 'utf-8', &quot;f&amp;ouml;&amp;ouml;&quot;).to_s

# Ubuntu 9.10, REE: &quot;f??&quot; (not used)
# Ubuntu 9.10, 1.9.1: &quot;[\&quot;foo\&quot;]&quot; (transliterated per the conditional above, but not used)
# Snow Leopard, Jruby 1.4: &quot;f\303\266\303\266&quot; (not used)
# Snow Leopard, REE: &quot;f\&quot;o\&quot;o&quot; (not used)
# Snow Leopard, 1.8.6: &quot;f\&quot;o\&quot;o&quot; (not used)
# Snow Leopard, 1.9.1: &quot;[\&quot;f\\\&quot;o\\\&quot;o\&quot;]&quot; (not used)
# Snow Leopard, 1.9.2: &quot;[\&quot;f\\\&quot;o\\\&quot;o\&quot;]&quot; (not used)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So many, many people are already using the non-Iconv code right
now.&lt;/p&gt;
&lt;p&gt;Even if the code were modified to ensure that Iconv is used, it
still would not work reliably on Ubuntu because many of the
characters in the approximation table are not handled.&lt;/p&gt;
&lt;p&gt;So while Iconv could in theory offer excellent performance, its
behavior is so variable and unreliable that I think it should not
be used.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Inflector.transliterate fails with many common European characters:

    Inflector.transliterate(&quot;&#198;r&#248;sk&#248;bing&quot;) # &quot;rskbing&quot;
    
In this case, the example is ironically a city in Denmark, DHH's home country.
    
The full list of failing characters is as follows:

&#198; &#208; &#216; &#222; &#223; &#230; &#240; &#248; &#254; &#272; &#273; &#294; &#295; &#305; &#306; &#307; &#312; &#319; &#320; &#321; &#322; &#329; &#330; &#331; &#338; &#339; &#358; &#359;

The reason for the failure is that ActiveSupport::Inflector::Transliterate relies Iconv, which gives variable and often insufficient results; or on UTF-8 decomposition, but the characters listed above (some surprisingly) do not decompose.

The patch I will attach after filing this ticket resolves this issue by removing Iconv, and relying on UTF-8 decomposition plus a check against a hash of approximations.

The patch also invokes `#tidy_bytes` before transliterating. This can rescue ISO-8859-1 and CP-1252 letter characters that the current implementation simply deletes, and allows for the removal of some code from `Inflector#parameterize`.

I have also added several tests that put `#transliterate` through its paces with all characters that have reasonable approximations in order to avoid future regressions.

A few observations:

### Performance

The new code performs a bit more slowly than the current implementation:

    benchmark do
      10_000.times do
        ActiveSupport::Inflector.transliterate(&quot;Malm&#246;, Sweden&quot;)
      end
    end
    
    # 1.9.1 before patch: 472.4ms
    # 1.9.1 after patch: 704.8ms
    # ree before patch: 932.6ms
    # ree after patch: 1597.9ms

I think the improvement in reliability and correctness makes up for this difference in performance - it's still **fast**, just not **AS** fast.


### Why I removed Iconv

The current code tries to use Iconv when available:

    # Replaces accented characters with their ascii equivalents.
    def transliterate(string)
      Iconv.iconv('ascii//ignore//translit', 'utf-8', string).to_s
    end

    if RUBY_VERSION &gt;= '1.9'
      undef_method :transliterate
      def transliterate(string)
        proxy = ActiveSupport::Multibyte.proxy_class.new(string)
        proxy.normalize(:kd).gsub(/[^\x00-\x7F]+/, '')
      end

    # The iconv transliteration code doesn't function correctly
    # on some platforms, but it's very fast where it does function.
    elsif &quot;foo&quot; != (Inflector.transliterate(&quot;f&#246;&#246;&quot;) rescue nil)
      undef_method :transliterate
      def transliterate(string)
        string.mb_chars.normalize(:kd). # Decompose accented characters
          gsub(/[^\x00-\x7F]+/, '')     # Remove anything non-ASCII entirely (e.g. diacritics).
      end
    end

but in practice rarely uses it:

    # encoding: utf-8
    require &quot;iconv&quot;
    p Iconv.iconv('ascii//translit//ignore', 'utf-8', &quot;f&#246;&#246;&quot;).to_s

    # Ubuntu 9.10, REE: &quot;f??&quot; (not used)
    # Ubuntu 9.10, 1.9.1: &quot;[\&quot;foo\&quot;]&quot; (transliterated per the conditional above, but not used)
    # Snow Leopard, Jruby 1.4: &quot;f\303\266\303\266&quot; (not used)
    # Snow Leopard, REE: &quot;f\&quot;o\&quot;o&quot; (not used)
    # Snow Leopard, 1.8.6: &quot;f\&quot;o\&quot;o&quot; (not used)
    # Snow Leopard, 1.9.1: &quot;[\&quot;f\\\&quot;o\\\&quot;o\&quot;]&quot; (not used)
    # Snow Leopard, 1.9.2: &quot;[\&quot;f\\\&quot;o\\\&quot;o\&quot;]&quot; (not used)


So many, many people are already using the non-Iconv code right now.

Even if the code were modified to ensure that Iconv is used, it still would not work reliably on Ubuntu because many of the characters in the approximation table are not handled.

So while Iconv could in theory offer excellent performance, its behavior is so variable and unreliable that I think it should not be used.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Inflector.transliterate fails with many common European
characters:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Inflector.transliterate(&quot;&amp;AElig;r&amp;oslash;sk&amp;oslash;bing&quot;) # &quot;rskbing&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this case, the example is ironically a city in Denmark, DHH's
home country.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The full list of failing characters is as follows:&lt;/p&gt;
&lt;p&gt;&amp;AElig; &amp;ETH; &amp;Oslash; &amp;THORN; &amp;szlig; &amp;aelig; &amp;eth; &amp;oslash;
&amp;thorn; &amp;#272; &amp;#273; &amp;#294; &amp;#295; &amp;#305; &amp;#306; &amp;#307; &amp;#312;
&amp;#319; &amp;#320; &amp;#321; &amp;#322; &amp;#329; &amp;#330; &amp;#331; &amp;#338; &amp;#339;
&amp;#358; &amp;#359;&lt;/p&gt;
&lt;p&gt;The reason for the failure is that
ActiveSupport::Inflector::Transliterate relies Iconv, which gives
variable and often insufficient results; or on UTF-8 decomposition,
but the characters listed above (some surprisingly) do not
decompose.&lt;/p&gt;
&lt;p&gt;The patch I will attach after filing this ticket resolves this
issue by removing Iconv, and relying on UTF-8 decomposition plus a
check against a hash of approximations.&lt;/p&gt;
&lt;p&gt;The patch also invokes &lt;code&gt;#tidy_bytes&lt;/code&gt; before
transliterating. This can rescue ISO-8859-1 and CP-1252 letter
characters that the current implementation simply deletes, and
allows for the removal of some code from
&lt;code&gt;Inflector#parameterize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have also added several tests that put
&lt;code&gt;#transliterate&lt;/code&gt; through its paces with all characters
that have reasonable approximations in order to avoid future
regressions.&lt;/p&gt;
&lt;p&gt;A few observations:&lt;/p&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;The new code performs a bit more slowly than the current
implementation:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;benchmark do
  10_000.times do
    ActiveSupport::Inflector.transliterate(&quot;Malm&amp;ouml;, Sweden&quot;)
  end
end

# 1.9.1 before patch: 472.4ms
# 1.9.1 after patch: 704.8ms
# ree before patch: 932.6ms
# ree after patch: 1597.9ms&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think the improvement in reliability and correctness makes up
for this difference in performance - it's still
&lt;strong&gt;fast&lt;/strong&gt;, just not &lt;strong&gt;AS&lt;/strong&gt; fast.&lt;/p&gt;
&lt;h3&gt;Why I removed Iconv&lt;/h3&gt;
&lt;p&gt;The current code tries to use Iconv when available:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Replaces accented characters with their ascii equivalents.
def transliterate(string)
  Iconv.iconv('ascii//ignore//translit', 'utf-8', string).to_s
end

if RUBY_VERSION &amp;gt;= '1.9'
  undef_method :transliterate
  def transliterate(string)
    proxy = ActiveSupport::Multibyte.proxy_class.new(string)
    proxy.normalize(:kd).gsub(/[^\x00-\x7F]+/, '')
  end

# The iconv transliteration code doesn't function correctly
# on some platforms, but it's very fast where it does function.
elsif &quot;foo&quot; != (Inflector.transliterate(&quot;f&amp;ouml;&amp;ouml;&quot;) rescue nil)
  undef_method :transliterate
  def transliterate(string)
    string.mb_chars.normalize(:kd). # Decompose accented characters
      gsub(/[^\x00-\x7F]+/, '')     # Remove anything non-ASCII entirely (e.g. diacritics).
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but in practice rarely uses it:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# encoding: utf-8
require &quot;iconv&quot;
p Iconv.iconv('ascii//translit//ignore', 'utf-8', &quot;f&amp;ouml;&amp;ouml;&quot;).to_s

# Ubuntu 9.10, REE: &quot;f??&quot; (not used)
# Ubuntu 9.10, 1.9.1: &quot;[\&quot;foo\&quot;]&quot; (transliterated per the conditional above, but not used)
# Snow Leopard, Jruby 1.4: &quot;f\303\266\303\266&quot; (not used)
# Snow Leopard, REE: &quot;f\&quot;o\&quot;o&quot; (not used)
# Snow Leopard, 1.8.6: &quot;f\&quot;o\&quot;o&quot; (not used)
# Snow Leopard, 1.9.1: &quot;[\&quot;f\\\&quot;o\\\&quot;o\&quot;]&quot; (not used)
# Snow Leopard, 1.9.2: &quot;[\&quot;f\\\&quot;o\\\&quot;o\&quot;]&quot; (not used)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So many, many people are already using the non-Iconv code right
now.&lt;/p&gt;
&lt;p&gt;Even if the code were modified to ensure that Iconv is used, it
still would not work reliably on Ubuntu because many of the
characters in the approximation table are not handled.&lt;/p&gt;
&lt;p&gt;So while Iconv could in theory offer excellent performance, its
behavior is so variable and unreliable that I think it should not
be used.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-12T20:32:42+01:00</created-at>
      <creator-id type="integer">27160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4374</number>
      <permalink>inflectortransliterate-fails-on-many-european-characters</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport multibyte &quot;transliterate parameterize&quot;</tag>
      <title>Inflector#transliterate fails on many European characters</title>
      <updated-at type="datetime">2010-04-12T20:32:46+01:00</updated-at>
      <user-id type="integer">27160</user-id>
      <version type="integer">1</version>
      <user-name>Norman Clarke</user-name>
      <creator-name>Norman Clarke</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4374</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Patch attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Patch attached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-12T20:35:21+01:00</created-at>
      <creator-id type="integer">27160</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activesupport multibyte &quot;transliterate parameterize&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4374</number>
      <permalink>inflectortransliterate-fails-on-many-european-characters</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport multibyte patch &quot;transliterate parameterize&quot;</tag>
      <title>Inflector#transliterate fails on many European characters</title>
      <updated-at type="datetime">2010-04-12T20:35:28+01:00</updated-at>
      <user-id type="integer">27160</user-id>
      <version type="integer">2</version>
      <user-name>Norman Clarke</user-name>
      <creator-name>Norman Clarke</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4374</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-13T07:21:13+01:00</created-at>
      <creator-id type="integer">27160</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4374</number>
      <permalink>inflectortransliterate-fails-on-many-european-characters</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport multibyte patch &quot;transliterate parameterize&quot;</tag>
      <title>Inflector#transliterate fails on many European characters</title>
      <updated-at type="datetime">2010-04-13T07:21:15+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Norman Clarke</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4374</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [dceef0828a23e8298dd9a9aab1a33c49e84f17d6]) Improve reliability of Inflector.transliterate. [#4374 state:resolved]

Signed-off-by: Jeremy Kemper &lt;jeremy@bitsweat.net&gt;
http://github.com/rails/rails/commit/dceef0828a23e8298dd9a9aab1a33c49e84f17d6</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/dceef0828a23e8298dd9a9aab1a33c49e84f17d6&quot;
title=
&quot;Changeset [dceef0828a23e8298dd9a9aab1a33c49e84f17d6]&quot;&gt;[dceef0828a23e8298dd9a9aab1a33c49e84f17d6]&lt;/a&gt;)
Improve reliability of Inflector.transliterate. [&lt;a href=
&quot;/projects/8994/tickets/4374&quot; title=&quot;Ticket #4374&quot;&gt;#4374&lt;/a&gt;
state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jeremy Kemper &lt;a href=
&quot;mailto:jeremy@bitsweat.net&quot;&gt;jeremy@bitsweat.net&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/dceef0828a23e8298dd9a9aab1a33c49e84f17d6&quot;&gt;
http://github.com/rails/rails/commit/dceef0828a23e8298dd9a9aab1a33c...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-13T07:21:30+01:00</created-at>
      <creator-id type="integer">27160</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4374</number>
      <permalink>inflectortransliterate-fails-on-many-european-characters</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activesupport multibyte patch &quot;transliterate parameterize&quot;</tag>
      <title>Inflector#transliterate fails on many European characters</title>
      <updated-at type="datetime">2010-04-13T07:21:31+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">4</version>
      <user-name>Repository</user-name>
      <creator-name>Norman Clarke</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4374</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:51+01:00</created-at>
      <creator-id type="integer">27160</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4374</number>
      <permalink>inflectortransliterate-fails-on-many-european-characters</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activesupport multibyte patch &quot;transliterate parameterize&quot;</tag>
      <title>Inflector#transliterate fails on many European characters</title>
      <updated-at type="datetime">2010-10-15T23:01:51+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Norman Clarke</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4374</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>97ab8d5653ce937288340d1b0c9db07dfac73705</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-04-12T20:35:22+01:00</created-at>
      <filename>improve-transliterate.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">479608</id>
      <size type="integer">7917</size>
      <uploader-id type="integer">27160</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/479608/improve-transliterate.diff</url>
    </attachment>
  </attachments>
</ticket>
