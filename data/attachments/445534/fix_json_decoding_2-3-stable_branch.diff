From 76b015fab6c2566914ce8d4b7d75d3d695135457 Mon Sep 17 00:00:00 2001
From: Nathan Beyer <nbeyer@gmail.com>
Date: Fri, 12 Mar 2010 22:15:30 -0600
Subject: [PATCH] Ticket #4102 - patch json decoding patch from Ticket #2831 to 2-3 branch

---
 .../lib/active_support/json/backends/yaml.rb       |   16 ++++++++++------
 activesupport/test/json/decoding_test.rb           |    8 +++++++-
 2 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/activesupport/lib/active_support/json/backends/yaml.rb b/activesupport/lib/active_support/json/backends/yaml.rb
index ab2ec46..1c46b72 100644
--- a/activesupport/lib/active_support/json/backends/yaml.rb
+++ b/activesupport/lib/active_support/json/backends/yaml.rb
@@ -27,11 +27,9 @@ module ActiveSupport
                   pos = scanner.pos
                 elsif quoting == char
                   if json[pos..scanner.pos-2] =~ DATE_REGEX
-                    # found a date, track the exact positions of the quotes so we can remove them later.
-                    # oh, and increment them for each current mark, each one is an extra padded space that bumps
-                    # the position in the final YAML output
-                    total_marks = marks.size
-                    times << pos+total_marks << scanner.pos+total_marks
+                    # found a date, track the exact positions of the quotes so we can
+                    # overwrite them with spaces later.
+                    times << pos << scanner.pos
                   end
                   quoting = false
                 end
@@ -59,7 +57,12 @@ module ActiveSupport
               output    = []
               left_pos.each_with_index do |left, i|
                 scanner.pos = left.succ
-                output << scanner.peek(right_pos[i] - scanner.pos + 1).gsub(/\\([\\\/]|u[[:xdigit:]]{4})/) do
+                chunk = scanner.peek(right_pos[i] - scanner.pos + 1)
+                # overwrite the quotes found around the dates with spaces
+                while times.size > 0 && times[0] <= right_pos[i]
+                  chunk[times.shift - scanner.pos - 1] = ' '
+                end
+                chunk.gsub!(/\\([\\\/]|u[[:xdigit:]]{4})/) do
                   ustr = $1
                   if ustr.start_with?('u')
                     [ustr[1..-1].to_i(16)].pack("U")
@@ -69,6 +72,7 @@ module ActiveSupport
                     ustr
                   end
                 end
+                output << chunk
               end
               output = output * " "
 
diff --git a/activesupport/test/json/decoding_test.rb b/activesupport/test/json/decoding_test.rb
index a241767..e45851e 100644
--- a/activesupport/test/json/decoding_test.rb
+++ b/activesupport/test/json/decoding_test.rb
@@ -32,7 +32,13 @@ class TestJSONDecoding < ActiveSupport::TestCase
     %q({"a": "\u003cunicode\u0020escape\u003e"}) => {"a" => "<unicode escape>"},
     %q({"a": "\\\\u0020skip double backslashes"}) => {"a" => "\\u0020skip double backslashes"},
     %q({"a": "\u003cbr /\u003e"}) => {'a' => "<br />"},
-    %q({"b":["\u003ci\u003e","\u003cb\u003e","\u003cu\u003e"]}) => {'b' => ["<i>","<b>","<u>"]}
+    %q({"b":["\u003ci\u003e","\u003cb\u003e","\u003cu\u003e"]}) => {'b' => ["<i>","<b>","<u>"]},
+    # test combination of dates and escaped or unicode encoded data in arrays
+    %q([{"d":"1970-01-01", "s":"\u0020escape"},{"d":"1970-01-01", "s":"\u0020escape"}]) =>
+      [{'d' => Date.new(1970, 1, 1), 's' => ' escape'},{'d' => Date.new(1970, 1, 1), 's' => ' escape'}],
+    %q([{"d":"1970-01-01","s":"http:\/\/example.com"},{"d":"1970-01-01","s":"http:\/\/example.com"}]) =>
+      [{'d' => Date.new(1970, 1, 1), 's' => 'http://example.com'},
+       {'d' => Date.new(1970, 1, 1), 's' => 'http://example.com'}]
   }
 
   # load the default JSON backend
-- 
1.7.0.2

