<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-19T14:16:24+01:00</created-at>
  <creator-id type="integer">50832</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4756</number>
  <permalink>query-engine-chaining-includes-method-with-to_sql-method</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>query engine:  chaining 'includes' method with 'to_sql'  method</title>
  <updated-at type="datetime">2010-07-19T14:16:24+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">3</version>
  <user-name>Pratik</user-name>
  <creator-name>fooledbyprimes</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4756</url>
  <priority-name nil="true"></priority-name>
  <original-body>The to_sql method does not seem to be very consistent.  Consider the following two queries:

Person.includes(:users).where(&quot;users.username = 'myusername'&quot;).to_sql
Person.joins(:users).where(&quot;users.username = 'myusername'&quot;).to_sql

The second instance returns the full query string showing the &quot;inner joins.&quot;   But the first one does not show any &quot;inner join&quot; in the query string even though we all know there was a join that was performed.   

'to_sql' method should behave consistently especially if framework users are given the impression that to_sql always returns the full query that was used.</original-body>
  <latest-body>The to_sql method does not seem to be very consistent.  Consider the following two queries:

Person.includes(:users).where(&quot;users.username = 'myusername'&quot;).to_sql
Person.joins(:users).where(&quot;users.username = 'myusername'&quot;).to_sql

The second instance returns the full query string showing the &quot;inner joins.&quot;   But the first one does not show any &quot;inner join&quot; in the query string even though we all know there was a join that was performed.   

'to_sql' method should behave consistently especially if framework users are given the impression that to_sql always returns the full query that was used.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The to_sql method does not seem to be very consistent. Consider
the following two queries:&lt;/p&gt;
&lt;p&gt;Person.includes(:users).where(&quot;users.username =
'myusername'&quot;).to_sql&lt;br&gt;
Person.joins(:users).where(&quot;users.username =
'myusername'&quot;).to_sql&lt;/p&gt;
&lt;p&gt;The second instance returns the full query string showing the
&quot;inner joins.&quot; But the first one does not show any &quot;inner join&quot; in
the query string even though we all know there was a join that was
performed.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;'to_sql' method should behave consistently especially if
framework users are given the impression that to_sql always returns
the full query that was used.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The to_sql method does not seem to be very consistent.  Consider the following two queries:

Person.includes(:users).where(&quot;users.username = 'myusername'&quot;).to_sql
Person.joins(:users).where(&quot;users.username = 'myusername'&quot;).to_sql

The second instance returns the full query string showing the &quot;inner joins.&quot;   But the first one does not show any &quot;inner join&quot; in the query string even though we all know there was a join that was performed.   

'to_sql' method should behave consistently especially if framework users are given the impression that to_sql always returns the full query that was used.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The to_sql method does not seem to be very consistent. Consider
the following two queries:&lt;/p&gt;
&lt;p&gt;Person.includes(:users).where(&quot;users.username =
'myusername'&quot;).to_sql&lt;br&gt;
Person.joins(:users).where(&quot;users.username =
'myusername'&quot;).to_sql&lt;/p&gt;
&lt;p&gt;The second instance returns the full query string showing the
&quot;inner joins.&quot; But the first one does not show any &quot;inner join&quot; in
the query string even though we all know there was a join that was
performed.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;'to_sql' method should behave consistently especially if
framework users are given the impression that to_sql always returns
the full query that was used.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-03T01:51:01+01:00</created-at>
      <creator-id type="integer">50832</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4756</number>
      <permalink>query-engine-chaining-includes-method-with-to_sql-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>query engine:  chaining 'includes' method with 'to_sql'  method</title>
      <updated-at type="datetime">2010-06-07T18:53:14+01:00</updated-at>
      <user-id type="integer">50832</user-id>
      <version type="integer">1</version>
      <user-name>fooledbyprimes</user-name>
      <creator-name>fooledbyprimes</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4756</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-09T17:21:04+01:00</created-at>
      <creator-id type="integer">50832</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4756</number>
      <permalink>query-engine-chaining-includes-method-with-to_sql-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>query engine:  chaining 'includes' method with 'to_sql'  method</title>
      <updated-at type="datetime">2010-06-09T17:21:19+01:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">2</version>
      <user-name>DHH</user-name>
      <creator-name>fooledbyprimes</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4756</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That's because the first one uses joins deterministically and it'd preload users in the case above. So the returned query is correct.</body>
      <body-html>&lt;div&gt;&lt;p&gt;That's because the first one uses joins deterministically and
it'd preload users in the case above. So the returned query is
correct.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-09T17:27:26+01:00</created-at>
      <creator-id type="integer">50832</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4756</number>
      <permalink>query-engine-chaining-includes-method-with-to_sql-method</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>query engine:  chaining 'includes' method with 'to_sql'  method</title>
      <updated-at type="datetime">2010-06-09T17:27:36+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>fooledbyprimes</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4756</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
