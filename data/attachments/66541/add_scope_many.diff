From b4d4d125fd7dd779d98aa3c2e95798c9af9ffc14 Mon Sep 17 00:00:00 2001
From: Chris Kampmeier <chris@kampers.net>
Date: Sun, 30 Nov 2008 21:54:06 -0800
Subject: [PATCH] Add a Scope implementation of #many? so it uses a SQL count(*) instead of loading the entire collection

---
 activerecord/lib/active_record/named_scope.rb |   10 ++++++-
 activerecord/test/cases/named_scope_test.rb   |   34 +++++++++++++++++++++++++
 2 files changed, 43 insertions(+), 1 deletions(-)

diff --git a/activerecord/lib/active_record/named_scope.rb b/activerecord/lib/active_record/named_scope.rb
index 83043c2..f5de5ec 100644
--- a/activerecord/lib/active_record/named_scope.rb
+++ b/activerecord/lib/active_record/named_scope.rb
@@ -101,7 +101,7 @@ module ActiveRecord
     
     class Scope
       attr_reader :proxy_scope, :proxy_options
-      NON_DELEGATE_METHODS = %w(nil? send object_id class extend find size count sum average maximum minimum paginate first last empty? any? respond_to?).to_set
+      NON_DELEGATE_METHODS = %w(nil? send object_id class extend find size count sum average maximum minimum paginate first last empty? any? many? respond_to?).to_set
       [].methods.each do |m|
         unless m =~ /^__/ || NON_DELEGATE_METHODS.include?(m.to_s)
           delegate m, :to => :proxy_found
@@ -156,6 +156,14 @@ module ActiveRecord
         end
       end
 
+      def many?
+        if block_given?
+          proxy_found.many? { |*block_args| yield(*block_args) }
+        else
+          size > 1
+        end
+      end
+
       protected
       def proxy_found
         @found || load_found
diff --git a/activerecord/test/cases/named_scope_test.rb b/activerecord/test/cases/named_scope_test.rb
index 64e8997..4cad739 100644
--- a/activerecord/test/cases/named_scope_test.rb
+++ b/activerecord/test/cases/named_scope_test.rb
@@ -205,6 +205,15 @@ class NamedScopeTest < ActiveRecord::TestCase
     end
   end
 
+  def test_many_should_not_load_results
+    topics = Topic.base
+    assert_queries(2) do
+      topics.many?   # use count query
+      topics.collect # force load
+      topics.many?   # use loaded (no query)
+    end
+  end
+
   def test_any_should_call_proxy_found_if_using_a_block
     topics = Topic.base
     assert_queries(1) do
@@ -213,12 +222,37 @@ class NamedScopeTest < ActiveRecord::TestCase
     end
   end
 
+  def test_many_should_call_proxy_found_if_using_a_block
+    topics = Topic.base
+    assert_queries(1) do
+      topics.expects(:size).never
+      topics.many? { true }
+    end
+  end
+
   def test_any_should_not_fire_query_if_named_scope_loaded
     topics = Topic.base
     topics.collect # force load
     assert_no_queries { assert topics.any? }
   end
 
+  def test_many_should_not_fire_query_if_named_scope_loaded
+    topics = Topic.base
+    topics.collect # force load
+    assert_no_queries { assert topics.many? }
+  end
+
+  def test_many_should_return_false_if_none_or_one
+    topics = Topic.base.scoped(:conditions => {:id => 0})
+    assert !topics.many?
+    topics = Topic.base.scoped(:conditions => {:id => 1})
+    assert !topics.many?
+  end
+
+  def test_many_should_return_true_if_more_than_one
+    assert Topic.base.many?
+  end
+
   def test_should_build_with_proxy_options
     topic = Topic.approved.build({})
     assert topic.approved
-- 
1.6.0.4

