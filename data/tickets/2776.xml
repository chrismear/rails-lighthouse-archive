<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-07T20:28:14+01:00</created-at>
  <creator-id type="integer">59034</creator-id>
  <milestone-due-on type="datetime">2010-01-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">50064</milestone-id>
  <number type="integer">2776</number>
  <permalink>ruby-19-compatability-fix-sum</permalink>
  <priority type="integer">7</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
  <title>Ruby 1.9 compatability fix - sum</title>
  <updated-at type="datetime">2010-04-24T20:21:56+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">12</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>dreamcat4 (at gmail)</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
  <milestone-title>2.3.6</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This patch provides a compatibility fix to the sum method for enumerable objects in activesupport, core_ext, enumerable Module.

This patch is to avoid the following error under ruby 1.9:

When summing an array of strings and [] empty array:
rails/activesupport/lib/active_support/core_ext/enumerable.rb:67:
in `sum': wrong number of arguments (0 for 1) (ArgumentError)

Source: potionstore, ruby 1.9.1p129, rails 2-3-stable
Error log attached.</original-body>
  <latest-body>This patch provides a compatibility fix to the sum method for enumerable objects in activesupport, core_ext, enumerable Module.

This patch is to avoid the following error under ruby 1.9:

When summing an array of strings and [] empty array:
rails/activesupport/lib/active_support/core_ext/enumerable.rb:67:
in `sum': wrong number of arguments (0 for 1) (ArgumentError)

Source: potionstore, ruby 1.9.1p129, rails 2-3-stable
Error log attached.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch provides a compatibility fix to the sum method for
enumerable objects in activesupport, core_ext, enumerable
Module.&lt;/p&gt;
&lt;p&gt;This patch is to avoid the following error under ruby 1.9:&lt;/p&gt;
&lt;p&gt;When summing an array of strings and [] empty array:
rails/activesupport/lib/active_support/core_ext/enumerable.rb:67:
in &lt;code&gt;sum': wrong number of arguments (0 for 1)
(ArgumentError)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Source: potionstore, ruby 1.9.1p129, rails 2-3-stable Error log
attached.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch provides a compatibility fix to the sum method for enumerable objects in activesupport, core_ext, enumerable Module. This patch is to avoid the following error under ruby 1.9:

When summing an array of strings and [] empty array:
rails/activesupport/lib/active_support/core_ext/enumerable.rb:67:

in `sum': wrong number of arguments (0 for 1) (ArgumentError)

Environment: potionstore, ruby 1.9.1p129, rails 2-3-stable</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch provides a compatibility fix to the sum method for
enumerable objects in activesupport, core_ext, enumerable Module.
This patch is to avoid the following error under ruby 1.9:&lt;/p&gt;
&lt;p&gt;When summing an array of strings and [] empty array:&lt;br&gt;
rails/activesupport/lib/active_support/core_ext/enumerable.rb:67:&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;sum': wrong number of arguments (0 for 1)
(ArgumentError)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Environment: potionstore, ruby 1.9.1p129, rails 2-3-stable&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-07T20:28:14+01:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;&quot; activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-06-07T20:30:47+01:00</updated-at>
      <user-id type="integer">59034</user-id>
      <version type="integer">1</version>
      <user-name>dreamcat4 (at gmail)</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Error log</body>
      <body-html>&lt;div&gt;&lt;p&gt;Error log&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-07T20:28:54+01:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;\&quot; activesupport patch \&quot;ruby 1.8.7\&quot; ruby1.9 tested&quot;
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-06-07T20:28:55+01:00</updated-at>
      <user-id type="integer">59034</user-id>
      <version type="integer">2</version>
      <user-name>dreamcat4 (at gmail)</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I don't quite follow the test you're adding here.

Additionally we usually try to avoid doing RUBY_VERSION checks at runtime.  Perhaps you could wrap the method definition with that same test?

Assigning to jeremy as he does the 1.9 stuff</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't quite follow the test you're adding here.&lt;/p&gt;
&lt;p&gt;Additionally we usually try to avoid doing RUBY_VERSION checks
at runtime. Perhaps you could wrap the method definition with that
same test?&lt;/p&gt;
&lt;p&gt;Assigning to jeremy as he does the 1.9 stuff&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-10T04:21:20+01:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-06-10T04:21:20+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">3</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Test passes for me without the code change on 1.9 svn.

Could you explain the issue? The tests are confusing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Test passes for me without the code change on 1.9 svn.&lt;/p&gt;
&lt;p&gt;Could you explain the issue? The tests are confusing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-10T04:28:11+01:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-06-10T04:28:11+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Michael Koziarsk (r.e. wrap method in ruby version) - Sure thing, will re-submit a new patch soon. No problem.

@Jeremy Kemper (r.e. confused because tests don't fail) - Yes thats correct. I saw it only during a rails application startup. Stack trace attached (in the log file).

The tests given in the patch are simply my best-effort to reproduce the data state at the time of the blow-up. I'd love to be able to write the failing test for this. But coming from a C language background i really don't understand the block handling issues well enough. It all seems a little backwards to me and can't get my head around it.

But here a very detailed breakdown of what i *think* is happening:

1) Rails is Loading up view paths, and scanning directories for files with views/**
layout.rb:176: 
Array(view_paths).sum([]) { |path| Dir[&quot;#{path.to_str}/layouts/**/*&quot;] }
2) Sum invokes the block each time, which will yield an array of files (in |path|) to add together.
3) In ruby 1.8, sum will accumulate the result of the block, with inject { |a,b| a + b }
4) But theres some significant changes to block handling in ruby 1.9. Variable scoping / different behaviour means something is going wrong when the block is returned back in to the sum method. (The sum method is calling itself recursively). 
Now please bear with me here...
5) Sum method is recursing onto itself, then doing and self.inject { |sum, element| sum + element }. Where the accumulating array object is implied as (self), returned by the previous invokation of sum yielded from the result of the outside block { Dir[] }.
6) Execution halts during the line &quot;inject { |sum, element| sum + element }&quot;.
7) The data state just before the blow-up was [[&quot;file1&quot;,&quot;file2&quot;,&quot;file3&quot;],[]]. So i put that in the tests as best representation of the data condition.

Solution:
Really the problem is because there are significant changes to block handling in ruby 1.9. Passing variables into blocks become locally scoped, and so on. I don't know exactly whats happening during the recursion. Using more than one blocks recursively just seemed unnecessary here so i chose to do away with the inner block to make simpler for 1.9. Switching to reduce(:+) means we can eliminate that problematic inner block { |sum, element| sum + element } where the blowup occurs. Perhaps it may be because 'sum' declared inside the block is interpreted as a declaration for a new locally scoped variable, instead of a call to self.Enumerable::sum, i don't know. However I feel confident that the patch fixes such error because:

1) Could only reproduce the error condition by executing my rails app. But when I applied my patch to a clean rails2.3.2 branch then it solved the error outright and with no other code changes.
2) All the unit tests pass with and without the patch. The purpose of sum function is for adding together or accumulating a list of numbers, strings, or arrays. The passing tests show that all the Numbers, strings and array data types are still working with sum on 1.9 using the new reduce(:+) method instead.
3) I also tested on 1.8.7, to make sure that it was backwards compatible.

Please let me know if you need anything else to help get this patch in.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Michael Koziarsk (r.e. wrap method in ruby version) - Sure
thing, will re-submit a new patch soon. No problem.&lt;/p&gt;
&lt;p&gt;@Jeremy Kemper (r.e. confused because tests don't fail) - Yes
thats correct. I saw it only during a rails application startup.
Stack trace attached (in the log file).&lt;/p&gt;
&lt;p&gt;The tests given in the patch are simply my best-effort to
reproduce the data state at the time of the blow-up. I'd love to be
able to write the failing test for this. But coming from a C
language background i really don't understand the block handling
issues well enough. It all seems a little backwards to me and can't
get my head around it.&lt;/p&gt;
&lt;p&gt;But here a very detailed breakdown of what i &lt;em&gt;think&lt;/em&gt; is
happening:&lt;/p&gt;
&lt;p&gt;1) Rails is Loading up view paths, and scanning directories for
files with views/&lt;strong&gt;&lt;br&gt;
layout.rb:176:&lt;br&gt;
Array(view_paths).sum([]) { |path|
Dir[&quot;#{path.to_str}/layouts/&lt;/strong&gt;/*&quot;] }&lt;br&gt;
2) Sum invokes the block each time, which will yield an array of
files (in |path|) to add together.&lt;br&gt;
3) In ruby 1.8, sum will accumulate the result of the block, with
inject { |a,b| a + b }&lt;br&gt;
4) But theres some significant changes to block handling in ruby
1.9. Variable scoping / different behaviour means something is
going wrong when the block is returned back in to the sum method.
(The sum method is calling itself recursively).&lt;br&gt;
Now please bear with me here...&lt;br&gt;
5) Sum method is recursing onto itself, then doing and self.inject
{ |sum, element| sum + element }. Where the accumulating array
object is implied as (self), returned by the previous invokation of
sum yielded from the result of the outside block { Dir[] }.&lt;br&gt;
6) Execution halts during the line &quot;inject { |sum, element| sum +
element }&quot;.&lt;br&gt;
7) The data state just before the blow-up was
[[&quot;file1&quot;,&quot;file2&quot;,&quot;file3&quot;],[]]. So i put that in the tests as best
representation of the data condition.&lt;/p&gt;
&lt;p&gt;Solution:&lt;br&gt;
Really the problem is because there are significant changes to
block handling in ruby 1.9. Passing variables into blocks become
locally scoped, and so on. I don't know exactly whats happening
during the recursion. Using more than one blocks recursively just
seemed unnecessary here so i chose to do away with the inner block
to make simpler for 1.9. Switching to reduce(:+) means we can
eliminate that problematic inner block { |sum, element| sum +
element } where the blowup occurs. Perhaps it may be because 'sum'
declared inside the block is interpreted as a declaration for a new
locally scoped variable, instead of a call to self.Enumerable::sum,
i don't know. However I feel confident that the patch fixes such
error because:&lt;/p&gt;
&lt;p&gt;1) Could only reproduce the error condition by executing my
rails app. But when I applied my patch to a clean rails2.3.2 branch
then it solved the error outright and with no other code
changes.&lt;br&gt;
2) All the unit tests pass with and without the patch. The purpose
of sum function is for adding together or accumulating a list of
numbers, strings, or arrays. The passing tests show that all the
Numbers, strings and array data types are still working with sum on
1.9 using the new reduce(:+) method instead.&lt;br&gt;
3) I also tested on 1.8.7, to make sure that it was backwards
compatible.&lt;/p&gt;
&lt;p&gt;Please let me know if you need anything else to help get this
patch in.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-10T09:56:37+01:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-06-10T09:56:37+01:00</updated-at>
      <user-id type="integer">59034</user-id>
      <version type="integer">5</version>
      <user-name>dreamcat4 (at gmail)</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Michael Koziarsk (r.e. wrap method in ruby version) - Sure thing, will re-submit a new patch soon. No problem.

@Jeremy Kemper (r.e. confused because tests don't fail) - Yes thats correct. I saw it only during a rails application startup. Stack trace attached (in the log file).

The tests given in the patch are simply my best-effort to reproduce the data state at the time of the blow-up. I'd love to be able to write the failing test for this. But coming from a C language background i really don't understand the block handling issues well enough. It all seems a little backwards to me and can't get my head around it.

But here a very detailed breakdown of what i *think* is happening:

1) Rails is Loading up view paths, and scanning directories for files with `views/**` 
`layout.rb:176:` 
`Array(view_paths).sum([]) { |path| Dir[&quot;#{path.to_str}/layouts/**/*&quot;] }`
Sum invokes the block each time, which will yield an array of files (in |path|) to add together.

2) Sum will try to accumulate the result of the block, with `inject { |sum, element| sum + element }`
The sum method is calling itself recursively.

3) But theres some significant changes to block handling in ruby 1.9. Variable scoping / different behaviour means something is going wrong when the block is being passed back into the sum method. 
Now please bear with me here...

4) Sum method is recursing onto itself, then doing and `inject { |sum, element| sum + element }`. The inject function is invoked on the accumulating result object implied as self.inject. This object was returned by the previous invokation of sum and yielded from the result of the outside block `{ |path| Dir[&quot;#{path.to_str}/layouts/**/*&quot;] }`.

5) Execution halts during the line `inject { |sum, element| sum + element }`.

6) The data state just before the blow-up was `[[&quot;string1&quot;,&quot;string2&quot;,&quot;string3&quot;],[]]`. This was added to the tests because its a best guess representation of the error condition.

Solution

This problem showing up because of changes to block handling in ruby 1.9. Passing variables into blocks become locally scoped, and so on.  And holding multiple blocks during recursion just seem unnecessary here so my patch will to make simpler for 1.9. Switching to `reduce(:+)` function means we can eliminate that problematic inner block `{ |sum, element| sum + element }` where the blowup occurs. However I feel confident that the patch fixes such error because:

1) Could only reproduce the error condition by executing my rails app. But when I applied my patch to a clean rails2.3.2 branch then it solved the error outright and with no other code changes.

2) All the unit tests pass with and without the patch. The purpose of sum function is for adding together or accumulating a list of numbers, strings, or arrays. The passing tests show that all the Numbers, strings and array data types are still working with sum on 1.9 using the new reduce(:+) method instead.

3) I also tested on 1.8.7, to make sure that it was backwards compatible.

Please let me know if you need anything else to help get this patch in.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Michael Koziarsk (r.e. wrap method in ruby version) - Sure
thing, will re-submit a new patch soon. No problem.&lt;/p&gt;
&lt;p&gt;@Jeremy Kemper (r.e. confused because tests don't fail) - Yes
thats correct. I saw it only during a rails application startup.
Stack trace attached (in the log file).&lt;/p&gt;
&lt;p&gt;The tests given in the patch are simply my best-effort to
reproduce the data state at the time of the blow-up. I'd love to be
able to write the failing test for this. But coming from a C
language background i really don't understand the block handling
issues well enough. It all seems a little backwards to me and can't
get my head around it.&lt;/p&gt;
&lt;p&gt;But here a very detailed breakdown of what i &lt;em&gt;think&lt;/em&gt; is
happening:&lt;/p&gt;
&lt;p&gt;1) Rails is Loading up view paths, and scanning directories for
files with &lt;code&gt;views/**&lt;/code&gt;&lt;br&gt;
&lt;code&gt;layout.rb:176:&lt;/code&gt; &lt;code&gt;Array(view_paths).sum([]) {
|path| Dir[&quot;#{path.to_str}/layouts/**/*&quot;] }&lt;/code&gt; Sum invokes the
block each time, which will yield an array of files (in |path|) to
add together.&lt;/p&gt;
&lt;p&gt;2) Sum will try to accumulate the result of the block, with
&lt;code&gt;inject { |sum, element| sum + element }&lt;/code&gt;&lt;br&gt;
The sum method is calling itself recursively.&lt;/p&gt;
&lt;p&gt;3) But theres some significant changes to block handling in ruby
1.9. Variable scoping / different behaviour means something is
going wrong when the block is being passed back into the sum
method.&lt;br&gt;
Now please bear with me here...&lt;/p&gt;
&lt;p&gt;4) Sum method is recursing onto itself, then doing and
&lt;code&gt;inject { |sum, element| sum + element }&lt;/code&gt;. The inject
function is invoked on the accumulating result object implied as
self.inject. This object was returned by the previous invokation of
sum and yielded from the result of the outside block &lt;code&gt;{ |path|
Dir[&quot;#{path.to_str}/layouts/**/*&quot;] }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;5) Execution halts during the line &lt;code&gt;inject { |sum, element|
sum + element }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;6) The data state just before the blow-up was
&lt;code&gt;[[&quot;string1&quot;,&quot;string2&quot;,&quot;string3&quot;],[]]&lt;/code&gt;. This was added
to the tests because its a best guess representation of the error
condition.&lt;/p&gt;
&lt;p&gt;Solution&lt;/p&gt;
&lt;p&gt;This problem showing up because of changes to block handling in
ruby 1.9. Passing variables into blocks become locally scoped, and
so on. And holding multiple blocks during recursion just seem
unnecessary here so my patch will to make simpler for 1.9.
Switching to &lt;code&gt;reduce(:+)&lt;/code&gt; function means we can
eliminate that problematic inner block &lt;code&gt;{ |sum, element| sum +
element }&lt;/code&gt; where the blowup occurs. However I feel confident
that the patch fixes such error because:&lt;/p&gt;
&lt;p&gt;1) Could only reproduce the error condition by executing my
rails app. But when I applied my patch to a clean rails2.3.2 branch
then it solved the error outright and with no other code
changes.&lt;/p&gt;
&lt;p&gt;2) All the unit tests pass with and without the patch. The
purpose of sum function is for adding together or accumulating a
list of numbers, strings, or arrays. The passing tests show that
all the Numbers, strings and array data types are still working
with sum on 1.9 using the new reduce(:+) method instead.&lt;/p&gt;
&lt;p&gt;3) I also tested on 1.8.7, to make sure that it was backwards
compatible.&lt;/p&gt;
&lt;p&gt;Please let me know if you need anything else to help get this
patch in.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-10T10:16:44+01:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-06-10T10:16:44+01:00</updated-at>
      <user-id type="integer">59034</user-id>
      <version type="integer">6</version>
      <user-name>dreamcat4 (at gmail)</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Uploaded new patch for ruby 1.9 version check outside of the method body. File is `enumerable_sum_for_ruby_19_v2.diff`.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Uploaded new patch for ruby 1.9 version check outside of the
method body. File is
&lt;code&gt;enumerable_sum_for_ruby_19_v2.diff&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-10T10:44:36+01:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-06-10T10:44:36+01:00</updated-at>
      <user-id type="integer">59034</user-id>
      <version type="integer">7</version>
      <user-name>dreamcat4 (at gmail)</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I was seeing the same error loading our rails app
This patch applied cleanly to 2-3-stable @ 17f336e2f00f419a41eb7effb817bd7ad3e84f0d and fixed the error</body>
      <body-html>&lt;div&gt;&lt;p&gt;I was seeing the same error loading our rails app&lt;br&gt;
This patch applied cleanly to 2-3-stable @
17f336e2f00f419a41eb7effb817bd7ad3e84f0d and fixed the error&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-31T07:01:11+01:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">41987</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-07-31T07:01:13+01:00</updated-at>
      <user-id type="integer">17200</user-id>
      <version type="integer">8</version>
      <user-name>Xavier Shay</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.3.4</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>[milestone:id#50064 bulk edit command]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[milestone:id#50064 bulk edit command]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-11T23:04:36+01:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 41987
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-09-11T23:04:36+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">9</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I just ran into this error today while looking into 1.9 compat for my app and I think it may be the symptom of a larger issue.  When I use Enumerable#sum in my rails app I get the error, but in a default install rails app I don't.

Digging in some more I noticed that the error was just coming from calling inject with no arguments.  Turns out a number of gems/plugins I use define Enumerable#inject when it isn't found (I think it was added in ruby 1.6), but they are checking for it in a manner like:

unless Enumerable.instance_methods.include?('inject')
  # def include(required_arg)
end

But instance_methods no longer returns strings, it's now an array of symbols.  A better method is &quot;Enumerable.method_defined?(:inject)&quot;, which works in 1.8 and 1.9 (didn't check anything older).

The libraries I had trouble with are guid and soap4r, but I'm sure that code has been cargo culted more places than that.  While the patch doesn't break anything it's probably not necessary either.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just ran into this error today while looking into 1.9 compat
for my app and I think it may be the symptom of a larger issue.
When I use Enumerable#sum in my rails app I get the error, but in a
default install rails app I don't.&lt;/p&gt;
&lt;p&gt;Digging in some more I noticed that the error was just coming
from calling inject with no arguments. Turns out a number of
gems/plugins I use define Enumerable#inject when it isn't found (I
think it was added in ruby 1.6), but they are checking for it in a
manner like:&lt;/p&gt;
&lt;p&gt;unless Enumerable.instance_methods.include?('inject')&lt;br&gt;
# def include(required_arg) end&lt;/p&gt;
&lt;p&gt;But instance_methods no longer returns strings, it's now an
array of symbols. A better method is
&quot;Enumerable.method_defined?(:inject)&quot;, which works in 1.8 and 1.9
(didn't check anything older).&lt;/p&gt;
&lt;p&gt;The libraries I had trouble with are guid and soap4r, but I'm
sure that code has been cargo culted more places than that. While
the patch doesn't break anything it's probably not necessary
either.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-15T02:55:09+00:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-12-15T02:55:13+00:00</updated-at>
      <user-id type="integer">79742</user-id>
      <version type="integer">10</version>
      <user-name>Andrew Grim</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Yeah Andrew is spot on here. I've now found Enumerable::inject overloaded somewhere within my rails project. So thats the reason. Well done! So as Andrew suggests its equally plausible to put a ruby version check around that instead (the overloaded local method). I should get around to trying that sometime.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah Andrew is spot on here. I've now found Enumerable::inject
overloaded somewhere within my rails project. So thats the reason.
Well done! So as Andrew suggests its equally plausible to put a
ruby version check around that instead (the overloaded local
method). I should get around to trying that sometime.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-15T13:31:57+00:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2009-12-15T13:31:58+00:00</updated-at>
      <user-id type="integer">59034</user-id>
      <version type="integer">11</version>
      <user-name>dreamcat4 (at gmail)</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-24T20:21:54+01:00</created-at>
      <creator-id type="integer">59034</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">2776</number>
      <permalink>ruby-19-compatability-fix-sum</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activesupport patch &quot;ruby 1.8.7&quot; ruby1.9 tested</tag>
      <title>Ruby 1.9 compatability fix - sum</title>
      <updated-at type="datetime">2010-04-24T20:21:56+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">12</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>dreamcat4 (at gmail)</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2776</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>80d6ccc9dd331548db05c74cab2349218ecd624e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-06-07T20:28:14+01:00</created-at>
      <filename>enumerable_sum_for_ruby_19.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">130402</id>
      <size type="integer">1821</size>
      <uploader-id type="integer">59034</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/130402/enumerable_sum_for_ruby_19.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>bbe6607750e8701a6e1e75ceaf9b850a817da9a5</code>
      <content-type>application/octet-stream</content-type>
      <created-at type="datetime">2009-06-07T20:28:54+01:00</created-at>
      <filename>potionstore-r19-sum-enumerable-error.log</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">130403</id>
      <size type="integer">6485</size>
      <uploader-id type="integer">59034</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/130403/potionstore-r19-sum-enumerable-error.log</url>
    </attachment>
    <attachment type="Attachment">
      <code>0aafeb7db4bcc79ce5a77b9f7c7896449d2845c0</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-06-10T10:44:34+01:00</created-at>
      <filename>enumerable_sum_for_ruby_19_v2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">131484</id>
      <size type="integer">3360</size>
      <uploader-id type="integer">59034</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/131484/enumerable_sum_for_ruby_19_v2.diff</url>
    </attachment>
  </attachments>
</ticket>
