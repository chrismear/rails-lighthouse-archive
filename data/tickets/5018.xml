<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-06-30T13:37:57+01:00</created-at>
  <creator-id type="integer">33110</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5018</number>
  <permalink>lib-files-not-autoloaded-anymore</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>autoload &quot;rails 3.0.0.beta4&quot;</tag>
  <title>lib/ files not autoloaded anymore</title>
  <updated-at type="datetime">2010-06-30T15:56:25+01:00</updated-at>
  <user-id type="integer">19965</user-id>
  <version type="integer">2</version>
  <user-name>Jos&#233; Valim</user-name>
  <creator-name>Victor Costan</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5018</url>
  <priority-name>Low</priority-name>
  <original-body>I used to be able to get files under lib/ loaded automatically, by referencing the name of the class / module defined in them. This is no longer true in Rails 3 edge, and I believe it's also not true in Beta 4.

To reproduce, create a new application, scaffold a blank class (e.g. rails g scaffold boom), then add the following file:

*lib/user_filters.rb*
@@@ ruby
module UserFilters
end
@@@

Modify *app/controllers/application_controller.rb* as follows:
@@@ ruby
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  include UserFilters
end
@@@

Start the server, and go to [http://localhost:3000/booms](http://localhost:3000/booms &quot;http://localhost:3000/booms&quot;). The result is a routing error caused by an uninitialized constant exception.
@@@ text
Started GET &quot;/booms&quot; for 127.0.0.1 at Wed Jun 30 07:12:56 -0400 2010
ActionController::RoutingError (uninitialized constant ApplicationController::UserFilters):
  app/controllers/application_controller.rb:3
  app/controllers/booms_controller.rb:1
@@@

The code will work if I add a require to *app/controllers/application_controller.rb*:
@@@ ruby
require 'user_filters'
@@@

If this is an intended change, it would be nice to have it documented in the release notes. Is there some other convention to follow to get the autoloading behavior?

Thank you.</original-body>
  <latest-body>I used to be able to get files under lib/ loaded automatically, by referencing the name of the class / module defined in them. This is no longer true in Rails 3 edge, and I believe it's also not true in Beta 4.

To reproduce, create a new application, scaffold a blank class (e.g. rails g scaffold boom), then add the following file:

*lib/user_filters.rb*
@@@ ruby
module UserFilters
end
@@@

Modify *app/controllers/application_controller.rb* as follows:
@@@ ruby
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  include UserFilters
end
@@@

Start the server, and go to [http://localhost:3000/booms](http://localhost:3000/booms &quot;http://localhost:3000/booms&quot;). The result is a routing error caused by an uninitialized constant exception.
@@@ text
Started GET &quot;/booms&quot; for 127.0.0.1 at Wed Jun 30 07:12:56 -0400 2010
ActionController::RoutingError (uninitialized constant ApplicationController::UserFilters):
  app/controllers/application_controller.rb:3
  app/controllers/booms_controller.rb:1
@@@

The code will work if I add a require to *app/controllers/application_controller.rb*:
@@@ ruby
require 'user_filters'
@@@

If this is an intended change, it would be nice to have it documented in the release notes. Is there some other convention to follow to get the autoloading behavior?

Thank you.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I used to be able to get files under lib/ loaded automatically,
by referencing the name of the class / module defined in them. This
is no longer true in Rails 3 edge, and I believe it's also not true
in Beta 4.&lt;/p&gt;
&lt;p&gt;To reproduce, create a new application, scaffold a blank class
(e.g. rails g scaffold boom), then add the following file:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;lib/user_filters.rb&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module UserFilters
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Modify &lt;em&gt;app/controllers/application_controller.rb&lt;/em&gt; as
follows:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  protect_from_forgery
  include UserFilters
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Start the server, and go to &lt;a href=
&quot;http://localhost:3000/booms&quot; title=
&quot;http://localhost:3000/booms&quot;&gt;http://localhost:3000/booms&lt;/a&gt;. The
result is a routing error caused by an uninitialized constant
exception.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;text&quot;&gt;Started GET &quot;/booms&quot; for 127.0.0.1 at Wed Jun 30 07:12:56 -0400 2010
ActionController::RoutingError (uninitialized constant ApplicationController::UserFilters):
  app/controllers/application_controller.rb:3
  app/controllers/booms_controller.rb:1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The code will work if I add a require to
&lt;em&gt;app/controllers/application_controller.rb&lt;/em&gt;:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;require 'user_filters'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If this is an intended change, it would be nice to have it
documented in the release notes. Is there some other convention to
follow to get the autoloading behavior?&lt;/p&gt;
&lt;p&gt;Thank you.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I used to be able to get files under lib/ loaded automatically, by referencing the name of the class / module defined in them. This is no longer true in Rails 3 edge, and I believe it's also not true in Beta 4.

To reproduce, create a new application, scaffold a blank class (e.g. rails g scaffold boom), then add the following file:

*lib/user_filters.rb*
@@@ ruby
module UserFilters
end
@@@

Modify *app/controllers/application_controller.rb* as follows:
@@@ ruby
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  include UserFilters
end
@@@

Start the server, and go to [http://localhost:3000/booms](http://localhost:3000/booms &quot;http://localhost:3000/booms&quot;). The result is a routing error caused by an uninitialized constant exception.
@@@ text
Started GET &quot;/booms&quot; for 127.0.0.1 at Wed Jun 30 07:12:56 -0400 2010
ActionController::RoutingError (uninitialized constant ApplicationController::UserFilters):
  app/controllers/application_controller.rb:3
  app/controllers/booms_controller.rb:1
@@@

The code will work if I add a require to *app/controllers/application_controller.rb*:
@@@ ruby
require 'user_filters'
@@@

If this is an intended change, it would be nice to have it documented in the release notes. Is there some other convention to follow to get the autoloading behavior?

Thank you.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I used to be able to get files under lib/ loaded automatically,
by referencing the name of the class / module defined in them. This
is no longer true in Rails 3 edge, and I believe it's also not true
in Beta 4.&lt;/p&gt;
&lt;p&gt;To reproduce, create a new application, scaffold a blank class
(e.g. rails g scaffold boom), then add the following file:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;lib/user_filters.rb&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module UserFilters
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Modify &lt;em&gt;app/controllers/application_controller.rb&lt;/em&gt; as
follows:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  protect_from_forgery
  include UserFilters
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Start the server, and go to &lt;a href=
&quot;http://localhost:3000/booms&quot; title=
&quot;http://localhost:3000/booms&quot;&gt;http://localhost:3000/booms&lt;/a&gt;. The
result is a routing error caused by an uninitialized constant
exception.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;text&quot;&gt;Started GET &quot;/booms&quot; for 127.0.0.1 at Wed Jun 30 07:12:56 -0400 2010
ActionController::RoutingError (uninitialized constant ApplicationController::UserFilters):
  app/controllers/application_controller.rb:3
  app/controllers/booms_controller.rb:1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The code will work if I add a require to
&lt;em&gt;app/controllers/application_controller.rb&lt;/em&gt;:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;require 'user_filters'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If this is an intended change, it would be nice to have it
documented in the release notes. Is there some other convention to
follow to get the autoloading behavior?&lt;/p&gt;
&lt;p&gt;Thank you.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-30T13:37:57+01:00</created-at>
      <creator-id type="integer">33110</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5018</number>
      <permalink>lib-files-not-autoloaded-anymore</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>autoload &quot;rails 3.0.0.beta4&quot;</tag>
      <title>lib/ files not autoloaded anymore</title>
      <updated-at type="datetime">2010-06-30T13:38:02+01:00</updated-at>
      <user-id type="integer">33110</user-id>
      <version type="integer">1</version>
      <user-name>Victor Costan</user-name>
      <creator-name>Victor Costan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5018</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It was intentional and it will be documented in the release notes when we do a release. To add the behavior back, just add your lib directory to config.autoload_path in config/application.rb.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It was intentional and it will be documented in the release
notes when we do a release. To add the behavior back, just add your
lib directory to config.autoload_path in config/application.rb.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-30T15:56:17+01:00</created-at>
      <creator-id type="integer">33110</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5018</number>
      <permalink>lib-files-not-autoloaded-anymore</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>autoload &quot;rails 3.0.0.beta4&quot;</tag>
      <title>lib/ files not autoloaded anymore</title>
      <updated-at type="datetime">2010-06-30T15:56:25+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">2</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Victor Costan</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5018</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
