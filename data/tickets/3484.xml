<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-11-12T10:00:58+00:00</created-at>
  <creator-id type="integer">58368</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3484</number>
  <permalink>rails-234-and-prior-validates_uniqueness_of-fails-with-non-sti-inheritance</permalink>
  <priority type="integer">176816</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>[Rails 2.3.4 and prior] validates_uniqueness_of fails with non STI inheritance</title>
  <updated-at type="datetime">2010-10-06T06:36:10+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">4</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Hery</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3484</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hi,
I've found this issue when using class inheritance but non-STI

@@@ ruby
class User &lt; ActiveRecord::Base
  validates_uniqueness_of :login
end

class Student &lt; User
  set_table_name :students
end

@@@

Just created 1 column login for both tables

    users(:login, :null =&gt; false)
    students(:login, :null =&gt; false)

@@@ ruby
u = User.create(:login =&gt; 'toto' )
s = Student.create(:login =&gt; 'toto')
@@@

    no such column: students.login: SELECT &quot;users&quot;.id FROM &quot;users&quot; WHERE (&quot;students&quot;.&quot;login&quot; = 'toto')  LIMIT 1</original-body>
  <latest-body>Hi,
I've found this issue when using class inheritance but non-STI

@@@ ruby
class User &lt; ActiveRecord::Base
  validates_uniqueness_of :login
end

class Student &lt; User
  set_table_name :students
end

@@@

Just created 1 column login for both tables

    users(:login, :null =&gt; false)
    students(:login, :null =&gt; false)

@@@ ruby
u = User.create(:login =&gt; 'toto' )
s = Student.create(:login =&gt; 'toto')
@@@

    no such column: students.login: SELECT &quot;users&quot;.id FROM &quot;users&quot; WHERE (&quot;students&quot;.&quot;login&quot; = 'toto')  LIMIT 1</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;br&gt;
I've found this issue when using class inheritance but non-STI&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  validates_uniqueness_of :login
end

class Student &amp;lt; User
  set_table_name :students
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Just created 1 column login for both tables&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;users(:login, :null =&amp;gt; false)
students(:login, :null =&amp;gt; false)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;u = User.create(:login =&amp;gt; 'toto' )
s = Student.create(:login =&amp;gt; 'toto')&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;no such column: students.login: SELECT &quot;users&quot;.id FROM &quot;users&quot; WHERE (&quot;students&quot;.&quot;login&quot; = 'toto')  LIMIT 1&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,
I've found this issue when using class inheritance but non-STI

@@@ ruby
class User &lt; ActiveRecord::Base
  validates_uniqueness_of :login
end

class Student &lt; User
  set_table_name :students
end

@@@

Just created 1 column login for both tables

    users(:login, :null =&gt; false)
    students(:login, :null =&gt; false)

@@@ ruby
u = User.create(:login =&gt; 'toto' )
s = Student.create(:login =&gt; 'toto')
@@@

    no such column: students.login: SELECT &quot;users&quot;.id FROM &quot;users&quot; WHERE (&quot;students&quot;.&quot;login&quot; = 'toto')  LIMIT 1</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;br&gt;
I've found this issue when using class inheritance but non-STI&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  validates_uniqueness_of :login
end

class Student &amp;lt; User
  set_table_name :students
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Just created 1 column login for both tables&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;users(:login, :null =&amp;gt; false)
students(:login, :null =&amp;gt; false)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;u = User.create(:login =&amp;gt; 'toto' )
s = Student.create(:login =&amp;gt; 'toto')&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;no such column: students.login: SELECT &quot;users&quot;.id FROM &quot;users&quot; WHERE (&quot;students&quot;.&quot;login&quot; = 'toto')  LIMIT 1&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-12T10:00:58+00:00</created-at>
      <creator-id type="integer">58368</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3484</number>
      <permalink>rails-234-and-prior-validates_uniqueness_of-fails-with-non-sti-inheritance</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[Rails 2.3.4 and prior] validates_uniqueness_of fails with non STI inheritance</title>
      <updated-at type="datetime">2009-11-12T10:01:02+00:00</updated-at>
      <user-id type="integer">58368</user-id>
      <version type="integer">1</version>
      <user-name>Hery</user-name>
      <creator-name>Hery</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3484</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>What's the expected behavior in this instance? Should :login be unique across all records in the students table only, or across all records in users as well?

The former would seem relatively straightforward (change the code that searches for a base class to exclude classes with a different table_name), while the latter would be extremely difficult.</body>
      <body-html>&lt;div&gt;&lt;p&gt;What's the expected behavior in this instance? Should :login be
unique across all records in the students table only, or across all
records in users as well?&lt;/p&gt;
&lt;p&gt;The former would seem relatively straightforward (change the
code that searches for a base class to exclude classes with a
different table_name), while the latter would be extremely
difficult.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-15T22:04:50+00:00</created-at>
      <creator-id type="integer">58368</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3484</number>
      <permalink>rails-234-and-prior-validates_uniqueness_of-fails-with-non-sti-inheritance</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[Rails 2.3.4 and prior] validates_uniqueness_of fails with non STI inheritance</title>
      <updated-at type="datetime">2009-11-15T22:04:51+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">2</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Hery</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3484</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>IMHO the expected behavior is a unique login in the students table only.

I know it is a bad design since Mixin should be used instead of inheritance but I just pointed out that this simple code raises a MysqlError.</body>
      <body-html>&lt;div&gt;&lt;p&gt;IMHO the expected behavior is a unique login in the students
table only.&lt;/p&gt;
&lt;p&gt;I know it is a bad design since Mixin should be used instead of
inheritance but I just pointed out that this simple code raises a
MysqlError.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-15T22:18:41+00:00</created-at>
      <creator-id type="integer">58368</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3484</number>
      <permalink>rails-234-and-prior-validates_uniqueness_of-fails-with-non-sti-inheritance</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[Rails 2.3.4 and prior] validates_uniqueness_of fails with non STI inheritance</title>
      <updated-at type="datetime">2009-11-15T22:18:42+00:00</updated-at>
      <user-id type="integer">58368</user-id>
      <version type="integer">3</version>
      <user-name>Hery</user-name>
      <creator-name>Hery</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3484</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:36:09+01:00</created-at>
      <creator-id type="integer">58368</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3484</number>
      <permalink>rails-234-and-prior-validates_uniqueness_of-fails-with-non-sti-inheritance</permalink>
      <priority type="integer">176816</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>[Rails 2.3.4 and prior] validates_uniqueness_of fails with non STI inheritance</title>
      <updated-at type="datetime">2010-10-06T06:36:10+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">4</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Hery</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3484</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
