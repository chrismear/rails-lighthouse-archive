From 4e1e016c260c59efad5b645cd8aab4086a3ed140 Mon Sep 17 00:00:00 2001
From: Paul Mucur <mudge@mudge.name>
Date: Fri, 11 Jun 2010 23:38:18 +0100
Subject: [PATCH] Support passing a block to ActiveSupport::OrderedHash's merge and merge!

For better consistency with Ruby's own Hash implementation.
---
 activesupport/lib/active_support/ordered_hash.rb |   10 +++++++---
 activesupport/test/ordered_hash_test.rb          |   13 +++++++++++++
 2 files changed, 20 insertions(+), 3 deletions(-)

diff --git a/activesupport/lib/active_support/ordered_hash.rb b/activesupport/lib/active_support/ordered_hash.rb
index e1a2866..eda33f8 100644
--- a/activesupport/lib/active_support/ordered_hash.rb
+++ b/activesupport/lib/active_support/ordered_hash.rb
@@ -130,12 +130,16 @@ module ActiveSupport
       end
 
       def merge!(other_hash)
-        other_hash.each {|k,v| self[k] = v }
+        if block_given?
+          other_hash.each {|k,v| self[k] = yield(k, self[k], v) }
+        else
+          other_hash.each {|k,v| self[k] = v }
+        end
         self
       end
 
-      def merge(other_hash)
-        dup.merge!(other_hash)
+      def merge(other_hash, &block)
+        dup.merge!(other_hash, &block)
       end
 
       # When replacing with another hash, the initial order of our keys must come from the other hash -ordered or not.
diff --git a/activesupport/test/ordered_hash_test.rb b/activesupport/test/ordered_hash_test.rb
index d070206..66e7270 100644
--- a/activesupport/test/ordered_hash_test.rb
+++ b/activesupport/test/ordered_hash_test.rb
@@ -142,9 +142,22 @@ class OrderedHashTest < Test::Unit::TestCase
     assert_equal merged.length, @ordered_hash.length + other_hash.length
     assert_equal @keys + ['purple', 'violet'], merged.keys
 
+    another_hash = ActiveSupport::OrderedHash.new
+    another_hash['white'] = 'ff'
+    another_hash['black'] = '00'
+    merged_with_block = @ordered_hash.merge(another_hash) do |key, old_value, new_value|
+      new_value * 3
+    end
+    assert_equal 'ffffff', merged_with_block['white']
+    assert_equal '000000', merged_with_block['black']
+
     @ordered_hash.merge! other_hash
     assert_equal @ordered_hash, merged
     assert_equal @ordered_hash.keys, merged.keys
+
+    @ordered_hash.merge! another_hash
+    assert_equal 'ffffff', merged_with_block['white']
+    assert_equal '000000', merged_with_block['black']
   end
 
   def test_shift
-- 
1.7.1

