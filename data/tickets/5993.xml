<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-17T15:33:10+00:00</created-at>
  <creator-id type="integer">125192</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5993</number>
  <permalink>a-class-of-associated-object-is-not-equal-to-the-original-one</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>A class of associated object is not equal to the original one.</title>
  <updated-at type="datetime">2011-02-19T00:00:50+00:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">4</version>
  <user-name>rails</user-name>
  <creator-name>kyanagi</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5993</url>
  <priority-name nil="true"></priority-name>
  <original-body>I found some strange behavior with 3.0.3. (ruby 1.8.7 (2010-08-16 patchlevel 302) [i686-linux])

Please see the code:

database:
    # create table users (id integer auto_increment, primary key (id));
    # create table items (id integer auto_increment, user_id integer, primary key (id));
    # insert into users (id) values (1);
    # insert into items (user_id) values (1);

a.rb:
    require 'rubygems'
    require 'active_support/dependencies'
    require 'active_record'
    
    ActiveRecord::Base.establish_connection(
      # DB settings
    )
    
    class User &lt; ActiveRecord::Base
      has_many :items
    end
    
    begin
      require 'item'
    rescue
    end
    
    module X
    end
    
    require 'item'
    
    u = User.first
    item = u.items.first
    p item
    p item.class
    p item.class.object_id, Item.object_id # should be same but differ
    p item.instance_of?(Item) # should be true but becomes false


item.rb:
    class Item &lt; ActiveRecord::Base
      include X
    end

I put two files a.rb and item.rb.

When I executed a.rb (ruby a.rb), I got different object_id between item.class and Item, and item.instance_of?(Item) became false.

I could not fix correctly. But I found that if the line in ActiveSupport::Dependencies#remove_contant (call of constantize)

    constantize(const).before_remove_const if constantize(const).respond_to?(:before_remove_const)

is commented out, the problem disappears.</original-body>
  <latest-body>I found some strange behavior with 3.0.3. (ruby 1.8.7 (2010-08-16 patchlevel 302) [i686-linux])

Please see the code:

database:
    # create table users (id integer auto_increment, primary key (id));
    # create table items (id integer auto_increment, user_id integer, primary key (id));
    # insert into users (id) values (1);
    # insert into items (user_id) values (1);

a.rb:
    require 'rubygems'
    require 'active_support/dependencies'
    require 'active_record'
    
    ActiveRecord::Base.establish_connection(
      # DB settings
    )
    
    class User &lt; ActiveRecord::Base
      has_many :items
    end
    
    begin
      require 'item'
    rescue
    end
    
    module X
    end
    
    require 'item'
    
    u = User.first
    item = u.items.first
    p item
    p item.class
    p item.class.object_id, Item.object_id # should be same but differ
    p item.instance_of?(Item) # should be true but becomes false


item.rb:
    class Item &lt; ActiveRecord::Base
      include X
    end

I put two files a.rb and item.rb.

When I executed a.rb (ruby a.rb), I got different object_id between item.class and Item, and item.instance_of?(Item) became false.

I could not fix correctly. But I found that if the line in ActiveSupport::Dependencies#remove_contant (call of constantize)

    constantize(const).before_remove_const if constantize(const).respond_to?(:before_remove_const)

is commented out, the problem disappears.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I found some strange behavior with 3.0.3. (ruby 1.8.7
(2010-08-16 patchlevel 302) [i686-linux])&lt;/p&gt;
&lt;p&gt;Please see the code:&lt;/p&gt;
&lt;p&gt;database:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# create table users (id integer auto_increment, primary key (id));
# create table items (id integer auto_increment, user_id integer, primary key (id));
# insert into users (id) values (1);
# insert into items (user_id) values (1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;a.rb:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'rubygems'
require 'active_support/dependencies'
require 'active_record'

ActiveRecord::Base.establish_connection(
  # DB settings
)

class User &amp;lt; ActiveRecord::Base
  has_many :items
end

begin
  require 'item'
rescue
end

module X
end

require 'item'

u = User.first
item = u.items.first
p item
p item.class
p item.class.object_id, Item.object_id # should be same but differ
p item.instance_of?(Item) # should be true but becomes false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;item.rb:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Item &amp;lt; ActiveRecord::Base
  include X
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I put two files a.rb and item.rb.&lt;/p&gt;
&lt;p&gt;When I executed a.rb (ruby a.rb), I got different object_id
between item.class and Item, and item.instance_of?(Item) became
false.&lt;/p&gt;
&lt;p&gt;I could not fix correctly. But I found that if the line in
ActiveSupport::Dependencies#remove_contant (call of
constantize)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;constantize(const).before_remove_const if constantize(const).respond_to?(:before_remove_const)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;is commented out, the problem disappears.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I found some strange behavior with 3.0.3. (ruby 1.8.7 (2010-08-16 patchlevel 302) [i686-linux])

Please see the code:

database:
    # create table users (id integer auto_increment, primary key (id));
    # create table items (id integer auto_increment, user_id integer, primary key (id));
    # insert into users (id) values (1);
    # insert into items (user_id) values (1);

a.rb:
    require 'rubygems'
    require 'active_support/dependencies'
    require 'active_record'
    
    ActiveRecord::Base.establish_connection(
      # DB settings
    )
    
    class User &lt; ActiveRecord::Base
      has_many :items
    end
    
    begin
      require 'item'
    rescue
    end
    
    module X
    end
    
    require 'item'
    
    u = User.first
    item = u.items.first
    p item
    p item.class
    p item.class.object_id, Item.object_id # should be same but differ
    p item.instance_of?(Item) # should be true but becomes false


item.rb:
    class Item &lt; ActiveRecord::Base
      include X
    end

I put two files a.rb and item.rb.

When I executed a.rb (ruby a.rb), I got different object_id between item.class and Item, and item.instance_of?(Item) became false.

I could not fix correctly. But I found that if the line in ActiveSupport::Dependencies#remove_contant (call of constantize)

    constantize(const).before_remove_const if constantize(const).respond_to?(:before_remove_const)

is commented out, the problem disappears.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I found some strange behavior with 3.0.3. (ruby 1.8.7
(2010-08-16 patchlevel 302) [i686-linux])&lt;/p&gt;
&lt;p&gt;Please see the code:&lt;/p&gt;
&lt;p&gt;database:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# create table users (id integer auto_increment, primary key (id));
# create table items (id integer auto_increment, user_id integer, primary key (id));
# insert into users (id) values (1);
# insert into items (user_id) values (1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;a.rb:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'rubygems'
require 'active_support/dependencies'
require 'active_record'

ActiveRecord::Base.establish_connection(
  # DB settings
)

class User &amp;lt; ActiveRecord::Base
  has_many :items
end

begin
  require 'item'
rescue
end

module X
end

require 'item'

u = User.first
item = u.items.first
p item
p item.class
p item.class.object_id, Item.object_id # should be same but differ
p item.instance_of?(Item) # should be true but becomes false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;item.rb:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Item &amp;lt; ActiveRecord::Base
  include X
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I put two files a.rb and item.rb.&lt;/p&gt;
&lt;p&gt;When I executed a.rb (ruby a.rb), I got different object_id
between item.class and Item, and item.instance_of?(Item) became
false.&lt;/p&gt;
&lt;p&gt;I could not fix correctly. But I found that if the line in
ActiveSupport::Dependencies#remove_contant (call of
constantize)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;constantize(const).before_remove_const if constantize(const).respond_to?(:before_remove_const)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;is commented out, the problem disappears.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-17T15:33:10+00:00</created-at>
      <creator-id type="integer">125192</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5993</number>
      <permalink>a-class-of-associated-object-is-not-equal-to-the-original-one</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>A class of associated object is not equal to the original one.</title>
      <updated-at type="datetime">2010-11-17T15:33:12+00:00</updated-at>
      <user-id type="integer">125192</user-id>
      <version type="integer">1</version>
      <user-name>kyanagi</user-name>
      <creator-name>kyanagi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5993</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I could make smaller code which reproduce the problem.

    require 'rubygems'
    require 'active_support/dependencies'
    
    class X; end
    ActiveSupport::Dependencies.remove_constant('X')
    class X; end
    
    p X.object_id == ActiveSupport::Dependencies.constantize('X').object_id

ActiveSupport::Dependencies.constantize caches its result in ActiveSupport::Dependencies::Reference.
remove_constant removes a constant but does not clear cache.

I think remove_constant should clear the cache.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I could make smaller code which reproduce the problem.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'rubygems'
require 'active_support/dependencies'

class X; end
ActiveSupport::Dependencies.remove_constant('X')
class X; end

p X.object_id == ActiveSupport::Dependencies.constantize('X').object_id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ActiveSupport::Dependencies.constantize caches its result in
ActiveSupport::Dependencies::Reference.&lt;br&gt;
remove_constant removes a constant but does not clear cache.&lt;/p&gt;
&lt;p&gt;I think remove_constant should clear the cache.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-18T09:36:16+00:00</created-at>
      <creator-id type="integer">125192</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5993</number>
      <permalink>a-class-of-associated-object-is-not-equal-to-the-original-one</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>A class of associated object is not equal to the original one.</title>
      <updated-at type="datetime">2010-11-18T09:36:18+00:00</updated-at>
      <user-id type="integer">125192</user-id>
      <version type="integer">2</version>
      <user-name>kyanagi</user-name>
      <creator-name>kyanagi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5993</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-19T00:00:14+00:00</created-at>
      <creator-id type="integer">125192</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5993</number>
      <permalink>a-class-of-associated-object-is-not-equal-to-the-original-one</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>A class of associated object is not equal to the original one.</title>
      <updated-at type="datetime">2011-02-19T00:00:26+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>kyanagi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5993</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T00:00:14+00:00</created-at>
      <creator-id type="integer">125192</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5993</number>
      <permalink>a-class-of-associated-object-is-not-equal-to-the-original-one</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>A class of associated object is not equal to the original one.</title>
      <updated-at type="datetime">2011-02-19T00:00:50+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">4</version>
      <user-name>rails</user-name>
      <creator-name>kyanagi</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5993</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>3aa5ec6877a03d15afbf8d09e497b49fdd31d8e7</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-11-18T09:36:16+00:00</created-at>
      <filename>clear_constant_cache.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">777035</id>
      <size type="integer">1154</size>
      <uploader-id type="integer">125192</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/777035/clear_constant_cache.diff</url>
    </attachment>
  </attachments>
</ticket>
