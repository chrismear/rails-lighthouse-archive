<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-03T05:11:39+00:00</created-at>
  <creator-id type="integer">26479</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6510</number>
  <permalink>patch-core_extenumerable-multiple-fixes</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>activesupport bugs enumerable patch</tag>
  <title>[PATCH] core_ext/enumerable multiple fixes</title>
  <updated-at type="datetime">2011-03-06T09:16:23+00:00</updated-at>
  <user-id type="integer">94458</user-id>
  <version type="integer">3</version>
  <user-name>Jeff Kreeftmeijer</user-name>
  <creator-name>Marc-Andr&#233; Lafortune</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6510</url>
  <priority-name>Low</priority-name>
  <original-body>I got burned by the fact that `Enumerable#index_by` does not return an Enumerator if called without block, so I took a moment to fix the issues I could find in the enumerable extension, namely:

`#index_by`, `#group_by` and `#each_with_object` now return Enumerators as they should.

`#many`? iterates only as much as needed to determine the result. It also doesn't rely on `#size` (which not all Enuemrables respond to).

The patch also improves the robustness of the tests. `#each_with_object` is also optimized by not capturing the block.

Problems not addressed:
* most extensions assume that the Enumerable yields only one argument.
* the definition of `#many?` can be confusing because the form without block doesn't test for truthiness. Thus `foo.many?` is not necessarily equal to `foo.many?{|x| x}`, and `foo.any?` can be false while foo.many? can be true (e.g. `foo = [nil, nil]`). Discounting nil/false would be ideal, except that it could break compatibility, so I leave this up to the powers that be.

Thanks!
--
Marc-Andr&#233;</original-body>
  <latest-body>I got burned by the fact that `Enumerable#index_by` does not return an Enumerator if called without block, so I took a moment to fix the issues I could find in the enumerable extension, namely:

`#index_by`, `#group_by` and `#each_with_object` now return Enumerators as they should.

`#many`? iterates only as much as needed to determine the result. It also doesn't rely on `#size` (which not all Enuemrables respond to).

The patch also improves the robustness of the tests. `#each_with_object` is also optimized by not capturing the block.

Problems not addressed:
* most extensions assume that the Enumerable yields only one argument.
* the definition of `#many?` can be confusing because the form without block doesn't test for truthiness. Thus `foo.many?` is not necessarily equal to `foo.many?{|x| x}`, and `foo.any?` can be false while foo.many? can be true (e.g. `foo = [nil, nil]`). Discounting nil/false would be ideal, except that it could break compatibility, so I leave this up to the powers that be.

Thanks!
--
Marc-Andr&#233;</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I got burned by the fact that &lt;code&gt;Enumerable#index_by&lt;/code&gt;
does not return an Enumerator if called without block, so I took a
moment to fix the issues I could find in the enumerable extension,
namely:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#index_by&lt;/code&gt;, &lt;code&gt;#group_by&lt;/code&gt; and
&lt;code&gt;#each_with_object&lt;/code&gt; now return Enumerators as they
should.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#many&lt;/code&gt;? iterates only as much as needed to determine
the result. It also doesn't rely on &lt;code&gt;#size&lt;/code&gt; (which not
all Enuemrables respond to).&lt;/p&gt;
&lt;p&gt;The patch also improves the robustness of the tests.
&lt;code&gt;#each_with_object&lt;/code&gt; is also optimized by not capturing
the block.&lt;/p&gt;
&lt;p&gt;Problems not addressed:&lt;br&gt;
* most extensions assume that the Enumerable yields only one
argument. * the definition of &lt;code&gt;#many?&lt;/code&gt; can be confusing
because the form without block doesn't test for truthiness. Thus
&lt;code&gt;foo.many?&lt;/code&gt; is not necessarily equal to
&lt;code&gt;foo.many?{|x| x}&lt;/code&gt;, and &lt;code&gt;foo.any?&lt;/code&gt; can be
false while foo.many? can be true (e.g. &lt;code&gt;foo = [nil,
nil]&lt;/code&gt;). Discounting nil/false would be ideal, except that it
could break compatibility, so I leave this up to the powers that
be.&lt;/p&gt;
&lt;h2&gt;Thanks!&lt;/h2&gt;
&lt;p&gt;Marc-Andr&amp;eacute;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I got burned by the fact that `Enumerable#index_by` does not return an Enumerator if called without block, so I took a moment to fix the issues I could find in the enumerable extension, namely:

`#index_by`, `#group_by` and `#each_with_object` now return Enumerators as they should.

`#many`? iterates only as much as needed to determine the result. It also doesn't rely on `#size` (which not all Enuemrables respond to).

The patch also improves the robustness of the tests. `#each_with_object` is also optimized by not capturing the block.

Problems not addressed:
* most extensions assume that the Enumerable yields only one argument.
* the definition of `#many?` can be confusing because the form without block doesn't test for truthiness. Thus `foo.many?` is not necessarily equal to `foo.many?{|x| x}`, and `foo.any?` can be false while foo.many? can be true (e.g. `foo = [nil, nil]`). Discounting nil/false would be ideal, except that it could break compatibility, so I leave this up to the powers that be.

Thanks!
--
Marc-Andr&#233;</body>
      <body-html>&lt;div&gt;&lt;p&gt;I got burned by the fact that &lt;code&gt;Enumerable#index_by&lt;/code&gt;
does not return an Enumerator if called without block, so I took a
moment to fix the issues I could find in the enumerable extension,
namely:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#index_by&lt;/code&gt;, &lt;code&gt;#group_by&lt;/code&gt; and
&lt;code&gt;#each_with_object&lt;/code&gt; now return Enumerators as they
should.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#many&lt;/code&gt;? iterates only as much as needed to determine
the result. It also doesn't rely on &lt;code&gt;#size&lt;/code&gt; (which not
all Enuemrables respond to).&lt;/p&gt;
&lt;p&gt;The patch also improves the robustness of the tests.
&lt;code&gt;#each_with_object&lt;/code&gt; is also optimized by not capturing
the block.&lt;/p&gt;
&lt;p&gt;Problems not addressed:&lt;br&gt;
* most extensions assume that the Enumerable yields only one
argument. * the definition of &lt;code&gt;#many?&lt;/code&gt; can be confusing
because the form without block doesn't test for truthiness. Thus
&lt;code&gt;foo.many?&lt;/code&gt; is not necessarily equal to
&lt;code&gt;foo.many?{|x| x}&lt;/code&gt;, and &lt;code&gt;foo.any?&lt;/code&gt; can be
false while foo.many? can be true (e.g. &lt;code&gt;foo = [nil,
nil]&lt;/code&gt;). Discounting nil/false would be ideal, except that it
could break compatibility, so I leave this up to the powers that
be.&lt;/p&gt;
&lt;h2&gt;Thanks!&lt;/h2&gt;
&lt;p&gt;Marc-Andr&amp;eacute;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-03T05:11:39+00:00</created-at>
      <creator-id type="integer">26479</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6510</number>
      <permalink>patch-core_extenumerable-multiple-fixes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport bugs enumerable patch</tag>
      <title>[PATCH] core_ext/enumerable multiple fixes</title>
      <updated-at type="datetime">2011-03-06T09:13:54+00:00</updated-at>
      <user-id type="integer">26479</user-id>
      <version type="integer">1</version>
      <user-name>Marc-Andr&#233; Lafortune</user-name>
      <creator-name>Marc-Andr&#233; Lafortune</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6510</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Marc-Andr&#233;,

I cleaned up your ticket a bit. Please be sure to wrap inline code in backticks, since starting a line with a `#` will turn it into a header. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Marc-Andr&amp;eacute;,&lt;/p&gt;
&lt;p&gt;I cleaned up your ticket a bit. Please be sure to wrap inline
code in backticks, since starting a line with a &lt;code&gt;#&lt;/code&gt; will
turn it into a header. :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-06T09:16:05+00:00</created-at>
      <creator-id type="integer">26479</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6510</number>
      <permalink>patch-core_extenumerable-multiple-fixes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport bugs enumerable patch</tag>
      <title>[PATCH] core_ext/enumerable multiple fixes</title>
      <updated-at type="datetime">2011-03-06T09:16:13+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">3</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>Marc-Andr&#233; Lafortune</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6510</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>682eff4e2e2e828feccffe04806b011f47cd6658</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-03T05:11:39+00:00</created-at>
      <filename>enumerable_patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">939723</id>
      <size type="integer">16344</size>
      <uploader-id type="integer">26479</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/939723/enumerable_patch.diff</url>
    </attachment>
  </attachments>
</ticket>
