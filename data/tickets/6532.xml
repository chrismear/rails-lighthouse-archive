<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-05T08:32:24+00:00</created-at>
  <creator-id type="integer">62685</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6532</number>
  <permalink>default_scope-doesnt-let-override-the-order</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>active_record association default_scope</tag>
  <title>default_scope doesn't let override the order</title>
  <updated-at type="datetime">2011-03-05T08:44:30+00:00</updated-at>
  <user-id type="integer">62685</user-id>
  <version type="integer">2</version>
  <user-name>Arik Fraimovich</user-name>
  <creator-name>Arik Fraimovich</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6532</url>
  <priority-name nil="true"></priority-name>
  <original-body>I have the following code:

@@@ ruby
class Post &lt; ActiveRecord::Base
  default_scope :order =&gt; 'created_at DESC'

  has_many :replies, :class_name =&gt; 'Post', :foreign_key=&gt;&quot;parent_id&quot;, :order=&gt;&quot;created_at ASC&quot;
end
@@@

In Rails 2.3.8 when I was retrieving the replies (i.e. `post.replies`) I got them in the correct order. But in Rails 3.0.4 I get them in descending order, as if the order clause in the has_many association has no effect. When I checked the SQL resulting from this call I saw that it was generating the following:

@@@ sql
SELECT `posts`.* FROM `posts` WHERE (`posts`.parent_id = 514) ORDER BY created_at desc, created_at ASC
@@@

While this behavior makes sense when the order is using two different fields, in case it is the same field it should just override the one in default scope.

This behavior is somewhat similar to ticket #2346, but there it was referencing Rails 2.3 and I wasn't it is exactly the same.</original-body>
  <latest-body>I have the following code:

@@@ ruby
class Post &lt; ActiveRecord::Base
  default_scope :order =&gt; 'created_at DESC'

  has_many :replies, :class_name =&gt; 'Post', :foreign_key=&gt;&quot;parent_id&quot;, :order=&gt;&quot;created_at ASC&quot;
end
@@@

In Rails 2.3.8 when I was retrieving the replies (i.e. `post.replies`) I got them in the correct order. But in Rails 3.0.4 I get them in descending order, as if the order clause in the has_many association has no effect. When I checked the SQL resulting from this call I saw that it was generating the following:

@@@ sql
SELECT `posts`.* FROM `posts` WHERE (`posts`.parent_id = 514) ORDER BY created_at desc, created_at ASC
@@@

While this behavior makes sense when the order is using two different fields, in case it is the same field it should just override the one in default scope.

This behavior is somewhat similar to ticket #2346, but there it was referencing Rails 2.3 and I wasn't it is exactly the same.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have the following code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Post &amp;lt; ActiveRecord::Base
  default_scope :order =&amp;gt; 'created_at DESC'

  has_many :replies, :class_name =&amp;gt; 'Post', :foreign_key=&amp;gt;&quot;parent_id&quot;, :order=&amp;gt;&quot;created_at ASC&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In Rails 2.3.8 when I was retrieving the replies (i.e.
&lt;code&gt;post.replies&lt;/code&gt;) I got them in the correct order. But in
Rails 3.0.4 I get them in descending order, as if the order clause
in the has_many association has no effect. When I checked the SQL
resulting from this call I saw that it was generating the
following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT `posts`.* FROM `posts` WHERE (`posts`.parent_id = 514) ORDER BY created_at desc, created_at ASC&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While this behavior makes sense when the order is using two
different fields, in case it is the same field it should just
override the one in default scope.&lt;/p&gt;
&lt;p&gt;This behavior is somewhat similar to ticket &lt;a href=
&quot;/projects/8994/tickets/2346&quot; title=&quot;Ticket #2346&quot;&gt;#2346&lt;/a&gt;, but
there it was referencing Rails 2.3 and I wasn't it is exactly the
same.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have the following code:

@@@ ruby
class Post &lt; ActiveRecord::Base
  default_scope :order =&gt; 'created_at DESC'

  has_many :replies, :class_name =&gt; 'Post', :foreign_key=&gt;&quot;parent_id&quot;, :order=&gt;&quot;created_at ASC&quot;
end
@@@

In Rails 2.3.8 when I was retrieving the replies (i.e. `post.replies`) I got them in the correct order. But in Rails 3.0.4 I get them in descending order, as if the order clause in the has_many association has no effect. When I checked the SQL resulting from this call I saw that it was generating the following:

@@@ sql
SELECT `posts`.* FROM `posts` WHERE (`posts`.parent_id = 514) ORDER BY created_at desc, created_at ASC
@@@

While this behavior makes sense when the order is using two different fields, in case it is the same field it should just override the one in default scope.

This behavior is somewhat similar to ticket #2346, but there it was referencing Rails 2.3 and I wasn't it is exactly the same.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have the following code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Post &amp;lt; ActiveRecord::Base
  default_scope :order =&amp;gt; 'created_at DESC'

  has_many :replies, :class_name =&amp;gt; 'Post', :foreign_key=&amp;gt;&quot;parent_id&quot;, :order=&amp;gt;&quot;created_at ASC&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In Rails 2.3.8 when I was retrieving the replies (i.e.
&lt;code&gt;post.replies&lt;/code&gt;) I got them in the correct order. But in
Rails 3.0.4 I get them in descending order, as if the order clause
in the has_many association has no effect. When I checked the SQL
resulting from this call I saw that it was generating the
following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;SELECT `posts`.* FROM `posts` WHERE (`posts`.parent_id = 514) ORDER BY created_at desc, created_at ASC&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While this behavior makes sense when the order is using two
different fields, in case it is the same field it should just
override the one in default scope.&lt;/p&gt;
&lt;p&gt;This behavior is somewhat similar to ticket &lt;a href=
&quot;/projects/8994/tickets/2346&quot; title=&quot;Ticket #2346&quot;&gt;#2346&lt;/a&gt;, but
there it was referencing Rails 2.3 and I wasn't it is exactly the
same.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-05T08:32:24+00:00</created-at>
      <creator-id type="integer">62685</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6532</number>
      <permalink>default_scope-doesnt-let-override-the-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record association default_scope</tag>
      <title>default_scope doesn't let override the order</title>
      <updated-at type="datetime">2011-03-05T08:32:25+00:00</updated-at>
      <user-id type="integer">62685</user-id>
      <version type="integer">1</version>
      <user-name>Arik Fraimovich</user-name>
      <creator-name>Arik Fraimovich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6532</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-05T08:44:29+00:00</created-at>
      <creator-id type="integer">62685</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6532</number>
      <permalink>default_scope-doesnt-let-override-the-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record association default_scope</tag>
      <title>default_scope doesn't let override the order</title>
      <updated-at type="datetime">2011-03-05T08:44:30+00:00</updated-at>
      <user-id type="integer">62685</user-id>
      <version type="integer">2</version>
      <user-name>Arik Fraimovich</user-name>
      <creator-name>Arik Fraimovich</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6532</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
