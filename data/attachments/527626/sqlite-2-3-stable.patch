From 10ff2a654be8d4d39698ae82907754adb8c8167d Mon Sep 17 00:00:00 2001
From: Santiago Pastorino <santiago@wyeworks.com>
Date: Wed, 19 May 2010 21:06:40 -0300
Subject: [PATCH] future proofing the sqlite3 adapter code beda2d43 backport

---
 .../connection_adapters/sqlite_adapter.rb          |    6 +++---
 activerecord/test/cases/calculations_test.rb       |    7 ++++++-
 activerecord/test/cases/query_cache_test.rb        |   10 +++++++++-
 3 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb b/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
index f82e5bf..5333999 100644
--- a/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
@@ -220,20 +220,20 @@ module ActiveRecord
         SQL
 
         execute(sql, name).map do |row|
-          row[0]
+          row['name']
         end
       end
 
       def columns(table_name, name = nil) #:nodoc:
         table_structure(table_name).map do |field|
-          SQLiteColumn.new(field['name'], field['dflt_value'], field['type'], field['notnull'] == "0")
+          SQLiteColumn.new(field['name'], field['dflt_value'], field['type'], field['notnull'].to_i == 0)
         end
       end
 
       def indexes(table_name, name = nil) #:nodoc:
         execute("PRAGMA index_list(#{quote_table_name(table_name)})", name).map do |row|
           index = IndexDefinition.new(table_name, row['name'])
-          index.unique = row['unique'] != '0'
+          index.unique = row['unique'].to_i != 0
           index.columns = execute("PRAGMA index_info('#{index.name}')").map { |col| col['name'] }
           index
         end
diff --git a/activerecord/test/cases/calculations_test.rb b/activerecord/test/cases/calculations_test.rb
index 60f41a8..f29652e 100644
--- a/activerecord/test/cases/calculations_test.rb
+++ b/activerecord/test/cases/calculations_test.rb
@@ -297,7 +297,12 @@ class CalculationsTest < ActiveRecord::TestCase
   end
 
   def test_should_sum_expression
-    assert_equal '636', Account.sum("2 * credit_limit")
+    if current_adapter?(:SQLite3Adapter)
+      # Future versions of the SQLite3 adapter will return a number
+      assert_equal 636, Account.sum("2 * credit_limit").to_i
+    else
+      assert_equal '636', Account.sum("2 * credit_limit")
+    end
   end
 
   def test_count_with_from_option
diff --git a/activerecord/test/cases/query_cache_test.rb b/activerecord/test/cases/query_cache_test.rb
index f90a66d..cbdc365 100644
--- a/activerecord/test/cases/query_cache_test.rb
+++ b/activerecord/test/cases/query_cache_test.rb
@@ -49,8 +49,16 @@ class QueryCacheTest < ActiveRecord::TestCase
   end
 
   def test_cache_does_not_wrap_string_results_in_arrays
+    require 'sqlite3/version' if current_adapter?(:SQLite3Adapter)
+
     Task.cache do
-      assert_instance_of String, Task.connection.select_value("SELECT count(*) AS count_all FROM tasks")
+      if current_adapter?(:SQLite3Adapter) && SQLite3::Version::VERSION > '1.2.5'
+        # Future versions of the sqlite3 adapter will return numeric
+        assert_instance_of Fixnum,
+        Task.connection.select_value("SELECT count(*) AS count_all FROM tasks")
+      else
+        assert_instance_of String, Task.connection.select_value("SELECT count(*) AS count_all FROM tasks")
+      end
     end
   end
 end
-- 
1.7.1

