From e22a66676f07b3a45a27dbce83da7bc7147ceece Mon Sep 17 00:00:00 2001
From: Nick Retallack <nickretallack@gmail.com>
Date: Thu, 4 Dec 2008 14:14:56 -0800
Subject: [PATCH] tests for query-cache bugs

---
 activerecord/test/cases/finder_test.rb |   27 +++++++++++++++++++++++++++
 1 files changed, 27 insertions(+), 0 deletions(-)

diff --git a/activerecord/test/cases/finder_test.rb b/activerecord/test/cases/finder_test.rb
index d4d770b..a2cc715 100644
--- a/activerecord/test/cases/finder_test.rb
+++ b/activerecord/test/cases/finder_test.rb
@@ -863,6 +863,33 @@ class FinderTest < ActiveRecord::TestCase
     assert c.valid?
     assert !c.new_record?
   end
+  
+  def test_find_or_create_should_clear_cached_associations_on_create
+    p = posts(:thinking)
+    comment_count = p.comments.length # intentionally caching the association
+    c = p.comments.find_or_create_by_body("Something that does not currently exist")
+    assert_equal(comment_count+1, p.comments.count)
+    assert_equal(comment_count+1, p.comments.length) # see if association has changed or is still cached
+    c.destroy
+  end
+  
+  def test_create_should_clear_cached_associations
+    post = posts(:thinking)
+    comment1 = post.comments.create
+    
+    # incidentally cache (note: you have to call length or it doesn't break)
+    comment_count = post.comments.length
+  
+    # creating this one somewhat indirectly to demonstrate the flaw
+    comment2 = comment1.post.comments.create
+
+    assert_equal(comment_count+1, post.comments.count)
+    assert_equal(comment_count+1, post.comments.length)
+    
+    comment1.destroy
+    comment2.destroy
+  end
+  
 
   def test_dynamic_find_or_initialize_from_one_attribute_caches_method
     class << Company; self; end.send(:remove_method, :find_or_initialize_by_name) if Company.public_methods.any? { |m| m.to_s == 'find_or_initialize_by_name' }
-- 
1.5.0.5

