<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-19T09:28:18+00:00</created-at>
  <creator-id type="integer">23283</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">2972</number>
  <permalink>mongrel-does-not-properly-release-db-connections</permalink>
  <priority type="integer">128659</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>Mongrel does not properly release db connections</title>
  <updated-at type="datetime">2011-02-19T09:28:18+00:00</updated-at>
  <user-id type="integer">94458</user-id>
  <version type="integer">17</version>
  <user-name>Jeff Kreeftmeijer</user-name>
  <creator-name>Laurent Farcy</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hi,

I recently upgraded my application from Rails 2.0.5 to 2.3.2. Since then, I detected an issue when running it with Mongrel in production mode.

If I set the pool to 1 connection in database.yml and let the wait_timeout to 5, every request (except the very first one) waits for 5 seconds before being processed by Rails.

If I increase the pool to 3 connections, the browser waits for 5 seconds every 3 requests. 

It looks like Mongrel does not immediately release the connection from the pool when it finishes the request processing. One assumption is that we have to wait for Mongrel to kill its thread that processed the request for the connection to be released (to be verified).

Please note that sessions are managed by the sql_session_store plugin with a MySQL back-end. Mongrel version is 1.1.5.

Laurent</original-body>
  <latest-body>Hi,

I recently upgraded my application from Rails 2.0.5 to 2.3.2. Since then, I detected an issue when running it with Mongrel in production mode.

If I set the pool to 1 connection in database.yml and let the wait_timeout to 5, every request (except the very first one) waits for 5 seconds before being processed by Rails.

If I increase the pool to 3 connections, the browser waits for 5 seconds every 3 requests. 

It looks like Mongrel does not immediately release the connection from the pool when it finishes the request processing. One assumption is that we have to wait for Mongrel to kill its thread that processed the request for the connection to be released (to be verified).

Please note that sessions are managed by the sql_session_store plugin with a MySQL back-end. Mongrel version is 1.1.5.

Laurent</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I recently upgraded my application from Rails 2.0.5 to 2.3.2.
Since then, I detected an issue when running it with Mongrel in
production mode.&lt;/p&gt;
&lt;p&gt;If I set the pool to 1 connection in database.yml and let the
wait_timeout to 5, every request (except the very first one) waits
for 5 seconds before being processed by Rails.&lt;/p&gt;
&lt;p&gt;If I increase the pool to 3 connections, the browser waits for 5
seconds every 3 requests.&lt;/p&gt;
&lt;p&gt;It looks like Mongrel does not immediately release the
connection from the pool when it finishes the request processing.
One assumption is that we have to wait for Mongrel to kill its
thread that processed the request for the connection to be released
(to be verified).&lt;/p&gt;
&lt;p&gt;Please note that sessions are managed by the sql_session_store
plugin with a MySQL back-end. Mongrel version is 1.1.5.&lt;/p&gt;
&lt;p&gt;Laurent&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

I recently upgraded my application from Rails 2.0.5 to 2.3.2. Since then, I detected an issue when running it with Mongrel in production mode.

If I set the pool to 1 connection in database.yml and let the wait_timeout to 5, every request (except the very first one) waits for 5 seconds before being processed by Rails.

If I increase the pool to 3 connections, the browser waits for 5 seconds every 3 requests. 

It looks like Mongrel does not immediately release the connection from the pool when it finishes the request processing. One assumption is that we have to wait for Mongrel to kill its thread that processed the request for the connection to be released (to be verified).

Please note that sessions are managed by the sql_session_store plugin with a MySQL back-end. Mongrel version is 1.1.5.

Laurent</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I recently upgraded my application from Rails 2.0.5 to 2.3.2.
Since then, I detected an issue when running it with Mongrel in
production mode.&lt;/p&gt;
&lt;p&gt;If I set the pool to 1 connection in database.yml and let the
wait_timeout to 5, every request (except the very first one) waits
for 5 seconds before being processed by Rails.&lt;/p&gt;
&lt;p&gt;If I increase the pool to 3 connections, the browser waits for 5
seconds every 3 requests.&lt;/p&gt;
&lt;p&gt;It looks like Mongrel does not immediately release the
connection from the pool when it finishes the request processing.
One assumption is that we have to wait for Mongrel to kill its
thread that processed the request for the connection to be released
(to be verified).&lt;/p&gt;
&lt;p&gt;Please note that sessions are managed by the sql_session_store
plugin with a MySQL back-end. Mongrel version is 1.1.5.&lt;/p&gt;
&lt;p&gt;Laurent&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-29T10:55:55+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-29T10:56:01+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">1</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm having a similar problem which is probably related. Each mongrel process will over time end up creating as many connections as the pool will allow. So 5 connections for each of our 6 mongrels leaves us with 30 connections and 30 PostgreSQL processes. That's a lot of memory.

I spent a fair amount of time reading the mongrel and activerecord code to figure out what was going on, I came to the conclusion that simply reducing the pool size would work, because from what I could see, each connection should be checked back into the pool when the request has been handled due to the thread associated with the connection dieing.

Mongrel dispatches each request within a ctrical region and I see no code outside this region that should cause activerecord to attempt to checkout a new connection. So, given there's only a single RailsHandler instance (which as far as I can see there is) it should be true that there's only ever a single thread at any one time trying to checkout a connection from the pool. However when I reduced my pool size to 1 or 2 I'd end up with pool checkout timeout errors.

Mongrel doesn't explicity kill its threads, they just die once the request has been handled and thus get automatically removed from the ThreadGroup in which they live. Mongrel spawns a new thread for every request.

I also noticed that Mongrel will always retain an open connection that can't be used by other threads. When Mongrel boots it requires the rails environment which results in database activity. However once the environment is loaded database activity is only performed within a request thread, so the connection associated with the base process thread just sits there doing nothing. You can save yourself a connection by adding ActiveRecord::Base.clear_all_connections! in RailsConfigurator#rails after the environment is loaded.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm having a similar problem which is probably related. Each
mongrel process will over time end up creating as many connections
as the pool will allow. So 5 connections for each of our 6 mongrels
leaves us with 30 connections and 30 PostgreSQL processes. That's a
lot of memory.&lt;/p&gt;
&lt;p&gt;I spent a fair amount of time reading the mongrel and
activerecord code to figure out what was going on, I came to the
conclusion that simply reducing the pool size would work, because
from what I could see, each connection should be checked back into
the pool when the request has been handled due to the thread
associated with the connection dieing.&lt;/p&gt;
&lt;p&gt;Mongrel dispatches each request within a ctrical region and I
see no code outside this region that should cause activerecord to
attempt to checkout a new connection. So, given there's only a
single RailsHandler instance (which as far as I can see there is)
it should be true that there's only ever a single thread at any one
time trying to checkout a connection from the pool. However when I
reduced my pool size to 1 or 2 I'd end up with pool checkout
timeout errors.&lt;/p&gt;
&lt;p&gt;Mongrel doesn't explicity kill its threads, they just die once
the request has been handled and thus get automatically removed
from the ThreadGroup in which they live. Mongrel spawns a new
thread for every request.&lt;/p&gt;
&lt;p&gt;I also noticed that Mongrel will always retain an open
connection that can't be used by other threads. When Mongrel boots
it requires the rails environment which results in database
activity. However once the environment is loaded database activity
is only performed within a request thread, so the connection
associated with the base process thread just sits there doing
nothing. You can save yourself a connection by adding
ActiveRecord::Base.clear_all_connections! in
RailsConfigurator#rails after the environment is loaded.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-29T16:33:17+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-29T16:33:21+01:00</updated-at>
      <user-id type="integer">11948</user-id>
      <version type="integer">2</version>
      <user-name>Ian Leitch</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think I've identified a race condition here. Only a small portion of the Mongrel processing code is synchronized, so it's possible that whilst thread A has left the synchronized block, thread B has entered and is now attempting to checkout a new connection, yet thread A may still be alive executing the code outside the synchronized block. So whether thread B will get a connection or not depends on if thread A is able to die before the timeout triggers.

I also think there's a deadlock in activerecord connection pooling. Say we have a pool size of 1 and two threads. If Thread A checks out a connection and then Thread B attempts to checkout a connection, it's going to wait for the @queue to be signaled, yet Thread A can't check the connection back into the pool because it's blocked waiting for the @connection_mutex which is currently held by Thread B waiting on the @queue signal. Thread B is doomed to fail with a ConnectionTimeoutError.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think I've identified a race condition here. Only a small
portion of the Mongrel processing code is synchronized, so it's
possible that whilst thread A has left the synchronized block,
thread B has entered and is now attempting to checkout a new
connection, yet thread A may still be alive executing the code
outside the synchronized block. So whether thread B will get a
connection or not depends on if thread A is able to die before the
timeout triggers.&lt;/p&gt;
&lt;p&gt;I also think there's a deadlock in activerecord connection
pooling. Say we have a pool size of 1 and two threads. If Thread A
checks out a connection and then Thread B attempts to checkout a
connection, it's going to wait for the @queue to be signaled, yet
Thread A can't check the connection back into the pool because it's
blocked waiting for the @connection_mutex which is currently held
by Thread B waiting on the @queue signal. Thread B is doomed to
fail with a ConnectionTimeoutError.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-29T17:14:41+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-29T17:14:42+01:00</updated-at>
      <user-id type="integer">11948</user-id>
      <version type="integer">3</version>
      <user-name>Ian Leitch</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ian,

Thank you so much for sharing your experience with Mongrel and connection pooling.

On our side, we also got caught by surprise with the default pool size being 5. With 10 Mongrel servers on our production site, we ended up with 50 MySQL connections instead of 10 beforehand. It simply was the max number of connections allowed on our MySQL server.

Since Mongrel is single-threaded, we considered the pool should be reduced to 1 connection. That's when we started observing the 5 seconds timeout due to the single connection not being released.

As stated in the title of this ticket, we firmly believed the issue was with Mongrel, since it uses one (different) thread by request and does nothing to release the db connection. After going through the Rails code (especially the initialiazer) and googling (a lot), we realized the culprit was more the sql_session_store plugin.

If you look at the Rails initializer, you will find that Rails racks a middleware to manage the db connections, mainly to release any active connections after the request is processed. The thing is it's racked after the session store except when the latter is the ActiveRecod session store. In this case, it's racked before.

The consequence is that the connection is released too early when you use the sql_session_store. Hopefully, there's a workaround that consists in undoing what Rails does with connection management at initialization time and redoing it the proper way. In 'config/environment.rb', you get

# Specifies gem version of Rails to use when vendor/rails is not present
RAILS_GEM_VERSION = '2.3.2' unless defined? RAILS_GEM_VERSION

# Bootstrap the Rails environment, frameworks, and default configuration
require File.join(File.dirname(__FILE__), 'boot')

Rails::Initializer.run do |config|
  ...

  # Use SQL session store for sessions
  config.action_controller.session_store = :sql_session_store

  ...
end

# Specific Session class for MySQL
SqlSessionStore.session_class = MysqlSession

##
## Re-arrange middleware stack to properly release connection used by
## SqlSessionStore
##
ActionController::Dispatcher.middleware.delete(
  ActiveRecord::ConnectionAdapters::ConnectionManagement)
ActionController::Dispatcher.middleware.insert_before(
  :'SqlSessionStore', ActiveRecord::ConnectionAdapters::ConnectionManagement)

ActionController::Dispatcher.middleware.delete(
  ActiveRecord::QueryCache)
ActionController::Dispatcher.middleware.insert_before(
  :'SqlSessionStore', ActiveRecord::QueryCache)
  
...

With this code in place, we no more have timeout issue with the connection pool. IMHO, the responsability of the defect is shared b/w Rails and the SQL session store. On one hand, Rails somehow assumes that only the AR session store makes use of a db connection. On the other hand, the sql_session_store does not take care of the connection pool.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ian,&lt;/p&gt;
&lt;p&gt;Thank you so much for sharing your experience with Mongrel and
connection pooling.&lt;/p&gt;
&lt;p&gt;On our side, we also got caught by surprise with the default
pool size being 5. With 10 Mongrel servers on our production site,
we ended up with 50 MySQL connections instead of 10 beforehand. It
simply was the max number of connections allowed on our MySQL
server.&lt;/p&gt;
&lt;p&gt;Since Mongrel is single-threaded, we considered the pool should
be reduced to 1 connection. That's when we started observing the 5
seconds timeout due to the single connection not being
released.&lt;/p&gt;
&lt;p&gt;As stated in the title of this ticket, we firmly believed the
issue was with Mongrel, since it uses one (different) thread by
request and does nothing to release the db connection. After going
through the Rails code (especially the initialiazer) and googling
(a lot), we realized the culprit was more the sql_session_store
plugin.&lt;/p&gt;
&lt;p&gt;If you look at the Rails initializer, you will find that Rails
racks a middleware to manage the db connections, mainly to release
any active connections after the request is processed. The thing is
it's racked after the session store except when the latter is the
ActiveRecod session store. In this case, it's racked before.&lt;/p&gt;
&lt;p&gt;The consequence is that the connection is released too early
when you use the sql_session_store. Hopefully, there's a workaround
that consists in undoing what Rails does with connection management
at initialization time and redoing it the proper way. In
'config/environment.rb', you get&lt;/p&gt;
&lt;h1&gt;Specifies gem version of Rails to use when vendor/rails is not
present&lt;/h1&gt;
&lt;p&gt;= '2.3.2' unless defined? RAILS_GEM_VERSION&lt;/p&gt;
&lt;h1&gt;Bootstrap the Rails environment, frameworks, and default
configuration&lt;/h1&gt;
&lt;p&gt;require File.join(File.dirname(&lt;strong&gt;FILE&lt;/strong&gt;),
'boot')&lt;/p&gt;
&lt;p&gt;Rails::Initializer.run do |config|&lt;br&gt;
...&lt;/p&gt;
&lt;p&gt;# Use SQL session store for sessions
config.action_controller.session_store = :sql_session_store&lt;/p&gt;
&lt;p&gt;... end&lt;/p&gt;
&lt;h1&gt;Specific Session class for MySQL&lt;/h1&gt;
&lt;p&gt;SqlSessionStore.session_class = MysqlSession&lt;/p&gt;
&lt;p&gt;##&lt;/p&gt;
&lt;h2&gt;Re-arrange middleware stack to properly release connection used
by&lt;/h2&gt;
&lt;h2&gt;SqlSessionStore&lt;/h2&gt;
&lt;p&gt;## ActionController::Dispatcher.middleware.delete(&lt;br&gt;
ActiveRecord::ConnectionAdapters::ConnectionManagement)
ActionController::Dispatcher.middleware.insert_before(&lt;br&gt;
:'SqlSessionStore',
ActiveRecord::ConnectionAdapters::ConnectionManagement)&lt;/p&gt;
&lt;p&gt;ActionController::Dispatcher.middleware.delete(&lt;br&gt;
ActiveRecord::QueryCache)
ActionController::Dispatcher.middleware.insert_before(&lt;br&gt;
:'SqlSessionStore', ActiveRecord::QueryCache)&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;With this code in place, we no more have timeout issue with the
connection pool. IMHO, the responsability of the defect is shared
b/w Rails and the SQL session store. On one hand, Rails somehow
assumes that only the AR session store makes use of a db
connection. On the other hand, the sql_session_store does not take
care of the connection pool.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-29T17:34:44+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.2 connection_pooling mongrel
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-29T17:34:46+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">4</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry for the wrong formatting. 

@@@ ruby
# Specifies gem version of Rails to use when vendor/rails is not present
RAILS_GEM_VERSION = '2.3.2' unless defined? RAILS_GEM_VERSION

# Bootstrap the Rails environment, frameworks, and default configuration
require File.join(File.dirname(__FILE__), 'boot')

Rails::Initializer.run do |config|
  # ...

  # Use SQL session store for sessions
  config.action_controller.session_store = :sql_session_store

  # ...
end

# Specific Session class for MySQL
SqlSessionStore.session_class = MysqlSession

ActionController::Dispatcher.middleware.delete(
  ActiveRecord::ConnectionAdapters::ConnectionManagement)
ActionController::Dispatcher.middleware.insert_before(
  :'SqlSessionStore', ActiveRecord::ConnectionAdapters::ConnectionManagement)

ActionController::Dispatcher.middleware.delete(
  ActiveRecord::QueryCache)
ActionController::Dispatcher.middleware.insert_before(
  :'SqlSessionStore', ActiveRecord::QueryCache)
  
# ...
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry for the wrong formatting.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;# Specifies gem version of Rails to use when vendor/rails is not present
RAILS_GEM_VERSION = '2.3.2' unless defined? RAILS_GEM_VERSION

# Bootstrap the Rails environment, frameworks, and default configuration
require File.join(File.dirname(__FILE__), 'boot')

Rails::Initializer.run do |config|
  # ...

  # Use SQL session store for sessions
  config.action_controller.session_store = :sql_session_store

  # ...
end

# Specific Session class for MySQL
SqlSessionStore.session_class = MysqlSession

ActionController::Dispatcher.middleware.delete(
  ActiveRecord::ConnectionAdapters::ConnectionManagement)
ActionController::Dispatcher.middleware.insert_before(
  :'SqlSessionStore', ActiveRecord::ConnectionAdapters::ConnectionManagement)

ActionController::Dispatcher.middleware.delete(
  ActiveRecord::QueryCache)
ActionController::Dispatcher.middleware.insert_before(
  :'SqlSessionStore', ActiveRecord::QueryCache)
  
# ...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-29T17:37:19+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-29T17:37:22+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">5</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I can't really comment on sessions and db connections as I use cookie based sessions.

To clarify how Mongrel and ActiveRecord work together:

Mongrel isn't responsible for releasing databasse connections, all it has to ensure is that the thread that has handled a request dies. It's ActiveRecord's job to return connections associated with dead threads back to the pool. Also note that once a thread has died, activerecord doesn't disconnect the connection, it simply returns it to a pool of available connections. So if your pool size is 5 and you had 5 threads all trying to obtain a connection at the same time, you'd have 5 open connections to your database when the threads have finished.

Without my earlier comment about patching Mongrel with ActiveRecord::Base.clear_all_connections! the minimum you should be able to set your pool size to is 2. Since 1 of those connections will never become available for use by requests.

By the way, Mongrel itself IS multi-threaded, only the Rails dispatch call is synchronized.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can't really comment on sessions and db connections as I use
cookie based sessions.&lt;/p&gt;
&lt;p&gt;To clarify how Mongrel and ActiveRecord work together:&lt;/p&gt;
&lt;p&gt;Mongrel isn't responsible for releasing databasse connections,
all it has to ensure is that the thread that has handled a request
dies. It's ActiveRecord's job to return connections associated with
dead threads back to the pool. Also note that once a thread has
died, activerecord doesn't disconnect the connection, it simply
returns it to a pool of available connections. So if your pool size
is 5 and you had 5 threads all trying to obtain a connection at the
same time, you'd have 5 open connections to your database when the
threads have finished.&lt;/p&gt;
&lt;p&gt;Without my earlier comment about patching Mongrel with
ActiveRecord::Base.clear_all_connections! the minimum you should be
able to set your pool size to is 2. Since 1 of those connections
will never become available for use by requests.&lt;/p&gt;
&lt;p&gt;By the way, Mongrel itself IS multi-threaded, only the Rails
dispatch call is synchronized.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-29T21:49:54+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-29T21:49:59+01:00</updated-at>
      <user-id type="integer">11948</user-id>
      <version type="integer">6</version>
      <user-name>Ian Leitch</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ian,

Thanks for continuing the discussion. We definitely discuss the same topic but have experienced different issues.

On my side, I am now sure that the sql_session_store is a source of trouble for the connection pool of Rails 2.3.2 because the connection it uses is not released. Once it has been fixed, everything goes right.

You apparently found another issue b/w Mongrel and the Rails connection pool. Let me comment on that.

As you say, Mongrel isn't responsible for releasing database connections, BUT Rails takes charge of that for Mongrel. It's done at the end of request dispatching by a Rack middleware dedicated to db connection management. It's synchronized from a Mongrel standpoint since it's done in the Rails dispatching.

I also confirm that, whenever a connection would not be released at the end of a request processing, Rails connection pool is still able to get it back by inspecting the connections still allocated to dead threads. But at the price of waiting for 5 seconds (by default) if there's no more connection available in the pool. Again, it's done in the Mongrel synchronized block.

Having said that, I was not aware that Mongrel uses a connection to initialize Rails environment. Which could have consequences on connection pooling, obviously.

I can only testify that all our Mongrel servers now use a single connection in their pool and the default wait_timeout (5s). And we do not experience any connection shortage or timeout anymore.

HTH.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ian,&lt;/p&gt;
&lt;p&gt;Thanks for continuing the discussion. We definitely discuss the
same topic but have experienced different issues.&lt;/p&gt;
&lt;p&gt;On my side, I am now sure that the sql_session_store is a source
of trouble for the connection pool of Rails 2.3.2 because the
connection it uses is not released. Once it has been fixed,
everything goes right.&lt;/p&gt;
&lt;p&gt;You apparently found another issue b/w Mongrel and the Rails
connection pool. Let me comment on that.&lt;/p&gt;
&lt;p&gt;As you say, Mongrel isn't responsible for releasing database
connections, BUT Rails takes charge of that for Mongrel. It's done
at the end of request dispatching by a Rack middleware dedicated to
db connection management. It's synchronized from a Mongrel
standpoint since it's done in the Rails dispatching.&lt;/p&gt;
&lt;p&gt;I also confirm that, whenever a connection would not be released
at the end of a request processing, Rails connection pool is still
able to get it back by inspecting the connections still allocated
to dead threads. But at the price of waiting for 5 seconds (by
default) if there's no more connection available in the pool.
Again, it's done in the Mongrel synchronized block.&lt;/p&gt;
&lt;p&gt;Having said that, I was not aware that Mongrel uses a connection
to initialize Rails environment. Which could have consequences on
connection pooling, obviously.&lt;/p&gt;
&lt;p&gt;I can only testify that all our Mongrel servers now use a single
connection in their pool and the default wait_timeout (5s). And we
do not experience any connection shortage or timeout anymore.&lt;/p&gt;
&lt;p&gt;HTH.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-30T10:18:48+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-30T10:18:50+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">7</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ian,

I think I know why you must set your pool to 2. When your Rails app needs a connecion to initialize, it is never released unless you do it explicitly. We made a simple test where our application is in severe trouble when it uses a connection in config/environment.rb but does not release it. With a pool of 1, the application is unavailable.

I assume Rails is initialized by Mongrel master thread which never dies, therefore the connection cannot be brought back in the pool. Have a look at your initialization code and surround any db connection usage with a ActiveRecord::Base.connection_pool.with_connection call.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ian,&lt;/p&gt;
&lt;p&gt;I think I know why you must set your pool to 2. When your Rails
app needs a connecion to initialize, it is never released unless
you do it explicitly. We made a simple test where our application
is in severe trouble when it uses a connection in
config/environment.rb but does not release it. With a pool of 1,
the application is unavailable.&lt;/p&gt;
&lt;p&gt;I assume Rails is initialized by Mongrel master thread which
never dies, therefore the connection cannot be brought back in the
pool. Have a look at your initialization code and surround any db
connection usage with a
ActiveRecord::Base.connection_pool.with_connection call.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-30T10:40:20+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-30T10:40:23+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">8</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is correct, however in my application atleast, clearing the connections inside after_initialize wasn't the solution as something after after_initialize in the Rails initialization was connecting to the database. I've identified what that was now and forced a load in after_initialize so my Mongrel patch is no longer needed and instead I can just clear connections in after_initialize.

I'm eager to here how you get on with a pool size of 1. When I tried a while back it wasn't long before I started getting connection timeout errors again.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is correct, however in my application atleast, clearing the
connections inside after_initialize wasn't the solution as
something after after_initialize in the Rails initialization was
connecting to the database. I've identified what that was now and
forced a load in after_initialize so my Mongrel patch is no longer
needed and instead I can just clear connections in
after_initialize.&lt;/p&gt;
&lt;p&gt;I'm eager to here how you get on with a pool size of 1. When I
tried a while back it wasn't long before I started getting
connection timeout errors again.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-30T14:58:40+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-30T14:58:43+01:00</updated-at>
      <user-id type="integer">11948</user-id>
      <version type="integer">9</version>
      <user-name>Ian Leitch</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ian,

After fixing the middleware stack for the Sql Session Store, we simply decreased the pool to a single connection and since then, everything goes fine so far. I cannot guarantee we won't get timeout issues with the connection pool in the future.

Our Mongrel servers may not be as stressed as yours, therfore we may not raise the conditions necessary to get the issue you describe.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ian,&lt;/p&gt;
&lt;p&gt;After fixing the middleware stack for the Sql Session Store, we
simply decreased the pool to a single connection and since then,
everything goes fine so far. I cannot guarantee we won't get
timeout issues with the connection pool in the future.&lt;/p&gt;
&lt;p&gt;Our Mongrel servers may not be as stressed as yours, therfore we
may not raise the conditions necessary to get the issue you
describe.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-30T15:40:49+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-30T15:40:52+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">10</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is what I have in my after_initialize callback in environment.rb:

@@@ ruby
module Rails
  class Initializer
    def prepare_dispatcher_with_connection_clearing
      prepare_dispatcher_without_connection_clearing
      ActiveRecord::Base.clear_all_connections!
    end
    alias_method_chain :prepare_dispatcher, :connection_clearing
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is what I have in my after_initialize callback in
environment.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module Rails
  class Initializer
    def prepare_dispatcher_with_connection_clearing
      prepare_dispatcher_without_connection_clearing
      ActiveRecord::Base.clear_all_connections!
    end
    alias_method_chain :prepare_dispatcher, :connection_clearing
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-30T15:40:59+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-30T15:41:03+01:00</updated-at>
      <user-id type="integer">11948</user-id>
      <version type="integer">11</version>
      <user-name>Ian Leitch</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ian,

I'm not used to the usage of the after_initialize callback in the context of environment.rb. No more to the alias_method_chain directive.

To release db connections after Rails initialization, I would have simply called ActiveRecord::Base.clear_all_connections! at the very end of config/environment.rb (not at the end of the Rails::Initializer.run block).

Are you 100% sure you release db connections at the very end of the initialization process with your method ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ian,&lt;/p&gt;
&lt;p&gt;I'm not used to the usage of the after_initialize callback in
the context of environment.rb. No more to the alias_method_chain
directive.&lt;/p&gt;
&lt;p&gt;To release db connections after Rails initialization, I would
have simply called ActiveRecord::Base.clear_all_connections! at the
very end of config/environment.rb (not at the end of the
Rails::Initializer.run block).&lt;/p&gt;
&lt;p&gt;Are you 100% sure you release db connections at the very end of
the initialization process with your method ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-31T11:21:40+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2009-07-31T11:21:44+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">12</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hello Ian,

I wanted to update this ticket to see if there was any more information you had on this or if this issue is no longer valid.  Let us know so we can help.  I am going to mark it resolved since it is so old, but feel free to update and reopen this if necessary.

Mike Riley</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello Ian,&lt;/p&gt;
&lt;p&gt;I wanted to update this ticket to see if there was any more
information you had on this or if this issue is no longer valid.
Let us know so we can help. I am going to mark it resolved since it
is so old, but feel free to update and reopen this if
necessary.&lt;/p&gt;
&lt;p&gt;Mike Riley&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-29T14:41:14+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">128659</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2010-07-29T14:41:19+01:00</updated-at>
      <user-id type="integer">102763</user-id>
      <version type="integer">13</version>
      <user-name>Mike Riley</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Mike,

I don't know for Ian but on my side, it's been solved once I worked around the 'flaw' of the SQL Session store by re-arranging the middleware stack. Actually, we did see the issue once again recently in production but no more for last year.

Please note that I have not looked up for fixes in a new release of the plugin for a while.

Laurent Farcy</body>
      <body-html>&lt;div&gt;&lt;p&gt;Mike,&lt;/p&gt;
&lt;p&gt;I don't know for Ian but on my side, it's been solved once I
worked around the 'flaw' of the SQL Session store by re-arranging
the middleware stack. Actually, we did see the issue once again
recently in production but no more for last year.&lt;/p&gt;
&lt;p&gt;Please note that I have not looked up for fixes in a new release
of the plugin for a while.&lt;/p&gt;
&lt;p&gt;Laurent Farcy&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-29T14:54:54+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">128659</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2010-07-29T14:54:55+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">14</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Women in summer would like to become beautiful. 
good&lt;a href=&quot;http://www.egacn.com/Watches-new model watches.aspx&quot;&gt;new model watches&lt;/a&gt; can grab other's eyes is &lt;a href=&quot;http://www.egacn.com/Watches-new look watches.aspx&quot;&gt;new look watches&lt;/a&gt; best friends.&lt;a href=&quot;http://www.egacn.com/Watches-breitling bentley motors watches.aspx&quot;&gt;breitling bentley motors watches&lt;/a&gt; make them beauty and confident is &lt;a href=&quot;http://www.egacn.com/Watches-breitling bentley replica watches.aspx&quot;&gt;breitling bentley replica watches&lt;/a&gt;favourite. Look in the street,you can see many different types of make up to &lt;a href=&quot;http://www.egacn.com/Watches-buy discount skagen watches.aspx&quot;&gt;buy discount skagen watches&lt;/a&gt; personality.&lt;a href=&quot;http://www.egacn.com/Watches-buy cheap skagen watches.aspx&quot;&gt;buy cheap skagen watches&lt;/a&gt;In fact any kind of long &lt;a href=&quot;http://www.egacn.com/Watches-mens watches leather straps.aspx&quot;&gt;mens watches leather straps&lt;/a&gt;insulated pants will look quite normal and fit perfectly with a pair of matching-color &lt;a href=&quot;http://www.egacn.com/Watches-longines gold watches.aspx&quot;&gt;longines gold watches&lt;/a&gt;. If you are still worried about what to wear with &lt;a href=&quot;http://www.egacn.com/Watches-mens watches yellow face watches.aspx&quot;&gt;mens watches yellow face watches&lt;/a&gt;, there &lt;a href=&quot;http://www.egacn.com/Watches-orange face watches.aspx&quot;&gt;orange face watches&lt;/a&gt; are many places online such as the &lt;a href=&quot;http://www.egacn.com/Watches-purple face watches.aspx&quot;&gt;purple face watches&lt;/a&gt; which will help you pick out the right apparel to wear with your Ugg Ultra Short.Classic &#8211; This medium sized boot is perfect for any kid. It is designed to provide the most benefit &lt;a href=&quot;http://www.egacn.com/Watches-zenith watches sale.aspx&quot;&gt;zenith watches sale&lt;/a&gt; when worn without &lt;a href=&quot;http://www.egacn.com/Watches-Cartier gentle men watches.aspx&quot;&gt;Cartier gentle men watches&lt;/a&gt;, something kids really like. Being made from premium sheepskin makes this &lt;a href=&quot;http://www.egacn.com/Watches-breitling bentley replica watches.aspx&quot;&gt;breitling bentley replica watches&lt;/a&gt; II  extremely durable as well as waterproof. Kids will love the fact that &lt;a href=&quot;http://www.egacn.com/Watches-quartz watch corum watches.aspx&quot;&gt;quartz watch corum watches&lt;/a&gt;can be either a casual &lt;a href=&quot;http://www.egacn.com/Watches-quartz watches wrist watch.aspx&quot;&gt;quartz watches wrist watch&lt;/a&gt; or a comfortable slipper. The&lt;a href=&quot;http://www.egacn.com/Watches-promotional watch quartz movement.aspx&quot;&gt;promotional watch quartz movement&lt;/a&gt;is made from quality suede and sheepskin, not only will &lt;a href=&quot;http://www.egacn.com/Watches-quality swiss replica watches.aspx&quot;&gt;quality swiss replica watches&lt;/a&gt;feel be durable and strong but &lt;a href=&quot;http://www.egacn.com/Watches-cartier watches w20124u2.aspx&quot;&gt;cartier watches w20124u2&lt;/a&gt; will feel great also.This &lt;a href=&quot;http://www.egacn.com/Watches-buying replica watches.aspx&quot;&gt;buying replica watches&lt;/a&gt; is a great looking &lt;a href=&quot;http://www.egacn.com/Watches-diamond wrist watches.aspx&quot;&gt;diamond wrist watches&lt;/a&gt; that your child will just adore. &lt;a href=&quot;http://www.egacn.com/Watches-guaranteed mens watches.aspx&quot;&gt;guaranteed mens watches&lt;/a&gt; The bottoms are fine suede and the strap &lt;a href=&quot;http://www.egacn.com/Watches-best wrist watches world.aspx&quot;&gt;best wrist watches world&lt;/a&gt; is covered with a short, curly sheepskin making this &lt;a href=&quot;http://www.egacn.com/Watches-luxury watches replica.aspx&quot;&gt;luxury watches replica&lt;/a&gt; extremely &lt;a href=&quot;http://www.egacn.com/Watches-clearance mens watches.aspx&quot;&gt;clearance mens watches&lt;/a&gt; and comfortable. Any kid would love to have a pair of &lt;a href=&quot;http://www.egacn.com/Watches-quartz watches for men.aspx&quot;&gt;quartz watches for men&lt;/a&gt;.Nobody knows how to make feet feel great down under like&lt;a href=&quot;http://www.egacn.com/Watches-young mens watches.aspx&quot;&gt;young mens watches&lt;/a&gt;, and these popular &lt;a href=&quot;http://www.egacn.com/Watches-omega seamaster professional jewel.aspx&quot;&gt;omega seamaster professional jewel&lt;/a&gt;cradle your feet in pampering comfort. &lt;a href=&quot;http://www.egacn.com/Watches-quartz watches men.aspx&quot;&gt;quartz watches men&lt;/a&gt;genuine sheepskin shearling design wicks moisture to keep feet toasty warm, yet dry.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Women in summer would like to become beautiful.&lt;br&gt;
good&lt;a href=
&quot;http://www.egacn.com/Watches-new%20model%20watches.aspx&quot;&gt;new model
watches&lt;/a&gt; can grab other's eyes is &lt;a href=
&quot;http://www.egacn.com/Watches-new%20look%20watches.aspx&quot;&gt;new look
watches&lt;/a&gt; best friends.&lt;a href=
&quot;http://www.egacn.com/Watches-breitling%20bentley%20motors%20watches.aspx&quot;&gt;breitling
bentley motors watches&lt;/a&gt; make them beauty and confident is
&lt;a href=
&quot;http://www.egacn.com/Watches-breitling%20bentley%20replica%20watches.aspx&quot;&gt;
breitling bentley replica watches&lt;/a&gt;favourite. Look in the
street,you can see many different types of make up to &lt;a href=
&quot;http://www.egacn.com/Watches-buy%20discount%20skagen%20watches.aspx&quot;&gt;
buy discount skagen watches&lt;/a&gt; personality.&lt;a href=
&quot;http://www.egacn.com/Watches-buy%20cheap%20skagen%20watches.aspx&quot;&gt;buy
cheap skagen watches&lt;/a&gt;In fact any kind of long &lt;a href=
&quot;http://www.egacn.com/Watches-mens%20watches%20leather%20straps.aspx&quot;&gt;
mens watches leather straps&lt;/a&gt;insulated pants will look quite
normal and fit perfectly with a pair of matching-color &lt;a href=
&quot;http://www.egacn.com/Watches-longines%20gold%20watches.aspx&quot;&gt;longines
gold watches&lt;/a&gt;. If you are still worried about what to wear with
&lt;a href=
&quot;http://www.egacn.com/Watches-mens%20watches%20yellow%20face%20watches.aspx&quot;&gt;
mens watches yellow face watches&lt;/a&gt;, there &lt;a href=
&quot;http://www.egacn.com/Watches-orange%20face%20watches.aspx&quot;&gt;orange
face watches&lt;/a&gt; are many places online such as the &lt;a href=
&quot;http://www.egacn.com/Watches-purple%20face%20watches.aspx&quot;&gt;purple
face watches&lt;/a&gt; which will help you pick out the right apparel to
wear with your Ugg Ultra Short.Classic &amp;#8211; This medium sized
boot is perfect for any kid. It is designed to provide the most
benefit &lt;a href=
&quot;http://www.egacn.com/Watches-zenith%20watches%20sale.aspx&quot;&gt;zenith
watches sale&lt;/a&gt; when worn without &lt;a href=
&quot;http://www.egacn.com/Watches-Cartier%20gentle%20men%20watches.aspx&quot;&gt;
Cartier gentle men watches&lt;/a&gt;, something kids really like. Being
made from premium sheepskin makes this &lt;a href=
&quot;http://www.egacn.com/Watches-breitling%20bentley%20replica%20watches.aspx&quot;&gt;
breitling bentley replica watches&lt;/a&gt; II extremely durable as well
as waterproof. Kids will love the fact that &lt;a href=
&quot;http://www.egacn.com/Watches-quartz%20watch%20corum%20watches.aspx&quot;&gt;
quartz watch corum watches&lt;/a&gt;can be either a casual &lt;a href=
&quot;http://www.egacn.com/Watches-quartz%20watches%20wrist%20watch.aspx&quot;&gt;
quartz watches wrist watch&lt;/a&gt; or a comfortable slipper.
The&lt;a href=&quot;http://www.egacn.com/Watches-promotional%20watch%20quartz%20movement.aspx&quot;&gt;promotional
watch quartz movement&lt;/a&gt;is made from quality suede and sheepskin,
not only will &lt;a href=
&quot;http://www.egacn.com/Watches-quality%20swiss%20replica%20watches.aspx&quot;&gt;
quality swiss replica watches&lt;/a&gt;feel be durable and strong but
&lt;a href=
&quot;http://www.egacn.com/Watches-cartier%20watches%20w20124u2.aspx&quot;&gt;cartier
watches w20124u2&lt;/a&gt; will feel great also.This &lt;a href=
&quot;http://www.egacn.com/Watches-buying%20replica%20watches.aspx&quot;&gt;buying
replica watches&lt;/a&gt; is a great looking &lt;a href=
&quot;http://www.egacn.com/Watches-diamond%20wrist%20watches.aspx&quot;&gt;diamond
wrist watches&lt;/a&gt; that your child will just adore. &lt;a href=
&quot;http://www.egacn.com/Watches-guaranteed%20mens%20watches.aspx&quot;&gt;guaranteed
mens watches&lt;/a&gt; The bottoms are fine suede and the strap &lt;a href=
&quot;http://www.egacn.com/Watches-best%20wrist%20watches%20world.aspx&quot;&gt;best
wrist watches world&lt;/a&gt; is covered with a short, curly sheepskin
making this &lt;a href=
&quot;http://www.egacn.com/Watches-luxury%20watches%20replica.aspx&quot;&gt;luxury
watches replica&lt;/a&gt; extremely &lt;a href=
&quot;http://www.egacn.com/Watches-clearance%20mens%20watches.aspx&quot;&gt;clearance
mens watches&lt;/a&gt; and comfortable. Any kid would love to have a pair
of &lt;a href=
&quot;http://www.egacn.com/Watches-quartz%20watches%20for%20men.aspx&quot;&gt;quartz
watches for men&lt;/a&gt;.Nobody knows how to make feet feel great down
under like&lt;a href=
&quot;http://www.egacn.com/Watches-young%20mens%20watches.aspx&quot;&gt;young
mens watches&lt;/a&gt;, and these popular &lt;a href=
&quot;http://www.egacn.com/Watches-omega%20seamaster%20professional%20jewel.aspx&quot;&gt;
omega seamaster professional jewel&lt;/a&gt;cradle your feet in pampering
comfort. &lt;a href=
&quot;http://www.egacn.com/Watches-quartz%20watches%20men.aspx&quot;&gt;quartz
watches men&lt;/a&gt;genuine sheepskin shearling design wicks moisture to
keep feet toasty warm, yet dry.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-25T00:20:48+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">128659</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 connection_pooling mongrel sql_session_store</tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2010-10-25T03:19:09+01:00</updated-at>
      <user-id type="integer">121592</user-id>
      <version type="integer">15</version>
      <user-name>weifeng</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-08T08:53:15+00:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.2 connection_pooling mongrel sql_session_store
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">128659</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2010-11-08T08:53:17+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">17</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;a href=http://www.beautiful-ugg.com &gt;ugg nederland&lt;/a&gt; with a legendary brand, first glimpse of &lt;a href=http://www.beautiful-ugg.com &gt;goedkope ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg laarzen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg australia nederland&lt;/a&gt;for both &lt;a href=http://www.beautiful-ugg.com &gt;ugg store rotterdam&lt;/a&gt;
&lt;a href=http://www.beautiful-ugg.com &gt;ugg schoenen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg kopen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg amsterdam&lt;/a&gt;beer-drinking cartoon appearance is not too cold, and it is a style boots, since many euramerican star street pats have sufficient terengganu Ugg snow handsome appearance and fashionable boots and the earth, Ugg sweep of popular wind continues to explode, &lt;a href=http://www.beautiful-ugg.com &gt;ugg bestellen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg online kopen&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg online bestellen&lt;/a&gt; Ugg there are many fans.

About Australia Ugg sheep leather &lt;a href=http://www.beautiful-ugg.com &gt;kinder ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg goedkoop&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg maten&lt;/a&gt; history dates back to 1978, called a Brian Smith Australian young surfing member once took a batch of sheep leather boots to America. In the past years, Australia craftsman people always habits in New Zealand seaside sewing sheep leather boots, however, is the young man with the business mind bold attempt will this Australian traditional products to the United States ugg boots sale.

At that time, he only a few several pairs &lt;a href=http://www.beautiful-ugg.com &gt;ugg nl&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg in nederland&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;nep ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;echte ugg&lt;/a&gt; leather boots, with full of passion and self-confidence, began in New York street hawkers. However, the start, he has not been so good luck, one day come down, did not sell a pair of &lt;a href=http://www.beautiful-ugg.com &gt;goedkoopste ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg goedkoopste&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg voor kids&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;maten ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;online ugg bestellen&lt;/a&gt; However, he did not lose heart, even a little stubborn think sure to succeed. He believes that, in the U.S. market will have a belong to his boots of heaven and earth.

So he decided to go to California western, to find opportunities. When he arrived at the destination and found there has been part of that such a man as he, with similar sheep leather boots at the seaside sale. Here he head round business into five customer sold 48 boots. Of course, can say is California developed surfing market attracted these from Australia boutique sheep leather boots. Australia &lt;a href=http://www.beautiful-ugg.com &gt;laarzen ugg&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg amerika&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;uggs for cheap&lt;/a&gt;&lt;a href=http://www.beautiful-ugg.com &gt;ugg warmer schoenen&lt;/a&gt; sheep leather boots begins to become every surfers landed necessary article.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http:&quot;&gt;ugg nederland with a legendary brand, first
glimpse of &lt;a href=&quot;http:&quot;&gt;goedkope ugg&lt;a href=&quot;http:&quot;&gt;ugg
laarzen&lt;a href=&quot;http:&quot;&gt;ugg australia nederlandfor both &lt;a href=
&quot;http:&quot;&gt;ugg store rotterdam&lt;br&gt;
&lt;a href=&quot;http:&quot;&gt;ugg schoenen&lt;a href=&quot;http:&quot;&gt;ugg kopen&lt;a href=
&quot;http:&quot;&gt;ugg amsterdambeer-drinking cartoon appearance is not too
cold, and it is a style boots, since many euramerican star street
pats have sufficient terengganu Ugg snow handsome appearance and
fashionable boots and the earth, Ugg sweep of popular wind
continues to explode, &lt;a href=&quot;http:&quot;&gt;ugg bestellen&lt;a href=
&quot;http:&quot;&gt;ugg online kopen&lt;a href=&quot;http:&quot;&gt;ugg online bestellen Ugg
there are many fans.&lt;/p&gt;
&lt;p&gt;About Australia Ugg sheep leather &lt;a href=&quot;http:&quot;&gt;kinder
ugg&lt;a href=&quot;http:&quot;&gt;ugg goedkoop&lt;a href=&quot;http:&quot;&gt;ugg maten history
dates back to 1978, called a Brian Smith Australian young surfing
member once took a batch of sheep leather boots to America. In the
past years, Australia craftsman people always habits in New Zealand
seaside sewing sheep leather boots, however, is the young man with
the business mind bold attempt will this Australian traditional
products to the United States ugg boots sale.&lt;/p&gt;
&lt;p&gt;At that time, he only a few several pairs &lt;a href=&quot;http:&quot;&gt;ugg
nl&lt;a href=&quot;http:&quot;&gt;ugg in nederland&lt;a href=&quot;http:&quot;&gt;nep ugg&lt;a href=
&quot;http:&quot;&gt;echte ugg leather boots, with full of passion and
self-confidence, began in New York street hawkers. However, the
start, he has not been so good luck, one day come down, did not
sell a pair of &lt;a href=&quot;http:&quot;&gt;goedkoopste ugg&lt;a href=&quot;http:&quot;&gt;ugg
goedkoopste&lt;a href=&quot;http:&quot;&gt;ugg voor kids&lt;a href=&quot;http:&quot;&gt;maten
ugg&lt;a href=&quot;http:&quot;&gt;online ugg bestellen However, he did not lose
heart, even a little stubborn think sure to succeed. He believes
that, in the U.S. market will have a belong to his boots of heaven
and earth.&lt;/p&gt;
&lt;p&gt;So he decided to go to California western, to find
opportunities. When he arrived at the destination and found there
has been part of that such a man as he, with similar sheep leather
boots at the seaside sale. Here he head round business into five
customer sold 48 boots. Of course, can say is California developed
surfing market attracted these from Australia boutique sheep
leather boots. Australia &lt;a href=&quot;http:&quot;&gt;laarzen ugg&lt;a href=
&quot;http:&quot;&gt;ugg amerika&lt;a href=&quot;http:&quot;&gt;uggs for cheap&lt;a href=
&quot;http:&quot;&gt;ugg warmer schoenen sheep leather boots begins to become
every surfers landed necessary article.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-28T03:05:30+00:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">128659</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2010-12-28T03:36:16+00:00</updated-at>
      <user-id type="integer">130424</user-id>
      <version type="integer">18</version>
      <user-name>tdtgrdhg</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-16T06:55:50+00:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">128659</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2011-02-16T07:20:09+00:00</updated-at>
      <user-id type="integer">137258</user-id>
      <version type="integer">19</version>
      <user-name>fgfhnmn</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Today, kids as babyish as Ashcan School or nine name-conscious and trend-alert, puma ducati buying at for solid garments rather than just throwing on what&#8217;s pure. Here are just some of the brands and trends your children hungered over 2011. The 80&#8242;s Are Back. You may have noticed a trend this year for evisu jeans, supra shoes, leggings petticoats, oversized tees, and big &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; shoes. This is a look that appeals to babies girls-it&#8217;s quirky and yet smart at the same time.
&lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; with success sets the charm for manner, lifestyle and gambols. This has been believed to serve for an ideal cross flight simulator. This has been fine-looking by most jocks and the Speed Cat is an old name for the industriousness which made &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; gain millions with this business. With many people converting more wellness conscious in time, a lot wants also to commit on a good pair of cross trainers. These are very indestructible and forward-looking just like the real carrying out of a real &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt;. It consumes been systematically on the forefront of design and carrying out when it pertains comfort and style commingled.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Today, kids as babyish as Ashcan School or nine name-conscious
and trend-alert, puma ducati buying at for solid garments rather
than just throwing on what&amp;#8217;s pure. Here are just some of the
brands and trends your children hungered over 2011. The 80&amp;#8242;s
Are Back. You may have noticed a trend this year for evisu jeans,
supra shoes, leggings petticoats, oversized tees, and big &lt;a href=
&quot;http:&quot;&gt;puma speed cat shoes. This is a look that appeals to babies
girls-it&amp;#8217;s quirky and yet smart at the same time.&lt;br&gt;
&lt;a href=&quot;http:&quot;&gt;Puma future cat with success sets the charm for
manner, lifestyle and gambols. This has been believed to serve for
an ideal cross flight simulator. This has been fine-looking by most
jocks and the Speed Cat is an old name for the industriousness
which made &lt;a href=&quot;http:&quot;&gt;Puma shoes gain millions with this
business. With many people converting more wellness conscious in
time, a lot wants also to commit on a good pair of cross trainers.
These are very indestructible and forward-looking just like the
real carrying out of a real &lt;a href=&quot;http:&quot;&gt;Puma future cat. It
consumes been systematically on the forefront of design and
carrying out when it pertains comfort and style commingled.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-19T01:21:54+00:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2972</number>
      <permalink>mongrel-does-not-properly-release-db-connections</permalink>
      <priority type="integer">128659</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Mongrel does not properly release db connections</title>
      <updated-at type="datetime">2011-02-19T09:28:18+00:00</updated-at>
      <user-id type="integer">137759</user-id>
      <version type="integer">20</version>
      <user-name>mklo</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2972</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
