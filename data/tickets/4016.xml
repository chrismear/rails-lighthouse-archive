<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-02-21T02:04:47+00:00</created-at>
  <creator-id type="integer">27508</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4016</number>
  <permalink>railsroot-returns-nil-before-app-initialization-silently-breaking-some-gems</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>3.0</tag>
  <title>Rails.root returns nil before app initialization, silently breaking some gems</title>
  <updated-at type="datetime">2010-02-25T00:33:57+00:00</updated-at>
  <user-id type="integer">27508</user-id>
  <version type="integer">6</version>
  <user-name>codesnik</user-name>
  <creator-name>codesnik</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4016</url>
  <priority-name nil="true"></priority-name>
  <original-body>While updating thinking-sphinx gem to work with rails 3.0, I've noticed that it got wrong paths for its configuration files, like absolute &quot;/config/..&quot;, &quot;/db/...&quot; instead of relative &quot;#{Rails.root}/config&quot;. 

Problem is, in rails 2.x gems were required after Rails.root is initialized. And default rails 3.0 application generator uses Bundler, and auto-requires all gems before application initialization. That problem could be easily solved with &quot;gem 'problem-gem', :require =&gt; false&quot; in Gemfile, and separate &quot;require 'problem-gem'&quot; in initializer, but it's annoyingly hard to track such a bug.

I'm pretty sure many other rails dependent gems check for defined?(Rails) but do not check for Rails.root.nil?, and use it blindly in paths calculation

there's a method in module Rails:

@@@ ruby
    def root
      application &amp;&amp; application.config.root
    end
@@@

it seems to me that it shouldn't just silently return &quot;nil&quot; before application initialization,  but rather throw some exception with a helpful message. What do you think?

And what is a new standard method for rails dependent gem initialization? Should it go in custom config/initializers/...rb, or put int config/application.rb itself?

I'll make a patch if this is a way to go.</original-body>
  <latest-body>While updating thinking-sphinx gem to work with rails 3.0, I've noticed that it got wrong paths for its configuration files, like absolute &quot;/config/..&quot;, &quot;/db/...&quot; instead of relative &quot;#{Rails.root}/config&quot;. 

Problem is, in rails 2.x gems were required after Rails.root is initialized. And default rails 3.0 application generator uses Bundler, and auto-requires all gems before application initialization. That problem could be easily solved with &quot;gem 'problem-gem', :require =&gt; false&quot; in Gemfile, and separate &quot;require 'problem-gem'&quot; in initializer, but it's annoyingly hard to track such a bug.

I'm pretty sure many other rails dependent gems check for defined?(Rails) but do not check for Rails.root.nil?, and use it blindly in paths calculation

there's a method in module Rails:

@@@ ruby
    def root
      application &amp;&amp; application.config.root
    end
@@@

it seems to me that it shouldn't just silently return &quot;nil&quot; before application initialization,  but rather throw some exception with a helpful message. What do you think?

And what is a new standard method for rails dependent gem initialization? Should it go in custom config/initializers/...rb, or put int config/application.rb itself?

I'll make a patch if this is a way to go.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;While updating thinking-sphinx gem to work with rails 3.0, I've
noticed that it got wrong paths for its configuration files, like
absolute &quot;/config/..&quot;, &quot;/db/...&quot; instead of relative
&quot;#{Rails.root}/config&quot;.&lt;/p&gt;
&lt;p&gt;Problem is, in rails 2.x gems were required after Rails.root is
initialized. And default rails 3.0 application generator uses
Bundler, and auto-requires all gems before application
initialization. That problem could be easily solved with &quot;gem
'problem-gem', :require =&amp;gt; false&quot; in Gemfile, and separate
&quot;require 'problem-gem'&quot; in initializer, but it's annoyingly hard to
track such a bug.&lt;/p&gt;
&lt;p&gt;I'm pretty sure many other rails dependent gems check for
defined?(Rails) but do not check for Rails.root.nil?, and use it
blindly in paths calculation&lt;/p&gt;
&lt;p&gt;there's a method in module Rails:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    def root
      application &amp;amp;&amp;amp; application.config.root
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;it seems to me that it shouldn't just silently return &quot;nil&quot;
before application initialization, but rather throw some exception
with a helpful message. What do you think?&lt;/p&gt;
&lt;p&gt;And what is a new standard method for rails dependent gem
initialization? Should it go in custom config/initializers/...rb,
or put int config/application.rb itself?&lt;/p&gt;
&lt;p&gt;I'll make a patch if this is a way to go.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>While updating thinking-sphinx gem to work with rails 3.0, I've noticed that it got wrong paths for its configuration files, like absolute &quot;/config/..&quot;, &quot;/db/...&quot; instead of relative &quot;#{Rails.root}/config&quot;. 

Problem is, in rails 2.x gems were required after Rails.root is initialized. And default rails 3.0 application generator uses Bundler, and auto-requires all gems before application initialization. That problem could be easily solved with &quot;gem 'problem-gem', :require =&gt; false&quot; in Gemfile, and separate &quot;require 'problem-gem'&quot; in initializer, but it's annoyingly hard to track such a bug.

I'm pretty sure many other rails dependent gems check for defined?(Rails) but do not check for Rails.root.nil?, and use it blindly in paths calculation

there's a method in module Rails:

@@@ ruby
    def root
      application &amp;&amp; application.config.root
    end
@@@

it seems to me that it shouldn't just silently return &quot;nil&quot; before application initialization,  but rather throw some exception with a helpful message. What do you think?

And what is a new standard method for rails dependent gem initialization? Should it go in custom config/initializers/...rb, or put int config/application.rb itself?

I'll make a patch if this is a way to go.</body>
      <body-html>&lt;div&gt;&lt;p&gt;While updating thinking-sphinx gem to work with rails 3.0, I've
noticed that it got wrong paths for its configuration files, like
absolute &quot;/config/..&quot;, &quot;/db/...&quot; instead of relative
&quot;#{Rails.root}/config&quot;.&lt;/p&gt;
&lt;p&gt;Problem is, in rails 2.x gems were required after Rails.root is
initialized. And default rails 3.0 application generator uses
Bundler, and auto-requires all gems before application
initialization. That problem could be easily solved with &quot;gem
'problem-gem', :require =&amp;gt; false&quot; in Gemfile, and separate
&quot;require 'problem-gem'&quot; in initializer, but it's annoyingly hard to
track such a bug.&lt;/p&gt;
&lt;p&gt;I'm pretty sure many other rails dependent gems check for
defined?(Rails) but do not check for Rails.root.nil?, and use it
blindly in paths calculation&lt;/p&gt;
&lt;p&gt;there's a method in module Rails:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    def root
      application &amp;amp;&amp;amp; application.config.root
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;it seems to me that it shouldn't just silently return &quot;nil&quot;
before application initialization, but rather throw some exception
with a helpful message. What do you think?&lt;/p&gt;
&lt;p&gt;And what is a new standard method for rails dependent gem
initialization? Should it go in custom config/initializers/...rb,
or put int config/application.rb itself?&lt;/p&gt;
&lt;p&gt;I'll make a patch if this is a way to go.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-21T02:04:47+00:00</created-at>
      <creator-id type="integer">27508</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4016</number>
      <permalink>railsroot-returns-nil-before-app-initialization-silently-breaking-some-gems</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0</tag>
      <title>Rails.root returns nil before app initialization, silently breaking some gems</title>
      <updated-at type="datetime">2010-02-21T02:04:49+00:00</updated-at>
      <user-id type="integer">27508</user-id>
      <version type="integer">1</version>
      <user-name>codesnik</user-name>
      <creator-name>codesnik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4016</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>seems that #4009 addresses the same issue and has a patch. Still, raising exception could make sense</body>
      <body-html>&lt;div&gt;&lt;p&gt;seems that &lt;a href=&quot;/projects/8994/tickets/4009&quot; title=
&quot;Ticket #4009&quot;&gt;#4009&lt;/a&gt; addresses the same issue and has a patch.
Still, raising exception could make sense&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-21T02:11:11+00:00</created-at>
      <creator-id type="integer">27508</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4016</number>
      <permalink>railsroot-returns-nil-before-app-initialization-silently-breaking-some-gems</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0</tag>
      <title>Rails.root returns nil before app initialization, silently breaking some gems</title>
      <updated-at type="datetime">2010-02-21T02:11:14+00:00</updated-at>
      <user-id type="integer">27508</user-id>
      <version type="integer">2</version>
      <user-name>codesnik</user-name>
      <creator-name>codesnik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4016</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If thinking-sphinx requires Rails.root to be set, it needs to create a Rails::Railtie for it and setup the proper initializers. I don't think Rails.root should raise an error. It's ok for it to be nil until it's set.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If thinking-sphinx requires Rails.root to be set, it needs to
create a Rails::Railtie for it and setup the proper initializers. I
don't think Rails.root should raise an error. It's ok for it to be
nil until it's set.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-21T11:51:59+00:00</created-at>
      <creator-id type="integer">27508</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4016</number>
      <permalink>railsroot-returns-nil-before-app-initialization-silently-breaking-some-gems</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0</tag>
      <title>Rails.root returns nil before app initialization, silently breaking some gems</title>
      <updated-at type="datetime">2010-02-21T11:52:00+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">3</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>codesnik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4016</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>thank you. is there any guide for upgrading gems to rails3, where this
change is explicitly stated? And if not an exception, maybe some
deprecation warning would work. If some gem requests Rails.root before
it is set, it is an error, for sure, and it is a pretty common error.
And it could be dangerous.

I've managed to spend a half of a hour with debugger trying to
understand what's going on, and still didn't get that I need to create
Rails::Railtie for it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;thank you. is there any guide for upgrading gems to rails3,
where this&lt;br&gt;
change is explicitly stated? And if not an exception, maybe
some&lt;br&gt;
deprecation warning would work. If some gem requests Rails.root
before&lt;br&gt;
it is set, it is an error, for sure, and it is a pretty common
error.&lt;br&gt;
And it could be dangerous.&lt;/p&gt;
&lt;p&gt;I've managed to spend a half of a hour with debugger trying
to&lt;br&gt;
understand what's going on, and still didn't get that I need to
create&lt;br&gt;
Rails::Railtie for it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-21T15:46:21+00:00</created-at>
      <creator-id type="integer">27508</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4016</number>
      <permalink>railsroot-returns-nil-before-app-initialization-silently-breaking-some-gems</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0</tag>
      <title>Rails.root returns nil before app initialization, silently breaking some gems</title>
      <updated-at type="datetime">2010-02-21T15:46:23+00:00</updated-at>
      <user-id type="integer">27508</user-id>
      <version type="integer">4</version>
      <user-name>codesnik</user-name>
      <creator-name>codesnik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4016</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Maybe Rails should provide to gems a hook to defer actions after Application is defined. Meanwhile above workaround is not a too bad solution.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Maybe Rails should provide to gems a hook to defer actions after
Application is defined. Meanwhile above workaround is not a too bad
solution.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-25T00:27:11+00:00</created-at>
      <creator-id type="integer">27508</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4016</number>
      <permalink>railsroot-returns-nil-before-app-initialization-silently-breaking-some-gems</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0</tag>
      <title>Rails.root returns nil before app initialization, silently breaking some gems</title>
      <updated-at type="datetime">2010-02-25T00:27:16+00:00</updated-at>
      <user-id type="integer">41316</user-id>
      <version type="integer">5</version>
      <user-name>macario</user-name>
      <creator-name>codesnik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4016</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>any gem's custom Rails::Railtie subclass provides such a hook.
What I didn't get is how can I fix such a gem, not breaking rails2 compatibility. Maybe check for defined?(Rails::Railtie)..</body>
      <body-html>&lt;div&gt;&lt;p&gt;any gem's custom Rails::Railtie subclass provides such a
hook.&lt;br&gt;
What I didn't get is how can I fix such a gem, not breaking rails2
compatibility. Maybe check for defined?(Rails::Railtie)..&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-25T00:33:56+00:00</created-at>
      <creator-id type="integer">27508</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4016</number>
      <permalink>railsroot-returns-nil-before-app-initialization-silently-breaking-some-gems</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0</tag>
      <title>Rails.root returns nil before app initialization, silently breaking some gems</title>
      <updated-at type="datetime">2010-02-25T00:33:57+00:00</updated-at>
      <user-id type="integer">27508</user-id>
      <version type="integer">6</version>
      <user-name>codesnik</user-name>
      <creator-name>codesnik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4016</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
