<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-01-04T16:24:45+00:00</created-at>
  <creator-id type="integer">10014</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3339</number>
  <permalink>giving-same-association-in-include-and-join-can-result-in-table-being-joined-twice</permalink>
  <priority type="integer">158619</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>2-3-stable activerecord associations eager_loading include join preload</tag>
  <title>Giving same association in :include and :join can result in table being joined twice</title>
  <updated-at type="datetime">2011-04-05T01:01:17+01:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">9</version>
  <user-name>rails</user-name>
  <creator-name>James Le Cuirot</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3339</url>
  <priority-name nil="true"></priority-name>
  <original-body>This is a bit of a corner case. Try and wrap your head around it.

If you give the same association in both :include and :join for a find then, as per ticket #528, this forces preloading where eager loading might have otherwise been used... only this is not entirely true! One of AR's limitations is that for any given bunch of associations, it'll try to preload them all but if it can't, it'll eager load them all instead. It does not consider each association for preloading independently.

Consequently, if you give an association in both :include and :join but some other association requires eager loading then both of the associations will be eager loaded. The problem with this is that eager loading doesn't check for any overlay between the given includes and joins and thus the table gets joined twice. ERROR!

This begs the question, why would you specify an association in both when you know it's just going to get eager loaded anyway? In my case, I have a scope where I always do a comparison on some association (join) but only sometimes I want to also include that association (include). Strictly speaking, that scope should not have to determine whether to use :join or :include by itself.

I do like to do the right thing where possible but it's easy to work around in my application and the proper fix could be a little messy. add_joins! needs to filter the given joins based on which associations are being eagerly loaded. But if :join or :include is a hash... hmm. Feel free to tackle this one if you're bored!</original-body>
  <latest-body>This is a bit of a corner case. Try and wrap your head around it.

If you give the same association in both :include and :join for a find then, as per ticket #528, this forces preloading where eager loading might have otherwise been used... only this is not entirely true! One of AR's limitations is that for any given bunch of associations, it'll try to preload them all but if it can't, it'll eager load them all instead. It does not consider each association for preloading independently.

Consequently, if you give an association in both :include and :join but some other association requires eager loading then both of the associations will be eager loaded. The problem with this is that eager loading doesn't check for any overlay between the given includes and joins and thus the table gets joined twice. ERROR!

This begs the question, why would you specify an association in both when you know it's just going to get eager loaded anyway? In my case, I have a scope where I always do a comparison on some association (join) but only sometimes I want to also include that association (include). Strictly speaking, that scope should not have to determine whether to use :join or :include by itself.

I do like to do the right thing where possible but it's easy to work around in my application and the proper fix could be a little messy. add_joins! needs to filter the given joins based on which associations are being eagerly loaded. But if :join or :include is a hash... hmm. Feel free to tackle this one if you're bored!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is a bit of a corner case. Try and wrap your head around
it.&lt;/p&gt;
&lt;p&gt;If you give the same association in both :include and :join for
a find then, as per ticket &lt;a href=&quot;/projects/8994/tickets/528&quot;
title=&quot;Ticket #528&quot;&gt;#528&lt;/a&gt;, this forces preloading where eager
loading might have otherwise been used... only this is not entirely
true! One of AR's limitations is that for any given bunch of
associations, it'll try to preload them all but if it can't, it'll
eager load them all instead. It does not consider each association
for preloading independently.&lt;/p&gt;
&lt;p&gt;Consequently, if you give an association in both :include and
:join but some other association requires eager loading then both
of the associations will be eager loaded. The problem with this is
that eager loading doesn't check for any overlay between the given
includes and joins and thus the table gets joined twice. ERROR!&lt;/p&gt;
&lt;p&gt;This begs the question, why would you specify an association in
both when you know it's just going to get eager loaded anyway? In
my case, I have a scope where I always do a comparison on some
association (join) but only sometimes I want to also include that
association (include). Strictly speaking, that scope should not
have to determine whether to use :join or :include by itself.&lt;/p&gt;
&lt;p&gt;I do like to do the right thing where possible but it's easy to
work around in my application and the proper fix could be a little
messy. add_joins! needs to filter the given joins based on which
associations are being eagerly loaded. But if :join or :include is
a hash... hmm. Feel free to tackle this one if you're bored!&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is a bit of a corner case. Try and wrap your head around it.

If you give the same association in both :include and :join for a find then, as per ticket #528, this forces preloading where eager loading might have otherwise been used... only this is not entirely true! One of AR's limitations is that for any given bunch of associations, it'll try to preload them all but if it can't, it'll eager load them all instead. It does not consider each association for preloading independently.

Consequently, if you give an association in both :include and :join but some other association requires eager loading then both of the associations will be eager loaded. The problem with this is that eager loading doesn't check for any overlap between the given includes and joins and thus the table gets joined twice. ERROR!

This begs the question, why would you specify an association in both when you know it's just going to get eager loaded anyway? In my case, I have a scope where I always do a comparison on some association (join) but only sometimes I want to also include that association (include). Strictly speaking, that scope should not have to determine whether to use :join or :include by itself.

I do like to do the right thing where possible but it's easy to work around in my application and the proper fix could be a little messy. add_joins! needs to filter the given joins based on which associations are being eagerly loaded. But if :join or :include is a hash... hmm. Feel free to tackle this one if you're bored!</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is a bit of a corner case. Try and wrap your head around
it.&lt;/p&gt;
&lt;p&gt;If you give the same association in both :include and :join for
a find then, as per ticket &lt;a href=&quot;/projects/8994/tickets/528&quot;
title=&quot;Ticket #528&quot;&gt;#528&lt;/a&gt;, this forces preloading where eager
loading might have otherwise been used... only this is not entirely
true! One of AR's limitations is that for any given bunch of
associations, it'll try to preload them all but if it can't, it'll
eager load them all instead. It does not consider each association
for preloading independently.&lt;/p&gt;
&lt;p&gt;Consequently, if you give an association in both :include and
:join but some other association requires eager loading then both
of the associations will be eager loaded. The problem with this is
that eager loading doesn't check for any overlap between the given
includes and joins and thus the table gets joined twice. ERROR!&lt;/p&gt;
&lt;p&gt;This begs the question, why would you specify an association in
both when you know it's just going to get eager loaded anyway? In
my case, I have a scope where I always do a comparison on some
association (join) but only sometimes I want to also include that
association (include). Strictly speaking, that scope should not
have to determine whether to use :join or :include by itself.&lt;/p&gt;
&lt;p&gt;I do like to do the right thing where possible but it's easy to
work around in my application and the proper fix could be a little
messy. add_joins! needs to filter the given joins based on which
associations are being eagerly loaded. But if :join or :include is
a hash... hmm. Feel free to tackle this one if you're bored!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-06T22:10:01+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3339</number>
      <permalink>giving-same-association-in-include-and-join-can-result-in-table-being-joined-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activerecord associations eager_loading include join preload</tag>
      <title>Giving same association in :include and :join can result in table being joined twice</title>
      <updated-at type="datetime">2009-10-06T22:12:13+01:00</updated-at>
      <user-id type="integer">10014</user-id>
      <version type="integer">1</version>
      <user-name>James Le Cuirot</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3339</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi John, 

Can you give us a more concrete example. And if possible a failing test.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi John,&lt;/p&gt;
&lt;p&gt;Can you give us a more concrete example. And if possible a
failing test.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-13T04:52:30+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3339</number>
      <permalink>giving-same-association-in-include-and-join-can-result-in-table-being-joined-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activerecord associations eager_loading include join preload</tag>
      <title>Giving same association in :include and :join can result in table being joined twice</title>
      <updated-at type="datetime">2010-04-13T04:52:34+01:00</updated-at>
      <user-id type="integer">39626</user-id>
      <version type="integer">2</version>
      <user-name>Rishav Rastogi</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3339</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry for the delay. Here's a failing test case.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry for the delay. Here's a failing test case.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-06T17:18:37+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3339</number>
      <permalink>giving-same-association-in-include-and-join-can-result-in-table-being-joined-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activerecord associations eager_loading include join preload</tag>
      <title>Giving same association in :include and :join can result in table being joined twice</title>
      <updated-at type="datetime">2010-06-06T17:18:55+01:00</updated-at>
      <user-id type="integer">10014</user-id>
      <version type="integer">3</version>
      <user-name>James Le Cuirot</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3339</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Actually, as my test case highlights, my original description falls short. You don't even need to specify a  second association, merely requiring eager loading for the first association is sufficient to trigger the error.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Actually, as my test case highlights, my original description
falls short. You don't even need to specify a second association,
merely requiring eager loading for the first association is
sufficient to trigger the error.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-06T17:22:52+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3339</number>
      <permalink>giving-same-association-in-include-and-join-can-result-in-table-being-joined-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activerecord associations eager_loading include join preload</tag>
      <title>Giving same association in :include and :join can result in table being joined twice</title>
      <updated-at type="datetime">2010-06-06T17:22:53+01:00</updated-at>
      <user-id type="integer">10014</user-id>
      <version type="integer">4</version>
      <user-name>James Le Cuirot</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3339</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ignore my last comment. Due to a typo in the test case (author vs authors), I confused myself. My original post was correct.

This has become a bigger problem in my application so I've gone ahead and fixed it. Here is a patch with the fix and an updated test case. I suspect that this will also affect Rails 3 but until I'm ready to migrate my application, I won't have time to look at that. I haven't even looked at the basics of AREL yet.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ignore my last comment. Due to a typo in the test case (author
vs authors), I confused myself. My original post was correct.&lt;/p&gt;
&lt;p&gt;This has become a bigger problem in my application so I've gone
ahead and fixed it. Here is a patch with the fix and an updated
test case. I suspect that this will also affect Rails 3 but until
I'm ready to migrate my application, I won't have time to look at
that. I haven't even looked at the basics of AREL yet.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-13T16:40:00+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3339</number>
      <permalink>giving-same-association-in-include-and-join-can-result-in-table-being-joined-twice</permalink>
      <priority type="integer">158619</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activerecord associations eager_loading include join preload</tag>
      <title>Giving same association in :include and :join can result in table being joined twice</title>
      <updated-at type="datetime">2010-09-13T16:40:04+01:00</updated-at>
      <user-id type="integer">10014</user-id>
      <version type="integer">5</version>
      <user-name>James Le Cuirot</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3339</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've realised that this fix does not encompass the count method. There is already a fix for a similar problem here as a result of ticket #302. This does not cover my use case though. I've managed to make the two work together but it involves calling add_joins! twice, which is a little odd. I think my newer fix may be able to replace the older one but I'd need to speak to those responsible.

My question to them is, is it actually necessary to have the separate aliased join? Can we not just avoid the second join in the first place and use the existing one instead? That is what my fix would do. The only caveat is that my code doesn't handle raw join strings, only joins generated through associations.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've realised that this fix does not encompass the count method.
There is already a fix for a similar problem here as a result of
ticket &lt;a href=&quot;/projects/8994/tickets/302&quot; title=
&quot;Ticket #302&quot;&gt;#302&lt;/a&gt;. This does not cover my use case though.
I've managed to make the two work together but it involves calling
add_joins! twice, which is a little odd. I think my newer fix may
be able to replace the older one but I'd need to speak to those
responsible.&lt;/p&gt;
&lt;p&gt;My question to them is, is it actually necessary to have the
separate aliased join? Can we not just avoid the second join in the
first place and use the existing one instead? That is what my fix
would do. The only caveat is that my code doesn't handle raw join
strings, only joins generated through associations.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-16T16:16:35+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3339</number>
      <permalink>giving-same-association-in-include-and-join-can-result-in-table-being-joined-twice</permalink>
      <priority type="integer">158619</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activerecord associations eager_loading include join preload</tag>
      <title>Giving same association in :include and :join can result in table being joined twice</title>
      <updated-at type="datetime">2010-09-16T16:16:38+01:00</updated-at>
      <user-id type="integer">10014</user-id>
      <version type="integer">6</version>
      <user-name>James Le Cuirot</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3339</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;cheap nfl jerseys&lt;/a&gt;
&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;discount nfl jerseys&lt;/a&gt;
&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;wholesale nfl jerseys&lt;/a&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;cheap nfl
jerseys&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;discount nfl
jerseys&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.wholesalenflstore.com/&quot;&gt;wholesale nfl
jerseys&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-04T09:20:48+00:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3339</number>
      <permalink>giving-same-association-in-include-and-join-can-result-in-table-being-joined-twice</permalink>
      <priority type="integer">158619</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activerecord associations eager_loading include join preload</tag>
      <title>Giving same association in :include and :join can result in table being joined twice</title>
      <updated-at type="datetime">2011-01-04T16:24:45+00:00</updated-at>
      <user-id type="integer">131088</user-id>
      <version type="integer">7</version>
      <user-name>icooky</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3339</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-05T01:00:13+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3339</number>
      <permalink>giving-same-association-in-include-and-join-can-result-in-table-being-joined-twice</permalink>
      <priority type="integer">158619</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2-3-stable activerecord associations eager_loading include join preload</tag>
      <title>Giving same association in :include and :join can result in table being joined twice</title>
      <updated-at type="datetime">2011-04-05T01:01:17+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">8</version>
      <user-name>rails</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3339</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-05T01:00:13+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3339</number>
      <permalink>giving-same-association-in-include-and-join-can-result-in-table-being-joined-twice</permalink>
      <priority type="integer">158619</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2-3-stable activerecord associations eager_loading include join preload</tag>
      <title>Giving same association in :include and :join can result in table being joined twice</title>
      <updated-at type="datetime">2011-04-05T01:01:05+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">9</version>
      <user-name>rails</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3339</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>13d0cffc4ebe94e9ba97a8d485c220582b0f3963</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-09-13T16:40:00+01:00</created-at>
      <filename>0001-prevent-tables-from-being-joined-twice-when-giving-t.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">670643</id>
      <size type="integer">6540</size>
      <uploader-id type="integer">10014</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/670643/0001-prevent-tables-from-being-joined-twice-when-giving-t.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>32c0f9ad804353a7598dfc01d021b00932c4a81f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-09-16T16:16:35+01:00</created-at>
      <filename>0001-prevent-tables-from-being-joined-twice-when-giving-t.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">676821</id>
      <size type="integer">6540</size>
      <uploader-id type="integer">10014</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/676821/0001-prevent-tables-from-being-joined-twice-when-giving-t.patch</url>
    </attachment>
  </attachments>
</ticket>
