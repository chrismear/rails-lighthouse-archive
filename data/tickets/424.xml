<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-15T12:42:07+01:00</created-at>
  <creator-id type="integer">23461</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">424</number>
  <permalink>named_scope-does-not-respect-eager-loading</permalink>
  <priority type="integer">16672</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>eager_loading named_scope</tag>
  <title>named_scope does not respect eager loading</title>
  <updated-at type="datetime">2008-10-23T16:25:48+01:00</updated-at>
  <user-id type="integer">23461</user-id>
  <version type="integer">1</version>
  <user-name>Dennis Krupenik</user-name>
  <creator-name>Dennis Krupenik</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/424</url>
  <priority-name nil="true"></priority-name>
  <original-body>class Person
  has_many :messages
end

class Message
  belongs_to :person
  named_scope :unread, :conditions =&gt; { :is_read =&gt; false }
end

@person = Person.first(:include =&gt; :messages) # performs an sql query
@person.messages.unread # performs another sql query. should it?
@person.messages.find_all { |msg| !msg.is_read } # does not perform sql query.
@person.messages.unread.find_all { true } # fully ignores '.unread'. should it?

i'm not sure if it a bug or a feature.

is there a way to utilize existing named_scopes to perform filtering on already loaded associations without additional queries?</original-body>
  <latest-body>class Person
  has_many :messages
end

class Message
  belongs_to :person
  named_scope :unread, :conditions =&gt; { :is_read =&gt; false }
end

@person = Person.first(:include =&gt; :messages) # performs an sql query
@person.messages.unread # performs another sql query. should it?
@person.messages.find_all { |msg| !msg.is_read } # does not perform sql query.
@person.messages.unread.find_all { true } # fully ignores '.unread'. should it?

i'm not sure if it a bug or a feature.

is there a way to utilize existing named_scopes to perform filtering on already loaded associations without additional queries?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
class Person
&lt;/p&gt;&lt;p&gt;
has_many :messages
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
class Message
&lt;/p&gt;&lt;p&gt;
belongs_to :person
&lt;/p&gt;&lt;p&gt;
named_scope :unread, :conditions =&gt; { :is_read =&gt; false }
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
@person = Person.first(:include =&gt; :messages) # performs an sql query
&lt;/p&gt;&lt;p&gt;
@person.messages.unread # performs another sql query. should it?
&lt;/p&gt;&lt;p&gt;
@person.messages.find_all { |msg| !msg.is_read } # does not perform sql query.
&lt;/p&gt;&lt;p&gt;
@person.messages.unread.find_all { true } # fully ignores '.unread'. should it?
&lt;/p&gt;&lt;p&gt;
i'm not sure if it a bug or a feature.
&lt;/p&gt;&lt;p&gt;
is there a way to utilize existing named_scopes to perform filtering on already loaded associations without additional queries?
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@@@ ruby
class Person
  has_many :messages
end

class Message
  belongs_to :person
  named_scope :unread, :conditions =&gt; { :is_read =&gt; false }
end

@person = Person.first(:include =&gt; :messages) # performs an sql query
@person.messages.unread # performs another sql query. should it?
@person.messages.find_all { |msg| !msg.is_read } # does not perform sql query.
@person.messages.unread.find_all { true } # completely ignores '.unread'. should it?
@@@

i'm not sure whether it is a bug or a feature.

is there a way to utilize existing named_scopes to perform filtering on already loaded associations without additional queries?</body>
      <body-html>&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Person
  has_many :messages
end

class Message
  belongs_to :person
  named_scope :unread, :conditions =&amp;gt; { :is_read =&amp;gt; false }
end

@person = Person.first(:include =&amp;gt; :messages) # performs an sql query
@person.messages.unread # performs another sql query. should it?
@person.messages.find_all { |msg| !msg.is_read } # does not perform sql query.
@person.messages.unread.find_all { true } # completely ignores '.unread'. should it?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;i'm not sure whether it is a bug or a feature.&lt;/p&gt;
&lt;p&gt;is there a way to utilize existing named_scopes to perform
filtering on already loaded associations without additional
queries?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-16T21:24:39+01:00</created-at>
      <creator-id type="integer">23461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">424</number>
      <permalink>named_scope-does-not-respect-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>named_scope does not respect eager loading</title>
      <updated-at type="datetime">2008-10-23T16:25:43+01:00</updated-at>
      <user-id type="integer">23461</user-id>
      <version type="integer">1</version>
      <user-name>Dennis Krupenik</user-name>
      <creator-name>Dennis Krupenik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/424</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have been battling with this issue as well.  I think the problem is more related to 'has_one' relationships though.

@@@
class Document &lt; ActiveRecord::Base
  has_one :revision, :class_name =&gt; 'Document', :foreign_key =&gt; 'prior_revision_id'
  belongs_to :prior_revision, :class_name =&gt; 'Document', :foreign_key =&gt; 'prior_revision_id'
  
  named_scope :active, :conditions =&gt; { :active =&gt; true }
  named_scope :inactive, :conditions =&gt; { :active =&gt; false }
end
@@@

And then in script/console:

@@@
Loading development environment (Rails 2.1.0)
&gt;&gt; d1 = Document.create(:active =&gt; false, :title =&gt; 'd1', :body =&gt; 'text')
=&gt; #&lt;Document id: 1, prior_revision_id: nil, title: &quot;d1&quot;, body: &quot;text&quot;, active: false, created_at: &quot;2008-07-17 14:18:36&quot;, updated_at: &quot;2008-07-17 14:18:36&quot;&gt;
&gt;&gt; d2 = d1.create_revision(:active =&gt; true, :title =&gt; 'd2', :body =&gt; 'new text')
=&gt; #&lt;Document id: 2, prior_revision_id: 1, title: &quot;d2&quot;, body: &quot;new text&quot;, active: true, created_at: &quot;2008-07-17 14:19:14&quot;, updated_at: &quot;2008-07-17 14:19:14&quot;&gt;

&gt;&gt; doc = Document.find(1, :include =&gt; :revision)
=&gt; #&lt;Document id: 1, prior_revision_id: nil, title: &quot;d1&quot;, body: &quot;text&quot;, active: false, created_at: &quot;2008-07-17 14:18:36&quot;, updated_at: &quot;2008-07-17 14:18:36&quot;&gt;
&gt;&gt; doc.revision
=&gt; #&lt;Document id: 2, prior_revision_id: 1, title: &quot;d2&quot;, body: &quot;new text&quot;, active: true, created_at: &quot;2008-07-17 14:19:14&quot;, updated_at: &quot;2008-07-17 14:19:14&quot;&gt;

&gt;&gt; ns_doc = Document.inactive.find(:all, :include =&gt; :revision)[0]
=&gt; #&lt;Document id: 1, prior_revision_id: nil, title: &quot;d1&quot;, body: &quot;text&quot;, active: false, created_at: &quot;2008-07-17 14:18:36&quot;, updated_at: &quot;2008-07-17 14:18:36&quot;&gt;
&gt;&gt; ns_doc.revision
=&gt; nil
@@@

Note how the attempt to use eager loading within a named scope request causes the same document (id: 1) to NOT be able to access it's revision.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I have been battling with this issue as well.  I think the problem is more related to 'has_one' relationships though.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;class Document &amp;lt; ActiveRecord::Base
  has_one :revision, :class_name =&amp;gt; 'Document', :foreign_key =&amp;gt; 'prior_revision_id'
  belongs_to :prior_revision, :class_name =&amp;gt; 'Document', :foreign_key =&amp;gt; 'prior_revision_id'
  
  named_scope :active, :conditions =&amp;gt; { :active =&amp;gt; true }
  named_scope :inactive, :conditions =&amp;gt; { :active =&amp;gt; false }
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
And then in script/console:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;Loading development environment (Rails 2.1.0)
&amp;gt;&amp;gt; d1 = Document.create(:active =&amp;gt; false, :title =&amp;gt; 'd1', :body =&amp;gt; 'text')
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, title: &amp;quot;d1&amp;quot;, body: &amp;quot;text&amp;quot;, active: false, created_at: &amp;quot;2008-07-17 14:18:36&amp;quot;, updated_at: &amp;quot;2008-07-17 14:18:36&amp;quot;&amp;gt;
&amp;gt;&amp;gt; d2 = d1.create_revision(:active =&amp;gt; true, :title =&amp;gt; 'd2', :body =&amp;gt; 'new text')
=&amp;gt; #&amp;lt;Document id: 2, prior_revision_id: 1, title: &amp;quot;d2&amp;quot;, body: &amp;quot;new text&amp;quot;, active: true, created_at: &amp;quot;2008-07-17 14:19:14&amp;quot;, updated_at: &amp;quot;2008-07-17 14:19:14&amp;quot;&amp;gt;

&amp;gt;&amp;gt; doc = Document.find(1, :include =&amp;gt; :revision)
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, title: &amp;quot;d1&amp;quot;, body: &amp;quot;text&amp;quot;, active: false, created_at: &amp;quot;2008-07-17 14:18:36&amp;quot;, updated_at: &amp;quot;2008-07-17 14:18:36&amp;quot;&amp;gt;
&amp;gt;&amp;gt; doc.revision
=&amp;gt; #&amp;lt;Document id: 2, prior_revision_id: 1, title: &amp;quot;d2&amp;quot;, body: &amp;quot;new text&amp;quot;, active: true, created_at: &amp;quot;2008-07-17 14:19:14&amp;quot;, updated_at: &amp;quot;2008-07-17 14:19:14&amp;quot;&amp;gt;

&amp;gt;&amp;gt; ns_doc = Document.inactive.find(:all, :include =&amp;gt; :revision)[0]
=&amp;gt; #&amp;lt;Document id: 1, prior_revision_id: nil, title: &amp;quot;d1&amp;quot;, body: &amp;quot;text&amp;quot;, active: false, created_at: &amp;quot;2008-07-17 14:18:36&amp;quot;, updated_at: &amp;quot;2008-07-17 14:18:36&amp;quot;&amp;gt;
&amp;gt;&amp;gt; ns_doc.revision
=&amp;gt; nil&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Note how the attempt to use eager loading within a named scope request causes the same document (id: 1) to NOT be able to access it's revision.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T15:24:00+01:00</created-at>
      <creator-id type="integer">23461</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">424</number>
      <permalink>named_scope-does-not-respect-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>eager_loading named_scope</tag>
      <title>named_scope does not respect eager loading</title>
      <updated-at type="datetime">2008-07-17T15:24:00+01:00</updated-at>
      <user-id type="integer">26330</user-id>
      <version type="integer">2</version>
      <user-name>elDub</user-name>
      <creator-name>Dennis Krupenik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/424</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Please forgive/ignore my prior post.  After re-thinking it, it is a different issue which I will create a new post for.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Please forgive/ignore my prior post.  After re-thinking it, it is a different issue which I will create a new post for.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-17T15:37:23+01:00</created-at>
      <creator-id type="integer">23461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">424</number>
      <permalink>named_scope-does-not-respect-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>eager_loading named_scope</tag>
      <title>named_scope does not respect eager loading</title>
      <updated-at type="datetime">2008-07-17T15:37:23+01:00</updated-at>
      <user-id type="integer">26330</user-id>
      <version type="integer">3</version>
      <user-name>elDub</user-name>
      <creator-name>Dennis Krupenik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/424</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Since conditions on named_scope's can be arbitrarily complex SQL snippets it is impossible to filter the association by the named scope in AR alone, making an exception for simple hash based conditions does not seem likely to happen.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Since conditions on named_scope's can be arbitrarily complex SQL
snippets it is impossible to filter the association by the named
scope in AR alone, making an exception for simple hash based
conditions does not seem likely to happen.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-09-18T06:51:32+01:00</created-at>
      <creator-id type="integer">23461</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:tag: eager_loading named_scope
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">424</number>
      <permalink>named_scope-does-not-respect-eager-loading</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>eager_loading named_scope</tag>
      <title>named_scope does not respect eager loading</title>
      <updated-at type="datetime">2008-09-18T06:51:34+01:00</updated-at>
      <user-id type="integer">14890</user-id>
      <version type="integer">4</version>
      <user-name>Tarmo T&#228;nav</user-name>
      <creator-name>Dennis Krupenik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/424</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
