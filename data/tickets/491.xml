<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-26T10:07:53+01:00</created-at>
  <creator-id type="integer">21706</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">491</number>
  <permalink>destroy-fails-on-model-with-acts_as_list-and-has_many-with-dependent-destroy</permalink>
  <priority type="integer">17672</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord acts_as_list bug</tag>
  <title>destroy fails on model with acts_as_list and has_many with :dependent =&gt; :destroy</title>
  <updated-at type="datetime">2008-09-30T17:52:09+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">3</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>mgomez</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/491</url>
  <priority-name nil="true"></priority-name>
  <original-body>I copy and paste from &quot;Rails Trac&quot;:http://dev.rubyonrails.org/ticket/10065 , the following description, reported by donv:

&gt; I have an application that uses &quot;has_many&quot; with &quot;:dependent =&gt; :destroy&quot; to a model with &quot;acts_as_list&quot; with a &quot;:null =&gt; false&quot; constraint on the position column since I always want all rows in a list. This has worked fine with all version of Rails up to Rails 1.2.4. With Rails 1.2.5 it breaks with a NULL violation. It seems ActiveRecord tries to update the position column with a NULL value before it deletes the row. This seems completely unnecessary since the row will be immediately deleted anyway. It also breaks the NOT NULL constraint.

This unexpected behaviour occurs still in Rails 2.1
As danger explains:

&gt; The reason for this is that the acts_as_list plugin calls remove_from_list before a record is destroyed. That function readjusts the position of the other records and sets the position of the current record to nil.

My suggestion is that the method remove_from_list should set the position of the current record to the last in the list, instead of setting it to nil. Thus will the removal allow the correct positining of the other items in the list, while the :null =&gt; false constrain remains possible.

Would someone be so kind to patch this?</original-body>
  <latest-body>I copy and paste from &quot;Rails Trac&quot;:http://dev.rubyonrails.org/ticket/10065 , the following description, reported by donv:

&gt; I have an application that uses &quot;has_many&quot; with &quot;:dependent =&gt; :destroy&quot; to a model with &quot;acts_as_list&quot; with a &quot;:null =&gt; false&quot; constraint on the position column since I always want all rows in a list. This has worked fine with all version of Rails up to Rails 1.2.4. With Rails 1.2.5 it breaks with a NULL violation. It seems ActiveRecord tries to update the position column with a NULL value before it deletes the row. This seems completely unnecessary since the row will be immediately deleted anyway. It also breaks the NOT NULL constraint.

This unexpected behaviour occurs still in Rails 2.1
As danger explains:

&gt; The reason for this is that the acts_as_list plugin calls remove_from_list before a record is destroyed. That function readjusts the position of the other records and sets the position of the current record to nil.

My suggestion is that the method remove_from_list should set the position of the current record to the last in the list, instead of setting it to nil. Thus will the removal allow the correct positining of the other items in the list, while the :null =&gt; false constrain remains possible.

Would someone be so kind to patch this?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
I copy and paste from &lt;a href=&quot;http://dev.rubyonrails.org/ticket/10065&quot;&gt;Rails Trac&lt;/a&gt; , the following description, reported by donv:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
I have an application that uses &quot;has_many&quot; with &quot;:dependent =&gt; :destroy&quot; to a model with &quot;acts_as_list&quot; with a &quot;:null =&gt; false&quot; constraint on the position column since I always want all rows in a list. This has worked fine with all version of Rails up to Rails 1.2.4. With Rails 1.2.5 it breaks with a NULL violation. It seems ActiveRecord tries to update the position column with a NULL value before it deletes the row. This seems completely unnecessary since the row will be immediately deleted anyway. It also breaks the NOT NULL constraint.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;
This unexpected behaviour occurs still in Rails 2.1
&lt;/p&gt;&lt;p&gt;
As danger explains:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
The reason for this is that the acts_as_list plugin calls remove_from_list before a record is destroyed. That function readjusts the position of the other records and sets the position of the current record to nil.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;
My suggestion is that the method remove_from_list should set the position of the current record to the last in the list, instead of setting it to nil. Thus will the removal allow the correct positining of the other items in the list, while the :null =&gt; false constrain remains possible.
&lt;/p&gt;&lt;p&gt;
Would someone be so kind to patch this?
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I copy and paste from &quot;Rails Trac&quot;:http://dev.rubyonrails.org/ticket/10065 the following description, reported by _donv_ :

&gt; I have an application that uses &quot;has_many&quot; with &quot;:dependent =&gt; :destroy&quot; to a model with &quot;acts_as_list&quot; with a &quot;:null =&gt; false&quot; constraint on the position column since I always want all rows in a list. This has worked fine with all version of Rails up to Rails 1.2.4. With Rails 1.2.5 it breaks with a NULL violation. It seems ActiveRecord tries to update the position column with a NULL value before it deletes the row. This seems completely unnecessary since the row will be immediately deleted anyway. It also breaks the NOT NULL constraint.

This unexpected behaviour still occurs in Rails 2.1
As _danger_ explains:

&gt; The reason for this is that the acts_as_list plugin calls remove_from_list before a record is destroyed. That function readjusts the position of the other records and sets the position of the current record to nil.

My suggestion is that the method *remove_from_list should set the position of the current record to the last in the list* , instead of setting it to nil. Thus the removal would allow the correct positioning of the other items in the list, while the :null =&gt; false constrain remains possible.

Would someone be so kind to patch this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I copy and paste from &lt;a href=&quot;http://dev.rubyonrails.org/ticket/10065&quot;&gt;Rails Trac&lt;/a&gt; the following description, reported by &lt;em&gt;donv&lt;/em&gt; :
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
I have an application that uses &quot;has_many&quot; with &quot;:dependent =&gt; :destroy&quot; to a model with &quot;acts_as_list&quot; with a &quot;:null =&gt; false&quot; constraint on the position column since I always want all rows in a list. This has worked fine with all version of Rails up to Rails 1.2.4. With Rails 1.2.5 it breaks with a NULL violation. It seems ActiveRecord tries to update the position column with a NULL value before it deletes the row. This seems completely unnecessary since the row will be immediately deleted anyway. It also breaks the NOT NULL constraint.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;
This unexpected behaviour still occurs in Rails 2.1
&lt;/p&gt;&lt;p&gt;
As &lt;em&gt;danger&lt;/em&gt; explains:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
The reason for this is that the acts_as_list plugin calls remove_from_list before a record is destroyed. That function readjusts the position of the other records and sets the position of the current record to nil.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;
My suggestion is that the method &lt;strong&gt;remove_from_list should set the position of the current record to the last in the list&lt;/strong&gt; , instead of setting it to nil. Thus the removal would allow the correct positioning of the other items in the list, while the :null =&gt; false constrain remains possible.
&lt;/p&gt;&lt;p&gt;
Would someone be so kind to patch this?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-26T10:17:18+01:00</created-at>
      <creator-id type="integer">21706</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">491</number>
      <permalink>destroy-fails-on-model-with-acts_as_list-and-has_many-with-dependent-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>destroy fails on model with acts_as_list and has_many with :dependent =&gt; :destroy</title>
      <updated-at type="datetime">2008-06-26T10:17:18+01:00</updated-at>
      <user-id type="integer">21706</user-id>
      <version type="integer">1</version>
      <user-name>mgomez</user-name>
      <creator-name>mgomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/491</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I forgot to tag this ticket.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I forgot to tag this ticket.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-26T10:11:52+01:00</created-at>
      <creator-id type="integer">21706</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">491</number>
      <permalink>destroy-fails-on-model-with-acts_as_list-and-has_many-with-dependent-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord acts_as_list bug</tag>
      <title>destroy fails on model with acts_as_list and has_many with :dependent =&gt; :destroy</title>
      <updated-at type="datetime">2008-06-26T10:11:52+01:00</updated-at>
      <user-id type="integer">21706</user-id>
      <version type="integer">2</version>
      <user-name>mgomez</user-name>
      <creator-name>mgomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/491</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-30T17:52:04+01:00</created-at>
      <creator-id type="integer">21706</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">491</number>
      <permalink>destroy-fails-on-model-with-acts_as_list-and-has_many-with-dependent-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord acts_as_list bug</tag>
      <title>destroy fails on model with acts_as_list and has_many with :dependent =&gt; :destroy</title>
      <updated-at type="datetime">2008-09-30T17:52:09+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">3</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>mgomez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/491</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
