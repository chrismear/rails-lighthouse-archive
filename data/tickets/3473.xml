<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-11-09T12:15:23+00:00</created-at>
  <creator-id type="integer">30846</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3473</number>
  <permalink>cannot-assign-values-to-non-numeric-primary-key-attributes-in-modelnew-and-create</permalink>
  <priority type="integer">176179</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Cannot assign values to non numeric primary key attributes in Model#new and #create</title>
  <updated-at type="datetime">2010-10-11T10:57:38+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">5</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>pmontrasio</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3473</url>
  <priority-name nil="true"></priority-name>
  <original-body>This is a model that defines a string field as primary key:

class Game &lt; ActiveRecord::Base
  set_primary_key &quot;name&quot;
end

and this is the migration that creates the table and a couple of records.

class CreateGames &lt; ActiveRecord::Migration
  def self.up
    create_table (:games, :id =&gt; false, :primary_key =&gt; &quot;name&quot;)  do |t|
      t.string :name
    end

    Game.create(:name =&gt; &quot;go&quot;)
    Game.create(:name =&gt; &quot;chess&quot;)
  end
  ...
end

Unfortunately the name attribute never gets assigned and is NULL inside the database.

Apparently there is no way to assign primary keys values into the new and create methods of the models. This is ok and desirable for the standard id auto incremented primary key but is bad when using non numeric primary keys. The workaround exists and is obvious but doesn't look nice:

x = Model.new(attributes_hash)
x.non_numeric_key = &quot;value&quot;
x.save

It is less DRY than a Model.create single liner.

I looked inside the ActiveRecord sources and found the culprit. It's the unless check inside the loop in this method:

      def attributes_from_column_definition
        self.class.columns.inject({}) do |attributes, column|
          attributes[column.name] = column.default unless column.name == self.class.primary_key
          attributes
        end
      end

I'm sure there are good reasons to have the check there. One I can think about is that AR is assuming that the primary key is managed by the database itself as an auto incremented field. On the other side rails gives us a way to define non numeric primary keys which cannot be auto incremented in a straightforward way so this looks like a sort of bug to me.

I implemented a workaround that doesn't remove the check because there might be a lot of code that assumes it's there. I want to be able to tell AR that I'm taking the responsibility to manage the values of the primary key. I added a new method to AR to do so and the model now is:

class Game &lt; ActiveRecord::Base
  set_primary_key &quot;name&quot;
  automatic_primary_key false # the new method
end

Here's the patch to active_record/base.rb. 
I had to define the automatic_primary_key method and modify the code of the initialize method, which is also called by create.

--- /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/base.rb	2009-11-09 12:22:12.000000000 +0100
+++ base.rb 2009-11-09 12:21:37.000000000 +0100
@@ -1219,6 +1219,18 @@
       end
       alias :primary_key= :set_primary_key
 
+      # PATCH
+      # Accept a value for the primary key in the Model#new and Model#create
+      # methods
+      def set_automatic_primary_key(value = false)
+        define_attr_method :automatic_primary_key, value
+      end
+      alias :automatic_primary_key= :set_automatic_primary_key
+      def automatic_primary_key(value)
+        @automatic_primary_key = value
+      end
+      # END OF PATCH
+
       # Sets the name of the inheritance column to use to the given value,
       # or (if the value # is nil or false) to the value returned by the
       # given block.
@@ -2432,6 +2444,12 @@
       # hence you can't have attributes that aren't part of the table columns.
       def initialize(attributes = nil)
         @attributes = attributes_from_column_definition
+        # PATCH
+        unless @automatic_primary_key
+          pk = self.class.primary_key
+          @attributes.merge!({ pk =&gt; attributes[pk.to_sym] })
+        end
+        # END OF PATCH
         @attributes_cache = {}
         @new_record = true
         ensure_proper_type


I'm not familiar with the inner workings of AR so I really don't know if I'm breaking some other parts of rails but it seems to work. I'm also sure that there are better ways to do it and I'll be more than glad to be advised and learn.

Paolo</original-body>
  <latest-body>This is a model that defines a string field as primary key:

class Game &lt; ActiveRecord::Base
  set_primary_key &quot;name&quot;
end

and this is the migration that creates the table and a couple of records.

class CreateGames &lt; ActiveRecord::Migration
  def self.up
    create_table (:games, :id =&gt; false, :primary_key =&gt; &quot;name&quot;)  do |t|
      t.string :name
    end

    Game.create(:name =&gt; &quot;go&quot;)
    Game.create(:name =&gt; &quot;chess&quot;)
  end
  ...
end

Unfortunately the name attribute never gets assigned and is NULL inside the database.

Apparently there is no way to assign primary keys values into the new and create methods of the models. This is ok and desirable for the standard id auto incremented primary key but is bad when using non numeric primary keys. The workaround exists and is obvious but doesn't look nice:

x = Model.new(attributes_hash)
x.non_numeric_key = &quot;value&quot;
x.save

It is less DRY than a Model.create single liner.

I looked inside the ActiveRecord sources and found the culprit. It's the unless check inside the loop in this method:

      def attributes_from_column_definition
        self.class.columns.inject({}) do |attributes, column|
          attributes[column.name] = column.default unless column.name == self.class.primary_key
          attributes
        end
      end

I'm sure there are good reasons to have the check there. One I can think about is that AR is assuming that the primary key is managed by the database itself as an auto incremented field. On the other side rails gives us a way to define non numeric primary keys which cannot be auto incremented in a straightforward way so this looks like a sort of bug to me.

I implemented a workaround that doesn't remove the check because there might be a lot of code that assumes it's there. I want to be able to tell AR that I'm taking the responsibility to manage the values of the primary key. I added a new method to AR to do so and the model now is:

class Game &lt; ActiveRecord::Base
  set_primary_key &quot;name&quot;
  automatic_primary_key false # the new method
end

Here's the patch to active_record/base.rb. 
I had to define the automatic_primary_key method and modify the code of the initialize method, which is also called by create.

--- /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/base.rb	2009-11-09 12:22:12.000000000 +0100
+++ base.rb 2009-11-09 12:21:37.000000000 +0100
@@ -1219,6 +1219,18 @@
       end
       alias :primary_key= :set_primary_key
 
+      # PATCH
+      # Accept a value for the primary key in the Model#new and Model#create
+      # methods
+      def set_automatic_primary_key(value = false)
+        define_attr_method :automatic_primary_key, value
+      end
+      alias :automatic_primary_key= :set_automatic_primary_key
+      def automatic_primary_key(value)
+        @automatic_primary_key = value
+      end
+      # END OF PATCH
+
       # Sets the name of the inheritance column to use to the given value,
       # or (if the value # is nil or false) to the value returned by the
       # given block.
@@ -2432,6 +2444,12 @@
       # hence you can't have attributes that aren't part of the table columns.
       def initialize(attributes = nil)
         @attributes = attributes_from_column_definition
+        # PATCH
+        unless @automatic_primary_key
+          pk = self.class.primary_key
+          @attributes.merge!({ pk =&gt; attributes[pk.to_sym] })
+        end
+        # END OF PATCH
         @attributes_cache = {}
         @new_record = true
         ensure_proper_type


I'm not familiar with the inner workings of AR so I really don't know if I'm breaking some other parts of rails but it seems to work. I'm also sure that there are better ways to do it and I'll be more than glad to be advised and learn.

Paolo</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is a model that defines a string field as primary key:&lt;/p&gt;
&lt;p&gt;class Game &amp;lt; ActiveRecord::Base&lt;br&gt;
set_primary_key &quot;name&quot; end&lt;/p&gt;
&lt;p&gt;and this is the migration that creates the table and a couple of
records.&lt;/p&gt;
&lt;p&gt;class CreateGames &amp;lt; ActiveRecord::Migration&lt;br&gt;
def self.up&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create_table (:games, :id =&amp;gt; false, :primary_key =&amp;gt; &quot;name&quot;)  do |t|
  t.string :name
end

Game.create(:name =&amp;gt; &quot;go&quot;)
Game.create(:name =&amp;gt; &quot;chess&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end ... end&lt;/p&gt;
&lt;p&gt;Unfortunately the name attribute never gets assigned and is NULL
inside the database.&lt;/p&gt;
&lt;p&gt;Apparently there is no way to assign primary keys values into
the new and create methods of the models. This is ok and desirable
for the standard id auto incremented primary key but is bad when
using non numeric primary keys. The workaround exists and is
obvious but doesn't look nice:&lt;/p&gt;
&lt;p&gt;x = Model.new(attributes_hash)&lt;br&gt;
x.non_numeric_key = &quot;value&quot;&lt;br&gt;
x.save&lt;/p&gt;
&lt;p&gt;It is less DRY than a Model.create single liner.&lt;/p&gt;
&lt;p&gt;I looked inside the ActiveRecord sources and found the culprit.
It's the unless check inside the loop in this method:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def attributes_from_column_definition
    self.class.columns.inject({}) do |attributes, column|
      attributes[column.name] = column.default unless column.name == self.class.primary_key
      attributes
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm sure there are good reasons to have the check there. One I
can think about is that AR is assuming that the primary key is
managed by the database itself as an auto incremented field. On the
other side rails gives us a way to define non numeric primary keys
which cannot be auto incremented in a straightforward way so this
looks like a sort of bug to me.&lt;/p&gt;
&lt;p&gt;I implemented a workaround that doesn't remove the check because
there might be a lot of code that assumes it's there. I want to be
able to tell AR that I'm taking the responsibility to manage the
values of the primary key. I added a new method to AR to do so and
the model now is:&lt;/p&gt;
&lt;p&gt;class Game &amp;lt; ActiveRecord::Base&lt;br&gt;
set_primary_key &quot;name&quot; automatic_primary_key false # the new method
end&lt;/p&gt;
&lt;p&gt;Here's the patch to active_record/base.rb.&lt;br&gt;
I had to define the automatic_primary_key method and modify the
code of the initialize method, which is also called by create.&lt;/p&gt;
&lt;p&gt;---
/usr/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/base.rb
2009-11-09 12:22:12.000000000 +0100 +++ base.rb 2009-11-09
12:21:37.000000000 +0100 @@ -1219,6 +1219,18 @@&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   end
   alias :primary_key= :set_primary_key&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;# PATCH&lt;/li&gt;
&lt;li&gt;# Accept a value for the primary key in the Model#new and
Model#create&lt;/li&gt;
&lt;li&gt;# methods&lt;/li&gt;
&lt;li&gt;def set_automatic_primary_key(value = false)&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; define_attr_method :automatic_primary_key, value&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;end&lt;/li&gt;
&lt;li&gt;alias :automatic_primary_key= :set_automatic_primary_key&lt;/li&gt;
&lt;li&gt;def automatic_primary_key(value)&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; @automatic_primary_key = value&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;end&lt;/li&gt;
&lt;li&gt;# END OF PATCH + # Sets the name of the inheritance column to
use to the given value, # or (if the value # is nil or false) to
the value returned by the # given block. @@ -2432,6 +2444,12 @@ #
hence you can't have attributes that aren't part of the table
columns. def initialize(attributes = nil)
&lt;pre&gt;
&lt;code&gt; @attributes = attributes_from_column_definition&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; # PATCH&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; unless @automatic_primary_key&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   pk = self.class.primary_key&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   @attributes.merge!({ pk =&amp;gt; attributes[pk.to_sym] })&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; end&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; # END OF PATCH
 @attributes_cache = {}
 @new_record = true
 ensure_proper_type&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm not familiar with the inner workings of AR so I really don't
know if I'm breaking some other parts of rails but it seems to
work. I'm also sure that there are better ways to do it and I'll be
more than glad to be advised and learn.&lt;/p&gt;
&lt;p&gt;Paolo&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is a model that defines a string field as primary key:

class Game &lt; ActiveRecord::Base
  set_primary_key &quot;name&quot;
end

and this is the migration that creates the table and a couple of records.

class CreateGames &lt; ActiveRecord::Migration
  def self.up
    create_table (:games, :id =&gt; false, :primary_key =&gt; &quot;name&quot;)  do |t|
      t.string :name
    end

    Game.create(:name =&gt; &quot;go&quot;)
    Game.create(:name =&gt; &quot;chess&quot;)
  end
  ...
end

Unfortunately the name attribute never gets assigned and is NULL inside the database.

Apparently there is no way to assign primary keys values into the new and create methods of the models. This is ok and desirable for the standard id auto incremented primary key but is bad when using non numeric primary keys. The workaround exists and is obvious but doesn't look nice:

x = Model.new(attributes_hash)
x.non_numeric_key = &quot;value&quot;
x.save

It is less DRY than a Model.create single liner.

I looked inside the ActiveRecord sources and found the culprit. It's the unless check inside the loop in this method:

      def attributes_from_column_definition
        self.class.columns.inject({}) do |attributes, column|
          attributes[column.name] = column.default unless column.name == self.class.primary_key
          attributes
        end
      end

I'm sure there are good reasons to have the check there. One I can think about is that AR is assuming that the primary key is managed by the database itself as an auto incremented field. On the other side rails gives us a way to define non numeric primary keys which cannot be auto incremented in a straightforward way so this looks like a sort of bug to me.

I implemented a workaround that doesn't remove the check because there might be a lot of code that assumes it's there. I want to be able to tell AR that I'm taking the responsibility to manage the values of the primary key. I added a new method to AR to do so and the model now is:

class Game &lt; ActiveRecord::Base
  set_primary_key &quot;name&quot;
  automatic_primary_key false # the new method
end

Here's the patch to active_record/base.rb. 
I had to define the automatic_primary_key method and modify the code of the initialize method, which is also called by create.

--- /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/base.rb	2009-11-09 12:22:12.000000000 +0100
+++ base.rb 2009-11-09 12:21:37.000000000 +0100
@@ -1219,6 +1219,18 @@
       end
       alias :primary_key= :set_primary_key
 
+      # PATCH
+      # Accept a value for the primary key in the Model#new and Model#create
+      # methods
+      def set_automatic_primary_key(value = false)
+        define_attr_method :automatic_primary_key, value
+      end
+      alias :automatic_primary_key= :set_automatic_primary_key
+      def automatic_primary_key(value)
+        @automatic_primary_key = value
+      end
+      # END OF PATCH
+
       # Sets the name of the inheritance column to use to the given value,
       # or (if the value # is nil or false) to the value returned by the
       # given block.
@@ -2432,6 +2444,12 @@
       # hence you can't have attributes that aren't part of the table columns.
       def initialize(attributes = nil)
         @attributes = attributes_from_column_definition
+        # PATCH
+        unless @automatic_primary_key
+          pk = self.class.primary_key
+          @attributes.merge!({ pk =&gt; attributes[pk.to_sym] })
+        end
+        # END OF PATCH
         @attributes_cache = {}
         @new_record = true
         ensure_proper_type


I'm not familiar with the inner workings of AR so I really don't know if I'm breaking some other parts of rails but it seems to work. I'm also sure that there are better ways to do it and I'll be more than glad to be advised and learn.

Paolo</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is a model that defines a string field as primary key:&lt;/p&gt;
&lt;p&gt;class Game &amp;lt; ActiveRecord::Base&lt;br&gt;
set_primary_key &quot;name&quot; end&lt;/p&gt;
&lt;p&gt;and this is the migration that creates the table and a couple of
records.&lt;/p&gt;
&lt;p&gt;class CreateGames &amp;lt; ActiveRecord::Migration&lt;br&gt;
def self.up&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create_table (:games, :id =&amp;gt; false, :primary_key =&amp;gt; &quot;name&quot;)  do |t|
  t.string :name
end

Game.create(:name =&amp;gt; &quot;go&quot;)
Game.create(:name =&amp;gt; &quot;chess&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end ... end&lt;/p&gt;
&lt;p&gt;Unfortunately the name attribute never gets assigned and is NULL
inside the database.&lt;/p&gt;
&lt;p&gt;Apparently there is no way to assign primary keys values into
the new and create methods of the models. This is ok and desirable
for the standard id auto incremented primary key but is bad when
using non numeric primary keys. The workaround exists and is
obvious but doesn't look nice:&lt;/p&gt;
&lt;p&gt;x = Model.new(attributes_hash)&lt;br&gt;
x.non_numeric_key = &quot;value&quot;&lt;br&gt;
x.save&lt;/p&gt;
&lt;p&gt;It is less DRY than a Model.create single liner.&lt;/p&gt;
&lt;p&gt;I looked inside the ActiveRecord sources and found the culprit.
It's the unless check inside the loop in this method:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def attributes_from_column_definition
    self.class.columns.inject({}) do |attributes, column|
      attributes[column.name] = column.default unless column.name == self.class.primary_key
      attributes
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm sure there are good reasons to have the check there. One I
can think about is that AR is assuming that the primary key is
managed by the database itself as an auto incremented field. On the
other side rails gives us a way to define non numeric primary keys
which cannot be auto incremented in a straightforward way so this
looks like a sort of bug to me.&lt;/p&gt;
&lt;p&gt;I implemented a workaround that doesn't remove the check because
there might be a lot of code that assumes it's there. I want to be
able to tell AR that I'm taking the responsibility to manage the
values of the primary key. I added a new method to AR to do so and
the model now is:&lt;/p&gt;
&lt;p&gt;class Game &amp;lt; ActiveRecord::Base&lt;br&gt;
set_primary_key &quot;name&quot; automatic_primary_key false # the new method
end&lt;/p&gt;
&lt;p&gt;Here's the patch to active_record/base.rb.&lt;br&gt;
I had to define the automatic_primary_key method and modify the
code of the initialize method, which is also called by create.&lt;/p&gt;
&lt;p&gt;---
/usr/lib/ruby/gems/1.8/gems/activerecord-2.3.4/lib/active_record/base.rb
2009-11-09 12:22:12.000000000 +0100 +++ base.rb 2009-11-09
12:21:37.000000000 +0100 @@ -1219,6 +1219,18 @@&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   end
   alias :primary_key= :set_primary_key&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;# PATCH&lt;/li&gt;
&lt;li&gt;# Accept a value for the primary key in the Model#new and
Model#create&lt;/li&gt;
&lt;li&gt;# methods&lt;/li&gt;
&lt;li&gt;def set_automatic_primary_key(value = false)&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; define_attr_method :automatic_primary_key, value&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;end&lt;/li&gt;
&lt;li&gt;alias :automatic_primary_key= :set_automatic_primary_key&lt;/li&gt;
&lt;li&gt;def automatic_primary_key(value)&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; @automatic_primary_key = value&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;end&lt;/li&gt;
&lt;li&gt;# END OF PATCH + # Sets the name of the inheritance column to
use to the given value, # or (if the value # is nil or false) to
the value returned by the # given block. @@ -2432,6 +2444,12 @@ #
hence you can't have attributes that aren't part of the table
columns. def initialize(attributes = nil)
&lt;pre&gt;
&lt;code&gt; @attributes = attributes_from_column_definition&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; # PATCH&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; unless @automatic_primary_key&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   pk = self.class.primary_key&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   @attributes.merge!({ pk =&amp;gt; attributes[pk.to_sym] })&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; end&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; # END OF PATCH
 @attributes_cache = {}
 @new_record = true
 ensure_proper_type&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm not familiar with the inner workings of AR so I really don't
know if I'm breaking some other parts of rails but it seems to
work. I'm also sure that there are better ways to do it and I'll be
more than glad to be advised and learn.&lt;/p&gt;
&lt;p&gt;Paolo&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-09T12:15:23+00:00</created-at>
      <creator-id type="integer">30846</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3473</number>
      <permalink>cannot-assign-values-to-non-numeric-primary-key-attributes-in-modelnew-and-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord patch</tag>
      <title>Cannot assign values to non numeric primary key attributes in Model#new and #create</title>
      <updated-at type="datetime">2009-11-09T12:15:30+00:00</updated-at>
      <user-id type="integer">30846</user-id>
      <version type="integer">1</version>
      <user-name>pmontrasio</user-name>
      <creator-name>pmontrasio</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3473</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I attach a better patch. The formatting of the one in the original post got garbled and it contained a but of its own anyway.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I attach a better patch. The formatting of the one in the
original post got garbled and it contained a but of its own
anyway.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-15T09:16:32+00:00</created-at>
      <creator-id type="integer">30846</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3473</number>
      <permalink>cannot-assign-values-to-non-numeric-primary-key-attributes-in-modelnew-and-create</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 activerecord patch</tag>
      <title>Cannot assign values to non numeric primary key attributes in Model#new and #create</title>
      <updated-at type="datetime">2009-11-15T09:16:36+00:00</updated-at>
      <user-id type="integer">30846</user-id>
      <version type="integer">2</version>
      <user-name>pmontrasio</user-name>
      <creator-name>pmontrasio</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3473</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:36:18+01:00</created-at>
      <creator-id type="integer">30846</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3473</number>
      <permalink>cannot-assign-values-to-non-numeric-primary-key-attributes-in-modelnew-and-create</permalink>
      <priority type="integer">176179</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.3.4 activerecord patch</tag>
      <title>Cannot assign values to non numeric primary key attributes in Model#new and #create</title>
      <updated-at type="datetime">2010-10-06T06:36:20+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">3</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>pmontrasio</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3473</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-11T10:57:35+01:00</created-at>
      <creator-id type="integer">30846</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.4 activerecord patch
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3473</number>
      <permalink>cannot-assign-values-to-non-numeric-primary-key-attributes-in-modelnew-and-create</permalink>
      <priority type="integer">176179</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Cannot assign values to non numeric primary key attributes in Model#new and #create</title>
      <updated-at type="datetime">2010-10-11T10:57:37+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">5</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>pmontrasio</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3473</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>958ea8babedebdaf8658d023dbe495144fbfeb5e</code>
      <content-type>application/octet-stream</content-type>
      <created-at type="datetime">2009-11-15T09:16:32+00:00</created-at>
      <filename>base.rb-patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">323868</id>
      <size type="integer">1268</size>
      <uploader-id type="integer">30846</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/323868/base.rb-patch</url>
    </attachment>
  </attachments>
</ticket>
