From 99a58fd8c1c55d541503b40477ac0f9d7e4a558b Mon Sep 17 00:00:00 2001
From: Ernie Miller <ernie@metautonomo.us>
Date: Sat, 28 Jun 2008 22:27:32 -0400
Subject: [PATCH] Added support for regexp matching of priority zones in time_zone_select

---
 .../lib/action_view/helpers/form_options_helper.rb |   11 +++++++++--
 .../test/template/form_options_helper_test.rb      |   18 ++++++++++++++++++
 .../lib/active_support/values/time_zone.rb         |   10 ++++++++++
 activesupport/test/time_zone_test.rb               |    7 +++++++
 4 files changed, 44 insertions(+), 2 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/form_options_helper.rb b/actionpack/lib/action_view/helpers/form_options_helper.rb
index b3f8e63..75220a2 100644
--- a/actionpack/lib/action_view/helpers/form_options_helper.rb
+++ b/actionpack/lib/action_view/helpers/form_options_helper.rb
@@ -150,7 +150,8 @@ module ActionView
       # You can also supply an array of TimeZone objects
       # as +priority_zones+, so that they will be listed above the rest of the
       # (long) list. (You can use TimeZone.us_zones as a convenience for
-      # obtaining a list of the US time zones.)
+      # obtaining a list of the US time zones, or a Regexp to select the zones
+      # of your choice)
       #
       # Finally, this method supports a <tt>:default</tt> option, which selects
       # a default TimeZone if the object's time zone is +nil+.
@@ -164,6 +165,8 @@ module ActionView
       #
       #   time_zone_select( "user", 'time_zone', [ TimeZone['Alaska'], TimeZone['Hawaii'] ])
       #
+      #   time_zone_select( "user", 'time_zone', /Australia/)
+      #
       #   time_zone_select( "user", "time_zone", TZInfo::Timezone.all.sort, :model => TZInfo::Timezone)
       def time_zone_select(object, method, priority_zones = nil, options = {}, html_options = {})
         InstanceTag.new(object, method, self, nil, options.delete(:object)).to_time_zone_select_tag(priority_zones, options, html_options)
@@ -292,7 +295,8 @@ module ActionView
       # selected option tag. You can also supply an array of TimeZone objects
       # as +priority_zones+, so that they will be listed above the rest of the
       # (long) list. (You can use TimeZone.us_zones as a convenience for
-      # obtaining a list of the US time zones.)
+      # obtaining a list of the US time zones, or a Regexp to select the zones
+      # of your choice)
       #
       # The +selected+ parameter must be either +nil+, or a string that names
       # a TimeZone.
@@ -311,6 +315,9 @@ module ActionView
         convert_zones = lambda { |list| list.map { |z| [ z.to_s, z.name ] } }
 
         if priority_zones
+	  if priority_zones.is_a?(Regexp)
+            priority_zones = model.all.find_all {|z| z =~ priority_zones}
+	  end
           zone_options += options_for_select(convert_zones[priority_zones], selected)
           zone_options += "<option value=\"\" disabled=\"disabled\">-------------</option>\n"
 
diff --git a/actionpack/test/template/form_options_helper_test.rb b/actionpack/test/template/form_options_helper_test.rb
index 3f89a5e..1db3a4d 100644
--- a/actionpack/test/template/form_options_helper_test.rb
+++ b/actionpack/test/template/form_options_helper_test.rb
@@ -1300,6 +1300,24 @@ COUNTRIES
                  html
   end
 
+  uses_mocha "time_zone_select_with_priority_zones_as_regexp" do
+    def test_time_zone_select_with_priority_zones_as_regexp
+      @firm = Firm.new("D")
+      MockTimeZone.any_instance.stubs(:=~).returns(true,false,false,true,false)
+
+      html = time_zone_select("firm", "time_zone", /A|D/)
+      assert_dom_equal "<select id=\"firm_time_zone\" name=\"firm[time_zone]\">" +
+                   "<option value=\"A\">A</option>\n" +
+                   "<option value=\"D\" selected=\"selected\">D</option>" +
+                   "<option value=\"\" disabled=\"disabled\">-------------</option>\n" +
+                   "<option value=\"B\">B</option>\n" +
+                   "<option value=\"C\">C</option>\n" +
+                   "<option value=\"E\">E</option>" +
+                   "</select>",
+                   html
+    end
+  end
+
   def test_time_zone_select_with_default_time_zone_and_nil_value
      @firm = Firm.new()
      @firm.time_zone = nil
diff --git a/activesupport/lib/active_support/values/time_zone.rb b/activesupport/lib/active_support/values/time_zone.rb
index 5b2d42a..2b8599c 100644
--- a/activesupport/lib/active_support/values/time_zone.rb
+++ b/activesupport/lib/active_support/values/time_zone.rb
@@ -201,6 +201,16 @@ module ActiveSupport
       result
     end
 
+    # Compare #name and TZInfo identifier to a supplied regexp, returning true
+    # if a match is found.
+    def =~(re)
+      if name =~ re || MAPPING[name] =~ re
+        return true
+      else
+        return nil
+      end
+    end
+
     # Returns a textual representation of this time zone.
     def to_s
       "(GMT#{formatted_offset}) #{name}"
diff --git a/activesupport/test/time_zone_test.rb b/activesupport/test/time_zone_test.rb
index b42dcd1..515ffcf 100644
--- a/activesupport/test/time_zone_test.rb
+++ b/activesupport/test/time_zone_test.rb
@@ -250,6 +250,13 @@ class TimeZoneTest < Test::Unit::TestCase
     assert zone1 == zone1
   end
 
+  def test_zone_match
+    zone = ActiveSupport::TimeZone['Eastern Time (US & Canada)']
+    assert zone =~ /Eastern/
+    assert zone =~ /New_York/
+    assert zone !~ /Nonexistent_Place/
+  end
+
   def test_to_s
     assert_equal "(GMT+03:00) Moscow", ActiveSupport::TimeZone['Moscow'].to_s
   end
-- 
1.5.5.1015.g9d258

