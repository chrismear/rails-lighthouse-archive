<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-03-11T16:15:16+00:00</created-at>
  <creator-id type="integer">140959</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6563</number>
  <permalink>model-with-namespace-doesnt-work-well</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag nil="true"></tag>
  <title>Model with namespace doesn't work well</title>
  <updated-at type="datetime">2011-03-11T20:04:23+00:00</updated-at>
  <user-id type="integer">7697</user-id>
  <version type="integer">2</version>
  <user-name>Andrew White</user-name>
  <creator-name>Erico</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6563</url>
  <priority-name>Low</priority-name>
  <original-body>Hi guys,

I create a controller and a model into a namespace but a very strange thing happens.

Here is my code:

class Admin::UsersController &lt; ApplicationController
  def index

        records1 = User.all
        records2 = User.all
  end 
end

The first code go normal, but the second occurs this errors:

ArgumentError in Admin/usersController#index 
Admin is not missing constant User!

activesupport (3.0.4) lib/active_support/dependencies.rb:479:in `load_missing_constant'
activesupport (3.0.4) lib/active_support/dependencies.rb:183:in `block in const_missing'
activesupport (3.0.4) lib/active_support/dependencies.rb:181:in `each'
activesupport (3.0.4) lib/active_support/dependencies.rb:181:in `const_missing'
app/controllers/admin/users_controller.rb:5:in `index'
actionpack (3.0.4) lib/action_controller/metal/implicit_render.rb:4:in `send_action'
actionpack (3.0.4) lib/abstract_controller/base.rb:150:in `process_action'
actionpack (3.0.4) lib/action_controller/metal/rendering.rb:11:in `process_action'
...

But when I use records2 = Admin::User.all, everything goes normal, very strange, I believe the application must have to assume the controller is in the same space and get the model from the namespace &quot;Admin&quot;, even works, but just once, the second command give the error above, very strange.</original-body>
  <latest-body>Hi guys,

I create a controller and a model into a namespace but a very strange thing happens.

Here is my code:

class Admin::UsersController &lt; ApplicationController
  def index

        records1 = User.all
        records2 = User.all
  end 
end

The first code go normal, but the second occurs this errors:

ArgumentError in Admin/usersController#index 
Admin is not missing constant User!

activesupport (3.0.4) lib/active_support/dependencies.rb:479:in `load_missing_constant'
activesupport (3.0.4) lib/active_support/dependencies.rb:183:in `block in const_missing'
activesupport (3.0.4) lib/active_support/dependencies.rb:181:in `each'
activesupport (3.0.4) lib/active_support/dependencies.rb:181:in `const_missing'
app/controllers/admin/users_controller.rb:5:in `index'
actionpack (3.0.4) lib/action_controller/metal/implicit_render.rb:4:in `send_action'
actionpack (3.0.4) lib/abstract_controller/base.rb:150:in `process_action'
actionpack (3.0.4) lib/action_controller/metal/rendering.rb:11:in `process_action'
...

But when I use records2 = Admin::User.all, everything goes normal, very strange, I believe the application must have to assume the controller is in the same space and get the model from the namespace &quot;Admin&quot;, even works, but just once, the second command give the error above, very strange.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi guys,&lt;/p&gt;
&lt;p&gt;I create a controller and a model into a namespace but a very
strange thing happens.&lt;/p&gt;
&lt;p&gt;Here is my code:&lt;/p&gt;
&lt;p&gt;class Admin::UsersController &amp;lt; ApplicationController&lt;br&gt;
def index&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    records1 = User.all
    records2 = User.all&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;The first code go normal, but the second occurs this errors:&lt;/p&gt;
&lt;p&gt;ArgumentError in Admin/usersController#index&lt;br&gt;
Admin is not missing constant User!&lt;/p&gt;
&lt;p&gt;activesupport (3.0.4) lib/active_support/dependencies.rb:479:in
&lt;code&gt;load_missing_constant' activesupport (3.0.4)
lib/active_support/dependencies.rb:183:in&lt;/code&gt;block in
const_missing'&lt;br&gt;
activesupport (3.0.4) lib/active_support/dependencies.rb:181:in
&lt;code&gt;each' activesupport (3.0.4)
lib/active_support/dependencies.rb:181:in&lt;/code&gt;const_missing'&lt;br&gt;
app/controllers/admin/users_controller.rb:5:in &lt;code&gt;index'
actionpack (3.0.4)
lib/action_controller/metal/implicit_render.rb:4:in&lt;/code&gt;send_action'&lt;br&gt;
actionpack (3.0.4) lib/abstract_controller/base.rb:150:in
&lt;code&gt;process_action' actionpack (3.0.4)
lib/action_controller/metal/rendering.rb:11:in&lt;/code&gt;process_action'&lt;br&gt;
...&lt;/p&gt;
&lt;p&gt;But when I use records2 = Admin::User.all, everything goes
normal, very strange, I believe the application must have to assume
the controller is in the same space and get the model from the
namespace &quot;Admin&quot;, even works, but just once, the second command
give the error above, very strange.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi guys,

I create a controller and a model into a namespace but a very strange thing happens.

Here is my code:

class Admin::UsersController &lt; ApplicationController
  def index

        records1 = User.all
        records2 = User.all
  end 
end

The first code go normal, but the second occurs this errors:

ArgumentError in Admin/usersController#index 
Admin is not missing constant User!

activesupport (3.0.4) lib/active_support/dependencies.rb:479:in `load_missing_constant'
activesupport (3.0.4) lib/active_support/dependencies.rb:183:in `block in const_missing'
activesupport (3.0.4) lib/active_support/dependencies.rb:181:in `each'
activesupport (3.0.4) lib/active_support/dependencies.rb:181:in `const_missing'
app/controllers/admin/users_controller.rb:5:in `index'
actionpack (3.0.4) lib/action_controller/metal/implicit_render.rb:4:in `send_action'
actionpack (3.0.4) lib/abstract_controller/base.rb:150:in `process_action'
actionpack (3.0.4) lib/action_controller/metal/rendering.rb:11:in `process_action'
...

But when I use records2 = Admin::User.all, everything goes normal, very strange, I believe the application must have to assume the controller is in the same space and get the model from the namespace &quot;Admin&quot;, even works, but just once, the second command give the error above, very strange.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi guys,&lt;/p&gt;
&lt;p&gt;I create a controller and a model into a namespace but a very
strange thing happens.&lt;/p&gt;
&lt;p&gt;Here is my code:&lt;/p&gt;
&lt;p&gt;class Admin::UsersController &amp;lt; ApplicationController&lt;br&gt;
def index&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    records1 = User.all
    records2 = User.all&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;The first code go normal, but the second occurs this errors:&lt;/p&gt;
&lt;p&gt;ArgumentError in Admin/usersController#index&lt;br&gt;
Admin is not missing constant User!&lt;/p&gt;
&lt;p&gt;activesupport (3.0.4) lib/active_support/dependencies.rb:479:in
&lt;code&gt;load_missing_constant' activesupport (3.0.4)
lib/active_support/dependencies.rb:183:in&lt;/code&gt;block in
const_missing'&lt;br&gt;
activesupport (3.0.4) lib/active_support/dependencies.rb:181:in
&lt;code&gt;each' activesupport (3.0.4)
lib/active_support/dependencies.rb:181:in&lt;/code&gt;const_missing'&lt;br&gt;
app/controllers/admin/users_controller.rb:5:in &lt;code&gt;index'
actionpack (3.0.4)
lib/action_controller/metal/implicit_render.rb:4:in&lt;/code&gt;send_action'&lt;br&gt;
actionpack (3.0.4) lib/abstract_controller/base.rb:150:in
&lt;code&gt;process_action' actionpack (3.0.4)
lib/action_controller/metal/rendering.rb:11:in&lt;/code&gt;process_action'&lt;br&gt;
...&lt;/p&gt;
&lt;p&gt;But when I use records2 = Admin::User.all, everything goes
normal, very strange, I believe the application must have to assume
the controller is in the same space and get the model from the
namespace &quot;Admin&quot;, even works, but just once, the second command
give the error above, very strange.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T16:15:16+00:00</created-at>
      <creator-id type="integer">140959</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6563</number>
      <permalink>model-with-namespace-doesnt-work-well</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Model with namespace doesn't work well</title>
      <updated-at type="datetime">2011-03-11T16:15:17+00:00</updated-at>
      <user-id type="integer">140959</user-id>
      <version type="integer">1</version>
      <user-name>Erico</user-name>
      <creator-name>Erico</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6563</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is a duplicate of #5383 - if you rewrite your class definitions so that they're not inline everything will work, e.g:

@@@ ruby
module Admin
  class UsersController &lt; ApplicationController
    @users = User.all
  end
end
@@@

This is because Ruby searches for constants in Object first when defined as ModuleName::ClassName but inside the parent module when nested properly. The first call works because the constant hasn't been loaded yet but the second call finds the already loaded constant. It works fine either way in production because all the models are preloaded. I had a look at seeing if it is fixable but there's no way of intercepting the lookup.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is a duplicate of &lt;a href=&quot;/projects/8994/tickets/5383&quot;
title=&quot;Ticket #5383&quot;&gt;#5383&lt;/a&gt; - if you rewrite your class
definitions so that they're not inline everything will work,
e.g:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module Admin
  class UsersController &amp;lt; ApplicationController
    @users = User.all
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is because Ruby searches for constants in Object first when
defined as ModuleName::ClassName but inside the parent module when
nested properly. The first call works because the constant hasn't
been loaded yet but the second call finds the already loaded
constant. It works fine either way in production because all the
models are preloaded. I had a look at seeing if it is fixable but
there's no way of intercepting the lookup.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-11T20:04:15+00:00</created-at>
      <creator-id type="integer">140959</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6563</number>
      <permalink>model-with-namespace-doesnt-work-well</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag nil="true"></tag>
      <title>Model with namespace doesn't work well</title>
      <updated-at type="datetime">2011-03-11T20:04:23+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>Erico</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6563</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
