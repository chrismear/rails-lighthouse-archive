<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-19T23:12:44+01:00</created-at>
  <creator-id type="integer">25962</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">1077</number>
  <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
  <priority type="integer">9</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>activerecord alias join named_scope patch table with_scope</tag>
  <title>problems with aliased joins</title>
  <updated-at type="datetime">2008-11-06T18:41:56+00:00</updated-at>
  <user-id type="integer">141</user-id>
  <version type="integer">15</version>
  <user-name>Michael Koziarski</user-name>
  <creator-name>David Stevenson</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
  <priority-name nil="true"></priority-name>
  <original-body>Named scopes are designed to be chained together in any order/combination.  If you join a table in one scope, and join the same table in another scope, it selects the same table twice and fails.

You can alias each join to a different name, but this leads to large number of more-or-less identical joins.

Solution: allow joins to be passed in string-array form:
@@@ ruby
named_scope :something {:join =&gt; [&quot;INNER JOIN x&quot;, &quot;INNER JOIN y&quot;, ...]}
named_scope :something_else {:join =&gt; &quot;INNER JOIN x&quot;}
# calling Model.something.something_else should only join in x once
@@@
Build a complete list of joins as an array from the beginning of the scoping process.  Carry the array all the way to add_joins! where the list of string-joins is uniqued and finally converted into a single string.

This doesn't solve the aliasing issues with using :join =&gt; :assoc AND :join =&gt; &quot;INNER JOIN assoc_table...&quot;.

-David Stevenson &amp; Joseph Palermo from PivotalLabs</original-body>
  <latest-body>Named scopes are designed to be chained together in any order/combination.  If you join a table in one scope, and join the same table in another scope, it selects the same table twice and fails.

You can alias each join to a different name, but this leads to large number of more-or-less identical joins.

Solution: allow joins to be passed in string-array form:
@@@ ruby
named_scope :something {:join =&gt; [&quot;INNER JOIN x&quot;, &quot;INNER JOIN y&quot;, ...]}
named_scope :something_else {:join =&gt; &quot;INNER JOIN x&quot;}
# calling Model.something.something_else should only join in x once
@@@
Build a complete list of joins as an array from the beginning of the scoping process.  Carry the array all the way to add_joins! where the list of string-joins is uniqued and finally converted into a single string.

This doesn't solve the aliasing issues with using :join =&gt; :assoc AND :join =&gt; &quot;INNER JOIN assoc_table...&quot;.

-David Stevenson &amp; Joseph Palermo from PivotalLabs</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Named scopes are designed to be chained together in any
order/combination. If you join a table in one scope, and join the
same table in another scope, it selects the same table twice and
fails.&lt;/p&gt;
&lt;p&gt;You can alias each join to a different name, but this leads to
large number of more-or-less identical joins.&lt;/p&gt;
&lt;p&gt;Solution: allow joins to be passed in string-array form:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
named_scope :something {:join =&amp;gt; [&amp;quot;INNER JOIN x&amp;quot;, &amp;quot;INNER JOIN y&amp;quot;, ...]}
named_scope :something_else {:join =&amp;gt; &amp;quot;INNER JOIN x&amp;quot;}
# calling Model.something.something_else should only join in x once
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build a complete list of joins as an array from the beginning of
the scoping process. Carry the array all the way to add_joins!
where the list of string-joins is uniqued and finally converted
into a single string.&lt;/p&gt;
&lt;p&gt;This doesn't solve the aliasing issues with using :join =&amp;gt;
:assoc AND :join =&amp;gt; &quot;INNER JOIN assoc_table...&quot;.&lt;/p&gt;
&lt;p&gt;-David Stevenson &amp;amp; Joseph Palermo from PivotalLabs&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Named scopes are designed to be chained together in any order/combination.  If you join a table in one scope, and join the same table in another scope, it selects the same table twice and fails.

You can alias each join to a different name, but this leads to large number of more-or-less identical joins.

Solution: allow joins to be passed in string-array form:
@@@ ruby
named_scope :something {:join =&gt; [&quot;INNER JOIN x&quot;, &quot;INNER JOIN y&quot;, ...]}
named_scope :something_else {:join =&gt; &quot;INNER JOIN x&quot;}
# calling Model.something.something_else should only join in x once
@@@
Build a complete list of joins as an array from the beginning of the scoping process.  Carry the array all the way to add_joins! where the list of string-joins is uniqued and finally converted into a single string.

This doesn't solve the aliasing issues with using :join =&gt; :assoc AND :join =&gt; &quot;INNER JOIN assoc_table...&quot;.

-David Stevenson &amp; Joseph Palermo from PivotalLabs</body>
      <body-html>&lt;div&gt;&lt;p&gt;Named scopes are designed to be chained together in any
order/combination. If you join a table in one scope, and join the
same table in another scope, it selects the same table twice and
fails.&lt;/p&gt;
&lt;p&gt;You can alias each join to a different name, but this leads to
large number of more-or-less identical joins.&lt;/p&gt;
&lt;p&gt;Solution: allow joins to be passed in string-array form:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
named_scope :something {:join =&amp;gt; [&amp;quot;INNER JOIN x&amp;quot;, &amp;quot;INNER JOIN y&amp;quot;, ...]}
named_scope :something_else {:join =&amp;gt; &amp;quot;INNER JOIN x&amp;quot;}
# calling Model.something.something_else should only join in x once
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build a complete list of joins as an array from the beginning of
the scoping process. Carry the array all the way to add_joins!
where the list of string-joins is uniqued and finally converted
into a single string.&lt;/p&gt;
&lt;p&gt;This doesn't solve the aliasing issues with using :join =&amp;gt;
:assoc AND :join =&amp;gt; &quot;INNER JOIN assoc_table...&quot;.&lt;/p&gt;
&lt;p&gt;-David Stevenson &amp;amp; Joseph Palermo from PivotalLabs&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-19T23:12:44+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>Chaining scopes with duplicate joins causes alias problem</title>
      <updated-at type="datetime">2008-09-19T23:12:46+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">1</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>So silently removing the duplicates is always safe?  There aren't any situations where we should be raising or warning the developer?</body>
      <body-html>&lt;div&gt;&lt;p&gt;So silently removing the duplicates is always safe? There aren't
any situations where we should be raising or warning the
developer?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-23T13:11:11+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>Chaining scopes with duplicate joins causes alias problem</title>
      <updated-at type="datetime">2008-09-23T13:11:14+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Since the merged includes have to be string identical, it's just as safe or safer to always merge when possible.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Since the merged includes have to be string identical, it's just
as safe or safer to always merge when possible.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-23T17:46:54+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>Chaining scopes with duplicate joins causes alias problem</title>
      <updated-at type="datetime">2008-09-23T17:46:57+01:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">3</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>OK, can you format the patch as per the guides:

http://rails.lighthouseapp.com/projects/8994/sending-patches</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, can you format the patch as per the guides:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/sending-patches&quot;&gt;http://rails.lighthouseapp.com/p...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-23T19:30:17+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>Chaining scopes with duplicate joins causes alias problem</title>
      <updated-at type="datetime">2008-09-23T19:30:22+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">4</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here you go.  Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here you go. Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-23T21:42:21+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>Chaining scopes with duplicate joins causes alias problem</title>
      <updated-at type="datetime">2008-09-23T21:42:23+01:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">5</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [487758b3b88a38da3a75900839aea03774904fe1]) Allowed passing arrays-of-strings to :join everywhere. Merge duplicate join strings to avoid table aliasing problems.

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
[#1077 state:committed]
http://github.com/rails/rails/commit/487758b3b88a38da3a75900839aea03774904fe1</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [487758b3b88a38da3a75900839aea03774904fe1]) Allowed
passing arrays-of-strings to :join everywhere. Merge duplicate join
strings to avoid table aliasing problems.&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt; [&lt;a href=&quot;/projects/8994/tickets/1077&quot; title=&quot;Ticket #1077&quot;&gt;#1077&lt;/a&gt;
state:committed] &lt;a href=&quot;http://github.com/rails/rails/commit/487758b3b88a38da3a75900839aea03774904fe1&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-09-24T12:35:33+01:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>Chaining scopes with duplicate joins causes alias problem</title>
      <updated-at type="datetime">2008-09-24T12:35:34+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">6</version>
      <user-name>Repository</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Hi,

I have two associations between two tables. One is a one to many and the other is many to may through. To be able to use named_scopes I must have aliased joins to address the right attribute. However if I do, rails avoids to have the two different joins because it thinks its a duplication of the joins.

Here is an example:

# search members in one or many country
scope = scope.scoped( 
  :conditions =&gt; [&quot;property_country.short IN (?)&quot;, country_keys],
  :joins =&gt; 'INNER JOIN countries AS property_country ON property_country.id = memberships.property_country_id' ) if country_keys.size &gt; 0
    
# my_country 
scope = scope.scoped(
  :conditions =&gt; [&quot;vacation_countries.short = ?&quot;, my_country],
  :joins =&gt; &quot;INNER JOIN join_vacation_countries ON (memberships.id = join_vacation_countries.membership_id) INNER JOIN countries AS vacation_countries ON (vacation_countries.id = join_vacation_countries.country_id)&quot; ) unless my_country.blank?

I guess that is a limitation of the patch above and needs further refinement.

Thanks
Jens</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I have two associations between two tables. One is a one to many
and the other is many to may through. To be able to use
named_scopes I must have aliased joins to address the right
attribute. However if I do, rails avoids to have the two different
joins because it thinks its a duplication of the joins.&lt;/p&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;h1&gt;search members in one or many country&lt;/h1&gt;
&lt;p&gt;scope = scope.scoped( :conditions =&amp;gt; [&quot;property_country.short
IN (?)&quot;, country_keys], :joins =&amp;gt; 'INNER JOIN countries AS
property_country ON property_country.id =
memberships.property_country_id' ) if country_keys.size &amp;gt; 0&lt;/p&gt;
&lt;h1&gt;my_country&lt;/h1&gt;
&lt;p&gt;scope = scope.scoped( :conditions =&amp;gt;
[&quot;vacation_countries.short = ?&quot;, my_country], :joins =&amp;gt; &quot;INNER
JOIN join_vacation_countries ON (memberships.id =
join_vacation_countries.membership_id) INNER JOIN countries AS
vacation_countries ON (vacation_countries.id =
join_vacation_countries.country_id)&quot; ) unless my_country.blank?&lt;/p&gt;
&lt;p&gt;I guess that is a limitation of the patch above and needs
further refinement.&lt;/p&gt;
&lt;p&gt;Thanks Jens&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-01T11:19:35+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:title: Chaining scopes with duplicate joins causes alias problem
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>problems with aliased joins</title>
      <updated-at type="datetime">2008-11-01T11:19:38+00:00</updated-at>
      <user-id type="integer">36216</user-id>
      <version type="integer">7</version>
      <user-name>JensC</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>JensC: Can you provide us with a test case for active record which demonstrates this bug.

David &amp; Joseph: Any thoughts?

Moving to block 2.2 final</body>
      <body-html>&lt;div&gt;&lt;p&gt;JensC: Can you provide us with a test case for active record
which demonstrates this bug.&lt;/p&gt;
&lt;p&gt;David &amp;amp; Joseph: Any thoughts?&lt;/p&gt;
&lt;p&gt;Moving to block 2.2 final&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-01T11:23:18+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:state: committed
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>problems with aliased joins</title>
      <updated-at type="datetime">2008-11-01T11:23:20+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">8</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Koz &amp; Jens,

I'm afraid I don't see the issue that Jens is trying to show us.  The patch that we submitted simply removes two completely-string-identical joins.  These two would be removed:

@@@ ruby
scope = scope.scoped(:joins =&gt; &quot;INNER JOIN countries AS country1 ON something&quot;)
scope = scope.scoped(:joins =&gt; &quot;INNER JOIN countries AS country1 ON something&quot;)
@@@

These two would not be removed, as they are not string identical:

@@@ ruby
scope = scope.scoped(:joins =&gt; &quot;INNER JOIN countries AS country1 ON something&quot;)
scope = scope.scoped(:joins =&gt; &quot;INNER JOIN countries AS country2 ON something&quot;)
@@@

It's a very conservative removal.  If an association generates a join, and a named scope also includes a string identical join, they will of course be &quot;uniq&quot;d into a single join (which should not have any negative consequences, since one copy is still included).  It even does not remove them in this case, when they should be obviously removed:

@@@ ruby
scope = scope.scoped(:joins =&gt; &quot;INNER JOIN countries AS country1 ON something&quot;)
scope = scope.scoped(:joins =&gt; &quot;INNER JOIN countries AS country1 ON something INNER JOIN something_else ON whatever&quot;)
@@@

The &quot;right&quot; way to write the above so that they are uniq'd would be this:

@@@ ruby
scope = scope.scoped(:joins =&gt; &quot;INNER JOIN countries AS country1 ON something&quot;)
scope = scope.scoped(:joins =&gt; [&quot;INNER JOIN countries AS country1 ON something&quot;, &quot;INNER JOIN something_else ON whatever&quot;])
@@@

Can I get some clarification, perhaps a failing test on what the issue is from Jens?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Koz &amp;amp; Jens,&lt;/p&gt;
&lt;p&gt;I'm afraid I don't see the issue that Jens is trying to show us.
The patch that we submitted simply removes two
completely-string-identical joins. These two would be removed:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
scope = scope.scoped(:joins =&amp;gt; &amp;quot;INNER JOIN countries AS country1 ON something&amp;quot;)
scope = scope.scoped(:joins =&amp;gt; &amp;quot;INNER JOIN countries AS country1 ON something&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These two would not be removed, as they are not string
identical:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
scope = scope.scoped(:joins =&amp;gt; &amp;quot;INNER JOIN countries AS country1 ON something&amp;quot;)
scope = scope.scoped(:joins =&amp;gt; &amp;quot;INNER JOIN countries AS country2 ON something&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's a very conservative removal. If an association generates a
join, and a named scope also includes a string identical join, they
will of course be &quot;uniq&quot;d into a single join (which should not have
any negative consequences, since one copy is still included). It
even does not remove them in this case, when they should be
obviously removed:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
scope = scope.scoped(:joins =&amp;gt; &amp;quot;INNER JOIN countries AS country1 ON something&amp;quot;)
scope = scope.scoped(:joins =&amp;gt; &amp;quot;INNER JOIN countries AS country1 ON something INNER JOIN something_else ON whatever&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &quot;right&quot; way to write the above so that they are uniq'd would
be this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
scope = scope.scoped(:joins =&amp;gt; &amp;quot;INNER JOIN countries AS country1 ON something&amp;quot;)
scope = scope.scoped(:joins =&amp;gt; [&amp;quot;INNER JOIN countries AS country1 ON something&amp;quot;, &amp;quot;INNER JOIN something_else ON whatever&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can I get some clarification, perhaps a failing test on what the
issue is from Jens?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-01T19:00:12+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>problems with aliased joins</title>
      <updated-at type="datetime">2008-11-01T19:00:18+00:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">9</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Neither, it seems it should work to me...

Jens, can you please give us an example either in the rails tests or a simple stand-alone application?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Neither, it seems it should work to me...&lt;/p&gt;
&lt;p&gt;Jens, can you please give us an example either in the rails
tests or a simple stand-alone application?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-01T19:08:12+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>problems with aliased joins</title>
      <updated-at type="datetime">2008-11-01T19:08:14+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">10</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Oh hell! After creating an example that should show exactly what doesn't work ... it worked! After some more digging I noticed in my environment.rb that I still had

RAILS_GEM_VERSION = '2.1.2' unless defined? RAILS_GEM_VERSION

defined. It works in 2.2.0 RC 1. I am soooo sorry for that :-/.
Next time I promise to provide an example before starting a bug report.

Once again sorry guys anf Thnx a lot.
Jens</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oh hell! After creating an example that should show exactly what
doesn't work ... it worked! After some more digging I noticed in my
environment.rb that I still had&lt;/p&gt;
&lt;p&gt;RAILS_GEM_VERSION = '2.1.2' unless defined?
RAILS_GEM_VERSION&lt;/p&gt;
&lt;p&gt;defined. It works in 2.2.0 RC 1. I am soooo sorry for that :-/.
Next time I promise to provide an example before starting a bug
report.&lt;/p&gt;
&lt;p&gt;Once again sorry guys anf Thnx a lot. Jens&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-03T10:55:26+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>problems with aliased joins</title>
      <updated-at type="datetime">2008-11-03T10:55:29+00:00</updated-at>
      <user-id type="integer">36216</user-id>
      <version type="integer">11</version>
      <user-name>JensC</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-04T17:41:49+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>problems with aliased joins</title>
      <updated-at type="datetime">2008-11-04T17:41:51+00:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">12</version>
      <user-name>DHH</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>DHH - Why did you just mark this invalid?  Jens said there was no actual bug, and he made a mistake in commenting on this at all?</body>
      <body-html>&lt;div&gt;&lt;p&gt;DHH - Why did you just mark this invalid? Jens said there was no
actual bug, and he made a mistake in commenting on this at all?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-04T17:43:38+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>problems with aliased joins</title>
      <updated-at type="datetime">2008-11-04T17:43:42+00:00</updated-at>
      <user-id type="integer">25962</user-id>
      <version type="integer">13</version>
      <user-name>David Stevenson</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Ah, read it wrong. Reopened.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ah, read it wrong. Reopened.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-04T17:47:29+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:state: invalid
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>problems with aliased joins</title>
      <updated-at type="datetime">2008-11-04T17:47:34+00:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">14</version>
      <user-name>DHH</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-06T18:41:53+00:00</created-at>
      <creator-id type="integer">25962</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1077</number>
      <permalink>chaining-scopes-with-duplicate-joins-causes-alias-problem</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord alias join named_scope patch table with_scope</tag>
      <title>problems with aliased joins</title>
      <updated-at type="datetime">2008-11-06T18:41:56+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">15</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>David Stevenson</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1077</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>7aae3b90200caf50e7adb8ebf45596f8fcad5d6e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-19T23:12:44+01:00</created-at>
      <filename>rails__passing_joins_as_an_array_removes_duplicates.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">47286</id>
      <size type="integer">6785</size>
      <uploader-id type="integer">25962</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/47286/rails__passing_joins_as_an_array_removes_duplicates.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>24c758df9230ea90ece624e994e6ecf3b6be289f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-23T21:42:21+01:00</created-at>
      <filename>rails__passing_joins_as_an_array_removes_duplicates__correct_format.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">48127</id>
      <size type="integer">7435</size>
      <uploader-id type="integer">25962</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/48127/rails__passing_joins_as_an_array_removes_duplicates__correct_format.patch</url>
    </attachment>
  </attachments>
</ticket>
