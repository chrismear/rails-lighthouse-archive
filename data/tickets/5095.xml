<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">40263</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-12T16:01:18+01:00</created-at>
  <creator-id type="integer">106874</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">5095</number>
  <permalink>unexpected-side-effect-of-update_attribute-implementation-change-on-associations-and-attributes</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord &quot;rails 3&quot;</tag>
  <title>Unexpected side effect of update_attribute implementation change on associations and attributes</title>
  <updated-at type="datetime">2010-07-12T21:01:50+01:00</updated-at>
  <user-id type="integer">40263</user-id>
  <version type="integer">3</version>
  <user-name>Neeraj Singh</user-name>
  <creator-name>Hugh Kelsey</creator-name>
  <assigned-user-name>Neeraj Singh</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5095</url>
  <milestone-title>3.x</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>I believe this was the result of 01629d180468049d17a8 as rolling back to the commit before removed the issue.

Having:

@@@
class Account &lt; ActiveRecord::Base
  has_many :users
end
@@@

@@@
class User &lt; ActiveRecord::Base

  belongs_to :account
  
  after_create :create_account
  
  def create_account
    self.update_attribute(:account, Account.create) if self.account_id.blank?
  end
  
end
@@@

I now get a sqlite3 error that there is no column 'account' for the Users table. I'm not sure if this was intentional or not. Additionally:

@@@
class Task &lt; History

  attr_accessor :complete_note
  
  def complete_note=(complete_note)
    self.body = body + &quot;\n&quot; + complete_note
  end

end
@@@

@@@
@task.update_attribute(:complete_note, &quot;Foo Bar&quot;)
@@@

Produces the same error, no such column 'complete_note' in 'tasks' table.

The commit also mentions a change where updated_at doesn't change with update_attribute, does that pose any issues for anyone else or is it just me?</original-body>
  <latest-body>I believe this was the result of 01629d180468049d17a8 as rolling back to the commit before removed the issue.

Having:

@@@
class Account &lt; ActiveRecord::Base
  has_many :users
end
@@@

@@@
class User &lt; ActiveRecord::Base

  belongs_to :account
  
  after_create :create_account
  
  def create_account
    self.update_attribute(:account, Account.create) if self.account_id.blank?
  end
  
end
@@@

I now get a sqlite3 error that there is no column 'account' for the Users table. I'm not sure if this was intentional or not. Additionally:

@@@
class Task &lt; History

  attr_accessor :complete_note
  
  def complete_note=(complete_note)
    self.body = body + &quot;\n&quot; + complete_note
  end

end
@@@

@@@
@task.update_attribute(:complete_note, &quot;Foo Bar&quot;)
@@@

Produces the same error, no such column 'complete_note' in 'tasks' table.

The commit also mentions a change where updated_at doesn't change with update_attribute, does that pose any issues for anyone else or is it just me?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I believe this was the result of 01629d180468049d17a8 as rolling
back to the commit before removed the issue.&lt;/p&gt;
&lt;p&gt;Having:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Account &amp;lt; ActiveRecord::Base
  has_many :users
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;class User &amp;lt; ActiveRecord::Base

  belongs_to :account
  
  after_create :create_account
  
  def create_account
    self.update_attribute(:account, Account.create) if self.account_id.blank?
  end
  
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I now get a sqlite3 error that there is no column 'account' for
the Users table. I'm not sure if this was intentional or not.
Additionally:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Task &amp;lt; History

  attr_accessor :complete_note
  
  def complete_note=(complete_note)
    self.body = body + &quot;\n&quot; + complete_note
  end

end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;@task.update_attribute(:complete_note, &quot;Foo Bar&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Produces the same error, no such column 'complete_note' in
'tasks' table.&lt;/p&gt;
&lt;p&gt;The commit also mentions a change where updated_at doesn't
change with update_attribute, does that pose any issues for anyone
else or is it just me?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I believe this was the result of 01629d180468049d17a8 as rolling back to the commit before removed the issue.

Having:

@@@
class Account &lt; ActiveRecord::Base
  has_many :users
end
@@@

@@@
class User &lt; ActiveRecord::Base

  belongs_to :account
  
  after_create :create_account
  
  def create_account
    self.update_attribute(:account, Account.create) if self.account_id.blank?
  end
  
end
@@@

I now get a sqlite3 error that there is no column 'account' for the Users table. I'm not sure if this was intentional or not. Additionally:

@@@
class Task &lt; History

  attr_accessor :complete_note
  
  def complete_note=(complete_note)
    self.body = body + &quot;\n&quot; + complete_note
  end

end
@@@

@@@
@task.update_attribute(:complete_note, &quot;Foo Bar&quot;)
@@@

Produces the same error, no such column 'complete_note' in 'tasks' table.

The commit also mentions a change where updated_at doesn't change with update_attribute, does that pose any issues for anyone else or is it just me?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I believe this was the result of 01629d180468049d17a8 as rolling
back to the commit before removed the issue.&lt;/p&gt;
&lt;p&gt;Having:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Account &amp;lt; ActiveRecord::Base
  has_many :users
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;class User &amp;lt; ActiveRecord::Base

  belongs_to :account
  
  after_create :create_account
  
  def create_account
    self.update_attribute(:account, Account.create) if self.account_id.blank?
  end
  
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I now get a sqlite3 error that there is no column 'account' for
the Users table. I'm not sure if this was intentional or not.
Additionally:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Task &amp;lt; History

  attr_accessor :complete_note
  
  def complete_note=(complete_note)
    self.body = body + &quot;\n&quot; + complete_note
  end

end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;@task.update_attribute(:complete_note, &quot;Foo Bar&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Produces the same error, no such column 'complete_note' in
'tasks' table.&lt;/p&gt;
&lt;p&gt;The commit also mentions a change where updated_at doesn't
change with update_attribute, does that pose any issues for anyone
else or is it just me?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-12T16:01:18+01:00</created-at>
      <creator-id type="integer">106874</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5095</number>
      <permalink>unexpected-side-effect-of-update_attribute-implementation-change-on-associations-and-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Unexpected side effect of update_attribute implementation change on associations and attributes</title>
      <updated-at type="datetime">2010-07-12T16:04:11+01:00</updated-at>
      <user-id type="integer">106874</user-id>
      <version type="integer">1</version>
      <user-name>Hugh Kelsey</user-name>
      <creator-name>Hugh Kelsey</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5095</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40263</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-12T17:25:29+01:00</created-at>
      <creator-id type="integer">106874</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:priority: 0
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5095</number>
      <permalink>unexpected-side-effect-of-update_attribute-implementation-change-on-associations-and-attributes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord &quot;rails 3&quot;</tag>
      <title>Unexpected side effect of update_attribute implementation change on associations and attributes</title>
      <updated-at type="datetime">2010-07-12T17:25:33+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Hugh Kelsey</creator-name>
      <assigned-user-name>Neeraj Singh</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5095</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40263</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt; The commit also mentions a change where updated_at doesn't change with update_attribute, does that pose any issues for anyone else or is it just me?

updated_at/on will always change. I am not able to see where in commit message I mentioned that updated_at/on will not change.

The idea behind update_attribute is that user should be pretty much assured that update_attribute changes the field in the database. That is why validation and callbacks are not called so that no one can prevent the update to the database.

case 1

@@@ ruby
self.update_attribute(:account, Account.create)
@@@

Above case is _not_ supported and that is okay. That case can be changed to


@@@ ruby
self.update_attribute(:account_id, Account.create.id)
@@@


case 2

@@@ ruby
@task.update_attribute(:complete_note, &quot;Foo Bar&quot;)
@@@

In the above case only database change should take place is to change updated_at/on. And for that you can simply do

@@@ ruby
@task.touch
@@@

I understand that update_attribute would be used in a lot lesser number of cases and that is the intent. update_attributes should be used in majority of cases and update_attribute should be limited to a few cases where you want to update a field. For example after sending out an email. If a bug prevents marking that field as updated then user might get a number of emails delivered to him/her. 

Discussed the issue with Jos&#233; Valim and he is okay with it.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;The commit also mentions a change where updated_at doesn't
change with update_attribute, does that pose any issues for anyone
else or is it just me?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;updated_at/on will always change. I am not able to see where in
commit message I mentioned that updated_at/on will not change.&lt;/p&gt;
&lt;p&gt;The idea behind update_attribute is that user should be pretty
much assured that update_attribute changes the field in the
database. That is why validation and callbacks are not called so
that no one can prevent the update to the database.&lt;/p&gt;
&lt;p&gt;case 1&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;self.update_attribute(:account, Account.create)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Above case is &lt;em&gt;not&lt;/em&gt; supported and that is okay. That case
can be changed to&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;self.update_attribute(:account_id, Account.create.id)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;case 2&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;@task.update_attribute(:complete_note, &quot;Foo Bar&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the above case only database change should take place is to
change updated_at/on. And for that you can simply do&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;@task.touch&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I understand that update_attribute would be used in a lot lesser
number of cases and that is the intent. update_attributes should be
used in majority of cases and update_attribute should be limited to
a few cases where you want to update a field. For example after
sending out an email. If a bug prevents marking that field as
updated then user might get a number of emails delivered to
him/her.&lt;/p&gt;
&lt;p&gt;Discussed the issue with Jos&amp;eacute; Valim and he is okay with
it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-12T21:01:46+01:00</created-at>
      <creator-id type="integer">106874</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">5095</number>
      <permalink>unexpected-side-effect-of-update_attribute-implementation-change-on-associations-and-attributes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord &quot;rails 3&quot;</tag>
      <title>Unexpected side effect of update_attribute implementation change on associations and attributes</title>
      <updated-at type="datetime">2010-07-12T21:01:50+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">3</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Hugh Kelsey</creator-name>
      <assigned-user-name>Neeraj Singh</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5095</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
