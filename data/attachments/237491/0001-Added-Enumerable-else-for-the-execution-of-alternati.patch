From b9522d117775a116250ed219818e9a829d4c6e8e Mon Sep 17 00:00:00 2001
From: Luca Guidi <guidi.luca@gmail.com>
Date: Thu, 6 Aug 2009 16:00:44 +0200
Subject: [PATCH] Added Enumerable#else for the execution of alternative code block when iterating on empty collections

  products.each do |product|
    puts product.name
  end.else do
    puts "Sorry, no products here."
  end
---
 .../lib/active_support/core_ext/enumerable.rb      |   11 +++++++++++
 activesupport/test/core_ext/enumerable_test.rb     |   10 ++++++++++
 2 files changed, 21 insertions(+), 0 deletions(-)

diff --git a/activesupport/lib/active_support/core_ext/enumerable.rb b/activesupport/lib/active_support/core_ext/enumerable.rb
index 434a32b..bda14ab 100644
--- a/activesupport/lib/active_support/core_ext/enumerable.rb
+++ b/activesupport/lib/active_support/core_ext/enumerable.rb
@@ -112,4 +112,15 @@ module Enumerable
   def none?(&block)
     !any?(&block)
   end unless [].respond_to?(:none?)
+
+  # Executes the given block if the enumerable is empty.
+  #
+  #  products.each do |product|
+  #    # ...
+  #  end.else do
+  #    puts "Sorry, no products here."
+  #  end
+  def else
+    self.try(:empty?) ? yield : self
+  end
 end
diff --git a/activesupport/test/core_ext/enumerable_test.rb b/activesupport/test/core_ext/enumerable_test.rb
index 8853938..af26b7e 100644
--- a/activesupport/test/core_ext/enumerable_test.rb
+++ b/activesupport/test/core_ext/enumerable_test.rb
@@ -92,4 +92,14 @@ class EnumerableTests < Test::Unit::TestCase
     assert ![ 1, 2 ].none? {|x| x > 1 }
     assert [ 1, 1 ].none? {|x| x > 1 }
   end
+
+  def test_else
+    actual = %w(a b c).map { |e| e.upcase }.else { "else" }
+    assert_equal ["A", "B", "C"], actual
+    actual = %w().each { |e| e.upcase }.else { "else" }
+    assert_equal "else", actual
+
+    assert_nothing_raised(LocalJumpError) { %w(a b c).map { |e| e.upcase }.else }
+    assert_raise(LocalJumpError) { %w().map {}.else }
+  end
 end
-- 
1.6.3.3

