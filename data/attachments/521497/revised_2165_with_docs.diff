From d9b9d993c28ce45566608754afc11b580dfd2293 Mon Sep 17 00:00:00 2001
From: Marc Lainez <lainezmarc@Lainez-Marcs-iMac.local>
Date: Thu, 6 May 2010 14:32:20 +0200
Subject: [PATCH 1/2] added support for html attributes in options_for_select [#2165]

---
 .../lib/action_view/helpers/form_options_helper.rb |   29 +++++++---
 .../test/template/form_options_helper_test.rb      |   58 ++++++++++++++++++--
 2 files changed, 72 insertions(+), 15 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/form_options_helper.rb b/actionpack/lib/action_view/helpers/form_options_helper.rb
index 8f8db54..fe3c7aa 100644
--- a/actionpack/lib/action_view/helpers/form_options_helper.rb
+++ b/actionpack/lib/action_view/helpers/form_options_helper.rb
@@ -52,16 +52,16 @@ module ActionView
     #     <option value="2">Sam</option>
     #     <option value="3">Tobias</option>
     #   </select>
-    # 
-    # Like the other form helpers, +select+ can accept an <tt>:index</tt> option to manually set the ID used in the resulting output. Unlike other helpers, +select+ expects this 
+    #
+    # Like the other form helpers, +select+ can accept an <tt>:index</tt> option to manually set the ID used in the resulting output. Unlike other helpers, +select+ expects this
     # option to be in the +html_options+ parameter.
-    # 
-    # Example: 
-    # 
+    #
+    # Example:
+    #
     #   select("album[]", "genre", %w[rap rock country], {}, { :index => nil })
-    # 
+    #
     # becomes:
-    # 
+    #
     #   <select name="album[][genre]" id="album__genre">
     #     <option value="rap">rap</option>
     #     <option value="rock">rock</option>
@@ -139,7 +139,7 @@ module ActionView
       # The <tt>:value_method</tt> and <tt>:text_method</tt> parameters are methods to be called on each member
       # of +collection+. The return values are used as the +value+ attribute and contents of each
       # <tt><option></tt> tag, respectively.
-      # 
+      #
       # Example object structure for use with this method:
       #   class Post < ActiveRecord::Base
       #     belongs_to :author
@@ -284,6 +284,7 @@ module ActionView
       #     <option value="Free" selected="selected">Free</option>\n<option value="Basic">Basic</option>\n<option value="Advanced">Advanced</option>\n<option value="Super Platinum" disabled="disabled">Super Platinum</option>
       #
       # NOTE: Only the option tags are returned, you have to wrap this call in a regular HTML select tag.
+
       def options_for_select(container, selected = nil)
         return container if String === container
 
@@ -291,10 +292,15 @@ module ActionView
         selected, disabled = extract_selected_and_disabled(selected)
 
         options_for_select = container.inject([]) do |options, element|
+          element = element.to_a.flatten unless Array === element # NOTE: added to avoid errors when using .reject method
+          html_options = html_attributes_from(element)            # NOTE: added to collect attributes from element
+          element.reject! {|i| Hash === i}                        # NOTE: added to remove attributes from element
+
           text, value = option_text_and_value(element)
           selected_attribute = ' selected="selected"' if option_value_selected?(value, selected)
           disabled_attribute = ' disabled="disabled"' if disabled && option_value_selected?(value, disabled)
-          options << %(<option value="#{html_escape(value.to_s)}"#{selected_attribute}#{disabled_attribute}>#{html_escape(text.to_s)}</option>)
+          # NOTE: following is modified to interpolate html_options by adding only: #{html_options}
+          options << %(<option value="#{html_escape(value.to_s)}"#{html_options}#{selected_attribute}#{disabled_attribute}>#{html_escape(text.to_s)}</option>)
         end
 
         options_for_select.join("\n").html_safe
@@ -486,6 +492,11 @@ module ActionView
       end
 
       private
+        def html_attributes_from(element)
+          # string of html_attributes from hash data in element
+          element.reject {|i| i unless Hash === i}.inject({}) {|a,i| a.merge i }.collect {|k,v| %( #{k}="#{v}")}.join
+        end
+
         def option_text_and_value(option)
           # Options are [text, value] pairs or strings used for both.
           if !option.is_a?(String) and option.respond_to?(:first) and option.respond_to?(:last)
diff --git a/actionpack/test/template/form_options_helper_test.rb b/actionpack/test/template/form_options_helper_test.rb
index 98503c3..bc64ca6 100644
--- a/actionpack/test/template/form_options_helper_test.rb
+++ b/actionpack/test/template/form_options_helper_test.rb
@@ -300,7 +300,7 @@ class FormOptionsHelperTest < ActionView::TestCase
     output_buffer = fields_for :post, @post do |f|
       concat f.select(:category, %w( abe <mus> hest))
     end
-  
+
     assert_dom_equal(
       "<select id=\"post_category\" name=\"post[category]\"><option value=\"abe\">abe</option>\n<option value=\"&lt;mus&gt;\" selected=\"selected\">&lt;mus&gt;</option>\n<option value=\"hest\">hest</option></select>",
       output_buffer
@@ -416,11 +416,11 @@ class FormOptionsHelperTest < ActionView::TestCase
   def test_select_with_index_option
     @album = Album.new
     @album.id = 1
-  
-    expected = "<select id=\"album__genre\" name=\"album[][genre]\"><option value=\"rap\">rap</option>\n<option value=\"rock\">rock</option>\n<option value=\"country\">country</option></select>"    
+
+    expected = "<select id=\"album__genre\" name=\"album[][genre]\"><option value=\"rap\">rap</option>\n<option value=\"rock\">rock</option>\n<option value=\"country\">country</option></select>"
 
     assert_dom_equal(
-      expected, 
+      expected,
       select("album[]", "genre", %w[rap rock country], {}, { :index => nil })
     )
   end
@@ -469,7 +469,7 @@ class FormOptionsHelperTest < ActionView::TestCase
     output_buffer = fields_for :post, @post do |f|
       concat f.collection_select(:author_name, dummy_posts, :author_name, :author_name)
     end
-  
+
     assert_dom_equal(
       "<select id=\"post_author_name\" name=\"post[author_name]\"><option value=\"&lt;Abe&gt;\">&lt;Abe&gt;</option>\n<option value=\"Babe\" selected=\"selected\">Babe</option>\n<option value=\"Cabe\">Cabe</option></select>",
       output_buffer
@@ -577,7 +577,7 @@ class FormOptionsHelperTest < ActionView::TestCase
     output_buffer = fields_for :firm, @firm do |f|
       concat f.time_zone_select(:time_zone)
     end
-  
+
     assert_dom_equal(
       "<select id=\"firm_time_zone\" name=\"firm[time_zone]\">" +
       "<option value=\"A\">A</option>\n" +
@@ -767,6 +767,52 @@ class FormOptionsHelperTest < ActionView::TestCase
                    html
   end
 
+  # Tests for options_for_select
+  def test_options_for_select_with_element_attributes
+    assert_dom_equal(
+      "<option value=\"&lt;Denmark&gt;\" class=\"bold\">&lt;Denmark&gt;</option>\n<option value=\"USA\" onclick=\"alert('Hello World');\">USA</option>\n<option value=\"Sweden\">Sweden</option>\n<option value=\"Germany\">Germany</option>",
+      options_for_select([ ["<Denmark>", {:class=>'bold'}], ["USA", {:onclick => "alert('Hello World');"}], {"Sweden" => "Sweden"}, "Germany"])
+    )
+  end
+  def test_options_for_select_with_element_attributes_and_selection
+    assert_dom_equal(
+      "<option value=\"&lt;Denmark&gt;\">&lt;Denmark&gt;</option>\n<option value=\"USA\" class=\"bold\" selected=\"selected\">USA</option>\n<option value=\"Sweden\">Sweden</option>",
+      options_for_select([ "<Denmark>", ["USA", {:class=>'bold'}], "Sweden" ], "USA")
+    )
+  end
+  def test_options_for_select_with_element_attributes_and_selection_array
+    assert_dom_equal(
+      "<option value=\"&lt;Denmark&gt;\">&lt;Denmark&gt;</option>\n<option value=\"USA\" class=\"bold\" selected=\"selected\">USA</option>\n<option value=\"Sweden\" selected=\"selected\">Sweden</option>",
+      options_for_select([ "<Denmark>", ["USA", {:class=>'bold'}], "Sweden" ], ["USA", "Sweden"])
+    )
+  end
+
+  # tests for array_html_attributes_from_
+  def test_array_html_attributes_from_without_hash
+    assert_dom_equal( html_attributes_from(
+      ['one','one']),
+      ""
+    )
+  end
+  def test_array_html_attributes_from_with_single_element_hash
+    assert_dom_equal(
+      html_attributes_from(['one','one',{:class => 'fancy'}]),
+      " class=\"fancy\""
+    )
+  end
+  def test_array_html_attributes_from_with_multiple_element_hash
+    assert_dom_equal(
+      html_attributes_from(['one','one',{:class => 'fancy', 'onclick' => "alert('Hello World');"}]),
+      " class=\"fancy\" onclick=\"alert('Hello World');\""
+    )
+  end
+  def test_array_html_attributes_from_with_multiple_hashes
+    assert_dom_equal(
+      html_attributes_from(['one','one',{:class => 'fancy'}, {'onclick' => "alert('Hello World');"}]),
+      " class=\"fancy\" onclick=\"alert('Hello World');\""
+    )
+  end
+
   def test_grouped_collection_select
     @continents = [
       Continent.new("<Africa>", [Country.new("<sa>", "<South Africa>"), Country.new("so", "Somalia")] ),
-- 
1.7.0.2


From 00fcb483d3c8ae31cb8cae3a73ff73abb60b3b36 Mon Sep 17 00:00:00 2001
From: Rob Sanheim and Jared Pace <pair@thinkrelevance.com>
Date: Fri, 14 May 2010 10:35:47 -0400
Subject: [PATCH 2/2] Lighthouse #2165 - Add some examples to documentation

---
 .../lib/action_view/helpers/form_options_helper.rb |    9 +++++++++
 1 files changed, 9 insertions(+), 0 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/form_options_helper.rb b/actionpack/lib/action_view/helpers/form_options_helper.rb
index fe3c7aa..733b885 100644
--- a/actionpack/lib/action_view/helpers/form_options_helper.rb
+++ b/actionpack/lib/action_view/helpers/form_options_helper.rb
@@ -270,6 +270,15 @@ module ActionView
       #   options_for_select([ "VISA", "MasterCard", "Discover" ], ["VISA", "Discover"])
       #     <option selected="selected">VISA</option>\n<option>MasterCard</option>\n<option selected="selected">Discover</option>
       #
+      # You can optionally provide html attributes as the last element of the array.
+      #
+      # Examples:
+      #   options_for_select([ "Denmark", ["USA", {:class=>'bold'}], "Sweden" ], ["USA", "Sweden"])
+      #     <option value="Denmark">Denmark</option>\n<option value="USA" class="bold" selected="selected">USA</option>\n<option value="Sweden" selected="selected">Sweden</option>
+      #
+      #   options_for_select([["Dollar", "$", {:class=>"bold"}], ["Kroner", "DKK", {:onclick => "alert('HI');"}]])
+      #     <option value="$" class="bold">Dollar</option>\n<option value="DKK" onclick="alert('HI');">Kroner</option>
+      #
       # If you wish to specify disabled option tags, set +selected+ to be a hash, with <tt>:disabled</tt> being either a value
       # or array of values to be disabled. In this case, you can use <tt>:selected</tt> to specify selected option tags.
       #
-- 
1.7.0.2

