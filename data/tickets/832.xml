<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-14T18:28:07+01:00</created-at>
  <creator-id type="integer">16364</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">832</number>
  <permalink>expire_fragment_by_glob-for-file-based-fragment-caching</permalink>
  <priority type="integer">289</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>expire_fragment_by_glob() for file-based fragment caching</title>
  <updated-at type="datetime">2010-11-08T08:23:47+00:00</updated-at>
  <user-id type="integer">94458</user-id>
  <version type="integer">6</version>
  <user-name>Jeff Kreeftmeijer</user-name>
  <creator-name>Karel Mina&#345;&#237;k</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/832</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This patch adds `expire_fragment_by_glob()` method to ActionController::Caching::Fragments for easy cleaning-up the file-based cache.

I tried to use the Regexp option, but it was too greedy to be usable, and the Hash-based option didn't take into account different hostnames, where single Rails application could be running (eg. application.com and application.es hosting the same app). 

It takes the &quot;glob&quot; string as argument, same as the Ruby's `Dir[]` or `Dir#glob()`.

I added another method, because there is complex switching logic in `expire_fragment` (Hash? Regexp?) already. 

I am quite sure the implementation could be done better :), but I don't know my way around Rails so well....

Example:

@@ ruby
expire_fragment_by_glob('events/{theatre,movie}')
expire_fragment_by_glob('program/**/*')
@@

Motivation was to easily expire fragments for different hostnames where application runs. Moreover, it could be more effective than Regexp-based cleaning for file-based cache. 

It is extracted from my current project, where I have it as a class method for main `CacheSweeper` class.

Tests are included.

Cheers,

Karel</original-body>
  <latest-body>This patch adds `expire_fragment_by_glob()` method to ActionController::Caching::Fragments for easy cleaning-up the file-based cache.

I tried to use the Regexp option, but it was too greedy to be usable, and the Hash-based option didn't take into account different hostnames, where single Rails application could be running (eg. application.com and application.es hosting the same app). 

It takes the &quot;glob&quot; string as argument, same as the Ruby's `Dir[]` or `Dir#glob()`.

I added another method, because there is complex switching logic in `expire_fragment` (Hash? Regexp?) already. 

I am quite sure the implementation could be done better :), but I don't know my way around Rails so well....

Example:

@@ ruby
expire_fragment_by_glob('events/{theatre,movie}')
expire_fragment_by_glob('program/**/*')
@@

Motivation was to easily expire fragments for different hostnames where application runs. Moreover, it could be more effective than Regexp-based cleaning for file-based cache. 

It is extracted from my current project, where I have it as a class method for main `CacheSweeper` class.

Tests are included.

Cheers,

Karel</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch adds &lt;code&gt;expire_fragment_by_glob()&lt;/code&gt; method to ActionController::Caching::Fragments for easy cleaning-up the file-based cache.&lt;/p&gt;

&lt;p&gt;I tried to use the Regexp option, but it was too greedy to be usable, and the Hash-based option didn't take into account different hostnames, where single Rails application could be running (eg. application.com and application.es hosting the same app).&lt;/p&gt;

&lt;p&gt;It takes the &quot;glob&quot; string as argument, same as the Ruby's &lt;code&gt;Dir[]&lt;/code&gt; or &lt;code&gt;Dir#glob()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I added another method, because there is complex switching logic in &lt;code&gt;expire_fragment&lt;/code&gt; (Hash? Regexp?) already.&lt;/p&gt;

&lt;p&gt;I am quite sure the implementation could be done better :), but I don't know my way around Rails so well....&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;@@ ruby
expire_fragment_by_glob('events/{theatre,movie}')
expire_fragment_by_glob('program/&lt;em&gt;*/&lt;/em&gt;')
@@&lt;/p&gt;

&lt;p&gt;Motivation was to easily expire fragments for different hostnames where application runs. Moreover, it could be more effective than Regexp-based cleaning for file-based cache.&lt;/p&gt;

&lt;p&gt;It is extracted from my current project, where I have it as a class method for main &lt;code&gt;CacheSweeper&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Tests are included.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Karel&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This patch adds `expire_fragment_by_glob()` method to `ActionController::Caching::Fragments` for easy cleaning-up the file-based cache.

I tried to use the Regexp option, but it was too greedy to be usable, and the Hash-based option didn't take into account different hostnames, where single Rails application could be running (eg. application.com and application.es hosting the same app). 

It takes the &quot;glob&quot; string as argument, same as the Ruby's `Dir[]` or `Dir#glob()`.

I added another method, because there is complex switching logic in `expire_fragment` (Hash? Regexp?) already. Maybe someone more knowledgeable could refactor it with something like `key.is_a?(String) &amp;&amp; key.include?('*')` in the `expire_fragment()` method...

I am quite sure the implementation could be done better :), but I don't know my way around Rails so well....

Example:

@@@ ruby
expire_fragment_by_glob('events/{theatre,movie}')
expire_fragment_by_glob('program/**/*')
@@@

Motivation was to easily expire fragments for different hostnames where application runs. Moreover, it could be more effective than Regexp-based cleaning for file-based cache. 

It is extracted from my current project, where I have it as a class method for main `CacheSweeper` class.

Tests are included.

Cheers,

Karel</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch adds &lt;code&gt;expire_fragment_by_glob()&lt;/code&gt; method to &lt;code&gt;ActionController::Caching::Fragments&lt;/code&gt; for easy cleaning-up the file-based cache.&lt;/p&gt;

&lt;p&gt;I tried to use the Regexp option, but it was too greedy to be usable, and the Hash-based option didn't take into account different hostnames, where single Rails application could be running (eg. application.com and application.es hosting the same app).&lt;/p&gt;

&lt;p&gt;It takes the &quot;glob&quot; string as argument, same as the Ruby's &lt;code&gt;Dir[]&lt;/code&gt; or &lt;code&gt;Dir#glob()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I added another method, because there is complex switching logic in &lt;code&gt;expire_fragment&lt;/code&gt; (Hash? Regexp?) already. Maybe someone more knowledgeable could refactor it with something like &lt;code&gt;key.is_a?(String) &amp;amp;&amp;amp; key.include?('*')&lt;/code&gt; in the &lt;code&gt;expire_fragment()&lt;/code&gt; method...&lt;/p&gt;

&lt;p&gt;I am quite sure the implementation could be done better :), but I don't know my way around Rails so well....&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
expire_fragment_by_glob('events/{theatre,movie}')
expire_fragment_by_glob('program/**/*')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Motivation was to easily expire fragments for different hostnames where application runs. Moreover, it could be more effective than Regexp-based cleaning for file-based cache.&lt;/p&gt;

&lt;p&gt;It is extracted from my current project, where I have it as a class method for main &lt;code&gt;CacheSweeper&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Tests are included.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Karel&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-14T18:39:42+01:00</created-at>
      <creator-id type="integer">16364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">832</number>
      <permalink>expire_fragment_by_glob-for-file-based-fragment-caching</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack patch tested</tag>
      <title>expire_fragment_by_glob() for file-based fragment caching</title>
      <updated-at type="datetime">2008-08-14T18:39:42+01:00</updated-at>
      <user-id type="integer">16364</user-id>
      <version type="integer">1</version>
      <user-name>Karel Mina&#345;&#237;k</user-name>
      <creator-name>Karel Mina&#345;&#237;k</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/832</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>expire_fragment() already takes a regexp.</body>
      <body-html>&lt;div&gt;&lt;p&gt;expire_fragment() already takes a regexp.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-21T12:32:49+01:00</created-at>
      <creator-id type="integer">16364</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">832</number>
      <permalink>expire_fragment_by_glob-for-file-based-fragment-caching</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>actionpack patch tested</tag>
      <title>expire_fragment_by_glob() for file-based fragment caching</title>
      <updated-at type="datetime">2008-08-21T12:32:49+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Karel Mina&#345;&#237;k</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/832</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks for comment, Pratik.

&gt; expire_fragment() already takes a regexp.

True, but that doesn't take into account different hostnames an application runs on (www.application.org, www.application.com, etc).

Moreover, glob based expiring could be more effective then regexp? (See http://gurge.com/blog/2007/02/04/rails-expire_fragmentregex-considered-harmful/)

Karel</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for comment, Pratik.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;expire_fragment() already takes a regexp.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, but that doesn't take into account different hostnames an application runs on (&lt;a href=&quot;http://www.application.org&quot;&gt;www.application.org&lt;/a&gt;, &lt;a href=&quot;http://www.application.com&quot;&gt;www.application.com&lt;/a&gt;, etc).&lt;/p&gt;

&lt;p&gt;Moreover, glob based expiring could be more effective then regexp? (See &lt;a href=&quot;http://gurge.com/blog/2007/02/04/rails-expire_fragmentregex-considered-harmful/)&quot;&gt;http://gurge.com/blog/2007/02/04...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Karel&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-26T21:45:17+01:00</created-at>
      <creator-id type="integer">16364</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">832</number>
      <permalink>expire_fragment_by_glob-for-file-based-fragment-caching</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>actionpack patch tested</tag>
      <title>expire_fragment_by_glob() for file-based fragment caching</title>
      <updated-at type="datetime">2008-08-26T21:45:17+01:00</updated-at>
      <user-id type="integer">16364</user-id>
      <version type="integer">3</version>
      <user-name>Karel Mina&#345;&#237;k</user-name>
      <creator-name>Karel Mina&#345;&#237;k</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/832</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-26T22:02:13+01:00</created-at>
      <creator-id type="integer">16364</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">832</number>
      <permalink>expire_fragment_by_glob-for-file-based-fragment-caching</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>actionpack patch tested</tag>
      <title>expire_fragment_by_glob() for file-based fragment caching</title>
      <updated-at type="datetime">2008-08-26T22:02:13+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Karel Mina&#345;&#237;k</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/832</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-08T08:23:42+00:00</created-at>
      <creator-id type="integer">16364</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: actionpack patch tested
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">832</number>
      <permalink>expire_fragment_by_glob-for-file-based-fragment-caching</permalink>
      <priority type="integer">289</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>expire_fragment_by_glob() for file-based fragment caching</title>
      <updated-at type="datetime">2010-11-08T08:23:47+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">6</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>Karel Mina&#345;&#237;k</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/832</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4b06fcf0a88acb5f4fcf8e9b5ce5c63d2a47f444</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-14T18:28:07+01:00</created-at>
      <filename>expire_fragment_by_glob.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">39256</id>
      <size type="integer">3004</size>
      <uploader-id type="integer">16364</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/39256/expire_fragment_by_glob.diff</url>
    </attachment>
  </attachments>
</ticket>
