From b63582d75e86d04728ffeea1937e6daafa102f07 Mon Sep 17 00:00:00 2001
From: Simone Carletti <weppos@weppos.net>
Date: Mon, 21 Jun 2010 12:07:13 +0200
Subject: [PATCH] Fixed Railtie Rdoc examples not properly formatted [#4918 state:resolved]

---
 railties/lib/rails/railtie.rb |   42 ++++++++++++++++++++--------------------
 1 files changed, 21 insertions(+), 21 deletions(-)

diff --git a/railties/lib/rails/railtie.rb b/railties/lib/rails/railtie.rb
index ad77693..16dd552 100644
--- a/railties/lib/rails/railtie.rb
+++ b/railties/lib/rails/railtie.rb
@@ -6,53 +6,53 @@ require 'active_support/deprecation'
 module Rails
   # Railtie is the core of the Rails Framework and provides several hooks to extend
   # Rails and/or modify the initialization process.
-  # 
+  #
   # Every major component of Rails (Action Mailer, Action Controller,
   # Action View, Active Record and Active Resource) are all Railties, so each of
   # them is responsible to set their own initialization. This makes, for example,
   # Rails absent of any Active Record hook, allowing any other ORM framework to hook in.
-  # 
+  #
   # Developing a Rails extension does _not_ require any implementation of
   # Railtie, but if you need to interact with the Rails framework during
   # or after boot, then Railtie is what you need to do that interaction.
-  # 
+  #
   # For example, the following would need you to implement Railtie in your
   # plugin:
-  # 
+  #
   # * creating initializers
   # * configuring a Rails framework or the Application, like setting a generator
   # * adding Rails config.* keys to the environment
   # * setting up a subscriber to the Rails +ActiveSupport::Notifications+
   # * adding rake tasks into rails
-  # 
+  #
   # == Creating your Railtie
   #
   # Implementing Railtie in your Rails extension is done by creating a class
   # Railtie that has your extension name and making sure that this gets loaded
   # during boot time of the Rails stack.
-  # 
+  #
   # You can do this however you wish, but here is an example if you want to provide
   # it for a gem that can be used with or without Rails:
-  # 
+  #
   # * Create a file (say, lib/my_gem/railtie.rb) which contains class Railtie inheriting from
   #   Rails::Railtie and is namespaced to your gem:
   #
-  #   # lib/my_gem/railtie.rb
-  #   module MyGem
-  #     class Railtie < Rails::Railtie
+  #     # lib/my_gem/railtie.rb
+  #     module MyGem
+  #       class Railtie < Rails::Railtie
+  #       end
   #     end
-  #   end
-  # 
+  #
   # * Require your own gem as well as rails in this file:
-  # 
-  #   # lib/my_gem/railtie.rb
-  #   require 'my_gem'
-  #   require 'rails'
-  # 
-  #   module MyGem
-  #     class Railtie < Rails::Railtie
+  #
+  #     # lib/my_gem/railtie.rb
+  #     require 'my_gem'
+  #     require 'rails'
+  #     
+  #     module MyGem
+  #       class Railtie < Rails::Railtie
+  #       end
   #     end
-  #   end
   #
   # == Initializers
   #
@@ -65,7 +65,7 @@ module Rails
   #     end
   #   end
   #
-  # If specified, the block can also receive the application object, in case you 
+  # If specified, the block can also receive the application object, in case you
   # need to access some application specific configuration, like middleware:
   #
   #   class MyRailtie < Rails::Railtie
-- 
1.7.1

