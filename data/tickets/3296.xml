<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-09-28T17:54:03+01:00</created-at>
  <creator-id type="integer">71253</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3296</number>
  <permalink>failing-functional-test-of-activerecord-conditions-merging</permalink>
  <priority type="integer">154646</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>Failing functional test of ActiveRecord conditions merging</title>
  <updated-at type="datetime">2010-07-22T19:28:09+01:00</updated-at>
  <user-id type="integer">40263</user-id>
  <version type="integer">4</version>
  <user-name>Neeraj Singh</user-name>
  <creator-name>Morgan Grubb</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3296</url>
  <priority-name nil="true"></priority-name>
  <original-body>Given this schema
@@@ ruby
class CreateExamples &lt; ActiveRecord::Migration
  def self.up
    create_table :examples do |t|
    end
  end
  def self.down
    drop_table :examples
  end
end

class CreateExampleUrls &lt; ActiveRecord::Migration
  def self.up
    create_table :example_urls do |t|
      t.string :url
      t.integer :example_id
    end
  end
  def self.down
    drop_table :example_urls
  end
end
@@@

And these models
@@@ ruby
class Example &lt; ActiveRecord::Base
  has_many :example_urls
end

class ExampleUrl &lt; ActiveRecord::Base
  belongs_to :example
end
@@@

This query passes
@@@ ruby
ExampleUrl.first :conditions =&gt; { :url =&gt; &quot;this will not explode?&quot; }
@@@

While this one fails
@@@ ruby
Example.first :joins =&gt; :example_urls, :conditions =&gt; { :example_urls =&gt; { :url =&gt; &quot;this will explode?&quot; } }
@@@

This one, however, also passes
@@@ ruby
Example.first :joins =&gt; :example_urls, :conditions =&gt; [&quot;example_urls.url = ?&quot;, &quot;this will not explode?&quot;]
@@@

I tracked the problem down to a couple of methods in ActiveRecord::Base
@@@ ruby
        def sanitize_sql_hash_for_conditions(attrs, default_table_name = quoted_table_name)
          attrs = expand_hash_conditions_for_aggregates(attrs)

          conditions = attrs.map do |attr, value|
            table_name = default_table_name

            unless value.is_a?(Hash)
              attr = attr.to_s

              # Extract table name from qualified attribute names.
              if attr.include?('.')
                attr_table_name, attr = attr.split('.', 2)
                attr_table_name = connection.quote_table_name(attr_table_name)
              else
                attr_table_name = table_name
              end

              attribute_condition(&quot;#{attr_table_name}.#{connection.quote_column_name(attr)}&quot;, value)
            else
              sanitize_sql_hash_for_conditions(value, connection.quote_table_name(attr.to_s))
            end
          end.join(' AND ')

          replace_bind_variables(conditions, expand_range_bind_variables(attrs.values))
        end

        def replace_bind_variables(statement, values) #:nodoc:
          raise_if_bind_arity_mismatch(statement, statement.count('?'), values.size)
          bound = values.dup
          statement.gsub('?') { quote_bound_value(bound.shift) }
        end
@@@

What's happening is the recursive call to sanitize_sql_hash_for_conditions is calling replace_bind_variables on the inner conditions hash, thus interpolating the value into the string query. Then the outer call attempts to interpolate it's variables which is where the problem starts.

replace_bind_variables counts the number of question marks in the [previously] interpolated condition string, finds the one in the &quot;example_urls.url = 'this will explode?'&quot; piece and, not seeing any variables to bind to, raises PreparedStatementInvalid.

When considering how to fix this issue I've ruled out replacing question marks with strings at the point of interpolation and replacing them just before finalizing the query as there is no guarantee that whatever replacement string I used will not legitimately appear in the query itself. This leaves two other options: count the question marks in the already interpolated strings and don't include those when binding variables (difficult but not impossible), or put off interpolating until after the string is completed (much more difficult but definitely the right thing to do).

I don't have the time to fix this myself so I'm hoping someone else can pick this up and run with it.</original-body>
  <latest-body>Given this schema
@@@ ruby
class CreateExamples &lt; ActiveRecord::Migration
  def self.up
    create_table :examples do |t|
    end
  end
  def self.down
    drop_table :examples
  end
end

class CreateExampleUrls &lt; ActiveRecord::Migration
  def self.up
    create_table :example_urls do |t|
      t.string :url
      t.integer :example_id
    end
  end
  def self.down
    drop_table :example_urls
  end
end
@@@

And these models
@@@ ruby
class Example &lt; ActiveRecord::Base
  has_many :example_urls
end

class ExampleUrl &lt; ActiveRecord::Base
  belongs_to :example
end
@@@

This query passes
@@@ ruby
ExampleUrl.first :conditions =&gt; { :url =&gt; &quot;this will not explode?&quot; }
@@@

While this one fails
@@@ ruby
Example.first :joins =&gt; :example_urls, :conditions =&gt; { :example_urls =&gt; { :url =&gt; &quot;this will explode?&quot; } }
@@@

This one, however, also passes
@@@ ruby
Example.first :joins =&gt; :example_urls, :conditions =&gt; [&quot;example_urls.url = ?&quot;, &quot;this will not explode?&quot;]
@@@

I tracked the problem down to a couple of methods in ActiveRecord::Base
@@@ ruby
        def sanitize_sql_hash_for_conditions(attrs, default_table_name = quoted_table_name)
          attrs = expand_hash_conditions_for_aggregates(attrs)

          conditions = attrs.map do |attr, value|
            table_name = default_table_name

            unless value.is_a?(Hash)
              attr = attr.to_s

              # Extract table name from qualified attribute names.
              if attr.include?('.')
                attr_table_name, attr = attr.split('.', 2)
                attr_table_name = connection.quote_table_name(attr_table_name)
              else
                attr_table_name = table_name
              end

              attribute_condition(&quot;#{attr_table_name}.#{connection.quote_column_name(attr)}&quot;, value)
            else
              sanitize_sql_hash_for_conditions(value, connection.quote_table_name(attr.to_s))
            end
          end.join(' AND ')

          replace_bind_variables(conditions, expand_range_bind_variables(attrs.values))
        end

        def replace_bind_variables(statement, values) #:nodoc:
          raise_if_bind_arity_mismatch(statement, statement.count('?'), values.size)
          bound = values.dup
          statement.gsub('?') { quote_bound_value(bound.shift) }
        end
@@@

What's happening is the recursive call to sanitize_sql_hash_for_conditions is calling replace_bind_variables on the inner conditions hash, thus interpolating the value into the string query. Then the outer call attempts to interpolate it's variables which is where the problem starts.

replace_bind_variables counts the number of question marks in the [previously] interpolated condition string, finds the one in the &quot;example_urls.url = 'this will explode?'&quot; piece and, not seeing any variables to bind to, raises PreparedStatementInvalid.

When considering how to fix this issue I've ruled out replacing question marks with strings at the point of interpolation and replacing them just before finalizing the query as there is no guarantee that whatever replacement string I used will not legitimately appear in the query itself. This leaves two other options: count the question marks in the already interpolated strings and don't include those when binding variables (difficult but not impossible), or put off interpolating until after the string is completed (much more difficult but definitely the right thing to do).

I don't have the time to fix this myself so I'm hoping someone else can pick this up and run with it.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Given this schema&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class CreateExamples &amp;lt; ActiveRecord::Migration
  def self.up&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&lt;code&gt;create_table :examples do |t|
end&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
  end
  def self.down

&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;drop_table :examples&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
  end
end

&lt;br&gt;
class CreateExampleUrls &amp;lt; ActiveRecord::Migration
  def self.up

&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;create_table :example_urls do |t|
  t.string :url
  t.integer :example_id
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
  end
  def self.down

&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;drop_table :example_urls&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
  end
end
&lt;/pre&gt;
&lt;p&gt;And these models&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Example &amp;lt; ActiveRecord::Base
  has_many :example_urls
end&lt;br&gt;
&lt;br&gt;


&lt;br&gt;
class ExampleUrl &amp;lt; ActiveRecord::Base
  belongs_to :example
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This query passes&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;ExampleUrl.first :conditions =&amp;gt; { :url =&amp;gt; &quot;this will not explode?&quot; }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While this one fails&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Example.first :joins =&amp;gt; :example_urls, :conditions =&amp;gt; { :example_urls =&amp;gt; { :url =&amp;gt; &quot;this will explode?&quot; } }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This one, however, also passes&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Example.first :joins =&amp;gt; :example_urls, :conditions =&amp;gt; [&quot;example_urls.url = ?&quot;, &quot;this will not explode?&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I tracked the problem down to a couple of methods in
ActiveRecord::Base&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;        def sanitize_sql_hash_for_conditions(attrs, default_table_name = quoted_table_name)&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&lt;code&gt;      attrs = expand_hash_conditions_for_aggregates(attrs)

      conditions = attrs.map do |attr, value|
        table_name = default_table_name

        unless value.is_a?(Hash)
          attr = attr.to_s

          # Extract table name from qualified attribute names.
          if attr.include?('.')
            attr_table_name, attr = attr.split('.', 2)
            attr_table_name = connection.quote_table_name(attr_table_name)
          else
            attr_table_name = table_name
          end

          attribute_condition(&amp;amp;quot;#{attr_table_name}.#{connection.quote_column_name(attr)}&amp;amp;quot;, value)
        else
          sanitize_sql_hash_for_conditions(value, connection.quote_table_name(attr.to_s))
        end
      end.join(' AND ')

      replace_bind_variables(conditions, expand_range_bind_variables(attrs.values))
    end

    def replace_bind_variables(statement, values) #:nodoc:
      raise_if_bind_arity_mismatch(statement, statement.count('?'), values.size)
      bound = values.dup
      statement.gsub('?') { quote_bound_value(bound.shift) }
    end&amp;lt;/code&amp;gt;&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
&lt;/pre&gt;
&lt;p&gt;What's happening is the recursive call to
sanitize_sql_hash_for_conditions is calling replace_bind_variables
on the inner conditions hash, thus interpolating the value into the
string query. Then the outer call attempts to interpolate it's
variables which is where the problem starts.&lt;/p&gt;
&lt;p&gt;replace_bind_variables counts the number of question marks in
the &lt;a href=&quot;/projects/8994/changesets/previously&quot; title=
&quot;Changeset [previously]&quot;&gt;[previously]&lt;/a&gt; interpolated condition
string, finds the one in the &quot;example_urls.url = 'this will
explode?'&quot; piece and, not seeing any variables to bind to, raises
PreparedStatementInvalid.&lt;/p&gt;
&lt;p&gt;When considering how to fix this issue I've ruled out replacing
question marks with strings at the point of interpolation and
replacing them just before finalizing the query as there is no
guarantee that whatever replacement string I used will not
legitimately appear in the query itself. This leaves two other
options: count the question marks in the already interpolated
strings and don't include those when binding variables (difficult
but not impossible), or put off interpolating until after the
string is completed (much more difficult but definitely the right
thing to do).&lt;/p&gt;
&lt;p&gt;I don't have the time to fix this myself so I'm hoping someone
else can pick this up and run with it.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>With Rails 2.3.4:

Given this schema

@@@ ruby
class CreateExamples &lt; ActiveRecord::Migration
 def self.up
  create_table :examples do |t|
  end
 end
 def self.down
  drop_table :examples
 end
end
@@@

@@@ ruby
class CreateExampleUrls &lt; ActiveRecord::Migration
 def self.up
  create_table :example_urls do |t|
   t.string :url
   t.integer :example_id
  end
 end
 def self.down
  drop_table :example_urls
 end
end
@@@

And these models
@@@ ruby
class Example &lt; ActiveRecord::Base
  has_many :example_urls
end
@@@

@@@ ruby
class ExampleUrl &lt; ActiveRecord::Base
  belongs_to :example
end
@@@

This query passes
@@@ ruby
ExampleUrl.first :conditions =&gt; { :url =&gt; &quot;this will not explode?&quot; }
@@@

While this one fails
@@@ ruby
Example.first :joins =&gt; :example_urls, :conditions =&gt; { :example_urls =&gt; { :url =&gt; &quot;this will explode?&quot; } }
@@@

This one, however, also passes
@@@ ruby
Example.first :joins =&gt; :example_urls, :conditions =&gt; [&quot;example_urls.url = ?&quot;, &quot;this will not explode?&quot;]
@@@

I tracked the problem down to a couple of methods in ActiveRecord::Base
@@@ ruby
        def sanitize_sql_hash_for_conditions(attrs, default_table_name = quoted_table_name)
          attrs = expand_hash_conditions_for_aggregates(attrs)

          conditions = attrs.map do |attr, value|
            table_name = default_table_name

            unless value.is_a?(Hash)
              attr = attr.to_s

              # Extract table name from qualified attribute names.
              if attr.include?('.')
                attr_table_name, attr = attr.split('.', 2)
                attr_table_name = connection.quote_table_name(attr_table_name)
              else
                attr_table_name = table_name
              end

              attribute_condition(&quot;#{attr_table_name}.#{connection.quote_column_name(attr)}&quot;, value)
            else
              sanitize_sql_hash_for_conditions(value, connection.quote_table_name(attr.to_s))
            end
          end.join(' AND ')

          replace_bind_variables(conditions, expand_range_bind_variables(attrs.values))
        end

        def replace_bind_variables(statement, values) #:nodoc:
          raise_if_bind_arity_mismatch(statement, statement.count('?'), values.size)
          bound = values.dup
          statement.gsub('?') { quote_bound_value(bound.shift) }
        end
@@@

What's happening is the recursive call to sanitize_sql_hash_for_conditions is calling replace_bind_variables on the inner conditions hash, thus interpolating the value into the string query. Then the outer call attempts to interpolate it's variables which is where the problem starts.

replace_bind_variables counts the number of question marks in the [previously] interpolated condition string, finds the one in the &quot;example_urls.url = 'this will explode?'&quot; piece and, not seeing any variables to bind to, raises PreparedStatementInvalid.

When considering how to fix this issue I've ruled out replacing question marks with strings at the point of interpolation and replacing them just before finalizing the query as there is no guarantee that whatever replacement string I used will not legitimately appear in the query itself. This leaves two other options: count the question marks in the already interpolated strings and don't include those when binding variables (difficult but not impossible), or put off interpolating until after the string is completed (much more difficult but definitely the right thing to do).

I don't have the time to fix this myself so I'm hoping someone else can pick this up and run with it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;With Rails 2.3.4:&lt;/p&gt;
&lt;p&gt;Given this schema&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class CreateExamples &amp;lt; ActiveRecord::Migration
 def self.up
  create_table :examples do |t|
  end
 end
 def self.down
  drop_table :examples
 end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class CreateExampleUrls &amp;lt; ActiveRecord::Migration
 def self.up
  create_table :example_urls do |t|
   t.string :url
   t.integer :example_id
  end
 end
 def self.down
  drop_table :example_urls
 end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And these models&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Example &amp;lt; ActiveRecord::Base
  has_many :example_urls
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class ExampleUrl &amp;lt; ActiveRecord::Base
  belongs_to :example
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This query passes&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;ExampleUrl.first :conditions =&amp;gt; { :url =&amp;gt; &quot;this will not explode?&quot; }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While this one fails&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Example.first :joins =&amp;gt; :example_urls, :conditions =&amp;gt; { :example_urls =&amp;gt; { :url =&amp;gt; &quot;this will explode?&quot; } }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This one, however, also passes&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Example.first :joins =&amp;gt; :example_urls, :conditions =&amp;gt; [&quot;example_urls.url = ?&quot;, &quot;this will not explode?&quot;]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I tracked the problem down to a couple of methods in
ActiveRecord::Base&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;        def sanitize_sql_hash_for_conditions(attrs, default_table_name = quoted_table_name)&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&lt;code&gt;      attrs = expand_hash_conditions_for_aggregates(attrs)

      conditions = attrs.map do |attr, value|
        table_name = default_table_name

        unless value.is_a?(Hash)
          attr = attr.to_s

          # Extract table name from qualified attribute names.
          if attr.include?('.')
            attr_table_name, attr = attr.split('.', 2)
            attr_table_name = connection.quote_table_name(attr_table_name)
          else
            attr_table_name = table_name
          end

          attribute_condition(&amp;amp;quot;#{attr_table_name}.#{connection.quote_column_name(attr)}&amp;amp;quot;, value)
        else
          sanitize_sql_hash_for_conditions(value, connection.quote_table_name(attr.to_s))
        end
      end.join(' AND ')

      replace_bind_variables(conditions, expand_range_bind_variables(attrs.values))
    end

    def replace_bind_variables(statement, values) #:nodoc:
      raise_if_bind_arity_mismatch(statement, statement.count('?'), values.size)
      bound = values.dup
      statement.gsub('?') { quote_bound_value(bound.shift) }
    end&amp;lt;/code&amp;gt;&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
&lt;/pre&gt;
&lt;p&gt;What's happening is the recursive call to
sanitize_sql_hash_for_conditions is calling replace_bind_variables
on the inner conditions hash, thus interpolating the value into the
string query. Then the outer call attempts to interpolate it's
variables which is where the problem starts.&lt;/p&gt;
&lt;p&gt;replace_bind_variables counts the number of question marks in
the &lt;a href=&quot;/projects/8994/changesets/previously&quot; title=
&quot;Changeset [previously]&quot;&gt;[previously]&lt;/a&gt; interpolated condition
string, finds the one in the &quot;example_urls.url = 'this will
explode?'&quot; piece and, not seeing any variables to bind to, raises
PreparedStatementInvalid.&lt;/p&gt;
&lt;p&gt;When considering how to fix this issue I've ruled out replacing
question marks with strings at the point of interpolation and
replacing them just before finalizing the query as there is no
guarantee that whatever replacement string I used will not
legitimately appear in the query itself. This leaves two other
options: count the question marks in the already interpolated
strings and don't include those when binding variables (difficult
but not impossible), or put off interpolating until after the
string is completed (much more difficult but definitely the right
thing to do).&lt;/p&gt;
&lt;p&gt;I don't have the time to fix this myself so I'm hoping someone
else can pick this up and run with it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T17:54:03+01:00</created-at>
      <creator-id type="integer">71253</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3296</number>
      <permalink>failing-functional-test-of-activerecord-conditions-merging</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Failing functional test of ActiveRecord conditions merging</title>
      <updated-at type="datetime">2009-09-28T18:09:55+01:00</updated-at>
      <user-id type="integer">71253</user-id>
      <version type="integer">1</version>
      <user-name>Morgan Grubb</user-name>
      <creator-name>Morgan Grubb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3296</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We just ran into this issue with Rails 2.3.5. Does nobody care?</body>
      <body-html>&lt;div&gt;&lt;p&gt;We just ran into this issue with Rails 2.3.5. Does nobody
care?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-11T11:35:01+01:00</created-at>
      <creator-id type="integer">71253</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3296</number>
      <permalink>failing-functional-test-of-activerecord-conditions-merging</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Failing functional test of ActiveRecord conditions merging</title>
      <updated-at type="datetime">2010-06-11T11:35:05+01:00</updated-at>
      <user-id type="integer">16108</user-id>
      <version type="integer">2</version>
      <user-name>Martin Luder</user-name>
      <creator-name>Morgan Grubb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3296</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I tested it with Rails 2-3-stable branch and it works fine.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I tested it with Rails 2-3-stable branch and it works fine.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-11T12:29:12+01:00</created-at>
      <creator-id type="integer">71253</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3296</number>
      <permalink>failing-functional-test-of-activerecord-conditions-merging</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Failing functional test of ActiveRecord conditions merging</title>
      <updated-at type="datetime">2010-06-11T12:29:16+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">3</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Morgan Grubb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3296</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking it as invalid. If you are able to reproduce this problem with rails 2-3-stable or rails master then it could be reopened.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking it as invalid. If you are able to reproduce this problem
with rails 2-3-stable or rails master then it could be
reopened.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-22T19:28:03+01:00</created-at>
      <creator-id type="integer">71253</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3296</number>
      <permalink>failing-functional-test-of-activerecord-conditions-merging</permalink>
      <priority type="integer">154646</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Failing functional test of ActiveRecord conditions merging</title>
      <updated-at type="datetime">2010-07-22T19:28:09+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">4</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Morgan Grubb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3296</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
