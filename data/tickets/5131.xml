<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-16T07:14:06+01:00</created-at>
  <creator-id type="integer">52024</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5131</number>
  <permalink>preloading-associations-generates-invalid-sql-for-sti-and-has_many-through-when-condition-added</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>active_record preload_associations rails3</tag>
  <title>Preloading associations generates invalid sql for STI and has_many :through when condition added</title>
  <updated-at type="datetime">2010-12-21T11:25:43+00:00</updated-at>
  <user-id type="integer">11330</user-id>
  <version type="integer">2</version>
  <user-name>Jon Leighton</user-name>
  <creator-name>Robert Pankowecki</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5131</url>
  <priority-name>Low</priority-name>
  <original-body>@@@
class Role &lt; ActiveRecord::Base
  has_many :user_roles
  has_many :users, :through =&gt; :user_roles
end

class User &lt; BusinessObject # STI
  has_many :user_roles
  has_many :roles, :through =&gt; :user_roles
end

Role.includes(:user_roles =&gt; :user).where(:user_roles =&gt; {:role_id =&gt; '1'}).find(&quot;short name&quot;)
=&gt; ... ON &quot;business_objects&quot;.&quot;id&quot; = &quot;user_roles&quot;.&quot;user_id&quot; AND &quot;business_objects&quot;.&quot;type&quot; = 'User' ...

and this sql is ok however

Role.includes(:users).where(:user_roles =&gt; {:role_id =&gt; '1'}).find(&quot;short name&quot;)
=&gt; ... ON &quot;business_objects&quot;.&quot;type&quot; = 'User' ...

The most important part of the sql gets lost in the second query : ON &quot;business_objects&quot;.&quot;id&quot; = &quot;user_roles&quot;.&quot;user_id&quot;
@@@

This leads to totally wrong results preloaded.
where(...) in this example might not have too much sense but it is just to show simple case when such error occurs.
Preloading behaves different when there are conditions for preloaded associations.</original-body>
  <latest-body>@@@
class Role &lt; ActiveRecord::Base
  has_many :user_roles
  has_many :users, :through =&gt; :user_roles
end

class User &lt; BusinessObject # STI
  has_many :user_roles
  has_many :roles, :through =&gt; :user_roles
end

Role.includes(:user_roles =&gt; :user).where(:user_roles =&gt; {:role_id =&gt; '1'}).find(&quot;short name&quot;)
=&gt; ... ON &quot;business_objects&quot;.&quot;id&quot; = &quot;user_roles&quot;.&quot;user_id&quot; AND &quot;business_objects&quot;.&quot;type&quot; = 'User' ...

and this sql is ok however

Role.includes(:users).where(:user_roles =&gt; {:role_id =&gt; '1'}).find(&quot;short name&quot;)
=&gt; ... ON &quot;business_objects&quot;.&quot;type&quot; = 'User' ...

The most important part of the sql gets lost in the second query : ON &quot;business_objects&quot;.&quot;id&quot; = &quot;user_roles&quot;.&quot;user_id&quot;
@@@

This leads to totally wrong results preloaded.
where(...) in this example might not have too much sense but it is just to show simple case when such error occurs.
Preloading behaves different when there are conditions for preloaded associations.</latest-body>
  <original-body-html>&lt;div&gt;&lt;pre&gt;
&lt;code&gt;class Role &amp;lt; ActiveRecord::Base
  has_many :user_roles
  has_many :users, :through =&amp;gt; :user_roles
end

class User &amp;lt; BusinessObject # STI
  has_many :user_roles
  has_many :roles, :through =&amp;gt; :user_roles
end

Role.includes(:user_roles =&amp;gt; :user).where(:user_roles =&amp;gt; {:role_id =&amp;gt; '1'}).find(&quot;short name&quot;)
=&amp;gt; ... ON &quot;business_objects&quot;.&quot;id&quot; = &quot;user_roles&quot;.&quot;user_id&quot; AND &quot;business_objects&quot;.&quot;type&quot; = 'User' ...

and this sql is ok however

Role.includes(:users).where(:user_roles =&amp;gt; {:role_id =&amp;gt; '1'}).find(&quot;short name&quot;)
=&amp;gt; ... ON &quot;business_objects&quot;.&quot;type&quot; = 'User' ...

The most important part of the sql gets lost in the second query : ON &quot;business_objects&quot;.&quot;id&quot; = &quot;user_roles&quot;.&quot;user_id&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This leads to totally wrong results preloaded.&lt;br&gt;
where(...) in this example might not have too much sense but it is
just to show simple case when such error occurs.&lt;br&gt;
Preloading behaves different when there are conditions for
preloaded associations.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@@@
class Role &lt; ActiveRecord::Base
  has_many :user_roles
  has_many :users, :through =&gt; :user_roles
end

class User &lt; BusinessObject # STI
  has_many :user_roles
  has_many :roles, :through =&gt; :user_roles
end

Role.includes(:user_roles =&gt; :user).where(:user_roles =&gt; {:role_id =&gt; '1'}).find(&quot;short name&quot;)
=&gt; ... ON &quot;business_objects&quot;.&quot;id&quot; = &quot;user_roles&quot;.&quot;user_id&quot; AND &quot;business_objects&quot;.&quot;type&quot; = 'User' ...

and this sql is ok however

Role.includes(:users).where(:user_roles =&gt; {:role_id =&gt; '1'}).find(&quot;short name&quot;)
=&gt; ... ON &quot;business_objects&quot;.&quot;type&quot; = 'User' ...

The most important part of the sql gets lost in the second query : ON &quot;business_objects&quot;.&quot;id&quot; = &quot;user_roles&quot;.&quot;user_id&quot;
@@@

This leads to totally wrong results preloaded.
where(...) in this example might not have too much sense but it is just to show simple case when such error occurs.
Preloading behaves different when there are conditions for preloaded associations.</body>
      <body-html>&lt;div&gt;&lt;pre&gt;
&lt;code&gt;class Role &amp;lt; ActiveRecord::Base
  has_many :user_roles
  has_many :users, :through =&amp;gt; :user_roles
end

class User &amp;lt; BusinessObject # STI
  has_many :user_roles
  has_many :roles, :through =&amp;gt; :user_roles
end

Role.includes(:user_roles =&amp;gt; :user).where(:user_roles =&amp;gt; {:role_id =&amp;gt; '1'}).find(&quot;short name&quot;)
=&amp;gt; ... ON &quot;business_objects&quot;.&quot;id&quot; = &quot;user_roles&quot;.&quot;user_id&quot; AND &quot;business_objects&quot;.&quot;type&quot; = 'User' ...

and this sql is ok however

Role.includes(:users).where(:user_roles =&amp;gt; {:role_id =&amp;gt; '1'}).find(&quot;short name&quot;)
=&amp;gt; ... ON &quot;business_objects&quot;.&quot;type&quot; = 'User' ...

The most important part of the sql gets lost in the second query : ON &quot;business_objects&quot;.&quot;id&quot; = &quot;user_roles&quot;.&quot;user_id&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This leads to totally wrong results preloaded.&lt;br&gt;
where(...) in this example might not have too much sense but it is
just to show simple case when such error occurs.&lt;br&gt;
Preloading behaves different when there are conditions for
preloaded associations.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-16T07:14:06+01:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5131</number>
      <permalink>preloading-associations-generates-invalid-sql-for-sti-and-has_many-through-when-condition-added</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record preload_associations rails3</tag>
      <title>Preloading associations generates invalid sql for STI and has_many :through when condition added</title>
      <updated-at type="datetime">2010-07-16T07:14:08+01:00</updated-at>
      <user-id type="integer">52024</user-id>
      <version type="integer">1</version>
      <user-name>Robert Pankowecki</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5131</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is no longer an issue. It's covered by `test_find_with_sti_join` in `inner_join_associations_test.rb`. (FYI, doing `Foo.includes(:bar).where(:conditions)` generates the query in the same way as `Foo.joins(:bar)`, except that the former uses LEFT JOIN and the latter uses INNER JOIN.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is no longer an issue. It's covered by
&lt;code&gt;test_find_with_sti_join&lt;/code&gt; in
&lt;code&gt;inner_join_associations_test.rb&lt;/code&gt;. (FYI, doing
&lt;code&gt;Foo.includes(:bar).where(:conditions)&lt;/code&gt; generates the
query in the same way as &lt;code&gt;Foo.joins(:bar)&lt;/code&gt;, except that
the former uses LEFT JOIN and the latter uses INNER JOIN.)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-21T11:25:33+00:00</created-at>
      <creator-id type="integer">52024</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5131</number>
      <permalink>preloading-associations-generates-invalid-sql-for-sti-and-has_many-through-when-condition-added</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>active_record preload_associations rails3</tag>
      <title>Preloading associations generates invalid sql for STI and has_many :through when condition added</title>
      <updated-at type="datetime">2010-12-21T11:25:43+00:00</updated-at>
      <user-id type="integer">11330</user-id>
      <version type="integer">2</version>
      <user-name>Jon Leighton</user-name>
      <creator-name>Robert Pankowecki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5131</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
