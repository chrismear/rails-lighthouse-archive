<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-13T18:30:28+01:00</created-at>
  <creator-id type="integer">15346</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">821</number>
  <permalink>returning-block-on-association-extension-causes-proxy-owner-to-load-target</permalink>
  <priority type="integer">280</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord activesupport bug returning</tag>
  <title>Returning Block on Association Extension Causes Proxy Owner To Load Target</title>
  <updated-at type="datetime">2008-11-22T19:25:42+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">7</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Ken Collins</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/821</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>If this were a bug that could be fixed I'd take a stab at the tests, but I pretty much doubt that it is. So this ticket is more of a warning to others. I have found that using a returning block inside of an association extension causes the proxy owner to load the target. I came across this bug in 1.2.6 and see that the same results happen in 2.1. Here is some code that demonstrates the issue.

Because our production app uses a good deal of association extensions and there is a lot of data, this started to really affect performance. If any things this can be accounted for either in the implementation of returning and/or the association proxy classes, please let me know and I can take a stab at a test.

@@@ ruby

class User &lt; ActiveRecord::Base
  has_many  :articles, :extend =&gt; FooBarReturning
end

module FooBarReturning
  
  def foo
    c = build
    # DOES NOT CAUSE SELECT ALL AS NORMAL
  end
  
  def bar
    returning c = build do
      # SELECT * FROM &quot;articles&quot; WHERE (&quot;columns&quot;.user_id = 1)
    end
  end
  
  def returning
    returning build do |c|
      # SELECT * FROM &quot;articles&quot; WHERE (&quot;columns&quot;.user_id = 1)
    end
  end
  
end


class User &lt; ActiveRecord::Base
  
  has_many  :articles do
    def foo_bar_returning
      returning c = build do
        # SELECT * FROM &quot;articles&quot; WHERE (&quot;columns&quot;.user_id = 1)
      end
    end
  end
  
end

@@@</original-body>
  <latest-body>If this were a bug that could be fixed I'd take a stab at the tests, but I pretty much doubt that it is. So this ticket is more of a warning to others. I have found that using a returning block inside of an association extension causes the proxy owner to load the target. I came across this bug in 1.2.6 and see that the same results happen in 2.1. Here is some code that demonstrates the issue.

Because our production app uses a good deal of association extensions and there is a lot of data, this started to really affect performance. If any things this can be accounted for either in the implementation of returning and/or the association proxy classes, please let me know and I can take a stab at a test.

@@@ ruby

class User &lt; ActiveRecord::Base
  has_many  :articles, :extend =&gt; FooBarReturning
end

module FooBarReturning
  
  def foo
    c = build
    # DOES NOT CAUSE SELECT ALL AS NORMAL
  end
  
  def bar
    returning c = build do
      # SELECT * FROM &quot;articles&quot; WHERE (&quot;columns&quot;.user_id = 1)
    end
  end
  
  def returning
    returning build do |c|
      # SELECT * FROM &quot;articles&quot; WHERE (&quot;columns&quot;.user_id = 1)
    end
  end
  
end


class User &lt; ActiveRecord::Base
  
  has_many  :articles do
    def foo_bar_returning
      returning c = build do
        # SELECT * FROM &quot;articles&quot; WHERE (&quot;columns&quot;.user_id = 1)
      end
    end
  end
  
end

@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If this were a bug that could be fixed I'd take a stab at the tests, but I pretty much doubt that it is. So this ticket is more of a warning to others. I have found that using a returning block inside of an association extension causes the proxy owner to load the target. I came across this bug in 1.2.6 and see that the same results happen in 2.1. Here is some code that demonstrates the issue.&lt;/p&gt;

&lt;p&gt;Because our production app uses a good deal of association extensions and there is a lot of data, this started to really affect performance. If any things this can be accounted for either in the implementation of returning and/or the association proxy classes, please let me know and I can take a stab at a test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;

class User &amp;lt; ActiveRecord::Base
  has_many  :articles, :extend =&amp;gt; FooBarReturning
end

module FooBarReturning

  def foo
    c = build
    # DOES NOT CAUSE SELECT ALL AS NORMAL
  end

  def bar
    returning c = build do
      # SELECT * FROM &amp;quot;articles&amp;quot; WHERE (&amp;quot;columns&amp;quot;.user_id = 1)
    end
  end

  def returning
    returning build do |c|
      # SELECT * FROM &amp;quot;articles&amp;quot; WHERE (&amp;quot;columns&amp;quot;.user_id = 1)
    end
  end

end


class User &amp;lt; ActiveRecord::Base

  has_many  :articles do
    def foo_bar_returning
      returning c = build do
        # SELECT * FROM &amp;quot;articles&amp;quot; WHERE (&amp;quot;columns&amp;quot;.user_id = 1)
      end
    end
  end

end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If this were a bug that could be fixed I'd take a stab at the tests, but I pretty much doubt that it is. So this ticket is more of a warning to others. I have found that using a returning block inside of an association extension causes the proxy owner to load the target. I came across this bug in 1.2.6 and see that the same results happen in 2.1. Here is some code that demonstrates the issue.

Because our production app uses a good deal of association extensions and there is a lot of data, this started to really affect performance. If any things this can be accounted for either in the implementation of returning and/or the association proxy classes, please let me know and I can take a stab at a test.

@@@ ruby

class User &lt; ActiveRecord::Base
  has_many  :articles, :extend =&gt; FooBarReturning
end

module FooBarReturning
  
  def foo
    c = build
    # DOES NOT CAUSE SELECT ALL AS NORMAL
  end
  
  def bar
    returning c = build do
      # SELECT * FROM &quot;articles&quot; WHERE (&quot;columns&quot;.user_id = 1)
    end
  end
  
  def returning
    returning build do |c|
      # SELECT * FROM &quot;articles&quot; WHERE (&quot;columns&quot;.user_id = 1)
    end
  end
  
end


class User &lt; ActiveRecord::Base
  
  has_many  :articles do
    def foo_bar_returning
      returning c = build do
        # SELECT * FROM &quot;articles&quot; WHERE (&quot;columns&quot;.user_id = 1)
      end
    end
  end
  
end

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;If this were a bug that could be fixed I'd take a stab at the tests, but I pretty much doubt that it is. So this ticket is more of a warning to others. I have found that using a returning block inside of an association extension causes the proxy owner to load the target. I came across this bug in 1.2.6 and see that the same results happen in 2.1. Here is some code that demonstrates the issue.&lt;/p&gt;

&lt;p&gt;Because our production app uses a good deal of association extensions and there is a lot of data, this started to really affect performance. If any things this can be accounted for either in the implementation of returning and/or the association proxy classes, please let me know and I can take a stab at a test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;

class User &amp;lt; ActiveRecord::Base
  has_many  :articles, :extend =&amp;gt; FooBarReturning
end

module FooBarReturning

  def foo
    c = build
    # DOES NOT CAUSE SELECT ALL AS NORMAL
  end

  def bar
    returning c = build do
      # SELECT * FROM &amp;quot;articles&amp;quot; WHERE (&amp;quot;columns&amp;quot;.user_id = 1)
    end
  end

  def returning
    returning build do |c|
      # SELECT * FROM &amp;quot;articles&amp;quot; WHERE (&amp;quot;columns&amp;quot;.user_id = 1)
    end
  end

end


class User &amp;lt; ActiveRecord::Base

  has_many  :articles do
    def foo_bar_returning
      returning c = build do
        # SELECT * FROM &amp;quot;articles&amp;quot; WHERE (&amp;quot;columns&amp;quot;.user_id = 1)
      end
    end
  end

end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-13T18:30:29+01:00</created-at>
      <creator-id type="integer">15346</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">821</number>
      <permalink>returning-block-on-association-extension-causes-proxy-owner-to-load-target</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord activesupport bug returning</tag>
      <title>Returning Block on Association Extension Causes Proxy Owner To Load Target</title>
      <updated-at type="datetime">2008-08-13T18:30:29+01:00</updated-at>
      <user-id type="integer">15346</user-id>
      <version type="integer">1</version>
      <user-name>Ken Collins</user-name>
      <creator-name>Ken Collins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I forgot to mention that if you used the returning block inside of a controller (just anywhere outside of an association extension) that the SQL is just fine. The issue only seems to be when using the returning block in an association extensions.

ALSO, I have a type above... my example association method that shows that either use of returning should have been as follows.

@@@ ruby
module FooBarReturning

  def foo_bar_returning
    returning build do |c|
      # SELECT * FROM &quot;articles&quot; WHERE (&quot;columns&quot;.user_id = 1)
    end
  end

end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I forgot to mention that if you used the returning block inside of a controller (just anywhere outside of an association extension) that the SQL is just fine. The issue only seems to be when using the returning block in an association extensions.&lt;/p&gt;

&lt;p&gt;ALSO, I have a type above... my example association method that shows that either use of returning should have been as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
module FooBarReturning

  def foo_bar_returning
    returning build do |c|
      # SELECT * FROM &amp;quot;articles&amp;quot; WHERE (&amp;quot;columns&amp;quot;.user_id = 1)
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-13T18:35:32+01:00</created-at>
      <creator-id type="integer">15346</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">821</number>
      <permalink>returning-block-on-association-extension-causes-proxy-owner-to-load-target</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord activesupport bug returning</tag>
      <title>Returning Block on Association Extension Causes Proxy Owner To Load Target</title>
      <updated-at type="datetime">2008-08-13T18:35:32+01:00</updated-at>
      <user-id type="integer">15346</user-id>
      <version type="integer">2</version>
      <user-name>Ken Collins</user-name>
      <creator-name>Ken Collins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>returning is a method activesupport adds to Object, so it's available everywhere. Except on an association proxy, because association proxies undef all their methods (so that they filter through to the target), including returning.

With returning you don't care who you call returning on though, so something like

@@@ ruby
Object.returning build do |c|
...
end
@@@

Seing as returning doesn't depending on who its called on (it's just injected everywhere for convenience), arguably you could just not undef it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;returning is a method activesupport adds to Object, so it's available everywhere. Except on an association proxy, because association proxies undef all their methods (so that they filter through to the target), including returning.&lt;/p&gt;

&lt;p&gt;With returning you don't care who you call returning on though, so something like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Object.returning build do |c|
...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seing as returning doesn't depending on who its called on (it's just injected everywhere for convenience), arguably you could just not undef it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-13T21:09:26+01:00</created-at>
      <creator-id type="integer">15346</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">821</number>
      <permalink>returning-block-on-association-extension-causes-proxy-owner-to-load-target</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord activesupport bug returning</tag>
      <title>Returning Block on Association Extension Causes Proxy Owner To Load Target</title>
      <updated-at type="datetime">2008-08-13T21:09:26+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Ken Collins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Not sure what you are saying... returning works in the association extension but it just has ILL EFFECTS of loading the target. I am pretty sure Object.returning does the same.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not sure what you are saying... returning works in the association extension but it just has ILL EFFECTS of loading the target. I am pretty sure Object.returning does the same.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-13T21:15:46+01:00</created-at>
      <creator-id type="integer">15346</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">821</number>
      <permalink>returning-block-on-association-extension-causes-proxy-owner-to-load-target</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord activesupport bug returning</tag>
      <title>Returning Block on Association Extension Causes Proxy Owner To Load Target</title>
      <updated-at type="datetime">2008-08-13T21:15:46+01:00</updated-at>
      <user-id type="integer">15346</user-id>
      <version type="integer">4</version>
      <user-name>Ken Collins</user-name>
      <creator-name>Ken Collins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>because returning is undeffed on the proxy, it has to load the array in order to call it. By calling it on Object you avoid that (the choice of Object is arbitrary). try it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;because returning is undeffed on the proxy, it has to load the array in order to call it. By calling it on Object you avoid that (the choice of Object is arbitrary). try it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-13T21:18:37+01:00</created-at>
      <creator-id type="integer">15346</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">821</number>
      <permalink>returning-block-on-association-extension-causes-proxy-owner-to-load-target</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord activesupport bug returning</tag>
      <title>Returning Block on Association Extension Causes Proxy Owner To Load Target</title>
      <updated-at type="datetime">2008-08-13T21:18:37+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">5</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Ken Collins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>OK, I will!</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, I will!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-13T21:23:09+01:00</created-at>
      <creator-id type="integer">15346</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">821</number>
      <permalink>returning-block-on-association-extension-causes-proxy-owner-to-load-target</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord activesupport bug returning</tag>
      <title>Returning Block on Association Extension Causes Proxy Owner To Load Target</title>
      <updated-at type="datetime">2008-08-13T21:23:09+01:00</updated-at>
      <user-id type="integer">15346</user-id>
      <version type="integer">6</version>
      <user-name>Ken Collins</user-name>
      <creator-name>Ken Collins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-22T19:25:41+00:00</created-at>
      <creator-id type="integer">15346</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">821</number>
      <permalink>returning-block-on-association-extension-causes-proxy-owner-to-load-target</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord activesupport bug returning</tag>
      <title>Returning Block on Association Extension Causes Proxy Owner To Load Target</title>
      <updated-at type="datetime">2008-11-22T19:25:42+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">7</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Ken Collins</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
