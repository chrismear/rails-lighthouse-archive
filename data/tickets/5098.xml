<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">7</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-02T10:55:48+01:00</created-at>
  <creator-id type="integer">105742</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">5098</number>
  <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
  <priority type="integer">2</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>performance</tag>
  <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
  <updated-at type="datetime">2010-10-15T23:01:58+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">74</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>drjoke</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Medium</priority-name>
  <original-body>I have finished converting my live app to Rails 3.

I am using Ruby Enterprise 1.8.7 and Passenger 2.2.15 on Ubuntu 10.4

I go from 5.31 trans/sec to 3.05 trans/sec per AWS EC2 instance.

@@@
$ siege -c 5 -t 1M http://localhost

RAILS 2.3.5
Transactions:             320 hits
Availability:          100.00 %
Elapsed time:           60.26 secs
Data transferred:          6.76 MB
Response time:            0.45 secs
Transaction rate:          5.31 trans/sec
Throughput:            0.11 MB/sec
Concurrency:            2.41
Successful transactions:         320
Failed transactions:             0
Longest transaction:          1.05
Shortest transaction:          0.25

RAILS 3
Transactions:             169 hits
Availability:          100.00 %
Elapsed time:           55.38 secs
Data transferred:          3.72 MB
Response time:            1.06 secs
Transaction rate:          3.05 trans/sec
Throughput:            0.07 MB/sec
Concurrency:            3.23
Successful transactions:         169
Failed transactions:             0
Longest transaction:          1.74
Shortest transaction:          0.58
@@@

After removing Passenger from the equation and let this be script/server -e 
production (Rails 2.3.5) vs. rails server -e production (Rails 3).

@@@

RAILS 2.3.5
Transactions:             312 hits
Availability:          100.00 %
Elapsed time:           60.32 secs
Data transferred:         68.81 MB
Response time:            0.44 secs
Transaction rate:          5.17 trans/sec
Throughput:            1.14 MB/sec
Concurrency:            2.29
Successful transactions:         312
Failed transactions:             0
Longest transaction:          0.99
Shortest transaction:          0.10

RAILS 3
Transactions:             109 hits
Availability:          100.00 %
Elapsed time:           59.77 secs
Data transferred:         23.80 MB
Response time:            2.20 secs
Transaction rate:          1.82 trans/sec
Throughput:            0.40 MB/sec
Concurrency:            4.01
Successful transactions:         109
Failed transactions:             0
Longest transaction:          2.99
Shortest transaction:          0.53
@@@

And now benchmarking ActiveRecord

@@@
Rails 2.3.5

puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  1.500000   0.100000   1.600000 (  2.371361)

Rails 3.0

puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  8.160000   0.160000   8.320000 ( 15.330955)
@@@

I can also reproduce this problem on my Macbook Pro using Snow Leopard 
10.6.4

@@@
Rails 2.3.5
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  2.460000   0.440000   2.900000 ( 20.093052)

Rails 3.0
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  9.100000   0.810000   9.910000 ( 28.481634)
@@@</original-body>
  <latest-body>I have finished converting my live app to Rails 3.

I am using Ruby Enterprise 1.8.7 and Passenger 2.2.15 on Ubuntu 10.4

I go from 5.31 trans/sec to 3.05 trans/sec per AWS EC2 instance.

@@@
$ siege -c 5 -t 1M http://localhost

RAILS 2.3.5
Transactions:             320 hits
Availability:          100.00 %
Elapsed time:           60.26 secs
Data transferred:          6.76 MB
Response time:            0.45 secs
Transaction rate:          5.31 trans/sec
Throughput:            0.11 MB/sec
Concurrency:            2.41
Successful transactions:         320
Failed transactions:             0
Longest transaction:          1.05
Shortest transaction:          0.25

RAILS 3
Transactions:             169 hits
Availability:          100.00 %
Elapsed time:           55.38 secs
Data transferred:          3.72 MB
Response time:            1.06 secs
Transaction rate:          3.05 trans/sec
Throughput:            0.07 MB/sec
Concurrency:            3.23
Successful transactions:         169
Failed transactions:             0
Longest transaction:          1.74
Shortest transaction:          0.58
@@@

After removing Passenger from the equation and let this be script/server -e 
production (Rails 2.3.5) vs. rails server -e production (Rails 3).

@@@

RAILS 2.3.5
Transactions:             312 hits
Availability:          100.00 %
Elapsed time:           60.32 secs
Data transferred:         68.81 MB
Response time:            0.44 secs
Transaction rate:          5.17 trans/sec
Throughput:            1.14 MB/sec
Concurrency:            2.29
Successful transactions:         312
Failed transactions:             0
Longest transaction:          0.99
Shortest transaction:          0.10

RAILS 3
Transactions:             109 hits
Availability:          100.00 %
Elapsed time:           59.77 secs
Data transferred:         23.80 MB
Response time:            2.20 secs
Transaction rate:          1.82 trans/sec
Throughput:            0.40 MB/sec
Concurrency:            4.01
Successful transactions:         109
Failed transactions:             0
Longest transaction:          2.99
Shortest transaction:          0.53
@@@

And now benchmarking ActiveRecord

@@@
Rails 2.3.5

puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  1.500000   0.100000   1.600000 (  2.371361)

Rails 3.0

puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  8.160000   0.160000   8.320000 ( 15.330955)
@@@

I can also reproduce this problem on my Macbook Pro using Snow Leopard 
10.6.4

@@@
Rails 2.3.5
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  2.460000   0.440000   2.900000 ( 20.093052)

Rails 3.0
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  9.100000   0.810000   9.910000 ( 28.481634)
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have finished converting my live app to Rails 3.&lt;/p&gt;
&lt;p&gt;I am using Ruby Enterprise 1.8.7 and Passenger 2.2.15 on Ubuntu
10.4&lt;/p&gt;
&lt;p&gt;I go from 5.31 trans/sec to 3.05 trans/sec per AWS EC2
instance.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ siege -c 5 -t 1M http://localhost

RAILS 2.3.5
Transactions:             320 hits
Availability:          100.00 %
Elapsed time:           60.26 secs
Data transferred:          6.76 MB
Response time:            0.45 secs
Transaction rate:          5.31 trans/sec
Throughput:            0.11 MB/sec
Concurrency:            2.41
Successful transactions:         320
Failed transactions:             0
Longest transaction:          1.05
Shortest transaction:          0.25

RAILS 3
Transactions:             169 hits
Availability:          100.00 %
Elapsed time:           55.38 secs
Data transferred:          3.72 MB
Response time:            1.06 secs
Transaction rate:          3.05 trans/sec
Throughput:            0.07 MB/sec
Concurrency:            3.23
Successful transactions:         169
Failed transactions:             0
Longest transaction:          1.74
Shortest transaction:          0.58&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After removing Passenger from the equation and let this be
script/server -e&lt;br&gt;
production (Rails 2.3.5) vs. rails server -e production (Rails
3).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
RAILS 2.3.5
Transactions:             312 hits
Availability:          100.00 %
Elapsed time:           60.32 secs
Data transferred:         68.81 MB
Response time:            0.44 secs
Transaction rate:          5.17 trans/sec
Throughput:            1.14 MB/sec
Concurrency:            2.29
Successful transactions:         312
Failed transactions:             0
Longest transaction:          0.99
Shortest transaction:          0.10

RAILS 3
Transactions:             109 hits
Availability:          100.00 %
Elapsed time:           59.77 secs
Data transferred:         23.80 MB
Response time:            2.20 secs
Transaction rate:          1.82 trans/sec
Throughput:            0.40 MB/sec
Concurrency:            4.01
Successful transactions:         109
Failed transactions:             0
Longest transaction:          2.99
Shortest transaction:          0.53&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And now benchmarking ActiveRecord&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails 2.3.5

puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  1.500000   0.100000   1.600000 (  2.371361)

Rails 3.0

puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  8.160000   0.160000   8.320000 ( 15.330955)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I can also reproduce this problem on my Macbook Pro using Snow
Leopard&lt;br&gt;
10.6.4&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails 2.3.5
puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  2.460000   0.440000   2.900000 ( 20.093052)

Rails 3.0
puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  9.100000   0.810000   9.910000 ( 28.481634)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have finished converting my live app to Rails 3.

I am using Ruby Enterprise 1.8.7 and Passenger 2.2.15 on Ubuntu 10.4

I go from 5.31 trans/sec to 3.05 trans/sec per AWS EC2 instance.

@@@
$ siege -c 5 -t 1M http://localhost

RAILS 2.3.5
Transactions:             320 hits
Availability:          100.00 %
Elapsed time:           60.26 secs
Data transferred:          6.76 MB
Response time:            0.45 secs
Transaction rate:          5.31 trans/sec
Throughput:            0.11 MB/sec
Concurrency:            2.41
Successful transactions:         320
Failed transactions:             0
Longest transaction:          1.05
Shortest transaction:          0.25

RAILS 3
Transactions:             169 hits
Availability:          100.00 %
Elapsed time:           55.38 secs
Data transferred:          3.72 MB
Response time:            1.06 secs
Transaction rate:          3.05 trans/sec
Throughput:            0.07 MB/sec
Concurrency:            3.23
Successful transactions:         169
Failed transactions:             0
Longest transaction:          1.74
Shortest transaction:          0.58
@@@

After removing Passenger from the equation and let this be script/server -e 
production (Rails 2.3.5) vs. rails server -e production (Rails 3).

@@@

RAILS 2.3.5
Transactions:             312 hits
Availability:          100.00 %
Elapsed time:           60.32 secs
Data transferred:         68.81 MB
Response time:            0.44 secs
Transaction rate:          5.17 trans/sec
Throughput:            1.14 MB/sec
Concurrency:            2.29
Successful transactions:         312
Failed transactions:             0
Longest transaction:          0.99
Shortest transaction:          0.10

RAILS 3
Transactions:             109 hits
Availability:          100.00 %
Elapsed time:           59.77 secs
Data transferred:         23.80 MB
Response time:            2.20 secs
Transaction rate:          1.82 trans/sec
Throughput:            0.40 MB/sec
Concurrency:            4.01
Successful transactions:         109
Failed transactions:             0
Longest transaction:          2.99
Shortest transaction:          0.53
@@@

And now benchmarking ActiveRecord

@@@
Rails 2.3.5

puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  1.500000   0.100000   1.600000 (  2.371361)

Rails 3.0

puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  8.160000   0.160000   8.320000 ( 15.330955)
@@@

I can also reproduce this problem on my Macbook Pro using Snow Leopard 
10.6.4

@@@
Rails 2.3.5
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  2.460000   0.440000   2.900000 ( 20.093052)

Rails 3.0
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  9.100000   0.810000   9.910000 ( 28.481634)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have finished converting my live app to Rails 3.&lt;/p&gt;
&lt;p&gt;I am using Ruby Enterprise 1.8.7 and Passenger 2.2.15 on Ubuntu
10.4&lt;/p&gt;
&lt;p&gt;I go from 5.31 trans/sec to 3.05 trans/sec per AWS EC2
instance.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ siege -c 5 -t 1M http://localhost

RAILS 2.3.5
Transactions:             320 hits
Availability:          100.00 %
Elapsed time:           60.26 secs
Data transferred:          6.76 MB
Response time:            0.45 secs
Transaction rate:          5.31 trans/sec
Throughput:            0.11 MB/sec
Concurrency:            2.41
Successful transactions:         320
Failed transactions:             0
Longest transaction:          1.05
Shortest transaction:          0.25

RAILS 3
Transactions:             169 hits
Availability:          100.00 %
Elapsed time:           55.38 secs
Data transferred:          3.72 MB
Response time:            1.06 secs
Transaction rate:          3.05 trans/sec
Throughput:            0.07 MB/sec
Concurrency:            3.23
Successful transactions:         169
Failed transactions:             0
Longest transaction:          1.74
Shortest transaction:          0.58&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After removing Passenger from the equation and let this be
script/server -e&lt;br&gt;
production (Rails 2.3.5) vs. rails server -e production (Rails
3).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
RAILS 2.3.5
Transactions:             312 hits
Availability:          100.00 %
Elapsed time:           60.32 secs
Data transferred:         68.81 MB
Response time:            0.44 secs
Transaction rate:          5.17 trans/sec
Throughput:            1.14 MB/sec
Concurrency:            2.29
Successful transactions:         312
Failed transactions:             0
Longest transaction:          0.99
Shortest transaction:          0.10

RAILS 3
Transactions:             109 hits
Availability:          100.00 %
Elapsed time:           59.77 secs
Data transferred:         23.80 MB
Response time:            2.20 secs
Transaction rate:          1.82 trans/sec
Throughput:            0.40 MB/sec
Concurrency:            4.01
Successful transactions:         109
Failed transactions:             0
Longest transaction:          2.99
Shortest transaction:          0.53&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And now benchmarking ActiveRecord&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails 2.3.5

puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  1.500000   0.100000   1.600000 (  2.371361)

Rails 3.0

puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  8.160000   0.160000   8.320000 ( 15.330955)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I can also reproduce this problem on my Macbook Pro using Snow
Leopard&lt;br&gt;
10.6.4&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails 2.3.5
puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  2.460000   0.440000   2.900000 ( 20.093052)

Rails 3.0
puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  9.100000   0.810000   9.910000 ( 28.481634)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-12T17:37:53+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-12T17:37:55+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">1</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am also seeing bad performance using similar find queries.  Rails3beta 4 and Ruby 1.9.2preview3 (RVM) on my Mac.

Something strange I noticed was this:

RAILS 3. puts Benchmark.measure{5000.times{|i| User.find(i}}
  2.370000   0.160000   2.530000 (  3.079710)

RAILS 3. puts Benchmark.measure{5000.times{|i| User.where(:id=&gt;i)}}
  0.200000   0.000000   0.200000 (  0.206418)

I ran these each 5 times with similar results.  The new query API is faster than the 2.3x API if you use &quot;where&quot;, but much slower if you use &quot;find&quot;.  Will try to run thru debugger if I get a chance today.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am also seeing bad performance using similar find queries.
Rails3beta 4 and Ruby 1.9.2preview3 (RVM) on my Mac.&lt;/p&gt;
&lt;p&gt;Something strange I noticed was this:&lt;/p&gt;
&lt;p&gt;RAILS 3. puts Benchmark.measure{5000.times{|i| User.find(i}}&lt;br&gt;
2.370000 0.160000 2.530000 ( 3.079710)&lt;/p&gt;
&lt;p&gt;RAILS 3. puts Benchmark.measure{5000.times{|i|
User.where(:id=&amp;gt;i)}}&lt;br&gt;
0.200000 0.000000 0.200000 ( 0.206418)&lt;/p&gt;
&lt;p&gt;I ran these each 5 times with similar results. The new query API
is faster than the 2.3x API if you use &quot;where&quot;, but much slower if
you use &quot;find&quot;. Will try to run thru debugger if I get a chance
today.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-12T18:54:58+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-12T18:55:01+01:00</updated-at>
      <user-id type="integer">103655</user-id>
      <version type="integer">2</version>
      <user-name>John McAliley</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>drjoke - I'm not seeing a similar performance difference on my Ubuntu laptop with postgresql. Rails 3 seems about 20% slower here. What hardware and db engine are you using?

John - I see similar performance diffs between find() and where() in dev mode, but not in production mode. I suspect from looking at profiles that this is because find() is performing a more expensive query compilation than where but that this difference disappears in production mode due to query caching. Do you see the same performance delta when you run in development and production mode or only in development mode?</body>
      <body-html>&lt;div&gt;&lt;p&gt;drjoke - I'm not seeing a similar performance difference on my
Ubuntu laptop with postgresql. Rails 3 seems about 20% slower here.
What hardware and db engine are you using?&lt;/p&gt;
&lt;p&gt;John - I see similar performance diffs between find() and
where() in dev mode, but not in production mode. I suspect from
looking at profiles that this is because find() is performing a
more expensive query compilation than where but that this
difference disappears in production mode due to query caching. Do
you see the same performance delta when you run in development and
production mode or only in development mode?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T04:24:55+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-13T04:24:56+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">3</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am using MySQL, and am seeing this same problem both on Amazon EC2 running Ubuntu and Macbook Pro running snow leopard. The performance difference is similar in both instance.

Now using the Rails 3 ActiveRecord API yield very very fast result.

RAILS3

OLD API
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id 
= ?&quot;, (rand * 1000 + 1).to_i]}}
  9.100000   0.810000   9.910000 ( 28.481634

NEW API
puts Benchmark.measure{ 5000.times { User.where(:id =&gt; (rand * 1000 + 1).to_i) } }

I am in production mode.

  0.830000   0.000000   0.830000 (  0.838565)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am using MySQL, and am seeing this same problem both on Amazon
EC2 running Ubuntu and Macbook Pro running snow leopard. The
performance difference is similar in both instance.&lt;/p&gt;
&lt;p&gt;Now using the Rails 3 ActiveRecord API yield very very fast
result.&lt;/p&gt;
&lt;p&gt;RAILS3&lt;/p&gt;
&lt;p&gt;OLD API&lt;br&gt;
puts Benchmark.measure{5000.times{User.find :first, :conditions
=&amp;gt; [&quot;id&lt;br&gt;
= ?&quot;, (rand * 1000 + 1).to_i]}} 9.100000 0.810000 9.910000 (
28.481634&lt;/p&gt;
&lt;p&gt;NEW API&lt;br&gt;
puts Benchmark.measure{ 5000.times { User.where(:id =&amp;gt; (rand *
1000 + 1).to_i) } }&lt;/p&gt;
&lt;p&gt;I am in production mode.&lt;/p&gt;
&lt;p&gt;0.830000 0.000000 0.830000 ( 0.838565)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T04:37:25+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-13T04:37:29+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">4</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am using MySQL, and am seeing this same problem both on Amazon EC2 running Ubuntu and Macbook Pro running snow leopard. The performance difference is similar in both instance.
Now using the Rails 3 new ActiveRecord API yield very very fast result.

BOTH are Rails 3

@@@
OLD API
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id = ?&quot;, (rand * 1000 + 1).to_i]}} 9.100000 0.810000 9.910000 ( 28.481634
@@@

@@@
NEW API
puts Benchmark.measure{ 5000.times { User.where(:id =&gt; (rand * 1000 + 1).to_i) } }
0.830000 0.000000 0.830000 ( 0.838565)
@@@

I am in production mode.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am using MySQL, and am seeing this same problem both on Amazon
EC2 running Ubuntu and Macbook Pro running snow leopard. The
performance difference is similar in both instance.&lt;br&gt;
Now using the Rails 3 new ActiveRecord API yield very very fast
result.&lt;/p&gt;
&lt;p&gt;BOTH are Rails 3&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;OLD API
puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id = ?&quot;, (rand * 1000 + 1).to_i]}} 9.100000 0.810000 9.910000 ( 28.481634&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;NEW API
puts Benchmark.measure{ 5000.times { User.where(:id =&amp;gt; (rand * 1000 + 1).to_i) } }
0.830000 0.000000 0.830000 ( 0.838565)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I am in production mode.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T04:39:29+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-13T04:39:31+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">5</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails3 beta4, Ruby 1.9.2 preview 3.  This time on CentOS 5.5 instead of dev Mac.
Production in console.  I tested several models, 5 times each.  Similar results in all cases:

@@@
$ rails c production

Loading production environment (Rails 3.0.0.beta4)
irb(main):012:0&gt; puts Benchmark.measure{5000.times{|i| SearchLog.find(i+1)}}
  4.690000   0.190000   4.880000 (  7.102072)
=&gt; nil
irb(main):013:0&gt; puts Benchmark.measure{5000.times{|i| SearchLog.where(:id=&gt;(i+1))}}
  0.310000   0.000000   0.310000 (  0.308452)
=&gt; nil
@@@

Production with Passenger

@@@
puts Benchmark.measure{5000.times{|i| SearchLog.find(i+1)}}
3.520000   0.260000   3.780000 (  6.031257)

puts Benchmark.measure{5000.times{|i| SearchLog.where(:id=&gt;(i+1))}}
0.130000   0.000000   0.130000 (  0.131140)
@@@


I am working on running this against edge to see if I get the same results.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails3 beta4, Ruby 1.9.2 preview 3. This time on CentOS 5.5
instead of dev Mac.&lt;br&gt;
Production in console. I tested several models, 5 times each.
Similar results in all cases:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ rails c production

Loading production environment (Rails 3.0.0.beta4)
irb(main):012:0&amp;gt; puts Benchmark.measure{5000.times{|i| SearchLog.find(i+1)}}
  4.690000   0.190000   4.880000 (  7.102072)
=&amp;gt; nil
irb(main):013:0&amp;gt; puts Benchmark.measure{5000.times{|i| SearchLog.where(:id=&amp;gt;(i+1))}}
  0.310000   0.000000   0.310000 (  0.308452)
=&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Production with Passenger&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;puts Benchmark.measure{5000.times{|i| SearchLog.find(i+1)}}
3.520000   0.260000   3.780000 (  6.031257)

puts Benchmark.measure{5000.times{|i| SearchLog.where(:id=&amp;gt;(i+1))}}
0.130000   0.000000   0.130000 (  0.131140)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I am working on running this against edge to see if I get the
same results.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T12:49:01+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-13T12:49:06+01:00</updated-at>
      <user-id type="integer">103655</user-id>
      <version type="integer">6</version>
      <user-name>John McAliley</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I apologize, but that last test is incorrect.  The queries were not even executed.. I did not realize it was lazy loaded.  I added a print statement so the query gets executed and the results are about the same for both queries now.  So &quot;where&quot; is not performing much different than &quot;find&quot; on Rails 3.

@@@
puts Benchmark.measure{5000.times{|i| p SearchLog.where(:id=&gt;(i+1));}}
5.890000   0.480000   6.370000 (  8.860438)

puts Benchmark.measure{5000.times{|i| p SearchLog.find(i+1);}}
6.000000   0.440000   6.440000 (  8.965563)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I apologize, but that last test is incorrect. The queries were
not even executed.. I did not realize it was lazy loaded. I added a
print statement so the query gets executed and the results are
about the same for both queries now. So &quot;where&quot; is not performing
much different than &quot;find&quot; on Rails 3.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;puts Benchmark.measure{5000.times{|i| p SearchLog.where(:id=&amp;gt;(i+1));}}
5.890000   0.480000   6.370000 (  8.860438)

puts Benchmark.measure{5000.times{|i| p SearchLog.find(i+1);}}
6.000000   0.440000   6.440000 (  8.965563)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T13:32:02+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-13T13:32:04+01:00</updated-at>
      <user-id type="integer">103655</user-id>
      <version type="integer">7</version>
      <user-name>John McAliley</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Another test w/ Rails3 edge instead of beta4 gems.  Performance is better in Rails 3 edge, but still not as good as 2.3.2.  But acceptable for my app.

@drjoke - Sorry about my earlier test with &quot;where&quot;.  It was incorrect b/c the queries were never executed... I hope you didn't start converting your queries as a result.  Have you tried benchmarking your app with edge Rails?  

@Miles Egan - performance is slightly better in production mode in edge.

@@@
Loading RAILS_ENV=production environment (Rails 2.3.2)
puts Benchmark.measure{5000.times{|i| SearchLog.find(i+1)}}
  1.120000   0.140000   1.260000 (  1.788877)


#rails 3b4 gem
Loading production environment (Rails 3.0.0.beta4)
puts Benchmark.measure{5000.times{|i| SearchLog.find(i+1)}}
  2.370000   0.100000   2.470000 (  3.006663)
@@@

Rails 3 Edge in production mode w/ commit: b75fc...  I added this to my Gemfile: gem 'rails', :git =&gt; 'git://github.com/rails/rails.git' and bundle install.
@@@
puts Benchmark.measure{5000.times{|i| SearchLog.find(i+1);}}
  1.680000   0.090000   1.770000 (  2.282400)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Another test w/ Rails3 edge instead of beta4 gems. Performance
is better in Rails 3 edge, but still not as good as 2.3.2. But
acceptable for my app.&lt;/p&gt;
&lt;p&gt;@drjoke - Sorry about my earlier test with &quot;where&quot;. It was
incorrect b/c the queries were never executed... I hope you didn't
start converting your queries as a result. Have you tried
benchmarking your app with edge Rails?&lt;br&gt;&lt;/p&gt;
&lt;p&gt;@Miles Egan - performance is slightly better in production mode
in edge.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Loading RAILS_ENV=production environment (Rails 2.3.2)
puts Benchmark.measure{5000.times{|i| SearchLog.find(i+1)}}
  1.120000   0.140000   1.260000 (  1.788877)


#rails 3b4 gem
Loading production environment (Rails 3.0.0.beta4)
puts Benchmark.measure{5000.times{|i| SearchLog.find(i+1)}}
  2.370000   0.100000   2.470000 (  3.006663)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Rails 3 Edge in production mode w/ commit: b75fc... I added this
to my Gemfile: gem 'rails', :git =&amp;gt;
'git://github.com/rails/rails.git' and bundle install.&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;puts Benchmark.measure{5000.times{|i| SearchLog.find(i+1);}}
  1.680000   0.090000   1.770000 (  2.282400)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T14:54:04+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-13T14:54:05+01:00</updated-at>
      <user-id type="integer">103655</user-id>
      <version type="integer">8</version>
      <user-name>John McAliley</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I run production on Amazon AWS EC2. If Rails 3 is not going to be as fast as Rails 2.3.5, it means I will have to pay more $$$ for more EC2 instances. 

Until Rails 3 Edge performs as well as Rails 2.3.5, I will not be able to upgrade. I actually read a lot of blogs which tend to make me think that Rails 3 ActiveRecord improvement is all about speed.

Is there any sign that the core developers are aware of this issue?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I run production on Amazon AWS EC2. If Rails 3 is not going to
be as fast as Rails 2.3.5, it means I will have to pay more $$$ for
more EC2 instances.&lt;/p&gt;
&lt;p&gt;Until Rails 3 Edge performs as well as Rails 2.3.5, I will not
be able to upgrade. I actually read a lot of blogs which tend to
make me think that Rails 3 ActiveRecord improvement is all about
speed.&lt;/p&gt;
&lt;p&gt;Is there any sign that the core developers are aware of this
issue?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T16:01:45+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-13T16:01:47+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">9</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am now trying Rails 3.0 Edge. It 33% faster than Rails 3.0 Beta 4, but over 100% slower than Rails 2.3.5.

@@@
Rails 2.3.5
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id = ?&quot;, (rand * 1000 + 1).to_i]}}
  2.460000   0.440000   2.900000 ( 20.093052)

Rails 3.0 Beta 4
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id = ?&quot;, (rand * 1000 + 1).to_i]}}
  9.100000   0.810000   9.910000 ( 28.481634)

Rails 3.0 Edge
puts Benchmark.measure{ 5000.times { User.where(:id =&gt; (rand * 1000 + 1).to_i)[0].id } }
  6.050000   0.670000   6.720000 ( 24.857868)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am now trying Rails 3.0 Edge. It 33% faster than Rails 3.0
Beta 4, but over 100% slower than Rails 2.3.5.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails 2.3.5
puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id = ?&quot;, (rand * 1000 + 1).to_i]}}
  2.460000   0.440000   2.900000 ( 20.093052)

Rails 3.0 Beta 4
puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id = ?&quot;, (rand * 1000 + 1).to_i]}}
  9.100000   0.810000   9.910000 ( 28.481634)

Rails 3.0 Edge
puts Benchmark.measure{ 5000.times { User.where(:id =&amp;gt; (rand * 1000 + 1).to_i)[0].id } }
  6.050000   0.670000   6.720000 ( 24.857868)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T16:57:24+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-13T16:57:27+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">10</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>drjoke - I think the number we're interested in here is the last (real time) of the benchmark measure results, right?</body>
      <body-html>&lt;div&gt;&lt;p&gt;drjoke - I think the number we're interested in here is the last
(real time) of the benchmark measure results, right?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T21:37:14+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-13T21:37:16+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">11</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Following up on this, I created a test set of data like this:
@@@ ruby
&gt;&gt; 5000.times { User.create(:name =&gt; &quot;name&quot;) }
@@@

And a simple benchmark script like this:
    count = 0
    Benchmark.bm(10) do |x|
      x.report(&quot;find&quot;) { 10000.times { count += User.find(:first, :conditions =&gt; [&quot;id = ?&quot;, rand(5000) + 1]).name.size } }
      puts count
      if Rails.version =~ /^3/
        count = 0
        x.report(&quot;where&quot;) { 10000.times { count += User.where(:id =&gt; rand(5000) + 1).name.size } }
        puts count
      end
    end

Running this with rails 2 I get this:
    $ ./script/runner -e production ../bench.rb 
                    user     system      total        real
    find        2.730000   0.090000   2.820000 (  3.629271)
    40000

and with rails 3 I get this:
    $ bundle exec ~/c/rails/bin/rails runner -e production ../bench.rb 
                    user     system      total        real
    find        5.320000   0.050000   5.370000 (  6.230500)
    40000
    where       0.610000   0.010000   0.620000 (  0.618468)
    40000

So I'm seeing rails 3 as almost twice as slow doing a find() but significantly faster with a where(). This is on a desktop workstation though so the I/O characteristics might be very different from an EC2 instance.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Following up on this, I created a test set of data like
this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; 5000.times { User.create(:name =&amp;gt; &quot;name&quot;) }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And a simple benchmark script like this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;count = 0
Benchmark.bm(10) do |x|
  x.report(&quot;find&quot;) { 10000.times { count += User.find(:first, :conditions =&amp;gt; [&quot;id = ?&quot;, rand(5000) + 1]).name.size } }
  puts count
  if Rails.version =~ /^3/
    count = 0
    x.report(&quot;where&quot;) { 10000.times { count += User.where(:id =&amp;gt; rand(5000) + 1).name.size } }
    puts count
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Running this with rails 2 I get this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ ./script/runner -e production ../bench.rb
                user     system      total        real
find        2.730000   0.090000   2.820000 (  3.629271)
40000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and with rails 3 I get this:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ bundle exec ~/c/rails/bin/rails runner -e production ../bench.rb
                user     system      total        real
find        5.320000   0.050000   5.370000 (  6.230500)
40000
where       0.610000   0.010000   0.620000 (  0.618468)
40000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So I'm seeing rails 3 as almost twice as slow doing a find() but
significantly faster with a where(). This is on a desktop
workstation though so the I/O characteristics might be very
different from an EC2 instance.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-13T22:10:43+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-13T22:10:45+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">12</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Miles,

keep in mind that User.where(:id =&gt; ... ) isn't actually hitting the database unless you try to access it. Which means User.find(...) is loading and instantiating 5000 records vs User.where(...) isn't loading anything. So you are comparing apples with oranges here...

Best, Daniel</body>
      <body-html>&lt;div&gt;&lt;p&gt;Miles,&lt;/p&gt;
&lt;p&gt;keep in mind that User.where(:id =&amp;gt; ... ) isn't actually
hitting the database unless you try to access it. Which means
User.find(...) is loading and instantiating 5000 records vs
User.where(...) isn't loading anything. So you are comparing apples
with oranges here...&lt;/p&gt;
&lt;p&gt;Best, Daniel&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T01:13:46+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T01:13:47+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">13</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Daniel - if you look at the benchmark code I posted I access an attribute(name, in this case) of each instance returned by where() and use it to calculate a running total. So it looks to me as if it is actually performing the queries. Is this not the case?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Daniel - if you look at the benchmark code I posted I access an
attribute(name, in this case) of each instance returned by where()
and use it to calculate a running total. So it looks to me as if it
is actually performing the queries. Is this not the case?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T01:15:24+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T01:15:27+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">14</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Miles - At first glance it appears that it executes the queries, but take a look at this:
@@@
p User.where(:id =&gt; rand(5000) + 1).class
ActiveRecord::Relation

p User.where(:id =&gt; rand(5000) + 1).name
&quot;User&quot;
@@@

Your query returns an ActiveRecord::Relation object and coincidentally the name method returns a 4 character string (&quot;User&quot;) also.  Its just like calling User.name.  You need to call .first or [0] to get the User model and execute the SQL query.

@@@
p User.where(:id =&gt; rand(5000) + 1).first.name
&quot;some_user_name&quot;
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Miles - At first glance it appears that it executes the
queries, but take a look at this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;p User.where(:id =&amp;gt; rand(5000) + 1).class
ActiveRecord::Relation&lt;br&gt;
&lt;br&gt;


&lt;br&gt;
p User.where(:id =&amp;gt; rand(5000) + 1).name
&quot;User&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Your query returns an ActiveRecord::Relation object and
coincidentally the name method returns a 4 character string
(&quot;User&quot;) also. Its just like calling User.name. You need to call
.first or &lt;a href=&quot;/projects/8994/changesets/0&quot; title=
&quot;Changeset [0]&quot;&gt;[0]&lt;/a&gt; to get the User model and execute the SQL
query.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;p User.where(:id =&amp;gt; rand(5000) + 1).first.name
&quot;some_user_name&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T03:33:31+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T03:33:33+01:00</updated-at>
      <user-id type="integer">103655</user-id>
      <version type="integer">15</version>
      <user-name>John McAliley</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@miles I think we are looking at the third number from the left for benchmark result, which is also the last number when not counting the parenthesized one.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@miles I think we are looking at the third number from the left
for benchmark result, which is also the last number when not
counting the parenthesized one.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T04:06:49+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T04:06:52+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">16</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@miles please look at how I do my recent benchmark with the new API. I feel this is the correct way to get through the lazy loading feature.

It is a bit faster than using the old API, but still 100% slower than Rails 2.3.5.

@@@
Rails 3.0 Edge
puts Benchmark.measure{ 5000.times { User.where(:id =&gt; (rand * 1000 + 1).to_i)[0].id } }
  6.050000   0.670000   6.720000 ( 24.857868)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;@miles please look at how I do my recent benchmark with the new
API. I feel this is the correct way to get through the lazy loading
feature.&lt;/p&gt;
&lt;p&gt;It is a bit faster than using the old API, but still 100% slower
than Rails 2.3.5.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails 3.0 Edge
puts Benchmark.measure{ 5000.times { User.where(:id =&amp;gt; (rand * 1000 + 1).to_i)[0].id } }
  6.050000   0.670000   6.720000 ( 24.857868)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T04:15:06+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T04:15:07+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">17</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>John - good catch. I guess I chose a bad default value for my test data that masked the behavior of the where() method. Those low times meant that no queries were actually being run.

drjoke - Using your syntax I reran my tests and I'm seeing essentially the same thing you're seeing. On this test at least rails3 seems to take about twice as long as rails2 to run the same query.</body>
      <body-html>&lt;div&gt;&lt;p&gt;John - good catch. I guess I chose a bad default value for my
test data that masked the behavior of the where() method. Those low
times meant that no queries were actually being run.&lt;/p&gt;
&lt;p&gt;drjoke - Using your syntax I reran my tests and I'm seeing
essentially the same thing you're seeing. On this test at least
rails3 seems to take about twice as long as rails2 to run the same
query.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T04:23:45+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T04:23:47+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">18</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>djroke: Why the (rand * 1000 + 1).to_i ? Float multiplication &amp; conversion to integer will take it's own time imho. I tried the following on Rails master:

@@@ ruby
puts Benchmark.measure { 5000.times { |i| Post.where(:id =&gt; 1).all } }
  3.220000   0.110000   3.330000 (  3.842138)
@@@

I'm a benchmarking noob though so I might be totally wrong about this. Also is there any way to find out where Rails is spending it's time?</body>
      <body-html>&lt;div&gt;&lt;p&gt;djroke: Why the (rand * 1000 + 1).to_i ? Float multiplication
&amp;amp; conversion to integer will take it's own time imho. I tried
the following on Rails master:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;puts Benchmark.measure { 5000.times { |i| Post.where(:id =&amp;gt; 1).all } }
  3.220000   0.110000   3.330000 (  3.842138)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm a benchmarking noob though so I might be totally wrong about
this. Also is there any way to find out where Rails is spending
it's time?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T04:48:51+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T04:48:54+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">19</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rohit I've attached two traces from ruby-prof on this benchmark, prof2.txt for rails2 and prof3.txt for rails 3. I'm no expert at ruby profiling either but the calls to the Arel::SqlCompiler kind of jump out from the profile. It would be great if somebody more familiar with the arel/AR code could look at this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rohit I've attached two traces from ruby-prof on this benchmark,
prof2.txt for rails2 and prof3.txt for rails 3. I'm no expert at
ruby profiling either but the calls to the Arel::SqlCompiler kind
of jump out from the profile. It would be great if somebody more
familiar with the arel/AR code could look at this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T04:57:57+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T04:58:00+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">20</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>In the benchmarks above, the value we should look at is (real). That said, we had a performance decrease by moving from 20s (2.3) to around 24s (using Rails master). This is expected since we moved to ARel and ActiveRecord today share both the old and new code (as soon as we deprecate and remove it, performance will likely improve).

Also, notice we already have some benchmarks inside activerecord that we've been using extensively. Nonetheless, the profiling results helps, so I'm assigning to Emilio to see if there is something we can cache help in Arel::SqlCompiler.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In the benchmarks above, the value we should look at is (real).
That said, we had a performance decrease by moving from 20s (2.3)
to around 24s (using Rails master). This is expected since we moved
to ARel and ActiveRecord today share both the old and new code (as
soon as we deprecate and remove it, performance will likely
improve).&lt;/p&gt;
&lt;p&gt;Also, notice we already have some benchmarks inside activerecord
that we've been using extensively. Nonetheless, the profiling
results helps, so I'm assigning to Emilio to see if there is
something we can cache help in Arel::SqlCompiler.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T13:12:44+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 3
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T13:12:46+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">21</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Jose, I have a different take on this. 

I feel we should look at total, which is the third number, because it signifies the total CPU consumed to process this request. 

In real deployment, especially in my case with AWS EC2, I am concern about the CPU consumed because I would have multiple ruby threads processing requests in parallel. All these threads will add up to the total CPU used by the EC2 instance. 

(real), the wall clock time, is influence by other factors like network latency or even MySQL delay. It makes the slowness in the Rails 3.0 code itself appear a lot less significant. Also, it would not signify the concern that people will have in real deployment with CPU cycles.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Jose, I have a different take on this.&lt;/p&gt;
&lt;p&gt;I feel we should look at total, which is the third number,
because it signifies the total CPU consumed to process this
request.&lt;/p&gt;
&lt;p&gt;In real deployment, especially in my case with AWS EC2, I am
concern about the CPU consumed because I would have multiple ruby
threads processing requests in parallel. All these threads will add
up to the total CPU used by the EC2 instance.&lt;/p&gt;
&lt;p&gt;(real), the wall clock time, is influence by other factors like
network latency or even MySQL delay. It makes the slowness in the
Rails 3.0 code itself appear a lot less significant. Also, it would
not signify the concern that people will have in real deployment
with CPU cycles.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T13:56:19+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T13:56:21+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">22</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Jose I have another question as well. Do you expect things to improve in Rails 3.0 final? 

When you said &quot;(as soon as we deprecate and remove it, performance will likely improve)&quot; are you talking about removing the old .find API before things start improving? If that is so, it will be in Rails 3.1 or after?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Jose I have another question as well. Do you expect things to
improve in Rails 3.0 final?&lt;/p&gt;
&lt;p&gt;When you said &quot;(as soon as we deprecate and remove it,
performance will likely improve)&quot; are you talking about removing
the old .find API before things start improving? If that is so, it
will be in Rails 3.1 or after?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T14:06:33+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T14:06:34+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">23</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Here is another profile similar to Miles, if you need more data.  OSX 10.5.8, Ruby 1.9.2 preview3, Rails Edge vs OSX 10.5.8, Ruby 1.8.6, Rails 2.3.2
@@@
require 'ruby-prof'
RubyProf.start
1000.times{|i| User.find(i+1000)}
result = RubyProf.stop
printer = RubyProf::FlatPrinter.new(result)
printer.print(STDOUT)
@@@

Results are in the attached spreadsheet (2 sheets).  I just included total time (self), total % of time (%self), and method calls.  Rails 3 has significantly more method calls - 661,902 vs 399,990.  And total time - 4.09 vs 2.39

There are alot of calls to Class.new, #method_missing, etc..  Performance may be taking a hit from some of the meta stuff and arel in general.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is another profile similar to Miles, if you need more data.
OSX 10.5.8, Ruby 1.9.2 preview3, Rails Edge vs OSX 10.5.8, Ruby
1.8.6, Rails 2.3.2&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'ruby-prof'
RubyProf.start
1000.times{|i| User.find(i+1000)}
result = RubyProf.stop
printer = RubyProf::FlatPrinter.new(result)
printer.print(STDOUT)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Results are in the attached spreadsheet (2 sheets). I just
included total time (self), total % of time (%self), and method
calls. Rails 3 has significantly more method calls - 661,902 vs
399,990. And total time - 4.09 vs 2.39&lt;/p&gt;
&lt;p&gt;There are alot of calls to Class.new, #method_missing, etc..
Performance may be taking a hit from some of the meta stuff and
arel in general.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T14:09:45+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 16138
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T14:09:50+01:00</updated-at>
      <user-id type="integer">103655</user-id>
      <version type="integer">24</version>
      <user-name>John McAliley</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>oops.. looks like I accidentally wiped out assigned user.. setting it back to Emilio</body>
      <body-html>&lt;div&gt;&lt;p&gt;oops.. looks like I accidentally wiped out assigned user..
setting it back to Emilio&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T14:12:20+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T14:12:23+01:00</updated-at>
      <user-id type="integer">103655</user-id>
      <version type="integer">25</version>
      <user-name>John McAliley</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I did some more testing and yes Arel::SqlCompiler adds to the total run time e.g.

@@@
Test case: puts Benchmark.measure{5000.times{User.where(:id =&gt; (rand * 1000 + 1).to_i)[0] }}

Rails 3 Edge &amp; Ruby 1.9.1
========================================================
Base case (unmodified code) total run time: 2.25
Replace call to compiler with static sql:   1.33
Replace to_a with static return value (this doesn't hit the database): 0.27
@@@

However I also compared run time for basic calls to User.find_by_sql and ActiveRecord::Base.connection.execute and I'm already seeing almost twice as long runtimes there between Rails 2.3.5 and Rails 3 Edge. Note: my database is actually empty while running these tests.

@@@

Rails 3 Edge
========================================================
irb(main):007:0&gt; puts Benchmark.measure{5000.times{User.find_by_sql(&quot;Select * from users where id = #{(rand * 1000 + 1).to_i}&quot;)[0] }}
  1.120000   0.080000   1.200000 (  1.212694)
=&gt; nil
irb(main):008:0&gt; puts Benchmark.measure{5000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = #{(rand * 1000 + 1).to_i}&quot;) }}
  0.950000   0.080000   1.030000 (  1.037620)
=&gt; nil


Rails 2.3.5
========================================================
&gt;&gt; puts Benchmark.measure{5000.times{User.find_by_sql(&quot;Select * from users where id = #{(rand * 1000 + 1).to_i}&quot;)[0] }}
  0.650000   0.080000   0.730000 (  0.750073)
=&gt; nil
&gt;&gt; puts Benchmark.measure{5000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = #{(rand * 1000 + 1).to_i}&quot;) }}
  0.490000   0.070000   0.560000 (  0.567267)
=&gt; nil
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I did some more testing and yes Arel::SqlCompiler adds to the
total run time e.g.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Test case: puts Benchmark.measure{5000.times{User.where(:id =&amp;gt; (rand * 1000 + 1).to_i)[0] }}

Rails 3 Edge &amp;amp; Ruby 1.9.1
========================================================
Base case (unmodified code) total run time: 2.25
Replace call to compiler with static sql:   1.33
Replace to_a with static return value (this doesn't hit the database): 0.27&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However I also compared run time for basic calls to
User.find_by_sql and ActiveRecord::Base.connection.execute and I'm
already seeing almost twice as long runtimes there between Rails
2.3.5 and Rails 3 Edge. Note: my database is actually empty while
running these tests.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
Rails 3 Edge
========================================================
irb(main):007:0&amp;gt; puts Benchmark.measure{5000.times{User.find_by_sql(&quot;Select * from users where id = #{(rand * 1000 + 1).to_i}&quot;)[0] }}
  1.120000   0.080000   1.200000 (  1.212694)
=&amp;gt; nil
irb(main):008:0&amp;gt; puts Benchmark.measure{5000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = #{(rand * 1000 + 1).to_i}&quot;) }}
  0.950000   0.080000   1.030000 (  1.037620)
=&amp;gt; nil


Rails 2.3.5
========================================================
&amp;gt;&amp;gt; puts Benchmark.measure{5000.times{User.find_by_sql(&quot;Select * from users where id = #{(rand * 1000 + 1).to_i}&quot;)[0] }}
  0.650000   0.080000   0.730000 (  0.750073)
=&amp;gt; nil
&amp;gt;&amp;gt; puts Benchmark.measure{5000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = #{(rand * 1000 + 1).to_i}&quot;) }}
  0.490000   0.070000   0.560000 (  0.567267)
=&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T14:44:22+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 16138
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T14:44:24+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">26</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-14T14:45:44+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-14T14:45:47+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">27</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>@drjoke : Removing the old API won't have any affect on the performance. Under the hood, old API is using the new finder methods already ( Check Relation#apply_finder_options ).

@Daniel : Difference in find_by_sql time is because of an instrumentation call in AbstractAdapter#log. If you remove ActiveSupport::Notifications stuff from there, you'd see completely different results.

Finder performance hit in AR 3 is mainly because of ARel and ActiveSupport::Notifications to a very minor extent. So, patches please :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;@drjoke : Removing the old API won't have any affect on the
performance. Under the hood, old API is using the new finder
methods already ( Check Relation#apply_finder_options ).&lt;/p&gt;
&lt;p&gt;@Daniel : Difference in find_by_sql time is because of an
instrumentation call in AbstractAdapter#log. If you remove
ActiveSupport::Notifications stuff from there, you'd see completely
different results.&lt;/p&gt;
&lt;p&gt;Finder performance hit in AR 3 is mainly because of ARel and
ActiveSupport::Notifications to a very minor extent. So, patches
please :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-16T00:22:40+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-16T00:22:42+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">28</version>
      <user-name>Pratik</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>@Patrik : Unfortunately you're right. I could squeeze out a tiny performance gain by changing the code a little, but most of the remaining difference comes from @block.call(*args) in the Subscribers 'push' method.

Test case &amp; results:
@@@
Base case Rails 2.3.5
=================================================
&gt;&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  6.180000   0.760000   6.940000 (  7.126519)

Rails 3 without modifications
=================================================
irb(main):001:0&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  9.110000   0.790000   9.900000 (  9.914706)

Rails 3 with modified code
=================================================
irb(main):001:0&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  8.860000   0.780000   9.640000 (  9.661421)

Rails 3 with commented @block.call(*args) and modified code
=================================================
irb(main):001:0&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  6.930000   0.780000   7.710000 (  7.718084)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Patrik : Unfortunately you're right. I could squeeze out a tiny
performance gain by changing the code a little, but most of the
remaining difference comes from @block.call(*args) in the
Subscribers 'push' method.&lt;/p&gt;
&lt;p&gt;Test case &amp;amp; results:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Base case Rails 2.3.5
=================================================
&amp;gt;&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  6.180000   0.760000   6.940000 (  7.126519)

Rails 3 without modifications
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  9.110000   0.790000   9.900000 (  9.914706)

Rails 3 with modified code
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  8.860000   0.780000   9.640000 (  9.661421)

Rails 3 with commented @block.call(*args) and modified code
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  6.930000   0.780000   7.710000 (  7.718084)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T04:53:14+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-18T04:53:18+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">29</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Well you can get a little but more performance out of it if you modify the log_subscriber 'sql' method a tiny bit.

@@@
Rails 3 with modified log_subscriber
=================================================
irb(main):001:0&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  7.540000   0.780000   8.320000 (  8.351694)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well you can get a little but more performance out of it if you
modify the log_subscriber 'sql' method a tiny bit.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails 3 with modified log_subscriber
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  7.540000   0.780000   8.320000 (  8.351694)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T05:14:49+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-18T05:14:53+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">30</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>Daniel, could you wrap up these changes in a patch following the guidelines here: https://rails.lighthouseapp.com/projects/8994/sending-patches

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Daniel, could you wrap up these changes in a patch following the
guidelines here: &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/sending-patches&quot;&gt;https://rails.lighthouseapp.com/projects/8994/sending-patches&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T09:22:30+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-18T09:22:35+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">31</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>Ok, attached patch against the latest version of rails master following the above guidelines.
Latest version now comes pretty close to the 2.3.5 base case:

@@@
Rails 2.3.5
=================================================
&gt;&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  6.100000   0.740000   6.840000 (  6.852199)

Rails 3 without patch applied
=================================================
irb(main):002:0&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  7.560000   0.760000   8.320000 (  8.335182)

Rails 3 with patch applied
=================================================
irb(main):001:0&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  6.370000   0.740000   7.110000 (  7.106953)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, attached patch against the latest version of rails master
following the above guidelines.&lt;br&gt;
Latest version now comes pretty close to the 2.3.5 base case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails 2.3.5
=================================================
&amp;gt;&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  6.100000   0.740000   6.840000 (  6.852199)

Rails 3 without patch applied
=================================================
irb(main):002:0&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  7.560000   0.760000   8.320000 (  8.335182)

Rails 3 with patch applied
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  6.370000   0.740000   7.110000 (  7.106953)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T13:02:58+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-18T13:03:00+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">32</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>@daniel
Can you please try the new patch on ActiveRecord.find rather than the pre-baked SQL statements? Would this change have any impact? For example, please try:

@@@
puts Benchmark.measure{5000.times{User.find :first, :conditions =&gt; [&quot;id = ?&quot;, (rand * 1000 + 1).to_i]}}
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;@daniel Can you please try the new patch on ActiveRecord.find
rather than the pre-baked SQL statements? Would this change have
any impact? For example, please try:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;puts Benchmark.measure{5000.times{User.find :first, :conditions =&amp;gt; [&quot;id = ?&quot;, (rand * 1000 + 1).to_i]}}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-18T14:46:07+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-18T14:46:12+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">33</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>@daniel Can you rebase your patch against master, and I'll apply it?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@daniel Can you rebase your patch against master, and I'll apply
it?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T19:20:27+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T19:20:30+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">34</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">6</attachments-count>
      <body>@aaron : I attached updated patch.

@drjoke : no this doesn't have any impact on find yet. Performance hit in find comes more or less completely from Arel</body>
      <body-html>&lt;div&gt;&lt;p&gt;@aaron : I attached updated patch.&lt;/p&gt;
&lt;p&gt;@drjoke : no this doesn't have any impact on find yet.
Performance hit in find comes more or less completely from Arel&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T19:34:18+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T19:34:26+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">35</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>(from [38f0161aabb302550e1522cb62d19e54d448be9b]) Minor performance improvment in notifications/fanout and active_record/log_subscriber [#5098 state:open]
http://github.com/rails/rails/commit/38f0161aabb302550e1522cb62d19e54d448be9b</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/38f0161aabb302550e1522cb62d19e54d448be9b&quot;
title=
&quot;Changeset [38f0161aabb302550e1522cb62d19e54d448be9b]&quot;&gt;[38f0161aabb302550e1522cb62d19e54d448be9b]&lt;/a&gt;)
Minor performance improvment in notifications/fanout and
active_record/log_subscriber [&lt;a href=&quot;/projects/8994/tickets/5098&quot;
title=&quot;Ticket #5098&quot;&gt;#5098&lt;/a&gt; state:open] &lt;a href=
&quot;http://github.com/rails/rails/commit/38f0161aabb302550e1522cb62d19e54d448be9b&quot;&gt;
http://github.com/rails/rails/commit/38f0161aabb302550e1522cb62d19e...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T19:46:07+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T19:46:09+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">36</version>
      <user-name>Repository</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>I was able to shave a little of the overhead off the arel code by explicitly defining all the methods that are called via method_missing in arel/lib/arel/engines/sql/relations/compiler.rb, but it didn't seem like it was enough to really make it worth it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I was able to shave a little of the overhead off the arel code
by explicitly defining all the methods that are called via
method_missing in arel/lib/arel/engines/sql/relations/compiler.rb,
but it didn't seem like it was enough to really make it worth
it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T20:21:34+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T20:21:40+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">37</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Miles, I think that'd still be a good patch. Could just use class_eval or delegate to declare those methods.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Miles, I think that'd still be a good patch. Could just use
class_eval or delegate to declare those methods.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T20:47:41+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T20:47:46+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">38</version>
      <user-name>Pratik</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Ok I'll see if I can put together a good patch for that.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok I'll see if I can put together a good patch for that.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T20:58:26+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T20:58:29+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">39</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>I don't think it is needed to define all the methods. What I tried to do before with little performance impact was to call the methods directly on the relation and change the method there from protected to public. e.g instead of

@@@

      def select_sql
        query = build_query \
          &quot;SELECT     #{select_clauses.join(', ')}&quot;,
          &quot;FROM       #{from_clauses}&quot;,
          (joins(self)                                   unless joins(self).blank? ),
          (&quot;WHERE     #{where_clauses.join(' AND ')}&quot;    unless wheres.blank?      ),
          (&quot;GROUP BY  #{group_clauses.join(', ')}&quot;       unless groupings.blank?   ),
          (&quot;HAVING    #{having_clauses.join(' AND ')}&quot;      unless havings.blank?     ),
          (&quot;ORDER BY  #{order_clauses.join(', ')}&quot;       unless orders.blank?      )
          engine.add_limit_offset!(query,{ :limit =&gt; taken, :offset =&gt; skipped }) if taken || skipped
          query &lt;&lt; &quot; #{locked}&quot; unless locked.blank?
          query
      end
@@@

you would get something like:

@@@

      def select_sql
        query = build_query \
          &quot;SELECT     #{relation.select_clauses.join(', ')}&quot;,
          &quot;FROM       #{relation.from_clauses}&quot;,
          (relation.joins(self)                                   unless relation.joins(self).blank? ),
          (&quot;WHERE     #{relation.where_clauses.join(' AND ')}&quot;    unless relation.wheres.blank?      ),
          (&quot;GROUP BY  #{relation.group_clauses.join(', ')}&quot;       unless relation.groupings.blank?   ),
          (&quot;HAVING    #{relation.having_clauses.join(' AND ')}&quot;   unless relation.havings.blank?     ),
          (&quot;ORDER BY  #{relation.order_clauses.join(', ')}&quot;       unless relation.orders.blank?      )
          engine.add_limit_offset!(query,{ :limit =&gt; relation.taken, :offset =&gt; relation.skipped }) if relation.taken || relation.skipped
          query &lt;&lt; &quot; #{locked}&quot; unless locked.blank?
          query
      end
@@@

which call all the functions directly on the relation which is what method_missing did before. It saves you the extra method call if you define each method in the compile.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think it is needed to define all the methods. What I
tried to do before with little performance impact was to call the
methods directly on the relation and change the method there from
protected to public. e.g instead of&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
      def select_sql
        query = build_query \
          &quot;SELECT     #{select_clauses.join(', ')}&quot;,
          &quot;FROM       #{from_clauses}&quot;,
          (joins(self)                                   unless joins(self).blank? ),
          (&quot;WHERE     #{where_clauses.join(' AND ')}&quot;    unless wheres.blank?      ),
          (&quot;GROUP BY  #{group_clauses.join(', ')}&quot;       unless groupings.blank?   ),
          (&quot;HAVING    #{having_clauses.join(' AND ')}&quot;      unless havings.blank?     ),
          (&quot;ORDER BY  #{order_clauses.join(', ')}&quot;       unless orders.blank?      )
          engine.add_limit_offset!(query,{ :limit =&amp;gt; taken, :offset =&amp;gt; skipped }) if taken || skipped
          query &amp;lt;&amp;lt; &quot; #{locked}&quot; unless locked.blank?
          query
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;you would get something like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
      def select_sql
        query = build_query \
          &quot;SELECT     #{relation.select_clauses.join(', ')}&quot;,
          &quot;FROM       #{relation.from_clauses}&quot;,
          (relation.joins(self)                                   unless relation.joins(self).blank? ),
          (&quot;WHERE     #{relation.where_clauses.join(' AND ')}&quot;    unless relation.wheres.blank?      ),
          (&quot;GROUP BY  #{relation.group_clauses.join(', ')}&quot;       unless relation.groupings.blank?   ),
          (&quot;HAVING    #{relation.having_clauses.join(' AND ')}&quot;   unless relation.havings.blank?     ),
          (&quot;ORDER BY  #{relation.order_clauses.join(', ')}&quot;       unless relation.orders.blank?      )
          engine.add_limit_offset!(query,{ :limit =&amp;gt; relation.taken, :offset =&amp;gt; relation.skipped }) if relation.taken || relation.skipped
          query &amp;lt;&amp;lt; &quot; #{locked}&quot; unless locked.blank?
          query
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;which call all the functions directly on the relation which is
what method_missing did before. It saves you the extra method call
if you define each method in the compile.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T20:59:43+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T20:59:48+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">40</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>I did basically the same thing Daniel. It seemed to shave a little overhead off but not much.

As far as I can tell there's not a single big bottleneck in the Arel code. It's just operating at a higher level of abstraction than the old AR code and that comes at a price, at least in this case.

I think it would be good to consider a few more benchmarks than just this one trivial case though. It's not clear to me how the performance of Rails 2 and Rails 3 compare in this respect over a lot of real-world use cases.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I did basically the same thing Daniel. It seemed to shave a
little overhead off but not much.&lt;/p&gt;
&lt;p&gt;As far as I can tell there's not a single big bottleneck in the
Arel code. It's just operating at a higher level of abstraction
than the old AR code and that comes at a price, at least in this
case.&lt;/p&gt;
&lt;p&gt;I think it would be good to consider a few more benchmarks than
just this one trivial case though. It's not clear to me how the
performance of Rails 2 and Rails 3 compare in this respect over a
lot of real-world use cases.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T21:09:10+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T21:09:14+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">41</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Follow up on my last post adding some benchmarks

@@@

Base case Rails 2.3.5
=================================================
&gt;&gt; puts Benchmark.measure{5000.times{User.find(1)}}
  1.420000   0.130000   1.550000 (  2.498500)

Rails 3 with method_missing
=================================================
irb(main):001:0&gt; puts Benchmark.measure{5000.times{User.find(1)}}
  2.240000   0.110000   2.350000 (  2.441295)

Rails 3 calling methods directly on relation
=================================================
irb(main):001:0&gt; puts Benchmark.measure{5000.times{User.find(1)}}
  2.160000   0.110000   2.270000 (  2.298687)

Rails 3 with compiler.select_sql return static sql
=================================================
irb(main):002:0&gt; puts Benchmark.measure{5000.times{User.find(1)}}
  1.660000   0.080000   1.740000 (  1.820115)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Follow up on my last post adding some benchmarks&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
Base case Rails 2.3.5
=================================================
&amp;gt;&amp;gt; puts Benchmark.measure{5000.times{User.find(1)}}
  1.420000   0.130000   1.550000 (  2.498500)

Rails 3 with method_missing
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{5000.times{User.find(1)}}
  2.240000   0.110000   2.350000 (  2.441295)

Rails 3 calling methods directly on relation
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{5000.times{User.find(1)}}
  2.160000   0.110000   2.270000 (  2.298687)

Rails 3 with compiler.select_sql return static sql
=================================================
irb(main):002:0&amp;gt; puts Benchmark.measure{5000.times{User.find(1)}}
  1.660000   0.080000   1.740000 (  1.820115)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T21:42:15+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T21:42:20+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">42</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>(from [202fb79e8686ee127fe49497c979cfc9c9d985d5]) reusing the time instrumentation from the instrumenter rather than Benchmark. [#5098 state:open]
http://github.com/rails/rails/commit/202fb79e8686ee127fe49497c979cfc9c9d985d5</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/202fb79e8686ee127fe49497c979cfc9c9d985d5&quot;
title=
&quot;Changeset [202fb79e8686ee127fe49497c979cfc9c9d985d5]&quot;&gt;[202fb79e8686ee127fe49497c979cfc9c9d985d5]&lt;/a&gt;)
reusing the time instrumentation from the instrumenter rather than
Benchmark. [&lt;a href=&quot;/projects/8994/tickets/5098&quot; title=
&quot;Ticket #5098&quot;&gt;#5098&lt;/a&gt; state:open] &lt;a href=
&quot;http://github.com/rails/rails/commit/202fb79e8686ee127fe49497c979cfc9c9d985d5&quot;&gt;
http://github.com/rails/rails/commit/202fb79e8686ee127fe49497c979cf...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T21:44:40+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T21:44:42+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">43</version>
      <user-name>Repository</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Daniel I think it's worthwhile to run each of your benchmark tests at least 10 times and take some averages. When I do this on my machine I get a fairly wide spread of results so I think one run isn't enough to judge the effectiveness of a patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Daniel I think it's worthwhile to run each of your benchmark
tests at least 10 times and take some averages. When I do this on
my machine I get a fairly wide spread of results so I think one run
isn't enough to judge the effectiveness of a patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T21:50:47+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T21:50:51+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">44</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>I've just pushed a commit that should get the performance more in line with 2.3.x.  Please test out your benchmarks!

Here is the benchmark I've been using:

@@@ ruby
require 'rubygems'
require 'sqlite3'
require 'active_support'
require 'active_record'
require 'benchmark'

p ActiveRecord::VERSION::STRING

ActiveRecord::Base.establish_connection(:adapter =&gt; 'sqlite3',
                                        :database =&gt; ':memory:')

ActiveRecord::Base.connection.execute &lt;&lt;-eosql
CREATE TABLE &quot;posts&quot; (&quot;id&quot; INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, &quot;title&quot; varchar(255), &quot;body&quot; text, &quot;created_at&quot; datetime, &quot;updated_at&quot; datetime);
eosql

class Post &lt; ActiveRecord::Base; end
class &lt;&lt; Post.connection
  public :log
end

10_000.step(100_000, 10_000) do |n|
  puts &quot;N: #{n}&quot;
  puts &quot;######################&quot;
  Benchmark.bm(11) do |x|
    x.report(&quot;find_by_sql&quot;) do
      n.times do
        Post.find_by_sql(
          &quot;Select * from posts where id = #{(rand * 1000 + 1).to_i}&quot;).first
      end
    end

    x.report(&quot;execute&quot;) do
      n.times do
        ActiveRecord::Base.connection.execute(
          &quot;Select * from posts where id = #{(rand * 1000 + 1).to_i}&quot;).first
      end
    end

    x.report(&quot;log&quot;) do
      n.times do
        Post.connection.log(&quot;hello&quot;, &quot;world&quot;) do
        end
      end
    end
  end
end
@@@

I've graphed the performance here:
![my graph](http://img.skitch.com/20100719-eugf5d33y6mnyaq9mpfqxxdnh1.jpg &quot;AR Performance&quot;)

After my refactor, the &quot;log&quot; method performs at the same speed as 2.3.x, and the find_by_sql() method performs faster than 2.3.x.  I can't speak for the performance of arel, but maybe that should be a different ticket?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've just pushed a commit that should get the performance more
in line with 2.3.x. Please test out your benchmarks!&lt;/p&gt;
&lt;p&gt;Here is the benchmark I've been using:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;require 'rubygems'
require 'sqlite3'
require 'active_support'
require 'active_record'
require 'benchmark'

p ActiveRecord::VERSION::STRING

ActiveRecord::Base.establish_connection(:adapter =&amp;gt; 'sqlite3',
                                        :database =&amp;gt; ':memory:')

ActiveRecord::Base.connection.execute &amp;lt;&amp;lt;-eosql
CREATE TABLE &quot;posts&quot; (&quot;id&quot; INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, &quot;title&quot; varchar(255), &quot;body&quot; text, &quot;created_at&quot; datetime, &quot;updated_at&quot; datetime);
eosql

class Post &amp;lt; ActiveRecord::Base; end
class &amp;lt;&amp;lt; Post.connection
  public :log
end

10_000.step(100_000, 10_000) do |n|
  puts &quot;N: #{n}&quot;
  puts &quot;######################&quot;
  Benchmark.bm(11) do |x|
    x.report(&quot;find_by_sql&quot;) do
      n.times do
        Post.find_by_sql(
          &quot;Select * from posts where id = #{(rand * 1000 + 1).to_i}&quot;).first
      end
    end

    x.report(&quot;execute&quot;) do
      n.times do
        ActiveRecord::Base.connection.execute(
          &quot;Select * from posts where id = #{(rand * 1000 + 1).to_i}&quot;).first
      end
    end

    x.report(&quot;log&quot;) do
      n.times do
        Post.connection.log(&quot;hello&quot;, &quot;world&quot;) do
        end
      end
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've graphed the performance here:&lt;br&gt;
&lt;img title=&quot;AR Performance&quot; src=
&quot;http://img.skitch.com/20100719-eugf5d33y6mnyaq9mpfqxxdnh1.jpg&quot;
alt=&quot;my graph&quot;&gt;&lt;/p&gt;
&lt;p&gt;After my refactor, the &quot;log&quot; method performs at the same speed
as 2.3.x, and the find_by_sql() method performs faster than 2.3.x.
I can't speak for the performance of arel, but maybe that should be
a different ticket?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T21:53:32+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T21:54:07+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">45</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Aaron I can confirm even better performance after latest patches

@@@

Rails 3 before 'Minor performance improvment in notifications/fanout and active_record/log_subscriber'
=================================================
irb(main):001:0&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  7.490000   0.800000   8.290000 (  8.292456)

Rails 3 after 'Minor performance improvment in notifications/fanout and active_record/log_subscriber'
=================================================
irb(main):001:0&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  6.440000   0.740000   7.180000 (  7.182058)

Rails 3 after 'reusing the time instrumentation from the instrumenter rather than Benchmark'
=================================================
irb(main):001:0&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  5.870000   0.720000   6.590000 (  6.605073)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Aaron I can confirm even better performance after latest
patches&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
Rails 3 before 'Minor performance improvment in notifications/fanout and active_record/log_subscriber'
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  7.490000   0.800000   8.290000 (  8.292456)

Rails 3 after 'Minor performance improvment in notifications/fanout and active_record/log_subscriber'
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  6.440000   0.740000   7.180000 (  7.182058)

Rails 3 after 'reusing the time instrumentation from the instrumenter rather than Benchmark'
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  5.870000   0.720000   6.590000 (  6.605073)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T22:41:23+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T22:41:28+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">46</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>@Daniel Can you compare against rails 2.3.x?  I think we should close this ticket, but I want to get opinions from others first.  :-D</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Daniel Can you compare against rails 2.3.x? I think we should
close this ticket, but I want to get opinions from others first.
:-D&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T22:51:01+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T22:51:06+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">47</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>My original tests for Rails 2.3.5 came out at 6.1 however today they ran slightly faster and come out at 5.0

@@@
Rails 2.3.5
=================================================
&gt;&gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  5.000000   0.720000   5.720000 (  5.771005)
@@@

I think this is pretty close. Definitely much better than the 7.x we had in the beginning.

Also did some more testing against the latest version of Arel results come slightly closer to Rails 2.3.5

@@@
Rails 2.3.5
=================================================
&gt;&gt; 1.upto(10) { puts Benchmark.measure{5000.times{User.find(1)}} }
  1.250000   0.080000   1.330000 (  1.333757)
  1.250000   0.080000   1.330000 (  1.327106)
  1.250000   0.070000   1.320000 (  1.321343)
  1.260000   0.080000   1.340000 (  1.343815)
  1.250000   0.080000   1.330000 (  1.329569)
  1.240000   0.080000   1.320000 (  1.321797)
  1.260000   0.070000   1.330000 (  1.330874)
  1.250000   0.080000   1.330000 (  1.331315)
  1.250000   0.080000   1.330000 (  1.326549)
  1.260000   0.080000   1.340000 (  1.344488)

Rails 3 with latest Arel branch
=================================================
irb(main):004:0&gt; 1.upto(10) { puts Benchmark.measure{5000.times{User.find(1)}} }
  2.030000   0.080000   2.110000 (  2.115218)
  2.020000   0.090000   2.110000 (  2.108246)
  1.990000   0.080000   2.070000 (  2.066324)
  2.030000   0.080000   2.110000 (  2.112565)
  2.020000   0.090000   2.110000 (  2.110026)
  2.030000   0.080000   2.110000 (  2.111698)
  1.980000   0.080000   2.060000 (  2.070301)
  2.040000   0.080000   2.120000 (  2.189787)
  2.020000   0.090000   2.110000 (  2.111094)
  1.980000   0.080000   2.060000 (  2.065495)

Rails 3 with Arel 0.4.0 gem
=================================================
irb(main):001:0&gt; puts Benchmark.measure{5000.times{User.find(1)}}
  2.240000   0.110000   2.350000 (  2.441295)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;My original tests for Rails 2.3.5 came out at 6.1 however today
they ran slightly faster and come out at 5.0&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails 2.3.5
=================================================
&amp;gt;&amp;gt; puts Benchmark.measure{50000.times{ActiveRecord::Base.connection.execute(&quot;Select * from users where id = 1&quot;) }}
  5.000000   0.720000   5.720000 (  5.771005)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think this is pretty close. Definitely much better than the
7.x we had in the beginning.&lt;/p&gt;
&lt;p&gt;Also did some more testing against the latest version of Arel
results come slightly closer to Rails 2.3.5&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails 2.3.5
=================================================
&amp;gt;&amp;gt; 1.upto(10) { puts Benchmark.measure{5000.times{User.find(1)}} }
  1.250000   0.080000   1.330000 (  1.333757)
  1.250000   0.080000   1.330000 (  1.327106)
  1.250000   0.070000   1.320000 (  1.321343)
  1.260000   0.080000   1.340000 (  1.343815)
  1.250000   0.080000   1.330000 (  1.329569)
  1.240000   0.080000   1.320000 (  1.321797)
  1.260000   0.070000   1.330000 (  1.330874)
  1.250000   0.080000   1.330000 (  1.331315)
  1.250000   0.080000   1.330000 (  1.326549)
  1.260000   0.080000   1.340000 (  1.344488)

Rails 3 with latest Arel branch
=================================================
irb(main):004:0&amp;gt; 1.upto(10) { puts Benchmark.measure{5000.times{User.find(1)}} }
  2.030000   0.080000   2.110000 (  2.115218)
  2.020000   0.090000   2.110000 (  2.108246)
  1.990000   0.080000   2.070000 (  2.066324)
  2.030000   0.080000   2.110000 (  2.112565)
  2.020000   0.090000   2.110000 (  2.110026)
  2.030000   0.080000   2.110000 (  2.111698)
  1.980000   0.080000   2.060000 (  2.070301)
  2.040000   0.080000   2.120000 (  2.189787)
  2.020000   0.090000   2.110000 (  2.111094)
  1.980000   0.080000   2.060000 (  2.065495)

Rails 3 with Arel 0.4.0 gem
=================================================
irb(main):001:0&amp;gt; puts Benchmark.measure{5000.times{User.find(1)}}
  2.240000   0.110000   2.350000 (  2.441295)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T23:01:59+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T23:02:02+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">48</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Guh.  Okay.  Still not acceptable speeds.  I think we can cut logging out of the picture though and focus on arel.  I'll see what I can do.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Guh. Okay. Still not acceptable speeds. I think we can cut
logging out of the picture though and focus on arel. I'll see what
I can do.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T23:12:58+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-19T23:13:03+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">49</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Been few days. Any updates?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Been few days. Any updates?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-23T12:29:09+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-23T12:29:13+01:00</updated-at>
      <user-id type="integer">105742</user-id>
      <version type="integer">50</version>
      <user-name>drjoke</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">16138</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Not beyond the ones already reported here. Patches are welcome.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not beyond the ones already reported here. Patches are
welcome.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-23T12:41:41+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-23T12:41:44+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">51</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Emilio Tagua</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>@drjoke I'm still working on it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@drjoke I'm still working on it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-23T16:24:35+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 16138
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-23T16:24:39+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">52</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Having just migrated my current project and seeing it run 4-6 times slower than in 2.3.8, I am a bit surprised Rails 3 is being pushed by the community as production ready.

A vanilla Rails 3 @{master} app is roughly 3.5 times SLOWER than a 2.3.8 in just about every scenario. I did a side by side setup and comparison here:

http://gist.github.com/487687

Being unfamiliar with the internals of arel, I would like to ask if the more knowledgeable chaps here think that  2.3.8 speed is something that can be achieved before the (eventual) release of Rails 3.

If not, I think that the speed issue should at least be communicated more widely, to prevent people from spending days trying to upgrade their apps only to find out that they go 3 times slower...</body>
      <body-html>&lt;div&gt;&lt;p&gt;Having just migrated my current project and seeing it run 4-6
times slower than in 2.3.8, I am a bit surprised Rails 3 is being
pushed by the community as production ready.&lt;/p&gt;
&lt;p&gt;A vanilla Rails 3 @{master} app is roughly 3.5 times SLOWER than
a 2.3.8 in just about every scenario. I did a side by side setup
and comparison here:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://gist.github.com/487687&quot;&gt;http://gist.github.com/487687&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Being unfamiliar with the internals of arel, I would like to ask
if the more knowledgeable chaps here think that 2.3.8 speed is
something that can be achieved before the (eventual) release of
Rails 3.&lt;/p&gt;
&lt;p&gt;If not, I think that the speed issue should at least be
communicated more widely, to prevent people from spending days
trying to upgrade their apps only to find out that they go 3 times
slower...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-23T23:38:19+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-23T23:38:24+01:00</updated-at>
      <user-id type="integer">794</user-id>
      <version type="integer">53</version>
      <user-name>Christos Zisopoulos</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Christos Zisopoulos,

Rails 3 lazy loads a lot of stuff, this means that ActiveRecord and ActionController gets loaded just on the first request. This is why it takes longer (probably ActionView is being loaded).

Second, benchmarks using development (with cache classes) and considering just one request, are very poor. You need to use benchmarking tools like httperf or apache benchmark to have an average result for a bunch of whole requests.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Christos Zisopoulos,&lt;/p&gt;
&lt;p&gt;Rails 3 lazy loads a lot of stuff, this means that ActiveRecord
and ActionController gets loaded just on the first request. This is
why it takes longer (probably ActionView is being loaded).&lt;/p&gt;
&lt;p&gt;Second, benchmarks using development (with cache classes) and
considering just one request, are very poor. You need to use
benchmarking tools like httperf or apache benchmark to have an
average result for a bunch of whole requests.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-23T23:45:54+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-23T23:45:57+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">54</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Hi Jos&#233;,

Sorry. I should have mentioned that even production, and after multiple reloads, it is still as slow...

I've updated the gist with some httperf results, run in production:

http://gist.github.com/487687#file_rails3_vs_rails2_httperfd.sh

Even with a smaller number of seeded posts/tags (200 posts/10 tags) I get this:

# Rails 2.3.8
Connection time [ms]: min 252.5 avg 320.4 max 633.6 median 295.5 stddev 85.5

# Rails 3.0.0 (standard deviation is high, but tests would take too long for more conns)
Connection time [ms]: min 826.6 avg 2240.9 max 6342.8 median 1349.5 stddev 2007.7</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Jos&amp;eacute;,&lt;/p&gt;
&lt;p&gt;Sorry. I should have mentioned that even production, and after
multiple reloads, it is still as slow...&lt;/p&gt;
&lt;p&gt;I've updated the gist with some httperf results, run in
production:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://gist.github.com/487687#file_rails3_vs_rails2_httperfd.sh&quot;&gt;http://gist.github.com/487687#file_rails3_vs_rails2_httperfd.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Even with a smaller number of seeded posts/tags (200 posts/10
tags) I get this:&lt;/p&gt;
&lt;h1&gt;Rails 2.3.8&lt;/h1&gt;
&lt;p&gt;Connection time &lt;a href=&quot;/projects/8994/changesets/ms&quot; title=
&quot;Changeset [ms]&quot;&gt;[ms]&lt;/a&gt;: min 252.5 avg 320.4 max 633.6 median
295.5 stddev 85.5&lt;/p&gt;
&lt;h1&gt;Rails 3.0.0 (standard deviation is high, but tests would take
too long for more conns)&lt;/h1&gt;
&lt;p&gt;Connection time &lt;a href=&quot;/projects/8994/changesets/ms&quot; title=
&quot;Changeset [ms]&quot;&gt;[ms]&lt;/a&gt;: min 826.6 avg 2240.9 max 6342.8 median
1349.5 stddev 2007.7&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-24T00:22:28+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-24T00:22:33+01:00</updated-at>
      <user-id type="integer">794</user-id>
      <version type="integer">55</version>
      <user-name>Christos Zisopoulos</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Thanks, this is already much better! Just one thing, be sure to leave the first request out (although I don't think it should change something, probably just the max) and use a good server, as thin/mongrel. We should not use Webrick in such benchmarks! :) Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks, this is already much better! Just one thing, be sure to
leave the first request out (although I don't think it should
change something, probably just the max) and use a good server, as
thin/mongrel. We should not use Webrick in such benchmarks! :)
Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-24T00:27:08+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-24T00:27:11+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">56</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Jos&#233;,

Yeah, the important number is the median there.

I used Webrick 1.3.1 for both environments because I wanted to be sure that no external factor, such as thin interfacing differently with Rack and Rails 3, skewed the results.

When I get a chance I'll try and get the same version of thin/unicorn running in both environemnts and repeat the benchmarks.

I still would like to know how serious/difficult to fix this performance issue is, if you have an idea :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jos&amp;eacute;,&lt;/p&gt;
&lt;p&gt;Yeah, the important number is the median there.&lt;/p&gt;
&lt;p&gt;I used Webrick 1.3.1 for both environments because I wanted to
be sure that no external factor, such as thin interfacing
differently with Rack and Rails 3, skewed the results.&lt;/p&gt;
&lt;p&gt;When I get a chance I'll try and get the same version of
thin/unicorn running in both environemnts and repeat the
benchmarks.&lt;/p&gt;
&lt;p&gt;I still would like to know how serious/difficult to fix this
performance issue is, if you have an idea :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-24T00:33:19+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-24T00:33:24+01:00</updated-at>
      <user-id type="integer">794</user-id>
      <version type="integer">57</version>
      <user-name>Christos Zisopoulos</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>We already did a bunch of improvements since beta 4. The only way we can improve it even more is by profiling the app you generated and see if we find any hotspot.

Btw, taking a look at your script, I saw you are using /posts/index in your requests to a Rails 3 app. Beware that Rails 3 does not include the defaults routes, so you may as well be rendering a 404 page.</body>
      <body-html>&lt;div&gt;&lt;p&gt;We already did a bunch of improvements since beta 4. The only
way we can improve it even more is by profiling the app you
generated and see if we find any hotspot.&lt;/p&gt;
&lt;p&gt;Btw, taking a look at your script, I saw you are using
/posts/index in your requests to a Rails 3 app. Beware that Rails 3
does not include the defaults routes, so you may as well be
rendering a 404 page.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-24T00:39:34+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-24T00:39:37+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">58</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>The controller generator has created 

  get 'posts/index'

in routes.rb, so I am pretty sure I am not hitting a 404 (and I tried it in the browser)

I can upload tarballs of the apps somewhere, if you need the to do some profiling, but it is probably quicker to follow the steps in the gists to recreate them locally.

If you have any pointers as to how I could get ruby-prof working with rails 3, I could also give it a go...</body>
      <body-html>&lt;div&gt;&lt;p&gt;The controller generator has created&lt;/p&gt;
&lt;p&gt;get 'posts/index'&lt;/p&gt;
&lt;p&gt;in routes.rb, so I am pretty sure I am not hitting a 404 (and I
tried it in the browser)&lt;/p&gt;
&lt;p&gt;I can upload tarballs of the apps somewhere, if you need the to
do some profiling, but it is probably quicker to follow the steps
in the gists to recreate them locally.&lt;/p&gt;
&lt;p&gt;If you have any pointers as to how I could get ruby-prof working
with rails 3, I could also give it a go...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-24T00:46:28+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-24T00:46:32+01:00</updated-at>
      <user-id type="integer">794</user-id>
      <version type="integer">59</version>
      <user-name>Christos Zisopoulos</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>We spent the past year and a half improving the internals of Rails. Because there is so much new code, there is also lots of obvious, low-hanging optimizations still to be done. We will continue to release pre-releases of Rails that might have unacceptable performance characteristics, and we will continue to improve the performance of the various systems as we move toward 3.0 final.

Part of the reason for the performance issues are new systems like pervasive instrumentation and escaping by default. We have been able to reduce the impact of some (but not all) of these new systems to almost zero. ActiveRelation is a new system that still needs to undergo significant performance tuning.

Make no mistake, though: we will not release Rails 3.0 final that is slower, for the common case, than Rails 2.3. In order to achieve this, we need the help of the community to provide us with repeatable benchmarks that demonstrate the specific performance problem that people are encountering. We have some of our own benchmarks and apps, but anything you guys can do would help.</body>
      <body-html>&lt;div&gt;&lt;p&gt;We spent the past year and a half improving the internals of
Rails. Because there is so much new code, there is also lots of
obvious, low-hanging optimizations still to be done. We will
continue to release pre-releases of Rails that might have
unacceptable performance characteristics, and we will continue to
improve the performance of the various systems as we move toward
3.0 final.&lt;/p&gt;
&lt;p&gt;Part of the reason for the performance issues are new systems
like pervasive instrumentation and escaping by default. We have
been able to reduce the impact of some (but not all) of these new
systems to almost zero. ActiveRelation is a new system that still
needs to undergo significant performance tuning.&lt;/p&gt;
&lt;p&gt;Make no mistake, though: we will not release Rails 3.0 final
that is slower, for the common case, than Rails 2.3. In order to
achieve this, we need the help of the community to provide us with
repeatable benchmarks that demonstrate the specific performance
problem that people are encountering. We have some of our own
benchmarks and apps, but anything you guys can do would help.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-24T02:27:15+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-07-24T02:27:18+01:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">60</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-03T20:36:47+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performace</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-08-03T20:36:52+01:00</updated-at>
      <user-id type="integer">20306</user-id>
      <version type="integer">61</version>
      <user-name>Erik Michaels-Ober</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>The RC2 was released, so I figure I'd better update this ticket with progress.

I am currently optimizing simple queries like `Post.find(1)`.  The currently release candidate of Arel is approximately 36% faster than before I started playing with it.  I was able to get a 36% speed improvement through &quot;superficial&quot; performance improvements.  Things like converting to attr_(reader|writer), removing unnecessary conditional tests, using faster methods, removing inject, reducing call stack, etc.

There are a few issues with Arel that cause it to be slow.  Unfortunately, these are due to a fundamental design problem with the current Arel implementation.  The problem is kind of long to explain, so I may just blog about it rather than bury it in a ticket.  There are probably other &quot;superficial&quot; speed increases I can do, but they are becoming more difficult to find.

I think that the only real way we can see good improvements is through a fundamental design change.  I've already put together an &quot;experimental&quot; branch of ARel to prove my theory.  I believe this branch is the only way forward.  I've included benchmarks from the experimental branch.  It's slightly faster than Rails 2.3.x, and I believe after I've finished making the tests pass, we can improve it to be even faster than 2.3.x.

![performance](http://img.skitch.com/20100824-guf6mqy7tug6qf848a4f1gjs1c.jpg &quot;Perf&quot;)

Please help by sending me internet hugs, high fives, best wishes, and patches.  I'll continue to move forward and update this ticket as I go along.  Thanks for your patience and support!  `&lt;3 &lt;3 &lt;3`</body>
      <body-html>&lt;div&gt;&lt;p&gt;The RC2 was released, so I figure I'd better update this ticket
with progress.&lt;/p&gt;
&lt;p&gt;I am currently optimizing simple queries like
&lt;code&gt;Post.find(1)&lt;/code&gt;. The currently release candidate of Arel
is approximately 36% faster than before I started playing with it.
I was able to get a 36% speed improvement through &quot;superficial&quot;
performance improvements. Things like converting to
attr_(reader|writer), removing unnecessary conditional tests, using
faster methods, removing inject, reducing call stack, etc.&lt;/p&gt;
&lt;p&gt;There are a few issues with Arel that cause it to be slow.
Unfortunately, these are due to a fundamental design problem with
the current Arel implementation. The problem is kind of long to
explain, so I may just blog about it rather than bury it in a
ticket. There are probably other &quot;superficial&quot; speed increases I
can do, but they are becoming more difficult to find.&lt;/p&gt;
&lt;p&gt;I think that the only real way we can see good improvements is
through a fundamental design change. I've already put together an
&quot;experimental&quot; branch of ARel to prove my theory. I believe this
branch is the only way forward. I've included benchmarks from the
experimental branch. It's slightly faster than Rails 2.3.x, and I
believe after I've finished making the tests pass, we can improve
it to be even faster than 2.3.x.&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;Perf&quot; src=
&quot;http://img.skitch.com/20100824-guf6mqy7tug6qf848a4f1gjs1c.jpg&quot;
alt=&quot;performance&quot;&gt;&lt;/p&gt;
&lt;p&gt;Please help by sending me internet hugs, high fives, best
wishes, and patches. I'll continue to move forward and update this
ticket as I go along. Thanks for your patience and support!
&lt;code&gt;&amp;lt;3 &amp;lt;3 &amp;lt;3&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-24T05:33:15+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performace</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-08-24T05:33:46+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">62</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Thanks for your work on this Aaron. I got the same impression from the profiling I did earlier. There's not a single bottleneck in Arel, there's overhead spread throughout the code.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for your work on this Aaron. I got the same impression
from the profiling I did earlier. There's not a single bottleneck
in Arel, there's overhead spread throughout the code.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-24T05:55:19+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performace</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-08-24T05:55:24+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">63</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Thanks for all your work Aaron. Is the experimental branch on GitHub and if so, which one is it? Look forward to reading your blog post on this and looking for patches etc.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for all your work Aaron. Is the experimental branch on
GitHub and if so, which one is it? Look forward to reading your
blog post on this and looking for patches etc.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-24T09:19:48+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: performace
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-08-24T09:19:53+01:00</updated-at>
      <user-id type="integer">96819</user-id>
      <version type="integer">64</version>
      <user-name>iHiD</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Aaron is a champion of the people. I'm not sure exactly what the massive size of that set of people is, but the set includes me.

Carry on my good man!

Nic</body>
      <body-html>&lt;div&gt;&lt;p&gt;Aaron is a champion of the people. I'm not sure exactly what the
massive size of that set of people is, but the set includes me.&lt;/p&gt;
&lt;p&gt;Carry on my good man!&lt;/p&gt;
&lt;p&gt;Nic&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-25T11:54:13+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-08-25T11:54:21+01:00</updated-at>
      <user-id type="integer">111072</user-id>
      <version type="integer">65</version>
      <user-name>Dr Nic Williams</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Super awesome work Aaron! Can't wait to see this work in action :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Super awesome work Aaron! Can't wait to see this work in action
:)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-25T11:56:18+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-08-25T11:56:23+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">66</version>
      <user-name>Pratik</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Did we decide to leave this as is for the 3.0 release?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Did we decide to leave this as is for the 3.0 release?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-30T02:52:19+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-08-30T02:52:24+01:00</updated-at>
      <user-id type="integer">105668</user-id>
      <version type="integer">67</version>
      <user-name>Miles Egan</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/27625)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/27625&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-30T04:10:33+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-08-30T04:10:33+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">68</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>For the record, using my simple app test outlined above, with Rails 3.0.0

@@@
  Connection rate: 0.2 conn/s (4849.7 ms/conn, &lt;=1 concurrent connections)
  Connection time [ms]: min 2897.8 avg 4849.7 max 5219.0 median 5004.5 stddev 542.9
@@@

And with Rails 2.3.8

@@@
  Connection rate: 0.4 conn/s (2745.8 ms/conn, &lt;=1 concurrent connections)
  Connection time [ms]: min 1789.3 avg 2745.8 max 3115.9 median 2854.5 stddev 350.3
@@@

Response time has improved since RC4 from **3.5x slower** to **just under 2x slower**</body>
      <body-html>&lt;div&gt;&lt;p&gt;For the record, using my simple app test outlined above, with
Rails 3.0.0&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  Connection rate: 0.2 conn/s (4849.7 ms/conn, &amp;lt;=1 concurrent connections)
  Connection time [ms]: min 2897.8 avg 4849.7 max 5219.0 median 5004.5 stddev 542.9&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And with Rails 2.3.8&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  Connection rate: 0.4 conn/s (2745.8 ms/conn, &amp;lt;=1 concurrent connections)
  Connection time [ms]: min 1789.3 avg 2745.8 max 3115.9 median 2854.5 stddev 350.3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Response time has improved since RC4 from &lt;strong&gt;3.5x
slower&lt;/strong&gt; to &lt;strong&gt;just under 2x slower&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-30T18:22:10+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-08-30T18:22:16+01:00</updated-at>
      <user-id type="integer">794</user-id>
      <version type="integer">69</version>
      <user-name>Christos Zisopoulos</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>I've pushed a new version of ARel to github:

  http://github.com/rails/arel

From my benchmarks, it seems that the performance of ActiveRecord is nearly the same as 2.3.x:

  ![benchmark](http://img.skitch.com/20100927-jh6sephd3fmk42mrgwy6n7tpxj.jpg)

Unless there are objections, I'd like to close this ticket as &quot;close enough&quot;.  I will continue to improve the performance of ActiveRecord, but I think those performance improvements must be made inside AR rather than ARel.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've pushed a new version of ARel to github:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/arel&quot;&gt;http://github.com/rails/arel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From my benchmarks, it seems that the performance of
ActiveRecord is nearly the same as 2.3.x:&lt;/p&gt;
&lt;p&gt;&lt;img src=
&quot;http://img.skitch.com/20100927-jh6sephd3fmk42mrgwy6n7tpxj.jpg&quot;
alt=&quot;benchmark&quot;&gt;&lt;/p&gt;
&lt;p&gt;Unless there are objections, I'd like to close this ticket as
&quot;close enough&quot;. I will continue to improve the performance of
ActiveRecord, but I think those performance improvements must be
made inside AR rather than ARel.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-27T17:39:26+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-09-27T17:39:32+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">70</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Did you do any benchmarks for cases other than `Post.find(1)`. Seems an incredibly narrow basis for declaring performance parity.

Having said that, there's probably no harm in closing the ticket because as you say, performance work is going to continue regardless.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Did you do any benchmarks for cases other than
&lt;code&gt;Post.find(1)&lt;/code&gt;. Seems an incredibly narrow basis for
declaring performance parity.&lt;/p&gt;
&lt;p&gt;Having said that, there's probably no harm in closing the ticket
because as you say, performance work is going to continue
regardless.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-27T18:09:12+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-09-27T18:09:23+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">71</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-27T18:23:13+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-09-27T18:23:20+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">72</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>Great news! Was just testing this out for the SQL Server compiler and noticed I could not bundle rails 3-0-stable and arel master using my ENV vars for the path due to the version in Arel still being 1.0.1. I changed lib/arel/version to 2.0.0 and got the local bundle working. Something you may want to change if indeed rails/arel at master is indeed the 2.0 version.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Great news! Was just testing this out for the SQL Server
compiler and noticed I could not bundle rails 3-0-stable and arel
master using my ENV vars for the path due to the version in Arel
still being 1.0.1. I changed lib/arel/version to 2.0.0 and got the
local bundle working. Something you may want to change if indeed
rails/arel at master is indeed the 2.0 version.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-27T19:55:39+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-09-27T19:55:47+01:00</updated-at>
      <user-id type="integer">15346</user-id>
      <version type="integer">73</version>
      <user-name>Ken Collins</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">7</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:58+01:00</created-at>
      <creator-id type="integer">105742</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 82861
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">5098</number>
      <permalink>rails-3-beta-4-activerecord-5x-slower-than-rails-235</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>performance</tag>
      <title>Rails 3 Beta 4 ActiveRecord 5X slower than Rails 2.3.5</title>
      <updated-at type="datetime">2010-10-15T23:01:58+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">74</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>drjoke</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5098</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>0cea5c496f72a3f4c42de4f05025474549d6efd6</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-14T04:57:57+01:00</created-at>
      <filename>prof2.txt</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">592689</id>
      <size type="integer">39540</size>
      <uploader-id type="integer">105668</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/592689/prof2.txt</url>
    </attachment>
    <attachment type="Attachment">
      <code>620d94c6aa1011853addcaa7e6c9fd218f91ecfe</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-14T04:57:58+01:00</created-at>
      <filename>prof3.txt</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">592690</id>
      <size type="integer">67212</size>
      <uploader-id type="integer">105668</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/592690/prof3.txt</url>
    </attachment>
    <attachment type="Attachment">
      <code>fd402bfb00d60cad6aef1c2327bf2def66595fe1</code>
      <content-type>application/vnd.ms-excel</content-type>
      <created-at type="datetime">2010-07-14T14:09:45+01:00</created-at>
      <filename>rails3_rails2_find_profile.xls</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">592880</id>
      <size type="integer">100864</size>
      <uploader-id type="integer">103655</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/592880/rails3_rails2_find_profile.xls</url>
    </attachment>
    <attachment type="Attachment">
      <code>9dd1a513bc8c2be5b3ec0b3c2f2131eb733f5a35</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-18T04:53:14+01:00</created-at>
      <filename>fanout.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">595750</id>
      <size type="integer">1058</size>
      <uploader-id type="integer">2529</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/595750/fanout.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>db839f2bda6e4f782f20aefbf34103ed98857a02</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-18T05:14:49+01:00</created-at>
      <filename>log_subscriber.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">595752</id>
      <size type="integer">475</size>
      <uploader-id type="integer">2529</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/595752/log_subscriber.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>8babf1bede8a24ee293f76b3aa0d5762ffb047bd</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-18T13:02:58+01:00</created-at>
      <filename>minor_performance_improvement.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">595773</id>
      <size type="integer">2035</size>
      <uploader-id type="integer">2529</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/595773/minor_performance_improvement.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>bb80b16a5299ea06dd9dde850f34d48c4396e510</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-07-19T19:34:18+01:00</created-at>
      <filename>minor_performance_improvement.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">596458</id>
      <size type="integer">2052</size>
      <uploader-id type="integer">2529</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/596458/minor_performance_improvement.patch</url>
    </attachment>
  </attachments>
</ticket>
