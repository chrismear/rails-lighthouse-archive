<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-16T22:15:34+01:00</created-at>
  <creator-id type="integer">17461</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">212</number>
  <permalink>add-alternate-constructor-support-to-aggregations</permalink>
  <priority type="integer">13263</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord edge enhancement patch tests</tag>
  <title>Add alternate constructor support to aggregations </title>
  <updated-at type="datetime">2008-07-02T15:41:39+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">4</version>
  <user-name>Pratik</user-name>
  <creator-name>Chris Hapgood</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/212</url>
  <priority-name nil="true"></priority-name>
  <original-body>The composed_of macro assumes that the value object can be instantiated with new. But for some aggregate classes, new is not the appropriate constructor and instead something like parse is required.

This patch adds support for a :constructor option to the composed_of method. It accepts a symbol identifying a constructor method on the aggregate class. All aggregate object are then instantiated using this constructor method.

A typical example of this new functionality:

@@@ ruby
require 'uuid'

class Widget &lt; ActiveRecord::Base
  composed_of :uuid, :constructor =&gt; :parse
end
@@@

Of course, the default value for the constructor is :new.

[This is identical in function to the enhancement documented on Trac ticket 11122.  It has been updated to work on Edge and includes less brittle tests and a git-compatible patch.]</original-body>
  <latest-body>The composed_of macro assumes that the value object can be instantiated with new. But for some aggregate classes, new is not the appropriate constructor and instead something like parse is required.

This patch adds support for a :constructor option to the composed_of method. It accepts a symbol identifying a constructor method on the aggregate class. All aggregate object are then instantiated using this constructor method.

A typical example of this new functionality:

@@@ ruby
require 'uuid'

class Widget &lt; ActiveRecord::Base
  composed_of :uuid, :constructor =&gt; :parse
end
@@@

Of course, the default value for the constructor is :new.

[This is identical in function to the enhancement documented on Trac ticket 11122.  It has been updated to work on Edge and includes less brittle tests and a git-compatible patch.]</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
The composed_of macro assumes that the value object can be instantiated with new. But for some aggregate classes, new is not the appropriate constructor and instead something like parse is required.
&lt;/p&gt;&lt;p&gt;
This patch adds support for a :constructor option to the composed_of method. It accepts a symbol identifying a constructor method on the aggregate class. All aggregate object are then instantiated using this constructor method.
&lt;/p&gt;&lt;p&gt;
A typical example of this new functionality:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'uuid'

class Widget &amp;lt; ActiveRecord::Base
  composed_of :uuid, :constructor =&amp;gt; :parse
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Of course, the default value for the constructor is :new.
&lt;/p&gt;&lt;p&gt;
[This is identical in function to the enhancement documented on Trac ticket 11122.  It has been updated to work on Edge and includes less brittle tests and a git-compatible patch.]
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The composed_of macro assumes that the value object can be instantiated with new. But for some aggregate classes, new is not the appropriate constructor and instead something like parse is required.

This patch adds support for a :constructor option to the composed_of method. It accepts a symbol identifying a constructor method on the aggregate class. All aggregate object are then instantiated using this constructor method.

A typical example of this new functionality:

@@@ ruby
require 'uuid'

class Widget &lt; ActiveRecord::Base
  composed_of :uuid, :constructor =&gt; :parse
end
@@@

Of course, the default value for the constructor is :new.

[This is identical in function to the enhancement documented on Trac ticket 11122.  It has been updated to work on Edge and includes less brittle tests and a git-compatible patch.]</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The composed_of macro assumes that the value object can be instantiated with new. But for some aggregate classes, new is not the appropriate constructor and instead something like parse is required.
&lt;/p&gt;&lt;p&gt;
This patch adds support for a :constructor option to the composed_of method. It accepts a symbol identifying a constructor method on the aggregate class. All aggregate object are then instantiated using this constructor method.
&lt;/p&gt;&lt;p&gt;
A typical example of this new functionality:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'uuid'

class Widget &amp;lt; ActiveRecord::Base
  composed_of :uuid, :constructor =&amp;gt; :parse
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Of course, the default value for the constructor is :new.
&lt;/p&gt;&lt;p&gt;
[This is identical in function to the enhancement documented on Trac ticket 11122.  It has been updated to work on Edge and includes less brittle tests and a git-compatible patch.]
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-16T22:15:34+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">212</number>
      <permalink>add-alternate-constructor-support-to-aggregations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Add alternate constructor support to aggregations </title>
      <updated-at type="datetime">2008-05-16T22:15:34+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">1</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/212</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>You can just call parse from #initialize itself. Not convinced about the provided use case for this. 

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
You can just call parse from #initialize itself. Not convinced about the provided use case for this.
&lt;/p&gt;&lt;p&gt;
Thanks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-01T23:44:36+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">212</number>
      <permalink>add-alternate-constructor-support-to-aggregations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord edge enhancement patch tests</tag>
      <title>Add alternate constructor support to aggregations </title>
      <updated-at type="datetime">2008-07-01T23:44:36+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/212</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Agreed, you can call parse from MyARModel#initialize.  But that seems like a reason for scrapping aggregations entirely because you could also instantiate the composed_of objects in #initialize as well.

I would be happy to see aggregations disappear entirely -they seem like a very thin veneer on top of existing Ruby/AR constructors.  But if they are worth keeping, why not make them useful for the large population of classes that use constructors like parse and from_x?  The patch I propose is pretty trivial...</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Agreed, you can call parse from MyARModel#initialize.  But that seems like a reason for scrapping aggregations entirely because you could also instantiate the composed_of objects in #initialize as well.
&lt;/p&gt;&lt;p&gt;
I would be happy to see aggregations disappear entirely -they seem like a very thin veneer on top of existing Ruby/AR constructors.  But if they are worth keeping, why not make them useful for the large population of classes that use constructors like parse and from_x?  The patch I propose is pretty trivial...
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-02T15:24:50+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">212</number>
      <permalink>add-alternate-constructor-support-to-aggregations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord edge enhancement patch tests</tag>
      <title>Add alternate constructor support to aggregations </title>
      <updated-at type="datetime">2008-07-02T15:24:50+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">3</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/212</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>If we have enough people asking for this, we can surely roll it in.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
If we have enough people asking for this, we can surely roll it in.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-02T15:41:39+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">212</number>
      <permalink>add-alternate-constructor-support-to-aggregations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord edge enhancement patch tests</tag>
      <title>Add alternate constructor support to aggregations </title>
      <updated-at type="datetime">2008-07-02T15:41:39+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/212</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>5517bff6be1c08e84966129ee867ed4e3c1253bc</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-16T22:15:34+01:00</created-at>
      <filename>alternate_constructor_for_aggregates.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">23329</id>
      <size type="integer">6178</size>
      <uploader-id type="integer">17461</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/23329/alternate_constructor_for_aggregates.diff</url>
    </attachment>
  </attachments>
</ticket>
