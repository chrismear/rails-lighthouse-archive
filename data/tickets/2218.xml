<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-11T22:51:24+00:00</created-at>
  <creator-id type="integer">50369</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2218</number>
  <permalink>current_page-in-rails-222-delivers-wrong-results</permalink>
  <priority type="integer">1409</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>2.2.2 current_page</tag>
  <title>current_page? in Rails 2.2.2 delivers wrong results</title>
  <updated-at type="datetime">2010-04-15T23:35:47+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">4</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Alexander von Zitzewitz</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2218</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I recently upgraded my rails app from 2.1.1 to 2.2.2 and now the current_page function sometimes delivers wrong results. It worked fine on the old site. 

The function returns true if the current uri is /users?filter=x and you pass in /users (options are empty). I believe the result should be false in this case.

here is the current code:

      def current_page?(options)
        url_string = CGI.escapeHTML(url_for(options))
        request = @controller.request
        # We ignore any extra parameters in the request_uri if the 
        # submitted url doesn't have any either.  This lets the function
        # work with things like ?order=asc 
        if url_string.index(&quot;?&quot;) # &lt;&lt;&lt;&lt; This test seems to be the problem &lt;&lt;&lt;&lt;
          request_uri = request.request_uri
        else
          request_uri = request.request_uri.split('?').first
        end
        if url_string =~ /^\w+:\/\//
          url_string == &quot;#{request.protocol}#{request.host_with_port}#{request_uri}&quot;
        else
          url_string == request_uri
        end
      end

If I ommit the marked test and do never split the request_uri everything works fine. 

I would deliver a patch if I knew how to do it.

Thx for any help</original-body>
  <latest-body>I recently upgraded my rails app from 2.1.1 to 2.2.2 and now the current_page function sometimes delivers wrong results. It worked fine on the old site. 

The function returns true if the current uri is /users?filter=x and you pass in /users (options are empty). I believe the result should be false in this case.

here is the current code:

      def current_page?(options)
        url_string = CGI.escapeHTML(url_for(options))
        request = @controller.request
        # We ignore any extra parameters in the request_uri if the 
        # submitted url doesn't have any either.  This lets the function
        # work with things like ?order=asc 
        if url_string.index(&quot;?&quot;) # &lt;&lt;&lt;&lt; This test seems to be the problem &lt;&lt;&lt;&lt;
          request_uri = request.request_uri
        else
          request_uri = request.request_uri.split('?').first
        end
        if url_string =~ /^\w+:\/\//
          url_string == &quot;#{request.protocol}#{request.host_with_port}#{request_uri}&quot;
        else
          url_string == request_uri
        end
      end

If I ommit the marked test and do never split the request_uri everything works fine. 

I would deliver a patch if I knew how to do it.

Thx for any help</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I recently upgraded my rails app from 2.1.1 to 2.2.2 and now the
current_page function sometimes delivers wrong results. It worked
fine on the old site.&lt;/p&gt;
&lt;p&gt;The function returns true if the current uri is /users?filter=x
and you pass in /users (options are empty). I believe the result
should be false in this case.&lt;/p&gt;
&lt;p&gt;here is the current code:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def current_page?(options)
    url_string = CGI.escapeHTML(url_for(options))
    request = @controller.request
    # We ignore any extra parameters in the request_uri if the 
    # submitted url doesn't have any either.  This lets the function
    # work with things like ?order=asc 
    if url_string.index(&quot;?&quot;) # &amp;lt;&amp;lt;&amp;lt;&amp;lt; This test seems to be the problem &amp;lt;&amp;lt;&amp;lt;&amp;lt;
      request_uri = request.request_uri
    else
      request_uri = request.request_uri.split('?').first
    end
    if url_string =~ /^\w+:\/\//
      url_string == &quot;#{request.protocol}#{request.host_with_port}#{request_uri}&quot;
    else
      url_string == request_uri
    end
  end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If I ommit the marked test and do never split the request_uri
everything works fine.&lt;/p&gt;
&lt;p&gt;I would deliver a patch if I knew how to do it.&lt;/p&gt;
&lt;p&gt;Thx for any help&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I recently upgraded my rails app from 2.1.1 to 2.2.2 and now the current_page function sometimes delivers wrong results. It worked fine on the old site. 

The function returns true if the current uri is /users?filter=x and you pass in /users (options are empty). I believe the result should be false in this case.

here is the current code:

      def current_page?(options)
        url_string = CGI.escapeHTML(url_for(options))
        request = @controller.request
        # We ignore any extra parameters in the request_uri if the 
        # submitted url doesn't have any either.  This lets the function
        # work with things like ?order=asc 
        if url_string.index(&quot;?&quot;) # &lt;&lt;&lt;&lt; This test seems to be the problem &lt;&lt;&lt;&lt;
          request_uri = request.request_uri
        else
          request_uri = request.request_uri.split('?').first
        end
        if url_string =~ /^\w+:\/\//
          url_string == &quot;#{request.protocol}#{request.host_with_port}#{request_uri}&quot;
        else
          url_string == request_uri
        end
      end

If I ommit the marked test and do never split the request_uri everything works fine. 

I would deliver a patch if I knew how to do it.

Thx for any help</body>
      <body-html>&lt;div&gt;&lt;p&gt;I recently upgraded my rails app from 2.1.1 to 2.2.2 and now the
current_page function sometimes delivers wrong results. It worked
fine on the old site.&lt;/p&gt;
&lt;p&gt;The function returns true if the current uri is /users?filter=x
and you pass in /users (options are empty). I believe the result
should be false in this case.&lt;/p&gt;
&lt;p&gt;here is the current code:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def current_page?(options)
    url_string = CGI.escapeHTML(url_for(options))
    request = @controller.request
    # We ignore any extra parameters in the request_uri if the 
    # submitted url doesn't have any either.  This lets the function
    # work with things like ?order=asc 
    if url_string.index(&quot;?&quot;) # &amp;lt;&amp;lt;&amp;lt;&amp;lt; This test seems to be the problem &amp;lt;&amp;lt;&amp;lt;&amp;lt;
      request_uri = request.request_uri
    else
      request_uri = request.request_uri.split('?').first
    end
    if url_string =~ /^\w+:\/\//
      url_string == &quot;#{request.protocol}#{request.host_with_port}#{request_uri}&quot;
    else
      url_string == request_uri
    end
  end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If I ommit the marked test and do never split the request_uri
everything works fine.&lt;/p&gt;
&lt;p&gt;I would deliver a patch if I knew how to do it.&lt;/p&gt;
&lt;p&gt;Thx for any help&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-11T22:51:24+00:00</created-at>
      <creator-id type="integer">50369</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2218</number>
      <permalink>current_page-in-rails-222-delivers-wrong-results</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 current_page</tag>
      <title>current_page? in Rails 2.2.2 delivers wrong results</title>
      <updated-at type="datetime">2009-03-11T22:51:28+00:00</updated-at>
      <user-id type="integer">50369</user-id>
      <version type="integer">1</version>
      <user-name>Alexander von Zitzewitz</user-name>
      <creator-name>Alexander von Zitzewitz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2218</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Alexander,

The behaviour appears to be intentional: see the [tests for #current_url](http://github.com/rails/rails/blob/dd2eb1ea7c34eb6496feaf7e42100f37a8dae76b/actionpack/test/template/url_helper_test.rb#L262).

I think the idea is that &quot;current_page&quot; considers two URLs to be the same page if they both refer to the same RESTful object (or set of objects), regardless of additional query parameters. So &quot;/users?filter=x&quot; is still the &quot;user list&quot; page, just as for &quot;/users&quot;.  Two different &quot;pages&quot; in this sense would therefore have different routes.

In your case, if you have conditional display logic depending on whether or not a filter is currently applied to the &quot;/users&quot; page, you should probably look at &quot;request.params[:filter]&quot; within the display code, or set a @filter variable in the controller, which you can then inspect in the view to decide what to do.

(Suggested resolution for this ticket: invalid / won't fix)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Alexander,&lt;/p&gt;
&lt;p&gt;The behaviour appears to be intentional: see the &lt;a href=&quot;http://github.com/rails/rails/blob/dd2eb1ea7c34eb6496feaf7e42100f37a8dae76b/actionpack/test/template/url_helper_test.rb#L262&quot;&gt;
tests for #current_url&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think the idea is that &quot;current_page&quot; considers two URLs to be
the same page if they both refer to the same RESTful object (or set
of objects), regardless of additional query parameters. So
&quot;/users?filter=x&quot; is still the &quot;user list&quot; page, just as for
&quot;/users&quot;. Two different &quot;pages&quot; in this sense would therefore have
different routes.&lt;/p&gt;
&lt;p&gt;In your case, if you have conditional display logic depending on
whether or not a filter is currently applied to the &quot;/users&quot; page,
you should probably look at &quot;request.params[:filter]&quot; within the
display code, or set a @filter variable in the controller, which
you can then inspect in the view to decide what to do.&lt;/p&gt;
&lt;p&gt;(Suggested resolution for this ticket: invalid / won't fix)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-27T15:42:53+00:00</created-at>
      <creator-id type="integer">50369</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2218</number>
      <permalink>current_page-in-rails-222-delivers-wrong-results</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 current_page</tag>
      <title>current_page? in Rails 2.2.2 delivers wrong results</title>
      <updated-at type="datetime">2009-03-27T15:42:57+00:00</updated-at>
      <user-id type="integer">19078</user-id>
      <version type="integer">2</version>
      <user-name>Steve Purcell</user-name>
      <creator-name>Alexander von Zitzewitz</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2218</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Agreed, rails is continues to focus more and more on RESTful design, this behavior is intended. Can be marked as wontfix</body>
      <body-html>&lt;div&gt;&lt;p&gt;Agreed, rails is continues to focus more and more on RESTful
design, this behavior is intended. Can be marked as wontfix&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-15T23:33:45+01:00</created-at>
      <creator-id type="integer">50369</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2218</number>
      <permalink>current_page-in-rails-222-delivers-wrong-results</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 current_page</tag>
      <title>current_page? in Rails 2.2.2 delivers wrong results</title>
      <updated-at type="datetime">2010-04-15T23:33:49+01:00</updated-at>
      <user-id type="integer">65576</user-id>
      <version type="integer">3</version>
      <user-name>Steve St. Martin</user-name>
      <creator-name>Alexander von Zitzewitz</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2218</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Agreed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Agreed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-15T23:35:45+01:00</created-at>
      <creator-id type="integer">50369</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2218</number>
      <permalink>current_page-in-rails-222-delivers-wrong-results</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>2.2.2 current_page</tag>
      <title>current_page? in Rails 2.2.2 delivers wrong results</title>
      <updated-at type="datetime">2010-04-15T23:35:47+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">4</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Alexander von Zitzewitz</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2218</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
