<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-13T06:40:23+01:00</created-at>
  <creator-id type="integer">20137</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">177</number>
  <permalink>regression-of-ticket-2888-habtm-inserts-duplicate-rows-into-join-table</permalink>
  <priority type="integer">12762</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord habtm</tag>
  <title>Regression of ticket #2888: habtm inserts duplicate rows into join table</title>
  <updated-at type="datetime">2008-10-01T19:18:49+01:00</updated-at>
  <user-id type="integer">16101</user-id>
  <version type="integer">3</version>
  <user-name>Marcin</user-name>
  <creator-name>Jerry Cheung</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/177</url>
  <priority-name nil="true"></priority-name>
  <original-body>In revision r9248, there is a test_update_attributes_after_push_without_duplicate_join_table_rows
in has_and_belongs_to_many_associations_test.rb that addresses ticket http://dev.rubyonrails.org/ticket/2888  

This test verifies that duplicate rows are not created when duplicate objects are pushed into the habtm association one by one with 'save' called in between.  For example, no duplicate rows are created for the following:

developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)

assert developer.save
assert_equal 1, developer.projects.size

developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)

assert developer.save
assert_equal 1, developer.projects.size

However, when a list of duplicate objects are pushed into the habtm association at the same time without 'save' called in between the elements of the list, duplicate rows are introduced into the join table.  For example:

developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)

developer.projects &lt;&lt; [project, project]

# developer.projects.size is 2 instead of 1
# following test will fail:
assert_equal 1, developer.projects.size

Based on what the test for ticket 2888 says, it seems like this isn't how '&lt;&lt;' is supposed to behave.  Is this intentional for some reason?  Calling save for each push could result in a lot of trips to the db.</original-body>
  <latest-body>In revision r9248, there is a test_update_attributes_after_push_without_duplicate_join_table_rows
in has_and_belongs_to_many_associations_test.rb that addresses ticket http://dev.rubyonrails.org/ticket/2888  

This test verifies that duplicate rows are not created when duplicate objects are pushed into the habtm association one by one with 'save' called in between.  For example, no duplicate rows are created for the following:

developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)

assert developer.save
assert_equal 1, developer.projects.size

developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)

assert developer.save
assert_equal 1, developer.projects.size

However, when a list of duplicate objects are pushed into the habtm association at the same time without 'save' called in between the elements of the list, duplicate rows are introduced into the join table.  For example:

developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)

developer.projects &lt;&lt; [project, project]

# developer.projects.size is 2 instead of 1
# following test will fail:
assert_equal 1, developer.projects.size

Based on what the test for ticket 2888 says, it seems like this isn't how '&lt;&lt;' is supposed to behave.  Is this intentional for some reason?  Calling save for each push could result in a lot of trips to the db.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
In revision r9248, there is a test_update_attributes_after_push_without_duplicate_join_table_rows
&lt;/p&gt;&lt;p&gt;
in has_and_belongs_to_many_associations_test.rb that addresses ticket &lt;a href=&quot;http://dev.rubyonrails.org/ticket/2888&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
This test verifies that duplicate rows are not created when duplicate objects are pushed into the habtm association one by one with 'save' called in between.  For example, no duplicate rows are created for the following:
&lt;/p&gt;&lt;p&gt;
developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
&lt;/p&gt;&lt;p&gt;
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)
&lt;/p&gt;&lt;p&gt;
assert developer.save
&lt;/p&gt;&lt;p&gt;
assert_equal 1, developer.projects.size
&lt;/p&gt;&lt;p&gt;
developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
&lt;/p&gt;&lt;p&gt;
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)
&lt;/p&gt;&lt;p&gt;
assert developer.save
&lt;/p&gt;&lt;p&gt;
assert_equal 1, developer.projects.size
&lt;/p&gt;&lt;p&gt;
However, when a list of duplicate objects are pushed into the habtm association at the same time without 'save' called in between the elements of the list, duplicate rows are introduced into the join table.  For example:
&lt;/p&gt;&lt;p&gt;
developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
&lt;/p&gt;&lt;p&gt;
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)
&lt;/p&gt;&lt;p&gt;
developer.projects &amp;lt;&amp;lt; [project, project]
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
developer.projects.size is 2 instead of 1
&lt;/li&gt;&lt;li&gt;
following test will fail:
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;
assert_equal 1, developer.projects.size
&lt;/p&gt;&lt;p&gt;
Based on what the test for ticket 2888 says, it seems like this isn't how '&amp;lt;&amp;lt;' is supposed to behave.  Is this intentional for some reason?  Calling save for each push could result in a lot of trips to the db.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In revision r9248, there is a test_update_attributes_after_push_without_duplicate_join_table_rows
in has_and_belongs_to_many_associations_test.rb that addresses ticket http://dev.rubyonrails.org/ticket/2888  

This test verifies that duplicate rows are not created when duplicate objects are pushed into the habtm association one by one with 'save' called in between.  For example, no duplicate rows are created for the following:

developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)

assert developer.save
assert_equal 1, developer.projects.size

developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)

assert developer.save
assert_equal 1, developer.projects.size

However, when a list of duplicate objects are pushed into the habtm association at the same time without 'save' called in between the elements of the list, duplicate rows are introduced into the join table.  For example:

developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)

developer.projects &lt;&lt; [project, project]

# developer.projects.size is 2 instead of 1
# following test will fail:
assert_equal 1, developer.projects.size

Based on what the test for ticket 2888 says, it seems like this isn't how '&lt;&lt;' is supposed to behave.  Is this intentional for some reason?  Calling save for each push could result in a lot of trips to the db.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
In revision r9248, there is a test_update_attributes_after_push_without_duplicate_join_table_rows
&lt;/p&gt;&lt;p&gt;
in has_and_belongs_to_many_associations_test.rb that addresses ticket &lt;a href=&quot;http://dev.rubyonrails.org/ticket/2888&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
This test verifies that duplicate rows are not created when duplicate objects are pushed into the habtm association one by one with 'save' called in between.  For example, no duplicate rows are created for the following:
&lt;/p&gt;&lt;p&gt;
developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
&lt;/p&gt;&lt;p&gt;
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)
&lt;/p&gt;&lt;p&gt;
assert developer.save
&lt;/p&gt;&lt;p&gt;
assert_equal 1, developer.projects.size
&lt;/p&gt;&lt;p&gt;
developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
&lt;/p&gt;&lt;p&gt;
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)
&lt;/p&gt;&lt;p&gt;
assert developer.save
&lt;/p&gt;&lt;p&gt;
assert_equal 1, developer.projects.size
&lt;/p&gt;&lt;p&gt;
However, when a list of duplicate objects are pushed into the habtm association at the same time without 'save' called in between the elements of the list, duplicate rows are introduced into the join table.  For example:
&lt;/p&gt;&lt;p&gt;
developer = Developer.new(&quot;name&quot; =&gt; &quot;Kano&quot;)
&lt;/p&gt;&lt;p&gt;
project = SpecialProject.create(&quot;name&quot; =&gt; &quot;Special Project&quot;)
&lt;/p&gt;&lt;p&gt;
developer.projects &amp;lt;&amp;lt; [project, project]
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
developer.projects.size is 2 instead of 1
&lt;/li&gt;&lt;li&gt;
following test will fail:
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;
assert_equal 1, developer.projects.size
&lt;/p&gt;&lt;p&gt;
Based on what the test for ticket 2888 says, it seems like this isn't how '&amp;lt;&amp;lt;' is supposed to behave.  Is this intentional for some reason?  Calling save for each push could result in a lot of trips to the db.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-13T06:40:23+01:00</created-at>
      <creator-id type="integer">20137</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">177</number>
      <permalink>regression-of-ticket-2888-habtm-inserts-duplicate-rows-into-join-table</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Regression of ticket #2888: habtm inserts duplicate rows into join table</title>
      <updated-at type="datetime">2008-05-13T06:40:23+01:00</updated-at>
      <user-id type="integer">20137</user-id>
      <version type="integer">1</version>
      <user-name>Jerry Cheung</user-name>
      <creator-name>Jerry Cheung</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/177</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Closing this ticket as stale. If this is still an issue for you, feel free to reopen this ticket or create a new one with an updated description. Remember those unit tests too ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Closing this ticket as stale. If this is still an issue for you, feel free to reopen this ticket or create a new one with an updated description. Remember those unit tests too ;)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-17T01:16:20+01:00</created-at>
      <creator-id type="integer">20137</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">177</number>
      <permalink>regression-of-ticket-2888-habtm-inserts-duplicate-rows-into-join-table</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord habtm</tag>
      <title>Regression of ticket #2888: habtm inserts duplicate rows into join table</title>
      <updated-at type="datetime">2008-07-17T01:16:20+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Jerry Cheung</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/177</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I use RoR 2.1.1, and encounter problem with double records in habtm association.

For example: I have model Abc and Def. Abc habtm Def objects. When I do

a = Abc.find(some_id)
a.defs &lt;&lt; Def.find(other_id)
a.defs &lt;&lt; Def.find(other_id)

I receive two identical records in the association table.

I think this is a bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I use RoR 2.1.1, and encounter problem with double records in
habtm association.&lt;/p&gt;
&lt;p&gt;For example: I have model Abc and Def. Abc habtm Def objects.
When I do&lt;/p&gt;
&lt;p&gt;a = Abc.find(some_id) a.defs &amp;lt;&amp;lt; Def.find(other_id) a.defs
&amp;lt;&amp;lt; Def.find(other_id)&lt;/p&gt;
&lt;p&gt;I receive two identical records in the association table.&lt;/p&gt;
&lt;p&gt;I think this is a bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-01T19:18:47+01:00</created-at>
      <creator-id type="integer">20137</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">177</number>
      <permalink>regression-of-ticket-2888-habtm-inserts-duplicate-rows-into-join-table</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord habtm</tag>
      <title>Regression of ticket #2888: habtm inserts duplicate rows into join table</title>
      <updated-at type="datetime">2008-10-01T19:18:49+01:00</updated-at>
      <user-id type="integer">16101</user-id>
      <version type="integer">3</version>
      <user-name>Marcin</user-name>
      <creator-name>Jerry Cheung</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/177</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
