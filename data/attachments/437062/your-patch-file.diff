From 51dba6f480d9d74bdecafc7db5c700cbbe0b42e8 Mon Sep 17 00:00:00 2001
From: Aaron Patterson <aaron.patterson@gmail.com>
Date: Sat, 6 Mar 2010 21:39:05 -0800
Subject: [PATCH] drying up more code in associations.rb

---
 activerecord/lib/active_record/associations.rb |   28 +++++++++--------------
 1 files changed, 11 insertions(+), 17 deletions(-)

diff --git a/activerecord/lib/active_record/associations.rb b/activerecord/lib/active_record/associations.rb
index 86edfc3..e1a9c54 100755
--- a/activerecord/lib/active_record/associations.rb
+++ b/activerecord/lib/active_record/associations.rb
@@ -1561,24 +1561,18 @@ module ActiveRecord
 
         def configure_dependency_for_belongs_to(reflection)
           if reflection.options.include?(:dependent)
-            case reflection.options[:dependent]
-              when :destroy
-                method_name = "belongs_to_dependent_destroy_for_#{reflection.name}".to_sym
-                define_method(method_name) do
-                  association = send(reflection.name)
-                  association.destroy unless association.nil?
-                end
-                after_destroy method_name
-              when :delete
-                method_name = "belongs_to_dependent_delete_for_#{reflection.name}".to_sym
-                define_method(method_name) do
-                  association = send(reflection.name)
-                  association.delete unless association.nil?
-                end
-                after_destroy method_name
-              else
-                raise ArgumentError, "The :dependent option expects either :destroy or :delete (#{reflection.options[:dependent].inspect})"
+            name = reflection.options[:dependent]
+
+            unless [:destroy, :delete].include?(name)
+              raise ArgumentError, "The :dependent option expects either :destroy or :delete (#{reflection.options[:dependent].inspect})"
+            end
+
+            method_name = :"belongs_to_dependent_#{name}_for_#{reflection.name}"
+            define_method(method_name) do
+              association = send(reflection.name)
+              association.destroy unless association.nil?
             end
+            after_destroy method_name
           end
         end
 
-- 
1.6.6

