<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-07-15T04:51:31+01:00</created-at>
  <creator-id type="integer">60599</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2909</number>
  <permalink>polymorphic-many-to-many-relationships</permalink>
  <priority type="integer">1994</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord</tag>
  <title>Polymorphic many to many relationships...</title>
  <updated-at type="datetime">2010-10-09T03:31:39+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">9</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Alex</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2909</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>It would seem as though ActiveRecord is missing support for well designed polymorphic many to many relationships.

I have a model called &quot;Task&quot;.
I have an abstract model called &quot;Target&quot;.
I would like to relate multiple instances of subclasses of Target to Task.
I am not using single table inheritance.
I would like to query the polymorphic relationship to return a mixed result set.
I would like to query individual instances of subclasses of Target to obtain tasks that they are in a relationship with.
So, I figure a polymorphic many to many relationship between Tasks and subclasses of Targets is in order. In more detail, I will be able to do things like this in the console (and of course elsewhere):

task = Task.find(1)
task.targets
[...array of all the subclasses of Target here...]
But! Assuming models &quot;Store&quot;, &quot;Software&quot;, &quot;Office&quot;, &quot;Vehicle&quot;, which are all subclasses of &quot;Target&quot; exist, it would be nice to also traverse the relationship in the other direction:

store = Store.find(1)
store.tasks
[...array of all the Tasks this Store is related to...]
software = Software.find(18)
software.tasks
[...array of all the Tasks this Software is related to...]
The database tables implied by polymorphic relationships appears to be capable of doing this traversal, but I see some recurring themes in trying to find an answer which to me defeat the spirit of polymorphic relationships.  Using my example still, people appear to want to define Store, Software, Office, Vehicle in Task, which we can tell right away isn't a polymorphic relationship as it only returns one type of model.

The full text and a little discussion on my issue can be read over at stackoverflow:
http://stackoverflow.com/questions/1128308/rails-many-to-many-polymorphic-relationships

I apologize if there is a better place for this idea, do point me in the right direction.</original-body>
  <latest-body>It would seem as though ActiveRecord is missing support for well designed polymorphic many to many relationships.

I have a model called &quot;Task&quot;.
I have an abstract model called &quot;Target&quot;.
I would like to relate multiple instances of subclasses of Target to Task.
I am not using single table inheritance.
I would like to query the polymorphic relationship to return a mixed result set.
I would like to query individual instances of subclasses of Target to obtain tasks that they are in a relationship with.
So, I figure a polymorphic many to many relationship between Tasks and subclasses of Targets is in order. In more detail, I will be able to do things like this in the console (and of course elsewhere):

task = Task.find(1)
task.targets
[...array of all the subclasses of Target here...]
But! Assuming models &quot;Store&quot;, &quot;Software&quot;, &quot;Office&quot;, &quot;Vehicle&quot;, which are all subclasses of &quot;Target&quot; exist, it would be nice to also traverse the relationship in the other direction:

store = Store.find(1)
store.tasks
[...array of all the Tasks this Store is related to...]
software = Software.find(18)
software.tasks
[...array of all the Tasks this Software is related to...]
The database tables implied by polymorphic relationships appears to be capable of doing this traversal, but I see some recurring themes in trying to find an answer which to me defeat the spirit of polymorphic relationships.  Using my example still, people appear to want to define Store, Software, Office, Vehicle in Task, which we can tell right away isn't a polymorphic relationship as it only returns one type of model.

The full text and a little discussion on my issue can be read over at stackoverflow:
http://stackoverflow.com/questions/1128308/rails-many-to-many-polymorphic-relationships

I apologize if there is a better place for this idea, do point me in the right direction.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;It would seem as though ActiveRecord is missing support for well
designed polymorphic many to many relationships.&lt;/p&gt;
&lt;p&gt;I have a model called &quot;Task&quot;. I have an abstract model called
&quot;Target&quot;. I would like to relate multiple instances of subclasses
of Target to Task. I am not using single table inheritance. I would
like to query the polymorphic relationship to return a mixed result
set. I would like to query individual instances of subclasses of
Target to obtain tasks that they are in a relationship with. So, I
figure a polymorphic many to many relationship between Tasks and
subclasses of Targets is in order. In more detail, I will be able
to do things like this in the console (and of course
elsewhere):&lt;/p&gt;
&lt;p&gt;task = Task.find(1) task.targets [...array of all the subclasses
of Target here...] But! Assuming models &quot;Store&quot;, &quot;Software&quot;,
&quot;Office&quot;, &quot;Vehicle&quot;, which are all subclasses of &quot;Target&quot; exist, it
would be nice to also traverse the relationship in the other
direction:&lt;/p&gt;
&lt;p&gt;store = Store.find(1) store.tasks [...array of all the Tasks
this Store is related to...] software = Software.find(18)
software.tasks [...array of all the Tasks this Software is related
to...] The database tables implied by polymorphic relationships
appears to be capable of doing this traversal, but I see some
recurring themes in trying to find an answer which to me defeat the
spirit of polymorphic relationships. Using my example still, people
appear to want to define Store, Software, Office, Vehicle in Task,
which we can tell right away isn't a polymorphic relationship as it
only returns one type of model.&lt;/p&gt;
&lt;p&gt;The full text and a little discussion on my issue can be read
over at stackoverflow: &lt;a href=&quot;http://stackoverflow.com/questions/1128308/rails-many-to-many-polymorphic-relationships&quot;&gt;
http://stackoverflow.com/questio...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I apologize if there is a better place for this idea, do point
me in the right direction.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It would seem as though ActiveRecord is missing support for well designed polymorphic many to many relationships.

I have a model called &quot;Task&quot;.
I have an abstract model called &quot;Target&quot;.
I would like to relate multiple instances of subclasses of Target to Task.
I am not using single table inheritance.
I would like to query the polymorphic relationship to return a mixed result set.
I would like to query individual instances of subclasses of Target to obtain tasks that they are in a relationship with.
So, I figure a polymorphic many to many relationship between Tasks and subclasses of Targets is in order. In more detail, I will be able to do things like this in the console (and of course elsewhere):

task = Task.find(1)
task.targets
[...array of all the subclasses of Target here...]
But! Assuming models &quot;Store&quot;, &quot;Software&quot;, &quot;Office&quot;, &quot;Vehicle&quot;, which are all subclasses of &quot;Target&quot; exist, it would be nice to also traverse the relationship in the other direction:

store = Store.find(1)
store.tasks
[...array of all the Tasks this Store is related to...]
software = Software.find(18)
software.tasks
[...array of all the Tasks this Software is related to...]
The database tables implied by polymorphic relationships appears to be capable of doing this traversal, but I see some recurring themes in trying to find an answer which to me defeat the spirit of polymorphic relationships.  Using my example still, people appear to want to define Store, Software, Office, Vehicle in Task, which we can tell right away isn't a polymorphic relationship as it only returns one type of model.

The full text and a little discussion on my issue can be read over at stackoverflow:
http://stackoverflow.com/questions/1128308/rails-many-to-many-polymorphic-relationships

I apologize if there is a better place for this idea, do point me in the right direction.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It would seem as though ActiveRecord is missing support for well
designed polymorphic many to many relationships.&lt;/p&gt;
&lt;p&gt;I have a model called &quot;Task&quot;.&lt;br&gt;
I have an abstract model called &quot;Target&quot;.&lt;br&gt;
I would like to relate multiple instances of subclasses of Target
to Task.&lt;br&gt;
I am not using single table inheritance.&lt;br&gt;
I would like to query the polymorphic relationship to return a
mixed result set.&lt;br&gt;
I would like to query individual instances of subclasses of Target
to obtain tasks that they are in a relationship with.&lt;br&gt;
So, I figure a polymorphic many to many relationship between Tasks
and subclasses of Targets is in order. In more detail, I will be
able to do things like this in the console (and of course
elsewhere):&lt;/p&gt;
&lt;p&gt;task = Task.find(1)&lt;br&gt;
task.targets&lt;br&gt;
[...array of all the subclasses of Target here...] But! Assuming
models &quot;Store&quot;, &quot;Software&quot;, &quot;Office&quot;, &quot;Vehicle&quot;, which are all
subclasses of &quot;Target&quot; exist, it would be nice to also traverse the
relationship in the other direction:&lt;/p&gt;
&lt;p&gt;store = Store.find(1)&lt;br&gt;
store.tasks&lt;br&gt;
[...array of all the Tasks this Store is related to...] software =
Software.find(18)&lt;br&gt;
software.tasks&lt;br&gt;
[...array of all the Tasks this Software is related to...] The
database tables implied by polymorphic relationships appears to be
capable of doing this traversal, but I see some recurring themes in
trying to find an answer which to me defeat the spirit of
polymorphic relationships. Using my example still, people appear to
want to define Store, Software, Office, Vehicle in Task, which we
can tell right away isn't a polymorphic relationship as it only
returns one type of model.&lt;/p&gt;
&lt;p&gt;The full text and a little discussion on my issue can be read
over at stackoverflow:&lt;br&gt;
&lt;a href=
&quot;http://stackoverflow.com/questions/1128308/rails-many-to-many-polymorphic-relationships&quot;&gt;
http://stackoverflow.com/questions/1128308/rails-many-to-many-polym...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I apologize if there is a better place for this idea, do point
me in the right direction.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-15T04:51:31+01:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2909</number>
      <permalink>polymorphic-many-to-many-relationships</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Polymorphic many to many relationships...</title>
      <updated-at type="datetime">2009-07-15T04:51:33+01:00</updated-at>
      <user-id type="integer">60599</user-id>
      <version type="integer">1</version>
      <user-name>Alex</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2909</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I had a conversation with someone in #rubyonrails and he was surprised to discover that this functionality was not supported.

After talking for a bit, we thought that a few assumptions could be made about a HABTM polymorphic relationship.  Whether they are feasible or not is not in my realm of expertise as I am not familiar with the internals of ActiveRecord.  I'm going to try and whip together a quick example case of how this might work and some of the thinking behind it:

-=-
class Task &lt; ActiveRecord::Base

   has_and_belongs_to_many(
       :targets,
       :polymorphic =&gt; true
   )

end
-=-
This establishes that Task will be relating to records via a table called &quot;targets_tasks&quot;.  This table will contain the familiar target_id and target_type columns.  As well as a reference to the Task.

-=-
class Store &lt; ActiveRecord::Base
   has_and_belongs_to_many(
       :tasks,
       :as =&gt; target
   )
end

class Vehicle &lt; ActiveRecord::Base
   has_and_belongs_to_many(
       :tasks,
       :as =&gt; target
   )
end

# ...and so on and so forth....
-=-

In an application's console:

&gt;&gt; task = Task.find(69)
&gt;&gt; task.targets
[#&lt;Vehicle...&gt;,#&lt;Vehicle...&gt;,#&lt;Store...&gt;,#&lt;Store...&gt;.#&lt;Store...&gt;]

&gt;&gt; store = Store.find(42)
&gt;&gt; store.tasks
[#&lt;Task...&gt;,#&lt;Task...&gt;,#&lt;Task...&gt;,#&lt;Task...&gt;,#&lt;Task...&gt;]

-=-

Trying my best not to make too much light of the complexity involved here, all the information needed is available.  We can infer the class of the &quot;target&quot; from the relationship table - which I assume is already being done with the current concept of polymorphic relationships.
This is a highly opinionated concept for implementation which can yield mixed lists with or without single table inheritance.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I had a conversation with someone in #rubyonrails and he was
surprised to discover that this functionality was not
supported.&lt;/p&gt;
&lt;p&gt;After talking for a bit, we thought that a few assumptions could
be made about a HABTM polymorphic relationship. Whether they are
feasible or not is not in my realm of expertise as I am not
familiar with the internals of ActiveRecord. I'm going to try and
whip together a quick example case of how this might work and some
of the thinking behind it:&lt;/p&gt;
&lt;p&gt;-=- class Task &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;p&gt;has_and_belongs_to_many(&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   :targets,
   :polymorphic =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;end&lt;br&gt;
-=- This establishes that Task will be relating to records via a
table called &quot;targets_tasks&quot;. This table will contain the familiar
target_id and target_type columns. As well as a reference to the
Task.&lt;/p&gt;
&lt;p&gt;-=- class Store &amp;lt; ActiveRecord::Base&lt;br&gt;
has_and_belongs_to_many(&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   :tasks,
   :as =&amp;gt; target&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;) end&lt;/p&gt;
&lt;p&gt;class Vehicle &amp;lt; ActiveRecord::Base&lt;br&gt;
has_and_belongs_to_many(&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   :tasks,
   :as =&amp;gt; target&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;) end&lt;/p&gt;
&lt;h1&gt;...and so on and so forth....&lt;/h1&gt;
&lt;p&gt;-=-&lt;/p&gt;
&lt;p&gt;In an application's console:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;task = Task.find(69) task.targets
[#&amp;lt;Vehicle...&amp;gt;,#&amp;lt;Vehicle...&amp;gt;,#&amp;lt;Store...&amp;gt;,#&amp;lt;Store...&amp;gt;.#&amp;lt;Store...&amp;gt;]&lt;/p&gt;
&lt;p&gt;store = Store.find(42) store.tasks
[#&amp;lt;Task...&amp;gt;,#&amp;lt;Task...&amp;gt;,#&amp;lt;Task...&amp;gt;,#&amp;lt;Task...&amp;gt;,#&amp;lt;Task...&amp;gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;-=-&lt;/p&gt;
&lt;p&gt;Trying my best not to make too much light of the complexity
involved here, all the information needed is available. We can
infer the class of the &quot;target&quot; from the relationship table - which
I assume is already being done with the current concept of
polymorphic relationships.&lt;br&gt;
This is a highly opinionated concept for implementation which can
yield mixed lists with or without single table inheritance.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-16T01:16:48+01:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2909</number>
      <permalink>polymorphic-many-to-many-relationships</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Polymorphic many to many relationships...</title>
      <updated-at type="datetime">2009-07-16T01:17:47+01:00</updated-at>
      <user-id type="integer">60599</user-id>
      <version type="integer">2</version>
      <user-name>Alex</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2909</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 on this - I've come across an instance in one of my applications (stock control) where this would be really useful.

I'm going to try hacking at ActiveRecord to get it to support polymorphic has_and_belongs_to_many /somehow/ (including having one side of the association polymorphic, but the other side not, and both sides polymorphic) - if I get anything useful, I shall submit a patch here.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 on this - I've come across an instance in one of my
applications (stock control) where this would be really useful.&lt;/p&gt;
&lt;p&gt;I'm going to try hacking at ActiveRecord to get it to support
polymorphic has_and_belongs_to_many /somehow/ (including having one
side of the association polymorphic, but the other side not, and
both sides polymorphic) - if I get anything useful, I shall submit
a patch here.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-07T17:40:30+00:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2909</number>
      <permalink>polymorphic-many-to-many-relationships</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Polymorphic many to many relationships...</title>
      <updated-at type="datetime">2010-01-07T17:40:33+00:00</updated-at>
      <user-id type="integer">66277</user-id>
      <version type="integer">3</version>
      <user-name>Nick</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2909</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There's has_many_polymorphs, which does much of what you're describing. You'll also probably have much more luck with an explicit join model and has_many :through rather than habtm, which is something of a second-class citizen in current Rails.</body>
      <body-html>&lt;div&gt;&lt;p&gt;There's has_many_polymorphs, which does much of what you're
describing. You'll also probably have much more luck with an
explicit join model and has_many :through rather than habtm, which
is something of a second-class citizen in current Rails.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-07T19:07:05+00:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2909</number>
      <permalink>polymorphic-many-to-many-relationships</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Polymorphic many to many relationships...</title>
      <updated-at type="datetime">2010-01-07T19:07:07+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">4</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2909</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I got some emails that there were updates to this issue...

I ultimately never did get this working.  I did also look at has_many_polymorphs, and I should note that it isn't really a solution either.

What I was looking for was a way to define the relationship on the one side and at *most* the abstract class on the other (and have the subclasses inherit it).  Although I figure it should be possible by only making the declaration on the owning side.

(As a loose example...)
Issue &quot;has many&quot; Targets
Where Target is an abstract class that is subclassed by things like Cars, Stores, Computers, or whatever.

The only declaration in this case would be in Issue where it says it has many Targets.  Understandably, something might have to be in Target, so it would have a kind of &quot;belongs to Issue&quot; declaration.

I know this is possible as I did get a rough ORM working in PHP to do this.  I followed a lot of the Rails paradigms to get it going.

has_many_polymorphs does little more than provide a shortcut to making declarations you can make in regular Rails anyway.  I never saw it as a plugin/extension worth using and it didn't simplify my design.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I got some emails that there were updates to this issue...&lt;/p&gt;
&lt;p&gt;I ultimately never did get this working. I did also look at
has_many_polymorphs, and I should note that it isn't really a
solution either.&lt;/p&gt;
&lt;p&gt;What I was looking for was a way to define the relationship on
the one side and at &lt;em&gt;most&lt;/em&gt; the abstract class on the other
(and have the subclasses inherit it). Although I figure it should
be possible by only making the declaration on the owning side.&lt;/p&gt;
&lt;p&gt;(As a loose example...) Issue &quot;has many&quot; Targets&lt;br&gt;
Where Target is an abstract class that is subclassed by things like
Cars, Stores, Computers, or whatever.&lt;/p&gt;
&lt;p&gt;The only declaration in this case would be in Issue where it
says it has many Targets. Understandably, something might have to
be in Target, so it would have a kind of &quot;belongs to Issue&quot;
declaration.&lt;/p&gt;
&lt;p&gt;I know this is possible as I did get a rough ORM working in PHP
to do this. I followed a lot of the Rails paradigms to get it
going.&lt;/p&gt;
&lt;p&gt;has_many_polymorphs does little more than provide a shortcut to
making declarations you can make in regular Rails anyway. I never
saw it as a plugin/extension worth using and it didn't simplify my
design.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-07T20:14:57+00:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2909</number>
      <permalink>polymorphic-many-to-many-relationships</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Polymorphic many to many relationships...</title>
      <updated-at type="datetime">2010-01-07T20:15:00+00:00</updated-at>
      <user-id type="integer">60599</user-id>
      <version type="integer">5</version>
      <user-name>Alex</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2909</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The issue is that if you're not using STI on Target in the example above, the standard HABTM join record with just two ids isn't sufficient to identify the target record - what table should get the SELECT statement?

This *almost* works:
@@@ ruby
class Task &lt; AR::Base
  has_many :target_links
  has_many :targets, :through =&gt; :target_links, :source =&gt; :targetable # =&gt; this gives a HasManyThroughAssociationPolymorphicError exception since :source_type isn't specified
end

class TargetLink &lt; AR::Base
  belongs_to :task
  belongs_to :targetable, :polymorphic =&gt; true
end

class Target &lt; AR::Base
  has_many :target_links, :as =&gt; :targetable
  has_many :tasks, :through =&gt; :target_links
end
@@@

The reason the error is thrown in the example above is that the generated SQL wouldn't make sense - what table should be joined against to retrieve records? That's the step that has_many_polymorphs makes possible, via the specification of :from =&gt; [:model1, :model2, :model3].

As far as supporting this natively in has_and_belongs_to_many, it doesn't seem likely - 2.3 finally stripped out the (long-deprecated) &quot;decorated join table&quot; stuff with the explicit goal of encouraging more use of has_many :through for this kind of thing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The issue is that if you're not using STI on Target in the
example above, the standard HABTM join record with just two ids
isn't sufficient to identify the target record - what table should
get the SELECT statement?&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;almost&lt;/em&gt; works:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Task &amp;lt; AR::Base
  has_many :target_links
  has_many :targets, :through =&amp;gt; :target_links, :source =&amp;gt; :targetable # =&amp;gt; this gives a HasManyThroughAssociationPolymorphicError exception since :source_type isn't specified
end&lt;br&gt;
&lt;br&gt;


&lt;br&gt;
class TargetLink &amp;lt; AR::Base
  belongs_to :task
  belongs_to :targetable, :polymorphic =&amp;gt; true
end&lt;br&gt;
&lt;br&gt;


&lt;br&gt;
class Target &amp;lt; AR::Base
  has_many :target_links, :as =&amp;gt; :targetable
  has_many :tasks, :through =&amp;gt; :target_links
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The reason the error is thrown in the example above is that the
generated SQL wouldn't make sense - what table should be joined
against to retrieve records? That's the step that
has_many_polymorphs makes possible, via the specification of :from
=&amp;gt; [:model1, :model2, :model3].&lt;/p&gt;
&lt;p&gt;As far as supporting this natively in has_and_belongs_to_many,
it doesn't seem likely - 2.3 finally stripped out the
(long-deprecated) &quot;decorated join table&quot; stuff with the explicit
goal of encouraging more use of has_many :through for this kind of
thing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-07T21:25:09+00:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2909</number>
      <permalink>polymorphic-many-to-many-relationships</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Polymorphic many to many relationships...</title>
      <updated-at type="datetime">2010-01-07T21:25:12+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">6</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2909</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When I made my solution in PHP, I inferred the table name by the name of the subclass and maintained a table under the name of the &quot;having&quot; class and the abstract &quot;belonging&quot; class which stored the relationships.

I had a table that looked like this:
] TaskTarget
 o TaskID
 o ID
 o Type

I had no way of avoiding (my own MySQL knowledge may have limited this) creating the final graph with separate queries for each subclassed type.  I always had to query TaskTarget, get the list sorted by Type and then run a query for each type:

SELECT * FROM Store WHERE ID IN(?,?,?,?)...

This didn't seem like a problem as far as I was concerned as I was querying them by ID (fairly light) and any caching mechanism could easily smooth that over.  Considering that you are mixing data and program slightly to accomplish this (a necessary evil), the additional step seemed quite cheap for the capacity to have what I call &quot;blind&quot; relationships with subclasses of a known abstract class...

Very fun to talk about :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;When I made my solution in PHP, I inferred the table name by the
name of the subclass and maintained a table under the name of the
&quot;having&quot; class and the abstract &quot;belonging&quot; class which stored the
relationships.&lt;/p&gt;
&lt;p&gt;I had a table that looked like this:&lt;br&gt;
] TaskTarget o TaskID o ID o Type&lt;/p&gt;
&lt;p&gt;I had no way of avoiding (my own MySQL knowledge may have
limited this) creating the final graph with separate queries for
each subclassed type. I always had to query TaskTarget, get the
list sorted by Type and then run a query for each type:&lt;/p&gt;
&lt;p&gt;SELECT * FROM Store WHERE ID IN(?,?,?,?)...&lt;/p&gt;
&lt;p&gt;This didn't seem like a problem as far as I was concerned as I
was querying them by ID (fairly light) and any caching mechanism
could easily smooth that over. Considering that you are mixing data
and program slightly to accomplish this (a necessary evil), the
additional step seemed quite cheap for the capacity to have what I
call &quot;blind&quot; relationships with subclasses of a known abstract
class...&lt;/p&gt;
&lt;p&gt;Very fun to talk about :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-07T22:42:48+00:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2909</number>
      <permalink>polymorphic-many-to-many-relationships</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Polymorphic many to many relationships...</title>
      <updated-at type="datetime">2010-01-07T22:42:50+00:00</updated-at>
      <user-id type="integer">60599</user-id>
      <version type="integer">7</version>
      <user-name>Alex</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2909</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:53+01:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2909</number>
      <permalink>polymorphic-many-to-many-relationships</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>Polymorphic many to many relationships...</title>
      <updated-at type="datetime">2010-05-04T18:48:53+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">8</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2909</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-09T03:31:36+01:00</created-at>
      <creator-id type="integer">60599</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2909</number>
      <permalink>polymorphic-many-to-many-relationships</permalink>
      <priority type="integer">1994</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord</tag>
      <title>Polymorphic many to many relationships...</title>
      <updated-at type="datetime">2010-10-09T03:31:39+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">9</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2909</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
