<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-03T21:22:39+01:00</created-at>
  <creator-id type="integer">1530</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2755</number>
  <permalink>security-hole-found-in-rails-23s-http_authenticationrb</permalink>
  <priority type="integer">1864</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>Security hole found in Rails 2.3's http_authentication.rb</title>
  <updated-at type="datetime">2009-08-07T13:53:41+01:00</updated-at>
  <user-id type="integer">7211</user-id>
  <version type="integer">3</version>
  <user-name>CancelProfileIsBroken</user-name>
  <creator-name>nate (at inklingmarkets)</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2755</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>A hole that I believe could be a MAJOR deal for anyone using digest authentication in Rails 2.3 with the new http_authentication.rb code and who followed the simple Digest example from the rdoc, or the blog entry introducing it. 

http://weblog.rubyonrails.org/2009/1/2/this-week-in-edge-rails 

The hole would allow anyone to get to a protected page simply by sending a nil username/password with the request or an &#8220;incorrect&#8221; username and no password. 

In other words, whatever you were trying to protect using this is completely exposed.

If you are effected, you should immediately patch (patch included below) your Rails 2.3 installation or change your password procedure.  

To provide a concrete example: 

http://authbroken.heroku.com/

Don&#8217;t even type a username and password.  Just hit enter.  You shouldn&#8217;t have gotten to that protected page, but you did.

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;

This is based on the example from the rails blog, 

(which is based on a password_procedure also found in the rdoc and tests for this):

class PostsController &lt; ApplicationController

  Users = {&#8220;dhh&#8221; =&gt; &#8220;secret&#8221;}

  before_filter :authenticate

  def index

    render :text =&gt; &#8220;You needed a password to see this&#8230;&#8221; 

  end

  private

  def authenticate

    realm = &#8220;Application&#8221; 

    authenticate_or_request_with_http_digest(realm) do |name|

      Users[name]

    end

  end

end

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;

Another concrete example is the test case I&#8217;ve included in the patch: 

test &#8220;authentication request with nil credentials&#8221; do

    @request.env[&#8216;HTTP_AUTHORIZATION&#8217;] = encode_credentials(:username =&gt; nil, :password =&gt; nil)

    get :index

    assert_response :unauthorized

    assert_equal &#8220;HTTP Digest: Access denied.\n&#8221;, @response.body, &#8220;Authentication didn&#8217;t fail for request&#8221;

    assert_not_equal &#8216;Hello Secret&#8217;, @response.body, &#8220;Authentication didn&#8217;t fail for request&#8221;

  end

This test does not pass against Rails 2.3.2. The response is a 200, which means Rails 2.3 lets a user with a nil username and password to access the protected :index action.

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-

The problem stems from the example in the documentation:

#       def authenticate

#         authenticate_or_request_with_http_digest(REALM) do |username|

#           USERS[username]

#         end

#       end

If a request comes in with a nil username (for example from http_digest_authentication_test.rb: @request.env[&#8216;HTTP_AUTHORIZATION&#8217;] = encode_credentials(:username =&gt; nil, :password =&gt; nil))

USERS[nil] is going to return nil.

The documentation after this example in the rdoc, states: &#8220;Returning +nil+ will cause authentication to fail.&#8221;  But that isn&#8217;t what happens.  Nil is returned from the password procedure (USERS[nil]) and then proceeds to match the nil password that was sent in with the request.  So the validate method succeeds even though no user was actually matched against.

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;

This patch also contains the fix I believe I recommend based on the behavior the documentation stated would happen.  In other words, since the documentation states that the password validation should fail if the password procedure returns nil, I&#8217;ve changed the validate_digest_response to return false if the password_procedure returns nil.

https://gist.github.com/d5fa1ce8be9dfe0d9d19

For the record, I&#8217;ve attempted to contact the Ruby on Rails security list as well as a couple members on the core team, but no action has yet been taken to resolve the issue.  I felt this was big enough deal that people should be alerted without further delay.</original-body>
  <latest-body>A hole that I believe could be a MAJOR deal for anyone using digest authentication in Rails 2.3 with the new http_authentication.rb code and who followed the simple Digest example from the rdoc, or the blog entry introducing it. 

http://weblog.rubyonrails.org/2009/1/2/this-week-in-edge-rails 

The hole would allow anyone to get to a protected page simply by sending a nil username/password with the request or an &#8220;incorrect&#8221; username and no password. 

In other words, whatever you were trying to protect using this is completely exposed.

If you are effected, you should immediately patch (patch included below) your Rails 2.3 installation or change your password procedure.  

To provide a concrete example: 

http://authbroken.heroku.com/

Don&#8217;t even type a username and password.  Just hit enter.  You shouldn&#8217;t have gotten to that protected page, but you did.

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;

This is based on the example from the rails blog, 

(which is based on a password_procedure also found in the rdoc and tests for this):

class PostsController &lt; ApplicationController

  Users = {&#8220;dhh&#8221; =&gt; &#8220;secret&#8221;}

  before_filter :authenticate

  def index

    render :text =&gt; &#8220;You needed a password to see this&#8230;&#8221; 

  end

  private

  def authenticate

    realm = &#8220;Application&#8221; 

    authenticate_or_request_with_http_digest(realm) do |name|

      Users[name]

    end

  end

end

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;

Another concrete example is the test case I&#8217;ve included in the patch: 

test &#8220;authentication request with nil credentials&#8221; do

    @request.env[&#8216;HTTP_AUTHORIZATION&#8217;] = encode_credentials(:username =&gt; nil, :password =&gt; nil)

    get :index

    assert_response :unauthorized

    assert_equal &#8220;HTTP Digest: Access denied.\n&#8221;, @response.body, &#8220;Authentication didn&#8217;t fail for request&#8221;

    assert_not_equal &#8216;Hello Secret&#8217;, @response.body, &#8220;Authentication didn&#8217;t fail for request&#8221;

  end

This test does not pass against Rails 2.3.2. The response is a 200, which means Rails 2.3 lets a user with a nil username and password to access the protected :index action.

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-

The problem stems from the example in the documentation:

#       def authenticate

#         authenticate_or_request_with_http_digest(REALM) do |username|

#           USERS[username]

#         end

#       end

If a request comes in with a nil username (for example from http_digest_authentication_test.rb: @request.env[&#8216;HTTP_AUTHORIZATION&#8217;] = encode_credentials(:username =&gt; nil, :password =&gt; nil))

USERS[nil] is going to return nil.

The documentation after this example in the rdoc, states: &#8220;Returning +nil+ will cause authentication to fail.&#8221;  But that isn&#8217;t what happens.  Nil is returned from the password procedure (USERS[nil]) and then proceeds to match the nil password that was sent in with the request.  So the validate method succeeds even though no user was actually matched against.

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;

This patch also contains the fix I believe I recommend based on the behavior the documentation stated would happen.  In other words, since the documentation states that the password validation should fail if the password procedure returns nil, I&#8217;ve changed the validate_digest_response to return false if the password_procedure returns nil.

https://gist.github.com/d5fa1ce8be9dfe0d9d19

For the record, I&#8217;ve attempted to contact the Ruby on Rails security list as well as a couple members on the core team, but no action has yet been taken to resolve the issue.  I felt this was big enough deal that people should be alerted without further delay.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;A hole that I believe could be a MAJOR deal for anyone using
digest authentication in Rails 2.3 with the new
http_authentication.rb code and who followed the simple Digest
example from the rdoc, or the blog entry introducing it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://weblog.rubyonrails.org/2009/1/2/this-week-in-edge-rails&quot;&gt;http://weblog.rubyonrails.org/20...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The hole would allow anyone to get to a protected page simply by
sending a nil username/password with the request or an
&amp;#8220;incorrect&amp;#8221; username and no password.&lt;/p&gt;
&lt;p&gt;In other words, whatever you were trying to protect using this
is completely exposed.&lt;/p&gt;
&lt;p&gt;If you are effected, you should immediately patch (patch
included below) your Rails 2.3 installation or change your password
procedure.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;To provide a concrete example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://authbroken.heroku.com/&quot;&gt;http://authbroken.heroku.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t even type a username and password. Just hit enter.
You shouldn&amp;#8217;t have gotten to that protected page, but you
did.&lt;/p&gt;
&lt;p&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&lt;/p&gt;
&lt;p&gt;This is based on the example from the rails blog,&lt;/p&gt;
&lt;p&gt;(which is based on a password_procedure also found in the rdoc
and tests for this):&lt;/p&gt;
&lt;p&gt;class PostsController &amp;lt; ApplicationController&lt;/p&gt;
&lt;p&gt;Users = {&amp;#8220;dhh&amp;#8221; =&amp;gt; &amp;#8220;secret&amp;#8221;}&lt;/p&gt;
&lt;p&gt;before_filter :authenticate&lt;/p&gt;
&lt;p&gt;def index&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;render :text =&amp;gt; &amp;#8220;You needed a password to see this&amp;#8230;&amp;#8221;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;p&gt;def authenticate&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;realm = &amp;#8220;Application&amp;#8221;

authenticate_or_request_with_http_digest(realm) do |name|

  Users[name]

end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&lt;/p&gt;
&lt;p&gt;Another concrete example is the test case I&amp;#8217;ve included in
the patch:&lt;/p&gt;
&lt;p&gt;test &amp;#8220;authentication request with nil credentials&amp;#8221;
do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@request.env[&amp;#8216;HTTP_AUTHORIZATION&amp;#8217;] = encode_credentials(:username =&amp;gt; nil, :password =&amp;gt; nil)

get :index

assert_response :unauthorized

assert_equal &amp;#8220;HTTP Digest: Access denied.\n&amp;#8221;, @response.body, &amp;#8220;Authentication didn&amp;#8217;t fail for request&amp;#8221;

assert_not_equal &amp;#8216;Hello Secret&amp;#8217;, @response.body, &amp;#8220;Authentication didn&amp;#8217;t fail for request&amp;#8221;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;This test does not pass against Rails 2.3.2. The response is a
200, which means Rails 2.3 lets a user with a nil username and
password to access the protected :index action.&lt;/p&gt;
&lt;p&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-&lt;/p&gt;
&lt;p&gt;The problem stems from the example in the documentation:&lt;/p&gt;
&lt;h1&gt;def authenticate&lt;/h1&gt;
&lt;h1&gt;authenticate_or_request_with_http_digest(REALM) do
|username|&lt;/h1&gt;
&lt;h1&gt;USERS[username]&lt;/h1&gt;
&lt;h1&gt;end&lt;/h1&gt;
&lt;h1&gt;end&lt;/h1&gt;
&lt;p&gt;If a request comes in with a nil username (for example from
http_digest_authentication_test.rb:
@request.env[&amp;#8216;HTTP_AUTHORIZATION&amp;#8217;] =
encode_credentials(:username =&amp;gt; nil, :password =&amp;gt; nil))&lt;/p&gt;
&lt;p&gt;USERS[nil] is going to return nil.&lt;/p&gt;
&lt;p&gt;The documentation after this example in the rdoc, states:
&amp;#8220;Returning +nil+ will cause authentication to fail.&amp;#8221;
But that isn&amp;#8217;t what happens. Nil is returned from the
password procedure (USERS[nil]) and then proceeds to match the nil
password that was sent in with the request. So the validate method
succeeds even though no user was actually matched against.&lt;/p&gt;
&lt;p&gt;
&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&lt;/p&gt;
&lt;p&gt;This patch also contains the fix I believe I recommend based on
the behavior the documentation stated would happen. In other words,
since the documentation states that the password validation should
fail if the password procedure returns nil, I&amp;#8217;ve changed the
validate_digest_response to return false if the password_procedure
returns nil.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/d5fa1ce8be9dfe0d9d19&quot;&gt;https://gist.github.com/d5fa1ce8...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the record, I&amp;#8217;ve attempted to contact the Ruby on
Rails security list as well as a couple members on the core team,
but no action has yet been taken to resolve the issue. I felt this
was big enough deal that people should be alerted without further
delay.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A hole that I believe could be a MAJOR deal for anyone using digest authentication in Rails 2.3 with the new http_authentication.rb code and who followed the simple Digest example from the rdoc, or the blog entry introducing it. 

http://weblog.rubyonrails.org/2009/1/2/this-week-in-edge-rails 

The hole would allow anyone to get to a protected page simply by sending a nil username/password with the request or an &#8220;incorrect&#8221; username and no password. 

In other words, whatever you were trying to protect using this is completely exposed.

If you are effected, you should immediately patch (patch included below) your Rails 2.3 installation or change your password procedure.  

To provide a concrete example: 

http://authbroken.heroku.com/

Don&#8217;t even type a username and password.  Just hit enter.  You shouldn&#8217;t have gotten to that protected page, but you did.

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;

This is based on the example from the rails blog, 

(which is based on a password_procedure also found in the rdoc and tests for this):

class PostsController &lt; ApplicationController

  Users = {&#8220;dhh&#8221; =&gt; &#8220;secret&#8221;}

  before_filter :authenticate

  def index

    render :text =&gt; &#8220;You needed a password to see this&#8230;&#8221; 

  end

  private

  def authenticate

    realm = &#8220;Application&#8221; 

    authenticate_or_request_with_http_digest(realm) do |name|

      Users[name]

    end

  end

end

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;

Another concrete example is the test case I&#8217;ve included in the patch: 

test &#8220;authentication request with nil credentials&#8221; do

    @request.env[&#8216;HTTP_AUTHORIZATION&#8217;] = encode_credentials(:username =&gt; nil, :password =&gt; nil)

    get :index

    assert_response :unauthorized

    assert_equal &#8220;HTTP Digest: Access denied.\n&#8221;, @response.body, &#8220;Authentication didn&#8217;t fail for request&#8221;

    assert_not_equal &#8216;Hello Secret&#8217;, @response.body, &#8220;Authentication didn&#8217;t fail for request&#8221;

  end

This test does not pass against Rails 2.3.2. The response is a 200, which means Rails 2.3 lets a user with a nil username and password to access the protected :index action.

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-

The problem stems from the example in the documentation:

#       def authenticate

#         authenticate_or_request_with_http_digest(REALM) do |username|

#           USERS[username]

#         end

#       end

If a request comes in with a nil username (for example from http_digest_authentication_test.rb: @request.env[&#8216;HTTP_AUTHORIZATION&#8217;] = encode_credentials(:username =&gt; nil, :password =&gt; nil))

USERS[nil] is going to return nil.

The documentation after this example in the rdoc, states: &#8220;Returning +nil+ will cause authentication to fail.&#8221;  But that isn&#8217;t what happens.  Nil is returned from the password procedure (USERS[nil]) and then proceeds to match the nil password that was sent in with the request.  So the validate method succeeds even though no user was actually matched against.

&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;

This patch also contains the fix I believe I recommend based on the behavior the documentation stated would happen.  In other words, since the documentation states that the password validation should fail if the password procedure returns nil, I&#8217;ve changed the validate_digest_response to return false if the password_procedure returns nil.

https://gist.github.com/d5fa1ce8be9dfe0d9d19

For the record, I&#8217;ve attempted to contact the Ruby on Rails security list as well as a couple members on the core team, but no action has yet been taken to resolve the issue.  I felt this was big enough deal that people should be alerted without further delay.</body>
      <body-html>&lt;div&gt;&lt;p&gt;A hole that I believe could be a MAJOR deal for anyone using
digest authentication in Rails 2.3 with the new
http_authentication.rb code and who followed the simple Digest
example from the rdoc, or the blog entry introducing it.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://weblog.rubyonrails.org/2009/1/2/this-week-in-edge-rails&quot;&gt;http://weblog.rubyonrails.org/2009/1/2/this-week-in-edge-rails&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The hole would allow anyone to get to a protected page simply by
sending a nil username/password with the request or an
&amp;#8220;incorrect&amp;#8221; username and no password.&lt;/p&gt;
&lt;p&gt;In other words, whatever you were trying to protect using this
is completely exposed.&lt;/p&gt;
&lt;p&gt;If you are effected, you should immediately patch (patch
included below) your Rails 2.3 installation or change your password
procedure.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;To provide a concrete example:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://authbroken.heroku.com/&quot;&gt;http://authbroken.heroku.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t even type a username and password. Just hit enter.
You shouldn&amp;#8217;t have gotten to that protected page, but you
did.&lt;/p&gt;
&lt;p&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&lt;/p&gt;
&lt;p&gt;This is based on the example from the rails blog,&lt;/p&gt;
&lt;p&gt;(which is based on a password_procedure also found in the rdoc
and tests for this):&lt;/p&gt;
&lt;p&gt;class PostsController &amp;lt; ApplicationController&lt;/p&gt;
&lt;p&gt;Users = {&amp;#8220;dhh&amp;#8221; =&amp;gt; &amp;#8220;secret&amp;#8221;}&lt;/p&gt;
&lt;p&gt;before_filter :authenticate&lt;/p&gt;
&lt;p&gt;def index&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;render :text =&amp;gt; &amp;#8220;You needed a password to see this&amp;#8230;&amp;#8221;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;p&gt;def authenticate&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;realm = &amp;#8220;Application&amp;#8221;

authenticate_or_request_with_http_digest(realm) do |name|

  Users[name]

end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&lt;/p&gt;
&lt;p&gt;Another concrete example is the test case I&amp;#8217;ve included in
the patch:&lt;/p&gt;
&lt;p&gt;test &amp;#8220;authentication request with nil credentials&amp;#8221;
do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@request.env[&amp;#8216;HTTP_AUTHORIZATION&amp;#8217;] = encode_credentials(:username =&amp;gt; nil, :password =&amp;gt; nil)

get :index

assert_response :unauthorized

assert_equal &amp;#8220;HTTP Digest: Access denied.\n&amp;#8221;, @response.body, &amp;#8220;Authentication didn&amp;#8217;t fail for request&amp;#8221;

assert_not_equal &amp;#8216;Hello Secret&amp;#8217;, @response.body, &amp;#8220;Authentication didn&amp;#8217;t fail for request&amp;#8221;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;This test does not pass against Rails 2.3.2. The response is a
200, which means Rails 2.3 lets a user with a nil username and
password to access the protected :index action.&lt;/p&gt;
&lt;p&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-&lt;/p&gt;
&lt;p&gt;The problem stems from the example in the documentation:&lt;/p&gt;
&lt;h1&gt;def authenticate&lt;/h1&gt;
&lt;h1&gt;authenticate_or_request_with_http_digest(REALM) do
|username|&lt;/h1&gt;
&lt;h1&gt;USERS[username]&lt;/h1&gt;
&lt;h1&gt;end&lt;/h1&gt;
&lt;h1&gt;end&lt;/h1&gt;
&lt;p&gt;If a request comes in with a nil username (for example from
http_digest_authentication_test.rb:
@request.env[&amp;#8216;HTTP_AUTHORIZATION&amp;#8217;] =
encode_credentials(:username =&amp;gt; nil, :password =&amp;gt; nil))&lt;/p&gt;
&lt;p&gt;USERS[nil] is going to return nil.&lt;/p&gt;
&lt;p&gt;The documentation after this example in the rdoc, states:
&amp;#8220;Returning +nil+ will cause authentication to fail.&amp;#8221;
But that isn&amp;#8217;t what happens. Nil is returned from the
password procedure (USERS[nil]) and then proceeds to match the nil
password that was sent in with the request. So the validate method
succeeds even though no user was actually matched against.&lt;/p&gt;
&lt;p&gt;
&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&lt;/p&gt;
&lt;p&gt;This patch also contains the fix I believe I recommend based on
the behavior the documentation stated would happen. In other words,
since the documentation states that the password validation should
fail if the password procedure returns nil, I&amp;#8217;ve changed the
validate_digest_response to return false if the password_procedure
returns nil.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://gist.github.com/d5fa1ce8be9dfe0d9d19&quot;&gt;https://gist.github.com/d5fa1ce8be9dfe0d9d19&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the record, I&amp;#8217;ve attempted to contact the Ruby on
Rails security list as well as a couple members on the core team,
but no action has yet been taken to resolve the issue. I felt this
was big enough deal that people should be alerted without further
delay.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-03T21:22:40+01:00</created-at>
      <creator-id type="integer">1530</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2755</number>
      <permalink>security-hole-found-in-rails-23s-http_authenticationrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Security hole found in Rails 2.3's http_authentication.rb</title>
      <updated-at type="datetime">2009-06-03T21:22:43+01:00</updated-at>
      <user-id type="integer">1530</user-id>
      <version type="integer">1</version>
      <user-name>nate (at inklingmarkets)</user-name>
      <creator-name>nate (at inklingmarkets)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2755</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Note that authenticate_or_request_http_digest can take either the clear-text password or the HA1 digest hash of the username and password: MD5(username:realm:password) (see icket #2209: https://rails.lighthouseapp.com/projects/8994/tickets/2209-patch-3-for-http-digest-auth ).

There were some email discussions at the time to obsolete the clear-text password altogther, but it was too late in the release processes to make this change.

My opinion was that HA1 should be exposed as an api and at least used as a recommended practice. Better still would be to obsolete the use of the clear-text password altogether.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Note that authenticate_or_request_http_digest can take either
the clear-text password or the HA1 digest hash of the username and
password: MD5(username:realm:password) (see icket &lt;a href=
&quot;/projects/8994/tickets/2209&quot; title=&quot;Ticket #2209&quot;&gt;#2209&lt;/a&gt;:
&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/2209-patch-3-for-http-digest-auth&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/2209-patch-3-...&lt;/a&gt;
).&lt;/p&gt;
&lt;p&gt;There were some email discussions at the time to obsolete the
clear-text password altogther, but it was too late in the release
processes to make this change.&lt;/p&gt;
&lt;p&gt;My opinion was that HA1 should be exposed as an api and at least
used as a recommended practice. Better still would be to obsolete
the use of the clear-text password altogether.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-06T18:04:35+01:00</created-at>
      <creator-id type="integer">1530</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2755</number>
      <permalink>security-hole-found-in-rails-23s-http_authenticationrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Security hole found in Rails 2.3's http_authentication.rb</title>
      <updated-at type="datetime">2009-06-06T18:04:38+01:00</updated-at>
      <user-id type="integer">22440</user-id>
      <version type="integer">2</version>
      <user-name>Gregg Kellogg</user-name>
      <creator-name>nate (at inklingmarkets)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2755</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>fixed in 056ddbdcfb07f0b5c7e6ed8a35f6c3b55b4ab489</body>
      <body-html>&lt;div&gt;&lt;p&gt;fixed in 056ddbdcfb07f0b5c7e6ed8a35f6c3b55b4ab489&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-07T13:53:38+01:00</created-at>
      <creator-id type="integer">1530</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2755</number>
      <permalink>security-hole-found-in-rails-23s-http_authenticationrb</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Security hole found in Rails 2.3's http_authentication.rb</title>
      <updated-at type="datetime">2009-08-07T13:53:41+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>nate (at inklingmarkets)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2755</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
