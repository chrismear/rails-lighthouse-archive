<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">12714</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-09-09T14:44:53+01:00</created-at>
  <creator-id type="integer">115028</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5590</number>
  <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
  <priority type="integer">1</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>&quot;windows 1.9.2&quot;</tag>
  <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
  <updated-at type="datetime">2011-04-18T09:34:46+01:00</updated-at>
  <user-id type="integer">144127</user-id>
  <version type="integer">13</version>
  <user-name>iviney</user-name>
  <creator-name>sponeil</creator-name>
  <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
  <priority-name>High</priority-name>
  <original-body>I'm not 100% certain whether this is a Ruby issue or a Rails issue (or a bit of both). It appears to be related to threading and the Rails log files, so it could be a Rails issue if Rails is missing a lock somewhere. If I understand it correctly, Ruby 1.9.x uses native threads and acquires a global lock when executing normal Ruby code, but then releases it inside IO calls. This would imply to me that two Ruby threads simultaneously accessing the same IO object could cause Ruby to crash.

It is easy to reproduce the problem. Install a clean 1.9.2p0 and Rails 3.0. Use the Rails 3.0 generator script to create an empty project, launch it using default options, point a browser to the home page for the new Rails app, and keep pressing F5 (or Refresh) until Ruby crashes. It crashes eventually no matter how I run it, but it seems to crash more often in production mode (which logs a bunch of routing errors, possibly due to a bug in the app generator script). Sometimes it will crash when I hold down the F5 key, but sometimes I have to hold and release it intermittently for a minute or two. It appears to be very dependent on timing, but I can usually make it crash in less than 60 seconds.

I'm currently using Windows 7 (x64) and Visual Studio 2008. The crash also occurs with the pre-packaged RubyInstaller for Windows. Given the debug information I've provided below, it does not appear to be OS-specific, but a different OS can have different timing and/or threading issues, so it may be specific to Windows.

I rebuilt Ruby with debugging options and got this call stack when it crashed:
rb_econv_convert() in transcode.c line 1449 (the ec parameter was set to NULL)
fill_cbuf() in io.c line 1691
read_all() in io.c line 1755
io_read() in io.c line 2163

I added some additional checks to the code to find out how fptr-&gt;readconv was getting cleared inside fill_cbuf(), and I traced it to io_fillbuf() and then rb_read_internal(). Now, rb_read_internal() does not have a pointer to fptr or any of its members. It could be a buffer overrun, but the buffer is much larger than the file, and the changes seem much too clean for that. In addition to readconv being cleared, other struct members are being reset to an earlier state (not necessarily back to 0), which seems to imply that another thread is accessing the same IO object while the current thread is inside rb_read_internal(). I can't &quot;catch it in the act&quot; because setting breakpoints affects the timing, and it typically requires hundreds of passes through this code to break. However, I can copy the struct fptr is pointing to and have it break as soon as it changes. The info being read right before the IO object gets reset is:

+		rbuf	0x05700408 &quot;
Started GET &quot;/javascripts/dragdrop.js?1283353508&quot; for 127.0.0.1 at 2010-09-08 16:22:14 -0400

ActionController::RoutingError (No route matches &quot;/javascripts/dragdrop.js&quot;):
  

Rendered d:/Projects/NetAuditor/v3.00/Code/Build/lib/ruby/gems/1.9.1/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (2.0ms)

&quot;

I can stop this crash by changing the Ruby source to check for NULL before referencing the pointer. However, if there is still a threading issue, it may come back to bite me in production. Any ideas?</original-body>
  <latest-body>I'm not 100% certain whether this is a Ruby issue or a Rails issue (or a bit of both). It appears to be related to threading and the Rails log files, so it could be a Rails issue if Rails is missing a lock somewhere. If I understand it correctly, Ruby 1.9.x uses native threads and acquires a global lock when executing normal Ruby code, but then releases it inside IO calls. This would imply to me that two Ruby threads simultaneously accessing the same IO object could cause Ruby to crash.

It is easy to reproduce the problem. Install a clean 1.9.2p0 and Rails 3.0. Use the Rails 3.0 generator script to create an empty project, launch it using default options, point a browser to the home page for the new Rails app, and keep pressing F5 (or Refresh) until Ruby crashes. It crashes eventually no matter how I run it, but it seems to crash more often in production mode (which logs a bunch of routing errors, possibly due to a bug in the app generator script). Sometimes it will crash when I hold down the F5 key, but sometimes I have to hold and release it intermittently for a minute or two. It appears to be very dependent on timing, but I can usually make it crash in less than 60 seconds.

I'm currently using Windows 7 (x64) and Visual Studio 2008. The crash also occurs with the pre-packaged RubyInstaller for Windows. Given the debug information I've provided below, it does not appear to be OS-specific, but a different OS can have different timing and/or threading issues, so it may be specific to Windows.

I rebuilt Ruby with debugging options and got this call stack when it crashed:
rb_econv_convert() in transcode.c line 1449 (the ec parameter was set to NULL)
fill_cbuf() in io.c line 1691
read_all() in io.c line 1755
io_read() in io.c line 2163

I added some additional checks to the code to find out how fptr-&gt;readconv was getting cleared inside fill_cbuf(), and I traced it to io_fillbuf() and then rb_read_internal(). Now, rb_read_internal() does not have a pointer to fptr or any of its members. It could be a buffer overrun, but the buffer is much larger than the file, and the changes seem much too clean for that. In addition to readconv being cleared, other struct members are being reset to an earlier state (not necessarily back to 0), which seems to imply that another thread is accessing the same IO object while the current thread is inside rb_read_internal(). I can't &quot;catch it in the act&quot; because setting breakpoints affects the timing, and it typically requires hundreds of passes through this code to break. However, I can copy the struct fptr is pointing to and have it break as soon as it changes. The info being read right before the IO object gets reset is:

+		rbuf	0x05700408 &quot;
Started GET &quot;/javascripts/dragdrop.js?1283353508&quot; for 127.0.0.1 at 2010-09-08 16:22:14 -0400

ActionController::RoutingError (No route matches &quot;/javascripts/dragdrop.js&quot;):
  

Rendered d:/Projects/NetAuditor/v3.00/Code/Build/lib/ruby/gems/1.9.1/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (2.0ms)

&quot;

I can stop this crash by changing the Ruby source to check for NULL before referencing the pointer. However, if there is still a threading issue, it may come back to bite me in production. Any ideas?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm not 100% certain whether this is a Ruby issue or a Rails
issue (or a bit of both). It appears to be related to threading and
the Rails log files, so it could be a Rails issue if Rails is
missing a lock somewhere. If I understand it correctly, Ruby 1.9.x
uses native threads and acquires a global lock when executing
normal Ruby code, but then releases it inside IO calls. This would
imply to me that two Ruby threads simultaneously accessing the same
IO object could cause Ruby to crash.&lt;/p&gt;
&lt;p&gt;It is easy to reproduce the problem. Install a clean 1.9.2p0 and
Rails 3.0. Use the Rails 3.0 generator script to create an empty
project, launch it using default options, point a browser to the
home page for the new Rails app, and keep pressing F5 (or Refresh)
until Ruby crashes. It crashes eventually no matter how I run it,
but it seems to crash more often in production mode (which logs a
bunch of routing errors, possibly due to a bug in the app generator
script). Sometimes it will crash when I hold down the F5 key, but
sometimes I have to hold and release it intermittently for a minute
or two. It appears to be very dependent on timing, but I can
usually make it crash in less than 60 seconds.&lt;/p&gt;
&lt;p&gt;I'm currently using Windows 7 (x64) and Visual Studio 2008. The
crash also occurs with the pre-packaged RubyInstaller for Windows.
Given the debug information I've provided below, it does not appear
to be OS-specific, but a different OS can have different timing
and/or threading issues, so it may be specific to Windows.&lt;/p&gt;
&lt;p&gt;I rebuilt Ruby with debugging options and got this call stack
when it crashed:&lt;br&gt;
rb_econv_convert() in transcode.c line 1449 (the ec parameter was
set to NULL)&lt;br&gt;
fill_cbuf() in io.c line 1691&lt;br&gt;
read_all() in io.c line 1755&lt;br&gt;
io_read() in io.c line 2163&lt;/p&gt;
&lt;p&gt;I added some additional checks to the code to find out how
fptr-&amp;gt;readconv was getting cleared inside fill_cbuf(), and I
traced it to io_fillbuf() and then rb_read_internal(). Now,
rb_read_internal() does not have a pointer to fptr or any of its
members. It could be a buffer overrun, but the buffer is much
larger than the file, and the changes seem much too clean for that.
In addition to readconv being cleared, other struct members are
being reset to an earlier state (not necessarily back to 0), which
seems to imply that another thread is accessing the same IO object
while the current thread is inside rb_read_internal(). I can't
&quot;catch it in the act&quot; because setting breakpoints affects the
timing, and it typically requires hundreds of passes through this
code to break. However, I can copy the struct fptr is pointing to
and have it break as soon as it changes. The info being read right
before the IO object gets reset is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;rbuf    0x05700408 &quot;&lt;/code&gt;
&lt;/pre&gt;
Started GET &quot;/javascripts/dragdrop.js?1283353508&quot; for 127.0.0.1 at
2010-09-08 16:22:14 -0400&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ActionController::RoutingError (No route matches
&quot;/javascripts/dragdrop.js&quot;):&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Rendered
d:/Projects/NetAuditor/v3.00/Code/Build/lib/ruby/gems/1.9.1/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb
within rescues/layout (2.0ms)&lt;/p&gt;
&lt;p&gt;&quot;&lt;/p&gt;
&lt;p&gt;I can stop this crash by changing the Ruby source to check for
NULL before referencing the pointer. However, if there is still a
threading issue, it may come back to bite me in production. Any
ideas?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm not 100% certain whether this is a Ruby issue or a Rails issue (or a bit of both). It appears to be related to threading and the Rails log files, so it could be a Rails issue if Rails is missing a lock somewhere. If I understand it correctly, Ruby 1.9.x uses native threads and acquires a global lock when executing normal Ruby code, but then releases it inside IO calls. This would imply to me that two Ruby threads simultaneously accessing the same IO object could cause Ruby to crash.

It is easy to reproduce the problem. Install a clean 1.9.2p0 and Rails 3.0. Use the Rails 3.0 generator script to create an empty project, launch it using default options, point a browser to the home page for the new Rails app, and keep pressing F5 (or Refresh) until Ruby crashes. It crashes eventually no matter how I run it, but it seems to crash more often in production mode (which logs a bunch of routing errors, possibly due to a bug in the app generator script). Sometimes it will crash when I hold down the F5 key, but sometimes I have to hold and release it intermittently for a minute or two. It appears to be very dependent on timing, but I can usually make it crash in less than 60 seconds.

I'm currently using Windows 7 (x64) and Visual Studio 2008. The crash also occurs with the pre-packaged RubyInstaller for Windows. Given the debug information I've provided below, it does not appear to be OS-specific, but a different OS can have different timing and/or threading issues, so it may be specific to Windows.

I rebuilt Ruby with debugging options and got this call stack when it crashed:
rb_econv_convert() in transcode.c line 1449 (the ec parameter was set to NULL)
fill_cbuf() in io.c line 1691
read_all() in io.c line 1755
io_read() in io.c line 2163

I added some additional checks to the code to find out how fptr-&gt;readconv was getting cleared inside fill_cbuf(), and I traced it to io_fillbuf() and then rb_read_internal(). Now, rb_read_internal() does not have a pointer to fptr or any of its members. It could be a buffer overrun, but the buffer is much larger than the file, and the changes seem much too clean for that. In addition to readconv being cleared, other struct members are being reset to an earlier state (not necessarily back to 0), which seems to imply that another thread is accessing the same IO object while the current thread is inside rb_read_internal(). I can't &quot;catch it in the act&quot; because setting breakpoints affects the timing, and it typically requires hundreds of passes through this code to break. However, I can copy the struct fptr is pointing to and have it break as soon as it changes. The info being read right before the IO object gets reset is:

+		rbuf	0x05700408 &quot;
Started GET &quot;/javascripts/dragdrop.js?1283353508&quot; for 127.0.0.1 at 2010-09-08 16:22:14 -0400

ActionController::RoutingError (No route matches &quot;/javascripts/dragdrop.js&quot;):
  

Rendered d:/Projects/NetAuditor/v3.00/Code/Build/lib/ruby/gems/1.9.1/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (2.0ms)

&quot;

I can stop this crash by changing the Ruby source to check for NULL before referencing the pointer. However, if there is still a threading issue, it may come back to bite me in production. Any ideas?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not 100% certain whether this is a Ruby issue or a Rails
issue (or a bit of both). It appears to be related to threading and
the Rails log files, so it could be a Rails issue if Rails is
missing a lock somewhere. If I understand it correctly, Ruby 1.9.x
uses native threads and acquires a global lock when executing
normal Ruby code, but then releases it inside IO calls. This would
imply to me that two Ruby threads simultaneously accessing the same
IO object could cause Ruby to crash.&lt;/p&gt;
&lt;p&gt;It is easy to reproduce the problem. Install a clean 1.9.2p0 and
Rails 3.0. Use the Rails 3.0 generator script to create an empty
project, launch it using default options, point a browser to the
home page for the new Rails app, and keep pressing F5 (or Refresh)
until Ruby crashes. It crashes eventually no matter how I run it,
but it seems to crash more often in production mode (which logs a
bunch of routing errors, possibly due to a bug in the app generator
script). Sometimes it will crash when I hold down the F5 key, but
sometimes I have to hold and release it intermittently for a minute
or two. It appears to be very dependent on timing, but I can
usually make it crash in less than 60 seconds.&lt;/p&gt;
&lt;p&gt;I'm currently using Windows 7 (x64) and Visual Studio 2008. The
crash also occurs with the pre-packaged RubyInstaller for Windows.
Given the debug information I've provided below, it does not appear
to be OS-specific, but a different OS can have different timing
and/or threading issues, so it may be specific to Windows.&lt;/p&gt;
&lt;p&gt;I rebuilt Ruby with debugging options and got this call stack
when it crashed:&lt;br&gt;
rb_econv_convert() in transcode.c line 1449 (the ec parameter was
set to NULL)&lt;br&gt;
fill_cbuf() in io.c line 1691&lt;br&gt;
read_all() in io.c line 1755&lt;br&gt;
io_read() in io.c line 2163&lt;/p&gt;
&lt;p&gt;I added some additional checks to the code to find out how
fptr-&amp;gt;readconv was getting cleared inside fill_cbuf(), and I
traced it to io_fillbuf() and then rb_read_internal(). Now,
rb_read_internal() does not have a pointer to fptr or any of its
members. It could be a buffer overrun, but the buffer is much
larger than the file, and the changes seem much too clean for that.
In addition to readconv being cleared, other struct members are
being reset to an earlier state (not necessarily back to 0), which
seems to imply that another thread is accessing the same IO object
while the current thread is inside rb_read_internal(). I can't
&quot;catch it in the act&quot; because setting breakpoints affects the
timing, and it typically requires hundreds of passes through this
code to break. However, I can copy the struct fptr is pointing to
and have it break as soon as it changes. The info being read right
before the IO object gets reset is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;rbuf    0x05700408 &quot;&lt;/code&gt;
&lt;/pre&gt;
Started GET &quot;/javascripts/dragdrop.js?1283353508&quot; for 127.0.0.1 at
2010-09-08 16:22:14 -0400&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ActionController::RoutingError (No route matches
&quot;/javascripts/dragdrop.js&quot;):&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Rendered
d:/Projects/NetAuditor/v3.00/Code/Build/lib/ruby/gems/1.9.1/gems/actionpack-3.0.0/lib/action_dispatch/middleware/templates/rescues/routing_error.erb
within rescues/layout (2.0ms)&lt;/p&gt;
&lt;p&gt;&quot;&lt;/p&gt;
&lt;p&gt;I can stop this crash by changing the Ruby source to check for
NULL before referencing the pointer. However, if there is still a
threading issue, it may come back to bite me in production. Any
ideas?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-09T14:44:53+01:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2010-09-09T14:44:54+01:00</updated-at>
      <user-id type="integer">115028</user-id>
      <version type="integer">1</version>
      <user-name>sponeil</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I wasn't able to reproduce this yet but can you post the output of the crash?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I wasn't able to reproduce this yet but can you post the output
of the crash?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-12T05:02:49+01:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2010-09-12T05:02:50+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There was no output other than what I just posted. I was using the default web server (WEBrick) in Windows, and with serve_static_assets defaulted to false in production mode, it was generating routing errors trying to find the CSS and JS files under the public folder. When I hit refresh too fast, it also generated connection reset errors. After a time, Windows popped up its standard GPF message box with no other output. I couldn't get any other information out of it without running ruby.exe in the debugger so I could get a stack trace and try to figure out where it was crashing. The crash was much easier to reproduce in debug mode.

When trying to reproduce it, I find I can get it to happen faster by holding F5 for a random period of time (1-5 seconds), releasing it for a second or two, and repeating the random hold. Try to vary how long you hold it down and release it to get different timing conditions. The speed and number of cores of the processor you're using may affect how hard it is to reproduce (mine is dual-core). If you're not, it may be much harder for you to reproduce it.

If there's something specific you want me to look for, let me know. If not, I may be able to arrange a time to show you it happening on my system (via a WebEx meeting).</body>
      <body-html>&lt;div&gt;&lt;p&gt;There was no output other than what I just posted. I was using
the default web server (WEBrick) in Windows, and with
serve_static_assets defaulted to false in production mode, it was
generating routing errors trying to find the CSS and JS files under
the public folder. When I hit refresh too fast, it also generated
connection reset errors. After a time, Windows popped up its
standard GPF message box with no other output. I couldn't get any
other information out of it without running ruby.exe in the
debugger so I could get a stack trace and try to figure out where
it was crashing. The crash was much easier to reproduce in debug
mode.&lt;/p&gt;
&lt;p&gt;When trying to reproduce it, I find I can get it to happen
faster by holding F5 for a random period of time (1-5 seconds),
releasing it for a second or two, and repeating the random hold.
Try to vary how long you hold it down and release it to get
different timing conditions. The speed and number of cores of the
processor you're using may affect how hard it is to reproduce (mine
is dual-core). If you're not, it may be much harder for you to
reproduce it.&lt;/p&gt;
&lt;p&gt;If there's something specific you want me to look for, let me
know. If not, I may be able to arrange a time to show you it
happening on my system (via a WebEx meeting).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-12T13:32:41+01:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2010-09-12T13:32:43+01:00</updated-at>
      <user-id type="integer">115028</user-id>
      <version type="integer">3</version>
      <user-name>sponeil</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 here!!

I'm experiencing the same issue. So far only on Windows...i will try if i can reproduce it on a UNIX-based machine. It only happens for me if I have e.g. Javascript or CSS resources that can't be found.

If it only happens on windows, i guess it might be a ruby problem concerning threading or something?</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 here!!&lt;/p&gt;
&lt;p&gt;I'm experiencing the same issue. So far only on Windows...i will
try if i can reproduce it on a UNIX-based machine. It only happens
for me if I have e.g. Javascript or CSS resources that can't be
found.&lt;/p&gt;
&lt;p&gt;If it only happens on windows, i guess it might be a ruby
problem concerning threading or something?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-13T19:05:40+01:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2010-09-13T19:05:44+01:00</updated-at>
      <user-id type="integer">115648</user-id>
      <version type="integer">4</version>
      <user-name>habermann24</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can't reproduce on *nix. Very likely windows specific. You may have to post this to ruby-core.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can't reproduce on *nix. Very likely windows specific. You may
have to post this to ruby-core.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-22T16:11:17+01:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;windows 1.9.2&quot;</tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2010-09-22T16:11:21+01:00</updated-at>
      <user-id type="integer">2053</user-id>
      <version type="integer">5</version>
      <user-name>gnufied</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have already posted it to ruby-core. Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have already posted it to ruby-core. Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-22T17:48:47+01:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;windows 1.9.2&quot;</tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2010-09-22T17:48:51+01:00</updated-at>
      <user-id type="integer">115028</user-id>
      <version type="integer">6</version>
      <user-name>sponeil</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking as invalid for now. Will re-open if it turns out to be a non-Ruby issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking as invalid for now. Will re-open if it turns out to be a
non-Ruby issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-23T08:04:56+01:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;windows 1.9.2&quot;</tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2010-09-23T08:04:57+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">7</version>
      <user-name>David Trasbo</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Just wanted to say that I installed ruby 1.9.2p0 and rails 3.0.3 via the rubyinstaller on my windows xp box. Ruby.exe started crashing on almost every page load. Then I came across this page and got the hint that something about having unloadable assets is causing this. I noticed in the webrick output that it couldn't find an image. As soon as I fixed that the crashing stopped.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just wanted to say that I installed ruby 1.9.2p0 and rails 3.0.3
via the rubyinstaller on my windows xp box. Ruby.exe started
crashing on almost every page load. Then I came across this page
and got the hint that something about having unloadable assets is
causing this. I noticed in the webrick output that it couldn't find
an image. As soon as I fixed that the crashing stopped.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-25T21:51:24+00:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;windows 1.9.2&quot;</tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2010-11-25T21:51:29+00:00</updated-at>
      <user-id type="integer">126746</user-id>
      <version type="integer">8</version>
      <user-name>jtw</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm having the same issue with Rails 3.0.3 on Windows using Ruby 1.9.2p0. My site will randomly crash when refreshing the main page. Debugging with Visual Studio shows the following:

Unhandled exception at 0x62e1a822 in ruby.exe: 0xC0000005: Access violation writing location 0x0000000c.

I then break into the disassembly which doesn't really help me. Here is the disassembly in case it is meaningful to anyone:

62E1A809  jmp         62E1A692 
62E1A80E  xchg        ax,ax 
62E1A810  push        ebp  
62E1A811  mov         ebp,esp 
62E1A813  push        edi  
62E1A814  push        esi  
62E1A815  push        ebx  
62E1A816  sub         esp,4Ch 
62E1A819  mov         ebx,dword ptr [ebp+8] 
62E1A81C  lea         eax,[ebp-19h] 
62E1A81F  mov         dword ptr [ebp-20h],eax 
-&gt; 62E1A822  mov         dword ptr [ebx+0Ch],1             This is the failure line
62E1A829  mov         ecx,dword ptr [ebp+0Ch] 
62E1A82C  test        ecx,ecx 
62E1A82E  je          62E1ACE8 
62E1A834  mov         edx,dword ptr [ebp+14h] 
62E1A837  test        edx,edx 
62E1A839  je          62E1ACD8</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm having the same issue with Rails 3.0.3 on Windows using Ruby
1.9.2p0. My site will randomly crash when refreshing the main page.
Debugging with Visual Studio shows the following:&lt;/p&gt;
&lt;p&gt;Unhandled exception at 0x62e1a822 in ruby.exe: 0xC0000005:
Access violation writing location 0x0000000c.&lt;/p&gt;
&lt;p&gt;I then break into the disassembly which doesn't really help me.
Here is the disassembly in case it is meaningful to anyone:&lt;/p&gt;
&lt;p&gt;62E1A809 jmp 62E1A692&lt;br&gt;
62E1A80E xchg ax,ax&lt;br&gt;
62E1A810 push ebp&lt;br&gt;
62E1A811 mov ebp,esp&lt;br&gt;
62E1A813 push edi&lt;br&gt;
62E1A814 push esi&lt;br&gt;
62E1A815 push ebx&lt;br&gt;
62E1A816 sub esp,4Ch&lt;br&gt;
62E1A819 mov ebx,dword ptr [ebp+8]&lt;br&gt;
62E1A81C lea eax,[ebp-19h]&lt;br&gt;
62E1A81F mov dword ptr [ebp-20h],eax&lt;br&gt;
-&amp;gt; 62E1A822 mov dword ptr [ebx+0Ch],1 This is the failure line
62E1A829 mov ecx,dword ptr [ebp+0Ch]&lt;br&gt;
62E1A82C test ecx,ecx&lt;br&gt;
62E1A82E je 62E1ACE8&lt;br&gt;
62E1A834 mov edx,dword ptr [ebp+14h]&lt;br&gt;
62E1A837 test edx,edx&lt;br&gt;
62E1A839 je 62E1ACD8&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-15T18:19:27+00:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;windows 1.9.2&quot;</tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2010-12-15T18:19:47+00:00</updated-at>
      <user-id type="integer">129156</user-id>
      <version type="integer">9</version>
      <user-name>Jason Thomas</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When running my application in production mode: rails server -e production  I have observed the following on rapid refreshes of the application but it does NOT crash:

Started GET &quot;/packets/list.xml&quot; for 162.18.166.125 at 2010-12-15 11:17:57 -0700
  Processing by PacketsController#list as XML
Rendered packets/list.xml.builder (0.0ms)
Completed 200 OK in 0ms (Views: 0.0ms)
[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established connection was aborted by the software in your host machine.
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `write'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `&lt;&lt;'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `_write_data'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:295:in `send_body_string'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:186:in `send_body'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:103:in `send_response'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:86:in `run'
        C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'
[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established connection was aborted by the software in your host machine.
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `eof?'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `run'
        C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'
[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established connection was aborted by the software in your host machine.
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `write'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `&lt;&lt;'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `_write_data'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:295:in `send_body_string'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:186:in `send_body'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:103:in `send_response'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:86:in `run'
        C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'
[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established connection was aborted by the software in your host machine.
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `eof?'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `run'
        C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'
[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established connection was aborted by the software in your host machine.
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `write'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `&lt;&lt;'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `_write_data'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:295:in `send_body_string'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:186:in `send_body'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:103:in `send_response'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:86:in `run'
        C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'
[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established connection was aborted by the software in your host machine.
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `write'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `&lt;&lt;'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `_write_data'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:295:in `send_body_string'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:186:in `send_body'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:103:in `send_response'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:86:in `run'
        C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'


Started GET &quot;/packets/list.xml&quot; for 162.18.166.125 at 2010-12-15 11:19:09 -0700
  Processing by PacketsController#list as XML
Rendered packets/list.xml.builder (15.6ms)
Completed 200 OK in 16ms (Views: 15.6ms)
[2010-12-15 11:19:09] ERROR Errno::ECONNABORTED: An established connection was aborted by the software in your host machine.
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `eof?'
        C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `run'
        C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'</body>
      <body-html>&lt;div&gt;&lt;p&gt;When running my application in production mode: rails server -e
production I have observed the following on rapid refreshes of the
application but it does NOT crash:&lt;/p&gt;
&lt;p&gt;Started GET &quot;/packets/list.xml&quot; for 162.18.166.125 at 2010-12-15
11:17:57 -0700&lt;br&gt;
Processing by PacketsController#list as XML Rendered
packets/list.xml.builder (0.0ms)&lt;br&gt;
Completed 200 OK in 0ms (Views: 0.0ms)&lt;br&gt;
[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established
connection was aborted by the software in your host machine.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `write'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `&amp;lt;&amp;lt;'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `_write_data'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:295:in `send_body_string'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:186:in `send_body'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:103:in `send_response'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:86:in `run'
    C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established
connection was aborted by the software in your host machine.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `eof?'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `run'
    C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established
connection was aborted by the software in your host machine.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `write'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `&amp;lt;&amp;lt;'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `_write_data'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:295:in `send_body_string'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:186:in `send_body'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:103:in `send_response'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:86:in `run'
    C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established
connection was aborted by the software in your host machine.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `eof?'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `run'
    C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established
connection was aborted by the software in your host machine.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `write'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `&amp;lt;&amp;lt;'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `_write_data'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:295:in `send_body_string'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:186:in `send_body'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:103:in `send_response'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:86:in `run'
    C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;[2010-12-15 11:17:57] ERROR Errno::ECONNABORTED: An established
connection was aborted by the software in your host machine.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `write'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `&amp;lt;&amp;lt;'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:323:in `_write_data'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:295:in `send_body_string'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:186:in `send_body'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpresponse.rb:103:in `send_response'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:86:in `run'
    C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Started GET &quot;/packets/list.xml&quot; for 162.18.166.125 at 2010-12-15
11:19:09 -0700&lt;br&gt;
Processing by PacketsController#list as XML Rendered
packets/list.xml.builder (15.6ms)&lt;br&gt;
Completed 200 OK in 16ms (Views: 15.6ms)&lt;br&gt;
[2010-12-15 11:19:09] ERROR Errno::ECONNABORTED: An established
connection was aborted by the software in your host machine.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `eof?'
    C:/Ruby192/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `run'
    C:/Ruby192/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-15T18:23:36+00:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;windows 1.9.2&quot;</tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2010-12-15T18:24:36+00:00</updated-at>
      <user-id type="integer">129156</user-id>
      <version type="integer">10</version>
      <user-name>Jason Thomas</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I can confirm this issue on Windows 7, Rails 3.0.3 and Ruby 1.9.2p136. 

In my application.html.erb i had a reference to a .css file that did not exist in the stylesheets directory

&lt;code&gt;&lt;%= stylesheet_link_tag 'custom', :media =&gt; 'screen' %&gt;&lt;/code&gt;

When I browsed to http://localhost:3000/, WEBrick outputed:

&lt;code&gt;
Started GET &quot;/stylesheet/custom.css&quot; for 127.0.0.1 at 2011-01-05 18:53:44 +0100

ActionController::RoutingError (No route matches &quot;/stylesheet/custom.css&quot;):
&lt;/code&gt;

And after 2-3 requests Ruby crashed. If i remove the reference to the missing stylesheet, the application works fine. 


I also tried crashing the application by requesting http://localhost:3000/stylesheet/custom.css and http://localhost:3000/ in different browser windows a few times (with the reference to the stylesheet removed from application.html.erb), but this did not crash the site. So it seems like some timing issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can confirm this issue on Windows 7, Rails 3.0.3 and Ruby
1.9.2p136.&lt;/p&gt;
&lt;p&gt;In my application.html.erb i had a reference to a .css file that
did not exist in the stylesheets directory&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;%= stylesheet_link_tag 'custom', :media =&amp;gt; 'screen'
%&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When I browsed to &lt;a href=
&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt;, WEBrick
outputed:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br&gt;
Started GET &quot;/stylesheet/custom.css&quot; for 127.0.0.1 at 2011-01-05
18:53:44 +0100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ActionController::RoutingError (No route matches
&quot;/stylesheet/custom.css&quot;):&lt;br&gt;&lt;/p&gt;
&lt;p&gt;And after 2-3 requests Ruby crashed. If i remove the reference
to the missing stylesheet, the application works fine.&lt;/p&gt;
&lt;p&gt;I also tried crashing the application by requesting &lt;a href=
&quot;http://localhost:3000/stylesheet/custom.css&quot;&gt;http://localhost:3000/stylesheet/custom.css&lt;/a&gt;
and &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt; in
different browser windows a few times (with the reference to the
stylesheet removed from application.html.erb), but this did not
crash the site. So it seems like some timing issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-01-05T18:15:56+00:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;windows 1.9.2&quot;</tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2011-01-05T18:16:18+00:00</updated-at>
      <user-id type="integer">131367</user-id>
      <version type="integer">11</version>
      <user-name>Peter Moberg</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I found this on google, and wanted to share with others in the same circumstance.

In the ruby-core thread for this problem, it was stated that this had something to do with the Rails log file.  As a temporary workaround, I added to development.rb the following line:

config.log_level = :fatal

Experimentially I've found that log levels of :debug and :info allow the bug to be triggered, but all other log levels do not.  For me the annoyance is serious enough that I'm willing to switch back and forth between log levels.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I found this on google, and wanted to share with others in the
same circumstance.&lt;/p&gt;
&lt;p&gt;In the ruby-core thread for this problem, it was stated that
this had something to do with the Rails log file. As a temporary
workaround, I added to development.rb the following line:&lt;/p&gt;
&lt;p&gt;config.log_level = :fatal&lt;/p&gt;
&lt;p&gt;Experimentially I've found that log levels of :debug and :info
allow the bug to be triggered, but all other log levels do not. For
me the annoyance is serious enough that I'm willing to switch back
and forth between log levels.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-09T02:29:17+00:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;windows 1.9.2&quot;</tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2011-03-09T02:29:39+00:00</updated-at>
      <user-id type="integer">140509</user-id>
      <version type="integer">12</version>
      <user-name>Zaknafein88</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have been having this problem too, on Windows XP, Rails 3.0.5 and Ruby 1.9.2-p180: Ruby crashes and exits with error code -1073741819.  The crash is 'An unhandled win32 exception occurred in ruby.exe \[ 7952 \]'.  The Visual Studio debugger then says, 'Unhandled exception at 0x62e1a00e in ruby.exe: 0xC0000005: Access violation writing location 0x0000000c.'

In my case I didn't have a missing resource file, but the problem occurred after the log said:
@@@
Started GET &quot;/states.js&quot; for 127.0.0.1 at 2011-04-18 20:14:40 +1200
@@@
This was issued as a result of the following Rails code (this is in the [Spree](https://github.com/spree/spree) code base):
@@@
&lt;%= javascript_include_tag  'checkout', '/states' %&gt;
@@@
The javascript response is (usually) generated by the default action of the states controller.  The crashes stopped when I changed the logging level in config/environments/development.rb:
@@@
config.log_level = :warn
@@@
(Thanks, Zaknafein88!)  A proper fix would be nice. :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have been having this problem too, on Windows XP, Rails 3.0.5
and Ruby 1.9.2-p180: Ruby crashes and exits with error code
-1073741819. The crash is 'An unhandled win32 exception occurred in
ruby.exe [ 7952 ]'. The Visual Studio debugger then says,
'Unhandled exception at 0x62e1a00e in ruby.exe: 0xC0000005: Access
violation writing location 0x0000000c.'&lt;/p&gt;
&lt;p&gt;In my case I didn't have a missing resource file, but the
problem occurred after the log said:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Started GET &quot;/states.js&quot; for 127.0.0.1 at 2011-04-18 20:14:40 +1200&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This was issued as a result of the following Rails code (this is
in the &lt;a href=&quot;https://github.com/spree/spree&quot;&gt;Spree&lt;/a&gt; code
base):&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;%= javascript_include_tag  'checkout', '/states' %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The javascript response is (usually) generated by the default
action of the states controller. The crashes stopped when I changed
the logging level in config/environments/development.rb:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;config.log_level = :warn&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(Thanks, Zaknafein88!) A proper fix would be nice. :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-18T09:34:25+01:00</created-at>
      <creator-id type="integer">115028</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5590</number>
      <permalink>rails-30-crashes-ruby-192p0-on-repeated-browser-refresh</permalink>
      <priority type="integer">1</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;windows 1.9.2&quot;</tag>
      <title>Rails 3.0 crashes Ruby 1.9.2p0 on repeated browser refresh</title>
      <updated-at type="datetime">2011-04-18T09:34:46+01:00</updated-at>
      <user-id type="integer">144127</user-id>
      <version type="integer">13</version>
      <user-name>iviney</user-name>
      <creator-name>sponeil</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5590</url>
      <priority-name>High</priority-name>
    </version>
  </versions>
</ticket>
