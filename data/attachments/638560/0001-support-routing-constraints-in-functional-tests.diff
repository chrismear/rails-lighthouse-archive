From 95ef714679e5c6653ffe2eee692d8e04ee43f3e0 Mon Sep 17 00:00:00 2001
From: Andrew White <andyw@pixeltrix.co.uk>
Date: Fri, 20 Aug 2010 17:33:33 +0100
Subject: [PATCH] Support routing constraints in functional tests

Extend assert_recognizes and assert_generates to support passing
full urls as the path argument. This allows testing of routing
constraints such as subdomain and host within functional tests.

[#5005 state:resolved]
---
 .../lib/action_dispatch/routing/route_set.rb       |    4 +-
 .../action_dispatch/testing/assertions/routing.rb  |   51 ++++++++++++++-----
 actionpack/test/controller/routing_test.rb         |    2 +-
 3 files changed, 40 insertions(+), 17 deletions(-)

diff --git a/actionpack/lib/action_dispatch/routing/route_set.rb b/actionpack/lib/action_dispatch/routing/route_set.rb
index d23b580..b531cc1 100644
--- a/actionpack/lib/action_dispatch/routing/route_set.rb
+++ b/actionpack/lib/action_dispatch/routing/route_set.rb
@@ -494,7 +494,7 @@ module ActionDispatch
 
       def recognize_path(path, environment = {})
         method = (environment[:method] || "GET").to_s.upcase
-        path = Rack::Mount::Utils.normalize_path(path)
+        path = Rack::Mount::Utils.normalize_path(path) unless path =~ %r{://}
 
         begin
           env = Rack::MockRequest.env_for(path, {:method => method})
@@ -502,7 +502,7 @@ module ActionDispatch
           raise ActionController::RoutingError, e.message
         end
 
-        req = Rack::Request.new(env)
+        req = @request_class.new(env)
         @set.recognize(req) do |route, matches, params|
           params.each do |key, value|
             if value.is_a?(String)
diff --git a/actionpack/lib/action_dispatch/testing/assertions/routing.rb b/actionpack/lib/action_dispatch/testing/assertions/routing.rb
index 9338fa9..5a3ffda 100644
--- a/actionpack/lib/action_dispatch/testing/assertions/routing.rb
+++ b/actionpack/lib/action_dispatch/testing/assertions/routing.rb
@@ -1,3 +1,4 @@
+require 'uri'
 require 'active_support/core_ext/hash/diff'
 require 'active_support/core_ext/hash/indifferent_access'
 
@@ -40,14 +41,7 @@ module ActionDispatch
       #   # Check a Simply RESTful generated route
       #   assert_recognizes list_items_url, 'items/list'
       def assert_recognizes(expected_options, path, extras={}, message=nil)
-        if path.is_a? Hash
-          request_method = path[:method]
-          path           = path[:path]
-        else
-          request_method = nil
-        end
-
-        request = recognized_request_for(path, request_method)
+        request = recognized_request_for(path)
 
         expected_options = expected_options.clone
         extras.each_key { |key| expected_options.delete key } unless extras.nil?
@@ -77,7 +71,16 @@ module ActionDispatch
       #   # Asserts that the generated route gives us our custom route
       #   assert_generates "changesets/12", { :controller => 'scm', :action => 'show_diff', :revision => "12" }
       def assert_generates(expected_path, options, defaults={}, extras = {}, message=nil)
-        expected_path = "/#{expected_path}" unless expected_path[0] == ?/
+        if expected_path =~ %r{://}
+          begin
+            uri = URI.parse(expected_path)
+            expected_path = uri.path.to_s.empty? ? "/" : uri.path
+          rescue URI::InvalidURIError => e
+            raise ActionController::RoutingError, e.message
+          end
+        else
+          expected_path = "/#{expected_path}" unless expected_path.first == '/'
+        end
         # Load routes.rb if it hasn't been loaded.
 
         generated_path, extra_keys = @routes.generate_extras(options, defaults)
@@ -177,15 +180,35 @@ module ActionDispatch
 
       private
         # Recognizes the route for a given path.
-        def recognized_request_for(path, request_method = nil)
-          path = "/#{path}" unless path.first == '/'
+        def recognized_request_for(path)
+          if path.is_a?(Hash)
+            method = path[:method]
+            path   = path[:path]
+          else
+            method = :get
+          end
 
           # Assume given controller
           request = ActionController::TestRequest.new
-          request.env["REQUEST_METHOD"] = request_method.to_s.upcase if request_method
-          request.path = path
 
-          params = @routes.recognize_path(path, { :method => request.method })
+          if path =~ %r{://}
+            begin
+              uri = URI.parse(path)
+              request.env["rack.url_scheme"] = uri.scheme || "http"
+              request.host = uri.host if uri.host
+              request.port = uri.port if uri.port
+              request.path = uri.path.to_s.empty? ? "/" : uri.path
+            rescue URI::InvalidURIError => e
+              raise ActionController::RoutingError, e.message
+            end
+          else
+            path = "/#{path}" unless path.first == "/"
+            request.path = path
+          end
+
+          request.request_method = method if method
+
+          params = @routes.recognize_path(path, { :method => method })
           request.path_parameters = params.with_indifferent_access
 
           request
diff --git a/actionpack/test/controller/routing_test.rb b/actionpack/test/controller/routing_test.rb
index fc85b01..a8c74a6 100644
--- a/actionpack/test/controller/routing_test.rb
+++ b/actionpack/test/controller/routing_test.rb
@@ -956,7 +956,7 @@ class RouteSetTest < ActiveSupport::TestCase
     params = set.recognize_path("/people", :method => :put)
     assert_equal("update", params[:action])
 
-    assert_raise(ActionController::RoutingError) {
+    assert_raise(ActionController::UnknownHttpMethod) {
       set.recognize_path("/people", :method => :bacon)
     }
 
-- 
1.7.1

