<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-29T16:28:09+01:00</created-at>
  <creator-id type="integer">643</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5240</number>
  <permalink>release-candidate-should-mean-feature-freeze</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>Release Candidate should mean feature freeze</title>
  <updated-at type="datetime">2010-07-29T17:53:33+01:00</updated-at>
  <user-id type="integer">40263</user-id>
  <version type="integer">4</version>
  <user-name>Neeraj Singh</user-name>
  <creator-name>Trevor Turk</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5240</url>
  <priority-name>Low</priority-name>
  <original-body>Shouldn't publishing a &quot;release candidate&quot; (RC) mean freezing the development of new features and focusing on the arbitrage of critical, show-stopping bugs in the aim of a speedy &quot;official&quot; release? 

From Wikipedia:

http://en.wikipedia.org/wiki/Software_release_life_cycle#Release_candidate

&gt; The term release candidate (RC) refers to a version with potential to be a final product, ready to release unless fatal bugs emerge. In this stage of product stabilization, all product features have been designed, coded and tested through one or more beta cycles with no known showstopper-class bug.

I've been watching the development of Rails and Bundler in anticipation of a Rails RC so that I could start upgrading and testing my existing Rails apps in earnest. I'd been testing with beta releases previously, but with 4 beta releases of Rails and 10 beta releases of Bundler, it became too difficult for me to track. 

I expected to see some last minute bug fixes after these RCs, but some of the commits since the RC tags look like new features to me:

http://github.com/rails/rails/compare/v3.0.0_RC...master

http://github.com/carlhuda/bundler/compare/1.0.0.rc.1...master

...and so I'm wondering if I should just wait for an &quot;official&quot; release before upgrading and testing in earnest. 

My fear is that there are other early adopter / beta testers that have been put off by this as well, and I think that losing this kind of &quot;in the wild&quot; testing may reduce the quality of &quot;official&quot; releases and eventually reduce adoption in general.</original-body>
  <latest-body>Shouldn't publishing a &quot;release candidate&quot; (RC) mean freezing the development of new features and focusing on the arbitrage of critical, show-stopping bugs in the aim of a speedy &quot;official&quot; release? 

From Wikipedia:

http://en.wikipedia.org/wiki/Software_release_life_cycle#Release_candidate

&gt; The term release candidate (RC) refers to a version with potential to be a final product, ready to release unless fatal bugs emerge. In this stage of product stabilization, all product features have been designed, coded and tested through one or more beta cycles with no known showstopper-class bug.

I've been watching the development of Rails and Bundler in anticipation of a Rails RC so that I could start upgrading and testing my existing Rails apps in earnest. I'd been testing with beta releases previously, but with 4 beta releases of Rails and 10 beta releases of Bundler, it became too difficult for me to track. 

I expected to see some last minute bug fixes after these RCs, but some of the commits since the RC tags look like new features to me:

http://github.com/rails/rails/compare/v3.0.0_RC...master

http://github.com/carlhuda/bundler/compare/1.0.0.rc.1...master

...and so I'm wondering if I should just wait for an &quot;official&quot; release before upgrading and testing in earnest. 

My fear is that there are other early adopter / beta testers that have been put off by this as well, and I think that losing this kind of &quot;in the wild&quot; testing may reduce the quality of &quot;official&quot; releases and eventually reduce adoption in general.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Shouldn't publishing a &quot;release candidate&quot; (RC) mean freezing
the development of new features and focusing on the arbitrage of
critical, show-stopping bugs in the aim of a speedy &quot;official&quot;
release?&lt;/p&gt;
&lt;p&gt;From Wikipedia:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://en.wikipedia.org/wiki/Software_release_life_cycle#Release_candidate&quot;&gt;
http://en.wikipedia.org/wiki/Software_release_life_cycle#Release_ca...&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The term release candidate (RC) refers to a version with
potential to be a final product, ready to release unless fatal bugs
emerge. In this stage of product stabilization, all product
features have been designed, coded and tested through one or more
beta cycles with no known showstopper-class bug.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've been watching the development of Rails and Bundler in
anticipation of a Rails RC so that I could start upgrading and
testing my existing Rails apps in earnest. I'd been testing with
beta releases previously, but with 4 beta releases of Rails and 10
beta releases of Bundler, it became too difficult for me to
track.&lt;/p&gt;
&lt;p&gt;I expected to see some last minute bug fixes after these RCs,
but some of the commits since the RC tags look like new features to
me:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/rails/compare/v3.0.0_RC...master&quot;&gt;http://github.com/rails/rails/compare/v3.0.0_RC...master&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/carlhuda/bundler/compare/1.0.0.rc.1...master&quot;&gt;http://github.com/carlhuda/bundler/compare/1.0.0.rc.1...master&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;...and so I'm wondering if I should just wait for an &quot;official&quot;
release before upgrading and testing in earnest.&lt;/p&gt;
&lt;p&gt;My fear is that there are other early adopter / beta testers
that have been put off by this as well, and I think that losing
this kind of &quot;in the wild&quot; testing may reduce the quality of
&quot;official&quot; releases and eventually reduce adoption in general.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Shouldn't publishing a &quot;release candidate&quot; (RC) mean freezing the development of new features and focusing on the arbitrage of critical, show-stopping bugs in the aim of a speedy &quot;official&quot; release? 

From Wikipedia:

http://en.wikipedia.org/wiki/Software_release_life_cycle#Release_candidate

&gt; The term release candidate (RC) refers to a version with potential to be a final product, ready to release unless fatal bugs emerge. In this stage of product stabilization, all product features have been designed, coded and tested through one or more beta cycles with no known showstopper-class bug.

I've been watching the development of Rails and Bundler in anticipation of a Rails RC so that I could start upgrading and testing my existing Rails apps in earnest. I'd been testing with beta releases previously, but with 4 beta releases of Rails and 10 beta releases of Bundler, it became too difficult for me to track. 

I expected to see some last minute bug fixes after these RCs, but some of the commits since the RC tags look like new features to me:

http://github.com/rails/rails/compare/v3.0.0_RC...master

http://github.com/carlhuda/bundler/compare/1.0.0.rc.1...master

...and so I'm wondering if I should just wait for an &quot;official&quot; release before upgrading and testing in earnest. 

My fear is that there are other early adopter / beta testers that have been put off by this as well, and I think that losing this kind of &quot;in the wild&quot; testing may reduce the quality of &quot;official&quot; releases and eventually reduce adoption in general.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Shouldn't publishing a &quot;release candidate&quot; (RC) mean freezing
the development of new features and focusing on the arbitrage of
critical, show-stopping bugs in the aim of a speedy &quot;official&quot;
release?&lt;/p&gt;
&lt;p&gt;From Wikipedia:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://en.wikipedia.org/wiki/Software_release_life_cycle#Release_candidate&quot;&gt;
http://en.wikipedia.org/wiki/Software_release_life_cycle#Release_ca...&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The term release candidate (RC) refers to a version with
potential to be a final product, ready to release unless fatal bugs
emerge. In this stage of product stabilization, all product
features have been designed, coded and tested through one or more
beta cycles with no known showstopper-class bug.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've been watching the development of Rails and Bundler in
anticipation of a Rails RC so that I could start upgrading and
testing my existing Rails apps in earnest. I'd been testing with
beta releases previously, but with 4 beta releases of Rails and 10
beta releases of Bundler, it became too difficult for me to
track.&lt;/p&gt;
&lt;p&gt;I expected to see some last minute bug fixes after these RCs,
but some of the commits since the RC tags look like new features to
me:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/rails/compare/v3.0.0_RC...master&quot;&gt;http://github.com/rails/rails/compare/v3.0.0_RC...master&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/carlhuda/bundler/compare/1.0.0.rc.1...master&quot;&gt;http://github.com/carlhuda/bundler/compare/1.0.0.rc.1...master&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;...and so I'm wondering if I should just wait for an &quot;official&quot;
release before upgrading and testing in earnest.&lt;/p&gt;
&lt;p&gt;My fear is that there are other early adopter / beta testers
that have been put off by this as well, and I think that losing
this kind of &quot;in the wild&quot; testing may reduce the quality of
&quot;official&quot; releases and eventually reduce adoption in general.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-29T16:28:09+01:00</created-at>
      <creator-id type="integer">643</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5240</number>
      <permalink>release-candidate-should-mean-feature-freeze</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Release Candidate should mean feature freeze</title>
      <updated-at type="datetime">2010-07-29T16:28:12+01:00</updated-at>
      <user-id type="integer">643</user-id>
      <version type="integer">1</version>
      <user-name>Trevor Turk</user-name>
      <creator-name>Trevor Turk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5240</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Trevor,

I'll only speak to bundler here. We released an RC build of bundler when we honestly felt like there were no more showstopper bugs, and it felt plausible to release. There were a couple of features (like the --production flag), that we planned to add in 1.1. After doing so, we got a torrent of people who used bundler for the first time and were extremely confused by certain flags (like --disable-shared-gems). 

Specifically, the correct practices for deploying bundler are somewhat different than using it in development, and it takes a few (documented) flags to get it working smoothly on deploy. Because of the amount of bug reports we received that could be resolved by providing a clearer default path on deployment, we took the plunge and added the feature.

Specifically with regard to --disable-shared-gems, the option was mostly an internal option that switched off using locally installed gems as a source during installation time, but the name implied that it resulted in complete isolation. People, for instance, were doing `bundle install --disable-shared-gems` and expecting it to result in isolation, when it was actually a nonsense incantation that was just causing pain.

When we looked at all the uses, we realized that people either install to their system (and therefore don't care about isolation) or are installing to a local directory (and therefore do care about isolation). We removed the option, clearly warning users who are still using it that it can be safely removed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Trevor,&lt;/p&gt;
&lt;p&gt;I'll only speak to bundler here. We released an RC build of
bundler when we honestly felt like there were no more showstopper
bugs, and it felt plausible to release. There were a couple of
features (like the --production flag), that we planned to add in
1.1. After doing so, we got a torrent of people who used bundler
for the first time and were extremely confused by certain flags
(like --disable-shared-gems).&lt;/p&gt;
&lt;p&gt;Specifically, the correct practices for deploying bundler are
somewhat different than using it in development, and it takes a few
(documented) flags to get it working smoothly on deploy. Because of
the amount of bug reports we received that could be resolved by
providing a clearer default path on deployment, we took the plunge
and added the feature.&lt;/p&gt;
&lt;p&gt;Specifically with regard to --disable-shared-gems, the option
was mostly an internal option that switched off using locally
installed gems as a source during installation time, but the name
implied that it resulted in complete isolation. People, for
instance, were doing &lt;code&gt;bundle install
--disable-shared-gems&lt;/code&gt; and expecting it to result in
isolation, when it was actually a nonsense incantation that was
just causing pain.&lt;/p&gt;
&lt;p&gt;When we looked at all the uses, we realized that people either
install to their system (and therefore don't care about isolation)
or are installing to a local directory (and therefore do care about
isolation). We removed the option, clearly warning users who are
still using it that it can be safely removed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-29T16:48:43+01:00</created-at>
      <creator-id type="integer">643</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5240</number>
      <permalink>release-candidate-should-mean-feature-freeze</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Release Candidate should mean feature freeze</title>
      <updated-at type="datetime">2010-07-29T16:48:44+01:00</updated-at>
      <user-id type="integer">12714</user-id>
      <version type="integer">2</version>
      <user-name>Yehuda Katz (wycats)</user-name>
      <creator-name>Trevor Turk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5240</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks for the reply, and I'm glad to hear you say all of that. 

Please feel free to close this ticket -- I just wanted to make sure we had the same idea of what a release candidate is supposed to be, and I sounds like we do. 

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for the reply, and I'm glad to hear you say all of
that.&lt;/p&gt;
&lt;p&gt;Please feel free to close this ticket -- I just wanted to make
sure we had the same idea of what a release candidate is supposed
to be, and I sounds like we do.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-29T17:12:21+01:00</created-at>
      <creator-id type="integer">643</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5240</number>
      <permalink>release-candidate-should-mean-feature-freeze</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Release Candidate should mean feature freeze</title>
      <updated-at type="datetime">2010-07-29T17:12:25+01:00</updated-at>
      <user-id type="integer">643</user-id>
      <version type="integer">3</version>
      <user-name>Trevor Turk</user-name>
      <creator-name>Trevor Turk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5240</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-29T17:53:28+01:00</created-at>
      <creator-id type="integer">643</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5240</number>
      <permalink>release-candidate-should-mean-feature-freeze</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Release Candidate should mean feature freeze</title>
      <updated-at type="datetime">2010-07-29T17:53:33+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">4</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Trevor Turk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5240</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
