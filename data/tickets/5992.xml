<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-17T14:36:07+00:00</created-at>
  <creator-id type="integer">3040</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5992</number>
  <permalink>extreme-performance-problem-with-activerecord-queries-with-date-ranges-in-ruby-18</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>arel performance rails3 regression</tag>
  <title>Extreme performance problem with ActiveRecord queries with date ranges in Ruby 1.8</title>
  <updated-at type="datetime">2010-11-19T13:31:08+00:00</updated-at>
  <user-id type="integer">21241</user-id>
  <version type="integer">5</version>
  <user-name>Magnus Bergmark</user-name>
  <creator-name>Rolf Timmermans</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5992</url>
  <priority-name>Low</priority-name>
  <original-body>As also reported by some people in the [announcement blog post of Rails 3.0.3](http://weblog.rubyonrails.org/2010/11/15/rails-3-0-3-faster-active-record-plus-plenty-of-fixes), there is a severe performance problem when using ActiveRecord queries with Ruby 1.8 and Rails 3.0.3 (Arel 2.x) like these:

    Account.where(:created_at =&gt; 2.months.ago..1.month.ago)

This is caused by a problem in ARel where ranges are enumerated in Ruby 1.8 by calling Range#min and Range#max. These methods are simply mixed in by Enumerable in 1.8, and therefore internally call to_a. When Ranges are very wide, which often is the case for dates, compiling such queries takes a very long time.

I have created a patch that can be found in [this pull request in the ARel repository](https://github.com/rails/arel/pull/13). Please let me know where the fix can be improved so this issue can be resolved as soon as possible hopefully.</original-body>
  <latest-body>As also reported by some people in the [announcement blog post of Rails 3.0.3](http://weblog.rubyonrails.org/2010/11/15/rails-3-0-3-faster-active-record-plus-plenty-of-fixes), there is a severe performance problem when using ActiveRecord queries with Ruby 1.8 and Rails 3.0.3 (Arel 2.x) like these:

    Account.where(:created_at =&gt; 2.months.ago..1.month.ago)

This is caused by a problem in ARel where ranges are enumerated in Ruby 1.8 by calling Range#min and Range#max. These methods are simply mixed in by Enumerable in 1.8, and therefore internally call to_a. When Ranges are very wide, which often is the case for dates, compiling such queries takes a very long time.

I have created a patch that can be found in [this pull request in the ARel repository](https://github.com/rails/arel/pull/13). Please let me know where the fix can be improved so this issue can be resolved as soon as possible hopefully.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;As also reported by some people in the &lt;a href=
&quot;http://weblog.rubyonrails.org/2010/11/15/rails-3-0-3-faster-active-record-plus-plenty-of-fixes&quot;&gt;
announcement blog post of Rails 3.0.3&lt;/a&gt;, there is a severe
performance problem when using ActiveRecord queries with Ruby 1.8
and Rails 3.0.3 (Arel 2.x) like these:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Account.where(:created_at =&amp;gt; 2.months.ago..1.month.ago)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is caused by a problem in ARel where ranges are enumerated
in Ruby 1.8 by calling Range#min and Range#max. These methods are
simply mixed in by Enumerable in 1.8, and therefore internally call
to_a. When Ranges are very wide, which often is the case for dates,
compiling such queries takes a very long time.&lt;/p&gt;
&lt;p&gt;I have created a patch that can be found in &lt;a href=
&quot;https://github.com/rails/arel/pull/13&quot;&gt;this pull request in the
ARel repository&lt;/a&gt;. Please let me know where the fix can be
improved so this issue can be resolved as soon as possible
hopefully.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>As also reported by some people in the [announcement blog post of Rails 3.0.3](http://weblog.rubyonrails.org/2010/11/15/rails-3-0-3-faster-active-record-plus-plenty-of-fixes), there is a severe performance problem when using ActiveRecord queries with Ruby 1.8 and Rails 3.0.3 (Arel 2.x) like these:

    Account.where(:created_at =&gt; 2.months.ago..1.month.ago)

This is caused by a problem in ARel where ranges are enumerated in Ruby 1.8 by calling Range#min and Range#max. These methods are simply mixed in by Enumerable in 1.8, and therefore internally call to_a. When Ranges are very wide, which often is the case for dates, compiling such queries takes a very long time.

I have created a patch that can be found in [this pull request in the ARel repository](https://github.com/rails/arel/pull/13). Please let me know where the fix can be improved so this issue can be resolved as soon as possible hopefully.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As also reported by some people in the &lt;a href=
&quot;http://weblog.rubyonrails.org/2010/11/15/rails-3-0-3-faster-active-record-plus-plenty-of-fixes&quot;&gt;
announcement blog post of Rails 3.0.3&lt;/a&gt;, there is a severe
performance problem when using ActiveRecord queries with Ruby 1.8
and Rails 3.0.3 (Arel 2.x) like these:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Account.where(:created_at =&amp;gt; 2.months.ago..1.month.ago)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is caused by a problem in ARel where ranges are enumerated
in Ruby 1.8 by calling Range#min and Range#max. These methods are
simply mixed in by Enumerable in 1.8, and therefore internally call
to_a. When Ranges are very wide, which often is the case for dates,
compiling such queries takes a very long time.&lt;/p&gt;
&lt;p&gt;I have created a patch that can be found in &lt;a href=
&quot;https://github.com/rails/arel/pull/13&quot;&gt;this pull request in the
ARel repository&lt;/a&gt;. Please let me know where the fix can be
improved so this issue can be resolved as soon as possible
hopefully.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-17T14:36:07+00:00</created-at>
      <creator-id type="integer">3040</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5992</number>
      <permalink>extreme-performance-problem-with-activerecord-queries-with-date-ranges-in-ruby-18</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;arel rails3 performance regression&quot;</tag>
      <title>Extreme performance problem with ActiveRecord queries with date ranges in Ruby 1.8</title>
      <updated-at type="datetime">2010-11-17T14:50:30+00:00</updated-at>
      <user-id type="integer">3040</user-id>
      <version type="integer">1</version>
      <user-name>Rolf Timmermans</user-name>
      <creator-name>Rolf Timmermans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5992</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>And just to illustrate how extreme &quot;extreme&quot; is, I have conducted the following benchmark with a simple model named Account with a default created_at column:

    require &quot;benchmark&quot;

    Benchmark.bm do |bm|
      bm.report { Account.where(:created_at =&gt; 2.months.ago..1.month.ago) }
    end


Result for Ruby 1.8 with Rails 3.0.3:


          user     system      total        real
    175.780000   1.490000 177.270000 (177.330136)


Result for Ruby 1.8 with Rails 3.0.3 and the patch I linked to above:



          user     system      total        real
      0.010000   0.010000   0.020000 (  0.031937)</body>
      <body-html>&lt;div&gt;&lt;p&gt;And just to illustrate how extreme &quot;extreme&quot; is, I have
conducted the following benchmark with a simple model named Account
with a default created_at column:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require &quot;benchmark&quot;

Benchmark.bm do |bm|
  bm.report { Account.where(:created_at =&amp;gt; 2.months.ago..1.month.ago) }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Result for Ruby 1.8 with Rails 3.0.3:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      user     system      total        real
175.780000   1.490000 177.270000 (177.330136)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Result for Ruby 1.8 with Rails 3.0.3 and the patch I linked to
above:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      user     system      total        real
  0.010000   0.010000   0.020000 (  0.031937)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-17T15:00:43+00:00</created-at>
      <creator-id type="integer">3040</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5992</number>
      <permalink>extreme-performance-problem-with-activerecord-queries-with-date-ranges-in-ruby-18</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;arel rails3 performance regression&quot;</tag>
      <title>Extreme performance problem with ActiveRecord queries with date ranges in Ruby 1.8</title>
      <updated-at type="datetime">2010-11-17T15:00:45+00:00</updated-at>
      <user-id type="integer">3040</user-id>
      <version type="integer">2</version>
      <user-name>Rolf Timmermans</user-name>
      <creator-name>Rolf Timmermans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5992</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-17T15:25:30+00:00</created-at>
      <creator-id type="integer">3040</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;arel rails3 performance regression\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5992</number>
      <permalink>extreme-performance-problem-with-activerecord-queries-with-date-ranges-in-ruby-18</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>arel performance rails3 regression</tag>
      <title>Extreme performance problem with ActiveRecord queries with date ranges in Ruby 1.8</title>
      <updated-at type="datetime">2010-11-17T15:25:32+00:00</updated-at>
      <user-id type="integer">3040</user-id>
      <version type="integer">3</version>
      <user-name>Rolf Timmermans</user-name>
      <creator-name>Rolf Timmermans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5992</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks. I've merged your changes, and I'll release a new version.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks. I've merged your changes, and I'll release a new
version.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-17T16:45:56+00:00</created-at>
      <creator-id type="integer">3040</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5992</number>
      <permalink>extreme-performance-problem-with-activerecord-queries-with-date-ranges-in-ruby-18</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>arel performance rails3 regression</tag>
      <title>Extreme performance problem with ActiveRecord queries with date ranges in Ruby 1.8</title>
      <updated-at type="datetime">2010-11-17T16:45:57+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">4</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Rolf Timmermans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5992</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>How could this be &quot;Low&quot; priority?</body>
      <body-html>&lt;div&gt;&lt;p&gt;How could this be &quot;Low&quot; priority?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-19T13:31:03+00:00</created-at>
      <creator-id type="integer">3040</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5992</number>
      <permalink>extreme-performance-problem-with-activerecord-queries-with-date-ranges-in-ruby-18</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>arel performance rails3 regression</tag>
      <title>Extreme performance problem with ActiveRecord queries with date ranges in Ruby 1.8</title>
      <updated-at type="datetime">2010-11-19T13:31:08+00:00</updated-at>
      <user-id type="integer">21241</user-id>
      <version type="integer">5</version>
      <user-name>Magnus Bergmark</user-name>
      <creator-name>Rolf Timmermans</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5992</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
