From f27bfb29c491293d2e37cdd0cf3569419e28f584 Mon Sep 17 00:00:00 2001
From: Neeraj Singh <neerajdotname@gmail.com>
Date: Thu, 12 Aug 2010 21:37:48 -0400
Subject: [PATCH] While creating a new record using has_many create method
 default scope of child should be respected.

author.posts.create should take into account default_scope
defined on post.

[#3939: state:resolved]
---
 .../associations/association_collection.rb         |    7 ++++++-
 activerecord/lib/active_record/relation.rb         |   11 +++++++----
 .../associations/has_many_associations_test.rb     |   19 +++++++++++++++++++
 activerecord/test/models/bulb.rb                   |    7 +++++++
 activerecord/test/models/car.rb                    |    1 +
 activerecord/test/schema/schema.rb                 |    5 +++++
 6 files changed, 45 insertions(+), 5 deletions(-)
 create mode 100644 activerecord/test/models/bulb.rb

diff --git a/activerecord/lib/active_record/associations/association_collection.rb b/activerecord/lib/active_record/associations/association_collection.rb
index b5159ee..132e9cf 100644
--- a/activerecord/lib/active_record/associations/association_collection.rb
+++ b/activerecord/lib/active_record/associations/association_collection.rb
@@ -492,7 +492,12 @@ module ActiveRecord
         def create_record(attrs)
           attrs.update(@reflection.options[:conditions]) if @reflection.options[:conditions].is_a?(Hash)
           ensure_owner_is_not_new
-          record = @reflection.klass.send(:with_scope, :create => construct_scope[:create]) do
+
+          _scope = self.construct_scope[:create]
+          csm = @reflection.klass.send(:current_scoped_methods)
+          options = (csm.blank? || !_scope.is_a?(Hash)) ? _scope : _scope.merge(csm.where_values_hash)
+
+          record = @reflection.klass.send(:with_scope, :create => options) do
             @reflection.build_association(attrs)
           end
           if block_given?
diff --git a/activerecord/lib/active_record/relation.rb b/activerecord/lib/active_record/relation.rb
index 30be723..242e63b 100644
--- a/activerecord/lib/active_record/relation.rb
+++ b/activerecord/lib/active_record/relation.rb
@@ -316,16 +316,19 @@ module ActiveRecord
       @to_sql ||= arel.to_sql
     end
 
-    def scope_for_create
-      @scope_for_create ||= begin
-        @create_with_value || Hash[
-          @where_values.find_all { |w|
+    def where_values_hash
+          Hash[@where_values.find_all { |w|
             w.respond_to?(:operator) && w.operator == :==
           }.map { |where|
             [where.operand1.name,
              where.operand2.respond_to?(:value) ?
              where.operand2.value : where.operand2]
         }]
+    end
+
+    def scope_for_create
+      @scope_for_create ||= begin
+        @create_with_value || where_values_hash
       end
     end
 
diff --git a/activerecord/test/cases/associations/has_many_associations_test.rb b/activerecord/test/cases/associations/has_many_associations_test.rb
index ac2021c..5cefcd0 100644
--- a/activerecord/test/cases/associations/has_many_associations_test.rb
+++ b/activerecord/test/cases/associations/has_many_associations_test.rb
@@ -13,6 +13,8 @@ require 'models/reader'
 require 'models/tagging'
 require 'models/invoice'
 require 'models/line_item'
+require 'models/car'
+require 'models/bulb'
 
 class HasManyAssociationsTestForCountWithFinderSql < ActiveRecord::TestCase
   class Invoice < ActiveRecord::Base
@@ -47,6 +49,23 @@ class HasManyAssociationsTest < ActiveRecord::TestCase
     Client.destroyed_client_ids.clear
   end
 
+  def test_create_from_association_should_respect_default_scope
+    car = Car.create(:name => 'honda')
+    assert_equal 'honda', car.name
+
+    bulb = Bulb.create
+    assert_equal 'defaulty', bulb.name
+
+    bulb = car.bulbs.build
+    assert_equal 'defaulty', bulb.name
+
+    bulb = car.bulbs.create
+    assert_equal 'defaulty', bulb.name
+
+    bulb = car.bulbs.create(:name => 'exotic')
+    assert_equal 'exotic', bulb.name
+  end
+
   def test_create_resets_cached_counters
     person = Person.create!(:first_name => 'tenderlove')
     post   = Post.first
diff --git a/activerecord/test/models/bulb.rb b/activerecord/test/models/bulb.rb
new file mode 100644
index 0000000..9eefc58
--- /dev/null
+++ b/activerecord/test/models/bulb.rb
@@ -0,0 +1,7 @@
+class Bulb < ActiveRecord::Base
+  
+  default_scope :conditions => {:name => 'defaulty' }
+  
+  belongs_to :car
+
+end
diff --git a/activerecord/test/models/car.rb b/activerecord/test/models/car.rb
index faf4e6c..903ec53 100644
--- a/activerecord/test/models/car.rb
+++ b/activerecord/test/models/car.rb
@@ -1,4 +1,5 @@
 class Car < ActiveRecord::Base
+  has_many :bulbs
   has_many :tyres
   has_many :engines
   has_many :wheels, :as => :wheelable
diff --git a/activerecord/test/schema/schema.rb b/activerecord/test/schema/schema.rb
index c72f7b2..4eb7aea 100644
--- a/activerecord/test/schema/schema.rb
+++ b/activerecord/test/schema/schema.rb
@@ -198,6 +198,11 @@ ActiveRecord::Schema.define do
     t.integer :car_id
   end
 
+  create_table :bulbs, :force => true do |t|
+    t.integer :car_id
+    t.string  :name
+  end
+
   create_table :entrants, :force => true do |t|
     t.string  :name, :null => false
     t.integer :course_id, :null => false
-- 
1.7.2

