<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-27T21:05:31+00:00</created-at>
  <creator-id type="integer">17345</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2364</number>
  <permalink>ignore_nil-as-a-better-alternative-to-try</permalink>
  <priority type="integer">1525</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>3.0 activesupport feature improvement</tag>
  <title>ignore_nil{} as a better alternative to try()</title>
  <updated-at type="datetime">2009-07-21T16:01:14+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">4</version>
  <user-name>Pratik</user-name>
  <creator-name>Steven Soroka</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2364</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>ignore_nil is actually short for &quot;ignore no method error on nil&quot;, referring to the error you get if
you call a method on an object that is unexpectedly nil.  This can happen if you chain method calls
together and one of the methods returns a nil.

ignore_nil{} will return nil if you get a NoMethodError exception on NilClass.
any other exception type is reraised so that code inside ignore_nil{} blocks don't become a black-
hole.

==== Examples

Without ignore_nil:
@@@ ruby
  @user &amp;&amp; @user.address &amp;&amp; @user.address.street
@@@
or worse:
@@@ ruby
  @user.address.street rescue nil
@@@
(worse because it catches everything! even if address doesn't have a street method!)

With ignore_nil:
@@@ ruby
  ignore_nil { @user.address.street }
@@@</original-body>
  <latest-body>ignore_nil is actually short for &quot;ignore no method error on nil&quot;, referring to the error you get if
you call a method on an object that is unexpectedly nil.  This can happen if you chain method calls
together and one of the methods returns a nil.

ignore_nil{} will return nil if you get a NoMethodError exception on NilClass.
any other exception type is reraised so that code inside ignore_nil{} blocks don't become a black-
hole.

==== Examples

Without ignore_nil:
@@@ ruby
  @user &amp;&amp; @user.address &amp;&amp; @user.address.street
@@@
or worse:
@@@ ruby
  @user.address.street rescue nil
@@@
(worse because it catches everything! even if address doesn't have a street method!)

With ignore_nil:
@@@ ruby
  ignore_nil { @user.address.street }
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ignore_nil is actually short for &quot;ignore no method error on
nil&quot;, referring to the error you get if you call a method on an
object that is unexpectedly nil. This can happen if you chain
method calls together and one of the methods returns a nil.&lt;/p&gt;
&lt;p&gt;ignore_nil{} will return nil if you get a NoMethodError
exception on NilClass. any other exception type is reraised so that
code inside ignore_nil{} blocks don't become a black- hole.&lt;/p&gt;
&lt;p&gt;==== Examples&lt;/p&gt;
&lt;p&gt;Without ignore_nil:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  @user &amp;amp;&amp;amp; @user.address &amp;amp;&amp;amp; @user.address.street
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or worse:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  @user.address.street rescue nil
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(worse because it catches everything! even if address doesn't
have a street method!)&lt;/p&gt;
&lt;p&gt;With ignore_nil:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  ignore_nil { @user.address.street }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ignore_nil is actually short for &quot;ignore no method error on nil&quot;, referring to the error you get if
you call a method on an object that is unexpectedly nil.  This can happen if you chain method calls
together and one of the methods returns a nil.

ignore_nil{} will return nil if you get a NoMethodError exception on NilClass.
any other exception type is reraised so that code inside ignore_nil{} blocks don't become a black-
hole.

==== Examples

Without ignore_nil:
@@@ ruby
  @user &amp;&amp; @user.address &amp;&amp; @user.address.street
@@@
or worse:
@@@ ruby
  @user.address.street rescue nil
@@@
(worse because it catches everything! even if address doesn't have a street method!)

With ignore_nil:
@@@ ruby
  ignore_nil { @user.address.street }
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;ignore_nil is actually short for &quot;ignore no method error on
nil&quot;, referring to the error you get if you call a method on an
object that is unexpectedly nil. This can happen if you chain
method calls together and one of the methods returns a nil.&lt;/p&gt;
&lt;p&gt;ignore_nil{} will return nil if you get a NoMethodError
exception on NilClass. any other exception type is reraised so that
code inside ignore_nil{} blocks don't become a black- hole.&lt;/p&gt;
&lt;p&gt;==== Examples&lt;/p&gt;
&lt;p&gt;Without ignore_nil:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  @user &amp;amp;&amp;amp; @user.address &amp;amp;&amp;amp; @user.address.street
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or worse:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  @user.address.street rescue nil
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(worse because it catches everything! even if address doesn't
have a street method!)&lt;/p&gt;
&lt;p&gt;With ignore_nil:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  ignore_nil { @user.address.street }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-27T21:05:31+00:00</created-at>
      <creator-id type="integer">17345</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2364</number>
      <permalink>ignore_nil-as-a-better-alternative-to-try</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 activesupport feature improvement</tag>
      <title>ignore_nil{} as a better alternative to try()</title>
      <updated-at type="datetime">2009-03-27T21:05:36+00:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">1</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Steven Soroka</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2364</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Your example could be written as follows with try

    @user.try(:address).try(:street)

What makes using ignore_nil an improvement?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Your example could be written as follows with try&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@user.try(:address).try(:street)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What makes using ignore_nil an improvement?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-21T05:25:11+01:00</created-at>
      <creator-id type="integer">17345</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2364</number>
      <permalink>ignore_nil-as-a-better-alternative-to-try</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 activesupport feature improvement</tag>
      <title>ignore_nil{} as a better alternative to try()</title>
      <updated-at type="datetime">2009-07-21T05:25:13+01:00</updated-at>
      <user-id type="integer">23779</user-id>
      <version type="integer">2</version>
      <user-name>Joel Chippindale</user-name>
      <creator-name>Steven Soroka</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2364</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't think .try().try().try().try() is attractive, and it's definitely not DRY.

Much easier to edit and maintain a block around the code than .try sprinkled throughout method calls in the code.

No reason we couldn't support both, I'd think.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think .try().try().try().try() is attractive, and it's
definitely not DRY.&lt;/p&gt;
&lt;p&gt;Much easier to edit and maintain a block around the code than
.try sprinkled throughout method calls in the code.&lt;/p&gt;
&lt;p&gt;No reason we couldn't support both, I'd think.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-21T15:10:56+01:00</created-at>
      <creator-id type="integer">17345</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2364</number>
      <permalink>ignore_nil-as-a-better-alternative-to-try</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 activesupport feature improvement</tag>
      <title>ignore_nil{} as a better alternative to try()</title>
      <updated-at type="datetime">2009-07-21T15:11:00+01:00</updated-at>
      <user-id type="integer">17345</user-id>
      <version type="integer">3</version>
      <user-name>Steven Soroka</user-name>
      <creator-name>Steven Soroka</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2364</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't think you should chain try(). So I'm happy with that looking ugly. Don't think something like ignore_nil belongs in core.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think you should chain try(). So I'm happy with that
looking ugly. Don't think something like ignore_nil belongs in
core.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-21T16:01:11+01:00</created-at>
      <creator-id type="integer">17345</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2364</number>
      <permalink>ignore_nil-as-a-better-alternative-to-try</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>3.0 activesupport feature improvement</tag>
      <title>ignore_nil{} as a better alternative to try()</title>
      <updated-at type="datetime">2009-07-21T16:01:14+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Steven Soroka</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2364</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>5348cd670480495b8f83692936738fa5eb12d7ac</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-27T21:07:36+00:00</created-at>
      <filename>ignore_nil_support.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">105174</id>
      <size type="integer">3735</size>
      <uploader-id type="integer">17345</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/105174/ignore_nil_support.diff</url>
    </attachment>
  </attachments>
</ticket>
