From 3c616e113cdb64edc5b84c739e8b729e4c38d9c4 Mon Sep 17 00:00:00 2001
From: Kieran Pilkington <kieran@katipo.co.nz>
Date: Sun, 9 Aug 2009 16:11:49 +1200
Subject: [PATCH] bugfix: allow deep merge on hash with indifferent access (ported from 2-3 patch)

---
 .../active_support/hash_with_indifferent_access.rb |   15 ++++++
 activesupport/test/core_ext/hash_ext_test.rb       |   11 ++++++
 2 files changed, 47 insertions(+), 21 deletions(-)

diff --git a/activesupport/lib/active_support/hash_with_indifferent_access.rb b/activesupport/lib/active_support/hash_with_indifferent_access.rb
index 543dab4..cf8f0be 100644
--- a/activesupport/lib/active_support/hash_with_indifferent_access.rb
+++ b/activesupport/lib/active_support/hash_with_indifferent_access.rb
@@ -107,6 +107,21 @@ module ActiveSupport
       super(convert_key(key))
     end

+    # Performs a deep_merge on a HashWithIndifferentAccess, returning a new HashWithIndifferentAccess with +self+ and +other_hash+ merged recursively.
+    def deep_merge(other_hash)
+      target = dup
+      other_hash.each_pair do |k,v|
+        target[k].is_a?(Hash) && v.is_a?(Hash) ? target[k] = target[k].deep_merge(v) : target[k] = v
+      end
+      target
+    end
+
+    # Returns a new HashWithIndifferentAccess with +self+ and +other_hash+ merged recursively.
+    # Modifies the receiver in place.
+    def deep_merge!(other_hash)
+      replace(deep_merge(other_hash))
+    end
+
     def stringify_keys!; self end
     def symbolize_keys!; self end
     def to_options!; self end
diff --git a/activesupport/test/core_ext/hash_ext_test.rb b/activesupport/test/core_ext/hash_ext_test.rb
index ece5466..a568f25 100644
--- a/activesupport/test/core_ext/hash_ext_test.rb
+++ b/activesupport/test/core_ext/hash_ext_test.rb
@@ -265,6 +265,17 @@ class HashExtTest < Test::Unit::TestCase
     assert_equal expected, hash_1
   end

+  def test_deep_merge_on_indifferent
+    hash_1 = HashWithIndifferentAccess.new({ :a => "a", :b => "b", :c => { :c1 => "c1", :c2 => "c2", :c3 => { :d1 => "d1" } } })
+    hash_2 = HashWithIndifferentAccess.new({ :a => 1, :c => { :c1 => 2, :c3 => { :d2 => "d2" } } })
+    hash_3 = { :a => 1, :c => { :c1 => 2, :c3 => { :d2 => "d2" } } }
+    expected = { "a" => 1, "b" => "b", "c" => { "c1" => 2, "c2" => "c2", "c3" => { "d1" => "d1", "d2" => "d2" } } }
+    assert_equal expected, hash_1.deep_merge(hash_2)
+    assert_equal expected, hash_1.deep_merge(hash_3)
+    hash_1.deep_merge!(hash_2)
+    assert_equal expected, hash_1
+  end
+
   def test_reverse_merge
     defaults = { :a => "x", :b => "y", :c => 10 }.freeze
     options  = { :a => 1, :b => 2 }
--
1.6.3.3

