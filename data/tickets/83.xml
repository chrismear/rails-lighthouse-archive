<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-01T17:57:57+01:00</created-at>
  <creator-id type="integer">10014</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">83</number>
  <permalink>prototype-insertion-deprecation-and-custom-functions</permalink>
  <priority type="integer">10548</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>actionpack edge insertion patch prototype</tag>
  <title>Prototype insertion - deprecation and custom functions</title>
  <updated-at type="datetime">2008-05-01T20:44:11+01:00</updated-at>
  <user-id type="integer">83</user-id>
  <version type="integer">3</version>
  <user-name>DHH</user-name>
  <creator-name>James Le Cuirot</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/83</url>
  <priority-name nil="true"></priority-name>
  <original-body>The Prototype Insertion classes have been marked as deprecated in version 1.6.0. The part of the updateContent function that deals with insertion currently looks like this.

@@@ javascript
      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }
@@@

I'm not sure whether the &quot;else&quot; option has been provided solely for backwards compatibility or whether it was intended to also allow custom insertion functions. The Prototype API documentation makes no mention of using it in this way.

Either way, I'd like this option to stay. I've found that it is the only clean way to reliably perform two scriptaculous effects before and after the content is replaced. Using effect queues, as suggested in http://dev.rubyonrails.org/ticket/2620, is not sufficient because even though this separates the effects, it does not prevent Prototype from replacing the content before the first effect has completed.

However, the Rails helpers currently only support the deprecated Insertion classes. This patch tackles both the deprecation issue and the custom function issue in a backwards compatible way, as long as Prototype 1.6.0 or greater is used. The existing :position option takes priority over the new :insertion option. The former is passed as a string, whereas the latter is passed as-is, thereby allowing a custom function to be given. Here is an example. I have tested this with Edge and 2.0.2.

@@@ ruby
remote_form_for :foo, @foo, :url =&gt; { ... }, :update =&gt; 'content', :insertion =&gt; &quot;function(receiver, response_text) { &quot; + visual_effect(:blind_up, 'content', :afterFinish =&gt; &quot;function() { receiver.update(response_text);&quot; + visual_effect(:blind_down, 'content') + &quot; }&quot;) + &quot; }&quot; do |f|
@@@</original-body>
  <latest-body>The Prototype Insertion classes have been marked as deprecated in version 1.6.0. The part of the updateContent function that deals with insertion currently looks like this.

@@@ javascript
      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }
@@@

I'm not sure whether the &quot;else&quot; option has been provided solely for backwards compatibility or whether it was intended to also allow custom insertion functions. The Prototype API documentation makes no mention of using it in this way.

Either way, I'd like this option to stay. I've found that it is the only clean way to reliably perform two scriptaculous effects before and after the content is replaced. Using effect queues, as suggested in http://dev.rubyonrails.org/ticket/2620, is not sufficient because even though this separates the effects, it does not prevent Prototype from replacing the content before the first effect has completed.

However, the Rails helpers currently only support the deprecated Insertion classes. This patch tackles both the deprecation issue and the custom function issue in a backwards compatible way, as long as Prototype 1.6.0 or greater is used. The existing :position option takes priority over the new :insertion option. The former is passed as a string, whereas the latter is passed as-is, thereby allowing a custom function to be given. Here is an example. I have tested this with Edge and 2.0.2.

@@@ ruby
remote_form_for :foo, @foo, :url =&gt; { ... }, :update =&gt; 'content', :insertion =&gt; &quot;function(receiver, response_text) { &quot; + visual_effect(:blind_up, 'content', :afterFinish =&gt; &quot;function() { receiver.update(response_text);&quot; + visual_effect(:blind_down, 'content') + &quot; }&quot;) + &quot; }&quot; do |f|
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
The Prototype Insertion classes have been marked as deprecated in version 1.6.0. The part of the updateContent function that deals with insertion currently looks like this.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I'm not sure whether the &quot;else&quot; option has been provided solely for backwards compatibility or whether it was intended to also allow custom insertion functions. The Prototype API documentation makes no mention of using it in this way.
&lt;/p&gt;&lt;p&gt;
Either way, I'd like this option to stay. I've found that it is the only clean way to reliably perform two scriptaculous effects before and after the content is replaced. Using effect queues, as suggested in &lt;a href=&quot;http://dev.rubyonrails.org/ticket/2620&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;, is not sufficient because even though this separates the effects, it does not prevent Prototype from replacing the content before the first effect has completed.
&lt;/p&gt;&lt;p&gt;
However, the Rails helpers currently only support the deprecated Insertion classes. This patch tackles both the deprecation issue and the custom function issue in a backwards compatible way, as long as Prototype 1.6.0 or greater is used. The existing :position option takes priority over the new :insertion option. The former is passed as a string, whereas the latter is passed as-is, thereby allowing a custom function to be given. Here is an example. I have tested this with Edge and 2.0.2.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;remote_form_for :foo, @foo, :url =&amp;gt; { ... }, :update =&amp;gt; 'content', :insertion =&amp;gt; &amp;quot;function(receiver, response_text) { &amp;quot; + visual_effect(:blind_up, 'content', :afterFinish =&amp;gt; &amp;quot;function() { receiver.update(response_text);&amp;quot; + visual_effect(:blind_down, 'content') + &amp;quot; }&amp;quot;) + &amp;quot; }&amp;quot; do |f|&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The Prototype Insertion classes have been marked as deprecated in version 1.6.0. The part of the updateContent function that deals with insertion currently looks like this.

@@@ javascript
      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }
@@@

I'm not sure whether the &quot;else&quot; option has been provided solely for backwards compatibility or whether it was intended to also allow custom insertion functions. The Prototype API documentation makes no mention of using it in this way.

Either way, I'd like this option to stay. I've found that it is the only clean way to reliably perform two scriptaculous effects before and after the content is replaced. Using effect queues, as suggested in http://dev.rubyonrails.org/ticket/2620, is not sufficient because even though this separates the effects, it does not prevent Prototype from replacing the content before the first effect has completed.

However, the Rails helpers currently only support the deprecated Insertion classes. This patch tackles both the deprecation issue and the custom function issue in a backwards compatible way, as long as Prototype 1.6.0 or greater is used. The existing :position option takes priority over the new :insertion option. The former is passed as a string, whereas the latter is passed as-is, thereby allowing a custom function to be given. Here is an example. I have tested this with Edge and 2.0.2.

@@@ ruby
remote_form_for :foo, @foo, :url =&gt; { ... }, :update =&gt; 'content', :insertion =&gt; &quot;function(receiver, response_text) { &quot; + visual_effect(:blind_up, 'content', :afterFinish =&gt; &quot;function() { receiver.update(response_text);&quot; + visual_effect(:blind_down, 'content') + &quot; }&quot;) + &quot; }&quot; do |f|
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The Prototype Insertion classes have been marked as deprecated in version 1.6.0. The part of the updateContent function that deals with insertion currently looks like this.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I'm not sure whether the &quot;else&quot; option has been provided solely for backwards compatibility or whether it was intended to also allow custom insertion functions. The Prototype API documentation makes no mention of using it in this way.
&lt;/p&gt;&lt;p&gt;
Either way, I'd like this option to stay. I've found that it is the only clean way to reliably perform two scriptaculous effects before and after the content is replaced. Using effect queues, as suggested in &lt;a href=&quot;http://dev.rubyonrails.org/ticket/2620&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;, is not sufficient because even though this separates the effects, it does not prevent Prototype from replacing the content before the first effect has completed.
&lt;/p&gt;&lt;p&gt;
However, the Rails helpers currently only support the deprecated Insertion classes. This patch tackles both the deprecation issue and the custom function issue in a backwards compatible way, as long as Prototype 1.6.0 or greater is used. The existing :position option takes priority over the new :insertion option. The former is passed as a string, whereas the latter is passed as-is, thereby allowing a custom function to be given. Here is an example. I have tested this with Edge and 2.0.2.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;remote_form_for :foo, @foo, :url =&amp;gt; { ... }, :update =&amp;gt; 'content', :insertion =&amp;gt; &amp;quot;function(receiver, response_text) { &amp;quot; + visual_effect(:blind_up, 'content', :afterFinish =&amp;gt; &amp;quot;function() { receiver.update(response_text);&amp;quot; + visual_effect(:blind_down, 'content') + &amp;quot; }&amp;quot;) + &amp;quot; }&amp;quot; do |f|&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T17:57:57+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">83</number>
      <permalink>prototype-insertion-deprecation-and-custom-functions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Prototype insertion - deprecation and custom functions</title>
      <updated-at type="datetime">2008-05-01T17:57:57+01:00</updated-at>
      <user-id type="integer">10014</user-id>
      <version type="integer">1</version>
      <user-name>James Le Cuirot</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/83</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Just had a thought. The ideal way to do this would probably be to ditch :position and have :insertion pass the value as a string or as-is depending on whether the value itself is a symbol or a string respectively. That would break backwards compatibility though.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Just had a thought. The ideal way to do this would probably be to ditch :position and have :insertion pass the value as a string or as-is depending on whether the value itself is a symbol or a string respectively. That would break backwards compatibility though.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T18:11:11+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">83</number>
      <permalink>prototype-insertion-deprecation-and-custom-functions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Prototype insertion - deprecation and custom functions</title>
      <updated-at type="datetime">2008-05-01T18:11:11+01:00</updated-at>
      <user-id type="integer">10014</user-id>
      <version type="integer">2</version>
      <user-name>James Le Cuirot</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/83</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Chewi, Prototype now has its own Lighthouse: http://prototype.lighthouseapp.com</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hi Chewi, Prototype now has its own Lighthouse: &lt;a href=&quot;http://prototype.lighthouseapp.com&quot;&gt;http://prototype.lighthouseapp.com&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-01T20:44:11+01:00</created-at>
      <creator-id type="integer">10014</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">83</number>
      <permalink>prototype-insertion-deprecation-and-custom-functions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Prototype insertion - deprecation and custom functions</title>
      <updated-at type="datetime">2008-05-01T20:44:11+01:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">3</version>
      <user-name>DHH</user-name>
      <creator-name>James Le Cuirot</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/83</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ddf6254c57f69430de4c9b2810cde8ac36a49456</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-01T17:57:57+01:00</created-at>
      <filename>insertion.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">21064</id>
      <size type="integer">1001</size>
      <uploader-id type="integer">10014</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/21064/insertion.diff</url>
    </attachment>
  </attachments>
</ticket>
